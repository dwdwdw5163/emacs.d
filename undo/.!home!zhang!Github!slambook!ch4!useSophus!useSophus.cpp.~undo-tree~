(undo-tree-save-format-version . 1)
"2e482c563eea7305ea0e6f68f7b427c32b68889d"
[nil nil nil nil (26039 46173 714210 516000) 0 nil]
([nil nil ((#("Core" 0 4 (face font-lock-string-face fontified t c-in-sws t)) . -77) (undo-tree-id130 . -4) (undo-tree-id131 . -4) (undo-tree-id132 . -4) (undo-tree-id133 . -4) (undo-tree-id134 . -4) (undo-tree-id135 . -4) (undo-tree-id136 . -4) (undo-tree-id137 . -4) 81 (t 26038 13156 28306 426000)) nil (26039 46173 714209 204000) 0 nil])
([nil nil ((#("Eigen/" 0 5 (face font-lock-string-face fontified t c-in-sws t) 5 6 (face font-lock-string-face c-in-sws t fontified t)) . -71) (undo-tree-id114 . -6) (undo-tree-id115 . -5) (undo-tree-id116 . -6) (undo-tree-id117 . -6) (undo-tree-id118 . -6) (undo-tree-id119 . -6) (undo-tree-id120 . -6) (undo-tree-id121 . -6) (undo-tree-id122 . -6) (undo-tree-id123 . -6) (undo-tree-id124 . -6) (undo-tree-id125 . -6) (undo-tree-id126 . -6) (undo-tree-id127 . -6) (undo-tree-id128 . -6) (undo-tree-id129 . -6) 77) nil (26039 46173 714203 419000) 0 nil])
([nil nil ((71 . 73)) nil (26039 46173 714193 688000) 0 nil])
([nil nil ((#("E" 0 1 (face font-lock-string-face c-in-sws t fontified t)) . -71) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (#("i" 0 1 (face font-lock-string-face c-in-sws t fontified t)) . -72) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) 73) nil (26039 46173 714191 342000) 0 nil])
([nil nil ((71 . 74)) nil (26039 46173 714074 200000) 0 nil])
([nil nil ((71 . 78) (#("e>" 0 1 (fontified nil c-in-sws t) 1 2 (c-in-sws t face (rainbow-delimiters-depth-1-face font-lock-string-face) fontified nil)) . 71) (undo-tree-id40 . -2) (undo-tree-id41 . 1) (71 . 72) (#("eigen3/" 0 7 (fontified nil c-in-sws t)) . -71) (71 . 78) (#("eig" 0 1 (face font-lock-string-face c-in-sws t fontified t) 1 2 (face font-lock-string-face c-in-sws t fontified t) 2 3 (face font-lock-string-face c-in-sws t fontified t)) . -71) (undo-tree-id42 . -3) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -2) (undo-tree-id53 . -2) (undo-tree-id54 . -2) (undo-tree-id55 . -2) (undo-tree-id56 . -2) (undo-tree-id57 . -3) (undo-tree-id58 . -3) (undo-tree-id59 . -3) (undo-tree-id60 . -3) (undo-tree-id61 . -3) (undo-tree-id62 . -3) (undo-tree-id63 . -3) (undo-tree-id64 . -3) (undo-tree-id65 . -3) (undo-tree-id66 . -3) (undo-tree-id67 . -3) 74) nil (26039 46173 714072 496000) 0 nil])
([nil nil ((78 . 79)) nil (26039 46173 714055 39000) 0 nil])
([nil nil ((78 . 84) (#("E" 0 1 (fontified nil c-in-sws t)) . 78) (undo-tree-id19 . -1) (78 . 79) (#("Eigen/" 0 6 (fontified nil c-in-sws t)) . -78) (undo-tree-id20 . -6) (78 . 84) (#("E" 0 1 (face font-lock-string-face c-in-sws t fontified t)) . -78) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) 79) nil (26039 46173 714053 357000) 0 nil])
([nil nil ((84 . 85)) nil (26039 46173 714039 471000) 0 nil])
([nil nil ((84 . 89) (#("C" 0 1 (fontified nil c-in-sws t)) . 84) (undo-tree-id15 . -1) (84 . 85) (#("Core>" 0 5 (fontified nil c-in-sws t)) . -84) (undo-tree-id16 . -5) (84 . 89) (#("C" 0 1 (face font-lock-string-face c-in-sws t fontified t)) . -84) (undo-tree-id17 . -1) (undo-tree-id18 . -1) 85) nil (26039 46173 714038 74000) 0 nil])
([nil nil ((100 . 105)) nil (26039 46173 714033 443000) 0 nil])
([nil nil ((105 . 106)) nil (26039 46173 714032 782000) 0 nil])
([nil nil ((106 . 107)) nil (26039 46173 714032 180000) 0 nil])
([nil nil ((107 . 108)) nil (26039 46173 714031 380000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face c-in-sws t fontified t)) . -107) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) 108) nil (26039 46173 714029 30000) 0 nil])
([nil nil ((2247 . 2248) 107) nil (26039 46173 713848 948000) 0 nil])
([nil nil ((134 . 135) (t 26039 46173 735989 156000)) nil (26039 46198 408539 527000) 0 nil])
([nil nil ((134 . 138)) nil (26039 46198 408538 848000) 0 nil])
([nil nil ((#("h" 0 1 (face font-lock-string-face c-in-sws t fontified t)) . -137) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) 138) nil (26039 46198 408537 855000) 0 nil])
([nil nil ((134 . 141) (#("so sophus/" 0 2 (fontified nil c-in-sws t) 2 3 (c-in-sws t face font-lock-string-face fontified nil) 3 10 (c-in-sws t face font-lock-string-face fontified nil)) . 134) (undo-tree-id364 . -10) (undo-tree-id365 . -10) (undo-tree-id366 . -10) (undo-tree-id367 . -10) (undo-tree-id368 . -10) (undo-tree-id369 . -10) (undo-tree-id370 . -10) (undo-tree-id371 . -9) (undo-tree-id372 . -3) (undo-tree-id373 . -3) (undo-tree-id374 . -3) (undo-tree-id375 . 8) (134 . 136) (#("sophus/" 0 7 (fontified nil c-in-sws t)) . -134) (134 . 141) (#("sop" 0 1 (face font-lock-string-face c-in-sws t fontified t) 1 2 (face font-lock-string-face c-in-sws t fontified t) 2 3 (face font-lock-string-face c-in-sws t fontified t)) . -134) (undo-tree-id376 . -3) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -2) (undo-tree-id389 . -2) (undo-tree-id390 . -2) (undo-tree-id391 . -2) (undo-tree-id392 . -2) (undo-tree-id393 . -2) (undo-tree-id394 . -2) (undo-tree-id395 . -2) (undo-tree-id396 . -2) (undo-tree-id397 . -2) (undo-tree-id398 . -2) (undo-tree-id399 . -2) (undo-tree-id400 . -2) (undo-tree-id401 . -3) (undo-tree-id402 . -3) (undo-tree-id403 . -3) (undo-tree-id404 . -3) (undo-tree-id405 . -3) (undo-tree-id406 . -3) (undo-tree-id407 . -3) (undo-tree-id408 . -3) (undo-tree-id409 . -3) (undo-tree-id410 . -3) (undo-tree-id411 . -3) (undo-tree-id412 . -3) (undo-tree-id413 . -3) (undo-tree-id414 . -3) (undo-tree-id415 . -3) (undo-tree-id416 . -3) (undo-tree-id417 . -3) (undo-tree-id418 . -3) (undo-tree-id419 . -3) (undo-tree-id420 . -3) (undo-tree-id421 . -3) (undo-tree-id422 . -3) (undo-tree-id423 . -3) (undo-tree-id424 . -3) (undo-tree-id425 . -3) (undo-tree-id426 . -3) (undo-tree-id427 . -3) 137) nil (26039 46198 408529 775000) 0 nil])
([nil nil ((141 . 142)) nil (26039 46198 408494 259000) 0 nil])
([nil nil ((141 . 142)) nil (26039 46198 408493 557000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-string-face c-in-sws t fontified t)) . -141) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) 142) nil (26039 46198 408492 600000) 0 nil])
([nil nil ((141 . 143)) nil (26039 46198 408483 435000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-string-face c-in-sws t fontified t)) . -141) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (#("o" 0 1 (face font-lock-string-face c-in-sws t fontified t)) . -142) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (#(" " 0 1 (face font-lock-string-face c-in-sws t fontified t)) . -143) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . 1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) 144) nil (26039 46198 408480 846000) 0 nil])
([nil nil ((146 . 148)) nil (26039 46198 408440 949000) 0 nil])
([nil nil ((#("[" 0 1 (face font-lock-string-face c-in-sws t fontified t)) . -146) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (#("[" 0 1 (face font-lock-string-face c-in-sws t fontified t)) . -147) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) 148) nil (26039 46198 408439 474000) 0 nil])
([nil nil ((146 . 148)) nil (26039 46198 412974 971000) 0 nil])
([nil nil ((172 . 174)) nil (26039 46201 138654 476000) 0 nil] [nil nil ((141 . 149) (#("so3.so3" 0 3 (face font-lock-string-face c-in-sws t fontified nil) 3 4 (c-in-sws t face font-lock-string-face fontified nil) 4 7 (fontified nil)) . 141) (undo-tree-id138 . -4) (undo-tree-id139 . 7) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -2) (undo-tree-id143 . -2) (undo-tree-id144 . -2) (undo-tree-id145 . -2) (undo-tree-id146 . -2) (undo-tree-id147 . -2) (undo-tree-id148 . -2) (undo-tree-id149 . -3) (undo-tree-id150 . -4) (undo-tree-id151 . -4) (undo-tree-id152 . -4) (undo-tree-id153 . -4) (undo-tree-id154 . -4) (undo-tree-id155 . -4) (undo-tree-id156 . -4) (undo-tree-id157 . -4) (undo-tree-id158 . -4) (undo-tree-id159 . -4) (undo-tree-id160 . -4) (undo-tree-id161 . -4) (undo-tree-id162 . -4) (undo-tree-id163 . -4) (undo-tree-id164 . -4) (undo-tree-id165 . -4) (undo-tree-id166 . -4) (undo-tree-id167 . -4) (undo-tree-id168 . -4) (undo-tree-id169 . -4) (undo-tree-id170 . -4) (undo-tree-id171 . -4) (undo-tree-id172 . -4) (undo-tree-id173 . -4) (undo-tree-id174 . -4) (undo-tree-id175 . -4) (undo-tree-id176 . -4) (undo-tree-id177 . -4) (undo-tree-id178 . -4) (undo-tree-id179 . -4) (undo-tree-id180 . -4) (undo-tree-id181 . -4) (undo-tree-id182 . -4) (undo-tree-id183 . -4) (undo-tree-id184 . -4) (undo-tree-id185 . -4) (undo-tree-id186 . -4) (undo-tree-id187 . -4) (undo-tree-id188 . -4) (undo-tree-id189 . -4) (undo-tree-id190 . -4) (undo-tree-id191 . -4) (undo-tree-id192 . -4) (undo-tree-id193 . -4) (undo-tree-id194 . -4) (undo-tree-id195 . -4) (undo-tree-id196 . -4) (undo-tree-id197 . -4) (undo-tree-id198 . -4) (undo-tree-id199 . -4) (undo-tree-id200 . -4) (undo-tree-id201 . -4) (undo-tree-id202 . -4) (undo-tree-id203 . -4) (undo-tree-id204 . -4) (undo-tree-id205 . -4) (undo-tree-id206 . -4) (undo-tree-id207 . -4) (undo-tree-id208 . -4) (undo-tree-id209 . -4) (145 . 153) (#("hpp" 0 1 (face font-lock-string-face c-in-sws t fontified t) 1 2 (face font-lock-string-face c-in-sws t fontified t) 2 3 (face font-lock-string-face c-in-sws t fontified t)) . -145) (undo-tree-id210 . -3) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -2) (undo-tree-id237 . -2) (undo-tree-id238 . -2) (undo-tree-id239 . -2) (undo-tree-id240 . -3) (undo-tree-id241 . -3) (undo-tree-id242 . -3) (undo-tree-id243 . -3) (undo-tree-id244 . -3) (undo-tree-id245 . -3) (undo-tree-id246 . -3) (undo-tree-id247 . -3) (undo-tree-id248 . -3) (undo-tree-id249 . -3) (undo-tree-id250 . -3) (undo-tree-id251 . -3) (undo-tree-id252 . -3) (undo-tree-id253 . -3) (undo-tree-id254 . -3) (undo-tree-id255 . -3) (undo-tree-id256 . -3) (undo-tree-id257 . -3) (undo-tree-id258 . -3) (undo-tree-id259 . -3) (undo-tree-id260 . -3) (undo-tree-id261 . -3) (undo-tree-id262 . -3) (undo-tree-id263 . -3) (undo-tree-id264 . -3) (undo-tree-id265 . -3) (undo-tree-id266 . -3) (undo-tree-id267 . -3) (undo-tree-id268 . -3) (undo-tree-id269 . -3) 148) ((145 . 148) (#("so3.hpp\"" 0 3 (fontified nil) 3 7 (fontified nil) 7 8 (face font-lock-string-face fontified nil)) . 145) (141 . 148) (#("so3.hpp\"" 0 8 (face font-lock-string-face fontified t c-in-sws t)) . 141)) (26039 46198 408418 264000) 0 nil])
([nil nil ((123 . 123) (123 . 124) (t 26039 46201 149320 911000)) nil (26039 46437 321169 477000) 0 nil])
nil
([nil nil ((123 . 124)) nil (26039 46437 321168 658000) 0 nil])
([nil nil ((124 . 126)) nil (26039 46437 321167 941000) 0 nil])
([nil nil ((apply yas--snippet-revive 124 134 #s(yas--snippet nil nil #s(yas--exit 133 nil) 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 133 nil) 0 nil nil nil nil)) (124 . 134) (#("include \"$0\"" 0 12 (fontified nil)) . 124) (undo-tree-id140 . -12) (124 . 136) (#("in" 0 2 (fontified nil c-in-sws t)) . 124) (undo-tree-id141 . -2) (124 . 126) (#("include \"header\"" 0 16 (fontified nil)) . -124) (undo-tree-id142 . -16) (124 . 140) (#("in" 0 1 (face font-lock-preprocessor-face c-in-sws t fontified t) 1 2 (face font-lock-preprocessor-face c-in-sws t fontified t)) . -124) (undo-tree-id143 . -2) (undo-tree-id144 . -2) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -2) (undo-tree-id151 . -2) (undo-tree-id152 . -2) (undo-tree-id153 . -2) (undo-tree-id154 . -2) (undo-tree-id155 . -2) (undo-tree-id156 . -2) 126) nil (26039 46437 321166 347000) 0 nil])
([nil nil ((133 . 134)) nil (26039 46437 321151 49000) 0 nil])
([nil nil ((#("E" 0 1 (face font-lock-string-face c-in-sws t fontified t)) . -133) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) 134) nil (26039 46437 321150 165000) 0 nil])
([nil nil ((133 . 134)) nil (26039 46437 321144 925000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-string-face c-in-sws t fontified t)) . -133) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) 134) nil (26039 46437 321143 647000) 0 nil])
([nil nil ((133 . 140) (#("\"" 0 1 (c-in-sws t face font-lock-string-face fontified nil)) . 133) (undo-tree-id114 . -1) (undo-tree-id115 . 1) (#("eigen3/" 0 7 (fontified nil c-in-sws t)) . -133) (133 . 140)) nil (26039 46437 321133 640000) 0 nil])
([nil nil ((140 . 141)) nil (26039 46437 321130 876000) 0 nil])
([nil nil ((140 . 146) (#("E" 0 1 (fontified nil)) . 140) (140 . 141) (#("Eigen/" 0 6 (fontified nil)) . -140) (140 . 146) (#("E" 0 1 (face font-lock-string-face fontified t)) . -140) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) 141) nil (26039 46437 321129 389000) 0 nil])
([nil nil ((146 . 147)) nil (26039 46437 321118 705000) 0 nil])
([nil nil ((146 . 152) (#("D" 0 1 (fontified nil)) . 146) (146 . 147) (#("Dense\"" 0 6 (fontified nil c-in-sws t)) . -146) (undo-tree-id92 . -6) (146 . 152) (#("D" 0 1 (c-in-sws t face font-lock-string-face fontified t)) . -146) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) 147) nil (26039 46437 321116 997000) 0 nil])
([nil nil ((#("#include \"eigen3/Eigen/Dense\"" 0 1 (face font-lock-preprocessor-face c-in-sws t c-is-sws t fontified t) 1 8 (face font-lock-preprocessor-face c-in-sws t fontified t) 8 9 (c-in-sws t fontified t) 9 10 (face font-lock-string-face c-in-sws t fontified t) 10 17 (face font-lock-string-face c-in-sws t fontified t) 17 23 (face font-lock-string-face c-in-sws t fontified t) 23 29 (face font-lock-string-face fontified t c-in-sws t)) . 123) (undo-tree-id1 . -29) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -10) (undo-tree-id15 . -10) (undo-tree-id16 . -10) (undo-tree-id17 . -10) (undo-tree-id18 . -10) (undo-tree-id19 . -10) (undo-tree-id20 . -10) (undo-tree-id21 . -10) (undo-tree-id22 . -10) (undo-tree-id23 . -10) (undo-tree-id24 . -10) (undo-tree-id25 . -10) (undo-tree-id26 . -10) (undo-tree-id27 . -10) (undo-tree-id28 . -10) (undo-tree-id29 . -10) (undo-tree-id30 . -10) (undo-tree-id31 . -10) (undo-tree-id32 . -10) (undo-tree-id33 . -10) (undo-tree-id34 . -10) (undo-tree-id35 . -10) (undo-tree-id36 . -17) (undo-tree-id37 . -17) (undo-tree-id38 . -17) (undo-tree-id39 . -17) (undo-tree-id40 . -17) (undo-tree-id41 . -17) (undo-tree-id42 . -17) (undo-tree-id43 . -17) (undo-tree-id44 . -17) (undo-tree-id45 . -17) (undo-tree-id46 . -17) (undo-tree-id47 . -17) (undo-tree-id48 . -17) (undo-tree-id49 . -17) (undo-tree-id50 . -17) (undo-tree-id51 . -23) (undo-tree-id52 . -23) (undo-tree-id53 . -23) (undo-tree-id54 . -23) (undo-tree-id55 . -29) (undo-tree-id56 . -29) (undo-tree-id57 . -29) (undo-tree-id58 . -29) (undo-tree-id59 . -29) (undo-tree-id60 . -29) (undo-tree-id61 . -29) (undo-tree-id62 . -29) (undo-tree-id63 . -29) (undo-tree-id64 . -29) (undo-tree-id65 . -29) (undo-tree-id66 . -29) (undo-tree-id67 . -29) (undo-tree-id68 . -29) (undo-tree-id69 . -29) (undo-tree-id70 . -29) (undo-tree-id71 . -29) (undo-tree-id72 . -29) (undo-tree-id73 . -28) (undo-tree-id74 . -28) (undo-tree-id75 . -28) (undo-tree-id76 . -28) (undo-tree-id77 . -28) (undo-tree-id78 . -28) (undo-tree-id79 . -28) (undo-tree-id80 . -28) (undo-tree-id81 . -28) (undo-tree-id82 . -29) (undo-tree-id83 . -29) (undo-tree-id84 . -29) (undo-tree-id85 . -29) (undo-tree-id86 . -29) (undo-tree-id87 . -29) (undo-tree-id88 . -29) (undo-tree-id89 . -29) (undo-tree-id90 . -29) (undo-tree-id91 . -29)) nil (26039 46437 320929 666000) 0 nil])
([nil nil ((#("
" 0 1 (c-is-sws t fontified t)) . 123) (undo-tree-id0 . -1)) nil (26039 46437 320872 553000) 0 nil])
([nil nil ((347 . 348) (t 26039 46875 202615 110000)) nil (26039 47077 671536 171000) 0 nil])
([nil nil ((344 . 348) (#("SO3d" 0 4 (fontified nil)) . 344) (344 . 348) (#("SO3d" 0 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -344) (undo-tree-id0 . -4) (undo-tree-id1 . -3) (undo-tree-id2 . -4) (undo-tree-id3 . -4) (undo-tree-id4 . -4) (undo-tree-id5 . -4) (undo-tree-id6 . -4) (undo-tree-id7 . -4) (undo-tree-id8 . -4) 348) nil (26039 47077 671533 779000) 0 nil])
([nil nil ((416 . 417)) nil (26039 47077 671506 171000) 0 nil])
([nil nil ((519 . 520)) nil (26039 47077 671501 969000) 0 nil])
([nil nil ((617 . 619) (t 26039 47077 682603 383000)) nil (26039 47102 793672 852000) 0 nil])
([nil nil ((apply yas--snippet-revive 618 623 #s(yas--snippet nil nil nil 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 0 nil nil nil nil)) (618 . 623) (#("log()" 0 5 (fontified nil)) . 618) (618 . 623) (#("log() const" 0 11 (fontified nil)) . -618) (618 . 629) (#("l" 0 1 (fontified t)) . -618) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) 619) nil (26039 47102 793668 279000) 0 nil])
([nil nil ((669 . 672) (t 26039 47102 805935 274000)) nil (26039 47111 707316 272000) 0 nil])
([nil nil ((apply yas--snippet-revive 670 675 #s(yas--snippet nil nil nil 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 1 nil nil nil nil)) (670 . 675) (#("log()" 0 5 (fontified nil)) . 670) (670 . 675) (#("lo" 0 2 (fontified nil)) . 670) (670 . 672) (#("log() const" 0 11 (fontified nil)) . -670) (670 . 681) (#("lo" 0 1 (fontified t) 1 2 (fontified t)) . -670) (undo-tree-id45 . -2) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -2) (undo-tree-id52 . -2) (undo-tree-id53 . -2) (undo-tree-id54 . -2) (undo-tree-id55 . -2) (undo-tree-id56 . -2) (undo-tree-id57 . -2) (undo-tree-id58 . -2) (undo-tree-id59 . -2) 672) nil (26039 47111 707314 268000) 0 nil])
([nil nil ((725 . 729)) nil (26039 47111 707303 112000) 0 nil])
([nil nil ((apply yas--snippet-revive 726 731 #s(yas--snippet nil nil nil 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 2 nil nil nil nil)) (726 . 731) (#("log()" 0 5 (fontified nil)) . 726) (726 . 731) (#("log" 0 3 (fontified nil)) . 726) (726 . 729) (#("log() const" 0 11 (fontified nil)) . -726) (726 . 737) (#("log" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -726) (undo-tree-id17 . -3) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -2) (undo-tree-id24 . -2) (undo-tree-id25 . -2) (undo-tree-id26 . -2) (undo-tree-id27 . -2) (undo-tree-id28 . -2) (undo-tree-id29 . -2) (undo-tree-id30 . -3) (undo-tree-id31 . -3) (undo-tree-id32 . -3) (undo-tree-id33 . -3) (undo-tree-id34 . -3) (undo-tree-id35 . -3) (undo-tree-id36 . -3) (undo-tree-id37 . -3) (undo-tree-id38 . -3) (undo-tree-id39 . -3) (undo-tree-id40 . -3) (undo-tree-id41 . -3) (undo-tree-id42 . -3) (undo-tree-id43 . -3) (undo-tree-id44 . -3) 729) nil (26039 47111 707298 766000) 0 nil])
([nil nil ((903 . 904) (t 26039 47111 749268 93000)) nil (26039 47138 548076 165000) 0 nil])
([nil nil ((982 . 984)) nil (26039 47147 902997 846000) 0 nil] [nil nil ((982 . 983)) ((#("d" 0 1 (face font-lock-constant-face fontified t)) . 982)) (26039 47137 474579 974000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-constant-face fontified t)) . -983) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) 984) nil (26039 47147 902996 257000) 0 nil])
([nil nil ((#("( Sophus" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t) 1 2 (fontified t) 2 8 (face font-lock-constant-face fontified t)) . 988) (undo-tree-id60 . -8)) ((988 . 996)) (26039 47137 472635 121000) 0 nil] [nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . 988)) ((988 . 989)) (26039 47134 655604 942000) 0 nil])
([nil nil ((1001 . 1002)) nil (26039 47147 902984 197000) 0 nil])
nil
nil
([nil nil ((1177 . 1178)) nil (26039 47147 902980 520000) 0 nil])
([nil nil ((1242 . 1243) (t 26039 47147 902599 336000)) nil (26039 47162 771290 387000) 0 nil])
([nil nil ((1243 . 1245)) nil (26039 47162 771289 103000) 0 nil])
([nil nil ((apply yas--snippet-revive 1243 1248 #s(yas--snippet nil nil nil 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 3 nil nil nil nil)) (1243 . 1248) (#("log()" 0 5 (fontified nil)) . 1243) (1243 . 1248) (#("log() const" 0 11 (fontified nil)) . -1243) (1243 . 1254) (#("lo" 0 1 (fontified t) 1 2 (fontified t)) . -1243) (undo-tree-id70 . -2) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -2) (undo-tree-id75 . -2) (undo-tree-id76 . -2) (undo-tree-id77 . -2) (undo-tree-id78 . -2) (undo-tree-id79 . -2) (undo-tree-id80 . -2) (undo-tree-id81 . -2) (undo-tree-id82 . -2) (undo-tree-id83 . -2) (undo-tree-id84 . -2) (undo-tree-id85 . -2) (undo-tree-id86 . -2) 1245) nil (26039 47162 771285 44000) 0 nil])
([nil nil ((#("Sophus::SO3d SO3_v( 0, 0, M_PI/2 );  // 亦可从旋转向量构造" 0 1 (face font-lock-constant-face fontified t c-is-sws t) 1 6 (face font-lock-constant-face fontified t) 6 8 (fontified t) 8 10 (face font-lock-type-face fontified t) 10 11 (face font-lock-type-face fontified t) 11 12 (face font-lock-type-face c-type c-decl-id-start fontified t) 12 13 (fontified t) 13 18 (face font-lock-variable-name-face fontified t) 18 19 (face (rainbow-delimiters-depth-2-face) fontified t) 19 24 (fontified t) 24 25 (c-type c-decl-arg-start fontified t) 25 33 (fontified t) 33 34 (face (rainbow-delimiters-depth-2-face) fontified t) 34 35 (fontified t) 35 37 (fontified t c-is-sws t c-in-sws t) 37 38 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 38 40 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 40 49 (face font-lock-comment-face fontified t c-in-sws t)) . 405) (undo-tree-id90 . -15) (undo-tree-id91 . -15) (undo-tree-id92 . -15) (undo-tree-id93 . -15) (undo-tree-id94 . -15) (undo-tree-id95 . -15) (undo-tree-id96 . -15) (undo-tree-id97 . -15) (undo-tree-id98 . -15) (undo-tree-id99 . -15) (undo-tree-id100 . -15) (undo-tree-id101 . -15) (undo-tree-id102 . -15) (undo-tree-id103 . -15) (undo-tree-id104 . -15) (undo-tree-id105 . -15) (undo-tree-id106 . -15) (undo-tree-id107 . -15) (undo-tree-id108 . -15) (undo-tree-id109 . -15) (undo-tree-id110 . -15) (undo-tree-id111 . -15) (undo-tree-id112 . -15) (undo-tree-id113 . -15) (undo-tree-id114 . -15) (undo-tree-id115 . -15) (undo-tree-id116 . -15) (undo-tree-id117 . -15) (undo-tree-id118 . -15) (undo-tree-id119 . -15) (undo-tree-id120 . -15) (undo-tree-id121 . -15) (undo-tree-id122 . -15) (undo-tree-id123 . -15) (undo-tree-id124 . -15) (undo-tree-id125 . -15) (undo-tree-id126 . -15) (undo-tree-id127 . -15) (undo-tree-id128 . -15) (undo-tree-id129 . -15) (undo-tree-id130 . -15) (undo-tree-id131 . -15) (undo-tree-id132 . -15) (undo-tree-id133 . -15) (undo-tree-id134 . -15) (undo-tree-id135 . -15) (undo-tree-id136 . -15) (undo-tree-id137 . -15) (undo-tree-id138 . -15) (undo-tree-id139 . -15) (undo-tree-id140 . -15) (undo-tree-id141 . -15) (undo-tree-id142 . -15) (undo-tree-id143 . -15) (undo-tree-id144 . -15) (undo-tree-id145 . -15) (undo-tree-id146 . -15) (undo-tree-id147 . -15) (undo-tree-id148 . -15) (undo-tree-id149 . -15) (undo-tree-id150 . -15) (undo-tree-id151 . -15) (undo-tree-id152 . -15) (undo-tree-id153 . -15) (undo-tree-id154 . -49) (t 26039 47162 782598 477000)) nil (26039 47196 951780 975000) 0 nil])
([nil nil ((#("
" 0 1 (c-is-sws t fontified t)) . 405) (undo-tree-id89 . -1)) nil (26039 47196 951741 447000) 0 nil])
([nil nil ((#("cout<<\"SO(3) from vector: \"<<SO3_v.log()<<endl;" 0 6 (fontified t) 6 27 (face font-lock-string-face fontified t) 27 34 (fontified t) 34 35 (fontified t) 35 38 (fontified t) 38 39 (face (rainbow-delimiters-depth-2-face) fontified t) 39 40 (face (rainbow-delimiters-depth-2-face) fontified t) 40 47 (fontified t)) . 585) (undo-tree-id88 . -47)) nil (26039 47196 951739 533000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 585) (undo-tree-id87 . -1)) nil (26039 47196 951735 190000) 0 nil])
([nil nil ((581 . 585) (#("        " 0 4 (fontified t) 4 8 (fontified t)) . 581) (undo-tree-id155 . -4) (undo-tree-id156 . -4) (undo-tree-id157 . -4) (undo-tree-id158 . -4) (undo-tree-id159 . -4) (undo-tree-id160 . -4) (undo-tree-id161 . -4) (undo-tree-id162 . -4) (undo-tree-id163 . -4) (undo-tree-id164 . -4) (undo-tree-id165 . -4) 585 (t 26039 47196 962596 497000)) nil (26039 47198 539022 626000) 0 nil])
([nil nil ((1491 . 1495) (t 26039 47198 549263 73000)) nil (26039 47218 222284 664000) 0 nil])
([nil nil ((apply yas--snippet-revive 1492 1497 #s(yas--snippet nil nil nil 4 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 4 nil nil nil nil)) (1492 . 1497) (#("log()" 0 5 (fontified nil)) . 1492) (1492 . 1497) (#("log" 0 3 (fontified nil)) . 1492) (1492 . 1495) (#("log() const" 0 11 (fontified nil)) . -1492) (1492 . 1503) (#("log" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -1492) (undo-tree-id166 . -3) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -2) (undo-tree-id172 . -2) (undo-tree-id173 . -2) (undo-tree-id174 . -2) (undo-tree-id175 . -2) (undo-tree-id176 . -3) (undo-tree-id177 . -3) (undo-tree-id178 . -3) (undo-tree-id179 . -3) (undo-tree-id180 . -3) (undo-tree-id181 . -3) (undo-tree-id182 . -3) 1495) nil (26039 47218 222282 125000) 0 nil])
([nil nil ((1545 . 1546)) nil (26039 47218 222265 151000) 0 nil])
([nil nil ((1546 . 1549)) nil (26039 47218 222264 616000) 0 nil])
([nil nil ((1549 . 1551)) nil (26039 47218 222263 737000) 0 nil])
([nil nil ((1828 . 1829)) nil (26039 47218 222262 994000) 0 nil])
([nil nil ((1886 . 1887)) nil (26039 47218 222261 805000) 0 nil])
([nil nil ((1905 . 1906)) nil (26039 47218 222257 740000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -2043) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) 2044 (t 26039 47218 232595 274000)) nil (26039 47228 787418 164000) 0 nil])
([nil nil ((2086 . 2087) (t 26039 47228 789261 331000)) nil (26039 47232 950527 997000) 0 nil])
([nil nil ((638 . 642) (#("    " 0 4 (fontified nil)) . 637) (undo-tree-id534 . -4) (641 . 642) (t 26039 47232 962594 425000)) nil (26039 47703 226699 736000) 0 nil])
([nil nil ((nil rear-nonsticky nil 692 . 693) (nil fontified nil 686 . 693) (nil fontified nil 685 . 686) (nil fontified nil 684 . 685) (nil fontified nil 673 . 684) (nil fontified nil 648 . 673) (nil fontified nil 642 . 648) (642 . 693)) nil (26039 47703 226698 254000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -681) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (#("o" 0 1 (fontified t)) . -682) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (#("g" 0 1 (fontified t)) . -683) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -684) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -685) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) 686) nil (26039 47703 226694 526000) 0 nil])
([nil nil ((681 . 683)) nil (26039 47703 226650 907000) 0 nil])
([nil nil ((683 . 684)) nil (26039 47703 226650 402000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -683) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) 684) nil (26039 47703 226649 459000) 0 nil])
([nil nil ((683 . 684)) nil (26039 47703 226644 769000) 0 nil])
([nil nil ((#("exp" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -681) (undo-tree-id397 . -3) (undo-tree-id398 . -3) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -2) (undo-tree-id405 . -2) (undo-tree-id406 . -2) (undo-tree-id407 . -2) (undo-tree-id408 . -2) (undo-tree-id409 . -2) (undo-tree-id410 . -2) (undo-tree-id411 . -2) (undo-tree-id412 . -2) (undo-tree-id413 . -2) (undo-tree-id414 . -2) (undo-tree-id415 . -2) (undo-tree-id416 . -2) (undo-tree-id417 . -2) (undo-tree-id418 . -2) (undo-tree-id419 . -2) (undo-tree-id420 . -2) (undo-tree-id421 . -2) (undo-tree-id422 . -2) (undo-tree-id423 . -2) (undo-tree-id424 . -2) (undo-tree-id425 . -2) (undo-tree-id426 . -2) (undo-tree-id427 . -2) (undo-tree-id428 . -2) (undo-tree-id429 . -2) (undo-tree-id430 . -2) (undo-tree-id431 . -3) (undo-tree-id432 . -3) (undo-tree-id433 . -3) (undo-tree-id434 . -3) (undo-tree-id435 . -3) (undo-tree-id436 . -3) (undo-tree-id437 . -3) (undo-tree-id438 . -3) (undo-tree-id439 . -3) (undo-tree-id440 . -3) (undo-tree-id441 . -3) (undo-tree-id442 . -3) (undo-tree-id443 . -3) (undo-tree-id444 . -3) (undo-tree-id445 . -3) (undo-tree-id446 . -3) (undo-tree-id447 . -3) (undo-tree-id448 . -3) (undo-tree-id449 . -3) (undo-tree-id450 . -3) (undo-tree-id451 . -3) (undo-tree-id452 . -3) (undo-tree-id453 . -3) (undo-tree-id454 . -3) (undo-tree-id455 . -3) (undo-tree-id456 . -3) 684) nil (26039 47703 226642 606000) 0 nil])
([nil nil ((#("q." 0 2 (fontified t)) . -679) (undo-tree-id299 . -2) (undo-tree-id300 . -2) (undo-tree-id301 . -2) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -2) (undo-tree-id314 . -2) (undo-tree-id315 . -2) (undo-tree-id316 . -2) (undo-tree-id317 . -2) (undo-tree-id318 . -2) (undo-tree-id319 . -2) (undo-tree-id320 . -2) (undo-tree-id321 . -2) (undo-tree-id322 . -2) (undo-tree-id323 . -2) (undo-tree-id324 . -2) (undo-tree-id325 . -2) (undo-tree-id326 . -2) (undo-tree-id327 . -2) (undo-tree-id328 . -2) (undo-tree-id329 . -2) (undo-tree-id330 . -2) (undo-tree-id331 . -2) (undo-tree-id332 . -2) (undo-tree-id333 . -2) (undo-tree-id334 . -2) (undo-tree-id335 . -2) (undo-tree-id336 . -2) (undo-tree-id337 . -2) (undo-tree-id338 . -2) (undo-tree-id339 . -2) (undo-tree-id340 . -2) (undo-tree-id341 . -2) (undo-tree-id342 . -2) (undo-tree-id343 . -2) (undo-tree-id344 . -2) (undo-tree-id345 . -2) (undo-tree-id346 . -2) (undo-tree-id347 . -2) (undo-tree-id348 . -2) (undo-tree-id349 . -2) (undo-tree-id350 . -2) (undo-tree-id351 . -2) (undo-tree-id352 . -2) (undo-tree-id353 . -2) (undo-tree-id354 . -2) (undo-tree-id355 . -2) (undo-tree-id356 . -2) (undo-tree-id357 . -2) (undo-tree-id358 . -2) (undo-tree-id359 . -2) (undo-tree-id360 . -2) (undo-tree-id361 . -2) (undo-tree-id362 . -2) (undo-tree-id363 . -2) (undo-tree-id364 . -2) (undo-tree-id365 . -2) (undo-tree-id366 . -2) (undo-tree-id367 . -2) (undo-tree-id368 . -2) (undo-tree-id369 . -2) (undo-tree-id370 . -2) (undo-tree-id371 . -2) (undo-tree-id372 . -2) (undo-tree-id373 . -2) (undo-tree-id374 . -2) (undo-tree-id375 . -2) (undo-tree-id376 . -2) (undo-tree-id377 . -2) (undo-tree-id378 . -2) (undo-tree-id379 . -2) (undo-tree-id380 . -2) (undo-tree-id381 . -2) (undo-tree-id382 . -2) (undo-tree-id383 . -2) (undo-tree-id384 . -2) (undo-tree-id385 . -2) (undo-tree-id386 . -2) (undo-tree-id387 . -2) (undo-tree-id388 . -2) (undo-tree-id389 . -2) (undo-tree-id390 . -2) (undo-tree-id391 . -2) (undo-tree-id392 . -2) (undo-tree-id393 . -2) (undo-tree-id394 . -2) (undo-tree-id395 . -2) (undo-tree-id396 . -2) 681) nil (26039 47703 226608 977000) 0 nil])
([nil nil ((#("cout<<\"SO(3) from quaternion :\"<<SO3_<<endl;" 0 6 (fontified t) 6 31 (face font-lock-string-face fontified t) 31 37 (fontified t) 37 38 (fontified t) 38 43 (fontified t) 43 44 (rear-nonsticky t fontified t)) . 642) (undo-tree-id168 . -37) (undo-tree-id169 . -44) (undo-tree-id170 . -39) (undo-tree-id171 . -39) (undo-tree-id172 . -39) (undo-tree-id173 . -37) (undo-tree-id174 . -37) (undo-tree-id175 . -37) (undo-tree-id176 . -37) (undo-tree-id177 . -37) (undo-tree-id178 . -37) (undo-tree-id179 . -37) (undo-tree-id180 . -37) (undo-tree-id181 . -37) (undo-tree-id182 . -37) (undo-tree-id183 . -37) (undo-tree-id184 . -37) (undo-tree-id185 . -37) (undo-tree-id186 . -37) (undo-tree-id187 . -37) (undo-tree-id188 . -37) (undo-tree-id189 . -43) (undo-tree-id190 . -39) (undo-tree-id191 . -39) (undo-tree-id192 . -39) (undo-tree-id193 . -39) (undo-tree-id194 . -39) (undo-tree-id195 . -38) (undo-tree-id196 . -37) (undo-tree-id197 . -37) (undo-tree-id198 . -37) (undo-tree-id199 . -37) (undo-tree-id200 . -37) (undo-tree-id201 . -37) (undo-tree-id202 . -37) (undo-tree-id203 . -37) (undo-tree-id204 . -37) (undo-tree-id205 . -37) (undo-tree-id206 . -37) (undo-tree-id207 . -37) (undo-tree-id208 . -37) (undo-tree-id209 . -37) (undo-tree-id210 . -37) (undo-tree-id211 . -37) (undo-tree-id212 . -37) (undo-tree-id213 . -37) (undo-tree-id214 . -37) (undo-tree-id215 . -37) (undo-tree-id216 . -37) (undo-tree-id217 . -37) (undo-tree-id218 . -37) (undo-tree-id219 . -37) (undo-tree-id220 . -37) (undo-tree-id221 . -37) (undo-tree-id222 . -37) (undo-tree-id223 . -37) (undo-tree-id224 . -37) (undo-tree-id225 . -37) (undo-tree-id226 . 7) (undo-tree-id227 . -44) (undo-tree-id228 . -37) (undo-tree-id229 . -37) (undo-tree-id230 . -37) (undo-tree-id231 . -37) (undo-tree-id232 . -37) (undo-tree-id233 . -37) (undo-tree-id234 . -37) (undo-tree-id235 . -37) (undo-tree-id236 . -37) (undo-tree-id237 . -37) (undo-tree-id238 . -37) (undo-tree-id239 . -37) (undo-tree-id240 . -37) (undo-tree-id241 . -37) (undo-tree-id242 . -37) (undo-tree-id243 . -37) (undo-tree-id244 . -37) (undo-tree-id245 . -37) (undo-tree-id246 . -37) (undo-tree-id247 . -44) (undo-tree-id248 . -37) (undo-tree-id249 . -37) (undo-tree-id250 . -37) (undo-tree-id251 . -37) (undo-tree-id252 . -37) (undo-tree-id253 . -37) (undo-tree-id254 . -37) (undo-tree-id255 . -37) (undo-tree-id256 . -44) (undo-tree-id257 . -37) (undo-tree-id258 . -37) (undo-tree-id259 . -37) (undo-tree-id260 . -37) (undo-tree-id261 . -37) (undo-tree-id262 . -37) (undo-tree-id263 . -37) (undo-tree-id264 . -37) (undo-tree-id265 . -37) (undo-tree-id266 . -37) (undo-tree-id267 . -37) (undo-tree-id268 . -37) (undo-tree-id269 . -37) (undo-tree-id270 . -37) (undo-tree-id271 . -37) (undo-tree-id272 . -37) (undo-tree-id273 . -37) (undo-tree-id274 . -37) (undo-tree-id275 . -37) (undo-tree-id276 . -37) (undo-tree-id277 . -37) (undo-tree-id278 . -37) (undo-tree-id279 . -37) (undo-tree-id280 . -37) (undo-tree-id281 . -37) (undo-tree-id282 . -37) (undo-tree-id283 . -37) (undo-tree-id284 . -37) (undo-tree-id285 . -37) (undo-tree-id286 . -37) (undo-tree-id287 . -37) (undo-tree-id288 . -37) (undo-tree-id289 . -37) (undo-tree-id290 . -37) (undo-tree-id291 . -37) (undo-tree-id292 . -37) (undo-tree-id293 . -37) (undo-tree-id294 . -44) (undo-tree-id295 . -37) (undo-tree-id296 . -37) (undo-tree-id297 . -37) (undo-tree-id298 . -44)) nil (26039 47703 226546 440000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 642) (undo-tree-id166 . 1) (undo-tree-id167 . -1)) nil (26039 47703 226468 648000) 0 nil])
([nil current ((638 . 642) (#("        " 0 4 (c-is-sws t c-in-sws t fontified t) 4 8 (fontified t c-is-sws t c-in-sws t)) . 638) (undo-tree-id0 . -4) (undo-tree-id1 . -4) (undo-tree-id2 . -4) (undo-tree-id3 . -4) (undo-tree-id4 . -4) (undo-tree-id5 . -4) (undo-tree-id6 . -4) (undo-tree-id7 . -4) (undo-tree-id8 . -4) (undo-tree-id9 . -4) (undo-tree-id10 . -4) (undo-tree-id11 . -4) (undo-tree-id12 . -4) (undo-tree-id13 . -4) (undo-tree-id14 . -4) (undo-tree-id15 . -4) (undo-tree-id16 . -4) (undo-tree-id17 . -4) (undo-tree-id18 . -4) (undo-tree-id19 . -4) (undo-tree-id20 . -4) (undo-tree-id21 . -4) (undo-tree-id22 . -4) (undo-tree-id23 . -4) (undo-tree-id24 . -4) (undo-tree-id25 . -4) (undo-tree-id26 . -4) (undo-tree-id27 . -4) (undo-tree-id28 . -4) (undo-tree-id29 . -4) (undo-tree-id30 . -4) (undo-tree-id31 . -4) (undo-tree-id32 . -4) (undo-tree-id33 . -4) (undo-tree-id34 . -4) (undo-tree-id35 . -4) (undo-tree-id36 . -4) (undo-tree-id37 . -4) (undo-tree-id38 . -4) (undo-tree-id39 . -4) (undo-tree-id40 . -4) (undo-tree-id41 . -4) (undo-tree-id42 . -4) (undo-tree-id43 . -4) (undo-tree-id44 . -4) (undo-tree-id45 . -4) (undo-tree-id46 . -4) (undo-tree-id47 . -4) (undo-tree-id48 . -4) (undo-tree-id49 . -4) (undo-tree-id50 . -4) (undo-tree-id51 . -4) (undo-tree-id52 . -4) (undo-tree-id53 . -4) (undo-tree-id54 . -4) (undo-tree-id55 . -4) (undo-tree-id56 . -4) (undo-tree-id57 . -4) (undo-tree-id58 . -4) (undo-tree-id59 . -4) (undo-tree-id60 . 4) (undo-tree-id61 . -4) (undo-tree-id62 . -4) (undo-tree-id63 . -4) (undo-tree-id64 . -4) (undo-tree-id65 . -4) (undo-tree-id66 . -4) (undo-tree-id67 . -4) (undo-tree-id68 . -4) (undo-tree-id69 . -4) (undo-tree-id70 . -4) (undo-tree-id71 . -4) (undo-tree-id72 . -4) (undo-tree-id73 . -4) (undo-tree-id74 . -4) (undo-tree-id75 . -4) (undo-tree-id76 . -4) (undo-tree-id77 . -4) (undo-tree-id78 . -4) (undo-tree-id79 . -4) (undo-tree-id80 . -4) (undo-tree-id81 . -4) (undo-tree-id82 . -4) (undo-tree-id83 . -4) (undo-tree-id84 . -4) (undo-tree-id85 . -4) (undo-tree-id86 . -4) (undo-tree-id87 . -4) (undo-tree-id88 . -4) (undo-tree-id89 . -4) (undo-tree-id90 . -4) (undo-tree-id91 . -4) (undo-tree-id92 . -4) (undo-tree-id93 . -4) (undo-tree-id94 . -4) (undo-tree-id95 . -4) (undo-tree-id96 . -4) (undo-tree-id97 . -4) (undo-tree-id98 . -4) (undo-tree-id99 . -4) (undo-tree-id100 . -4) (undo-tree-id101 . -4) (undo-tree-id102 . -4) (undo-tree-id103 . -4) (undo-tree-id104 . -4) (undo-tree-id105 . -4) (undo-tree-id106 . -4) (undo-tree-id107 . -4) (undo-tree-id108 . -4) (undo-tree-id109 . -4) (undo-tree-id110 . -4) (undo-tree-id111 . -4) (undo-tree-id112 . -4) (undo-tree-id113 . -4) (undo-tree-id114 . -4) (undo-tree-id115 . -4) (undo-tree-id116 . -4) (undo-tree-id117 . -4) (undo-tree-id118 . -4) (undo-tree-id119 . -4) (undo-tree-id120 . -4) (undo-tree-id121 . -4) (undo-tree-id122 . -4) (undo-tree-id123 . -4) (undo-tree-id124 . -4) (undo-tree-id125 . -4) (undo-tree-id126 . -4) (undo-tree-id127 . -4) (undo-tree-id128 . -4) (undo-tree-id129 . -4) (undo-tree-id130 . -4) (undo-tree-id131 . -4) (undo-tree-id132 . -4) (undo-tree-id133 . -4) (undo-tree-id134 . -4) (undo-tree-id135 . -4) (undo-tree-id136 . -4) (undo-tree-id137 . -4) (undo-tree-id138 . -4) (undo-tree-id139 . -4) (undo-tree-id140 . -4) (undo-tree-id141 . -4) (undo-tree-id142 . -4) (undo-tree-id143 . -4) (undo-tree-id144 . -4) (undo-tree-id145 . -4) (undo-tree-id146 . -4) (undo-tree-id147 . -4) (undo-tree-id148 . -4) (undo-tree-id149 . -4) (undo-tree-id150 . -4) (undo-tree-id151 . -4) (undo-tree-id152 . -4) (undo-tree-id153 . -4) (undo-tree-id154 . -4) (undo-tree-id155 . -4) (undo-tree-id156 . -4) (undo-tree-id157 . -4) (undo-tree-id158 . -4) (undo-tree-id159 . -4) (undo-tree-id160 . -4) (undo-tree-id161 . -4) (undo-tree-id162 . -4) (undo-tree-id163 . -4) (undo-tree-id164 . -4) (undo-tree-id165 . -4) 660) nil (26039 47703 226457 934000) 0 nil])
nil
