(undo-tree-save-format-version . 1)
"b8df09eb252ed8f0439f90d86be8cce9812003fc"
[nil nil nil nil (26052 62045 919678 506000) 0 nil]
([nil nil ((2684 . 2693) (t 26051 43171 332371 386000)) nil (26052 62045 919677 374000) 0 nil])
([nil nil ((2693 . 2694)) nil (26052 62045 919676 545000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -2693) (undo-tree-id19 . -1) 2694) nil (26052 62045 919675 815000) 0 nil])
([nil nil ((554 . 559)) nil (26052 62045 919674 347000) 0 nil])
([nil nil ((559 . 566)) nil (26052 62045 919673 752000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -562) (undo-tree-id15 . -1) (#("p" 0 1 (fontified t)) . -563) (undo-tree-id16 . -1) (#("c" 0 1 (fontified t)) . -564) (undo-tree-id17 . -1) (#("h" 0 1 (fontified t)) . -565) (undo-tree-id18 . -1) 566) nil (26052 62045 919672 497000) 0 nil])
([nil nil ((562 . 565)) nil (26052 62045 919668 636000) 0 nil])
([nil nil ((565 . 571)) nil (26052 62045 919668 5000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t)) . -570) (undo-tree-id14 . -1) 571) nil (26052 62045 919667 358000) 0 nil])
([nil nil ((570 . 571)) nil (26052 62045 919665 804000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -570) (undo-tree-id13 . -1) 571) nil (26052 62045 919664 960000) 0 nil])
([nil nil ((570 . 571)) nil (26052 62045 919663 543000) 0 nil])
([nil nil ((570 . 579) (#("v" 0 1 (fontified nil)) . 570) (570 . 571) (#("vk_render" 0 9 (fontified nil)) . -570) (570 . 579) (#("v" 0 1 (fontified t)) . -570) (undo-tree-id12 . -1) 571) nil (26052 62045 919662 399000) 0 nil])
([nil nil ((579 . 582)) nil (26052 62045 919660 140000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -581) (undo-tree-id11 . -1) 582) nil (26052 62045 919659 425000) 0 nil])
([nil nil ((581 . 582)) nil (26052 62045 919657 993000) 0 nil])
([nil nil ((#("S" 0 1 (face font-lock-type-face fontified t)) . -581) (undo-tree-id10 . -1) 582) nil (26052 62045 919657 189000) 0 nil])
([nil nil ((581 . 582)) nil (26052 62045 919655 525000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -581) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) 582) nil (26052 62045 919654 470000) 0 nil])
([nil nil ((581 . 582)) nil (26052 62045 919650 547000) 0 nil])
([nil nil ((581 . 590) (#("S" 0 1 (fontified nil)) . 581) (581 . 582) (#("SwapChain" 0 9 (fontified nil)) . -581) (581 . 590) (#("S" 0 1 (face font-lock-type-face fontified t)) . -581) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) 582) nil (26052 62045 919647 810000) 0 nil])
([nil nil ((590 . 591)) nil (26052 62045 919620 571000) 0 nil])
([nil nil ((977 . 985) (t 26052 62045 933692 220000)) nil (26052 62086 91581 755000) 0 nil])
([nil nil ((978 . 986) (#("        " 0 8 (fontified nil)) . 977) (undo-tree-id36 . -8) (985 . 986)) nil (26052 62086 91580 163000) 0 nil])
([nil nil ((977 . 985)) nil (26052 62086 91577 828000) 0 nil])
([nil nil ((985 . 991)) nil (26052 62086 91577 47000) 0 nil])
([nil nil ((989 . 998) (#("sw" 0 2 (fontified nil)) . 989) (989 . 991) (#("SwapChain" 0 9 (fontified nil)) . -989) (989 . 998) (#("sw" 0 2 (face font-lock-variable-name-face fontified t)) . -989) (undo-tree-id35 . -2) 991) nil (26052 62086 91575 653000) 0 nil])
([nil nil ((#("SwapChain" 0 9 (face font-lock-type-face fontified t)) . -989) (undo-tree-id34 . -9) 998) nil (26052 62086 91572 624000) 0 nil])
([nil nil ((989 . 992)) nil (26052 62086 91570 258000) 0 nil])
([nil nil ((992 . 996)) nil (26052 62086 91569 425000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-variable-name-face fontified t)) . -995) (undo-tree-id33 . -1) 996) nil (26052 62086 91568 430000) 0 nil])
([nil nil ((995 . 999)) nil (26052 62086 91566 792000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -998) (undo-tree-id32 . -1) 999) nil (26052 62086 91566 67000) 0 nil])
([nil nil ((998 . 1003)) nil (26052 62086 91564 779000) 0 nil])
([nil nil ((1001 . 1010) (#("Sw" 0 2 (fontified nil)) . 1001) (1001 . 1003) (#("SwapChain" 0 9 (fontified nil)) . -1001) (1001 . 1010) (#("Sw" 0 2 (face font-lock-type-face fontified t)) . -1001) (undo-tree-id31 . -2) 1003) nil (26052 62086 91563 634000) 0 nil])
([nil nil ((1010 . 1013)) nil (26052 62086 91561 733000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -1012) (undo-tree-id30 . -1) 1013) nil (26052 62086 91560 964000) 0 nil])
([nil nil ((1012 . 1014)) nil (26052 62086 91559 722000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -1012) (undo-tree-id28 . -1) (#("r" 0 1 (fontified t)) . -1013) (undo-tree-id29 . -1) 1014) nil (26052 62086 91558 819000) 0 nil])
([nil nil ((1012 . 1013)) nil (26052 62086 91556 363000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -1012) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) 1013) nil (26052 62086 91555 447000) 0 nil])
([nil nil ((1012 . 1013)) nil (26052 62086 91552 579000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1016 1022 nil nil nil nil #s(yas--field 2 1024 1032 nil nil nil nil #s(yas--field 3 1034 1040 nil nil nil nil #s(yas--field 4 1042 1057 nil nil nil nil #s(yas--field 5 1059 1066 nil nil nil nil #s(yas--field 6 1068 1080 nil nil nil nil #s(yas--exit 1081 nil))))))) #s(yas--field 2 1024 1032 nil nil nil nil #s(yas--field 3 1034 1040 nil nil nil nil #s(yas--field 4 1042 1057 nil nil nil nil #s(yas--field 5 1059 1066 nil nil nil nil #s(yas--field 6 1068 1080 nil nil nil nil #s(yas--exit 1081 nil)))))) #s(yas--field 3 1034 1040 nil nil nil nil #s(yas--field 4 1042 1057 nil nil nil nil #s(yas--field 5 1059 1066 nil nil nil nil #s(yas--field 6 1068 1080 nil nil nil nil #s(yas--exit 1081 nil))))) #s(yas--field 4 1042 1057 nil nil nil nil #s(yas--field 5 1059 1066 nil nil nil nil #s(yas--field 6 1068 1080 nil nil nil nil #s(yas--exit 1081 nil)))) #s(yas--field 5 1059 1066 nil nil nil nil #s(yas--field 6 1068 1080 nil nil nil nil #s(yas--exit 1081 nil))) #s(yas--field 6 1068 1080 nil nil nil nil #s(yas--exit 1081 nil))) #s(yas--exit 1081 nil) 33 nil #s(yas--field 1 1016 1022 nil nil nil nil #s(yas--field 2 1024 1032 nil nil nil nil #s(yas--field 3 1034 1040 nil nil nil nil #s(yas--field 4 1042 1057 nil nil nil nil #s(yas--field 5 1059 1066 nil nil nil nil #s(yas--field 6 1068 1080 nil nil nil nil #s(yas--exit 1081 nil))))))) nil nil)) (1012 . 1081) (#("new(${1:window}, ${2:instance}, ${3:device}, ${4:physical_device}, ${5:surface}, ${6:queue_family})$0" 0 101 (fontified nil)) . 1012) (1012 . 1113) (#("n" 0 1 (fontified nil)) . 1012) (1012 . 1013) (#("new(â€¦)" 0 6 (fontified nil)) . -1012) (1012 . 1018) (#("n" 0 1 (fontified t)) . -1012) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) 1013) nil (26052 62086 91550 284000) 0 nil])
([nil nil ((apply yas--snippet-revive 1012 1081 #s(yas--snippet nil (#s(yas--field 1 1016 1022 nil nil nil nil #s(yas--field 2 1024 1032 nil nil nil nil #s(yas--field 3 1034 1040 nil nil nil nil #s(yas--field 4 1042 1057 nil nil nil nil #s(yas--field 5 1059 1066 nil nil nil nil #s(yas--field 6 1068 1080 nil nil nil nil #s(yas--exit 1081 nil))))))) #s(yas--field 2 1024 1032 nil nil nil nil #s(yas--field 3 1034 1040 nil nil nil nil #s(yas--field 4 1042 1057 nil nil nil nil #s(yas--field 5 1059 1066 nil nil nil nil #s(yas--field 6 1068 1080 nil nil nil nil #s(yas--exit 1081 nil)))))) #s(yas--field 3 1034 1040 nil nil nil nil #s(yas--field 4 1042 1057 nil nil nil nil #s(yas--field 5 1059 1066 nil nil nil nil #s(yas--field 6 1068 1080 nil nil nil nil #s(yas--exit 1081 nil))))) #s(yas--field 4 1042 1057 nil nil nil nil #s(yas--field 5 1059 1066 nil nil nil nil #s(yas--field 6 1068 1080 nil nil nil nil #s(yas--exit 1081 nil)))) #s(yas--field 5 1059 1066 nil nil nil nil #s(yas--field 6 1068 1080 nil nil nil nil #s(yas--exit 1081 nil))) #s(yas--field 6 1068 1080 nil nil nil nil #s(yas--exit 1081 nil))) #s(yas--exit 1081 nil) 33 nil #s(yas--field 1 1016 1022 nil nil nil nil #s(yas--field 2 1024 1032 nil nil nil nil #s(yas--field 3 1034 1040 nil nil nil nil #s(yas--field 4 1042 1057 nil nil nil nil #s(yas--field 5 1059 1066 nil nil nil nil #s(yas--field 6 1068 1080 nil nil nil nil #s(yas--exit 1081 nil))))))) nil nil))) nil (26052 62086 91539 127000) 0 nil])
([nil nil ((1081 . 1082)) nil (26052 62086 91510 959000) 0 nil])
([nil nil ((1016 . 1017) (t 26052 62086 103694 682000)) nil (26052 62094 121785 455000) 0 nil])
([nil nil ((1025 . 1026)) nil (26052 62094 121780 839000) 0 nil])
([nil nil ((1036 . 1037) (t 26052 62094 133695 176000)) nil (26052 62108 703152 0) 0 nil])
([nil nil ((1045 . 1046)) nil (26052 62108 703150 920000) 0 nil])
([nil nil ((1063 . 1064)) nil (26052 62108 703149 317000) 0 nil])
([nil nil ((1073 . 1074)) nil (26052 62108 703144 335000) 0 nil])
([nil nil ((#("device" 0 6 (fontified t)) . -1055) (undo-tree-id63 . -6) (undo-tree-id64 . -6) (undo-tree-id65 . -6) (undo-tree-id66 . -6) (undo-tree-id67 . -6) (undo-tree-id68 . -6) (undo-tree-id69 . -6) (undo-tree-id70 . -6) (undo-tree-id71 . -6) (undo-tree-id72 . -6) 1061 (t 26052 62108 713696 69000)) nil (26052 62453 145397 314000) 0 nil])
([nil nil ((#("physical_" 0 9 (fontified t)) . -1046) (undo-tree-id51 . -9) (undo-tree-id52 . -9) (undo-tree-id53 . -9) (undo-tree-id54 . -9) (undo-tree-id55 . -9) (undo-tree-id56 . -9) (undo-tree-id57 . -9) (undo-tree-id58 . -9) (undo-tree-id59 . -9) (undo-tree-id60 . -9) (undo-tree-id61 . -9) (undo-tree-id62 . -9) 1055) nil (26052 62453 145606 758000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -1043) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (#(" " 0 1 (fontified t)) . -1044) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (#("&" 0 1 (fontified t)) . -1045) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) 1046) nil (26052 62457 458740 973000) 0 nil] [nil nil ((#("device, &" 0 8 (fontified t) 8 9 (fontified t)) . -1037) (undo-tree-id37 . -9) (undo-tree-id38 . -9) (undo-tree-id39 . -9) (undo-tree-id40 . -9) (undo-tree-id41 . -9) (undo-tree-id42 . -9) (undo-tree-id43 . -9) (undo-tree-id44 . -9) (undo-tree-id45 . -9) (undo-tree-id46 . -9) (undo-tree-id47 . -9) (undo-tree-id48 . -9) (undo-tree-id49 . -9) (undo-tree-id50 . -9) 1046) ((1037 . 1046)) (26052 62453 145378 235000) 0 nil])
([nil nil ((#("family" 0 6 (fontified t)) . -1062) (undo-tree-id125 . -6) (undo-tree-id126 . -6) (undo-tree-id127 . -6) (undo-tree-id128 . -6) (undo-tree-id129 . -6) 1068) nil (26052 62457 458679 585000) 0 nil])
nil
([nil nil ((#("queue_" 0 6 (fontified t)) . -1056) (undo-tree-id115 . -6) (undo-tree-id116 . -5) (undo-tree-id117 . -5) (undo-tree-id118 . -5) (undo-tree-id119 . -6) (undo-tree-id120 . -6) (undo-tree-id121 . -6) (undo-tree-id122 . -6) (undo-tree-id123 . -6) (undo-tree-id124 . -6) 1062) nil (26052 62457 458674 104000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -1053) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (#(" " 0 1 (fontified t)) . -1054) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (#("&" 0 1 (fontified t)) . -1055) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) 1056) nil (26052 62457 458659 842000) 0 nil])
([nil nil ((1207 . 1208) (t 26052 62457 470384 145000)) nil (26052 62464 786467 947000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1207) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) 1208) nil (26052 62464 786466 658000) 0 nil])
([nil nil ((1207 . 1208)) nil (26052 62464 786459 814000) 0 nil])
([nil nil ((1208 . 1221)) nil (26052 62464 786459 338000) 0 nil])
([nil nil ((1221 . 1222)) nil (26052 62464 786458 763000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t)) . -1221) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) 1222) nil (26052 62464 786457 683000) 0 nil])
([nil nil ((1221 . 1222)) nil (26052 62464 786452 606000) 0 nil])
([nil nil ((1221 . 1230) (#("s" 0 1 (fontified nil)) . 1221) (1221 . 1222) (#("swapchain" 0 9 (fontified nil)) . -1221) (1221 . 1230) (#("s" 0 1 (fontified t)) . -1221) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) 1222) nil (26052 62464 786448 228000) 0 nil])
([nil nil ((1230 . 1231) (t 26052 62464 797051 261000)) nil (26052 62466 356347 726000) 0 nil])
([nil nil ((2841 . 2842) (t 26052 62466 367051 357000)) nil (26052 62475 257719 698000) 0 nil])
([nil nil ((2841 . 2845) (#("s" 0 1 (fontified nil)) . 2841) (2841 . 2842) (#("self" 0 4 (fontified nil)) . -2841) (2841 . 2845) (#("s" 0 1 (fontified t)) . -2841) (undo-tree-id257 . -1) (undo-tree-id258 . -1) 2842) nil (26052 62475 257718 349000) 0 nil])
([nil nil ((2845 . 2847)) nil (26052 62475 257715 581000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t)) . -2846) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) 2847) nil (26052 62475 257714 678000) 0 nil])
([nil nil ((2846 . 2847)) nil (26052 62475 257710 527000) 0 nil])
([nil nil ((2846 . 2853) (#("s" 0 1 (fontified nil)) . 2846) (2846 . 2847) (#("surface" 0 7 (fontified nil)) . -2846) (2846 . 2853) (#("s" 0 1 (fontified t)) . -2846) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) 2847) nil (26052 62475 257709 274000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -2852) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) 2853) nil (26052 62475 257705 62000) 0 nil])
([nil nil ((#("surfac" 0 6 (fontified t)) . -2846) (undo-tree-id238 . -6) (undo-tree-id239 . -6) (undo-tree-id240 . -6) (undo-tree-id241 . -6) (undo-tree-id242 . -6) (undo-tree-id243 . -6) 2852) nil (26052 62475 257700 987000) 0 nil])
([nil nil ((2846 . 2848)) nil (26052 62475 257695 875000) 0 nil])
([nil nil ((2846 . 2855) (#("sw" 0 2 (fontified nil)) . 2846) (2846 . 2848) (#("swapchain" 0 9 (fontified nil)) . -2846) (2846 . 2855) (#("sw" 0 2 (fontified t)) . -2846) (undo-tree-id232 . -2) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -2) (undo-tree-id236 . -2) (undo-tree-id237 . -2) 2848) nil (26052 62475 257694 431000) 0 nil])
([nil nil ((2855 . 2857)) nil (26052 62475 257688 895000) 0 nil])
([nil nil ((apply yas--snippet-revive 2856 2862 #s(yas--snippet nil nil #s(yas--exit 2862 nil) 34 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2862 nil) 34 nil nil nil nil)) (2856 . 2862) (#("drop()$0" 0 8 (fontified nil)) . 2856) (2856 . 2864) (#("d" 0 1 (fontified nil)) . 2856) (2856 . 2857) (#("drop()" 0 6 (fontified nil)) . -2856) (2856 . 2862) (#("d" 0 1 (fontified t)) . -2856) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) 2857) nil (26052 62475 257686 169000) 0 nil])
([nil nil ((2862 . 2863)) nil (26052 62475 257672 637000) 0 nil])
([nil nil ((2832 . 2841) (t 26052 62475 270385 237000)) nil (26052 64188 801813 235000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2983 . 2984) (nil fontified nil 2983 . 2984) (nil fontified nil 2969 . 2983) (nil fontified nil 2968 . 2969) (nil fontified nil 2964 . 2968) (nil fontified nil 2953 . 2964) (nil fontified nil 2952 . 2953) (nil fontified nil 2926 . 2952) (nil fontified nil 2922 . 2926) (nil fontified nil 2906 . 2922) (nil fontified nil 2905 . 2906) (nil fontified nil 2904 . 2905) (nil fontified nil 2903 . 2904) (nil fontified nil 2902 . 2903) (nil fontified nil 2901 . 2902) (nil fontified nil 2875 . 2901) (nil fontified nil 2871 . 2875) (nil fontified nil 2870 . 2871) (nil fontified nil 2868 . 2870) (nil fontified nil 2858 . 2868) (nil fontified nil 2857 . 2858) (nil fontified nil 2856 . 2857) (nil fontified nil 2853 . 2856) (nil fontified nil 2841 . 2853) (2841 . 2984)) nil (26052 64188 801809 851000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2963) (#("    " 0 4 (fontified t)) . -2906) (#("            " 0 12 (fontified t)) . -2841) 2813) nil (26052 64194 476057 926000) 0 nil])
([nil nil ((#("imageviews" 0 10 (fontified t)) . -2874) (undo-tree-id324 . -10) (undo-tree-id325 . -10) (undo-tree-id326 . -9) (undo-tree-id327 . -9) (undo-tree-id328 . -9) (undo-tree-id329 . -9) (undo-tree-id330 . -9) (undo-tree-id331 . -9) (undo-tree-id332 . -9) (undo-tree-id333 . -9) (undo-tree-id334 . -9) (undo-tree-id335 . -9) (undo-tree-id336 . -9) (undo-tree-id337 . -10) (undo-tree-id338 . -10) (undo-tree-id339 . -10) (undo-tree-id340 . -10) (undo-tree-id341 . -10) (undo-tree-id342 . -10) (undo-tree-id343 . -10) (undo-tree-id344 . -10) (undo-tree-id345 . -10) (undo-tree-id346 . -10) (undo-tree-id347 . -10) (undo-tree-id348 . -10) (undo-tree-id349 . -10) (undo-tree-id350 . -10) (undo-tree-id351 . -10) (undo-tree-id352 . -10) 2884 (t 26052 64188 810490 428000)) nil (26052 64216 99837 464000) 0 nil] [nil nil ((#("imageviews" 0 10 (fontified t)) . -2874) (undo-tree-id259 . -10) (undo-tree-id260 . -10) (undo-tree-id261 . -9) (undo-tree-id262 . -9) (undo-tree-id263 . -9) (undo-tree-id264 . -9) (undo-tree-id265 . -9) (undo-tree-id266 . -9) (undo-tree-id267 . -9) (undo-tree-id268 . -9) (undo-tree-id269 . -9) (undo-tree-id270 . -9) (undo-tree-id271 . -9) (undo-tree-id272 . -10) (undo-tree-id273 . -10) (undo-tree-id274 . -10) (undo-tree-id275 . -10) (undo-tree-id276 . -10) (undo-tree-id277 . -10) (undo-tree-id278 . -10) (undo-tree-id279 . -10) (undo-tree-id280 . -10) (undo-tree-id281 . -10) (undo-tree-id282 . -10) (undo-tree-id283 . -10) 2884 (t 26052 64188 810490 428000)) ((2874 . 2884)) (26052 64194 475706 426000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -2873) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) 2874) nil (26052 64216 99817 725000) 0 nil])
nil
([nil nil ((2873 . 2874)) nil (26052 64216 99799 159000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2873) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) 2874) nil (26052 64216 99798 72000) 0 nil])
([nil nil ((2873 . 2874)) nil (26052 64216 99793 817000) 0 nil])
([nil nil ((2873 . 2874)) nil (26052 64216 99792 757000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2873) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) 2874) nil (26052 64216 99788 759000) 0 nil])
([nil nil ((2873 . 2875) (t 26052 64216 113825 437000)) nil (26052 64239 374298 345000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -2874) (undo-tree-id363 . -1) 2875) nil (26052 64239 374297 422000) 0 nil])
([nil nil ((2874 . 2875)) nil (26052 64239 374295 891000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2874) (undo-tree-id362 . -1) 2875) nil (26052 64239 374295 152000) 0 nil])
([nil nil ((2874 . 2875)) nil (26052 64239 374293 705000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t)) . -2874) (undo-tree-id361 . -1) 2875) nil (26052 64239 374292 860000) 0 nil])
([nil nil ((2874 . 2875)) nil (26052 64239 374291 125000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -2874) (undo-tree-id360 . -1) 2875) nil (26052 64239 374290 179000) 0 nil])
([nil nil ((2874 . 2875)) nil (26052 64239 374288 464000) 0 nil])
([nil nil ((2874 . 2894) (#("s" 0 1 (fontified nil)) . 2874) (2874 . 2875) (#("swapchain_imageviews" 0 20 (fontified nil)) . -2874) (2874 . 2894) (#("s" 0 1 (fontified t)) . -2874) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) 2875) nil (26052 64239 374286 108000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2894) (undo-tree-id353 . -1) (undo-tree-id354 . -1) 2895) nil (26052 64239 374276 728000) 0 nil])
([nil nil ((2927 . 2928) (t 26052 64239 420493 534000)) nil (26052 64247 237441 692000) 0 nil])
([nil nil ((2927 . 2929)) nil (26052 64247 237440 938000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -2928) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) 2929) nil (26052 64247 237439 823000) 0 nil])
([nil nil ((2928 . 2929)) nil (26052 64247 237433 318000) 0 nil])
([nil nil ((2928 . 2942) (#("l" 0 1 (fontified nil)) . 2928) (2928 . 2929) (#("logical_device" 0 14 (fontified nil)) . -2928) (2928 . 2942) (#("l" 0 1 (fontified t)) . -2928) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) 2929) nil (26052 64247 237431 378000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2942) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) 2943) nil (26052 64247 237423 583000) 0 nil])
([nil nil ((2832 . 2841) (t 26052 64247 250494 14000)) nil (26052 64257 460736 402000) 0 nil])
([nil nil ((2841 . 2845)) nil (26052 64257 460735 630000) 0 nil])
([nil nil ((apply yas--snippet-revive 2841 2847 #s(yas--snippet nil nil nil 40 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 40 nil nil nil nil)) (2841 . 2847) (#("unsafe" 0 6 (fontified nil)) . 2841) (2841 . 2847) (#("unsa" 0 4 (fontified nil)) . 2841) (2841 . 2845) (#("unsafe" 0 6 (fontified nil)) . -2841) (2841 . 2847) (#("unsa" 0 4 (fontified t)) . -2841) (undo-tree-id389 . -4) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -2) (undo-tree-id394 . -2) (undo-tree-id395 . -2) (undo-tree-id396 . -3) (undo-tree-id397 . -3) (undo-tree-id398 . -4) (undo-tree-id399 . -4) 2845) nil (26052 64257 460733 627000) 0 nil])
([nil nil ((2847 . 2849)) nil (26052 64257 460723 469000) 0 nil])
([nil nil ((3006 . 3019)) nil (26052 64257 460722 699000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -3015) (undo-tree-id386 . -4) (undo-tree-id387 . -4) (undo-tree-id388 . -4) (3019 . 3020)) nil (26052 64257 460720 646000) 0 nil])
([nil nil ((3013 . 3017) (2925 . 2941) (#("            " 0 12 (fontified t)) . 2925) (undo-tree-id384 . -11) (undo-tree-id385 . -10) (2858 . 2862) 2793) nil (26052 64257 460714 25000) 0 nil])
([nil nil ((2832 . 2841) (t 26052 64257 473827 973000)) nil (26052 64312 655824 556000) 0 nil])
([nil nil ((2841 . 2844)) nil (26052 64312 655823 806000) 0 nil])
([nil nil ((2841 . 2848) (#("tra" 0 3 (fontified nil)) . 2841) (2841 . 2844) (#("tracing" 0 7 (fontified nil)) . -2841) (2841 . 2848) (#("tra" 0 3 (fontified t)) . -2841) (undo-tree-id441 . -3) (undo-tree-id442 . -1) (undo-tree-id443 . -2) (undo-tree-id444 . -2) (undo-tree-id445 . -2) (undo-tree-id446 . -2) (undo-tree-id447 . -3) (undo-tree-id448 . -3) (undo-tree-id449 . -3) (undo-tree-id450 . -3) (undo-tree-id451 . -3) 2844) nil (26052 64312 655822 431000) 0 nil])
([nil nil ((2848 . 2851)) nil (26052 64312 655814 163000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -2850) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) 2851) nil (26052 64312 655813 327000) 0 nil])
([nil nil ((2850 . 2851)) nil (26052 64312 655809 458000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -2850) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) 2851) nil (26052 64312 655808 614000) 0 nil])
([nil nil ((2850 . 2852)) nil (26052 64312 655804 858000) 0 nil])
([nil nil ((apply yas--snippet-revive 2850 2857 #s(yas--snippet nil nil #s(yas--exit 2856 nil) 41 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2856 nil) 41 nil nil nil nil)) (2850 . 2857) (#("info!($0)" 0 9 (fontified nil)) . 2850) (2850 . 2859) (#("in" 0 2 (fontified nil)) . 2850) (2850 . 2852) (#("info!(â€¦)" 0 8 (fontified nil)) . -2850) (2850 . 2858) (#("in" 0 2 (face font-lock-keyword-face fontified t)) . -2850) (undo-tree-id426 . -2) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -2) (undo-tree-id430 . -2) 2852) nil (26052 64312 655803 435000) 0 nil])
([nil nil ((2856 . 2858)) nil (26052 64312 655798 337000) 0 nil])
([nil nil ((2857 . 2871)) nil (26052 64312 655797 653000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-string-face fontified t)) . -2868) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (#("w" 0 1 (face font-lock-string-face fontified t)) . -2869) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -2870) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) 2871) nil (26052 64312 655796 76000) 0 nil])
([nil nil ((2868 . 2872)) nil (26052 64312 655769 158000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-string-face fontified t)) . -2871) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) 2872) nil (26052 64312 655766 833000) 0 nil])
([nil nil ((2871 . 2881)) nil (26052 64312 655752 962000) 0 nil])
([nil nil ((2883 . 2884) (t 26052 64312 670498 27000)) nil (26052 64313 749127 698000) 0 nil])
([nil nil ((#("        tracing::info!(\"Destroying vk imageviews\");
        unsafe {
            for &imageview in self.swapchain.swapchain_imageviews.iter() {
                self.device.logical_device.destroy_image_view(imageview, None);
            }
        }
        self.swapchain.drop();
        self.device.drop();
        self.surface.drop();
        self.debug_messager.drop();
        self.instance.drop();" 0 8 (fontified t) 8 15 (face font-lock-constant-face fontified t) 15 17 (fontified t) 17 22 (face font-lock-preprocessor-face fontified t) 22 23 (face (rainbow-delimiters-depth-3-face) fontified t) 23 49 (face font-lock-string-face fontified t) 49 50 (face (rainbow-delimiters-depth-3-face) fontified t) 50 51 (fontified t) 51 52 (fontified t) 52 60 (fontified t) 60 66 (face rust-unsafe fontified t) 66 67 (fontified t) 67 68 (face (rainbow-delimiters-depth-3-face) fontified t) 68 69 (fontified t) 69 81 (fontified t) 81 84 (face font-lock-keyword-face fontified t) 84 85 (fontified t) 85 86 (face rust-ampersand-face fontified t) 86 96 (fontified t) 96 98 (face font-lock-keyword-face fontified t) 98 99 (fontified t) 99 103 (face font-lock-keyword-face fontified t) 103 114 (fontified t) 114 134 (fontified t) 134 139 (fontified t) 139 140 (face (rainbow-delimiters-depth-4-face) fontified t) 140 141 (face (rainbow-delimiters-depth-4-face) fontified t) 141 142 (fontified t) 142 143 (face (rainbow-delimiters-depth-4-face) fontified t) 143 160 (fontified t) 160 164 (face font-lock-keyword-face fontified t) 164 172 (fontified t) 172 186 (fontified t) 186 205 (fontified t) 205 206 (face (rainbow-delimiters-depth-5-face) fontified t) 206 217 (fontified t) 217 221 (face font-lock-type-face fontified t) 221 222 (face (rainbow-delimiters-depth-5-face) fontified t) 222 224 (fontified t) 224 236 (fontified t) 236 237 (face (rainbow-delimiters-depth-4-face) fontified t rear-nonsticky t) 237 238 (fontified t) 238 246 (fontified t) 246 247 (face (rainbow-delimiters-depth-3-face) fontified t) 247 248 (fontified t) 248 256 (fontified t) 256 260 (face font-lock-keyword-face fontified t) 260 261 (fontified t) 261 271 (fontified t) 271 275 (fontified t) 275 276 (face (rainbow-delimiters-depth-3-face) fontified t) 276 277 (face (rainbow-delimiters-depth-3-face) fontified t) 277 278 (fontified t) 278 279 (fontified t) 279 287 (fontified t) 287 291 (face font-lock-keyword-face fontified t) 291 303 (fontified t) 303 304 (face (rainbow-delimiters-depth-3-face) fontified t) 304 305 (face (rainbow-delimiters-depth-3-face) fontified t) 305 315 (fontified t) 315 319 (face font-lock-keyword-face fontified t) 319 332 (fontified t) 332 333 (face (rainbow-delimiters-depth-3-face) fontified t) 333 334 (face (rainbow-delimiters-depth-3-face) fontified t) 334 344 (fontified t) 344 348 (face font-lock-keyword-face fontified t) 348 368 (fontified t) 368 369 (face (rainbow-delimiters-depth-3-face) fontified t) 369 370 (face (rainbow-delimiters-depth-3-face) fontified t) 370 380 (fontified t) 380 384 (face font-lock-keyword-face fontified t) 384 398 (fontified t) 398 399 (face (rainbow-delimiters-depth-3-face) fontified t) 399 400 (face (rainbow-delimiters-depth-3-face) fontified t) 400 401 (fontified t)) . 2833) (undo-tree-id480 . -401) (undo-tree-id481 . -274) (undo-tree-id482 . -274) (undo-tree-id483 . -77) (undo-tree-id484 . -266) (undo-tree-id485 . -108) (undo-tree-id486 . -108) (undo-tree-id487 . -247) (undo-tree-id488 . -401) (t 26052 64313 760498 94000)) nil (26053 18 819210 372000) 0 nil])
([nil nil ((#("impl Drop for App {
    fn drop(&mut self) {

    }
}
" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 9 (face font-lock-type-face fontified t) 9 10 (fontified t) 10 13 (face font-lock-keyword-face fontified t) 13 14 (fontified t) 14 17 (face font-lock-type-face fontified t) 17 18 (fontified t) 18 19 (face (rainbow-delimiters-depth-1-face) fontified t) 19 20 (fontified t) 20 24 (fontified t) 24 26 (face font-lock-keyword-face fontified t) 26 27 (fontified t) 27 31 (face font-lock-function-name-face fontified t) 31 32 (face (rainbow-delimiters-depth-2-face) fontified t) 32 33 (face rust-ampersand-face fontified t) 33 36 (face font-lock-keyword-face fontified t) 36 37 (fontified t) 37 41 (face font-lock-keyword-face fontified t) 41 42 (face (rainbow-delimiters-depth-2-face) fontified t) 42 43 (fontified t) 43 44 (face (rainbow-delimiters-depth-2-face) fontified t) 44 45 (fontified t) 45 46 (fontified t) 46 50 (fontified t) 50 51 (face (rainbow-delimiters-depth-2-face) fontified t) 51 52 (fontified t) 52 53 (face (rainbow-delimiters-depth-1-face) fontified t) 53 54 (fontified t)) . 2788) (undo-tree-id452 . -54) (undo-tree-id453 . -44) (undo-tree-id454 . -45) (undo-tree-id455 . -45) (undo-tree-id456 . -45) (undo-tree-id457 . -45) (undo-tree-id458 . -45) (undo-tree-id459 . -45) (undo-tree-id460 . -45) (undo-tree-id461 . -45) (undo-tree-id462 . -45) (undo-tree-id463 . -45) (undo-tree-id464 . -45) (undo-tree-id465 . -45) (undo-tree-id466 . -45) (undo-tree-id467 . -45) (undo-tree-id468 . -54) (undo-tree-id469 . -54) (undo-tree-id470 . -54) (undo-tree-id471 . -53) (undo-tree-id472 . -50) (undo-tree-id473 . -49) (undo-tree-id474 . -45) (undo-tree-id475 . -22) (undo-tree-id476 . -21) (undo-tree-id477 . -54) (undo-tree-id478 . -45) (undo-tree-id479 . -54)) nil (26053 18 819201 43000) 0 nil])
([nil nil ((#("    instance: vk_render::Instance,
    debug_messager: vk_render::DebugMessager,
    surface: vk_render::Surface,
    device: vk_render::Device,
    queue: vk_render::Queue,
    swapchain: vk_render::SwapChain," 0 4 (fontified t) 4 12 (face font-lock-variable-name-face fontified t) 12 14 (fontified t) 14 23 (face font-lock-constant-face fontified t) 23 25 (fontified t) 25 33 (face font-lock-type-face fontified t) 33 39 (fontified t) 39 53 (face font-lock-variable-name-face fontified t) 53 55 (fontified t) 55 64 (face font-lock-constant-face fontified t) 64 66 (fontified t) 66 79 (face font-lock-type-face fontified t) 79 85 (fontified t) 85 92 (face font-lock-variable-name-face fontified t) 92 94 (fontified t) 94 103 (face font-lock-constant-face fontified t) 103 105 (fontified t) 105 112 (face font-lock-type-face fontified t) 112 118 (fontified t) 118 124 (face font-lock-variable-name-face fontified t) 124 126 (fontified t) 126 135 (face font-lock-constant-face fontified t) 135 137 (fontified t) 137 143 (face font-lock-type-face fontified t) 143 145 (fontified t) 145 149 (fontified t) 149 154 (face font-lock-variable-name-face fontified t) 154 156 (fontified t) 156 165 (face font-lock-constant-face fontified t) 165 167 (fontified t) 167 172 (face font-lock-type-face fontified t) 172 174 (fontified t) 174 178 (fontified t) 178 187 (face font-lock-variable-name-face fontified t) 187 189 (fontified t) 189 198 (face font-lock-constant-face fontified t) 198 200 (fontified t) 200 209 (face font-lock-type-face fontified t) 209 210 (fontified t)) . 381) (undo-tree-id506 . -210) (undo-tree-id507 . -173) (undo-tree-id508 . -204) (undo-tree-id509 . -210) (undo-tree-id510 . -210) (undo-tree-id511 . -210) (undo-tree-id512 . -210) (undo-tree-id513 . -209) (undo-tree-id514 . -208) (undo-tree-id515 . -207) (undo-tree-id516 . -205) (undo-tree-id517 . -173) (undo-tree-id518 . -171) (undo-tree-id519 . -167) (undo-tree-id520 . -133) (undo-tree-id521 . -131) (undo-tree-id522 . -130) (undo-tree-id523 . -128) (undo-tree-id524 . -127) (undo-tree-id525 . -126) (undo-tree-id526 . -92) (undo-tree-id527 . -91) (undo-tree-id528 . -90) (undo-tree-id529 . -89) (undo-tree-id530 . -88) (undo-tree-id531 . -87) (undo-tree-id532 . -40) (undo-tree-id533 . -39) (undo-tree-id534 . -38) (undo-tree-id535 . -37) (undo-tree-id536 . -36) (undo-tree-id537 . -35) (undo-tree-id538 . -210) (undo-tree-id539 . -210) (t 26053 18 830574 271000)) nil (26053 34 512249 843000) 0 nil])
([nil nil ((381 . 385)) nil (26053 34 512228 741000) 0 nil])
([nil nil ((385 . 397)) nil (26053 34 512228 128000) 0 nil])
([nil nil ((396 . 404) (#("V" 0 1 (fontified nil)) . 396) (396 . 397) (#("VkRender" 0 8 (fontified nil)) . -396) (396 . 404) (#("V" 0 1 (face font-lock-type-face fontified t)) . -396) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) 397) nil (26053 34 512226 593000) 0 nil])
([nil nil ((404 . 405)) nil (26053 34 512220 811000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -404) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) 405) nil (26053 34 512218 615000) 0 nil])
([nil nil ((404 . 405)) nil (26053 34 512203 612000) 0 nil])
([nil nil ((#("       let instance = Instance::new().unwrap();
        let debug_messager = DebugMessager::new(&instance);
        let surface = Surface::new(&instance, &window);
        let device = Device::new(&instance, &surface);
        let queue = Queue::new(&device);
        let swapchain = SwapChain::new(&window, &instance, &device, &surface);" 0 7 (fontified t) 7 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 19 (face font-lock-variable-name-face fontified t) 19 22 (fontified t) 22 30 (face font-lock-type-face fontified t) 30 35 (fontified t) 35 36 (face (rainbow-delimiters-depth-3-face) fontified t) 36 37 (face (rainbow-delimiters-depth-3-face) fontified t) 37 44 (fontified t) 44 45 (face (rainbow-delimiters-depth-3-face) fontified t) 45 46 (face (rainbow-delimiters-depth-3-face) fontified t) 46 56 (fontified t) 56 59 (face font-lock-keyword-face fontified t) 59 60 (fontified t) 60 74 (face font-lock-variable-name-face fontified t) 74 77 (fontified t) 77 90 (face font-lock-type-face fontified t) 90 95 (fontified t) 95 96 (face (rainbow-delimiters-depth-3-face) fontified t) 96 97 (face rust-ampersand-face fontified t) 97 105 (fontified t) 105 106 (face (rainbow-delimiters-depth-3-face) fontified t) 106 116 (fontified t) 116 119 (face font-lock-keyword-face fontified t) 119 120 (fontified t) 120 127 (face font-lock-variable-name-face fontified t) 127 130 (fontified t) 130 137 (face font-lock-type-face fontified t) 137 142 (fontified t) 142 143 (face (rainbow-delimiters-depth-3-face) fontified t) 143 144 (face rust-ampersand-face fontified t) 144 154 (fontified t) 154 155 (face rust-ampersand-face fontified t) 155 161 (fontified t) 161 162 (face (rainbow-delimiters-depth-3-face) fontified t) 162 172 (fontified t) 172 175 (face font-lock-keyword-face fontified t) 175 176 (fontified t) 176 182 (face font-lock-variable-name-face fontified t) 182 185 (fontified t) 185 191 (face font-lock-type-face fontified t) 191 196 (fontified t) 196 197 (face (rainbow-delimiters-depth-3-face) fontified t) 197 198 (face rust-ampersand-face fontified t) 198 208 (fontified t) 208 209 (face rust-ampersand-face fontified t) 209 216 (fontified t) 216 217 (face (rainbow-delimiters-depth-3-face) fontified t) 217 227 (fontified t) 227 230 (face font-lock-keyword-face fontified t) 230 231 (fontified t) 231 236 (face font-lock-variable-name-face fontified t) 236 239 (fontified t) 239 244 (face font-lock-type-face fontified t) 244 249 (fontified t) 249 250 (face (rainbow-delimiters-depth-3-face) fontified t) 250 251 (face rust-ampersand-face fontified t) 251 257 (fontified t) 257 258 (face (rainbow-delimiters-depth-3-face) fontified t) 258 260 (fontified t) 260 268 (fontified t) 268 271 (face font-lock-keyword-face fontified t) 271 272 (fontified t) 272 281 (face font-lock-variable-name-face fontified t) 281 284 (fontified t) 284 293 (face font-lock-type-face fontified t) 293 295 (fontified t) 295 298 (fontified t) 298 299 (face (rainbow-delimiters-depth-3-face) fontified t) 299 300 (face rust-ampersand-face fontified t) 300 308 (fontified t) 308 309 (face rust-ampersand-face fontified t) 309 319 (fontified t) 319 320 (face rust-ampersand-face fontified t) 320 326 (fontified t) 326 328 (fontified t) 328 329 (face rust-ampersand-face fontified t) 329 336 (fontified t) 336 337 (face (rainbow-delimiters-depth-3-face) fontified t) 337 338 (fontified t)) . 531) (undo-tree-id609 . -338) (undo-tree-id610 . -298) (undo-tree-id611 . -298) (undo-tree-id612 . -338) (undo-tree-id613 . -338) (undo-tree-id614 . -338) (undo-tree-id615 . -338) (undo-tree-id616 . -337) (undo-tree-id617 . -332) (undo-tree-id618 . -326) (undo-tree-id619 . -259) (undo-tree-id620 . -207) (undo-tree-id621 . -200) (undo-tree-id622 . -194) (undo-tree-id623 . -191) (undo-tree-id624 . -133) (undo-tree-id625 . -130) (undo-tree-id626 . -128) (undo-tree-id627 . -126) (undo-tree-id628 . -124) (undo-tree-id629 . -122) (undo-tree-id630 . -121) (undo-tree-id631 . -59) (undo-tree-id632 . -56) (undo-tree-id633 . -56) (undo-tree-id634 . -55) (undo-tree-id635 . -54) (undo-tree-id636 . -53) (undo-tree-id637 . -52) (undo-tree-id638 . -51) (undo-tree-id639 . -50) (undo-tree-id640 . -338) (undo-tree-id641 . -338) (t 26053 34 527241 902000)) nil (26053 48 414859 297000) 0 nil])
([nil nil ((530 . 538) (#(" " 0 1 (fontified t)) . 530) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) 531) nil (26053 48 414839 35000) 0 nil])
([nil nil ((538 . 544)) nil (26053 48 414814 171000) 0 nil])
([nil nil ((542 . 551) (#("vk" 0 2 (fontified nil)) . 542) (542 . 544) (#("vk_render" 0 9 (fontified nil)) . -542) (542 . 551) (#("vk" 0 2 (face font-lock-variable-name-face fontified t)) . -542) (undo-tree-id561 . -2) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -2) (undo-tree-id565 . -2) (undo-tree-id566 . -2) (undo-tree-id567 . -2) 544) nil (26053 48 414813 26000) 0 nil])
([nil nil ((551 . 555)) nil (26053 48 414807 921000) 0 nil])
([nil nil ((554 . 562) (#("V" 0 1 (fontified nil)) . 554) (554 . 555) (#("VkRender" 0 8 (fontified nil)) . -554) (554 . 562) (#("V" 0 1 (face font-lock-type-face fontified t)) . -554) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) 555) nil (26053 48 414806 926000) 0 nil])
([nil nil ((562 . 565)) nil (26053 48 414802 44000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 568 575 nil nil nil t #s(yas--exit 576 nil))) #s(yas--exit 576 nil) 48 nil #s(yas--field 1 568 575 nil nil nil t #s(yas--exit 576 nil)) nil nil)) (564 . 575) (#("new(${1:window})$0" 0 18 (fontified nil)) . 564) (564 . 582) (#("n" 0 1 (fontified nil)) . 564) (564 . 565) (#("new(â€¦)" 0 6 (fontified nil)) . -564) (564 . 570) (#("n" 0 1 (fontified t)) . -564) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) 565) nil (26053 48 414800 741000) 0 nil])
([nil nil ((#("window" 0 6 (fontified nil)) . 569) (undo-tree-id548 . -6) (568 . 569)) nil (26053 48 414795 228000) 0 nil])
([nil nil ((569 . 570)) nil (26053 48 414793 910000) 0 nil])
([nil nil ((569 . 575) (#("w" 0 1 (fontified nil)) . 569) (undo-tree-id540 . -1) (569 . 570) (#("window" 0 6 (fontified nil)) . -569) (undo-tree-id541 . -6) (569 . 575) (#("w" 0 1 (fontified t)) . -569) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) 570) nil (26053 48 414792 39000) 0 nil])
([nil nil ((apply yas--snippet-revive 564 576 #s(yas--snippet nil (#s(yas--field 1 568 575 nil nil nil t #s(yas--exit 576 nil))) #s(yas--exit 576 nil) 48 nil #s(yas--field 1 568 575 nil nil nil t #s(yas--exit 576 nil)) nil nil))) nil (26053 48 414780 773000) 0 nil])
([nil nil ((576 . 577)) nil (26053 48 414777 29000) 0 nil])
([nil nil ((#("            instance,
            debug_messager,
            surface,
            device,
            queue,
            swapchain," 0 91 (fontified t) 91 110 (fontified t) 110 122 (fontified t) 122 132 (fontified t)) . 621) (undo-tree-id654 . -132) (undo-tree-id655 . -21) (undo-tree-id656 . -21) (undo-tree-id657 . -21) (undo-tree-id658 . -21) (undo-tree-id659 . -21) (undo-tree-id660 . -132) (undo-tree-id661 . -132) (undo-tree-id662 . -132) (undo-tree-id663 . -131) (undo-tree-id664 . -130) (undo-tree-id665 . -109) (undo-tree-id666 . -107) (undo-tree-id667 . -106) (undo-tree-id668 . -105) (undo-tree-id669 . -104) (undo-tree-id670 . -83) (undo-tree-id671 . -82) (undo-tree-id672 . -81) (undo-tree-id673 . -59) (undo-tree-id674 . -58) (undo-tree-id675 . -57) (undo-tree-id676 . -56) (undo-tree-id677 . -55) (undo-tree-id678 . -26) (undo-tree-id679 . -25) (undo-tree-id680 . -24) (undo-tree-id681 . -23) (undo-tree-id682 . -22) (undo-tree-id683 . -132) (undo-tree-id684 . -132) (t 26053 48 427242 755000)) nil (26053 55 870639 786000) 0 nil])
([nil nil ((621 . 622)) nil (26053 55 870621 815000) 0 nil])
([nil nil ((621 . 630) (#("v" 0 1 (fontified nil)) . 621) (621 . 622) (#("vk_render" 0 9 (fontified nil)) . -621) (621 . 630) (#("v" 0 1 (fontified t)) . -621) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) 622) nil (26053 55 870620 617000) 0 nil])
([nil nil ((643 . 659) (621 . 633) (630 . 631)) nil (26053 55 870615 630000) 0 nil])
([nil nil ((#("                
" 0 16 (fontified t) 16 17 (fontified t)) . 643) (undo-tree-id642 . -16) (undo-tree-id643 . -16) (undo-tree-id644 . -16) (undo-tree-id645 . -16) (undo-tree-id646 . -16) (undo-tree-id647 . -17)) nil (26053 55 870613 524000) 0 nil])
([nil current ((642 . 643)) nil (26053 55 870601 540000) 0 nil])
nil
