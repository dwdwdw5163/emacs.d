(undo-tree-save-format-version . 1)
"d17f5243321d595aa8fa4261664446cb8997bbc7"
[nil nil nil nil (26048 27621 259543 243000) 0 nil]
([nil nil ((1 . 3) (t 26048 27516 850051 114000)) nil (26048 27621 259542 165000) 0 nil])
([nil nil ((1 . 2)) nil (26048 27621 259541 281000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) 2) nil (26048 27621 259540 269000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . 1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (#("
" 0 1 (fontified t)) . -2) (undo-tree-id215 . -1) (undo-tree-id216 . 1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) 3) nil (26048 27621 259534 252000) 0 nil])
([nil nil ((#("println!(\"Hello, world!\");" 0 8 (face rust-builtin-formatting-macro fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t) 9 24 (face font-lock-string-face fontified t) 24 25 (face (rainbow-delimiters-depth-2-face) fontified t) 25 26 (fontified t)) . 17) (undo-tree-id146 . -26)) nil (26048 27621 258980 606000) 0 nil])
([nil nil ((17 . 20)) nil (26048 27621 258978 945000) 0 nil])
([nil nil ((17 . 26) (#("gst" 0 3 (fontified nil)) . 17) (17 . 20) (#("gstreamer" 0 9 (fontified nil)) . -17) (17 . 26) (#("gst" 0 3 (fontified t)) . -17) (undo-tree-id127 . -3) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -2) (undo-tree-id133 . -2) (undo-tree-id134 . -2) (undo-tree-id135 . -2) (undo-tree-id136 . -2) (undo-tree-id137 . -2) (undo-tree-id138 . -2) (undo-tree-id139 . -3) (undo-tree-id140 . -3) (undo-tree-id141 . -3) (undo-tree-id142 . -3) (undo-tree-id143 . -3) (undo-tree-id144 . -3) (undo-tree-id145 . -3) 20) nil (26048 27621 258976 797000) 0 nil])
([nil nil ((26 . 31)) nil (26048 27621 258885 751000) 0 nil])
([nil nil ((apply yas--snippet-revive 28 34 #s(yas--snippet nil nil #s(yas--exit 34 nil) 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 34 nil) 0 nil nil nil nil)) (28 . 34) (#("init()$0" 0 8 (fontified nil)) . 28) (28 . 36) (#("ini" 0 3 (fontified nil)) . 28) (28 . 31) (#("init() (alias gst_init_check)" 0 29 (fontified nil)) . -28) (28 . 57) (#("ini" 0 3 (fontified t)) . -28) (undo-tree-id118 . -3) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -2) (undo-tree-id122 . -2) (undo-tree-id123 . -3) (undo-tree-id124 . -3) (undo-tree-id125 . -3) (undo-tree-id126 . -3) 31) nil (26048 27621 258884 327000) 0 nil])
([nil nil ((34 . 36)) nil (26048 27621 258876 938000) 0 nil])
([nil nil ((11 . 12)) nil (26048 27621 258876 282000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -11) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) 12) nil (26048 27621 258875 393000) 0 nil])
([nil nil ((11 . 14)) nil (26048 27621 258868 423000) 0 nil])
([nil nil ((1 . 2)) nil (26048 27621 258867 870000) 0 nil])
([nil nil ((1 . 7)) nil (26048 27621 258867 318000) 0 nil])
([nil nil ((5 . 11) (#("an" 0 2 (fontified nil)) . 5) (5 . 7) (#("anyhow" 0 6 (fontified nil)) . -5) (5 . 11) (#("an" 0 2 (face font-lock-constant-face fontified t)) . -5) (undo-tree-id104 . -2) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -2) 7) nil (26048 27621 258866 83000) 0 nil])
([nil nil ((11 . 14)) nil (26048 27621 258861 951000) 0 nil])
([nil nil ((13 . 18) (#("E" 0 1 (fontified nil)) . 13) (13 . 14) (#("Error" 0 5 (fontified nil)) . -13) (13 . 18) (#("E" 0 1 (face font-lock-type-face fontified t)) . -13) (undo-tree-id102 . -1) (undo-tree-id103 . -1) 14) nil (26048 27621 258860 859000) 0 nil])
([nil nil ((18 . 19)) nil (26048 27621 258858 38000) 0 nil])
([nil nil ((33 . 35)) nil (26048 27621 258857 355000) 0 nil])
([nil nil ((apply yas--snippet-revive 33 41 #s(yas--snippet nil nil #s(yas--exit 40 nil) 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 40 nil) 1 nil nil nil nil)) (33 . 41) (#("Result<$0>" 0 10 (fontified nil)) . 33) (33 . 43) (#("Re" 0 2 (fontified nil)) . 33) (33 . 35) (#("Result<…>" 0 9 (fontified nil)) . -33) (33 . 42) (#("Re" 0 2 (face font-lock-type-face fontified t)) . -33) (undo-tree-id96 . -2) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -2) (undo-tree-id101 . -2) 35) nil (26048 27621 258855 778000) 0 nil])
([nil nil ((40 . 44)) nil (26048 27621 258836 45000) 0 nil])
([nil nil ((44 . 45)) nil (26048 27621 258835 337000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -40) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -41) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -42) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (#("," 0 1 (fontified t)) . -43) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -44) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) 45) nil (26048 27621 258831 534000) 0 nil])
([nil nil ((40 . 44)) nil (26048 27621 258730 65000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -42) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (#(" " 0 1 (fontified t)) . -43) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) 44) nil (26048 27621 258728 601000) 0 nil])
([nil nil ((42 . 45)) nil (26048 27621 258718 513000) 0 nil])
([nil nil ((44 . 49) (#("E" 0 1 (fontified nil)) . 44) (44 . 45) (#("Error" 0 5 (fontified nil)) . -44) (44 . 49) (#("E" 0 1 (face font-lock-type-face fontified t)) . -44) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) 45) nil (26048 27621 258717 32000) 0 nil])
([nil nil ((77 . 81) (#("    " 0 4 (fontified nil)) . 76) (undo-tree-id5 . -4) (undo-tree-id6 . -4) (undo-tree-id7 . -4) (undo-tree-id8 . -4) (undo-tree-id9 . -4) (75 . 81)) nil (26048 27621 258711 34000) 0 nil])
([nil nil ((81 . 82)) nil (26048 27621 258706 261000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 84 86 nil nil nil nil #s(yas--exit 87 nil))) #s(yas--exit 87 nil) 2 nil #s(yas--field 1 84 86 nil nil nil nil #s(yas--exit 87 nil)) nil nil)) (81 . 87) (#("Ok(${1:()})$0" 0 13 (fontified nil)) . 81) (81 . 94) (#("O" 0 1 (fontified nil)) . 81) (81 . 82) (#("Ok(…)" 0 5 (fontified nil)) . -81) (81 . 86) (#("O" 0 1 (face font-lock-type-face fontified t)) . -81) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) 82) nil (26048 27621 258701 734000) 0 nil])
([nil nil ((apply yas--snippet-revive 81 87 #s(yas--snippet nil (#s(yas--field 1 84 86 nil nil nil nil #s(yas--exit 87 nil))) #s(yas--exit 87 nil) 2 nil #s(yas--field 1 84 86 nil nil nil nil #s(yas--exit 87 nil)) nil nil))) nil (26048 27641 807646 0) 0 nil])
([nil nil ((78 . 82) (#("    " 0 4 (fontified nil)) . 77) (undo-tree-id735 . -4) (undo-tree-id736 . -4) (undo-tree-id737 . -4) (undo-tree-id738 . -4) (undo-tree-id739 . -4) (77 . 82) (#("    " 0 4 (fontified nil)) . 76) (76 . 80) (76 . 77) (t 26048 27621 283390 812000)) nil (26048 27641 807644 763000) 0 nil])
([nil nil ((76 . 80)) nil (26048 27641 807639 138000) 0 nil])
([nil nil ((80 . 84)) nil (26048 27641 807638 487000) 0 nil])
([nil nil ((84 . 92)) nil (26048 27641 807637 780000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t)) . -90) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (#("i" 0 1 (fontified t)) . -91) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) 92) nil (26048 27641 807635 733000) 0 nil])
([nil nil ((90 . 91)) nil (26048 27641 807610 43000) 0 nil])
([nil nil ((#("E" 0 1 (face font-lock-type-face fontified t)) . -90) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) 91) nil (26048 27641 807608 900000) 0 nil])
([nil nil ((90 . 92)) nil (26048 27641 807600 492000) 0 nil])
([nil nil ((90 . 99) (#("gs" 0 2 (fontified nil)) . 90) (90 . 92) (#("gstreamer" 0 9 (fontified nil)) . -90) (90 . 99) (#("gs" 0 2 (fontified t)) . -90) (undo-tree-id674 . -2) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -2) (undo-tree-id682 . -2) (undo-tree-id683 . -2) (undo-tree-id684 . -2) (undo-tree-id685 . -2) 92) nil (26048 27641 807599 62000) 0 nil])
([nil nil ((99 . 105)) nil (26048 27641 807589 413000) 0 nil])
([nil nil ((101 . 115) (#("Elem" 0 4 (fontified nil)) . 101) (101 . 105) (#("ElementFactory (alias GstElementFactory)" 0 40 (fontified nil)) . -101) (101 . 141) (#("Elem" 0 4 (face font-lock-type-face fontified t)) . -101) (undo-tree-id645 . -4) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -2) (undo-tree-id656 . -2) (undo-tree-id657 . -2) (undo-tree-id658 . -2) (undo-tree-id659 . -2) (undo-tree-id660 . -3) (undo-tree-id661 . -3) (undo-tree-id662 . -3) (undo-tree-id663 . -3) (undo-tree-id664 . -3) (undo-tree-id665 . -4) (undo-tree-id666 . -4) (undo-tree-id667 . -4) (undo-tree-id668 . -4) (undo-tree-id669 . -4) (undo-tree-id670 . -4) (undo-tree-id671 . -4) (undo-tree-id672 . -4) (undo-tree-id673 . -4) 105) nil (26048 27641 807587 72000) 0 nil])
([nil nil ((115 . 117)) nil (26048 27641 807566 229000) 0 nil])
([nil nil ((117 . 120)) nil (26048 27641 809590 276000) 0 nil])
([nil nil ((120 . 121)) nil (26048 27675 612593 566000) 0 nil] [nil nil ((1 . 87) (#("use anyhow::Error;
fn main() -> Result<(), Error>{
    gstreamer::init()?;
    let src = gstreamer::ElementFactory::make_with_name(factoryname, name)

    
    Ok(())
}
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 10 (face font-lock-constant-face fontified t) 10 12 (fontified t) 12 17 (face font-lock-type-face fontified t) 17 18 (fontified t) 18 19 (fontified t) 19 21 (face font-lock-keyword-face fontified t) 21 22 (fontified t) 22 26 (face font-lock-function-name-face fontified t) 26 27 (face (rainbow-delimiters-depth-1-face) fontified t) 27 28 (face (rainbow-delimiters-depth-1-face) fontified t) 28 30 (fontified t) 30 31 (syntax-table (1) fontified t) 31 32 (fontified t) 32 38 (face font-lock-type-face fontified t) 38 39 (face (rainbow-delimiters-depth-1-face) fontified t) 39 40 (face (rainbow-delimiters-depth-2-face) fontified t) 40 41 (face (rainbow-delimiters-depth-2-face) fontified t) 41 43 (fontified t) 43 48 (face font-lock-type-face fontified t) 48 49 (face (rainbow-delimiters-depth-1-face) fontified t) 49 50 (face (rainbow-delimiters-depth-1-face) fontified t) 50 51 (fontified t) 51 55 (fontified t) 55 64 (face font-lock-constant-face fontified t) 64 66 (fontified t) 66 70 (fontified t) 70 71 (face (rainbow-delimiters-depth-2-face) fontified t) 71 72 (face (rainbow-delimiters-depth-2-face) fontified t) 72 73 (face rust-question-mark fontified t) 73 75 (fontified t) 75 79 (fontified t) 79 82 (face font-lock-keyword-face fontified t) 82 83 (fontified t) 83 86 (face font-lock-variable-name-face fontified t) 86 89 (fontified t) 89 98 (face font-lock-constant-face fontified t) 98 100 (fontified t) 100 114 (face font-lock-type-face fontified t) 114 116 (fontified t) 116 130 (fontified t) 130 131 (face (rainbow-delimiters-depth-2-face) fontified t) 131 148 (fontified t) 148 149 (face (rainbow-delimiters-depth-2-face) fontified t) 149 150 (fontified t) 150 155 (fontified t) 155 156 (fontified t) 156 160 (fontified t) 160 162 (face font-lock-type-face fontified t) 162 163 (face (rainbow-delimiters-depth-2-face) fontified t) 163 164 (face (rainbow-delimiters-depth-3-face) fontified t) 164 165 (face (rainbow-delimiters-depth-3-face) fontified t) 165 166 (face (rainbow-delimiters-depth-2-face) fontified t) 166 167 (fontified t) 167 168 (face (rainbow-delimiters-depth-1-face) fontified t) 168 169 (fontified t)) . 1) (undo-tree-id233 . 150) (undo-tree-id234 . 150) (undo-tree-id235 . -55) (undo-tree-id236 . -55) (undo-tree-id237 . -55) (undo-tree-id238 . -55) (undo-tree-id239 . -55) (undo-tree-id240 . -55) (undo-tree-id241 . -55) (undo-tree-id242 . -55) (undo-tree-id243 . -55) (undo-tree-id244 . -55) (undo-tree-id245 . -55) (undo-tree-id246 . -55) (undo-tree-id247 . -55) (undo-tree-id248 . -55) (undo-tree-id249 . -55) (undo-tree-id250 . -55) (undo-tree-id251 . -55) (undo-tree-id252 . -55) (undo-tree-id253 . -66) (undo-tree-id254 . -66) (undo-tree-id255 . -66) (undo-tree-id256 . -66) (undo-tree-id257 . -66) (undo-tree-id258 . -66) (undo-tree-id259 . -66) (undo-tree-id260 . -66) (undo-tree-id261 . -29) (undo-tree-id262 . -29) (undo-tree-id263 . -29) (undo-tree-id264 . -29) (undo-tree-id265 . -29) (undo-tree-id266 . -29) (undo-tree-id267 . -29) (undo-tree-id268 . -29) (undo-tree-id269 . -29) (undo-tree-id270 . -4) (undo-tree-id271 . -4) (undo-tree-id272 . -4) (undo-tree-id273 . -12) (undo-tree-id274 . -32) (undo-tree-id275 . -32) (undo-tree-id276 . -32) (undo-tree-id277 . -32) (undo-tree-id278 . -32) (undo-tree-id279 . -39) (undo-tree-id280 . -39) (undo-tree-id281 . -39) (undo-tree-id282 . -39) (undo-tree-id283 . -39) (undo-tree-id284 . -39) (undo-tree-id285 . -39) (undo-tree-id286 . -39) (undo-tree-id287 . -39) (undo-tree-id288 . -39) (undo-tree-id289 . -39) (undo-tree-id290 . -39) (undo-tree-id291 . -39) (undo-tree-id292 . -39) (undo-tree-id293 . -39) (undo-tree-id294 . -39) (undo-tree-id295 . -41) (undo-tree-id296 . -41) (undo-tree-id297 . -41) (undo-tree-id298 . -41) (undo-tree-id299 . -41) (undo-tree-id300 . -41) (undo-tree-id301 . -41) (undo-tree-id302 . -43) (undo-tree-id303 . -43) (undo-tree-id304 . -43) (undo-tree-id305 . -43) (undo-tree-id306 . -75) (undo-tree-id307 . -75) (undo-tree-id308 . -75) (undo-tree-id309 . -75) (undo-tree-id310 . -160) (undo-tree-id311 . -160) (undo-tree-id312 . -160) (undo-tree-id313 . -160) (undo-tree-id314 . -163) (undo-tree-id315 . -163) (undo-tree-id316 . -163) (undo-tree-id317 . -131) (undo-tree-id318 . -131) (undo-tree-id319 . -156) (undo-tree-id320 . -163) (undo-tree-id321 . -163) (undo-tree-id322 . -163) (undo-tree-id323 . -163) (undo-tree-id324 . -163) (undo-tree-id325 . -163) (undo-tree-id326 . -163) (undo-tree-id327 . -163) (undo-tree-id328 . -163) (undo-tree-id329 . -163) (undo-tree-id330 . -163) (undo-tree-id331 . -163) (undo-tree-id332 . -163) (undo-tree-id333 . -163) (undo-tree-id334 . -163) (undo-tree-id335 . -163) (undo-tree-id336 . -163) (undo-tree-id337 . -163) (undo-tree-id338 . -163) (undo-tree-id339 . -163) (undo-tree-id340 . -163) (undo-tree-id341 . -163) (undo-tree-id342 . -163) (undo-tree-id343 . -163) (undo-tree-id344 . -163) (undo-tree-id345 . -163) (undo-tree-id346 . -163) (undo-tree-id347 . -163) (undo-tree-id348 . -163) (undo-tree-id349 . -163) (undo-tree-id350 . -163) (undo-tree-id351 . -163) (undo-tree-id352 . -75) (undo-tree-id353 . -75) (undo-tree-id354 . -75) (undo-tree-id355 . -75) (undo-tree-id356 . 20) (undo-tree-id357 . -150) (undo-tree-id358 . -150) (undo-tree-id359 . -150) (undo-tree-id360 . -150) (undo-tree-id361 . 19) (undo-tree-id362 . -155) (undo-tree-id363 . -155) (undo-tree-id364 . -155) (undo-tree-id365 . -155) (undo-tree-id366 . -150) (undo-tree-id367 . -79) (undo-tree-id368 . -79) (undo-tree-id369 . -79) (undo-tree-id370 . -79) (undo-tree-id371 . -79) (undo-tree-id372 . -79) (undo-tree-id373 . -79) (undo-tree-id374 . -79) (undo-tree-id375 . -79) (undo-tree-id376 . -79) (undo-tree-id377 . -79) (undo-tree-id378 . -79) (undo-tree-id379 . -80) (undo-tree-id380 . -80) (undo-tree-id381 . -80) (undo-tree-id382 . -80) (undo-tree-id383 . -80) (undo-tree-id384 . -80) (undo-tree-id385 . -75) (undo-tree-id386 . -81) (undo-tree-id387 . -81) (undo-tree-id388 . -81) (undo-tree-id389 . -81) (undo-tree-id390 . -81) (undo-tree-id391 . -75) (undo-tree-id392 . -82) (undo-tree-id393 . -82) (undo-tree-id394 . -82) (undo-tree-id395 . -82) (undo-tree-id396 . -82) (undo-tree-id397 . -83) (undo-tree-id398 . -83) (undo-tree-id399 . -83) (undo-tree-id400 . -83) (undo-tree-id401 . -83) (undo-tree-id402 . -83) (undo-tree-id403 . -83) (undo-tree-id404 . -83) (undo-tree-id405 . -83) (undo-tree-id406 . -83) (undo-tree-id407 . -83) (undo-tree-id408 . -83) (undo-tree-id409 . -84) (undo-tree-id410 . -84) (undo-tree-id411 . -84) (undo-tree-id412 . -84) (undo-tree-id413 . -84) (undo-tree-id414 . -84) (undo-tree-id415 . -75) (undo-tree-id416 . -85) (undo-tree-id417 . -85) (undo-tree-id418 . -85) (undo-tree-id419 . -85) (undo-tree-id420 . -85) (undo-tree-id421 . -75) (undo-tree-id422 . -86) (undo-tree-id423 . -86) (undo-tree-id424 . -86) (undo-tree-id425 . -86) (undo-tree-id426 . -86) (undo-tree-id427 . -87) (undo-tree-id428 . -87) (undo-tree-id429 . -87) (undo-tree-id430 . -87) (undo-tree-id431 . -88) (undo-tree-id432 . -88) (undo-tree-id433 . -88) (undo-tree-id434 . -88) (undo-tree-id435 . -88) (undo-tree-id436 . -88) (undo-tree-id437 . -89) (undo-tree-id438 . -89) (undo-tree-id439 . -89) (undo-tree-id440 . -89) (undo-tree-id441 . -89) (undo-tree-id442 . -89) (undo-tree-id443 . -89) (undo-tree-id444 . -89) (undo-tree-id445 . -89) (undo-tree-id446 . -89) (undo-tree-id447 . -89) (undo-tree-id448 . -89) (undo-tree-id449 . -89) (undo-tree-id450 . -89) (undo-tree-id451 . -89) (undo-tree-id452 . -89) (undo-tree-id453 . -89) (undo-tree-id454 . -89) (undo-tree-id455 . -75) (undo-tree-id456 . -89) (undo-tree-id457 . -89) (undo-tree-id458 . -89) (undo-tree-id459 . -89) (undo-tree-id460 . -89) (undo-tree-id461 . -89) (undo-tree-id462 . -89) (undo-tree-id463 . -89) (undo-tree-id464 . -89) (undo-tree-id465 . -89) (undo-tree-id466 . -89) (undo-tree-id467 . -89) (undo-tree-id468 . -89) (undo-tree-id469 . -89) (undo-tree-id470 . -89) (undo-tree-id471 . -89) (undo-tree-id472 . -89) (undo-tree-id473 . -89) (undo-tree-id474 . -89) (undo-tree-id475 . -89) (undo-tree-id476 . -89) (undo-tree-id477 . -89) (undo-tree-id478 . -89) (undo-tree-id479 . -89) (undo-tree-id480 . -89) (undo-tree-id481 . -89) (undo-tree-id482 . -89) (undo-tree-id483 . -89) (undo-tree-id484 . -89) (undo-tree-id485 . -89) (undo-tree-id486 . -89) (undo-tree-id487 . -89) (undo-tree-id488 . -89) (undo-tree-id489 . -89) (undo-tree-id490 . -89) (undo-tree-id491 . -89) (undo-tree-id492 . -89) (undo-tree-id493 . -89) (undo-tree-id494 . -89) (undo-tree-id495 . -89) (undo-tree-id496 . -89) (undo-tree-id497 . -89) (undo-tree-id498 . -89) (undo-tree-id499 . -89) (undo-tree-id500 . -89) (undo-tree-id501 . -89) (undo-tree-id502 . -89) (undo-tree-id503 . -89) (undo-tree-id504 . -89) (undo-tree-id505 . -75) (undo-tree-id506 . -89) (undo-tree-id507 . -89) (undo-tree-id508 . -89) (undo-tree-id509 . -89) (undo-tree-id510 . -89) (undo-tree-id511 . -98) (undo-tree-id512 . -98) (undo-tree-id513 . -98) (undo-tree-id514 . -98) (undo-tree-id515 . -98) (undo-tree-id516 . -98) (undo-tree-id517 . -99) (undo-tree-id518 . -99) (undo-tree-id519 . -100) (undo-tree-id520 . -100) (undo-tree-id521 . -100) (undo-tree-id522 . -100) (undo-tree-id523 . -100) (undo-tree-id524 . -100) (undo-tree-id525 . -75) (undo-tree-id526 . -100) (undo-tree-id527 . -100) (undo-tree-id528 . -100) (undo-tree-id529 . -100) (undo-tree-id530 . -100) (undo-tree-id531 . -100) (undo-tree-id532 . -100) (undo-tree-id533 . -100) (undo-tree-id534 . -100) (undo-tree-id535 . -75) (undo-tree-id536 . -100) (undo-tree-id537 . -100) (undo-tree-id538 . -100) (undo-tree-id539 . -100) (undo-tree-id540 . -100) (undo-tree-id541 . -75) (undo-tree-id542 . -100) (undo-tree-id543 . -100) (undo-tree-id544 . -100) (undo-tree-id545 . -100) (undo-tree-id546 . -100) (undo-tree-id547 . -75) (undo-tree-id548 . -100) (undo-tree-id549 . -100) (undo-tree-id550 . -100) (undo-tree-id551 . -100) (undo-tree-id552 . -100) (undo-tree-id553 . -100) (undo-tree-id554 . -100) (undo-tree-id555 . -100) (undo-tree-id556 . -100) (undo-tree-id557 . -114) (undo-tree-id558 . -114) (undo-tree-id559 . -114) (undo-tree-id560 . -114) (undo-tree-id561 . -114) (undo-tree-id562 . -114) (undo-tree-id563 . -114) (undo-tree-id564 . -114) (undo-tree-id565 . -114) (undo-tree-id566 . -114) (undo-tree-id567 . -114) (undo-tree-id568 . -114) (undo-tree-id569 . -114) (undo-tree-id570 . -114) (undo-tree-id571 . -115) (undo-tree-id572 . -115) (undo-tree-id573 . -115) (undo-tree-id574 . -115) (undo-tree-id575 . -116) (undo-tree-id576 . -116) (undo-tree-id577 . -116) (undo-tree-id578 . -116) (undo-tree-id579 . -116) (undo-tree-id580 . -116) (undo-tree-id581 . -116) (undo-tree-id582 . -116) (undo-tree-id583 . -116) (undo-tree-id584 . -116) (undo-tree-id585 . -116) (undo-tree-id586 . -116) (undo-tree-id587 . -75) (undo-tree-id588 . -116) (undo-tree-id589 . -116) (undo-tree-id590 . -116) (undo-tree-id591 . -116) (undo-tree-id592 . -116) (undo-tree-id593 . -75) (undo-tree-id594 . -116) (undo-tree-id595 . -116) (undo-tree-id596 . -116) (undo-tree-id597 . -116) (undo-tree-id598 . -116) (undo-tree-id599 . -75) (undo-tree-id600 . -116) (undo-tree-id601 . -116) (undo-tree-id602 . -116) (undo-tree-id603 . -116) (undo-tree-id604 . -116) (undo-tree-id605 . -116) (undo-tree-id606 . -116) (undo-tree-id607 . -116) (undo-tree-id608 . -116) (undo-tree-id609 . -116) (undo-tree-id610 . -116) (undo-tree-id611 . -131) (undo-tree-id612 . -142) (undo-tree-id613 . -144) (undo-tree-id614 . -148) (undo-tree-id615 . -149) (undo-tree-id616 . -149) (undo-tree-id617 . -149) (undo-tree-id618 . -75) (undo-tree-id619 . -131) (undo-tree-id620 . -131) (undo-tree-id621 . -19) (undo-tree-id622 . -20) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 132 143 nil nil nil t #s(yas--field 2 145 149 nil nil nil nil #s(yas--exit 150 nil))) #s(yas--field 2 145 149 nil nil nil nil #s(yas--exit 150 nil))) #s(yas--exit 150 nil) 3 nil #s(yas--field 1 132 143 nil nil nil t #s(yas--field 2 145 149 nil nil nil nil #s(yas--exit 150 nil))) nil nil)) (117 . 150) (#("make_with_name(${1:factoryname}, ${2:name})$0" 0 45 (fontified nil)) . 117) (117 . 162) (#("mak" 0 3 (fontified nil)) . 117) (117 . 120) (#("make_with_name(…) (alias gst_element_factory_make)" 0 50 (fontified nil)) . -117) (117 . 167) (#("mak" 0 3 (fontified t)) . -117) (undo-tree-id623 . -3) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -2) (undo-tree-id630 . -2) (undo-tree-id631 . -2) (undo-tree-id632 . -2) (undo-tree-id633 . -2) (undo-tree-id634 . -3) (undo-tree-id635 . -3) (undo-tree-id636 . -3) (undo-tree-id637 . -3) (undo-tree-id638 . -3) (undo-tree-id639 . -3) (undo-tree-id640 . -3) (undo-tree-id641 . -3) (undo-tree-id642 . -3) (undo-tree-id643 . -3) (undo-tree-id644 . -3) 120) ((117 . 120) (#("make_with_name(…) (alias gst_element_factory_make)" 0 50 (fontified nil)) . 117) (117 . 167) (#("mak" 0 3 (fontified nil)) . 117) (117 . 120) (#("make_with_name(${1:factoryname}, ${2:name})$0" 0 45 (fontified nil)) . 117) (117 . 162) (#("make_with_name(factoryname, name)" 0 14 (fontified nil) 14 15 (face (rainbow-delimiters-depth-2-face) fontified nil) 15 32 (fontified nil) 32 33 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 117) (undo-tree-id740 . -15) (undo-tree-id741 . -15) (undo-tree-id742 . -33) (undo-tree-id743 . -33) (undo-tree-id744 . -15) (undo-tree-id745 . -15) (apply yas--snippet-revive 1 170 #s(yas--snippet nil (#s(yas--field 1 132 143 nil nil nil t #s(yas--field 2 145 149 nil nil nil nil #s(yas--exit 150 nil))) #s(yas--field 2 145 149 nil nil nil nil #s(yas--exit 150 nil))) #s(yas--exit 150 nil) 3 nil #s(yas--field 1 132 143 nil nil nil t #s(yas--field 2 145 149 nil nil nil nil #s(yas--exit 150 nil))) nil nil)) (1 . 170) (#("fn make_with_name(factoryname: &str, name: Option<&str>) -> Result<Element, BoolError>" 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t) 3 17 (face font-lock-function-name-face fontified t) 17 18 (face (rainbow-delimiters-depth-1-face) fontified t) 18 29 (face font-lock-variable-name-face fontified t) 29 31 (fontified t) 31 32 (face rust-ampersand-face fontified t) 32 35 (face font-lock-type-face fontified t) 35 37 (fontified t) 37 41 (face font-lock-variable-name-face fontified t) 41 43 (fontified t) 43 49 (face font-lock-type-face fontified t) 49 50 (face (rainbow-delimiters-depth-2-face) fontified t) 50 51 (face rust-ampersand-face fontified t) 51 54 (face font-lock-type-face fontified t) 54 55 (face (rainbow-delimiters-depth-2-face) fontified t) 55 56 (face (rainbow-delimiters-depth-1-face) fontified t) 56 58 (fontified t) 58 59 (syntax-table (1) fontified t) 59 60 (fontified t) 60 66 (face font-lock-type-face fontified t) 66 67 (face (rainbow-delimiters-depth-1-face) fontified t) 67 74 (face font-lock-type-face fontified t) 74 76 (fontified t) 76 85 (face font-lock-type-face fontified t) 85 86 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1) (undo-tree-id746 . -86) (undo-tree-id747 . -86) (undo-tree-id748 . -86) (undo-tree-id749 . -86)) (26048 27641 807544 140000) 0 nil])
([nil nil ((117 . 131) (#("make" 0 4 (fontified nil)) . 117) (117 . 121) (#("make_with_name (alias gst_element_factory_make)" 0 47 (fontified nil)) . -117) (117 . 164) (#("make" 0 4 (fontified t)) . -117) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -2) (undo-tree-id834 . -2) (undo-tree-id835 . -2) (undo-tree-id836 . -2) (undo-tree-id837 . -2) (undo-tree-id838 . -3) (undo-tree-id839 . -3) (undo-tree-id840 . -3) (undo-tree-id841 . -3) (undo-tree-id842 . -3) (undo-tree-id843 . -3) (undo-tree-id844 . -3) (undo-tree-id845 . -3) (undo-tree-id846 . -3) (undo-tree-id847 . -3) (undo-tree-id848 . -3) (undo-tree-id849 . -3) (undo-tree-id850 . -3) (undo-tree-id851 . -3) (undo-tree-id852 . -3) (undo-tree-id853 . -3) (undo-tree-id854 . -3) (undo-tree-id855 . -4) (undo-tree-id856 . -3) (undo-tree-id857 . -3) (undo-tree-id858 . -3) (undo-tree-id859 . -3) (undo-tree-id860 . -3) (undo-tree-id861 . -3) (undo-tree-id862 . -3) (undo-tree-id863 . -3) (undo-tree-id864 . -3) (undo-tree-id865 . -4) (undo-tree-id866 . -4) (undo-tree-id867 . -4) (undo-tree-id868 . -4) (undo-tree-id869 . -4) 121) nil (26048 27675 612590 955000) 0 nil])
nil
([nil nil ((131 . 133)) nil (26048 27675 612563 546000) 0 nil])
([nil nil ((132 . 134)) nil (26048 27675 612562 957000) 0 nil])
([nil nil ((133 . 135)) nil (26048 27675 612562 414000) 0 nil])
([nil nil ((#("b" 0 1 (face font-lock-string-face fontified t)) . -134) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) 135) nil (26048 27675 612561 535000) 0 nil])
([nil nil ((134 . 139)) nil (26048 27675 612556 834000) 0 nil])
([nil nil ((#("w" 0 1 (face font-lock-string-face fontified t)) . -137) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -138) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) 139) nil (26048 27675 612555 656000) 0 nil])
([nil nil ((137 . 140)) nil (26048 27675 612548 132000) 0 nil])
([nil nil ((141 . 145)) nil (26048 27675 612547 537000) 0 nil])
([nil nil ((144 . 148)) nil (26048 27675 612546 970000) 0 nil])
([nil nil ((148 . 151)) nil (26048 27675 612546 330000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t)) . -150) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) 151) nil (26048 27675 612545 479000) 0 nil])
([nil nil ((143 . 145)) nil (26048 27675 612542 408000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-type-face fontified t)) . -144) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) 145) nil (26048 27675 612541 462000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 148 148 nil nil nil t #s(yas--exit 148 nil))) #s(yas--exit 148 nil) 4 nil #s(yas--field 1 148 148 nil nil nil t #s(yas--exit 148 nil)) nil nil)) (143 . 151) (#("Some(${1:()})$0" 0 15 (fontified nil)) . 143) (143 . 158) (#("S" 0 1 (fontified nil)) . 143) (143 . 144) (#("Some(…)" 0 7 (fontified nil)) . -143) (143 . 150) (#("S" 0 1 (face font-lock-type-face fontified t)) . -143) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) 144) nil (26048 27675 612536 146000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . 150) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1)) nil (26048 27675 612525 724000) 0 nil])
([nil nil ((apply yas--snippet-revive 143 148 #s(yas--snippet nil (#s(yas--field 1 148 148 nil nil nil t #s(yas--exit 148 nil))) #s(yas--exit 148 nil) 4 nil #s(yas--field 1 148 148 nil nil nil t #s(yas--exit 148 nil)) nil nil)) (#("()" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t) 1 2 (face (rainbow-delimiters-depth-4-face) fontified t)) . 148) (undo-tree-id756 . -2) (undo-tree-id757 . -2) (undo-tree-id758 . -2) (undo-tree-id759 . -2) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -2) (undo-tree-id764 . -2) (undo-tree-id765 . -2) (undo-tree-id766 . -2) (undo-tree-id767 . -2) (undo-tree-id768 . -2) (undo-tree-id769 . -2) (undo-tree-id770 . -2) (undo-tree-id771 . -2) (undo-tree-id772 . -2) (undo-tree-id773 . -2) (undo-tree-id774 . -2) (undo-tree-id775 . -2) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1)) nil (26048 27675 612521 298000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . 148) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1)) nil (26048 27675 612242 505000) 0 nil])
([nil nil ((148 . 149)) nil (26048 27675 612232 222000) 0 nil])
([nil nil ((156 . 157)) nil (26048 27675 612231 55000) 0 nil])
([nil nil ((158 . 160)) nil (26048 27675 612227 44000) 0 nil])
([nil nil ((160 . 165) (t 26048 27675 623394 133000)) nil (26048 27738 159078 747000) 0 nil])
([nil nil ((165 . 169)) nil (26048 27738 159077 922000) 0 nil])
([nil nil ((169 . 177)) nil (26048 27738 159077 300000) 0 nil])
([nil nil ((175 . 184) (#("gs" 0 2 (fontified nil)) . 175) (175 . 177) (#("gstreamer" 0 9 (fontified nil)) . -175) (175 . 184) (#("gs" 0 2 (fontified t)) . -175) (undo-tree-id979 . -2) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -2) (undo-tree-id983 . -2) 177) nil (26048 27738 159076 77000) 0 nil])
([nil nil ((184 . 189)) nil (26048 27738 159071 383000) 0 nil])
([nil nil ((186 . 193) (#("Ele" 0 3 (fontified nil)) . 186) (186 . 189) (#("Element (alias GstElement)" 0 26 (fontified nil)) . -186) (186 . 212) (#("Ele" 0 3 (face font-lock-type-face fontified t)) . -186) (undo-tree-id967 . -3) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -2) (undo-tree-id973 . -2) (undo-tree-id974 . -2) (undo-tree-id975 . -3) (undo-tree-id976 . -3) (undo-tree-id977 . -3) (undo-tree-id978 . -3) 189) nil (26048 27738 159069 879000) 0 nil])
([nil nil ((193 . 194)) nil (26048 27738 159060 514000) 0 nil])
([nil nil ((186 . 200) (#("ElementF" 0 8 (fontified nil)) . 186) (186 . 194) (#("ElementFactory (alias GstElementFactory)" 0 40 (fontified nil)) . -186) (186 . 226) (#("ElementF" 0 8 (face font-lock-type-face fontified t)) . -186) (undo-tree-id951 . -8) (undo-tree-id952 . -7) (undo-tree-id953 . -7) (undo-tree-id954 . -7) (undo-tree-id955 . -7) (undo-tree-id956 . -7) (undo-tree-id957 . -7) (undo-tree-id958 . -7) (undo-tree-id959 . -7) (undo-tree-id960 . -7) (undo-tree-id961 . -7) (undo-tree-id962 . -8) (undo-tree-id963 . -8) (undo-tree-id964 . -8) (undo-tree-id965 . -8) (undo-tree-id966 . -8) 194) nil (26048 27738 159058 680000) 0 nil])
([nil nil ((200 . 204)) nil (26048 27738 158953 511000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 217 222 nil nil nil t #s(yas--field 2 224 228 nil nil nil nil #s(yas--exit 229 nil))) #s(yas--field 2 224 228 nil nil nil nil #s(yas--exit 229 nil))) #s(yas--exit 229 nil) 5 nil #s(yas--field 1 217 222 nil nil nil t #s(yas--field 2 224 228 nil nil nil nil #s(yas--exit 229 nil))) nil nil)) (202 . 235) (#("make_with_name(${1:factoryname}, ${2:name})$0" 0 45 (fontified nil)) . 202) (202 . 247) (#("ma" 0 2 (fontified nil)) . 202) (202 . 204) (#("make_with_name(…) (alias gst_element_factory_make)" 0 50 (fontified nil)) . -202) (202 . 252) (#("ma" 0 2 (fontified t)) . -202) (undo-tree-id943 . -2) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -2) (undo-tree-id947 . -2) (undo-tree-id948 . -2) (undo-tree-id949 . -2) (undo-tree-id950 . -2) 204) nil (26048 27738 158951 975000) 0 nil])
([nil nil ((#("factoryname" 0 11 (fontified nil)) . 218) (undo-tree-id942 . -11) (217 . 218)) nil (26048 27738 158944 639000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -217) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) 218) nil (26048 27738 158942 192000) 0 nil])
([nil nil ((217 . 219)) nil (26048 27738 158933 61000) 0 nil])
([nil nil ((218 . 221)) nil (26048 27738 158932 438000) 0 nil])
([nil nil ((apply yas--snippet-revive 202 229 #s(yas--snippet nil (#s(yas--field 1 217 222 nil nil nil t #s(yas--field 2 224 228 nil nil nil nil #s(yas--exit 229 nil))) #s(yas--field 2 224 228 nil nil nil nil #s(yas--exit 229 nil))) #s(yas--exit 229 nil) 5 nil #s(yas--field 1 217 222 nil nil nil t #s(yas--field 2 224 228 nil nil nil nil #s(yas--exit 229 nil))) nil nil))) nil (26048 27738 158931 843000) 0 nil])
([nil nil ((#("name" 0 4 (fontified t)) . -224) (undo-tree-id921 . -4) (undo-tree-id922 . -4) (undo-tree-id923 . -4) (undo-tree-id924 . -4) (undo-tree-id925 . -4) (undo-tree-id926 . -4) (undo-tree-id927 . -4) (undo-tree-id928 . -4) (undo-tree-id929 . -4) 228) nil (26048 27738 158930 751000) 0 nil])
([nil nil ((224 . 225)) nil (26048 27738 158922 958000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 229 234 nil nil nil t #s(yas--exit 235 nil))) #s(yas--exit 235 nil) 6 nil #s(yas--field 1 229 234 nil nil nil t #s(yas--exit 235 nil)) nil nil)) (224 . 232) (#("Some(${1:()})$0" 0 15 (fontified nil)) . 224) (224 . 239) (#("S" 0 1 (fontified nil)) . 224) (224 . 225) (#("Some(…)" 0 7 (fontified nil)) . -224) (224 . 231) (#("S" 0 1 (face font-lock-type-face fontified t)) . -224) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) 225) nil (26048 27738 158921 562000) 0 nil])
([nil nil ((230 . 231) (#("()" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 230) (undo-tree-id916 . -2) (229 . 230)) nil (26048 27738 158916 756000) 0 nil])
([nil nil ((230 . 233)) nil (26048 27738 158915 92000) 0 nil])
([nil nil ((apply yas--snippet-revive 224 235 #s(yas--snippet nil (#s(yas--field 1 229 234 nil nil nil t #s(yas--exit 235 nil))) #s(yas--exit 235 nil) 6 nil #s(yas--field 1 229 234 nil nil nil t #s(yas--exit 235 nil)) nil nil))) nil (26048 27738 158914 405000) 0 nil])
([nil nil ((236 . 238)) nil (26048 27738 158913 658000) 0 nil])
([nil nil ((160 . 165)) nil (26048 27738 158912 985000) 0 nil])
([nil nil ((165 . 181)) nil (26048 27738 158912 271000) 0 nil])
([nil nil ((179 . 188) (#("gs" 0 2 (fontified nil)) . 179) (179 . 181) (#("gstreamer" 0 9 (fontified nil)) . -179) (179 . 188) (#("gs" 0 2 (fontified t)) . -179) (undo-tree-id911 . -2) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -2) (undo-tree-id915 . -2) 181) nil (26048 27738 158910 890000) 0 nil])
([nil nil ((188 . 193)) nil (26048 27738 158905 877000) 0 nil])
([nil nil ((190 . 204) (#("Ele" 0 3 (fontified nil)) . 190) (190 . 193) (#("ElementFactory (alias GstElementFactory)" 0 40 (fontified nil)) . -190) (190 . 230) (#("Ele" 0 3 (face font-lock-type-face fontified t)) . -190) (undo-tree-id902 . -3) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -2) (undo-tree-id906 . -2) (undo-tree-id907 . -3) (undo-tree-id908 . -3) (undo-tree-id909 . -3) (undo-tree-id910 . -3) 193) nil (26048 27738 158904 386000) 0 nil])
([nil nil ((204 . 210)) nil (26048 27738 158896 697000) 0 nil])
([nil nil ((206 . 220) (#("make" 0 4 (fontified nil)) . 206) (206 . 210) (#("make_with_name (alias gst_element_factory_make)" 0 47 (fontified nil)) . -206) (206 . 253) (#("make" 0 4 (fontified t)) . -206) (undo-tree-id889 . -4) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -2) (undo-tree-id894 . -2) (undo-tree-id895 . -3) (undo-tree-id896 . -3) (undo-tree-id897 . -4) (undo-tree-id898 . -4) (undo-tree-id899 . -4) (undo-tree-id900 . -4) (undo-tree-id901 . -4) 210) nil (26048 27738 158895 51000) 0 nil])
([nil nil ((220 . 222)) nil (26048 27738 158884 831000) 0 nil])
([nil nil ((221 . 223)) nil (26048 27738 158884 232000) 0 nil])
([nil nil ((222 . 234)) nil (26048 27738 158883 618000) 0 nil])
([nil nil ((235 . 238)) nil (26048 27738 158882 961000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 242 251 nil nil nil t #s(yas--exit 252 nil))) #s(yas--exit 252 nil) 7 nil #s(yas--field 1 242 251 nil nil nil t #s(yas--exit 252 nil)) nil nil)) (237 . 245) (#("Some(${1:()})$0" 0 15 (fontified nil)) . 237) (237 . 252) (#("S" 0 1 (fontified nil)) . 237) (237 . 238) (#("Some(…)" 0 7 (fontified nil)) . -237) (237 . 244) (#("S" 0 1 (face font-lock-type-face fontified t)) . -237) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) 238) nil (26048 27738 158881 462000) 0 nil])
([nil nil ((243 . 244) (#("()" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 243) (undo-tree-id883 . -2) (242 . 243)) nil (26048 27738 158875 866000) 0 nil])
([nil nil ((243 . 250)) nil (26048 27738 158873 993000) 0 nil])
([nil nil ((apply yas--snippet-revive 237 252 #s(yas--snippet nil (#s(yas--field 1 242 251 nil nil nil t #s(yas--exit 252 nil))) #s(yas--exit 252 nil) 7 nil #s(yas--field 1 242 251 nil nil nil t #s(yas--exit 252 nil)) nil nil))) nil (26048 27738 158873 395000) 0 nil])
([nil nil ((253 . 254)) nil (26048 27738 158872 767000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -253) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) 254) nil (26048 27738 158871 738000) 0 nil])
([nil nil ((253 . 255)) nil (26048 27738 158865 442000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -253) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) 254) nil (26048 27738 158863 87000) 0 nil])
([nil nil ((254 . 255)) nil (26048 27738 158849 116000) 0 nil])
([nil nil ((334 . 338) (t 26048 27738 203397 958000)) nil (26048 27816 151582 91000) 0 nil])
([nil nil ((335 . 339) (#("    " 0 4 (fontified nil)) . 334) (undo-tree-id1011 . -4) (338 . 339)) nil (26048 27816 151580 924000) 0 nil])
([nil nil ((334 . 338)) nil (26048 27816 151579 322000) 0 nil])
([nil nil ((338 . 349)) nil (26048 27816 151578 737000) 0 nil])
([nil nil ((#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -346) (undo-tree-id1008 . -1) (#("l" 0 1 (face font-lock-variable-name-face fontified t)) . -347) (undo-tree-id1009 . -1) (#("y" 0 1 (face font-lock-variable-name-face fontified t)) . -348) (undo-tree-id1010 . -1) 349) nil (26048 27816 151577 632000) 0 nil])
([nil nil ((346 . 357)) nil (26048 27816 151574 637000) 0 nil])
([nil nil ((335 . 339) (#("    " 0 4 (fontified nil)) . 334) (undo-tree-id1006 . -4) (undo-tree-id1007 . -4) (338 . 339)) nil (26048 27816 151573 713000) 0 nil])
([nil nil ((334 . 338)) nil (26048 27816 151571 432000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 338)) nil (26048 27816 151570 869000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -338)) nil (26048 27816 151570 177000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-variable-name-face fontified t)) . -350) (undo-tree-id1002 . -1) (#("i" 0 1 (face font-lock-variable-name-face fontified t)) . -351) (undo-tree-id1003 . -1) (#("n" 0 1 (face font-lock-variable-name-face fontified t)) . -352) (undo-tree-id1004 . -1) (#("k" 0 1 (face font-lock-variable-name-face fontified t)) . -353) (undo-tree-id1005 . -1) 354) nil (26048 27816 151569 74000) 0 nil])
([nil nil ((#("display_" 0 8 (face font-lock-variable-name-face fontified t)) . -342) (undo-tree-id1001 . -8) 350) nil (26048 27816 151564 859000) 0 nil])
([nil nil ((342 . 355)) nil (26048 27816 151563 453000) 0 nil])
([nil nil ((355 . 356)) nil (26048 27816 151562 864000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -355) (undo-tree-id1000 . -1) 356) nil (26048 27816 151562 117000) 0 nil])
([nil nil ((357 . 361)) nil (26048 27816 151560 610000) 0 nil])
([nil nil ((358 . 367) (#("gst" 0 3 (fontified nil)) . 358) (358 . 361) (#("gstreamer" 0 9 (fontified nil)) . -358) (358 . 367) (#("gst" 0 3 (fontified t)) . -358) (undo-tree-id999 . -3) 361) nil (26048 27816 151559 697000) 0 nil])
([nil nil ((367 . 372)) nil (26048 27816 151557 370000) 0 nil])
([nil nil ((369 . 383) (#("Ele" 0 3 (fontified nil)) . 369) (369 . 372) (#("ElementFactory (alias GstElementFactory)" 0 40 (fontified nil)) . -369) (369 . 409) (#("Ele" 0 3 (face font-lock-type-face fontified t)) . -369) (undo-tree-id998 . -3) 372) nil (26048 27816 151556 458000) 0 nil])
([nil nil ((383 . 389)) nil (26048 27816 151554 382000) 0 nil])
([nil nil ((385 . 399) (#("make" 0 4 (fontified nil)) . 385) (385 . 389) (#("make_with_name (alias gst_element_factory_make)" 0 47 (fontified nil)) . -385) (385 . 432) (#("make" 0 4 (fontified t)) . -385) (undo-tree-id997 . -4) 389) nil (26048 27816 151553 75000) 0 nil])
([nil nil ((399 . 401)) nil (26048 27816 151550 855000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -399) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -400) (undo-tree-id995 . -1) (undo-tree-id996 . -1) 401) nil (26048 27816 151549 709000) 0 nil])
([nil nil ((399 . 401)) nil (26048 27816 151546 217000) 0 nil])
([nil nil ((400 . 402)) nil (26048 27816 151545 543000) 0 nil])
([nil nil ((401 . 406)) nil (26048 27816 151544 602000) 0 nil])
([nil nil ((407 . 410)) nil (26048 27816 151543 976000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 414 429 nil nil nil t #s(yas--exit 430 nil))) #s(yas--exit 430 nil) 8 nil #s(yas--field 1 414 429 nil nil nil t #s(yas--exit 430 nil)) nil nil)) (409 . 417) (#("Some(${1:()})$0" 0 15 (fontified nil)) . 409) (409 . 424) (#("S" 0 1 (fontified nil)) . 409) (409 . 410) (#("Some(…)" 0 7 (fontified nil)) . -409) (409 . 416) (#("S" 0 1 (face font-lock-type-face fontified t)) . -409) (undo-tree-id991 . -1) (undo-tree-id992 . -1) 410) nil (26048 27816 151542 561000) 0 nil])
([nil nil ((415 . 416) (#("()" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 415) (414 . 415)) nil (26048 27816 151539 287000) 0 nil])
([nil nil ((415 . 418)) nil (26048 27816 151538 256000) 0 nil])
([nil nil ((#("q" 0 1 (face font-lock-string-face fontified t)) . -417) (undo-tree-id990 . -1) 418) nil (26048 27816 151537 256000) 0 nil])
([nil nil ((417 . 428)) nil (26048 27816 151535 237000) 0 nil])
([nil nil ((apply yas--snippet-revive 409 430 #s(yas--snippet nil (#s(yas--field 1 414 429 nil nil nil t #s(yas--exit 430 nil))) #s(yas--exit 430 nil) 8 nil #s(yas--field 1 414 429 nil nil nil t #s(yas--exit 430 nil)) nil nil))) nil (26048 27816 151534 614000) 0 nil])
([nil nil ((431 . 433)) nil (26048 27816 151533 964000) 0 nil])
([nil nil ((435 . 438) (433 . 434)) nil (26048 27816 151533 246000) 0 nil])
([nil nil ((438 . 459)) nil (26048 27816 151532 485000) 0 nil])
([nil nil ((459 . 460)) nil (26048 27816 151531 858000) 0 nil])
([nil nil ((457 . 466) (#("gst" 0 3 (fontified nil)) . 457) (457 . 460) (#("gstreamer" 0 9 (fontified nil)) . -457) (457 . 466) (#("gst" 0 3 (fontified t)) . -457) (undo-tree-id989 . -3) 460) nil (26048 27816 151530 608000) 0 nil])
([nil nil ((466 . 472)) nil (26048 27816 151528 486000) 0 nil])
([nil nil ((468 . 482) (#("Elem" 0 4 (fontified nil)) . 468) (468 . 472) (#("ElementFactory (alias GstElementFactory)" 0 40 (fontified nil)) . -468) (468 . 508) (#("Elem" 0 4 (face font-lock-type-face fontified t)) . -468) (undo-tree-id988 . -4) 472) nil (26048 27816 151527 407000) 0 nil])
([nil nil ((482 . 488)) nil (26048 27816 151525 297000) 0 nil])
([nil nil ((484 . 498) (#("make" 0 4 (fontified nil)) . 484) (484 . 488) (#("make_with_name (alias gst_element_factory_make)" 0 47 (fontified nil)) . -484) (484 . 531) (#("make" 0 4 (fontified t)) . -484) (undo-tree-id987 . -4) 488) nil (26048 27816 151524 56000) 0 nil])
([nil nil ((498 . 500)) nil (26048 27816 151521 902000) 0 nil])
([nil nil ((499 . 501)) nil (26048 27816 151521 237000) 0 nil])
([nil nil ((500 . 509)) nil (26048 27816 151520 599000) 0 nil])
([nil nil ((509 . 513)) nil (26048 27816 151520 4000) 0 nil])
([nil nil ((514 . 517)) nil (26048 27816 151519 326000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 521 533 nil nil nil t #s(yas--exit 534 nil))) #s(yas--exit 534 nil) 9 nil #s(yas--field 1 521 533 nil nil nil t #s(yas--exit 534 nil)) nil nil)) (516 . 524) (#("Some(${1:()})$0" 0 15 (fontified nil)) . 516) (516 . 531) (#("S" 0 1 (fontified nil)) . 516) (516 . 517) (#("Some(…)" 0 7 (fontified nil)) . -516) (516 . 523) (#("S" 0 1 (face font-lock-type-face fontified t)) . -516) (undo-tree-id985 . -1) (undo-tree-id986 . -1) 517) nil (26048 27816 151517 696000) 0 nil])
([nil nil ((522 . 533) (#("()" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 522) (undo-tree-id984 . -2) (521 . 522)) nil (26048 27816 151512 856000) 0 nil])
([nil nil ((apply yas--snippet-revive 516 534 #s(yas--snippet nil (#s(yas--field 1 521 533 nil nil nil t #s(yas--exit 534 nil))) #s(yas--exit 534 nil) 9 nil #s(yas--field 1 521 533 nil nil nil t #s(yas--exit 534 nil)) nil nil))) nil (26048 27816 151505 360000) 0 nil])
([nil nil ((535 . 536)) nil (26048 27816 151504 36000) 0 nil])
([nil nil ((536 . 537)) nil (26048 27816 151499 759000) 0 nil])
([nil nil ((537 . 542) (t 26048 27816 153402 705000)) nil (26048 27823 919437 307000) 0 nil])
([nil nil ((542 . 546)) nil (26048 27823 919436 175000) 0 nil])
([nil nil ((533 . 534)) nil (26048 27823 919434 452000) 0 nil])
([nil nil ((521 . 522)) nil (26048 27823 919429 954000) 0 nil])
([nil nil ((548 . 563) (t 26048 27823 930069 843000)) nil (26048 27881 792320 261000) 0 nil])
([nil nil ((560 . 569) (#("gsr" 0 3 (fontified nil)) . 560) (560 . 563) (#("gstreamer" 0 9 (fontified nil)) . -560) (560 . 569) (#("gsr" 0 3 (fontified t)) . -560) (undo-tree-id1079 . -3) 563) nil (26048 27881 792318 927000) 0 nil])
([nil nil ((569 . 575)) nil (26048 27881 792316 685000) 0 nil])
([nil nil ((#("k" 0 1 (face font-lock-type-face fontified t)) . -573) (undo-tree-id1077 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -574) (undo-tree-id1078 . -1) 575) nil (26048 27881 792315 671000) 0 nil])
([nil nil ((573 . 574)) nil (26048 27881 792313 502000) 0 nil])
([nil nil ((571 . 585) (#("Ele" 0 3 (fontified nil)) . 571) (571 . 574) (#("ElementFactory (alias GstElementFactory)" 0 40 (fontified nil)) . -571) (571 . 611) (#("Ele" 0 3 (face font-lock-type-face fontified t)) . -571) (undo-tree-id1076 . -3) 574) nil (26048 27881 792312 262000) 0 nil])
([nil nil ((585 . 591)) nil (26048 27881 792310 18000) 0 nil])
([nil nil ((587 . 601) (#("make" 0 4 (fontified nil)) . 587) (587 . 591) (#("make_with_name (alias gst_element_factory_make)" 0 47 (fontified nil)) . -587) (587 . 634) (#("make" 0 4 (fontified t)) . -587) (undo-tree-id1075 . -4) 591) nil (26048 27881 792308 764000) 0 nil])
([nil nil ((601 . 603)) nil (26048 27881 792306 749000) 0 nil])
([nil nil ((602 . 604)) nil (26048 27881 792306 175000) 0 nil])
([nil nil ((603 . 605)) nil (26048 27881 792305 636000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-string-face fontified t)) . -604) (undo-tree-id1074 . -1) 605) nil (26048 27881 792304 566000) 0 nil])
([nil nil ((604 . 608)) nil (26048 27881 792303 267000) 0 nil])
([nil nil ((609 . 612)) nil (26048 27881 792302 313000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 616 627 nil nil nil t #s(yas--exit 628 nil))) #s(yas--exit 628 nil) 10 nil #s(yas--field 1 616 627 nil nil nil t #s(yas--exit 628 nil)) nil nil)) (611 . 619) (#("Some(${1:()})$0" 0 15 (fontified nil)) . 611) (611 . 626) (#("S" 0 1 (fontified nil)) . 611) (611 . 612) (#("Some(…)" 0 7 (fontified nil)) . -611) (611 . 618) (#("S" 0 1 (face font-lock-type-face fontified t)) . -611) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) 612) nil (26048 27881 792300 866000) 0 nil])
([nil nil ((617 . 618) (#("()" 0 2 (fontified nil)) . 617) (616 . 617)) nil (26048 27881 792297 525000) 0 nil])
([nil nil ((617 . 626)) nil (26048 27881 792296 630000) 0 nil])
([nil nil ((apply yas--snippet-revive 611 628 #s(yas--snippet nil (#s(yas--field 1 616 627 nil nil nil t #s(yas--exit 628 nil))) #s(yas--exit 628 nil) 10 nil #s(yas--field 1 616 627 nil nil nil t #s(yas--exit 628 nil)) nil nil))) nil (26048 27881 792296 21000) 0 nil])
([nil nil ((629 . 631)) nil (26048 27881 792295 496000) 0 nil])
([nil nil ((631 . 636)) nil (26048 27881 792294 973000) 0 nil])
([nil nil ((636 . 638)) nil (26048 27881 792294 357000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t)) . -637) (undo-tree-id1071 . -1) 638) nil (26048 27881 792293 463000) 0 nil])
([nil nil ((637 . 639)) nil (26048 27881 792291 902000) 0 nil])
([nil nil ((639 . 643)) nil (26048 27881 792291 168000) 0 nil])
([nil nil ((#("o" 0 1 (face font-lock-variable-name-face fontified t)) . -641) (undo-tree-id1069 . -1) (#("o" 0 1 (face font-lock-variable-name-face fontified t)) . -642) (undo-tree-id1070 . -1) 643) nil (26048 27881 792290 13000) 0 nil])
([nil nil ((641 . 642)) nil (26048 27881 792287 746000) 0 nil])
([nil nil ((#("o" 0 1 (face font-lock-variable-name-face fontified t)) . -641) (undo-tree-id1068 . -1) 642) nil (26048 27881 792286 619000) 0 nil])
([nil nil ((641 . 646)) nil (26048 27881 792284 201000) 0 nil])
([nil nil ((#("k" 0 1 (face font-lock-variable-name-face fontified t)) . -643) (undo-tree-id1065 . -1) (#("i" 0 1 (face font-lock-variable-name-face fontified t)) . -644) (undo-tree-id1066 . -1) (#("n" 0 1 (face font-lock-variable-name-face fontified t)) . -645) (undo-tree-id1067 . -1) 646) nil (26048 27881 792282 976000) 0 nil])
([nil nil ((643 . 650)) nil (26048 27881 792279 874000) 0 nil])
([nil nil ((649 . 651)) nil (26048 27881 792279 261000) 0 nil])
([nil nil ((#("A" 0 1 (face font-lock-type-face fontified t)) . -650) (undo-tree-id1064 . -1) 651) nil (26048 27881 792278 482000) 0 nil])
([nil nil ((650 . 653)) nil (26048 27881 792277 26000) 0 nil])
([nil nil ((650 . 663) (#("gst" 0 3 (fontified nil)) . 650) (650 . 653) (#("gstreamer_app" 0 13 (fontified nil)) . -650) (650 . 663) (#("gst" 0 3 (fontified t)) . -650) (undo-tree-id1057 . -3) (undo-tree-id1058 . -2) (undo-tree-id1059 . -2) (undo-tree-id1060 . -3) (undo-tree-id1061 . -3) (undo-tree-id1062 . -3) (undo-tree-id1063 . -3) 653) nil (26048 27881 792275 629000) 0 nil])
([nil nil ((663 . 666)) nil (26048 27881 792269 274000) 0 nil])
([nil nil ((665 . 672) (#("A" 0 1 (fontified nil)) . 665) (665 . 666) (#("AppSink (alias GstAppSink)" 0 26 (fontified nil)) . -665) (665 . 691) (#("A" 0 1 (face font-lock-type-face fontified t)) . -665) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) 666) nil (26048 27881 792268 28000) 0 nil])
([nil nil ((672 . 675)) nil (26048 27881 792262 374000) 0 nil])
([nil nil ((apply yas--snippet-revive 674 683 #s(yas--snippet nil nil #s(yas--exit 683 nil) 11 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 683 nil) 11 nil nil nil nil)) (674 . 683) (#("builder()$0" 0 11 (fontified nil)) . 674) (674 . 685) (#("b" 0 1 (fontified nil)) . 674) (674 . 675) (#("builder()" 0 9 (fontified nil)) . -674) (674 . 683) (#("b" 0 1 (fontified t)) . -674) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) 675) nil (26048 27881 792260 902000) 0 nil])
([nil nil ((683 . 685)) nil (26048 27881 792255 527000) 0 nil])
([nil nil ((apply yas--snippet-revive 684 691 #s(yas--snippet nil nil #s(yas--exit 691 nil) 12 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 691 nil) 12 nil nil nil nil)) (684 . 691) (#("build()$0" 0 9 (fontified nil)) . 684) (684 . 693) (#("b" 0 1 (fontified nil)) . 684) (684 . 685) (#("build()" 0 7 (fontified nil)) . -684) (684 . 691) (#("b" 0 1 (fontified t)) . -684) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) 685) nil (26048 27881 792253 759000) 0 nil])
([nil nil ((691 . 693)) nil (26048 27881 792247 168000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t)) . -691) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (#(";" 0 1 (fontified t)) . -692) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) 693) nil (26048 27881 792245 358000) 0 nil])
([nil nil ((691 . 692)) nil (26048 27881 792232 310000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t)) . -691) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) 692) nil (26048 27881 792229 936000) 0 nil])
([nil nil ((691 . 692)) nil (26048 27881 792211 298000) 0 nil])
([nil nil ((694 . 698) (#("    " 0 4 (fontified nil)) . 693) (undo-tree-id1248 . -4) (694 . 698) (692 . 693) (t 26048 27881 836740 47000)) nil (26048 27964 959711 816000) 0 nil])
([nil nil ((698 . 701)) nil (26048 27964 959710 43000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -698) (undo-tree-id1245 . -1) (#("e" 0 1 (fontified t)) . -699) (undo-tree-id1246 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -700) (undo-tree-id1247 . -1) 701) nil (26048 27964 959708 919000) 0 nil])
([nil nil ((77 . 81) (#("    " 0 4 (fontified nil)) . 76) (undo-tree-id1244 . -4) (75 . 81)) nil (26048 27964 959705 886000) 0 nil])
([nil nil ((76 . 80)) nil (26048 27964 959704 352000) 0 nil])
([nil nil ((80 . 86)) nil (26048 27964 959703 669000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -83) (undo-tree-id1241 . -1) (#("i" 0 1 (fontified t)) . -84) (undo-tree-id1242 . -1) (#("p" 0 1 (fontified t)) . -85) (undo-tree-id1243 . -1) 86) nil (26048 27964 959702 675000) 0 nil])
([nil nil ((83 . 97)) nil (26048 27964 959699 739000) 0 nil])
([nil nil ((95 . 104) (#("gs" 0 2 (fontified nil)) . 95) (95 . 97) (#("gstreamer" 0 9 (fontified nil)) . -95) (95 . 104) (#("gs" 0 2 (fontified t)) . -95) (undo-tree-id1240 . -2) 97) nil (26048 27964 959698 435000) 0 nil])
([nil nil ((104 . 110)) nil (26048 27964 959696 458000) 0 nil])
([nil nil ((106 . 114) (#("Pipe" 0 4 (fontified nil)) . 106) (106 . 110) (#("Pipeline (alias GstPipeline)" 0 28 (fontified nil)) . -106) (106 . 134) (#("Pipe" 0 4 (face font-lock-type-face fontified t)) . -106) (undo-tree-id1239 . -4) 110) nil (26048 27964 959695 455000) 0 nil])
([nil nil ((114 . 118)) nil (26048 27964 959693 434000) 0 nil])
([nil nil ((apply yas--snippet-revive 116 125 #s(yas--snippet nil nil #s(yas--exit 125 nil) 13 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 125 nil) 13 nil nil nil nil)) (116 . 125) (#("default()$0" 0 11 (fontified nil)) . 116) (116 . 127) (#("de" 0 2 (fontified nil)) . 116) (116 . 118) (#("default() (as Default)" 0 22 (fontified nil)) . -116) (116 . 138) (#("de" 0 2 (fontified t)) . -116) (undo-tree-id1238 . -2) 118) nil (26048 27964 959692 263000) 0 nil])
([nil nil ((125 . 126)) nil (26048 27964 959689 538000) 0 nil])
([nil nil ((754 . 757)) nil (26048 27964 959688 998000) 0 nil])
([nil nil ((754 . 762) (#("pip" 0 3 (fontified nil)) . 754) (754 . 757) (#("pipeline" 0 8 (fontified nil)) . -754) (754 . 762) (#("pip" 0 3 (fontified t)) . -754) (undo-tree-id1237 . -3) 757) nil (26048 27964 959688 36000) 0 nil])
([nil nil ((762 . 766)) nil (26048 27964 959685 996000) 0 nil])
([nil nil ((20 . 61) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 813 835 nil nil nil t #s(yas--exit 836 nil))) #s(yas--exit 836 nil) 14 nil #s(yas--field 1 813 835 nil nil nil t #s(yas--exit 836 nil)) nil nil)) (763 . 781) (#("add_many(${1:elements})$0" 0 25 (fontified nil)) . 763) (763 . 788) (#("add" 0 3 (fontified nil)) . 763) (763 . 766) (#("add_many(…) (alias gst_bin_add_many) (use gstreamer::prelude::GstBinExtManual)" 0 78 (fontified nil)) . -763) (763 . 841) (#("add" 0 3 (fontified t)) . -763) (undo-tree-id1236 . -3) 766) nil (26048 27964 959684 584000) 0 nil])
([nil nil ((814 . 815) (#("elements" 0 8 (fontified nil)) . 814) (undo-tree-id1235 . -8) (813 . 814)) nil (26048 27964 959681 288000) 0 nil])
([nil nil ((814 . 816)) nil (26048 27964 959679 804000) 0 nil])
([nil nil ((815 . 827) (#("s" 0 1 (fontified nil)) . 815) (815 . 816) (#("sink_display" 0 12 (fontified nil)) . -815) (815 . 827) (#("s" 0 1 (fontified t)) . -815) (undo-tree-id1234 . -1) 816) nil (26048 27964 959678 911000) 0 nil])
([nil nil ((#("display" 0 7 (fontified t)) . -820) (undo-tree-id1232 . -7) (undo-tree-id1233 . -7) 827) nil (26048 27964 959676 817000) 0 nil])
([nil nil ((#("sink_" 0 5 (fontified t)) . -815) (undo-tree-id1230 . -5) (undo-tree-id1231 . -5) 820) nil (26048 27964 959674 728000) 0 nil])
([nil nil ((815 . 820)) nil (26048 27964 959672 822000) 0 nil])
([nil nil ((820 . 824)) nil (26048 27964 959672 227000) 0 nil])
([nil nil ((821 . 828) (#("con" 0 3 (fontified nil)) . 821) (821 . 824) (#("convert" 0 7 (fontified nil)) . -821) (821 . 828) (#("con" 0 3 (fontified t)) . -821) (undo-tree-id1223 . -3) (undo-tree-id1224 . -3) (undo-tree-id1225 . -3) (undo-tree-id1226 . -3) (undo-tree-id1227 . -3) (undo-tree-id1228 . -3) (undo-tree-id1229 . -3) 824) nil (26048 27964 959671 20000) 0 nil])
([nil nil ((828 . 832)) nil (26048 27964 959665 70000) 0 nil])
([nil nil ((831 . 834) (#("t" 0 1 (fontified nil)) . 831) (831 . 832) (#("tee" 0 3 (fontified nil)) . -831) (831 . 834) (#("t" 0 1 (fontified t)) . -831) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) 832) nil (26048 27964 959663 800000) 0 nil])
([nil nil ((apply yas--snippet-revive 804 836 #s(yas--snippet nil (#s(yas--field 1 813 835 nil nil nil t #s(yas--exit 836 nil))) #s(yas--exit 836 nil) 14 nil #s(yas--field 1 813 835 nil nil nil t #s(yas--exit 836 nil)) nil nil))) nil (26048 27964 959657 640000) 0 nil])
([nil nil ((836 . 837)) nil (26048 27964 959657 33000) 0 nil])
([nil nil ((837 . 842)) nil (26048 27964 959656 464000) 0 nil])
([nil nil ((834 . 835)) nil (26048 27964 959655 882000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -834) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) 835) nil (26048 27964 959654 835000) 0 nil])
([nil nil ((834 . 838)) nil (26048 27964 959648 46000) 0 nil])
([nil nil ((837 . 850) (#("q" 0 1 (fontified nil)) . 837) (837 . 838) (#("queue_display" 0 13 (fontified nil)) . -837) (837 . 850) (#("q" 0 1 (fontified t)) . -837) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) 838) nil (26048 27964 959646 740000) 0 nil])
([nil nil ((850 . 854)) nil (26048 27964 959640 502000) 0 nil])
([nil nil ((853 . 865) (#("s" 0 1 (fontified nil)) . 853) (853 . 854) (#("sink_display" 0 12 (fontified nil)) . -853) (853 . 865) (#("s" 0 1 (fontified t)) . -853) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) 854) nil (26048 27964 959639 299000) 0 nil])
([nil nil ((865 . 869)) nil (26048 27964 959632 315000) 0 nil])
([nil nil ((868 . 877) (#("q" 0 1 (fontified nil)) . 868) (868 . 869) (#("queue_app" 0 9 (fontified nil)) . -868) (868 . 877) (#("q" 0 1 (fontified t)) . -868) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) 869) nil (26048 27964 959630 993000) 0 nil])
([nil nil ((877 . 881)) nil (26048 27964 959625 96000) 0 nil])
([nil nil ((880 . 887) (#("a" 0 1 (fontified nil)) . 880) (880 . 881) (#("appsink" 0 7 (fontified nil)) . -880) (880 . 887) (#("a" 0 1 (fontified t)) . -880) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) 881) nil (26048 27964 959623 746000) 0 nil])
([nil nil ((890 . 895)) nil (26048 27964 959618 220000) 0 nil])
([nil nil ((895 . 896)) nil (26048 27964 959617 498000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -895) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) 896) nil (26048 27964 959616 614000) 0 nil])
([nil nil ((895 . 898)) nil (26048 27964 959613 876000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-type-face fontified t)) . -897) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) 898) nil (26048 27964 959612 897000) 0 nil])
([nil nil ((#("E" 0 1 (face font-lock-type-face fontified t)) . -895) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -896) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) 897) nil (26048 27964 959607 403000) 0 nil])
([nil nil ((895 . 896)) nil (26048 27964 959590 818000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -895) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) 896) nil (26048 27964 959589 865000) 0 nil])
([nil nil ((895 . 897)) nil (26048 27964 959587 279000) 0 nil])
([nil nil ((895 . 904) (#("gs" 0 2 (fontified nil)) . 895) (895 . 897) (#("gstreamer" 0 9 (fontified nil)) . -895) (895 . 904) (#("gs" 0 2 (fontified t)) . -895) (undo-tree-id1140 . -2) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -2) (undo-tree-id1145 . -2) 897) nil (26048 27964 959586 47000) 0 nil])
([nil nil ((904 . 908)) nil (26048 27964 959580 606000) 0 nil])
([nil nil ((#("L" 0 1 (face font-lock-type-face fontified t)) . -907) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) 908) nil (26048 27964 959579 599000) 0 nil])
([nil nil ((907 . 910)) nil (26048 27964 959575 558000) 0 nil])
([nil nil ((906 . 913) (#("Elem" 0 4 (fontified nil)) . 906) (906 . 910) (#("Element (alias GstElement)" 0 26 (fontified nil)) . -906) (906 . 932) (#("Elem" 0 4 (face font-lock-type-face fontified t)) . -906) (undo-tree-id1118 . -4) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -2) (undo-tree-id1130 . -2) (undo-tree-id1131 . -3) (undo-tree-id1132 . -3) (undo-tree-id1133 . -4) (undo-tree-id1134 . -4) 910) nil (26048 27964 959573 685000) 0 nil])
([nil nil ((913 . 918)) nil (26048 27964 959559 850000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 925 927 nil nil nil t #s(yas--exit 928 nil))) #s(yas--exit 928 nil) 15 nil #s(yas--field 1 925 927 nil nil nil t #s(yas--exit 928 nil)) nil nil)) (915 . 934) (#("link_many(${1:elements})$0" 0 26 (fontified nil)) . 915) (915 . 941) (#("kin" 0 3 (fontified nil)) . 915) (915 . 918) (#("link_many(…) (alias gst_element_link_many)" 0 42 (fontified nil)) . -915) (915 . 957) (#("kin" 0 3 (fontified t)) . -915) (undo-tree-id1109 . -3) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -2) (undo-tree-id1113 . -2) (undo-tree-id1114 . -3) (undo-tree-id1115 . -3) (undo-tree-id1116 . -3) (undo-tree-id1117 . -3) 918) nil (26048 27964 959557 911000) 0 nil])
([nil nil ((926 . 928) (#("elements" 0 8 (fontified nil)) . 926) (undo-tree-id1108 . -8) (925 . 926)) nil (26048 27964 959549 955000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -926) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -927) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) 928) nil (26048 27964 959547 588000) 0 nil])
([nil nil ((926 . 928)) nil (26048 27964 959537 63000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -926) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -927) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) 928) nil (26048 27964 959534 943000) 0 nil])
([nil nil ((926 . 927)) nil (26048 27965 421120 281000) 0 nil])
([nil nil ((apply yas--snippet-revive 915 928 #s(yas--snippet nil (#s(yas--field 1 925 927 nil nil nil t #s(yas--exit 928 nil))) #s(yas--exit 928 nil) 15 nil #s(yas--field 1 925 927 nil nil nil t #s(yas--exit 928 nil)) nil nil))) nil (26048 27991 107413 200000) 0 nil] [nil nil ((apply yas--snippet-revive 915 928 #s(yas--snippet nil (#s(yas--field 1 925 927 nil nil nil t #s(yas--exit 928 nil))) #s(yas--exit 928 nil) 15 nil #s(yas--field 1 925 927 nil nil nil t #s(yas--exit 928 nil)) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 925 927 nil nil nil t #s(yas--exit 928 nil))) #s(yas--exit 928 nil) 15 nil #s(yas--field 1 925 927 nil nil nil t #s(yas--exit 928 nil)) nil nil))) (26048 27964 960261 212000) 0 nil])
([nil nil ((926 . 929)) nil (26048 27991 107412 444000) 0 nil])
([nil nil ((933 . 934)) ((#("&" 0 1 (fontified t)) . 933) (undo-tree-id1249 . -1)) (26048 27964 959510 656000) 0 nil])
([nil nil ((927 . 930) (#("sr" 0 2 (fontified nil)) . 927) (927 . 929) (#("src" 0 3 (fontified nil)) . -927) (927 . 930) (#("sr" 0 2 (fontified t)) . -927) (undo-tree-id1270 . -2) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -2) (undo-tree-id1275 . -2) (undo-tree-id1276 . -2) 929) nil (26048 27991 107411 123000) 0 nil])
nil
([nil nil ((930 . 931)) nil (26048 27991 107404 407000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -930) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) 931) nil (26048 27991 107403 439000) 0 nil])
([nil nil ((930 . 934)) nil (26048 27991 107398 437000) 0 nil])
([nil nil ((933 . 940) (#("c" 0 1 (fontified nil)) . 933) (933 . 934) (#("convert" 0 7 (fontified nil)) . -933) (933 . 940) (#("c" 0 1 (fontified t)) . -933) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) 934) nil (26048 27991 107397 95000) 0 nil])
([nil nil ((940 . 944)) nil (26048 27991 107390 371000) 0 nil])
([nil nil ((943 . 946) (#("t" 0 1 (fontified nil)) . 943) (943 . 944) (#("tee" 0 3 (fontified nil)) . -943) (943 . 946) (#("t" 0 1 (fontified t)) . -943) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) 944) nil (26048 27991 107388 215000) 0 nil])
([nil nil ((948 . 949)) nil (26048 27991 107374 943000) 0 nil])
([nil nil ((889 . 890)) nil (26048 27991 107374 317000) 0 nil])
([nil nil ((949 . 950)) nil (26048 27991 107373 640000) 0 nil])
([nil nil ((951 . 956)) nil (26048 27991 107372 834000) 0 nil])
([nil nil ((nil rear-nonsticky nil 984 . 985) (nil fontified nil 976 . 985) (nil fontified nil 974 . 976) (nil fontified nil 967 . 974) (nil fontified nil 965 . 967) (nil fontified nil 956 . 965) (956 . 985)) nil (26048 27991 107724 489000) 0 nil])
([nil nil ((985 . 994)) nil (26048 28040 211061 109000) 0 nil] [nil nil ((nil rear-nonsticky nil 1013 . 1014) (nil fontified nil 1005 . 1014) (nil fontified nil 1003 . 1005) (nil fontified nil 996 . 1003) (nil fontified nil 994 . 996) (nil fontified nil 985 . 994) (985 . 1014)) ((#("gstreamer::Element::link_many" 0 9 (face font-lock-constant-face fontified nil) 9 11 (fontified nil) 11 18 (face font-lock-type-face fontified nil) 18 20 (fontified nil) 20 28 (fontified nil) 28 29 (rear-nonsticky nil fontified nil)) . 985) (undo-tree-id1277 . -29) (nil rear-nonsticky t 1013 . 1014)) (26048 27991 107365 313000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1022 . 1023) (nil fontified nil 1014 . 1023) (nil fontified nil 1012 . 1014) (nil fontified nil 1005 . 1012) (nil fontified nil 1003 . 1005) (nil fontified nil 994 . 1003) (994 . 1023)) nil (26048 28040 211060 102000) 0 nil])
nil
([nil nil ((985 . 988)) nil (26048 28040 211058 433000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t)) . -987) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) 988) nil (26048 28040 211057 252000) 0 nil])
([nil nil ((986 . 988)) nil (26048 28040 211051 576000) 0 nil])
([nil nil ((987 . 989)) nil (26048 28040 211050 901000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -987) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (#("e" 0 1 (fontified t)) . -988) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) 989) nil (26048 28040 211049 200000) 0 nil])
([nil nil ((987 . 989)) nil (26048 28040 211035 872000) 0 nil])
([nil nil ((988 . 991) (#("t" 0 1 (fontified nil)) . 988) (988 . 989) (#("tee" 0 3 (fontified nil)) . -988) (988 . 991) (#("t" 0 1 (fontified t)) . -988) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) 989) nil (26048 28040 211034 536000) 0 nil])
([nil nil ((991 . 993)) nil (26048 28040 211028 548000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -992) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) 993) nil (26048 28040 211027 272000) 0 nil])
([nil nil ((992 . 994)) nil (26048 28040 211019 113000) 0 nil])
([nil nil ((993 . 1006) (#("q" 0 1 (fontified nil)) . 993) (993 . 994) (#("queue_display" 0 13 (fontified nil)) . -993) (993 . 1006) (#("q" 0 1 (fontified t)) . -993) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) 994) nil (26048 28040 211017 654000) 0 nil])
([nil nil ((1006 . 1007)) nil (26048 28040 211010 655000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1006) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) 1007) nil (26048 28040 211009 566000) 0 nil])
([nil nil ((993 . 994)) nil (26048 28040 211003 212000) 0 nil])
([nil nil ((1007 . 1011)) nil (26048 28040 211002 619000) 0 nil])
([nil nil ((#("q" 0 1 (fontified t)) . -1010) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) 1011) nil (26048 28040 211001 409000) 0 nil])
([nil nil ((1010 . 1011)) nil (26048 28040 210996 80000) 0 nil])
([nil nil ((1010 . 1022) (#("s" 0 1 (fontified nil)) . 1010) (1010 . 1011) (#("sink_display" 0 12 (fontified nil)) . -1010) (1010 . 1022) (#("s" 0 1 (fontified t)) . -1010) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) 1011) nil (26048 28040 210994 764000) 0 nil])
([nil nil ((1024 . 1025)) nil (26048 28040 210988 804000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -1024) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) 1025) nil (26048 28040 210987 931000) 0 nil])
([nil nil ((1024 . 1026)) nil (26048 28040 210984 838000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1031) (undo-tree-id1330 . -4) (undo-tree-id1331 . -4) (undo-tree-id1332 . -4) (undo-tree-id1333 . -4) (undo-tree-id1334 . -4) (undo-tree-id1335 . -4) (undo-tree-id1336 . -4) (undo-tree-id1337 . -4) (undo-tree-id1338 . -4) (undo-tree-id1339 . -4) 1064) nil (26048 28040 210983 714000) 0 nil])
([nil nil ((1060 . 1062)) nil (26048 28040 210975 165000) 0 nil])
([nil nil ((1061 . 1062)) nil (26048 28040 210974 562000) 0 nil])
([nil nil ((1062 . 1063)) nil (26048 28040 210973 871000) 0 nil])
([nil nil ((1062 . 1065)) nil (26048 28040 210973 339000) 0 nil])
([nil nil ((1063 . 1066) (#("te" 0 2 (fontified nil)) . 1063) (1063 . 1065) (#("tee" 0 3 (fontified nil)) . -1063) (1063 . 1066) (#("te" 0 2 (fontified t)) . -1063) (undo-tree-id1324 . -2) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -2) (undo-tree-id1329 . -2) 1065) nil (26048 28040 210972 114000) 0 nil])
([nil nil ((1066 . 1068)) nil (26048 28040 210966 718000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1066) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (#("," 0 1 (fontified t)) . -1067) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) 1068) nil (26048 28040 210965 100000) 0 nil])
([nil nil ((1066 . 1067)) nil (26048 28040 210951 928000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1066) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) 1067) nil (26048 28040 210950 983000) 0 nil])
([nil nil ((1066 . 1070)) nil (26048 28040 210946 455000) 0 nil])
([nil nil ((1069 . 1078) (#("q" 0 1 (fontified nil)) . 1069) (1069 . 1070) (#("queue_app" 0 9 (fontified nil)) . -1069) (1069 . 1078) (#("q" 0 1 (fontified t)) . -1069) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) 1070) nil (26048 28040 210945 36000) 0 nil])
([nil nil ((1078 . 1082)) nil (26048 28040 210938 359000) 0 nil])
([nil nil ((#("q" 0 1 (fontified t)) . -1081) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) 1082) nil (26048 28040 210937 165000) 0 nil])
([nil nil ((1081 . 1082)) nil (26048 28040 210930 329000) 0 nil])
([nil nil ((1081 . 1088) (#("a" 0 1 (fontified nil)) . 1081) (1081 . 1082) (#("appsink" 0 7 (fontified nil)) . -1081) (1081 . 1088) (#("a" 0 1 (fontified t)) . -1081) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) 1082) nil (26048 28040 210927 589000) 0 nil])
([nil nil ((1090 . 1092)) nil (26048 28040 210910 501000) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . -879) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) 880 (t 26048 28040 223416 356000)) nil (26048 28058 641517 169000) 0 nil])
([nil nil ((886 . 888)) nil (26048 28058 641514 944000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -887) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) 888) nil (26048 28058 641514 154000) 0 nil])
([nil nil ((887 . 890)) nil (26048 28058 641510 912000) 0 nil])
([nil nil ((#("::prelude" 0 2 (fontified t) 2 9 (face font-lock-constant-face fontified t)) . -33) (undo-tree-id1513 . -9) 42 (44 . 54) (59 . 66) (apply yas--snippet-revive 887 899 #s(yas--snippet nil nil #s(yas--exit 899 nil) 16 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 899 nil) 16 nil nil nil nil)) (887 . 899) (#("upcast_ref()$0" 0 14 (fontified nil)) . 887) (887 . 901) (#("upc" 0 3 (fontified nil)) . 887) (887 . 890) (#("upcast_ref() (use gstreamer::prelude::Cast)" 0 43 (fontified nil)) . -887) (887 . 930) (#("upc" 0 3 (fontified t)) . -887) (undo-tree-id1514 . -3) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -2) (undo-tree-id1519 . -2) (undo-tree-id1520 . -2) (undo-tree-id1521 . -2) (undo-tree-id1522 . -3) (undo-tree-id1523 . -3) (undo-tree-id1524 . -3) (undo-tree-id1525 . -3) (undo-tree-id1526 . -3) (undo-tree-id1527 . -3) 890) nil (26048 28058 641508 607000) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . -1100) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) 1101) nil (26048 28058 641495 629000) 0 nil])
([nil nil ((1107 . 1112)) nil (26048 28058 641206 75000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -1107) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (#("u" 0 1 (fontified t)) . -1108) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (#("p" 0 1 (fontified t)) . -1109) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (#("c" 0 1 (fontified t)) . -1110) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (#("a" 0 1 (fontified t)) . -1111) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) 1112) nil (26048 28058 641202 57000) 0 nil])
([nil nil ((1107 . 1108)) nil (26048 28058 641156 923000) 0 nil])
([nil nil ((1108 . 1112)) nil (26048 28058 641155 693000) 0 nil])
([nil nil ((apply yas--snippet-revive 1108 1120 #s(yas--snippet nil nil #s(yas--exit 1120 nil) 17 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1120 nil) 17 nil nil nil nil)) (1108 . 1120) (#("upcast_ref()$0" 0 14 (fontified nil)) . 1108) (1108 . 1122) (#("upca" 0 4 (fontified nil)) . 1108) (1108 . 1112) (#("upcast_ref() (as Cast)" 0 22 (fontified nil)) . -1108) (1108 . 1130) (#("upca" 0 4 (fontified t)) . -1108) (undo-tree-id1413 . -4) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -2) (undo-tree-id1418 . -2) (undo-tree-id1419 . -3) (undo-tree-id1420 . -3) (undo-tree-id1421 . -4) (undo-tree-id1422 . -4) (undo-tree-id1423 . -4) (undo-tree-id1424 . -4) (undo-tree-id1425 . -4) 1112) nil (26048 28058 641150 667000) 0 nil])
([nil nil ((1126 . 1130) (#("    " 0 4 (fontified nil)) . 1125) (undo-tree-id1533 . -4) (undo-tree-id1534 . -4) (undo-tree-id1535 . -4) (undo-tree-id1536 . -4) (1124 . 1130) (t 26048 28058 653417 480000)) nil (26048 28086 273297 986000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1864 . 1865) (nil fontified nil 1863 . 1865) (nil fontified nil 1862 . 1863) (nil fontified nil 1861 . 1862) (nil fontified nil 1857 . 1861) (nil fontified nil 1855 . 1857) (nil fontified nil 1850 . 1855) (nil fontified nil 1848 . 1850) (nil fontified nil 1839 . 1848) (nil fontified nil 1838 . 1839) (nil fontified nil 1815 . 1838) (nil fontified nil 1798 . 1815) (nil fontified nil 1795 . 1798) (nil fontified nil 1789 . 1795) (nil fontified nil 1788 . 1789) (nil fontified nil 1783 . 1788) (nil fontified nil 1782 . 1783) (nil fontified nil 1772 . 1782) (nil fontified nil 1771 . 1772) (nil fontified nil 1770 . 1771) (nil fontified nil 1769 . 1770) (nil fontified nil 1768 . 1769) (nil fontified nil 1752 . 1768) (nil fontified nil 1751 . 1752) (nil fontified nil 1737 . 1751) (nil fontified nil 1732 . 1737) (nil fontified nil 1714 . 1732) (nil fontified nil 1713 . 1714) (nil fontified nil 1712 . 1713) (nil fontified nil 1711 . 1712) (nil fontified nil 1700 . 1711) (nil fontified nil 1699 . 1700) (nil fontified nil 1698 . 1699) (nil fontified nil 1689 . 1698) (nil fontified nil 1688 . 1689) (nil fontified nil 1684 . 1688) (nil fontified nil 1682 . 1684) (nil fontified nil 1678 . 1682) (nil fontified nil 1653 . 1678) (nil fontified nil 1652 . 1653) (nil fontified nil 1643 . 1652) (nil fontified nil 1625 . 1643) (nil fontified nil 1624 . 1625) (nil fontified nil 1623 . 1624) (nil fontified nil 1619 . 1623) (nil fontified nil 1617 . 1619) (nil fontified nil 1612 . 1617) (nil fontified nil 1610 . 1612) (nil fontified nil 1601 . 1610) (nil fontified nil 1600 . 1601) (nil fontified nil 1565 . 1600) (nil fontified nil 1564 . 1565) (nil fontified nil 1563 . 1564) (nil fontified nil 1562 . 1563) (nil fontified nil 1560 . 1562) (nil fontified nil 1559 . 1560) (nil fontified nil 1556 . 1559) (nil fontified nil 1555 . 1556) (nil fontified nil 1550 . 1555) (nil fontified nil 1548 . 1550) (nil fontified nil 1537 . 1548) (nil fontified nil 1525 . 1537) (nil fontified nil 1523 . 1525) (nil fontified nil 1518 . 1523) (nil fontified nil 1517 . 1518) (nil fontified nil 1516 . 1517) (nil fontified nil 1514 . 1516) (nil fontified nil 1513 . 1514) (nil fontified nil 1511 . 1513) (nil fontified nil 1510 . 1511) (nil fontified nil 1507 . 1510) (nil fontified nil 1505 . 1507) (nil fontified nil 1494 . 1505) (nil fontified nil 1490 . 1494) (nil fontified nil 1481 . 1490) (nil fontified nil 1480 . 1481) (nil fontified nil 1479 . 1480) (nil fontified nil 1478 . 1479) (nil fontified nil 1477 . 1478) (nil fontified nil 1468 . 1477) (nil fontified nil 1463 . 1468) (nil fontified nil 1452 . 1463) (nil fontified nil 1441 . 1452) (nil fontified nil 1439 . 1441) (nil fontified nil 1430 . 1439) (nil fontified nil 1429 . 1430) (nil fontified nil 1426 . 1429) (nil fontified nil 1417 . 1426) (nil fontified nil 1416 . 1417) (nil fontified nil 1415 . 1416) (nil fontified nil 1414 . 1415) (nil fontified nil 1410 . 1414) (nil fontified nil 1408 . 1410) (nil fontified nil 1399 . 1408) (nil fontified nil 1397 . 1399) (nil fontified nil 1388 . 1397) (nil fontified nil 1387 . 1388) (nil fontified nil 1372 . 1387) (nil fontified nil 1370 . 1372) (nil fontified nil 1369 . 1370) (nil fontified nil 1366 . 1369) (nil fontified nil 1365 . 1366) (nil fontified nil 1362 . 1365) (nil fontified nil 1357 . 1362) (nil fontified nil 1341 . 1357) (nil fontified nil 1338 . 1341) (nil fontified nil 1331 . 1338) (nil fontified nil 1330 . 1331) (nil fontified nil 1289 . 1330) (nil fontified nil 1288 . 1289) (nil fontified nil 1272 . 1288) (nil fontified nil 1271 . 1272) (nil fontified nil 1270 . 1271) (nil fontified nil 1246 . 1270) (nil fontified nil 1243 . 1246) (nil fontified nil 1242 . 1243) (nil fontified nil 1239 . 1242) (nil fontified nil 1234 . 1239) (nil fontified nil 1214 . 1234) (nil fontified nil 1211 . 1214) (nil fontified nil 1204 . 1211) (nil fontified nil 1203 . 1204) (nil fontified nil 1202 . 1203) (nil fontified nil 1195 . 1202) (nil fontified nil 1193 . 1195) (nil fontified nil 1188 . 1193) (nil fontified nil 1186 . 1188) (nil fontified nil 1177 . 1186) (nil fontified nil 1176 . 1177) (nil fontified nil 1153 . 1176) (nil fontified nil 1137 . 1153) (nil fontified nil 1134 . 1137) (nil fontified nil 1130 . 1134) (1130 . 1865)) nil (26048 28086 273279 135000) 0 nil])
([nil nil ((19 . 20) (t 26048 28086 286752 495000)) nil (26048 28104 330707 690000) 0 nil])
([nil nil ((20 . 23)) nil (26048 28104 330706 889000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -21) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (#("s" 0 1 (fontified t)) . -22) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) 23) nil (26048 28104 330705 788000) 0 nil])
([nil nil ((21 . 25)) nil (26048 28104 330698 836000) 0 nil])
([nil nil ((24 . 33) (#("g" 0 1 (fontified nil)) . 24) (24 . 25) (#("gstreamer" 0 9 (fontified nil)) . -24) (24 . 33) (#("g" 0 1 (face font-lock-constant-face fontified t)) . -24) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) 25) nil (26048 28104 330697 483000) 0 nil])
([nil nil ((33 . 37)) nil (26048 28104 330692 516000) 0 nil])
([nil nil ((35 . 42) (#("pr" 0 2 (fontified nil)) . 35) (35 . 37) (#("prelude" 0 7 (fontified nil)) . -35) (35 . 42) (#("pr" 0 2 (fontified t)) . -35) (undo-tree-id1541 . -2) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -2) (undo-tree-id1546 . -2) (undo-tree-id1547 . -2) (undo-tree-id1548 . -2) (undo-tree-id1549 . -2) 37) nil (26048 28104 330690 932000) 0 nil])
([nil nil ((42 . 45)) nil (26048 28104 330683 123000) 0 nil])
([nil nil ((#("&" 0 1 (fontified t)) . -44) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) 45) nil (26048 28104 330681 2000) 0 nil])
([nil nil ((44 . 46)) nil (26048 28104 330667 175000) 0 nil])
([nil nil ((#("2" 0 1 (face font-lock-string-face fontified t)) . -267) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -268) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) 269 (t 26048 28104 343420 264000)) nil (26048 28140 620152 726000) 0 nil])
([nil nil ((267 . 269)) nil (26048 28140 620127 611000) 0 nil])
([nil nil ((#("use gstreamer::prelude::{GstBinExtManual, Cast};" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 13 (face font-lock-constant-face fontified t) 13 15 (fontified t) 15 22 (face font-lock-constant-face fontified t) 22 24 (fontified t) 24 25 (face (rainbow-delimiters-depth-1-face) fontified t) 25 40 (face font-lock-type-face fontified t) 40 42 (fontified t) 42 46 (face font-lock-type-face fontified t) 46 47 (face (rainbow-delimiters-depth-1-face) fontified t) 47 48 (fontified t)) . 47) (undo-tree-id1588 . -48) (undo-tree-id1589 . -48) (undo-tree-id1590 . -48) (undo-tree-id1591 . -48) (undo-tree-id1592 . -48) (undo-tree-id1593 . -48) (t 26048 28140 633422 485000)) nil (26048 28162 641336 180000) 0 nil])
([nil nil ((1132 . 1133) (t 26048 28162 686757 158000)) nil (26048 28172 518924 512000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1109) 1133) nil (26048 28172 518922 798000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1128) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) 1129) nil (26048 28172 518917 869000) 0 nil])
([nil nil ((1105 . 1109) (#("    " 0 4 (fontified nil)) . 1104) (undo-tree-id1684 . -4) (undo-tree-id1685 . -4) (undo-tree-id1686 . -4) (undo-tree-id1687 . -4) (1103 . 1109) (t 26048 28172 563424 424000)) nil (26048 28372 795500 370000) 0 nil])
([nil nil ((1109 . 1110)) nil (26048 28372 795496 66000) 0 nil])
([nil nil ((1109 . 1116) (#("a" 0 1 (fontified nil)) . 1109) (1109 . 1110) (#("appsink" 0 7 (fontified nil)) . -1109) (1109 . 1116) (#("a" 0 1 (fontified t)) . -1109) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) 1110) nil (26048 28372 795494 568000) 0 nil])
([nil nil ((1116 . 1124)) nil (26048 28372 795246 974000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1131 1140 nil nil nil nil #s(yas--exit 1141 nil))) #s(yas--exit 1141 nil) 18 nil #s(yas--field 1 1131 1140 nil nil nil nil #s(yas--exit 1141 nil)) nil nil)) (1117 . 1141) (#("set_callbacks(${1:callbacks})$0" 0 31 (fontified nil)) . 1117) (1117 . 1148) (#("callbak" 0 7 (fontified nil)) . 1117) (1117 . 1124) (#("set_callbacks(…) (alias gst_app_sink_set_callbacks)" 0 51 (fontified nil)) . -1117) (1117 . 1168) (#("callbak" 0 7 (fontified t)) . -1117) (undo-tree-id1659 . -7) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -2) (undo-tree-id1663 . -2) (undo-tree-id1664 . -3) (undo-tree-id1665 . -3) (undo-tree-id1666 . -4) (undo-tree-id1667 . -4) (undo-tree-id1668 . -4) (undo-tree-id1669 . -4) (undo-tree-id1670 . -5) (undo-tree-id1671 . -5) (undo-tree-id1672 . -5) (undo-tree-id1673 . -6) (undo-tree-id1674 . -6) (undo-tree-id1675 . -7) (undo-tree-id1676 . -7) (undo-tree-id1677 . -7) (undo-tree-id1678 . -7) 1124) nil (26048 28372 795244 891000) 0 nil])
([nil nil ((apply yas--snippet-revive 1117 1141 #s(yas--snippet nil (#s(yas--field 1 1131 1140 nil nil nil nil #s(yas--exit 1141 nil))) #s(yas--exit 1141 nil) 18 nil #s(yas--field 1 1131 1140 nil nil nil nil #s(yas--exit 1141 nil)) nil nil))) nil (26048 28372 795229 810000) 0 nil])
([nil nil ((#("appsink.set_callbacks(callbacks)" 0 8 (fontified t) 8 21 (fontified t) 21 22 (face (rainbow-delimiters-depth-2-face) fontified t) 22 31 (fontified t) 31 32 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1109) (undo-tree-id1614 . -7) (undo-tree-id1615 . -7) (undo-tree-id1616 . -7) (undo-tree-id1617 . -8) (undo-tree-id1618 . -8) (undo-tree-id1619 . -8) (undo-tree-id1620 . -8) (undo-tree-id1621 . -8) (undo-tree-id1622 . -8) (undo-tree-id1623 . -8) (undo-tree-id1624 . -8) (undo-tree-id1625 . -8) (undo-tree-id1626 . -8) (undo-tree-id1627 . -8) (undo-tree-id1628 . -8) (undo-tree-id1629 . -8) (undo-tree-id1630 . -8) (undo-tree-id1631 . -8) (undo-tree-id1632 . -8) (undo-tree-id1633 . -8) (undo-tree-id1634 . -8) (undo-tree-id1635 . -8) (undo-tree-id1636 . -8) (undo-tree-id1637 . -8) (undo-tree-id1638 . -8) (undo-tree-id1639 . -8) (undo-tree-id1640 . -8) (undo-tree-id1641 . -32) (undo-tree-id1642 . -32) (undo-tree-id1643 . -22) (undo-tree-id1644 . -22) (undo-tree-id1645 . -22) (undo-tree-id1646 . -22) (undo-tree-id1647 . -22) (undo-tree-id1648 . -22) (undo-tree-id1649 . -22) (undo-tree-id1650 . -22) (undo-tree-id1651 . -22) (undo-tree-id1652 . -22) (undo-tree-id1653 . -22) (undo-tree-id1654 . -22) (undo-tree-id1655 . -22) (undo-tree-id1656 . -22) (undo-tree-id1657 . -22) (undo-tree-id1658 . -32)) nil (26048 28372 795226 770000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1109) (undo-tree-id1613 . -1)) nil (26048 28372 795192 615000) 0 nil])
([nil nil ((#("let appsink = gstreamer_app::AppSink::builder().build();" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 11 (face font-lock-variable-name-face fontified t) 11 14 (fontified t) 14 27 (face font-lock-constant-face fontified t) 27 29 (fontified t) 29 36 (face font-lock-type-face fontified t) 36 38 (fontified t) 38 45 (fontified t) 45 46 (face (rainbow-delimiters-depth-2-face) fontified t) 46 47 (face (rainbow-delimiters-depth-2-face) fontified t) 47 48 (fontified t) 48 53 (fontified t) 53 54 (face (rainbow-delimiters-depth-2-face) fontified t) 54 55 (face (rainbow-delimiters-depth-2-face) fontified t) 55 56 (fontified t)) . 720) (undo-tree-id1753 . -3) (undo-tree-id1754 . -11) (undo-tree-id1755 . -11) (undo-tree-id1756 . -11) (undo-tree-id1757 . -11) (undo-tree-id1758 . -11) (undo-tree-id1759 . -11) (undo-tree-id1760 . -11) (undo-tree-id1761 . -56) (t 26048 28372 810103 308000)) nil (26048 28409 167797 655000) 0 nil])
([nil nil ((720 . 725)) nil (26048 28409 167790 935000) 0 nil])
([nil nil ((#("q" 0 1 (face font-lock-variable-name-face fontified t)) . -724) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) 725) nil (26048 28409 167790 80000) 0 nil])
([nil nil ((724 . 732)) nil (26048 28409 167785 967000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -731) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) 732) nil (26048 28409 167785 206000) 0 nil])
([nil nil ((731 . 734)) nil (26048 28409 167782 779000) 0 nil])
([nil nil ((731 . 740) (#("gst" 0 3 (fontified nil)) . 731) (731 . 734) (#("gstreamer" 0 9 (fontified nil)) . -731) (731 . 740) (#("gst" 0 3 (fontified t)) . -731) (undo-tree-id1738 . -3) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (undo-tree-id1741 . -2) (undo-tree-id1742 . -2) (undo-tree-id1743 . -3) (undo-tree-id1744 . -3) 734) nil (26048 28409 167781 595000) 0 nil])
([nil nil ((740 . 745)) nil (26048 28409 167776 6000) 0 nil])
([nil nil ((742 . 756) (#("Ele" 0 3 (fontified nil)) . 742) (742 . 745) (#("ElementFactory (alias GstElementFactory)" 0 40 (fontified nil)) . -742) (742 . 782) (#("Ele" 0 3 (face font-lock-type-face fontified t)) . -742) (undo-tree-id1727 . -3) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -2) (undo-tree-id1731 . -2) (undo-tree-id1732 . -2) (undo-tree-id1733 . -3) (undo-tree-id1734 . -3) (undo-tree-id1735 . -3) (undo-tree-id1736 . -3) (undo-tree-id1737 . -3) 745) nil (26048 28409 167774 588000) 0 nil])
([nil nil ((756 . 760)) nil (26048 28409 167765 980000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 773 779 nil nil nil t #s(yas--field 2 781 785 nil nil nil nil #s(yas--exit 786 nil))) #s(yas--field 2 781 785 nil nil nil nil #s(yas--exit 786 nil))) #s(yas--exit 786 nil) 19 nil #s(yas--field 1 773 779 nil nil nil t #s(yas--field 2 781 785 nil nil nil nil #s(yas--exit 786 nil))) nil nil)) (758 . 791) (#("make_with_name(${1:factoryname}, ${2:name})$0" 0 45 (fontified nil)) . 758) (758 . 803) (#("ma" 0 2 (fontified nil)) . 758) (758 . 760) (#("make_with_name(…) (alias gst_element_factory_make)" 0 50 (fontified nil)) . -758) (758 . 808) (#("ma" 0 2 (fontified t)) . -758) (undo-tree-id1717 . -2) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -2) (undo-tree-id1723 . -2) (undo-tree-id1724 . -2) (undo-tree-id1725 . -2) (undo-tree-id1726 . -2) 760) nil (26048 28409 167764 522000) 0 nil])
([nil nil ((774 . 775) (#("factoryname" 0 11 (fontified nil)) . 774) (undo-tree-id1716 . -11) (773 . 774)) nil (26048 28409 167756 76000) 0 nil])
([nil nil ((774 . 778)) nil (26048 28409 167754 402000) 0 nil])
([nil nil ((apply yas--snippet-revive 758 786 #s(yas--snippet nil (#s(yas--field 1 773 779 nil nil nil t #s(yas--field 2 781 785 nil nil nil nil #s(yas--exit 786 nil))) #s(yas--field 2 781 785 nil nil nil nil #s(yas--exit 786 nil))) #s(yas--exit 786 nil) 19 nil #s(yas--field 1 773 779 nil nil nil t #s(yas--field 2 781 785 nil nil nil nil #s(yas--exit 786 nil))) nil nil))) nil (26048 28409 167753 850000) 0 nil])
([nil nil ((#("name" 0 4 (fontified t)) . -781) (undo-tree-id1714 . -4) (undo-tree-id1715 . -4) 785) nil (26048 28409 167753 51000) 0 nil])
([nil nil ((781 . 783)) nil (26048 28409 167751 91000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -781) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -782) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) 783) nil (26048 28409 167749 927000) 0 nil])
([nil nil ((781 . 782)) nil (26048 28409 167742 285000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 786 792 nil nil nil t #s(yas--exit 793 nil))) #s(yas--exit 793 nil) 20 nil #s(yas--field 1 786 792 nil nil nil t #s(yas--exit 793 nil)) nil nil)) (781 . 789) (#("Some(${1:()})$0" 0 15 (fontified nil)) . 781) (781 . 796) (#("S" 0 1 (fontified nil)) . 781) (781 . 782) (#("Some(…)" 0 7 (fontified nil)) . -781) (781 . 788) (#("S" 0 1 (face font-lock-type-face fontified t)) . -781) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) 782) nil (26048 28409 167740 609000) 0 nil])
([nil nil ((787 . 788) (#("()" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 787) (undo-tree-id1697 . -2) (786 . 787)) nil (26048 28409 167574 277000) 0 nil])
([nil nil ((787 . 788)) nil (26048 28409 167572 638000) 0 nil])
([nil nil ((#("Z" 0 1 (face font-lock-string-face fontified t)) . -787) (undo-tree-id1688 . -1) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) 788) nil (26048 28409 167570 986000) 0 nil])
([nil nil ((787 . 791)) nil (26048 28409 167557 639000) 0 nil])
([nil nil ((apply yas--snippet-revive 781 793 #s(yas--snippet nil (#s(yas--field 1 786 792 nil nil nil t #s(yas--exit 793 nil))) #s(yas--exit 793 nil) 20 nil #s(yas--field 1 786 792 nil nil nil t #s(yas--exit 793 nil)) nil nil))) nil (26048 28409 167556 396000) 0 nil])
([nil nil ((794 . 796)) nil (26048 28409 167552 448000) 0 nil])
([nil nil ((796 . 801) (t 26048 28409 180105 525000)) nil (26048 28434 641658 960000) 0 nil])
([nil nil ((801 . 807)) nil (26048 28434 641658 163000) 0 nil])
([nil nil ((#("k" 0 1 (face font-lock-variable-name-face fontified t)) . -805) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -806) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) 807) nil (26048 28434 641656 641000) 0 nil])
([nil nil ((805 . 808)) nil (26048 28434 641643 67000) 0 nil])
([nil nil ((808 . 819)) nil (26048 28434 641642 553000) 0 nil])
([nil nil ((816 . 825) (#("gst" 0 3 (fontified nil)) . 816) (816 . 819) (#("gstreamer" 0 9 (fontified nil)) . -816) (816 . 825) (#("gst" 0 3 (fontified t)) . -816) (undo-tree-id1861 . -3) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -2) (undo-tree-id1866 . -2) (undo-tree-id1867 . -3) (undo-tree-id1868 . -3) (undo-tree-id1869 . -3) (undo-tree-id1870 . -3) 819) nil (26048 28434 641641 155000) 0 nil])
([nil nil ((825 . 832)) nil (26048 28434 641633 718000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -830) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (#("m" 0 1 (fontified t)) . -831) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) 832) nil (26048 28434 641632 408000) 0 nil])
([nil nil ((830 . 831)) nil (26048 28434 641622 481000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -830) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) 831) nil (26048 28434 641621 330000) 0 nil])
([nil nil ((830 . 831)) nil (26048 28434 641613 173000) 0 nil])
([nil nil ((827 . 841) (#("Elem" 0 4 (fontified nil)) . 827) (827 . 831) (#("ElementFactory (alias GstElementFactory)" 0 40 (fontified nil)) . -827) (827 . 867) (#("Elem" 0 4 (face font-lock-type-face fontified t)) . -827) (undo-tree-id1798 . -4) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (undo-tree-id1802 . -2) (undo-tree-id1803 . -2) (undo-tree-id1804 . -3) (undo-tree-id1805 . -3) (undo-tree-id1806 . -3) (undo-tree-id1807 . -3) (undo-tree-id1808 . -3) (undo-tree-id1809 . -3) (undo-tree-id1810 . -3) (undo-tree-id1811 . -3) (undo-tree-id1812 . -3) (undo-tree-id1813 . -3) (undo-tree-id1814 . -3) (undo-tree-id1815 . -3) (undo-tree-id1816 . -3) (undo-tree-id1817 . -3) (undo-tree-id1818 . -3) (undo-tree-id1819 . -3) (undo-tree-id1820 . -3) (undo-tree-id1821 . -3) (undo-tree-id1822 . -3) (undo-tree-id1823 . -3) (undo-tree-id1824 . -3) (undo-tree-id1825 . -3) (undo-tree-id1826 . -3) (undo-tree-id1827 . -3) (undo-tree-id1828 . -3) (undo-tree-id1829 . -3) (undo-tree-id1830 . -4) (undo-tree-id1831 . -4) (undo-tree-id1832 . -4) (undo-tree-id1833 . -4) (undo-tree-id1834 . -4) (undo-tree-id1835 . -4) 831) nil (26048 28434 641610 666000) 0 nil])
([nil nil ((841 . 847)) nil (26048 28434 641582 969000) 0 nil])
([nil nil ((843 . 857) (#("make" 0 4 (fontified nil)) . 843) (843 . 847) (#("make_with_name (alias gst_element_factory_make)" 0 47 (fontified nil)) . -843) (843 . 890) (#("make" 0 4 (fontified t)) . -843) (undo-tree-id1785 . -4) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (undo-tree-id1789 . -2) (undo-tree-id1790 . -2) (undo-tree-id1791 . -3) (undo-tree-id1792 . -3) (undo-tree-id1793 . -4) (undo-tree-id1794 . -4) (undo-tree-id1795 . -4) (undo-tree-id1796 . -4) (undo-tree-id1797 . -4) 847) nil (26048 28434 641581 504000) 0 nil])
([nil nil ((857 . 859)) nil (26048 28434 641571 822000) 0 nil])
([nil nil ((858 . 860)) nil (26048 28434 641571 247000) 0 nil])
([nil nil ((859 . 867)) nil (26048 28434 641570 641000) 0 nil])
([nil nil ((868 . 871)) nil (26048 28434 641570 86000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 875 885 nil nil nil t #s(yas--exit 886 nil))) #s(yas--exit 886 nil) 21 nil #s(yas--field 1 875 885 nil nil nil t #s(yas--exit 886 nil)) nil nil)) (870 . 878) (#("Some(${1:()})$0" 0 15 (fontified nil)) . 870) (870 . 885) (#("S" 0 1 (fontified nil)) . 870) (870 . 871) (#("Some(…)" 0 7 (fontified nil)) . -870) (870 . 877) (#("S" 0 1 (face font-lock-type-face fontified t)) . -870) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) 871) nil (26048 28434 641568 227000) 0 nil])
([nil nil ((876 . 877) (#("()" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 876) (undo-tree-id1777 . -2) (875 . 876)) nil (26048 28434 641561 613000) 0 nil])
([nil nil ((876 . 880)) nil (26048 28434 641559 910000) 0 nil])
([nil nil ((#("l" 0 1 (face font-lock-string-face fontified t)) . -878) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -879) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) 880) nil (26048 28434 641557 564000) 0 nil])
([nil nil ((878 . 884)) nil (26048 28434 641539 137000) 0 nil])
([nil nil ((apply yas--snippet-revive 870 886 #s(yas--snippet nil (#s(yas--field 1 875 885 nil nil nil t #s(yas--exit 886 nil))) #s(yas--exit 886 nil) 21 nil #s(yas--field 1 875 885 nil nil nil t #s(yas--exit 886 nil)) nil nil))) nil (26048 28434 641537 715000) 0 nil])
([nil nil ((887 . 889)) nil (26048 28434 641532 691000) 0 nil])
([nil nil ((#("ref()" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-4-face) fontified t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t)) . -994) (undo-tree-id2015 . -5) (undo-tree-id2016 . -3) (undo-tree-id2017 . -4) (undo-tree-id2018 . -5) (undo-tree-id2019 . -5) (undo-tree-id2020 . -5) (undo-tree-id2021 . -5) (undo-tree-id2022 . -5) 999 (t 26048 28434 686773 748000)) nil (26048 28474 187150 88000) 0 nil])
([nil nil ((#("upcast_" 0 7 (fontified t)) . -987) (undo-tree-id2004 . -7) (undo-tree-id2005 . -6) (undo-tree-id2006 . -7) (undo-tree-id2007 . -7) (undo-tree-id2008 . -7) (undo-tree-id2009 . -7) (undo-tree-id2010 . -7) (undo-tree-id2011 . -7) (undo-tree-id2012 . -7) (undo-tree-id2013 . -7) (undo-tree-id2014 . -7) 994) nil (26048 28474 187143 566000) 0 nil])
([nil nil ((#("appsink." 0 8 (fontified t)) . -979) (undo-tree-id1984 . -8) (undo-tree-id1985 . -4) (undo-tree-id1986 . -4) (undo-tree-id1987 . -7) (undo-tree-id1988 . -7) (undo-tree-id1989 . -7) (undo-tree-id1990 . -7) (undo-tree-id1991 . -7) (undo-tree-id1992 . -8) (undo-tree-id1993 . -8) (undo-tree-id1994 . -8) (undo-tree-id1995 . -8) (undo-tree-id1996 . -8) (undo-tree-id1997 . -8) (undo-tree-id1998 . -8) (undo-tree-id1999 . -8) (undo-tree-id2000 . -8) (undo-tree-id2001 . -8) (undo-tree-id2002 . -8) (undo-tree-id2003 . -8) 987) nil (26048 28474 187135 493000) 0 nil])
([nil nil ((979 . 980)) nil (26048 28474 187121 676000) 0 nil])
([nil nil ((979 . 983) (#("z" 0 1 (fontified nil)) . 979) (979 . 980) (#("zbar" 0 4 (fontified nil)) . -979) (979 . 983) (#("z" 0 1 (fontified t)) . -979) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (undo-tree-id1983 . -1) 980) nil (26048 28474 187120 378000) 0 nil])
([nil nil ((983 . 984)) nil (26048 28474 187115 409000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -983) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) (undo-tree-id1976 . -1) (undo-tree-id1977 . -1) 984) nil (26048 28474 187114 452000) 0 nil])
([nil nil ((#("zbar" 0 4 (fontified t)) . -979) (undo-tree-id1950 . -4) (undo-tree-id1951 . -4) (undo-tree-id1952 . -4) (undo-tree-id1953 . -4) (undo-tree-id1954 . -4) (undo-tree-id1955 . -4) (undo-tree-id1956 . -4) (undo-tree-id1957 . -4) (undo-tree-id1958 . -4) (undo-tree-id1959 . -4) (undo-tree-id1960 . -4) (undo-tree-id1961 . -4) (undo-tree-id1962 . -4) (undo-tree-id1963 . -4) (undo-tree-id1964 . -4) (undo-tree-id1965 . -4) (undo-tree-id1966 . -4) (undo-tree-id1967 . -4) (undo-tree-id1968 . -4) (undo-tree-id1969 . -4) (undo-tree-id1970 . -4) (undo-tree-id1971 . -4) 983) nil (26048 28474 187108 829000) 0 nil])
([nil nil ((979 . 981)) nil (26048 28474 187093 620000) 0 nil])
([nil nil ((980 . 984) (#("z" 0 1 (fontified nil)) . 980) (980 . 981) (#("zbar" 0 4 (fontified nil)) . -980) (980 . 984) (#("z" 0 1 (fontified t)) . -980) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) 981) nil (26048 28474 187092 528000) 0 nil])
([nil nil ((984 . 985)) nil (26048 28474 187088 740000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -984) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) 985) nil (26048 28474 187087 737000) 0 nil])
([nil nil ((984 . 988)) nil (26048 28474 187081 509000) 0 nil])
([nil nil ((987 . 995) (#("f" 0 1 (fontified nil)) . 987) (987 . 988) (#("fakesink" 0 8 (fontified nil)) . -987) (987 . 995) (#("f" 0 1 (fontified t)) . -987) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) 988) nil (26048 28474 187080 55000) 0 nil])
([nil nil ((#("ref()" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-4-face) fontified t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t)) . -1203) (undo-tree-id1925 . -5) (undo-tree-id1926 . -5) (undo-tree-id1927 . -5) (undo-tree-id1928 . -5) (undo-tree-id1929 . -5) 1208) nil (26048 28474 186900 229000) 0 nil])
([nil nil ((#("upcast_" 0 7 (fontified t)) . -1196) (undo-tree-id1918 . -7) (undo-tree-id1919 . -7) (undo-tree-id1920 . -7) (undo-tree-id1921 . -7) (undo-tree-id1922 . -7) (undo-tree-id1923 . -7) (undo-tree-id1924 . -7) 1203) nil (26048 28474 186896 48000) 0 nil])
([nil nil ((#("appsink." 0 8 (fontified t)) . -1188) (undo-tree-id1909 . -8) (undo-tree-id1910 . -8) (undo-tree-id1911 . -8) (undo-tree-id1912 . -8) (undo-tree-id1913 . -8) (undo-tree-id1914 . -8) (undo-tree-id1915 . -8) (undo-tree-id1916 . -8) (undo-tree-id1917 . -8) 1196) nil (26048 28474 186890 770000) 0 nil])
([nil nil ((1188 . 1189)) nil (26048 28474 186884 401000) 0 nil])
([nil nil ((#("z" 0 1 (fontified t)) . -1188) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) 1189) nil (26048 28474 186883 177000) 0 nil])
([nil nil ((1188 . 1190)) nil (26048 28474 186878 479000) 0 nil])
([nil nil ((1189 . 1193) (#("z" 0 1 (fontified nil)) . 1189) (1189 . 1190) (#("zbar" 0 4 (fontified nil)) . -1189) (1189 . 1193) (#("z" 0 1 (fontified t)) . -1189) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) 1190) nil (26048 28474 186876 855000) 0 nil])
([nil nil ((1193 . 1197)) nil (26048 28474 186871 665000) 0 nil])
([nil nil ((1196 . 1204) (#("f" 0 1 (fontified nil)) . 1196) (1196 . 1197) (#("fakesink" 0 8 (fontified nil)) . -1196) (1196 . 1204) (#("f" 0 1 (fontified t)) . -1196) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) 1197) nil (26048 28474 186867 379000) 0 nil])
([nil nil ((1293 . 1297) (#("    " 0 4 (fontified nil)) . 1292) (undo-tree-id2051 . -4) (1292 . 1297) (#("    " 0 4 (fontified nil)) . 1291) (1291 . 1295) (1291 . 1292) (t 26048 28474 190109 496000)) nil (26048 28937 142001 762000) 0 nil])
([nil nil ((1292 . 1296)) nil (26048 28937 141999 760000) 0 nil])
([nil nil ((1296 . 1300)) nil (26048 28937 141999 169000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -1296) (undo-tree-id2047 . -1) (#("e" 0 1 (fontified t)) . -1297) (undo-tree-id2048 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -1298) (undo-tree-id2049 . -1) (#(" " 0 1 (fontified t)) . -1299) (undo-tree-id2050 . -1) 1300) nil (26048 28937 141998 120000) 0 nil])
([nil nil ((1296 . 1301)) nil (26048 28937 141994 570000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -1300) (undo-tree-id2046 . -1) 1301) nil (26048 28937 141993 868000) 0 nil])
([nil nil ((1300 . 1302)) nil (26048 28937 141992 503000) 0 nil])
([nil nil ((1302 . 1304)) nil (26048 28937 141991 952000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -1301) (undo-tree-id2043 . -1) (#("a" 0 1 (fontified t)) . -1302) (undo-tree-id2044 . -1) (#("r" 0 1 (fontified t)) . -1303) (undo-tree-id2045 . -1) 1304) nil (26048 28937 141990 965000) 0 nil])
([nil nil ((1301 . 1304)) nil (26048 28937 141987 857000) 0 nil])
([nil nil ((#("zbar" 0 4 (fontified t)) . -1300) (undo-tree-id2042 . -4) 1304) nil (26048 28937 141987 208000) 0 nil])
([nil nil ((#("get_" 0 4 (fontified t)) . -1296) (undo-tree-id2041 . -4) 1300) nil (26048 28937 141985 664000) 0 nil])
([nil nil ((1296 . 1299)) nil (26048 28937 141984 278000) 0 nil])
([nil nil ((1296 . 1305) (#("gst" 0 3 (fontified nil)) . 1296) (1296 . 1299) (#("gstreamer" 0 9 (fontified nil)) . -1296) (1296 . 1305) (#("gst" 0 3 (fontified t)) . -1296) (undo-tree-id2040 . -3) 1299) nil (26048 28937 141983 233000) 0 nil])
([nil nil ((1305 . 1308)) nil (26048 28937 141981 204000) 0 nil])
([nil nil ((#("F" 0 1 (face font-lock-type-face fontified t)) . -1307) (undo-tree-id2039 . -1) 1308) nil (26048 28937 141980 415000) 0 nil])
([nil nil ((1307 . 1309)) nil (26048 28937 141978 857000) 0 nil])
([nil nil ((1307 . 1310) (#("ff" 0 2 (fontified nil)) . 1307) (1307 . 1309) (#("ffi" 0 3 (fontified nil)) . -1307) (1307 . 1310) (#("ff" 0 2 (fontified t)) . -1307) (undo-tree-id2038 . -2) 1309) nil (26048 28937 141977 773000) 0 nil])
([nil nil ((1310 . 1320)) nil (26048 28937 141975 470000) 0 nil])
([nil nil ((#("zbar" 0 4 (fontified t)) . -1316) (undo-tree-id2035 . -4) (undo-tree-id2036 . -4) (undo-tree-id2037 . -4) 1320) nil (26048 28937 141974 456000) 0 nil])
([nil nil ((1316 . 1317)) nil (26048 28937 141970 873000) 0 nil])
([nil nil ((#("gstreamer::ffi::get_z" 0 9 (face font-lock-constant-face fontified t) 9 11 (fontified t) 11 14 (face font-lock-constant-face fontified t) 14 21 (fontified t)) . 1296) (undo-tree-id2025 . -20) (undo-tree-id2026 . -20) (undo-tree-id2027 . -20) (undo-tree-id2028 . -20) (undo-tree-id2029 . -21) (undo-tree-id2030 . -21) (undo-tree-id2031 . -21) (undo-tree-id2032 . -21) (undo-tree-id2033 . -21) (undo-tree-id2034 . -21)) nil (26048 28937 141968 806000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1296) (undo-tree-id2023 . 1) (undo-tree-id2024 . -1)) nil (26048 29144 794381 998000) 0 nil])
([nil nil ((1879 . 1887) (#("        " 0 8 (fontified nil)) . 1878) (undo-tree-id2463 . -8) (1877 . 1887) (t 26048 29145 770150 279000)) nil (26048 29288 248607 555000) 0 nil] [nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -1864) (undo-tree-id2085 . -1) (undo-tree-id2086 . -1) (undo-tree-id2087 . -1) (undo-tree-id2088 . -1) (undo-tree-id2089 . -1) (undo-tree-id2090 . -1) (undo-tree-id2091 . -1) (undo-tree-id2092 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -1865) (undo-tree-id2093 . -1) (undo-tree-id2094 . -1) (undo-tree-id2095 . -1) (undo-tree-id2096 . -1) (undo-tree-id2097 . -1) (undo-tree-id2098 . -1) 1866 (t 26048 28937 156804 242000)) ((1864 . 1866)) (26048 29144 425873 945000) 0 nil])
([nil nil ((1887 . 1889)) nil (26048 29288 248605 846000) 0 nil])
([nil nil ((1864 . 1865)) ((#("p" 0 1 (fontified t)) . 1864) (undo-tree-id2390 . -1) (undo-tree-id2391 . -1) (undo-tree-id2392 . -1) (undo-tree-id2393 . -1) (undo-tree-id2394 . -1) (undo-tree-id2395 . -1) (undo-tree-id2396 . -1) (undo-tree-id2397 . -1) (undo-tree-id2398 . -1) (undo-tree-id2399 . -1) (undo-tree-id2400 . -1)) (26048 29143 445773 818000) 0 nil])
([nil nil ((1889 . 1891)) nil (26048 29288 248605 199000) 0 nil])
([nil nil ((apply yas--snippet-revive 1864 1874 #s(yas--snippet nil nil #s(yas--exit #<marker at 1937 in wh-gst/main.rs> nil) 22 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 1937 in wh-gst/main.rs> nil) 22 nil nil nil nil)) (1864 . 1874) (#("println!($0)" 0 12 (fontified nil)) . 1864) (1864 . 1876) (#("p" 0 1 (fontified nil)) . 1864) (1864 . 1865) (#("println!(…)" 0 11 (fontified nil)) . -1864) (1864 . 1875) (#("p" 0 1 (fontified t)) . -1864) (undo-tree-id2079 . -1) (undo-tree-id2080 . -1) (undo-tree-id2081 . -1) (undo-tree-id2082 . -1) (undo-tree-id2083 . -1) (undo-tree-id2084 . -1) 1865) ((1864 . 1865) (#("println!(…)" 0 11 (fontified nil)) . 1864) (1864 . 1875) (#("p" 0 1 (fontified nil)) . 1864) (1864 . 1865) (#("println!($0)" 0 12 (fontified nil)) . 1864) (1864 . 1876) (#("println!()" 0 8 (face rust-builtin-formatting-macro fontified t) 8 9 (face (rainbow-delimiters-depth-4-face) fontified t) 9 10 (face (rainbow-delimiters-depth-4-face) fontified t)) . 1864) (undo-tree-id2307 . -9) (undo-tree-id2308 . -9) (undo-tree-id2309 . -9) (undo-tree-id2310 . -9) (undo-tree-id2311 . -9) (undo-tree-id2312 . -9) (undo-tree-id2313 . -9) (undo-tree-id2314 . -9) (undo-tree-id2315 . -9) (undo-tree-id2316 . -9) (undo-tree-id2317 . -9) (undo-tree-id2318 . -9) (undo-tree-id2319 . -9) (undo-tree-id2320 . -9) (undo-tree-id2321 . -9) (undo-tree-id2322 . -9) (undo-tree-id2323 . -9) (undo-tree-id2324 . -9) (undo-tree-id2325 . -9) (undo-tree-id2326 . -9) (undo-tree-id2327 . -9) (undo-tree-id2328 . -9) (undo-tree-id2329 . -9) (undo-tree-id2330 . -9) (undo-tree-id2331 . -9) (undo-tree-id2332 . -9) (undo-tree-id2333 . -9) (undo-tree-id2334 . -9) (undo-tree-id2335 . -9) (undo-tree-id2336 . -9) (undo-tree-id2337 . -9) (undo-tree-id2338 . -9) (undo-tree-id2339 . -9) (undo-tree-id2340 . -9) (undo-tree-id2341 . -9) (undo-tree-id2342 . -9) (undo-tree-id2343 . -9) (undo-tree-id2344 . -9) (undo-tree-id2345 . -9) (undo-tree-id2346 . -9) (undo-tree-id2347 . -9) (undo-tree-id2348 . -9) (undo-tree-id2349 . -9) (undo-tree-id2350 . -9) (undo-tree-id2351 . -9) (undo-tree-id2352 . -9) (undo-tree-id2353 . -9) (undo-tree-id2354 . -9) (undo-tree-id2355 . -9) (undo-tree-id2356 . -9) (undo-tree-id2357 . -9) (undo-tree-id2358 . -9) (undo-tree-id2359 . -9) (undo-tree-id2360 . -9) (undo-tree-id2361 . -9) (undo-tree-id2362 . -9) (undo-tree-id2363 . -9) (undo-tree-id2364 . -9) (undo-tree-id2365 . -9) (undo-tree-id2366 . -10) (undo-tree-id2367 . -9) (undo-tree-id2368 . -9) (undo-tree-id2369 . -9) (undo-tree-id2370 . -9) (undo-tree-id2371 . -9) (undo-tree-id2372 . -9) (undo-tree-id2373 . -9) (undo-tree-id2374 . -9) (undo-tree-id2375 . -9) (undo-tree-id2376 . -9) (undo-tree-id2377 . -9) (undo-tree-id2378 . -9) (undo-tree-id2379 . -9) (undo-tree-id2380 . -9) (undo-tree-id2381 . -9) (undo-tree-id2382 . -9) (undo-tree-id2383 . -9) (undo-tree-id2384 . -9) (undo-tree-id2385 . -9) (undo-tree-id2386 . -9) (undo-tree-id2387 . -9) (undo-tree-id2388 . -9) (undo-tree-id2389 . -9)) (26048 29143 126921 99000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -1890) (undo-tree-id2462 . -1) 1891) nil (26048 29288 248604 491000) 0 nil])
([nil nil ((1873 . 1875)) ((#("\"\"" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t)) . 1873) (undo-tree-id2228 . -1) (undo-tree-id2229 . -1) (undo-tree-id2230 . -1) (undo-tree-id2231 . -1) (undo-tree-id2232 . -1) (undo-tree-id2233 . -1) (undo-tree-id2234 . -2) (undo-tree-id2235 . -2) (undo-tree-id2236 . -2) (undo-tree-id2237 . -2) (undo-tree-id2238 . -2) (undo-tree-id2239 . -2) (undo-tree-id2240 . -2) (undo-tree-id2241 . -2) (undo-tree-id2242 . -2) (undo-tree-id2243 . -2) (undo-tree-id2244 . -2) (undo-tree-id2245 . -2) (undo-tree-id2246 . -2) (undo-tree-id2247 . -2) (undo-tree-id2248 . -2) (undo-tree-id2249 . -2) (undo-tree-id2250 . -2) (undo-tree-id2251 . -2) (undo-tree-id2252 . -2) (undo-tree-id2253 . -2) (undo-tree-id2254 . -2) (undo-tree-id2255 . -2) (undo-tree-id2256 . -2) (undo-tree-id2257 . -2) (undo-tree-id2258 . -2) (undo-tree-id2259 . -2) (undo-tree-id2260 . -2) (undo-tree-id2261 . -2) (undo-tree-id2262 . -2) (undo-tree-id2263 . -2) (undo-tree-id2264 . -2) (undo-tree-id2265 . -2) (undo-tree-id2266 . -2) (undo-tree-id2267 . -2) (undo-tree-id2268 . -2) (undo-tree-id2269 . -2) (undo-tree-id2270 . -2) (undo-tree-id2271 . -2) (undo-tree-id2272 . -2) (undo-tree-id2273 . -2) (undo-tree-id2274 . -2) (undo-tree-id2275 . -2) (undo-tree-id2276 . -2) (undo-tree-id2277 . -2) (undo-tree-id2278 . -2) (undo-tree-id2279 . -2) (undo-tree-id2280 . -2) (undo-tree-id2281 . -2) (undo-tree-id2282 . -2) (undo-tree-id2283 . -2) (undo-tree-id2284 . -2) (undo-tree-id2285 . -2) (undo-tree-id2286 . -2) (undo-tree-id2287 . -2) (undo-tree-id2288 . -2) (undo-tree-id2289 . -2) (undo-tree-id2290 . -2) (undo-tree-id2291 . -2) (undo-tree-id2292 . -2) (undo-tree-id2293 . -2) (undo-tree-id2294 . -2) (undo-tree-id2295 . -1) (undo-tree-id2296 . -1) (undo-tree-id2297 . -1) (undo-tree-id2298 . -1) (undo-tree-id2299 . -1) (undo-tree-id2300 . -1) (undo-tree-id2301 . -1) (undo-tree-id2302 . -1) (undo-tree-id2303 . -1) (undo-tree-id2304 . -1) (undo-tree-id2305 . -1) (undo-tree-id2306 . -1)) (26048 29142 825055 394000) 0 nil])
([nil nil ((1890 . 1891)) nil (26048 29288 248603 144000) 0 nil])
([nil nil ((1874 . 1876)) ((#("{}" 0 1 (face rust-string-interpolation fontified t) 1 2 (face rust-string-interpolation fontified t)) . 1874) (undo-tree-id2216 . -1) (undo-tree-id2217 . -1) (undo-tree-id2218 . -1) (undo-tree-id2219 . -1) (undo-tree-id2220 . -1) (undo-tree-id2221 . -1) (undo-tree-id2222 . -1) (undo-tree-id2223 . -1) (undo-tree-id2224 . -1) (undo-tree-id2225 . -1) (undo-tree-id2226 . -1) (undo-tree-id2227 . -1)) (26048 29142 539035 409000) 0 nil])
([nil nil ((1890 . 1893) (#("m" 0 1 (fontified nil)) . 1890) (1890 . 1891) (#("msg" 0 3 (fontified nil)) . -1890) (1890 . 1893) (#("m" 0 1 (fontified t)) . -1890) (undo-tree-id2461 . -1) 1891) nil (26048 29288 248602 125000) 0 nil])
([nil nil ((1875 . 1877)) ((#(":>" 0 1 (face rust-string-interpolation fontified t) 1 2 (face rust-string-interpolation syntax-table (1) fontified t)) . 1875) (undo-tree-id2206 . -2) (undo-tree-id2207 . -2) (undo-tree-id2208 . -2) (undo-tree-id2209 . -2) (undo-tree-id2210 . -2) (undo-tree-id2211 . -2) (undo-tree-id2212 . -1) (undo-tree-id2213 . -1) (undo-tree-id2214 . -2) (undo-tree-id2215 . -2)) (26048 29142 226897 604000) 0 nil])
([nil nil ((1893 . 1897)) nil (26048 29288 248600 76000) 0 nil])
([nil nil ((#(">" 0 1 (face rust-string-interpolation syntax-table (1) fontified t)) . -1876) (undo-tree-id2073 . -1) (undo-tree-id2074 . -1) (undo-tree-id2075 . -1) (undo-tree-id2076 . -1) (undo-tree-id2077 . -1) (undo-tree-id2078 . -1) 1877) ((1876 . 1877)) (26048 29141 897739 505000) 0 nil])
([nil nil ((apply yas--snippet-revive 1894 1899 #s(yas--snippet nil nil #s(yas--exit 1899 nil) 23 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1899 nil) 23 nil nil nil nil)) (1894 . 1899) (#("src()$0" 0 7 (fontified nil)) . 1894) (1894 . 1901) (#("src" 0 3 (fontified nil)) . 1894) (1894 . 1897) (#("src() (alias get_src)" 0 21 (fontified nil)) . -1894) (1894 . 1915) (#("src" 0 3 (fontified t)) . -1894) (undo-tree-id2460 . -3) 1897) nil (26048 29288 248598 872000) 0 nil])
([nil nil ((1876 . 1877)) ((#("?" 0 1 (face rust-string-interpolation fontified t)) . 1876)) (26048 29141 381134 451000) 0 nil])
([nil nil ((1899 . 1904)) nil (26048 29288 248596 305000) 0 nil])
([nil nil ((1874 . 1883)) ((#("Message: " 0 9 (face font-lock-string-face fontified t)) . 1874)) (26048 29141 101280 150000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1908 1914 nil nil nil t #s(yas--exit 1915 nil))) #s(yas--exit 1915 nil) 24 nil #s(yas--field 1 1908 1914 nil nil nil t #s(yas--exit 1915 nil)) nil nil)) (1903 . 1911) (#("Some(${1:()})$0" 0 15 (fontified nil)) . 1903) (1903 . 1918) (#("S" 0 1 (fontified nil)) . 1903) (1903 . 1904) (#("Some(…)" 0 7 (fontified nil)) . -1903) (1903 . 1910) (#("S" 0 1 (face font-lock-type-face fontified t)) . -1903) (undo-tree-id2459 . -1) 1904) nil (26048 29288 248595 204000) 0 nil])
([nil nil ((1888 . 1892)) ((#(", me" 0 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . 1888) (undo-tree-id2146 . -4) (undo-tree-id2147 . -1) (undo-tree-id2148 . -3) (undo-tree-id2149 . -3) (undo-tree-id2150 . -3) (undo-tree-id2151 . -3) (undo-tree-id2152 . -4) (undo-tree-id2153 . -4) (undo-tree-id2154 . -4) (undo-tree-id2155 . -4) (undo-tree-id2156 . -3) (undo-tree-id2157 . -3) (undo-tree-id2158 . -3) (undo-tree-id2159 . -3) (undo-tree-id2160 . -3) (undo-tree-id2161 . -2) (undo-tree-id2162 . -2) (undo-tree-id2163 . -2) (undo-tree-id2164 . -2) (undo-tree-id2165 . -2) (undo-tree-id2166 . -2) (undo-tree-id2167 . -2) (undo-tree-id2168 . -2) (undo-tree-id2169 . -2) (undo-tree-id2170 . -2) (undo-tree-id2171 . -2) (undo-tree-id2172 . -2) (undo-tree-id2173 . -2) (undo-tree-id2174 . -2) (undo-tree-id2175 . -2) (undo-tree-id2176 . -2) (undo-tree-id2177 . -2) (undo-tree-id2178 . -2) (undo-tree-id2179 . -2) (undo-tree-id2180 . -2) (undo-tree-id2181 . -2) (undo-tree-id2182 . -2) (undo-tree-id2183 . -2) (undo-tree-id2184 . -2) (undo-tree-id2185 . -2) (undo-tree-id2186 . -2) (undo-tree-id2187 . -2) (undo-tree-id2188 . -2) (undo-tree-id2189 . -2) (undo-tree-id2190 . -2) (undo-tree-id2191 . -2) (undo-tree-id2192 . -2) (undo-tree-id2193 . -2) (undo-tree-id2194 . -2) (undo-tree-id2195 . -2) (undo-tree-id2196 . -2) (undo-tree-id2197 . -2) (undo-tree-id2198 . -2) (undo-tree-id2199 . -2) (undo-tree-id2200 . -3) (undo-tree-id2201 . -3) (undo-tree-id2202 . -3) (undo-tree-id2203 . -3) (undo-tree-id2204 . -4) (undo-tree-id2205 . -4)) (26048 29140 845714 337000) 0 nil])
([nil nil ((1909 . 1910) (#("()" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 1909) (1908 . 1909)) nil (26048 29288 248592 665000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -1891) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) (undo-tree-id2071 . -1) (undo-tree-id2072 . -1) 1892) ((1891 . 1892)) (26048 29140 622482 733000) 0 nil])
([nil nil ((1909 . 1913)) nil (26048 29288 248591 759000) 0 nil])
([nil nil ((1891 . 1892)) ((#("s" 0 1 (fontified t)) . 1891) (undo-tree-id2138 . -1) (undo-tree-id2139 . -1) (undo-tree-id2140 . -1) (undo-tree-id2141 . -1) (undo-tree-id2142 . -1) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (undo-tree-id2145 . -1)) (26048 29140 362791 716000) 0 nil])
([nil nil ((apply yas--snippet-revive 1903 1915 #s(yas--snippet nil (#s(yas--field 1 1908 1914 nil nil nil t #s(yas--exit 1915 nil))) #s(yas--exit 1915 nil) 24 nil #s(yas--field 1 1908 1914 nil nil nil t #s(yas--exit 1915 nil)) nil nil))) nil (26048 29288 248591 204000) 0 nil])
([nil nil ((1890 . 1893) (#("ms" 0 2 (fontified nil)) . 1890) (1890 . 1892) (#("msg" 0 3 (fontified nil)) . -1890) (1890 . 1893) (#("ms" 0 2 (fontified t)) . -1890) (undo-tree-id2052 . -1) (undo-tree-id2053 . -2) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -2) (undo-tree-id2063 . -2) (undo-tree-id2064 . -2) (undo-tree-id2065 . -2) (undo-tree-id2066 . -2) 1892) ((1890 . 1892) (#("msg" 0 3 (fontified nil)) . 1890) (1890 . 1893) (#("ms" 0 2 (fontified nil)) . 1890) (1890 . 1892) (#("msg" 0 3 (fontified t)) . 1890) (undo-tree-id2099 . -3) (undo-tree-id2100 . -3) (undo-tree-id2101 . -3) (undo-tree-id2102 . -3) (undo-tree-id2103 . -3) (undo-tree-id2104 . -3) (undo-tree-id2105 . -3) (undo-tree-id2106 . -3) (undo-tree-id2107 . -3) (undo-tree-id2108 . -3) (undo-tree-id2109 . -3) (undo-tree-id2110 . -3) (undo-tree-id2111 . -3) (undo-tree-id2112 . -3) (undo-tree-id2113 . -3) (undo-tree-id2114 . -3) (undo-tree-id2115 . -3) (undo-tree-id2116 . -3) (undo-tree-id2117 . -3) (undo-tree-id2118 . -3) (undo-tree-id2119 . -3) (undo-tree-id2120 . -3) (undo-tree-id2121 . -3) (undo-tree-id2122 . -3) (undo-tree-id2123 . -3) (undo-tree-id2124 . -3) (undo-tree-id2125 . -3) (undo-tree-id2126 . -3) (undo-tree-id2127 . -3) (undo-tree-id2128 . -3) (undo-tree-id2129 . -3) (undo-tree-id2130 . -3) (undo-tree-id2131 . -3) (undo-tree-id2132 . -3) (undo-tree-id2133 . -3) (undo-tree-id2134 . -3) (undo-tree-id2135 . -3) (undo-tree-id2136 . -3) (undo-tree-id2137 . -3) (t 26048 29096 300147 255000)) (26048 29096 255622 472000) 0 nil])
([nil nil ((1915 . 1918)) nil (26048 29288 248590 671000) 0 nil])
nil
([nil nil ((1919 . 1927) (#("            " 0 12 (fontified nil)) . 1918) (undo-tree-id2458 . -8) (1926 . 1930) (1917 . 1927)) nil (26048 29288 248589 926000) 0 nil])
([nil nil ((1918 . 1930)) nil (26048 29288 248588 238000) 0 nil])
([nil nil ((1930 . 1932)) nil (26048 29288 248587 663000) 0 nil])
([nil nil ((apply yas--snippet-revive 1930 1940 #s(yas--snippet nil nil #s(yas--exit 1939 nil) 25 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1939 nil) 25 nil nil nil nil)) (1930 . 1940) (#("println!($0)" 0 12 (fontified nil)) . 1930) (1930 . 1942) (#("pr" 0 2 (fontified nil)) . 1930) (1930 . 1932) (#("println!(…)" 0 11 (fontified nil)) . -1930) (1930 . 1941) (#("pr" 0 2 (fontified t)) . -1930) (undo-tree-id2457 . -2) 1932) nil (26048 29288 248586 480000) 0 nil])
([nil nil ((#("println!()" 0 8 (face rust-builtin-formatting-macro fontified t) 8 9 (face (rainbow-delimiters-depth-4-face) fontified t) 9 10 (face (rainbow-delimiters-depth-4-face) fontified t)) . 1930)) nil (26048 29288 248583 952000) 0 nil])
([nil nil ((1930 . 1943)) nil (26048 29288 248583 349000) 0 nil])
([nil nil ((1943 . 1944)) nil (26048 29288 248582 747000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -1943) (undo-tree-id2456 . -1) 1944) nil (26048 29288 248582 90000) 0 nil])
([nil nil ((1943 . 1947)) nil (26048 29288 248580 681000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1944) (undo-tree-id2453 . -1) (#("=" 0 1 (fontified t)) . -1945) (undo-tree-id2454 . -1) (#(" " 0 1 (fontified t)) . -1946) (undo-tree-id2455 . -1) 1947) nil (26048 29288 248579 625000) 0 nil])
([nil nil ((1944 . 1949)) nil (26048 29288 248576 655000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -1946) (undo-tree-id2450 . -1) (#("s" 0 1 (fontified t)) . -1947) (undo-tree-id2451 . -1) (#("g" 0 1 (fontified t)) . -1948) (undo-tree-id2452 . -1) 1949) nil (26048 29288 248575 703000) 0 nil])
([nil nil ((1946 . 1953)) nil (26048 29288 248572 827000) 0 nil])
([nil nil ((#("get" 0 3 (fontified t)) . -1950) (undo-tree-id2449 . -3) 1953) nil (26048 29288 248572 20000) 0 nil])
([nil nil ((1950 . 1952)) nil (26048 29288 248570 609000) 0 nil])
([nil nil ((apply yas--snippet-revive 1950 1961 #s(yas--snippet nil nil #s(yas--exit 1961 nil) 26 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1961 nil) 26 nil nil nil nil)) (1950 . 1961) (#("structure()$0" 0 13 (fontified nil)) . 1950) (1950 . 1963) (#("st" 0 2 (fontified nil)) . 1950) (1950 . 1952) (#("structure() (alias get_structure, gst_message_get_structure)" 0 60 (fontified nil)) . -1950) (1950 . 2010) (#("st" 0 2 (fontified t)) . -1950) (undo-tree-id2448 . -2) 1952) nil (26048 29288 248569 374000) 0 nil])
([nil nil ((1961 . 1962)) nil (26048 29288 248566 875000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -1961) (undo-tree-id2447 . -1) 1962) nil (26048 29288 248565 929000) 0 nil])
([nil nil ((1961 . 1964)) nil (26048 29288 248564 376000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1971 1973 nil nil nil t #s(yas--exit 1974 nil))) #s(yas--exit 1974 nil) 27 nil #s(yas--field 1 1971 1973 nil nil nil t #s(yas--exit 1974 nil)) nil nil)) (1962 . 1973) (#("and_then(${1:f})$0" 0 18 (fontified nil)) . 1962) (1962 . 1980) (#("an" 0 2 (fontified nil)) . 1962) (1962 . 1964) (#("and_then(…) (alias flatmap)" 0 27 (fontified nil)) . -1962) (1962 . 1989) (#("an" 0 2 (fontified t)) . -1962) (undo-tree-id2446 . -2) 1964) nil (26048 29288 248563 193000) 0 nil])
([nil nil ((1972 . 1973) (#("f" 0 1 (fontified nil)) . 1972) (1971 . 1972)) nil (26048 29288 248560 248000) 0 nil])
([nil nil ((apply yas--snippet-revive 1962 1974 #s(yas--snippet nil (#s(yas--field 1 1971 1973 nil nil nil t #s(yas--exit 1974 nil))) #s(yas--exit 1974 nil) 27 nil #s(yas--field 1 1971 1973 nil nil nil t #s(yas--exit 1974 nil)) nil nil))) nil (26048 29288 248559 270000) 0 nil])
([nil nil ((#("structure" 0 9 (face font-lock-variable-name-face fontified t)) . -1934) (undo-tree-id2444 . -9) (undo-tree-id2445 . -9) 1943) nil (26048 29288 248558 338000) 0 nil])
([nil nil ((1934 . 1939)) nil (26048 29288 248555 896000) 0 nil])
([nil nil ((1968 . 1977)) nil (26048 29288 248555 286000) 0 nil])
([nil nil ((1978 . 1981)) nil (26048 29288 248554 469000) 0 nil])
([nil nil ((1979 . 1988) (#("st" 0 2 (fontified nil)) . 1979) (1979 . 1981) (#("structure" 0 9 (fontified nil)) . -1979) (1979 . 1988) (#("st" 0 2 (fontified t)) . -1979) (undo-tree-id2428 . -1) (undo-tree-id2429 . -2) (undo-tree-id2430 . -1) (undo-tree-id2431 . -1) (undo-tree-id2432 . -1) (undo-tree-id2433 . -1) (undo-tree-id2434 . -1) (undo-tree-id2435 . -1) (undo-tree-id2436 . -1) (undo-tree-id2437 . -1) (undo-tree-id2438 . -1) (undo-tree-id2439 . -2) (undo-tree-id2440 . -2) (undo-tree-id2441 . -2) (undo-tree-id2442 . -2) (undo-tree-id2443 . -2) 1981) nil (26048 29288 248552 796000) 0 nil])
([nil nil ((1988 . 1990)) nil (26048 29288 248540 127000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -1989) (undo-tree-id2420 . -1) (undo-tree-id2421 . -1) (undo-tree-id2422 . -1) (undo-tree-id2423 . -1) (undo-tree-id2424 . -1) (undo-tree-id2425 . -1) (undo-tree-id2426 . -1) (undo-tree-id2427 . -1) 1990) nil (26048 29288 248539 71000) 0 nil])
([nil nil ((1989 . 1991)) nil (26048 29288 248532 840000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -1990) (undo-tree-id2415 . -1) (undo-tree-id2416 . -1) (undo-tree-id2417 . -1) (undo-tree-id2418 . -1) (undo-tree-id2419 . -1) 1991) nil (26048 29288 248531 703000) 0 nil])
([nil nil ((1990 . 1991)) nil (26048 29288 248527 393000) 0 nil])
([nil nil ((apply yas--snippet-revive 1989 1995 #s(yas--snippet nil nil #s(yas--exit 1995 nil) 28 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1995 nil) 28 nil nil nil nil)) (1989 . 1995) (#("name()$0" 0 8 (fontified nil)) . 1989) (1989 . 1997) (#("na" 0 2 (fontified nil)) . 1989) (1989 . 1991) (#("name() (alias get_name, gst_structure_get_name)" 0 47 (fontified nil)) . -1989) (1989 . 2036) (#("na" 0 2 (fontified t)) . -1989) (undo-tree-id2401 . -2) (undo-tree-id2402 . -2) (undo-tree-id2403 . -1) (undo-tree-id2404 . -1) (undo-tree-id2405 . -1) (undo-tree-id2406 . -1) (undo-tree-id2407 . -1) (undo-tree-id2408 . -2) (undo-tree-id2409 . -2) (undo-tree-id2410 . -2) (undo-tree-id2411 . -2) (undo-tree-id2412 . -2) (undo-tree-id2413 . -2) (undo-tree-id2414 . -2) 1991) nil (26048 29288 248524 113000) 0 nil])
([nil nil ((1996 . 1997)) nil (26048 29288 248502 383000) 0 nil])
([nil nil ((1899 . 1902) (t 26048 29288 263492 248000)) nil (26048 29447 917754 113000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -1900) (undo-tree-id2574 . -1) (#("o" 0 1 (fontified t)) . -1901) (undo-tree-id2575 . -1) 1902) nil (26048 29447 917753 144000) 0 nil])
([nil nil ((1900 . 1902)) nil (26048 29447 917750 984000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1899) (undo-tree-id2571 . -1) (#("a" 0 1 (fontified t)) . -1900) (undo-tree-id2572 . -1) (#("s" 0 1 (face font-lock-keyword-face fontified t)) . -1901) (undo-tree-id2573 . -1) 1902) nil (26048 29447 917749 930000) 0 nil])
([nil nil ((#("zbar\"" 0 5 (face font-lock-string-face fontified t)) . -1909) (undo-tree-id2570 . -5) 1914) nil (26048 29447 917746 875000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -1908) (undo-tree-id2569 . -1) 1909) nil (26048 29447 917745 406000) 0 nil])
([nil nil ((1908 . 1914)) nil (26048 29447 917744 86000) 0 nil])
([nil nil ((#("::prelude" 0 2 (fontified t) 2 9 (face font-lock-constant-face fontified t)) . -33) 42 (44 . 54) (45 . 60) (1908 . 1908) (1908 . 1914) (#("Object" 0 6 (fontified nil)) . 1908) (1908 . 1914) (#("Object (use gstreamer::glib::Object)" 0 36 (fontified nil)) . -1908) (1908 . 1944) (#("Object" 0 6 (face font-lock-type-face fontified t)) . -1908) (undo-tree-id2568 . -6) 1914) nil (26048 29447 917742 765000) 0 nil])
([nil nil ((1930 . 1935)) nil (26048 29447 917740 9000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -1932) (undo-tree-id2562 . -1) (undo-tree-id2563 . -1) (#("e" 0 1 (fontified t)) . -1933) (undo-tree-id2564 . -1) (undo-tree-id2565 . -1) (#("w" 0 1 (fontified t)) . -1934) (undo-tree-id2566 . -1) (undo-tree-id2567 . -1) 1935) nil (26048 29447 917738 831000) 0 nil])
([nil nil ((1932 . 1935)) nil (26048 29447 917733 893000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -1932) (undo-tree-id2556 . -1) (undo-tree-id2557 . -1) (#("e" 0 1 (fontified t)) . -1933) (undo-tree-id2558 . -1) (undo-tree-id2559 . -1) (#("w" 0 1 (fontified t)) . -1934) (undo-tree-id2560 . -1) (undo-tree-id2561 . -1) 1935) nil (26048 29447 917732 748000) 0 nil])
([nil nil ((1932 . 1936)) nil (26048 29447 917726 761000) 0 nil])
([nil nil ((#("from" 0 4 (fontified t)) . -1932) (undo-tree-id2554 . -4) (undo-tree-id2555 . -4) 1936) nil (26048 29447 917725 886000) 0 nil])
([nil nil ((#("Object::" 0 6 (face font-lock-type-face fontified t) 6 8 (fontified t)) . -1924) (undo-tree-id2552 . -8) (undo-tree-id2553 . -8) 1932) nil (26048 29447 917723 694000) 0 nil])
([nil nil ((#("Some()" 0 4 (face font-lock-type-face fontified t) 4 5 (face (rainbow-delimiters-depth-3-face) fontified t) 5 6 (face (rainbow-delimiters-depth-3-face) fontified t)) . -1919) (undo-tree-id2550 . -5) (undo-tree-id2551 . -6) 1925) nil (26048 29447 917721 569000) 0 nil])
([nil nil ((1919 . 1920)) nil (26048 29447 917719 602000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -1919) (undo-tree-id2549 . -1) 1920) nil (26048 29447 917718 854000) 0 nil])
([nil nil ((1919 . 1920)) nil (26048 29447 917717 540000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1924 1926 nil nil nil nil #s(yas--exit 1927 nil))) #s(yas--exit 1927 nil) 29 nil #s(yas--field 1 1924 1926 nil nil nil nil #s(yas--exit 1927 nil)) nil nil)) (1919 . 1927) (#("Some(${1:()})$0" 0 15 (fontified nil)) . 1919) (1919 . 1934) (#("S" 0 1 (fontified nil)) . 1919) (1919 . 1920) (#("Some(…)" 0 7 (fontified nil)) . -1919) (1919 . 1926) (#("S" 0 1 (face font-lock-type-face fontified t)) . -1919) (undo-tree-id2548 . -1) 1920) nil (26048 29447 917716 346000) 0 nil])
([nil nil ((apply yas--snippet-revive 1919 1927 #s(yas--snippet nil (#s(yas--field 1 1924 1926 nil nil nil nil #s(yas--exit 1927 nil))) #s(yas--exit 1927 nil) 29 nil #s(yas--field 1 1924 1926 nil nil nil nil #s(yas--exit 1927 nil)) nil nil))) nil (26048 29447 917713 972000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -1924) (undo-tree-id2544 . -1) (undo-tree-id2545 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -1925) (undo-tree-id2546 . -1) (undo-tree-id2547 . -1) 1926) nil (26048 29447 917712 928000) 0 nil])
([nil nil ((1924 . 1926)) nil (26048 29447 917709 490000) 0 nil])
([nil nil ((#("S" 0 1 (face font-lock-type-face fontified t)) . -1925) (undo-tree-id2543 . -1) 1926) nil (26048 29447 917708 803000) 0 nil])
([nil nil ((#("G" 0 1 (face font-lock-type-face fontified t)) . -1924) (undo-tree-id2542 . -1) 1925) nil (26048 29447 917707 95000) 0 nil])
([nil nil ((1924 . 1925)) nil (26048 29447 917705 661000) 0 nil])
([nil nil ((1924 . 1933) (#("g" 0 1 (fontified nil)) . 1924) (1924 . 1925) (#("gstreamer" 0 9 (fontified nil)) . -1924) (1924 . 1933) (#("g" 0 1 (fontified t)) . -1924) (undo-tree-id2541 . -1) 1925) nil (26048 29447 917704 755000) 0 nil])
([nil nil ((1933 . 1935)) nil (26048 29447 917702 759000) 0 nil])
([nil nil ((1935 . 1936)) nil (26048 29447 917702 118000) 0 nil])
([nil nil ((1935 . 1939) (#("g" 0 1 (fontified nil)) . 1935) (1935 . 1936) (#("glib" 0 4 (fontified nil)) . -1935) (1935 . 1939) (#("g" 0 1 (fontified t)) . -1935) (undo-tree-id2540 . -1) 1936) nil (26048 29447 917701 149000) 0 nil])
([nil nil ((1939 . 1944)) nil (26048 29447 917698 898000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -1941) (undo-tree-id2537 . -1) (#("_" 0 1 (fontified t)) . -1942) (undo-tree-id2538 . -1) (#("t" 0 1 (fontified t)) . -1943) (undo-tree-id2539 . -1) 1944) nil (26048 29447 917697 712000) 0 nil])
([nil nil ((1941 . 1944)) nil (26048 29447 917694 948000) 0 nil])
([nil nil ((#("O" 0 1 (face font-lock-type-face fontified t)) . -1941) (undo-tree-id2534 . -1) (#("b" 0 1 (face font-lock-type-face fontified t)) . -1942) (undo-tree-id2535 . -1) (#("j" 0 1 (face font-lock-type-face fontified t)) . -1943) (undo-tree-id2536 . -1) 1944) nil (26048 29447 917693 986000) 0 nil])
([nil nil ((1941 . 1943)) nil (26048 29447 917691 114000) 0 nil])
([nil nil ((#("G" 0 1 (face font-lock-type-face fontified t)) . -1941) (undo-tree-id2532 . -1) (#("O" 0 1 (face font-lock-type-face fontified t)) . -1942) (undo-tree-id2533 . -1) 1943) nil (26048 29447 917690 113000) 0 nil])
([nil nil ((1941 . 1943)) nil (26048 29447 917687 888000) 0 nil])
([nil nil ((#("I" 0 1 (face font-lock-type-face fontified t)) . -1942) (undo-tree-id2528 . -1) (undo-tree-id2529 . -1) (undo-tree-id2530 . -1) (undo-tree-id2531 . -1) 1943) nil (26048 29447 917687 92000) 0 nil])
([nil nil ((1942 . 1943)) nil (26048 29447 917683 829000) 0 nil])
([nil nil ((1941 . 1947) (#("Ob" 0 2 (fontified nil)) . 1941) (1941 . 1943) (#("Object" 0 6 (fontified nil)) . -1941) (1941 . 1947) (#("Ob" 0 2 (face font-lock-type-face fontified t)) . -1941) (undo-tree-id2516 . -2) (undo-tree-id2517 . -1) (undo-tree-id2518 . -1) (undo-tree-id2519 . -1) (undo-tree-id2520 . -1) (undo-tree-id2521 . -1) (undo-tree-id2522 . -1) (undo-tree-id2523 . -1) (undo-tree-id2524 . -2) (undo-tree-id2525 . -2) (undo-tree-id2526 . -2) (undo-tree-id2527 . -2) 1943) nil (26048 29447 917682 276000) 0 nil])
([nil nil ((#("Object" 0 6 (face font-lock-type-face fontified t)) . -54) (undo-tree-id2508 . -6) (undo-tree-id2509 . -6) (undo-tree-id2510 . -6) (undo-tree-id2511 . -6) (undo-tree-id2512 . -6) (undo-tree-id2513 . -6) (undo-tree-id2514 . -6) (undo-tree-id2515 . -6) 60) nil (26048 29447 917672 887000) 0 nil])
([nil nil ((#("glib::" 0 4 (face font-lock-constant-face fontified t) 4 6 (fontified t)) . -48) (undo-tree-id2498 . -6) (undo-tree-id2499 . -6) (undo-tree-id2500 . -6) (undo-tree-id2501 . -6) (undo-tree-id2502 . -6) (undo-tree-id2503 . -6) (undo-tree-id2504 . -6) (undo-tree-id2505 . -6) (undo-tree-id2506 . -6) (undo-tree-id2507 . -6) 54) nil (26048 29447 917666 844000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -47) (undo-tree-id2486 . -1) (undo-tree-id2487 . -1) (undo-tree-id2488 . -1) (undo-tree-id2489 . -1) (undo-tree-id2490 . -1) (undo-tree-id2491 . -1) (undo-tree-id2492 . -1) (undo-tree-id2493 . -1) (undo-tree-id2494 . -1) (undo-tree-id2495 . -1) (undo-tree-id2496 . -1) (undo-tree-id2497 . -1) 48) nil (26048 29447 917659 288000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -46) (undo-tree-id2472 . -1) (undo-tree-id2473 . -1) (undo-tree-id2474 . -1) (undo-tree-id2475 . -1) (undo-tree-id2476 . -1) (undo-tree-id2477 . -1) (undo-tree-id2478 . -1) (undo-tree-id2479 . -1) (undo-tree-id2480 . -1) (undo-tree-id2481 . -1) (undo-tree-id2482 . -1) (undo-tree-id2483 . -1) (undo-tree-id2484 . -1) (undo-tree-id2485 . -1) 47) nil (26048 29447 917650 210000) 0 nil])
([nil nil ((#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -46) (undo-tree-id2468 . -1) (undo-tree-id2469 . -1) (undo-tree-id2470 . -1) (undo-tree-id2471 . -1) 47) nil (26048 29447 917638 426000) 0 nil])
([nil nil ((#("{" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -35) (undo-tree-id2464 . -1) (undo-tree-id2465 . -1) (undo-tree-id2466 . -1) (undo-tree-id2467 . -1) 36) nil (26048 29447 917630 838000) 0 nil])
([nil nil ((1931 . 1933) (t 26048 29447 933501 928000)) nil (26048 29487 479673 852000) 0 nil])
([nil nil ((#("Object::" 0 6 (face font-lock-type-face fontified t) 6 8 (fontified t)) . -1925) (undo-tree-id2972 . -8) (undo-tree-id2973 . -8) (undo-tree-id2974 . -6) (undo-tree-id2975 . -6) (undo-tree-id2976 . -6) (undo-tree-id2977 . -6) (undo-tree-id2978 . -6) (undo-tree-id2979 . -6) (undo-tree-id2980 . -6) (undo-tree-id2981 . -6) (undo-tree-id2982 . -6) (undo-tree-id2983 . -6) (undo-tree-id2984 . -6) (undo-tree-id2985 . -6) (undo-tree-id2986 . -6) (undo-tree-id2987 . -6) (undo-tree-id2988 . -6) (undo-tree-id2989 . -6) (undo-tree-id2990 . -6) (undo-tree-id2991 . -7) (undo-tree-id2992 . -7) (undo-tree-id2993 . -8) (undo-tree-id2994 . -8) (undo-tree-id2995 . -8) (undo-tree-id2996 . -8) (undo-tree-id2997 . -8) (undo-tree-id2998 . -8) (undo-tree-id2999 . -8) (undo-tree-id3000 . -8) (undo-tree-id3001 . -8) (undo-tree-id3002 . -8) 1933) nil (26048 29487 479672 222000) 0 nil])
([nil nil ((#("glib::)" 0 4 (face font-lock-constant-face fontified t) 4 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-3-face) fontified t)) . -1919) (undo-tree-id2923 . -6) (undo-tree-id2924 . -7) (undo-tree-id2925 . -6) (undo-tree-id2926 . -6) (undo-tree-id2927 . -6) (undo-tree-id2928 . -6) (undo-tree-id2929 . -6) (undo-tree-id2930 . -6) (undo-tree-id2931 . -6) (undo-tree-id2932 . -6) (undo-tree-id2933 . -6) (undo-tree-id2934 . -6) (undo-tree-id2935 . -6) (undo-tree-id2936 . -6) (undo-tree-id2937 . -6) (undo-tree-id2938 . -6) (undo-tree-id2939 . -6) (undo-tree-id2940 . -6) (undo-tree-id2941 . -6) (undo-tree-id2942 . -6) (undo-tree-id2943 . -6) (undo-tree-id2944 . -6) (undo-tree-id2945 . -6) (undo-tree-id2946 . -6) (undo-tree-id2947 . -6) (undo-tree-id2948 . -6) (undo-tree-id2949 . -6) (undo-tree-id2950 . -6) (undo-tree-id2951 . -6) (undo-tree-id2952 . -6) (undo-tree-id2953 . -6) (undo-tree-id2954 . -6) (undo-tree-id2955 . -6) (undo-tree-id2956 . -6) (undo-tree-id2957 . 1) (undo-tree-id2958 . -6) (undo-tree-id2959 . -6) (undo-tree-id2960 . -6) (undo-tree-id2961 . -6) (undo-tree-id2962 . -6) (undo-tree-id2963 . -6) (undo-tree-id2964 . -6) (undo-tree-id2965 . -6) (undo-tree-id2966 . -6) (undo-tree-id2967 . -6) (undo-tree-id2968 . -6) (undo-tree-id2969 . -7) (undo-tree-id2970 . -7) (undo-tree-id2971 . -7) 1926) nil (26048 29487 479654 634000) 0 nil])
([nil nil ((#("gstreamer::" 0 9 (face font-lock-constant-face fontified t) 9 11 (fontified t)) . -1908) (undo-tree-id2873 . -11) (undo-tree-id2874 . -11) (undo-tree-id2875 . -11) (undo-tree-id2876 . -11) (undo-tree-id2877 . -11) (undo-tree-id2878 . -11) (undo-tree-id2879 . -11) (undo-tree-id2880 . -11) (undo-tree-id2881 . -11) (undo-tree-id2882 . -11) (undo-tree-id2883 . -11) (undo-tree-id2884 . -11) (undo-tree-id2885 . -11) (undo-tree-id2886 . -11) (undo-tree-id2887 . -11) (undo-tree-id2888 . -11) (undo-tree-id2889 . -11) (undo-tree-id2890 . -11) (undo-tree-id2891 . -11) (undo-tree-id2892 . -11) (undo-tree-id2893 . -11) (undo-tree-id2894 . -11) (undo-tree-id2895 . -11) (undo-tree-id2896 . -11) (undo-tree-id2897 . -11) (undo-tree-id2898 . -11) (undo-tree-id2899 . -11) (undo-tree-id2900 . -11) (undo-tree-id2901 . -11) (undo-tree-id2902 . -11) (undo-tree-id2903 . -11) (undo-tree-id2904 . -11) (undo-tree-id2905 . -11) (undo-tree-id2906 . -11) (undo-tree-id2907 . -11) (undo-tree-id2908 . -11) (undo-tree-id2909 . -11) (undo-tree-id2910 . -11) (undo-tree-id2911 . -11) (undo-tree-id2912 . -11) (undo-tree-id2913 . -11) (undo-tree-id2914 . -11) (undo-tree-id2915 . -11) (undo-tree-id2916 . -11) (undo-tree-id2917 . -11) (undo-tree-id2918 . -11) (undo-tree-id2919 . -11) (undo-tree-id2920 . -11) (undo-tree-id2921 . -11) (undo-tree-id2922 . -11) 1919) nil (26048 29487 479627 579000) 0 nil])
([nil nil ((#("Some(" 0 4 (face font-lock-type-face fontified t) 4 5 (face (rainbow-delimiters-depth-3-face) fontified t)) . -1903) (undo-tree-id2820 . -5) (undo-tree-id2821 . -5) (undo-tree-id2822 . -5) (undo-tree-id2823 . -5) (undo-tree-id2824 . -5) (undo-tree-id2825 . -5) (undo-tree-id2826 . -5) (undo-tree-id2827 . -5) (undo-tree-id2828 . -5) (undo-tree-id2829 . -5) (undo-tree-id2830 . -5) (undo-tree-id2831 . -5) (undo-tree-id2832 . -5) (undo-tree-id2833 . -5) (undo-tree-id2834 . -5) (undo-tree-id2835 . -5) (undo-tree-id2836 . -5) (undo-tree-id2837 . -5) (undo-tree-id2838 . -5) (undo-tree-id2839 . -5) (undo-tree-id2840 . -5) (undo-tree-id2841 . -5) (undo-tree-id2842 . -5) (undo-tree-id2843 . -5) (undo-tree-id2844 . -5) (undo-tree-id2845 . -5) (undo-tree-id2846 . -5) (undo-tree-id2847 . -5) (undo-tree-id2848 . -5) (undo-tree-id2849 . -5) (undo-tree-id2850 . -5) (undo-tree-id2851 . -5) (undo-tree-id2852 . -5) (undo-tree-id2853 . -5) (undo-tree-id2854 . -5) (undo-tree-id2855 . -5) (undo-tree-id2856 . -5) (undo-tree-id2857 . -5) (undo-tree-id2858 . -5) (undo-tree-id2859 . -5) (undo-tree-id2860 . -5) (undo-tree-id2861 . -5) (undo-tree-id2862 . -5) (undo-tree-id2863 . -5) (undo-tree-id2864 . -5) (undo-tree-id2865 . -5) (undo-tree-id2866 . -5) (undo-tree-id2867 . -5) (undo-tree-id2868 . -5) (undo-tree-id2869 . -5) (undo-tree-id2870 . -5) (undo-tree-id2871 . -5) (undo-tree-id2872 . -5) 1908) nil (26048 29487 479176 745000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1899) (undo-tree-id2576 . -1) (undo-tree-id2577 . -1) (undo-tree-id2578 . -1) (undo-tree-id2579 . -1) (undo-tree-id2580 . -1) (undo-tree-id2581 . -1) (undo-tree-id2582 . -1) (undo-tree-id2583 . -1) (undo-tree-id2584 . -1) (undo-tree-id2585 . -1) (undo-tree-id2586 . -1) (undo-tree-id2587 . -1) (undo-tree-id2588 . -1) (undo-tree-id2589 . -1) (undo-tree-id2590 . -1) (undo-tree-id2591 . -1) (undo-tree-id2592 . -1) (undo-tree-id2593 . -1) (undo-tree-id2594 . -1) (undo-tree-id2595 . -1) (undo-tree-id2596 . -1) (undo-tree-id2597 . -1) (undo-tree-id2598 . -1) (undo-tree-id2599 . -1) (undo-tree-id2600 . -1) (undo-tree-id2601 . -1) (undo-tree-id2602 . -1) (undo-tree-id2603 . -1) (undo-tree-id2604 . -1) (undo-tree-id2605 . -1) (undo-tree-id2606 . -1) (undo-tree-id2607 . -1) (undo-tree-id2608 . -1) (undo-tree-id2609 . -1) (undo-tree-id2610 . -1) (undo-tree-id2611 . -1) (undo-tree-id2612 . -1) (undo-tree-id2613 . -1) (undo-tree-id2614 . -1) (undo-tree-id2615 . -1) (undo-tree-id2616 . -1) (undo-tree-id2617 . -1) (undo-tree-id2618 . -1) (undo-tree-id2619 . -1) (undo-tree-id2620 . -1) (undo-tree-id2621 . -1) (undo-tree-id2622 . -1) (undo-tree-id2623 . -1) (undo-tree-id2624 . -1) (undo-tree-id2625 . -1) (undo-tree-id2626 . -1) (undo-tree-id2627 . -1) (undo-tree-id2628 . -1) (undo-tree-id2629 . -1) (undo-tree-id2630 . -1) (undo-tree-id2631 . -1) (undo-tree-id2632 . -1) (undo-tree-id2633 . -1) (undo-tree-id2634 . -1) (undo-tree-id2635 . -1) (undo-tree-id2636 . -1) (undo-tree-id2637 . -1) (undo-tree-id2638 . -1) (undo-tree-id2639 . -1) (#("=" 0 1 (fontified t)) . -1900) (undo-tree-id2640 . -1) (undo-tree-id2641 . -1) (undo-tree-id2642 . -1) (undo-tree-id2643 . -1) (undo-tree-id2644 . -1) (undo-tree-id2645 . -1) (undo-tree-id2646 . -1) (undo-tree-id2647 . -1) (undo-tree-id2648 . -1) (undo-tree-id2649 . -1) (undo-tree-id2650 . -1) (undo-tree-id2651 . -1) (undo-tree-id2652 . -1) (undo-tree-id2653 . -1) (undo-tree-id2654 . -1) (undo-tree-id2655 . -1) (undo-tree-id2656 . -1) (undo-tree-id2657 . -1) (undo-tree-id2658 . -1) (undo-tree-id2659 . -1) (undo-tree-id2660 . -1) (undo-tree-id2661 . -1) (undo-tree-id2662 . -1) (undo-tree-id2663 . -1) (undo-tree-id2664 . -1) (undo-tree-id2665 . -1) (undo-tree-id2666 . -1) (undo-tree-id2667 . -1) (undo-tree-id2668 . -1) (undo-tree-id2669 . -1) (undo-tree-id2670 . -1) (undo-tree-id2671 . -1) (undo-tree-id2672 . -1) (undo-tree-id2673 . -1) (undo-tree-id2674 . -1) (undo-tree-id2675 . -1) (undo-tree-id2676 . -1) (undo-tree-id2677 . -1) (undo-tree-id2678 . -1) (undo-tree-id2679 . -1) (undo-tree-id2680 . -1) (undo-tree-id2681 . -1) (undo-tree-id2682 . -1) (undo-tree-id2683 . -1) (undo-tree-id2684 . -1) (undo-tree-id2685 . -1) (undo-tree-id2686 . -1) (undo-tree-id2687 . -1) (undo-tree-id2688 . -1) (undo-tree-id2689 . -1) (undo-tree-id2690 . -1) (undo-tree-id2691 . -1) (undo-tree-id2692 . -1) (undo-tree-id2693 . -1) (undo-tree-id2694 . -1) (undo-tree-id2695 . -1) (undo-tree-id2696 . -1) (undo-tree-id2697 . -1) (undo-tree-id2698 . -1) (undo-tree-id2699 . -1) (undo-tree-id2700 . -1) (undo-tree-id2701 . -1) (#("=" 0 1 (fontified t)) . -1901) (undo-tree-id2702 . -1) (undo-tree-id2703 . -1) (undo-tree-id2704 . -1) (undo-tree-id2705 . -1) (undo-tree-id2706 . -1) (undo-tree-id2707 . -1) (undo-tree-id2708 . -1) (undo-tree-id2709 . -1) (undo-tree-id2710 . -1) (undo-tree-id2711 . -1) (undo-tree-id2712 . -1) (undo-tree-id2713 . -1) (undo-tree-id2714 . -1) (undo-tree-id2715 . -1) (undo-tree-id2716 . -1) (undo-tree-id2717 . -1) (undo-tree-id2718 . -1) (undo-tree-id2719 . -1) (undo-tree-id2720 . -1) (undo-tree-id2721 . -1) (undo-tree-id2722 . -1) (undo-tree-id2723 . -1) (undo-tree-id2724 . -1) (undo-tree-id2725 . -1) (undo-tree-id2726 . -1) (undo-tree-id2727 . -1) (undo-tree-id2728 . -1) (undo-tree-id2729 . -1) (undo-tree-id2730 . -1) (undo-tree-id2731 . -1) (undo-tree-id2732 . -1) (undo-tree-id2733 . -1) (undo-tree-id2734 . -1) (undo-tree-id2735 . -1) (undo-tree-id2736 . -1) (undo-tree-id2737 . -1) (undo-tree-id2738 . -1) (undo-tree-id2739 . -1) (undo-tree-id2740 . -1) (undo-tree-id2741 . -1) (undo-tree-id2742 . -1) (undo-tree-id2743 . -1) (undo-tree-id2744 . -1) (undo-tree-id2745 . -1) (undo-tree-id2746 . -1) (undo-tree-id2747 . -1) (undo-tree-id2748 . -1) (undo-tree-id2749 . -1) (undo-tree-id2750 . -1) (undo-tree-id2751 . -1) (undo-tree-id2752 . -1) (undo-tree-id2753 . -1) (undo-tree-id2754 . -1) (undo-tree-id2755 . -1) (undo-tree-id2756 . -1) (undo-tree-id2757 . -1) (undo-tree-id2758 . -1) (undo-tree-id2759 . -1) (undo-tree-id2760 . -1) (undo-tree-id2761 . -1) (#(" " 0 1 (fontified t)) . -1902) (undo-tree-id2762 . -1) (undo-tree-id2763 . -1) (undo-tree-id2764 . -1) (undo-tree-id2765 . -1) (undo-tree-id2766 . -1) (undo-tree-id2767 . -1) (undo-tree-id2768 . -1) (undo-tree-id2769 . -1) (undo-tree-id2770 . -1) (undo-tree-id2771 . -1) (undo-tree-id2772 . -1) (undo-tree-id2773 . -1) (undo-tree-id2774 . -1) (undo-tree-id2775 . -1) (undo-tree-id2776 . -1) (undo-tree-id2777 . -1) (undo-tree-id2778 . -1) (undo-tree-id2779 . -1) (undo-tree-id2780 . -1) (undo-tree-id2781 . -1) (undo-tree-id2782 . -1) (undo-tree-id2783 . -1) (undo-tree-id2784 . -1) (undo-tree-id2785 . -1) (undo-tree-id2786 . -1) (undo-tree-id2787 . -1) (undo-tree-id2788 . -1) (undo-tree-id2789 . -1) (undo-tree-id2790 . -1) (undo-tree-id2791 . -1) (undo-tree-id2792 . -1) (undo-tree-id2793 . -1) (undo-tree-id2794 . -1) (undo-tree-id2795 . -1) (undo-tree-id2796 . -1) (undo-tree-id2797 . -1) (undo-tree-id2798 . -1) (undo-tree-id2799 . -1) (undo-tree-id2800 . -1) (undo-tree-id2801 . -1) (undo-tree-id2802 . -1) (undo-tree-id2803 . -1) (undo-tree-id2804 . -1) (undo-tree-id2805 . -1) (undo-tree-id2806 . -1) (undo-tree-id2807 . -1) (undo-tree-id2808 . -1) (undo-tree-id2809 . -1) (undo-tree-id2810 . -1) (undo-tree-id2811 . -1) (undo-tree-id2812 . -1) (undo-tree-id2813 . -1) (undo-tree-id2814 . -1) (undo-tree-id2815 . -1) (undo-tree-id2816 . -1) (undo-tree-id2817 . -1) (undo-tree-id2818 . -1) (undo-tree-id2819 . -1) 1903) nil (26048 29487 479852 324000) 0 nil])
([nil nil ((1899 . 1901)) nil (26048 29612 687456 999000) 0 nil] [nil nil ((1899 . 1900)) ((#("." 0 1 (fontified t)) . 1899) (undo-tree-id3003 . -1)) (26048 29487 478642 11000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1904 1904 nil nil nil t #s(yas--exit 1905 nil))) #s(yas--exit 1905 nil) 30 nil #s(yas--field 1 1904 1904 nil nil nil t #s(yas--exit 1905 nil)) nil nil)) (1900 . 1906) (#("map(${1:f})$0" 0 13 (fontified nil)) . 1900) (1900 . 1913) (#("m" 0 1 (fontified nil)) . 1900) (1900 . 1901) (#("map(…)" 0 6 (fontified nil)) . -1900) (1900 . 1906) (#("m" 0 1 (fontified t)) . -1900) (undo-tree-id3874 . -1) (undo-tree-id3875 . -1) (undo-tree-id3876 . -1) (undo-tree-id3877 . -1) (undo-tree-id3878 . -1) (undo-tree-id3879 . -1) 1901) nil (26048 29612 687455 641000) 0 nil])
nil
([nil nil ((#("f" 0 1 (fontified t)) . -1904) (undo-tree-id3870 . -1) (undo-tree-id3871 . -1) (undo-tree-id3872 . -1) (undo-tree-id3873 . -1) 1905) nil (26048 29612 687450 258000) 0 nil])
([nil nil ((apply yas--snippet-revive 1900 1905 #s(yas--snippet nil (#s(yas--field 1 1904 1904 nil nil nil t #s(yas--exit 1905 nil))) #s(yas--exit 1905 nil) 30 nil #s(yas--field 1 1904 1904 nil nil nil t #s(yas--exit 1905 nil)) nil nil))) nil (26048 29612 687447 222000) 0 nil])
([nil nil ((#("map()" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-3-face) fontified t) 4 5 (face (rainbow-delimiters-depth-3-face) fontified t)) . -1900) (undo-tree-id3841 . -5) (undo-tree-id3842 . -5) (undo-tree-id3843 . -5) (undo-tree-id3844 . -5) (undo-tree-id3845 . -4) (undo-tree-id3846 . -4) (undo-tree-id3847 . -4) (undo-tree-id3848 . -4) (undo-tree-id3849 . -4) (undo-tree-id3850 . -4) (undo-tree-id3851 . -4) (undo-tree-id3852 . -4) (undo-tree-id3853 . -4) (undo-tree-id3854 . -4) (undo-tree-id3855 . -4) (undo-tree-id3856 . -4) (undo-tree-id3857 . -4) (undo-tree-id3858 . -4) (undo-tree-id3859 . -4) (undo-tree-id3860 . -4) (undo-tree-id3861 . -4) (undo-tree-id3862 . -4) (undo-tree-id3863 . -4) (undo-tree-id3864 . -4) (undo-tree-id3865 . -5) (undo-tree-id3866 . -5) (undo-tree-id3867 . -5) (undo-tree-id3868 . -5) (undo-tree-id3869 . -5) 1905) nil (26048 29612 687445 480000) 0 nil])
([nil nil ((1900 . 1901)) nil (26048 29612 687427 312000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -1900) (undo-tree-id3837 . -1) (undo-tree-id3838 . -1) (undo-tree-id3839 . -1) (undo-tree-id3840 . -1) 1901) nil (26048 29612 687426 420000) 0 nil])
([nil nil ((1900 . 1902)) nil (26048 29612 687423 267000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -1900) (undo-tree-id3822 . -1) (undo-tree-id3823 . -1) (undo-tree-id3824 . -1) (undo-tree-id3825 . -1) (undo-tree-id3826 . -1) (undo-tree-id3827 . -1) (undo-tree-id3828 . -1) (undo-tree-id3829 . -1) (undo-tree-id3830 . -1) (undo-tree-id3831 . -1) (#("a" 0 1 (fontified t)) . -1901) (undo-tree-id3832 . -1) (undo-tree-id3833 . -1) (undo-tree-id3834 . -1) (undo-tree-id3835 . -1) (undo-tree-id3836 . -1) 1902) nil (26048 29612 687421 950000) 0 nil])
([nil nil ((1900 . 1903)) nil (26048 29612 687412 100000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -1900) (undo-tree-id3793 . -1) (undo-tree-id3794 . -1) (undo-tree-id3795 . -1) (undo-tree-id3796 . -1) (undo-tree-id3797 . -1) (undo-tree-id3798 . -1) (undo-tree-id3799 . -1) (undo-tree-id3800 . -1) (undo-tree-id3801 . -1) (undo-tree-id3802 . -1) (undo-tree-id3803 . -1) (undo-tree-id3804 . -1) (undo-tree-id3805 . -1) (undo-tree-id3806 . -1) (#("t" 0 1 (fontified t)) . -1901) (undo-tree-id3807 . -1) (undo-tree-id3808 . -1) (undo-tree-id3809 . -1) (undo-tree-id3810 . -1) (undo-tree-id3811 . -1) (undo-tree-id3812 . -1) (undo-tree-id3813 . -1) (undo-tree-id3814 . -1) (undo-tree-id3815 . -1) (undo-tree-id3816 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1902) (undo-tree-id3817 . -1) (undo-tree-id3818 . -1) (undo-tree-id3819 . -1) (undo-tree-id3820 . -1) (undo-tree-id3821 . -1) 1903) nil (26048 29612 687410 26000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1899) (undo-tree-id3705 . -1) (undo-tree-id3706 . -1) (undo-tree-id3707 . -1) (undo-tree-id3708 . -1) (undo-tree-id3709 . -1) (undo-tree-id3710 . -1) (undo-tree-id3711 . -1) (undo-tree-id3712 . -1) (undo-tree-id3713 . -1) (undo-tree-id3714 . -1) (undo-tree-id3715 . -1) (undo-tree-id3716 . -1) (undo-tree-id3717 . -1) (undo-tree-id3718 . -1) (undo-tree-id3719 . -1) (undo-tree-id3720 . -1) (undo-tree-id3721 . -1) (undo-tree-id3722 . -1) (undo-tree-id3723 . -1) (undo-tree-id3724 . -1) (undo-tree-id3725 . -1) (undo-tree-id3726 . -1) (undo-tree-id3727 . -1) (undo-tree-id3728 . -1) (undo-tree-id3729 . -1) (undo-tree-id3730 . -1) (undo-tree-id3731 . -1) (undo-tree-id3732 . -1) (undo-tree-id3733 . -1) (undo-tree-id3734 . -1) (undo-tree-id3735 . -1) (undo-tree-id3736 . -1) (undo-tree-id3737 . -1) (undo-tree-id3738 . -1) (undo-tree-id3739 . -1) (undo-tree-id3740 . -1) (undo-tree-id3741 . -1) (undo-tree-id3742 . -1) (undo-tree-id3743 . -1) (undo-tree-id3744 . -1) (undo-tree-id3745 . -1) (undo-tree-id3746 . -1) (undo-tree-id3747 . -1) (undo-tree-id3748 . -1) (undo-tree-id3749 . -1) (undo-tree-id3750 . -1) (undo-tree-id3751 . -1) (undo-tree-id3752 . -1) (undo-tree-id3753 . -1) (undo-tree-id3754 . -1) (undo-tree-id3755 . -1) (undo-tree-id3756 . -1) (undo-tree-id3757 . -1) (undo-tree-id3758 . -1) (undo-tree-id3759 . -1) (undo-tree-id3760 . -1) (undo-tree-id3761 . -1) (undo-tree-id3762 . -1) (undo-tree-id3763 . -1) (undo-tree-id3764 . -1) (undo-tree-id3765 . -1) (undo-tree-id3766 . -1) (undo-tree-id3767 . -1) (undo-tree-id3768 . -1) (undo-tree-id3769 . -1) (undo-tree-id3770 . -1) (undo-tree-id3771 . -1) (undo-tree-id3772 . -1) (undo-tree-id3773 . -1) (undo-tree-id3774 . -1) (undo-tree-id3775 . -1) (undo-tree-id3776 . -1) (undo-tree-id3777 . -1) (undo-tree-id3778 . -1) (undo-tree-id3779 . -1) (undo-tree-id3780 . -1) (undo-tree-id3781 . -1) (undo-tree-id3782 . -1) (undo-tree-id3783 . -1) (undo-tree-id3784 . -1) (undo-tree-id3785 . -1) (undo-tree-id3786 . -1) (undo-tree-id3787 . -1) (undo-tree-id3788 . -1) (undo-tree-id3789 . -1) (undo-tree-id3790 . -1) (undo-tree-id3791 . -1) (undo-tree-id3792 . -1) 1900) nil (26048 29612 687358 25000) 0 nil])
([nil nil ((#("src()" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-3-face) fontified t) 4 5 (face (rainbow-delimiters-depth-3-face) fontified t)) . -1894) (undo-tree-id3493 . -1) (undo-tree-id3494 . -1) (undo-tree-id3495 . -5) (undo-tree-id3496 . -5) (undo-tree-id3497 . -5) (undo-tree-id3498 . -5) (undo-tree-id3499 . -5) (undo-tree-id3500 . -5) (undo-tree-id3501 . -5) (undo-tree-id3502 . -5) (undo-tree-id3503 . -5) (undo-tree-id3504 . -5) (undo-tree-id3505 . -5) (undo-tree-id3506 . -5) (undo-tree-id3507 . -5) (undo-tree-id3508 . -5) (undo-tree-id3509 . -5) (undo-tree-id3510 . -5) (undo-tree-id3511 . -5) (undo-tree-id3512 . -5) (undo-tree-id3513 . -5) (undo-tree-id3514 . -5) (undo-tree-id3515 . -5) (undo-tree-id3516 . -5) (undo-tree-id3517 . -5) (undo-tree-id3518 . -5) (undo-tree-id3519 . -5) (undo-tree-id3520 . -5) (undo-tree-id3521 . -5) (undo-tree-id3522 . -5) (undo-tree-id3523 . -5) (undo-tree-id3524 . -5) (undo-tree-id3525 . -5) (undo-tree-id3526 . -5) (undo-tree-id3527 . -5) (undo-tree-id3528 . -5) (undo-tree-id3529 . -5) (undo-tree-id3530 . -5) (undo-tree-id3531 . -5) (undo-tree-id3532 . -5) (undo-tree-id3533 . -5) (undo-tree-id3534 . -5) (undo-tree-id3535 . -5) (undo-tree-id3536 . -5) (undo-tree-id3537 . -5) (undo-tree-id3538 . -5) (undo-tree-id3539 . -5) (undo-tree-id3540 . -5) (undo-tree-id3541 . -5) (undo-tree-id3542 . -5) (undo-tree-id3543 . -5) (undo-tree-id3544 . -5) (undo-tree-id3545 . -5) (undo-tree-id3546 . -5) (undo-tree-id3547 . -5) (undo-tree-id3548 . -5) (undo-tree-id3549 . -5) (undo-tree-id3550 . -5) (undo-tree-id3551 . -5) (undo-tree-id3552 . -5) (undo-tree-id3553 . -5) (undo-tree-id3554 . -5) (undo-tree-id3555 . -5) (undo-tree-id3556 . -5) (undo-tree-id3557 . -5) (undo-tree-id3558 . -5) (undo-tree-id3559 . -5) (undo-tree-id3560 . -5) (undo-tree-id3561 . -5) (undo-tree-id3562 . -5) (undo-tree-id3563 . -5) (undo-tree-id3564 . -5) (undo-tree-id3565 . -5) (undo-tree-id3566 . -5) (undo-tree-id3567 . -5) (undo-tree-id3568 . -5) (undo-tree-id3569 . -5) (undo-tree-id3570 . -5) (undo-tree-id3571 . -5) (undo-tree-id3572 . -5) (undo-tree-id3573 . -5) (undo-tree-id3574 . -5) (undo-tree-id3575 . -5) (undo-tree-id3576 . -5) (undo-tree-id3577 . -5) (undo-tree-id3578 . -5) (undo-tree-id3579 . -5) (undo-tree-id3580 . -5) (undo-tree-id3581 . -5) (undo-tree-id3582 . -5) (undo-tree-id3583 . -5) (undo-tree-id3584 . -5) (undo-tree-id3585 . -5) (undo-tree-id3586 . -5) (undo-tree-id3587 . -5) (undo-tree-id3588 . -5) (undo-tree-id3589 . -5) (undo-tree-id3590 . -5) (undo-tree-id3591 . -5) (undo-tree-id3592 . -5) (undo-tree-id3593 . -5) (undo-tree-id3594 . -5) (undo-tree-id3595 . -5) (undo-tree-id3596 . -5) (undo-tree-id3597 . -5) (undo-tree-id3598 . -5) (undo-tree-id3599 . -5) (undo-tree-id3600 . -5) (undo-tree-id3601 . -5) (undo-tree-id3602 . -5) (undo-tree-id3603 . -5) (undo-tree-id3604 . -5) (undo-tree-id3605 . -5) (undo-tree-id3606 . -5) (undo-tree-id3607 . -5) (undo-tree-id3608 . -5) (undo-tree-id3609 . -5) (undo-tree-id3610 . -5) (undo-tree-id3611 . -5) (undo-tree-id3612 . -5) (undo-tree-id3613 . -5) (undo-tree-id3614 . -5) (undo-tree-id3615 . -5) (undo-tree-id3616 . -5) (undo-tree-id3617 . -5) (undo-tree-id3618 . -5) (undo-tree-id3619 . -5) (undo-tree-id3620 . -5) (undo-tree-id3621 . -5) (undo-tree-id3622 . -5) (undo-tree-id3623 . -5) (undo-tree-id3624 . -5) (undo-tree-id3625 . -5) (undo-tree-id3626 . -5) (undo-tree-id3627 . -5) (undo-tree-id3628 . -5) (undo-tree-id3629 . -5) (undo-tree-id3630 . -5) (undo-tree-id3631 . -5) (undo-tree-id3632 . -5) (undo-tree-id3633 . -5) (undo-tree-id3634 . -5) (undo-tree-id3635 . -5) (undo-tree-id3636 . -5) (undo-tree-id3637 . -5) (undo-tree-id3638 . -5) (undo-tree-id3639 . -5) (undo-tree-id3640 . -5) (undo-tree-id3641 . -5) (undo-tree-id3642 . -5) (undo-tree-id3643 . -5) (undo-tree-id3644 . -5) (undo-tree-id3645 . -5) (undo-tree-id3646 . -5) (undo-tree-id3647 . -5) (undo-tree-id3648 . -5) (undo-tree-id3649 . -5) (undo-tree-id3650 . -5) (undo-tree-id3651 . -5) (undo-tree-id3652 . -5) (undo-tree-id3653 . -5) (undo-tree-id3654 . -5) (undo-tree-id3655 . -5) (undo-tree-id3656 . -5) (undo-tree-id3657 . -5) (undo-tree-id3658 . -5) (undo-tree-id3659 . -5) (undo-tree-id3660 . -5) (undo-tree-id3661 . -5) (undo-tree-id3662 . -5) (undo-tree-id3663 . -5) (undo-tree-id3664 . -5) (undo-tree-id3665 . -5) (undo-tree-id3666 . -5) (undo-tree-id3667 . -5) (undo-tree-id3668 . -5) (undo-tree-id3669 . -5) (undo-tree-id3670 . -5) (undo-tree-id3671 . -5) (undo-tree-id3672 . -5) (undo-tree-id3673 . -5) (undo-tree-id3674 . -5) (undo-tree-id3675 . -5) (undo-tree-id3676 . -5) (undo-tree-id3677 . -5) (undo-tree-id3678 . -5) (undo-tree-id3679 . -5) (undo-tree-id3680 . -5) (undo-tree-id3681 . -5) (undo-tree-id3682 . -5) (undo-tree-id3683 . -5) (undo-tree-id3684 . -5) (undo-tree-id3685 . -5) (undo-tree-id3686 . -5) (undo-tree-id3687 . -5) (undo-tree-id3688 . -5) (undo-tree-id3689 . -5) (undo-tree-id3690 . -5) (undo-tree-id3691 . -5) (undo-tree-id3692 . -5) (undo-tree-id3693 . -5) (undo-tree-id3694 . -5) (undo-tree-id3695 . -5) (undo-tree-id3696 . -5) (undo-tree-id3697 . -5) (undo-tree-id3698 . -5) (undo-tree-id3699 . -5) (undo-tree-id3700 . -5) (undo-tree-id3701 . -5) (undo-tree-id3702 . -5) (undo-tree-id3703 . -5) (undo-tree-id3704 . -5) 1899) nil (26048 29612 687298 645000) 0 nil])
([nil nil ((#("        if msg. {
            let value = msg.structure().and_then(|structure| structure.name());
        }" 0 8 (fontified t) 8 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 15 (fontified t) 15 16 (fontified t) 16 17 (face (rainbow-delimiters-depth-3-face) fontified t) 17 18 (fontified t) 18 30 (fontified t) 30 33 (face font-lock-keyword-face fontified t) 33 34 (fontified t) 34 39 (face font-lock-variable-name-face fontified t) 39 46 (fontified t) 46 55 (fontified t) 55 56 (face (rainbow-delimiters-depth-4-face) fontified t) 56 57 (face (rainbow-delimiters-depth-4-face) fontified t) 57 58 (fontified t) 58 66 (fontified t) 66 67 (face (rainbow-delimiters-depth-4-face) fontified t) 67 68 (fontified t) 68 77 (fontified t) 77 79 (fontified t) 79 89 (fontified t) 89 93 (fontified t) 93 94 (face (rainbow-delimiters-depth-5-face) fontified t) 94 95 (face (rainbow-delimiters-depth-5-face) fontified t) 95 96 (face (rainbow-delimiters-depth-4-face) fontified t) 96 97 (fontified t) 97 98 (fontified t) 98 106 (fontified t) 106 107 (face (rainbow-delimiters-depth-3-face) fontified t)) . 1879) (undo-tree-id3263 . -107) (undo-tree-id3264 . -15) (undo-tree-id3265 . -15) (undo-tree-id3266 . -15) (undo-tree-id3267 . -15) (undo-tree-id3268 . -15) (undo-tree-id3269 . -15) (undo-tree-id3270 . -15) (undo-tree-id3271 . -15) (undo-tree-id3272 . -15) (undo-tree-id3273 . -15) (undo-tree-id3274 . -15) (undo-tree-id3275 . -15) (undo-tree-id3276 . -15) (undo-tree-id3277 . -15) (undo-tree-id3278 . -15) (undo-tree-id3279 . -15) (undo-tree-id3280 . -15) (undo-tree-id3281 . -15) (undo-tree-id3282 . -15) (undo-tree-id3283 . -15) (undo-tree-id3284 . -15) (undo-tree-id3285 . -15) (undo-tree-id3286 . -15) (undo-tree-id3287 . -15) (undo-tree-id3288 . -15) (undo-tree-id3289 . -15) (undo-tree-id3290 . -15) (undo-tree-id3291 . -15) (undo-tree-id3292 . -15) (undo-tree-id3293 . -15) (undo-tree-id3294 . -15) (undo-tree-id3295 . -15) (undo-tree-id3296 . -15) (undo-tree-id3297 . -15) (undo-tree-id3298 . -15) (undo-tree-id3299 . -15) (undo-tree-id3300 . -15) (undo-tree-id3301 . -15) (undo-tree-id3302 . -15) (undo-tree-id3303 . -15) (undo-tree-id3304 . -15) (undo-tree-id3305 . -15) (undo-tree-id3306 . -15) (undo-tree-id3307 . -15) (undo-tree-id3308 . -15) (undo-tree-id3309 . -15) (undo-tree-id3310 . -15) (undo-tree-id3311 . -15) (undo-tree-id3312 . -15) (undo-tree-id3313 . -15) (undo-tree-id3314 . -15) (undo-tree-id3315 . -15) (undo-tree-id3316 . -15) (undo-tree-id3317 . -15) (undo-tree-id3318 . -15) (undo-tree-id3319 . -15) (undo-tree-id3320 . -15) (undo-tree-id3321 . -15) (undo-tree-id3322 . -15) (undo-tree-id3323 . -15) (undo-tree-id3324 . -15) (undo-tree-id3325 . -15) (undo-tree-id3326 . -15) (undo-tree-id3327 . -15) (undo-tree-id3328 . -15) (undo-tree-id3329 . -15) (undo-tree-id3330 . -15) (undo-tree-id3331 . -15) (undo-tree-id3332 . -15) (undo-tree-id3333 . -15) (undo-tree-id3334 . -15) (undo-tree-id3335 . -15) (undo-tree-id3336 . -15) (undo-tree-id3337 . -15) (undo-tree-id3338 . -15) (undo-tree-id3339 . -15) (undo-tree-id3340 . -15) (undo-tree-id3341 . -15) (undo-tree-id3342 . -15) (undo-tree-id3343 . -15) (undo-tree-id3344 . -15) (undo-tree-id3345 . -15) (undo-tree-id3346 . -15) (undo-tree-id3347 . -15) (undo-tree-id3348 . -15) (undo-tree-id3349 . -15) (undo-tree-id3350 . -15) (undo-tree-id3351 . -15) (undo-tree-id3352 . -15) (undo-tree-id3353 . -15) (undo-tree-id3354 . -15) (undo-tree-id3355 . -15) (undo-tree-id3356 . -15) (undo-tree-id3357 . -15) (undo-tree-id3358 . -15) (undo-tree-id3359 . -15) (undo-tree-id3360 . -15) (undo-tree-id3361 . -15) (undo-tree-id3362 . -15) (undo-tree-id3363 . -15) (undo-tree-id3364 . -15) (undo-tree-id3365 . -15) (undo-tree-id3366 . -15) (undo-tree-id3367 . -15) (undo-tree-id3368 . -15) (undo-tree-id3369 . -15) (undo-tree-id3370 . -15) (undo-tree-id3371 . -15) (undo-tree-id3372 . -15) (undo-tree-id3373 . -15) (undo-tree-id3374 . -15) (undo-tree-id3375 . -15) (undo-tree-id3376 . -15) (undo-tree-id3377 . -15) (undo-tree-id3378 . -15) (undo-tree-id3379 . -15) (undo-tree-id3380 . -15) (undo-tree-id3381 . -15) (undo-tree-id3382 . -15) (undo-tree-id3383 . -15) (undo-tree-id3384 . -15) (undo-tree-id3385 . -15) (undo-tree-id3386 . -15) (undo-tree-id3387 . -15) (undo-tree-id3388 . -15) (undo-tree-id3389 . -15) (undo-tree-id3390 . -15) (undo-tree-id3391 . -15) (undo-tree-id3392 . -15) (undo-tree-id3393 . -15) (undo-tree-id3394 . -15) (undo-tree-id3395 . -15) (undo-tree-id3396 . -15) (undo-tree-id3397 . -15) (undo-tree-id3398 . -15) (undo-tree-id3399 . -15) (undo-tree-id3400 . -15) (undo-tree-id3401 . -15) (undo-tree-id3402 . -15) (undo-tree-id3403 . -15) (undo-tree-id3404 . -15) (undo-tree-id3405 . -15) (undo-tree-id3406 . -15) (undo-tree-id3407 . -15) (undo-tree-id3408 . -15) (undo-tree-id3409 . -15) (undo-tree-id3410 . -15) (undo-tree-id3411 . -15) (undo-tree-id3412 . -15) (undo-tree-id3413 . -15) (undo-tree-id3414 . -15) (undo-tree-id3415 . -15) (undo-tree-id3416 . -15) (undo-tree-id3417 . -15) (undo-tree-id3418 . -15) (undo-tree-id3419 . -15) (undo-tree-id3420 . -15) (undo-tree-id3421 . -15) (undo-tree-id3422 . -15) (undo-tree-id3423 . -15) (undo-tree-id3424 . -15) (undo-tree-id3425 . -15) (undo-tree-id3426 . -15) (undo-tree-id3427 . -15) (undo-tree-id3428 . -15) (undo-tree-id3429 . -15) (undo-tree-id3430 . -15) (undo-tree-id3431 . -15) (undo-tree-id3432 . -15) (undo-tree-id3433 . -15) (undo-tree-id3434 . -15) (undo-tree-id3435 . -15) (undo-tree-id3436 . -15) (undo-tree-id3437 . -15) (undo-tree-id3438 . -15) (undo-tree-id3439 . -15) (undo-tree-id3440 . -15) (undo-tree-id3441 . -15) (undo-tree-id3442 . -15) (undo-tree-id3443 . -15) (undo-tree-id3444 . -15) (undo-tree-id3445 . -15) (undo-tree-id3446 . -15) (undo-tree-id3447 . -15) (undo-tree-id3448 . -15) (undo-tree-id3449 . -15) (undo-tree-id3450 . -15) (undo-tree-id3451 . 92) (undo-tree-id3452 . -15) (undo-tree-id3453 . -15) (undo-tree-id3454 . -15) (undo-tree-id3455 . -15) (undo-tree-id3456 . -15) (undo-tree-id3457 . -15) (undo-tree-id3458 . -15) (undo-tree-id3459 . -15) (undo-tree-id3460 . -15) (undo-tree-id3461 . -15) (undo-tree-id3462 . -15) (undo-tree-id3463 . -15) (undo-tree-id3464 . -15) (undo-tree-id3465 . -15) (undo-tree-id3466 . -15) (undo-tree-id3467 . -15) (undo-tree-id3468 . -15) (undo-tree-id3469 . -15) (undo-tree-id3470 . -15) (undo-tree-id3471 . -15) (undo-tree-id3472 . -15) (undo-tree-id3473 . -15) (undo-tree-id3474 . -15) (undo-tree-id3475 . -15) (undo-tree-id3476 . -15) (undo-tree-id3477 . -15) (undo-tree-id3478 . -15) (undo-tree-id3479 . -15) (undo-tree-id3480 . -15) (undo-tree-id3481 . -15) (undo-tree-id3482 . -15) (undo-tree-id3483 . -107) (undo-tree-id3484 . -107) (undo-tree-id3485 . -107) (undo-tree-id3486 . -106) (undo-tree-id3487 . -25) (undo-tree-id3488 . -22) (undo-tree-id3489 . -21) (undo-tree-id3490 . -19) (undo-tree-id3491 . -15) (undo-tree-id3492 . -107)) nil (26048 29612 687164 885000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1878) (undo-tree-id3009 . -1) (undo-tree-id3010 . -1) (undo-tree-id3011 . -1) (undo-tree-id3012 . -1) (undo-tree-id3013 . -1) (undo-tree-id3014 . -1) (undo-tree-id3015 . -1) (undo-tree-id3016 . -1) (undo-tree-id3017 . -1) (undo-tree-id3018 . -1) (undo-tree-id3019 . -1) (undo-tree-id3020 . -1) (undo-tree-id3021 . -1) (undo-tree-id3022 . -1) (undo-tree-id3023 . -1) (undo-tree-id3024 . -1) (undo-tree-id3025 . -1) (undo-tree-id3026 . -1) (undo-tree-id3027 . -1) (undo-tree-id3028 . -1) (undo-tree-id3029 . -1) (undo-tree-id3030 . -1) (undo-tree-id3031 . -1) (undo-tree-id3032 . -1) (undo-tree-id3033 . -1) (undo-tree-id3034 . -1) (undo-tree-id3035 . -1) (undo-tree-id3036 . -1) (undo-tree-id3037 . -1) (undo-tree-id3038 . -1) (undo-tree-id3039 . -1) (undo-tree-id3040 . -1) (undo-tree-id3041 . -1) (undo-tree-id3042 . -1) (undo-tree-id3043 . -1) (undo-tree-id3044 . -1) (undo-tree-id3045 . -1) (undo-tree-id3046 . -1) (undo-tree-id3047 . -1) (undo-tree-id3048 . -1) (undo-tree-id3049 . -1) (undo-tree-id3050 . -1) (undo-tree-id3051 . -1) (undo-tree-id3052 . -1) (undo-tree-id3053 . -1) (undo-tree-id3054 . -1) (undo-tree-id3055 . -1) (undo-tree-id3056 . -1) (undo-tree-id3057 . -1) (undo-tree-id3058 . -1) (undo-tree-id3059 . -1) (undo-tree-id3060 . -1) (undo-tree-id3061 . -1) (undo-tree-id3062 . -1) (undo-tree-id3063 . -1) (undo-tree-id3064 . -1) (undo-tree-id3065 . -1) (undo-tree-id3066 . -1) (undo-tree-id3067 . -1) (undo-tree-id3068 . -1) (undo-tree-id3069 . -1) (undo-tree-id3070 . -1) (undo-tree-id3071 . -1) (undo-tree-id3072 . -1) (undo-tree-id3073 . -1) (undo-tree-id3074 . -1) (undo-tree-id3075 . -1) (undo-tree-id3076 . -1) (undo-tree-id3077 . -1) (undo-tree-id3078 . -1) (undo-tree-id3079 . -1) (undo-tree-id3080 . -1) (undo-tree-id3081 . -1) (undo-tree-id3082 . -1) (undo-tree-id3083 . -1) (undo-tree-id3084 . -1) (undo-tree-id3085 . -1) (undo-tree-id3086 . -1) (undo-tree-id3087 . -1) (undo-tree-id3088 . -1) (undo-tree-id3089 . -1) (undo-tree-id3090 . -1) (undo-tree-id3091 . -1) (undo-tree-id3092 . -1) (undo-tree-id3093 . -1) (undo-tree-id3094 . -1) (undo-tree-id3095 . -1) (undo-tree-id3096 . -1) (undo-tree-id3097 . -1) (undo-tree-id3098 . -1) (undo-tree-id3099 . -1) (undo-tree-id3100 . -1) (undo-tree-id3101 . -1) (undo-tree-id3102 . -1) (undo-tree-id3103 . -1) (undo-tree-id3104 . -1) (undo-tree-id3105 . -1) (undo-tree-id3106 . -1) (undo-tree-id3107 . -1) (undo-tree-id3108 . -1) (undo-tree-id3109 . -1) (undo-tree-id3110 . -1) (undo-tree-id3111 . -1) (undo-tree-id3112 . -1) (undo-tree-id3113 . -1) (undo-tree-id3114 . -1) (undo-tree-id3115 . -1) (undo-tree-id3116 . -1) (undo-tree-id3117 . -1) (undo-tree-id3118 . -1) (undo-tree-id3119 . -1) (undo-tree-id3120 . -1) (undo-tree-id3121 . -1) (undo-tree-id3122 . -1) (undo-tree-id3123 . -1) (undo-tree-id3124 . -1) (undo-tree-id3125 . -1) (undo-tree-id3126 . -1) (undo-tree-id3127 . -1) (undo-tree-id3128 . -1) (undo-tree-id3129 . -1) (undo-tree-id3130 . -1) (undo-tree-id3131 . -1) (undo-tree-id3132 . -1) (undo-tree-id3133 . -1) (undo-tree-id3134 . -1) (undo-tree-id3135 . -1) (undo-tree-id3136 . -1) (undo-tree-id3137 . -1) (undo-tree-id3138 . -1) (undo-tree-id3139 . -1) (undo-tree-id3140 . -1) (undo-tree-id3141 . -1) (undo-tree-id3142 . -1) (undo-tree-id3143 . -1) (undo-tree-id3144 . -1) (undo-tree-id3145 . -1) (undo-tree-id3146 . -1) (undo-tree-id3147 . -1) (undo-tree-id3148 . -1) (undo-tree-id3149 . -1) (undo-tree-id3150 . -1) (undo-tree-id3151 . -1) (undo-tree-id3152 . -1) (undo-tree-id3153 . -1) (undo-tree-id3154 . -1) (undo-tree-id3155 . -1) (undo-tree-id3156 . -1) (undo-tree-id3157 . -1) (undo-tree-id3158 . -1) (undo-tree-id3159 . -1) (undo-tree-id3160 . -1) (undo-tree-id3161 . -1) (undo-tree-id3162 . -1) (undo-tree-id3163 . -1) (undo-tree-id3164 . -1) (undo-tree-id3165 . -1) (undo-tree-id3166 . -1) (undo-tree-id3167 . -1) (undo-tree-id3168 . -1) (undo-tree-id3169 . -1) (undo-tree-id3170 . -1) (undo-tree-id3171 . -1) (undo-tree-id3172 . -1) (undo-tree-id3173 . -1) (undo-tree-id3174 . -1) (undo-tree-id3175 . -1) (undo-tree-id3176 . -1) (undo-tree-id3177 . -1) (undo-tree-id3178 . -1) (undo-tree-id3179 . -1) (undo-tree-id3180 . -1) (undo-tree-id3181 . -1) (undo-tree-id3182 . -1) (undo-tree-id3183 . -1) (undo-tree-id3184 . -1) (undo-tree-id3185 . -1) (undo-tree-id3186 . -1) (undo-tree-id3187 . -1) (undo-tree-id3188 . -1) (undo-tree-id3189 . -1) (undo-tree-id3190 . -1) (undo-tree-id3191 . -1) (undo-tree-id3192 . -1) (undo-tree-id3193 . -1) (undo-tree-id3194 . -1) (undo-tree-id3195 . -1) (undo-tree-id3196 . -1) (undo-tree-id3197 . -1) (undo-tree-id3198 . -1) (undo-tree-id3199 . -1) (undo-tree-id3200 . -1) (undo-tree-id3201 . -1) (undo-tree-id3202 . -1) (undo-tree-id3203 . -1) (undo-tree-id3204 . -1) (undo-tree-id3205 . -1) (undo-tree-id3206 . -1) (undo-tree-id3207 . -1) (undo-tree-id3208 . -1) (undo-tree-id3209 . -1) (undo-tree-id3210 . -1) (undo-tree-id3211 . -1) (undo-tree-id3212 . -1) (undo-tree-id3213 . -1) (undo-tree-id3214 . -1) (undo-tree-id3215 . -1) (undo-tree-id3216 . -1) (undo-tree-id3217 . -1) (undo-tree-id3218 . -1) (undo-tree-id3219 . -1) (undo-tree-id3220 . -1) (undo-tree-id3221 . -1) (undo-tree-id3222 . -1) (undo-tree-id3223 . -1) (undo-tree-id3224 . -1) (undo-tree-id3225 . -1) (undo-tree-id3226 . -1) (undo-tree-id3227 . -1) (undo-tree-id3228 . -1) (undo-tree-id3229 . -1) (undo-tree-id3230 . -1) (undo-tree-id3231 . -1) (undo-tree-id3232 . -1) (undo-tree-id3233 . -1) (undo-tree-id3234 . -1) (undo-tree-id3235 . -1) (undo-tree-id3236 . -1) (undo-tree-id3237 . -1) (undo-tree-id3238 . -1) (undo-tree-id3239 . -1) (undo-tree-id3240 . -1) (undo-tree-id3241 . -1) (undo-tree-id3242 . -1) (undo-tree-id3243 . -1) (undo-tree-id3244 . -1) (undo-tree-id3245 . -1) (undo-tree-id3246 . -1) (undo-tree-id3247 . -1) (undo-tree-id3248 . -1) (undo-tree-id3249 . -1) (undo-tree-id3250 . -1) (undo-tree-id3251 . -1) (undo-tree-id3252 . -1) (undo-tree-id3253 . -1) (undo-tree-id3254 . -1) (undo-tree-id3255 . -1) (undo-tree-id3256 . -1) (undo-tree-id3257 . -1) (undo-tree-id3258 . -1) (undo-tree-id3259 . -1) (undo-tree-id3260 . -1) (undo-tree-id3261 . -1) (undo-tree-id3262 . -1) 1879) nil (26048 29612 686717 267000) 0 nil])
([nil nil ((1878 . 1879)) nil (26048 29612 686499 912000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -1878) (undo-tree-id3004 . -1) (undo-tree-id3005 . -1) (undo-tree-id3006 . -1) (undo-tree-id3007 . -1) (undo-tree-id3008 . -1) 1879) nil (26048 29612 686495 964000) 0 nil])
([nil nil ((1846 . 1847) (t 26048 29612 733511 899000)) nil (26048 29898 782282 947000) 0 nil])
([nil nil ((1847 . 1860)) nil (26048 29898 782282 228000) 0 nil])
([nil nil ((1860 . 1861)) nil (26048 29898 782281 713000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1881 1884 nil nil nil t #s(yas--exit 1885 nil))) #s(yas--exit 1885 nil) 31 nil #s(yas--field 1 1881 1884 nil nil nil t #s(yas--exit 1885 nil)) nil nil)) (1860 . 1882) (#("MessageView::Element($1)$0" 0 26 (fontified nil)) . 1860) (1860 . 1886) (#("M" 0 1 (fontified nil)) . 1860) (1860 . 1861) (#("MessageView::Element(…)" 0 23 (fontified nil)) . -1860) (1860 . 1883) (#("M" 0 1 (face font-lock-type-face fontified t)) . -1860) (undo-tree-id4037 . -1) 1861) nil (26048 29898 782280 417000) 0 nil])
([nil nil ((1881 . 1882)) nil (26048 29898 782278 122000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -1881) (undo-tree-id4035 . -1) (undo-tree-id4036 . -1) 1882) nil (26048 29898 782277 391000) 0 nil])
([nil nil ((1881 . 1884)) nil (26048 29898 782275 502000) 0 nil])
([nil nil ((apply yas--snippet-revive 1860 1885 #s(yas--snippet nil (#s(yas--field 1 1881 1884 nil nil nil t #s(yas--exit 1885 nil))) #s(yas--exit 1885 nil) 31 nil #s(yas--field 1 1881 1884 nil nil nil t #s(yas--exit 1885 nil)) nil nil))) nil (26048 29898 782274 973000) 0 nil])
([nil nil ((1885 . 1891)) nil (26048 29898 782274 469000) 0 nil])
([nil nil ((1891 . 1892)) nil (26048 29898 782273 885000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1891) (undo-tree-id4034 . -1) 1892) nil (26048 29898 782273 134000) 0 nil])
([nil nil ((1891 . 1892)) nil (26048 29898 782271 848000) 0 nil])
([nil nil ((1892 . 1904) (#("                " 0 16 (fontified nil)) . 1891) (1891 . 1907) (#("            " 0 12 (fontified nil)) . 1891) (undo-tree-id4033 . -12) (1890 . 1904)) nil (26048 29898 782271 92000) 0 nil])
([nil nil ((1891 . 1907)) nil (26048 29898 782269 467000) 0 nil])
([nil nil ((1907 . 1908)) nil (26048 29898 782268 858000) 0 nil])
([nil nil ((1907 . 1910) (#("s" 0 1 (fontified nil)) . 1907) (1907 . 1908) (#("src" 0 3 (fontified nil)) . -1907) (1907 . 1910) (#("s" 0 1 (fontified t)) . -1907) (undo-tree-id4032 . -1) 1908) nil (26048 29898 782267 765000) 0 nil])
([nil nil ((1910 . 1912)) nil (26048 29898 782265 728000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -1911) (undo-tree-id4031 . -1) 1912) nil (26048 29898 782264 924000) 0 nil])
([nil nil ((1911 . 1913)) nil (26048 29898 782263 642000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1910) (undo-tree-id4028 . -1) (#("n" 0 1 (fontified t)) . -1911) (undo-tree-id4029 . -1) (#("a" 0 1 (fontified t)) . -1912) (undo-tree-id4030 . -1) 1913) nil (26048 29898 782262 642000) 0 nil])
([nil nil ((1910 . 1911)) nil (26048 29898 782259 800000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -1910) (undo-tree-id4027 . -1) 1911) nil (26048 29898 782259 51000) 0 nil])
([nil nil ((1910 . 1914)) nil (26048 29898 782257 722000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1910) (undo-tree-id4023 . -1) (#("p" 0 1 (fontified t)) . -1911) (undo-tree-id4024 . -1) (#("r" 0 1 (fontified t)) . -1912) (undo-tree-id4025 . -1) (#("o" 0 1 (fontified t)) . -1913) (undo-tree-id4026 . -1) 1914) nil (26048 29898 782256 542000) 0 nil])
([nil nil ((1910 . 1914)) nil (26048 29898 782253 7000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1910) (undo-tree-id4019 . -1) (#("p" 0 1 (fontified t)) . -1911) (undo-tree-id4020 . -1) (#("r" 0 1 (fontified t)) . -1912) (undo-tree-id4021 . -1) (#("o" 0 1 (fontified t)) . -1913) (undo-tree-id4022 . -1) 1914) nil (26048 29898 782251 656000) 0 nil])
([nil nil ((1910 . 1911)) nil (26048 29898 782248 89000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1920 1924 nil nil nil nil #s(yas--exit 1925 nil))) #s(yas--exit 1925 nil) 32 nil #s(yas--field 1 1920 1924 nil nil nil nil #s(yas--exit 1925 nil)) nil nil)) (1911 . 1925) (#("has_name(${1:name})$0" 0 21 (fontified nil)) . 1911) (1911 . 1932) (#("has_name(…) (alias gst_message_has_name)" 0 40 (fontified nil)) . -1911) (1911 . 1951)) nil (26048 29898 782247 186000) 0 nil])
([nil nil ((apply yas--snippet-revive 1911 1925 #s(yas--snippet nil (#s(yas--field 1 1920 1924 nil nil nil nil #s(yas--exit 1925 nil))) #s(yas--exit 1925 nil) 32 nil #s(yas--field 1 1920 1924 nil nil nil nil #s(yas--exit 1925 nil)) nil nil))) nil (26048 29898 782245 645000) 0 nil])
([nil nil ((#("name)" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-5-face) fontified t)) . -1920) (undo-tree-id4018 . -5) 1925) nil (26048 29898 782244 858000) 0 nil])
([nil nil ((#("name(" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-5-face) fontified t)) . -1915) (undo-tree-id4016 . -5) (undo-tree-id4017 . -5) 1920) nil (26048 29898 782243 421000) 0 nil])
([nil nil ((#("has_" 0 4 (fontified t)) . -1911) (undo-tree-id4010 . -4) (undo-tree-id4011 . -4) (undo-tree-id4012 . -4) (undo-tree-id4013 . -4) (undo-tree-id4014 . -4) (undo-tree-id4015 . -4) 1915) nil (26048 29898 782241 338000) 0 nil])
([nil nil ((1911 . 1914)) nil (26048 29898 782237 253000) 0 nil])
([nil nil ((#("nam" 0 3 (fontified t)) . -1911) (undo-tree-id4008 . -3) (undo-tree-id4009 . -3) 1914) nil (26048 29898 782236 626000) 0 nil])
([nil nil ((#("src." 0 4 (fontified t)) . -1907) (undo-tree-id4002 . -4) (undo-tree-id4003 . -4) (undo-tree-id4004 . -4) (undo-tree-id4005 . -4) (undo-tree-id4006 . -4) (undo-tree-id4007 . -4) 1911) nil (26048 29898 782234 293000) 0 nil])
([nil nil ((1907 . 1910)) nil (26048 29898 782229 943000) 0 nil])
([nil nil ((#("::prelude" 0 2 (fontified t) 2 9 (face font-lock-constant-face fontified t)) . -33) (undo-tree-id3993 . -9) 42 (44 . 54) (45 . 55) (1907 . 1907) (1907 . 1914) (#("Ele" 0 3 (fontified nil)) . 1907) (1907 . 1910) (#("Element (alias GstElement) (use gstreamer::Element)" 0 51 (fontified nil)) . -1907) (1907 . 1958) (#("Ele" 0 3 (face font-lock-type-face fontified t)) . -1907) (undo-tree-id3994 . -3) (undo-tree-id3995 . -2) (undo-tree-id3996 . -2) (undo-tree-id3997 . -3) (undo-tree-id3998 . -3) (undo-tree-id3999 . -3) (undo-tree-id4000 . -3) (undo-tree-id4001 . -3) 1910) nil (26048 29898 782228 306000) 0 nil])
([nil nil ((1925 . 1930)) nil (26048 29898 782221 102000) 0 nil])
([nil nil ((1930 . 1931)) nil (26048 29898 782220 517000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -1930) (undo-tree-id3988 . -1) (undo-tree-id3989 . -1) (undo-tree-id3990 . -1) (undo-tree-id3991 . -1) (undo-tree-id3992 . -1) 1931) nil (26048 29898 782219 677000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1940 1943 nil nil nil t #s(yas--field 2 1945 1958 nil nil nil nil #s(yas--field 3 1960 1965 nil nil nil nil #s(yas--exit 1966 nil)))) #s(yas--field 2 1945 1958 nil nil nil nil #s(yas--field 3 1960 1965 nil nil nil nil #s(yas--exit 1966 nil))) #s(yas--field 3 1960 1965 nil nil nil nil #s(yas--exit 1966 nil))) #s(yas--exit 1966 nil) 33 nil #s(yas--field 1 1940 1943 nil nil nil t #s(yas--field 2 1945 1958 nil nil nil nil #s(yas--field 3 1960 1965 nil nil nil nil #s(yas--exit 1966 nil)))) nil nil)) (1927 . 1968) (#("has_property(${1:&self}, ${2:property_name}, ${3:type_})$0" 0 58 (fontified nil)) . 1927) (1927 . 1985) (#("pro" 0 3 (fontified nil)) . 1927) (1927 . 1930) (#("has_property(…) (as ObjectExt)" 0 30 (fontified nil)) . -1927) (1927 . 1957) (#("pro" 0 3 (fontified t)) . -1927) (undo-tree-id3970 . -3) (undo-tree-id3971 . -1) (undo-tree-id3972 . -1) (undo-tree-id3973 . -1) (undo-tree-id3974 . -2) (undo-tree-id3975 . -2) (undo-tree-id3976 . -3) (undo-tree-id3977 . -3) (undo-tree-id3978 . -3) (undo-tree-id3979 . -3) (undo-tree-id3980 . -3) (undo-tree-id3981 . -3) (undo-tree-id3982 . -3) (undo-tree-id3983 . -3) (undo-tree-id3984 . -3) (undo-tree-id3985 . -3) (undo-tree-id3986 . -3) (undo-tree-id3987 . -3) 1930) nil (26048 29898 782214 766000) 0 nil])
([nil nil ((1941 . 1943) (#("&self" 0 1 (face rust-ampersand-face fontified nil) 1 5 (face font-lock-keyword-face fontified nil)) . 1941) (undo-tree-id3969 . -5) (1940 . 1941)) nil (26048 29898 782201 131000) 0 nil])
([nil nil ((1940 . 1943) (#("src" 0 3 (fontified nil)) . 1940) (undo-tree-id3953 . -3) (1940 . 1943) (#("src" 0 3 (fontified t)) . -1940) (undo-tree-id3954 . -3) (undo-tree-id3955 . -3) (undo-tree-id3956 . -3) (undo-tree-id3957 . -1) (undo-tree-id3958 . -1) (undo-tree-id3959 . -1) (undo-tree-id3960 . -1) (undo-tree-id3961 . -1) (undo-tree-id3962 . -1) (undo-tree-id3963 . -2) (undo-tree-id3964 . -2) (undo-tree-id3965 . -3) (undo-tree-id3966 . -3) (undo-tree-id3967 . -3) (undo-tree-id3968 . -3) 1943) nil (26048 29898 782198 592000) 0 nil])
([nil nil ((apply yas--snippet-revive 1927 1966 #s(yas--snippet nil (#s(yas--field 1 1940 1943 nil nil nil t #s(yas--field 2 1945 1958 nil nil nil nil #s(yas--field 3 1960 1965 nil nil nil nil #s(yas--exit 1966 nil)))) #s(yas--field 2 1945 1958 nil nil nil nil #s(yas--field 3 1960 1965 nil nil nil nil #s(yas--exit 1966 nil))) #s(yas--field 3 1960 1965 nil nil nil nil #s(yas--exit 1966 nil))) #s(yas--exit 1966 nil) 33 nil #s(yas--field 1 1940 1943 nil nil nil t #s(yas--field 2 1945 1958 nil nil nil nil #s(yas--field 3 1960 1965 nil nil nil nil #s(yas--exit 1966 nil)))) nil nil))) nil (26048 29898 782100 904000) 0 nil])
([nil nil ((#("name" 0 4 (fontified t)) . -1954) (undo-tree-id3950 . -4) (undo-tree-id3951 . -4) (undo-tree-id3952 . -4) 1958) nil (26048 29898 782100 160000) 0 nil])
([nil nil ((#("property_" 0 9 (fontified t)) . -1945) (undo-tree-id3942 . -9) (undo-tree-id3943 . -9) (undo-tree-id3944 . -8) (undo-tree-id3945 . -8) (undo-tree-id3946 . -8) (undo-tree-id3947 . -9) (undo-tree-id3948 . -9) (undo-tree-id3949 . -9) 1954) nil (26048 29898 782097 362000) 0 nil])
([nil nil ((1945 . 1947)) nil (26048 29898 782092 83000) 0 nil])
([nil nil ((1946 . 1950)) nil (26048 29898 782091 532000) 0 nil])
([nil nil ((#("type_" 0 5 (fontified t)) . -1953) (undo-tree-id3936 . -5) (undo-tree-id3937 . -1) (undo-tree-id3938 . -2) (undo-tree-id3939 . -3) (undo-tree-id3940 . -4) (undo-tree-id3941 . -5) 1958) nil (26048 29898 782090 579000) 0 nil])
([nil nil ((1953 . 1955)) nil (26048 29898 782085 928000) 0 nil])
([nil nil ((1954 . 1955)) nil (26048 29898 782085 458000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-string-face fontified t)) . -1954) (undo-tree-id3933 . -1) (undo-tree-id3934 . -1) (undo-tree-id3935 . -1) 1955) nil (26048 29898 782084 630000) 0 nil])
([nil nil ((1954 . 1958)) nil (26048 29898 782082 212000) 0 nil])
([nil nil ((1918 . 1921)) nil (26048 29898 782081 643000) 0 nil])
([nil nil ((1963 . 1966)) nil (26048 29898 782081 83000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -1964) (undo-tree-id3919 . -1) (undo-tree-id3920 . -1) (undo-tree-id3921 . -1) (undo-tree-id3922 . -1) (undo-tree-id3923 . -1) (undo-tree-id3924 . -1) (undo-tree-id3925 . -1) (undo-tree-id3926 . -1) (undo-tree-id3927 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -1965) (undo-tree-id3928 . -1) (undo-tree-id3929 . -1) (undo-tree-id3930 . -1) (undo-tree-id3931 . -1) (undo-tree-id3932 . -1) 1966) nil (26048 29898 782079 767000) 0 nil])
([nil nil ((1964 . 1966)) nil (26048 29898 782070 429000) 0 nil])
([nil nil ((1967 . 1983) (#("                    " 0 20 (fontified nil)) . 1966) (undo-tree-id3915 . -16) (undo-tree-id3916 . -16) (undo-tree-id3917 . -16) (undo-tree-id3918 . -16) (1982 . 1986) (1965 . 1983)) nil (26048 29898 782069 477000) 0 nil])
([nil nil ((1966 . 1986)) nil (26048 29898 782066 102000) 0 nil])
([nil nil ((1986 . 1987)) nil (26048 29898 782065 604000) 0 nil])
([nil nil ((apply yas--snippet-revive 1986 1996 #s(yas--snippet nil nil #s(yas--exit 1995 nil) 34 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1995 nil) 34 nil nil nil nil)) (1986 . 1996) (#("println!($0)" 0 12 (fontified nil)) . 1986) (1986 . 1998) (#("p" 0 1 (fontified nil)) . 1986) (1986 . 1987) (#("println!(…)" 0 11 (fontified nil)) . -1986) (1986 . 1997) (#("p" 0 1 (fontified t)) . -1986) (undo-tree-id3910 . -1) (undo-tree-id3911 . -1) (undo-tree-id3912 . -1) (undo-tree-id3913 . -1) (undo-tree-id3914 . -1) 1987) nil (26048 29898 782064 164000) 0 nil])
([nil nil ((1995 . 1997)) nil (26048 29898 782058 851000) 0 nil])
([nil nil ((1996 . 1997)) nil (26048 29898 782058 304000) 0 nil])
([nil nil ((1997 . 1998)) nil (26048 29898 782057 701000) 0 nil])
([nil nil ((1997 . 1999)) nil (26048 29898 782056 983000) 0 nil])
([nil nil ((#(">" 0 1 (face rust-string-interpolation syntax-table (1) fontified t)) . -1998) (undo-tree-id3904 . -1) (undo-tree-id3905 . -1) (undo-tree-id3906 . -1) (undo-tree-id3907 . -1) (undo-tree-id3908 . -1) (undo-tree-id3909 . -1) 1999) nil (26048 29898 782055 986000) 0 nil])
([nil nil ((1998 . 1999)) nil (26048 29898 782051 636000) 0 nil])
([nil nil ((2001 . 2004)) nil (26048 29898 782050 930000) 0 nil])
([nil nil ((2003 . 2006) (#("s" 0 1 (fontified nil)) . 2003) (2003 . 2004) (#("src" 0 3 (fontified nil)) . -2003) (2003 . 2006) (#("s" 0 1 (fontified t)) . -2003) (undo-tree-id3896 . -1) (undo-tree-id3897 . -1) (undo-tree-id3898 . -1) (undo-tree-id3899 . -1) (undo-tree-id3900 . -1) (undo-tree-id3901 . -1) (undo-tree-id3902 . -1) (undo-tree-id3903 . -1) 2004) nil (26048 29898 782049 677000) 0 nil])
([nil nil ((2006 . 2010)) nil (26048 29898 782043 54000) 0 nil])
([nil nil ((apply yas--snippet-revive 2007 2018 #s(yas--snippet nil nil #s(yas--exit 2018 nil) 35 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2018 nil) 35 nil nil nil nil)) (2007 . 2018) (#("structure()$0" 0 13 (fontified nil)) . 2007) (2007 . 2020) (#("str" 0 3 (fontified nil)) . 2007) (2007 . 2010) (#("structure() (alias get_structure, gst_message_get_structure)" 0 60 (fontified nil)) . -2007) (2007 . 2067) (#("str" 0 3 (face font-lock-type-face fontified t)) . -2007) (undo-tree-id3885 . -3) (undo-tree-id3886 . -1) (undo-tree-id3887 . -1) (undo-tree-id3888 . -1) (undo-tree-id3889 . -1) (undo-tree-id3890 . -2) (undo-tree-id3891 . -2) (undo-tree-id3892 . -3) (undo-tree-id3893 . -3) (undo-tree-id3894 . -3) (undo-tree-id3895 . -3) 2010) nil (26048 29898 782041 196000) 0 nil])
([nil nil ((2018 . 2020)) nil (26048 29898 782031 608000) 0 nil])
([nil nil ((apply yas--snippet-revive 2019 2027 #s(yas--snippet nil nil #s(yas--exit 2027 nil) 36 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2027 nil) 36 nil nil nil nil)) (2019 . 2027) (#("unwrap()$0" 0 10 (fontified nil)) . 2019) (2019 . 2029) (#("u" 0 1 (fontified nil)) . 2019) (2019 . 2020) (#("unwrap()" 0 8 (fontified nil)) . -2019) (2019 . 2027) (#("u" 0 1 (fontified t)) . -2019) (undo-tree-id3880 . -1) (undo-tree-id3881 . -1) (undo-tree-id3882 . -1) (undo-tree-id3883 . -1) (undo-tree-id3884 . -1) 2020) nil (26048 29898 782028 990000) 0 nil])
([nil nil ((2028 . 2029)) nil (26048 29898 782015 3000) 0 nil])
([nil nil ((1956 . 1962) (t 26048 29898 796862 587000)) nil (26048 29911 331666 992000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-6-face) fontified t)) . -1961) (undo-tree-id4038 . -1) (undo-tree-id4039 . -1) (undo-tree-id4040 . -1) (undo-tree-id4041 . -1) (undo-tree-id4042 . -1) (undo-tree-id4043 . -1) (undo-tree-id4044 . -1) (undo-tree-id4045 . -1) (undo-tree-id4046 . -1) 1962) nil (26048 29911 331664 200000) 0 nil])
([nil nil ((1967 . 1968)) nil (26048 29911 331647 853000) 0 nil])
([nil nil ((#("                if Element::has_property(src, \"name\", Some(\"zbar\")) {
                    println!(\"{:?}\", src.structure().unwrap());
                }" 0 16 (fontified t) 16 18 (face font-lock-keyword-face fontified t) 18 19 (fontified t) 19 26 (face font-lock-type-face fontified t) 26 28 (fontified t) 28 40 (fontified t) 40 41 (face (rainbow-delimiters-depth-5-face) fontified t) 41 44 (fontified t) 44 46 (fontified t) 46 52 (face font-lock-string-face fontified t) 52 54 (fontified t) 54 58 (face font-lock-type-face fontified t) 58 59 (face (rainbow-delimiters-depth-6-face) fontified t) 59 65 (face font-lock-string-face fontified t) 65 66 (face (rainbow-delimiters-depth-6-face) fontified t) 66 67 (face (rainbow-delimiters-depth-5-face) fontified t) 67 68 (fontified t) 68 69 (face (rainbow-delimiters-depth-5-face) fontified t) 69 70 (fontified t) 70 90 (fontified t) 90 98 (face rust-builtin-formatting-macro fontified t) 98 99 (face (rainbow-delimiters-depth-6-face) fontified t) 99 100 (face font-lock-string-face fontified t) 100 103 (face rust-string-interpolation fontified t) 103 104 (face rust-string-interpolation fontified t) 104 105 (face font-lock-string-face fontified t) 105 107 (fontified t) 107 111 (fontified t) 111 120 (fontified t) 120 121 (face (rainbow-delimiters-depth-7-face) fontified t) 121 122 (face (rainbow-delimiters-depth-7-face) fontified t) 122 123 (fontified t) 123 129 (fontified t) 129 130 (face (rainbow-delimiters-depth-7-face) fontified t) 130 131 (face (rainbow-delimiters-depth-7-face) fontified t) 131 132 (face (rainbow-delimiters-depth-6-face) fontified t) 132 133 (fontified t) 133 134 (fontified t) 134 150 (fontified t) 150 151 (face (rainbow-delimiters-depth-5-face) fontified t)) . 1902) (undo-tree-id4064 . -151) (undo-tree-id4065 . -36) (undo-tree-id4066 . -16) (undo-tree-id4067 . -36) (undo-tree-id4068 . 92) (undo-tree-id4069 . -59) (undo-tree-id4070 . -59) (undo-tree-id4071 . -59) (undo-tree-id4072 . -59) (undo-tree-id4073 . -59) (undo-tree-id4074 . -59) (undo-tree-id4075 . -59) (undo-tree-id4076 . -66) (undo-tree-id4077 . -66) (undo-tree-id4078 . -66) (undo-tree-id4079 . -66) (undo-tree-id4080 . -66) (undo-tree-id4081 . -66) (undo-tree-id4082 . -66) (undo-tree-id4083 . -66) (undo-tree-id4084 . -66) (undo-tree-id4085 . -66) (undo-tree-id4086 . -66) (undo-tree-id4087 . -66) (undo-tree-id4088 . -66) (undo-tree-id4089 . -53) (undo-tree-id4090 . -53) (undo-tree-id4091 . -53) (undo-tree-id4092 . -53) (undo-tree-id4093 . -53) (undo-tree-id4094 . -53) (undo-tree-id4095 . -53) (undo-tree-id4096 . -53) (undo-tree-id4097 . -53) (undo-tree-id4098 . -53) (undo-tree-id4099 . -53) (undo-tree-id4100 . -53) (undo-tree-id4101 . -53) (undo-tree-id4102 . -53) (undo-tree-id4103 . -53) (undo-tree-id4104 . -53) (undo-tree-id4105 . -53) (undo-tree-id4106 . -53) (undo-tree-id4107 . -53) (undo-tree-id4108 . -53) (undo-tree-id4109 . -53) (undo-tree-id4110 . -53) (undo-tree-id4111 . -53) (undo-tree-id4112 . -53) (undo-tree-id4113 . -53) (undo-tree-id4114 . -53) (undo-tree-id4115 . -53) (undo-tree-id4116 . -53) (undo-tree-id4117 . -53) (undo-tree-id4118 . -53) (undo-tree-id4119 . -53) (undo-tree-id4120 . -53) (undo-tree-id4121 . -151) (undo-tree-id4122 . -151) (undo-tree-id4123 . -151) (undo-tree-id4124 . -151) (undo-tree-id4125 . -151) (undo-tree-id4126 . -151) (undo-tree-id4127 . -151) (undo-tree-id4128 . -151) (undo-tree-id4129 . -88) (undo-tree-id4130 . -86) (undo-tree-id4131 . -84) (undo-tree-id4132 . -83) (undo-tree-id4133 . -82) (undo-tree-id4134 . -81) (undo-tree-id4135 . -80) (undo-tree-id4136 . -79) (undo-tree-id4137 . -78) (undo-tree-id4138 . -77) (undo-tree-id4139 . -6) (undo-tree-id4140 . -5) (undo-tree-id4141 . -4) (undo-tree-id4142 . -3) (undo-tree-id4143 . -2) (undo-tree-id4144 . -1) (undo-tree-id4145 . -36) (undo-tree-id4146 . -151) (t 26048 29911 346863 348000)) nil (26048 29932 759394 564000) 0 nil])
([nil nil ((1902 . 1918)) nil (26048 29932 759343 595000) 0 nil])
([nil nil ((1918 . 1919)) nil (26048 29932 759343 23000) 0 nil])
([nil nil ((apply yas--snippet-revive 1918 1928 #s(yas--snippet nil nil #s(yas--exit 1927 nil) 37 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1927 nil) 37 nil nil nil nil)) (1918 . 1928) (#("println!($0)" 0 12 (fontified nil)) . 1918) (1918 . 1930) (#("p" 0 1 (fontified nil)) . 1918) (1918 . 1919) (#("println!(…)" 0 11 (fontified nil)) . -1918) (1918 . 1929) (#("p" 0 1 (fontified t)) . -1918) (undo-tree-id4057 . -1) (undo-tree-id4058 . -1) (undo-tree-id4059 . -1) (undo-tree-id4060 . -1) (undo-tree-id4061 . -1) (undo-tree-id4062 . -1) (undo-tree-id4063 . -1) 1919) nil (26048 29932 759341 442000) 0 nil])
([nil nil ((1927 . 1929)) nil (26048 29932 759335 485000) 0 nil])
([nil nil ((#("src" 0 3 (fontified t)) . -1892) (undo-tree-id4047 . -3) (undo-tree-id4048 . -3) (undo-tree-id4049 . -3) (undo-tree-id4050 . -3) (undo-tree-id4051 . -3) (undo-tree-id4052 . -3) (undo-tree-id4053 . -3) (undo-tree-id4054 . -3) (undo-tree-id4055 . -3) (undo-tree-id4056 . -3) 1895) nil (26048 29932 759333 460000) 0 nil])
([nil nil ((1892 . 1893)) nil (26048 29932 759317 726000) 0 nil])
([nil nil ((1926 . 1928) (t 26048 29932 773531 306000)) nil (26048 29960 573308 211000) 0 nil])
([nil nil ((#("{" 0 1 (face font-lock-string-face fontified t)) . -1926) (undo-tree-id4514 . -1) (undo-tree-id4515 . -1) (undo-tree-id4516 . -1) (undo-tree-id4517 . -1) (undo-tree-id4518 . -1) (undo-tree-id4519 . -1) (undo-tree-id4520 . -1) (undo-tree-id4521 . -1) (undo-tree-id4522 . -1) (undo-tree-id4523 . -1) (#("P" 0 1 (face font-lock-string-face fontified t)) . -1927) (undo-tree-id4524 . -1) (undo-tree-id4525 . -1) (undo-tree-id4526 . -1) (undo-tree-id4527 . -1) 1928) nil (26048 29960 573306 725000) 0 nil])
([nil nil ((1926 . 1927)) nil (26048 29960 573296 347000) 0 nil])
([nil nil ((#(":" 0 1 (face font-lock-string-face fontified t)) . -1926) (undo-tree-id4511 . -1) (undo-tree-id4512 . -1) (undo-tree-id4513 . -1) 1927) nil (26048 29960 573295 544000) 0 nil])
([nil nil ((1926 . 1928)) nil (26048 29960 573292 859000) 0 nil])
([nil nil ((1927 . 1929)) nil (26048 29960 573292 180000) 0 nil])
([nil nil ((1931 . 1934)) nil (26048 29960 573291 543000) 0 nil])
([nil nil ((1933 . 1945) (#("s" 0 1 (fontified nil)) . 1933) (1933 . 1934) (#("sink_display" 0 12 (fontified nil)) . -1933) (1933 . 1945) (#("s" 0 1 (fontified t)) . -1933) (undo-tree-id4505 . -1) (undo-tree-id4506 . -1) (undo-tree-id4507 . -1) (undo-tree-id4508 . -1) (undo-tree-id4509 . -1) (undo-tree-id4510 . -1) 1934) nil (26048 29960 573289 898000) 0 nil])
([nil nil ((#("display" 0 7 (fontified t)) . -1938) (undo-tree-id4497 . -7) (undo-tree-id4498 . -7) (undo-tree-id4499 . -7) (undo-tree-id4500 . -7) (undo-tree-id4501 . -7) (undo-tree-id4502 . -7) (undo-tree-id4503 . -7) (undo-tree-id4504 . -7) 1945) nil (26048 29960 572644 74000) 0 nil])
([nil nil ((1938 . 1939)) nil (26048 29960 572638 321000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -1934) (undo-tree-id4426 . -1) (undo-tree-id4427 . -1) (undo-tree-id4428 . -1) (undo-tree-id4429 . -1) (undo-tree-id4430 . -1) (undo-tree-id4431 . -1) (undo-tree-id4432 . -1) (undo-tree-id4433 . -1) (undo-tree-id4434 . -1) (undo-tree-id4435 . -1) (undo-tree-id4436 . -1) (undo-tree-id4437 . -1) (undo-tree-id4438 . -1) (undo-tree-id4439 . -1) (undo-tree-id4440 . -1) (undo-tree-id4441 . -1) (undo-tree-id4442 . -1) (undo-tree-id4443 . -1) (undo-tree-id4444 . -1) (undo-tree-id4445 . -1) (#("n" 0 1 (fontified t)) . -1935) (undo-tree-id4446 . -1) (undo-tree-id4447 . -1) (undo-tree-id4448 . -1) (undo-tree-id4449 . -1) (undo-tree-id4450 . -1) (undo-tree-id4451 . -1) (undo-tree-id4452 . -1) (undo-tree-id4453 . -1) (undo-tree-id4454 . -1) (undo-tree-id4455 . -1) (undo-tree-id4456 . -1) (undo-tree-id4457 . -1) (undo-tree-id4458 . -1) (undo-tree-id4459 . -1) (undo-tree-id4460 . -1) (undo-tree-id4461 . -1) (undo-tree-id4462 . -1) (undo-tree-id4463 . -1) (#("k" 0 1 (fontified t)) . -1936) (undo-tree-id4464 . -1) (undo-tree-id4465 . -1) (undo-tree-id4466 . -1) (undo-tree-id4467 . -1) (undo-tree-id4468 . -1) (undo-tree-id4469 . -1) (undo-tree-id4470 . -1) (undo-tree-id4471 . -1) (undo-tree-id4472 . -1) (undo-tree-id4473 . -1) (undo-tree-id4474 . -1) (undo-tree-id4475 . -1) (undo-tree-id4476 . -1) (undo-tree-id4477 . -1) (undo-tree-id4478 . -1) (undo-tree-id4479 . -1) (#("_" 0 1 (fontified t)) . -1937) (undo-tree-id4480 . -1) (undo-tree-id4481 . -1) (undo-tree-id4482 . -1) (undo-tree-id4483 . -1) (undo-tree-id4484 . -1) (undo-tree-id4485 . -1) (undo-tree-id4486 . -1) (undo-tree-id4487 . -1) (undo-tree-id4488 . -1) (undo-tree-id4489 . -1) (undo-tree-id4490 . -1) (undo-tree-id4491 . -1) (undo-tree-id4492 . -1) (undo-tree-id4493 . -1) (#("s" 0 1 (fontified t)) . -1938) (undo-tree-id4494 . -1) (undo-tree-id4495 . -1) (undo-tree-id4496 . -1) 1939) nil (26048 29960 572634 482000) 0 nil])
([nil nil ((1934 . 1940)) nil (26048 29960 572586 616000) 0 nil])
([nil nil ((1940 . 1942)) nil (26048 29960 572586 77000) 0 nil])
([nil nil ((#("struc" 0 5 (fontified t)) . -1937) (undo-tree-id4403 . -5) (undo-tree-id4404 . -1) (undo-tree-id4405 . -1) (undo-tree-id4406 . -1) (undo-tree-id4407 . -1) (undo-tree-id4408 . -1) (undo-tree-id4409 . -1) (undo-tree-id4410 . -2) (undo-tree-id4411 . -2) (undo-tree-id4412 . -3) (undo-tree-id4413 . -3) (undo-tree-id4414 . -3) (undo-tree-id4415 . -3) (undo-tree-id4416 . -3) (undo-tree-id4417 . -3) (undo-tree-id4418 . -4) (undo-tree-id4419 . -4) (undo-tree-id4420 . -5) (undo-tree-id4421 . -5) (undo-tree-id4422 . -5) (undo-tree-id4423 . -5) (undo-tree-id4424 . -5) (undo-tree-id4425 . -5) 1942) nil (26048 29960 572584 541000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -1933) (undo-tree-id4202 . -1) (undo-tree-id4203 . -1) (undo-tree-id4204 . -1) (undo-tree-id4205 . -1) (undo-tree-id4206 . -1) (undo-tree-id4207 . -1) (undo-tree-id4208 . -1) (undo-tree-id4209 . -1) (undo-tree-id4210 . -1) (undo-tree-id4211 . -1) (undo-tree-id4212 . -1) (undo-tree-id4213 . -1) (undo-tree-id4214 . -1) (undo-tree-id4215 . -1) (undo-tree-id4216 . -1) (undo-tree-id4217 . -1) (undo-tree-id4218 . -1) (undo-tree-id4219 . -1) (undo-tree-id4220 . -1) (undo-tree-id4221 . -1) (undo-tree-id4222 . -1) (undo-tree-id4223 . -1) (undo-tree-id4224 . -1) (undo-tree-id4225 . -1) (undo-tree-id4226 . -1) (undo-tree-id4227 . -1) (undo-tree-id4228 . -1) (undo-tree-id4229 . -1) (undo-tree-id4230 . -1) (undo-tree-id4231 . -1) (undo-tree-id4232 . -1) (undo-tree-id4233 . -1) (undo-tree-id4234 . -1) (undo-tree-id4235 . -1) (undo-tree-id4236 . -1) (undo-tree-id4237 . -1) (undo-tree-id4238 . -1) (undo-tree-id4239 . -1) (undo-tree-id4240 . -1) (undo-tree-id4241 . -1) (undo-tree-id4242 . -1) (undo-tree-id4243 . -1) (undo-tree-id4244 . -1) (undo-tree-id4245 . -1) (undo-tree-id4246 . -1) (undo-tree-id4247 . -1) (undo-tree-id4248 . -1) (undo-tree-id4249 . -1) (undo-tree-id4250 . -1) (undo-tree-id4251 . -1) (undo-tree-id4252 . -1) (undo-tree-id4253 . -1) (undo-tree-id4254 . -1) (undo-tree-id4255 . -1) (undo-tree-id4256 . -1) (undo-tree-id4257 . -1) (undo-tree-id4258 . -1) (undo-tree-id4259 . -1) (undo-tree-id4260 . -1) (undo-tree-id4261 . -1) (undo-tree-id4262 . -1) (undo-tree-id4263 . -1) (undo-tree-id4264 . -1) (undo-tree-id4265 . -1) (undo-tree-id4266 . -1) (undo-tree-id4267 . -1) (undo-tree-id4268 . -1) (undo-tree-id4269 . -1) (undo-tree-id4270 . -1) (undo-tree-id4271 . -1) (#("r" 0 1 (fontified t)) . -1934) (undo-tree-id4272 . -1) (undo-tree-id4273 . -1) (undo-tree-id4274 . -1) (undo-tree-id4275 . -1) (undo-tree-id4276 . -1) (undo-tree-id4277 . -1) (undo-tree-id4278 . -1) (undo-tree-id4279 . -1) (undo-tree-id4280 . -1) (undo-tree-id4281 . -1) (undo-tree-id4282 . -1) (undo-tree-id4283 . -1) (undo-tree-id4284 . -1) (undo-tree-id4285 . -1) (undo-tree-id4286 . -1) (undo-tree-id4287 . -1) (undo-tree-id4288 . -1) (undo-tree-id4289 . -1) (undo-tree-id4290 . -1) (undo-tree-id4291 . -1) (undo-tree-id4292 . -1) (undo-tree-id4293 . -1) (undo-tree-id4294 . -1) (undo-tree-id4295 . -1) (undo-tree-id4296 . -1) (undo-tree-id4297 . -1) (undo-tree-id4298 . -1) (undo-tree-id4299 . -1) (undo-tree-id4300 . -1) (undo-tree-id4301 . -1) (undo-tree-id4302 . -1) (undo-tree-id4303 . -1) (undo-tree-id4304 . -1) (undo-tree-id4305 . -1) (undo-tree-id4306 . -1) (undo-tree-id4307 . -1) (undo-tree-id4308 . -1) (undo-tree-id4309 . -1) (undo-tree-id4310 . -1) (undo-tree-id4311 . -1) (undo-tree-id4312 . -1) (undo-tree-id4313 . -1) (undo-tree-id4314 . -1) (undo-tree-id4315 . -1) (undo-tree-id4316 . -1) (undo-tree-id4317 . -1) (undo-tree-id4318 . -1) (undo-tree-id4319 . -1) (#("c" 0 1 (fontified t)) . -1935) (undo-tree-id4320 . -1) (undo-tree-id4321 . -1) (undo-tree-id4322 . -1) (undo-tree-id4323 . -1) (undo-tree-id4324 . -1) (undo-tree-id4325 . -1) (undo-tree-id4326 . -1) (undo-tree-id4327 . -1) (undo-tree-id4328 . -1) (undo-tree-id4329 . -1) (undo-tree-id4330 . -1) (undo-tree-id4331 . -1) (undo-tree-id4332 . -1) (undo-tree-id4333 . -1) (undo-tree-id4334 . -1) (undo-tree-id4335 . -1) (undo-tree-id4336 . -1) (undo-tree-id4337 . -1) (undo-tree-id4338 . -1) (undo-tree-id4339 . -1) (undo-tree-id4340 . -1) (undo-tree-id4341 . -1) (undo-tree-id4342 . -1) (undo-tree-id4343 . -1) (undo-tree-id4344 . -1) (undo-tree-id4345 . -1) (undo-tree-id4346 . -1) (undo-tree-id4347 . -1) (undo-tree-id4348 . -1) (undo-tree-id4349 . -1) (undo-tree-id4350 . -1) (undo-tree-id4351 . -1) (undo-tree-id4352 . -1) (undo-tree-id4353 . -1) (undo-tree-id4354 . -1) (undo-tree-id4355 . -1) (undo-tree-id4356 . -1) (undo-tree-id4357 . -1) (undo-tree-id4358 . -1) (undo-tree-id4359 . -1) (undo-tree-id4360 . -1) (undo-tree-id4361 . -1) (undo-tree-id4362 . -1) (undo-tree-id4363 . -1) (#("." 0 1 (fontified t)) . -1936) (undo-tree-id4364 . -1) (undo-tree-id4365 . -1) (undo-tree-id4366 . -1) (undo-tree-id4367 . -1) (undo-tree-id4368 . -1) (undo-tree-id4369 . -1) (undo-tree-id4370 . -1) (undo-tree-id4371 . -1) (undo-tree-id4372 . -1) (undo-tree-id4373 . -1) (undo-tree-id4374 . -1) (undo-tree-id4375 . -1) (undo-tree-id4376 . -1) (undo-tree-id4377 . -1) (undo-tree-id4378 . -1) (undo-tree-id4379 . -1) (undo-tree-id4380 . -1) (undo-tree-id4381 . -1) (undo-tree-id4382 . -1) (undo-tree-id4383 . -1) (undo-tree-id4384 . -1) (undo-tree-id4385 . -1) (undo-tree-id4386 . -1) (undo-tree-id4387 . -1) (undo-tree-id4388 . -1) (undo-tree-id4389 . -1) (undo-tree-id4390 . -1) (undo-tree-id4391 . -1) (undo-tree-id4392 . -1) (undo-tree-id4393 . -1) (undo-tree-id4394 . -1) (undo-tree-id4395 . -1) (undo-tree-id4396 . -1) (undo-tree-id4397 . -1) (undo-tree-id4398 . -1) (undo-tree-id4399 . -1) (undo-tree-id4400 . -1) (undo-tree-id4401 . -1) (undo-tree-id4402 . -1) 1937) nil (26048 29960 572561 35000) 0 nil])
([nil nil ((1933 . 1934)) nil (26048 29960 572146 120000) 0 nil])
([nil nil ((1933 . 1936) (#("m" 0 1 (fontified nil)) . 1933) (1933 . 1934) (#("msg" 0 3 (fontified nil)) . -1933) (1933 . 1936) (#("m" 0 1 (fontified t)) . -1933) (undo-tree-id4192 . -1) (undo-tree-id4193 . -1) (undo-tree-id4194 . -1) (undo-tree-id4195 . -1) (undo-tree-id4196 . -1) (undo-tree-id4197 . -1) (undo-tree-id4198 . -1) (undo-tree-id4199 . -1) (undo-tree-id4200 . -1) (undo-tree-id4201 . -1) 1934) nil (26048 29960 572144 584000) 0 nil])
([nil nil ((1936 . 1940)) nil (26048 29960 572136 592000) 0 nil])
([nil nil ((#("str" 0 3 (face font-lock-type-face fontified t)) . -1937) (undo-tree-id4174 . -1) (undo-tree-id4175 . -3) (undo-tree-id4176 . -1) (undo-tree-id4177 . -1) (undo-tree-id4178 . -1) (undo-tree-id4179 . -1) (undo-tree-id4180 . -1) (undo-tree-id4181 . -1) (undo-tree-id4182 . -1) (undo-tree-id4183 . -1) (undo-tree-id4184 . -2) (undo-tree-id4185 . -2) (undo-tree-id4186 . -3) (undo-tree-id4187 . -3) (undo-tree-id4188 . -3) (undo-tree-id4189 . -3) (undo-tree-id4190 . -3) (undo-tree-id4191 . -3) 1940) nil (26048 29960 572135 66000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1936) (undo-tree-id4150 . -1) (undo-tree-id4151 . -1) (undo-tree-id4152 . -1) (undo-tree-id4153 . -1) (undo-tree-id4154 . -1) (undo-tree-id4155 . -1) (undo-tree-id4156 . -1) (undo-tree-id4157 . -1) (undo-tree-id4158 . -1) (undo-tree-id4159 . -1) (undo-tree-id4160 . -1) (undo-tree-id4161 . -1) (undo-tree-id4162 . -1) (undo-tree-id4163 . -1) (undo-tree-id4164 . -1) (undo-tree-id4165 . -1) (undo-tree-id4166 . -1) (undo-tree-id4167 . -1) (undo-tree-id4168 . -1) (undo-tree-id4169 . -1) (undo-tree-id4170 . -1) (undo-tree-id4171 . -1) (undo-tree-id4172 . -1) (undo-tree-id4173 . -1) 1937) nil (26048 29960 572120 407000) 0 nil])
([nil nil ((1936 . 1937)) nil (26048 29960 572102 922000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1936) (undo-tree-id4147 . -1) (undo-tree-id4148 . -1) (undo-tree-id4149 . -1) 1937) nil (26048 29960 572100 715000) 0 nil])
([nil nil ((1937 . 1938)) nil (26048 29960 572089 11000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -1892) (undo-tree-id4534 . -1) (undo-tree-id4535 . -1) (undo-tree-id4536 . -1) (undo-tree-id4537 . -1) (undo-tree-id4538 . -1) (undo-tree-id4539 . -1) (undo-tree-id4540 . -1) (undo-tree-id4541 . -1) (undo-tree-id4542 . -1) 1893 (t 26048 29960 590199 648000)) nil (26048 30030 726897 618000) 0 nil])
([nil nil ((1892 . 1895)) nil (26048 30030 726890 614000) 0 nil])
([nil nil ((1896 . 1897)) nil (26048 30030 726889 982000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1896) (undo-tree-id4528 . -1) (undo-tree-id4529 . -1) (undo-tree-id4530 . -1) (undo-tree-id4531 . -1) (undo-tree-id4532 . -1) (undo-tree-id4533 . -1) 1897) nil (26048 30030 726888 71000) 0 nil])
([nil nil ((1897 . 1901)) nil (26048 30030 726876 583000) 0 nil])
([nil nil ((1901 . 1902)) nil (26048 30030 726872 475000) 0 nil])
([nil nil ((1901 . 1903) (t 26048 30030 743537 234000)) nil (26048 30042 486013 135000) 0 nil])
([nil nil ((1903 . 1904)) nil (26048 30042 486008 591000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1896) (undo-tree-id4543 . -1) (undo-tree-id4544 . -1) (undo-tree-id4545 . -1) (undo-tree-id4546 . -1) (undo-tree-id4547 . -1) (undo-tree-id4548 . -1) (undo-tree-id4549 . -1) (undo-tree-id4550 . -1) (undo-tree-id4551 . -1) (undo-tree-id4552 . -1) (undo-tree-id4553 . -1) (undo-tree-id4554 . -1) (undo-tree-id4555 . -1) (undo-tree-id4556 . -1) (undo-tree-id4557 . -1) (undo-tree-id4558 . -1) (#("i" 0 1 (fontified t)) . -1897) (undo-tree-id4559 . -1) (undo-tree-id4560 . -1) (undo-tree-id4561 . -1) (undo-tree-id4562 . -1) (undo-tree-id4563 . -1) (undo-tree-id4564 . -1) (undo-tree-id4565 . -1) (undo-tree-id4566 . -1) (undo-tree-id4567 . -1) (undo-tree-id4568 . -1) (undo-tree-id4569 . -1) (undo-tree-id4570 . -1) (undo-tree-id4571 . -1) (undo-tree-id4572 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -1898) (undo-tree-id4573 . -1) (undo-tree-id4574 . -1) (undo-tree-id4575 . -1) (undo-tree-id4576 . -1) (undo-tree-id4577 . -1) (undo-tree-id4578 . -1) (undo-tree-id4579 . -1) (undo-tree-id4580 . -1) (undo-tree-id4581 . -1) (undo-tree-id4582 . -1) (undo-tree-id4583 . -1) (undo-tree-id4584 . -1) (#(" " 0 1 (fontified t)) . -1899) (undo-tree-id4585 . -1) (undo-tree-id4586 . -1) (undo-tree-id4587 . -1) (undo-tree-id4588 . -1) (undo-tree-id4589 . -1) (undo-tree-id4590 . -1) (undo-tree-id4591 . -1) (undo-tree-id4592 . -1) (undo-tree-id4593 . -1) (undo-tree-id4594 . -1) (#("1" 0 1 (fontified t)) . -1900) (undo-tree-id4595 . -1) (undo-tree-id4596 . -1) (undo-tree-id4597 . -1) (undo-tree-id4598 . -1) (undo-tree-id4599 . -1) (undo-tree-id4600 . -1) (undo-tree-id4601 . -1) (undo-tree-id4602 . -1) 1901 (t 26048 30042 533537 944000)) nil (26048 30050 378202 202000) 0 nil])
([nil nil ((1899 . 1904)) nil (26048 30050 378152 736000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . -1903) (undo-tree-id4698 . -1) (undo-tree-id4699 . -1) (undo-tree-id4700 . -1) (undo-tree-id4701 . -1) (undo-tree-id4702 . -1) (undo-tree-id4703 . -1) (undo-tree-id4704 . -1) (undo-tree-id4705 . -1) (undo-tree-id4706 . -1) (undo-tree-id4707 . -1) (undo-tree-id4708 . -1) (undo-tree-id4709 . -1) (undo-tree-id4710 . -1) 1904 (t 26048 30050 393538 425000)) nil (26048 30058 416579 658000) 0 nil])
([nil nil ((#("if " 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t)) . -1900) (undo-tree-id4683 . -3) (undo-tree-id4684 . -3) (undo-tree-id4685 . -3) (undo-tree-id4686 . -3) (undo-tree-id4687 . -3) (undo-tree-id4688 . -3) (undo-tree-id4689 . -3) (undo-tree-id4690 . -3) (undo-tree-id4691 . -3) (undo-tree-id4692 . -3) (undo-tree-id4693 . -3) (undo-tree-id4694 . -3) (undo-tree-id4695 . -3) (undo-tree-id4696 . -3) (undo-tree-id4697 . -3) 1903) nil (26048 30058 416569 946000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1896) (undo-tree-id4603 . -1) (undo-tree-id4604 . -1) (undo-tree-id4605 . -1) (undo-tree-id4606 . -1) (undo-tree-id4607 . -1) (undo-tree-id4608 . -1) (undo-tree-id4609 . -1) (undo-tree-id4610 . -1) (undo-tree-id4611 . -1) (undo-tree-id4612 . -1) (undo-tree-id4613 . -1) (undo-tree-id4614 . -1) (undo-tree-id4615 . -1) (undo-tree-id4616 . -1) (undo-tree-id4617 . -1) (undo-tree-id4618 . -1) (undo-tree-id4619 . -1) (undo-tree-id4620 . -1) (undo-tree-id4621 . -1) (undo-tree-id4622 . -1) (undo-tree-id4623 . -1) (undo-tree-id4624 . -1) (undo-tree-id4625 . -1) (#("=" 0 1 (fontified t)) . -1897) (undo-tree-id4626 . -1) (undo-tree-id4627 . -1) (undo-tree-id4628 . -1) (undo-tree-id4629 . -1) (undo-tree-id4630 . -1) (undo-tree-id4631 . -1) (undo-tree-id4632 . -1) (undo-tree-id4633 . -1) (undo-tree-id4634 . -1) (undo-tree-id4635 . -1) (undo-tree-id4636 . -1) (undo-tree-id4637 . -1) (undo-tree-id4638 . -1) (undo-tree-id4639 . -1) (undo-tree-id4640 . -1) (undo-tree-id4641 . -1) (undo-tree-id4642 . -1) (undo-tree-id4643 . -1) (undo-tree-id4644 . -1) (undo-tree-id4645 . -1) (undo-tree-id4646 . -1) (#(">" 0 1 (syntax-table (1) fontified t)) . -1898) (undo-tree-id4647 . -1) (undo-tree-id4648 . -1) (undo-tree-id4649 . -1) (undo-tree-id4650 . -1) (undo-tree-id4651 . -1) (undo-tree-id4652 . -1) (undo-tree-id4653 . -1) (undo-tree-id4654 . -1) (undo-tree-id4655 . -1) (undo-tree-id4656 . -1) (undo-tree-id4657 . -1) (undo-tree-id4658 . -1) (undo-tree-id4659 . -1) (undo-tree-id4660 . -1) (undo-tree-id4661 . -1) (undo-tree-id4662 . -1) (undo-tree-id4663 . -1) (undo-tree-id4664 . -1) (undo-tree-id4665 . -1) (#(" " 0 1 (fontified t)) . -1899) (undo-tree-id4666 . -1) (undo-tree-id4667 . -1) (undo-tree-id4668 . -1) (undo-tree-id4669 . -1) (undo-tree-id4670 . -1) (undo-tree-id4671 . -1) (undo-tree-id4672 . -1) (undo-tree-id4673 . -1) (undo-tree-id4674 . -1) (undo-tree-id4675 . -1) (undo-tree-id4676 . -1) (undo-tree-id4677 . -1) (undo-tree-id4678 . -1) (undo-tree-id4679 . -1) (undo-tree-id4680 . -1) (undo-tree-id4681 . -1) (undo-tree-id4682 . -1) 1900) nil (26048 30058 416554 116000) 0 nil])
([nil nil ((1896 . 1902) (t 26048 30058 463538 925000)) nil (26048 30150 54391 597000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1902) (undo-tree-id4723 . 1)) nil (26048 30150 54389 942000) 0 nil])
([nil nil ((apply yas--snippet-revive 1900 1904 #s(yas--snippet nil nil nil 38 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 38 nil nil nil nil)) (1900 . 1904) (#("true" 0 4 (fontified nil)) . 1900) (1900 . 1904) (#("tr" 0 2 (fontified nil)) . 1900) (1900 . 1902) (#("true" 0 4 (fontified nil)) . -1900) (1900 . 1904) (#("tr" 0 2 (fontified t)) . -1900) (undo-tree-id4711 . -2) (undo-tree-id4712 . -1) (undo-tree-id4713 . -1) (undo-tree-id4714 . -1) (undo-tree-id4715 . -1) (undo-tree-id4716 . -1) (undo-tree-id4717 . -2) (undo-tree-id4718 . -2) (undo-tree-id4719 . -2) (undo-tree-id4720 . -2) (undo-tree-id4721 . -2) (undo-tree-id4722 . -2) 1902) nil (26048 30150 54384 82000) 0 nil])
([nil nil ((#("true" 0 4 (fontified t)) . -1900) (undo-tree-id4977 . -4) (undo-tree-id4978 . -4) (undo-tree-id4979 . -4) (undo-tree-id4980 . -4) (undo-tree-id4981 . -4) (undo-tree-id4982 . -4) (undo-tree-id4983 . -4) (undo-tree-id4984 . -4) (undo-tree-id4985 . -4) (undo-tree-id4986 . -4) (undo-tree-id4987 . -4) (undo-tree-id4988 . -4) (undo-tree-id4989 . -4) (undo-tree-id4990 . -4) (undo-tree-id4991 . -4) 1904 (t 26048 30150 70211 171000)) nil (26048 30243 971111 428000) 0 nil])
([nil nil ((1900 . 1908)) nil (26048 30243 970897 858000) 0 nil])
([nil nil ((#("name" 0 4 (fontified t)) . -1904) (undo-tree-id4957 . -4) (undo-tree-id4958 . -1) (undo-tree-id4959 . -1) (undo-tree-id4960 . -1) (undo-tree-id4961 . -1) (undo-tree-id4962 . -1) (undo-tree-id4963 . -2) (undo-tree-id4964 . -2) (undo-tree-id4965 . -2) (undo-tree-id4966 . -3) (undo-tree-id4967 . -3) (undo-tree-id4968 . -4) (undo-tree-id4969 . -4) (undo-tree-id4970 . -4) (undo-tree-id4971 . -4) (undo-tree-id4972 . -4) (undo-tree-id4973 . -4) (undo-tree-id4974 . -4) (undo-tree-id4975 . -4) (undo-tree-id4976 . -4) 1908) nil (26048 30243 970896 463000) 0 nil])
([nil nil ((1904 . 1905)) nil (26048 30243 970883 749000) 0 nil])
([nil nil ((1904 . 1907)) nil (26048 30243 970883 118000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -1904) (undo-tree-id4915 . -1) (undo-tree-id4916 . -1) (undo-tree-id4917 . -1) (undo-tree-id4918 . -1) (undo-tree-id4919 . -1) (undo-tree-id4920 . -1) (undo-tree-id4921 . -1) (undo-tree-id4922 . -1) (undo-tree-id4923 . -1) (undo-tree-id4924 . -1) (undo-tree-id4925 . -1) (undo-tree-id4926 . -1) (undo-tree-id4927 . -1) (undo-tree-id4928 . -1) (undo-tree-id4929 . -1) (undo-tree-id4930 . -1) (undo-tree-id4931 . -1) (undo-tree-id4932 . -1) (undo-tree-id4933 . -1) (#("r" 0 1 (fontified t)) . -1905) (undo-tree-id4934 . -1) (undo-tree-id4935 . -1) (undo-tree-id4936 . -1) (undo-tree-id4937 . -1) (undo-tree-id4938 . -1) (undo-tree-id4939 . -1) (undo-tree-id4940 . -1) (undo-tree-id4941 . -1) (undo-tree-id4942 . -1) (undo-tree-id4943 . -1) (undo-tree-id4944 . -1) (undo-tree-id4945 . -1) (undo-tree-id4946 . -1) (undo-tree-id4947 . -1) (#("o" 0 1 (fontified t)) . -1906) (undo-tree-id4948 . -1) (undo-tree-id4949 . -1) (undo-tree-id4950 . -1) (undo-tree-id4951 . -1) (undo-tree-id4952 . -1) (undo-tree-id4953 . -1) (undo-tree-id4954 . -1) (undo-tree-id4955 . -1) (undo-tree-id4956 . -1) 1907) nil (26048 30243 970880 739000) 0 nil])
([nil nil ((1904 . 1905)) nil (26048 30243 970766 556000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -1904) (undo-tree-id4911 . -1) (undo-tree-id4912 . -1) (undo-tree-id4913 . -1) (undo-tree-id4914 . -1) 1905) nil (26048 30243 970765 773000) 0 nil])
([nil nil ((1904 . 1907)) nil (26048 30243 970762 830000) 0 nil])
([nil nil ((#("get" 0 3 (fontified t)) . -1904) (undo-tree-id4895 . -3) (undo-tree-id4896 . -1) (undo-tree-id4897 . -1) (undo-tree-id4898 . -1) (undo-tree-id4899 . -1) (undo-tree-id4900 . -2) (undo-tree-id4901 . -2) (undo-tree-id4902 . -3) (undo-tree-id4903 . -3) (undo-tree-id4904 . -3) (undo-tree-id4905 . -3) (undo-tree-id4906 . -3) (undo-tree-id4907 . -3) (undo-tree-id4908 . -3) (undo-tree-id4909 . -3) (undo-tree-id4910 . -3) 1907) nil (26048 30243 970761 688000) 0 nil])
([nil nil ((#("src." 0 4 (fontified t)) . -1900) (undo-tree-id4796 . -4) (undo-tree-id4797 . -1) (undo-tree-id4798 . -1) (undo-tree-id4799 . -1) (undo-tree-id4800 . -2) (undo-tree-id4801 . -2) (undo-tree-id4802 . -3) (undo-tree-id4803 . -3) (undo-tree-id4804 . -3) (undo-tree-id4805 . -3) (undo-tree-id4806 . -4) (undo-tree-id4807 . -4) (undo-tree-id4808 . -4) (undo-tree-id4809 . -4) (undo-tree-id4810 . -4) (undo-tree-id4811 . -4) (undo-tree-id4812 . -4) (undo-tree-id4813 . -4) (undo-tree-id4814 . -4) (undo-tree-id4815 . -4) (undo-tree-id4816 . -4) (undo-tree-id4817 . -4) (undo-tree-id4818 . -4) (undo-tree-id4819 . -4) (undo-tree-id4820 . -4) (undo-tree-id4821 . -4) (undo-tree-id4822 . -4) (undo-tree-id4823 . -4) (undo-tree-id4824 . -4) (undo-tree-id4825 . -4) (undo-tree-id4826 . -4) (undo-tree-id4827 . -4) (undo-tree-id4828 . -4) (undo-tree-id4829 . -4) (undo-tree-id4830 . -4) (undo-tree-id4831 . -4) (undo-tree-id4832 . -4) (undo-tree-id4833 . -4) (undo-tree-id4834 . -4) (undo-tree-id4835 . -4) (undo-tree-id4836 . -4) (undo-tree-id4837 . -4) (undo-tree-id4838 . -4) (undo-tree-id4839 . -4) (undo-tree-id4840 . -4) (undo-tree-id4841 . -4) (undo-tree-id4842 . -4) (undo-tree-id4843 . -4) (undo-tree-id4844 . -4) (undo-tree-id4845 . -4) (undo-tree-id4846 . -4) (undo-tree-id4847 . -4) (undo-tree-id4848 . -4) (undo-tree-id4849 . -4) (undo-tree-id4850 . -4) (undo-tree-id4851 . -4) (undo-tree-id4852 . -4) (undo-tree-id4853 . -4) (undo-tree-id4854 . -4) (undo-tree-id4855 . -4) (undo-tree-id4856 . -4) (undo-tree-id4857 . -4) (undo-tree-id4858 . -4) (undo-tree-id4859 . -4) (undo-tree-id4860 . -4) (undo-tree-id4861 . -4) (undo-tree-id4862 . -4) (undo-tree-id4863 . -4) (undo-tree-id4864 . -4) (undo-tree-id4865 . -4) (undo-tree-id4866 . -4) (undo-tree-id4867 . -4) (undo-tree-id4868 . -4) (undo-tree-id4869 . -4) (undo-tree-id4870 . -4) (undo-tree-id4871 . -4) (undo-tree-id4872 . -4) (undo-tree-id4873 . -4) (undo-tree-id4874 . -4) (undo-tree-id4875 . -4) (undo-tree-id4876 . -4) (undo-tree-id4877 . -4) (undo-tree-id4878 . -4) (undo-tree-id4879 . -4) (undo-tree-id4880 . -4) (undo-tree-id4881 . -4) (undo-tree-id4882 . -4) (undo-tree-id4883 . -4) (undo-tree-id4884 . -4) (undo-tree-id4885 . -4) (undo-tree-id4886 . -4) (undo-tree-id4887 . -4) (undo-tree-id4888 . -4) (undo-tree-id4889 . -4) (undo-tree-id4890 . -4) (undo-tree-id4891 . -4) (undo-tree-id4892 . -4) (undo-tree-id4893 . -4) (undo-tree-id4894 . -4) 1904) nil (26048 30243 970748 550000) 0 nil])
([nil nil ((1900 . 1903)) nil (26048 30243 970688 732000) 0 nil])
([nil nil ((1900 . 1907) (#("Ele" 0 3 (fontified nil)) . 1900) (1900 . 1903) (#("Element (alias GstElement)" 0 26 (fontified nil)) . -1900) (1900 . 1926) (#("Ele" 0 3 (face font-lock-type-face fontified t)) . -1900) (undo-tree-id4787 . -3) (undo-tree-id4788 . -1) (undo-tree-id4789 . -1) (undo-tree-id4790 . -1) (undo-tree-id4791 . -2) (undo-tree-id4792 . -2) (undo-tree-id4793 . -2) (undo-tree-id4794 . -3) (undo-tree-id4795 . -3) 1903) nil (26048 30243 970687 457000) 0 nil])
([nil nil ((1907 . 1917)) nil (26048 30243 970680 816000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1914 1917 nil nil nil t #s(yas--exit 1918 nil))) #s(yas--exit 1918 nil) 39 nil #s(yas--field 1 1914 1917 nil nil nil t #s(yas--exit 1918 nil)) nil nil)) (1909 . 1920) (#("name(${1:&self})$0" 0 18 (fontified nil)) . 1909) (1909 . 1927) (#("get_name" 0 8 (fontified nil)) . 1909) (1909 . 1917) (#("name(…) (alias gst_object_get_name, get_name) (as GstObjectExt)" 0 63 (fontified nil)) . -1909) (1909 . 1972) (#("get_name" 0 8 (fontified t)) . -1909) (undo-tree-id4763 . -8) (undo-tree-id4764 . -1) (undo-tree-id4765 . -1) (undo-tree-id4766 . -1) (undo-tree-id4767 . -2) (undo-tree-id4768 . -2) (undo-tree-id4769 . -3) (undo-tree-id4770 . -3) (undo-tree-id4771 . -3) (undo-tree-id4772 . -3) (undo-tree-id4773 . -4) (undo-tree-id4774 . -4) (undo-tree-id4775 . -4) (undo-tree-id4776 . -5) (undo-tree-id4777 . -5) (undo-tree-id4778 . -6) (undo-tree-id4779 . -6) (undo-tree-id4780 . -7) (undo-tree-id4781 . -7) (undo-tree-id4782 . -8) (undo-tree-id4783 . -8) (undo-tree-id4784 . -8) (undo-tree-id4785 . -8) (undo-tree-id4786 . -8) 1917) nil (26048 30243 970678 750000) 0 nil])
([nil nil ((1915 . 1917) (#("&self" 0 1 (face rust-ampersand-face fontified nil) 1 5 (face font-lock-keyword-face fontified nil)) . 1915) (undo-tree-id4762 . -5) (1914 . 1915)) nil (26048 30243 970663 241000) 0 nil])
([nil nil ((1914 . 1917) (#("src" 0 3 (fontified nil)) . 1914) (undo-tree-id4745 . -3) (1914 . 1917) (#("src" 0 3 (fontified t)) . -1914) (undo-tree-id4746 . -3) (undo-tree-id4747 . -3) (undo-tree-id4748 . -3) (undo-tree-id4749 . -1) (undo-tree-id4750 . -1) (undo-tree-id4751 . -1) (undo-tree-id4752 . -1) (undo-tree-id4753 . -1) (undo-tree-id4754 . -1) (undo-tree-id4755 . -2) (undo-tree-id4756 . -2) (undo-tree-id4757 . -2) (undo-tree-id4758 . -3) (undo-tree-id4759 . -3) (undo-tree-id4760 . -3) (undo-tree-id4761 . -3) 1917) nil (26048 30243 970660 880000) 0 nil])
([nil nil ((apply yas--snippet-revive 1909 1918 #s(yas--snippet nil (#s(yas--field 1 1914 1917 nil nil nil t #s(yas--exit 1918 nil))) #s(yas--exit 1918 nil) 39 nil #s(yas--field 1 1914 1917 nil nil nil t #s(yas--exit 1918 nil)) nil nil))) nil (26048 30243 970648 895000) 0 nil])
([nil nil ((1918 . 1924)) nil (26048 30243 970648 196000) 0 nil])
([nil nil ((1923 . 1927)) nil (26048 30243 970647 411000) 0 nil])
([nil nil ((#("n" 0 1 (face font-lock-string-face fontified t)) . -1924) (undo-tree-id4724 . -1) (undo-tree-id4725 . -1) (undo-tree-id4726 . -1) (undo-tree-id4727 . -1) (undo-tree-id4728 . -1) (undo-tree-id4729 . -1) (undo-tree-id4730 . -1) (undo-tree-id4731 . -1) (undo-tree-id4732 . -1) (undo-tree-id4733 . -1) (undo-tree-id4734 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -1925) (undo-tree-id4735 . -1) (undo-tree-id4736 . -1) (undo-tree-id4737 . -1) (undo-tree-id4738 . -1) (undo-tree-id4739 . -1) (undo-tree-id4740 . -1) (undo-tree-id4741 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -1926) (undo-tree-id4742 . -1) (undo-tree-id4743 . -1) (undo-tree-id4744 . -1) 1927) nil (26048 30243 970644 102000) 0 nil])
([nil nil ((1924 . 1927)) nil (26048 30243 970555 5000) 0 nil])
([nil nil ((1917 . 1920) (t 26048 30244 20216 849000)) nil (26048 30257 483288 869000) 0 nil])
([nil nil ((apply yas--snippet-revive 1918 1930 #s(yas--snippet nil nil #s(yas--exit 1930 nil) 40 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1930 nil) 40 nil nil nil nil)) (1918 . 1930) (#("upcast_ref()$0" 0 14 (fontified nil)) . 1918) (1918 . 1932) (#("up" 0 2 (fontified nil)) . 1918) (1918 . 1920) (#("upcast_ref()" 0 12 (fontified nil)) . -1918) (1918 . 1930) (#("up" 0 2 (fontified t)) . -1918) (undo-tree-id4992 . -2) (undo-tree-id4993 . -2) (undo-tree-id4994 . -1) (undo-tree-id4995 . -1) (undo-tree-id4996 . -1) (undo-tree-id4997 . -2) (undo-tree-id4998 . -2) (undo-tree-id4999 . -2) (undo-tree-id5000 . -2) (undo-tree-id5001 . -2) (undo-tree-id5002 . -2) (undo-tree-id5003 . -2) (undo-tree-id5004 . -2) (undo-tree-id5005 . -2) 1920) nil (26048 30257 483284 152000) 0 nil])
([nil nil ((#("ref()" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-5-face) fontified t) 4 5 (face (rainbow-delimiters-depth-5-face) fontified t)) . -1925) (undo-tree-id5663 . -5) (undo-tree-id5664 . -5) (undo-tree-id5665 . -5) (undo-tree-id5666 . -5) (undo-tree-id5667 . -5) (undo-tree-id5668 . -5) (undo-tree-id5669 . -5) (undo-tree-id5670 . -5) (undo-tree-id5671 . -5) (undo-tree-id5672 . -5) (undo-tree-id5673 . -5) (undo-tree-id5674 . -5) (undo-tree-id5675 . -5) (undo-tree-id5676 . -5) (undo-tree-id5677 . -5) (undo-tree-id5678 . -5) (undo-tree-id5679 . -5) (undo-tree-id5680 . -5) (undo-tree-id5681 . -5) (undo-tree-id5682 . -5) (undo-tree-id5683 . -5) (undo-tree-id5684 . -5) (undo-tree-id5685 . -5) (undo-tree-id5686 . -5) (undo-tree-id5687 . -5) (undo-tree-id5688 . -5) (undo-tree-id5689 . -5) 1930 (t 26048 30257 500217 660000)) nil (26048 30336 437781 668000) 0 nil])
([nil nil ((#("upcast_" 0 7 (fontified t)) . -1918) (undo-tree-id5634 . -7) (undo-tree-id5635 . -7) (undo-tree-id5636 . -7) (undo-tree-id5637 . -7) (undo-tree-id5638 . -7) (undo-tree-id5639 . -7) (undo-tree-id5640 . -7) (undo-tree-id5641 . -7) (undo-tree-id5642 . -7) (undo-tree-id5643 . -7) (undo-tree-id5644 . -7) (undo-tree-id5645 . -7) (undo-tree-id5646 . -7) (undo-tree-id5647 . -7) (undo-tree-id5648 . -7) (undo-tree-id5649 . -7) (undo-tree-id5650 . -7) (undo-tree-id5651 . -7) (undo-tree-id5652 . -7) (undo-tree-id5653 . -7) (undo-tree-id5654 . -7) (undo-tree-id5655 . -7) (undo-tree-id5656 . -7) (undo-tree-id5657 . -7) (undo-tree-id5658 . -7) (undo-tree-id5659 . -7) (undo-tree-id5660 . -7) (undo-tree-id5661 . -7) (undo-tree-id5662 . -7) 1925) nil (26048 30336 437762 307000) 0 nil])
([nil nil ((1918 . 1920)) nil (26048 30336 437742 115000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1917) (undo-tree-id5551 . -1) (undo-tree-id5552 . -1) (undo-tree-id5553 . -1) (undo-tree-id5554 . -1) (undo-tree-id5555 . -1) (undo-tree-id5556 . -1) (undo-tree-id5557 . -1) (undo-tree-id5558 . -1) (undo-tree-id5559 . -1) (undo-tree-id5560 . -1) (undo-tree-id5561 . -1) (undo-tree-id5562 . -1) (undo-tree-id5563 . -1) (undo-tree-id5564 . -1) (undo-tree-id5565 . -1) (undo-tree-id5566 . -1) (undo-tree-id5567 . -1) (undo-tree-id5568 . -1) (undo-tree-id5569 . -1) (undo-tree-id5570 . -1) (undo-tree-id5571 . -1) (undo-tree-id5572 . -1) (undo-tree-id5573 . -1) (undo-tree-id5574 . -1) (undo-tree-id5575 . -1) (undo-tree-id5576 . -1) (undo-tree-id5577 . -1) (undo-tree-id5578 . -1) (undo-tree-id5579 . -1) (undo-tree-id5580 . -1) (undo-tree-id5581 . -1) (undo-tree-id5582 . -1) (undo-tree-id5583 . -1) (undo-tree-id5584 . -1) (undo-tree-id5585 . -1) (undo-tree-id5586 . -1) (undo-tree-id5587 . -1) (undo-tree-id5588 . -1) (undo-tree-id5589 . -1) (undo-tree-id5590 . -1) (undo-tree-id5591 . -1) (undo-tree-id5592 . -1) (undo-tree-id5593 . -1) (undo-tree-id5594 . -1) (undo-tree-id5595 . -1) (undo-tree-id5596 . -1) (undo-tree-id5597 . -1) (undo-tree-id5598 . -1) (undo-tree-id5599 . -1) (undo-tree-id5600 . -1) (undo-tree-id5601 . -1) (undo-tree-id5602 . -1) (undo-tree-id5603 . -1) (undo-tree-id5604 . -1) (undo-tree-id5605 . -1) (undo-tree-id5606 . -1) (undo-tree-id5607 . -1) (undo-tree-id5608 . -1) (undo-tree-id5609 . -1) (undo-tree-id5610 . -1) (undo-tree-id5611 . -1) (#("c" 0 1 (fontified t)) . -1918) (undo-tree-id5612 . -1) (undo-tree-id5613 . -1) (undo-tree-id5614 . -1) (undo-tree-id5615 . -1) (undo-tree-id5616 . -1) (undo-tree-id5617 . -1) (undo-tree-id5618 . -1) (undo-tree-id5619 . -1) (undo-tree-id5620 . -1) (undo-tree-id5621 . -1) (undo-tree-id5622 . -1) (undo-tree-id5623 . -1) (undo-tree-id5624 . -1) (undo-tree-id5625 . -1) (undo-tree-id5626 . -1) (#("a" 0 1 (fontified t)) . -1919) (undo-tree-id5627 . -1) (undo-tree-id5628 . -1) (undo-tree-id5629 . -1) (undo-tree-id5630 . -1) (undo-tree-id5631 . -1) (undo-tree-id5632 . -1) (undo-tree-id5633 . -1) 1920) nil (26048 30336 437737 285000) 0 nil])
([nil nil ((#("src" 0 3 (fontified t)) . -1914) (undo-tree-id5474 . -3) (undo-tree-id5475 . -3) (undo-tree-id5476 . -2) (undo-tree-id5477 . -2) (undo-tree-id5478 . -3) (undo-tree-id5479 . -3) (undo-tree-id5480 . -3) (undo-tree-id5481 . -3) (undo-tree-id5482 . -3) (undo-tree-id5483 . -3) (undo-tree-id5484 . -3) (undo-tree-id5485 . -3) (undo-tree-id5486 . -3) (undo-tree-id5487 . -3) (undo-tree-id5488 . -3) (undo-tree-id5489 . -3) (undo-tree-id5490 . -3) (undo-tree-id5491 . -3) (undo-tree-id5492 . -3) (undo-tree-id5493 . -3) (undo-tree-id5494 . -3) (undo-tree-id5495 . -3) (undo-tree-id5496 . -3) (undo-tree-id5497 . -3) (undo-tree-id5498 . -3) (undo-tree-id5499 . -3) (undo-tree-id5500 . -3) (undo-tree-id5501 . -3) (undo-tree-id5502 . -3) (undo-tree-id5503 . -3) (undo-tree-id5504 . -3) (undo-tree-id5505 . -3) (undo-tree-id5506 . -3) (undo-tree-id5507 . -3) (undo-tree-id5508 . -3) (undo-tree-id5509 . -3) (undo-tree-id5510 . -3) (undo-tree-id5511 . -3) (undo-tree-id5512 . -3) (undo-tree-id5513 . -3) (undo-tree-id5514 . -3) (undo-tree-id5515 . -3) (undo-tree-id5516 . -3) (undo-tree-id5517 . -3) (undo-tree-id5518 . -3) (undo-tree-id5519 . -3) (undo-tree-id5520 . -3) (undo-tree-id5521 . -3) (undo-tree-id5522 . -3) (undo-tree-id5523 . -3) (undo-tree-id5524 . -3) (undo-tree-id5525 . -3) (undo-tree-id5526 . -3) (undo-tree-id5527 . -3) (undo-tree-id5528 . -3) (undo-tree-id5529 . -3) (undo-tree-id5530 . -3) (undo-tree-id5531 . -3) (undo-tree-id5532 . -3) (undo-tree-id5533 . -3) (undo-tree-id5534 . -3) (undo-tree-id5535 . -3) (undo-tree-id5536 . -3) (undo-tree-id5537 . -3) (undo-tree-id5538 . -3) (undo-tree-id5539 . -3) (undo-tree-id5540 . -3) (undo-tree-id5541 . -3) (undo-tree-id5542 . -3) (undo-tree-id5543 . -3) (undo-tree-id5544 . -3) (undo-tree-id5545 . -3) (undo-tree-id5546 . -3) (undo-tree-id5547 . -3) (undo-tree-id5548 . -3) (undo-tree-id5549 . -3) (undo-tree-id5550 . -3) 1917) nil (26048 30336 437024 930000) 0 nil])
([nil nil ((1914 . 1915)) nil (26048 30336 436974 493000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -1914) (undo-tree-id5463 . -1) (undo-tree-id5464 . -1) (undo-tree-id5465 . -1) (undo-tree-id5466 . -1) (undo-tree-id5467 . -1) (undo-tree-id5468 . -1) (undo-tree-id5469 . -1) (undo-tree-id5470 . -1) (undo-tree-id5471 . -1) (undo-tree-id5472 . -1) (undo-tree-id5473 . -1) 1915) nil (26048 30371 906290 140000) 0 nil])
([nil nil ((#("zbar\"" 0 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t)) . -1920) (undo-tree-id5922 . -5) (undo-tree-id5923 . -5) (undo-tree-id5924 . -4) (undo-tree-id5925 . -4) (undo-tree-id5926 . -4) (undo-tree-id5927 . -5) 1925) nil (26048 30377 486038 678000) 0 nil] [nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . 1914)) ((1914 . 1915)) (26048 30371 729157 212000) 0 nil])
([nil nil ((#("name() == \"" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t) 5 6 (face (rainbow-delimiters-depth-4-face) fontified t) 6 10 (fontified t) 10 11 (face font-lock-string-face fontified t)) . -1909) (undo-tree-id5911 . -11) (undo-tree-id5912 . -11) (undo-tree-id5913 . -5) (undo-tree-id5914 . -5) (undo-tree-id5915 . -5) (undo-tree-id5916 . -11) (undo-tree-id5917 . -11) (undo-tree-id5918 . -11) (undo-tree-id5919 . -11) (undo-tree-id5920 . -11) (undo-tree-id5921 . -11) 1920) nil (26048 30377 486033 511000) 0 nil])
([nil nil ((#("name(" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t)) . -1909) (undo-tree-id5333 . -5) (undo-tree-id5334 . -5) (undo-tree-id5336 . -5) (undo-tree-id5338 . -5) (undo-tree-id5340 . -5) (undo-tree-id5342 . -5) (undo-tree-id5344 . -5) (undo-tree-id5346 . -5) (undo-tree-id5348 . -5) (undo-tree-id5350 . -5) (undo-tree-id5352 . -5) (undo-tree-id5354 . -5) (undo-tree-id5356 . -5) (undo-tree-id5358 . -5) (undo-tree-id5360 . -5) (undo-tree-id5362 . -5) (undo-tree-id5364 . -5) (undo-tree-id5366 . -5) (undo-tree-id5368 . -5) (undo-tree-id5370 . -5) (undo-tree-id5372 . -5) (undo-tree-id5374 . -5) (undo-tree-id5376 . -5) (undo-tree-id5378 . -5) (undo-tree-id5380 . -5) (undo-tree-id5382 . -5) (undo-tree-id5384 . -5) (undo-tree-id5386 . -5) (undo-tree-id5388 . -5) (undo-tree-id5390 . -5) (undo-tree-id5392 . -5) (undo-tree-id5394 . -5) (undo-tree-id5396 . -5) (undo-tree-id5398 . -5) (undo-tree-id5400 . -5) (undo-tree-id5402 . -5) (undo-tree-id5404 . -5) (undo-tree-id5406 . -5) (undo-tree-id5408 . -5) (undo-tree-id5410 . -5) (undo-tree-id5412 . -5) (undo-tree-id5414 . -5) (undo-tree-id5416 . -5) (undo-tree-id5418 . -5) (undo-tree-id5420 . -5) (undo-tree-id5422 . -5) (undo-tree-id5424 . -5) (undo-tree-id5426 . -5) (undo-tree-id5428 . -5) (undo-tree-id5430 . -5) (undo-tree-id5432 . -5) (undo-tree-id5434 . -5) (undo-tree-id5436 . -5) (undo-tree-id5438 . -5) (undo-tree-id5440 . -5) (undo-tree-id5442 . -5) (undo-tree-id5444 . -5) (undo-tree-id5446 . -5) (undo-tree-id5448 . -5) (undo-tree-id5450 . -5) (undo-tree-id5452 . -5) (undo-tree-id5454 . -5) (undo-tree-id5456 . -5) (undo-tree-id5458 . -5) (undo-tree-id5460 . -5) 1914) ((1909 . 1914)) (26048 30371 547047 336000) 0 nil])
([nil nil ((#("Element::" 0 7 (face font-lock-type-face fontified t) 7 8 (fontified t) 8 9 (fontified t)) . -1900) (undo-tree-id5886 . -9) (undo-tree-id5887 . -7) (undo-tree-id5888 . -7) (undo-tree-id5889 . -9) (undo-tree-id5890 . -7) (undo-tree-id5891 . -7) (undo-tree-id5892 . -7) (undo-tree-id5893 . -7) (undo-tree-id5894 . -7) (undo-tree-id5895 . -7) (undo-tree-id5896 . -7) (undo-tree-id5897 . -7) (undo-tree-id5898 . -9) (undo-tree-id5899 . -9) (undo-tree-id5900 . -9) (undo-tree-id5901 . -9) (undo-tree-id5902 . -9) (undo-tree-id5903 . -9) (undo-tree-id5904 . -9) (undo-tree-id5905 . -9) (undo-tree-id5906 . -9) (undo-tree-id5907 . -9) (undo-tree-id5908 . -9) (undo-tree-id5909 . -9) (undo-tree-id5910 . -9) 1909) nil (26048 30377 486022 971000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -1907) (undo-tree-id5061 . -1) (undo-tree-id5062 . -1) (undo-tree-id5064 . -1) (undo-tree-id5066 . -1) (undo-tree-id5068 . -1) (undo-tree-id5070 . -1) (undo-tree-id5072 . -1) (undo-tree-id5074 . -1) (undo-tree-id5076 . -1) (undo-tree-id5078 . -1) (undo-tree-id5080 . -1) (undo-tree-id5082 . -1) (undo-tree-id5084 . -1) (undo-tree-id5086 . -1) (undo-tree-id5088 . -1) (undo-tree-id5090 . -1) (undo-tree-id5092 . -1) (undo-tree-id5094 . -1) (undo-tree-id5096 . -1) (undo-tree-id5098 . -1) (undo-tree-id5100 . -1) (undo-tree-id5102 . -1) (undo-tree-id5104 . -1) (undo-tree-id5106 . -1) (undo-tree-id5108 . -1) (undo-tree-id5110 . -1) (undo-tree-id5112 . -1) (undo-tree-id5114 . -1) (undo-tree-id5116 . -1) (undo-tree-id5118 . -1) (undo-tree-id5120 . -1) (undo-tree-id5122 . -1) (undo-tree-id5124 . -1) (undo-tree-id5126 . -1) (undo-tree-id5128 . -1) (undo-tree-id5130 . -1) (undo-tree-id5132 . -1) (undo-tree-id5134 . -1) (undo-tree-id5136 . -1) (undo-tree-id5138 . -1) (undo-tree-id5140 . -1) (undo-tree-id5142 . -1) (undo-tree-id5144 . -1) (undo-tree-id5146 . -1) (undo-tree-id5148 . -1) (undo-tree-id5150 . -1) (undo-tree-id5152 . -1) (undo-tree-id5154 . -1) (undo-tree-id5156 . -1) (undo-tree-id5158 . -1) (undo-tree-id5160 . -1) (undo-tree-id5162 . -1) (undo-tree-id5164 . -1) (undo-tree-id5166 . -1) (undo-tree-id5168 . -1) (undo-tree-id5170 . -1) (undo-tree-id5172 . -1) (undo-tree-id5174 . -1) (undo-tree-id5176 . -1) (undo-tree-id5178 . -1) (undo-tree-id5180 . -1) (undo-tree-id5182 . -1) (undo-tree-id5184 . -1) (undo-tree-id5186 . -1) (undo-tree-id5188 . -1) (undo-tree-id5190 . -1) (undo-tree-id5192 . -1) (undo-tree-id5194 . -1) (undo-tree-id5196 . -1) (#(":" 0 1 (fontified t)) . -1908) (undo-tree-id5198 . -1) (undo-tree-id5199 . -1) (undo-tree-id5201 . -1) (undo-tree-id5203 . -1) (undo-tree-id5205 . -1) (undo-tree-id5207 . -1) (undo-tree-id5209 . -1) (undo-tree-id5211 . -1) (undo-tree-id5213 . -1) (undo-tree-id5215 . -1) (undo-tree-id5217 . -1) (undo-tree-id5219 . -1) (undo-tree-id5221 . -1) (undo-tree-id5223 . -1) (undo-tree-id5225 . -1) (undo-tree-id5227 . -1) (undo-tree-id5229 . -1) (undo-tree-id5231 . -1) (undo-tree-id5233 . -1) (undo-tree-id5235 . -1) (undo-tree-id5237 . -1) (undo-tree-id5239 . -1) (undo-tree-id5241 . -1) (undo-tree-id5243 . -1) (undo-tree-id5245 . -1) (undo-tree-id5247 . -1) (undo-tree-id5249 . -1) (undo-tree-id5251 . -1) (undo-tree-id5253 . -1) (undo-tree-id5255 . -1) (undo-tree-id5257 . -1) (undo-tree-id5259 . -1) (undo-tree-id5261 . -1) (undo-tree-id5263 . -1) (undo-tree-id5265 . -1) (undo-tree-id5267 . -1) (undo-tree-id5269 . -1) (undo-tree-id5271 . -1) (undo-tree-id5273 . -1) (undo-tree-id5275 . -1) (undo-tree-id5277 . -1) (undo-tree-id5279 . -1) (undo-tree-id5281 . -1) (undo-tree-id5283 . -1) (undo-tree-id5285 . -1) (undo-tree-id5287 . -1) (undo-tree-id5289 . -1) (undo-tree-id5291 . -1) (undo-tree-id5293 . -1) (undo-tree-id5295 . -1) (undo-tree-id5297 . -1) (undo-tree-id5299 . -1) (undo-tree-id5301 . -1) (undo-tree-id5303 . -1) (undo-tree-id5305 . -1) (undo-tree-id5307 . -1) (undo-tree-id5309 . -1) (undo-tree-id5311 . -1) (undo-tree-id5313 . -1) (undo-tree-id5315 . -1) (undo-tree-id5317 . -1) (undo-tree-id5319 . -1) (undo-tree-id5321 . -1) (undo-tree-id5323 . -1) (undo-tree-id5325 . -1) (undo-tree-id5327 . -1) (undo-tree-id5329 . -1) (undo-tree-id5331 . -1) 1909) ((1907 . 1909)) (26048 30371 310396 987000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1896) (undo-tree-id5747 . -1) (undo-tree-id5748 . -1) (undo-tree-id5749 . -1) (undo-tree-id5750 . -1) (undo-tree-id5751 . -1) (undo-tree-id5752 . -1) (undo-tree-id5753 . -1) (undo-tree-id5754 . -1) (undo-tree-id5755 . -1) (undo-tree-id5756 . -1) (undo-tree-id5757 . -1) (undo-tree-id5758 . -1) (undo-tree-id5759 . -1) (undo-tree-id5760 . -1) (undo-tree-id5761 . -1) (undo-tree-id5762 . -1) (undo-tree-id5763 . -1) (undo-tree-id5764 . -1) (undo-tree-id5765 . -1) (undo-tree-id5766 . -1) (undo-tree-id5767 . -1) (undo-tree-id5768 . -1) (undo-tree-id5769 . -1) (undo-tree-id5770 . -1) (undo-tree-id5771 . -1) (undo-tree-id5772 . -1) (undo-tree-id5773 . -1) (undo-tree-id5774 . -1) (undo-tree-id5775 . -1) (undo-tree-id5776 . -1) (undo-tree-id5777 . -1) (undo-tree-id5778 . -1) (undo-tree-id5779 . -1) (undo-tree-id5780 . -1) (undo-tree-id5781 . -1) (undo-tree-id5782 . -1) (undo-tree-id5783 . -1) (undo-tree-id5784 . -1) (#("i" 0 1 (fontified t)) . -1897) (undo-tree-id5785 . -1) (undo-tree-id5786 . -1) (undo-tree-id5787 . -1) (undo-tree-id5788 . -1) (undo-tree-id5789 . -1) (undo-tree-id5790 . -1) (undo-tree-id5791 . -1) (undo-tree-id5792 . -1) (undo-tree-id5793 . -1) (undo-tree-id5794 . -1) (undo-tree-id5795 . -1) (undo-tree-id5796 . -1) (undo-tree-id5797 . -1) (undo-tree-id5798 . -1) (undo-tree-id5799 . -1) (undo-tree-id5800 . -1) (undo-tree-id5801 . -1) (undo-tree-id5802 . -1) (undo-tree-id5803 . -1) (undo-tree-id5804 . -1) (undo-tree-id5805 . -1) (undo-tree-id5806 . -1) (undo-tree-id5807 . -1) (undo-tree-id5808 . -1) (undo-tree-id5809 . -1) (undo-tree-id5810 . -1) (undo-tree-id5811 . -1) (undo-tree-id5812 . -1) (undo-tree-id5813 . -1) (undo-tree-id5814 . -1) (undo-tree-id5815 . -1) (undo-tree-id5816 . -1) (undo-tree-id5817 . -1) (undo-tree-id5818 . -1) (undo-tree-id5819 . -1) (undo-tree-id5820 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -1898) (undo-tree-id5821 . -1) (undo-tree-id5822 . -1) (undo-tree-id5823 . -1) (undo-tree-id5824 . -1) (undo-tree-id5825 . -1) (undo-tree-id5826 . -1) (undo-tree-id5827 . -1) (undo-tree-id5828 . -1) (undo-tree-id5829 . -1) (undo-tree-id5830 . -1) (undo-tree-id5831 . -1) (undo-tree-id5832 . -1) (undo-tree-id5833 . -1) (undo-tree-id5834 . -1) (undo-tree-id5835 . -1) (undo-tree-id5836 . -1) (undo-tree-id5837 . -1) (undo-tree-id5838 . -1) (undo-tree-id5839 . -1) (undo-tree-id5840 . -1) (undo-tree-id5841 . -1) (undo-tree-id5842 . -1) (undo-tree-id5843 . -1) (undo-tree-id5844 . -1) (undo-tree-id5845 . -1) (undo-tree-id5846 . -1) (undo-tree-id5847 . -1) (undo-tree-id5848 . -1) (undo-tree-id5849 . -1) (undo-tree-id5850 . -1) (undo-tree-id5851 . -1) (undo-tree-id5852 . -1) (undo-tree-id5853 . -1) (undo-tree-id5854 . -1) (#(" " 0 1 (fontified t)) . -1899) (undo-tree-id5855 . -1) (undo-tree-id5856 . -1) (undo-tree-id5857 . -1) (undo-tree-id5858 . -1) (undo-tree-id5859 . 1) (undo-tree-id5860 . -1) (undo-tree-id5861 . -1) (undo-tree-id5862 . -1) (undo-tree-id5863 . -1) (undo-tree-id5864 . -1) (undo-tree-id5865 . -1) (undo-tree-id5866 . -1) (undo-tree-id5867 . -1) (undo-tree-id5868 . -1) (undo-tree-id5869 . -1) (undo-tree-id5870 . -1) (undo-tree-id5871 . -1) (undo-tree-id5872 . -1) (undo-tree-id5873 . -1) (undo-tree-id5874 . -1) (undo-tree-id5875 . -1) (undo-tree-id5876 . -1) (undo-tree-id5877 . -1) (undo-tree-id5878 . -1) (undo-tree-id5879 . -1) (undo-tree-id5880 . -1) (undo-tree-id5881 . -1) (undo-tree-id5882 . -1) (undo-tree-id5883 . -1) (undo-tree-id5884 . -1) (undo-tree-id5885 . -1) 1900) nil (26048 30377 485834 924000) 0 nil])
([nil nil ((1907 . 1909)) ((#("::" 0 2 (fontified t)) . 1907) (undo-tree-id5738 . -2) (undo-tree-id5739 . -2) (undo-tree-id5740 . -2) (undo-tree-id5741 . -2) (undo-tree-id5742 . -2) (undo-tree-id5743 . -2) (undo-tree-id5744 . -2) (undo-tree-id5745 . -2) (undo-tree-id5746 . -2)) (26048 30371 27350 34000) 0 nil])
([nil nil ((1901 . 1918) (t 26048 30377 503558 251000)) nil (26048 30443 316292 469000) 0 nil])
([nil nil ((1909 . 1912)) ((#("pro" 0 3 (fontified t)) . 1909) (undo-tree-id5735 . -3) (undo-tree-id5736 . -3) (undo-tree-id5737 . -3)) (26048 30370 842249 306000) 0 nil])
([nil nil ((1918 . 1922)) nil (26048 30443 316291 785000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1924 1924 nil nil nil t #s(yas--field 2 1931 1944 nil nil nil nil #s(yas--exit 1945 nil))) #s(yas--field 2 1931 1944 nil nil nil nil #s(yas--exit 1945 nil))) #s(yas--exit 1945 nil) 41 nil #s(yas--field 1 1924 1924 nil nil nil t #s(yas--field 2 1931 1944 nil nil nil nil #s(yas--exit 1945 nil))) nil nil)) (1909 . 1945) (#("property_value(${1:&self}, ${2:property_name})$0" 0 48 (fontified nil)) . 1909) (1909 . 1957) (#("pro" 0 3 (fontified nil)) . 1909) (1909 . 1912) (#("property_value(…) (alias get_property, g_object_get_property) (as ObjectExt)" 0 76 (fontified nil)) . -1909) (1909 . 1985) (#("pro" 0 3 (fontified t)) . -1909) (undo-tree-id5048 . -3) (undo-tree-id5050 . -1) (undo-tree-id5052 . -2) (undo-tree-id5054 . -3) (undo-tree-id5056 . -3) (undo-tree-id5058 . -3) (undo-tree-id5060 . -3) 1912) ((1909 . 1912) (#("property_value(…) (alias get_property, g_object_get_property) (as ObjectExt)" 0 76 (fontified nil)) . 1909) (1909 . 1985) (#("pro" 0 3 (fontified nil)) . 1909) (1909 . 1912) (#("property_value(${1:&self}, ${2:property_name})$0" 0 48 (fontified nil)) . 1909) (1909 . 1957) (#("property_value(&self, property_name)" 0 14 (fontified t) 14 15 (face (rainbow-delimiters-depth-4-face) fontified t) 15 16 (face rust-ampersand-face fontified t) 16 20 (face font-lock-keyword-face fontified t) 20 22 (fontified t) 22 31 (fontified t) 31 35 (fontified t) 35 36 (face (rainbow-delimiters-depth-4-face) fontified t)) . 1909) (undo-tree-id5730 . -15) (undo-tree-id5731 . -15) (undo-tree-id5732 . -22) (undo-tree-id5733 . -15) (undo-tree-id5734 . -15) (apply yas--snippet-revive 1909 1945 #s(yas--snippet nil (#s(yas--field 1 1924 1924 nil nil nil t #s(yas--field 2 1931 1944 nil nil nil nil #s(yas--exit 1945 nil))) #s(yas--field 2 1931 1944 nil nil nil nil #s(yas--exit 1945 nil))) #s(yas--exit 1945 nil) 41 nil #s(yas--field 1 1924 1924 nil nil nil t #s(yas--field 2 1931 1944 nil nil nil nil #s(yas--exit 1945 nil))) nil nil))) (26048 30370 662804 453000) 0 nil])
([nil nil ((1922 . 1931)) nil (26048 30443 316291 243000) 0 nil])
([nil nil ((1925 . 1927) (#("&self" 0 1 (face rust-ampersand-face fontified nil) 1 5 (face font-lock-keyword-face fontified nil)) . 1925) (1924 . 1925)) ((#("s" 0 1 (fontified nil)) . 1924) (1925 . 1930) (#("rc" 0 2 (fontified t)) . 1925)) (26048 30370 572069 140000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -1929) (undo-tree-id5959 . -1) (#("r" 0 1 (fontified t)) . -1930) (undo-tree-id5960 . -1) 1931) nil (26048 30443 316290 372000) 0 nil])
([nil nil ((apply yas--snippet-revive 1909 1943 #s(yas--snippet nil (#s(yas--field 1 1924 1924 nil nil nil t #s(yas--field 2 1931 1944 nil nil nil nil #s(yas--exit 1945 nil))) #s(yas--field 2 1931 1944 nil nil nil nil #s(yas--exit 1945 nil))) #s(yas--exit 1945 nil) 41 nil #s(yas--field 1 1924 1924 nil nil nil t #s(yas--field 2 1931 1944 nil nil nil nil #s(yas--exit 1945 nil))) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1924 1924 nil nil nil t #s(yas--field 2 1931 1944 nil nil nil nil #s(yas--exit 1945 nil))) #s(yas--field 2 1931 1944 nil nil nil nil #s(yas--exit 1945 nil))) #s(yas--exit 1945 nil) 41 nil #s(yas--field 1 1924 1924 nil nil nil t #s(yas--field 2 1931 1944 nil nil nil nil #s(yas--exit 1945 nil))) nil nil))) (26048 30370 572032 353000) 0 nil] [nil nil ((1924 . 1927) (#("src" 0 3 (fontified nil)) . 1924) (1924 . 1927) (#("src" 0 3 (fontified t)) . -1924) (undo-tree-id5027 . -3) (undo-tree-id5028 . -3) (undo-tree-id5030 . -1) (undo-tree-id5032 . -1) (undo-tree-id5034 . -1) (undo-tree-id5036 . -1) (undo-tree-id5038 . -2) (undo-tree-id5040 . -3) (undo-tree-id5042 . -3) (undo-tree-id5044 . -3) (undo-tree-id5046 . -3) 1927) ((1924 . 1927) (#("src" 0 3 (fontified nil)) . 1924) (1924 . 1927) (#("src" 0 3 (fontified t)) . 1924) (undo-tree-id5729 . -3)) (26048 30370 123970 606000) 0 nil])
([nil nil ((1929 . 1932)) nil (26048 30443 316288 354000) 0 nil])
nil
([nil nil ((apply yas--snippet-revive 1909 1943 #s(yas--snippet nil (#s(yas--field 1 1924 1924 nil nil nil t #s(yas--field 2 1931 1944 nil nil nil nil #s(yas--exit 1945 nil))) #s(yas--field 2 1931 1944 nil nil nil nil #s(yas--exit 1945 nil))) #s(yas--exit 1945 nil) 41 nil #s(yas--field 1 1924 1924 nil nil nil t #s(yas--field 2 1931 1944 nil nil nil nil #s(yas--exit 1945 nil))) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1924 1924 nil nil nil t #s(yas--field 2 1931 1944 nil nil nil nil #s(yas--exit 1945 nil))) #s(yas--field 2 1931 1944 nil nil nil nil #s(yas--exit 1945 nil))) #s(yas--exit 1945 nil) 41 nil #s(yas--field 1 1924 1924 nil nil nil t #s(yas--field 2 1931 1944 nil nil nil nil #s(yas--exit 1945 nil))) nil nil))) (26048 30369 942611 462000) 0 nil])
([nil nil ((1929 . 1936) (#("Ele" 0 3 (fontified nil)) . 1929) (1929 . 1932) (#("Element (alias GstElement)" 0 26 (fontified nil)) . -1929) (1929 . 1955) (#("Ele" 0 3 (face font-lock-type-face fontified t)) . -1929) (undo-tree-id5958 . -3) 1932) nil (26048 30443 316287 279000) 0 nil])
([nil nil ((#("name" 0 4 (fontified t)) . -1938) (undo-tree-id5023 . -4) (undo-tree-id5024 . -4) 1942) ((1938 . 1942)) (26048 30369 754346 542000) 0 nil])
([nil nil ((1936 . 1941)) nil (26048 30443 316285 179000) 0 nil])
([nil nil ((#("property_" 0 9 (fontified t)) . -1929) (undo-tree-id5013 . -9) (undo-tree-id5014 . -9) (undo-tree-id5016 . -8) (undo-tree-id5018 . -8) (undo-tree-id5020 . -9) (undo-tree-id5022 . -9) 1938) ((1929 . 1938)) (26048 30369 528296 472000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1953 1954 nil nil nil t #s(yas--field 2 1956 1969 nil nil nil nil #s(yas--exit 1970 nil))) #s(yas--field 2 1956 1969 nil nil nil nil #s(yas--exit 1970 nil))) #s(yas--exit 1970 nil) 42 nil #s(yas--field 1 1953 1954 nil nil nil t #s(yas--field 2 1956 1969 nil nil nil nil #s(yas--exit 1970 nil))) nil nil)) (1938 . 1974) (#("property_value(${1:&self}, ${2:property_name})$0" 0 48 (fontified nil)) . 1938) (1938 . 1986) (#("pro" 0 3 (fontified nil)) . 1938) (1938 . 1941) (#("property_value(…) (alias get_property, g_object_get_property) (as ObjectExt)" 0 76 (fontified nil)) . -1938) (1938 . 2014) (#("pro" 0 3 (fontified t)) . -1938) (undo-tree-id5957 . -3) 1941) nil (26048 30443 316283 888000) 0 nil])
([nil nil ((1929 . 1931)) ((#("\"\"" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t)) . 1929) (undo-tree-id5722 . -1) (undo-tree-id5723 . -1) (undo-tree-id5724 . -1) (undo-tree-id5725 . -1) (undo-tree-id5726 . -1) (undo-tree-id5727 . -1) (undo-tree-id5728 . -1)) (26048 30369 290302 510000) 0 nil])
([nil nil ((#("&self" 0 1 (face rust-ampersand-face fontified nil) 1 5 (face font-lock-keyword-face fontified nil)) . 1954) (1953 . 1954)) nil (26048 30443 316281 555000) 0 nil])
([nil nil ((1930 . 1931)) ((#("s" 0 1 (face font-lock-string-face fontified t)) . 1930) (undo-tree-id5719 . -1) (undo-tree-id5720 . -1) (undo-tree-id5721 . -1)) (26048 30369 59433 843000) 0 nil])
([nil nil ((apply yas--snippet-revive 1938 1970 #s(yas--snippet nil (#s(yas--field 1 1953 1954 nil nil nil t #s(yas--field 2 1956 1969 nil nil nil nil #s(yas--exit 1970 nil))) #s(yas--field 2 1956 1969 nil nil nil nil #s(yas--exit 1970 nil))) #s(yas--exit 1970 nil) 42 nil #s(yas--field 1 1953 1954 nil nil nil t #s(yas--field 2 1956 1969 nil nil nil nil #s(yas--exit 1970 nil))) nil nil))) nil (26048 30443 316280 895000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-string-face fontified t)) . -1930) (undo-tree-id5006 . -1) (undo-tree-id5007 . -1) (undo-tree-id5009 . -1) (undo-tree-id5011 . -1) 1931) ((1930 . 1931)) (26048 30368 823763 355000) 0 nil])
([nil nil ((#("name)" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-5-face) fontified t)) . -1965) (undo-tree-id5955 . -5) (undo-tree-id5956 . -5) 1970) nil (26048 30443 316280 194000) 0 nil])
([nil nil ((1930 . 1934)) ((#("name" 0 4 (face font-lock-string-face fontified t)) . 1930) (t 26048 30336 453555 776000)) (26048 30368 487170 88000) 0 nil])
([nil nil ((#("property_" 0 9 (fontified t)) . -1956) (undo-tree-id5953 . -9) (undo-tree-id5954 . -9) 1965) nil (26048 30443 316278 202000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -1897) (undo-tree-id5693 . -1) (undo-tree-id5694 . -1) (undo-tree-id5695 . -1) (undo-tree-id5696 . -1) (undo-tree-id5697 . -1) (undo-tree-id5698 . -1) (undo-tree-id5699 . -1) (undo-tree-id5700 . -1) (undo-tree-id5701 . -1) (undo-tree-id5702 . -1) (undo-tree-id5703 . -1) (undo-tree-id5704 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -1898) (undo-tree-id5705 . -1) (undo-tree-id5706 . -1) (undo-tree-id5707 . -1) (undo-tree-id5708 . -1) (undo-tree-id5709 . -1) (undo-tree-id5710 . -1) (undo-tree-id5711 . -1) (undo-tree-id5712 . -1) (undo-tree-id5713 . -1) 1899 (t 26048 30336 453555 776000)) ((1897 . 1899)) (26048 30368 269775 787000) 0 nil])
([nil nil ((#("s, " 0 1 (fontified t) 1 3 (fontified t)) . -1953) (undo-tree-id5951 . -3) (undo-tree-id5952 . -3) 1956) nil (26048 30443 316275 914000) 0 nil])
([nil nil ((1897 . 1900)) ((#("=>?" 0 1 (fontified t) 1 2 (syntax-table (1) fontified t) 2 3 (face rust-question-mark fontified t)) . 1897) (undo-tree-id5714 . -3) (undo-tree-id5715 . -3) (undo-tree-id5716 . -3) (undo-tree-id5717 . -3) (undo-tree-id5718 . -3)) (26048 30368 8527 478000) 0 nil])
([nil nil ((#("value(" 0 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-5-face) fontified t)) . -1947) (undo-tree-id5949 . -6) (undo-tree-id5950 . -6) 1953) nil (26048 30443 316273 723000) 0 nil])
([nil nil ((#("?" 0 1 (face rust-question-mark fontified t)) . -1899) (undo-tree-id5690 . -1) (undo-tree-id5691 . -1) (undo-tree-id5692 . -1) 1900) ((1899 . 1900)) (26048 30368 7931 316000) 0 nil])
([nil nil ((#("property_" 0 9 (fontified t)) . -1938) (undo-tree-id5947 . -9) (undo-tree-id5948 . -9) 1947) nil (26048 30443 316271 573000) 0 nil])
nil
([nil nil ((#("Element::" 0 7 (face font-lock-type-face fontified t) 7 9 (fontified t)) . -1929) (undo-tree-id5945 . -9) (undo-tree-id5946 . -9) 1938) nil (26048 30443 316269 173000) 0 nil])
([nil nil ((1929 . 1936)) nil (26048 30443 316267 197000) 0 nil])
([nil nil ((#("pro" 0 3 (fontified t)) . -1933) (undo-tree-id5944 . -3) 1936) nil (26048 30443 316266 478000) 0 nil])
([nil nil ((#("src." 0 4 (fontified t)) . -1929) (undo-tree-id5943 . -4) 1933) nil (26048 30443 316264 893000) 0 nil])
([nil nil ((1929 . 1930)) nil (26048 30443 316263 520000) 0 nil])
([nil nil ((1929 . 1936) (#("E" 0 1 (fontified nil)) . 1929) (1929 . 1930) (#("Element (alias GstElement)" 0 26 (fontified nil)) . -1929) (1929 . 1955) (#("E" 0 1 (face font-lock-type-face fontified t)) . -1929) (undo-tree-id5942 . -1) 1930) nil (26048 30443 316262 518000) 0 nil])
([nil nil ((1936 . 1938)) nil (26048 30443 316260 508000) 0 nil])
([nil nil ((1938 . 1939)) nil (26048 30443 316259 966000) 0 nil])
([nil nil ((#("P" 0 1 (face font-lock-type-face fontified t)) . -1938) (undo-tree-id5941 . -1) 1939) nil (26048 30443 316259 250000) 0 nil])
([nil nil ((1938 . 1941)) nil (26048 30443 316257 888000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1953 1956 nil nil nil t #s(yas--field 2 1958 1971 nil nil nil nil #s(yas--exit 1972 nil))) #s(yas--field 2 1958 1971 nil nil nil nil #s(yas--exit 1972 nil))) #s(yas--exit 1972 nil) 43 nil #s(yas--field 1 1953 1956 nil nil nil t #s(yas--field 2 1958 1971 nil nil nil nil #s(yas--exit 1972 nil))) nil nil)) (1938 . 1974) (#("property_value(${1:&self}, ${2:property_name})$0" 0 48 (fontified nil)) . 1938) (1938 . 1986) (#("pro" 0 3 (fontified nil)) . 1938) (1938 . 1941) (#("property_value(…) (alias get_property, g_object_get_property) (as ObjectExt)" 0 76 (fontified nil)) . -1938) (1938 . 2014) (#("pro" 0 3 (fontified t)) . -1938) (undo-tree-id5940 . -3) 1941) nil (26048 30443 316256 446000) 0 nil])
([nil nil ((1954 . 1956) (#("&self" 0 1 (face rust-ampersand-face fontified nil) 1 5 (face font-lock-keyword-face fontified nil)) . 1954) (1953 . 1954)) nil (26048 30443 316253 576000) 0 nil])
([nil nil ((apply yas--snippet-revive 1938 1972 #s(yas--snippet nil (#s(yas--field 1 1953 1956 nil nil nil t #s(yas--field 2 1958 1971 nil nil nil nil #s(yas--exit 1972 nil))) #s(yas--field 2 1958 1971 nil nil nil nil #s(yas--exit 1972 nil))) #s(yas--exit 1972 nil) 43 nil #s(yas--field 1 1953 1956 nil nil nil t #s(yas--field 2 1958 1971 nil nil nil nil #s(yas--exit 1972 nil))) nil nil))) nil (26048 30443 316252 501000) 0 nil])
([nil nil ((#("name" 0 4 (fontified t)) . -1967) (undo-tree-id5938 . -4) (undo-tree-id5939 . -4) 1971) nil (26048 30443 316251 589000) 0 nil])
([nil nil ((#("property_" 0 9 (fontified t)) . -1958) (undo-tree-id5936 . -9) (undo-tree-id5937 . -9) 1967) nil (26048 30443 316249 62000) 0 nil])
([nil nil ((1958 . 1960)) nil (26048 30443 316246 968000) 0 nil])
([nil nil ((1959 . 1962)) nil (26048 30443 316246 394000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-string-face fontified t)) . -1961) (undo-tree-id5934 . -1) (undo-tree-id5935 . -1) 1962) nil (26048 30443 316245 593000) 0 nil])
([nil nil ((1961 . 1963)) nil (26048 30443 316243 700000) 0 nil])
([nil nil ((1965 . 1966)) nil (26048 30443 316243 143000) 0 nil])
([nil nil ((1966 . 1983)) nil (26048 30443 316242 511000) 0 nil])
([nil nil ((1983 . 1988)) nil (26048 30443 316241 973000) 0 nil])
([nil nil ((1988 . 1989)) nil (26048 30443 316241 348000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1991 1997 nil nil nil t #s(yas--exit 1998 nil))) #s(yas--exit 1998 nil) 44 nil #s(yas--field 1 1991 1997 nil nil nil t #s(yas--exit 1998 nil)) nil nil)) (1988 . 1997) (#("eq(${1:other})$0" 0 16 (fontified nil)) . 1988) (1988 . 2004) (#("e" 0 1 (fontified nil)) . 1988) (1988 . 1989) (#("eq(…) (as GstValueExt)" 0 22 (fontified nil)) . -1988) (1988 . 2010) (#("e" 0 1 (fontified t)) . -1988) (undo-tree-id5929 . -1) (undo-tree-id5930 . -1) (undo-tree-id5931 . -1) (undo-tree-id5932 . -1) (undo-tree-id5933 . -1) 1989) nil (26048 30443 316239 662000) 0 nil])
([nil nil ((1992 . 1993) (#("other" 0 5 (fontified nil)) . 1992) (undo-tree-id5928 . -5) (1991 . 1992)) nil (26048 30443 316232 572000) 0 nil])
([nil nil ((1992 . 1996)) nil (26048 30443 316223 358000) 0 nil])
([nil nil ((apply yas--snippet-revive 1988 1998 #s(yas--snippet nil (#s(yas--field 1 1991 1997 nil nil nil t #s(yas--exit 1998 nil))) #s(yas--exit 1998 nil) 44 nil #s(yas--field 1 1991 1997 nil nil nil t #s(yas--exit 1998 nil)) nil nil))) nil (26048 30444 693756 223000) 0 nil])
([nil nil ((1998 . 1999) (t 26048 30443 333562 227000)) nil (26048 30444 693751 685000) 0 nil])
([nil nil ((#("zbar\"" 0 5 (face font-lock-string-face fontified t)) . -1992) (undo-tree-id6063 . -5) (undo-tree-id6064 . -5) (undo-tree-id6065 . 1) (undo-tree-id6066 . -5) (undo-tree-id6067 . -5) (undo-tree-id6068 . -5) (undo-tree-id6069 . -5) (undo-tree-id6070 . -5) (undo-tree-id6071 . -5) (undo-tree-id6072 . -5) (undo-tree-id6073 . -5) 1997 (t 26048 30444 710228 979000)) nil (26048 30463 382914 868000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -1991) (undo-tree-id6051 . -1) (undo-tree-id6052 . -1) (undo-tree-id6053 . -1) (undo-tree-id6054 . -1) (undo-tree-id6055 . -1) (undo-tree-id6056 . -1) (undo-tree-id6057 . -1) (undo-tree-id6058 . -1) (undo-tree-id6059 . -1) (undo-tree-id6060 . -1) (undo-tree-id6061 . -1) (undo-tree-id6062 . -1) 1992) nil (26048 30463 382905 701000) 0 nil])
([nil nil ((#("name.eq();" 0 5 (fontified t) 5 7 (fontified t) 7 8 (face (rainbow-delimiters-depth-5-face) fontified t) 8 9 (face (rainbow-delimiters-depth-5-face) fontified t) 9 10 (fontified t)) . 1983) (undo-tree-id5961 . -10) (undo-tree-id5962 . -8) (undo-tree-id5963 . 2) (undo-tree-id5964 . -10) (undo-tree-id5965 . -10) (undo-tree-id5966 . -10) (undo-tree-id5967 . -10) (undo-tree-id5968 . -10) (undo-tree-id5969 . -10) (undo-tree-id5970 . -10) (undo-tree-id5971 . -10) (undo-tree-id5972 . -10) (undo-tree-id5973 . -10) (undo-tree-id5974 . -10) (undo-tree-id5975 . -10) (undo-tree-id5976 . -10) (undo-tree-id5977 . -10) (undo-tree-id5978 . -10) (undo-tree-id5979 . -10) (undo-tree-id5980 . -10) (undo-tree-id5981 . -10) (undo-tree-id5982 . -10) (undo-tree-id5983 . -10) (undo-tree-id5984 . -10) (undo-tree-id5985 . -10) (undo-tree-id5986 . -10) (undo-tree-id5987 . -10) (undo-tree-id5988 . -10) (undo-tree-id5989 . -10) (undo-tree-id5990 . -10) (undo-tree-id5991 . -8) (undo-tree-id5992 . -8) (undo-tree-id5993 . -8) (undo-tree-id5994 . -8) (undo-tree-id5995 . -8) (undo-tree-id5996 . -8) (undo-tree-id5997 . -8) (undo-tree-id5998 . -8) (undo-tree-id5999 . -8) (undo-tree-id6000 . -8) (undo-tree-id6001 . -8) (undo-tree-id6002 . -8) (undo-tree-id6003 . -8) (undo-tree-id6004 . -8) (undo-tree-id6005 . -8) (undo-tree-id6006 . -8) (undo-tree-id6007 . -8) (undo-tree-id6008 . -8) (undo-tree-id6009 . -8) (undo-tree-id6010 . -8) (undo-tree-id6011 . -8) (undo-tree-id6012 . -8) (undo-tree-id6013 . -8) (undo-tree-id6014 . -8) (undo-tree-id6015 . -8) (undo-tree-id6016 . -8) (undo-tree-id6017 . -8) (undo-tree-id6018 . -8) (undo-tree-id6019 . -8) (undo-tree-id6020 . -8) (undo-tree-id6021 . -8) (undo-tree-id6022 . -8) (undo-tree-id6023 . -8) (undo-tree-id6024 . -8) (undo-tree-id6025 . -8) (undo-tree-id6026 . -8) (undo-tree-id6027 . -8) (undo-tree-id6028 . -8) (undo-tree-id6029 . -8) (undo-tree-id6030 . -8) (undo-tree-id6031 . -8) (undo-tree-id6032 . -8) (undo-tree-id6033 . -8) (undo-tree-id6034 . -8) (undo-tree-id6035 . -8) (undo-tree-id6036 . -8) (undo-tree-id6037 . -8) (undo-tree-id6038 . -8) (undo-tree-id6039 . -8) (undo-tree-id6040 . -8) (undo-tree-id6041 . -8) (undo-tree-id6042 . -10) (undo-tree-id6043 . -10) (undo-tree-id6044 . -10) (undo-tree-id6045 . -10) (undo-tree-id6046 . -10) (undo-tree-id6047 . -10) (undo-tree-id6048 . -10) (undo-tree-id6049 . -10) (undo-tree-id6050 . -10)) nil (26048 30463 382891 123000) 0 nil])
([nil nil ((1956 . 1958) (t 26048 30463 400230 111000)) nil (26048 30487 241965 797000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -1957) (undo-tree-id6110 . -1) (undo-tree-id6111 . -1) (undo-tree-id6112 . -1) (undo-tree-id6113 . -1) 1958) nil (26048 30487 241964 811000) 0 nil])
([nil nil ((1957 . 1959)) nil (26048 30487 241960 936000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -1957) (undo-tree-id6091 . -1) (undo-tree-id6092 . -1) (undo-tree-id6093 . -1) (undo-tree-id6094 . -1) (undo-tree-id6095 . -1) (undo-tree-id6096 . -1) (undo-tree-id6097 . -1) (undo-tree-id6098 . -1) (undo-tree-id6099 . -1) (undo-tree-id6100 . -1) (undo-tree-id6101 . -1) (undo-tree-id6102 . -1) (undo-tree-id6103 . -1) (#("b" 0 1 (fontified t)) . -1958) (undo-tree-id6104 . -1) (undo-tree-id6105 . -1) (undo-tree-id6106 . -1) (undo-tree-id6107 . -1) (undo-tree-id6108 . -1) (undo-tree-id6109 . -1) 1959) nil (26048 30487 241959 237000) 0 nil])
([nil nil ((1957 . 1959)) nil (26048 30487 241946 162000) 0 nil])
([nil nil ((apply yas--snippet-revive 1957 1969 #s(yas--snippet nil nil #s(yas--exit 1969 nil) 45 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1969 nil) 45 nil nil nil nil)) (1957 . 1969) (#("upcast_ref()$0" 0 14 (fontified nil)) . 1957) (1957 . 1971) (#("as" 0 2 (fontified nil)) . 1957) (1957 . 1959) (#("upcast_ref()" 0 12 (fontified nil)) . -1957) (1957 . 1969) (#("as" 0 2 (face font-lock-keyword-face fontified t)) . -1957) (undo-tree-id6074 . -2) (undo-tree-id6075 . -2) (undo-tree-id6076 . -1) (undo-tree-id6077 . -1) (undo-tree-id6078 . -1) (undo-tree-id6079 . -1) (undo-tree-id6080 . -1) (undo-tree-id6081 . -2) (undo-tree-id6082 . -2) (undo-tree-id6083 . -2) (undo-tree-id6084 . -2) (undo-tree-id6085 . -2) (undo-tree-id6086 . -2) (undo-tree-id6087 . -2) (undo-tree-id6088 . -2) (undo-tree-id6089 . -2) (undo-tree-id6090 . -2) 1959) nil (26048 30487 241941 188000) 0 nil])
([nil nil ((1969 . 1970) (t 26048 30487 260231 550000)) nil (26048 30503 142916 71000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -1969) (undo-tree-id6114 . -1) (undo-tree-id6115 . -1) (undo-tree-id6116 . -1) (undo-tree-id6117 . -1) (undo-tree-id6118 . -1) (undo-tree-id6119 . -1) (undo-tree-id6120 . -1) (undo-tree-id6121 . -1) (undo-tree-id6122 . -1) (undo-tree-id6123 . -1) 1970) nil (26048 30503 142914 673000) 0 nil])
([nil nil ((1969 . 1970)) nil (26048 30503 142901 301000) 0 nil])
([nil nil ((apply yas--snippet-revive 1970 1976 #s(yas--snippet nil nil #s(yas--exit 1976 nil) 46 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1976 nil) 46 nil nil nil nil)) (1970 . 1976) (#("into()$0" 0 8 (fontified nil)) . 1970) (1970 . 1978) (#("into() (as Into)" 0 16 (fontified nil)) . -1970) (1970 . 1986)) nil (26048 30503 142896 262000) 0 nil])
([nil nil ((#("let name = Element::property_value(src.upcast_ref().into(), \"name\");" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 8 (face font-lock-variable-name-face fontified t) 8 11 (fontified t) 11 18 (face font-lock-type-face fontified t) 18 20 (fontified t) 20 34 (fontified t) 34 35 (face (rainbow-delimiters-depth-5-face) fontified t) 35 39 (fontified t) 39 49 (fontified t) 49 50 (face (rainbow-delimiters-depth-6-face) fontified t) 50 51 (face (rainbow-delimiters-depth-6-face) fontified t) 51 52 (fontified t) 52 56 (fontified t) 56 57 (face (rainbow-delimiters-depth-6-face) fontified t) 57 58 (face (rainbow-delimiters-depth-6-face) fontified t) 58 60 (fontified t) 60 66 (face font-lock-string-face fontified t) 66 67 (face (rainbow-delimiters-depth-5-face) fontified t) 67 68 (fontified t)) . 1918) (undo-tree-id6129 . -38) (undo-tree-id6130 . -38) (undo-tree-id6131 . -51) (undo-tree-id6132 . -51) (undo-tree-id6133 . -51) (undo-tree-id6134 . -51) (undo-tree-id6135 . -51) (undo-tree-id6136 . -51) (undo-tree-id6137 . -51) (undo-tree-id6138 . -51) (undo-tree-id6139 . -51) (undo-tree-id6140 . -58) (undo-tree-id6141 . -58) (undo-tree-id6142 . -58) (undo-tree-id6143 . -58) (undo-tree-id6144 . -58) (undo-tree-id6145 . -58) (undo-tree-id6146 . -58) (undo-tree-id6147 . -58) (undo-tree-id6148 . -58) (undo-tree-id6149 . -58) (undo-tree-id6150 . -58) (undo-tree-id6151 . -58) (undo-tree-id6152 . -68) (t 26048 30503 156899 189000)) nil (26048 30511 535523 7000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1918) (undo-tree-id6128 . -1)) nil (26048 30511 535505 60000) 0 nil])
([nil nil ((#("                
" 0 16 (fontified t) 16 17 (fontified t)) . 1918) (undo-tree-id6124 . -17) (undo-tree-id6125 . -16) (undo-tree-id6126 . -16) (undo-tree-id6127 . -17)) nil (26048 30511 535502 623000) 0 nil])
([nil nil ((#("                " 0 16 (fontified t)) . -1918)) nil (26048 30511 535489 792000) 0 nil])
([nil nil ((#("            MessageView::Element(src) => {
                println!(\"{:?}\", msg);
            }," 0 12 (fontified t) 12 23 (face font-lock-type-face fontified t) 23 25 (fontified t) 25 32 (face font-lock-type-face fontified t) 32 33 (face (rainbow-delimiters-depth-4-face) fontified t) 33 36 (fontified t) 36 37 (face (rainbow-delimiters-depth-4-face) fontified t) 37 38 (fontified t) 38 39 (fontified t) 39 40 (syntax-table (1) fontified t) 40 41 (fontified t) 41 42 (face (rainbow-delimiters-depth-4-face) fontified t) 42 43 (fontified t) 43 59 (fontified t) 59 67 (face rust-builtin-formatting-macro fontified t) 67 68 (face (rainbow-delimiters-depth-5-face) fontified t) 68 69 (face font-lock-string-face fontified t) 69 73 (face rust-string-interpolation fontified t) 73 74 (face font-lock-string-face fontified t) 74 76 (fontified t) 76 79 (fontified t) 79 80 (face (rainbow-delimiters-depth-5-face) fontified t) 80 81 (fontified t) 81 82 (fontified t) 82 94 (fontified t) 94 95 (face (rainbow-delimiters-depth-4-face) fontified t) 95 96 (fontified t)) . 1859) (undo-tree-id6217 . -96) (undo-tree-id6218 . -37) (undo-tree-id6219 . -59) (undo-tree-id6220 . -59) (undo-tree-id6221 . -59) (undo-tree-id6222 . -59) (undo-tree-id6223 . -59) (undo-tree-id6224 . -59) (undo-tree-id6225 . -59) (undo-tree-id6226 . -59) (undo-tree-id6227 . -59) (undo-tree-id6228 . -59) (undo-tree-id6229 . -59) (undo-tree-id6230 . -59) (undo-tree-id6231 . -59) (undo-tree-id6232 . -59) (undo-tree-id6233 . -59) (undo-tree-id6234 . -59) (undo-tree-id6235 . -59) (undo-tree-id6236 . -59) (undo-tree-id6237 . -59) (undo-tree-id6238 . -59) (undo-tree-id6239 . -59) (undo-tree-id6240 . -59) (undo-tree-id6241 . -59) (undo-tree-id6242 . -59) (undo-tree-id6243 . -59) (undo-tree-id6244 . -59) (undo-tree-id6245 . -59) (undo-tree-id6246 . -59) (undo-tree-id6247 . -59) (undo-tree-id6248 . -59) (undo-tree-id6249 . -59) (undo-tree-id6250 . -59) (undo-tree-id6251 . -59) (undo-tree-id6252 . -59) (undo-tree-id6253 . -59) (undo-tree-id6254 . -59) (undo-tree-id6255 . -96) (undo-tree-id6256 . -96) (undo-tree-id6257 . -96) (undo-tree-id6258 . -95) (undo-tree-id6259 . -94) (undo-tree-id6260 . -93) (undo-tree-id6261 . -92) (undo-tree-id6262 . -90) (undo-tree-id6263 . -50) (undo-tree-id6264 . -49) (undo-tree-id6265 . -48) (undo-tree-id6266 . -47) (undo-tree-id6267 . -46) (undo-tree-id6268 . -45) (undo-tree-id6269 . -44) (undo-tree-id6270 . -43) (undo-tree-id6271 . -37) (undo-tree-id6272 . -96) (t 26048 30511 553566 363000)) nil (26048 30518 957174 73000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1858) (undo-tree-id6153 . -1) (undo-tree-id6154 . -1) (undo-tree-id6155 . -1) (undo-tree-id6156 . -1) (undo-tree-id6157 . -1) (undo-tree-id6158 . -1) (undo-tree-id6159 . -1) (undo-tree-id6160 . -1) (undo-tree-id6161 . -1) (undo-tree-id6162 . -1) (undo-tree-id6163 . -1) (undo-tree-id6164 . -1) (undo-tree-id6165 . -1) (undo-tree-id6166 . -1) (undo-tree-id6167 . -1) (undo-tree-id6168 . -1) (undo-tree-id6169 . -1) (undo-tree-id6170 . -1) (undo-tree-id6171 . -1) (undo-tree-id6172 . -1) (undo-tree-id6173 . -1) (undo-tree-id6174 . -1) (undo-tree-id6175 . -1) (undo-tree-id6176 . -1) (undo-tree-id6177 . -1) (undo-tree-id6178 . -1) (undo-tree-id6179 . -1) (undo-tree-id6180 . -1) (undo-tree-id6181 . -1) (undo-tree-id6182 . -1) (undo-tree-id6183 . -1) (undo-tree-id6184 . -1) (undo-tree-id6185 . -1) (undo-tree-id6186 . -1) (undo-tree-id6187 . -1) (undo-tree-id6188 . -1) (undo-tree-id6189 . -1) (undo-tree-id6190 . -1) (undo-tree-id6191 . -1) (undo-tree-id6192 . -1) (undo-tree-id6193 . -1) (undo-tree-id6194 . -1) (undo-tree-id6195 . -1) (undo-tree-id6196 . -1) (undo-tree-id6197 . -1) (undo-tree-id6198 . -1) (undo-tree-id6199 . -1) (undo-tree-id6200 . -1) (undo-tree-id6201 . -1) (undo-tree-id6202 . -1) (undo-tree-id6203 . -1) (undo-tree-id6204 . -1) (undo-tree-id6205 . -1) (undo-tree-id6206 . -1) (undo-tree-id6207 . -1) (undo-tree-id6208 . -1) (undo-tree-id6209 . -1) (undo-tree-id6210 . -1) (undo-tree-id6211 . -1) (undo-tree-id6212 . -1) (undo-tree-id6213 . -1) (undo-tree-id6214 . -1) (undo-tree-id6215 . -1) (undo-tree-id6216 . -1) 1859) nil (26048 30518 957128 580000) 0 nil])
([nil nil ((1891 . 1899) (#("        " 0 8 (fontified nil)) . 1890) (undo-tree-id6680 . -8) (undo-tree-id6681 . -8) (undo-tree-id6682 . -8) (undo-tree-id6683 . -8) (1889 . 1899) (t 26048 30519 6900 145000)) nil (26048 30607 422104 319000) 0 nil])
([nil nil ((1899 . 1902)) nil (26048 30607 422100 628000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -1900) (undo-tree-id6669 . -1) (undo-tree-id6670 . -1) (undo-tree-id6671 . -1) (undo-tree-id6672 . -1) (undo-tree-id6673 . -1) (undo-tree-id6674 . -1) (undo-tree-id6675 . -1) (undo-tree-id6676 . -1) (#("e" 0 1 (fontified t)) . -1901) (undo-tree-id6677 . -1) (undo-tree-id6678 . -1) (undo-tree-id6679 . -1) 1902) nil (26048 30607 422099 475000) 0 nil])
([nil nil ((1900 . 1910)) nil (26048 30607 422091 363000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-variable-name-face fontified t)) . -1903) (undo-tree-id6514 . -1) (undo-tree-id6515 . -1) (undo-tree-id6516 . -1) (undo-tree-id6517 . -1) (undo-tree-id6518 . -1) (undo-tree-id6519 . -1) (undo-tree-id6520 . -1) (undo-tree-id6521 . -1) (undo-tree-id6522 . -1) (undo-tree-id6523 . -1) (undo-tree-id6524 . -1) (undo-tree-id6525 . -1) (undo-tree-id6526 . -1) (undo-tree-id6527 . -1) (undo-tree-id6528 . -1) (undo-tree-id6529 . -1) (undo-tree-id6530 . -1) (undo-tree-id6531 . -1) (undo-tree-id6532 . -1) (undo-tree-id6533 . -1) (undo-tree-id6534 . -1) (undo-tree-id6535 . -1) (undo-tree-id6536 . -1) (undo-tree-id6537 . -1) (undo-tree-id6538 . -1) (undo-tree-id6539 . -1) (undo-tree-id6540 . -1) (undo-tree-id6541 . -1) (undo-tree-id6542 . -1) (undo-tree-id6543 . -1) (undo-tree-id6544 . -1) (undo-tree-id6545 . -1) (undo-tree-id6546 . -1) (undo-tree-id6547 . -1) (undo-tree-id6548 . -1) (undo-tree-id6549 . -1) (#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -1904) (undo-tree-id6550 . -1) (undo-tree-id6551 . -1) (undo-tree-id6552 . -1) (undo-tree-id6553 . -1) (undo-tree-id6554 . -1) (undo-tree-id6555 . -1) (undo-tree-id6556 . -1) (undo-tree-id6557 . -1) (undo-tree-id6558 . -1) (undo-tree-id6559 . -1) (undo-tree-id6560 . -1) (undo-tree-id6561 . -1) (undo-tree-id6562 . -1) (undo-tree-id6563 . -1) (undo-tree-id6564 . -1) (undo-tree-id6565 . -1) (undo-tree-id6566 . -1) (undo-tree-id6567 . -1) (undo-tree-id6568 . -1) (undo-tree-id6569 . -1) (undo-tree-id6570 . -1) (undo-tree-id6571 . -1) (undo-tree-id6572 . -1) (undo-tree-id6573 . -1) (undo-tree-id6574 . -1) (undo-tree-id6575 . -1) (undo-tree-id6576 . -1) (undo-tree-id6577 . -1) (undo-tree-id6578 . -1) (undo-tree-id6579 . -1) (undo-tree-id6580 . -1) (undo-tree-id6581 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1905) (undo-tree-id6582 . -1) (undo-tree-id6583 . -1) (undo-tree-id6584 . -1) (undo-tree-id6585 . -1) (undo-tree-id6586 . -1) (undo-tree-id6587 . -1) (undo-tree-id6588 . -1) (undo-tree-id6589 . -1) (undo-tree-id6590 . -1) (undo-tree-id6591 . -1) (undo-tree-id6592 . -1) (undo-tree-id6593 . -1) (undo-tree-id6594 . -1) (undo-tree-id6595 . -1) (undo-tree-id6596 . -1) (undo-tree-id6597 . -1) (undo-tree-id6598 . -1) (undo-tree-id6599 . -1) (undo-tree-id6600 . -1) (undo-tree-id6601 . -1) (undo-tree-id6602 . -1) (undo-tree-id6603 . -1) (undo-tree-id6604 . -1) (undo-tree-id6605 . -1) (undo-tree-id6606 . -1) (undo-tree-id6607 . -1) (undo-tree-id6608 . -1) (undo-tree-id6609 . -1) (#("i" 0 1 (face font-lock-variable-name-face fontified t)) . -1906) (undo-tree-id6610 . -1) (undo-tree-id6611 . -1) (undo-tree-id6612 . -1) (undo-tree-id6613 . -1) (undo-tree-id6614 . -1) (undo-tree-id6615 . -1) (undo-tree-id6616 . -1) (undo-tree-id6617 . -1) (undo-tree-id6618 . -1) (undo-tree-id6619 . -1) (undo-tree-id6620 . -1) (undo-tree-id6621 . -1) (undo-tree-id6622 . -1) (undo-tree-id6623 . -1) (undo-tree-id6624 . -1) (undo-tree-id6625 . -1) (undo-tree-id6626 . -1) (undo-tree-id6627 . -1) (undo-tree-id6628 . -1) (undo-tree-id6629 . -1) (undo-tree-id6630 . -1) (undo-tree-id6631 . -1) (#("n" 0 1 (face font-lock-variable-name-face fontified t)) . -1907) (undo-tree-id6632 . -1) (undo-tree-id6633 . -1) (undo-tree-id6634 . -1) (undo-tree-id6635 . -1) (undo-tree-id6636 . -1) (undo-tree-id6637 . -1) (undo-tree-id6638 . -1) (undo-tree-id6639 . -1) (undo-tree-id6640 . -1) (undo-tree-id6641 . -1) (undo-tree-id6642 . -1) (undo-tree-id6643 . -1) (undo-tree-id6644 . -1) (undo-tree-id6645 . -1) (undo-tree-id6646 . -1) (undo-tree-id6647 . -1) (undo-tree-id6648 . -1) (#("g" 0 1 (face font-lock-variable-name-face fontified t)) . -1908) (undo-tree-id6649 . -1) (undo-tree-id6650 . -1) (undo-tree-id6651 . -1) (undo-tree-id6652 . -1) (undo-tree-id6653 . -1) (undo-tree-id6654 . -1) (undo-tree-id6655 . -1) (undo-tree-id6656 . -1) (undo-tree-id6657 . -1) (undo-tree-id6658 . -1) (undo-tree-id6659 . -1) (undo-tree-id6660 . -1) (undo-tree-id6661 . -1) (#(" " 0 1 (fontified t)) . -1909) (undo-tree-id6662 . -1) (undo-tree-id6663 . -1) (undo-tree-id6664 . -1) (undo-tree-id6665 . -1) (undo-tree-id6666 . -1) (undo-tree-id6667 . -1) (undo-tree-id6668 . -1) 1910) nil (26048 30607 422085 132000) 0 nil])
([nil nil ((1903 . 1904)) nil (26048 30607 421301 583000) 0 nil])
([nil nil ((1904 . 1906)) nil (26048 30607 421301 57000) 0 nil])
([nil nil ((#("m" 0 1 (face font-lock-variable-name-face fontified t)) . -1903) (undo-tree-id6474 . -1) (undo-tree-id6475 . -1) (undo-tree-id6476 . -1) (undo-tree-id6477 . -1) (undo-tree-id6478 . -1) (undo-tree-id6479 . -1) (undo-tree-id6480 . -1) (undo-tree-id6481 . -1) (undo-tree-id6482 . -1) (undo-tree-id6483 . -1) (undo-tree-id6484 . -1) (undo-tree-id6485 . -1) (undo-tree-id6486 . -1) (undo-tree-id6487 . -1) (undo-tree-id6488 . -1) (undo-tree-id6489 . -1) (undo-tree-id6490 . -1) (undo-tree-id6491 . -1) (undo-tree-id6492 . -1) (undo-tree-id6493 . -1) (#("s" 0 1 (face font-lock-variable-name-face fontified t)) . -1904) (undo-tree-id6494 . -1) (undo-tree-id6495 . -1) (undo-tree-id6496 . -1) (undo-tree-id6497 . -1) (undo-tree-id6498 . -1) (undo-tree-id6499 . -1) (undo-tree-id6500 . -1) (undo-tree-id6501 . -1) (undo-tree-id6502 . -1) (undo-tree-id6503 . -1) (undo-tree-id6504 . -1) (undo-tree-id6505 . -1) (undo-tree-id6506 . -1) (#("g" 0 1 (face font-lock-variable-name-face fontified t)) . -1905) (undo-tree-id6507 . -1) (undo-tree-id6508 . -1) (undo-tree-id6509 . -1) (undo-tree-id6510 . -1) (undo-tree-id6511 . -1) (undo-tree-id6512 . -1) (undo-tree-id6513 . -1) 1906) nil (26048 30607 421298 786000) 0 nil])
([nil nil ((1903 . 1904)) nil (26048 30607 421250 797000) 0 nil])
([nil nil ((#("v" 0 1 (face font-lock-variable-name-face fontified t)) . -1903) (undo-tree-id6470 . -1) (undo-tree-id6471 . -1) (undo-tree-id6472 . -1) (undo-tree-id6473 . -1) 1904) nil (26048 30607 421249 696000) 0 nil])
([nil nil ((1903 . 1909)) nil (26048 30607 421246 438000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1908) (undo-tree-id6467 . -1) (undo-tree-id6468 . -1) (undo-tree-id6469 . -1) 1909) nil (26048 30607 421245 214000) 0 nil])
([nil nil ((1908 . 1910)) nil (26048 30607 420991 681000) 0 nil])
([nil nil ((#("data = " 0 4 (face font-lock-variable-name-face fontified t) 4 7 (fontified t)) . -1903) (undo-tree-id6435 . -7) (undo-tree-id6436 . -1) (undo-tree-id6437 . -1) (undo-tree-id6438 . -1) (undo-tree-id6439 . -2) (undo-tree-id6440 . -2) (undo-tree-id6441 . -3) (undo-tree-id6442 . -3) (undo-tree-id6443 . -4) (undo-tree-id6444 . -4) (undo-tree-id6445 . -5) (undo-tree-id6446 . -5) (undo-tree-id6447 . -5) (undo-tree-id6448 . -5) (undo-tree-id6449 . -5) (undo-tree-id6450 . -5) (undo-tree-id6451 . -5) (undo-tree-id6452 . -6) (undo-tree-id6453 . -6) (undo-tree-id6454 . -6) (undo-tree-id6455 . -7) (undo-tree-id6456 . -7) (undo-tree-id6457 . -7) (undo-tree-id6458 . -7) (undo-tree-id6459 . -7) (undo-tree-id6460 . -7) (undo-tree-id6461 . -7) (undo-tree-id6462 . -7) (undo-tree-id6463 . -7) (undo-tree-id6464 . -7) (undo-tree-id6465 . -7) (undo-tree-id6466 . -7) 1910) nil (26048 30607 420990 5000) 0 nil])
([nil nil ((#("let " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -1899) (undo-tree-id6312 . -4) (undo-tree-id6313 . -1) (undo-tree-id6314 . -1) (undo-tree-id6315 . -1) (undo-tree-id6316 . -1) (undo-tree-id6317 . -1) (undo-tree-id6318 . -1) (undo-tree-id6319 . -1) (undo-tree-id6320 . -1) (undo-tree-id6321 . -1) (undo-tree-id6322 . -1) (undo-tree-id6323 . -1) (undo-tree-id6324 . -2) (undo-tree-id6325 . -2) (undo-tree-id6326 . -3) (undo-tree-id6327 . -3) (undo-tree-id6328 . -4) (undo-tree-id6329 . -4) (undo-tree-id6330 . -4) (undo-tree-id6331 . -4) (undo-tree-id6332 . -4) (undo-tree-id6333 . -4) (undo-tree-id6334 . -4) (undo-tree-id6335 . -4) (undo-tree-id6336 . -4) (undo-tree-id6337 . -4) (undo-tree-id6338 . -4) (undo-tree-id6339 . -4) (undo-tree-id6340 . -4) (undo-tree-id6341 . -4) (undo-tree-id6342 . -4) (undo-tree-id6343 . -4) (undo-tree-id6344 . -4) (undo-tree-id6345 . -4) (undo-tree-id6346 . -4) (undo-tree-id6347 . -4) (undo-tree-id6348 . -4) (undo-tree-id6349 . -4) (undo-tree-id6350 . -4) (undo-tree-id6351 . -4) (undo-tree-id6352 . -4) (undo-tree-id6353 . -4) (undo-tree-id6354 . -4) (undo-tree-id6355 . -4) (undo-tree-id6356 . -4) (undo-tree-id6357 . -4) (undo-tree-id6358 . -4) (undo-tree-id6359 . -4) (undo-tree-id6360 . -4) (undo-tree-id6361 . -4) (undo-tree-id6362 . -4) (undo-tree-id6363 . -4) (undo-tree-id6364 . -4) (undo-tree-id6365 . -4) (undo-tree-id6366 . -4) (undo-tree-id6367 . -4) (undo-tree-id6368 . -4) (undo-tree-id6369 . -4) (undo-tree-id6370 . -4) (undo-tree-id6371 . -4) (undo-tree-id6372 . -4) (undo-tree-id6373 . -4) (undo-tree-id6374 . -4) (undo-tree-id6375 . -4) (undo-tree-id6376 . -4) (undo-tree-id6377 . -4) (undo-tree-id6378 . -4) (undo-tree-id6379 . -4) (undo-tree-id6380 . -4) (undo-tree-id6381 . -4) (undo-tree-id6382 . -4) (undo-tree-id6383 . -4) (undo-tree-id6384 . -4) (undo-tree-id6385 . -4) (undo-tree-id6386 . -4) (undo-tree-id6387 . -4) (undo-tree-id6388 . -4) (undo-tree-id6389 . -4) (undo-tree-id6390 . -4) (undo-tree-id6391 . -4) (undo-tree-id6392 . -4) (undo-tree-id6393 . -4) (undo-tree-id6394 . -4) (undo-tree-id6395 . -4) (undo-tree-id6396 . -4) (undo-tree-id6397 . -4) (undo-tree-id6398 . -4) (undo-tree-id6399 . -4) (undo-tree-id6400 . -4) (undo-tree-id6401 . -4) (undo-tree-id6402 . -4) (undo-tree-id6403 . -4) (undo-tree-id6404 . -4) (undo-tree-id6405 . -4) (undo-tree-id6406 . -4) (undo-tree-id6407 . -4) (undo-tree-id6408 . -4) (undo-tree-id6409 . -4) (undo-tree-id6410 . -4) (undo-tree-id6411 . -4) (undo-tree-id6412 . -4) (undo-tree-id6413 . -4) (undo-tree-id6414 . -4) (undo-tree-id6415 . -4) (undo-tree-id6416 . -4) (undo-tree-id6417 . -4) (undo-tree-id6418 . -4) (undo-tree-id6419 . -4) (undo-tree-id6420 . -4) (undo-tree-id6421 . -4) (undo-tree-id6422 . -4) (undo-tree-id6423 . -4) (undo-tree-id6424 . -4) (undo-tree-id6425 . -4) (undo-tree-id6426 . -4) (undo-tree-id6427 . -4) (undo-tree-id6428 . -4) (undo-tree-id6429 . -4) (undo-tree-id6430 . -4) (undo-tree-id6431 . -4) (undo-tree-id6432 . -4) (undo-tree-id6433 . -4) (undo-tree-id6434 . -4) 1903) nil (26048 30607 420966 828000) 0 nil])
([nil nil ((1899 . 1902)) nil (26048 30607 420888 322000) 0 nil])
([nil nil ((1902 . 1905)) nil (26048 30607 420887 759000) 0 nil])
([nil nil ((apply yas--snippet-revive 1902 1911 #s(yas--snippet nil nil #s(yas--exit 1910 nil) 47 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1910 nil) 47 nil nil nil nil)) (1902 . 1911) (#("format!($0)" 0 11 (fontified nil)) . 1902) (1902 . 1913) (#("for" 0 3 (fontified nil)) . 1902) (1902 . 1905) (#("format!(…)" 0 10 (fontified nil)) . -1902) (1902 . 1912) (#("for" 0 3 (face font-lock-keyword-face fontified t)) . -1902) (undo-tree-id6301 . -3) (undo-tree-id6302 . -1) (undo-tree-id6303 . -1) (undo-tree-id6304 . -1) (undo-tree-id6305 . -2) (undo-tree-id6306 . -2) (undo-tree-id6307 . -3) (undo-tree-id6308 . -3) (undo-tree-id6309 . -3) (undo-tree-id6310 . -3) (undo-tree-id6311 . -3) 1905) nil (26048 30607 420886 344000) 0 nil])
([nil nil ((1910 . 1912)) nil (26048 30607 420876 841000) 0 nil])
([nil nil ((1911 . 1913)) nil (26048 30607 420876 313000) 0 nil])
([nil nil ((1912 . 1913)) nil (26048 30607 420875 679000) 0 nil])
([nil nil ((#("?" 0 1 (face rust-string-interpolation fontified t)) . -1912) (undo-tree-id6291 . -1) (undo-tree-id6292 . -1) (undo-tree-id6293 . -1) (undo-tree-id6294 . -1) (undo-tree-id6295 . -1) (undo-tree-id6296 . -1) (undo-tree-id6297 . -1) (undo-tree-id6298 . -1) (undo-tree-id6299 . -1) (undo-tree-id6300 . -1) 1913) nil (26048 30607 420874 621000) 0 nil])
([nil nil ((1912 . 1914)) nil (26048 30607 420866 198000) 0 nil])
([nil nil ((1916 . 1921)) nil (26048 30607 420865 588000) 0 nil])
([nil nil ((1922 . 1925)) nil (26048 30607 420864 885000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1932 1969 nil nil nil t #s(yas--exit 1969 nil))) #s(yas--exit 1969 nil) 48 nil #s(yas--field 1 1932 1969 nil nil nil t #s(yas--exit 1969 nil)) nil nil)) (1923 . 1936) (#("contains(${1:pat})$0" 0 20 (fontified nil)) . 1923) (1923 . 1943) (#("co" 0 2 (fontified nil)) . 1923) (1923 . 1925) (#("contains(…)" 0 11 (fontified nil)) . -1923) (1923 . 1934) (#("co" 0 2 (fontified t)) . -1923) (undo-tree-id6283 . -2) (undo-tree-id6284 . -1) (undo-tree-id6285 . -1) (undo-tree-id6286 . -1) (undo-tree-id6287 . -2) (undo-tree-id6288 . -2) (undo-tree-id6289 . -2) (undo-tree-id6290 . -2) 1925) nil (26048 30607 420863 56000) 0 nil])
([nil nil ((1933 . 1934) (#("pat" 0 3 (fontified nil)) . 1933) (undo-tree-id6282 . -3) (1932 . 1933)) nil (26048 30607 422656 102000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1949 . 1950) (nil fontified nil 1933 . 1950) (1933 . 1950)) nil (26048 30608 841096 274000) 0 nil] [nil nil ((#("\")

" 0 1 (face font-lock-string-face fontified nil) 1 2 (face (rainbow-delimiters-depth-3-face) fontified nil) 2 3 (fontified nil) 3 4 (fontified t)) . 1937) (undo-tree-id6273 . -3) (undo-tree-id6274 . -1) (undo-tree-id6275 . -3) (undo-tree-id6276 . -1) (undo-tree-id6277 . -2) (undo-tree-id6278 . -2) (undo-tree-id6279 . -2) (undo-tree-id6280 . -1) (undo-tree-id6281 . -1) (1936 . 1937) (#("\"" 0 1 (face font-lock-string-face fontified nil)) . 1932) (1933 . 1937)) ((#("\")

" 0 1 (face font-lock-string-face fontified nil) 1 2 (face font-lock-string-face fontified nil) 2 3 (face font-lock-string-face fontified nil) 3 4 (face font-lock-string-face fontified t)) . 1933) (undo-tree-id6684 . -4) (undo-tree-id6685 . -4) (1932 . 1933) (#("\"" 0 1 (face font-lock-string-face fontified nil)) . 1936) (undo-tree-id6686 . -1) (1937 . 1941)) (26048 30607 420849 664000) 0 nil])
([nil nil ((1948 . 1949) (t 26048 30608 856905 583000)) nil (26048 30613 324645 534000) 0 nil])
nil
([nil nil ((1943 . 1944)) nil (26048 30613 324640 796000) 0 nil])
([nil nil ((1954 . 1957) (t 26048 30613 343572 520000)) nil (26048 30617 745507 382000) 0 nil])
([nil nil ((1958 . 1966) (#("            " 0 12 (fontified nil)) . 1957) (undo-tree-id6738 . -8) (undo-tree-id6739 . -8) (undo-tree-id6740 . -8) (undo-tree-id6741 . -8) (undo-tree-id6742 . -8) (1965 . 1969) (1956 . 1966) (t 26048 30617 763572 785000)) nil (26048 30644 333112 179000) 0 nil])
([nil nil ((apply yas--snippet-revive 1923 1969 #s(yas--snippet nil (#s(yas--field 1 1932 1969 nil nil nil t #s(yas--exit 1969 nil))) #s(yas--exit 1969 nil) 48 nil #s(yas--field 1 1932 1969 nil nil nil t #s(yas--exit 1969 nil)) nil nil))) nil (26048 30644 333106 780000) 0 nil])
([nil nil ((1957 . 1969)) nil (26048 30644 333106 177000) 0 nil])
([nil nil ((1969 . 1971)) nil (26048 30644 333105 570000) 0 nil])
([nil nil ((apply yas--snippet-revive 1969 1979 #s(yas--snippet nil nil #s(yas--exit 1978 nil) 49 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1978 nil) 49 nil nil nil nil)) (1969 . 1979) (#("println!($0)" 0 12 (fontified nil)) . 1969) (1969 . 1981) (#("pr" 0 2 (fontified nil)) . 1969) (1969 . 1971) (#("println!(…)" 0 11 (fontified nil)) . -1969) (1969 . 1980) (#("pr" 0 2 (fontified t)) . -1969) (undo-tree-id6731 . -2) (undo-tree-id6732 . -1) (undo-tree-id6733 . -1) (undo-tree-id6734 . -2) (undo-tree-id6735 . -2) (undo-tree-id6736 . -2) (undo-tree-id6737 . -2) 1971) nil (26048 30644 333103 933000) 0 nil])
([nil nil ((1978 . 1980)) nil (26048 30644 333096 106000) 0 nil])
([nil nil ((1979 . 1982)) nil (26048 30644 333095 373000) 0 nil])
([nil nil ((#(":" 0 1 (face font-lock-string-face fontified t)) . -1979) (undo-tree-id6707 . -1) (undo-tree-id6708 . -1) (undo-tree-id6709 . -1) (undo-tree-id6710 . -1) (undo-tree-id6711 . -1) (undo-tree-id6712 . -1) (undo-tree-id6713 . -1) (undo-tree-id6714 . -1) (undo-tree-id6715 . -1) (undo-tree-id6716 . -1) (undo-tree-id6717 . -1) (undo-tree-id6718 . -1) (undo-tree-id6719 . -1) (undo-tree-id6720 . -1) (#("{" 0 1 (face font-lock-string-face fontified t)) . -1980) (undo-tree-id6721 . -1) (undo-tree-id6722 . -1) (undo-tree-id6723 . -1) (undo-tree-id6724 . -1) (undo-tree-id6725 . -1) (undo-tree-id6726 . -1) (undo-tree-id6727 . -1) (#("}" 0 1 (face rust-string-interpolation fontified t)) . -1981) (undo-tree-id6728 . -1) (undo-tree-id6729 . -1) (undo-tree-id6730 . -1) 1982) nil (26048 30644 333092 716000) 0 nil])
([nil nil ((1979 . 1981)) nil (26048 30644 332779 562000) 0 nil])
([nil nil ((1980 . 1982)) nil (26048 30644 332778 930000) 0 nil])
([nil nil ((#(">" 0 1 (face rust-string-interpolation syntax-table (1) fontified t)) . -1981) (undo-tree-id6704 . -1) (undo-tree-id6705 . -1) (undo-tree-id6706 . -1) 1982) nil (26048 30644 332778 22000) 0 nil])
([nil nil ((1981 . 1982)) nil (26048 30644 332775 1000) 0 nil])
([nil nil ((1984 . 1989)) nil (26048 30644 332774 308000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -1987) (undo-tree-id6687 . -1) (undo-tree-id6688 . -1) (undo-tree-id6689 . -1) (undo-tree-id6690 . -1) (undo-tree-id6691 . -1) (undo-tree-id6692 . -1) (undo-tree-id6693 . -1) (undo-tree-id6694 . -1) (undo-tree-id6695 . -1) (undo-tree-id6696 . -1) (undo-tree-id6697 . -1) (undo-tree-id6698 . -1) (#("g" 0 1 (fontified t)) . -1988) (undo-tree-id6699 . -1) (undo-tree-id6700 . -1) (undo-tree-id6701 . -1) (undo-tree-id6702 . -1) (undo-tree-id6703 . -1) 1989) nil (26048 30644 332771 944000) 0 nil])
([nil nil ((1987 . 1989)) nil (26048 30644 332752 589000) 0 nil])
([nil nil ((1990 . 1991)) nil (26048 30644 332748 28000) 0 nil])
([nil nil ((1989 . 1993) (t 26048 30644 350241 78000)) nil (26048 30730 725699 607000) 0 nil])
([nil nil ((apply yas--snippet-revive 1990 2001 #s(yas--snippet nil nil #s(yas--exit 2001 nil) 50 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2001 nil) 50 nil nil nil nil)) (1990 . 2001) (#("structure()$0" 0 13 (fontified nil)) . 1990) (1990 . 2003) (#("str" 0 3 (fontified nil)) . 1990) (1990 . 1993) (#("structure() (alias get_structure, gst_message_get_structure)" 0 60 (fontified nil)) . -1990) (1990 . 2050) (#("str" 0 3 (face font-lock-type-face fontified t)) . -1990) (undo-tree-id6751 . -1) (undo-tree-id6752 . -3) (undo-tree-id6753 . -1) (undo-tree-id6754 . -1) (undo-tree-id6755 . -1) (undo-tree-id6756 . -1) (undo-tree-id6757 . -1) (undo-tree-id6758 . -1) (undo-tree-id6759 . -1) (undo-tree-id6760 . -1) (undo-tree-id6761 . -2) (undo-tree-id6762 . -2) (undo-tree-id6763 . -3) (undo-tree-id6764 . -3) (undo-tree-id6765 . -3) (undo-tree-id6766 . -3) 1993) nil (26048 30730 725697 189000) 0 nil])
([nil nil ((2001 . 2002)) nil (26048 30730 725683 497000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2001) (undo-tree-id6743 . -1) (undo-tree-id6744 . -1) (undo-tree-id6745 . -1) (undo-tree-id6746 . -1) (undo-tree-id6747 . -1) (undo-tree-id6748 . -1) (undo-tree-id6749 . -1) (undo-tree-id6750 . -1) 2002) nil (26048 30730 725679 434000) 0 nil])
([nil nil ((2001 . 2002) (t 26048 30730 773579 687000)) nil (26048 30764 694182 691000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -2001) (undo-tree-id6817 . -1) (undo-tree-id6818 . -1) (undo-tree-id6819 . -1) 2002) nil (26048 30764 694181 600000) 0 nil])
([nil nil ((2001 . 2002)) nil (26048 30764 694178 796000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2001) (undo-tree-id6812 . -1) (undo-tree-id6813 . -1) (undo-tree-id6814 . -1) (undo-tree-id6815 . -1) (undo-tree-id6816 . -1) 2002) nil (26048 30764 694177 753000) 0 nil])
([nil nil ((2001 . 2003)) nil (26048 30764 694173 376000) 0 nil])
([nil nil ((apply yas--snippet-revive 2002 2010 #s(yas--snippet nil nil #s(yas--exit 2010 nil) 51 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2010 nil) 51 nil nil nil nil)) (2002 . 2010) (#("unwrap()$0" 0 10 (fontified nil)) . 2002) (2002 . 2012) (#("u" 0 1 (fontified nil)) . 2002) (2002 . 2003) (#("unwrap()" 0 8 (fontified nil)) . -2002) (2002 . 2010) (#("u" 0 1 (fontified t)) . -2002) (undo-tree-id6809 . -1) (undo-tree-id6810 . -1) (undo-tree-id6811 . -1) 2003) nil (26048 30764 694171 996000) 0 nil])
([nil nil ((2010 . 2011)) nil (26048 30764 694167 485000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2010) (undo-tree-id6804 . -1) (undo-tree-id6805 . -1) (undo-tree-id6806 . -1) (undo-tree-id6807 . -1) (undo-tree-id6808 . -1) 2011) nil (26048 30764 694166 380000) 0 nil])
([nil nil ((#("unwrap()" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-5-face) fontified t) 7 8 (face (rainbow-delimiters-depth-5-face) fontified t)) . -2002) (undo-tree-id6790 . -8) (undo-tree-id6791 . -8) (undo-tree-id6792 . -8) (undo-tree-id6793 . -8) (undo-tree-id6794 . -8) (undo-tree-id6795 . -8) (undo-tree-id6796 . -8) (undo-tree-id6797 . -8) (undo-tree-id6798 . -8) (undo-tree-id6799 . -8) (undo-tree-id6800 . -8) (undo-tree-id6801 . -8) (undo-tree-id6802 . -8) (undo-tree-id6803 . -8) 2010) nil (26048 30764 694160 826000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2001) (undo-tree-id6767 . -1) (undo-tree-id6768 . -1) (undo-tree-id6769 . -1) (undo-tree-id6770 . -1) (undo-tree-id6771 . -1) (undo-tree-id6772 . -1) (undo-tree-id6773 . -1) (undo-tree-id6774 . -1) (undo-tree-id6775 . -1) (undo-tree-id6776 . -1) (undo-tree-id6777 . -1) (undo-tree-id6778 . -1) (undo-tree-id6779 . -1) (undo-tree-id6780 . -1) (undo-tree-id6781 . -1) (undo-tree-id6782 . -1) (undo-tree-id6783 . -1) (undo-tree-id6784 . -1) (undo-tree-id6785 . -1) (undo-tree-id6786 . -1) (undo-tree-id6787 . -1) (undo-tree-id6788 . -1) (undo-tree-id6789 . -1) 2002) nil (26048 30764 694145 937000) 0 nil])
([nil nil ((#("structure()" 0 9 (fontified t) 9 10 (face (rainbow-delimiters-depth-5-face) fontified t) 10 11 (face (rainbow-delimiters-depth-5-face) fontified t)) . -1990) (undo-tree-id6876 . -11) (undo-tree-id6877 . -11) (undo-tree-id6878 . -11) (undo-tree-id6879 . -11) (undo-tree-id6880 . -11) (undo-tree-id6881 . -11) (undo-tree-id6882 . -11) (undo-tree-id6883 . -11) (undo-tree-id6884 . -11) (undo-tree-id6885 . -11) (undo-tree-id6886 . -11) (undo-tree-id6887 . -11) (undo-tree-id6888 . -11) (undo-tree-id6889 . -11) (undo-tree-id6890 . -11) (undo-tree-id6891 . -11) (undo-tree-id6892 . -11) (undo-tree-id6893 . -11) (undo-tree-id6894 . -11) (undo-tree-id6895 . -11) (undo-tree-id6896 . -11) (undo-tree-id6897 . -11) (undo-tree-id6898 . -11) (undo-tree-id6899 . -11) (undo-tree-id6900 . -11) (undo-tree-id6901 . -11) (undo-tree-id6902 . -11) (undo-tree-id6903 . -11) (undo-tree-id6904 . -11) (undo-tree-id6905 . -11) (undo-tree-id6906 . -11) (undo-tree-id6907 . -11) (undo-tree-id6908 . -11) (undo-tree-id6909 . -11) (undo-tree-id6910 . -11) (undo-tree-id6911 . -11) (undo-tree-id6912 . -11) (undo-tree-id6913 . -11) (undo-tree-id6914 . -11) (undo-tree-id6915 . -11) (undo-tree-id6916 . -11) (undo-tree-id6917 . -11) (undo-tree-id6918 . -11) (undo-tree-id6919 . -11) (undo-tree-id6920 . -11) (undo-tree-id6921 . -11) (undo-tree-id6922 . -11) (undo-tree-id6923 . -11) (undo-tree-id6924 . -11) (undo-tree-id6925 . -11) (undo-tree-id6926 . -11) (undo-tree-id6927 . -11) (undo-tree-id6928 . -11) (undo-tree-id6929 . -11) (undo-tree-id6930 . -11) (undo-tree-id6931 . -11) (undo-tree-id6932 . -11) (undo-tree-id6933 . -11) (undo-tree-id6934 . -11) (undo-tree-id6935 . -11) (undo-tree-id6936 . -11) (undo-tree-id6937 . -11) (undo-tree-id6938 . -11) (undo-tree-id6939 . -11) (undo-tree-id6940 . -11) (undo-tree-id6941 . -11) (undo-tree-id6942 . -11) (undo-tree-id6943 . -11) (undo-tree-id6944 . -11) (undo-tree-id6945 . -11) (undo-tree-id6946 . -11) 2001 (t 26048 30764 743581 736000)) nil (26048 30881 824068 743000) 0 nil])
([nil nil ((1990 . 1991)) nil (26048 30881 824022 241000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -1990) (undo-tree-id6871 . -1) (undo-tree-id6872 . -1) (undo-tree-id6873 . -1) (undo-tree-id6874 . -1) (undo-tree-id6875 . -1) 1991) nil (26048 30881 824021 220000) 0 nil])
([nil nil ((1990 . 1991)) nil (26048 30881 824017 140000) 0 nil])
([nil nil ((apply yas--snippet-revive 1990 1998 #s(yas--snippet nil nil #s(yas--exit 1998 nil) 52 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1998 nil) 52 nil nil nil nil)) (1990 . 1998) (#("seqnum()$0" 0 10 (fontified nil)) . 1990) (1990 . 2000) (#("s" 0 1 (fontified nil)) . 1990) (1990 . 1991) (#("seqnum() (alias get_seqnum, gst_message_get_seqnum)" 0 51 (fontified nil)) . -1990) (1990 . 2041) (#("s" 0 1 (fontified t)) . -1990) (undo-tree-id6866 . -1) (undo-tree-id6867 . -1) (undo-tree-id6868 . -1) (undo-tree-id6869 . -1) (undo-tree-id6870 . -1) 1991) nil (26048 30881 824015 949000) 0 nil])
([nil nil ((#("seqnum()" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-5-face) fontified t) 7 8 (face (rainbow-delimiters-depth-5-face) fontified t)) . -1990) (undo-tree-id6859 . -8) (undo-tree-id6860 . -8) (undo-tree-id6861 . -8) (undo-tree-id6862 . -8) (undo-tree-id6863 . -8) (undo-tree-id6864 . -8) (undo-tree-id6865 . -8) 1998) nil (26048 30881 824009 632000) 0 nil])
([nil nil ((1990 . 1993)) nil (26048 30881 824004 432000) 0 nil])
([nil nil ((apply yas--snippet-revive 1990 1995 #s(yas--snippet nil nil #s(yas--exit 1995 nil) 53 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1995 nil) 53 nil nil nil nil)) (1990 . 1995) (#("src()$0" 0 7 (fontified nil)) . 1990) (1990 . 1997) (#("src" 0 3 (fontified nil)) . 1990) (1990 . 1993) (#("src() (alias get_src)" 0 21 (fontified nil)) . -1990) (1990 . 2011) (#("src" 0 3 (fontified t)) . -1990) (undo-tree-id6848 . -3) (undo-tree-id6849 . -1) (undo-tree-id6850 . -1) (undo-tree-id6851 . -1) (undo-tree-id6852 . -1) (undo-tree-id6853 . -2) (undo-tree-id6854 . -2) (undo-tree-id6855 . -3) (undo-tree-id6856 . -3) (undo-tree-id6857 . -3) (undo-tree-id6858 . -3) 1993) nil (26048 30881 824003 22000) 0 nil])
([nil nil ((1995 . 1998)) nil (26048 30881 823993 404000) 0 nil])
([nil nil ((apply yas--snippet-revive 1996 2004 #s(yas--snippet nil nil #s(yas--exit 2004 nil) 54 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2004 nil) 54 nil nil nil nil)) (1996 . 2004) (#("unwrap()$0" 0 10 (fontified nil)) . 1996) (1996 . 2006) (#("na" 0 2 (fontified nil)) . 1996) (1996 . 1998) (#("unwrap()" 0 8 (fontified nil)) . -1996) (1996 . 2004) (#("na" 0 2 (fontified t)) . -1996) (undo-tree-id6839 . -2) (undo-tree-id6840 . -1) (undo-tree-id6841 . -1) (undo-tree-id6842 . -1) (undo-tree-id6843 . -1) (undo-tree-id6844 . -2) (undo-tree-id6845 . -2) (undo-tree-id6846 . -2) (undo-tree-id6847 . -2) 1998) nil (26048 30881 823992 13000) 0 nil])
([nil nil ((2004 . 2005)) nil (26048 30881 823984 276000) 0 nil])
([nil nil ((2005 . 2009)) nil (26048 30881 823983 585000) 0 nil])
([nil nil ((apply yas--snippet-revive 2005 2011 #s(yas--snippet nil nil #s(yas--exit 2011 nil) 55 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2011 nil) 55 nil nil nil nil)) (2005 . 2011) (#("name()$0" 0 8 (fontified nil)) . 2005) (2005 . 2013) (#("name" 0 4 (fontified nil)) . 2005) (2005 . 2009) (#("name() (alias gst_object_get_name, get_name) (as GstObjectExt)" 0 62 (fontified nil)) . -2005) (2005 . 2067) (#("name" 0 4 (fontified t)) . -2005) (undo-tree-id6826 . -4) (undo-tree-id6827 . -1) (undo-tree-id6828 . -1) (undo-tree-id6829 . -2) (undo-tree-id6830 . -2) (undo-tree-id6831 . -2) (undo-tree-id6832 . -2) (undo-tree-id6833 . -3) (undo-tree-id6834 . -3) (undo-tree-id6835 . -4) (undo-tree-id6836 . -4) (undo-tree-id6837 . -4) (undo-tree-id6838 . -4) 2009) nil (26048 30881 823981 680000) 0 nil])
([nil nil ((2011 . 2013)) nil (26048 30882 643569 709000) 0 nil])
([nil nil ((2013 . 2015)) nil (26048 30893 196858 898000) 0 nil] [nil nil ((2011 . 2029) (#("<ra@gennew>45877" 0 16 (fontified nil)) . -2011) (2011 . 2027) (#("==" 0 2 (fontified t)) . -2011) (undo-tree-id6820 . -2) (undo-tree-id6821 . -1) (undo-tree-id6822 . -1) (undo-tree-id6823 . -2) (undo-tree-id6824 . -2) (undo-tree-id6825 . -2) 2013) ((2011 . 2013) (#("<ra@gennew>45877" 0 16 (fontified nil)) . 2011) (2011 . 2027) (#("==<ra@gennew>45877" 0 2 (fontified t) 2 3 (syntax-table (1) fontified t) 3 12 (fontified t) 12 13 (syntax-table (1) fontified t) 13 18 (fontified t)) . 2011) (undo-tree-id6949 . -18) (undo-tree-id6950 . -18) (undo-tree-id6951 . -18) (undo-tree-id6952 . -18) (undo-tree-id6953 . -18) (undo-tree-id6954 . -18)) (26048 30881 824317 248000) 0 nil])
([nil nil ((2014 . 2015)) nil (26048 30893 196857 996000) 0 nil])
([nil nil ((2029 . 2042)) ((#("
            " 0 13 (fontified t)) . 2029) (undo-tree-id6947 . -13) (undo-tree-id6948 . -1)) (26048 30881 823623 259000) 0 nil])
([nil nil ((#("z" 0 1 (face font-lock-string-face fontified t)) . -2014) (undo-tree-id6955 . -1) (undo-tree-id6956 . -1) (undo-tree-id6957 . -1) (undo-tree-id6958 . -1) (undo-tree-id6959 . -1) (undo-tree-id6960 . -1) 2015) nil (26048 30893 196855 451000) 0 nil])
nil
([nil nil ((2014 . 2018)) nil (26048 30893 196839 469000) 0 nil])
([nil nil ((#("if format!(\"{:?}\", msg).contains(\"src: Some(\\\"zbar\\\")\") {" 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t) 3 10 (face rust-builtin-formatting-macro fontified t) 10 11 (face (rainbow-delimiters-depth-3-face) fontified t) 11 12 (face font-lock-string-face fontified t) 12 16 (face rust-string-interpolation fontified t) 16 17 (face font-lock-string-face fontified t) 17 22 (fontified t) 22 23 (face (rainbow-delimiters-depth-3-face) fontified t) 23 24 (fontified t) 24 32 (fontified t) 32 33 (face (rainbow-delimiters-depth-3-face) fontified t) 33 34 (face font-lock-string-face fontified t) 34 46 (face font-lock-string-face fontified t) 46 49 (face font-lock-string-face fontified t) 49 50 (face font-lock-string-face fontified t) 50 52 (face font-lock-string-face fontified t) 52 53 (face font-lock-string-face rear-nonsticky t fontified t) 53 54 (face font-lock-string-face fontified t) 54 55 (face (rainbow-delimiters-depth-3-face) fontified t) 55 56 (fontified t) 56 57 (face (rainbow-delimiters-depth-3-face) fontified t)) . 1899) (undo-tree-id7253 . -34) (undo-tree-id7254 . -53) (undo-tree-id7255 . -53) (undo-tree-id7256 . -53) (undo-tree-id7257 . -53) (undo-tree-id7258 . -53) (undo-tree-id7259 . -57) (t 26048 30893 213589 541000)) nil (26048 30952 823083 371000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1899) (undo-tree-id7252 . -1)) nil (26048 30952 823077 802000) 0 nil])
([nil nil ((#("            println!(\"{:?}\", msg.src().unwrap().name()==\"zbar\");" 0 12 (fontified t) 12 20 (face rust-builtin-formatting-macro fontified t) 20 21 (face (rainbow-delimiters-depth-3-face) fontified t) 21 22 (face font-lock-string-face fontified t) 22 25 (face rust-string-interpolation fontified t) 25 26 (face rust-string-interpolation fontified t) 26 27 (face font-lock-string-face fontified t) 27 33 (fontified t) 33 36 (fontified t) 36 37 (face (rainbow-delimiters-depth-4-face) fontified t) 37 38 (face (rainbow-delimiters-depth-4-face) fontified t) 38 39 (fontified t) 39 45 (fontified t) 45 46 (face (rainbow-delimiters-depth-4-face) fontified t) 46 47 (face (rainbow-delimiters-depth-4-face) fontified t) 47 48 (fontified t) 48 52 (fontified t) 52 53 (face (rainbow-delimiters-depth-4-face) fontified t) 53 54 (face (rainbow-delimiters-depth-4-face) fontified t) 54 56 (fontified t) 56 62 (face font-lock-string-face fontified t) 62 63 (face (rainbow-delimiters-depth-3-face) fontified t) 63 64 (fontified t)) . 1899) (undo-tree-id7219 . -28) (undo-tree-id7220 . -54) (undo-tree-id7221 . -54) (undo-tree-id7222 . -57) (undo-tree-id7223 . -57) (undo-tree-id7224 . -57) (undo-tree-id7225 . -57) (undo-tree-id7226 . -57) (undo-tree-id7227 . 3) (undo-tree-id7228 . -61) (undo-tree-id7229 . -61) (undo-tree-id7230 . -61) (undo-tree-id7231 . -61) (undo-tree-id7232 . -61) (undo-tree-id7233 . -61) (undo-tree-id7234 . -61) (undo-tree-id7235 . -61) (undo-tree-id7236 . -61) (undo-tree-id7237 . -61) (undo-tree-id7238 . -61) (undo-tree-id7239 . -61) (undo-tree-id7240 . -61) (undo-tree-id7241 . -61) (undo-tree-id7242 . -61) (undo-tree-id7243 . -61) (undo-tree-id7244 . -61) (undo-tree-id7245 . -61) (undo-tree-id7246 . -61) (undo-tree-id7247 . -61) (undo-tree-id7248 . -61) (undo-tree-id7249 . -61) (undo-tree-id7250 . -61) (undo-tree-id7251 . -64)) nil (26048 30952 823074 889000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1899) (undo-tree-id7217 . 1) (undo-tree-id7218 . -1)) nil (26048 30952 822841 195000) 0 nil])
([nil nil ((#("        }" 0 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1899) (undo-tree-id7215 . 9) (undo-tree-id7216 . -9)) nil (26048 30952 822839 82000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1899) (undo-tree-id7212 . -1) (undo-tree-id7213 . 1) (undo-tree-id7214 . -1)) nil (26048 30952 822836 866000) 0 nil])
([nil nil ((1858 . 1871)) nil (26048 30952 822834 97000) 0 nil])
([nil nil ((1871 . 1873)) nil (26048 30952 822833 467000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1892 1895 nil nil nil t #s(yas--exit 1896 nil))) #s(yas--exit 1896 nil) 56 nil #s(yas--field 1 1892 1895 nil nil nil t #s(yas--exit 1896 nil)) nil nil)) (1871 . 1893) (#("MessageView::Element($1)$0" 0 26 (fontified nil)) . 1871) (1871 . 1897) (#("Me" 0 2 (fontified nil)) . 1871) (1871 . 1873) (#("MessageView::Element(…)" 0 23 (fontified nil)) . -1871) (1871 . 1894) (#("Me" 0 2 (face font-lock-type-face fontified t)) . -1871) (undo-tree-id7204 . -2) (undo-tree-id7205 . -1) (undo-tree-id7206 . -1) (undo-tree-id7207 . -2) (undo-tree-id7208 . -2) (undo-tree-id7209 . -2) (undo-tree-id7210 . -2) (undo-tree-id7211 . -2) 1873) nil (26048 30952 822831 954000) 0 nil])
([nil nil ((1892 . 1895)) nil (26048 30952 822824 844000) 0 nil])
([nil nil ((apply yas--snippet-revive 1871 1896 #s(yas--snippet nil (#s(yas--field 1 1892 1895 nil nil nil t #s(yas--exit 1896 nil))) #s(yas--exit 1896 nil) 56 nil #s(yas--field 1 1892 1895 nil nil nil t #s(yas--exit 1896 nil)) nil nil))) nil (26048 30952 822824 294000) 0 nil])
([nil nil ((1896 . 1898)) nil (26048 30952 822823 715000) 0 nil])
([nil nil ((#("+" 0 1 (fontified t)) . -1897) (undo-tree-id7201 . -1) (undo-tree-id7202 . -1) (undo-tree-id7203 . -1) 1898) nil (26048 30952 822822 865000) 0 nil])
([nil nil ((1897 . 1899)) nil (26048 30952 822819 743000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -1897) (undo-tree-id7186 . -1) (undo-tree-id7187 . -1) (undo-tree-id7188 . -1) (undo-tree-id7189 . -1) (undo-tree-id7190 . -1) (undo-tree-id7191 . -1) (undo-tree-id7192 . -1) (undo-tree-id7193 . -1) (undo-tree-id7194 . -1) (undo-tree-id7195 . -1) (undo-tree-id7196 . -1) (#(">" 0 1 (syntax-table (1) fontified t)) . -1898) (undo-tree-id7197 . -1) (undo-tree-id7198 . -1) (undo-tree-id7199 . -1) (undo-tree-id7200 . -1) 1899) nil (26048 30952 822818 52000) 0 nil])
([nil nil ((1897 . 1902)) nil (26048 30952 822801 530000) 0 nil])
([nil nil ((1900 . 1903) (#("sr" 0 2 (fontified nil)) . 1900) (1900 . 1902) (#("src" 0 3 (fontified nil)) . -1900) (1900 . 1903) (#("sr" 0 2 (fontified t)) . -1900) (undo-tree-id7179 . -2) (undo-tree-id7180 . -1) (undo-tree-id7181 . -1) (undo-tree-id7182 . -2) (undo-tree-id7183 . -2) (undo-tree-id7184 . -2) (undo-tree-id7185 . -2) 1902) nil (26048 30952 822800 239000) 0 nil])
([nil nil ((1903 . 1906)) nil (26048 30952 822793 693000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -1904) (undo-tree-id7164 . -1) (undo-tree-id7165 . -1) (undo-tree-id7166 . -1) (undo-tree-id7167 . -1) (undo-tree-id7168 . -1) (undo-tree-id7169 . -1) (undo-tree-id7170 . -1) (undo-tree-id7171 . -1) (undo-tree-id7172 . -1) (#("n" 0 1 (fontified t)) . -1905) (undo-tree-id7173 . -1) (undo-tree-id7174 . -1) (undo-tree-id7175 . -1) (undo-tree-id7176 . -1) (undo-tree-id7177 . -1) (undo-tree-id7178 . -1) 1906) nil (26048 30952 822792 204000) 0 nil])
([nil nil ((1904 . 1908)) nil (26048 30952 822782 55000) 0 nil])
([nil nil ((#("name" 0 4 (fontified t)) . -1904) (undo-tree-id7153 . -4) (undo-tree-id7154 . -1) (undo-tree-id7155 . -1) (undo-tree-id7156 . -2) (undo-tree-id7157 . -2) (undo-tree-id7158 . -3) (undo-tree-id7159 . -3) (undo-tree-id7160 . -4) (undo-tree-id7161 . -4) (undo-tree-id7162 . -4) (undo-tree-id7163 . -4) 1908) nil (26048 30952 822780 722000) 0 nil])
([nil nil ((#("src." 0 4 (fontified t)) . -1900) (undo-tree-id7122 . -4) (undo-tree-id7123 . -3) (undo-tree-id7124 . -3) (undo-tree-id7125 . -3) (undo-tree-id7126 . -4) (undo-tree-id7127 . -4) (undo-tree-id7128 . -4) (undo-tree-id7129 . -4) (undo-tree-id7130 . -4) (undo-tree-id7131 . -4) (undo-tree-id7132 . -4) (undo-tree-id7133 . -4) (undo-tree-id7134 . -4) (undo-tree-id7135 . -4) (undo-tree-id7136 . -4) (undo-tree-id7137 . -4) (undo-tree-id7138 . -4) (undo-tree-id7139 . -4) (undo-tree-id7140 . -4) (undo-tree-id7141 . -4) (undo-tree-id7142 . -4) (undo-tree-id7143 . -4) (undo-tree-id7144 . -4) (undo-tree-id7145 . -4) (undo-tree-id7146 . -4) (undo-tree-id7147 . -4) (undo-tree-id7148 . -4) (undo-tree-id7149 . -4) (undo-tree-id7150 . -4) (undo-tree-id7151 . -4) (undo-tree-id7152 . -4) 1904) nil (26048 30952 822711 682000) 0 nil])
([nil nil ((1899 . 1901)) nil (26048 30952 822690 504000) 0 nil])
([nil nil ((1901 . 1904)) nil (26048 30952 822689 831000) 0 nil])
([nil nil ((1904 . 1908)) nil (26048 30952 822689 63000) 0 nil])
([nil nil ((#("MessageView::Element(src) if msg.name " 0 11 (face font-lock-type-face fontified t) 11 13 (fontified t) 13 20 (face font-lock-type-face fontified t) 20 21 (face (rainbow-delimiters-depth-4-face) fontified t) 21 24 (fontified t) 24 25 (face (rainbow-delimiters-depth-4-face) fontified t) 25 26 (fontified t) 26 28 (face font-lock-keyword-face fontified t) 28 37 (fontified t) 37 38 (fontified t)) . 1871) (undo-tree-id6964 . -25) (undo-tree-id6965 . -25) (undo-tree-id6966 . -21) (undo-tree-id6967 . -21) (undo-tree-id6968 . -21) (undo-tree-id6969 . -21) (undo-tree-id6970 . -21) (undo-tree-id6971 . -21) (undo-tree-id6972 . -22) (undo-tree-id6973 . -22) (undo-tree-id6974 . -22) (undo-tree-id6975 . -22) (undo-tree-id6976 . -23) (undo-tree-id6977 . -23) (undo-tree-id6978 . -24) (undo-tree-id6979 . -24) (undo-tree-id6980 . -24) (undo-tree-id6981 . -24) (undo-tree-id6982 . -24) (undo-tree-id6983 . -24) (undo-tree-id6984 . -24) (undo-tree-id6985 . -24) (undo-tree-id6986 . -25) (undo-tree-id6987 . -25) (undo-tree-id6988 . -25) (undo-tree-id6989 . -25) (undo-tree-id6990 . -25) (undo-tree-id6991 . -25) (undo-tree-id6992 . -25) (undo-tree-id6993 . -25) (undo-tree-id6994 . -25) (undo-tree-id6995 . -25) (undo-tree-id6996 . -25) (undo-tree-id6997 . -25) (undo-tree-id6998 . -25) (undo-tree-id6999 . -26) (undo-tree-id7000 . -26) (undo-tree-id7001 . -26) (undo-tree-id7002 . -26) (undo-tree-id7003 . -26) (undo-tree-id7004 . -26) (undo-tree-id7005 . -26) (undo-tree-id7006 . -26) (undo-tree-id7007 . -26) (undo-tree-id7008 . -26) (undo-tree-id7009 . -26) (undo-tree-id7010 . -26) (undo-tree-id7011 . -26) (undo-tree-id7012 . -26) (undo-tree-id7013 . -26) (undo-tree-id7014 . -26) (undo-tree-id7015 . -26) (undo-tree-id7016 . -26) (undo-tree-id7017 . -26) (undo-tree-id7018 . -26) (undo-tree-id7019 . -26) (undo-tree-id7020 . -26) (undo-tree-id7021 . -26) (undo-tree-id7022 . -26) (undo-tree-id7023 . -26) (undo-tree-id7024 . -26) (undo-tree-id7025 . -26) (undo-tree-id7026 . -27) (undo-tree-id7027 . -27) (undo-tree-id7028 . -27) (undo-tree-id7029 . -28) (undo-tree-id7030 . -28) (undo-tree-id7031 . -38) (undo-tree-id7032 . -38) (undo-tree-id7033 . -38) (undo-tree-id7034 . -38) (undo-tree-id7035 . -38) (undo-tree-id7036 . -38) (undo-tree-id7037 . -38) (undo-tree-id7038 . -38) (undo-tree-id7039 . -38) (undo-tree-id7040 . -38) (undo-tree-id7041 . -38) (undo-tree-id7042 . -38) (undo-tree-id7043 . -38) (undo-tree-id7044 . -38) (undo-tree-id7045 . -38) (undo-tree-id7046 . -38) (undo-tree-id7047 . -38) (undo-tree-id7048 . -38) (undo-tree-id7049 . -38) (undo-tree-id7050 . -38) (undo-tree-id7051 . -38) (undo-tree-id7052 . -38) (undo-tree-id7053 . -38) (undo-tree-id7054 . -38) (undo-tree-id7055 . -38) (undo-tree-id7056 . -38) (undo-tree-id7057 . -38) (undo-tree-id7058 . -38) (undo-tree-id7059 . -38) (undo-tree-id7060 . -38) (undo-tree-id7061 . -38) (undo-tree-id7062 . -38) (undo-tree-id7063 . -38) (undo-tree-id7064 . -38) (undo-tree-id7065 . -38) (undo-tree-id7066 . -38) (undo-tree-id7067 . -38) (undo-tree-id7068 . -38) (undo-tree-id7069 . -38) (undo-tree-id7070 . -38) (undo-tree-id7071 . -38) (undo-tree-id7072 . -38) (undo-tree-id7073 . -38) (undo-tree-id7074 . -38) (undo-tree-id7075 . -38) (undo-tree-id7076 . -28) (undo-tree-id7077 . -28) (undo-tree-id7078 . -28) (undo-tree-id7079 . -28) (undo-tree-id7080 . -28) (undo-tree-id7081 . -29) (undo-tree-id7082 . -29) (undo-tree-id7083 . -30) (undo-tree-id7084 . -30) (undo-tree-id7085 . -30) (undo-tree-id7086 . -30) (undo-tree-id7087 . -30) (undo-tree-id7088 . -30) (undo-tree-id7089 . -30) (undo-tree-id7090 . -30) (undo-tree-id7091 . -30) (undo-tree-id7092 . -31) (undo-tree-id7093 . -31) (undo-tree-id7094 . -31) (undo-tree-id7095 . -32) (undo-tree-id7096 . -32) (undo-tree-id7097 . -32) (undo-tree-id7098 . -32) (undo-tree-id7099 . -32) (undo-tree-id7100 . -33) (undo-tree-id7101 . -33) (undo-tree-id7102 . -33) (undo-tree-id7103 . -33) (undo-tree-id7104 . -33) (undo-tree-id7105 . -33) (undo-tree-id7106 . -33) (undo-tree-id7107 . -34) (undo-tree-id7108 . -34) (undo-tree-id7109 . -34) (undo-tree-id7110 . -35) (undo-tree-id7111 . -35) (undo-tree-id7112 . -35) (undo-tree-id7113 . -35) (undo-tree-id7114 . -36) (undo-tree-id7115 . -36) (undo-tree-id7116 . -37) (undo-tree-id7117 . -37) (undo-tree-id7118 . 1) (undo-tree-id7119 . -37) (undo-tree-id7120 . -37) (undo-tree-id7121 . -38)) nil (26048 30952 822680 975000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1871) (undo-tree-id6962 . 1) (undo-tree-id6963 . -1)) nil (26048 30952 822216 594000) 0 nil])
([nil nil ((#("            " 0 12 (fontified t)) . -1871) (undo-tree-id6961 . 12)) nil (26048 30952 822210 502000) 0 nil])
([nil nil ((1891 . 1899) (#("        " 0 8 (fontified nil)) . 1890) (1890 . 1898) (1890 . 1891) (t 26048 30952 873593 157000)) nil (26048 31029 278348 252000) 0 nil])
([nil nil ((1899 . 1904)) nil (26048 31029 278347 159000) 0 nil])
([nil nil ((1904 . 1907)) nil (26048 31029 278346 567000) 0 nil])
([nil nil ((apply yas--snippet-revive 1906 1911 #s(yas--snippet nil nil #s(yas--exit 1911 nil) 57 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1911 nil) 57 nil nil nil nil)) (1906 . 1911) (#("src()$0" 0 7 (fontified nil)) . 1906) (1906 . 1913) (#("s" 0 1 (fontified nil)) . 1906) (1906 . 1907) (#("src() (alias get_src)" 0 21 (fontified nil)) . -1906) (1906 . 1927) (#("s" 0 1 (fontified t)) . -1906) (undo-tree-id7293 . -1) 1907) nil (26048 31029 278345 334000) 0 nil])
([nil nil ((1911 . 1914)) nil (26048 31029 278342 743000) 0 nil])
([nil nil ((#("an" 0 2 (fontified t)) . -1912) (undo-tree-id7292 . -2) 1914) nil (26048 31029 278342 15000) 0 nil])
([nil nil ((1912 . 1913)) nil (26048 31029 278340 478000) 0 nil])
([nil nil ((apply yas--snippet-revive 1912 1920 #s(yas--snippet nil nil #s(yas--exit 1920 nil) 58 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1920 nil) 58 nil nil nil nil)) (1912 . 1920) (#("unwrap()$0" 0 10 (fontified nil)) . 1912) (1912 . 1922) (#("u" 0 1 (fontified nil)) . 1912) (1912 . 1913) (#("unwrap()" 0 8 (fontified nil)) . -1912) (1912 . 1920) (#("u" 0 1 (fontified t)) . -1912) (undo-tree-id7291 . -1) 1913) nil (26048 31029 278339 318000) 0 nil])
([nil nil ((1920 . 1921)) nil (26048 31029 278336 532000) 0 nil])
([nil nil ((1921 . 1923)) nil (26048 31029 278335 967000) 0 nil])
([nil nil ((apply yas--snippet-revive 1921 1927 #s(yas--snippet nil nil #s(yas--exit 1927 nil) 59 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1927 nil) 59 nil nil nil nil)) (1921 . 1927) (#("name()$0" 0 8 (fontified nil)) . 1921) (1921 . 1929) (#("na" 0 2 (fontified nil)) . 1921) (1921 . 1923) (#("name() (alias gst_object_get_name, get_name) (as GstObjectExt)" 0 62 (fontified nil)) . -1921) (1921 . 1983) (#("na" 0 2 (fontified t)) . -1921) (undo-tree-id7290 . -2) 1923) nil (26048 31029 278334 410000) 0 nil])
([nil nil ((1927 . 1928)) nil (26048 31029 278331 867000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -1926) (undo-tree-id7288 . -1) (#(" " 0 1 (fontified t)) . -1927) (undo-tree-id7289 . -1) 1928) nil (26048 31029 278330 941000) 0 nil])
([nil nil ((1926 . 1931)) nil (26048 31029 278328 635000) 0 nil])
([nil nil ((#("name() == " 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-3-face) fontified t) 5 6 (face (rainbow-delimiters-depth-3-face) fontified t) 6 10 (fontified t)) . -1921) (undo-tree-id7287 . -10) 1931) nil (26048 31029 278327 917000) 0 nil])
([nil nil ((#("unwrap()." 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-3-face) fontified t) 7 8 (face (rainbow-delimiters-depth-3-face) fontified t) 8 9 (fontified t)) . -1912) (undo-tree-id7286 . -9) 1921) nil (26048 31029 278326 371000) 0 nil])
([nil nil ((1912 . 1913)) nil (26048 31029 278324 996000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -1912) (undo-tree-id7285 . -1) 1913) nil (26048 31029 278324 353000) 0 nil])
([nil nil ((1912 . 1914)) nil (26048 31029 278322 962000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1921 1948 nil nil nil t #s(yas--exit 1949 nil))) #s(yas--exit 1949 nil) 60 nil #s(yas--field 1 1921 1948 nil nil nil t #s(yas--exit 1949 nil)) nil nil)) (1912 . 1923) (#("and_then(${1:f})$0" 0 18 (fontified nil)) . 1912) (1912 . 1930) (#("an" 0 2 (fontified nil)) . 1912) (1912 . 1914) (#("and_then(…) (alias flatmap)" 0 27 (fontified nil)) . -1912) (1912 . 1939) (#("an" 0 2 (fontified t)) . -1912) (undo-tree-id7284 . -2) 1914) nil (26048 31029 278321 795000) 0 nil])
([nil nil ((1922 . 1923) (#("f" 0 1 (fontified nil)) . 1922) (1921 . 1922)) nil (26048 31029 278319 64000) 0 nil])
([nil nil ((1922 . 1925)) nil (26048 31029 278318 150000) 0 nil])
([nil nil ((1926 . 1933)) nil (26048 31029 278317 555000) 0 nil])
([nil nil ((apply yas--snippet-revive 1931 1937 #s(yas--snippet nil nil #s(yas--exit 1937 nil) 61 nil nil #s(yas--field 1 1921 1948 nil nil nil t #s(yas--exit 1949 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1937 nil) 61 nil nil #s(yas--field 1 1921 1948 nil nil nil t #s(yas--exit 1949 nil)) nil)) (1931 . 1937) (#("name()$0" 0 8 (fontified nil)) . 1931) (1931 . 1939) (#("na" 0 2 (fontified nil)) . 1931) (1931 . 1933) (#("name() (alias gst_object_get_name, get_name) (as GstObjectExt)" 0 62 (fontified nil)) . -1931) (1931 . 1993) (#("na" 0 2 (fontified t)) . -1931) (undo-tree-id7282 . -2) (undo-tree-id7283 . -2) 1933) nil (26048 31029 278316 137000) 0 nil])
([nil nil ((1937 . 1941)) nil (26048 31029 278312 978000) 0 nil])
([nil nil ((1940 . 1944)) nil (26048 31029 278312 390000) 0 nil])
([nil nil ((#("n" 0 1 (face font-lock-string-face fontified t)) . -1941) (undo-tree-id7279 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -1942) (undo-tree-id7280 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -1943) (undo-tree-id7281 . -1) 1944) nil (26048 31029 278311 154000) 0 nil])
([nil nil ((1941 . 1944)) nil (26048 31029 278308 89000) 0 nil])
([nil nil ((1927 . 1930)) nil (26048 31029 278307 444000) 0 nil])
([nil nil ((apply yas--snippet-revive 1912 1949 #s(yas--snippet nil (#s(yas--field 1 1921 1948 nil nil nil t #s(yas--exit 1949 nil))) #s(yas--exit 1949 nil) 60 nil #s(yas--field 1 1921 1948 nil nil nil t #s(yas--exit 1949 nil)) nil nil))) nil (26048 31029 278306 828000) 0 nil])
([nil nil ((1948 . 1951)) nil (26048 31029 278306 179000) 0 nil])
([nil nil ((1950 . 1951)) nil (26048 31029 278305 568000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1950) (undo-tree-id7278 . -1) 1951) nil (26048 31029 278304 718000) 0 nil])
([nil nil ((1950 . 1953)) nil (26048 31029 278303 110000) 0 nil])
([nil nil ((apply yas--snippet-revive 1950 1954 #s(yas--snippet nil nil nil 62 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 62 nil nil nil nil)) (1950 . 1954) (#("true" 0 4 (fontified nil)) . 1950) (1950 . 1954) (#("tru" 0 3 (fontified nil)) . 1950) (1950 . 1953) (#("true" 0 4 (fontified nil)) . -1950) (1950 . 1954) (#("tru" 0 3 (fontified t)) . -1950) (undo-tree-id7277 . -3) 1953) nil (26048 31029 278301 632000) 0 nil])
([nil nil ((1955 . 1963)) nil (26048 31029 278298 507000) 0 nil])
([nil nil ((1962 . 1964)) nil (26048 31029 278297 143000) 0 nil])
([nil nil ((apply yas--snippet-revive 1962 1967 #s(yas--snippet nil nil nil 63 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 63 nil nil nil nil)) (1962 . 1967) (#("false" 0 5 (fontified nil)) . 1962) (1962 . 1967) (#("fa" 0 2 (fontified nil)) . 1962) (1962 . 1964) (#("false" 0 5 (fontified nil)) . -1962) (1962 . 1967) (#("fa" 0 2 (fontified t)) . -1962) (undo-tree-id7260 . -1) (undo-tree-id7261 . -2) (undo-tree-id7262 . -1) (undo-tree-id7263 . -1) (undo-tree-id7264 . -1) (undo-tree-id7265 . -1) (undo-tree-id7266 . -1) (undo-tree-id7267 . -1) (undo-tree-id7268 . -1) (undo-tree-id7269 . -1) (undo-tree-id7270 . -1) (undo-tree-id7271 . -2) (undo-tree-id7272 . -2) (undo-tree-id7273 . -2) (undo-tree-id7274 . -2) (undo-tree-id7275 . -2) (undo-tree-id7276 . -2) 1964) nil (26048 31029 278292 242000) 0 nil])
([nil nil ((1969 . 1972) (t 26048 31029 296931 150000)) nil (26048 31031 429797 982000) 0 nil])
([nil nil ((#("false}) {}" 0 5 (face font-lock-keyword-face fontified t) 5 6 (face (rainbow-delimiters-depth-4-face) fontified t) 6 7 (face (rainbow-delimiters-depth-3-face) fontified t) 7 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-3-face) fontified t) 9 10 (face (rainbow-delimiters-depth-3-face) fontified t)) . -1962) (undo-tree-id7446 . -10) (undo-tree-id7447 . -10) (undo-tree-id7448 . -10) (undo-tree-id7449 . -10) (undo-tree-id7450 . -10) (undo-tree-id7451 . -10) (undo-tree-id7452 . -10) (undo-tree-id7453 . -10) (undo-tree-id7454 . -10) (undo-tree-id7455 . -10) (undo-tree-id7456 . -10) (undo-tree-id7457 . -10) (undo-tree-id7458 . -10) (undo-tree-id7459 . -9) (undo-tree-id7460 . -9) (undo-tree-id7461 . -9) (undo-tree-id7462 . -9) (undo-tree-id7463 . -9) (undo-tree-id7464 . -10) (undo-tree-id7465 . -10) (undo-tree-id7466 . -10) (undo-tree-id7467 . -10) (undo-tree-id7468 . -10) 1972 (t 26048 31031 450264 613000)) nil (26048 31047 899649 646000) 0 nil])
([nil nil ((#("else {" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-4-face) fontified t)) . -1956) (undo-tree-id7414 . -6) (undo-tree-id7415 . -6) (undo-tree-id7416 . -6) (undo-tree-id7417 . -6) (undo-tree-id7418 . -6) (undo-tree-id7419 . -6) (undo-tree-id7420 . -6) (undo-tree-id7421 . -6) (undo-tree-id7422 . -6) (undo-tree-id7423 . -6) (undo-tree-id7424 . -6) (undo-tree-id7425 . -6) (undo-tree-id7426 . -6) (undo-tree-id7427 . -6) (undo-tree-id7428 . -6) (undo-tree-id7429 . -6) (undo-tree-id7430 . -6) (undo-tree-id7431 . -6) (undo-tree-id7432 . -6) (undo-tree-id7433 . -6) (undo-tree-id7434 . -6) (undo-tree-id7435 . -6) (undo-tree-id7436 . -6) (undo-tree-id7437 . -6) (undo-tree-id7438 . -6) (undo-tree-id7439 . -6) (undo-tree-id7440 . -6) (undo-tree-id7441 . -6) (undo-tree-id7442 . -6) (undo-tree-id7443 . -6) (undo-tree-id7444 . -6) (undo-tree-id7445 . -6) 1962) nil (26048 31047 899633 926000) 0 nil])
([nil nil ((#("true} " 0 4 (face font-lock-keyword-face fontified t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t) 5 6 (fontified t)) . -1950) (undo-tree-id7380 . -6) (undo-tree-id7381 . -6) (undo-tree-id7382 . -6) (undo-tree-id7383 . -6) (undo-tree-id7384 . -6) (undo-tree-id7385 . -6) (undo-tree-id7386 . -6) (undo-tree-id7387 . -6) (undo-tree-id7388 . -6) (undo-tree-id7389 . -6) (undo-tree-id7390 . -6) (undo-tree-id7391 . -6) (undo-tree-id7392 . -6) (undo-tree-id7393 . -6) (undo-tree-id7394 . -6) (undo-tree-id7395 . -6) (undo-tree-id7396 . -6) (undo-tree-id7397 . -6) (undo-tree-id7398 . -6) (undo-tree-id7399 . -6) (undo-tree-id7400 . -6) (undo-tree-id7401 . -6) (undo-tree-id7402 . -6) (undo-tree-id7403 . -6) (undo-tree-id7404 . -6) (undo-tree-id7405 . -6) (undo-tree-id7406 . -6) (undo-tree-id7407 . -6) (undo-tree-id7408 . -6) (undo-tree-id7409 . -6) (undo-tree-id7410 . -6) (undo-tree-id7411 . -6) (undo-tree-id7412 . -6) (undo-tree-id7413 . -6) 1956) nil (26048 31047 899613 729000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1948) (undo-tree-id7306 . -1) (undo-tree-id7307 . -1) (undo-tree-id7308 . -1) (undo-tree-id7309 . -1) (undo-tree-id7310 . -1) (undo-tree-id7311 . -1) (undo-tree-id7312 . -1) (undo-tree-id7313 . -1) (undo-tree-id7314 . -1) (undo-tree-id7315 . -1) (undo-tree-id7316 . -1) (undo-tree-id7317 . -1) (undo-tree-id7318 . -1) (undo-tree-id7319 . -1) (undo-tree-id7320 . -1) (undo-tree-id7321 . -1) (undo-tree-id7322 . -1) (undo-tree-id7323 . -1) (undo-tree-id7324 . -1) (undo-tree-id7325 . -1) (undo-tree-id7326 . -1) (undo-tree-id7327 . -1) (undo-tree-id7328 . -1) (undo-tree-id7329 . -1) (undo-tree-id7330 . -1) (undo-tree-id7331 . -1) (undo-tree-id7332 . -1) (undo-tree-id7333 . -1) (undo-tree-id7334 . -1) (undo-tree-id7335 . -1) (undo-tree-id7336 . -1) (undo-tree-id7337 . -1) (undo-tree-id7338 . -1) (undo-tree-id7339 . -1) (undo-tree-id7340 . -1) (undo-tree-id7341 . -1) (undo-tree-id7342 . -1) (undo-tree-id7343 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -1949) (undo-tree-id7344 . -1) (undo-tree-id7345 . -1) (undo-tree-id7346 . -1) (undo-tree-id7347 . -1) (undo-tree-id7348 . -1) (undo-tree-id7349 . -1) (undo-tree-id7350 . -1) (undo-tree-id7351 . -1) (undo-tree-id7352 . -1) (undo-tree-id7353 . -1) (undo-tree-id7354 . -1) (undo-tree-id7355 . -1) (undo-tree-id7356 . -1) (undo-tree-id7357 . -1) (undo-tree-id7358 . -1) (undo-tree-id7359 . -1) (undo-tree-id7360 . -1) (undo-tree-id7361 . -1) (undo-tree-id7362 . -1) (undo-tree-id7363 . -1) (undo-tree-id7364 . -1) (undo-tree-id7365 . -1) (undo-tree-id7366 . -1) (undo-tree-id7367 . -1) (undo-tree-id7368 . -1) (undo-tree-id7369 . -1) (undo-tree-id7370 . -1) (undo-tree-id7371 . -1) (undo-tree-id7372 . -1) (undo-tree-id7373 . -1) (undo-tree-id7374 . -1) (undo-tree-id7375 . -1) (undo-tree-id7376 . -1) (undo-tree-id7377 . -1) (undo-tree-id7378 . -1) (undo-tree-id7379 . -1) 1950) nil (26048 31047 899589 635000) 0 nil])
([nil nil ((#("if " 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t)) . -1899) (undo-tree-id7294 . -3) (undo-tree-id7295 . -3) (undo-tree-id7296 . -3) (undo-tree-id7297 . -3) (undo-tree-id7298 . -3) (undo-tree-id7299 . -3) (undo-tree-id7300 . -3) (undo-tree-id7301 . -3) (undo-tree-id7302 . -3) (undo-tree-id7303 . -3) (undo-tree-id7304 . -3) (undo-tree-id7305 . -3) 1902) nil (26048 31047 899540 750000) 0 nil])
([nil nil ((1945 . 1947)) nil (26048 31047 899522 479000) 0 nil])
([nil nil ((1945 . 1948) (t 26048 31047 950265 608000)) nil (26048 31050 88603 979000) 0 nil])
([nil nil ((1949 . 1957) (#("            " 0 12 (fontified nil)) . 1948) (undo-tree-id7469 . -8) (undo-tree-id7470 . -8) (undo-tree-id7471 . -8) (undo-tree-id7472 . -8) (1956 . 1960) (1947 . 1957) (t 26048 31050 106932 406000)) nil (26048 31075 100779 566000) 0 nil])
([nil nil ((1899 . 1907) (t 26048 31076 186933 983000)) nil (26048 31081 353684 231000) 0 nil] [nil nil ((1948 . 1960)) ((#("            " 0 12 (fontified t)) . 1948) (undo-tree-id7551 . -12) (undo-tree-id7552 . -12) (undo-tree-id7553 . -12) (undo-tree-id7554 . -12) (undo-tree-id7555 . -12)) (26048 31074 911546 449000) 0 nil])
([nil nil ((89 . 90) (#("    " 0 4 (fontified t)) . -166) (undo-tree-id7591 . -4) (551 . 559) (925 . 934) (930 . 938) (940 . 948) (946 . 954) (962 . 970) (977 . 985) (989 . 997) (996 . 1004) (1006 . 1012) (#("    
" 0 4 (fontified t) 4 5 (fontified t)) . -1221) (#("        
" 0 4 (fontified t) 4 9 (fontified t)) . -1303) (#("," 0 1 (fontified t)) . -1857) (undo-tree-id7592 . -1) (undo-tree-id7593 . -1) (1945 . 1946) (1947 . 1948) (#("

        " 0 1 (fontified t) 1 2 (fontified t) 2 10 (fontified t)) . 1955) (undo-tree-id7594 . -1) (undo-tree-id7595 . -1) (undo-tree-id7596 . -1) (undo-tree-id7597 . -1) (undo-tree-id7598 . -1) (undo-tree-id7599 . -1) (undo-tree-id7600 . -1) (undo-tree-id7601 . -1) (undo-tree-id7602 . -1) (undo-tree-id7603 . -1) (undo-tree-id7604 . -1) (#("
        " 0 1 (fontified t) 1 9 (fontified t)) . 1968) (undo-tree-id7605 . -9) 1956 (#("    
    
    
" 0 4 (fontified t) 4 5 (fontified t) 5 9 (fontified t) 9 10 (fontified t) 10 14 (fontified t) 14 15 (fontified t)) . 2060) 1956 (t 26048 31081 373600 960000)) nil (26048 31127 579668 653000) 0 nil])
([nil nil ((1972 . 1980) (#("                           " 0 27 (fontified nil)) . 1971) (1971 . 1998) (#("        " 0 8 (fontified nil)) . 1971) (undo-tree-id7504 . -8) (undo-tree-id7505 . -8) (undo-tree-id7507 . -8) (undo-tree-id7509 . -8) (undo-tree-id7511 . -8) (undo-tree-id7513 . -8) (1970 . 1980) (t 26048 31053 673599 290000)) ((#("
        
" 0 1 (fontified t) 1 9 (fontified nil) 9 10 (fontified nil)) . 1970) (undo-tree-id7531 . -10) (undo-tree-id7532 . -9) (undo-tree-id7533 . -10) (undo-tree-id7534 . -10) (undo-tree-id7535 . -10) (undo-tree-id7536 . -10) (undo-tree-id7537 . -1) (undo-tree-id7538 . -1) (undo-tree-id7539 . -1) (undo-tree-id7540 . -1) (undo-tree-id7541 . -1) (undo-tree-id7542 . -1) (undo-tree-id7543 . -1) (undo-tree-id7544 . -1) (undo-tree-id7545 . -1) (1971 . 1979) (#("                           " 0 27 (fontified nil)) . 1971) (1971 . 1998) (#("        " 0 7 (fontified t) 7 8 (fontified t)) . 1972) (undo-tree-id7546 . -8) (undo-tree-id7547 . -8) (undo-tree-id7548 . -8) (undo-tree-id7549 . -8) (undo-tree-id7550 . -8)) (26048 31074 724086 480000) 0 nil])
([nil nil ((2020 . 2028) (#("            " 0 12 (fontified nil)) . 2019) (undo-tree-id7587 . -8) (undo-tree-id7588 . -8) (undo-tree-id7589 . -8) (undo-tree-id7590 . -8) (2027 . 2031) (2018 . 2028)) nil (26048 31127 579654 487000) 0 nil])
([nil nil ((1971 . 1998)) ((#("                           " 0 27 (fontified t)) . 1971) (undo-tree-id7524 . -27) (undo-tree-id7525 . -27) (undo-tree-id7526 . -27) (undo-tree-id7527 . -27) (undo-tree-id7528 . -27) (undo-tree-id7529 . -27) (undo-tree-id7530 . -27)) (26048 31074 530351 602000) 0 nil])
([nil nil ((2019 . 2031)) nil (26048 31127 579650 805000) 0 nil])
([nil nil ((1998 . 1999)) ((#("N" 0 1 (face font-lock-type-face fontified t)) . 1998) (undo-tree-id7521 . -1) (undo-tree-id7522 . -1) (undo-tree-id7523 . -1)) (26048 31074 337020 566000) 0 nil])
([nil nil ((2031 . 2033)) nil (26048 31127 579650 251000) 0 nil])
([nil nil ((#("N" 0 1 (face font-lock-type-face fontified t)) . -1998) (undo-tree-id7494 . -1) (undo-tree-id7495 . -1) (undo-tree-id7497 . -1) (undo-tree-id7499 . -1) (undo-tree-id7501 . -1) (undo-tree-id7503 . -1) 1999) ((1998 . 1999)) (26048 31074 116093 272000) 0 nil])
([nil nil ((apply yas--snippet-revive 2031 2041 #s(yas--snippet nil nil #s(yas--exit 2040 nil) 65 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2040 nil) 65 nil nil nil nil)) (2031 . 2041) (#("println!($0)" 0 12 (fontified nil)) . 2031) (2031 . 2043) (#("pr" 0 2 (fontified nil)) . 2031) (2031 . 2033) (#("println!(…)" 0 11 (fontified nil)) . -2031) (2031 . 2042) (#("pr" 0 2 (fontified t)) . -2031) (undo-tree-id7578 . -2) (undo-tree-id7579 . -1) (undo-tree-id7580 . -1) (undo-tree-id7581 . -1) (undo-tree-id7582 . -2) (undo-tree-id7583 . -2) (undo-tree-id7584 . -2) (undo-tree-id7585 . -2) (undo-tree-id7586 . -2) 2033) nil (26048 31127 579648 760000) 0 nil])
([nil nil ((1972 . 1999) (#("                           " 0 27 (fontified nil)) . 1971) (undo-tree-id7479 . -27) (undo-tree-id7480 . -27) (undo-tree-id7482 . -27) (undo-tree-id7484 . -27) (undo-tree-id7486 . -27) (undo-tree-id7488 . -27) (undo-tree-id7490 . -27) (undo-tree-id7492 . -27) (1998 . 1999)) ((#("
" 0 1 (fontified nil)) . 1998) (1971 . 1998) (#("                           " 0 27 (fontified t)) . 1972)) (26048 31073 816965 109000) 0 nil])
([nil nil ((2040 . 2042)) nil (26048 31127 579640 651000) 0 nil])
([nil nil ((1960 . 1961)) ((#("N" 0 1 (face font-lock-type-face fontified t)) . 1960) (undo-tree-id7518 . -1) (undo-tree-id7519 . -1) (undo-tree-id7520 . -1)) (26048 31073 594459 758000) 0 nil])
([nil nil ((2041 . 2043)) nil (26048 31127 579640 97000) 0 nil])
([nil nil ((apply yas--snippet-revive 1960 1964 #s(yas--snippet nil nil #s(yas--exit #<marker at 1952 in wh-gst/main.rs> nil) 64 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 1952 in wh-gst/main.rs> nil) 64 nil nil nil nil)) (1960 . 1964) (#("None$0" 0 6 (fontified nil)) . 1960) (1960 . 1966) (#("N" 0 1 (fontified nil)) . 1960) (1960 . 1961) (#("None" 0 4 (fontified nil)) . -1960) (1960 . 1964) (#("N" 0 1 (face font-lock-type-face fontified t)) . -1960) (undo-tree-id7473 . -1) (undo-tree-id7475 . -1) (undo-tree-id7477 . -1) 1961) ((1960 . 1961) (#("None" 0 4 (fontified nil)) . 1960) (1960 . 1964) (#("N" 0 1 (fontified nil)) . 1960) (1960 . 1961) (#("None$0" 0 6 (fontified nil)) . 1960) (1960 . 1966) (#("None" 0 4 (face font-lock-type-face fontified t)) . 1960) (undo-tree-id7517 . -4) (t 26048 31070 470266 972000)) (26048 31073 454436 692000) 0 nil])
([nil nil ((2042 . 2044)) nil (26048 31127 579639 499000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2011) (undo-tree-id7514 . -1) (undo-tree-id7515 . -1) (undo-tree-id7516 . -1) 2012 (t 26048 31070 470266 972000)) ((2011 . 2012)) (26048 31073 454055 281000) 0 nil])
([nil nil ((2046 . 2050)) nil (26048 31127 579638 849000) 0 nil])
nil
([nil nil ((2048 . 2051) (#("ms" 0 2 (fontified nil)) . 2048) (2048 . 2050) (#("msg" 0 3 (fontified nil)) . -2048) (2048 . 2051) (#("ms" 0 2 (fontified t)) . -2048) (undo-tree-id7565 . -1) (undo-tree-id7566 . -2) (undo-tree-id7567 . -1) (undo-tree-id7568 . -1) (undo-tree-id7569 . -1) (undo-tree-id7570 . -1) (undo-tree-id7571 . -1) (undo-tree-id7572 . -1) (undo-tree-id7573 . -1) (undo-tree-id7574 . -1) (undo-tree-id7575 . -2) (undo-tree-id7576 . -2) (undo-tree-id7577 . -2) 2050) nil (26048 31127 579637 205000) 0 nil])
([nil nil ((2052 . 2053)) nil (26048 31127 579626 549000) 0 nil])
([nil nil ((2065 . 2073) (#("                                   " 0 35 (fontified nil)) . 2064) (2064 . 2099) (#("        " 0 8 (fontified nil)) . 2064) (undo-tree-id7561 . -8) (undo-tree-id7562 . -8) (undo-tree-id7563 . -8) (undo-tree-id7564 . -8) (2063 . 2073)) nil (26048 31127 579625 248000) 0 nil])
([nil nil ((2064 . 2099)) nil (26048 31134 574993 481000) 0 nil])
([nil nil ((#("        let _ = msg.src().and_then(|src| if src.name() == \"zbar\" {
            println!(\"{:?}\", msg);
        }
                                   
        );" 0 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 13 (face font-lock-variable-name-face fontified t) 13 16 (fontified t) 16 19 (fontified t) 19 20 (fontified t) 20 23 (fontified t) 23 24 (face (rainbow-delimiters-depth-3-face) fontified t) 24 25 (face (rainbow-delimiters-depth-3-face) fontified t) 25 26 (fontified t) 26 34 (fontified t) 34 35 (face (rainbow-delimiters-depth-3-face) fontified t) 35 41 (fontified t) 41 43 (face font-lock-keyword-face fontified t) 43 44 (fontified t) 44 48 (fontified t) 48 52 (fontified t) 52 53 (face (rainbow-delimiters-depth-4-face) fontified t) 53 54 (face (rainbow-delimiters-depth-4-face) fontified t) 54 55 (fontified t) 55 57 (fontified t) 57 58 (fontified t) 58 64 (face font-lock-string-face fontified t) 64 65 (fontified t) 65 66 (face (rainbow-delimiters-depth-4-face) fontified t) 66 67 (fontified t) 67 79 (fontified t) 79 87 (face rust-builtin-formatting-macro fontified t) 87 88 (face (rainbow-delimiters-depth-5-face) fontified t) 88 89 (face font-lock-string-face fontified t) 89 93 (face rust-string-interpolation fontified t) 93 94 (face font-lock-string-face fontified t) 94 96 (fontified t) 96 99 (fontified t) 99 100 (face (rainbow-delimiters-depth-5-face) fontified t) 100 101 (fontified t) 101 102 (fontified t) 102 110 (fontified t) 110 111 (face (rainbow-delimiters-depth-4-face) fontified t) 111 112 (fontified t) 112 147 (fontified t) 147 148 (fontified t) 148 156 (fontified t) 156 157 (face (rainbow-delimiters-depth-3-face) fontified t) 157 158 (fontified t)) . 1952) (undo-tree-id7640 . -158) (undo-tree-id7641 . -158) (undo-tree-id7642 . -111) (undo-tree-id7643 . -66) (undo-tree-id7644 . -66) (undo-tree-id7645 . -66) (undo-tree-id7646 . -66) (undo-tree-id7647 . -66) (undo-tree-id7648 . -66) (undo-tree-id7649 . -66) (undo-tree-id7650 . -66) (undo-tree-id7651 . -67) (undo-tree-id7652 . -67) (undo-tree-id7653 . -67) (undo-tree-id7654 . -79) (undo-tree-id7655 . -79) (undo-tree-id7656 . -79) (undo-tree-id7657 . -79) (undo-tree-id7658 . -79) (undo-tree-id7659 . -79) (undo-tree-id7660 . -79) (undo-tree-id7661 . -79) (undo-tree-id7662 . -96) (undo-tree-id7663 . -96) (undo-tree-id7664 . -96) (undo-tree-id7665 . -96) (undo-tree-id7666 . -96) (undo-tree-id7667 . -96) (undo-tree-id7668 . -96) (undo-tree-id7669 . -96) (undo-tree-id7670 . -96) (undo-tree-id7671 . -96) (undo-tree-id7672 . -96) (undo-tree-id7673 . -112) (undo-tree-id7674 . -112) (undo-tree-id7675 . -112) (undo-tree-id7676 . -147) (undo-tree-id7677 . -147) (undo-tree-id7678 . -147) (undo-tree-id7679 . -147) (undo-tree-id7680 . -147) (undo-tree-id7681 . -147) (undo-tree-id7682 . -147) (undo-tree-id7683 . -147) (undo-tree-id7684 . -147) (undo-tree-id7685 . -147) (undo-tree-id7686 . -147) (undo-tree-id7687 . -147) (undo-tree-id7688 . -147) (undo-tree-id7689 . -147) (undo-tree-id7690 . -147) (undo-tree-id7691 . -147) (undo-tree-id7692 . -147) (undo-tree-id7693 . -147) (undo-tree-id7694 . -147) (undo-tree-id7695 . -147) (undo-tree-id7696 . -147) (undo-tree-id7697 . -147) (undo-tree-id7698 . -147) (undo-tree-id7699 . -147) (undo-tree-id7700 . -147) (undo-tree-id7701 . -147) (undo-tree-id7702 . -147) (undo-tree-id7703 . -147) (undo-tree-id7704 . -147) (undo-tree-id7705 . -147) (undo-tree-id7706 . -147) (undo-tree-id7707 . -147) (undo-tree-id7708 . -147) (undo-tree-id7709 . -147) (undo-tree-id7710 . -147) (undo-tree-id7711 . -147) (undo-tree-id7712 . -147) (undo-tree-id7713 . -147) (undo-tree-id7714 . -147) (undo-tree-id7715 . -147) (undo-tree-id7716 . -147) (undo-tree-id7717 . -147) (undo-tree-id7718 . -147) (undo-tree-id7719 . -147) (undo-tree-id7720 . -147) (undo-tree-id7721 . -147) (undo-tree-id7722 . -30) (undo-tree-id7723 . -30) (undo-tree-id7724 . -30) (undo-tree-id7725 . -30) (undo-tree-id7726 . -30) (undo-tree-id7727 . -30) (undo-tree-id7728 . -30) (undo-tree-id7729 . -30) (undo-tree-id7730 . -30) (undo-tree-id7731 . -30) (undo-tree-id7732 . -30) (undo-tree-id7733 . -30) (undo-tree-id7734 . -30) (undo-tree-id7735 . -30) (undo-tree-id7736 . -30) (undo-tree-id7737 . -30) (undo-tree-id7738 . -30) (undo-tree-id7739 . -30) (undo-tree-id7740 . -158) (undo-tree-id7741 . -158) (undo-tree-id7742 . -158) (undo-tree-id7743 . -124) (undo-tree-id7744 . -123) (undo-tree-id7745 . -111) (undo-tree-id7746 . -77) (undo-tree-id7747 . -76) (undo-tree-id7748 . -75) (undo-tree-id7749 . -7) (undo-tree-id7750 . -6) (undo-tree-id7751 . -8) (undo-tree-id7752 . -158) (t 26048 31135 46937 584000)) nil (26048 31144 442686 738000) 0 nil] [nil nil ((2099 . 2100)) ((#("N" 0 1 (face font-lock-type-face fontified t)) . 2099) (undo-tree-id7623 . -1) (undo-tree-id7624 . -1) (undo-tree-id7625 . -1) (undo-tree-id7626 . -1) (undo-tree-id7627 . -1) (undo-tree-id7628 . -1) (undo-tree-id7629 . -1) (undo-tree-id7630 . -1) (undo-tree-id7631 . -1) (undo-tree-id7632 . -1) (undo-tree-id7633 . -1)) (26048 31133 946455 597000) 0 nil])
([nil nil ((1952 . 1960)) nil (26048 31144 442612 230000) 0 nil])
([nil nil ((apply yas--snippet-revive 2099 2103 #s(yas--snippet nil nil #s(yas--exit #<marker at 1952 in wh-gst/main.rs> nil) 66 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 1952 in wh-gst/main.rs> nil) 66 nil nil nil nil)) (2099 . 2103) (#("None$0" 0 6 (fontified nil)) . 2099) (2099 . 2105) (#("N" 0 1 (fontified nil)) . 2099) (2099 . 2100) (#("None" 0 4 (fontified nil)) . -2099) (2099 . 2103) (#("N" 0 1 (face font-lock-type-face fontified t)) . -2099) (undo-tree-id7556 . -1) (undo-tree-id7557 . -1) (undo-tree-id7558 . -1) (undo-tree-id7559 . -1) (undo-tree-id7560 . -1) 2100) ((2099 . 2100) (#("None" 0 4 (fontified nil)) . 2099) (2099 . 2103) (#("N" 0 1 (fontified nil)) . 2099) (2099 . 2100) (#("None$0" 0 6 (fontified nil)) . 2099) (2099 . 2105) (#("None" 0 4 (face font-lock-type-face fontified t)) . 2099) (undo-tree-id7606 . -4) (undo-tree-id7607 . -4) (undo-tree-id7608 . -4) (undo-tree-id7609 . -4) (undo-tree-id7610 . -4) (undo-tree-id7611 . -4) (undo-tree-id7612 . -4) (undo-tree-id7613 . -4) (undo-tree-id7614 . -4) (undo-tree-id7615 . -4) (undo-tree-id7616 . -4) (undo-tree-id7617 . -4) (undo-tree-id7618 . -4) (undo-tree-id7619 . -4) (undo-tree-id7620 . -4) (undo-tree-id7621 . -4) (undo-tree-id7622 . -4) (t 26048 31127 600270 459000)) (26048 31127 579614 502000) 0 nil])
([nil nil ((1953 . 1961) (#("        " 0 8 (fontified nil)) . 1952) (undo-tree-id7634 . -8) (undo-tree-id7635 . -8) (undo-tree-id7636 . -8) (undo-tree-id7637 . -8) (undo-tree-id7638 . -8) (undo-tree-id7639 . -8) (1960 . 1961)) nil (26048 31144 442609 951000) 0 nil])
nil
([nil nil ((1952 . 1960)) nil (26048 31144 442594 610000) 0 nil])
([nil nil ((1960 . 1968) (t 26048 31144 460271 497000)) nil (26048 31234 537107 706000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -1963) (undo-tree-id8029 . -1) (#("r" 0 1 (fontified t)) . -1964) (undo-tree-id8030 . -1) (#("c" 0 1 (fontified t)) . -1965) (undo-tree-id8031 . -1) (#("." 0 1 (fontified t)) . -1966) (undo-tree-id8032 . -1) (#("u" 0 1 (fontified t)) . -1967) (undo-tree-id8033 . -1) 1968) nil (26048 31234 537106 415000) 0 nil])
([nil nil ((1963 . 1964)) nil (26048 31234 537101 811000) 0 nil])
([nil nil ((1963 . 1966) (#("m" 0 1 (fontified nil)) . 1963) (1963 . 1964) (#("msg" 0 3 (fontified nil)) . -1963) (1963 . 1966) (#("m" 0 1 (fontified t)) . -1963) (undo-tree-id8028 . -1) 1964) nil (26048 31234 537100 773000) 0 nil])
([nil nil ((1966 . 1970)) nil (26048 31234 537098 810000) 0 nil])
([nil nil ((apply yas--snippet-revive 1967 1972 #s(yas--snippet nil nil #s(yas--exit 1972 nil) 67 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1972 nil) 67 nil nil nil nil)) (1967 . 1972) (#("src()$0" 0 7 (fontified nil)) . 1967) (1967 . 1974) (#("src" 0 3 (fontified nil)) . 1967) (1967 . 1970) (#("src() (alias get_src)" 0 21 (fontified nil)) . -1967) (1967 . 1988) (#("src" 0 3 (fontified t)) . -1967) (undo-tree-id8027 . -3) 1970) nil (26048 31234 537097 641000) 0 nil])
([nil nil ((1972 . 1974)) nil (26048 31234 537095 77000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -1973) (undo-tree-id8026 . -1) 1974) nil (26048 31234 537094 383000) 0 nil])
([nil nil ((1973 . 1974)) nil (26048 31234 537092 692000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -1973) (undo-tree-id8025 . -1) 1974) nil (26048 31234 537092 60000) 0 nil])
([nil nil ((1973 . 1976)) nil (26048 31234 537090 669000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t)) . -1973) (undo-tree-id8022 . -1) (#("a" 0 1 (fontified t)) . -1974) (undo-tree-id8023 . -1) (#("s" 0 1 (fontified t)) . -1975) (undo-tree-id8024 . -1) 1976) nil (26048 31234 537089 714000) 0 nil])
([nil nil ((1973 . 1975)) nil (26048 31234 537086 444000) 0 nil])
([nil nil ((1975 . 1977)) nil (26048 31234 537085 649000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -1973) (undo-tree-id8018 . -1) (#("a" 0 1 (fontified t)) . -1974) (undo-tree-id8019 . -1) (#("m" 0 1 (fontified t)) . -1975) (undo-tree-id8020 . -1) (#("e" 0 1 (fontified t)) . -1976) (undo-tree-id8021 . -1) 1977) nil (26048 31234 537084 612000) 0 nil])
([nil nil ((1973 . 1974)) nil (26048 31234 537080 315000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -1973) (undo-tree-id8017 . -1) 1974) nil (26048 31234 537079 453000) 0 nil])
([nil nil ((1973 . 1975)) nil (26048 31234 537078 116000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -1973) (undo-tree-id8015 . -1) (#("s" 0 1 (fontified t)) . -1974) (undo-tree-id8016 . -1) 1975) nil (26048 31234 537077 345000) 0 nil])
([nil nil ((#("src()." 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-3-face) fontified t) 4 5 (face (rainbow-delimiters-depth-3-face) fontified t) 5 6 (fontified t)) . -1967) (undo-tree-id8014 . -6) 1973) nil (26048 31234 537075 210000) 0 nil])
([nil nil ((#("msg." 0 4 (fontified t)) . -1963) (undo-tree-id8013 . -4) 1967) nil (26048 31234 537073 746000) 0 nil])
([nil nil ((1963 . 1968)) nil (26048 31234 537072 387000) 0 nil])
([nil nil ((1967 . 1971) (#("S" 0 1 (fontified nil)) . 1967) (1967 . 1968) (#("Some" 0 4 (fontified nil)) . -1967) (1967 . 1971) (#("S" 0 1 (face font-lock-type-face fontified t)) . -1967) (undo-tree-id8012 . -1) 1968) nil (26048 31234 537071 300000) 0 nil])
([nil nil ((1971 . 1973)) nil (26048 31234 537068 905000) 0 nil])
([nil nil ((1972 . 1975)) nil (26048 31234 537068 315000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -1973) (undo-tree-id8008 . -1) (undo-tree-id8009 . -1) (#("r" 0 1 (fontified t)) . -1974) (undo-tree-id8010 . -1) (undo-tree-id8011 . -1) 1975) nil (26048 31234 537067 448000) 0 nil])
([nil nil ((1973 . 1975)) nil (26048 31234 537063 994000) 0 nil])
([nil nil ((1976 . 1981)) nil (26048 31234 537063 391000) 0 nil])
([nil nil ((1979 . 1982) (#("ms" 0 2 (fontified nil)) . 1979) (1979 . 1981) (#("msg" 0 3 (fontified nil)) . -1979) (1979 . 1982) (#("ms" 0 2 (fontified t)) . -1979) (undo-tree-id8007 . -2) 1981) nil (26048 31234 537062 128000) 0 nil])
([nil nil ((1982 . 1984)) nil (26048 31234 537060 97000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -1983) (undo-tree-id8006 . -1) 1984) nil (26048 31234 537059 428000) 0 nil])
([nil nil ((1983 . 1984)) nil (26048 31234 537057 955000) 0 nil])
([nil nil ((apply yas--snippet-revive 1983 1988 #s(yas--snippet nil nil #s(yas--exit 1988 nil) 68 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1988 nil) 68 nil nil nil nil)) (1983 . 1988) (#("src()$0" 0 7 (fontified nil)) . 1983) (1983 . 1990) (#("s" 0 1 (fontified nil)) . 1983) (1983 . 1984) (#("src() (alias get_src)" 0 21 (fontified nil)) . -1983) (1983 . 2004) (#("s" 0 1 (fontified t)) . -1983) (undo-tree-id8005 . -1) 1984) nil (26048 31234 537056 784000) 0 nil])
([nil nil ((1988 . 1991)) nil (26048 31234 537054 180000) 0 nil])
([nil nil ((1992 . 2000) (#("            " 0 12 (fontified nil)) . 1991) (undo-tree-id8004 . -8) (1999 . 2003) (1990 . 2000)) nil (26048 31234 537053 316000) 0 nil])
([nil nil ((1991 . 2003)) nil (26048 31234 537051 476000) 0 nil])
([nil nil ((2003 . 2007)) nil (26048 31234 537050 869000) 0 nil])
([nil nil ((2007 . 2008)) nil (26048 31234 537050 217000) 0 nil])
([nil nil ((apply yas--snippet-revive 2007 2013 #s(yas--snippet nil nil #s(yas--exit 2013 nil) 69 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2013 nil) 69 nil nil nil nil)) (2007 . 2013) (#("name()$0" 0 8 (fontified nil)) . 2007) (2007 . 2015) (#("n" 0 1 (fontified nil)) . 2007) (2007 . 2008) (#("name() (alias gst_object_get_name, get_name) (as GstObjectExt)" 0 62 (fontified nil)) . -2007) (2007 . 2069) (#("n" 0 1 (fontified t)) . -2007) (undo-tree-id8003 . -1) 2008) nil (26048 31234 537048 748000) 0 nil])
([nil nil ((2003 . 2006)) nil (26048 31234 537045 922000) 0 nil])
([nil nil ((2016 . 2018)) nil (26048 31234 537045 244000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -2016) (undo-tree-id7990 . -1) (undo-tree-id7991 . -1) (undo-tree-id7992 . -1) (undo-tree-id7993 . -1) (undo-tree-id7994 . -1) (undo-tree-id7995 . -1) (undo-tree-id7996 . -1) (undo-tree-id7997 . -1) (undo-tree-id7998 . -1) (#("=" 0 1 (fontified t)) . -2017) (undo-tree-id7999 . -1) (undo-tree-id8000 . -1) (undo-tree-id8001 . -1) (undo-tree-id8002 . -1) 2018) nil (26048 31234 537043 801000) 0 nil])
([nil nil ((2016 . 2020)) nil (26048 31234 537033 383000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2016) (undo-tree-id7935 . -1) (undo-tree-id7936 . -1) (undo-tree-id7937 . -1) (undo-tree-id7938 . -1) (undo-tree-id7939 . -1) (undo-tree-id7940 . -1) (undo-tree-id7941 . -1) (undo-tree-id7942 . -1) (undo-tree-id7943 . -1) (undo-tree-id7944 . -1) (undo-tree-id7945 . -1) (undo-tree-id7946 . -1) (undo-tree-id7947 . -1) (undo-tree-id7948 . -1) (undo-tree-id7949 . -1) (undo-tree-id7950 . -1) (undo-tree-id7951 . -1) (undo-tree-id7952 . -1) (undo-tree-id7953 . -1) (undo-tree-id7954 . -1) (#("=" 0 1 (fontified t)) . -2017) (undo-tree-id7955 . -1) (undo-tree-id7956 . -1) (undo-tree-id7957 . -1) (undo-tree-id7958 . -1) (undo-tree-id7959 . -1) (undo-tree-id7960 . -1) (undo-tree-id7961 . -1) (undo-tree-id7962 . -1) (undo-tree-id7963 . -1) (undo-tree-id7964 . -1) (undo-tree-id7965 . -1) (undo-tree-id7966 . -1) (undo-tree-id7967 . -1) (undo-tree-id7968 . -1) (undo-tree-id7969 . -1) (undo-tree-id7970 . -1) (#("=" 0 1 (fontified t)) . -2018) (undo-tree-id7971 . -1) (undo-tree-id7972 . -1) (undo-tree-id7973 . -1) (undo-tree-id7974 . -1) (undo-tree-id7975 . -1) (undo-tree-id7976 . -1) (undo-tree-id7977 . -1) (undo-tree-id7978 . -1) (undo-tree-id7979 . -1) (undo-tree-id7980 . -1) (undo-tree-id7981 . -1) (undo-tree-id7982 . -1) (#(" " 0 1 (fontified t)) . -2019) (undo-tree-id7983 . -1) (undo-tree-id7984 . -1) (undo-tree-id7985 . -1) (undo-tree-id7986 . -1) (undo-tree-id7987 . -1) (undo-tree-id7988 . -1) (undo-tree-id7989 . -1) 2020) nil (26048 31234 537030 71000) 0 nil])
([nil nil ((2016 . 2019)) nil (26048 31234 536374 358000) 0 nil])
([nil nil ((2019 . 2020)) nil (26048 31234 536373 731000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -2019) (undo-tree-id7929 . -1) (undo-tree-id7930 . -1) (undo-tree-id7931 . -1) (undo-tree-id7932 . -1) (undo-tree-id7933 . -1) (undo-tree-id7934 . -1) 2020) nil (26048 31234 536372 489000) 0 nil])
([nil nil ((2016 . 2035) (#("<ra@gennew>57199" 0 16 (fontified nil)) . -2016) (2016 . 2032) (#("===" 0 3 (fontified t)) . -2016) (undo-tree-id7905 . -3) (undo-tree-id7906 . -1) (undo-tree-id7907 . -1) (undo-tree-id7908 . -1) (undo-tree-id7909 . -2) (undo-tree-id7910 . -2) (undo-tree-id7911 . -2) (undo-tree-id7912 . -2) (undo-tree-id7913 . -2) (undo-tree-id7914 . -3) (undo-tree-id7915 . -3) (undo-tree-id7916 . -3) (undo-tree-id7917 . -3) (undo-tree-id7918 . -3) (undo-tree-id7919 . -3) (undo-tree-id7920 . -3) (undo-tree-id7921 . -3) (undo-tree-id7922 . -3) (undo-tree-id7923 . -3) (undo-tree-id7924 . -3) (undo-tree-id7925 . -3) (undo-tree-id7926 . -3) (undo-tree-id7927 . -3) (undo-tree-id7928 . -3) 2019) nil (26048 31234 536366 904000) 0 nil])
([nil nil ((#("57199" 0 5 (fontified t)) . -2030) (undo-tree-id7894 . -5) (undo-tree-id7895 . -5) (undo-tree-id7896 . -5) (undo-tree-id7897 . -5) (undo-tree-id7898 . -5) (undo-tree-id7899 . -5) (undo-tree-id7900 . -5) (undo-tree-id7901 . -5) (undo-tree-id7902 . -5) (undo-tree-id7903 . -5) (undo-tree-id7904 . -5) 2035) nil (26048 31234 536350 178000) 0 nil])
([nil nil ((#("gennew>" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-4-face) fontified t)) . -2023) (undo-tree-id7881 . -7) (undo-tree-id7882 . -7) (undo-tree-id7883 . -7) (undo-tree-id7884 . -7) (undo-tree-id7885 . -7) (undo-tree-id7886 . -7) (undo-tree-id7887 . -7) (undo-tree-id7888 . -7) (undo-tree-id7889 . -7) (undo-tree-id7890 . -7) (undo-tree-id7891 . -7) (undo-tree-id7892 . -7) (undo-tree-id7893 . -7) 2030) nil (26048 31234 536341 778000) 0 nil])
([nil nil ((#("ra@" 0 3 (fontified t)) . -2020) (undo-tree-id7866 . -3) (undo-tree-id7867 . -3) (undo-tree-id7868 . -3) (undo-tree-id7869 . -3) (undo-tree-id7870 . -3) (undo-tree-id7871 . -3) (undo-tree-id7872 . -3) (undo-tree-id7873 . -3) (undo-tree-id7874 . -3) (undo-tree-id7875 . -3) (undo-tree-id7876 . -3) (undo-tree-id7877 . -3) (undo-tree-id7878 . -3) (undo-tree-id7879 . -3) (undo-tree-id7880 . -3) 2023) nil (26048 31234 536331 15000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -2016) (undo-tree-id7774 . -1) (undo-tree-id7775 . -1) (undo-tree-id7776 . -1) (undo-tree-id7777 . -1) (undo-tree-id7778 . -1) (undo-tree-id7779 . -1) (undo-tree-id7780 . -1) (undo-tree-id7781 . -1) (undo-tree-id7782 . -1) (undo-tree-id7783 . -1) (undo-tree-id7784 . -1) (undo-tree-id7785 . -1) (undo-tree-id7786 . -1) (undo-tree-id7787 . -1) (undo-tree-id7788 . -1) (undo-tree-id7789 . -1) (undo-tree-id7790 . -1) (undo-tree-id7791 . -1) (undo-tree-id7792 . -1) (undo-tree-id7793 . -1) (undo-tree-id7794 . -1) (undo-tree-id7795 . -1) (undo-tree-id7796 . -1) (undo-tree-id7797 . -1) (undo-tree-id7798 . -1) (undo-tree-id7799 . -1) (#("=" 0 1 (fontified t)) . -2017) (undo-tree-id7800 . -1) (undo-tree-id7801 . -1) (undo-tree-id7802 . -1) (undo-tree-id7803 . -1) (undo-tree-id7804 . -1) (undo-tree-id7805 . -1) (undo-tree-id7806 . -1) (undo-tree-id7807 . -1) (undo-tree-id7808 . -1) (undo-tree-id7809 . -1) (undo-tree-id7810 . -1) (undo-tree-id7811 . -1) (undo-tree-id7812 . -1) (undo-tree-id7813 . -1) (undo-tree-id7814 . -1) (undo-tree-id7815 . -1) (undo-tree-id7816 . -1) (undo-tree-id7817 . -1) (undo-tree-id7818 . -1) (undo-tree-id7819 . -1) (undo-tree-id7820 . -1) (undo-tree-id7821 . -1) (undo-tree-id7822 . -1) (undo-tree-id7823 . -1) (#("=" 0 1 (fontified t)) . -2018) (undo-tree-id7824 . -1) (undo-tree-id7825 . -1) (undo-tree-id7826 . -1) (undo-tree-id7827 . -1) (undo-tree-id7828 . -1) (undo-tree-id7829 . -1) (undo-tree-id7830 . -1) (undo-tree-id7831 . -1) (undo-tree-id7832 . -1) (undo-tree-id7833 . -1) (undo-tree-id7834 . -1) (undo-tree-id7835 . -1) (undo-tree-id7836 . -1) (undo-tree-id7837 . -1) (undo-tree-id7838 . -1) (undo-tree-id7839 . -1) (undo-tree-id7840 . -1) (undo-tree-id7841 . -1) (undo-tree-id7842 . -1) (undo-tree-id7843 . -1) (undo-tree-id7844 . -1) (undo-tree-id7845 . -1) (#("<" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -2019) (undo-tree-id7846 . -1) (undo-tree-id7847 . -1) (undo-tree-id7848 . -1) (undo-tree-id7849 . -1) (undo-tree-id7850 . -1) (undo-tree-id7851 . -1) (undo-tree-id7852 . -1) (undo-tree-id7853 . -1) (undo-tree-id7854 . -1) (undo-tree-id7855 . -1) (undo-tree-id7856 . -1) (undo-tree-id7857 . -1) (undo-tree-id7858 . -1) (undo-tree-id7859 . -1) (undo-tree-id7860 . -1) (undo-tree-id7861 . -1) (undo-tree-id7862 . -1) (undo-tree-id7863 . -1) (undo-tree-id7864 . -1) (undo-tree-id7865 . -1) 2020) nil (26048 31234 536316 71000) 0 nil])
([nil nil ((2016 . 2018)) nil (26048 31234 536254 97000) 0 nil])
([nil nil ((2018 . 2019)) nil (26048 31234 536253 433000) 0 nil])
([nil nil ((2019 . 2022)) nil (26048 31234 536252 883000) 0 nil])
([nil nil ((2021 . 2025)) nil (26048 31234 536252 288000) 0 nil])
([nil nil ((2026 . 2027)) nil (26048 31234 536251 685000) 0 nil])
([nil nil ((2027 . 2029)) nil (26048 31234 536251 184000) 0 nil])
([nil nil ((2030 . 2042) (#("                " 0 16 (fontified nil)) . 2029) (2029 . 2045) (#("            " 0 12 (fontified nil)) . 2029) (undo-tree-id7770 . -12) (undo-tree-id7771 . -12) (undo-tree-id7772 . -12) (undo-tree-id7773 . -12) (2028 . 2042)) nil (26048 31234 536250 179000) 0 nil])
([nil nil ((2029 . 2045)) nil (26048 31234 536246 117000) 0 nil])
([nil nil ((2045 . 2047)) nil (26048 31234 536245 556000) 0 nil])
([nil nil ((apply yas--snippet-revive 2045 2055 #s(yas--snippet nil nil #s(yas--exit 2054 nil) 70 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2054 nil) 70 nil nil nil nil)) (2045 . 2055) (#("println!($0)" 0 12 (fontified nil)) . 2045) (2045 . 2057) (#("pr" 0 2 (fontified nil)) . 2045) (2045 . 2047) (#("println!(…)" 0 11 (fontified nil)) . -2045) (2045 . 2056) (#("pr" 0 2 (fontified t)) . -2045) (undo-tree-id7761 . -2) (undo-tree-id7762 . -1) (undo-tree-id7763 . -1) (undo-tree-id7764 . -1) (undo-tree-id7765 . -1) (undo-tree-id7766 . -2) (undo-tree-id7767 . -2) (undo-tree-id7768 . -2) (undo-tree-id7769 . -2) 2047) nil (26048 31234 536243 796000) 0 nil])
([nil nil ((2054 . 2056)) nil (26048 31234 536235 581000) 0 nil])
([nil nil ((2055 . 2057)) nil (26048 31234 536235 28000) 0 nil])
([nil nil ((2056 . 2057)) nil (26048 31234 536234 440000) 0 nil])
([nil nil ((2057 . 2058)) nil (26048 31234 536233 824000) 0 nil])
([nil nil ((2060 . 2063)) nil (26048 31234 536233 35000) 0 nil])
([nil nil ((2062 . 2065) (#("m" 0 1 (fontified nil)) . 2062) (2062 . 2063) (#("msg" 0 3 (fontified nil)) . -2062) (2062 . 2065) (#("m" 0 1 (fontified t)) . -2062) (undo-tree-id7753 . -1) (undo-tree-id7754 . -1) (undo-tree-id7755 . -1) (undo-tree-id7756 . -1) (undo-tree-id7757 . -1) (undo-tree-id7758 . -1) (undo-tree-id7759 . -1) (undo-tree-id7760 . -1) 2063) nil (26048 31234 536230 284000) 0 nil])
([nil nil ((2066 . 2067)) nil (26048 31234 536213 75000) 0 nil])
([nil nil ((#(" println!(\"{:?}\", msg);" 0 1 (fontified t) 1 9 (face rust-builtin-formatting-macro fontified t) 9 10 (face (rainbow-delimiters-depth-5-face) fontified t) 10 11 (face font-lock-string-face fontified t) 11 15 (face rust-string-interpolation fontified t) 15 16 (face font-lock-string-face fontified t) 16 18 (fontified t) 18 21 (fontified t) 21 22 (face (rainbow-delimiters-depth-5-face) fontified t) 22 23 (fontified t)) . 2044) (undo-tree-id8155 . -23) (undo-tree-id8156 . -1) (undo-tree-id8157 . -1) (undo-tree-id8158 . -1) (undo-tree-id8159 . -1) (undo-tree-id8160 . -1) (undo-tree-id8161 . -1) (undo-tree-id8162 . -1) (undo-tree-id8163 . -1) (undo-tree-id8164 . -17) (undo-tree-id8165 . -18) (undo-tree-id8166 . -18) (undo-tree-id8167 . -18) (undo-tree-id8168 . -18) (undo-tree-id8169 . -18) (undo-tree-id8170 . -18) (undo-tree-id8171 . -23) (undo-tree-id8172 . -23) (undo-tree-id8173 . -23) (undo-tree-id8174 . -23) (undo-tree-id8175 . -23) (undo-tree-id8176 . -23) (undo-tree-id8177 . -23) (undo-tree-id8178 . -23) (undo-tree-id8179 . -23) (undo-tree-id8180 . -23) (undo-tree-id8181 . -23) (undo-tree-id8182 . -23) (undo-tree-id8183 . -23) (undo-tree-id8184 . -23) (t 26048 31234 556943 616000)) nil (26048 31270 407365 707000) 0 nil])
([nil nil ((2029 . 2045) (#("               " 0 15 (fontified t)) . 2029) (undo-tree-id8122 . -15) (undo-tree-id8123 . -15) (undo-tree-id8124 . -15) (undo-tree-id8125 . -15) (undo-tree-id8126 . -15) (undo-tree-id8127 . -15) (undo-tree-id8128 . -15) (undo-tree-id8129 . -15) (undo-tree-id8130 . -15) (undo-tree-id8131 . -15) (undo-tree-id8132 . -15) (undo-tree-id8133 . -15) (undo-tree-id8134 . -15) (undo-tree-id8135 . -15) (undo-tree-id8136 . -15) (undo-tree-id8137 . -15) (undo-tree-id8138 . -15) (undo-tree-id8139 . -15) (undo-tree-id8140 . -15) (undo-tree-id8141 . -15) (undo-tree-id8142 . -15) (undo-tree-id8143 . -15) (undo-tree-id8144 . -15) (undo-tree-id8145 . -15) (undo-tree-id8146 . -15) (undo-tree-id8147 . -15) (undo-tree-id8148 . -15) (undo-tree-id8149 . -15) (undo-tree-id8150 . -15) (undo-tree-id8151 . -15) (undo-tree-id8152 . -15) (undo-tree-id8153 . -15) (undo-tree-id8154 . -15) 2044) nil (26048 31270 407344 496000) 0 nil])
([nil nil ((2045 . 2046)) nil (26048 31270 407321 678000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -2045) (undo-tree-id8119 . -1) (undo-tree-id8120 . -1) (undo-tree-id8121 . -1) 2046) nil (26048 31270 407320 871000) 0 nil])
([nil nil ((2045 . 2046)) nil (26048 31270 407317 939000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -2045) (undo-tree-id8114 . -1) (undo-tree-id8115 . -1) (undo-tree-id8116 . -1) (undo-tree-id8117 . -1) (undo-tree-id8118 . -1) 2046) nil (26048 31270 407317 30000) 0 nil])
([nil nil ((2045 . 2052)) nil (26048 31270 407312 887000) 0 nil])
([nil nil ((#("str" 0 3 (face font-lock-type-face fontified t)) . -2049) (undo-tree-id8102 . -3) (undo-tree-id8103 . -1) (undo-tree-id8104 . -1) (undo-tree-id8105 . -1) (undo-tree-id8106 . -1) (undo-tree-id8107 . -1) (undo-tree-id8108 . -2) (undo-tree-id8109 . -2) (undo-tree-id8110 . -3) (undo-tree-id8111 . -3) (undo-tree-id8112 . -3) (undo-tree-id8113 . -3) 2052) nil (26048 31270 407311 578000) 0 nil])
([nil nil ((#("src." 0 4 (fontified t)) . -2045) (undo-tree-id8073 . -4) (undo-tree-id8074 . -1) (undo-tree-id8075 . -1) (undo-tree-id8076 . -1) (undo-tree-id8077 . -1) (undo-tree-id8078 . -2) (undo-tree-id8079 . -2) (undo-tree-id8080 . -3) (undo-tree-id8081 . -3) (undo-tree-id8082 . -3) (undo-tree-id8083 . -3) (undo-tree-id8084 . -4) (undo-tree-id8085 . -4) (undo-tree-id8086 . -4) (undo-tree-id8087 . -4) (undo-tree-id8088 . -4) (undo-tree-id8089 . -4) (undo-tree-id8090 . -4) (undo-tree-id8091 . -4) (undo-tree-id8092 . -4) (undo-tree-id8093 . -4) (undo-tree-id8094 . -4) (undo-tree-id8095 . -4) (undo-tree-id8096 . -4) (undo-tree-id8097 . -4) (undo-tree-id8098 . -4) (undo-tree-id8099 . -4) (undo-tree-id8100 . -4) (undo-tree-id8101 . -4) 2049) nil (26048 31270 407301 343000) 0 nil])
([nil nil ((2045 . 2047)) nil (26048 31270 407279 844000) 0 nil])
([nil nil ((2045 . 2048) (#("ms" 0 2 (fontified nil)) . 2045) (2045 . 2047) (#("msg" 0 3 (fontified nil)) . -2045) (2045 . 2048) (#("ms" 0 2 (fontified t)) . -2045) (undo-tree-id8066 . -2) (undo-tree-id8067 . -1) (undo-tree-id8068 . -1) (undo-tree-id8069 . -2) (undo-tree-id8070 . -2) (undo-tree-id8071 . -2) (undo-tree-id8072 . -2) 2047) nil (26048 31270 407278 496000) 0 nil])
([nil nil ((2048 . 2052)) nil (26048 31270 407272 392000) 0 nil])
([nil nil ((apply yas--snippet-revive 2049 2060 #s(yas--snippet nil nil #s(yas--exit 2060 nil) 71 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2060 nil) 71 nil nil nil nil)) (2049 . 2060) (#("structure()$0" 0 13 (fontified nil)) . 2049) (2049 . 2062) (#("str" 0 3 (fontified nil)) . 2049) (2049 . 2052) (#("structure() (alias get_structure, gst_message_get_structure)" 0 60 (fontified nil)) . -2049) (2049 . 2109) (#("str" 0 3 (face font-lock-type-face fontified t)) . -2049) (undo-tree-id8057 . -3) (undo-tree-id8058 . -1) (undo-tree-id8059 . -1) (undo-tree-id8060 . -2) (undo-tree-id8061 . -2) (undo-tree-id8062 . -3) (undo-tree-id8063 . -3) (undo-tree-id8064 . -3) (undo-tree-id8065 . -3) 2052) nil (26048 31270 407270 831000) 0 nil])
([nil nil ((2060 . 2063)) nil (26048 31270 407262 839000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2070 2084 nil nil nil t #s(yas--exit 2085 nil))) #s(yas--exit 2085 nil) 72 nil #s(yas--field 1 2070 2084 nil nil nil t #s(yas--exit 2085 nil)) nil nil)) (2061 . 2072) (#("and_then(${1:f})$0" 0 18 (fontified nil)) . 2061) (2061 . 2079) (#("an" 0 2 (fontified nil)) . 2061) (2061 . 2063) (#("and_then(…) (alias flatmap)" 0 27 (fontified nil)) . -2061) (2061 . 2088) (#("an" 0 2 (fontified t)) . -2061) (undo-tree-id8047 . -2) (undo-tree-id8048 . -1) (undo-tree-id8049 . -1) (undo-tree-id8050 . -1) (undo-tree-id8051 . -1) (undo-tree-id8052 . -1) (undo-tree-id8053 . -2) (undo-tree-id8054 . -2) (undo-tree-id8055 . -2) (undo-tree-id8056 . -2) 2063) nil (26048 31270 407261 150000) 0 nil])
([nil nil ((2071 . 2072) (#("f" 0 1 (fontified nil)) . 2071) (undo-tree-id8046 . -1) (2070 . 2071)) nil (26048 31270 407252 67000) 0 nil])
([nil nil ((2071 . 2080)) nil (26048 31270 407249 576000) 0 nil])
([nil nil ((2081 . 2084)) nil (26048 31270 407248 999000) 0 nil])
([nil nil ((apply yas--snippet-revive 2061 2085 #s(yas--snippet nil (#s(yas--field 1 2070 2084 nil nil nil t #s(yas--exit 2085 nil))) #s(yas--exit 2085 nil) 72 nil #s(yas--field 1 2070 2084 nil nil nil t #s(yas--exit 2085 nil)) nil nil))) nil (26048 31270 407248 261000) 0 nil])
([nil nil ((2085 . 2086)) nil (26048 31270 407247 22000) 0 nil])
([nil nil ((#("{" 0 1 (face (rainbow-delimiters-depth-6-face) fontified t)) . -2082) (undo-tree-id8034 . -1) (undo-tree-id8035 . -1) (undo-tree-id8036 . -1) (undo-tree-id8037 . -1) (undo-tree-id8038 . -1) (undo-tree-id8039 . -1) (undo-tree-id8040 . -1) (undo-tree-id8041 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-6-face) fontified t)) . -2083) (undo-tree-id8042 . -1) (undo-tree-id8043 . -1) (undo-tree-id8044 . -1) (undo-tree-id8045 . -1) 2084) nil (26048 31270 407242 438000) 0 nil])
([nil nil ((2082 . 2084) (t 26048 31270 426945 806000)) nil (26048 31276 334641 161000) 0 nil])
([nil nil ((#("{" 0 1 (face (rainbow-delimiters-depth-6-face) fontified t)) . -2082) (undo-tree-id8185 . -1) (undo-tree-id8186 . -1) (undo-tree-id8187 . -1) (undo-tree-id8188 . -1) (undo-tree-id8189 . -1) (undo-tree-id8190 . -1) (undo-tree-id8191 . -1) (undo-tree-id8192 . -1) (undo-tree-id8193 . -1) (undo-tree-id8194 . -1) (undo-tree-id8195 . -1) (undo-tree-id8196 . -1) (undo-tree-id8197 . -1) (undo-tree-id8198 . -1) (undo-tree-id8199 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-6-face) fontified t)) . -2083) (undo-tree-id8200 . -1) (undo-tree-id8201 . -1) (undo-tree-id8202 . -1) (undo-tree-id8203 . -1) (undo-tree-id8204 . -1) (undo-tree-id8205 . -1) (undo-tree-id8206 . -1) (undo-tree-id8207 . -1) (undo-tree-id8208 . -1) (undo-tree-id8209 . -1) (undo-tree-id8210 . -1) (undo-tree-id8211 . -1) (undo-tree-id8212 . -1) 2084 (t 26048 31276 386946 172000)) nil (26048 31285 954207 339000) 0 nil])
([nil nil ((2045 . 2051)) nil (26048 31285 954176 558000) 0 nil])
([nil nil ((2051 . 2053) (t 26048 31285 973613 427000)) nil (26048 31290 622978 68000) 0 nil])
([nil nil ((2090 . 2091) (t 26048 31290 643613 713000)) nil (26048 31387 959156 558000) 0 nil])
([nil nil ((2091 . 2092)) nil (26048 31387 959155 875000) 0 nil])
([nil nil ((2090 . 2099) (#("st" 0 2 (fontified nil)) . 2090) (2090 . 2092) (#("structure" 0 9 (fontified nil)) . -2090) (2090 . 2099) (#("st" 0 2 (fontified t)) . -2090) (undo-tree-id9149 . -1) (undo-tree-id9150 . -2) (undo-tree-id9151 . -1) (undo-tree-id9152 . -1) (undo-tree-id9153 . -1) (undo-tree-id9154 . -1) (undo-tree-id9155 . -1) (undo-tree-id9156 . -1) (undo-tree-id9157 . -1) (undo-tree-id9158 . -1) (undo-tree-id9159 . -2) (undo-tree-id9160 . -2) (undo-tree-id9161 . -2) (undo-tree-id9162 . -2) 2092) nil (26048 31387 959154 416000) 0 nil])
([nil nil ((2099 . 2100)) nil (26048 31387 959144 369000) 0 nil])
([nil nil ((2100 . 2103)) nil (26048 31387 959143 793000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -2100) (undo-tree-id9120 . -1) (undo-tree-id9121 . -1) (undo-tree-id9122 . -1) (undo-tree-id9123 . -1) (undo-tree-id9124 . -1) (undo-tree-id9125 . -1) (undo-tree-id9126 . -1) (undo-tree-id9127 . -1) (undo-tree-id9128 . -1) (undo-tree-id9129 . -1) (undo-tree-id9130 . -1) (undo-tree-id9131 . -1) (undo-tree-id9132 . -1) (undo-tree-id9133 . -1) (#("a" 0 1 (fontified t)) . -2101) (undo-tree-id9134 . -1) (undo-tree-id9135 . -1) (undo-tree-id9136 . -1) (undo-tree-id9137 . -1) (undo-tree-id9138 . -1) (undo-tree-id9139 . -1) (undo-tree-id9140 . -1) (undo-tree-id9141 . -1) (undo-tree-id9142 . -1) (undo-tree-id9143 . -1) (#("p" 0 1 (fontified t)) . -2102) (undo-tree-id9144 . -1) (undo-tree-id9145 . -1) (undo-tree-id9146 . -1) (undo-tree-id9147 . -1) (undo-tree-id9148 . -1) 2103) nil (26048 31387 959142 10000) 0 nil])
([nil nil ((2100 . 2102)) nil (26048 31387 959124 779000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -2100) (undo-tree-id9101 . -1) (undo-tree-id9102 . -1) (undo-tree-id9103 . -1) (undo-tree-id9104 . -1) (undo-tree-id9105 . -1) (undo-tree-id9106 . -1) (undo-tree-id9107 . -1) (undo-tree-id9108 . -1) (undo-tree-id9109 . -1) (undo-tree-id9110 . -1) (undo-tree-id9111 . -1) (undo-tree-id9112 . -1) (undo-tree-id9113 . -1) (#("i" 0 1 (fontified t)) . -2101) (undo-tree-id9114 . -1) (undo-tree-id9115 . -1) (undo-tree-id9116 . -1) (undo-tree-id9117 . -1) (undo-tree-id9118 . -1) (undo-tree-id9119 . -1) 2102) nil (26048 31387 959123 404000) 0 nil])
([nil nil ((2100 . 2102)) nil (26048 31387 959111 990000) 0 nil])
([nil nil ((apply yas--snippet-revive 2100 2106 #s(yas--snippet nil nil #s(yas--exit 2106 nil) 73 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2106 nil) 73 nil nil nil nil)) (2100 . 2106) (#("iter()$0" 0 8 (fontified nil)) . 2100) (2100 . 2108) (#("it" 0 2 (fontified nil)) . 2100) (2100 . 2102) (#("iter()" 0 6 (fontified nil)) . -2100) (2100 . 2106) (#("it" 0 2 (fontified t)) . -2100) (undo-tree-id9094 . -2) (undo-tree-id9095 . -1) (undo-tree-id9096 . -1) (undo-tree-id9097 . -2) (undo-tree-id9098 . -2) (undo-tree-id9099 . -2) (undo-tree-id9100 . -2) 2102) nil (26048 31387 959110 493000) 0 nil])
([nil nil ((2106 . 2108)) nil (26048 31387 959104 858000) 0 nil])
([nil nil ((2108 . 2110)) nil (26048 31387 959104 299000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -2109) (undo-tree-id9078 . -1) (undo-tree-id9079 . -1) (undo-tree-id9080 . -1) (undo-tree-id9081 . -1) (undo-tree-id9082 . -1) (undo-tree-id9083 . -1) (undo-tree-id9084 . -1) (undo-tree-id9085 . -1) (undo-tree-id9086 . -1) (undo-tree-id9087 . -1) (undo-tree-id9088 . -1) (undo-tree-id9089 . -1) (undo-tree-id9090 . -1) (undo-tree-id9091 . -1) (undo-tree-id9092 . -1) (undo-tree-id9093 . -1) 2110) nil (26048 31387 959103 83000) 0 nil])
([nil nil ((2109 . 2110)) nil (26048 31387 959093 15000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2111 2113 nil nil nil t #s(yas--exit 2114 nil))) #s(yas--exit 2114 nil) 74 nil #s(yas--field 1 2111 2113 nil nil nil t #s(yas--exit 2114 nil)) nil nil)) (2107 . 2113) (#("map(${1:f})$0" 0 13 (fontified nil)) . 2107) (2107 . 2120) (#("map" 0 3 (fontified nil)) . 2107) (2107 . 2110) (#("map(…) (as Iterator)" 0 20 (fontified nil)) . -2107) (2107 . 2127) (#("map" 0 3 (fontified t)) . -2107) (undo-tree-id9050 . -2) (undo-tree-id9051 . -3) (undo-tree-id9052 . -1) (undo-tree-id9053 . -1) (undo-tree-id9054 . -1) (undo-tree-id9055 . -2) (undo-tree-id9056 . -2) (undo-tree-id9057 . -2) (undo-tree-id9058 . -2) (undo-tree-id9059 . -2) (undo-tree-id9060 . -2) (undo-tree-id9061 . -2) (undo-tree-id9062 . -2) (undo-tree-id9063 . -2) (undo-tree-id9064 . -2) (undo-tree-id9065 . -2) (undo-tree-id9066 . -2) (undo-tree-id9067 . -2) (undo-tree-id9068 . -2) (undo-tree-id9069 . -2) (undo-tree-id9070 . -2) (undo-tree-id9071 . -2) (undo-tree-id9072 . -2) (undo-tree-id9073 . -3) (undo-tree-id9074 . -3) (undo-tree-id9075 . -3) (undo-tree-id9076 . -3) (undo-tree-id9077 . -3) 2110) nil (26048 31387 959090 766000) 0 nil])
([nil nil ((2112 . 2113) (#("f" 0 1 (fontified nil)) . 2112) (undo-tree-id9049 . -1) (2111 . 2112)) nil (26048 31387 959072 796000) 0 nil])
([nil nil ((apply yas--snippet-revive 2107 2114 #s(yas--snippet nil (#s(yas--field 1 2111 2113 nil nil nil t #s(yas--exit 2114 nil))) #s(yas--exit 2114 nil) 74 nil #s(yas--field 1 2111 2113 nil nil nil t #s(yas--exit 2114 nil)) nil nil))) nil (26048 31387 959071 317000) 0 nil])
([nil nil ((#("map(||)" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-6-face) fontified t) 4 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-6-face) fontified t)) . -2107) (undo-tree-id8995 . -7) (undo-tree-id8996 . -7) (undo-tree-id8997 . -7) (undo-tree-id8998 . -7) (undo-tree-id8999 . -4) (undo-tree-id9000 . -4) (undo-tree-id9001 . -4) (undo-tree-id9002 . -4) (undo-tree-id9003 . -4) (undo-tree-id9004 . -4) (undo-tree-id9005 . -4) (undo-tree-id9006 . -4) (undo-tree-id9007 . -4) (undo-tree-id9008 . -4) (undo-tree-id9009 . -4) (undo-tree-id9010 . -4) (undo-tree-id9011 . -4) (undo-tree-id9012 . -4) (undo-tree-id9013 . -4) (undo-tree-id9014 . -4) (undo-tree-id9015 . -4) (undo-tree-id9016 . -4) (undo-tree-id9017 . -4) (undo-tree-id9018 . -4) (undo-tree-id9019 . -4) (undo-tree-id9020 . -4) (undo-tree-id9021 . -4) (undo-tree-id9022 . -4) (undo-tree-id9023 . -4) (undo-tree-id9024 . -4) (undo-tree-id9025 . -4) (undo-tree-id9026 . -5) (undo-tree-id9027 . -5) (undo-tree-id9028 . -6) (undo-tree-id9029 . -6) (undo-tree-id9030 . -6) (undo-tree-id9031 . -6) (undo-tree-id9032 . -6) (undo-tree-id9033 . -6) (undo-tree-id9034 . -6) (undo-tree-id9035 . -6) (undo-tree-id9036 . -6) (undo-tree-id9037 . -6) (undo-tree-id9038 . -7) (undo-tree-id9039 . -6) (undo-tree-id9040 . -7) (undo-tree-id9041 . -7) (undo-tree-id9042 . -7) (undo-tree-id9043 . -7) (undo-tree-id9044 . -7) (undo-tree-id9045 . -7) (undo-tree-id9046 . -7) (undo-tree-id9047 . -7) (undo-tree-id9048 . -7) 2114) nil (26048 31387 959068 813000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-6-face) fontified t)) . -2105) (undo-tree-id8796 . -1) (undo-tree-id8797 . -1) (undo-tree-id8798 . -1) (undo-tree-id8799 . -1) (undo-tree-id8800 . -1) (undo-tree-id8801 . -1) (undo-tree-id8802 . -1) (undo-tree-id8803 . -1) (undo-tree-id8804 . -1) (undo-tree-id8805 . -1) (undo-tree-id8806 . -1) (undo-tree-id8807 . -1) (undo-tree-id8808 . -1) (undo-tree-id8809 . -1) (undo-tree-id8810 . -1) (undo-tree-id8811 . -1) (undo-tree-id8812 . -1) (undo-tree-id8813 . -1) (undo-tree-id8814 . -1) (undo-tree-id8815 . -1) (undo-tree-id8816 . -1) (undo-tree-id8817 . -1) (undo-tree-id8818 . -1) (undo-tree-id8819 . -1) (undo-tree-id8820 . -1) (undo-tree-id8821 . -1) (undo-tree-id8822 . -1) (undo-tree-id8823 . -1) (undo-tree-id8824 . -1) (undo-tree-id8825 . -1) (undo-tree-id8826 . -1) (undo-tree-id8827 . -1) (undo-tree-id8828 . -1) (undo-tree-id8829 . -1) (undo-tree-id8830 . -1) (undo-tree-id8831 . -1) (undo-tree-id8832 . -1) (undo-tree-id8833 . -1) (undo-tree-id8834 . -1) (undo-tree-id8835 . -1) (undo-tree-id8836 . -1) (undo-tree-id8837 . -1) (undo-tree-id8838 . -1) (undo-tree-id8839 . -1) (undo-tree-id8840 . -1) (undo-tree-id8841 . -1) (undo-tree-id8842 . -1) (undo-tree-id8843 . -1) (undo-tree-id8844 . -1) (undo-tree-id8845 . -1) (undo-tree-id8846 . -1) (undo-tree-id8847 . -1) (undo-tree-id8848 . -1) (undo-tree-id8849 . -1) (undo-tree-id8850 . -1) (undo-tree-id8851 . -1) (undo-tree-id8852 . -1) (undo-tree-id8853 . -1) (undo-tree-id8854 . -1) (undo-tree-id8855 . -1) (undo-tree-id8856 . -1) (undo-tree-id8857 . -1) (undo-tree-id8858 . -1) (undo-tree-id8859 . -1) (undo-tree-id8860 . -1) (undo-tree-id8861 . -1) (undo-tree-id8862 . -1) (undo-tree-id8863 . -1) (undo-tree-id8864 . -1) (undo-tree-id8865 . -1) (undo-tree-id8866 . -1) (undo-tree-id8867 . -1) (undo-tree-id8868 . -1) (undo-tree-id8869 . -1) (undo-tree-id8870 . -1) (undo-tree-id8871 . -1) (undo-tree-id8872 . -1) (undo-tree-id8873 . -1) (undo-tree-id8874 . -1) (undo-tree-id8875 . -1) (undo-tree-id8876 . -1) (undo-tree-id8877 . -1) (undo-tree-id8878 . -1) (undo-tree-id8879 . -1) (undo-tree-id8880 . -1) (undo-tree-id8881 . -1) (undo-tree-id8882 . -1) (undo-tree-id8883 . -1) (undo-tree-id8884 . -1) (undo-tree-id8885 . -1) (undo-tree-id8886 . -1) (undo-tree-id8887 . -1) (undo-tree-id8888 . -1) (undo-tree-id8889 . -1) (undo-tree-id8890 . -1) (undo-tree-id8891 . -1) (undo-tree-id8892 . -1) (undo-tree-id8893 . -1) (undo-tree-id8894 . -1) (undo-tree-id8895 . -1) (undo-tree-id8896 . -1) (undo-tree-id8897 . -1) (undo-tree-id8898 . -1) (#("." 0 1 (fontified t)) . -2106) (undo-tree-id8899 . -1) (undo-tree-id8900 . -1) (undo-tree-id8901 . -1) (undo-tree-id8902 . -1) (undo-tree-id8903 . -1) (undo-tree-id8904 . -1) (undo-tree-id8905 . -1) (undo-tree-id8906 . -1) (undo-tree-id8907 . -1) (undo-tree-id8908 . -1) (undo-tree-id8909 . -1) (undo-tree-id8910 . -1) (undo-tree-id8911 . -1) (undo-tree-id8912 . -1) (undo-tree-id8913 . -1) (undo-tree-id8914 . -1) (undo-tree-id8915 . -1) (undo-tree-id8916 . -1) (undo-tree-id8917 . -1) (undo-tree-id8918 . -1) (undo-tree-id8919 . -1) (undo-tree-id8920 . -1) (undo-tree-id8921 . -1) (undo-tree-id8922 . -1) (undo-tree-id8923 . -1) (undo-tree-id8924 . -1) (undo-tree-id8925 . -1) (undo-tree-id8926 . -1) (undo-tree-id8927 . -1) (undo-tree-id8928 . -1) (undo-tree-id8929 . -1) (undo-tree-id8930 . -1) (undo-tree-id8931 . -1) (undo-tree-id8932 . -1) (undo-tree-id8933 . -1) (undo-tree-id8934 . -1) (undo-tree-id8935 . -1) (undo-tree-id8936 . -1) (undo-tree-id8937 . -1) (undo-tree-id8938 . -1) (undo-tree-id8939 . -1) (undo-tree-id8940 . -1) (undo-tree-id8941 . -1) (undo-tree-id8942 . -1) (undo-tree-id8943 . -1) (undo-tree-id8944 . -1) (undo-tree-id8945 . -1) (undo-tree-id8946 . -1) (undo-tree-id8947 . -1) (undo-tree-id8948 . -1) (undo-tree-id8949 . -1) (undo-tree-id8950 . -1) (undo-tree-id8951 . -1) (undo-tree-id8952 . -1) (undo-tree-id8953 . -1) (undo-tree-id8954 . -1) (undo-tree-id8955 . -1) (undo-tree-id8956 . -1) (undo-tree-id8957 . -1) (undo-tree-id8958 . -1) (undo-tree-id8959 . -1) (undo-tree-id8960 . -1) (undo-tree-id8961 . -1) (undo-tree-id8962 . -1) (undo-tree-id8963 . -1) (undo-tree-id8964 . -1) (undo-tree-id8965 . -1) (undo-tree-id8966 . -1) (undo-tree-id8967 . -1) (undo-tree-id8968 . -1) (undo-tree-id8969 . -1) (undo-tree-id8970 . -1) (undo-tree-id8971 . -1) (undo-tree-id8972 . -1) (undo-tree-id8973 . -1) (undo-tree-id8974 . -1) (undo-tree-id8975 . -1) (undo-tree-id8976 . -1) (undo-tree-id8977 . -1) (undo-tree-id8978 . -1) (undo-tree-id8979 . -1) (undo-tree-id8980 . -1) (undo-tree-id8981 . -1) (undo-tree-id8982 . -1) (undo-tree-id8983 . -1) (undo-tree-id8984 . -1) (undo-tree-id8985 . -1) (undo-tree-id8986 . -1) (undo-tree-id8987 . -1) (undo-tree-id8988 . -1) (undo-tree-id8989 . -1) (undo-tree-id8990 . -1) (undo-tree-id8991 . -1) (undo-tree-id8992 . -1) (undo-tree-id8993 . -1) (undo-tree-id8994 . -1) 2107) nil (26048 31387 959030 592000) 0 nil])
([nil nil ((#("iter(" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-6-face) fontified t)) . -2100) (undo-tree-id8691 . -5) (undo-tree-id8692 . -5) (undo-tree-id8693 . -5) (undo-tree-id8694 . -5) (undo-tree-id8695 . -5) (undo-tree-id8696 . -5) (undo-tree-id8697 . -5) (undo-tree-id8698 . -5) (undo-tree-id8699 . -5) (undo-tree-id8700 . -5) (undo-tree-id8701 . -5) (undo-tree-id8702 . -5) (undo-tree-id8703 . -5) (undo-tree-id8704 . -5) (undo-tree-id8705 . -5) (undo-tree-id8706 . -5) (undo-tree-id8707 . -5) (undo-tree-id8708 . -5) (undo-tree-id8709 . -5) (undo-tree-id8710 . -5) (undo-tree-id8711 . -5) (undo-tree-id8712 . -5) (undo-tree-id8713 . -5) (undo-tree-id8714 . -5) (undo-tree-id8715 . -5) (undo-tree-id8716 . -5) (undo-tree-id8717 . -5) (undo-tree-id8718 . -5) (undo-tree-id8719 . -5) (undo-tree-id8720 . -5) (undo-tree-id8721 . -5) (undo-tree-id8722 . -5) (undo-tree-id8723 . -5) (undo-tree-id8724 . -5) (undo-tree-id8725 . -5) (undo-tree-id8726 . -5) (undo-tree-id8727 . -5) (undo-tree-id8728 . -5) (undo-tree-id8729 . -5) (undo-tree-id8730 . -5) (undo-tree-id8731 . -5) (undo-tree-id8732 . -5) (undo-tree-id8733 . -5) (undo-tree-id8734 . -5) (undo-tree-id8735 . -5) (undo-tree-id8736 . -5) (undo-tree-id8737 . -5) (undo-tree-id8738 . -5) (undo-tree-id8739 . -5) (undo-tree-id8740 . -5) (undo-tree-id8741 . -5) (undo-tree-id8742 . -5) (undo-tree-id8743 . -5) (undo-tree-id8744 . -5) (undo-tree-id8745 . -5) (undo-tree-id8746 . -5) (undo-tree-id8747 . -5) (undo-tree-id8748 . -5) (undo-tree-id8749 . -5) (undo-tree-id8750 . -5) (undo-tree-id8751 . -5) (undo-tree-id8752 . -5) (undo-tree-id8753 . -5) (undo-tree-id8754 . -5) (undo-tree-id8755 . -5) (undo-tree-id8756 . -5) (undo-tree-id8757 . -5) (undo-tree-id8758 . -5) (undo-tree-id8759 . -5) (undo-tree-id8760 . -5) (undo-tree-id8761 . -5) (undo-tree-id8762 . -5) (undo-tree-id8763 . -5) (undo-tree-id8764 . -5) (undo-tree-id8765 . -5) (undo-tree-id8766 . -5) (undo-tree-id8767 . -5) (undo-tree-id8768 . -5) (undo-tree-id8769 . -5) (undo-tree-id8770 . -5) (undo-tree-id8771 . -5) (undo-tree-id8772 . -5) (undo-tree-id8773 . -5) (undo-tree-id8774 . -5) (undo-tree-id8775 . -5) (undo-tree-id8776 . -5) (undo-tree-id8777 . -5) (undo-tree-id8778 . -5) (undo-tree-id8779 . -5) (undo-tree-id8780 . -5) (undo-tree-id8781 . -5) (undo-tree-id8782 . -5) (undo-tree-id8783 . -5) (undo-tree-id8784 . -5) (undo-tree-id8785 . -5) (undo-tree-id8786 . -5) (undo-tree-id8787 . -5) (undo-tree-id8788 . -5) (undo-tree-id8789 . -5) (undo-tree-id8790 . -5) (undo-tree-id8791 . -5) (undo-tree-id8792 . -5) (undo-tree-id8793 . -5) (undo-tree-id8794 . -5) (undo-tree-id8795 . -5) 2105) nil (26048 31387 958910 971000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2099) (undo-tree-id8536 . -1) (undo-tree-id8537 . -1) (undo-tree-id8538 . -1) (undo-tree-id8539 . -1) (undo-tree-id8540 . -1) (undo-tree-id8541 . -1) (undo-tree-id8542 . -1) (undo-tree-id8543 . -1) (undo-tree-id8544 . -1) (undo-tree-id8545 . -1) (undo-tree-id8546 . -1) (undo-tree-id8547 . -1) (undo-tree-id8548 . -1) (undo-tree-id8549 . -1) (undo-tree-id8550 . -1) (undo-tree-id8551 . -1) (undo-tree-id8552 . -1) (undo-tree-id8553 . -1) (undo-tree-id8554 . -1) (undo-tree-id8555 . -1) (undo-tree-id8556 . -1) (undo-tree-id8557 . -1) (undo-tree-id8558 . -1) (undo-tree-id8559 . -1) (undo-tree-id8560 . -1) (undo-tree-id8561 . -1) (undo-tree-id8562 . -1) (undo-tree-id8563 . -1) (undo-tree-id8564 . -1) (undo-tree-id8565 . -1) (undo-tree-id8566 . -1) (undo-tree-id8567 . -1) (undo-tree-id8568 . -1) (undo-tree-id8569 . -1) (undo-tree-id8570 . -1) (undo-tree-id8571 . -1) (undo-tree-id8572 . -1) (undo-tree-id8573 . -1) (undo-tree-id8574 . -1) (undo-tree-id8575 . -1) (undo-tree-id8576 . -1) (undo-tree-id8577 . -1) (undo-tree-id8578 . -1) (undo-tree-id8579 . -1) (undo-tree-id8580 . -1) (undo-tree-id8581 . -1) (undo-tree-id8582 . -1) (undo-tree-id8583 . -1) (undo-tree-id8584 . -1) (undo-tree-id8585 . -1) (undo-tree-id8586 . -1) (undo-tree-id8587 . -1) (undo-tree-id8588 . -1) (undo-tree-id8589 . -1) (undo-tree-id8590 . -1) (undo-tree-id8591 . -1) (undo-tree-id8592 . -1) (undo-tree-id8593 . -1) (undo-tree-id8594 . -1) (undo-tree-id8595 . -1) (undo-tree-id8596 . -1) (undo-tree-id8597 . -1) (undo-tree-id8598 . -1) (undo-tree-id8599 . -1) (undo-tree-id8600 . -1) (undo-tree-id8601 . -1) (undo-tree-id8602 . -1) (undo-tree-id8603 . -1) (undo-tree-id8604 . -1) (undo-tree-id8605 . -1) (undo-tree-id8606 . -1) (undo-tree-id8607 . -1) (undo-tree-id8608 . -1) (undo-tree-id8609 . -1) (undo-tree-id8610 . -1) (undo-tree-id8611 . -1) (undo-tree-id8612 . -1) (undo-tree-id8613 . -1) (undo-tree-id8614 . -1) (undo-tree-id8615 . -1) (undo-tree-id8616 . -1) (undo-tree-id8617 . -1) (undo-tree-id8618 . -1) (undo-tree-id8619 . -1) (undo-tree-id8620 . -1) (undo-tree-id8621 . -1) (undo-tree-id8622 . -1) (undo-tree-id8623 . -1) (undo-tree-id8624 . -1) (undo-tree-id8625 . -1) (undo-tree-id8626 . -1) (undo-tree-id8627 . -1) (undo-tree-id8628 . -1) (undo-tree-id8629 . -1) (undo-tree-id8630 . -1) (undo-tree-id8631 . -1) (undo-tree-id8632 . -1) (undo-tree-id8633 . -1) (undo-tree-id8634 . -1) (undo-tree-id8635 . -1) (undo-tree-id8636 . -1) (undo-tree-id8637 . -1) (undo-tree-id8638 . -1) (undo-tree-id8639 . -1) (undo-tree-id8640 . -1) (undo-tree-id8641 . -1) (undo-tree-id8642 . -1) (undo-tree-id8643 . -1) (undo-tree-id8644 . -1) (undo-tree-id8645 . -1) (undo-tree-id8646 . -1) (undo-tree-id8647 . -1) (undo-tree-id8648 . -1) (undo-tree-id8649 . -1) (undo-tree-id8650 . -1) (undo-tree-id8651 . -1) (undo-tree-id8652 . -1) (undo-tree-id8653 . -1) (undo-tree-id8654 . -1) (undo-tree-id8655 . -1) (undo-tree-id8656 . -1) (undo-tree-id8657 . -1) (undo-tree-id8658 . -1) (undo-tree-id8659 . -1) (undo-tree-id8660 . -1) (undo-tree-id8661 . -1) (undo-tree-id8662 . -1) (undo-tree-id8663 . -1) (undo-tree-id8664 . -1) (undo-tree-id8665 . -1) (undo-tree-id8666 . -1) (undo-tree-id8667 . -1) (undo-tree-id8668 . -1) (undo-tree-id8669 . -1) (undo-tree-id8670 . -1) (undo-tree-id8671 . -1) (undo-tree-id8672 . -1) (undo-tree-id8673 . -1) (undo-tree-id8674 . -1) (undo-tree-id8675 . -1) (undo-tree-id8676 . -1) (undo-tree-id8677 . -1) (undo-tree-id8678 . -1) (undo-tree-id8679 . -1) (undo-tree-id8680 . -1) (undo-tree-id8681 . -1) (undo-tree-id8682 . -1) (undo-tree-id8683 . -1) (undo-tree-id8684 . -1) (undo-tree-id8685 . -1) (undo-tree-id8686 . -1) (undo-tree-id8687 . -1) (undo-tree-id8688 . -1) (undo-tree-id8689 . -1) (undo-tree-id8690 . -1) 2100) nil (26048 31387 958440 528000) 0 nil])
([nil nil ((2099 . 2101)) nil (26048 31387 957860 380000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -2100) (undo-tree-id8532 . -1) (undo-tree-id8533 . -1) (undo-tree-id8534 . -1) (undo-tree-id8535 . -1) 2101) nil (26048 31387 957859 576000) 0 nil])
([nil nil ((2100 . 2101)) nil (26048 31387 957856 671000) 0 nil])
([nil nil ((2101 . 2104)) nil (26048 31387 957856 149000) 0 nil])
([nil nil ((apply yas--snippet-revive 2100 2106 #s(yas--snippet nil nil #s(yas--exit 2106 nil) 75 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2106 nil) 75 nil nil nil nil)) (2100 . 2106) (#("name()$0" 0 8 (fontified nil)) . 2100) (2100 . 2108) (#("name" 0 4 (fontified nil)) . 2100) (2100 . 2104) (#("name() (alias get_name, gst_structure_get_name)" 0 47 (fontified nil)) . -2100) (2100 . 2147) (#("name" 0 4 (fontified t)) . -2100) (undo-tree-id8520 . -4) (undo-tree-id8521 . -1) (undo-tree-id8522 . -1) (undo-tree-id8523 . -2) (undo-tree-id8524 . -2) (undo-tree-id8525 . -2) (undo-tree-id8526 . -2) (undo-tree-id8527 . -4) (undo-tree-id8528 . -4) (undo-tree-id8529 . -4) (undo-tree-id8530 . -4) (undo-tree-id8531 . -4) 2104) nil (26048 31387 957854 487000) 0 nil])
([nil nil ((#("name()" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-6-face) fontified t) 5 6 (face (rainbow-delimiters-depth-6-face) fontified t)) . -2100) (undo-tree-id8494 . -6) (undo-tree-id8495 . -6) (undo-tree-id8496 . -6) (undo-tree-id8497 . -6) (undo-tree-id8498 . -6) (undo-tree-id8499 . -6) (undo-tree-id8500 . -6) (undo-tree-id8501 . -6) (undo-tree-id8502 . -6) (undo-tree-id8503 . -6) (undo-tree-id8504 . -6) (undo-tree-id8505 . -6) (undo-tree-id8506 . -6) (undo-tree-id8507 . -6) (undo-tree-id8508 . -6) (undo-tree-id8509 . -6) (undo-tree-id8510 . -6) (undo-tree-id8511 . -6) (undo-tree-id8512 . -6) (undo-tree-id8513 . -6) (undo-tree-id8514 . -6) (undo-tree-id8515 . -6) (undo-tree-id8516 . -6) (undo-tree-id8517 . -6) (undo-tree-id8518 . -6) (undo-tree-id8519 . -6) 2106) nil (26048 31387 957844 485000) 0 nil])
([nil nil ((#("structure." 0 10 (fontified t)) . -2090) (undo-tree-id8282 . -10) (undo-tree-id8283 . -10) (undo-tree-id8284 . -9) (undo-tree-id8285 . -9) (undo-tree-id8286 . -9) (undo-tree-id8287 . -9) (undo-tree-id8288 . -9) (undo-tree-id8289 . -9) (undo-tree-id8290 . -9) (undo-tree-id8291 . -9) (undo-tree-id8292 . -9) (undo-tree-id8293 . -9) (undo-tree-id8294 . -9) (undo-tree-id8295 . -9) (undo-tree-id8296 . -9) (undo-tree-id8297 . -9) (undo-tree-id8298 . -9) (undo-tree-id8299 . -9) (undo-tree-id8300 . -9) (undo-tree-id8301 . -9) (undo-tree-id8302 . -9) (undo-tree-id8303 . -9) (undo-tree-id8304 . -9) (undo-tree-id8305 . -9) (undo-tree-id8306 . -9) (undo-tree-id8307 . -9) (undo-tree-id8308 . -9) (undo-tree-id8309 . -9) (undo-tree-id8310 . -9) (undo-tree-id8311 . -9) (undo-tree-id8312 . -9) (undo-tree-id8313 . -9) (undo-tree-id8314 . -9) (undo-tree-id8315 . -9) (undo-tree-id8316 . -9) (undo-tree-id8317 . -9) (undo-tree-id8318 . -9) (undo-tree-id8319 . -9) (undo-tree-id8320 . -9) (undo-tree-id8321 . -9) (undo-tree-id8322 . -9) (undo-tree-id8323 . -9) (undo-tree-id8324 . -9) (undo-tree-id8325 . -9) (undo-tree-id8326 . -9) (undo-tree-id8327 . -9) (undo-tree-id8328 . -9) (undo-tree-id8329 . -9) (undo-tree-id8330 . -9) (undo-tree-id8331 . -9) (undo-tree-id8332 . -9) (undo-tree-id8333 . -9) (undo-tree-id8334 . -9) (undo-tree-id8335 . -9) (undo-tree-id8336 . -9) (undo-tree-id8337 . -9) (undo-tree-id8338 . -9) (undo-tree-id8339 . -9) (undo-tree-id8340 . -9) (undo-tree-id8341 . -9) (undo-tree-id8342 . -9) (undo-tree-id8343 . -9) (undo-tree-id8344 . -9) (undo-tree-id8345 . -9) (undo-tree-id8346 . -9) (undo-tree-id8347 . -9) (undo-tree-id8348 . -9) (undo-tree-id8349 . -9) (undo-tree-id8350 . -9) (undo-tree-id8351 . -9) (undo-tree-id8352 . -9) (undo-tree-id8353 . -9) (undo-tree-id8354 . -9) (undo-tree-id8355 . -9) (undo-tree-id8356 . -9) (undo-tree-id8357 . -9) (undo-tree-id8358 . -9) (undo-tree-id8359 . -9) (undo-tree-id8360 . -9) (undo-tree-id8361 . -9) (undo-tree-id8362 . -9) (undo-tree-id8363 . -9) (undo-tree-id8364 . -9) (undo-tree-id8365 . -9) (undo-tree-id8366 . -9) (undo-tree-id8367 . -9) (undo-tree-id8368 . -9) (undo-tree-id8369 . -9) (undo-tree-id8370 . -9) (undo-tree-id8371 . -9) (undo-tree-id8372 . -9) (undo-tree-id8373 . -9) (undo-tree-id8374 . -9) (undo-tree-id8375 . -9) (undo-tree-id8376 . -9) (undo-tree-id8377 . -9) (undo-tree-id8378 . -9) (undo-tree-id8379 . -9) (undo-tree-id8380 . -9) (undo-tree-id8381 . -9) (undo-tree-id8382 . -9) (undo-tree-id8383 . -9) (undo-tree-id8384 . -9) (undo-tree-id8385 . -9) (undo-tree-id8386 . -9) (undo-tree-id8387 . -9) (undo-tree-id8388 . -9) (undo-tree-id8389 . -9) (undo-tree-id8390 . -9) (undo-tree-id8391 . -9) (undo-tree-id8392 . -9) (undo-tree-id8393 . -9) (undo-tree-id8394 . -9) (undo-tree-id8395 . -9) (undo-tree-id8396 . -9) (undo-tree-id8397 . -9) (undo-tree-id8398 . -9) (undo-tree-id8399 . -9) (undo-tree-id8400 . -9) (undo-tree-id8401 . -9) (undo-tree-id8402 . -9) (undo-tree-id8403 . -9) (undo-tree-id8404 . -9) (undo-tree-id8405 . -9) (undo-tree-id8406 . -9) (undo-tree-id8407 . -9) (undo-tree-id8408 . -9) (undo-tree-id8409 . -9) (undo-tree-id8410 . -9) (undo-tree-id8411 . -9) (undo-tree-id8412 . -9) (undo-tree-id8413 . -9) (undo-tree-id8414 . -9) (undo-tree-id8415 . -9) (undo-tree-id8416 . -9) (undo-tree-id8417 . -9) (undo-tree-id8418 . -9) (undo-tree-id8419 . -9) (undo-tree-id8420 . -9) (undo-tree-id8421 . -9) (undo-tree-id8422 . -9) (undo-tree-id8423 . -9) (undo-tree-id8424 . -9) (undo-tree-id8425 . -9) (undo-tree-id8426 . -9) (undo-tree-id8427 . -9) (undo-tree-id8428 . -9) (undo-tree-id8429 . -9) (undo-tree-id8430 . -9) (undo-tree-id8431 . -9) (undo-tree-id8432 . -9) (undo-tree-id8433 . -9) (undo-tree-id8434 . -9) (undo-tree-id8435 . -9) (undo-tree-id8436 . -9) (undo-tree-id8437 . -9) (undo-tree-id8438 . -9) (undo-tree-id8439 . -9) (undo-tree-id8440 . -9) (undo-tree-id8441 . -9) (undo-tree-id8442 . -10) (undo-tree-id8443 . -10) (undo-tree-id8444 . -10) (undo-tree-id8445 . -10) (undo-tree-id8446 . -10) (undo-tree-id8447 . -10) (undo-tree-id8448 . -10) (undo-tree-id8449 . -10) (undo-tree-id8450 . -10) (undo-tree-id8451 . -10) (undo-tree-id8452 . -10) (undo-tree-id8453 . -10) (undo-tree-id8454 . -10) (undo-tree-id8455 . -10) (undo-tree-id8456 . -10) (undo-tree-id8457 . -10) (undo-tree-id8458 . -10) (undo-tree-id8459 . -10) (undo-tree-id8460 . -10) (undo-tree-id8461 . -10) (undo-tree-id8462 . -10) (undo-tree-id8463 . -10) (undo-tree-id8464 . -10) (undo-tree-id8465 . -10) (undo-tree-id8466 . -10) (undo-tree-id8467 . -10) (undo-tree-id8468 . -10) (undo-tree-id8469 . -10) (undo-tree-id8470 . -10) (undo-tree-id8471 . -10) (undo-tree-id8472 . -10) (undo-tree-id8473 . -10) (undo-tree-id8474 . -10) (undo-tree-id8475 . -10) (undo-tree-id8476 . -10) (undo-tree-id8477 . -10) (undo-tree-id8478 . -10) (undo-tree-id8479 . -10) (undo-tree-id8480 . -10) (undo-tree-id8481 . -10) (undo-tree-id8482 . -10) (undo-tree-id8483 . -10) (undo-tree-id8484 . -10) (undo-tree-id8485 . -10) (undo-tree-id8486 . -10) (undo-tree-id8487 . -10) (undo-tree-id8488 . -10) (undo-tree-id8489 . -10) (undo-tree-id8490 . -10) (undo-tree-id8491 . -10) (undo-tree-id8492 . -10) (undo-tree-id8493 . -10) 2100) nil (26048 31387 957821 317000) 0 nil])
([nil nil ((2090 . 2091)) nil (26048 31387 957541 966000) 0 nil])
([nil nil ((apply yas--snippet-revive 2090 2100 #s(yas--snippet nil nil #s(yas--exit 2099 nil) 76 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2099 nil) 76 nil nil nil nil)) (2090 . 2100) (#("println!($0)" 0 12 (fontified nil)) . 2090) (2090 . 2102) (#("p" 0 1 (fontified nil)) . 2090) (2090 . 2091) (#("println!(…)" 0 11 (fontified nil)) . -2090) (2090 . 2101) (#("p" 0 1 (fontified t)) . -2090) (undo-tree-id8275 . -1) (undo-tree-id8276 . -1) (undo-tree-id8277 . -1) (undo-tree-id8278 . -1) (undo-tree-id8279 . -1) (undo-tree-id8280 . -1) (undo-tree-id8281 . -1) 2091) nil (26048 31387 957540 541000) 0 nil])
([nil nil ((2099 . 2101)) nil (26048 31387 957534 575000) 0 nil])
([nil nil ((2100 . 2102)) nil (26048 31387 957534 24000) 0 nil])
([nil nil ((2101 . 2103)) nil (26048 31387 957533 510000) 0 nil])
([nil nil ((2105 . 2108)) nil (26048 31387 957532 991000) 0 nil])
([nil nil ((2107 . 2119) (#("s" 0 1 (fontified nil)) . 2107) (2107 . 2108) (#("sink_display" 0 12 (fontified nil)) . -2107) (2107 . 2119) (#("s" 0 1 (fontified t)) . -2107) (undo-tree-id8265 . -1) (undo-tree-id8266 . -1) (undo-tree-id8267 . -1) (undo-tree-id8268 . -1) (undo-tree-id8269 . -1) (undo-tree-id8270 . -1) (undo-tree-id8271 . -1) (undo-tree-id8272 . -1) (undo-tree-id8273 . -1) (undo-tree-id8274 . -1) 2108) nil (26048 31387 957531 673000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -2117) (undo-tree-id8251 . -1) (undo-tree-id8252 . -1) (undo-tree-id8253 . -1) (undo-tree-id8254 . -1) (undo-tree-id8255 . -1) (undo-tree-id8256 . -1) (undo-tree-id8257 . -1) (undo-tree-id8258 . -1) (#("y" 0 1 (fontified t)) . -2118) (undo-tree-id8259 . -1) (undo-tree-id8260 . -1) (undo-tree-id8261 . -1) (undo-tree-id8262 . -1) (undo-tree-id8263 . -1) (undo-tree-id8264 . -1) 2119) nil (26048 31387 957522 987000) 0 nil])
([nil nil ((#("displ" 0 5 (fontified t)) . -2112) (undo-tree-id8241 . -5) (undo-tree-id8242 . -5) (undo-tree-id8243 . -5) (undo-tree-id8244 . -5) (undo-tree-id8245 . -5) (undo-tree-id8246 . -5) (undo-tree-id8247 . -5) (undo-tree-id8248 . -5) (undo-tree-id8249 . -5) (undo-tree-id8250 . -5) 2117) nil (26048 31387 957513 41000) 0 nil])
([nil nil ((#("sink_" 0 5 (fontified t)) . -2107) (undo-tree-id8229 . -5) (undo-tree-id8230 . -5) (undo-tree-id8231 . -5) (undo-tree-id8232 . -5) (undo-tree-id8233 . -5) (undo-tree-id8234 . -5) (undo-tree-id8235 . -5) (undo-tree-id8236 . -5) (undo-tree-id8237 . -5) (undo-tree-id8238 . -5) (undo-tree-id8239 . -5) (undo-tree-id8240 . -5) 2112) nil (26048 31387 957505 802000) 0 nil])
([nil nil ((2107 . 2110)) nil (26048 31387 957496 248000) 0 nil])
([nil nil ((2107 . 2116) (#("str" 0 3 (fontified nil)) . 2107) (2107 . 2110) (#("structure" 0 9 (fontified nil)) . -2107) (2107 . 2116) (#("str" 0 3 (face font-lock-type-face fontified t)) . -2107) (undo-tree-id8220 . -3) (undo-tree-id8221 . -1) (undo-tree-id8222 . -1) (undo-tree-id8223 . -1) (undo-tree-id8224 . -2) (undo-tree-id8225 . -2) (undo-tree-id8226 . -2) (undo-tree-id8227 . -3) (undo-tree-id8228 . -3) 2110) nil (26048 31387 957494 513000) 0 nil])
([nil nil ((2116 . 2118)) nil (26048 31387 957486 121000) 0 nil])
([nil nil ((apply yas--snippet-revive 2117 2123 #s(yas--snippet nil nil #s(yas--exit 2123 nil) 77 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2123 nil) 77 nil nil nil nil)) (2117 . 2123) (#("name()$0" 0 8 (fontified nil)) . 2117) (2117 . 2125) (#("n" 0 1 (fontified nil)) . 2117) (2117 . 2118) (#("name() (alias get_name, gst_structure_get_name)" 0 47 (fontified nil)) . -2117) (2117 . 2164) (#("n" 0 1 (fontified t)) . -2117) (undo-tree-id8213 . -1) (undo-tree-id8214 . -1) (undo-tree-id8215 . -1) (undo-tree-id8216 . -1) (undo-tree-id8217 . -1) (undo-tree-id8218 . -1) (undo-tree-id8219 . -1) 2118) nil (26048 31387 957481 545000) 0 nil])
([nil nil ((2124 . 2125) (t 26048 31388 10286 266000)) nil (26048 31398 127117 243000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -2124) (undo-tree-id9163 . -1) (undo-tree-id9164 . -1) (undo-tree-id9165 . -1) (undo-tree-id9166 . -1) (undo-tree-id9167 . -1) (undo-tree-id9168 . -1) (undo-tree-id9169 . -1) (undo-tree-id9170 . -1) (undo-tree-id9171 . -1) (undo-tree-id9172 . -1) (undo-tree-id9173 . -1) (undo-tree-id9174 . -1) (undo-tree-id9175 . -1) 2125 (t 26048 31398 180286 879000)) nil (26048 31404 105269 808000) 0 nil])
([nil nil ((2124 . 2125)) nil (26048 31404 105249 325000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -2124) (undo-tree-id9176 . -1) (undo-tree-id9177 . -1) (undo-tree-id9178 . -1) (undo-tree-id9179 . -1) (undo-tree-id9180 . -1) (undo-tree-id9181 . -1) (undo-tree-id9182 . -1) (undo-tree-id9183 . -1) (undo-tree-id9184 . -1) (undo-tree-id9185 . -1) (undo-tree-id9186 . -1) (undo-tree-id9187 . -1) 2125 (t 26048 31404 126953 906000)) nil (26048 31406 604749 84000) 0 nil])
([nil nil ((2124 . 2125) (t 26048 31406 626954 59000)) nil (26048 31417 335439 247000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -2124) (undo-tree-id9188 . -1) (undo-tree-id9189 . -1) (undo-tree-id9190 . -1) (undo-tree-id9191 . -1) (undo-tree-id9192 . -1) (undo-tree-id9193 . -1) (undo-tree-id9194 . -1) (undo-tree-id9195 . -1) (undo-tree-id9196 . -1) (undo-tree-id9197 . -1) 2125) nil (26048 31417 335437 214000) 0 nil])
([nil nil ((2125 . 2126) (2090 . 2090) (2090 . 2091)) nil (26048 31417 335422 265000) 0 nil])
([nil nil ((2125 . 2126)) nil (26048 31417 335417 975000) 0 nil])
([nil nil ((2126 . 2127) (t 26048 31417 356954 717000)) nil (26048 31421 214121 921000) 0 nil])
([nil nil ((2127 . 2128)) nil (26048 31421 214120 892000) 0 nil])
([nil nil ((#("M" 0 1 (face font-lock-type-face fontified t)) . -2127) (undo-tree-id9204 . -1) (undo-tree-id9205 . -1) (undo-tree-id9206 . -1) (undo-tree-id9207 . -1) (undo-tree-id9208 . -1) 2128) nil (26048 31421 214119 608000) 0 nil])
([nil nil ((2127 . 2128)) nil (26048 31421 214114 282000) 0 nil])
([nil nil ((apply yas--snippet-revive 2127 2131 #s(yas--snippet nil nil #s(yas--exit 2131 nil) 78 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2131 nil) 78 nil nil nil nil)) (2127 . 2131) (#("None$0" 0 6 (fontified nil)) . 2127) (2127 . 2133) (#("N" 0 1 (fontified nil)) . 2127) (2127 . 2128) (#("None" 0 4 (fontified nil)) . -2127) (2127 . 2131) (#("N" 0 1 (face font-lock-type-face fontified t)) . -2127) (undo-tree-id9198 . -1) (undo-tree-id9199 . -1) (undo-tree-id9200 . -1) (undo-tree-id9201 . -1) (undo-tree-id9202 . -1) (undo-tree-id9203 . -1) 2128) nil (26048 31421 214109 433000) 0 nil])
([nil nil ((#("None" 0 4 (face font-lock-type-face fontified t)) . -2127) (undo-tree-id9237 . -4) (undo-tree-id9238 . -4) (undo-tree-id9239 . -4) (undo-tree-id9240 . -4) (undo-tree-id9241 . -4) (undo-tree-id9242 . -4) (undo-tree-id9243 . -4) (undo-tree-id9244 . -4) (undo-tree-id9245 . -4) (undo-tree-id9246 . -4) (undo-tree-id9247 . -4) (undo-tree-id9248 . -4) (undo-tree-id9249 . -4) (undo-tree-id9250 . -4) (undo-tree-id9251 . -4) (undo-tree-id9252 . -4) (undo-tree-id9253 . -4) 2131 (t 26048 31421 266954 958000)) nil (26048 31438 59476 968000) 0 nil])
([nil nil ((2127 . 2128)) nil (26048 31438 59463 359000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -2127) (undo-tree-id9223 . -1) (undo-tree-id9224 . -1) (undo-tree-id9225 . -1) (undo-tree-id9226 . -1) (undo-tree-id9227 . -1) (undo-tree-id9228 . -1) (undo-tree-id9229 . -1) (undo-tree-id9230 . -1) (undo-tree-id9231 . -1) (undo-tree-id9232 . -1) (undo-tree-id9233 . -1) (undo-tree-id9234 . -1) (undo-tree-id9235 . -1) (undo-tree-id9236 . -1) 2128) nil (26048 31438 59461 760000) 0 nil])
([nil nil ((2127 . 2128)) nil (26048 31438 59450 439000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2132 2134 nil nil nil nil #s(yas--exit 2135 nil))) #s(yas--exit 2135 nil) 79 nil #s(yas--field 1 2132 2134 nil nil nil nil #s(yas--exit 2135 nil)) nil nil)) (2127 . 2135) (#("Some(${1:()})$0" 0 15 (fontified nil)) . 2127) (2127 . 2142) (#("S" 0 1 (fontified nil)) . 2127) (2127 . 2128) (#("Some(…)" 0 7 (fontified nil)) . -2127) (2127 . 2134) (#("S" 0 1 (face font-lock-type-face fontified t)) . -2127) (undo-tree-id9209 . -1) (undo-tree-id9210 . -1) (undo-tree-id9211 . -1) (undo-tree-id9212 . -1) (undo-tree-id9213 . -1) (undo-tree-id9214 . -1) (undo-tree-id9215 . -1) (undo-tree-id9216 . -1) (undo-tree-id9217 . -1) (undo-tree-id9218 . -1) (undo-tree-id9219 . -1) (undo-tree-id9220 . -1) (undo-tree-id9221 . -1) (undo-tree-id9222 . -1) 2128) nil (26048 31438 59445 839000) 0 nil])
([nil nil ((apply yas--snippet-revive 2127 2135 #s(yas--snippet nil (#s(yas--field 1 2132 2134 nil nil nil nil #s(yas--exit 2135 nil))) #s(yas--exit 2135 nil) 79 nil #s(yas--field 1 2132 2134 nil nil nil nil #s(yas--exit 2135 nil)) nil nil))) nil (26048 31518 988308 799000) 0 nil])
([nil nil ((#("let _ = msg.structure().and_then(|structure| {println!(\"{:?}\", structure.name()); Some(())});" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 5 (face font-lock-variable-name-face fontified t) 5 8 (fontified t) 8 11 (fontified t) 11 12 (fontified t) 12 21 (fontified t) 21 22 (face (rainbow-delimiters-depth-5-face) fontified t) 22 23 (face (rainbow-delimiters-depth-5-face) fontified t) 23 24 (fontified t) 24 32 (fontified t) 32 33 (face (rainbow-delimiters-depth-5-face) fontified t) 33 34 (fontified t) 34 43 (fontified t) 43 45 (fontified t) 45 46 (face (rainbow-delimiters-depth-6-face) fontified t) 46 54 (face rust-builtin-formatting-macro fontified t) 54 55 (face (rainbow-delimiters-depth-7-face) fontified t) 55 56 (face font-lock-string-face fontified t) 56 60 (face rust-string-interpolation fontified t) 60 61 (face font-lock-string-face fontified t) 61 63 (fontified t) 63 73 (fontified t) 73 77 (fontified t) 77 78 (face (rainbow-delimiters-depth-8-face) fontified t) 78 79 (face (rainbow-delimiters-depth-8-face) fontified t) 79 80 (face (rainbow-delimiters-depth-7-face) fontified t) 80 82 (fontified t) 82 86 (face font-lock-type-face fontified t) 86 87 (face (rainbow-delimiters-depth-7-face) fontified t) 87 88 (face (rainbow-delimiters-depth-8-face) fontified t) 88 89 (face (rainbow-delimiters-depth-8-face) fontified t) 89 90 (face (rainbow-delimiters-depth-7-face) fontified t) 90 91 (face (rainbow-delimiters-depth-6-face) fontified t) 91 92 (face (rainbow-delimiters-depth-5-face) fontified t) 92 93 (fontified t)) . 2045) (undo-tree-id9379 . -6) (undo-tree-id9380 . -40) (undo-tree-id9381 . -40) (undo-tree-id9382 . -82) (undo-tree-id9383 . -82) (undo-tree-id9384 . -82) (undo-tree-id9385 . -82) (undo-tree-id9386 . -82) (undo-tree-id9387 . -82) (undo-tree-id9388 . -82) (undo-tree-id9389 . -82) (undo-tree-id9390 . -82) (undo-tree-id9391 . -82) (undo-tree-id9392 . -82) (undo-tree-id9393 . -82) (undo-tree-id9394 . -82) (undo-tree-id9395 . -82) (undo-tree-id9396 . -82) (undo-tree-id9397 . -82) (undo-tree-id9398 . -82) (undo-tree-id9399 . -82) (undo-tree-id9400 . -82) (undo-tree-id9401 . -82) (undo-tree-id9402 . -82) (undo-tree-id9403 . -82) (undo-tree-id9404 . -82) (undo-tree-id9405 . -82) (undo-tree-id9406 . -82) (undo-tree-id9407 . -82) (undo-tree-id9408 . -82) (undo-tree-id9409 . -82) (undo-tree-id9410 . -82) (undo-tree-id9411 . -82) (undo-tree-id9412 . -82) (undo-tree-id9413 . -82) (undo-tree-id9414 . -82) (undo-tree-id9415 . -82) (undo-tree-id9416 . -82) (undo-tree-id9417 . -82) (undo-tree-id9418 . -82) (undo-tree-id9419 . -82) (undo-tree-id9420 . -82) (undo-tree-id9421 . -87) (undo-tree-id9422 . -87) (undo-tree-id9423 . -87) (undo-tree-id9424 . -87) (undo-tree-id9425 . -87) (undo-tree-id9426 . -87) (undo-tree-id9427 . -87) (undo-tree-id9428 . -87) (undo-tree-id9429 . -87) (undo-tree-id9430 . -87) (undo-tree-id9431 . -87) (undo-tree-id9432 . -87) (undo-tree-id9433 . -87) (undo-tree-id9434 . -87) (undo-tree-id9435 . -87) (undo-tree-id9436 . -87) (undo-tree-id9437 . -87) (undo-tree-id9438 . -87) (undo-tree-id9439 . -87) (undo-tree-id9440 . -87) (undo-tree-id9441 . -87) (undo-tree-id9442 . -87) (undo-tree-id9443 . -87) (undo-tree-id9444 . -87) (undo-tree-id9445 . -1) (undo-tree-id9446 . -2) (undo-tree-id9447 . -3) (undo-tree-id9448 . -4) (undo-tree-id9449 . -5) (undo-tree-id9450 . -6) (undo-tree-id9451 . -6) (undo-tree-id9452 . -6) (undo-tree-id9453 . -6) (undo-tree-id9454 . -6) (undo-tree-id9455 . -20) (undo-tree-id9456 . -20) (undo-tree-id9457 . -20) (undo-tree-id9458 . -20) (undo-tree-id9459 . -20) (undo-tree-id9460 . -20) (undo-tree-id9461 . -21) (undo-tree-id9462 . -27) (undo-tree-id9463 . -32) (undo-tree-id9464 . -43) (undo-tree-id9465 . -53) (undo-tree-id9466 . -72) (undo-tree-id9467 . -77) (undo-tree-id9468 . -86) (undo-tree-id9469 . -86) (undo-tree-id9470 . -86) (undo-tree-id9471 . -86) (undo-tree-id9472 . -86) (undo-tree-id9473 . -86) (undo-tree-id9474 . -86) (undo-tree-id9475 . -87) (undo-tree-id9476 . -88) (undo-tree-id9477 . -89) (undo-tree-id9478 . -90) (undo-tree-id9479 . -90) (undo-tree-id9480 . -90) (undo-tree-id9481 . -90) (undo-tree-id9482 . -90) (undo-tree-id9483 . -93) (t 26048 31438 113622 660000)) nil (26048 31518 988305 134000) 0 nil])
([nil nil ((#("{" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . 2027) (undo-tree-id9374 . -1) (undo-tree-id9375 . -1) (undo-tree-id9376 . -1) (undo-tree-id9377 . -1) (undo-tree-id9378 . -1)) nil (26048 31518 987931 991000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2027) (undo-tree-id9373 . -1)) nil (26048 31518 987928 425000) 0 nil])
([nil nil ((#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . 2056) (undo-tree-id9366 . -1) (undo-tree-id9367 . -1) (undo-tree-id9368 . -1) (undo-tree-id9369 . -1) (undo-tree-id9370 . -1) (undo-tree-id9371 . -1) (undo-tree-id9372 . -1)) nil (26048 31518 987926 931000) 0 nil])
([nil nil ((2026 . 2030)) nil (26048 31518 987922 483000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -2027) (undo-tree-id9331 . -1) (undo-tree-id9332 . -1) (undo-tree-id9333 . -1) (undo-tree-id9334 . -1) (undo-tree-id9335 . -1) (undo-tree-id9336 . -1) (undo-tree-id9337 . -1) (undo-tree-id9338 . -1) (undo-tree-id9339 . -1) (undo-tree-id9340 . -1) (undo-tree-id9341 . -1) (undo-tree-id9342 . -1) (undo-tree-id9343 . -1) (undo-tree-id9344 . -1) (undo-tree-id9345 . -1) (undo-tree-id9346 . -1) (undo-tree-id9347 . -1) (undo-tree-id9348 . -1) (#(">" 0 1 (syntax-table (1) fontified t)) . -2028) (undo-tree-id9349 . -1) (undo-tree-id9350 . -1) (undo-tree-id9351 . -1) (undo-tree-id9352 . -1) (undo-tree-id9353 . -1) (undo-tree-id9354 . -1) (undo-tree-id9355 . -1) (undo-tree-id9356 . -1) (undo-tree-id9357 . -1) (undo-tree-id9358 . -1) (undo-tree-id9359 . -1) (#(" " 0 1 (fontified t)) . -2029) (undo-tree-id9360 . -1) (undo-tree-id9361 . -1) (undo-tree-id9362 . -1) (undo-tree-id9363 . -1) (undo-tree-id9364 . -1) (undo-tree-id9365 . -1) 2030) nil (26048 31518 987920 633000) 0 nil])
([nil nil ((2027 . 2033)) nil (26048 31518 987898 621000) 0 nil])
([nil nil ((#("if " 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t)) . -2030) (undo-tree-id9317 . -3) (undo-tree-id9318 . -1) (undo-tree-id9319 . -1) (undo-tree-id9320 . -1) (undo-tree-id9321 . -2) (undo-tree-id9322 . -2) (undo-tree-id9323 . -2) (undo-tree-id9324 . -2) (undo-tree-id9325 . -3) (undo-tree-id9326 . -3) (undo-tree-id9327 . -3) (undo-tree-id9328 . -3) (undo-tree-id9329 . -3) (undo-tree-id9330 . -3) 2033) nil (26048 31518 988624 983000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -2027) (undo-tree-id9579 . -1) (#(">" 0 1 (syntax-table (1) fontified t)) . -2028) (undo-tree-id9580 . -1) (#(" " 0 1 (fontified t)) . -2029) (undo-tree-id9581 . -1) 2030) nil (26048 31599 25828 13000) 0 nil] [nil nil ((#("zbar\" => " 0 5 (face font-lock-string-face fontified t) 5 7 (fontified t) 7 8 (syntax-table (1) fontified t) 8 9 (fontified t)) . -2021) (undo-tree-id9254 . -9) (undo-tree-id9255 . -5) (undo-tree-id9256 . -5) (undo-tree-id9257 . -5) (undo-tree-id9258 . -5) (undo-tree-id9259 . -5) (undo-tree-id9260 . -6) (undo-tree-id9261 . -6) (undo-tree-id9262 . -6) (undo-tree-id9263 . -6) (undo-tree-id9264 . -6) (undo-tree-id9265 . -6) (undo-tree-id9266 . -6) (undo-tree-id9267 . -6) (undo-tree-id9268 . -6) (undo-tree-id9269 . -6) (undo-tree-id9270 . -6) (undo-tree-id9271 . -6) (undo-tree-id9272 . -6) (undo-tree-id9273 . -6) (undo-tree-id9274 . -6) (undo-tree-id9275 . -6) (undo-tree-id9276 . -6) (undo-tree-id9277 . -6) (undo-tree-id9278 . -6) (undo-tree-id9279 . -6) (undo-tree-id9280 . -6) (undo-tree-id9281 . -6) (undo-tree-id9282 . -6) (undo-tree-id9283 . -6) (undo-tree-id9284 . -6) (undo-tree-id9285 . -6) (undo-tree-id9286 . -6) (undo-tree-id9287 . -7) (undo-tree-id9288 . -7) (undo-tree-id9289 . -7) (undo-tree-id9290 . -8) (undo-tree-id9291 . -8) (undo-tree-id9292 . -8) (undo-tree-id9293 . -9) (undo-tree-id9294 . -9) (undo-tree-id9295 . -9) (undo-tree-id9296 . -9) (undo-tree-id9297 . -9) (undo-tree-id9298 . -9) (undo-tree-id9299 . -9) (undo-tree-id9300 . -9) (undo-tree-id9301 . -9) (undo-tree-id9302 . -9) (undo-tree-id9303 . -9) (undo-tree-id9304 . -9) (undo-tree-id9305 . -9) (undo-tree-id9306 . -9) (undo-tree-id9307 . -9) (undo-tree-id9308 . -9) (undo-tree-id9309 . -9) (undo-tree-id9310 . -9) (undo-tree-id9311 . -9) (undo-tree-id9312 . -9) (undo-tree-id9313 . -9) (undo-tree-id9314 . -9) (undo-tree-id9315 . -9) (undo-tree-id9316 . -9) 2030) ((2021 . 2030)) (26048 31518 987882 47000) 0 nil])
([nil nil ((2027 . 2029)) nil (26048 31599 25824 979000) 0 nil])
nil
([nil nil ((2030 . 2042) (#("                " 0 16 (fontified nil)) . 2029) (2029 . 2045) (#("            " 0 12 (fontified nil)) . 2029) (undo-tree-id9578 . -12) (2028 . 2042)) nil (26048 31599 25823 778000) 0 nil])
([nil nil ((2029 . 2045)) nil (26048 31599 25821 884000) 0 nil])
([nil nil ((2045 . 2047)) nil (26048 31599 25821 319000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -2045) (undo-tree-id9576 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -2046) (undo-tree-id9577 . -1) 2047) nil (26048 31599 25820 418000) 0 nil])
([nil nil ((2045 . 2050)) nil (26048 31599 25818 122000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -2047) (undo-tree-id9573 . -1) (#("e" 0 1 (fontified t)) . -2048) (undo-tree-id9574 . -1) (#("t" 0 1 (fontified t)) . -2049) (undo-tree-id9575 . -1) 2050) nil (26048 31599 25817 19000) 0 nil])
([nil nil ((2047 . 2056)) nil (26048 31599 25813 528000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2057 2061 nil nil nil t #s(yas--exit 2062 nil))) #s(yas--exit 2062 nil) 80 nil #s(yas--field 1 2057 2061 nil nil nil t #s(yas--exit 2062 nil)) nil nil)) (2052 . 2058) (#("Some($1)$0" 0 10 (fontified nil)) . 2052) (2052 . 2062) (#("Some" 0 4 (fontified nil)) . 2052) (2052 . 2056) (#("Some(…)" 0 7 (fontified nil)) . -2052) (2052 . 2059) (#("Some" 0 4 (face font-lock-type-face fontified t)) . -2052) (undo-tree-id9572 . -4) 2056) nil (26048 31599 25812 222000) 0 nil])
([nil nil ((2057 . 2062)) nil (26048 31599 25809 704000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2061) (undo-tree-id9570 . -1) (undo-tree-id9571 . -1) 2062) nil (26048 31599 25808 784000) 0 nil])
([nil nil ((apply yas--snippet-revive 2052 2062 #s(yas--snippet nil (#s(yas--field 1 2057 2061 nil nil nil t #s(yas--exit 2062 nil))) #s(yas--exit 2062 nil) 80 nil #s(yas--field 1 2057 2061 nil nil nil t #s(yas--exit 2062 nil)) nil nil))) nil (26048 31599 25806 755000) 0 nil])
([nil nil ((2062 . 2065)) nil (26048 31599 25806 79000) 0 nil])
([nil nil ((2065 . 2066)) nil (26048 31599 25805 463000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -2065) (undo-tree-id9569 . -1) 2066) nil (26048 31599 25804 523000) 0 nil])
([nil nil ((2065 . 2066)) nil (26048 31599 25803 79000) 0 nil])
([nil nil ((2065 . 2077) (#("s" 0 1 (fontified nil)) . 2065) (2065 . 2066) (#("sink_display" 0 12 (fontified nil)) . -2065) (2065 . 2077) (#("s" 0 1 (fontified t)) . -2065) (undo-tree-id9568 . -1) 2066) nil (26048 31599 25801 934000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -2076) (undo-tree-id9567 . -1) 2077) nil (26048 31599 25799 670000) 0 nil])
([nil nil ((#("displa" 0 6 (fontified t)) . -2070) (undo-tree-id9566 . -6) 2076) nil (26048 31599 25798 115000) 0 nil])
([nil nil ((#("sink_" 0 5 (fontified t)) . -2065) (undo-tree-id9565 . -5) 2070) nil (26048 31599 25796 590000) 0 nil])
([nil nil ((2065 . 2073)) nil (26048 31599 25795 171000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -2072) (undo-tree-id9564 . -1) 2073) nil (26048 31599 25794 323000) 0 nil])
([nil nil ((2072 . 2075)) nil (26048 31599 25792 754000) 0 nil])
([nil nil ((#("struct" 0 6 (face font-lock-keyword-face fontified t)) . -2069) (undo-tree-id9563 . -6) 2075) nil (26048 31599 25792 14000) 0 nil])
([nil nil ((#("src." 0 4 (fontified t)) . -2065) (undo-tree-id9562 . -4) 2069) nil (26048 31599 25790 388000) 0 nil])
([nil nil ((2065 . 2069)) nil (26048 31599 25788 924000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -2065) (undo-tree-id9557 . -1) (undo-tree-id9558 . -1) (#("a" 0 1 (fontified t)) . -2066) (undo-tree-id9559 . -1) (#("m" 0 1 (fontified t)) . -2067) (undo-tree-id9560 . -1) (#("e" 0 1 (fontified t)) . -2068) (undo-tree-id9561 . -1) 2069) nil (26048 31599 25787 764000) 0 nil])
([nil nil ((2065 . 2072)) nil (26048 31599 25783 217000) 0 nil])
([nil nil ((apply yas--snippet-revive 2069 2080 #s(yas--snippet nil nil #s(yas--exit 2080 nil) 81 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2080 nil) 81 nil nil nil nil)) (2069 . 2080) (#("structure()$0" 0 13 (fontified nil)) . 2069) (2069 . 2082) (#("str" 0 3 (fontified nil)) . 2069) (2069 . 2072) (#("structure() (alias get_structure, gst_message_get_structure)" 0 60 (fontified nil)) . -2069) (2069 . 2129) (#("str" 0 3 (face font-lock-type-face fontified t)) . -2069) (undo-tree-id9549 . -3) (undo-tree-id9550 . -1) (undo-tree-id9551 . -1) (undo-tree-id9552 . -1) (undo-tree-id9553 . -2) (undo-tree-id9554 . -2) (undo-tree-id9555 . -3) (undo-tree-id9556 . -3) 2072) nil (26048 31599 25781 613000) 0 nil])
([nil nil ((2080 . 2081)) nil (26048 31599 25774 86000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2080) (undo-tree-id9543 . -1) (undo-tree-id9544 . -1) (undo-tree-id9545 . -1) (undo-tree-id9546 . -1) (undo-tree-id9547 . -1) (undo-tree-id9548 . -1) 2081) nil (26048 31599 25773 139000) 0 nil])
([nil nil ((2080 . 2083)) nil (26048 31599 25768 234000) 0 nil])
([nil nil ((2084 . 2100) (#("                    " 0 20 (fontified nil)) . 2083) (undo-tree-id9539 . -16) (undo-tree-id9540 . -16) (undo-tree-id9541 . -16) (undo-tree-id9542 . -16) (2099 . 2103) (2082 . 2100)) nil (26048 31599 25767 343000) 0 nil])
([nil nil ((2083 . 2103)) nil (26048 31599 25763 660000) 0 nil])
([nil nil ((2103 . 2106)) nil (26048 31599 25763 59000) 0 nil])
([nil nil ((2106 . 2107)) nil (26048 31599 25762 466000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -2106) (undo-tree-id9535 . -1) (undo-tree-id9536 . -1) (undo-tree-id9537 . -1) (undo-tree-id9538 . -1) 2107) nil (26048 31599 25761 310000) 0 nil])
([nil nil ((2106 . 2116)) nil (26048 31599 25757 652000) 0 nil])
([nil nil ((2115 . 2118)) nil (26048 31599 25757 56000) 0 nil])
([nil nil ((#("n" 0 1 (face font-lock-string-face fontified t)) . -2116) (undo-tree-id9525 . -1) (undo-tree-id9526 . -1) (undo-tree-id9527 . -1) (undo-tree-id9528 . -1) (undo-tree-id9529 . -1) (undo-tree-id9530 . -1) (undo-tree-id9531 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -2117) (undo-tree-id9532 . -1) (undo-tree-id9533 . -1) (undo-tree-id9534 . -1) 2118) nil (26048 31599 25755 893000) 0 nil])
([nil nil ((2116 . 2122)) nil (26048 31599 25747 618000) 0 nil])
([nil nil ((2123 . 2125)) nil (26048 31599 25746 875000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2124) (undo-tree-id9522 . -1) (undo-tree-id9523 . -1) (undo-tree-id9524 . -1) 2125) nil (26048 31599 25745 929000) 0 nil])
([nil nil ((2124 . 2126)) nil (26048 31599 25743 95000) 0 nil])
([nil nil ((2127 . 2147) (#("                        " 0 24 (fontified nil)) . 2126) (2126 . 2150) (#("                    " 0 20 (fontified nil)) . 2126) (undo-tree-id9518 . -20) (undo-tree-id9519 . -20) (undo-tree-id9520 . -20) (undo-tree-id9521 . -20) (2125 . 2147)) nil (26048 31599 25742 70000) 0 nil])
([nil nil ((2126 . 2150)) nil (26048 31599 25737 944000) 0 nil])
([nil nil ((2150 . 2152)) nil (26048 31599 25737 351000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-7-face) fontified t)) . -2150) (undo-tree-id9508 . -1) (undo-tree-id9509 . -1) (undo-tree-id9510 . -1) (undo-tree-id9511 . -1) (undo-tree-id9512 . -1) (undo-tree-id9513 . -1) (undo-tree-id9514 . -1) (#("p" 0 1 (fontified t)) . -2151) (undo-tree-id9515 . -1) (undo-tree-id9516 . -1) (undo-tree-id9517 . -1) 2152) nil (26048 31599 25736 182000) 0 nil])
([nil nil ((2150 . 2152)) nil (26048 31599 25727 76000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-7-face) fontified t)) . -2150) (undo-tree-id9497 . -1) (undo-tree-id9498 . -1) (undo-tree-id9499 . -1) (undo-tree-id9500 . -1) (undo-tree-id9501 . -1) (undo-tree-id9502 . -1) (undo-tree-id9503 . -1) (undo-tree-id9504 . -1) (#("r" 0 1 (fontified t)) . -2151) (undo-tree-id9505 . -1) (undo-tree-id9506 . -1) (undo-tree-id9507 . -1) 2152) nil (26048 31599 25725 343000) 0 nil])
([nil nil ((2150 . 2155)) nil (26048 31599 25543 863000) 0 nil])
([nil nil ((apply yas--snippet-revive 2150 2160 #s(yas--snippet nil nil #s(yas--exit 2159 nil) 82 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2159 nil) 82 nil nil nil nil)) (2150 . 2160) (#("println!($0)" 0 12 (fontified nil)) . 2150) (2150 . 2162) (#("print" 0 5 (fontified nil)) . 2150) (2150 . 2155) (#("println!(…)" 0 11 (fontified nil)) . -2150) (2150 . 2161) (#("print" 0 5 (fontified t)) . -2150) (undo-tree-id9484 . -5) (undo-tree-id9485 . -1) (undo-tree-id9486 . -1) (undo-tree-id9487 . -2) (undo-tree-id9488 . -2) (undo-tree-id9489 . -3) (undo-tree-id9490 . -3) (undo-tree-id9491 . -4) (undo-tree-id9492 . -4) (undo-tree-id9493 . -5) (undo-tree-id9494 . -5) (undo-tree-id9495 . -5) (undo-tree-id9496 . -5) 2155) nil (26048 31599 25540 982000) 0 nil])
([nil nil ((2159 . 2161)) nil (26048 31599 25523 498000) 0 nil])
([nil nil ((2160 . 2162)) nil (26048 31599 25522 865000) 0 nil])
([nil nil ((2161 . 2163)) nil (26048 31599 25522 115000) 0 nil])
([nil nil ((2165 . 2170)) nil (26048 31599 25520 508000) 0 nil])
([nil nil ((2171 . 2172)) nil (26048 31599 25515 860000) 0 nil])
([nil nil ((2110 . 2112) (t 26048 31599 46965 815000)) nil (26048 31623 674378 42000) 0 nil])
([nil nil ((apply yas--snippet-revive 2111 2117 #s(yas--snippet nil nil #s(yas--exit 2117 nil) 83 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2117 nil) 83 nil nil nil nil)) (2111 . 2117) (#("name()$0" 0 8 (fontified nil)) . 2111) (2111 . 2119) (#("n" 0 1 (fontified nil)) . 2111) (2111 . 2112) (#("name() (alias get_name, gst_structure_get_name)" 0 47 (fontified nil)) . -2111) (2111 . 2158) (#("n" 0 1 (fontified t)) . -2111) (undo-tree-id9624 . -1) (undo-tree-id9625 . -1) (undo-tree-id9626 . -1) (undo-tree-id9627 . -1) (undo-tree-id9628 . -1) (undo-tree-id9629 . -1) (undo-tree-id9630 . -1) 2112) nil (26048 31623 674376 316000) 0 nil])
([nil nil ((#("name" 0 4 (fontified t)) . -2057) (undo-tree-id9622 . -4) (undo-tree-id9623 . -4) 2061) nil (26048 31623 674369 218000) 0 nil])
([nil nil ((2057 . 2066)) nil (26048 31623 674367 88000) 0 nil])
([nil nil ((#("name" 0 4 (fontified t)) . -2111) (undo-tree-id9589 . -4) (undo-tree-id9590 . -4) (undo-tree-id9591 . -4) (undo-tree-id9592 . -4) (undo-tree-id9593 . -4) (undo-tree-id9594 . -4) (undo-tree-id9595 . -4) (undo-tree-id9596 . -4) (undo-tree-id9597 . -4) (undo-tree-id9598 . -4) (undo-tree-id9599 . -4) (undo-tree-id9600 . -4) (undo-tree-id9601 . -4) (undo-tree-id9602 . -4) (undo-tree-id9603 . -4) (undo-tree-id9604 . -4) (undo-tree-id9605 . -4) (undo-tree-id9606 . -4) (undo-tree-id9607 . -4) (undo-tree-id9608 . -4) (undo-tree-id9609 . -4) (undo-tree-id9610 . -4) (undo-tree-id9611 . -4) (undo-tree-id9612 . -4) (undo-tree-id9613 . -4) (undo-tree-id9614 . -4) (undo-tree-id9615 . -4) (undo-tree-id9616 . -4) (undo-tree-id9617 . -4) (undo-tree-id9618 . -4) (undo-tree-id9619 . -4) (undo-tree-id9620 . -4) (undo-tree-id9621 . -4) 2115) nil (26048 31623 674364 484000) 0 nil])
([nil nil ((2111 . 2112)) nil (26048 31623 674339 431000) 0 nil])
([nil nil ((2111 . 2120) (#("s" 0 1 (fontified nil)) . 2111) (2111 . 2112) (#("structure" 0 9 (fontified nil)) . -2111) (2111 . 2120) (#("s" 0 1 (fontified t)) . -2111) (undo-tree-id9582 . -1) (undo-tree-id9583 . -1) (undo-tree-id9584 . -1) (undo-tree-id9585 . -1) (undo-tree-id9586 . -1) (undo-tree-id9587 . -1) (undo-tree-id9588 . -1) 2112) nil (26048 31623 674335 152000) 0 nil])
([nil nil ((#("msg" 0 3 (fontified t)) . -2184) (undo-tree-id9645 . -3) (undo-tree-id9646 . -3) (undo-tree-id9647 . -3) (undo-tree-id9648 . -3) (undo-tree-id9649 . -3) (undo-tree-id9650 . -3) (undo-tree-id9651 . -3) (undo-tree-id9652 . -3) (undo-tree-id9653 . -3) 2187 (t 26048 31623 696967 329000)) nil (26048 31712 482367 419000) 0 nil])
([nil nil ((2184 . 2187)) nil (26048 31712 482359 843000) 0 nil])
([nil nil ((2184 . 2193) (#("str" 0 3 (fontified nil)) . 2184) (2184 . 2187) (#("structure" 0 9 (fontified nil)) . -2184) (2184 . 2193) (#("str" 0 3 (face font-lock-type-face fontified t)) . -2184) (undo-tree-id9631 . -3) (undo-tree-id9632 . -3) (undo-tree-id9633 . -1) (undo-tree-id9634 . -1) (undo-tree-id9635 . -1) (undo-tree-id9636 . -1) (undo-tree-id9637 . -1) (undo-tree-id9638 . -1) (undo-tree-id9639 . -2) (undo-tree-id9640 . -2) (undo-tree-id9641 . -3) (undo-tree-id9642 . -3) (undo-tree-id9643 . -3) (undo-tree-id9644 . -3) 2187) nil (26048 31712 482355 297000) 0 nil])
([nil nil ((2195 . 2220) (t 26048 31712 533639 394000)) nil (26048 31772 242031 609000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2247 . 2248) (nil fontified nil 2247 . 2248) (nil fontified nil 2246 . 2247) (nil fontified nil 2237 . 2246) (nil fontified nil 2235 . 2237) (nil fontified nil 2234 . 2235) (nil fontified nil 2230 . 2234) (nil fontified nil 2229 . 2230) (nil fontified nil 2228 . 2229) (nil fontified nil 2220 . 2228) (2220 . 2248)) nil (26048 31772 242030 409000) 0 nil])
([nil nil ((2246 . 2250)) nil (26048 31772 242028 445000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2253 2259 nil nil nil t #s(yas--exit 2260 nil))) #s(yas--exit 2260 nil) 84 nil #s(yas--field 1 2253 2259 nil nil nil t #s(yas--exit 2260 nil)) nil nil)) (2247 . 2258) (#("value(${1:name})$0" 0 18 (fontified nil)) . 2247) (2247 . 2265) (#("get" 0 3 (fontified nil)) . 2247) (2247 . 2250) (#("value(…) (alias get_value, gst_structure_get_value)" 0 51 (fontified nil)) . -2247) (2247 . 2298) (#("get" 0 3 (fontified t)) . -2247) (undo-tree-id9655 . -3) (undo-tree-id9656 . -1) (undo-tree-id9657 . -1) (undo-tree-id9658 . -1) (undo-tree-id9659 . -1) (undo-tree-id9660 . -2) (undo-tree-id9661 . -2) (undo-tree-id9662 . -3) (undo-tree-id9663 . -3) (undo-tree-id9664 . -3) (undo-tree-id9665 . -3) 2250) nil (26048 31772 242026 553000) 0 nil])
([nil nil ((2254 . 2255) (#("name" 0 4 (fontified nil)) . 2254) (undo-tree-id9654 . -4) (2253 . 2254)) nil (26048 31772 242015 260000) 0 nil])
([nil nil ((2254 . 2258)) nil (26048 31772 242004 620000) 0 nil])
([nil nil ((apply yas--snippet-revive 2247 2260 #s(yas--snippet nil (#s(yas--field 1 2253 2259 nil nil nil t #s(yas--exit 2260 nil))) #s(yas--exit 2260 nil) 84 nil #s(yas--field 1 2253 2259 nil nil nil t #s(yas--exit 2260 nil)) nil nil))) nil (26048 31777 181711 349000) 0 nil])
([nil nil ((2230 . 2236) (t 26048 31772 263643 58000)) nil (26048 31777 181706 762000) 0 nil])
([nil nil ((2266 . 2267) (t 26048 31777 203643 361000)) nil (26048 31812 39227 840000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2266) (undo-tree-id9671 . -1) (undo-tree-id9672 . -1) (undo-tree-id9673 . -1) (undo-tree-id9674 . -1) (undo-tree-id9675 . -1) 2267) nil (26048 31812 39226 479000) 0 nil])
([nil nil ((2266 . 2268)) nil (26048 31812 39221 207000) 0 nil])
([nil nil ((apply yas--snippet-revive 2267 2275 #s(yas--snippet nil nil #s(yas--exit 2275 nil) 85 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2275 nil) 85 nil nil nil nil)) (2267 . 2275) (#("unwrap()$0" 0 10 (fontified nil)) . 2267) (2267 . 2277) (#("u" 0 1 (fontified nil)) . 2267) (2267 . 2268) (#("unwrap()" 0 8 (fontified nil)) . -2267) (2267 . 2275) (#("u" 0 1 (fontified t)) . -2267) (undo-tree-id9666 . -1) (undo-tree-id9667 . -1) (undo-tree-id9668 . -1) (undo-tree-id9669 . -1) (undo-tree-id9670 . -1) 2268) nil (26048 31812 39216 750000) 0 nil])
([nil nil ((2277 . 2302) (t 26048 31812 60312 170000)) nil (26048 31826 909945 651000) 0 nil])
([nil nil ((nil fontified nil 2358 . 2359) (nil fontified nil 2357 . 2358) (nil fontified nil 2356 . 2357) (nil fontified nil 2355 . 2356) (nil fontified nil 2349 . 2355) (nil fontified nil 2348 . 2349) (nil fontified nil 2347 . 2348) (nil fontified nil 2341 . 2347) (nil fontified nil 2340 . 2341) (nil fontified nil 2335 . 2340) (nil fontified nil 2325 . 2335) (nil fontified nil 2323 . 2325) (nil fontified nil 2322 . 2323) (nil fontified nil 2318 . 2322) (nil fontified nil 2311 . 2318) (nil fontified nil 2310 . 2311) (nil fontified nil 2302 . 2310) (2302 . 2359)) nil (26048 31826 909944 123000) 0 nil])
([nil nil ((#("type" 0 4 (face font-lock-string-face fontified t)) . -2342) (undo-tree-id9676 . -4) (undo-tree-id9677 . -4) 2346) nil (26048 31826 909940 51000) 0 nil])
([nil nil ((2342 . 2348)) nil (26048 31826 909927 300000) 0 nil])
([nil nil ((2361 . 2386) (t 26048 31826 930313 73000)) nil (26048 31847 824553 746000) 0 nil])
([nil nil ((nil fontified nil 2444 . 2445) (nil fontified nil 2443 . 2444) (nil fontified nil 2442 . 2443) (nil fontified nil 2441 . 2442) (nil fontified nil 2435 . 2441) (nil fontified nil 2434 . 2435) (nil fontified nil 2433 . 2434) (nil fontified nil 2425 . 2433) (nil fontified nil 2424 . 2425) (nil fontified nil 2419 . 2424) (nil fontified nil 2409 . 2419) (nil fontified nil 2407 . 2409) (nil fontified nil 2406 . 2407) (nil fontified nil 2402 . 2406) (nil fontified nil 2395 . 2402) (nil fontified nil 2394 . 2395) (nil fontified nil 2386 . 2394) (2386 . 2445)) nil (26048 31847 824552 116000) 0 nil])
([nil nil ((#("symbol" 0 6 (face font-lock-string-face fontified t)) . -2426) (undo-tree-id9678 . -6) (undo-tree-id9679 . -6) 2432) nil (26048 31847 824547 846000) 0 nil])
([nil nil ((2426 . 2433)) nil (26048 31847 824537 30000) 0 nil])
([nil nil ((#("type" 0 4 (face font-lock-string-face fontified t)) . -2312) (undo-tree-id9685 . -4) (undo-tree-id9686 . -4) (undo-tree-id9687 . -1) (undo-tree-id9688 . -1) (undo-tree-id9689 . -1) (undo-tree-id9690 . -1) (undo-tree-id9691 . -1) (undo-tree-id9692 . -1) (undo-tree-id9693 . -1) (undo-tree-id9694 . -4) 2316 (t 26048 31847 846981 3000)) nil (26048 31856 298415 564000) 0 nil])
([nil nil ((2312 . 2318)) nil (26048 31856 298407 304000) 0 nil])
([nil nil ((#("type" 0 4 (face font-lock-string-face fontified t)) . -2398) (undo-tree-id9683 . -4) (undo-tree-id9684 . -4) 2402) nil (26048 31856 298406 388000) 0 nil])
([nil nil ((2398 . 2402)) nil (26048 31856 298403 958000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-string-face fontified t)) . -2401) (undo-tree-id9680 . -1) (undo-tree-id9681 . -1) (undo-tree-id9682 . -1) 2402) nil (26048 31856 298401 724000) 0 nil])
([nil nil ((2401 . 2405)) nil (26048 31856 298390 503000) 0 nil])
([nil nil ((2167 . 2168) (t 26048 31856 310314 844000)) nil (26048 31860 879534 373000) 0 nil])
([nil nil ((#("println!(\"{:?}\", structure);" 0 8 (face rust-builtin-formatting-macro fontified t) 8 9 (face (rainbow-delimiters-depth-7-face) fontified t) 9 10 (face font-lock-string-face fontified t) 10 14 (face rust-string-interpolation fontified t) 14 15 (face font-lock-string-face fontified t) 15 17 (fontified t) 17 26 (fontified t) 26 27 (face (rainbow-delimiters-depth-7-face) fontified t) 27 28 (fontified t)) . 2168) (undo-tree-id9696 . -28)) nil (26048 31860 879532 621000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2168) (undo-tree-id9695 . -1)) nil (26048 31860 879527 421000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2195 . 2196) (nil fontified nil 2195 . 2196) (nil fontified nil 2194 . 2195) (nil fontified nil 2193 . 2194) (nil fontified nil 2184 . 2193) (nil fontified nil 2182 . 2184) (nil fontified nil 2181 . 2182) (nil fontified nil 2177 . 2181) (nil fontified nil 2176 . 2177) (nil fontified nil 2175 . 2176) (nil fontified nil 2167 . 2175) (2167 . 2196) (t 26048 31860 933648 452000)) nil (26048 31865 236688 273000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . -2195) (undo-tree-id9699 . -1) (undo-tree-id9700 . -1) (undo-tree-id9701 . -1) (undo-tree-id9702 . -1) (undo-tree-id9703 . -1) (undo-tree-id9704 . -1) (undo-tree-id9705 . -1) (undo-tree-id9706 . -1) 2196) nil (26048 31867 468218 880000) 0 nil] [nil nil ((nil rear-nonsticky nil 2224 . 2225) (nil fontified nil 2224 . 2225) (nil fontified nil 2223 . 2224) (nil fontified nil 2222 . 2223) (nil fontified nil 2213 . 2222) (nil fontified nil 2211 . 2213) (nil fontified nil 2210 . 2211) (nil fontified nil 2206 . 2210) (nil fontified nil 2205 . 2206) (nil fontified nil 2204 . 2205) (nil fontified nil 2196 . 2204) (2196 . 2225)) ((#("println!(\"{:?}\", structure);
" 0 8 (face rust-builtin-formatting-macro fontified nil) 8 9 (face (rainbow-delimiters-depth-7-face) fontified nil) 9 10 (face font-lock-string-face fontified nil) 10 14 (face rust-string-interpolation fontified nil) 14 15 (face font-lock-string-face fontified nil) 15 17 (fontified nil) 17 26 (fontified nil) 26 27 (face (rainbow-delimiters-depth-7-face) fontified nil) 27 28 (fontified nil) 28 29 (rear-nonsticky nil fontified nil)) . 2196) (undo-tree-id9697 . -29) (undo-tree-id9698 . -29) (nil rear-nonsticky t 2224 . 2225)) (26048 31865 236355 262000) 0 nil])
([nil nil ((2167 . 2169)) nil (26048 31867 468203 947000) 0 nil])
nil
([nil nil ((2363 . 2370) (t 26048 31867 490315 521000)) nil (26048 31933 229871 559000) 0 nil])
([nil nil ((#("string" 0 6 (fontified t)) . -2364) (undo-tree-id9765 . -6) (undo-tree-id9766 . -1) (undo-tree-id9767 . -1) (undo-tree-id9768 . -2) (undo-tree-id9769 . -2) (undo-tree-id9770 . -3) (undo-tree-id9771 . -3) (undo-tree-id9772 . -3) (undo-tree-id9773 . -3) (undo-tree-id9774 . -4) (undo-tree-id9775 . -4) (undo-tree-id9776 . -5) (undo-tree-id9777 . -5) (undo-tree-id9778 . -6) (undo-tree-id9779 . -6) (undo-tree-id9780 . -6) (undo-tree-id9781 . -6) (undo-tree-id9782 . -6) (undo-tree-id9783 . -6) 2370) nil (26048 31933 229869 988000) 0 nil])
([nil nil ((2364 . 2366)) nil (26048 31934 348476 474000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2363) (undo-tree-id9901 . -1) (undo-tree-id9902 . -1) (undo-tree-id9903 . -1) (undo-tree-id9904 . -1) (undo-tree-id9905 . -1) (undo-tree-id9906 . -1) (undo-tree-id9907 . -1) (undo-tree-id9908 . -1) (undo-tree-id9909 . -1) (undo-tree-id9910 . -1) (undo-tree-id9911 . -1) (undo-tree-id9912 . -1) (undo-tree-id9913 . -1) (undo-tree-id9914 . -1) (undo-tree-id9915 . -1) (undo-tree-id9916 . -1) (undo-tree-id9917 . -1) (undo-tree-id9918 . -1) (undo-tree-id9919 . -1) (undo-tree-id9920 . -1) (undo-tree-id9921 . -1) (undo-tree-id9922 . -1) (undo-tree-id9923 . -1) (undo-tree-id9924 . -1) (undo-tree-id9925 . -1) (undo-tree-id9926 . -1) (undo-tree-id9927 . -1) (undo-tree-id9928 . -1) (undo-tree-id9929 . -1) (undo-tree-id9930 . -1) (undo-tree-id9931 . -1) (undo-tree-id9932 . -1) (undo-tree-id9933 . -1) (undo-tree-id9934 . -1) (undo-tree-id9935 . -1) (undo-tree-id9936 . -1) (undo-tree-id9937 . -1) (undo-tree-id9938 . -1) (undo-tree-id9939 . -1) (undo-tree-id9940 . -1) (undo-tree-id9941 . -1) (undo-tree-id9942 . -1) (undo-tree-id9943 . -1) (undo-tree-id9944 . -1) (undo-tree-id9945 . -1) (undo-tree-id9946 . -1) (undo-tree-id9947 . -1) (undo-tree-id9948 . -1) (undo-tree-id9949 . -1) (undo-tree-id9950 . -1) (undo-tree-id9951 . -1) (undo-tree-id9952 . -1) (undo-tree-id9953 . -1) (undo-tree-id9954 . -1) (undo-tree-id9955 . -1) (undo-tree-id9956 . -1) (undo-tree-id9957 . -1) (undo-tree-id9958 . -1) (undo-tree-id9959 . -1) (undo-tree-id9960 . -1) (undo-tree-id9961 . -1) (undo-tree-id9962 . -1) (undo-tree-id9963 . -1) (undo-tree-id9964 . -1) (undo-tree-id9965 . -1) (undo-tree-id9966 . -1) (undo-tree-id9967 . -1) (undo-tree-id9968 . -1) (undo-tree-id9969 . -1) (undo-tree-id9970 . -1) (undo-tree-id9971 . -1) (undo-tree-id9972 . -1) (undo-tree-id9973 . -1) (undo-tree-id9974 . -1) (undo-tree-id9975 . -1) (undo-tree-id9976 . -1) (undo-tree-id9977 . -1) (#("a" 0 1 (fontified t)) . -2364) (undo-tree-id9978 . -1) (undo-tree-id9979 . -1) (undo-tree-id9980 . -1) (undo-tree-id9981 . -1) (undo-tree-id9982 . -1) (undo-tree-id9983 . -1) (undo-tree-id9984 . -1) (undo-tree-id9985 . -1) (undo-tree-id9986 . -1) (undo-tree-id9987 . -1) (undo-tree-id9988 . -1) (undo-tree-id9989 . -1) (undo-tree-id9990 . -1) (undo-tree-id9991 . -1) (undo-tree-id9992 . -1) (undo-tree-id9993 . -1) (undo-tree-id9994 . -1) (undo-tree-id9995 . -1) (undo-tree-id9996 . -1) (#("s" 0 1 (face font-lock-keyword-face fontified t)) . -2365) (undo-tree-id9997 . -1) (undo-tree-id9998 . -1) (undo-tree-id9999 . -1) (undo-tree-id10000 . -1) (undo-tree-id10001 . -1) (undo-tree-id10002 . -1) (undo-tree-id10003 . -1) (undo-tree-id10004 . -1) (undo-tree-id10005 . -1) (undo-tree-id10006 . -1) (undo-tree-id10007 . -1) (undo-tree-id10008 . -1) (undo-tree-id10009 . -1) (undo-tree-id10010 . -1) (undo-tree-id10011 . -1) 2366) nil (26048 31945 68308 919000) 0 nil] [nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2384 2389 nil nil nil t #s(yas--exit 2390 nil))) #s(yas--exit 2390 nil) 86 nil #s(yas--field 1 2384 2389 nil nil nil t #s(yas--exit 2390 nil)) nil nil)) (2364 . 2390) (#("transform_with_type(${1:type_})$0" 0 33 (fontified nil)) . 2364) (2364 . 2397) (#("as" 0 2 (fontified nil)) . 2364) (2364 . 2366) (#("transform_with_type(…) (alias g_value_transform)" 0 48 (fontified nil)) . -2364) (2364 . 2412) (#("as" 0 2 (face font-lock-keyword-face fontified t)) . -2364) (undo-tree-id9756 . -2) (undo-tree-id9757 . -1) (undo-tree-id9758 . -1) (undo-tree-id9759 . -2) (undo-tree-id9760 . -2) (undo-tree-id9761 . -2) (undo-tree-id9762 . -2) (undo-tree-id9763 . -2) (undo-tree-id9764 . -2) 2366) ((2364 . 2366) (#("transform_with_type(…) (alias g_value_transform)" 0 48 (fontified nil)) . 2364) (2364 . 2412) (#("as" 0 2 (fontified nil)) . 2364) (2364 . 2366) (#("transform_with_type(${1:type_})$0" 0 33 (fontified nil)) . 2364) (2364 . 2397) (#("transform_with_type(type_)" 0 19 (fontified t) 19 20 (face (rainbow-delimiters-depth-8-face) fontified t) 20 25 (fontified t) 25 26 (face (rainbow-delimiters-depth-8-face) fontified t)) . 2364) (undo-tree-id9848 . -20) (undo-tree-id9849 . -20) (undo-tree-id9850 . -20) (undo-tree-id9851 . -20) (undo-tree-id9852 . -20) (undo-tree-id9853 . -20) (undo-tree-id9854 . -20) (undo-tree-id9855 . -20) (undo-tree-id9856 . -20) (undo-tree-id9857 . -20) (undo-tree-id9858 . -20) (undo-tree-id9859 . -20) (undo-tree-id9860 . -20) (undo-tree-id9861 . -20) (undo-tree-id9862 . -20) (undo-tree-id9863 . -20) (undo-tree-id9864 . -20) (undo-tree-id9865 . -20) (undo-tree-id9866 . -20) (undo-tree-id9867 . -20) (undo-tree-id9868 . -20) (undo-tree-id9869 . -20) (undo-tree-id9870 . -20) (undo-tree-id9871 . -20) (undo-tree-id9872 . -20) (undo-tree-id9873 . -20) (undo-tree-id9874 . -20) (undo-tree-id9875 . -20) (undo-tree-id9876 . -20) (undo-tree-id9877 . -20) (undo-tree-id9878 . -20) (undo-tree-id9879 . -20) (undo-tree-id9880 . -20) (undo-tree-id9881 . -20) (undo-tree-id9882 . 6) (undo-tree-id9883 . -20) (undo-tree-id9884 . -20) (undo-tree-id9885 . -20) (undo-tree-id9886 . -20) (apply yas--snippet-revive 2364 2390 #s(yas--snippet nil (#s(yas--field 1 2384 2389 nil nil nil t #s(yas--exit 2390 nil))) #s(yas--exit 2390 nil) 86 nil #s(yas--field 1 2384 2389 nil nil nil t #s(yas--exit 2390 nil)) nil nil))) (26048 31934 52183 131000) 0 nil])
([nil nil ((2363 . 2364)) nil (26048 31945 68236 529000) 0 nil])
([nil nil ((2385 . 2386) (#("type_" 0 5 (fontified nil)) . 2385) (undo-tree-id9755 . -5) (2384 . 2385)) ((#("G" 0 1 (face font-lock-type-face fontified nil)) . 2384) (undo-tree-id9808 . -1) (undo-tree-id9809 . -1) (undo-tree-id9810 . -1) (undo-tree-id9811 . -1) (undo-tree-id9812 . -1) (undo-tree-id9813 . -1) (undo-tree-id9814 . -1) (undo-tree-id9815 . -1) (undo-tree-id9816 . -1) (undo-tree-id9817 . -1) (undo-tree-id9818 . -1) (undo-tree-id9819 . -1) (undo-tree-id9820 . -1) (undo-tree-id9821 . -1) (undo-tree-id9822 . -1) (undo-tree-id9823 . -1) (undo-tree-id9824 . -1) (undo-tree-id9825 . -1) (undo-tree-id9826 . -1) (undo-tree-id9827 . -1) (undo-tree-id9828 . -1) (undo-tree-id9829 . -1) (undo-tree-id9830 . -1) (undo-tree-id9831 . -1) (undo-tree-id9832 . -1) (undo-tree-id9833 . -1) (undo-tree-id9834 . -1) (undo-tree-id9835 . -1) (undo-tree-id9836 . -1) (undo-tree-id9837 . -1) (undo-tree-id9838 . -1) (2385 . 2390) (#("S" 0 1 (face font-lock-type-face fontified t)) . 2385) (undo-tree-id9839 . -1) (undo-tree-id9840 . -1) (undo-tree-id9841 . -1) (undo-tree-id9842 . -1) (undo-tree-id9843 . -1) (undo-tree-id9844 . -1) (undo-tree-id9845 . -1) (undo-tree-id9846 . -1) (undo-tree-id9847 . -1)) (26048 31933 742865 874000) 0 nil])
([nil current ((#(":" 0 1 (fontified t)) . -2363) (undo-tree-id9895 . -1) (undo-tree-id9896 . -1) (undo-tree-id9897 . -1) (undo-tree-id9898 . -1) (undo-tree-id9899 . -1) (undo-tree-id9900 . -1) 2364) nil (26048 31946 99857 25000) 0 nil])
([nil nil ((#("S" 0 1 (face font-lock-type-face fontified t)) . -2385) (undo-tree-id9748 . -1) (undo-tree-id9749 . -1) (undo-tree-id9750 . -1) (undo-tree-id9751 . -1) (undo-tree-id9752 . -1) (undo-tree-id9753 . -1) (undo-tree-id9754 . -1) 2386) ((2385 . 2386)) (26048 31933 461011 323000) 0 nil])
([nil nil ((2363 . 2366)) ((#(".tr" 0 1 (fontified t) 1 3 (fontified t)) . 2363) (undo-tree-id10027 . -3) (undo-tree-id10028 . -3) (undo-tree-id10029 . -2) (undo-tree-id10030 . -2) (undo-tree-id10031 . -3) (undo-tree-id10032 . -3) (undo-tree-id10033 . -3) (undo-tree-id10034 . -3) (undo-tree-id10035 . -1) (undo-tree-id10036 . -1) (undo-tree-id10037 . -1) (undo-tree-id10038 . -1) (undo-tree-id10039 . -1) (undo-tree-id10040 . -1) (undo-tree-id10041 . -1) (undo-tree-id10042 . -3) (undo-tree-id10043 . -3) (undo-tree-id10044 . -3) (undo-tree-id10045 . -3) (undo-tree-id10046 . -3) (undo-tree-id10047 . -3) (undo-tree-id10048 . -3)) (26048 31945 243130 0) 0 nil])
([nil nil ((2385 . 2388)) ((#("str" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face fontified t)) . 2385) (undo-tree-id9784 . -3) (undo-tree-id9785 . -3) (undo-tree-id9786 . -3) (undo-tree-id9787 . -1) (undo-tree-id9788 . -1) (undo-tree-id9789 . -1) (undo-tree-id9790 . -1) (undo-tree-id9791 . -2) (undo-tree-id9792 . -2) (undo-tree-id9793 . -2) (undo-tree-id9794 . -2) (undo-tree-id9795 . -3) (undo-tree-id9796 . -3) (undo-tree-id9797 . -3) (undo-tree-id9798 . -3) (undo-tree-id9799 . -2) (undo-tree-id9800 . -2) (undo-tree-id9801 . -1) (undo-tree-id9802 . -1) (undo-tree-id9803 . -1) (undo-tree-id9804 . -1) (undo-tree-id9805 . -3) (undo-tree-id9806 . -3) (undo-tree-id9807 . -3)) (26048 31933 230960 205000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2384 2389 nil nil nil t #s(yas--exit 2390 nil))) #s(yas--exit 2390 nil) 87 nil #s(yas--field 1 2384 2389 nil nil nil t #s(yas--exit 2390 nil)) nil nil)) (2364 . 2390) (#("transform_with_type(${1:type_})$0" 0 33 (fontified nil)) . 2364) (2364 . 2397) (#("tr" 0 2 (fontified nil)) . 2364) (2364 . 2366) (#("transform_with_type(…) (alias g_value_transform)" 0 48 (fontified nil)) . -2364) (2364 . 2412) (#("tr" 0 2 (fontified t)) . -2364) (undo-tree-id9888 . -2) (undo-tree-id9889 . -1) (undo-tree-id9890 . -1) (undo-tree-id9891 . -2) (undo-tree-id9892 . -2) (undo-tree-id9893 . -2) (undo-tree-id9894 . -2) 2366) ((2364 . 2366) (#("transform_with_type(…) (alias g_value_transform)" 0 48 (fontified nil)) . 2364) (2364 . 2412) (#("tr" 0 2 (fontified nil)) . 2364) (2364 . 2366) (#("transform_with_type(${1:type_})$0" 0 33 (fontified nil)) . 2364) (2364 . 2397) (#("transform_with_type(type_)" 0 19 (fontified t) 19 20 (face (rainbow-delimiters-depth-8-face) fontified t) 20 25 (fontified t) 25 26 (face (rainbow-delimiters-depth-8-face) fontified t)) . 2364) (undo-tree-id10017 . -20) (undo-tree-id10018 . -20) (undo-tree-id10019 . -20) (undo-tree-id10020 . -20) (undo-tree-id10021 . -20) (undo-tree-id10022 . 6) (undo-tree-id10023 . -20) (undo-tree-id10024 . -20) (undo-tree-id10025 . -20) (undo-tree-id10026 . -20) (apply yas--snippet-revive 2364 2390 #s(yas--snippet nil (#s(yas--field 1 2384 2389 nil nil nil t #s(yas--exit 2390 nil))) #s(yas--exit 2390 nil) 87 nil #s(yas--field 1 2384 2389 nil nil nil t #s(yas--exit 2390 nil)) nil nil))) (26048 31945 69114 124000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-type-face fontified t)) . -2385) (undo-tree-id9707 . -1) (undo-tree-id9708 . -1) (undo-tree-id9709 . -1) (undo-tree-id9710 . -1) (undo-tree-id9711 . -1) (undo-tree-id9712 . -1) (undo-tree-id9713 . -1) (undo-tree-id9714 . -1) (undo-tree-id9715 . -1) (undo-tree-id9716 . -1) (undo-tree-id9717 . -1) (undo-tree-id9718 . -1) (undo-tree-id9719 . -1) (undo-tree-id9720 . -1) (undo-tree-id9721 . -1) (undo-tree-id9722 . -1) (undo-tree-id9723 . -1) (undo-tree-id9724 . -1) (undo-tree-id9725 . -1) (undo-tree-id9726 . -1) (undo-tree-id9727 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -2386) (undo-tree-id9728 . -1) (undo-tree-id9729 . -1) (undo-tree-id9730 . -1) (undo-tree-id9731 . -1) (undo-tree-id9732 . -1) (undo-tree-id9733 . -1) (undo-tree-id9734 . -1) (undo-tree-id9735 . -1) (undo-tree-id9736 . -1) (undo-tree-id9737 . -1) (undo-tree-id9738 . -1) (undo-tree-id9739 . -1) (undo-tree-id9740 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -2387) (undo-tree-id9741 . -1) (undo-tree-id9742 . -1) (undo-tree-id9743 . -1) (undo-tree-id9744 . -1) (undo-tree-id9745 . -1) (undo-tree-id9746 . -1) (undo-tree-id9747 . -1) 2388) ((2385 . 2388)) (26048 31933 229831 817000) 0 nil])
([nil nil ((2385 . 2386) (#("type_" 0 5 (fontified nil)) . 2385) (undo-tree-id9887 . -5) (2384 . 2385)) ((#("G" 0 1 (face font-lock-type-face fontified nil)) . 2384) (undo-tree-id10012 . -1) (undo-tree-id10013 . -1) (2385 . 2390) (#("S" 0 1 (face font-lock-type-face fontified t)) . 2385) (undo-tree-id10014 . -1) (undo-tree-id10015 . -1) (undo-tree-id10016 . -1)) (26048 31945 68217 862000) 0 nil])
nil
nil
