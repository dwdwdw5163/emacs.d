(undo-tree-save-format-version . 1)
"915df2162978cf1fa460725a367a7e5ef256421b"
[nil nil nil nil (26105 23471 849772 969000) 0 nil]
([nil nil ((1 . 2) (t 26105 23426 967211 271000)) nil (26105 23471 849771 570000) 0 nil])
([nil nil ((1 . 2)) nil (26105 23471 849770 552000) 0 nil])
([nil nil ((nil rear-nonsticky nil 305 . 306) (nil fontified nil 1 . 306) (1 . 306)) nil (26105 23471 849769 674000) 0 nil])
([nil nil ((#("// This will block.
if let Err(error) = listen(callback) {
    println!(\"Error: {:?}\", error)
}" 0 3 (face font-lock-comment-delimiter-face fontified t) 3 20 (face font-lock-comment-face fontified t) 20 22 (face font-lock-keyword-face fontified t) 22 23 (fontified t) 23 26 (face font-lock-keyword-face fontified t) 26 27 (fontified t) 27 30 (face font-lock-type-face fontified t) 30 31 (face (rainbow-delimiters-depth-1-face) fontified t) 31 36 (fontified t) 36 37 (face (rainbow-delimiters-depth-1-face) fontified t) 37 46 (fontified t) 46 47 (face (rainbow-delimiters-depth-1-face) fontified t) 47 55 (fontified t) 55 56 (face (rainbow-delimiters-depth-1-face) fontified t) 56 57 (fontified t) 57 58 (face (rainbow-delimiters-depth-1-face) fontified t) 58 63 (fontified t) 63 71 (face rust-builtin-formatting-macro fontified t) 71 72 (face (rainbow-delimiters-depth-2-face) fontified t) 72 80 (face font-lock-string-face fontified t) 80 84 (face rust-string-interpolation fontified t) 84 85 (face font-lock-string-face fontified t) 85 92 (fontified t) 92 93 (face (rainbow-delimiters-depth-2-face) fontified t) 93 94 (fontified t) 94 95 (face (rainbow-delimiters-depth-1-face) fontified t)) . 29) (undo-tree-id54 . -20) (undo-tree-id55 . -95) (undo-tree-id56 . -62) (undo-tree-id57 . -62) (undo-tree-id58 . -62) (undo-tree-id59 . -62) (undo-tree-id60 . -62) (undo-tree-id61 . -62) (undo-tree-id62 . -62) (undo-tree-id63 . -62) (undo-tree-id64 . -62) (undo-tree-id65 . -62) (undo-tree-id66 . -62) (undo-tree-id67 . -62) (undo-tree-id68 . -62) (undo-tree-id69 . -62) (undo-tree-id70 . -24) (undo-tree-id71 . -24) (undo-tree-id72 . -24) (undo-tree-id73 . -24) (undo-tree-id74 . -24) (undo-tree-id75 . -24) (undo-tree-id76 . -24) (undo-tree-id77 . -24) (undo-tree-id78 . -24) (undo-tree-id79 . -24) (undo-tree-id80 . -24) (undo-tree-id81 . -24) (undo-tree-id82 . -24) (undo-tree-id83 . -24) (undo-tree-id84 . -95) (undo-tree-id85 . -95) (undo-tree-id86 . -95) (undo-tree-id87 . -61) (undo-tree-id88 . -60) (undo-tree-id89 . -20) (undo-tree-id90 . -20) (undo-tree-id91 . -20) (undo-tree-id92 . -95) (undo-tree-id93 . -95)) nil (26105 23471 849767 174000) 0 nil])
([nil nil ((224 . 229)) nil (26105 23471 849422 533000) 0 nil])
([nil nil ((nil rear-nonsticky nil 323 . 324) (nil fontified nil 323 . 324) (nil fontified nil 322 . 323) (nil fontified nil 321 . 322) (nil fontified nil 314 . 321) (nil fontified nil 313 . 314) (nil fontified nil 309 . 313) (nil fontified nil 301 . 309) (nil fontified nil 300 . 301) (nil fontified nil 292 . 300) (nil fontified nil 287 . 292) (nil fontified nil 286 . 287) (nil fontified nil 285 . 286) (nil fontified nil 284 . 285) (nil fontified nil 276 . 284) (nil fontified nil 275 . 276) (nil fontified nil 266 . 275) (nil fontified nil 265 . 266) (nil fontified nil 260 . 265) (nil fontified nil 259 . 260) (nil fontified nil 256 . 259) (nil fontified nil 255 . 256) (nil fontified nil 252 . 255) (nil fontified nil 251 . 252) (nil fontified nil 249 . 251) (nil fontified nil 232 . 249) (nil fontified nil 229 . 232) (229 . 324)) nil (26105 23471 849420 971000) 0 nil])
([nil nil ((331 . 335) (292 . 300) (#("    " 0 4 (fontified t)) . 292) (undo-tree-id53 . -2) (249 . 253) 29) nil (26105 23471 849415 981000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 28) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1)) nil (26105 23471 849411 74000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 28) (undo-tree-id0 . -1)) nil (26105 23471 849372 88000) 0 nil])
([nil nil ((28 . 44) (t 26105 23471 860547 345000)) nil (26105 23901 213315 888000) 0 nil])
([nil nil ((43 . 47) (#("m" 0 1 (fontified nil)) . 43) (43 . 44) (#("mpsc" 0 4 (fontified nil)) . -43) (43 . 47) (#("m" 0 1 (fontified t)) . -43) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) 44) nil (26105 23901 213314 630000) 0 nil])
([nil nil ((47 . 50)) nil (26105 23901 213309 917000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -49) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) 50) nil (26105 23901 213309 52000) 0 nil])
([nil nil ((49 . 51)) nil (26105 23901 213304 829000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -48) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (#("," 0 1 (fontified t)) . -49) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (#("m" 0 1 (fontified t)) . -50) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) 51) nil (26105 23901 213302 315000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -47) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) 48) nil (26105 23901 213176 787000) 0 nil])
([nil nil ((47 . 50)) nil (26105 23901 213155 467000) 0 nil])
([nil nil ((#("M" 0 1 (face font-lock-type-face fontified t)) . -49) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) 50) nil (26105 23901 213154 416000) 0 nil])
([nil nil ((49 . 51)) nil (26105 23901 212962 656000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -47) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (#(":" 0 1 (fontified t)) . -48) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (#("m" 0 1 (fontified t)) . -49) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (#("p" 0 1 (fontified t)) . -50) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) 51) nil (26105 23901 212959 954000) 0 nil])
([nil nil ((47 . 48)) nil (26105 23901 212922 193000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 48) (undo-tree-id238 . 1)) nil (26105 23901 212921 523000) 0 nil])
([nil nil ((48 . 50)) nil (26105 23901 212920 62000) 0 nil])
([nil nil ((49 . 54)) nil (26105 23901 212919 559000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -53) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) 54) nil (26105 23901 212918 651000) 0 nil])
([nil nil ((apply yas--snippet-revive 49 56 #s(yas--snippet nil nil #s(yas--exit 56 nil) 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 56 nil) 0 nil nil nil nil)) (49 . 56) (#("static $0" 0 9 (fontified nil)) . 49) (49 . 58) (#("stat" 0 4 (fontified nil)) . 49) (49 . 53) (#("static" 0 6 (fontified nil)) . -49) (49 . 55) (#("stat" 0 4 (fontified t)) . -49) (undo-tree-id220 . -4) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -2) (undo-tree-id224 . -2) (undo-tree-id225 . -3) (undo-tree-id226 . -3) (undo-tree-id227 . -4) (undo-tree-id228 . -4) (undo-tree-id229 . -4) (undo-tree-id230 . -4) (undo-tree-id231 . -4) (undo-tree-id232 . -4) (undo-tree-id233 . -4) (undo-tree-id234 . -4) 53) nil (26105 23901 212700 236000) 0 nil])
([nil nil ((49 . 50)) nil (26105 23901 212689 285000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . 58) (58 . 62) (58 . 59)) nil (26105 23901 212688 585000) 0 nil])
([nil nil ((56 . 57)) nil (26105 23901 212687 777000) 0 nil])
([nil nil ((57 . 61)) nil (26105 23901 212687 277000) 0 nil])
([nil nil ((#("static mpsc " 0 6 (face font-lock-keyword-face fontified t) 6 11 (fontified t) 11 12 (fontified t)) . 50) (undo-tree-id170 . -6) (undo-tree-id171 . -12) (undo-tree-id172 . -12) (undo-tree-id173 . -12) (undo-tree-id174 . -12) (undo-tree-id175 . -12) (undo-tree-id176 . -12) (undo-tree-id177 . -12) (undo-tree-id178 . -12) (undo-tree-id179 . -12) (undo-tree-id180 . -12) (undo-tree-id181 . -6) (undo-tree-id182 . -6) (undo-tree-id183 . -6) (undo-tree-id184 . -6) (undo-tree-id185 . -6) (undo-tree-id186 . -6) (undo-tree-id187 . -7) (undo-tree-id188 . -7) (undo-tree-id189 . -7) (undo-tree-id190 . -7) (undo-tree-id191 . -7) (undo-tree-id192 . -7) (undo-tree-id193 . -7) (undo-tree-id194 . -7) (undo-tree-id195 . -7) (undo-tree-id196 . -8) (undo-tree-id197 . -8) (undo-tree-id198 . -9) (undo-tree-id199 . -9) (undo-tree-id200 . -10) (undo-tree-id201 . -10) (undo-tree-id202 . -10) (undo-tree-id203 . -10) (undo-tree-id204 . -10) (undo-tree-id205 . -10) (undo-tree-id206 . -10) (undo-tree-id207 . -10) (undo-tree-id208 . -10) (undo-tree-id209 . -11) (undo-tree-id210 . -11) (undo-tree-id211 . 1) (undo-tree-id212 . -11) (undo-tree-id213 . -11) (undo-tree-id214 . -11) (undo-tree-id215 . -11) (undo-tree-id216 . -11) (undo-tree-id217 . -11) (undo-tree-id218 . -11) (undo-tree-id219 . -12)) nil (26105 23901 212685 79000) 0 nil])
([nil nil ((49 . 55)) nil (26105 23901 212567 549000) 0 nil])
([nil nil ((53 . 64) (#("la" 0 2 (fontified nil)) . 53) (53 . 55) (#("lazy_static" 0 11 (fontified nil)) . -53) (53 . 64) (#("la" 0 2 (face font-lock-constant-face fontified t)) . -53) (undo-tree-id164 . -2) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -2) (undo-tree-id168 . -2) (undo-tree-id169 . -2) 55) nil (26105 23901 212566 522000) 0 nil])
([nil nil ((64 . 66)) nil (26105 23901 212561 759000) 0 nil])
([nil nil ((66 . 76) (#("LazyStatic" 0 10 (fontified nil)) . -66) (66 . 76)) nil (26105 23901 212561 31000) 0 nil])
([nil nil ((76 . 77)) nil (26105 23901 212560 168000) 0 nil])
([nil nil ((#("LazyStatic;" 0 10 (face font-lock-type-face fontified t) 10 11 (fontified t)) . -66) (undo-tree-id146 . -11) (undo-tree-id147 . -10) (undo-tree-id148 . -10) (undo-tree-id149 . -10) (undo-tree-id150 . -11) (undo-tree-id151 . -11) (undo-tree-id152 . -11) (undo-tree-id153 . -11) (undo-tree-id154 . -11) (undo-tree-id155 . -11) (undo-tree-id156 . -11) (undo-tree-id157 . -11) (undo-tree-id158 . -11) (undo-tree-id159 . -11) (undo-tree-id160 . -11) (undo-tree-id161 . -11) (undo-tree-id162 . -11) (undo-tree-id163 . -11) 77) nil (26105 23901 212559 8000) 0 nil])
([nil nil ((66 . 68)) nil (26105 23901 212548 229000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -67) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) 68) nil (26105 23901 212547 396000) 0 nil])
([nil nil ((67 . 69)) nil (26105 23901 212543 967000) 0 nil])
([nil nil ((66 . 77) (#("laz" 0 3 (fontified nil)) . 66) (66 . 69) (#("lazy_static" 0 11 (fontified nil)) . -66) (66 . 77) (#("laz" 0 3 (fontified t)) . -66) (undo-tree-id126 . -3) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -2) (undo-tree-id136 . -2) (undo-tree-id137 . -3) (undo-tree-id138 . -3) (undo-tree-id139 . -3) (undo-tree-id140 . -3) 69) nil (26105 23901 212542 375000) 0 nil])
([nil nil ((77 . 78)) nil (26105 23901 212502 787000) 0 nil])
([nil nil ((80 . 81)) nil (26105 23901 212502 305000) 0 nil])
([nil nil ((80 . 81)) nil (26105 23901 212501 767000) 0 nil])
([nil nil ((apply yas--snippet-revive 80 94 #s(yas--snippet nil nil #s(yas--exit 93 nil) 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 93 nil) 1 nil nil nil nil)) (80 . 94) (#("lazy_static!($0)" 0 16 (fontified nil)) . 80) (80 . 96) (#("l" 0 1 (fontified nil)) . 80) (80 . 81) (#("lazy_static!(…)" 0 15 (fontified nil)) . -80) (80 . 95) (#("l" 0 1 (fontified t)) . -80) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) 81) nil (26105 23901 212500 475000) 0 nil])
([nil nil ((93 . 94)) nil (26105 23901 212495 177000) 0 nil])
([nil nil ((95 . 96)) nil (26105 23901 212494 632000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . 94) (94 . 98) (94 . 95)) nil (26105 23901 212493 920000) 0 nil])
([nil nil ((94 . 98)) nil (26105 23901 212492 766000) 0 nil])
([nil nil ((98 . 109)) nil (26105 23901 212492 267000) 0 nil])
([nil nil ((47 . 50)) nil (26105 23901 212491 763000) 0 nil])
([nil nil ((49 . 56) (#("c" 0 1 (fontified nil)) . 49) (49 . 50) (#("channel" 0 7 (fontified nil)) . -49) (49 . 56) (#("c" 0 1 (fontified t)) . -49) (undo-tree-id118 . -1) (undo-tree-id119 . -1) 50) nil (26105 23901 212490 662000) 0 nil])
([nil nil ((118 . 120)) nil (26105 23901 212488 141000) 0 nil])
([nil nil ((119 . 122)) nil (26105 23901 212487 512000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -121) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) 122) nil (26105 23901 212486 679000) 0 nil])
([nil nil ((121 . 125)) nil (26105 23901 212484 274000) 0 nil])
([nil nil ((126 . 133)) nil (26105 23901 212483 594000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -130) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (#("h" 0 1 (fontified t)) . -131) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (#("a" 0 1 (fontified t)) . -132) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) 133) nil (26105 23901 212480 845000) 0 nil])
([nil nil ((130 . 139)) nil (26105 23901 212458 99000) 0 nil])
([nil nil ((#("
lazy_static!(
    static ref (tx, rx) = channel();
);" 0 1 (fontified t) 1 13 (face font-lock-preprocessor-face fontified t) 13 14 (face (rainbow-delimiters-depth-1-face) fontified t) 14 15 (fontified t) 15 19 (fontified t) 19 25 (face font-lock-keyword-face fontified t) 25 26 (fontified t) 26 29 (face font-lock-keyword-face fontified t) 29 30 (fontified t) 30 31 (face (rainbow-delimiters-depth-2-face) fontified t) 31 37 (fontified t) 37 38 (face (rainbow-delimiters-depth-2-face) fontified t) 38 48 (fontified t) 48 49 (face (rainbow-delimiters-depth-2-face) fontified t) 49 50 (face (rainbow-delimiters-depth-2-face) fontified t) 50 51 (fontified t) 51 52 (fontified t) 52 53 (face (rainbow-delimiters-depth-1-face) fontified t) 53 54 (fontified t)) . 88) (undo-tree-id861 . -54) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -33) (undo-tree-id868 . -33) (undo-tree-id869 . -42) (undo-tree-id870 . -42) (undo-tree-id871 . -42) (undo-tree-id872 . -42) (undo-tree-id873 . -42) (undo-tree-id874 . -42) (undo-tree-id875 . -42) (undo-tree-id876 . -42) (undo-tree-id877 . -42) (undo-tree-id878 . -42) (undo-tree-id879 . 3) (undo-tree-id880 . -51) (undo-tree-id881 . -51) (undo-tree-id882 . -51) (undo-tree-id883 . -51) (undo-tree-id884 . -51) (undo-tree-id885 . -51) (undo-tree-id886 . -51) (undo-tree-id887 . -51) (undo-tree-id888 . -51) (undo-tree-id889 . -51) (undo-tree-id890 . -51) (undo-tree-id891 . -50) (undo-tree-id892 . -50) (undo-tree-id893 . -50) (undo-tree-id894 . -50) (undo-tree-id895 . -50) (undo-tree-id896 . -49) (undo-tree-id897 . -48) (undo-tree-id898 . -47) (undo-tree-id899 . -46) (undo-tree-id900 . -45) (undo-tree-id901 . -44) (undo-tree-id902 . -43) (undo-tree-id903 . -42) (undo-tree-id904 . -41) (undo-tree-id905 . -40) (undo-tree-id906 . -39) (undo-tree-id907 . -38) (undo-tree-id908 . -37) (undo-tree-id909 . -36) (undo-tree-id910 . -35) (undo-tree-id911 . -36) (undo-tree-id912 . -37) (undo-tree-id913 . -37) (undo-tree-id914 . -37) (undo-tree-id915 . -37) (undo-tree-id916 . -37) (undo-tree-id917 . -14) (undo-tree-id918 . -14) (undo-tree-id919 . -14) (undo-tree-id920 . -14) (undo-tree-id921 . -14) (undo-tree-id922 . -37) (undo-tree-id923 . -37) (undo-tree-id924 . -37) (undo-tree-id925 . -37) (undo-tree-id926 . -37) (undo-tree-id927 . -35) (undo-tree-id928 . -35) (undo-tree-id929 . -35) (undo-tree-id930 . -35) (undo-tree-id931 . -35) (undo-tree-id932 . -34) (undo-tree-id933 . -33) (undo-tree-id934 . -32) (undo-tree-id935 . -31) (undo-tree-id936 . -30) (undo-tree-id937 . -30) (undo-tree-id938 . -30) (undo-tree-id939 . -30) (undo-tree-id940 . -30) (undo-tree-id941 . -14) (undo-tree-id942 . -30) (undo-tree-id943 . -30) (undo-tree-id944 . -30) (undo-tree-id945 . -30) (undo-tree-id946 . -30) (undo-tree-id947 . -31) (undo-tree-id948 . -31) (undo-tree-id949 . -31) (undo-tree-id950 . -31) (undo-tree-id951 . -31) (undo-tree-id952 . -32) (undo-tree-id953 . -33) (undo-tree-id954 . -34) (undo-tree-id955 . -34) (undo-tree-id956 . -34) (undo-tree-id957 . -34) (undo-tree-id958 . -34) (undo-tree-id959 . -34) (undo-tree-id960 . -34) (undo-tree-id961 . -34) (undo-tree-id962 . -34) (undo-tree-id963 . -54) (undo-tree-id964 . -54) (undo-tree-id965 . -54) (undo-tree-id966 . -18) (undo-tree-id967 . -17) (undo-tree-id968 . -2) (undo-tree-id969 . -54) (undo-tree-id970 . -54) (t 26105 23901 247240 67000)) nil (26105 24240 880409 625000) 0 nil])
([nil nil ((#("use std::sync::mpsc::channel;
use lazy_static::lazy_static;
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 7 (face font-lock-constant-face fontified t) 7 9 (fontified t) 9 13 (face font-lock-constant-face fontified t) 13 15 (fontified t) 15 19 (face font-lock-constant-face fontified t) 19 21 (fontified t) 21 28 (fontified t) 28 30 (fontified t) 30 33 (face font-lock-keyword-face fontified t) 33 34 (fontified t) 34 45 (face font-lock-constant-face fontified t) 45 47 (fontified t) 47 59 (fontified t) 59 60 (fontified t)) . 28) (undo-tree-id565 . -60) (undo-tree-id566 . -15) (undo-tree-id567 . -15) (undo-tree-id568 . -15) (undo-tree-id569 . -15) (undo-tree-id570 . -15) (undo-tree-id571 . -19) (undo-tree-id572 . -19) (undo-tree-id573 . -19) (undo-tree-id574 . -19) (undo-tree-id575 . -19) (undo-tree-id576 . -19) (undo-tree-id577 . -19) (undo-tree-id578 . -19) (undo-tree-id579 . -19) (undo-tree-id580 . -19) (undo-tree-id581 . -19) (undo-tree-id582 . -19) (undo-tree-id583 . -19) (undo-tree-id584 . -19) (undo-tree-id585 . -19) (undo-tree-id586 . -19) (undo-tree-id587 . -19) (undo-tree-id588 . -19) (undo-tree-id589 . -19) (undo-tree-id590 . -19) (undo-tree-id591 . -19) (undo-tree-id592 . -19) (undo-tree-id593 . -19) (undo-tree-id594 . -19) (undo-tree-id595 . -19) (undo-tree-id596 . -19) (undo-tree-id597 . -19) (undo-tree-id598 . -19) (undo-tree-id599 . -19) (undo-tree-id600 . -19) (undo-tree-id601 . -19) (undo-tree-id602 . -19) (undo-tree-id603 . -19) (undo-tree-id604 . -19) (undo-tree-id605 . -19) (undo-tree-id606 . -19) (undo-tree-id607 . -19) (undo-tree-id608 . -19) (undo-tree-id609 . -19) (undo-tree-id610 . -19) (undo-tree-id611 . -19) (undo-tree-id612 . -19) (undo-tree-id613 . -19) (undo-tree-id614 . -19) (undo-tree-id615 . -19) (undo-tree-id616 . -19) (undo-tree-id617 . -19) (undo-tree-id618 . -19) (undo-tree-id619 . -19) (undo-tree-id620 . -19) (undo-tree-id621 . -19) (undo-tree-id622 . -19) (undo-tree-id623 . -19) (undo-tree-id624 . -19) (undo-tree-id625 . -19) (undo-tree-id626 . -19) (undo-tree-id627 . -19) (undo-tree-id628 . -19) (undo-tree-id629 . -30) (undo-tree-id630 . -30) (undo-tree-id631 . -30) (undo-tree-id632 . -30) (undo-tree-id633 . -30) (undo-tree-id634 . -30) (undo-tree-id635 . -30) (undo-tree-id636 . -30) (undo-tree-id637 . -30) (undo-tree-id638 . -30) (undo-tree-id639 . -30) (undo-tree-id640 . -30) (undo-tree-id641 . -30) (undo-tree-id642 . -30) (undo-tree-id643 . -30) (undo-tree-id644 . -60) (undo-tree-id645 . -60) (undo-tree-id646 . -60) (undo-tree-id647 . -60) (undo-tree-id648 . -60) (undo-tree-id649 . -60) (undo-tree-id650 . -60) (undo-tree-id651 . -60) (undo-tree-id652 . -60) (undo-tree-id653 . -60) (undo-tree-id654 . -60) (undo-tree-id655 . -60) (undo-tree-id656 . -60) (undo-tree-id657 . -60) (undo-tree-id658 . -60) (undo-tree-id659 . -60) (undo-tree-id660 . -60) (undo-tree-id661 . -60) (undo-tree-id662 . -60) (undo-tree-id663 . -60) (undo-tree-id664 . -60) (undo-tree-id665 . -60) (undo-tree-id666 . -60) (undo-tree-id667 . -60) (undo-tree-id668 . -60) (undo-tree-id669 . -60) (undo-tree-id670 . -60) (undo-tree-id671 . -60) (undo-tree-id672 . -60) (undo-tree-id673 . -60) (undo-tree-id674 . -60) (undo-tree-id675 . -60) (undo-tree-id676 . -60) (undo-tree-id677 . -60) (undo-tree-id678 . -60) (undo-tree-id679 . -60) (undo-tree-id680 . -60) (undo-tree-id681 . -60) (undo-tree-id682 . -60) (undo-tree-id683 . -60) (undo-tree-id684 . -60) (undo-tree-id685 . -60) (undo-tree-id686 . -60) (undo-tree-id687 . -60) (undo-tree-id688 . -60) (undo-tree-id689 . -60) (undo-tree-id690 . -60) (undo-tree-id691 . -34) (undo-tree-id692 . -34) (undo-tree-id693 . -34) (undo-tree-id694 . -34) (undo-tree-id695 . -34) (undo-tree-id696 . -47) (undo-tree-id697 . -47) (undo-tree-id698 . -47) (undo-tree-id699 . -47) (undo-tree-id700 . -47) (undo-tree-id701 . -47) (undo-tree-id702 . -47) (undo-tree-id703 . -47) (undo-tree-id704 . -47) (undo-tree-id705 . -47) (undo-tree-id706 . -47) (undo-tree-id707 . -47) (undo-tree-id708 . -47) (undo-tree-id709 . -47) (undo-tree-id710 . -47) (undo-tree-id711 . -47) (undo-tree-id712 . -47) (undo-tree-id713 . -47) (undo-tree-id714 . -47) (undo-tree-id715 . -47) (undo-tree-id716 . -47) (undo-tree-id717 . -47) (undo-tree-id718 . -47) (undo-tree-id719 . -47) (undo-tree-id720 . -47) (undo-tree-id721 . -47) (undo-tree-id722 . -47) (undo-tree-id723 . -47) (undo-tree-id724 . -47) (undo-tree-id725 . -47) (undo-tree-id726 . -47) (undo-tree-id727 . -60) (undo-tree-id728 . -60) (undo-tree-id729 . -60) (undo-tree-id730 . -60) (undo-tree-id731 . -60) (undo-tree-id732 . -29) (undo-tree-id733 . -29) (undo-tree-id734 . -21) (undo-tree-id735 . -60) (undo-tree-id736 . -60) (undo-tree-id737 . -60) (undo-tree-id738 . -60) (undo-tree-id739 . -60) (undo-tree-id740 . -60) (undo-tree-id741 . -60) (undo-tree-id742 . -60) (undo-tree-id743 . -60) (undo-tree-id744 . -60) (undo-tree-id745 . -60) (undo-tree-id746 . -60) (undo-tree-id747 . -60) (undo-tree-id748 . -60) (undo-tree-id749 . -60) (undo-tree-id750 . -60) (undo-tree-id751 . -60) (undo-tree-id752 . -60) (undo-tree-id753 . -60) (undo-tree-id754 . -60) (undo-tree-id755 . -60) (undo-tree-id756 . -60) (undo-tree-id757 . -60) (undo-tree-id758 . -60) (undo-tree-id759 . -60) (undo-tree-id760 . -60) (undo-tree-id761 . -60) (undo-tree-id762 . -60) (undo-tree-id763 . -60) (undo-tree-id764 . -60) (undo-tree-id765 . -60) (undo-tree-id766 . -60) (undo-tree-id767 . -60) (undo-tree-id768 . -60) (undo-tree-id769 . -60) (undo-tree-id770 . -60) (undo-tree-id771 . -60) (undo-tree-id772 . -60) (undo-tree-id773 . -60) (undo-tree-id774 . -60) (undo-tree-id775 . -60) (undo-tree-id776 . -60) (undo-tree-id777 . -60) (undo-tree-id778 . -60) (undo-tree-id779 . -60) (undo-tree-id780 . -60) (undo-tree-id781 . -60) (undo-tree-id782 . -60) (undo-tree-id783 . -60) (undo-tree-id784 . -60) (undo-tree-id785 . -60) (undo-tree-id786 . -60) (undo-tree-id787 . -60) (undo-tree-id788 . -60) (undo-tree-id789 . -60) (undo-tree-id790 . -60) (undo-tree-id791 . -60) (undo-tree-id792 . -60) (undo-tree-id793 . -60) (undo-tree-id794 . -60) (undo-tree-id795 . -60) (undo-tree-id796 . -60) (undo-tree-id797 . -60) (undo-tree-id798 . -60) (undo-tree-id799 . -60) (undo-tree-id800 . -60) (undo-tree-id801 . -60) (undo-tree-id802 . -60) (undo-tree-id803 . -60) (undo-tree-id804 . -60) (undo-tree-id805 . -60) (undo-tree-id806 . -60) (undo-tree-id807 . -60) (undo-tree-id808 . -60) (undo-tree-id809 . -60) (undo-tree-id810 . -60) (undo-tree-id811 . -60) (undo-tree-id812 . -60) (undo-tree-id813 . -60) (undo-tree-id814 . -60) (undo-tree-id815 . -60) (undo-tree-id816 . -60) (undo-tree-id817 . -60) (undo-tree-id818 . -60) (undo-tree-id819 . -60) (undo-tree-id820 . -60) (undo-tree-id821 . -60) (undo-tree-id822 . -60) (undo-tree-id823 . -60) (undo-tree-id824 . -60) (undo-tree-id825 . -60) (undo-tree-id826 . -60) (undo-tree-id827 . -60) (undo-tree-id828 . -60) (undo-tree-id829 . -60) (undo-tree-id830 . -60) (undo-tree-id831 . -60) (undo-tree-id832 . -60) (undo-tree-id833 . -60) (undo-tree-id834 . -60) (undo-tree-id835 . -60) (undo-tree-id836 . -60) (undo-tree-id837 . -60) (undo-tree-id838 . -60) (undo-tree-id839 . -60) (undo-tree-id840 . -60) (undo-tree-id841 . -60) (undo-tree-id842 . -60) (undo-tree-id843 . -60) (undo-tree-id844 . -60) (undo-tree-id845 . -60) (undo-tree-id846 . -60) (undo-tree-id847 . -60) (undo-tree-id848 . -60) (undo-tree-id849 . -60) (undo-tree-id850 . -60) (undo-tree-id851 . -60) (undo-tree-id852 . -60) (undo-tree-id853 . -60) (undo-tree-id854 . -60) (undo-tree-id855 . -60) (undo-tree-id856 . -60) (undo-tree-id857 . -60) (undo-tree-id858 . -60) (undo-tree-id859 . -60) (undo-tree-id860 . -60)) nil (26105 24240 880332 255000) 0 nil])
([nil nil ((28 . 29)) nil (26105 24240 880113 357000) 0 nil])
([nil nil ((29 . 30)) nil (26105 24240 880112 745000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -29) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) 30) nil (26105 24240 880111 921000) 0 nil])
([nil nil ((29 . 37)) nil (26105 24240 880109 102000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -36) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) 37) nil (26105 24240 880108 228000) 0 nil])
([nil nil ((36 . 38)) nil (26105 24240 880103 835000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -36) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (#("e" 0 1 (fontified t)) . -37) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) 38) nil (26105 24240 880102 590000) 0 nil])
([nil nil ((36 . 37)) nil (26105 24240 880091 748000) 0 nil])
([nil nil ((37 . 38)) nil (26105 24240 880091 141000) 0 nil])
([nil nil ((#("A" 0 1 (face font-lock-type-face fontified t)) . -36) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -37) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) 38) nil (26105 24240 880089 450000) 0 nil])
([nil nil ((36 . 41)) nil (26105 24240 880068 976000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -40) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) 41) nil (26105 24240 880068 52000) 0 nil])
([nil nil ((40 . 45)) nil (26105 24240 880063 580000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -40) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (#("t" 0 1 (fontified t)) . -41) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (#("a" 0 1 (fontified t)) . -42) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (#("t" 0 1 (fontified t)) . -43) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (#("e" 0 1 (fontified t)) . -44) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) 45) nil (26105 24240 880060 320000) 0 nil])
([nil nil ((40 . 43)) nil (26105 24240 880014 238000) 0 nil])
([nil nil ((43 . 45)) nil (26105 24240 880013 641000) 0 nil])
([nil nil ((45 . 50)) nil (26105 24240 880013 7000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-type-face fontified t)) . -49) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) 50) nil (26105 24240 880012 81000) 0 nil])
([nil nil ((49 . 51)) nil (26105 24240 880007 84000) 0 nil])
([nil nil ((1 . 37) (47 . 47) (47 . 57) (#("Atom" 0 4 (fontified nil)) . 47) (47 . 51) (#("AtomicBool (use std::sync::atomic::AtomicBool)" 0 46 (fontified nil)) . -47) (47 . 93) (#("Atom" 0 4 (face font-lock-type-face fontified t)) . -47) (undo-tree-id402 . -4) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -2) (undo-tree-id408 . -2) (undo-tree-id409 . -2) (undo-tree-id410 . -2) (undo-tree-id411 . -2) (undo-tree-id412 . -2) (undo-tree-id413 . -2) (undo-tree-id414 . -2) (undo-tree-id415 . -2) (undo-tree-id416 . -2) (undo-tree-id417 . -2) (undo-tree-id418 . -2) (undo-tree-id419 . -2) (undo-tree-id420 . -3) (undo-tree-id421 . -3) (undo-tree-id422 . -3) (undo-tree-id423 . -3) (undo-tree-id424 . -4) (undo-tree-id425 . -4) (undo-tree-id426 . -4) (undo-tree-id427 . -4) (undo-tree-id428 . -4) 51) nil (26105 24240 880003 787000) 0 nil])
([nil nil ((93 . 99)) nil (26105 24240 879194 974000) 0 nil])
([nil nil ((apply yas--snippet-revive 96 101 #s(yas--snippet nil nil nil 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 2 nil nil nil nil)) (96 . 101) (#("false" 0 5 (fontified nil)) . 96) (96 . 101) (#("fal" 0 3 (fontified nil)) . 96) (96 . 99) (#("false" 0 5 (fontified nil)) . -96) (96 . 101) (#("fal" 0 3 (fontified t)) . -96) (undo-tree-id393 . -3) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -2) (undo-tree-id397 . -2) (undo-tree-id398 . -3) (undo-tree-id399 . -3) (undo-tree-id400 . -3) (undo-tree-id401 . -3) 99) nil (26105 24240 879191 805000) 0 nil])
([nil nil ((101 . 102)) nil (26105 24240 879175 172000) 0 nil])
([nil nil ((101 . 104) (t 26105 24240 890594 39000)) nil (26105 24247 645725 822000) 0 nil])
([nil nil ((apply yas--snippet-revive 102 108 #s(yas--snippet nil nil #s(yas--exit 108 nil) 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 108 nil) 3 nil nil nil nil)) (102 . 108) (#("into()$0" 0 8 (fontified nil)) . 102) (102 . 110) (#("in" 0 2 (fontified nil)) . 102) (102 . 104) (#("into() (as Into)" 0 16 (fontified nil)) . -102) (102 . 118) (#("in" 0 2 (face font-lock-keyword-face fontified t)) . -102) (undo-tree-id971 . -2) (undo-tree-id972 . -2) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -2) (undo-tree-id977 . -2) (undo-tree-id978 . -2) (undo-tree-id979 . -2) (undo-tree-id980 . -2) (undo-tree-id981 . -2) (undo-tree-id982 . -2) (undo-tree-id983 . -2) 104) nil (26105 24247 645721 238000) 0 nil])
([nil nil ((#("into()" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-1-face) fontified t) 5 6 (face (rainbow-delimiters-depth-1-face) fontified t)) . -102) (undo-tree-id1046 . -6) (undo-tree-id1047 . -6) (undo-tree-id1048 . -6) (undo-tree-id1049 . -6) (undo-tree-id1050 . -6) (undo-tree-id1051 . -6) (undo-tree-id1052 . -6) (undo-tree-id1053 . -6) (undo-tree-id1054 . -6) (undo-tree-id1055 . -6) (undo-tree-id1056 . -6) (undo-tree-id1057 . -6) (undo-tree-id1058 . -6) (undo-tree-id1059 . -6) 108 (t 26105 24247 657261 118000)) nil (26105 24259 489945 3000) 0 nil])
([nil nil ((#("false." 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t)) . -96) (undo-tree-id1012 . -6) (undo-tree-id1013 . -6) (undo-tree-id1014 . -6) (undo-tree-id1015 . -6) (undo-tree-id1016 . -6) (undo-tree-id1017 . -6) (undo-tree-id1018 . -6) (undo-tree-id1019 . -6) (undo-tree-id1020 . -6) (undo-tree-id1021 . -6) (undo-tree-id1022 . -6) (undo-tree-id1023 . -6) (undo-tree-id1024 . -6) (undo-tree-id1025 . -6) (undo-tree-id1026 . -6) (undo-tree-id1027 . -6) (undo-tree-id1028 . -6) (undo-tree-id1029 . -6) (undo-tree-id1030 . -6) (undo-tree-id1031 . -6) (undo-tree-id1032 . -6) (undo-tree-id1033 . -6) (undo-tree-id1034 . -6) (undo-tree-id1035 . -6) (undo-tree-id1036 . -6) (undo-tree-id1037 . -6) (undo-tree-id1038 . -6) (undo-tree-id1039 . -6) (undo-tree-id1040 . -6) (undo-tree-id1041 . -6) (undo-tree-id1042 . -6) (undo-tree-id1043 . -6) (undo-tree-id1044 . -6) (undo-tree-id1045 . -6) 102) nil (26105 24259 489933 364000) 0 nil])
([nil nil ((96 . 97)) nil (26105 24259 489910 887000) 0 nil])
([nil nil ((96 . 106) (#("A" 0 1 (fontified nil)) . 96) (96 . 97) (#("AtomicBool" 0 10 (fontified nil)) . -96) (96 . 106) (#("A" 0 1 (face font-lock-type-face fontified t)) . -96) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) 97) nil (26105 24259 489909 666000) 0 nil])
([nil nil ((106 . 109)) nil (26105 24259 489903 623000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 112 117 nil nil nil t #s(yas--exit 118 nil))) #s(yas--exit 118 nil) 4 nil #s(yas--field 1 112 117 nil nil nil t #s(yas--exit 118 nil)) nil nil)) (108 . 114) (#("new(${1:v})$0" 0 13 (fontified nil)) . 108) (108 . 121) (#("n" 0 1 (fontified nil)) . 108) (108 . 109) (#("new(…)" 0 6 (fontified nil)) . -108) (108 . 114) (#("n" 0 1 (fontified t)) . -108) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) 109) nil (26105 24259 489902 204000) 0 nil])
([nil nil ((#("v" 0 1 (fontified nil)) . 113) (undo-tree-id998 . -1) (112 . 113)) nil (26105 24259 489895 513000) 0 nil])
([nil nil ((apply yas--snippet-revive 112 117 #s(yas--snippet nil nil nil 5 nil nil #s(yas--field 1 112 117 nil nil nil t #s(yas--exit 118 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 5 nil nil #s(yas--field 1 112 117 nil nil nil t #s(yas--exit 118 nil)) nil)) (112 . 117) (#("false" 0 5 (fontified nil)) . 112) (undo-tree-id984 . -5) (112 . 117) (#("f" 0 1 (fontified nil)) . 112) (undo-tree-id985 . -1) (112 . 113) (#("false" 0 5 (fontified nil)) . -112) (undo-tree-id986 . -5) (112 . 117) (#("f" 0 1 (fontified t)) . -112) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) 113) nil (26105 24259 489890 301000) 0 nil])
([nil nil ((apply yas--snippet-revive 108 118 #s(yas--snippet nil (#s(yas--field 1 112 117 nil nil nil t #s(yas--exit 118 nil))) #s(yas--exit 118 nil) 4 nil #s(yas--field 1 112 117 nil nil nil t #s(yas--exit 118 nil)) nil nil))) nil (26105 24317 593873 858000) 0 nil])
([nil nil ((148 . 153) (t 26105 24259 500595 176000)) nil (26105 24317 593873 168000) 0 nil])
([nil nil ((153 . 160)) nil (26105 24317 593872 346000) 0 nil])
([nil nil ((159 . 164) (#("e" 0 1 (fontified nil)) . 159) (159 . 160) (#("event" 0 5 (fontified nil)) . -159) (159 . 164) (#("e" 0 1 (fontified t)) . -159) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) 160) nil (26105 24317 593871 141000) 0 nil])
([nil nil ((164 . 165)) nil (26105 24317 593866 423000) 0 nil])
([nil nil ((165 . 175) (#("event_type" 0 10 (fontified nil)) . -165) (165 . 175)) nil (26105 24317 593865 694000) 0 nil])
([nil nil ((175 . 176)) nil (26105 24317 593864 840000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -175) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) 176) nil (26105 24317 593863 799000) 0 nil])
([nil nil ((175 . 178)) nil (26105 24317 593859 168000) 0 nil])
([nil nil ((179 . 183) (#("        " 0 8 (fontified nil)) . 178) (178 . 186) (#("    " 0 4 (fontified nil)) . 178) (undo-tree-id1060 . -4) (undo-tree-id1061 . -4) (undo-tree-id1062 . -4) (undo-tree-id1063 . -4) (177 . 183)) nil (26105 24317 593856 716000) 0 nil])
([nil nil ((178 . 186)) nil (26105 24317 593842 688000) 0 nil])
([nil nil ((186 . 193) (t 26105 24317 637265 371000)) nil (26105 24323 374263 752000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -191) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (#("}" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -192) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) 193) nil (26105 24323 374261 116000) 0 nil])
([nil nil ((191 . 193)) nil (26105 24323 374239 198000) 0 nil])
([nil nil ((177 . 186) (t 26105 24323 383932 386000)) nil (26105 24417 614618 735000) 0 nil])
([nil nil ((186 . 189)) nil (26105 24417 614618 180000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 214 214 nil nil nil nil #s(yas--exit 215 nil))) #s(yas--exit 215 nil) 6 nil #s(yas--field 1 214 214 nil nil nil nil #s(yas--exit 215 nil)) nil nil)) (186 . 215) (#("rdev::EventType::KeyRelease($1)$0" 0 33 (fontified nil)) . 186) (186 . 219) (#("Key" 0 3 (fontified nil)) . 186) (186 . 189) (#("rdev::EventType::KeyRelease(…)" 0 30 (fontified nil)) . -186) (186 . 216) (#("Key" 0 3 (face font-lock-type-face fontified t)) . -186) (undo-tree-id1274 . -3) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -2) (undo-tree-id1278 . -2) (undo-tree-id1279 . -3) (undo-tree-id1280 . -3) (undo-tree-id1281 . -3) (undo-tree-id1282 . -3) (undo-tree-id1283 . -3) 189) nil (26105 24417 614616 942000) 0 nil])
([nil nil ((apply yas--snippet-revive 186 215 #s(yas--snippet nil (#s(yas--field 1 214 214 nil nil nil nil #s(yas--exit 215 nil))) #s(yas--exit 215 nil) 6 nil #s(yas--field 1 214 214 nil nil nil nil #s(yas--exit 215 nil)) nil nil))) nil (26105 24417 614609 569000) 0 nil])
([nil nil ((214 . 219)) nil (26105 24417 614608 988000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -217) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (#(":" 0 1 (fontified t)) . -218) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) 219) nil (26105 24417 614607 603000) 0 nil])
([nil nil ((#("Key" 0 3 (face font-lock-type-face fontified t)) . -214) (undo-tree-id1218 . -3) (undo-tree-id1219 . -3) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -2) (undo-tree-id1224 . -2) (undo-tree-id1225 . -2) (undo-tree-id1226 . -3) (undo-tree-id1227 . -3) (undo-tree-id1228 . -3) (undo-tree-id1229 . -3) (undo-tree-id1230 . -3) (undo-tree-id1231 . -3) (undo-tree-id1232 . -3) (undo-tree-id1233 . -3) (undo-tree-id1234 . -3) (undo-tree-id1235 . -3) (undo-tree-id1236 . -3) (undo-tree-id1237 . -3) (undo-tree-id1238 . -3) (undo-tree-id1239 . -3) (undo-tree-id1240 . -3) (undo-tree-id1241 . -3) (undo-tree-id1242 . -3) (undo-tree-id1243 . -3) (undo-tree-id1244 . -3) (undo-tree-id1245 . -3) (undo-tree-id1246 . -3) (undo-tree-id1247 . -3) (undo-tree-id1248 . -3) 217) nil (26105 24417 614591 745000) 0 nil])
([nil nil ((214 . 217)) nil (26105 24417 614573 643000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-type-face fontified t)) . -216) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) 217) nil (26105 24417 614572 809000) 0 nil])
([nil nil ((216 . 218)) nil (26105 24417 614568 473000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -217) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) 218) nil (26105 24417 614567 499000) 0 nil])
([nil nil ((#("Key" 0 3 (face font-lock-type-face fontified t)) . -214) (undo-tree-id1143 . -3) (undo-tree-id1144 . -3) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -2) (undo-tree-id1155 . -2) (undo-tree-id1156 . -2) (undo-tree-id1157 . -2) (undo-tree-id1158 . -2) (undo-tree-id1159 . -2) (undo-tree-id1160 . -2) (undo-tree-id1161 . -2) (undo-tree-id1162 . -2) (undo-tree-id1163 . -2) (undo-tree-id1164 . -2) (undo-tree-id1165 . -2) (undo-tree-id1166 . -2) (undo-tree-id1167 . -2) (undo-tree-id1168 . -2) (undo-tree-id1169 . -2) (undo-tree-id1170 . -3) (undo-tree-id1171 . -3) (undo-tree-id1172 . -3) (undo-tree-id1173 . -3) (undo-tree-id1174 . -3) (undo-tree-id1175 . -3) (undo-tree-id1176 . -3) (undo-tree-id1177 . -3) (undo-tree-id1178 . -3) (undo-tree-id1179 . -3) (undo-tree-id1180 . -3) (undo-tree-id1181 . -3) (undo-tree-id1182 . -3) (undo-tree-id1183 . -3) (undo-tree-id1184 . -3) (undo-tree-id1185 . -3) (undo-tree-id1186 . -3) (undo-tree-id1187 . -3) (undo-tree-id1188 . -3) (undo-tree-id1189 . -3) (undo-tree-id1190 . -3) (undo-tree-id1191 . -3) (undo-tree-id1192 . -3) (undo-tree-id1193 . -3) (undo-tree-id1194 . -3) (undo-tree-id1195 . -3) (undo-tree-id1196 . -3) (undo-tree-id1197 . -3) (undo-tree-id1198 . -3) 217) nil (26105 24417 614557 932000) 0 nil])
([nil nil ((214 . 217)) nil (26105 24417 614468 479000) 0 nil])
([nil nil ((61 . 66) (214 . 214) (214 . 217) (#("Key" 0 3 (fontified nil)) . 214) (214 . 217) (#("Key (use rdev::Key)" 0 19 (fontified nil)) . -214) (214 . 233) (#("Key" 0 3 (face font-lock-type-face fontified t)) . -214) (undo-tree-id1127 . -3) (undo-tree-id1128 . -3) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -2) (undo-tree-id1133 . -2) (undo-tree-id1134 . -2) (undo-tree-id1135 . -3) (undo-tree-id1136 . -3) (undo-tree-id1137 . -3) (undo-tree-id1138 . -3) (undo-tree-id1139 . -3) (undo-tree-id1140 . -3) (undo-tree-id1141 . -3) (undo-tree-id1142 . -3) 217) nil (26105 24417 614467 109000) 0 nil])
([nil nil ((222 . 229)) nil (26105 24417 614456 183000) 0 nil])
([nil nil ((230 . 233)) nil (26105 24417 614455 670000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -232) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) 233) nil (26105 24417 614454 866000) 0 nil])
([nil nil ((232 . 236)) nil (26105 24417 614452 20000) 0 nil])
([nil nil ((237 . 245) (#("            " 0 12 (fontified nil)) . 236) (undo-tree-id1119 . -8) (undo-tree-id1120 . -8) (undo-tree-id1121 . -8) (undo-tree-id1122 . -8) (244 . 248) (235 . 245)) nil (26105 24417 614451 223000) 0 nil])
([nil nil ((236 . 248)) nil (26105 24417 614448 137000) 0 nil])
([nil nil ((248 . 250)) nil (26105 24417 614447 402000) 0 nil])
([nil nil ((248 . 253) (#("ST" 0 2 (fontified nil)) . 248) (248 . 250) (#("STATE" 0 5 (fontified nil)) . -248) (248 . 253) (#("ST" 0 2 (face font-lock-type-face fontified t)) . -248) (undo-tree-id1112 . -2) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -2) (undo-tree-id1116 . -2) (undo-tree-id1117 . -2) (undo-tree-id1118 . -2) 250) nil (26105 24417 614446 279000) 0 nil])
([nil nil ((253 . 257)) nil (26105 24417 614440 574000) 0 nil])
([nil nil ((256 . 261) (#("S" 0 1 (fontified nil)) . 256) (256 . 257) (#("STATE" 0 5 (fontified nil)) . -256) (256 . 261) (#("S" 0 1 (face font-lock-type-face fontified t)) . -256) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) 257) nil (26105 24417 614439 490000) 0 nil])
([nil nil ((261 . 263)) nil (26105 24417 614434 538000) 0 nil])
([nil nil ((apply yas--snippet-revive 262 271 #s(yas--snippet nil nil #s(yas--exit 271 nil) 7 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 271 nil) 7 nil nil nil nil)) (262 . 271) (#("get_mut()$0" 0 11 (fontified nil)) . 262) (262 . 273) (#("g" 0 1 (fontified nil)) . 262) (262 . 263) (#("get_mut()" 0 9 (fontified nil)) . -262) (262 . 271) (#("g" 0 1 (fontified t)) . -262) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) 263) nil (26105 24417 614433 161000) 0 nil])
([nil nil ((271 . 275)) nil (26105 24417 614427 927000) 0 nil])
([nil nil ((10 . 11) (34 . 45) (apply yas--snippet-revive 272 277 #s(yas--snippet nil nil #s(yas--exit 277 nil) 8 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 277 nil) 8 nil nil nil nil)) (272 . 277) (#("not()$0" 0 7 (fontified nil)) . 272) (272 . 279) (#("not" 0 3 (fontified nil)) . 272) (272 . 275) (#("not() (use std::ops::Not)" 0 25 (fontified nil)) . -272) (272 . 297) (#("not" 0 3 (fontified t)) . -272) (undo-tree-id1090 . -3) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -2) (undo-tree-id1095 . -2) (undo-tree-id1096 . -3) (undo-tree-id1097 . -3) (undo-tree-id1098 . -3) (undo-tree-id1099 . -3) 275) nil (26105 24417 614425 479000) 0 nil])
([nil nil ((289 . 290)) nil (26105 24417 614409 766000) 0 nil])
([nil nil ((#("not();" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-4-face) fontified t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t) 5 6 (fontified t)) . -284) (undo-tree-id1416 . -6) (undo-tree-id1417 . -6) (undo-tree-id1418 . -6) (undo-tree-id1419 . -6) (undo-tree-id1420 . -6) (undo-tree-id1421 . -6) (undo-tree-id1422 . -6) (undo-tree-id1423 . -6) (undo-tree-id1424 . -6) (undo-tree-id1425 . -6) (undo-tree-id1426 . -6) (undo-tree-id1427 . -6) (undo-tree-id1428 . -6) (undo-tree-id1429 . -5) (undo-tree-id1430 . -4) (undo-tree-id1431 . -5) (undo-tree-id1432 . -6) (undo-tree-id1433 . -6) (undo-tree-id1434 . -6) (undo-tree-id1435 . -6) (undo-tree-id1436 . -6) (undo-tree-id1437 . -6) 290 (t 26105 24417 657271 415000)) nil (26105 24500 27339 433000) 0 nil])
([nil nil ((#("mut()." 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-4-face) fontified t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t) 5 6 (fontified t)) . -278) (undo-tree-id1383 . -6) (undo-tree-id1384 . -6) (undo-tree-id1385 . -6) (undo-tree-id1386 . -6) (undo-tree-id1387 . -6) (undo-tree-id1388 . -6) (undo-tree-id1389 . -6) (undo-tree-id1390 . -6) (undo-tree-id1391 . -6) (undo-tree-id1392 . -6) (undo-tree-id1393 . -6) (undo-tree-id1394 . -6) (undo-tree-id1395 . -6) (undo-tree-id1396 . -6) (undo-tree-id1397 . -6) (undo-tree-id1398 . -6) (undo-tree-id1399 . -6) (undo-tree-id1400 . -6) (undo-tree-id1401 . -6) (undo-tree-id1402 . -6) (undo-tree-id1403 . -6) (undo-tree-id1404 . -6) (undo-tree-id1405 . -6) (undo-tree-id1406 . -6) (undo-tree-id1407 . -6) (undo-tree-id1408 . -6) (undo-tree-id1409 . -6) (undo-tree-id1410 . -6) (undo-tree-id1411 . -6) (undo-tree-id1412 . -6) (undo-tree-id1413 . -6) (undo-tree-id1414 . -6) (undo-tree-id1415 . -6) 284) nil (26105 24500 27325 838000) 0 nil])
([nil nil ((#("get_" 0 4 (fontified t)) . -274) (undo-tree-id1348 . -4) (undo-tree-id1349 . -4) (undo-tree-id1350 . -4) (undo-tree-id1351 . -4) (undo-tree-id1352 . -4) (undo-tree-id1353 . -4) (undo-tree-id1354 . -4) (undo-tree-id1355 . -4) (undo-tree-id1356 . -4) (undo-tree-id1357 . -4) (undo-tree-id1358 . -4) (undo-tree-id1359 . -4) (undo-tree-id1360 . -4) (undo-tree-id1361 . -4) (undo-tree-id1362 . -4) (undo-tree-id1363 . -4) (undo-tree-id1364 . -4) (undo-tree-id1365 . -4) (undo-tree-id1366 . -4) (undo-tree-id1367 . -4) (undo-tree-id1368 . -4) (undo-tree-id1369 . -4) (undo-tree-id1370 . -4) (undo-tree-id1371 . -4) (undo-tree-id1372 . -4) (undo-tree-id1373 . -4) (undo-tree-id1374 . -4) (undo-tree-id1375 . -4) (undo-tree-id1376 . -4) (undo-tree-id1377 . -4) (undo-tree-id1378 . -4) (undo-tree-id1379 . -4) (undo-tree-id1380 . -4) (undo-tree-id1381 . -4) (undo-tree-id1382 . -4) 278) nil (26105 24500 27306 433000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -273) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) 274) nil (26105 24500 27285 136000) 0 nil])
([nil nil ((273 . 274)) nil (26105 24500 27257 859000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 287 287 nil nil nil t #s(yas--field 2 291 302 nil nil nil nil #s(yas--field 3 304 305 nil nil nil nil #s(yas--exit 306 nil)))) #s(yas--field 2 291 302 nil nil nil nil #s(yas--field 3 304 305 nil nil nil nil #s(yas--exit 306 nil))) #s(yas--field 3 304 305 nil nil nil nil #s(yas--exit 306 nil))) #s(yas--exit 306 nil) 9 nil #s(yas--field 1 287 287 nil nil nil t #s(yas--field 2 291 302 nil nil nil nil #s(yas--field 3 304 305 nil nil nil nil #s(yas--exit 306 nil)))) nil nil)) (274 . 313) (#("fetch_update(${1:set_order}, ${2:fetch_order}, ${3:f})$0" 0 56 (fontified nil)) . 274) (274 . 330) (#("fetch_update(…)" 0 15 (fontified nil)) . -274) (274 . 289)) nil (26105 24500 27256 973000) 0 nil])
([nil nil ((288 . 289) (#("set_order" 0 9 (fontified nil)) . 288) (undo-tree-id1302 . -9) (287 . 288)) nil (26105 24501 165473 237000) 0 nil])
([nil nil ((apply yas--snippet-revive 274 306 #s(yas--snippet nil (#s(yas--field 1 287 287 nil nil nil t #s(yas--field 2 291 302 nil nil nil nil #s(yas--field 3 304 305 nil nil nil nil #s(yas--exit 306 nil)))) #s(yas--field 2 291 302 nil nil nil nil #s(yas--field 3 304 305 nil nil nil nil #s(yas--exit 306 nil))) #s(yas--field 3 304 305 nil nil nil nil #s(yas--exit 306 nil))) #s(yas--exit 306 nil) 9 nil #s(yas--field 1 287 287 nil nil nil t #s(yas--field 2 291 302 nil nil nil nil #s(yas--field 3 304 305 nil nil nil nil #s(yas--exit 306 nil)))) nil nil))) nil (26105 24523 491228 856000) 0 nil] [nil nil ((apply yas--snippet-revive 274 306 #s(yas--snippet nil (#s(yas--field 1 287 287 nil nil nil t #s(yas--field 2 291 302 nil nil nil nil #s(yas--field 3 304 305 nil nil nil nil #s(yas--exit 306 nil)))) #s(yas--field 2 291 302 nil nil nil nil #s(yas--field 3 304 305 nil nil nil nil #s(yas--exit 306 nil))) #s(yas--field 3 304 305 nil nil nil nil #s(yas--exit 306 nil))) #s(yas--exit 306 nil) 9 nil #s(yas--field 1 287 287 nil nil nil t #s(yas--field 2 291 302 nil nil nil nil #s(yas--field 3 304 305 nil nil nil nil #s(yas--exit 306 nil)))) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 287 287 nil nil nil t #s(yas--field 2 291 302 nil nil nil nil #s(yas--field 3 304 305 nil nil nil nil #s(yas--exit 306 nil)))) #s(yas--field 2 291 302 nil nil nil nil #s(yas--field 3 304 305 nil nil nil nil #s(yas--exit 306 nil))) #s(yas--field 3 304 305 nil nil nil nil #s(yas--exit 306 nil))) #s(yas--exit 306 nil) 9 nil #s(yas--field 1 287 287 nil nil nil t #s(yas--field 2 291 302 nil nil nil nil #s(yas--field 3 304 305 nil nil nil nil #s(yas--exit 306 nil)))) nil nil))) (26105 24501 165435 612000) 0 nil] [nil nil ((apply yas--snippet-revive 287 323 #s(yas--snippet nil nil #s(yas--exit #<marker at 371 in rdev-marco/main.rs> nil) 10 nil nil #s(yas--field 1 287 287 nil nil nil t #s(yas--field 2 291 302 nil nil nil nil #s(yas--field 3 304 305 nil nil nil nil #s(yas--exit 306 nil)))) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 371 in rdev-marco/main.rs> nil) 10 nil nil #s(yas--field 1 287 287 nil nil nil t #s(yas--field 2 291 302 nil nil nil nil #s(yas--field 3 304 305 nil nil nil nil #s(yas--exit 306 nil)))) nil)) (287 . 323) (#("std::sync::atomic::Ordering::Relaxed$0" 0 38 (fontified nil)) . 287) (undo-tree-id1284 . -38) (287 . 325) (#("Or" 0 2 (fontified nil)) . 287) (undo-tree-id1285 . -2) (287 . 289) (#("std::sync::atomic::Ordering::Relaxed" 0 36 (fontified nil)) . -287) (undo-tree-id1286 . -36) (287 . 323) (#("Or" 0 2 (face font-lock-type-face fontified t)) . -287) (undo-tree-id1287 . -2) (undo-tree-id1288 . -2) (undo-tree-id1289 . -2) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -2) (undo-tree-id1296 . -2) (undo-tree-id1297 . -2) (undo-tree-id1298 . -2) (undo-tree-id1299 . -2) (undo-tree-id1300 . -2) (undo-tree-id1301 . -2) 289) ((287 . 289) (#("std::sync::atomic::Ordering::Relaxed" 0 36 (fontified nil)) . 287) (287 . 323) (#("Or" 0 2 (fontified nil)) . 287) (287 . 289) (#("std::sync::atomic::Ordering::Relaxed$0" 0 38 (fontified nil)) . 287) (287 . 325) (#("std::sync::atomic::Ordering::Relaxed" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t) 5 9 (face font-lock-constant-face fontified t) 9 11 (fontified t) 11 17 (face font-lock-constant-face fontified t) 17 19 (fontified t) 19 27 (face font-lock-type-face fontified t) 27 29 (fontified t) 29 36 (face font-lock-type-face fontified t)) . 287) (undo-tree-id1438 . -36) (undo-tree-id1439 . -36)) (26105 24500 27373 246000) 0 nil])
([nil nil ((#("O" 0 1 (face font-lock-type-face fontified t)) . -287) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -288) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) 289) nil (26105 24523 491227 299000) 0 nil])
nil
([nil nil ((apply yas--snippet-revive 274 340 #s(yas--snippet nil (#s(yas--field 1 287 287 nil nil nil t #s(yas--field 2 291 302 nil nil nil nil #s(yas--field 3 304 305 nil nil nil nil #s(yas--exit 306 nil)))) #s(yas--field 2 291 302 nil nil nil nil #s(yas--field 3 304 305 nil nil nil nil #s(yas--exit 306 nil))) #s(yas--field 3 304 305 nil nil nil nil #s(yas--exit 306 nil))) #s(yas--exit 306 nil) 9 nil #s(yas--field 1 287 287 nil nil nil t #s(yas--field 2 291 302 nil nil nil nil #s(yas--field 3 304 305 nil nil nil nil #s(yas--exit 306 nil)))) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 287 287 nil nil nil t #s(yas--field 2 291 302 nil nil nil nil #s(yas--field 3 304 305 nil nil nil nil #s(yas--exit 306 nil)))) #s(yas--field 2 291 302 nil nil nil nil #s(yas--field 3 304 305 nil nil nil nil #s(yas--exit 306 nil))) #s(yas--field 3 304 305 nil nil nil nil #s(yas--exit 306 nil))) #s(yas--exit 306 nil) 9 nil #s(yas--field 1 287 287 nil nil nil t #s(yas--field 2 291 302 nil nil nil nil #s(yas--field 3 304 305 nil nil nil nil #s(yas--exit 306 nil)))) nil nil))) (26105 24500 27230 253000) 0 nil])
([nil nil ((287 . 288)) nil (26105 24523 491210 947000) 0 nil])
nil
([nil nil ((#("R" 0 1 (face font-lock-type-face fontified t)) . -287) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) 288) nil (26105 24523 491209 907000) 0 nil])
([nil nil ((287 . 289)) nil (26105 24523 491142 791000) 0 nil])
([nil nil ((apply yas--snippet-revive 287 323 #s(yas--snippet nil nil #s(yas--exit 323 nil) 11 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 323 nil) 11 nil nil nil nil)) (287 . 323) (#("std::sync::atomic::Ordering::Relaxed$0" 0 38 (fontified nil)) . 287) (287 . 325) (#("Or" 0 2 (fontified nil)) . 287) (287 . 289) (#("std::sync::atomic::Ordering::Relaxed" 0 36 (fontified nil)) . -287) (287 . 323) (#("Or" 0 2 (face font-lock-type-face fontified t)) . -287) (undo-tree-id1492 . -2) (undo-tree-id1493 . -2) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -2) (undo-tree-id1500 . -2) (undo-tree-id1501 . -2) (undo-tree-id1502 . -2) (undo-tree-id1503 . -2) 289) nil (26105 24523 491141 214000) 0 nil])
([nil nil ((#("order" 0 5 (fontified t)) . -331) (undo-tree-id1489 . -5) (undo-tree-id1490 . -5) (undo-tree-id1491 . -5) 336) nil (26105 24523 491131 78000) 0 nil])
([nil nil ((#("fetch_" 0 6 (fontified t)) . -325) (undo-tree-id1481 . -6) (undo-tree-id1482 . -6) (undo-tree-id1483 . -5) (undo-tree-id1484 . -5) (undo-tree-id1485 . -5) (undo-tree-id1486 . -6) (undo-tree-id1487 . -6) (undo-tree-id1488 . -6) 331) nil (26105 24523 491127 839000) 0 nil])
([nil nil ((325 . 327)) nil (26105 24523 491121 735000) 0 nil])
([nil nil ((apply yas--snippet-revive 325 361 #s(yas--snippet nil nil #s(yas--exit 361 nil) 12 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 361 nil) 12 nil nil nil nil)) (325 . 361) (#("std::sync::atomic::Ordering::Relaxed$0" 0 38 (fontified nil)) . 325) (325 . 363) (#("Or" 0 2 (fontified nil)) . 325) (325 . 327) (#("std::sync::atomic::Ordering::Relaxed" 0 36 (fontified nil)) . -325) (325 . 361) (#("Or" 0 2 (face font-lock-type-face fontified t)) . -325) (undo-tree-id1469 . -2) (undo-tree-id1470 . -2) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -2) (undo-tree-id1477 . -2) (undo-tree-id1478 . -2) (undo-tree-id1479 . -2) (undo-tree-id1480 . -2) 327) nil (26105 24523 491119 741000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -363) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) 364) nil (26105 24523 491744 55000) 0 nil])
([nil nil ((363 . 365)) nil (26105 24578 630581 680000) 0 nil] [nil nil ((363 . 375) (#(" " 0 1 (fontified nil)) . 362) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (363 . 364)) ((#("
" 0 1 (fontified nil)) . 363) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (362 . 363) (#("            " 0 12 (fontified t)) . 363) (undo-tree-id1536 . -12) (undo-tree-id1537 . -12)) (26105 24523 491101 642000) 0 nil])
([nil nil ((#("}" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -363) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -364) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) 365) nil (26105 24578 630580 690000) 0 nil])
nil
([nil nil ((363 . 365)) nil (26105 24578 630577 165000) 0 nil])
([nil nil ((364 . 369)) nil (26105 24578 630576 535000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -367) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (#("n" 0 1 (fontified t)) . -368) (undo-tree-id1660 . -1) 369) nil (26105 24578 630575 607000) 0 nil])
([nil nil ((367 . 377)) nil (26105 24578 630572 555000) 0 nil])
([nil nil ((378 . 381)) nil (26105 24578 630571 946000) 0 nil])
([nil nil ((380 . 381)) nil (26105 24578 630571 408000) 0 nil])
([nil nil ((381 . 382)) nil (26105 24578 630570 812000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 386 388 nil nil nil nil #s(yas--exit 389 nil))) #s(yas--exit 389 nil) 13 nil #s(yas--field 1 386 388 nil nil nil nil #s(yas--exit 389 nil)) nil nil)) (381 . 389) (#("Some(${1:()})$0" 0 15 (fontified nil)) . 381) (381 . 396) (#("S" 0 1 (fontified nil)) . 381) (381 . 382) (#("Some(…)" 0 7 (fontified nil)) . -381) (381 . 388) (#("S" 0 1 (face font-lock-type-face fontified t)) . -381) (undo-tree-id1657 . -1) 382) nil (26105 24578 630569 533000) 0 nil])
([nil nil ((apply yas--snippet-revive 381 389 #s(yas--snippet nil (#s(yas--field 1 386 388 nil nil nil nil #s(yas--exit 389 nil))) #s(yas--exit 389 nil) 13 nil #s(yas--field 1 386 388 nil nil nil nil #s(yas--exit 389 nil)) nil nil))) nil (26105 24578 630566 969000) 0 nil])
([nil nil ((389 . 390)) nil (26105 24578 630566 361000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-7-face) fontified t)) . -386) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-7-face) fontified t)) . -387) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) 388) nil (26105 24578 630565 421000) 0 nil])
([nil nil ((386 . 387)) nil (26105 24578 630561 891000) 0 nil])
([nil nil ((386 . 399) (#("c" 0 1 (fontified nil)) . 386) (386 . 387) (#("current_state" 0 13 (fontified nil)) . -386) (386 . 399) (#("c" 0 1 (fontified t)) . -386) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) 387) nil (26105 24578 630560 830000) 0 nil])
([nil nil ((399 . 402)) nil (26105 24578 630558 23000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -399) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (#("b" 0 1 (fontified t)) . -400) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (#("o" 0 1 (fontified t)) . -401) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) 402) nil (26105 24578 630556 834000) 0 nil])
([nil nil ((399 . 403)) nil (26105 24578 630551 486000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -400) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (#("o" 0 1 (fontified t)) . -401) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (#("t" 0 1 (fontified t)) . -402) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) 403) nil (26105 24578 630549 605000) 0 nil])
([nil nil ((400 . 404)) nil (26105 24578 630529 373000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -401) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (#("o" 0 1 (fontified t)) . -402) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (#("p" 0 1 (fontified t)) . -403) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) 404) nil (26105 24578 630527 311000) 0 nil])
([nil nil ((401 . 403)) nil (26105 24578 630502 980000) 0 nil])
([nil nil ((apply yas--snippet-revive 400 405 #s(yas--snippet nil nil #s(yas--exit 405 nil) 14 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 405 nil) 14 nil nil nil nil)) (400 . 405) (#("not()$0" 0 7 (fontified nil)) . 400) (400 . 407) (#("not" 0 3 (fontified nil)) . 400) (400 . 403) (#("not() (as Not)" 0 14 (fontified nil)) . -400) (400 . 414) (#("not" 0 3 (fontified t)) . -400) (undo-tree-id1547 . -3) (undo-tree-id1548 . -3) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -2) (undo-tree-id1568 . -2) (undo-tree-id1569 . -2) (undo-tree-id1570 . -2) (undo-tree-id1571 . -2) (undo-tree-id1572 . -2) (undo-tree-id1573 . -3) (undo-tree-id1574 . -3) (undo-tree-id1575 . -3) (undo-tree-id1576 . -3) (undo-tree-id1577 . -3) (undo-tree-id1578 . -3) 403) nil (26105 24578 630500 669000) 0 nil])
([nil nil ((409 . 410)) nil (26105 24578 630477 608000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -409) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) 410) nil (26105 24578 630476 563000) 0 nil])
([nil nil ((409 . 411)) nil (26105 24578 630472 806000) 0 nil])
([nil nil ((apply yas--snippet-revive 410 418 #s(yas--snippet nil nil #s(yas--exit 418 nil) 15 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 418 nil) 15 nil nil nil nil)) (410 . 418) (#("unwrap()$0" 0 10 (fontified nil)) . 410) (410 . 420) (#("u" 0 1 (fontified nil)) . 410) (410 . 411) (#("unwrap()" 0 8 (fontified nil)) . -410) (410 . 418) (#("u" 0 1 (fontified t)) . -410) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) 411) nil (26105 24578 630469 939000) 0 nil])
([nil nil ((418 . 419)) nil (26105 24578 630452 731000) 0 nil])
([nil nil ((#("STATE = " 0 5 (face font-lock-type-face fontified t) 5 8 (fontified t)) . -260) (undo-tree-id1665 . -8) (undo-tree-id1666 . -8) (undo-tree-id1667 . -8) (undo-tree-id1668 . -8) (undo-tree-id1669 . -8) (undo-tree-id1670 . -8) (undo-tree-id1671 . -8) (undo-tree-id1672 . -8) (undo-tree-id1673 . -8) (undo-tree-id1674 . -8) (undo-tree-id1675 . -8) (undo-tree-id1676 . -8) 268 (t 26105 24578 643947 821000)) nil (26105 24582 548302 304000) 0 nil])
([nil nil ((11 . 21) (#(", ops::Not" 0 2 (fontified t) 2 5 (face font-lock-constant-face fontified t) 5 7 (fontified t) 7 10 (face font-lock-type-face fontified t)) . -35) (265 . 282) (279 . 300) (316 . 336) (354 . 374) (#(" {" 0 1 (fontified t) 1 2 (face (rainbow-delimiters-depth-5-face) fontified t)) . 370) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (398 . 400) (399 . 414) (#("}" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . 399) (401 . 418) 398 (t 26105 24582 560614 727000)) nil (26105 24696 225875 219000) 0 nil])
([nil nil ((247 . 260)) nil (26105 24696 225870 417000) 0 nil])
([nil nil ((260 . 267)) nil (26105 24696 225869 882000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -263) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (#("g" 0 1 (fontified t)) . -264) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (#("e" 0 1 (fontified t)) . -265) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (#(" " 0 1 (fontified t)) . -266) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) 267) nil (26105 24696 225867 33000) 0 nil])
([nil nil ((263 . 266)) nil (26105 24696 225824 131000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -265) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) 266) nil (26105 24696 225822 762000) 0 nil])
([nil nil ((265 . 267)) nil (26105 24696 225816 671000) 0 nil])
([nil nil ((266 . 267)) nil (26105 24696 225815 835000) 0 nil])
([nil nil ((546 . 562) (531 . 535) (541 . 542)) nil (26105 24696 225814 527000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -558) (undo-tree-id1677 . -4) (undo-tree-id1678 . -4) (undo-tree-id1679 . -4) (562 . 563)) nil (26105 24696 225811 81000) 0 nil])
([nil nil ((#(" {
           " 0 1 (fontified t) 1 2 (face (rainbow-delimiters-depth-3-face) fontified t) 2 3 (fontified t) 3 14 (fontified t)) . -245) (undo-tree-id1730 . -2) (undo-tree-id1731 . -2) (#("    " 0 4 (fontified t)) . 531) (#("    }
        " 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t) 5 6 (fontified t) 6 14 (fontified t)) . 554) (undo-tree-id1732 . -5) (undo-tree-id1733 . -4) (undo-tree-id1734 . -4) (undo-tree-id1735 . -5) (undo-tree-id1736 . -5) (undo-tree-id1737 . -5) (undo-tree-id1738 . -5) (undo-tree-id1739 . -5) (undo-tree-id1740 . -5) (undo-tree-id1741 . -5) (undo-tree-id1742 . -5) (undo-tree-id1743 . -5) (undo-tree-id1744 . -5) (undo-tree-id1745 . -5) (undo-tree-id1746 . -5) (undo-tree-id1747 . -5) (569 . 570) 317 (t 26105 24696 237288 312000)) nil (26105 24705 469923 923000) 0 nil])
([nil nil ((#("println!(\"Hello, world!\");" 0 8 (face rust-builtin-formatting-macro fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t) 9 24 (face font-lock-string-face fontified t) 24 25 (face (rainbow-delimiters-depth-2-face) fontified t) 25 26 (fontified t)) . 843) (undo-tree-id1798 . -26) (undo-tree-id1799 . -26) (undo-tree-id1800 . -26) (undo-tree-id1801 . -26) (undo-tree-id1802 . -26) (undo-tree-id1803 . -26) (undo-tree-id1804 . -26) (undo-tree-id1805 . -26) (undo-tree-id1806 . -26) (undo-tree-id1807 . -26) (undo-tree-id1808 . -26) (undo-tree-id1809 . -26) (t 26105 24705 480622 206000)) nil (26105 24751 56468 215000) 0 nil])
([nil nil ((843 . 845)) nil (26105 24751 56459 816000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -843) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) (undo-tree-id1793 . -1) (#("t" 0 1 (fontified t)) . -844) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) 845) nil (26105 24751 56458 529000) 0 nil])
([nil nil ((843 . 849)) nil (26105 24751 56449 364000) 0 nil])
([nil nil ((45 . 53) (843 . 843) (843 . 849) (#("thread" 0 6 (fontified nil)) . 843) (843 . 849) (#("thread (use std::thread)" 0 24 (fontified nil)) . -843) (843 . 867) (#("thread" 0 6 (fontified t)) . -843) (undo-tree-id1773 . -6) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (undo-tree-id1776 . -2) (undo-tree-id1777 . -3) (undo-tree-id1778 . -4) (undo-tree-id1779 . -4) (undo-tree-id1780 . -4) (undo-tree-id1781 . -5) (undo-tree-id1782 . -6) (undo-tree-id1783 . -6) (undo-tree-id1784 . -6) 849) nil (26105 24751 56447 979000) 0 nil])
([nil nil ((857 . 858)) nil (26105 24751 56438 361000) 0 nil])
([nil nil ((858 . 861)) nil (26105 24751 56437 888000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 865 870 nil nil nil t #s(yas--exit 871 nil))) #s(yas--exit 871 nil) 16 nil #s(yas--field 1 865 870 nil nil nil t #s(yas--exit 871 nil)) nil nil)) (859 . 867) (#("spawn(${1:f})$0" 0 15 (fontified nil)) . 859) (859 . 874) (#("sp" 0 2 (fontified nil)) . 859) (859 . 861) (#("spawn(…)" 0 8 (fontified nil)) . -859) (859 . 867) (#("sp" 0 2 (fontified t)) . -859) (undo-tree-id1768 . -2) (undo-tree-id1769 . -1) (undo-tree-id1770 . -2) (undo-tree-id1771 . -2) (undo-tree-id1772 . -2) 861) nil (26105 24751 56436 528000) 0 nil])
([nil nil ((866 . 870) (#("f" 0 1 (fontified nil)) . 866) (undo-tree-id1767 . -1) (865 . 866)) nil (26105 24751 56431 372000) 0 nil])
([nil nil ((apply yas--snippet-revive 859 871 #s(yas--snippet nil (#s(yas--field 1 865 870 nil nil nil t #s(yas--exit 871 nil))) #s(yas--exit 871 nil) 16 nil #s(yas--field 1 865 870 nil nil nil t #s(yas--exit 871 nil)) nil nil))) nil (26105 24751 56429 760000) 0 nil])
([nil nil ((871 . 872)) nil (26105 24751 56429 211000) 0 nil])
([nil nil ((871 . 875) (#("        " 0 8 (fontified nil)) . 870) (870 . 878) (#("    " 0 4 (fontified nil)) . 870) (undo-tree-id1763 . -4) (undo-tree-id1764 . -4) (undo-tree-id1765 . -4) (undo-tree-id1766 . -4) (869 . 875)) nil (26105 24751 56428 45000) 0 nil])
([nil nil ((870 . 878)) nil (26105 24751 56424 415000) 0 nil])
([nil nil ((851 . 858)) nil (26105 24751 56423 692000) 0 nil])
([nil nil ((#("g" 0 1 (face font-lock-variable-name-face fontified t)) . -856) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -857) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) 858) nil (26105 24751 56421 110000) 0 nil])
([nil nil ((856 . 865)) nil (26105 24751 56400 422000) 0 nil])
([nil nil ((892 . 893) (t 26105 24751 67291 640000)) nil (26105 24829 958843 268000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -892) (undo-tree-id2130 . -1) (undo-tree-id2131 . -1) (undo-tree-id2132 . -1) 893) nil (26105 24829 958842 280000) 0 nil])
([nil nil ((892 . 893)) nil (26105 24829 958839 609000) 0 nil])
([nil nil ((#("S" 0 1 (face font-lock-type-face fontified t)) . -892) (undo-tree-id2125 . -1) (undo-tree-id2126 . -1) (undo-tree-id2127 . -1) (undo-tree-id2128 . -1) (undo-tree-id2129 . -1) 893) nil (26105 24829 958838 731000) 0 nil])
([nil nil ((892 . 893)) nil (26105 24829 958834 632000) 0 nil])
([nil nil ((893 . 894)) nil (26105 24829 958834 100000) 0 nil])
([nil nil ((892 . 897) (#("ST" 0 2 (fontified nil)) . 892) (892 . 894) (#("STATE" 0 5 (fontified nil)) . -892) (892 . 897) (#("ST" 0 2 (face font-lock-type-face fontified t)) . -892) (undo-tree-id2111 . -2) (undo-tree-id2112 . -1) (undo-tree-id2113 . -1) (undo-tree-id2114 . -1) (undo-tree-id2115 . -1) (undo-tree-id2116 . -1) (undo-tree-id2117 . -1) (undo-tree-id2118 . -1) (undo-tree-id2119 . -1) (undo-tree-id2120 . -1) (undo-tree-id2121 . -2) (undo-tree-id2122 . -2) (undo-tree-id2123 . -2) (undo-tree-id2124 . -2) 894) nil (26105 24829 958832 515000) 0 nil])
([nil nil ((897 . 899)) nil (26105 24829 958822 510000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -898) (undo-tree-id2104 . -1) (undo-tree-id2105 . -1) (undo-tree-id2106 . -1) (undo-tree-id2107 . -1) (undo-tree-id2108 . -1) (undo-tree-id2109 . -1) (undo-tree-id2110 . -1) 899) nil (26105 24829 958821 602000) 0 nil])
([nil nil ((898 . 899)) nil (26105 24829 958816 190000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -898) (undo-tree-id2098 . -1) (undo-tree-id2099 . -1) (undo-tree-id2100 . -1) (undo-tree-id2101 . -1) (undo-tree-id2102 . -1) (undo-tree-id2103 . -1) 899) nil (26105 24829 958815 288000) 0 nil])
([nil nil ((898 . 899)) nil (26105 24829 958810 971000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -898) (undo-tree-id2092 . -1) (undo-tree-id2093 . -1) (undo-tree-id2094 . -1) (undo-tree-id2095 . -1) (undo-tree-id2096 . -1) (undo-tree-id2097 . -1) 899) nil (26105 24829 958810 7000) 0 nil])
([nil nil ((898 . 900)) nil (26105 24829 958805 499000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -898) (undo-tree-id2076 . -1) (undo-tree-id2077 . -1) (undo-tree-id2078 . -1) (undo-tree-id2079 . -1) (undo-tree-id2080 . -1) (undo-tree-id2081 . -1) (undo-tree-id2082 . -1) (undo-tree-id2083 . -1) (undo-tree-id2084 . -1) (undo-tree-id2085 . -1) (undo-tree-id2086 . -1) (#("t" 0 1 (fontified t)) . -899) (undo-tree-id2087 . -1) (undo-tree-id2088 . -1) (undo-tree-id2089 . -1) (undo-tree-id2090 . -1) (undo-tree-id2091 . -1) 900) nil (26105 24829 958804 222000) 0 nil])
([nil nil ((898 . 899)) nil (26105 24829 958792 668000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 903 939 nil nil nil t #s(yas--exit 940 nil))) #s(yas--exit 940 nil) 17 nil #s(yas--field 1 903 939 nil nil nil t #s(yas--exit 940 nil)) nil nil)) (898 . 909) (#("load(${1:order})$0" 0 18 (fontified nil)) . 898) (898 . 916) (#("l" 0 1 (fontified nil)) . 898) (898 . 899) (#("load(…)" 0 7 (fontified nil)) . -898) (898 . 905) (#("l" 0 1 (fontified t)) . -898) (undo-tree-id2071 . -1) (undo-tree-id2072 . -1) (undo-tree-id2073 . -1) (undo-tree-id2074 . -1) (undo-tree-id2075 . -1) 899) nil (26105 24829 958790 845000) 0 nil])
([nil nil ((904 . 905) (#("order" 0 5 (fontified nil)) . 904) (undo-tree-id2070 . -5) (903 . 904)) nil (26105 24829 958785 798000) 0 nil])
([nil nil ((apply yas--snippet-revive 903 939 #s(yas--snippet nil nil #s(yas--exit 939 nil) 18 nil nil #s(yas--field 1 903 939 nil nil nil t #s(yas--exit 940 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 939 nil) 18 nil nil #s(yas--field 1 903 939 nil nil nil t #s(yas--exit 940 nil)) nil)) (903 . 939) (#("std::sync::atomic::Ordering::Release$0" 0 38 (fontified nil)) . 903) (undo-tree-id2054 . -38) (903 . 941) (#("Or" 0 2 (fontified nil)) . 903) (undo-tree-id2055 . -2) (903 . 905) (#("std::sync::atomic::Ordering::Release" 0 36 (fontified nil)) . -903) (undo-tree-id2056 . -36) (903 . 939) (#("Or" 0 2 (face font-lock-type-face fontified t)) . -903) (undo-tree-id2057 . -2) (undo-tree-id2058 . -2) (undo-tree-id2059 . -2) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1) (undo-tree-id2065 . -2) (undo-tree-id2066 . -2) (undo-tree-id2067 . -2) (undo-tree-id2068 . -2) (undo-tree-id2069 . -2) 905) nil (26105 24829 958782 875000) 0 nil])
([nil nil ((apply yas--snippet-revive 898 940 #s(yas--snippet nil (#s(yas--field 1 903 939 nil nil nil t #s(yas--exit 940 nil))) #s(yas--exit 940 nil) 17 nil #s(yas--field 1 903 939 nil nil nil t #s(yas--exit 940 nil)) nil nil))) nil (26105 24829 958770 619000) 0 nil])
([nil nil ((892 . 894)) nil (26105 24829 958770 27000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -892) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (#("i" 0 1 (fontified t)) . -893) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) 894) nil (26105 24829 958768 668000) 0 nil])
([nil nil ((892 . 895)) nil (26105 24829 958758 885000) 0 nil])
([nil nil ((883 . 892)) nil (26105 24829 958758 262000) 0 nil])
([nil nil ((892 . 893)) nil (26105 24829 958757 676000) 0 nil])
([nil nil ((893 . 895)) nil (26105 24829 958757 90000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -893) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (#("o" 0 1 (fontified t)) . -894) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) 895) nil (26105 24829 958756 90000) 0 nil])
([nil nil ((893 . 894)) nil (26105 24829 958748 905000) 0 nil])
([nil nil ((apply yas--snippet-revive 892 921 #s(yas--snippet nil nil #s(yas--exit 911 nil) 19 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 911 nil) 19 nil nil nil nil)) (892 . 921) (#("loop {
            $0
        }" 0 31 (fontified nil)) . 892) (914 . 922) (899 . 911) (#("    " 0 4 (fontified nil)) . 899) (892 . 907) (#("lo" 0 2 (fontified nil)) . 892) (892 . 894) (#("loop" 0 4 (fontified nil)) . -892) (892 . 896) (#("lo" 0 2 (fontified t)) . -892) (undo-tree-id2017 . -2) (undo-tree-id2018 . -1) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (undo-tree-id2027 . -2) (undo-tree-id2028 . -2) (undo-tree-id2029 . -2) (undo-tree-id2030 . -2) 894) nil (26105 24829 958747 26000) 0 nil])
([nil nil ((911 . 914)) nil (26105 24829 958735 460000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -912) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (undo-tree-id2005 . -1) (undo-tree-id2006 . -1) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (undo-tree-id2011 . -1) (#("h" 0 1 (fontified t)) . -913) (undo-tree-id2012 . -1) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) (undo-tree-id2016 . -1) 914) nil (26105 24829 958734 53000) 0 nil])
([nil nil ((911 . 917) (#("t" 0 1 (fontified nil)) . 911) (911 . 912) (#("thread" 0 6 (fontified nil)) . -911) (911 . 917) (#("t" 0 1 (fontified t)) . -911) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) (undo-tree-id1997 . -1) (undo-tree-id1998 . -1) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) 912) nil (26105 24829 958723 345000) 0 nil])
([nil nil ((917 . 920)) nil (26105 24829 958684 906000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 941 967 nil nil nil t #s(yas--exit 968 nil))) #s(yas--exit 968 nil) 20 nil #s(yas--field 1 941 967 nil nil nil t #s(yas--exit 968 nil)) nil nil)) (919 . 929) (#("sleep(${1:dur})$0" 0 17 (fontified nil)) . 919) (919 . 936) (#("s" 0 1 (fontified nil)) . 919) (919 . 920) (#("sleep(…)" 0 8 (fontified nil)) . -919) (919 . 927) (#("s" 0 1 (fontified t)) . -919) (undo-tree-id1983 . -1) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) 920) nil (26105 24829 958683 459000) 0 nil])
([nil nil ((926 . 928) (#("dur" 0 3 (fontified nil)) . 926) (undo-tree-id1982 . -3) (925 . 926)) nil (26105 24829 958678 409000) 0 nil])
([nil nil ((#("u" 0 1 (face font-lock-type-face fontified t)) . -926) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) (undo-tree-id1974 . -1) (#("y" 0 1 (face font-lock-type-face fontified t)) . -927) (undo-tree-id1975 . -1) (undo-tree-id1976 . -1) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) 928) nil (26105 24829 958675 706000) 0 nil])
([nil nil ((926 . 928)) nil (26105 24829 958632 259000) 0 nil])
([nil nil ((53 . 69) (925 . 925) (925 . 933) (#("Dur" 0 3 (fontified nil)) . 925) (undo-tree-id1942 . -3) (925 . 928) (#("Duration (use std::time::Duration)" 0 34 (fontified nil)) . -925) (undo-tree-id1943 . -34) (925 . 959) (#("Dur" 0 3 (face font-lock-type-face fontified t)) . -925) (undo-tree-id1944 . -3) (undo-tree-id1945 . -3) (undo-tree-id1946 . -3) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (undo-tree-id1960 . -2) (undo-tree-id1961 . -2) (undo-tree-id1962 . -3) (undo-tree-id1963 . -3) (undo-tree-id1964 . -3) (undo-tree-id1965 . -3) 928) nil (26105 24829 958630 281000) 0 nil])
([nil nil ((949 . 955)) nil (26105 24829 958612 956000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 963 966 nil nil nil t #s(yas--exit 967 nil))) #s(yas--exit 967 nil) 21 nil #s(yas--field 1 963 966 nil nil nil t #s(yas--exit 967 nil)) #s(yas--field 1 941 967 nil nil nil t #s(yas--exit 968 nil)) nil)) (951 . 970) (#("from_millis(${1:millis})$0" 0 26 (fontified nil)) . 951) (undo-tree-id1928 . -26) (951 . 977) (#("from" 0 4 (fontified nil)) . 951) (undo-tree-id1929 . -4) (951 . 955) (#("from_millis(…)" 0 14 (fontified nil)) . -951) (undo-tree-id1930 . -14) (951 . 965) (#("from" 0 4 (fontified t)) . -951) (undo-tree-id1931 . -4) (undo-tree-id1932 . -4) (undo-tree-id1933 . -4) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -2) (undo-tree-id1937 . -3) (undo-tree-id1938 . -4) (undo-tree-id1939 . -4) (undo-tree-id1940 . -4) (undo-tree-id1941 . -4) 955) nil (26105 24829 958610 862000) 0 nil])
([nil nil ((964 . 966) (#("millis" 0 6 (fontified nil)) . 964) (undo-tree-id1927 . -6) (963 . 964)) nil (26105 24829 958599 590000) 0 nil])
([nil nil ((apply yas--snippet-revive 935 968 #s(yas--snippet nil (#s(yas--field 1 941 967 nil nil nil t #s(yas--exit 968 nil))) #s(yas--exit 968 nil) 20 nil #s(yas--field 1 941 967 nil nil nil t #s(yas--exit 968 nil)) nil nil)) (apply yas--snippet-revive 951 967 #s(yas--snippet nil (#s(yas--field 1 963 966 nil nil nil t #s(yas--exit 967 nil))) #s(yas--exit 967 nil) 21 nil #s(yas--field 1 963 966 nil nil nil t #s(yas--exit 967 nil)) #s(yas--field 1 941 967 nil nil nil t #s(yas--exit 968 nil)) nil))) nil (26105 24829 958597 731000) 0 nil])
([nil nil ((968 . 969)) nil (26105 24829 958596 771000) 0 nil])
([nil nil ((#("if STATE.load(std::sync::atomic::Ordering::Release)" 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t) 3 8 (face font-lock-type-face fontified t) 8 9 (fontified t) 9 13 (fontified t) 13 14 (face (rainbow-delimiters-depth-4-face) fontified t) 14 17 (face font-lock-constant-face fontified t) 17 19 (fontified t) 19 23 (face font-lock-constant-face fontified t) 23 25 (fontified t) 25 31 (face font-lock-constant-face fontified t) 31 33 (fontified t) 33 41 (face font-lock-type-face fontified t) 41 43 (fontified t) 43 50 (face font-lock-type-face fontified t) 50 51 (face (rainbow-delimiters-depth-4-face) fontified t)) . 988) (undo-tree-id1814 . -8) (undo-tree-id1815 . -8) (undo-tree-id1816 . -8) (undo-tree-id1817 . -9) (undo-tree-id1818 . -9) (undo-tree-id1819 . -9) (undo-tree-id1820 . -9) (undo-tree-id1821 . -9) (undo-tree-id1822 . -9) (undo-tree-id1823 . -9) (undo-tree-id1824 . -9) (undo-tree-id1825 . -9) (undo-tree-id1826 . -9) (undo-tree-id1827 . -9) (undo-tree-id1828 . -9) (undo-tree-id1829 . -9) (undo-tree-id1830 . -9) (undo-tree-id1831 . -9) (undo-tree-id1832 . -9) (undo-tree-id1833 . -9) (undo-tree-id1834 . -9) (undo-tree-id1835 . -9) (undo-tree-id1836 . -9) (undo-tree-id1837 . -9) (undo-tree-id1838 . -9) (undo-tree-id1839 . -9) (undo-tree-id1840 . -9) (undo-tree-id1841 . -9) (undo-tree-id1842 . -9) (undo-tree-id1843 . -9) (undo-tree-id1844 . -9) (undo-tree-id1845 . -9) (undo-tree-id1846 . -9) (undo-tree-id1847 . -9) (undo-tree-id1848 . -9) (undo-tree-id1849 . -9) (undo-tree-id1850 . -9) (undo-tree-id1851 . -9) (undo-tree-id1852 . -9) (undo-tree-id1853 . -9) (undo-tree-id1854 . -9) (undo-tree-id1855 . -9) (undo-tree-id1856 . -9) (undo-tree-id1857 . -9) (undo-tree-id1858 . -9) (undo-tree-id1859 . -9) (undo-tree-id1860 . -9) (undo-tree-id1861 . -9) (undo-tree-id1862 . -9) (undo-tree-id1863 . -9) (undo-tree-id1864 . -9) (undo-tree-id1865 . -9) (undo-tree-id1866 . -9) (undo-tree-id1867 . -51) (undo-tree-id1868 . -51) (undo-tree-id1869 . -14) (undo-tree-id1870 . -14) (undo-tree-id1871 . -14) (undo-tree-id1872 . -14) (undo-tree-id1873 . -14) (undo-tree-id1874 . -14) (undo-tree-id1875 . -14) (undo-tree-id1876 . -14) (undo-tree-id1877 . -14) (undo-tree-id1878 . -14) (undo-tree-id1879 . -14) (undo-tree-id1880 . -14) (undo-tree-id1881 . -14) (undo-tree-id1882 . -14) (undo-tree-id1883 . -14) (undo-tree-id1884 . -14) (undo-tree-id1885 . -14) (undo-tree-id1886 . -14) (undo-tree-id1887 . -14) (undo-tree-id1888 . -14) (undo-tree-id1889 . -14) (undo-tree-id1890 . -50) (undo-tree-id1891 . -50) (undo-tree-id1892 . -50) (undo-tree-id1893 . -50) (undo-tree-id1894 . -50) (undo-tree-id1895 . -50) (undo-tree-id1896 . -50) (undo-tree-id1897 . -50) (undo-tree-id1898 . -51) (undo-tree-id1899 . -51) (undo-tree-id1900 . -51) (undo-tree-id1901 . -51) (undo-tree-id1902 . -51) (undo-tree-id1903 . -51) (undo-tree-id1904 . -51) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -2) (undo-tree-id1909 . -2) (undo-tree-id1910 . -3) (undo-tree-id1911 . -3) (undo-tree-id1912 . -3) (undo-tree-id1913 . -3) (undo-tree-id1914 . -3) (undo-tree-id1915 . -3) (undo-tree-id1916 . -3) (undo-tree-id1917 . -3) (undo-tree-id1918 . -3) (undo-tree-id1919 . -3) (undo-tree-id1920 . -51) (undo-tree-id1921 . -51) (undo-tree-id1922 . -51) (undo-tree-id1923 . -51) (undo-tree-id1924 . -51) (undo-tree-id1925 . -46) (undo-tree-id1926 . -51)) nil (26105 24829 958592 341000) 0 nil])
([nil nil ((969 . 982)) nil (26105 24829 958517 410000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1032 . 1033) (nil fontified nil 1032 . 1033) (nil fontified nil 1025 . 1032) (nil fontified nil 1023 . 1025) (nil fontified nil 1015 . 1023) (nil fontified nil 1013 . 1015) (nil fontified nil 1007 . 1013) (nil fontified nil 1005 . 1007) (nil fontified nil 1001 . 1005) (nil fontified nil 999 . 1001) (nil fontified nil 996 . 999) (nil fontified nil 995 . 996) (nil fontified nil 991 . 995) (nil fontified nil 990 . 991) (nil fontified nil 985 . 990) (nil fontified nil 984 . 985) (nil fontified nil 982 . 984) (982 . 1033)) nil (26105 24829 958516 258000) 0 nil])
([nil nil ((1033 . 1036)) nil (26105 24829 958513 391000) 0 nil])
([nil nil ((1037 . 1049) (#("                " 0 16 (fontified nil)) . 1036) (1036 . 1052) (#("            " 0 12 (fontified nil)) . 1036) (undo-tree-id1810 . -12) (undo-tree-id1811 . -12) (undo-tree-id1812 . -12) (undo-tree-id1813 . -12) (1035 . 1049)) nil (26105 24829 958510 761000) 0 nil])
([nil nil ((1036 . 1052)) nil (26105 24829 958497 101000) 0 nil])
([nil nil ((969 . 982) (t 26105 24830 3963 106000)) nil (26105 24843 863443 140000) 0 nil])
([nil nil ((982 . 988)) nil (26105 24843 863442 328000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -986) (undo-tree-id2310 . -1) (undo-tree-id2311 . -1) (undo-tree-id2312 . -1) (undo-tree-id2313 . -1) (undo-tree-id2314 . -1) (undo-tree-id2315 . -1) (undo-tree-id2316 . -1) (undo-tree-id2317 . -1) (undo-tree-id2318 . -1) (undo-tree-id2319 . -1) (undo-tree-id2320 . -1) (#("e" 0 1 (fontified t)) . -987) (undo-tree-id2321 . -1) (undo-tree-id2322 . -1) (undo-tree-id2323 . -1) (undo-tree-id2324 . -1) (undo-tree-id2325 . -1) (undo-tree-id2326 . -1) (undo-tree-id2327 . -1) 988) nil (26105 24843 863440 757000) 0 nil])
([nil nil ((986 . 990)) nil (26105 24843 863427 53000) 0 nil])
([nil nil ((1087 . 1088)) nil (26105 24843 863426 342000) 0 nil])
([nil nil ((1087 . 1100)) nil (26105 24843 863425 20000) 0 nil])
([nil nil ((#(" {
       " 0 1 (fontified t) 1 2 (face (rainbow-delimiters-depth-3-face) fontified t) 2 3 (fontified t) 3 10 (fontified t)) . -897) (#("    " 0 4 (fontified t)) . -923) (undo-tree-id2133 . -4) (undo-tree-id2134 . -4) (undo-tree-id2135 . -4) (undo-tree-id2136 . -4) (undo-tree-id2137 . -4) (undo-tree-id2138 . -4) (undo-tree-id2139 . -4) (undo-tree-id2140 . -4) (undo-tree-id2141 . -4) (undo-tree-id2142 . -4) (undo-tree-id2143 . -4) (undo-tree-id2144 . -4) (undo-tree-id2145 . -4) (undo-tree-id2146 . -4) (#("    " 0 4 (fontified t)) . -970) (#("
           " 0 1 (fontified t) 1 12 (fontified t)) . -990) (undo-tree-id2147 . 12) (#("
                
            " 0 1 (fontified t) 1 17 (fontified t) 17 18 (fontified t) 18 30 (fontified t)) . 1056) (undo-tree-id2148 . -1) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) (undo-tree-id2151 . -17) (undo-tree-id2152 . -17) (undo-tree-id2153 . -17) (undo-tree-id2154 . -17) (undo-tree-id2155 . -17) (undo-tree-id2156 . -17) (undo-tree-id2157 . -17) (undo-tree-id2158 . -17) (undo-tree-id2159 . -17) (undo-tree-id2160 . -17) (undo-tree-id2161 . -17) (undo-tree-id2162 . -17) (#("
" 0 1 (fontified t)) . 1087) (undo-tree-id2163 . 1) (#("           }
        " 0 11 (fontified t) 11 12 (face (rainbow-delimiters-depth-5-face) fontified t) 12 13 (fontified t) 13 21 (fontified t)) . 1089) (undo-tree-id2164 . -12) (undo-tree-id2165 . -12) (undo-tree-id2166 . -11) (undo-tree-id2167 . -11) (undo-tree-id2168 . -11) (undo-tree-id2169 . -11) (#("
        " 0 1 (fontified t) 1 9 (fontified t)) . -1111) (undo-tree-id2170 . -9) (undo-tree-id2171 . -9) (undo-tree-id2172 . -9) (undo-tree-id2173 . -9) (undo-tree-id2174 . -9) (undo-tree-id2175 . -9) (undo-tree-id2176 . -9) (undo-tree-id2177 . -9) (undo-tree-id2178 . -9) (undo-tree-id2179 . -9) (undo-tree-id2180 . -9) (undo-tree-id2181 . -9) (undo-tree-id2182 . -9) (undo-tree-id2183 . -9) (undo-tree-id2184 . -9) (undo-tree-id2185 . -9) (undo-tree-id2186 . -9) (undo-tree-id2187 . -9) (undo-tree-id2188 . -9) (undo-tree-id2189 . -9) (undo-tree-id2190 . -9) (undo-tree-id2191 . -9) (undo-tree-id2192 . -9) (undo-tree-id2193 . -9) (undo-tree-id2194 . -9) (undo-tree-id2195 . -9) (undo-tree-id2196 . -9) (undo-tree-id2197 . -9) (undo-tree-id2198 . -9) (undo-tree-id2199 . -9) (undo-tree-id2200 . -9) (undo-tree-id2201 . -9) (undo-tree-id2202 . -9) (undo-tree-id2203 . -9) (undo-tree-id2204 . -9) (undo-tree-id2205 . -9) (undo-tree-id2206 . -9) (undo-tree-id2207 . -9) (undo-tree-id2208 . -9) (undo-tree-id2209 . -9) (undo-tree-id2210 . -9) (undo-tree-id2211 . -9) (undo-tree-id2212 . -9) (undo-tree-id2213 . -9) (undo-tree-id2214 . -9) (undo-tree-id2215 . -9) (undo-tree-id2216 . -9) (undo-tree-id2217 . -9) (undo-tree-id2218 . -9) (undo-tree-id2219 . -9) (undo-tree-id2220 . -9) (undo-tree-id2221 . -9) (undo-tree-id2222 . -9) (undo-tree-id2223 . -9) (undo-tree-id2224 . -9) (undo-tree-id2225 . -9) (undo-tree-id2226 . -9) (undo-tree-id2227 . -9) (undo-tree-id2228 . -9) (undo-tree-id2229 . -9) (undo-tree-id2230 . -9) (undo-tree-id2231 . -9) (undo-tree-id2232 . -9) (undo-tree-id2233 . -9) (undo-tree-id2234 . -9) (undo-tree-id2235 . -9) (undo-tree-id2236 . -9) (undo-tree-id2237 . -9) (undo-tree-id2238 . -9) (undo-tree-id2239 . -9) (undo-tree-id2240 . -9) (undo-tree-id2241 . -9) (undo-tree-id2242 . -9) (undo-tree-id2243 . -9) (undo-tree-id2244 . -9) (undo-tree-id2245 . -9) (undo-tree-id2246 . -9) (undo-tree-id2247 . -9) (undo-tree-id2248 . -9) (undo-tree-id2249 . -9) (undo-tree-id2250 . -9) (undo-tree-id2251 . -9) (undo-tree-id2252 . -9) (undo-tree-id2253 . -9) (undo-tree-id2254 . -9) (undo-tree-id2255 . -9) (undo-tree-id2256 . -9) (undo-tree-id2257 . -9) (undo-tree-id2258 . -9) (undo-tree-id2259 . -9) (undo-tree-id2260 . -9) (undo-tree-id2261 . -9) (undo-tree-id2262 . -9) (undo-tree-id2263 . -9) (undo-tree-id2264 . -9) (undo-tree-id2265 . -9) (undo-tree-id2266 . -9) (undo-tree-id2267 . -9) (undo-tree-id2268 . -9) (undo-tree-id2269 . -9) (undo-tree-id2270 . -9) (undo-tree-id2271 . -9) (undo-tree-id2272 . -9) (undo-tree-id2273 . -9) (undo-tree-id2274 . -9) (undo-tree-id2275 . -9) (undo-tree-id2276 . -9) (undo-tree-id2277 . -9) (undo-tree-id2278 . -9) (undo-tree-id2279 . -9) (undo-tree-id2280 . -9) (undo-tree-id2281 . -9) (undo-tree-id2282 . -9) (undo-tree-id2283 . -9) (undo-tree-id2284 . -9) (undo-tree-id2285 . -9) (undo-tree-id2286 . -9) (undo-tree-id2287 . -9) (undo-tree-id2288 . -9) (undo-tree-id2289 . -9) (undo-tree-id2290 . -9) (undo-tree-id2291 . -9) (undo-tree-id2292 . -9) (undo-tree-id2293 . -9) (undo-tree-id2294 . -9) (undo-tree-id2295 . -9) (undo-tree-id2296 . -9) (undo-tree-id2297 . -9) (undo-tree-id2298 . -9) (undo-tree-id2299 . -9) (undo-tree-id2300 . -9) (undo-tree-id2301 . -9) (undo-tree-id2302 . -9) (undo-tree-id2303 . -9) (undo-tree-id2304 . -9) (undo-tree-id2305 . -9) (undo-tree-id2306 . -9) (undo-tree-id2307 . -9) (undo-tree-id2308 . -9) (undo-tree-id2309 . -9) 1120) nil (26105 24843 863414 424000) 0 nil])
([nil nil ((#("Release" 0 7 (face font-lock-type-face fontified t)) . -1016) (undo-tree-id2391 . -7) (undo-tree-id2392 . -7) (undo-tree-id2393 . -7) (undo-tree-id2394 . -7) (undo-tree-id2395 . -7) (undo-tree-id2396 . -7) (undo-tree-id2397 . -7) (undo-tree-id2398 . -7) (undo-tree-id2399 . -7) (undo-tree-id2400 . -7) (undo-tree-id2401 . -7) (undo-tree-id2402 . -7) (undo-tree-id2403 . -7) (undo-tree-id2404 . -7) (undo-tree-id2405 . -7) (undo-tree-id2406 . -7) (undo-tree-id2407 . -7) (undo-tree-id2408 . -7) (undo-tree-id2409 . -7) (undo-tree-id2410 . -7) 1023 (t 26105 24843 877297 274000)) nil (26105 24859 56287 344000) 0 nil])
([nil nil ((1016 . 1019)) nil (26105 24859 56273 346000) 0 nil])
([nil nil ((#("k" 0 1 (face font-lock-type-face fontified t)) . -1018) (undo-tree-id2379 . -1) (undo-tree-id2380 . -1) (undo-tree-id2381 . -1) (undo-tree-id2382 . -1) (undo-tree-id2383 . -1) (undo-tree-id2384 . -1) (undo-tree-id2385 . -1) (undo-tree-id2386 . -1) (undo-tree-id2387 . -1) (undo-tree-id2388 . -1) (undo-tree-id2389 . -1) (undo-tree-id2390 . -1) 1019) nil (26105 24859 56272 196000) 0 nil])
([nil nil ((1018 . 1020)) nil (26105 24859 56263 382000) 0 nil])
([nil nil ((1020 . 1021)) nil (26105 24859 56262 133000) 0 nil])
([nil nil ((apply yas--snippet-revive 1016 1023 #s(yas--snippet nil nil #s(yas--exit 1023 nil) 22 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1023 nil) 22 nil nil nil nil)) (1016 . 1023) (#("Relaxed$0" 0 9 (fontified nil)) . 1016) (1016 . 1025) (#("Relax" 0 5 (fontified nil)) . 1016) (1016 . 1021) (#("Relaxed" 0 7 (fontified nil)) . -1016) (1016 . 1023) (#("Relax" 0 5 (face font-lock-type-face fontified t)) . -1016) (undo-tree-id2328 . -5) (undo-tree-id2329 . -5) (undo-tree-id2330 . -1) (undo-tree-id2331 . -1) (undo-tree-id2332 . -1) (undo-tree-id2333 . -1) (undo-tree-id2334 . -1) (undo-tree-id2335 . -1) (undo-tree-id2336 . -1) (undo-tree-id2337 . -1) (undo-tree-id2338 . -1) (undo-tree-id2339 . -2) (undo-tree-id2340 . -2) (undo-tree-id2341 . -2) (undo-tree-id2342 . -2) (undo-tree-id2343 . -2) (undo-tree-id2344 . -2) (undo-tree-id2345 . -2) (undo-tree-id2346 . -2) (undo-tree-id2347 . -2) (undo-tree-id2348 . -2) (undo-tree-id2349 . -2) (undo-tree-id2350 . -2) (undo-tree-id2351 . -2) (undo-tree-id2352 . -2) (undo-tree-id2353 . -2) (undo-tree-id2354 . -2) (undo-tree-id2355 . -3) (undo-tree-id2356 . -3) (undo-tree-id2357 . -3) (undo-tree-id2358 . -4) (undo-tree-id2359 . -4) (undo-tree-id2360 . -4) (undo-tree-id2361 . -4) (undo-tree-id2362 . -4) (undo-tree-id2363 . -4) (undo-tree-id2364 . -4) (undo-tree-id2365 . -4) (undo-tree-id2366 . -4) (undo-tree-id2367 . -4) (undo-tree-id2368 . -4) (undo-tree-id2369 . -4) (undo-tree-id2370 . -4) (undo-tree-id2371 . -5) (undo-tree-id2372 . -5) (undo-tree-id2373 . -5) (undo-tree-id2374 . -5) (undo-tree-id2375 . -5) (undo-tree-id2376 . -5) (undo-tree-id2377 . -5) (undo-tree-id2378 . -5) 1021) nil (26105 24859 56256 595000) 0 nil])
([nil nil ((1028 . 1036) (#("            " 0 12 (fontified nil)) . 1027) (undo-tree-id2639 . -8) (undo-tree-id2640 . -8) (undo-tree-id2641 . -8) (undo-tree-id2642 . -8) (1035 . 1039) (1026 . 1036) (t 26105 24859 100631 523000)) nil (26105 24877 341859 239000) 0 nil])
([nil nil ((1027 . 1039)) nil (26105 24877 341855 370000) 0 nil])
([nil nil ((1039 . 1042)) nil (26105 24877 341854 754000) 0 nil])
([nil nil ((apply yas--snippet-revive 1039 1049 #s(yas--snippet nil nil #s(yas--exit 1048 nil) 23 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1048 nil) 23 nil nil nil nil)) (1039 . 1049) (#("println!($0)" 0 12 (fontified nil)) . 1039) (1039 . 1051) (#("pri" 0 3 (fontified nil)) . 1039) (1039 . 1042) (#("println!(…)" 0 11 (fontified nil)) . -1039) (1039 . 1050) (#("pri" 0 3 (fontified t)) . -1039) (undo-tree-id2630 . -3) (undo-tree-id2631 . -1) (undo-tree-id2632 . -1) (undo-tree-id2633 . -2) (undo-tree-id2634 . -2) (undo-tree-id2635 . -3) (undo-tree-id2636 . -3) (undo-tree-id2637 . -3) (undo-tree-id2638 . -3) 1042) nil (26105 24877 341853 383000) 0 nil])
([nil nil ((1048 . 1050)) nil (26105 24877 341845 576000) 0 nil])
([nil nil ((1049 . 1050)) nil (26105 24877 341844 895000) 0 nil])
([nil nil ((#("S" 0 1 (face font-lock-string-face fontified t)) . -1049) (undo-tree-id2624 . -1) (undo-tree-id2625 . -1) (undo-tree-id2626 . -1) (undo-tree-id2627 . -1) (undo-tree-id2628 . -1) (undo-tree-id2629 . -1) 1050) nil (26105 24877 341843 829000) 0 nil])
([nil nil ((1049 . 1058)) nil (26105 24877 341838 320000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-string-face fontified t)) . -1049) (undo-tree-id2411 . -1) (undo-tree-id2412 . -1) (undo-tree-id2413 . -1) (undo-tree-id2414 . -1) (undo-tree-id2415 . -1) (undo-tree-id2416 . -1) (undo-tree-id2417 . -1) (undo-tree-id2418 . -1) (undo-tree-id2419 . -1) (undo-tree-id2420 . -1) (undo-tree-id2421 . -1) (undo-tree-id2422 . -1) (undo-tree-id2423 . -1) (undo-tree-id2424 . -1) (undo-tree-id2425 . -1) (undo-tree-id2426 . -1) (undo-tree-id2427 . -1) (undo-tree-id2428 . -1) (undo-tree-id2429 . -1) (undo-tree-id2430 . -1) (undo-tree-id2431 . -1) (undo-tree-id2432 . -1) (undo-tree-id2433 . -1) (undo-tree-id2434 . -1) (undo-tree-id2435 . -1) (undo-tree-id2436 . -1) (undo-tree-id2437 . -1) (undo-tree-id2438 . -1) (undo-tree-id2439 . -1) (undo-tree-id2440 . -1) (undo-tree-id2441 . -1) (undo-tree-id2442 . -1) (undo-tree-id2443 . -1) (undo-tree-id2444 . -1) (undo-tree-id2445 . -1) (undo-tree-id2446 . -1) (undo-tree-id2447 . -1) (undo-tree-id2448 . -1) (undo-tree-id2449 . -1) (undo-tree-id2450 . -1) (undo-tree-id2451 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -1050) (undo-tree-id2452 . -1) (undo-tree-id2453 . -1) (undo-tree-id2454 . -1) (undo-tree-id2455 . -1) (undo-tree-id2456 . -1) (undo-tree-id2457 . -1) (undo-tree-id2458 . -1) (undo-tree-id2459 . -1) (undo-tree-id2460 . -1) (undo-tree-id2461 . -1) (undo-tree-id2462 . -1) (undo-tree-id2463 . -1) (undo-tree-id2464 . -1) (undo-tree-id2465 . -1) (undo-tree-id2466 . -1) (undo-tree-id2467 . -1) (undo-tree-id2468 . -1) (undo-tree-id2469 . -1) (undo-tree-id2470 . -1) (undo-tree-id2471 . -1) (undo-tree-id2472 . -1) (undo-tree-id2473 . -1) (undo-tree-id2474 . -1) (undo-tree-id2475 . -1) (undo-tree-id2476 . -1) (undo-tree-id2477 . -1) (undo-tree-id2478 . -1) (undo-tree-id2479 . -1) (undo-tree-id2480 . -1) (undo-tree-id2481 . -1) (undo-tree-id2482 . -1) (undo-tree-id2483 . -1) (undo-tree-id2484 . -1) (undo-tree-id2485 . -1) (undo-tree-id2486 . -1) (undo-tree-id2487 . -1) (undo-tree-id2488 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -1051) (undo-tree-id2489 . -1) (undo-tree-id2490 . -1) (undo-tree-id2491 . -1) (undo-tree-id2492 . -1) (undo-tree-id2493 . -1) (undo-tree-id2494 . -1) (undo-tree-id2495 . -1) (undo-tree-id2496 . -1) (undo-tree-id2497 . -1) (undo-tree-id2498 . -1) (undo-tree-id2499 . -1) (undo-tree-id2500 . -1) (undo-tree-id2501 . -1) (undo-tree-id2502 . -1) (undo-tree-id2503 . -1) (undo-tree-id2504 . -1) (undo-tree-id2505 . -1) (undo-tree-id2506 . -1) (undo-tree-id2507 . -1) (undo-tree-id2508 . -1) (undo-tree-id2509 . -1) (undo-tree-id2510 . -1) (undo-tree-id2511 . -1) (undo-tree-id2512 . -1) (undo-tree-id2513 . -1) (undo-tree-id2514 . -1) (undo-tree-id2515 . -1) (undo-tree-id2516 . -1) (undo-tree-id2517 . -1) (undo-tree-id2518 . -1) (undo-tree-id2519 . -1) (undo-tree-id2520 . -1) (undo-tree-id2521 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -1052) (undo-tree-id2522 . -1) (undo-tree-id2523 . -1) (undo-tree-id2524 . -1) (undo-tree-id2525 . -1) (undo-tree-id2526 . -1) (undo-tree-id2527 . -1) (undo-tree-id2528 . -1) (undo-tree-id2529 . -1) (undo-tree-id2530 . -1) (undo-tree-id2531 . -1) (undo-tree-id2532 . -1) (undo-tree-id2533 . -1) (undo-tree-id2534 . -1) (undo-tree-id2535 . -1) (undo-tree-id2536 . -1) (undo-tree-id2537 . -1) (undo-tree-id2538 . -1) (undo-tree-id2539 . -1) (undo-tree-id2540 . -1) (undo-tree-id2541 . -1) (undo-tree-id2542 . -1) (undo-tree-id2543 . -1) (undo-tree-id2544 . -1) (undo-tree-id2545 . -1) (undo-tree-id2546 . -1) (undo-tree-id2547 . -1) (undo-tree-id2548 . -1) (undo-tree-id2549 . -1) (undo-tree-id2550 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -1053) (undo-tree-id2551 . -1) (undo-tree-id2552 . -1) (undo-tree-id2553 . -1) (undo-tree-id2554 . -1) (undo-tree-id2555 . -1) (undo-tree-id2556 . -1) (undo-tree-id2557 . -1) (undo-tree-id2558 . -1) (undo-tree-id2559 . -1) (undo-tree-id2560 . -1) (undo-tree-id2561 . -1) (undo-tree-id2562 . -1) (undo-tree-id2563 . -1) (undo-tree-id2564 . -1) (undo-tree-id2565 . -1) (undo-tree-id2566 . -1) (undo-tree-id2567 . -1) (undo-tree-id2568 . -1) (undo-tree-id2569 . -1) (undo-tree-id2570 . -1) (undo-tree-id2571 . -1) (undo-tree-id2572 . -1) (undo-tree-id2573 . -1) (undo-tree-id2574 . -1) (undo-tree-id2575 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1054) (undo-tree-id2576 . -1) (undo-tree-id2577 . -1) (undo-tree-id2578 . -1) (undo-tree-id2579 . -1) (undo-tree-id2580 . -1) (undo-tree-id2581 . -1) (undo-tree-id2582 . -1) (undo-tree-id2583 . -1) (undo-tree-id2584 . -1) (undo-tree-id2585 . -1) (undo-tree-id2586 . -1) (undo-tree-id2587 . -1) (undo-tree-id2588 . -1) (undo-tree-id2589 . -1) (undo-tree-id2590 . -1) (undo-tree-id2591 . -1) (undo-tree-id2592 . -1) (undo-tree-id2593 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -1055) (undo-tree-id2594 . -1) (undo-tree-id2595 . -1) (undo-tree-id2596 . -1) (undo-tree-id2597 . -1) (undo-tree-id2598 . -1) (undo-tree-id2599 . -1) (undo-tree-id2600 . -1) (undo-tree-id2601 . -1) (undo-tree-id2602 . -1) (undo-tree-id2603 . -1) (undo-tree-id2604 . -1) (undo-tree-id2605 . -1) (undo-tree-id2606 . -1) (undo-tree-id2607 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -1056) (undo-tree-id2608 . -1) (undo-tree-id2609 . -1) (undo-tree-id2610 . -1) (undo-tree-id2611 . -1) (undo-tree-id2612 . -1) (undo-tree-id2613 . -1) (undo-tree-id2614 . -1) (undo-tree-id2615 . -1) (undo-tree-id2616 . -1) (undo-tree-id2617 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -1057) (undo-tree-id2618 . -1) (undo-tree-id2619 . -1) (undo-tree-id2620 . -1) (undo-tree-id2621 . -1) (undo-tree-id2622 . -1) (undo-tree-id2623 . -1) 1058) nil (26105 24877 341827 730000) 0 nil])
([nil nil ((1049 . 1057)) nil (26105 24877 341574 789000) 0 nil])
([nil nil ((1059 . 1060)) nil (26105 24877 341571 93000) 0 nil])
([nil nil ((972 . 984) (1039 . 1043) (1069 . 1073) (1070 . 1078) (t 26105 24877 353965 961000)) nil (26105 24881 282893 230000) 0 nil])
([nil nil ((#("   match event.name {
        Some(string) => println!(\"User wrote {:?}\", string),
        None => (),
    }" 0 3 (fontified t) 3 8 (face font-lock-keyword-face fontified t) 8 20 (fontified t) 20 21 (face (rainbow-delimiters-depth-2-face) fontified t) 21 22 (fontified t) 22 30 (fontified t) 30 34 (face font-lock-type-face fontified t) 34 35 (face (rainbow-delimiters-depth-3-face) fontified t) 35 41 (fontified t) 41 42 (face (rainbow-delimiters-depth-3-face) fontified t) 42 44 (fontified t) 44 45 (fontified t syntax-table (1)) 45 46 (fontified t) 46 54 (face rust-builtin-formatting-macro fontified t) 54 55 (face (rainbow-delimiters-depth-3-face) fontified t) 55 67 (face font-lock-string-face fontified t) 67 71 (face rust-string-interpolation fontified t) 71 72 (face font-lock-string-face fontified t) 72 80 (fontified t) 80 81 (face (rainbow-delimiters-depth-3-face) fontified t) 81 91 (fontified t) 91 95 (face font-lock-type-face fontified t) 95 97 (fontified t) 97 98 (fontified t syntax-table (1)) 98 99 (fontified t) 99 100 (face (rainbow-delimiters-depth-3-face) fontified t) 100 101 (face (rainbow-delimiters-depth-3-face) fontified t) 101 103 (fontified t) 103 107 (fontified t) 107 108 (face (rainbow-delimiters-depth-2-face) fontified t)) . 627) (undo-tree-id2724 . -108) (undo-tree-id2725 . -21) (undo-tree-id2726 . -108) (undo-tree-id2727 . -108) (undo-tree-id2728 . -108) (undo-tree-id2729 . -90) (undo-tree-id2730 . -89) (undo-tree-id2731 . -27) (undo-tree-id2732 . -26) (undo-tree-id2733 . -2) (undo-tree-id2734 . -108) (undo-tree-id2735 . -108) (undo-tree-id2736 . -108) (undo-tree-id2737 . -108) (undo-tree-id2738 . -89) (undo-tree-id2739 . -88) (undo-tree-id2740 . -87) (undo-tree-id2741 . -86) (undo-tree-id2742 . -85) (undo-tree-id2743 . -23) (undo-tree-id2744 . -22) (undo-tree-id2745 . -108) (undo-tree-id2746 . -108) (undo-tree-id2747 . -108) (t 26105 24881 283966 197000)) nil (26105 24910 241003 901000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -625) (undo-tree-id2643 . -1) (undo-tree-id2644 . -1) (undo-tree-id2645 . -1) (undo-tree-id2646 . -1) (undo-tree-id2647 . -1) (undo-tree-id2648 . -1) (undo-tree-id2649 . -1) (undo-tree-id2650 . -1) (undo-tree-id2651 . -1) (undo-tree-id2652 . -1) (undo-tree-id2653 . -1) (undo-tree-id2654 . -1) (undo-tree-id2655 . -1) (undo-tree-id2656 . -1) (undo-tree-id2657 . -1) (undo-tree-id2658 . -1) (undo-tree-id2659 . -1) (undo-tree-id2660 . -1) (undo-tree-id2661 . -1) (undo-tree-id2662 . -1) (undo-tree-id2663 . -1) (undo-tree-id2664 . -1) (undo-tree-id2665 . -1) (undo-tree-id2666 . -1) (undo-tree-id2667 . -1) (undo-tree-id2668 . -1) (undo-tree-id2669 . -1) (undo-tree-id2670 . -1) (undo-tree-id2671 . -1) (undo-tree-id2672 . -1) (undo-tree-id2673 . -1) (undo-tree-id2674 . -1) (undo-tree-id2675 . -1) (undo-tree-id2676 . -1) (undo-tree-id2677 . -1) (undo-tree-id2678 . -1) (undo-tree-id2679 . -1) (undo-tree-id2680 . -1) (undo-tree-id2681 . -1) (undo-tree-id2682 . -1) (undo-tree-id2683 . -1) (undo-tree-id2684 . -1) (undo-tree-id2685 . -1) (undo-tree-id2686 . -1) (undo-tree-id2687 . -1) (#(" " 0 1 (fontified t)) . -626) (undo-tree-id2688 . -1) (undo-tree-id2689 . -1) (undo-tree-id2690 . -1) (undo-tree-id2691 . -1) (undo-tree-id2692 . -1) (undo-tree-id2693 . -1) (undo-tree-id2694 . -1) (undo-tree-id2695 . -1) (undo-tree-id2696 . -1) (undo-tree-id2697 . -1) (undo-tree-id2698 . -1) (undo-tree-id2699 . -1) (undo-tree-id2700 . -1) (undo-tree-id2701 . -1) (undo-tree-id2702 . -1) (undo-tree-id2703 . -1) (undo-tree-id2704 . -1) (undo-tree-id2705 . -1) (undo-tree-id2706 . -1) (undo-tree-id2707 . -1) (undo-tree-id2708 . -1) (undo-tree-id2709 . -1) (undo-tree-id2710 . -1) (undo-tree-id2711 . -1) (undo-tree-id2712 . -1) (undo-tree-id2713 . -1) (undo-tree-id2714 . -1) (undo-tree-id2715 . -1) (undo-tree-id2716 . -1) (undo-tree-id2717 . -1) (undo-tree-id2718 . -1) (undo-tree-id2719 . -1) (undo-tree-id2720 . -1) (undo-tree-id2721 . -1) (undo-tree-id2722 . -1) (undo-tree-id2723 . -1) 627) nil (26105 24910 240981 186000) 0 nil])
([nil nil ((#("state" 0 5 (fontified t)) . -473) (undo-tree-id2796 . -5) (undo-tree-id2797 . -5) (undo-tree-id2798 . -5) (undo-tree-id2799 . -5) (undo-tree-id2800 . -5) (undo-tree-id2801 . -5) (undo-tree-id2802 . -5) (undo-tree-id2803 . -5) (undo-tree-id2804 . -5) (undo-tree-id2805 . -5) 478 (t 26105 24910 287301 289000)) nil (26105 24985 780037 781000) 0 nil])
([nil nil ((#("current_" 0 8 (fontified t)) . -465) (undo-tree-id2784 . -8) (undo-tree-id2785 . -8) (undo-tree-id2786 . -8) (undo-tree-id2787 . -8) (undo-tree-id2788 . -8) (undo-tree-id2789 . -8) (undo-tree-id2790 . -8) (undo-tree-id2791 . -8) (undo-tree-id2792 . -8) (undo-tree-id2793 . -8) (undo-tree-id2794 . -8) (undo-tree-id2795 . -8) 473) nil (26105 24985 780029 317000) 0 nil])
([nil nil ((465 . 466)) nil (26105 24985 780020 329000) 0 nil])
([nil nil ((#("not()" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-6-face) fontified t) 4 5 (face (rainbow-delimiters-depth-6-face) fontified t)) . -487) (undo-tree-id2775 . -5) (undo-tree-id2776 . -5) (undo-tree-id2777 . -3) (undo-tree-id2778 . -4) (undo-tree-id2779 . -4) (undo-tree-id2780 . -4) (undo-tree-id2781 . -5) (undo-tree-id2782 . -5) (undo-tree-id2783 . -5) 492) nil (26105 24985 780019 270000) 0 nil])
([nil nil ((#("state." 0 6 (fontified t)) . -481) (undo-tree-id2763 . -6) (undo-tree-id2764 . -6) (undo-tree-id2765 . -5) (undo-tree-id2766 . -6) (undo-tree-id2767 . -6) (undo-tree-id2768 . -6) (undo-tree-id2769 . -6) (undo-tree-id2770 . -6) (undo-tree-id2771 . -6) (undo-tree-id2772 . -6) (undo-tree-id2773 . -6) (undo-tree-id2774 . -6) 487) nil (26105 24985 780011 470000) 0 nil])
([nil nil ((#("current_" 0 8 (fontified t)) . -473) (undo-tree-id2748 . -8) (undo-tree-id2749 . -8) (undo-tree-id2750 . -7) (undo-tree-id2751 . -8) (undo-tree-id2752 . -8) (undo-tree-id2753 . -8) (undo-tree-id2754 . -8) (undo-tree-id2755 . -8) (undo-tree-id2756 . -8) (undo-tree-id2757 . -8) (undo-tree-id2758 . -8) (undo-tree-id2759 . -8) (undo-tree-id2760 . -8) (undo-tree-id2761 . -8) (undo-tree-id2762 . -8) 481) nil (26105 24985 780000 829000) 0 nil])
([nil nil ((473 . 475)) nil (26105 24985 779979 194000) 0 nil])
([nil nil ((#("Relaxed" 0 7 (face font-lock-type-face fontified t)) . -377) (undo-tree-id2818 . -7) (undo-tree-id2819 . -7) (undo-tree-id2820 . -7) (undo-tree-id2821 . -7) (undo-tree-id2822 . -7) (undo-tree-id2823 . -7) (undo-tree-id2824 . -7) (undo-tree-id2825 . -7) (undo-tree-id2826 . -7) (undo-tree-id2827 . -7) 384 (t 26105 24985 793972 532000)) nil (26105 25002 849200 732000) 0 nil])
([nil nil ((377 . 378)) nil (26105 25002 849192 645000) 0 nil])
([nil nil ((apply yas--snippet-revive 377 383 #s(yas--snippet nil nil #s(yas--exit 383 nil) 24 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 383 nil) 24 nil nil nil nil)) (377 . 383) (#("SeqCst$0" 0 8 (fontified nil)) . 377) (377 . 385) (#("S" 0 1 (fontified nil)) . 377) (377 . 378) (#("SeqCst" 0 6 (fontified nil)) . -377) (377 . 383) (#("S" 0 1 (face font-lock-type-face fontified t)) . -377) (undo-tree-id2813 . -1) (undo-tree-id2814 . -1) (undo-tree-id2815 . -1) (undo-tree-id2816 . -1) (undo-tree-id2817 . -1) 378) nil (26105 25002 849190 938000) 0 nil])
([nil nil ((#("Relaxed" 0 7 (face font-lock-type-face fontified t)) . -434) (undo-tree-id2810 . -7) (undo-tree-id2811 . -7) (undo-tree-id2812 . -7) 441) nil (26105 25002 849185 107000) 0 nil])
([nil nil ((434 . 435)) nil (26105 25002 849181 539000) 0 nil])
([nil nil ((apply yas--snippet-revive 434 440 #s(yas--snippet nil nil #s(yas--exit 440 nil) 25 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 440 nil) 25 nil nil nil nil)) (434 . 440) (#("SeqCst$0" 0 8 (fontified nil)) . 434) (434 . 442) (#("S" 0 1 (fontified nil)) . 434) (434 . 435) (#("SeqCst" 0 6 (fontified nil)) . -434) (434 . 440) (#("S" 0 1 (face font-lock-type-face fontified t)) . -434) (undo-tree-id2806 . -1) (undo-tree-id2807 . -1) (undo-tree-id2808 . -1) (undo-tree-id2809 . -1) 435) nil (26105 25002 849177 434000) 0 nil])
([nil nil ((278 . 291) (t 26105 25002 863973 562000)) nil (26105 25053 206327 864000) 0 nil])
([nil nil ((291 . 296)) nil (26105 25053 206327 79000) 0 nil])
([nil nil ((apply yas--snippet-revive 291 301 #s(yas--snippet nil nil #s(yas--exit 300 nil) 26 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 300 nil) 26 nil nil nil nil)) (291 . 301) (#("println!($0)" 0 12 (fontified nil)) . 291) (291 . 303) (#("print" 0 5 (fontified nil)) . 291) (291 . 296) (#("println!(…)" 0 11 (fontified nil)) . -291) (291 . 302) (#("print" 0 5 (fontified t)) . -291) (undo-tree-id2828 . -5) (undo-tree-id2829 . -1) (undo-tree-id2830 . -1) (undo-tree-id2831 . -2) (undo-tree-id2832 . -2) (undo-tree-id2833 . -3) (undo-tree-id2834 . -3) (undo-tree-id2835 . -4) (undo-tree-id2836 . -4) (undo-tree-id2837 . -4) (undo-tree-id2838 . -4) (undo-tree-id2839 . -5) (undo-tree-id2840 . -5) (undo-tree-id2841 . -5) (undo-tree-id2842 . -5) (undo-tree-id2843 . -5) (undo-tree-id2844 . -5) 296) nil (26105 25053 206324 693000) 0 nil])
([nil nil ((300 . 302)) nil (26105 25053 206305 736000) 0 nil])
([nil nil ((301 . 306)) nil (26105 25053 206305 88000) 0 nil])
([nil nil ((306 . 315)) nil (26105 25053 206303 767000) 0 nil])
([nil nil ((317 . 318)) nil (26105 25053 206299 751000) 0 nil])
([nil nil ((598 . 600) (t 26105 25053 220643 270000)) nil (26105 25058 165112 496000) 0 nil])
([nil nil ((331 . 334) (t 26105 25058 177310 236000)) nil (26105 25145 420490 617000) 0 nil])
([nil nil ((334 . 341)) nil (26105 25145 420489 863000) 0 nil])
([nil nil ((#("unwrap()" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-4-face) fontified t) 7 8 (face (rainbow-delimiters-depth-4-face) fontified t)) . -561) (undo-tree-id3114 . -8) (undo-tree-id3115 . -5) (undo-tree-id3116 . -5) (undo-tree-id3117 . -6) (undo-tree-id3118 . -7) (undo-tree-id3119 . -8) 569) nil (26105 25145 420488 970000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -560) (undo-tree-id3106 . -1) (undo-tree-id3107 . -1) (undo-tree-id3108 . -1) (undo-tree-id3109 . -1) (undo-tree-id3110 . -1) (undo-tree-id3111 . -1) (undo-tree-id3112 . -1) (undo-tree-id3113 . -1) 561) nil (26105 25145 420483 988000) 0 nil])
([nil nil ((#("
                " 0 1 (fontified t) 1 17 (fontified t)) . -346) (#("    " 0 4 (fontified t)) . -394) (#("    " 0 4 (fontified t)) . -435) (#("    " 0 3 (fontified t) 3 4 (fontified t)) . -508) (#("    " 0 4 (fontified t)) . 538) (#("
                " 0 1 (fontified t) 1 17 (fontified t)) . -543) (undo-tree-id2897 . -7) (undo-tree-id2898 . -7) (undo-tree-id2899 . -7) (undo-tree-id2900 . -7) (undo-tree-id2901 . -7) (undo-tree-id2902 . -7) (undo-tree-id2903 . -7) (undo-tree-id2904 . -7) (undo-tree-id2905 . -7) (undo-tree-id2906 . -7) (undo-tree-id2907 . -7) (undo-tree-id2908 . -7) (undo-tree-id2909 . -7) (undo-tree-id2910 . -7) (undo-tree-id2911 . -7) (undo-tree-id2912 . -7) (undo-tree-id2913 . -7) (undo-tree-id2914 . -7) (undo-tree-id2915 . -7) (undo-tree-id2916 . -7) (undo-tree-id2917 . -7) (undo-tree-id2918 . -7) (undo-tree-id2919 . -7) (undo-tree-id2920 . -7) (undo-tree-id2921 . -7) (undo-tree-id2922 . -7) (undo-tree-id2923 . -7) (undo-tree-id2924 . -7) (undo-tree-id2925 . -7) (undo-tree-id2926 . -7) (undo-tree-id2927 . -7) (undo-tree-id2928 . -7) (undo-tree-id2929 . -7) (undo-tree-id2930 . -7) (undo-tree-id2931 . -7) (undo-tree-id2932 . -7) (undo-tree-id2933 . -7) (undo-tree-id2934 . -7) (undo-tree-id2935 . -7) (undo-tree-id2936 . -7) (undo-tree-id2937 . -7) (undo-tree-id2938 . -7) (undo-tree-id2939 . -7) (undo-tree-id2940 . -7) (undo-tree-id2941 . -7) (undo-tree-id2942 . -7) (undo-tree-id2943 . -7) (undo-tree-id2944 . -7) (undo-tree-id2945 . -7) (undo-tree-id2946 . -7) (undo-tree-id2947 . -7) (undo-tree-id2948 . -7) (undo-tree-id2949 . -7) (undo-tree-id2950 . -7) (undo-tree-id2951 . -7) (undo-tree-id2952 . -7) (undo-tree-id2953 . -7) (undo-tree-id2954 . -7) (undo-tree-id2955 . -7) (undo-tree-id2956 . -7) (undo-tree-id2957 . -7) (undo-tree-id2958 . -7) (undo-tree-id2959 . -7) (undo-tree-id2960 . -7) (undo-tree-id2961 . -7) (undo-tree-id2962 . -7) (undo-tree-id2963 . -7) (undo-tree-id2964 . -7) (undo-tree-id2965 . -7) (undo-tree-id2966 . -7) (undo-tree-id2967 . -7) (undo-tree-id2968 . -7) (undo-tree-id2969 . -7) (undo-tree-id2970 . -7) (undo-tree-id2971 . -7) (undo-tree-id2972 . -7) (undo-tree-id2973 . -7) (undo-tree-id2974 . -7) (undo-tree-id2975 . -7) (undo-tree-id2976 . -7) (undo-tree-id2977 . -7) (undo-tree-id2978 . -7) (undo-tree-id2979 . -7) (undo-tree-id2980 . -7) (undo-tree-id2981 . -7) (undo-tree-id2982 . -7) (undo-tree-id2983 . -7) (undo-tree-id2984 . -7) (undo-tree-id2985 . -7) (undo-tree-id2986 . -7) (undo-tree-id2987 . -7) (undo-tree-id2988 . -7) (undo-tree-id2989 . -7) (undo-tree-id2990 . -7) (undo-tree-id2991 . -7) (undo-tree-id2992 . -7) (undo-tree-id2993 . -7) (undo-tree-id2994 . -7) (undo-tree-id2995 . -7) (undo-tree-id2996 . -7) (undo-tree-id2997 . -7) (undo-tree-id2998 . -7) (undo-tree-id2999 . -7) (undo-tree-id3000 . -7) (undo-tree-id3001 . -7) (undo-tree-id3002 . -7) (undo-tree-id3003 . -7) (undo-tree-id3004 . -7) (undo-tree-id3005 . -7) (undo-tree-id3006 . -7) (undo-tree-id3007 . -7) (undo-tree-id3008 . -7) (undo-tree-id3009 . -7) (undo-tree-id3010 . -7) (undo-tree-id3011 . -7) (undo-tree-id3012 . -7) (undo-tree-id3013 . -7) (undo-tree-id3014 . -7) (undo-tree-id3015 . -7) (undo-tree-id3016 . -7) (undo-tree-id3017 . -7) (undo-tree-id3018 . -7) (undo-tree-id3019 . -7) (undo-tree-id3020 . -7) (undo-tree-id3021 . -7) (undo-tree-id3022 . -7) (undo-tree-id3023 . -7) (undo-tree-id3024 . -7) (undo-tree-id3025 . -7) (undo-tree-id3026 . -7) (undo-tree-id3027 . -7) (undo-tree-id3028 . -7) (undo-tree-id3029 . -7) (undo-tree-id3030 . -7) (undo-tree-id3031 . -7) (undo-tree-id3032 . -7) (undo-tree-id3033 . -7) (undo-tree-id3034 . -7) (undo-tree-id3035 . -7) (undo-tree-id3036 . -7) (undo-tree-id3037 . -7) (undo-tree-id3038 . -7) (undo-tree-id3039 . -7) (undo-tree-id3040 . -7) (undo-tree-id3041 . -7) (undo-tree-id3042 . -7) (undo-tree-id3043 . -7) (undo-tree-id3044 . -7) (undo-tree-id3045 . -7) (undo-tree-id3046 . -7) (undo-tree-id3047 . -7) (undo-tree-id3048 . -7) (undo-tree-id3049 . -7) (undo-tree-id3050 . -7) (undo-tree-id3051 . -7) (undo-tree-id3052 . -7) (undo-tree-id3053 . -7) (undo-tree-id3054 . -7) (undo-tree-id3055 . -7) (undo-tree-id3056 . -7) (undo-tree-id3057 . -7) (undo-tree-id3058 . -7) (undo-tree-id3059 . -7) (undo-tree-id3060 . -7) (undo-tree-id3061 . -7) (undo-tree-id3062 . -7) (undo-tree-id3063 . -7) (undo-tree-id3064 . -7) (undo-tree-id3065 . -7) (undo-tree-id3066 . -7) (undo-tree-id3067 . -7) (undo-tree-id3068 . -7) (undo-tree-id3069 . -7) (undo-tree-id3070 . -7) (undo-tree-id3071 . -7) (undo-tree-id3072 . -7) (undo-tree-id3073 . -7) (undo-tree-id3074 . -7) (undo-tree-id3075 . -7) (undo-tree-id3076 . -7) (undo-tree-id3077 . -7) (undo-tree-id3078 . -7) (undo-tree-id3079 . -7) (undo-tree-id3080 . -7) (undo-tree-id3081 . -7) (undo-tree-id3082 . -7) (undo-tree-id3083 . -7) (undo-tree-id3084 . -7) (undo-tree-id3085 . -7) (undo-tree-id3086 . -7) (undo-tree-id3087 . -7) (undo-tree-id3088 . -7) (undo-tree-id3089 . -7) (undo-tree-id3090 . -7) (undo-tree-id3091 . -7) (undo-tree-id3092 . -7) (undo-tree-id3093 . -17) (undo-tree-id3094 . -17) (undo-tree-id3095 . -17) (undo-tree-id3096 . -17) (undo-tree-id3097 . -17) (undo-tree-id3098 . -17) (undo-tree-id3099 . -17) (undo-tree-id3100 . -17) (undo-tree-id3101 . -17) (undo-tree-id3102 . -17) (undo-tree-id3103 . -17) (undo-tree-id3104 . -17) (undo-tree-id3105 . -17) 560) nil (26105 25145 420468 675000) 0 nil])
([nil nil ((511 . 524)) nil (26105 25145 419810 535000) 0 nil])
([nil nil ((524 . 530)) nil (26105 25145 419809 904000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -527) (undo-tree-id2870 . -1) (undo-tree-id2871 . -1) (undo-tree-id2872 . -1) (undo-tree-id2873 . -1) (undo-tree-id2874 . -1) (undo-tree-id2875 . -1) (undo-tree-id2876 . -1) (undo-tree-id2877 . -1) (undo-tree-id2878 . -1) (undo-tree-id2879 . -1) (undo-tree-id2880 . -1) (undo-tree-id2881 . -1) (undo-tree-id2882 . -1) (#("n" 0 1 (fontified t)) . -528) (undo-tree-id2883 . -1) (undo-tree-id2884 . -1) (undo-tree-id2885 . -1) (undo-tree-id2886 . -1) (undo-tree-id2887 . -1) (undo-tree-id2888 . -1) (undo-tree-id2889 . -1) (undo-tree-id2890 . -1) (undo-tree-id2891 . -1) (#("t" 0 1 (fontified t)) . -529) (undo-tree-id2892 . -1) (undo-tree-id2893 . -1) (undo-tree-id2894 . -1) (undo-tree-id2895 . -1) (undo-tree-id2896 . -1) 530) nil (26105 25145 419807 863000) 0 nil])
([nil nil ((527 . 528)) nil (26105 25145 419788 901000) 0 nil])
([nil nil ((apply yas--snippet-revive 524 534 #s(yas--snippet nil nil #s(yas--exit 533 nil) 27 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 533 nil) 27 nil nil nil nil)) (524 . 534) (#("println!($0)" 0 12 (fontified nil)) . 524) (524 . 536) (#("prin" 0 4 (fontified nil)) . 524) (524 . 528) (#("println!(…)" 0 11 (fontified nil)) . -524) (524 . 535) (#("prin" 0 4 (fontified t)) . -524) (undo-tree-id2845 . -4) (undo-tree-id2846 . -1) (undo-tree-id2847 . -1) (undo-tree-id2848 . -2) (undo-tree-id2849 . -2) (undo-tree-id2850 . -3) (undo-tree-id2851 . -3) (undo-tree-id2852 . -3) (undo-tree-id2853 . -3) (undo-tree-id2854 . -3) (undo-tree-id2855 . -3) (undo-tree-id2856 . -3) (undo-tree-id2857 . -3) (undo-tree-id2858 . -3) (undo-tree-id2859 . -3) (undo-tree-id2860 . -3) (undo-tree-id2861 . -3) (undo-tree-id2862 . -3) (undo-tree-id2863 . -3) (undo-tree-id2864 . -3) (undo-tree-id2865 . -3) (undo-tree-id2866 . -4) (undo-tree-id2867 . -4) (undo-tree-id2868 . -4) (undo-tree-id2869 . -4) 528) nil (26105 25145 419785 915000) 0 nil])
([nil nil ((533 . 536)) nil (26105 25145 419760 28000) 0 nil])
([nil nil ((537 . 538)) nil (26105 25145 419755 683000) 0 nil])
([nil nil ((533 . 535) (t 26105 25145 433982 188000)) nil (26105 25155 759981 387000) 0 nil])
([nil nil ((534 . 536)) nil (26105 25155 759980 640000) 0 nil])
([nil nil ((535 . 537)) nil (26105 25155 759979 992000) 0 nil])
([nil nil ((#("/" 0 1 (face rust-string-interpolation fontified t)) . -536) (undo-tree-id3125 . -1) (undo-tree-id3126 . -1) (undo-tree-id3127 . -1) (undo-tree-id3128 . -1) 537) nil (26105 25155 759979 15000) 0 nil])
([nil nil ((536 . 537)) nil (26105 25155 759974 840000) 0 nil])
([nil nil ((539 . 541)) nil (26105 25155 759973 921000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -540) (undo-tree-id3120 . -1) (undo-tree-id3121 . -1) (undo-tree-id3122 . -1) (undo-tree-id3123 . -1) (undo-tree-id3124 . -1) 541) nil (26105 25155 759971 749000) 0 nil])
([nil nil ((540 . 541)) nil (26105 25155 759958 708000) 0 nil])
([nil nil ((995 . 1000) (t 26105 25155 773982 816000)) nil (26105 25183 517707 977000) 0 nil])
([nil nil ((1000 . 1001)) nil (26105 25183 517707 294000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t)) . -1000) (undo-tree-id3163 . -1) (undo-tree-id3164 . -1) (undo-tree-id3165 . -1) (undo-tree-id3166 . -1) (undo-tree-id3167 . -1) 1001) nil (26105 25183 517706 35000) 0 nil])
([nil nil ((#("_" 0 1 (face font-lock-variable-name-face fontified t)) . -758) (undo-tree-id3153 . -1) (undo-tree-id3154 . -1) (undo-tree-id3155 . -1) (undo-tree-id3156 . -1) (undo-tree-id3157 . -1) (undo-tree-id3158 . -1) (undo-tree-id3159 . -1) (undo-tree-id3160 . -1) (undo-tree-id3161 . -1) (undo-tree-id3162 . -1) 759) nil (26105 25183 517701 709000) 0 nil])
([nil nil ((999 . 1003)) nil (26105 25183 517694 769000) 0 nil])
([nil nil ((999 . 1005) (#("hand" 0 4 (fontified nil)) . 999) (999 . 1003) (#("handle" 0 6 (fontified nil)) . -999) (999 . 1005) (#("hand" 0 4 (fontified t)) . -999) (undo-tree-id3142 . -4) (undo-tree-id3143 . -4) (undo-tree-id3144 . -1) (undo-tree-id3145 . -1) (undo-tree-id3146 . -2) (undo-tree-id3147 . -3) (undo-tree-id3148 . -4) (undo-tree-id3149 . -4) (undo-tree-id3150 . -4) (undo-tree-id3151 . -4) (undo-tree-id3152 . -4) 1003) nil (26105 25183 517693 313000) 0 nil])
([nil nil ((1005 . 1007)) nil (26105 25183 517684 320000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t)) . -1006) (undo-tree-id3138 . -1) (undo-tree-id3139 . -1) (undo-tree-id3140 . -1) (undo-tree-id3141 . -1) 1007) nil (26105 25183 517683 429000) 0 nil])
([nil nil ((1006 . 1008)) nil (26105 25183 517679 563000) 0 nil])
([nil nil ((apply yas--snippet-revive 1006 1012 #s(yas--snippet nil nil #s(yas--exit 1012 nil) 28 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1012 nil) 28 nil nil nil nil)) (1006 . 1012) (#("join()$0" 0 8 (fontified nil)) . 1006) (1006 . 1014) (#("jo" 0 2 (fontified nil)) . 1006) (1006 . 1008) (#("join()" 0 6 (fontified nil)) . -1006) (1006 . 1012) (#("jo" 0 2 (fontified t)) . -1006) (undo-tree-id3132 . -2) (undo-tree-id3133 . -1) (undo-tree-id3134 . -2) (undo-tree-id3135 . -2) (undo-tree-id3136 . -2) (undo-tree-id3137 . -2) 1008) nil (26105 25183 517677 979000) 0 nil])
([nil nil ((1012 . 1013)) nil (26105 25183 517671 185000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -1012) (undo-tree-id3129 . -1) (undo-tree-id3130 . -1) (undo-tree-id3131 . -1) 1013) nil (26105 25183 517669 130000) 0 nil])
([nil nil ((1012 . 1013)) nil (26105 25183 517655 860000) 0 nil])
([nil nil ((999 . 1007) (t 26105 25183 530651 156000)) nil (26105 25188 339970 443000) 0 nil])
([nil nil ((#("_" 0 1 (face font-lock-variable-name-face fontified t)) . -1003) (undo-tree-id3192 . -1) (undo-tree-id3193 . -1) (undo-tree-id3194 . -1) (undo-tree-id3195 . -1) (undo-tree-id3196 . -1) (undo-tree-id3197 . -1) (undo-tree-id3198 . -1) (undo-tree-id3199 . -1) (undo-tree-id3200 . -1) (undo-tree-id3201 . -1) (undo-tree-id3202 . -1) (undo-tree-id3203 . -1) (undo-tree-id3204 . -1) (undo-tree-id3205 . -1) 1004 (t 26105 25188 353984 782000)) nil (26105 25239 781571 986000) 0 nil])
([nil nil ((1003 . 1004)) nil (26105 25239 781191 718000) 0 nil])
([nil nil ((1004 . 1006)) nil (26105 25239 781191 223000) 0 nil])
([nil nil ((1023 . 1028)) nil (26105 25239 781190 632000) 0 nil])
([nil nil ((1028 . 1033)) nil (26105 25239 781189 991000) 0 nil])
([nil nil ((apply yas--snippet-revive 1028 1038 #s(yas--snippet nil nil #s(yas--exit 1037 nil) 29 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1037 nil) 29 nil nil nil nil)) (1028 . 1038) (#("println!($0)" 0 12 (fontified nil)) . 1028) (1028 . 1040) (#("print" 0 5 (fontified nil)) . 1028) (1028 . 1033) (#("println!(…)" 0 11 (fontified nil)) . -1028) (1028 . 1039) (#("print" 0 5 (fontified t)) . -1028) (undo-tree-id3183 . -5) (undo-tree-id3184 . -1) (undo-tree-id3185 . -1) (undo-tree-id3186 . -2) (undo-tree-id3187 . -3) (undo-tree-id3188 . -4) (undo-tree-id3189 . -5) (undo-tree-id3190 . -5) (undo-tree-id3191 . -5) 1033) nil (26105 25239 781188 337000) 0 nil])
([nil nil ((1037 . 1039)) nil (26105 25239 781180 454000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -1037) (undo-tree-id3173 . -1) (undo-tree-id3174 . -1) (undo-tree-id3175 . -1) (undo-tree-id3176 . -1) (undo-tree-id3177 . -1) (undo-tree-id3178 . -1) (undo-tree-id3179 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -1038) (undo-tree-id3180 . -1) (undo-tree-id3181 . -1) (undo-tree-id3182 . -1) 1039) nil (26105 25239 781179 153000) 0 nil])
([nil nil ((1037 . 1039)) nil (26105 25239 781171 61000) 0 nil])
([nil nil ((1038 . 1040)) nil (26105 25239 781170 454000) 0 nil])
([nil nil ((1039 . 1041)) nil (26105 25239 781169 838000) 0 nil])
([nil nil ((#("/" 0 1 (face rust-string-interpolation fontified t)) . -1040) (undo-tree-id3168 . -1) (undo-tree-id3169 . -1) (undo-tree-id3170 . -1) (undo-tree-id3171 . -1) (undo-tree-id3172 . -1) 1041) nil (26105 25239 781168 232000) 0 nil])
([nil nil ((1040 . 1041)) nil (26105 25239 781158 74000) 0 nil])
([nil nil ((1043 . 1048)) nil (26105 25239 781156 811000) 0 nil])
([nil nil ((1049 . 1050)) nil (26105 25239 781152 810000) 0 nil])
([nil nil ((#("    let handle = thread::spawn(|| loop {
        thread::sleep(Duration::from_millis(100));
        unsafe {
            if STATE.load(std::sync::atomic::Ordering::Relaxed) {
                println!(\"sw is on\");
            }
        }
    });" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 14 (face font-lock-variable-name-face fontified t) 14 17 (fontified t) 17 23 (face font-lock-constant-face fontified t) 23 25 (fontified t) 25 30 (fontified t) 30 31 (face (rainbow-delimiters-depth-2-face) fontified t) 31 33 (fontified t) 33 34 (fontified t) 34 38 (face font-lock-keyword-face fontified t) 38 39 (fontified t) 39 40 (face (rainbow-delimiters-depth-3-face) fontified t) 40 41 (fontified t) 41 49 (fontified t) 49 55 (face font-lock-constant-face fontified t) 55 57 (fontified t) 57 62 (fontified t) 62 63 (face (rainbow-delimiters-depth-4-face) fontified t) 63 71 (face font-lock-type-face fontified t) 71 73 (fontified t) 73 84 (fontified t) 84 85 (face (rainbow-delimiters-depth-5-face) fontified t) 85 88 (fontified t) 88 89 (face (rainbow-delimiters-depth-5-face) fontified t) 89 90 (face (rainbow-delimiters-depth-4-face) fontified t) 90 92 (fontified t) 92 100 (fontified t) 100 106 (face rust-unsafe fontified t) 106 107 (fontified t) 107 108 (face (rainbow-delimiters-depth-4-face) fontified t) 108 120 (fontified t) 120 121 (fontified t) 121 123 (face font-lock-keyword-face fontified t) 123 124 (fontified t) 124 129 (face font-lock-type-face fontified t) 129 130 (fontified t) 130 134 (fontified t) 134 135 (face (rainbow-delimiters-depth-5-face) fontified t) 135 138 (face font-lock-constant-face fontified t) 138 140 (fontified t) 140 144 (face font-lock-constant-face fontified t) 144 146 (fontified t) 146 152 (face font-lock-constant-face fontified t) 152 154 (fontified t) 154 162 (face font-lock-type-face fontified t) 162 164 (fontified t) 164 171 (face font-lock-type-face fontified t) 171 172 (face (rainbow-delimiters-depth-5-face) fontified t rear-nonsticky t) 172 173 (fontified t) 173 174 (face (rainbow-delimiters-depth-5-face) fontified t) 174 175 (fontified t) 175 187 (fontified t) 187 191 (fontified t) 191 199 (face rust-builtin-formatting-macro fontified t) 199 200 (face (rainbow-delimiters-depth-6-face) fontified t) 200 210 (face font-lock-string-face fontified t) 210 211 (face (rainbow-delimiters-depth-6-face) fontified t) 211 212 (fontified t) 212 213 (fontified t) 213 221 (fontified t) 221 225 (fontified t) 225 226 (face (rainbow-delimiters-depth-5-face) fontified t) 226 234 (fontified t) 234 235 (fontified t) 235 236 (face (rainbow-delimiters-depth-4-face) fontified t) 236 237 (fontified t) 237 241 (fontified t) 241 242 (face (rainbow-delimiters-depth-3-face) fontified t) 242 243 (face (rainbow-delimiters-depth-2-face) fontified t) 243 244 (fontified t)) . 750) (undo-tree-id3206 . -244) (undo-tree-id3207 . -121) (undo-tree-id3208 . -244) (undo-tree-id3209 . -244) (undo-tree-id3210 . -244) (undo-tree-id3211 . -243) (undo-tree-id3212 . -232) (undo-tree-id3213 . -231) (undo-tree-id3214 . -216) (undo-tree-id3215 . -177) (undo-tree-id3216 . -110) (undo-tree-id3217 . -244) (t 26105 25239 793987 900000)) nil (26105 25264 694857 20000) 0 nil])
([nil nil ((637 . 642)) nil (26105 25264 694631 989000) 0 nil])
([nil nil ((nil rear-nonsticky nil 885 . 886) (nil fontified nil 885 . 886) (nil fontified nil 884 . 885) (nil fontified nil 883 . 884) (nil fontified nil 879 . 883) (nil fontified nil 878 . 879) (nil fontified nil 877 . 878) (nil fontified nil 876 . 877) (nil fontified nil 868 . 876) (nil fontified nil 867 . 868) (nil fontified nil 863 . 867) (nil fontified nil 855 . 863) (nil fontified nil 854 . 855) (nil fontified nil 853 . 854) (nil fontified nil 852 . 853) (nil fontified nil 842 . 852) (nil fontified nil 841 . 842) (nil fontified nil 833 . 841) (nil fontified nil 829 . 833) (nil fontified nil 817 . 829) (nil fontified nil 816 . 817) (nil fontified nil 815 . 816) (nil fontified nil 814 . 815) (nil fontified nil 813 . 814) (nil fontified nil 806 . 813) (nil fontified nil 804 . 806) (nil fontified nil 796 . 804) (nil fontified nil 794 . 796) (nil fontified nil 788 . 794) (nil fontified nil 786 . 788) (nil fontified nil 782 . 786) (nil fontified nil 780 . 782) (nil fontified nil 777 . 780) (nil fontified nil 776 . 777) (nil fontified nil 772 . 776) (nil fontified nil 771 . 772) (nil fontified nil 766 . 771) (nil fontified nil 765 . 766) (nil fontified nil 763 . 765) (nil fontified nil 762 . 763) (nil fontified nil 750 . 762) (nil fontified nil 749 . 750) (nil fontified nil 748 . 749) (nil fontified nil 742 . 748) (nil fontified nil 734 . 742) (nil fontified nil 732 . 734) (nil fontified nil 731 . 732) (nil fontified nil 730 . 731) (nil fontified nil 727 . 730) (nil fontified nil 726 . 727) (nil fontified nil 715 . 726) (nil fontified nil 713 . 715) (nil fontified nil 705 . 713) (nil fontified nil 704 . 705) (nil fontified nil 699 . 704) (nil fontified nil 697 . 699) (nil fontified nil 691 . 697) (nil fontified nil 683 . 691) (nil fontified nil 682 . 683) (nil fontified nil 681 . 682) (nil fontified nil 680 . 681) (nil fontified nil 676 . 680) (nil fontified nil 675 . 676) (nil fontified nil 673 . 675) (nil fontified nil 672 . 673) (nil fontified nil 667 . 672) (nil fontified nil 665 . 667) (nil fontified nil 659 . 665) (nil fontified nil 656 . 659) (nil fontified nil 650 . 656) (nil fontified nil 649 . 650) (nil fontified nil 646 . 649) (nil fontified nil 642 . 646) (642 . 886)) nil (26105 25264 694628 81000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -642) 639) nil (26105 25264 694614 414000) 0 nil])
([nil nil ((#("thread::sleep(Duration::from_millis(100));" 0 6 (face font-lock-constant-face fontified t) 6 8 (fontified t) 8 13 (fontified t) 13 14 (face (rainbow-delimiters-depth-4-face) fontified t) 14 22 (face font-lock-type-face fontified t) 22 24 (fontified t) 24 35 (fontified t) 35 36 (face (rainbow-delimiters-depth-5-face) fontified t) 36 39 (fontified t) 39 40 (face (rainbow-delimiters-depth-5-face) fontified t) 40 41 (face (rainbow-delimiters-depth-4-face) fontified t) 41 42 (fontified t)) . 687) (undo-tree-id3488 . -42) (undo-tree-id3489 . -42) (undo-tree-id3490 . -42) (undo-tree-id3491 . -42) (undo-tree-id3492 . -42) (undo-tree-id3493 . -42) (undo-tree-id3494 . -42) (undo-tree-id3495 . -42) (undo-tree-id3496 . -42) (undo-tree-id3497 . -42) (undo-tree-id3498 . -42) (t 26105 25264 740656 93000)) nil (26105 25424 299162 725000) 0 nil])
([nil nil ((832 . 841)) nil (26105 25424 299155 547000) 0 nil])
([nil nil ((nil rear-nonsticky nil 882 . 883) (nil fontified nil 882 . 883) (nil fontified nil 881 . 882) (nil fontified nil 880 . 881) (nil fontified nil 877 . 880) (nil fontified nil 876 . 877) (nil fontified nil 865 . 876) (nil fontified nil 863 . 865) (nil fontified nil 855 . 863) (nil fontified nil 854 . 855) (nil fontified nil 849 . 854) (nil fontified nil 847 . 849) (nil fontified nil 841 . 847) (841 . 883)) nil (26105 25424 299154 534000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . -877) (undo-tree-id3482 . -1) (undo-tree-id3483 . -1) (undo-tree-id3484 . -1) (undo-tree-id3485 . -1) (undo-tree-id3486 . -1) (undo-tree-id3487 . -1) 878) nil (26105 25424 299152 151000) 0 nil])
([nil nil ((877 . 879)) nil (26105 25424 299147 46000) 0 nil])
([nil nil ((822 . 830)) nil (26105 25424 299146 448000) 0 nil])
([nil nil ((831 . 843) (#("                " 0 16 (fontified nil)) . 830) (830 . 846) (#("            " 0 12 (fontified nil)) . 830) (undo-tree-id3477 . -12) (undo-tree-id3478 . -12) (undo-tree-id3479 . -12) (undo-tree-id3480 . -12) (undo-tree-id3481 . -12) (829 . 843)) nil (26105 25424 299145 386000) 0 nil])
([nil nil ((808 . 825)) nil (26105 25424 299141 92000) 0 nil])
([nil nil ((#("        
" 0 8 (fontified t) 8 9 (fontified t)) . 679) (undo-tree-id3447 . -8) (undo-tree-id3448 . -8) (undo-tree-id3449 . -8) (undo-tree-id3450 . -8) (undo-tree-id3451 . -8) (undo-tree-id3452 . -8) (undo-tree-id3453 . -8) (undo-tree-id3454 . -8) (undo-tree-id3455 . -8) (undo-tree-id3456 . -8) (undo-tree-id3457 . -8) (undo-tree-id3458 . -8) (undo-tree-id3459 . -8) (undo-tree-id3460 . -8) (undo-tree-id3461 . -8) (undo-tree-id3462 . -8) (undo-tree-id3463 . -8) (undo-tree-id3464 . -8) (undo-tree-id3465 . -8) (undo-tree-id3466 . -8) (undo-tree-id3467 . -8) (undo-tree-id3468 . -8) (undo-tree-id3469 . -8) (undo-tree-id3470 . -8) (undo-tree-id3471 . -8) (undo-tree-id3472 . -8) (undo-tree-id3473 . -8) (undo-tree-id3474 . -8) (undo-tree-id3475 . -8) (undo-tree-id3476 . -9)) nil (26105 25424 299139 134000) 0 nil])
([nil nil ((816 . 817)) nil (26105 25424 299078 615000) 0 nil])
([nil nil ((817 . 821)) nil (26105 25424 299078 88000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -817) (undo-tree-id3397 . -1) (undo-tree-id3398 . -1) (undo-tree-id3399 . -1) (undo-tree-id3400 . -1) (undo-tree-id3401 . -1) (undo-tree-id3402 . -1) (undo-tree-id3403 . -1) (undo-tree-id3404 . -1) (undo-tree-id3405 . -1) (undo-tree-id3406 . -1) (undo-tree-id3407 . -1) (undo-tree-id3408 . -1) (undo-tree-id3409 . -1) (undo-tree-id3410 . -1) (undo-tree-id3411 . -1) (undo-tree-id3412 . -1) (undo-tree-id3413 . -1) (undo-tree-id3414 . -1) (undo-tree-id3415 . -1) (undo-tree-id3416 . -1) (undo-tree-id3417 . -1) (#("i" 0 1 (fontified t)) . -818) (undo-tree-id3418 . -1) (undo-tree-id3419 . -1) (undo-tree-id3420 . -1) (undo-tree-id3421 . -1) (undo-tree-id3422 . -1) (undo-tree-id3423 . -1) (undo-tree-id3424 . -1) (undo-tree-id3425 . -1) (undo-tree-id3426 . -1) (undo-tree-id3427 . -1) (undo-tree-id3428 . -1) (undo-tree-id3429 . -1) (undo-tree-id3430 . -1) (undo-tree-id3431 . -1) (undo-tree-id3432 . -1) (#("m" 0 1 (fontified t)) . -819) (undo-tree-id3433 . -1) (undo-tree-id3434 . -1) (undo-tree-id3435 . -1) (undo-tree-id3436 . -1) (undo-tree-id3437 . -1) (undo-tree-id3438 . -1) (undo-tree-id3439 . -1) (undo-tree-id3440 . -1) (undo-tree-id3441 . -1) (#("u" 0 1 (fontified t)) . -820) (undo-tree-id3442 . -1) (undo-tree-id3443 . -1) (undo-tree-id3444 . -1) (undo-tree-id3445 . -1) (undo-tree-id3446 . -1) 821) nil (26105 25424 299075 591000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -816) (undo-tree-id3352 . -1) (undo-tree-id3353 . -1) (undo-tree-id3354 . -1) (undo-tree-id3355 . -1) (undo-tree-id3356 . -1) (undo-tree-id3357 . -1) (undo-tree-id3358 . -1) (undo-tree-id3359 . -1) (undo-tree-id3360 . -1) (undo-tree-id3361 . -1) (undo-tree-id3362 . -1) (undo-tree-id3363 . -1) (undo-tree-id3364 . -1) (undo-tree-id3365 . -1) (undo-tree-id3366 . -1) (undo-tree-id3367 . -1) (undo-tree-id3368 . -1) (undo-tree-id3369 . -1) (undo-tree-id3370 . -1) (undo-tree-id3371 . -1) (undo-tree-id3372 . -1) (undo-tree-id3373 . -1) (undo-tree-id3374 . -1) (undo-tree-id3375 . -1) (undo-tree-id3376 . -1) (undo-tree-id3377 . -1) (undo-tree-id3378 . -1) (undo-tree-id3379 . -1) (undo-tree-id3380 . -1) (undo-tree-id3381 . -1) (undo-tree-id3382 . -1) (undo-tree-id3383 . -1) (undo-tree-id3384 . -1) (undo-tree-id3385 . -1) (undo-tree-id3386 . -1) (undo-tree-id3387 . -1) (undo-tree-id3388 . -1) (undo-tree-id3389 . -1) (undo-tree-id3390 . -1) (undo-tree-id3391 . -1) (undo-tree-id3392 . -1) (undo-tree-id3393 . -1) (undo-tree-id3394 . -1) (undo-tree-id3395 . -1) (undo-tree-id3396 . -1) 817) nil (26105 25424 299004 86000) 0 nil])
([nil nil ((816 . 818)) nil (26105 25424 298974 413000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -817) (undo-tree-id3347 . -1) (undo-tree-id3348 . -1) (undo-tree-id3349 . -1) (undo-tree-id3350 . -1) (undo-tree-id3351 . -1) 818) nil (26105 25424 298973 630000) 0 nil])
([nil nil ((817 . 819)) nil (26105 25424 298969 961000) 0 nil])
([nil nil ((816 . 820) (#("rde" 0 3 (fontified nil)) . 816) (816 . 819) (#("rdev" 0 4 (fontified nil)) . -816) (816 . 820) (#("rde" 0 3 (fontified t)) . -816) (undo-tree-id3334 . -3) (undo-tree-id3335 . -1) (undo-tree-id3336 . -1) (undo-tree-id3337 . -1) (undo-tree-id3338 . -1) (undo-tree-id3339 . -1) (undo-tree-id3340 . -1) (undo-tree-id3341 . -1) (undo-tree-id3342 . -1) (undo-tree-id3343 . -2) (undo-tree-id3344 . -2) (undo-tree-id3345 . -3) (undo-tree-id3346 . -3) 819) nil (26105 25424 298968 547000) 0 nil])
([nil nil ((820 . 824)) nil (26105 25424 298958 861000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -823) (undo-tree-id3328 . -1) (undo-tree-id3329 . -1) (undo-tree-id3330 . -1) (undo-tree-id3331 . -1) (undo-tree-id3332 . -1) (undo-tree-id3333 . -1) 824) nil (26105 25424 298958 6000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 831 882 nil nil nil t #s(yas--exit 883 nil))) #s(yas--exit 883 nil) 30 nil #s(yas--field 1 831 882 nil nil nil t #s(yas--exit 883 nil)) nil nil)) (822 . 842) (#("simulate(${1:event_type})$0" 0 27 (fontified nil)) . 822) (822 . 849) (#("s" 0 1 (fontified nil)) . 822) (822 . 823) (#("simulate(…)" 0 11 (fontified nil)) . -822) (822 . 833) (#("s" 0 1 (fontified t)) . -822) (undo-tree-id3315 . -1) (undo-tree-id3316 . -1) (undo-tree-id3317 . -1) (undo-tree-id3318 . -1) (undo-tree-id3319 . -1) (undo-tree-id3320 . -1) (undo-tree-id3321 . -1) (undo-tree-id3322 . -1) (undo-tree-id3323 . -1) (undo-tree-id3324 . -1) (undo-tree-id3325 . -1) (undo-tree-id3326 . -1) (undo-tree-id3327 . -1) 823) nil (26105 25424 298952 800000) 0 nil])
([nil nil ((832 . 833) (#("event_type" 0 10 (fontified nil)) . 832) (undo-tree-id3314 . -10) (831 . 832)) nil (26105 25424 298942 450000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 863 881 nil nil nil t #s(yas--exit 882 nil))) #s(yas--exit 882 nil) 31 nil #s(yas--field 1 863 881 nil nil nil t #s(yas--exit 882 nil)) #s(yas--field 1 831 882 nil nil nil t #s(yas--exit 883 nil)) nil)) (832 . 866) (#("rdev::EventType::ButtonRelease(${1:()})$0" 0 41 (fontified nil)) . 832) (undo-tree-id3290 . -41) (832 . 873) (#("E" 0 1 (fontified nil)) . 832) (undo-tree-id3291 . -1) (832 . 833) (#("rdev::EventType::ButtonRelease(…)" 0 33 (fontified nil)) . -832) (undo-tree-id3292 . -33) (832 . 865) (#("E" 0 1 (face font-lock-type-face fontified t)) . -832) (undo-tree-id3293 . -1) (undo-tree-id3294 . -1) (undo-tree-id3295 . -1) (undo-tree-id3296 . -1) (undo-tree-id3297 . -1) (undo-tree-id3298 . -1) (undo-tree-id3299 . -1) (undo-tree-id3300 . -1) (undo-tree-id3301 . -1) (undo-tree-id3302 . -1) (undo-tree-id3303 . -1) (undo-tree-id3304 . -1) (undo-tree-id3305 . -1) (undo-tree-id3306 . -1) (undo-tree-id3307 . -1) (undo-tree-id3308 . -1) (undo-tree-id3309 . -1) (undo-tree-id3310 . -1) (undo-tree-id3311 . -1) (undo-tree-id3312 . -1) (undo-tree-id3313 . -1) 833) nil (26105 25424 298939 624000) 0 nil])
([nil nil ((864 . 869) (#("()" 0 1 (face (rainbow-delimiters-depth-8-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-8-face) fontified nil)) . 864) (undo-tree-id3289 . -2) (863 . 864)) nil (26105 25424 298922 503000) 0 nil])
([nil nil ((#("S" 0 1 (face font-lock-type-face fontified t)) . -868) (undo-tree-id3277 . -1) (undo-tree-id3278 . -1) (undo-tree-id3279 . -1) (undo-tree-id3280 . -1) (undo-tree-id3281 . -1) (undo-tree-id3282 . -1) (undo-tree-id3283 . -1) (undo-tree-id3284 . -1) (undo-tree-id3285 . -1) (undo-tree-id3286 . -1) (undo-tree-id3287 . -1) (undo-tree-id3288 . -1) 869) nil (26105 25424 298920 543000) 0 nil])
([nil nil ((#("Key::" 0 3 (face font-lock-type-face fontified t) 3 5 (fontified t)) . -863) (undo-tree-id3242 . -5) (undo-tree-id3243 . -5) (undo-tree-id3244 . -5) (undo-tree-id3245 . -1) (undo-tree-id3246 . -1) (undo-tree-id3247 . -2) (undo-tree-id3248 . -2) (undo-tree-id3249 . -3) (undo-tree-id3250 . -3) (undo-tree-id3251 . -3) (undo-tree-id3252 . -3) (undo-tree-id3253 . -3) (undo-tree-id3254 . -3) (undo-tree-id3255 . -3) (undo-tree-id3256 . -3) (undo-tree-id3257 . -4) (undo-tree-id3258 . -4) (undo-tree-id3259 . -4) (undo-tree-id3260 . -5) (undo-tree-id3261 . -5) (undo-tree-id3262 . -5) (undo-tree-id3263 . -5) (undo-tree-id3264 . -5) (undo-tree-id3265 . -5) (undo-tree-id3266 . -5) (undo-tree-id3267 . -5) (undo-tree-id3268 . -5) (undo-tree-id3269 . -5) (undo-tree-id3270 . -5) (undo-tree-id3271 . -5) (undo-tree-id3272 . -5) (undo-tree-id3273 . -5) (undo-tree-id3274 . -5) (undo-tree-id3275 . -5) (undo-tree-id3276 . -5) 868) nil (26105 25424 298911 291000) 0 nil])
([nil nil ((863 . 864)) nil (26105 25424 298887 606000) 0 nil])
([nil nil ((apply yas--snippet-revive 863 881 #s(yas--snippet nil nil #s(yas--exit 881 nil) 32 nil nil #s(yas--field 1 863 881 nil nil nil t #s(yas--exit 882 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 881 nil) 32 nil nil #s(yas--field 1 863 881 nil nil nil t #s(yas--exit 882 nil)) nil)) (863 . 881) (#("rdev::Button::Left$0" 0 20 (fontified nil)) . 863) (undo-tree-id3231 . -20) (863 . 883) (#("B" 0 1 (fontified nil)) . 863) (undo-tree-id3232 . -1) (863 . 864) (#("rdev::Button::Left" 0 18 (fontified nil)) . -863) (undo-tree-id3233 . -18) (863 . 881) (#("B" 0 1 (face font-lock-type-face fontified t)) . -863) (undo-tree-id3234 . -1) (undo-tree-id3235 . -1) (undo-tree-id3236 . -1) (undo-tree-id3237 . -1) (undo-tree-id3238 . -1) (undo-tree-id3239 . -1) (undo-tree-id3240 . -1) (undo-tree-id3241 . -1) 864) nil (26105 25424 298885 757000) 0 nil])
([nil nil ((apply yas--snippet-revive 822 883 #s(yas--snippet nil (#s(yas--field 1 831 882 nil nil nil t #s(yas--exit 883 nil))) #s(yas--exit 883 nil) 30 nil #s(yas--field 1 831 882 nil nil nil t #s(yas--exit 883 nil)) nil nil)) (apply yas--snippet-revive 832 882 #s(yas--snippet nil (#s(yas--field 1 863 881 nil nil nil t #s(yas--exit 882 nil))) #s(yas--exit 882 nil) 31 nil #s(yas--field 1 863 881 nil nil nil t #s(yas--exit 882 nil)) #s(yas--field 1 831 882 nil nil nil t #s(yas--exit 883 nil)) nil))) nil (26105 25424 298876 489000) 0 nil])
([nil nil ((883 . 884)) nil (26105 25424 298875 585000) 0 nil])
([nil nil ((883 . 885)) nil (26105 25424 298874 386000) 0 nil])
([nil nil ((apply yas--snippet-revive 884 892 #s(yas--snippet nil nil #s(yas--exit 892 nil) 33 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 892 nil) 33 nil nil nil nil)) (884 . 892) (#("unwrap()$0" 0 10 (fontified nil)) . 884) (884 . 894) (#("u" 0 1 (fontified nil)) . 884) (884 . 885) (#("unwrap()" 0 8 (fontified nil)) . -884) (884 . 892) (#("u" 0 1 (fontified t)) . -884) (undo-tree-id3218 . -1) (undo-tree-id3219 . -1) (undo-tree-id3220 . -1) (undo-tree-id3221 . -1) (undo-tree-id3222 . -1) (undo-tree-id3223 . -1) (undo-tree-id3224 . -1) (undo-tree-id3225 . -1) (undo-tree-id3226 . -1) (undo-tree-id3227 . -1) (undo-tree-id3228 . -1) (undo-tree-id3229 . -1) (undo-tree-id3230 . -1) 885) nil (26105 25424 298869 900000) 0 nil])
([nil nil ((893 . 910) (t 26105 25424 313999 58000)) nil (26105 25439 434531 497000) 0 nil])
([nil nil ((nil rear-nonsticky nil 986 . 987) (nil fontified nil 986 . 987) (nil fontified nil 985 . 986) (nil fontified nil 984 . 985) (nil fontified nil 978 . 984) (nil fontified nil 977 . 978) (nil fontified nil 976 . 977) (nil fontified nil 975 . 976) (nil fontified nil 971 . 975) (nil fontified nil 969 . 971) (nil fontified nil 963 . 969) (nil fontified nil 961 . 963) (nil fontified nil 957 . 961) (nil fontified nil 956 . 957) (nil fontified nil 943 . 956) (nil fontified nil 941 . 943) (nil fontified nil 932 . 941) (nil fontified nil 930 . 932) (nil fontified nil 926 . 930) (nil fontified nil 925 . 926) (nil fontified nil 924 . 925) (nil fontified nil 916 . 924) (nil fontified nil 914 . 916) (nil fontified nil 910 . 914) (910 . 987)) nil (26105 25439 434529 533000) 0 nil])
([nil nil ((#("ButtonRelease" 0 13 (face font-lock-type-face fontified t)) . -943) (undo-tree-id3510 . -13) (undo-tree-id3511 . -1) (undo-tree-id3512 . -13) (undo-tree-id3513 . -13) (undo-tree-id3514 . -13) 956) nil (26105 25439 434525 175000) 0 nil])
([nil nil ((943 . 944)) nil (26105 25439 434519 491000) 0 nil])
([nil nil ((apply yas--snippet-revive 943 954 #s(yas--snippet nil nil #s(yas--exit 954 nil) 34 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 954 nil) 34 nil nil nil nil)) (943 . 954) (#("ButtonPress$0" 0 13 (fontified nil)) . 943) (943 . 956) (#("B" 0 1 (fontified nil)) . 943) (943 . 944) (#("ButtonPress" 0 11 (fontified nil)) . -943) (943 . 954) (#("B" 0 1 (face font-lock-type-face fontified t)) . -943) (undo-tree-id3499 . -1) (undo-tree-id3500 . -1) (undo-tree-id3501 . -1) (undo-tree-id3502 . -1) (undo-tree-id3503 . -1) (undo-tree-id3504 . -1) (undo-tree-id3505 . -1) (undo-tree-id3506 . -1) (undo-tree-id3507 . -1) (undo-tree-id3508 . -1) (undo-tree-id3509 . -1) 944) nil (26105 25439 434514 609000) 0 nil])
([nil nil ((893 . 910) (t 26105 25439 447333 312000)) nil (26105 25457 308819 974000) 0 nil])
([nil nil ((nil rear-nonsticky nil 961 . 962) (nil fontified nil 961 . 962) (nil fontified nil 960 . 961) (nil fontified nil 959 . 960) (nil fontified nil 958 . 959) (nil fontified nil 956 . 958) (nil fontified nil 954 . 956) (nil fontified nil 953 . 954) (nil fontified nil 942 . 953) (nil fontified nil 940 . 942) (nil fontified nil 932 . 940) (nil fontified nil 931 . 932) (nil fontified nil 926 . 931) (nil fontified nil 924 . 926) (nil fontified nil 918 . 924) (nil fontified nil 910 . 918) (910 . 962)) nil (26105 25457 308818 742000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -910) 894) nil (26105 25457 308815 925000) 0 nil])
([nil nil ((954 . 970)) nil (26105 25457 308815 208000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -969) (undo-tree-id3571 . -1) (undo-tree-id3572 . -1) (undo-tree-id3573 . -1) 970) nil (26105 25457 308814 475000) 0 nil])
([nil nil ((#("               
" 0 15 (fontified t) 15 16 (fontified t)) . 954) (undo-tree-id3566 . -15) (undo-tree-id3567 . -15) (undo-tree-id3568 . -15) (undo-tree-id3569 . -15) (undo-tree-id3570 . -16)) nil (26105 25457 308811 647000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-7-face) fontified t)) . 950)) nil (26105 25457 308807 555000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . -946) (undo-tree-id3515 . -1) (undo-tree-id3516 . -1) (undo-tree-id3517 . -1) (undo-tree-id3518 . -1) (undo-tree-id3519 . -1) (undo-tree-id3520 . -1) (undo-tree-id3521 . -1) (undo-tree-id3522 . -1) (undo-tree-id3523 . -1) (undo-tree-id3524 . -1) (undo-tree-id3525 . -1) (undo-tree-id3526 . -1) (undo-tree-id3527 . -1) (undo-tree-id3528 . -1) (undo-tree-id3529 . -1) (undo-tree-id3530 . -1) (#("0" 0 1 (fontified t)) . -947) (undo-tree-id3531 . -1) (undo-tree-id3532 . -1) (undo-tree-id3533 . -1) (undo-tree-id3534 . -1) (undo-tree-id3535 . -1) (undo-tree-id3536 . -1) (undo-tree-id3537 . -1) (undo-tree-id3538 . -1) (undo-tree-id3539 . -1) (undo-tree-id3540 . -1) (undo-tree-id3541 . -1) (undo-tree-id3542 . -1) (undo-tree-id3543 . -1) (undo-tree-id3544 . -1) (#("0" 0 1 (fontified t)) . -948) (undo-tree-id3545 . -1) (undo-tree-id3546 . -1) (undo-tree-id3547 . -1) (undo-tree-id3548 . -1) (undo-tree-id3549 . -1) (undo-tree-id3550 . -1) (undo-tree-id3551 . -1) (undo-tree-id3552 . -1) (undo-tree-id3553 . -1) (undo-tree-id3554 . -1) (undo-tree-id3555 . -1) (undo-tree-id3556 . -1) (#("0" 0 1 (fontified t)) . -949) (undo-tree-id3557 . -1) (undo-tree-id3558 . -1) (undo-tree-id3559 . -1) (undo-tree-id3560 . -1) (undo-tree-id3561 . -1) (undo-tree-id3562 . -1) (undo-tree-id3563 . -1) (undo-tree-id3564 . -1) (undo-tree-id3565 . -1) 950) nil (26105 25457 308804 185000) 0 nil])
([nil nil ((946 . 949)) nil (26105 25457 308764 859000) 0 nil])
([nil nil ((949 . 950)) nil (26105 25457 308760 448000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1142 . 1143) (nil fontified nil 1142 . 1143) (nil fontified nil 1141 . 1142) (nil fontified nil 1140 . 1141) (nil fontified nil 1134 . 1140) (nil fontified nil 1133 . 1134) (nil fontified nil 1132 . 1133) (nil fontified nil 1131 . 1132) (nil fontified nil 1127 . 1131) (nil fontified nil 1125 . 1127) (nil fontified nil 1119 . 1125) (nil fontified nil 1117 . 1119) (nil fontified nil 1113 . 1117) (nil fontified nil 1112 . 1113) (nil fontified nil 1099 . 1112) (nil fontified nil 1097 . 1099) (nil fontified nil 1088 . 1097) (nil fontified nil 1086 . 1088) (nil fontified nil 1082 . 1086) (nil fontified nil 1081 . 1082) (nil fontified nil 1080 . 1081) (nil fontified nil 1072 . 1080) (nil fontified nil 1070 . 1072) (nil fontified nil 1066 . 1070) (1066 . 1143) (t 26105 25457 324001 56000)) nil (26105 25466 569437 511000) 0 nil])
([nil nil ((1066 . 1082) 1143) nil (26105 25466 569430 448000) 0 nil])
([nil nil ((816 . 818) (t 26105 25466 584001 618000)) nil (26105 25521 231628 640000) 0 nil])
([nil nil ((971 . 973)) nil (26105 25521 231627 877000) 0 nil])
([nil nil ((1086 . 1088)) nil (26105 25521 231627 202000) 0 nil])
([nil nil ((895 . 912)) nil (26105 25521 231626 646000) 0 nil])
([nil nil ((nil rear-nonsticky nil 988 . 989) (nil fontified nil 988 . 989) (nil fontified nil 987 . 988) (nil fontified nil 986 . 987) (nil fontified nil 980 . 986) (nil fontified nil 979 . 980) (nil fontified nil 978 . 979) (nil fontified nil 977 . 978) (nil fontified nil 973 . 977) (nil fontified nil 971 . 973) (nil fontified nil 965 . 971) (nil fontified nil 963 . 965) (nil fontified nil 959 . 963) (nil fontified nil 958 . 959) (nil fontified nil 945 . 958) (nil fontified nil 943 . 945) (nil fontified nil 934 . 943) (nil fontified nil 932 . 934) (nil fontified nil 928 . 932) (nil fontified nil 927 . 928) (nil fontified nil 926 . 927) (nil fontified nil 918 . 926) (nil fontified nil 916 . 918) (nil fontified nil 912 . 916) (912 . 989)) nil (26105 25521 231625 260000) 0 nil])
([nil nil ((#("Button" 0 6 (face font-lock-type-face fontified t)) . -945) (undo-tree-id3687 . -6) (undo-tree-id3688 . -6) 951) nil (26105 25521 231621 576000) 0 nil])
([nil nil ((945 . 946)) nil (26105 25521 231619 548000) 0 nil])
([nil nil ((apply yas--snippet-revive 945 955 #s(yas--snippet nil nil #s(yas--exit 955 nil) 35 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 955 nil) 35 nil nil nil nil)) (945 . 955) (#("KeyRelease$0" 0 12 (fontified nil)) . 945) (945 . 957) (#("KRelease" 0 1 (fontified nil) 1 8 (face font-lock-type-face fontified nil)) . 945) (undo-tree-id3664 . -8) (undo-tree-id3665 . -7) (undo-tree-id3666 . -6) (undo-tree-id3667 . -6) (undo-tree-id3668 . -6) (undo-tree-id3669 . -6) (undo-tree-id3670 . -6) (undo-tree-id3671 . -6) (undo-tree-id3672 . -6) (undo-tree-id3673 . -5) (undo-tree-id3674 . -4) (undo-tree-id3675 . -3) (undo-tree-id3676 . -2) (undo-tree-id3677 . 7) (945 . 946) (#("KeyRelease" 0 10 (fontified nil)) . -945) (945 . 955) (#("K" 0 1 (face font-lock-type-face fontified t)) . -945) (undo-tree-id3678 . -1) (undo-tree-id3679 . -1) (undo-tree-id3680 . -1) (undo-tree-id3681 . -1) (undo-tree-id3682 . -1) (undo-tree-id3683 . -1) (undo-tree-id3684 . -1) (undo-tree-id3685 . -1) (undo-tree-id3686 . -1) 946) nil (26105 25521 231617 525000) 0 nil])
([nil nil ((#("Button" 0 6 (face font-lock-type-face fontified t)) . -962) (undo-tree-id3658 . -6) (undo-tree-id3659 . -6) (undo-tree-id3660 . -6) (undo-tree-id3661 . -6) (undo-tree-id3662 . -6) (undo-tree-id3663 . -6) 968) nil (26105 25521 231599 541000) 0 nil])
([nil nil ((962 . 963)) nil (26105 25521 231594 565000) 0 nil])
([nil nil ((962 . 965) (#("K" 0 1 (fontified nil)) . 962) (962 . 963) (#("Key" 0 3 (fontified nil)) . -962) (962 . 965) (#("K" 0 1 (face font-lock-type-face fontified t)) . -962) (undo-tree-id3652 . -1) (undo-tree-id3653 . -1) (undo-tree-id3654 . -1) (undo-tree-id3655 . -1) (undo-tree-id3656 . -1) (undo-tree-id3657 . -1) 963) nil (26105 25521 231593 353000) 0 nil])
([nil nil ((#("Left" 0 4 (face font-lock-type-face fontified t)) . -967) (undo-tree-id3647 . -4) (undo-tree-id3648 . -4) (undo-tree-id3649 . -4) (undo-tree-id3650 . -4) (undo-tree-id3651 . -4) 971) nil (26105 25521 231587 675000) 0 nil])
([nil nil ((967 . 968)) nil (26105 25521 231583 64000) 0 nil])
([nil nil ((#("Q" 0 1 (face font-lock-type-face fontified t)) . -967) (undo-tree-id3640 . -1) (undo-tree-id3641 . -1) (undo-tree-id3642 . -1) (undo-tree-id3643 . -1) (undo-tree-id3644 . -1) (undo-tree-id3645 . -1) (undo-tree-id3646 . -1) 968) nil (26105 25521 231582 187000) 0 nil])
([nil nil ((967 . 968)) nil (26105 25521 231576 926000) 0 nil])
([nil nil ((#("q" 0 1 (fontified t)) . -967) (undo-tree-id3634 . -1) (undo-tree-id3635 . -1) (undo-tree-id3636 . -1) (undo-tree-id3637 . -1) (undo-tree-id3638 . -1) (undo-tree-id3639 . -1) 968) nil (26105 25521 231576 33000) 0 nil])
([nil nil ((967 . 970)) nil (26105 25521 231570 893000) 0 nil])
([nil nil ((970 . 971)) nil (26105 25521 231570 233000) 0 nil])
([nil nil ((apply yas--snippet-revive 967 971 #s(yas--snippet nil nil #s(yas--exit 971 nil) 36 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 971 nil) 36 nil nil nil nil)) (967 . 971) (#("KeyQ$0" 0 6 (fontified nil)) . 967) (967 . 973) (#("keyQ" 0 4 (fontified nil)) . 967) (967 . 971) (#("KeyQ" 0 4 (fontified nil)) . -967) (967 . 971) (#("keyQ" 0 4 (fontified t)) . -967) (undo-tree-id3616 . -4) (undo-tree-id3617 . -4) (undo-tree-id3618 . -1) (undo-tree-id3619 . -1) (undo-tree-id3620 . -2) (undo-tree-id3621 . -2) (undo-tree-id3622 . -3) (undo-tree-id3623 . -3) (undo-tree-id3624 . -3) (undo-tree-id3625 . -3) (undo-tree-id3626 . -3) (undo-tree-id3627 . -3) (undo-tree-id3628 . -4) (undo-tree-id3629 . -4) (undo-tree-id3630 . -4) (undo-tree-id3631 . -4) (undo-tree-id3632 . -4) (undo-tree-id3633 . -4) 971) nil (26105 25521 231567 726000) 0 nil])
([nil nil ((1042 . 1059)) nil (26105 25521 231300 709000) 0 nil])
([nil nil ((#("                
" 0 16 (fontified t) 16 17 (fontified t rear-nonsticky t)) . 1043) (undo-tree-id3611 . -16) (undo-tree-id3612 . -16) (undo-tree-id3613 . -16) (undo-tree-id3614 . -16) (undo-tree-id3615 . -17)) nil (26105 25521 231299 797000) 0 nil])
([nil nil ((1043 . 1044)) nil (26105 25521 231295 936000) 0 nil])
([nil nil ((1137 . 1154)) nil (26105 25521 231295 315000) 0 nil])
([nil nil ((nil fontified nil 1170 . 1171) (nil fontified nil 1154 . 1170) (1154 . 1171)) nil (26105 25521 231294 545000) 0 nil])
([nil nil ((nil fontified nil 1224 . 1225) (nil fontified nil 1223 . 1224) (nil fontified nil 1222 . 1223) (nil fontified nil 1216 . 1222) (nil fontified nil 1215 . 1216) (nil fontified nil 1214 . 1215) (nil fontified nil 1213 . 1214) (nil fontified nil 1209 . 1213) (nil fontified nil 1207 . 1209) (nil fontified nil 1204 . 1207) (nil fontified nil 1202 . 1204) (nil fontified nil 1198 . 1202) (nil fontified nil 1197 . 1198) (nil fontified nil 1187 . 1197) (nil fontified nil 1185 . 1187) (nil fontified nil 1176 . 1185) (nil fontified nil 1174 . 1176) (nil fontified nil 1170 . 1174) (nil fontified nil 1169 . 1170) (nil fontified nil 1168 . 1169) (nil fontified nil 1160 . 1168) (nil fontified nil 1158 . 1160) (nil fontified nil 1154 . 1158) (1154 . 1225) (#("                
" 0 16 (fontified t) 16 17 (fontified t rear-nonsticky t)) . -1154) (undo-tree-id3605 . -17) (undo-tree-id3606 . -17) (undo-tree-id3607 . -17) (undo-tree-id3608 . -17) (undo-tree-id3609 . -17) (undo-tree-id3610 . -17) 1171) nil (26105 25521 231292 240000) 0 nil])
([nil nil ((1043 . 1044)) nil (26105 25521 231283 111000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1044) (undo-tree-id3600 . -1) (undo-tree-id3601 . -1) (undo-tree-id3602 . -1) (undo-tree-id3603 . -1) (undo-tree-id3604 . -1)) nil (26105 25521 231910 162000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1043) (undo-tree-id3860 . -1) (undo-tree-id3861 . -1) (undo-tree-id3862 . -1) (undo-tree-id3863 . -1) (undo-tree-id3864 . -1) (undo-tree-id3865 . -1) (undo-tree-id3866 . -1) (undo-tree-id3867 . -1) (undo-tree-id3868 . -1)) nil (26105 25528 814323 183000) 0 nil] [nil nil ((#("                //rdev::simulate(&rdev::EventType::ButtonPress(rdev::Button::Left)).unwrap();" 0 16 (fontified t) 16 18 (face font-lock-comment-delimiter-face fontified t) 18 22 (face font-lock-comment-face fontified t) 22 24 (face font-lock-comment-face fontified t) 24 32 (face font-lock-comment-face fontified t) 32 33 (face font-lock-comment-face fontified t) 33 34 (face font-lock-comment-face fontified t) 34 38 (face font-lock-comment-face fontified t) 38 40 (face font-lock-comment-face fontified t) 40 49 (face font-lock-comment-face fontified t) 49 51 (face font-lock-comment-face fontified t) 51 62 (face font-lock-comment-face fontified t) 62 63 (face font-lock-comment-face fontified t) 63 67 (face font-lock-comment-face fontified t) 67 69 (face font-lock-comment-face fontified t) 69 75 (face font-lock-comment-face fontified t) 75 77 (face font-lock-comment-face fontified t) 77 81 (face font-lock-comment-face fontified t) 81 82 (face font-lock-comment-face fontified t) 82 83 (face font-lock-comment-face fontified t) 83 84 (face font-lock-comment-face fontified t) 84 90 (face font-lock-comment-face fontified t) 90 91 (face font-lock-comment-face fontified t) 91 92 (face font-lock-comment-face fontified t) 92 93 (face font-lock-comment-face fontified t rear-nonsticky t)) . 1044) (undo-tree-id3574 . -62) (undo-tree-id3575 . -16) (undo-tree-id3576 . -93) (undo-tree-id3577 . -20) (undo-tree-id3578 . -20) (undo-tree-id3579 . -20) (undo-tree-id3580 . -20) (undo-tree-id3581 . -20) (undo-tree-id3582 . -20) (undo-tree-id3583 . -20) (undo-tree-id3584 . -16) (undo-tree-id3585 . -17) (undo-tree-id3586 . -17) (undo-tree-id3587 . -18) (undo-tree-id3588 . -18) (undo-tree-id3589 . -19) (undo-tree-id3590 . -18) (undo-tree-id3591 . -18) (undo-tree-id3592 . -87) (undo-tree-id3593 . -87) (undo-tree-id3594 . -87) (undo-tree-id3595 . -87) (undo-tree-id3596 . -87) (undo-tree-id3597 . -87) (undo-tree-id3598 . -93) (undo-tree-id3599 . -93)) ((1044 . 1137)) (26105 25521 231273 106000) 0 nil])
([nil nil ((#("R" 0 1 (face font-lock-type-face fontified t)) . -1189) (undo-tree-id3725 . -1) (undo-tree-id3726 . -1) (undo-tree-id3727 . -1) (undo-tree-id3728 . -1) (undo-tree-id3729 . -1) (undo-tree-id3730 . -1) (undo-tree-id3731 . -1) (undo-tree-id3732 . -1) (undo-tree-id3733 . -1) (undo-tree-id3734 . -1) (undo-tree-id3735 . -1) (undo-tree-id3736 . -1) (undo-tree-id3737 . -1) (undo-tree-id3738 . -1) (undo-tree-id3739 . -1) (undo-tree-id3740 . -1) (undo-tree-id3741 . -1) (undo-tree-id3742 . -1) (undo-tree-id3743 . -1) (undo-tree-id3744 . -1) (undo-tree-id3745 . -1) (undo-tree-id3746 . -1) (undo-tree-id3747 . -1) (undo-tree-id3748 . -1) (undo-tree-id3749 . -1) (undo-tree-id3750 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1190) (undo-tree-id3751 . -1) (undo-tree-id3752 . -1) (undo-tree-id3753 . -1) (undo-tree-id3754 . -1) (undo-tree-id3755 . -1) (undo-tree-id3756 . -1) (undo-tree-id3757 . -1) (undo-tree-id3758 . -1) (undo-tree-id3759 . -1) (undo-tree-id3760 . -1) (undo-tree-id3761 . -1) (undo-tree-id3762 . -1) (undo-tree-id3763 . -1) (undo-tree-id3764 . -1) (undo-tree-id3765 . -1) (undo-tree-id3766 . -1) (undo-tree-id3767 . -1) (undo-tree-id3768 . -1) (undo-tree-id3769 . -1) (undo-tree-id3770 . -1) (undo-tree-id3771 . -1) (undo-tree-id3772 . -1) (undo-tree-id3773 . -1) (undo-tree-id3774 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1191) (undo-tree-id3775 . -1) (undo-tree-id3776 . -1) (undo-tree-id3777 . -1) (undo-tree-id3778 . -1) (undo-tree-id3779 . -1) (undo-tree-id3780 . -1) (undo-tree-id3781 . -1) (undo-tree-id3782 . -1) (undo-tree-id3783 . -1) (undo-tree-id3784 . -1) (undo-tree-id3785 . -1) (undo-tree-id3786 . -1) (undo-tree-id3787 . -1) (undo-tree-id3788 . -1) (undo-tree-id3789 . -1) (undo-tree-id3790 . -1) (undo-tree-id3791 . -1) (undo-tree-id3792 . -1) (undo-tree-id3793 . -1) (undo-tree-id3794 . -1) (undo-tree-id3795 . -1) (undo-tree-id3796 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1192) (undo-tree-id3797 . -1) (undo-tree-id3798 . -1) (undo-tree-id3799 . -1) (undo-tree-id3800 . -1) (undo-tree-id3801 . -1) (undo-tree-id3802 . -1) (undo-tree-id3803 . -1) (undo-tree-id3804 . -1) (undo-tree-id3805 . -1) (undo-tree-id3806 . -1) (undo-tree-id3807 . -1) (undo-tree-id3808 . -1) (undo-tree-id3809 . -1) (undo-tree-id3810 . -1) (undo-tree-id3811 . -1) (undo-tree-id3812 . -1) (undo-tree-id3813 . -1) (undo-tree-id3814 . -1) (undo-tree-id3815 . -1) (undo-tree-id3816 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -1193) (undo-tree-id3817 . -1) (undo-tree-id3818 . -1) (undo-tree-id3819 . -1) (undo-tree-id3820 . -1) (undo-tree-id3821 . -1) (undo-tree-id3822 . -1) (undo-tree-id3823 . -1) (undo-tree-id3824 . -1) (undo-tree-id3825 . -1) (undo-tree-id3826 . -1) (undo-tree-id3827 . -1) (undo-tree-id3828 . -1) (undo-tree-id3829 . -1) (undo-tree-id3830 . -1) (undo-tree-id3831 . -1) (undo-tree-id3832 . -1) (undo-tree-id3833 . -1) (undo-tree-id3834 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -1194) (undo-tree-id3835 . -1) (undo-tree-id3836 . -1) (undo-tree-id3837 . -1) (undo-tree-id3838 . -1) (undo-tree-id3839 . -1) (undo-tree-id3840 . -1) (undo-tree-id3841 . -1) (undo-tree-id3842 . -1) (undo-tree-id3843 . -1) (undo-tree-id3844 . -1) (undo-tree-id3845 . -1) (undo-tree-id3846 . -1) (undo-tree-id3847 . -1) (undo-tree-id3848 . -1) (undo-tree-id3849 . -1) (undo-tree-id3850 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1195) (undo-tree-id3851 . -1) (undo-tree-id3852 . -1) (undo-tree-id3853 . -1) (undo-tree-id3854 . -1) (undo-tree-id3855 . -1) (undo-tree-id3856 . -1) (undo-tree-id3857 . -1) (undo-tree-id3858 . -1) (undo-tree-id3859 . -1) 1196) nil (26105 25528 814309 967000) 0 nil])
nil
([nil nil ((1189 . 1190)) nil (26105 25528 814080 755000) 0 nil])
([nil nil ((apply yas--snippet-revive 1186 1194 #s(yas--snippet nil nil #s(yas--exit 1194 nil) 37 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1194 nil) 37 nil nil nil nil)) (1186 . 1194) (#("KeyPress$0" 0 10 (fontified nil)) . 1186) (1186 . 1196) (#("KeyP" 0 4 (fontified nil)) . 1186) (1186 . 1190) (#("KeyPress" 0 8 (fontified nil)) . -1186) (1186 . 1194) (#("KeyP" 0 4 (face font-lock-type-face fontified t)) . -1186) (undo-tree-id3689 . -4) (undo-tree-id3690 . -4) (undo-tree-id3691 . -3) (undo-tree-id3692 . -3) (undo-tree-id3693 . -3) (undo-tree-id3694 . -3) (undo-tree-id3695 . -3) (undo-tree-id3696 . -3) (undo-tree-id3697 . -3) (undo-tree-id3698 . -3) (undo-tree-id3699 . -3) (undo-tree-id3700 . -3) (undo-tree-id3701 . -3) (undo-tree-id3702 . -3) (undo-tree-id3703 . -3) (undo-tree-id3704 . -3) (undo-tree-id3705 . -3) (undo-tree-id3706 . -3) (undo-tree-id3707 . -3) (undo-tree-id3708 . -3) (undo-tree-id3709 . -3) (undo-tree-id3710 . -3) (undo-tree-id3711 . -3) (undo-tree-id3712 . -3) (undo-tree-id3713 . -3) (undo-tree-id3714 . -3) (undo-tree-id3715 . -3) (undo-tree-id3716 . -3) (undo-tree-id3717 . -4) (undo-tree-id3718 . -4) (undo-tree-id3719 . -4) (undo-tree-id3720 . -4) (undo-tree-id3721 . -4) (undo-tree-id3722 . -4) (undo-tree-id3723 . -4) (undo-tree-id3724 . -4) 1190) nil (26105 25528 814075 879000) 0 nil])
([nil nil ((1339 . 1356) (t 26105 25528 860672 55000)) nil (26105 25542 37357 167000) 0 nil])
([nil nil ((nil fontified nil 1426 . 1427) (nil fontified nil 1425 . 1426) (nil fontified nil 1424 . 1425) (nil fontified nil 1418 . 1424) (nil fontified nil 1417 . 1418) (nil fontified nil 1416 . 1417) (nil fontified nil 1415 . 1416) (nil fontified nil 1411 . 1415) (nil fontified nil 1409 . 1411) (nil fontified nil 1406 . 1409) (nil fontified nil 1404 . 1406) (nil fontified nil 1400 . 1404) (nil fontified nil 1399 . 1400) (nil fontified nil 1389 . 1399) (nil fontified nil 1387 . 1389) (nil fontified nil 1378 . 1387) (nil fontified nil 1376 . 1378) (nil fontified nil 1372 . 1376) (nil fontified nil 1371 . 1372) (nil fontified nil 1370 . 1371) (nil fontified nil 1362 . 1370) (nil fontified nil 1360 . 1362) (nil fontified nil 1356 . 1360) (1356 . 1427)) nil (26105 25542 37351 657000) 0 nil])
([nil nil ((912 . 914) (t 26105 25542 54006 188000)) nil (26105 25580 971679 698000) 0 nil])
([nil nil ((1155 . 1157)) nil (26105 25580 971678 420000) 0 nil])
([nil nil ((1360 . 1362)) nil (26105 25580 971677 593000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -816) (undo-tree-id3878 . -1) (undo-tree-id3879 . -1) (undo-tree-id3880 . -1) (undo-tree-id3881 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -817) (undo-tree-id3882 . -1) (undo-tree-id3883 . -1) 818) nil (26105 25580 971676 46000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . 1059) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 1059)) nil (26105 25580 971669 689000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . 1260) (undo-tree-id3869 . -1) (undo-tree-id3870 . -1) (undo-tree-id3871 . -1) (undo-tree-id3872 . -1) (undo-tree-id3873 . -1) (undo-tree-id3874 . -1) (undo-tree-id3875 . -1) (undo-tree-id3876 . -1) (undo-tree-id3877 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 1260)) nil (26105 25580 971665 485000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . -1496) (undo-tree-id3884 . -1) (undo-tree-id3885 . -1) (undo-tree-id3886 . -1) (undo-tree-id3887 . -1) (undo-tree-id3888 . -1) (undo-tree-id3889 . -1) (undo-tree-id3890 . -1) (undo-tree-id3891 . -1) 1497 (t 26105 25580 987341 882000)) nil (26105 25955 614026 75000) 0 nil])
([nil nil ((1496 . 1497)) nil (26105 25955 614010 15000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . -1496) (undo-tree-id3901 . -1) (undo-tree-id3902 . -1) (undo-tree-id3903 . -1) (undo-tree-id3904 . -1) (undo-tree-id3905 . -1) (undo-tree-id3906 . -1) (undo-tree-id3907 . -1) (undo-tree-id3908 . -1) (undo-tree-id3909 . -1) (undo-tree-id3910 . -1) (undo-tree-id3911 . -1) (undo-tree-id3912 . -1) (undo-tree-id3913 . -1) (undo-tree-id3914 . -1) (undo-tree-id3915 . -1) (undo-tree-id3916 . -1) (undo-tree-id3917 . -1) (undo-tree-id3918 . -1) (undo-tree-id3919 . -1) (undo-tree-id3920 . -1) (undo-tree-id3921 . -1) (undo-tree-id3922 . -1) (undo-tree-id3923 . -1) (undo-tree-id3924 . -1) (undo-tree-id3925 . -1) (#("0" 0 1 (fontified t)) . -1497) (undo-tree-id3926 . -1) (undo-tree-id3927 . 1) (undo-tree-id3928 . -1) 1498 (t 26105 25955 620698 169000)) nil (26105 26012 851671 746000) 0 nil])
([nil nil ((1496 . 1497)) nil (26105 26012 851653 448000) 0 nil])
([nil nil ((#("8" 0 1 (fontified t)) . -1496) (undo-tree-id3895 . -1) (undo-tree-id3896 . -1) (undo-tree-id3897 . -1) (undo-tree-id3898 . -1) (undo-tree-id3899 . -1) (undo-tree-id3900 . -1) 1497) nil (26105 26012 851652 253000) 0 nil])
([nil nil ((1496 . 1497)) nil (26105 26012 851418 964000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -1497) (undo-tree-id3892 . -1) (undo-tree-id3893 . 1) (undo-tree-id3894 . -1) 1498) nil (26105 26012 851416 570000) 0 nil])
([nil nil ((1497 . 1498)) nil (26105 26012 851400 987000) 0 nil])
([nil nil ((#("7" 0 1 (fontified t)) . -1496) (undo-tree-id3935 . -1) (undo-tree-id3936 . -1) (undo-tree-id3937 . -1) (undo-tree-id3938 . -1) (undo-tree-id3939 . -1) (undo-tree-id3940 . -1) (undo-tree-id3941 . -1) (undo-tree-id3942 . -1) (undo-tree-id3943 . -1) (undo-tree-id3944 . -1) (undo-tree-id3945 . -1) (undo-tree-id3946 . -1) (undo-tree-id3947 . -1) (undo-tree-id3948 . -1) (undo-tree-id3949 . -1) (undo-tree-id3950 . -1) (undo-tree-id3951 . -1) (undo-tree-id3952 . -1) (undo-tree-id3953 . -1) (undo-tree-id3954 . -1) (#("5" 0 1 (fontified t)) . -1497) (undo-tree-id3955 . -1) (undo-tree-id3956 . -1) (undo-tree-id3957 . -1) (undo-tree-id3958 . -1) (undo-tree-id3959 . -1) (undo-tree-id3960 . -1) (undo-tree-id3961 . -1) (undo-tree-id3962 . -1) (undo-tree-id3963 . -1) (undo-tree-id3964 . -1) (undo-tree-id3965 . -1) (undo-tree-id3966 . -1) (undo-tree-id3967 . -1) (undo-tree-id3968 . -1) (undo-tree-id3969 . -1) (undo-tree-id3970 . -1) (undo-tree-id3971 . -1) 1498 (t 26105 26012 877368 351000)) nil (26105 26041 498487 262000) 0 nil])
([nil nil ((1496 . 1498)) nil (26105 26041 498461 991000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -1497) (undo-tree-id3929 . -1) (undo-tree-id3930 . -1) (undo-tree-id3931 . -1) (undo-tree-id3932 . -1) (undo-tree-id3933 . -1) (undo-tree-id3934 . -1) 1498) nil (26105 26041 498460 35000) 0 nil])
([nil nil ((1497 . 1498)) nil (26105 26041 498445 837000) 0 nil])
([nil nil ((1260 . 1262) (t 26105 26041 544036 777000)) nil (26105 26123 48257 77000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -584) (undo-tree-id3972 . -1) (undo-tree-id3973 . -1) (undo-tree-id3974 . -1) (undo-tree-id3975 . -1) (undo-tree-id3976 . -1) (undo-tree-id3977 . -1) (undo-tree-id3978 . -1) (undo-tree-id3979 . -1) (undo-tree-id3980 . -1) (undo-tree-id3981 . -1) (undo-tree-id3982 . -1) (undo-tree-id3983 . -1) (undo-tree-id3984 . -1) (undo-tree-id3985 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -585) (undo-tree-id3986 . -1) (undo-tree-id3987 . -1) (undo-tree-id3988 . -1) (undo-tree-id3989 . -1) (undo-tree-id3990 . -1) (undo-tree-id3991 . -1) (undo-tree-id3992 . -1) (undo-tree-id3993 . -1) (undo-tree-id3994 . -1) (undo-tree-id3995 . -1) (undo-tree-id3996 . -1) (undo-tree-id3997 . -1) 586 (t 26105 26123 74041 781000)) nil (26105 26260 807215 253000) 0 nil])
([nil nil ((584 . 586) (t 26105 26260 820716 903000)) nil (26105 26278 79751 753000) 0 nil])
([nil nil ((637 . 642) (t 26105 26278 94051 294000)) nil (26105 27021 502856 30000) 0 nil])
([nil nil ((nil rear-nonsticky nil 684 . 685) (nil fontified nil 683 . 685) (nil fontified nil 682 . 683) (nil fontified nil 681 . 682) (nil fontified nil 674 . 681) (nil fontified nil 673 . 674) (nil fontified nil 672 . 673) (nil fontified nil 667 . 672) (nil fontified nil 662 . 667) (nil fontified nil 659 . 662) (nil fontified nil 654 . 659) (nil fontified nil 653 . 654) (nil fontified nil 650 . 653) (nil fontified nil 649 . 650) (nil fontified nil 646 . 649) (nil fontified nil 642 . 646) (642 . 685)) nil (26105 27021 502853 870000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -642) 638) nil (26105 27021 502847 226000) 0 nil])
([nil nil ((nil rear-nonsticky nil 109 . 110) (nil fontified nil 108 . 110) (nil fontified nil 107 . 108) (nil fontified nil 102 . 107) (nil fontified nil 100 . 102) (nil fontified nil 91 . 100) (nil fontified nil 89 . 91) (nil fontified nil 84 . 89) (nil fontified nil 83 . 84) (nil fontified nil 81 . 83) (nil fontified nil 76 . 81) (nil fontified nil 75 . 76) (nil fontified nil 72 . 75) (72 . 110) (t 26105 27021 550763 547000)) nil (26105 27046 632490 998000) 0 nil])
([nil nil ((#("Not, " 0 3 (face font-lock-type-face fontified t) 3 5 (fontified t)) . -16) (undo-tree-id4005 . -5) (undo-tree-id4006 . -3) (undo-tree-id4007 . -4) (undo-tree-id4008 . -5) 21) nil (26105 27046 632487 747000) 0 nil])
([nil nil ((#("ops::" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t)) . -11) (undo-tree-id3998 . -5) (undo-tree-id3999 . -3) (undo-tree-id4000 . -5) (undo-tree-id4001 . -5) (undo-tree-id4002 . -5) (undo-tree-id4003 . -5) (undo-tree-id4004 . -5) 16) nil (26105 27046 632480 961000) 0 nil])
([nil nil ((#("EventType, " 0 9 (face font-lock-type-face fontified t) 9 11 (fontified t)) . -81) (undo-tree-id4041 . -11) (undo-tree-id4042 . -5) (undo-tree-id4043 . -6) (undo-tree-id4044 . -7) (undo-tree-id4045 . -8) (undo-tree-id4046 . -9) (undo-tree-id4047 . -10) (undo-tree-id4048 . -11) 92 (t 26105 27046 637431 752000)) nil (26105 27056 592047 119000) 0 nil])
([nil nil ((#("Event, " 0 5 (face font-lock-type-face fontified t) 5 7 (fontified t)) . -74) (undo-tree-id4031 . -7) (undo-tree-id4032 . -7) (undo-tree-id4033 . -7) (undo-tree-id4034 . -7) (undo-tree-id4035 . -7) (undo-tree-id4036 . -7) (undo-tree-id4037 . -7) (undo-tree-id4038 . -7) (undo-tree-id4039 . -7) (undo-tree-id4040 . -7) 81) nil (26105 27056 592040 609000) 0 nil])
([nil nil ((#("{" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -73) (undo-tree-id4011 . -1) (undo-tree-id4012 . -1) (undo-tree-id4013 . -1) (undo-tree-id4014 . -1) (undo-tree-id4015 . -1) (undo-tree-id4016 . -1) (undo-tree-id4017 . -1) (undo-tree-id4018 . -1) (undo-tree-id4019 . -1) (undo-tree-id4020 . -1) (undo-tree-id4021 . -1) (undo-tree-id4022 . -1) (undo-tree-id4023 . -1) (undo-tree-id4024 . -1) (undo-tree-id4025 . -1) (undo-tree-id4026 . -1) (undo-tree-id4027 . -1) (undo-tree-id4028 . -1) (undo-tree-id4029 . -1) (undo-tree-id4030 . -1) 74) nil (26105 27056 592032 23000) 0 nil])
([nil nil ((#("}" 0 1 (face (rainbow-delimiters-unmatched-face) fontified t)) . -78) (undo-tree-id4009 . -1) (undo-tree-id4010 . -1) 79) nil (26105 27056 592013 611000) 0 nil])
([nil nil ((nil rear-nonsticky nil 851 . 852) (nil fontified nil 851 . 852) (nil fontified nil 845 . 851) (nil fontified nil 844 . 845) (nil fontified nil 843 . 844) (nil fontified nil 842 . 843) (nil fontified nil 822 . 842) (nil fontified nil 821 . 822) (nil fontified nil 820 . 821) (nil fontified nil 806 . 820) (nil fontified nil 805 . 806) (nil fontified nil 801 . 805) (nil fontified nil 797 . 801) (nil fontified nil 795 . 797) (nil fontified nil 794 . 795) (nil fontified nil 793 . 794) (nil fontified nil 785 . 793) (nil fontified nil 776 . 785) (nil fontified nil 775 . 776) (nil fontified nil 774 . 775) (nil fontified nil 773 . 774) (nil fontified nil 772 . 773) (nil fontified nil 757 . 772) (nil fontified nil 755 . 757) (nil fontified nil 754 . 755) (nil fontified nil 753 . 754) (nil fontified nil 741 . 753) (nil fontified nil 740 . 741) (nil fontified nil 739 . 740) (nil fontified nil 736 . 739) (nil fontified nil 732 . 736) (nil fontified nil 696 . 732) (nil fontified nil 693 . 696) (nil fontified nil 689 . 693) (689 . 852) (t 26105 27056 637432 366000)) nil (26105 27202 1649 701000) 0 nil])
([nil nil ((855 . 859) (#("    " 0 4 (fontified nil)) . 854) (undo-tree-id4128 . -4) (854 . 859) (#("    " 0 4 (fontified nil)) . 853) (undo-tree-id4129 . -4) (852 . 858)) nil (26105 27202 1644 615000) 0 nil])
([nil nil ((891 . 894)) nil (26105 27202 1641 860000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -893) (undo-tree-id4127 . -1) 894) nil (26105 27202 1641 154000) 0 nil])
([nil nil ((893 . 896)) nil (26105 27202 1639 764000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-keyword-face fontified t)) . -894) (undo-tree-id4125 . -1) (#("r" 0 1 (fontified t)) . -895) (undo-tree-id4126 . -1) 896) nil (26105 27202 1638 929000) 0 nil])
([nil nil ((894 . 896)) nil (26105 27202 1636 827000) 0 nil])
([nil nil ((905 . 914)) nil (26105 27202 1636 218000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1701 . 1702) (nil fontified nil 1701 . 1702) (nil fontified nil 1692 . 1701) (nil fontified nil 1691 . 1692) (nil fontified nil 1678 . 1691) (nil fontified nil 1677 . 1678) (nil fontified nil 1676 . 1677) (nil fontified nil 1675 . 1676) (nil fontified nil 1674 . 1675) (nil fontified nil 1653 . 1674) (nil fontified nil 1652 . 1653) (nil fontified nil 1599 . 1652) (nil fontified nil 1598 . 1599) (nil fontified nil 1597 . 1598) (nil fontified nil 1596 . 1597) (nil fontified nil 1594 . 1596) (nil fontified nil 1593 . 1594) (nil fontified nil 1552 . 1593) (nil fontified nil 1551 . 1552) (nil fontified nil 1541 . 1551) (nil fontified nil 1530 . 1541) (nil fontified nil 1528 . 1530) (nil fontified nil 1524 . 1528) (nil fontified nil 1522 . 1524) (nil fontified nil 1517 . 1522) (nil fontified nil 1516 . 1517) (nil fontified nil 1505 . 1516) (nil fontified nil 1503 . 1505) (nil fontified nil 1494 . 1503) (nil fontified nil 1492 . 1494) (nil fontified nil 1487 . 1492) (nil fontified nil 1466 . 1487) (nil fontified nil 1465 . 1466) (nil fontified nil 1464 . 1465) (nil fontified nil 1459 . 1464) (nil fontified nil 1441 . 1459) (nil fontified nil 1440 . 1441) (nil fontified nil 1388 . 1440) (nil fontified nil 1387 . 1388) (nil fontified nil 1386 . 1387) (nil fontified nil 1385 . 1386) (nil fontified nil 1383 . 1385) (nil fontified nil 1382 . 1383) (nil fontified nil 1341 . 1382) (nil fontified nil 1340 . 1341) (nil fontified nil 1330 . 1340) (nil fontified nil 1320 . 1330) (nil fontified nil 1318 . 1320) (nil fontified nil 1314 . 1318) (nil fontified nil 1312 . 1314) (nil fontified nil 1307 . 1312) (nil fontified nil 1306 . 1307) (nil fontified nil 1295 . 1306) (nil fontified nil 1293 . 1295) (nil fontified nil 1284 . 1293) (nil fontified nil 1282 . 1284) (nil fontified nil 1277 . 1282) (nil fontified nil 1256 . 1277) (nil fontified nil 1255 . 1256) (nil fontified nil 1254 . 1255) (nil fontified nil 1249 . 1254) (nil fontified nil 1231 . 1249) (nil fontified nil 1230 . 1231) (nil fontified nil 1178 . 1230) (nil fontified nil 1177 . 1178) (nil fontified nil 1176 . 1177) (nil fontified nil 1175 . 1176) (nil fontified nil 1173 . 1175) (nil fontified nil 1172 . 1173) (nil fontified nil 1131 . 1172) (nil fontified nil 1130 . 1131) (nil fontified nil 1120 . 1130) (nil fontified nil 1110 . 1120) (nil fontified nil 1108 . 1110) (nil fontified nil 1104 . 1108) (nil fontified nil 1102 . 1104) (nil fontified nil 1097 . 1102) (nil fontified nil 1096 . 1097) (nil fontified nil 1085 . 1096) (nil fontified nil 1083 . 1085) (nil fontified nil 1074 . 1083) (nil fontified nil 1072 . 1074) (nil fontified nil 1067 . 1072) (nil fontified nil 1046 . 1067) (nil fontified nil 1045 . 1046) (nil fontified nil 1044 . 1045) (nil fontified nil 1039 . 1044) (nil fontified nil 1022 . 1039) (nil fontified nil 1021 . 1022) (nil fontified nil 1014 . 1021) (nil fontified nil 1009 . 1014) (nil fontified nil 996 . 1009) (nil fontified nil 995 . 996) (nil fontified nil 994 . 995) (nil fontified nil 993 . 994) (nil fontified nil 992 . 993) (nil fontified nil 973 . 992) (nil fontified nil 972 . 973) (nil fontified nil 967 . 972) (nil fontified nil 966 . 967) (nil fontified nil 962 . 966) (nil fontified nil 961 . 962) (nil fontified nil 958 . 961) (nil fontified nil 957 . 958) (nil fontified nil 952 . 957) (nil fontified nil 944 . 952) (nil fontified nil 925 . 944) (nil fontified nil 922 . 925) (nil fontified nil 914 . 922) (914 . 1702)) nil (26105 27202 1632 262000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -914) 911) nil (26105 27202 1618 143000) 0 nil])
([nil nil ((#("       // Examine new events
        while let Some(event) = gilrs.next_event() {
            match event {
                Event {
                    event: EventType::AxisChanged(gilrs::Axis::LeftStickX, value, _),
                    ..
                } => {
                    leftx = value;
                },
                Event {
                    event: EventType::AxisChanged(gilrs::Axis::LeftStickY, value, _),
                    ..
                } => {
                    lefty = value;
                },
                Event {
                    event: EventType::AxisChanged(gilrs::Axis::RightStickX, value, _),
                    ..
                } => {
                    rightx = value;
                },
                _ => {}
            }
        }" 0 7 (fontified t) 7 10 (face font-lock-comment-delimiter-face fontified t) 10 29 (face font-lock-comment-face fontified t) 29 37 (fontified t) 37 42 (face font-lock-keyword-face fontified t) 42 43 (fontified t) 43 46 (face font-lock-keyword-face fontified t) 46 47 (fontified t) 47 51 (face font-lock-type-face fontified t) 51 52 (face (rainbow-delimiters-depth-4-face) fontified t) 52 57 (fontified t) 57 58 (face (rainbow-delimiters-depth-4-face) fontified t) 58 77 (fontified t) 77 78 (face (rainbow-delimiters-depth-4-face) fontified t) 78 79 (face (rainbow-delimiters-depth-4-face) fontified t) 79 80 (fontified t) 80 81 (face (rainbow-delimiters-depth-4-face) fontified t) 81 94 (fontified t) 94 99 (face font-lock-keyword-face fontified t) 99 106 (fontified t) 106 107 (face (rainbow-delimiters-depth-5-face) fontified t) 107 124 (fontified t) 124 129 (face font-lock-type-face fontified t) 129 130 (fontified t) 130 131 (face (rainbow-delimiters-depth-6-face) fontified t) 131 132 (fontified t) 132 152 (fontified t) 152 157 (face font-lock-variable-name-face fontified t) 157 159 (fontified t) 159 168 (face font-lock-type-face fontified t) 168 170 (fontified t) 170 181 (face font-lock-type-face fontified t) 181 182 (face (rainbow-delimiters-depth-7-face) fontified t) 182 187 (face font-lock-constant-face fontified t) 187 189 (fontified t) 189 193 (face font-lock-type-face fontified t) 193 195 (fontified t) 195 205 (face font-lock-type-face fontified t) 205 215 (fontified t) 215 216 (face (rainbow-delimiters-depth-7-face) fontified t) 216 218 (fontified t) 218 257 (fontified t) 257 258 (face (rainbow-delimiters-depth-6-face) fontified t) 258 260 (fontified t) 260 261 (fontified t syntax-table (1)) 261 262 (fontified t) 262 263 (face (rainbow-delimiters-depth-6-face) fontified t) 263 264 (fontified t) 264 299 (fontified t) 299 315 (fontified t) 315 316 (face (rainbow-delimiters-depth-6-face) fontified t) 316 318 (fontified t) 318 334 (fontified t) 334 339 (face font-lock-type-face fontified t) 339 340 (fontified t) 340 341 (face (rainbow-delimiters-depth-6-face) fontified t) 341 342 (fontified t) 342 362 (fontified t) 362 367 (face font-lock-variable-name-face fontified t) 367 369 (fontified t) 369 378 (face font-lock-type-face fontified t) 378 380 (fontified t) 380 391 (face font-lock-type-face fontified t) 391 392 (face (rainbow-delimiters-depth-7-face) fontified t) 392 397 (face font-lock-constant-face fontified t) 397 399 (fontified t) 399 403 (face font-lock-type-face fontified t) 403 405 (fontified t) 405 415 (face font-lock-type-face fontified t) 415 425 (fontified t) 425 426 (face (rainbow-delimiters-depth-7-face) fontified t) 426 428 (fontified t) 428 467 (fontified t) 467 468 (face (rainbow-delimiters-depth-6-face) fontified t) 468 470 (fontified t) 470 471 (fontified t syntax-table (1)) 471 472 (fontified t) 472 473 (face (rainbow-delimiters-depth-6-face) fontified t) 473 525 (fontified t) 525 526 (face (rainbow-delimiters-depth-6-face) fontified t) 526 544 (fontified t) 544 549 (face font-lock-type-face fontified t) 549 550 (fontified t) 550 551 (face (rainbow-delimiters-depth-6-face) fontified t) 551 572 (fontified t) 572 577 (face font-lock-variable-name-face fontified t) 577 579 (fontified t) 579 588 (face font-lock-type-face fontified t) 588 590 (fontified t) 590 601 (face font-lock-type-face fontified t) 601 602 (face (rainbow-delimiters-depth-7-face) fontified t) 602 607 (face font-lock-constant-face fontified t) 607 609 (fontified t) 609 613 (face font-lock-type-face fontified t) 613 615 (fontified t) 615 626 (face font-lock-type-face fontified t) 626 636 (fontified t) 636 637 (face (rainbow-delimiters-depth-7-face) fontified t) 637 678 (fontified t) 678 679 (face (rainbow-delimiters-depth-6-face) fontified t) 679 681 (fontified t) 681 682 (fontified t syntax-table (1)) 682 683 (fontified t) 683 684 (face (rainbow-delimiters-depth-6-face) fontified t) 684 737 (fontified t) 737 738 (face (rainbow-delimiters-depth-6-face) fontified t) 738 759 (fontified t) 759 760 (fontified t syntax-table (1)) 760 761 (fontified t) 761 762 (face (rainbow-delimiters-depth-6-face) fontified t) 762 763 (face (rainbow-delimiters-depth-6-face) fontified t) 763 776 (fontified t) 776 777 (face (rainbow-delimiters-depth-5-face) fontified t) 777 786 (fontified t) 786 787 (face (rainbow-delimiters-depth-4-face) fontified t rear-nonsticky t)) . 907) (undo-tree-id4124 . -787)) nil (26105 27202 1617 306000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -906) (undo-tree-id4121 . -1) (undo-tree-id4122 . -1) (undo-tree-id4123 . -1) 907) nil (26105 27202 1615 986000) 0 nil])
([nil nil ((#("move " 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t)) . -891) (undo-tree-id4119 . -5) (undo-tree-id4120 . -5) 896) nil (26105 27202 1613 18000) 0 nil])
([nil nil ((854 . 858)) nil (26105 27202 1610 453000) 0 nil])
([nil nil ((858 . 862)) nil (26105 27202 1609 883000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -860) (undo-tree-id4117 . -1) (#("t" 0 1 (fontified t)) . -861) (undo-tree-id4118 . -1) 862) nil (26105 27202 1609 9000) 0 nil])
([nil nil ((860 . 862)) nil (26105 27202 1509 347000) 0 nil])
([nil nil ((862 . 869)) nil (26105 27202 1508 814000) 0 nil])
([nil nil ((#("handle" 0 6 (face font-lock-variable-name-face fontified t)) . -863) (undo-tree-id4116 . -6) 869) nil (26105 27202 1508 178000) 0 nil])
([nil nil ((#("_" 0 1 (face font-lock-variable-name-face fontified t)) . -862) (undo-tree-id4115 . -1) 863) nil (26105 27202 1506 608000) 0 nil])
([nil nil ((862 . 868)) nil (26105 27202 1505 98000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -867) (undo-tree-id4114 . -1) 868) nil (26105 27202 1504 310000) 0 nil])
([nil nil ((867 . 869)) nil (26105 27202 1502 975000) 0 nil])
([nil nil ((866 . 872) (#("thr" 0 3 (fontified nil)) . 866) (866 . 869) (#("thread" 0 6 (fontified nil)) . -866) (866 . 872) (#("thr" 0 3 (fontified t)) . -866) (undo-tree-id4113 . -3) 869) nil (26105 27202 1501 701000) 0 nil])
([nil nil ((872 . 876)) nil (26105 27202 1499 881000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 880 890 nil nil nil t #s(yas--exit 891 nil))) #s(yas--exit 891 nil) 38 nil #s(yas--field 1 880 890 nil nil nil t #s(yas--exit 891 nil)) nil nil)) (874 . 882) (#("spawn(${1:f})$0" 0 15 (fontified nil)) . 874) (874 . 889) (#("sp" 0 2 (fontified nil)) . 874) (874 . 876) (#("spawn(…)" 0 8 (fontified nil)) . -874) (874 . 882) (#("sp" 0 2 (fontified t)) . -874) (undo-tree-id4112 . -2) 876) nil (26105 27202 1498 792000) 0 nil])
([nil nil ((#("f" 0 1 (fontified nil)) . 881) (undo-tree-id4111 . -1) (880 . 881)) nil (26105 27202 1496 259000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -880) (undo-tree-id4108 . -1) (undo-tree-id4109 . -1) (undo-tree-id4110 . -1) 881) nil (26105 27202 1494 512000) 0 nil])
([nil nil ((880 . 887)) nil (26105 27202 1491 825000) 0 nil])
([nil nil ((884 . 885)) nil (26105 27202 1491 340000) 0 nil])
([nil nil ((888 . 890)) nil (26105 27202 1490 859000) 0 nil])
([nil nil ((apply yas--snippet-revive 874 891 #s(yas--snippet nil (#s(yas--field 1 880 890 nil nil nil t #s(yas--exit 891 nil))) #s(yas--exit 891 nil) 38 nil #s(yas--field 1 880 890 nil nil nil t #s(yas--exit 891 nil)) nil nil))) nil (26105 27202 1490 265000) 0 nil])
([nil nil ((891 . 895) (#("        " 0 8 (fontified nil)) . 890) (890 . 898) (#("    " 0 4 (fontified nil)) . 890) (undo-tree-id4104 . -4) (undo-tree-id4105 . -4) (undo-tree-id4106 . -4) (undo-tree-id4107 . -4) (889 . 895)) nil (26105 27202 1489 220000) 0 nil])
([nil nil ((897 . 898)) nil (26105 27202 1485 462000) 0 nil])
([nil nil ((890 . 898)) nil (26105 27202 1484 895000) 0 nil])
([nil nil ((nil rear-nonsticky nil 903 . 904) (nil fontified nil 898 . 904) (898 . 904)) nil (26105 27202 1484 269000) 0 nil])
([nil nil ((#("handle" 0 5 (fontified t) 5 6 (rear-nonsticky t fontified t)) . -898) (undo-tree-id4098 . -6) (undo-tree-id4099 . -6) (undo-tree-id4100 . -6) (undo-tree-id4101 . -6) (undo-tree-id4102 . -6) (undo-tree-id4103 . -6) 904) nil (26105 27202 1483 125000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1685 . 1686) (nil fontified nil 1685 . 1686) (nil fontified nil 1684 . 1685) (nil fontified nil 1675 . 1684) (nil fontified nil 1674 . 1675) (nil fontified nil 1661 . 1674) (nil fontified nil 1660 . 1661) (nil fontified nil 1659 . 1660) (nil fontified nil 1658 . 1659) (nil fontified nil 1657 . 1658) (nil fontified nil 1636 . 1657) (nil fontified nil 1635 . 1636) (nil fontified nil 1582 . 1635) (nil fontified nil 1581 . 1582) (nil fontified nil 1580 . 1581) (nil fontified nil 1579 . 1580) (nil fontified nil 1577 . 1579) (nil fontified nil 1576 . 1577) (nil fontified nil 1535 . 1576) (nil fontified nil 1534 . 1535) (nil fontified nil 1524 . 1534) (nil fontified nil 1513 . 1524) (nil fontified nil 1511 . 1513) (nil fontified nil 1507 . 1511) (nil fontified nil 1505 . 1507) (nil fontified nil 1500 . 1505) (nil fontified nil 1499 . 1500) (nil fontified nil 1488 . 1499) (nil fontified nil 1486 . 1488) (nil fontified nil 1477 . 1486) (nil fontified nil 1475 . 1477) (nil fontified nil 1470 . 1475) (nil fontified nil 1449 . 1470) (nil fontified nil 1448 . 1449) (nil fontified nil 1447 . 1448) (nil fontified nil 1442 . 1447) (nil fontified nil 1424 . 1442) (nil fontified nil 1423 . 1424) (nil fontified nil 1371 . 1423) (nil fontified nil 1370 . 1371) (nil fontified nil 1369 . 1370) (nil fontified nil 1368 . 1369) (nil fontified nil 1366 . 1368) (nil fontified nil 1365 . 1366) (nil fontified nil 1324 . 1365) (nil fontified nil 1323 . 1324) (nil fontified nil 1313 . 1323) (nil fontified nil 1303 . 1313) (nil fontified nil 1301 . 1303) (nil fontified nil 1297 . 1301) (nil fontified nil 1295 . 1297) (nil fontified nil 1290 . 1295) (nil fontified nil 1289 . 1290) (nil fontified nil 1278 . 1289) (nil fontified nil 1276 . 1278) (nil fontified nil 1267 . 1276) (nil fontified nil 1265 . 1267) (nil fontified nil 1260 . 1265) (nil fontified nil 1239 . 1260) (nil fontified nil 1238 . 1239) (nil fontified nil 1237 . 1238) (nil fontified nil 1232 . 1237) (nil fontified nil 1214 . 1232) (nil fontified nil 1213 . 1214) (nil fontified nil 1161 . 1213) (nil fontified nil 1160 . 1161) (nil fontified nil 1159 . 1160) (nil fontified nil 1158 . 1159) (nil fontified nil 1156 . 1158) (nil fontified nil 1155 . 1156) (nil fontified nil 1114 . 1155) (nil fontified nil 1113 . 1114) (nil fontified nil 1103 . 1113) (nil fontified nil 1093 . 1103) (nil fontified nil 1091 . 1093) (nil fontified nil 1087 . 1091) (nil fontified nil 1085 . 1087) (nil fontified nil 1080 . 1085) (nil fontified nil 1079 . 1080) (nil fontified nil 1068 . 1079) (nil fontified nil 1066 . 1068) (nil fontified nil 1057 . 1066) (nil fontified nil 1055 . 1057) (nil fontified nil 1050 . 1055) (nil fontified nil 1029 . 1050) (nil fontified nil 1028 . 1029) (nil fontified nil 1027 . 1028) (nil fontified nil 1022 . 1027) (nil fontified nil 1005 . 1022) (nil fontified nil 1004 . 1005) (nil fontified nil 997 . 1004) (nil fontified nil 992 . 997) (nil fontified nil 979 . 992) (nil fontified nil 978 . 979) (nil fontified nil 977 . 978) (nil fontified nil 976 . 977) (nil fontified nil 975 . 976) (nil fontified nil 956 . 975) (nil fontified nil 955 . 956) (nil fontified nil 950 . 955) (nil fontified nil 949 . 950) (nil fontified nil 945 . 949) (nil fontified nil 944 . 945) (nil fontified nil 941 . 944) (nil fontified nil 940 . 941) (nil fontified nil 935 . 940) (nil fontified nil 927 . 935) (nil fontified nil 908 . 927) (nil fontified nil 905 . 908) (nil fontified nil 898 . 905) (898 . 1686)) nil (26105 27202 1475 201000) 0 nil])
([nil nil ((#("       " 0 7 (fontified t)) . -898) 858) nil (26105 27202 1461 630000) 0 nil])
([nil nil ((889 . 898)) nil (26105 27202 1460 928000) 0 nil])
([nil nil ((898 . 899)) nil (26105 27202 1460 408000) 0 nil])
([nil nil ((898 . 904) (#("t" 0 1 (fontified nil)) . 898) (898 . 899) (#("thread" 0 6 (fontified nil)) . -898) (898 . 904) (#("t" 0 1 (fontified t)) . -898) (undo-tree-id4093 . -1) (undo-tree-id4094 . -1) (undo-tree-id4095 . -1) (undo-tree-id4096 . -1) (undo-tree-id4097 . -1) 899) nil (26105 27202 1459 295000) 0 nil])
([nil nil ((904 . 907)) nil (26105 27202 1454 765000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 912 937 nil nil nil t #s(yas--exit 938 nil))) #s(yas--exit 938 nil) 39 nil #s(yas--field 1 912 937 nil nil nil t #s(yas--exit 938 nil)) nil nil)) (906 . 916) (#("sleep(${1:dur})$0" 0 17 (fontified nil)) . 906) (906 . 923) (#("s" 0 1 (fontified nil)) . 906) (906 . 907) (#("sleep(…)" 0 8 (fontified nil)) . -906) (906 . 914) (#("s" 0 1 (fontified t)) . -906) (undo-tree-id4087 . -1) (undo-tree-id4088 . -1) (undo-tree-id4089 . -1) (undo-tree-id4090 . -1) (undo-tree-id4091 . -1) (undo-tree-id4092 . -1) 907) nil (26105 27202 1453 400000) 0 nil])
([nil nil ((#("dur" 0 3 (fontified nil)) . 913) (undo-tree-id4086 . -3) (912 . 913)) nil (26105 27202 1447 481000) 0 nil])
([nil nil ((913 . 915)) nil (26105 27202 1445 897000) 0 nil])
([nil nil ((912 . 920) (#("Dur" 0 3 (fontified nil)) . 912) (undo-tree-id4068 . -3) (912 . 915) (#("Duration" 0 8 (fontified nil)) . -912) (undo-tree-id4069 . -8) (912 . 920) (#("Dur" 0 3 (face font-lock-type-face fontified t)) . -912) (undo-tree-id4070 . -3) (undo-tree-id4071 . -3) (undo-tree-id4072 . -3) (undo-tree-id4073 . -1) (undo-tree-id4074 . -1) (undo-tree-id4075 . -1) (undo-tree-id4076 . -1) (undo-tree-id4077 . -1) (undo-tree-id4078 . -1) (undo-tree-id4079 . -1) (undo-tree-id4080 . -1) (undo-tree-id4081 . -1) (undo-tree-id4082 . -2) (undo-tree-id4083 . -3) (undo-tree-id4084 . -3) (undo-tree-id4085 . -3) 915) nil (26105 27202 1444 195000) 0 nil])
([nil nil ((920 . 926)) nil (26105 27202 1431 248000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 934 936 nil nil nil t #s(yas--exit 937 nil))) #s(yas--exit 937 nil) 40 nil #s(yas--field 1 934 936 nil nil nil t #s(yas--exit 937 nil)) #s(yas--field 1 912 937 nil nil nil t #s(yas--exit 938 nil)) nil)) (922 . 941) (#("from_millis(${1:millis})$0" 0 26 (fontified nil)) . 922) (undo-tree-id4050 . -26) (922 . 948) (#("from" 0 4 (fontified nil)) . 922) (undo-tree-id4051 . -4) (922 . 926) (#("from_millis(…)" 0 14 (fontified nil)) . -922) (undo-tree-id4052 . -14) (922 . 936) (#("from" 0 4 (fontified t)) . -922) (undo-tree-id4053 . -4) (undo-tree-id4054 . -4) (undo-tree-id4055 . -4) (undo-tree-id4056 . -1) (undo-tree-id4057 . -1) (undo-tree-id4058 . -2) (undo-tree-id4059 . -3) (undo-tree-id4060 . -4) (undo-tree-id4061 . -4) (undo-tree-id4062 . -4) (undo-tree-id4063 . -4) (undo-tree-id4064 . -4) (undo-tree-id4065 . -4) (undo-tree-id4066 . -4) (undo-tree-id4067 . -4) 926) nil (26105 27202 1429 270000) 0 nil])
([nil nil ((935 . 936) (#("millis" 0 6 (fontified nil)) . 935) (undo-tree-id4049 . -6) (934 . 935)) nil (26105 27202 1413 814000) 0 nil])
([nil nil ((apply yas--snippet-revive 906 938 #s(yas--snippet nil (#s(yas--field 1 912 937 nil nil nil t #s(yas--exit 938 nil))) #s(yas--exit 938 nil) 39 nil #s(yas--field 1 912 937 nil nil nil t #s(yas--exit 938 nil)) nil nil)) (apply yas--snippet-revive 922 937 #s(yas--snippet nil (#s(yas--field 1 934 936 nil nil nil t #s(yas--exit 937 nil))) #s(yas--exit 937 nil) 40 nil #s(yas--field 1 934 936 nil nil nil t #s(yas--exit 937 nil)) #s(yas--field 1 912 937 nil nil nil t #s(yas--exit 938 nil)) nil))) nil (26105 27202 1405 121000) 0 nil])
([nil nil ((938 . 939)) nil (26105 27202 1400 910000) 0 nil])
([nil nil ((1065 . 1072) (t 26105 27202 50774 623000)) nil (26105 27214 786072 69000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1113 . 1114) (nil fontified nil 1112 . 1114) (nil fontified nil 1107 . 1112) (1107 . 1114) (t 26105 27214 800775 406000)) nil (26105 27223 598939 313000) 0 nil])
([nil nil ((#("                Event {
                    event: EventType::AxisChanged(gilrs::Axis::LeftStickY, value, _),
                    ..
                } => {
                    lefty = value;
                },
                Event {
                    event: EventType::AxisChanged(gilrs::Axis::RightStickX, value, _),
                    ..
                } => {
                    rightx = value;
                }," 0 16 (fontified t) 16 21 (face font-lock-type-face fontified t) 21 22 (fontified t) 22 23 (face (rainbow-delimiters-depth-6-face) fontified t) 23 44 (fontified t) 44 49 (face font-lock-variable-name-face fontified t) 49 51 (fontified t) 51 60 (face font-lock-type-face fontified t) 60 62 (fontified t) 62 73 (face font-lock-type-face fontified t) 73 74 (face (rainbow-delimiters-depth-7-face) fontified t) 74 79 (face font-lock-constant-face fontified t) 79 81 (fontified t) 81 85 (face font-lock-type-face fontified t) 85 87 (fontified t) 87 97 (face font-lock-type-face fontified t) 97 107 (fontified t) 107 108 (face (rainbow-delimiters-depth-7-face) fontified t) 108 149 (fontified t) 149 150 (face (rainbow-delimiters-depth-6-face) fontified t) 150 152 (fontified t) 152 153 (fontified t syntax-table (1)) 153 154 (fontified t) 154 155 (face (rainbow-delimiters-depth-6-face) fontified t) 155 207 (fontified t) 207 208 (face (rainbow-delimiters-depth-6-face) fontified t) 208 226 (fontified t) 226 231 (face font-lock-type-face fontified t) 231 232 (fontified t) 232 233 (face (rainbow-delimiters-depth-6-face) fontified t) 233 254 (fontified t) 254 259 (face font-lock-variable-name-face fontified t) 259 261 (fontified t) 261 270 (face font-lock-type-face fontified t) 270 272 (fontified t) 272 283 (face font-lock-type-face fontified t) 283 284 (face (rainbow-delimiters-depth-7-face) fontified t) 284 289 (face font-lock-constant-face fontified t) 289 291 (fontified t) 291 295 (face font-lock-type-face fontified t) 295 297 (fontified t) 297 308 (face font-lock-type-face fontified t) 308 318 (fontified t) 318 319 (face (rainbow-delimiters-depth-7-face) fontified t) 319 360 (fontified t) 360 361 (face (rainbow-delimiters-depth-6-face) fontified t) 361 363 (fontified t) 363 364 (syntax-table (1) fontified t) 364 365 (fontified t) 365 366 (face (rainbow-delimiters-depth-6-face) fontified t) 366 419 (fontified t) 419 420 (face (rainbow-delimiters-depth-6-face) fontified t) 420 421 (fontified t)) . 1273) (undo-tree-id4180 . -421) (undo-tree-id4181 . -421) (undo-tree-id4182 . -421) (undo-tree-id4183 . -421) (undo-tree-id4184 . -421) (undo-tree-id4185 . -421) (undo-tree-id4186 . -421) (undo-tree-id4187 . -386) (undo-tree-id4188 . -362) (undo-tree-id4189 . -338) (undo-tree-id4190 . -337) (undo-tree-id4191 . -225) (undo-tree-id4192 . -205) (undo-tree-id4193 . -169) (undo-tree-id4194 . -145) (undo-tree-id4195 . -144) (undo-tree-id4196 . -120) (undo-tree-id4197 . -33) (undo-tree-id4198 . -8) (undo-tree-id4199 . -7) (undo-tree-id4200 . -2) (undo-tree-id4201 . -2) (undo-tree-id4202 . -2) (undo-tree-id4203 . -2) (undo-tree-id4204 . -2) (undo-tree-id4205 . -1) (undo-tree-id4206 . -421) (t 26105 27223 614109 280000)) nil (26105 27235 543371 39000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -1271) (undo-tree-id4178 . -1) (undo-tree-id4179 . -1) 1272) nil (26105 27235 543351 502000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1271) (undo-tree-id4130 . -1) (undo-tree-id4131 . -1) (undo-tree-id4132 . -1) (undo-tree-id4133 . -1) (undo-tree-id4134 . -1) (undo-tree-id4135 . -1) (undo-tree-id4136 . -1) (undo-tree-id4137 . -1) (undo-tree-id4138 . -1) (undo-tree-id4139 . -1) (undo-tree-id4140 . -1) (undo-tree-id4141 . -1) (undo-tree-id4142 . -1) (undo-tree-id4143 . -1) (undo-tree-id4144 . -1) (undo-tree-id4145 . -1) (undo-tree-id4146 . -1) (undo-tree-id4147 . -1) (undo-tree-id4148 . -1) (undo-tree-id4149 . -1) (undo-tree-id4150 . -1) (undo-tree-id4151 . -1) (undo-tree-id4152 . -1) (undo-tree-id4153 . -1) (undo-tree-id4154 . -1) (undo-tree-id4155 . -1) (undo-tree-id4156 . -1) (undo-tree-id4157 . -1) (undo-tree-id4158 . -1) (undo-tree-id4159 . -1) (undo-tree-id4160 . -1) (undo-tree-id4161 . -1) (undo-tree-id4162 . -1) (undo-tree-id4163 . -1) (undo-tree-id4164 . -1) (undo-tree-id4165 . -1) (undo-tree-id4166 . -1) (undo-tree-id4167 . -1) (undo-tree-id4168 . -1) (undo-tree-id4169 . -1) (undo-tree-id4170 . -1) (undo-tree-id4171 . -1) (undo-tree-id4172 . -1) (undo-tree-id4173 . -1) (undo-tree-id4174 . -1) (undo-tree-id4175 . -1) (undo-tree-id4176 . -1) (undo-tree-id4177 . -1) 1272) nil (26105 27235 543344 809000) 0 nil])
([nil nil ((#("AxisChanged" 0 11 (face font-lock-type-face fontified t)) . -1125) (undo-tree-id4348 . -11) (undo-tree-id4349 . -11) (undo-tree-id4350 . -11) (undo-tree-id4351 . -11) (undo-tree-id4352 . -11) (undo-tree-id4353 . -11) (undo-tree-id4354 . -11) (undo-tree-id4355 . -11) (undo-tree-id4356 . -11) 1136 (t 26105 27235 557443 346000)) nil (26105 27307 463438 604000) 0 nil])
([nil nil ((#("value, _)" 0 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-7-face) fontified t)) . -1151) (undo-tree-id4345 . -9) (undo-tree-id4346 . -5) (undo-tree-id4347 . -9) 1160) nil (26105 27307 463431 476000) 0 nil])
([nil nil ((#("LeftStickX, " 0 10 (face font-lock-type-face fontified t) 10 12 (fontified t)) . -1139) (undo-tree-id4339 . -12) (undo-tree-id4340 . -10) (undo-tree-id4341 . -12) (undo-tree-id4342 . -12) (undo-tree-id4343 . -12) (undo-tree-id4344 . -12) 1151) nil (26105 27307 463428 475000) 0 nil])
([nil nil ((#("Axis::" 0 4 (face font-lock-type-face fontified t) 4 6 (fontified t)) . -1133) (undo-tree-id4330 . -6) (undo-tree-id4331 . -4) (undo-tree-id4332 . -6) (undo-tree-id4333 . -6) (undo-tree-id4334 . -6) (undo-tree-id4335 . -6) (undo-tree-id4336 . -6) (undo-tree-id4337 . -6) (undo-tree-id4338 . -6) 1139) nil (26105 27307 463423 448000) 0 nil])
([nil nil ((#("gilrs::" 0 5 (face font-lock-constant-face fontified t) 5 7 (fontified t)) . -1126) (undo-tree-id4318 . -7) (undo-tree-id4319 . -5) (undo-tree-id4320 . -7) (undo-tree-id4321 . -7) (undo-tree-id4322 . -7) (undo-tree-id4323 . -7) (undo-tree-id4324 . -7) (undo-tree-id4325 . -7) (undo-tree-id4326 . -7) (undo-tree-id4327 . -7) (undo-tree-id4328 . -7) (undo-tree-id4329 . -7) 1133) nil (26105 27307 463415 900000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -1123) (undo-tree-id4240 . -1) (undo-tree-id4241 . -1) (undo-tree-id4242 . -1) (undo-tree-id4243 . -1) (undo-tree-id4244 . -1) (undo-tree-id4245 . -1) (undo-tree-id4246 . -1) (undo-tree-id4247 . -1) (undo-tree-id4248 . -1) (undo-tree-id4249 . -1) (undo-tree-id4250 . -1) (undo-tree-id4251 . -1) (undo-tree-id4252 . -1) (undo-tree-id4253 . -1) (undo-tree-id4254 . -1) (undo-tree-id4255 . -1) (undo-tree-id4256 . -1) (undo-tree-id4257 . -1) (undo-tree-id4258 . -1) (undo-tree-id4259 . -1) (undo-tree-id4260 . -1) (undo-tree-id4261 . -1) (undo-tree-id4262 . -1) (undo-tree-id4263 . -1) (undo-tree-id4264 . -1) (undo-tree-id4265 . -1) (undo-tree-id4266 . -1) (undo-tree-id4267 . -1) (undo-tree-id4268 . -1) (undo-tree-id4269 . -1) (undo-tree-id4270 . -1) (undo-tree-id4271 . -1) (undo-tree-id4272 . -1) (#(":" 0 1 (fontified t)) . -1124) (undo-tree-id4273 . -1) (undo-tree-id4274 . -1) (undo-tree-id4275 . -1) (undo-tree-id4276 . -1) (undo-tree-id4277 . -1) (undo-tree-id4278 . -1) (undo-tree-id4279 . -1) (undo-tree-id4280 . -1) (undo-tree-id4281 . -1) (undo-tree-id4282 . -1) (undo-tree-id4283 . -1) (undo-tree-id4284 . -1) (undo-tree-id4285 . -1) (undo-tree-id4286 . -1) (undo-tree-id4287 . -1) (undo-tree-id4288 . -1) (undo-tree-id4289 . -1) (undo-tree-id4290 . -1) (undo-tree-id4291 . -1) (undo-tree-id4292 . -1) (undo-tree-id4293 . -1) (undo-tree-id4294 . -1) (undo-tree-id4295 . -1) (undo-tree-id4296 . -1) (undo-tree-id4297 . -1) (undo-tree-id4298 . -1) (undo-tree-id4299 . -1) (undo-tree-id4300 . -1) (undo-tree-id4301 . -1) (undo-tree-id4302 . -1) (undo-tree-id4303 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-7-face) fontified t)) . -1125) (undo-tree-id4304 . -1) (undo-tree-id4305 . -1) (undo-tree-id4306 . -1) (undo-tree-id4307 . -1) (undo-tree-id4308 . -1) (undo-tree-id4309 . -1) (undo-tree-id4310 . -1) (undo-tree-id4311 . -1) (undo-tree-id4312 . -1) (undo-tree-id4313 . -1) (undo-tree-id4314 . -1) (undo-tree-id4315 . -1) (undo-tree-id4316 . -1) (undo-tree-id4317 . -1) 1126) nil (26105 27307 463404 303000) 0 nil])
([nil nil ((1123 . 1125)) nil (26105 27307 463350 204000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1139 1139 nil nil nil nil #s(yas--field 2 1141 1141 nil nil nil nil #s(yas--exit 1142 nil))) #s(yas--field 2 1141 1141 nil nil nil nil #s(yas--exit 1142 nil))) #s(yas--exit 1142 nil) 41 nil #s(yas--field 1 1139 1139 nil nil nil nil #s(yas--field 2 1141 1141 nil nil nil nil #s(yas--exit 1142 nil))) nil nil)) (1125 . 1142) (#("ButtonPressed($1, $2)$0" 0 23 (fontified nil)) . 1125) (1125 . 1148) (#("ButtonPressed(…)" 0 16 (fontified nil)) . -1125) (1125 . 1141)) nil (26105 27307 463349 287000) 0 nil])
([nil nil ((apply yas--snippet-revive 1125 1142 #s(yas--snippet nil (#s(yas--field 1 1139 1139 nil nil nil nil #s(yas--field 2 1141 1141 nil nil nil nil #s(yas--exit 1142 nil))) #s(yas--field 2 1141 1141 nil nil nil nil #s(yas--exit 1142 nil))) #s(yas--exit 1142 nil) 41 nil #s(yas--field 1 1139 1139 nil nil nil nil #s(yas--field 2 1141 1141 nil nil nil nil #s(yas--exit 1142 nil))) nil nil))) nil (26105 27307 463347 997000) 0 nil])
([nil nil ((1141 . 1142)) nil (26105 27307 463347 414000) 0 nil])
([nil nil ((1139 . 1140)) nil (26105 27307 463346 855000) 0 nil])
([nil nil ((1139 . 1140)) nil (26105 27307 463346 277000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -1139) (undo-tree-id4232 . -1) (undo-tree-id4233 . -1) (undo-tree-id4234 . -1) (undo-tree-id4235 . -1) (undo-tree-id4236 . -1) (undo-tree-id4237 . -1) (undo-tree-id4238 . -1) (undo-tree-id4239 . -1) 1140) nil (26105 27307 463345 75000) 0 nil])
([nil nil ((1139 . 1140)) nil (26105 27307 463338 697000) 0 nil])
([nil nil ((#("B" 0 1 (face font-lock-type-face fontified t)) . -1139) (undo-tree-id4227 . -1) (undo-tree-id4228 . -1) (undo-tree-id4229 . -1) (undo-tree-id4230 . -1) (undo-tree-id4231 . -1) 1140) nil (26105 27307 463337 708000) 0 nil])
([nil nil ((1139 . 1148)) nil (26105 27307 463333 234000) 0 nil])
([nil nil ((1146 . 1152) (#("Bu" 0 2 (fontified nil)) . 1146) (1146 . 1148) (#("Button" 0 6 (fontified nil)) . -1146) (1146 . 1152) (#("Bu" 0 2 (face font-lock-type-face fontified t)) . -1146) (undo-tree-id4220 . -2) (undo-tree-id4221 . -1) (undo-tree-id4222 . -1) (undo-tree-id4223 . -1) (undo-tree-id4224 . -1) (undo-tree-id4225 . -2) (undo-tree-id4226 . -2) 1148) nil (26105 27307 463331 776000) 0 nil])
([nil nil ((1152 . 1154)) nil (26105 27307 463324 654000) 0 nil])
([nil nil ((1154 . 1155)) nil (26105 27307 463323 817000) 0 nil])
([nil nil ((apply yas--snippet-revive 1154 1163 #s(yas--snippet nil nil #s(yas--exit 1163 nil) 42 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1163 nil) 42 nil nil nil nil)) (1154 . 1163) (#("LeftThumb$0" 0 11 (fontified nil)) . 1154) (1154 . 1165) (#("L" 0 1 (fontified nil)) . 1154) (1154 . 1155) (#("LeftThumb" 0 9 (fontified nil)) . -1154) (1154 . 1163) (#("L" 0 1 (face font-lock-type-face fontified t)) . -1154) (undo-tree-id4215 . -1) (undo-tree-id4216 . -1) (undo-tree-id4217 . -1) (undo-tree-id4218 . -1) (undo-tree-id4219 . -1) 1155) nil (26105 27307 463321 214000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1163) (undo-tree-id4207 . -1) (undo-tree-id4208 . -1) (undo-tree-id4209 . -1) (undo-tree-id4210 . -1) (undo-tree-id4211 . -1) (undo-tree-id4212 . -1) (undo-tree-id4213 . -1) (undo-tree-id4214 . -1) 1164) nil (26105 27307 463311 518000) 0 nil])
([nil nil ((#("value;" 0 6 (fontified t)) . -1243) (undo-tree-id4429 . -6) (undo-tree-id4430 . -6) (undo-tree-id4431 . -6) (undo-tree-id4432 . -6) (undo-tree-id4433 . -6) (undo-tree-id4434 . -6) (undo-tree-id4435 . -6) (undo-tree-id4436 . -6) (undo-tree-id4437 . -6) (undo-tree-id4438 . -6) (undo-tree-id4439 . -6) (undo-tree-id4440 . -6) (undo-tree-id4441 . -6) (undo-tree-id4442 . -6) (undo-tree-id4443 . -5) (undo-tree-id4444 . -6) 1249 (t 26105 27307 480781 94000)) nil (26105 27338 96983 573000) 0 nil])
([nil nil ((#("leftx = " 0 8 (fontified t)) . -1235) (undo-tree-id4411 . -8) (undo-tree-id4412 . -8) (undo-tree-id4413 . -8) (undo-tree-id4414 . -8) (undo-tree-id4415 . -8) (undo-tree-id4416 . -8) (undo-tree-id4417 . -8) (undo-tree-id4418 . -8) (undo-tree-id4419 . -8) (undo-tree-id4420 . -8) (undo-tree-id4421 . -8) (undo-tree-id4422 . -8) (undo-tree-id4423 . -8) (undo-tree-id4424 . -8) (undo-tree-id4425 . -8) (undo-tree-id4426 . -8) (undo-tree-id4427 . -8) (undo-tree-id4428 . -8) 1243) nil (26105 27338 96972 62000) 0 nil])
([nil nil ((1235 . 1240)) nil (26105 27338 96960 210000) 0 nil])
([nil nil ((apply yas--snippet-revive 1235 1245 #s(yas--snippet nil nil #s(yas--exit 1244 nil) 43 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1244 nil) 43 nil nil nil nil)) (1235 . 1245) (#("println!($0)" 0 12 (fontified nil)) . 1235) (1235 . 1247) (#("print" 0 5 (fontified nil)) . 1235) (1235 . 1240) (#("println!(…)" 0 11 (fontified nil)) . -1235) (1235 . 1246) (#("print" 0 5 (fontified t)) . -1235) (undo-tree-id4395 . -5) (undo-tree-id4396 . -1) (undo-tree-id4397 . -1) (undo-tree-id4398 . -1) (undo-tree-id4399 . -2) (undo-tree-id4400 . -2) (undo-tree-id4401 . -2) (undo-tree-id4402 . -3) (undo-tree-id4403 . -3) (undo-tree-id4404 . -4) (undo-tree-id4405 . -4) (undo-tree-id4406 . -5) (undo-tree-id4407 . -5) (undo-tree-id4408 . -5) (undo-tree-id4409 . -5) (undo-tree-id4410 . -5) 1240) nil (26105 27338 96958 294000) 0 nil])
([nil nil ((1244 . 1246)) nil (26105 27338 96945 855000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -1244) (undo-tree-id4379 . -1) (undo-tree-id4380 . -1) (undo-tree-id4381 . -1) (undo-tree-id4382 . -1) (undo-tree-id4383 . -1) (undo-tree-id4384 . -1) (undo-tree-id4385 . -1) (undo-tree-id4386 . -1) (undo-tree-id4387 . -1) (undo-tree-id4388 . -1) (#("e" 0 1 (fontified t)) . -1245) (undo-tree-id4389 . -1) (undo-tree-id4390 . -1) (undo-tree-id4391 . -1) (undo-tree-id4392 . -1) (undo-tree-id4393 . -1) (undo-tree-id4394 . -1) 1246) nil (26105 27338 96944 559000) 0 nil])
([nil nil ((1244 . 1246)) nil (26105 27338 96933 20000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -1244) (undo-tree-id4370 . -1) (undo-tree-id4371 . -1) (undo-tree-id4372 . -1) (undo-tree-id4373 . -1) (undo-tree-id4374 . -1) (undo-tree-id4375 . -1) (#(":" 0 1 (face font-lock-string-face fontified t)) . -1245) (undo-tree-id4376 . -1) (undo-tree-id4377 . -1) (undo-tree-id4378 . -1) 1246) nil (26105 27338 96931 683000) 0 nil])
([nil nil ((1244 . 1245)) nil (26105 27338 96924 743000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -1244) (undo-tree-id4367 . -1) (undo-tree-id4368 . -1) (undo-tree-id4369 . -1) 1245) nil (26105 27338 96923 992000) 0 nil])
([nil nil ((1244 . 1246)) nil (26105 27338 96920 995000) 0 nil])
([nil nil ((1245 . 1247)) nil (26105 27338 96920 401000) 0 nil])
([nil nil ((#(";" 0 1 (face font-lock-string-face fontified t)) . -1245) (undo-tree-id4357 . -1) (undo-tree-id4358 . -1) (undo-tree-id4359 . -1) (undo-tree-id4360 . -1) (undo-tree-id4361 . -1) (undo-tree-id4362 . -1) (undo-tree-id4363 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -1246) (undo-tree-id4364 . -1) (undo-tree-id4365 . -1) (undo-tree-id4366 . -1) 1247) nil (26105 27338 96918 578000) 0 nil])
([nil nil ((1245 . 1255)) nil (26105 27338 96905 17000) 0 nil])
([nil nil ((1255 . 1263)) nil (26105 27338 96903 769000) 0 nil])
([nil nil ((1265 . 1266)) nil (26105 27338 96899 477000) 0 nil])
([nil nil ((889 . 898) (t 26105 27338 144116 310000)) nil (26105 27382 816828 242000) 0 nil])
([nil nil ((898 . 904)) nil (26105 27382 816827 172000) 0 nil])
([nil nil ((1348 . 1356) (1348 . 1349)) nil (26105 27382 816825 633000) 0 nil])
([nil nil ((1 . 19) (#("
use gilrs::Gilrs;" 0 1 (fontified t) 1 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 10 (face font-lock-constant-face fontified t) 10 12 (fontified t) 12 17 (face font-lock-type-face fontified t) 17 18 (fontified t)) . -61) (undo-tree-id4445 . -1) (913 . 917) (963 . 967) (993 . 997) (1050 . 1054) (1080 . 1084) (1115 . 1119) (1204 . 1208) (1223 . 1227) (1250 . 1254) (1282 . 1286) (1316 . 1320) (1336 . 1340) (1338 . 1342) 1336 (#("    " 0 4 (fontified t)) . 1366) (#("
" 0 1 (fontified t)) . 1412) 1122) nil (26105 27382 816820 538000) 0 nil])
([nil nil ((1317 . 1342) (t 26105 27382 834119 55000)) nil (26105 27430 916370 572000) 0 nil])
([nil nil ((1342 . 1350)) nil (26105 27430 916369 894000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1354 1359 nil nil nil t #s(yas--field 2 1361 1366 nil nil nil nil #s(yas--exit 1367 nil))) #s(yas--field 2 1361 1366 nil nil nil nil #s(yas--exit 1367 nil))) #s(yas--exit 1367 nil) 44 nil #s(yas--field 1 1354 1359 nil nil nil t #s(yas--field 2 1361 1366 nil nil nil nil #s(yas--exit 1367 nil))) nil nil)) (1348 . 1365) (#("store(${1:val}, ${2:order})$0" 0 29 (fontified nil)) . 1348) (1348 . 1377) (#("st" 0 2 (fontified nil)) . 1348) (1348 . 1350) (#("store(…)" 0 8 (fontified nil)) . -1348) (1348 . 1356) (#("st" 0 2 (fontified t)) . -1348) (undo-tree-id4547 . -2) (undo-tree-id4548 . -1) (undo-tree-id4549 . -1) (undo-tree-id4550 . -1) (undo-tree-id4551 . -2) (undo-tree-id4552 . -2) (undo-tree-id4553 . -2) (undo-tree-id4554 . -2) 1350) nil (26105 27430 916368 467000) 0 nil])
([nil nil ((#("val" 0 3 (fontified nil)) . 1355) (undo-tree-id4546 . -3) (1354 . 1355)) nil (26105 27430 916361 94000) 0 nil])
([nil nil ((#("O" 0 1 (face font-lock-type-face fontified t)) . -1354) (undo-tree-id4535 . -1) (undo-tree-id4536 . -1) (undo-tree-id4537 . -1) (undo-tree-id4538 . -1) (undo-tree-id4539 . -1) (undo-tree-id4540 . -1) (undo-tree-id4541 . -1) (undo-tree-id4542 . -1) (undo-tree-id4543 . -1) (undo-tree-id4544 . -1) (undo-tree-id4545 . -1) 1355) nil (26105 27430 916359 237000) 0 nil])
([nil nil ((1354 . 1355)) nil (26105 27430 916351 411000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -1354) (undo-tree-id4526 . -1) (undo-tree-id4527 . -1) (undo-tree-id4528 . -1) (undo-tree-id4529 . -1) (undo-tree-id4530 . -1) (undo-tree-id4531 . -1) (undo-tree-id4532 . -1) (undo-tree-id4533 . -1) (undo-tree-id4534 . -1) 1355) nil (26105 27430 916350 471000) 0 nil])
([nil nil ((1354 . 1356)) nil (26105 27430 916344 65000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -1354) (undo-tree-id4503 . -1) (undo-tree-id4504 . -1) (undo-tree-id4505 . -1) (undo-tree-id4506 . -1) (undo-tree-id4507 . -1) (undo-tree-id4508 . -1) (undo-tree-id4509 . -1) (undo-tree-id4510 . -1) (undo-tree-id4511 . -1) (undo-tree-id4512 . -1) (undo-tree-id4513 . -1) (undo-tree-id4514 . -1) (undo-tree-id4515 . -1) (undo-tree-id4516 . -1) (undo-tree-id4517 . -1) (undo-tree-id4518 . -1) (#("r" 0 1 (fontified t)) . -1355) (undo-tree-id4519 . -1) (undo-tree-id4520 . -1) (undo-tree-id4521 . -1) (undo-tree-id4522 . -1) (undo-tree-id4523 . -1) (undo-tree-id4524 . -1) (undo-tree-id4525 . -1) 1356) nil (26105 27430 916342 547000) 0 nil])
([nil nil ((1354 . 1356)) nil (26105 27430 916326 478000) 0 nil])
([nil nil ((apply yas--snippet-revive 1354 1359 #s(yas--snippet nil nil nil 45 nil nil #s(yas--field 1 1354 1359 nil nil nil t #s(yas--field 2 1361 1366 nil nil nil nil #s(yas--exit 1367 nil))) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 45 nil nil #s(yas--field 1 1354 1359 nil nil nil t #s(yas--field 2 1361 1366 nil nil nil nil #s(yas--exit 1367 nil))) nil)) (1354 . 1359) (#("false" 0 5 (fontified nil)) . 1354) (undo-tree-id4492 . -5) (1354 . 1359) (#("fa" 0 2 (fontified nil)) . 1354) (undo-tree-id4493 . -2) (1354 . 1356) (#("false" 0 5 (fontified nil)) . -1354) (undo-tree-id4494 . -5) (1354 . 1359) (#("fa" 0 2 (fontified t)) . -1354) (undo-tree-id4495 . -2) (undo-tree-id4496 . -2) (undo-tree-id4497 . -2) (undo-tree-id4498 . -1) (undo-tree-id4499 . -1) (undo-tree-id4500 . -2) (undo-tree-id4501 . -2) (undo-tree-id4502 . -2) 1356) nil (26105 27430 916324 895000) 0 nil])
([nil nil ((apply yas--snippet-revive 1348 1367 #s(yas--snippet nil (#s(yas--field 1 1354 1359 nil nil nil t #s(yas--field 2 1361 1366 nil nil nil nil #s(yas--exit 1367 nil))) #s(yas--field 2 1361 1366 nil nil nil nil #s(yas--exit 1367 nil))) #s(yas--exit 1367 nil) 44 nil #s(yas--field 1 1354 1359 nil nil nil t #s(yas--field 2 1361 1366 nil nil nil nil #s(yas--exit 1367 nil))) nil nil))) nil (26105 27430 916316 422000) 0 nil])
([nil nil ((#("order" 0 5 (fontified t)) . -1361) (undo-tree-id4485 . -5) (undo-tree-id4486 . -5) (undo-tree-id4487 . -1) (undo-tree-id4488 . -2) (undo-tree-id4489 . -3) (undo-tree-id4490 . -4) (undo-tree-id4491 . -5) 1366) nil (26105 27430 916315 580000) 0 nil])
([nil nil ((1361 . 1363)) nil (26105 27430 916310 290000) 0 nil])
([nil nil ((#("P" 0 1 (face font-lock-type-face fontified t)) . -1361) (undo-tree-id4465 . -1) (undo-tree-id4466 . -1) (undo-tree-id4467 . -1) (undo-tree-id4468 . -1) (undo-tree-id4469 . -1) (undo-tree-id4470 . -1) (undo-tree-id4471 . -1) (undo-tree-id4472 . -1) (undo-tree-id4473 . -1) (undo-tree-id4474 . -1) (undo-tree-id4475 . -1) (undo-tree-id4476 . -1) (undo-tree-id4477 . -1) (#("O" 0 1 (face font-lock-type-face fontified t)) . -1362) (undo-tree-id4478 . -1) (undo-tree-id4479 . -1) (undo-tree-id4480 . -1) (undo-tree-id4481 . -1) (undo-tree-id4482 . -1) (undo-tree-id4483 . -1) (undo-tree-id4484 . -1) 1363) nil (26105 27430 916308 672000) 0 nil])
([nil nil ((1361 . 1362)) nil (26105 27430 916294 259000) 0 nil])
([nil nil ((#("P" 0 1 (face font-lock-type-face fontified t)) . -1361) (undo-tree-id4458 . -1) (undo-tree-id4459 . -1) (undo-tree-id4460 . -1) (undo-tree-id4461 . -1) (undo-tree-id4462 . -1) (undo-tree-id4463 . -1) (undo-tree-id4464 . -1) 1362) nil (26105 27430 916292 890000) 0 nil])
([nil nil ((1361 . 1363)) nil (26105 27430 916218 9000) 0 nil])
([nil nil ((apply yas--snippet-revive 1361 1397 #s(yas--snippet nil nil #s(yas--exit 1397 nil) 46 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1397 nil) 46 nil nil nil nil)) (1361 . 1397) (#("std::sync::atomic::Ordering::Relaxed$0" 0 38 (fontified nil)) . 1361) (1361 . 1399) (#("Or" 0 2 (fontified nil)) . 1361) (1361 . 1363) (#("std::sync::atomic::Ordering::Relaxed" 0 36 (fontified nil)) . -1361) (1361 . 1397) (#("Or" 0 2 (face font-lock-type-face fontified t)) . -1361) (undo-tree-id4446 . -2) (undo-tree-id4447 . -2) (undo-tree-id4448 . -1) (undo-tree-id4449 . -1) (undo-tree-id4450 . -1) (undo-tree-id4451 . -1) (undo-tree-id4452 . -1) (undo-tree-id4453 . -2) (undo-tree-id4454 . -2) (undo-tree-id4455 . -2) (undo-tree-id4456 . -2) (undo-tree-id4457 . -2) 1363) nil (26105 27430 916215 187000) 0 nil])
([nil nil ((1398 . 1399)) nil (26105 27430 916195 550000) 0 nil])
([nil nil ((1342 . 1345) (t 26105 27430 934122 5000)) nil (26105 27440 897434 902000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -1344) (undo-tree-id4559 . -1) (undo-tree-id4560 . -1) (undo-tree-id4561 . -1) 1345) nil (26105 27440 897433 903000) 0 nil])
([nil nil ((1344 . 1345)) nil (26105 27440 897431 27000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -1344) (undo-tree-id4555 . -1) (undo-tree-id4556 . -1) (undo-tree-id4557 . -1) (undo-tree-id4558 . -1) 1345) nil (26105 27440 897429 328000) 0 nil])
([nil nil ((1344 . 1350)) nil (26105 27440 897418 408000) 0 nil])
([nil nil ((1407 . 1408)) nil (26105 27440 897414 439000) 0 nil])
([nil nil ((1408 . 1433) (t 26105 27440 914122 617000)) nil (26105 27464 682515 883000) 0 nil])
([nil nil ((#("                        
" 0 24 (fontified t) 24 25 (fontified t)) . 1409) (undo-tree-id4586 . -24) (undo-tree-id4587 . -24) (undo-tree-id4588 . -24) (undo-tree-id4589 . -24) (undo-tree-id4590 . -25)) nil (26105 27464 682514 444000) 0 nil])
([nil nil ((1430 . 1451)) nil (26105 27464 682508 169000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1800 . 1801) (nil fontified nil 1800 . 1801) (nil fontified nil 1784 . 1800) (nil fontified nil 1780 . 1784) (nil fontified nil 1779 . 1780) (nil fontified nil 1778 . 1779) (nil fontified nil 1777 . 1778) (nil fontified nil 1776 . 1777) (nil fontified nil 1769 . 1776) (nil fontified nil 1767 . 1769) (nil fontified nil 1759 . 1767) (nil fontified nil 1757 . 1759) (nil fontified nil 1751 . 1757) (nil fontified nil 1749 . 1751) (nil fontified nil 1745 . 1749) (nil fontified nil 1743 . 1745) (nil fontified nil 1740 . 1743) (nil fontified nil 1738 . 1740) (nil fontified nil 1733 . 1738) (nil fontified nil 1732 . 1733) (nil fontified nil 1727 . 1732) (nil fontified nil 1726 . 1727) (nil fontified nil 1721 . 1726) (nil fontified nil 1720 . 1721) (nil fontified nil 1719 . 1720) (nil fontified nil 1713 . 1719) (nil fontified nil 1689 . 1713) (nil fontified nil 1687 . 1689) (nil fontified nil 1686 . 1687) (nil fontified nil 1666 . 1686) (nil fontified nil 1665 . 1666) (nil fontified nil 1657 . 1665) (nil fontified nil 1653 . 1657) (nil fontified nil 1633 . 1653) (nil fontified nil 1632 . 1633) (nil fontified nil 1631 . 1632) (nil fontified nil 1630 . 1631) (nil fontified nil 1629 . 1630) (nil fontified nil 1627 . 1629) (nil fontified nil 1626 . 1627) (nil fontified nil 1622 . 1626) (nil fontified nil 1603 . 1622) (nil fontified nil 1599 . 1603) (nil fontified nil 1579 . 1599) (nil fontified nil 1577 . 1579) (nil fontified nil 1576 . 1577) (nil fontified nil 1573 . 1576) (nil fontified nil 1564 . 1573) (nil fontified nil 1562 . 1564) (nil fontified nil 1556 . 1562) (nil fontified nil 1554 . 1556) (nil fontified nil 1549 . 1554) (nil fontified nil 1548 . 1549) (nil fontified nil 1535 . 1548) (nil fontified nil 1533 . 1535) (nil fontified nil 1524 . 1533) (nil fontified nil 1523 . 1524) (nil fontified nil 1522 . 1523) (nil fontified nil 1517 . 1522) (nil fontified nil 1515 . 1517) (nil fontified nil 1510 . 1515) (nil fontified nil 1506 . 1510) (nil fontified nil 1486 . 1506) (nil fontified nil 1485 . 1486) (nil fontified nil 1484 . 1485) (nil fontified nil 1483 . 1484) (nil fontified nil 1478 . 1483) (nil fontified nil 1476 . 1478) (nil fontified nil 1471 . 1476) (nil fontified nil 1467 . 1471) (nil fontified nil 1451 . 1467) (1451 . 1801)) nil (26105 27464 682503 719000) 0 nil])
([nil nil ((#("                    " 0 16 (fontified t) 16 20 (fontified t)) . -1451) 1418) nil (26105 27464 682488 803000) 0 nil])
([nil nil ((#("LeftThumb" 0 9 (face font-lock-type-face fontified t)) . -1544) (undo-tree-id4578 . -9) (undo-tree-id4579 . -9) (undo-tree-id4580 . -9) (undo-tree-id4581 . -9) (undo-tree-id4582 . -9) (undo-tree-id4583 . -9) (undo-tree-id4584 . -9) (undo-tree-id4585 . -9) 1553) nil (26105 27464 682486 902000) 0 nil])
([nil nil ((1544 . 1545)) nil (26105 27464 682477 104000) 0 nil])
([nil nil ((apply yas--snippet-revive 1544 1554 #s(yas--snippet nil nil #s(yas--exit 1554 nil) 47 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1554 nil) 47 nil nil nil nil)) (1544 . 1554) (#("RightThumb$0" 0 12 (fontified nil)) . 1544) (1544 . 1556) (#("R" 0 1 (fontified nil)) . 1544) (1544 . 1545) (#("RightThumb" 0 10 (fontified nil)) . -1544) (1544 . 1554) (#("R" 0 1 (face font-lock-type-face fontified t)) . -1544) (undo-tree-id4573 . -1) (undo-tree-id4574 . -1) (undo-tree-id4575 . -1) (undo-tree-id4576 . -1) (undo-tree-id4577 . -1) 1545) nil (26105 27464 682474 616000) 0 nil])
([nil nil ((#("false" 0 5 (face font-lock-keyword-face fontified t)) . -1714) (undo-tree-id4571 . -5) (undo-tree-id4572 . -5) 1719) nil (26105 27464 682464 838000) 0 nil])
([nil nil ((1714 . 1716)) nil (26105 27464 682459 919000) 0 nil])
([nil nil ((apply yas--snippet-revive 1714 1718 #s(yas--snippet nil nil nil 48 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 48 nil nil nil nil)) (1714 . 1718) (#("true" 0 4 (fontified nil)) . 1714) (1714 . 1718) (#("tr" 0 2 (fontified nil)) . 1714) (1714 . 1716) (#("true" 0 4 (fontified nil)) . -1714) (1714 . 1718) (#("tr" 0 2 (fontified t)) . -1714) (undo-tree-id4562 . -2) (undo-tree-id4563 . -1) (undo-tree-id4564 . -1) (undo-tree-id4565 . -1) (undo-tree-id4566 . -2) (undo-tree-id4567 . -2) (undo-tree-id4568 . -2) (undo-tree-id4569 . -2) (undo-tree-id4570 . -2) 1716) nil (26105 27464 682454 292000) 0 nil])
([nil nil ((#("left" 0 4 (face font-lock-string-face fontified t)) . -1648) (undo-tree-id4591 . -4) (undo-tree-id4592 . -4) 1652 (t 26105 27464 734124 80000)) nil (26105 27472 742446 924000) 0 nil])
([nil nil ((1648 . 1653)) nil (26105 27472 742434 419000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -2484) (undo-tree-id4593 . -1) (undo-tree-id4594 . -1) (undo-tree-id4595 . -1) (undo-tree-id4596 . -1) (undo-tree-id4597 . -1) (undo-tree-id4598 . -1) (undo-tree-id4599 . -1) (undo-tree-id4600 . -1) (undo-tree-id4601 . -1) (undo-tree-id4602 . -1) (undo-tree-id4603 . -1) (undo-tree-id4604 . -1) (undo-tree-id4605 . -1) (undo-tree-id4606 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -2485) (undo-tree-id4607 . -1) (undo-tree-id4608 . -1) (undo-tree-id4609 . -1) (undo-tree-id4610 . -1) (undo-tree-id4611 . -1) (undo-tree-id4612 . -1) (undo-tree-id4613 . -1) (undo-tree-id4614 . -1) (undo-tree-id4615 . -1) (undo-tree-id4616 . -1) (undo-tree-id4617 . -1) (undo-tree-id4618 . -1) 2486 (t 26105 27472 760791 239000)) nil (26105 27846 207889 202000) 0 nil])
([nil nil ((apply -15 327 535 undo--wrap-and-run-primitive-undo 327 535 ((529 . 532) (496 . 499) (440 . 443) (384 . 387) (339 . 342)))) nil (26105 27905 63264 351000) 0 nil])
([nil nil ((535 . 536) (t 26105 27905 124151 113000)) nil (26105 27911 203062 746000) 0 nil])
([nil nil ((536 . 537)) nil (26105 28118 754544 173000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -2278) (undo-tree-id4751 . -1) (undo-tree-id4752 . -1) (undo-tree-id4753 . -1) (undo-tree-id4754 . -1) (undo-tree-id4755 . -1) (undo-tree-id4756 . -1) (undo-tree-id4757 . -1) (undo-tree-id4758 . -1) (undo-tree-id4759 . -1) (undo-tree-id4760 . -1) (undo-tree-id4761 . -1) (undo-tree-id4762 . -1) 2279 (t 26105 28119 654164 281000)) nil (26105 31139 460887 672000) 0 nil] [nil nil ((#("thread::sleep(Duration::from_millis(850));" 0 5 (face font-lock-constant-face fontified t) 5 6 (face font-lock-constant-face fontified t) 6 8 (fontified t) 8 13 (fontified t) 13 14 (face (rainbow-delimiters-depth-4-face) fontified t) 14 22 (face font-lock-type-face fontified t) 22 24 (fontified t) 24 28 (fontified t) 28 35 (fontified t) 35 36 (face (rainbow-delimiters-depth-5-face) fontified t) 36 38 (fontified t) 38 39 (fontified t) 39 40 (face (rainbow-delimiters-depth-5-face) fontified t) 40 41 (face (rainbow-delimiters-depth-4-face) fontified t) 41 42 (fontified t rear-nonsticky t)) . 2701) (undo-tree-id4623 . -17) (undo-tree-id4624 . -42) (undo-tree-id4625 . -17) (undo-tree-id4626 . -17) (undo-tree-id4627 . -17) (undo-tree-id4628 . -17) (undo-tree-id4629 . -17) (undo-tree-id4630 . -17) (undo-tree-id4631 . -17) (undo-tree-id4632 . -17) (undo-tree-id4633 . -17) (undo-tree-id4634 . -17) (undo-tree-id4635 . -17) (undo-tree-id4636 . -17) (undo-tree-id4637 . -17) (undo-tree-id4638 . -17) (undo-tree-id4639 . -17) (undo-tree-id4640 . -17) (undo-tree-id4641 . -17) (undo-tree-id4642 . -42) (undo-tree-id4643 . -42) (undo-tree-id4644 . -42) (undo-tree-id4645 . -42) (undo-tree-id4646 . -42) (undo-tree-id4647 . -42) (undo-tree-id4648 . -42) (undo-tree-id4649 . -42) (undo-tree-id4650 . -42) (undo-tree-id4651 . -42) (undo-tree-id4652 . -42) (undo-tree-id4653 . -42) (undo-tree-id4654 . -42) 2743 (t 26105 27911 220818 154000)) ((2701 . 2743)) (26105 28118 233208 165000) 0 nil])
([nil current ((2278 . 2279) (t 26105 31139 477682 978000)) nil (26105 32147 962469 899000) 0 nil])
([nil nil ((2465 . 2481) (#("                " 0 16 (fontified nil)) . 2464) (undo-tree-id4619 . -16) (undo-tree-id4620 . -16) (undo-tree-id4621 . -16) (undo-tree-id4622 . -16) (2463 . 2481)) ((#("
                
" 0 1 (face font-lock-comment-face fontified t) 1 17 (fontified nil) 17 18 (fontified nil)) . 2463) (undo-tree-id4683 . -18) (undo-tree-id4684 . -18) (undo-tree-id4685 . -18) (undo-tree-id4686 . -17) (undo-tree-id4687 . -17) (undo-tree-id4688 . -17) (undo-tree-id4689 . -18) (undo-tree-id4690 . -18) (undo-tree-id4691 . -18) (undo-tree-id4692 . -18) (undo-tree-id4693 . -18) (undo-tree-id4694 . -18) (undo-tree-id4695 . -18) (undo-tree-id4696 . -18) (undo-tree-id4697 . -18) (undo-tree-id4698 . -18) (undo-tree-id4699 . -18) (undo-tree-id4700 . -18) (undo-tree-id4701 . -18) (undo-tree-id4702 . -18) (undo-tree-id4703 . -18) (undo-tree-id4704 . -18) (undo-tree-id4705 . -18) (undo-tree-id4706 . -18) (undo-tree-id4707 . -18) (undo-tree-id4708 . -18) (undo-tree-id4709 . -18) (undo-tree-id4710 . -18) (undo-tree-id4711 . -18) (undo-tree-id4712 . -18) (undo-tree-id4713 . -18) (undo-tree-id4714 . -18) (undo-tree-id4715 . -18) (undo-tree-id4716 . -18) (undo-tree-id4717 . -18) (undo-tree-id4718 . -18) (2464 . 2480) (#("                " 0 16 (fontified t)) . 2465) (undo-tree-id4719 . -16) (undo-tree-id4720 . -16) (undo-tree-id4721 . -16) (undo-tree-id4722 . -16) (undo-tree-id4723 . -16) (undo-tree-id4724 . -16) (undo-tree-id4725 . -16) (undo-tree-id4726 . -16) (undo-tree-id4727 . -16) (undo-tree-id4728 . -16) (undo-tree-id4729 . -16) (undo-tree-id4730 . -16) (undo-tree-id4731 . -16) (undo-tree-id4732 . -16) (undo-tree-id4733 . -16) (undo-tree-id4734 . -16) (undo-tree-id4735 . -16) (undo-tree-id4736 . -16) (undo-tree-id4737 . -16) (undo-tree-id4738 . -16) (undo-tree-id4739 . -16) (undo-tree-id4740 . -16) (undo-tree-id4741 . -16) (undo-tree-id4742 . -16) (undo-tree-id4743 . -16) (undo-tree-id4744 . -16) (undo-tree-id4745 . -16) (undo-tree-id4746 . -16) (undo-tree-id4747 . -16) (undo-tree-id4748 . -16) (undo-tree-id4749 . -16) (undo-tree-id4750 . -16)) (26105 28117 968386 243000) 0 nil])
nil
([nil nil ((nil fontified nil 2522 . 2523) (nil fontified nil 2521 . 2522) (nil fontified nil 2520 . 2521) (nil fontified nil 2519 . 2520) (nil fontified nil 2517 . 2519) (nil fontified nil 2516 . 2517) (nil fontified nil 2509 . 2516) (nil fontified nil 2505 . 2509) (nil fontified nil 2503 . 2505) (nil fontified nil 2495 . 2503) (nil fontified nil 2494 . 2495) (nil fontified nil 2489 . 2494) (nil fontified nil 2487 . 2489) (nil fontified nil 2486 . 2487) (nil fontified nil 2481 . 2486) (2481 . 2523)) ((#("thread::sleep(Duration::from_millis(850));" 0 5 (face font-lock-constant-face fontified nil) 5 6 (face font-lock-constant-face fontified nil) 6 8 (fontified nil) 8 13 (fontified nil) 13 14 (face (rainbow-delimiters-depth-6-face) fontified nil) 14 22 (face font-lock-type-face fontified nil) 22 24 (fontified nil) 24 28 (fontified nil) 28 35 (fontified nil) 35 36 (face (rainbow-delimiters-depth-7-face) fontified nil) 36 38 (fontified nil) 38 39 (fontified nil) 39 40 (face (rainbow-delimiters-depth-7-face) fontified nil) 40 41 (face (rainbow-delimiters-depth-6-face) fontified nil) 41 42 (fontified nil rear-nonsticky t)) . 2481) (undo-tree-id4655 . -42) (undo-tree-id4656 . -42) (undo-tree-id4657 . -42) (undo-tree-id4658 . -42) (undo-tree-id4659 . -42) (undo-tree-id4660 . -42) (undo-tree-id4661 . -42) (undo-tree-id4662 . -42) (undo-tree-id4663 . -42) (undo-tree-id4664 . -42) (undo-tree-id4665 . -42) (undo-tree-id4666 . -42) (undo-tree-id4667 . -42) (undo-tree-id4668 . -42) (undo-tree-id4669 . -42) (undo-tree-id4670 . -42) (undo-tree-id4671 . -42) (undo-tree-id4672 . -42) (undo-tree-id4673 . -42) (undo-tree-id4674 . -42) (undo-tree-id4675 . -42) (undo-tree-id4676 . -42) (undo-tree-id4677 . -42) (undo-tree-id4678 . -42) (undo-tree-id4679 . -42) (undo-tree-id4680 . -42) (undo-tree-id4681 . -42) (undo-tree-id4682 . -42) (nil fontified t 2522 . 2523) (t 26105 28074 20828 147000)) (26105 28074 7151 191000) 0 nil])
nil
