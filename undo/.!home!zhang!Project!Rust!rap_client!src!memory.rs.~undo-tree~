(undo-tree-save-format-version . 1)
"ee3ff5b63a7e84ca77c9c1d6a654fd72d63ad492"
[nil nil nil nil (26116 11743 574937 573000) 0 nil]
([nil nil ((nil rear-nonsticky nil 38 . 39) (nil fontified nil 22 . 39) (nil fontified nil 20 . 22) (nil fontified nil 15 . 20) (nil fontified nil 13 . 15) (nil fontified nil 5 . 13) (nil fontified nil 4 . 5) (nil fontified nil 1 . 4) (1 . 39) (t 26116 11668 191462 381000)) nil (26116 11743 574935 437000) 0 nil])
([nil nil ((39 . 40)) nil (26116 11743 574929 679000) 0 nil])
([nil nil ((40 . 42) (t 26116 11743 614800 344000)) nil (26116 11783 328386 61000) 0 nil])
([nil nil ((42 . 43)) nil (26116 11783 328385 311000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -42) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) 43) nil (26116 11783 328384 460000) 0 nil])
([nil nil ((42 . 49)) nil (26116 11783 328380 746000) 0 nil])
([nil nil ((apply yas--snippet-revive 46 53 #s(yas--snippet nil nil #s(yas--exit 53 nil) 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 53 nil) 1 nil nil nil nil)) (46 . 53) (#("struct $0" 0 9 (fontified nil)) . 46) (46 . 55) (#("str" 0 3 (fontified nil)) . 46) (46 . 49) (#("struct" 0 6 (fontified nil)) . -46) (46 . 52) (#("str" 0 3 (face font-lock-type-face fontified t)) . -46) (undo-tree-id145 . -3) (undo-tree-id146 . -1) (undo-tree-id147 . -3) (undo-tree-id148 . -3) (undo-tree-id149 . -3) (undo-tree-id150 . -3) (undo-tree-id151 . -3) (undo-tree-id152 . -3) (undo-tree-id153 . -3) (undo-tree-id154 . -3) 49) nil (26116 11783 328378 955000) 0 nil])
([nil nil ((53 . 56)) nil (26116 11783 328320 201000) 0 nil])
([nil nil ((#("n" 0 1 (face font-lock-type-face fontified t)) . -55) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) 56) nil (26116 11783 328318 932000) 0 nil])
([nil nil ((55 . 57)) nil (26116 11783 328309 865000) 0 nil])
([nil nil ((57 . 62)) nil (26116 11783 328309 156000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . 62) (62 . 66) (61 . 63)) nil (26116 11783 328308 266000) 0 nil])
([nil nil ((62 . 66)) nil (26116 11783 328307 204000) 0 nil])
([nil nil ((66 . 69)) nil (26116 11783 328306 286000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -66) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -67) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (#("t" 0 1 (fontified t)) . -68) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) 69) nil (26116 11783 328302 184000) 0 nil])
([nil nil ((66 . 69)) nil (26116 11783 326834 418000) 0 nil])
([nil nil ((#("3" 0 1 (fontified t)) . -67) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (#("2" 0 1 (face font-lock-type-face fontified t)) . -68) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) 69) nil (26116 11783 326832 584000) 0 nil])
([nil nil ((67 . 71)) nil (26116 11783 326811 956000) 0 nil])
([nil nil ((#("usize" 0 5 (face font-lock-type-face fontified t)) . -66) (undo-tree-id20 . -5) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -2) (undo-tree-id49 . -2) (undo-tree-id50 . -3) (undo-tree-id51 . -3) (undo-tree-id52 . -3) (undo-tree-id53 . -3) (undo-tree-id54 . -4) (undo-tree-id55 . -4) (undo-tree-id56 . -5) (undo-tree-id57 . -5) (undo-tree-id58 . -5) (undo-tree-id59 . -5) (undo-tree-id60 . -5) (undo-tree-id61 . -5) (undo-tree-id62 . -5) (undo-tree-id63 . -5) (undo-tree-id64 . -5) 71) nil (26116 11783 326809 830000) 0 nil])
([nil nil ((66 . 67)) nil (26116 11783 326777 810000) 0 nil])
([nil nil ((#("P" 0 1 (face font-lock-type-face fontified t)) . -66) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) 67) nil (26116 11783 326776 569000) 0 nil])
([nil nil ((66 . 73)) nil (26116 11783 326768 699000) 0 nil])
([nil nil ((71 . 76) (#("us" 0 2 (fontified nil)) . 71) (71 . 73) (#("usize" 0 5 (fontified nil)) . -71) (71 . 76) (#("us" 0 2 (fontified t)) . -71) (undo-tree-id0 . -2) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -2) (undo-tree-id7 . -2) (undo-tree-id8 . -2) (undo-tree-id9 . -2) 73) nil (26116 11783 326766 269000) 0 nil])
([nil nil ((76 . 77)) nil (26116 11783 326739 42000) 0 nil])
([nil nil ((79 . 80) 77) nil (26116 11783 326734 611000) 0 nil])
([nil nil ((80 . 81) (t 26116 11783 338136 116000)) nil (26116 11888 964182 372000) 0 nil])
([nil nil ((81 . 84)) nil (26116 11888 964181 642000) 0 nil])
([nil nil ((84 . 85)) nil (26116 11888 964181 69000) 0 nil])
([nil nil ((85 . 88)) nil (26116 11888 964180 473000) 0 nil])
([nil nil ((86 . 92) (#("Me" 0 2 (fontified nil)) . 86) (86 . 88) (#("Memory" 0 6 (fontified nil)) . -86) (86 . 92) (#("Me" 0 2 (face font-lock-type-face fontified t)) . -86) (undo-tree-id282 . -2) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -2) (undo-tree-id287 . -2) (undo-tree-id288 . -2) 88) nil (26116 11888 964179 235000) 0 nil])
([nil nil ((92 . 95)) nil (26116 11888 964172 918000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . 95) (95 . 99) (94 . 96)) nil (26116 11888 964172 164000) 0 nil])
([nil nil ((95 . 99)) nil (26116 11888 964171 190000) 0 nil])
([nil nil ((99 . 105)) nil (26116 11888 964170 613000) 0 nil])
([nil nil ((105 . 109)) nil (26116 11888 964170 38000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -108) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) 109) nil (26116 11888 964168 714000) 0 nil])
([nil nil ((108 . 109)) nil (26116 11888 963644 840000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -108) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) 109) nil (26116 11888 963644 29000) 0 nil])
([nil nil ((108 . 113)) nil (26116 11888 963641 466000) 0 nil])
([nil nil ((111 . 117) (#("Me" 0 2 (fontified nil)) . 111) (111 . 113) (#("Memory" 0 6 (fontified nil)) . -111) (111 . 117) (#("Me" 0 2 (face font-lock-type-face fontified t)) . -111) (undo-tree-id262 . -2) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -2) (undo-tree-id267 . -2) (undo-tree-id268 . -2) 113) nil (26116 11888 963640 148000) 0 nil])
([nil nil ((117 . 120)) nil (26116 11888 963634 803000) 0 nil])
([nil nil ((121 . 125) (#("        " 0 8 (fontified nil)) . 120) (120 . 128) (#("    " 0 4 (fontified nil)) . 120) (undo-tree-id258 . -4) (undo-tree-id259 . -4) (undo-tree-id260 . -4) (undo-tree-id261 . -4) (119 . 125)) nil (26116 11888 963633 855000) 0 nil])
([nil nil ((120 . 128)) nil (26116 11888 963630 138000) 0 nil])
([nil nil ((128 . 129)) nil (26116 11888 963629 475000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -128) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) 129) nil (26116 11888 963628 599000) 0 nil])
([nil nil ((128 . 130)) nil (26116 11888 963624 790000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 142 143 nil nil nil t #s(yas--exit 145 nil))) #s(yas--exit 145 nil) 2 nil #s(yas--field 1 142 143 nil nil nil t #s(yas--exit 145 nil)) nil nil)) (128 . 146) (#("Memory { pid: ${1:()} }$0" 0 25 (fontified nil)) . 128) (128 . 153) (#("Me" 0 2 (fontified nil)) . 128) (128 . 130) (#("Memory {â€¦}" 0 10 (fontified nil)) . -128) (128 . 138) (#("Me" 0 2 (face font-lock-type-face fontified t)) . -128) (undo-tree-id248 . -2) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -2) (undo-tree-id252 . -2) 130) nil (26116 11888 963623 71000) 0 nil])
([nil nil ((#("()" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 143) (undo-tree-id247 . -2) (142 . 143)) nil (26116 11888 963617 835000) 0 nil])
([nil nil ((apply yas--snippet-revive 128 145 #s(yas--snippet nil (#s(yas--field 1 142 143 nil nil nil t #s(yas--exit 145 nil))) #s(yas--exit 145 nil) 2 nil #s(yas--field 1 142 143 nil nil nil t #s(yas--exit 145 nil)) nil nil))) nil (26116 11888 963616 426000) 0 nil])
([nil nil ((153 . 157) (#("    " 0 4 (fontified nil)) . 152) (undo-tree-id243 . -4) (undo-tree-id244 . -4) (undo-tree-id245 . -4) (undo-tree-id246 . -4) (151 . 157)) nil (26116 11888 963615 470000) 0 nil])
([nil nil ((99 . 100)) nil (26116 11888 963612 168000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -99) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) 100) nil (26116 11888 963611 187000) 0 nil])
([nil nil ((99 . 103)) nil (26116 11888 963604 139000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -101) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (#("b" 0 1 (fontified t)) . -102) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) 103) nil (26116 11888 963602 984000) 0 nil])
([nil nil ((101 . 103)) nil (26116 11888 963593 899000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -101) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) 102) nil (26116 11888 963592 761000) 0 nil])
([nil nil ((101 . 102)) nil (26116 11888 963586 424000) 0 nil])
([nil nil ((156 . 160)) nil (26116 11888 963585 824000) 0 nil])
([nil nil ((157 . 161) (#("    " 0 4 (fontified nil)) . 156) (undo-tree-id203 . -4) (undo-tree-id204 . -4) (undo-tree-id205 . -4) (undo-tree-id206 . -4) (undo-tree-id207 . -4) (undo-tree-id208 . -4) (undo-tree-id209 . -4) (undo-tree-id210 . -4) (undo-tree-id211 . -4) (160 . 161)) nil (26116 11888 963584 721000) 0 nil])
([nil nil ((161 . 165)) nil (26116 11888 963577 826000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -162) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (#("b" 0 1 (fontified t)) . -163) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (#("n" 0 1 (fontified t)) . -164) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) 165) nil (26116 11888 963575 893000) 0 nil])
([nil nil ((162 . 168)) nil (26116 11888 963562 369000) 0 nil])
([nil nil ((168 . 180)) nil (26116 11888 963561 767000) 0 nil])
([nil nil ((181 . 185) (#("        " 0 8 (fontified nil)) . 180) (180 . 188) (#("    " 0 4 (fontified nil)) . 180) (undo-tree-id180 . -4) (undo-tree-id181 . -4) (undo-tree-id182 . -4) (undo-tree-id183 . -4) (179 . 185)) nil (26116 11888 963560 435000) 0 nil])
([nil nil ((180 . 188)) nil (26116 11888 963556 776000) 0 nil])
([nil nil ((188 . 193)) nil (26116 11888 963556 148000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -191) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (#("i" 0 1 (fontified t)) . -192) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) 193) nil (26116 11888 963554 775000) 0 nil])
([nil nil ((191 . 199)) nil (26116 11888 963544 630000) 0 nil])
([nil nil ((198 . 200)) nil (26116 11888 963543 936000) 0 nil])
([nil nil ((apply yas--snippet-revive 198 205 #s(yas--snippet nil nil nil 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 3 nil nil nil nil)) (198 . 205) (#("return;" 0 7 (fontified nil)) . 198) (198 . 205) (#("re" 0 2 (fontified nil)) . 198) (198 . 200) (#("return" 0 6 (fontified nil)) . -198) (198 . 204) (#("re" 0 2 (fontified t)) . -198) (undo-tree-id159 . -2) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -2) (undo-tree-id163 . -2) (undo-tree-id164 . -2) (undo-tree-id165 . -2) 200) nil (26116 11888 963541 65000) 0 nil])
([nil nil ((219 . 220) 205) nil (26116 11888 963524 594000) 0 nil])
([nil nil ((176 . 178) (t 26116 11889 28142 604000)) nil (26116 11904 606477 184000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -176) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (#("e" 0 1 (fontified t)) . -177) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) 178) nil (26116 11904 606475 638000) 0 nil])
([nil nil ((176 . 185)) nil (26116 11904 606466 778000) 0 nil])
([nil nil ((200 . 201)) nil (26116 11904 606466 158000) 0 nil])
([nil nil ((200 . 204) (#("spid" 0 1 (fontified nil) 1 4 (fontified nil)) . 200) (undo-tree-id307 . 3) (200 . 201) (#("self" 0 4 (fontified nil)) . -200) (200 . 204) (#("s" 0 1 (fontified t)) . -200) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) 201) nil (26116 11904 606464 429000) 0 nil])
([nil nil ((204 . 207)) nil (26116 11904 606454 613000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -205) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (#(";" 0 1 (fontified t)) . -206) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) 207) nil (26116 11904 606452 789000) 0 nil])
([nil nil ((205 . 206)) nil (26116 11904 606441 798000) 0 nil])
([nil nil ((205 . 208) (#("p" 0 1 (fontified nil)) . 205) (205 . 206) (#("pid" 0 3 (fontified nil)) . -205) (205 . 208) (#("p" 0 1 (fontified t)) . -205) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) 206) nil (26116 11904 606437 201000) 0 nil])
([nil nil ((220 . 229) (t 26116 11904 618143 561000)) nil (26116 11955 913235 776000) 0 nil])
([nil nil ((1 . 2)) nil (26116 11955 913234 989000) 0 nil])
([nil nil ((1 . 10)) nil (26116 11955 913234 122000) 0 nil])
([nil nil ((#("L" 0 1 (face font-lock-constant-face fontified t)) . -8) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (#("L" 0 1 (face font-lock-constant-face fontified t)) . -9) (undo-tree-id354 . -1) (undo-tree-id355 . -1) 10) nil (26116 11955 913232 678000) 0 nil])
([nil nil ((8 . 15)) nil (26116 11955 913224 483000) 0 nil])
([nil nil ((10 . 17) (#("proce" 0 5 (fontified nil)) . 10) (10 . 15) (#("process" 0 7 (fontified nil)) . -10) (10 . 17) (#("proce" 0 5 (fontified t)) . -10) (undo-tree-id331 . -5) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -2) (undo-tree-id336 . -2) (undo-tree-id337 . -2) (undo-tree-id338 . -3) (undo-tree-id339 . -3) (undo-tree-id340 . -3) (undo-tree-id341 . -4) (undo-tree-id342 . -4) (undo-tree-id343 . -4) (undo-tree-id344 . -5) (undo-tree-id345 . -5) 15) nil (26116 11955 913220 937000) 0 nil])
([nil nil ((17 . 18)) nil (26116 11955 912696 725000) 0 nil])
([nil nil ((#("use syscalls::Sysno::process_vm_readv;" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 12 (face font-lock-constant-face fontified t) 12 14 (fontified t) 14 19 (face font-lock-type-face fontified t) 19 21 (fontified t) 21 37 (fontified t) 37 38 (fontified t rear-nonsticky t)) . 19) (undo-tree-id571 . -33) (undo-tree-id572 . -33) (undo-tree-id573 . -33) (undo-tree-id574 . -33) (undo-tree-id575 . -33) (undo-tree-id576 . -33) (undo-tree-id577 . -33) (undo-tree-id578 . -33) (undo-tree-id579 . -33) (undo-tree-id580 . -38) (t 26116 11955 924813 377000)) nil (26116 12157 118238 564000) 0 nil])
([nil nil ((19 . 21)) nil (26116 12157 118231 172000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -20) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) 21) nil (26116 12157 118230 232000) 0 nil])
([nil nil ((20 . 29)) nil (26116 12157 118226 836000) 0 nil])
([nil nil ((28 . 31) (#("s" 0 1 (fontified nil)) . 28) (28 . 29) (#("sys" 0 3 (fontified nil)) . -28) (28 . 31) (#("s" 0 1 (fontified t)) . -28) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) 29) nil (26116 12157 118225 512000) 0 nil])
([nil nil ((31 . 34)) nil (26116 12157 118219 853000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -33) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) 34) nil (26116 12157 118218 500000) 0 nil])
([nil nil ((33 . 34)) nil (26116 12157 118209 530000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -32) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (#("u" 0 1 (fontified t)) . -33) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) 34) nil (26116 12157 118204 987000) 0 nil])
([nil nil ((#("sys:" 0 3 (face font-lock-variable-name-face fontified t) 3 4 (fontified t)) . -28) (undo-tree-id447 . -4) (undo-tree-id448 . -3) (undo-tree-id449 . -3) (undo-tree-id450 . -3) (undo-tree-id451 . -4) (undo-tree-id452 . -4) (undo-tree-id453 . -4) (undo-tree-id454 . -4) (undo-tree-id455 . -4) (undo-tree-id456 . -4) (undo-tree-id457 . -4) (undo-tree-id458 . -4) (undo-tree-id459 . -4) (undo-tree-id460 . -4) (undo-tree-id461 . -4) (undo-tree-id462 . -4) (undo-tree-id463 . -4) (undo-tree-id464 . -4) (undo-tree-id465 . -4) (undo-tree-id466 . -4) (undo-tree-id467 . -4) (undo-tree-id468 . -4) (undo-tree-id469 . -4) (undo-tree-id470 . -4) (undo-tree-id471 . -4) (undo-tree-id472 . -4) (undo-tree-id473 . -4) (undo-tree-id474 . -4) (undo-tree-id475 . -4) (undo-tree-id476 . -4) (undo-tree-id477 . -4) (undo-tree-id478 . -4) (undo-tree-id479 . -4) (undo-tree-id480 . -4) (undo-tree-id481 . -4) (undo-tree-id482 . -4) (undo-tree-id483 . -4) (undo-tree-id484 . -4) (undo-tree-id485 . -4) (undo-tree-id486 . -4) (undo-tree-id487 . -4) (undo-tree-id488 . -4) (undo-tree-id489 . -4) (undo-tree-id490 . -4) (undo-tree-id491 . -4) (undo-tree-id492 . -4) (undo-tree-id493 . -4) (undo-tree-id494 . -4) (undo-tree-id495 . -4) (undo-tree-id496 . -4) 32) nil (26116 12157 116766 824000) 0 nil])
([nil nil ((#("use nix::" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 7 (face font-lock-constant-face fontified t) 7 9 (fontified t)) . 19) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -2) (undo-tree-id365 . -2) (undo-tree-id366 . -3) (undo-tree-id367 . -3) (undo-tree-id368 . -3) (undo-tree-id369 . -4) (undo-tree-id370 . -4) (undo-tree-id371 . -4) (undo-tree-id372 . -4) (undo-tree-id373 . -4) (undo-tree-id374 . -4) (undo-tree-id375 . -4) (undo-tree-id376 . -4) (undo-tree-id377 . -4) (undo-tree-id378 . -4) (undo-tree-id379 . -5) (undo-tree-id380 . -5) (undo-tree-id381 . -6) (undo-tree-id382 . -7) (undo-tree-id383 . -7) (undo-tree-id384 . -8) (undo-tree-id385 . -8) (undo-tree-id386 . -8) (undo-tree-id387 . -9) (undo-tree-id388 . -9) (undo-tree-id389 . -9) (undo-tree-id390 . -9) (undo-tree-id391 . -9) (undo-tree-id392 . -9) (undo-tree-id393 . -9) (undo-tree-id394 . -9) (undo-tree-id395 . -9) (undo-tree-id396 . -9) (undo-tree-id397 . -9) (undo-tree-id398 . -9) (undo-tree-id399 . -9) (undo-tree-id400 . -9) (undo-tree-id401 . -9) (undo-tree-id402 . -9) (undo-tree-id403 . -9) (undo-tree-id404 . -9) (undo-tree-id405 . -9) (undo-tree-id406 . -9) (undo-tree-id407 . -9) (undo-tree-id408 . -9) (undo-tree-id409 . -9) (undo-tree-id410 . -9) (undo-tree-id411 . -9) (undo-tree-id412 . -9) (undo-tree-id413 . -9) (undo-tree-id414 . -9) (undo-tree-id415 . -9) (undo-tree-id416 . -9) (undo-tree-id417 . -9) (undo-tree-id418 . -9) (undo-tree-id419 . -9) (undo-tree-id420 . -9) (undo-tree-id421 . -9) (undo-tree-id422 . -9) (undo-tree-id423 . -9) (undo-tree-id424 . -9) (undo-tree-id425 . -9) (undo-tree-id426 . -9) (undo-tree-id427 . -9) (undo-tree-id428 . -9) (undo-tree-id429 . -9) (undo-tree-id430 . -9) (undo-tree-id431 . -9) (undo-tree-id432 . -9) (undo-tree-id433 . -9) (undo-tree-id434 . -9) (undo-tree-id435 . -9) (undo-tree-id436 . -9) (undo-tree-id437 . -9) (undo-tree-id438 . -9) (undo-tree-id439 . -9) (undo-tree-id440 . -9) (undo-tree-id441 . -9) (undo-tree-id442 . -9) (undo-tree-id443 . -9) (undo-tree-id444 . -9) (undo-tree-id445 . -9) (undo-tree-id446 . -9)) nil (26116 12157 116728 985000) 0 nil])
([nil nil ((209 . 212) (t 26116 12157 128159 61000)) nil (26116 12496 690142 830000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -211) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) 212) nil (26116 12496 690141 456000) 0 nil])
([nil nil ((211 . 216)) nil (26116 12496 690137 468000) 0 nil])
([nil nil ((#("process" 0 7 (fontified t)) . 209) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -2) (undo-tree-id1248 . -2) (undo-tree-id1249 . -2) (undo-tree-id1250 . -2) (undo-tree-id1251 . -2) (undo-tree-id1252 . -2) (undo-tree-id1253 . -2) (undo-tree-id1254 . -2) (undo-tree-id1255 . -3) (undo-tree-id1256 . -3) (undo-tree-id1257 . -3) (undo-tree-id1258 . -4) (undo-tree-id1259 . -4) (undo-tree-id1260 . -5) (undo-tree-id1261 . -5) (undo-tree-id1262 . -6) (undo-tree-id1263 . -6) (undo-tree-id1264 . -7) (undo-tree-id1265 . -7) (undo-tree-id1266 . -7) (undo-tree-id1267 . -7) (undo-tree-id1268 . -7)) nil (26116 12496 690135 726000) 0 nil])
([nil nil ((209 . 212)) nil (26116 12496 690101 287000) 0 nil])
([nil nil ((209 . 217) (#("pid" 0 3 (fontified nil)) . 209) (209 . 212) (#("self.pid" 0 8 (fontified nil)) . -209) (209 . 217) (#("pid" 0 3 (fontified t)) . -209) (undo-tree-id1233 . -3) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -2) (undo-tree-id1239 . -2) (undo-tree-id1240 . -3) (undo-tree-id1241 . -3) (undo-tree-id1242 . -3) (undo-tree-id1243 . -3) (undo-tree-id1244 . -3) 212) nil (26116 12496 690099 715000) 0 nil])
([nil nil ((217 . 225)) nil (26116 12496 690089 827000) 0 nil])
([nil nil ((220 . 227) (#("proce" 0 5 (fontified nil)) . 220) (220 . 225) (#("process" 0 7 (fontified nil)) . -220) (220 . 227) (#("proce" 0 5 (fontified t)) . -220) (undo-tree-id1216 . -5) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -2) (undo-tree-id1221 . -2) (undo-tree-id1222 . -2) (undo-tree-id1223 . -3) (undo-tree-id1224 . -3) (undo-tree-id1225 . -4) (undo-tree-id1226 . -4) (undo-tree-id1227 . -5) (undo-tree-id1228 . -5) (undo-tree-id1229 . -5) (undo-tree-id1230 . -5) (undo-tree-id1231 . -5) (undo-tree-id1232 . -5) 225) nil (26116 12496 690088 41000) 0 nil])
([nil nil ((227 . 230)) nil (26116 12496 690075 398000) 0 nil])
([nil nil ((#("P" 0 1 (face font-lock-type-face fontified t)) . -229) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) 230) nil (26116 12496 690074 318000) 0 nil])
([nil nil ((229 . 230)) nil (26116 12496 690068 633000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -229) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) 230) nil (26116 12496 690067 615000) 0 nil])
([nil nil ((229 . 231)) nil (26116 12496 690064 112000) 0 nil])
([nil nil ((apply yas--snippet-revive 229 233 #s(yas--snippet nil nil #s(yas--exit 233 nil) 4 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 233 nil) 4 nil nil nil nil)) (229 . 233) (#("id()$0" 0 6 (fontified nil)) . 229) (229 . 235) (#("id" 0 2 (fontified nil)) . 229) (229 . 231) (#("id()" 0 4 (fontified nil)) . -229) (229 . 233) (#("id" 0 2 (fontified t)) . -229) (undo-tree-id1200 . -2) (undo-tree-id1201 . -1) (undo-tree-id1202 . -2) (undo-tree-id1203 . -2) (undo-tree-id1204 . -2) 231) nil (26116 12496 690062 601000) 0 nil])
([nil nil ((#("id()" 0 2 (fontified t) 2 3 (face (rainbow-delimiters-depth-3-face) fontified t) 3 4 (face (rainbow-delimiters-depth-3-face) fontified t)) . -229) (undo-tree-id1168 . -4) (undo-tree-id1169 . -4) (undo-tree-id1170 . -4) (undo-tree-id1171 . -4) (undo-tree-id1172 . -4) (undo-tree-id1173 . -4) (undo-tree-id1174 . -4) (undo-tree-id1175 . -4) (undo-tree-id1176 . -4) (undo-tree-id1177 . -4) (undo-tree-id1178 . -4) (undo-tree-id1179 . -4) (undo-tree-id1180 . -4) (undo-tree-id1181 . -4) (undo-tree-id1182 . -4) (undo-tree-id1183 . -4) (undo-tree-id1184 . -4) (undo-tree-id1185 . -4) (undo-tree-id1186 . -4) (undo-tree-id1187 . -4) (undo-tree-id1188 . -4) (undo-tree-id1189 . -4) (undo-tree-id1190 . -4) (undo-tree-id1191 . -4) (undo-tree-id1192 . -4) (undo-tree-id1193 . -4) (undo-tree-id1194 . -4) (undo-tree-id1195 . -4) (undo-tree-id1196 . -4) (undo-tree-id1197 . -4) (undo-tree-id1198 . -4) (undo-tree-id1199 . -4) 233) nil (26116 12496 690056 384000) 0 nil])
([nil nil ((229 . 230)) nil (26116 12496 690033 905000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -229) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) 230) nil (26116 12496 690032 748000) 0 nil])
([nil nil ((229 . 230)) nil (26116 12496 690028 669000) 0 nil])
([nil nil ((apply yas--snippet-revive 229 233 #s(yas--snippet nil nil #s(yas--exit 233 nil) 5 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 233 nil) 5 nil nil nil nil)) (229 . 233) (#("id()$0" 0 6 (fontified nil)) . 229) (229 . 235) (#("i" 0 1 (fontified nil)) . 229) (229 . 230) (#("id()" 0 4 (fontified nil)) . -229) (229 . 233) (#("i" 0 1 (fontified t)) . -229) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) 230) nil (26116 12496 690027 50000) 0 nil])
([nil nil ((#("use std::process;" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 7 (face font-lock-constant-face fontified t) 7 9 (fontified t) 9 17 (fontified t)) . 1) (undo-tree-id1117 . -17) (undo-tree-id1118 . -17) (undo-tree-id1119 . -17) (undo-tree-id1120 . -17) (undo-tree-id1121 . -17) (undo-tree-id1122 . -17) (undo-tree-id1123 . -17) (undo-tree-id1124 . -17) (undo-tree-id1125 . -17) (undo-tree-id1126 . -17) (undo-tree-id1127 . -17) (undo-tree-id1128 . -17) (undo-tree-id1129 . -17) (undo-tree-id1130 . -17) (undo-tree-id1131 . -17) (undo-tree-id1132 . -17) (undo-tree-id1133 . -17) (undo-tree-id1134 . -17) (undo-tree-id1135 . -17) (undo-tree-id1136 . -17) (undo-tree-id1137 . -17) (undo-tree-id1138 . -17) (undo-tree-id1139 . -17) (undo-tree-id1140 . -17) (undo-tree-id1141 . -17) (undo-tree-id1142 . -17) (undo-tree-id1143 . -17) (undo-tree-id1144 . -17) (undo-tree-id1145 . -17) (undo-tree-id1146 . -17) (undo-tree-id1147 . -17) (undo-tree-id1148 . -17) (undo-tree-id1149 . -17) (undo-tree-id1150 . -17) (undo-tree-id1151 . -17) (undo-tree-id1152 . -17) (undo-tree-id1153 . -17) (undo-tree-id1154 . -17) (undo-tree-id1155 . -17) (undo-tree-id1156 . -17) (undo-tree-id1157 . -17) (undo-tree-id1158 . -17)) nil (26116 12496 690020 783000) 0 nil])
([nil nil ((1 . 5)) nil (26116 12496 689990 768000) 0 nil])
([nil nil ((5 . 7)) nil (26116 12496 689990 183000) 0 nil])
([nil nil ((5 . 11) (#("ps" 0 2 (fontified nil)) . 5) (5 . 7) (#("psutil" 0 6 (fontified nil)) . -5) (5 . 11) (#("ps" 0 2 (face font-lock-constant-face fontified t)) . -5) (undo-tree-id1101 . -2) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -2) (undo-tree-id1108 . -2) (undo-tree-id1109 . -2) (undo-tree-id1110 . -2) (undo-tree-id1111 . -2) (undo-tree-id1112 . -2) (undo-tree-id1113 . -2) (undo-tree-id1114 . -2) (undo-tree-id1115 . -2) (undo-tree-id1116 . -2) 7) nil (26116 12496 689988 457000) 0 nil])
([nil nil ((11 . 14)) nil (26116 12496 689975 445000) 0 nil])
([nil nil ((#("P" 0 1 (face font-lock-type-face fontified t)) . -13) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) 14) nil (26116 12496 689974 333000) 0 nil])
([nil nil ((13 . 14)) nil (26116 12496 689968 569000) 0 nil])
([nil nil ((13 . 20) (#("p" 0 1 (fontified nil)) . 13) (13 . 14) (#("process" 0 7 (fontified nil)) . -13) (13 . 20) (#("p" 0 1 (fontified t)) . -13) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) 14) nil (26116 12496 689967 20000) 0 nil])
([nil nil ((20 . 23)) nil (26116 12496 689961 754000) 0 nil])
([nil nil ((23 . 25)) nil (26116 12496 689960 899000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -20) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (#(":" 0 1 (fontified t)) . -21) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (#("P" 0 1 (face font-lock-type-face fontified t)) . -22) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -23) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -24) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) 25) nil (26116 12496 689950 911000) 0 nil])
([nil nil ((20 . 29)) nil (26116 12496 688667 118000) 0 nil])
([nil nil ((22 . 29) (#("Process" 0 7 (fontified nil)) . 22) (22 . 29) (#("Process" 0 7 (face font-lock-type-face fontified t)) . -22) (undo-tree-id814 . -7) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -2) (undo-tree-id821 . -3) (undo-tree-id822 . -4) (undo-tree-id823 . -5) (undo-tree-id824 . -6) (undo-tree-id825 . -6) (undo-tree-id826 . -7) (undo-tree-id827 . -7) (undo-tree-id828 . -7) 29) nil (26116 12496 688665 437000) 0 nil])
([nil nil ((29 . 30)) nil (26116 12496 688653 226000) 0 nil])
([nil nil ((31 . 37)) nil (26116 12496 688652 496000) 0 nil])
([nil nil ((35 . 41) (#("ps" 0 2 (fontified nil)) . 35) (35 . 37) (#("psutil" 0 6 (fontified nil)) . -35) (35 . 41) (#("ps" 0 2 (face font-lock-constant-face fontified t)) . -35) (undo-tree-id808 . -2) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -2) (undo-tree-id812 . -2) (undo-tree-id813 . -2) 37) nil (26116 12496 688650 982000) 0 nil])
([nil nil ((41 . 44)) nil (26116 12496 688645 464000) 0 nil])
([nil nil ((#("P" 0 1 (face font-lock-type-face fontified t)) . -43) (undo-tree-id806 . -1) (undo-tree-id807 . -1) 44) nil (26116 12496 688644 118000) 0 nil])
([nil nil ((#("use psutil::" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 10 (face font-lock-constant-face fontified t) 10 12 (fontified t)) . 31) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -2) (undo-tree-id783 . -2) (undo-tree-id784 . -3) (undo-tree-id785 . -3) (undo-tree-id786 . -4) (undo-tree-id787 . -4) (undo-tree-id788 . -4) (undo-tree-id789 . -4) (undo-tree-id790 . -4) (undo-tree-id791 . -4) (undo-tree-id792 . -4) (undo-tree-id793 . -4) (undo-tree-id794 . -10) (undo-tree-id795 . -10) (undo-tree-id796 . -10) (undo-tree-id797 . -11) (undo-tree-id798 . -12) (undo-tree-id799 . -12) (undo-tree-id800 . -12) (undo-tree-id801 . -12) (undo-tree-id802 . -12) (undo-tree-id803 . -12) (undo-tree-id804 . -12) (undo-tree-id805 . -12)) nil (26116 12496 688640 382000) 0 nil])
([nil nil ((30 . 31) (22 . 22) (22 . 23)) nil (26116 12496 688461 104000) 0 nil])
([nil nil ((30 . 32)) nil (26116 12496 688459 951000) 0 nil])
([nil nil ((32 . 33)) nil (26116 12496 688459 104000) 0 nil])
([nil nil ((32 . 45) (#("P" 0 1 (fontified nil)) . 32) (32 . 33) (#("ProcessResult" 0 13 (fontified nil)) . -32) (32 . 45) (#("P" 0 1 (face font-lock-type-face fontified t)) . -32) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) 33) nil (26116 12496 688457 252000) 0 nil])
([nil nil ((#("self.pid = process::id()" 0 4 (face font-lock-keyword-face fontified t) 4 11 (fontified t) 11 18 (face font-lock-constant-face fontified t) 18 20 (fontified t) 20 22 (fontified t) 22 23 (face (rainbow-delimiters-depth-3-face) fontified t) 23 24 (face (rainbow-delimiters-depth-3-face) fontified t)) . 238) (undo-tree-id614 . -8) (undo-tree-id615 . -8) (undo-tree-id616 . -8) (undo-tree-id617 . -8) (undo-tree-id618 . -8) (undo-tree-id619 . -8) (undo-tree-id620 . -8) (undo-tree-id621 . -8) (undo-tree-id622 . -8) (undo-tree-id623 . -8) (undo-tree-id624 . -9) (undo-tree-id625 . -9) (undo-tree-id626 . -10) (undo-tree-id627 . -10) (undo-tree-id628 . -11) (undo-tree-id629 . -11) (undo-tree-id630 . -11) (undo-tree-id631 . -11) (undo-tree-id632 . -11) (undo-tree-id633 . -11) (undo-tree-id634 . -11) (undo-tree-id635 . -11) (undo-tree-id636 . -11) (undo-tree-id637 . -11) (undo-tree-id638 . -11) (undo-tree-id639 . -11) (undo-tree-id640 . -11) (undo-tree-id641 . -11) (undo-tree-id642 . -11) (undo-tree-id643 . -11) (undo-tree-id644 . -11) (undo-tree-id645 . -11) (undo-tree-id646 . -11) (undo-tree-id647 . -11) (undo-tree-id648 . -11) (undo-tree-id649 . -11) (undo-tree-id650 . -11) (undo-tree-id651 . -11) (undo-tree-id652 . -11) (undo-tree-id653 . -11) (undo-tree-id654 . -18) (undo-tree-id655 . -18) (undo-tree-id656 . -18) (undo-tree-id657 . -19) (undo-tree-id658 . -19) (undo-tree-id659 . -20) (undo-tree-id660 . -20) (undo-tree-id661 . -20) (undo-tree-id662 . -20) (undo-tree-id663 . -20) (undo-tree-id664 . -20) (undo-tree-id665 . -20) (undo-tree-id666 . -20) (undo-tree-id667 . -20) (undo-tree-id668 . -20) (undo-tree-id669 . -20) (undo-tree-id670 . -20) (undo-tree-id671 . -20) (undo-tree-id672 . -20) (undo-tree-id673 . -20) (undo-tree-id674 . -20) (undo-tree-id675 . -20) (undo-tree-id676 . -20) (undo-tree-id677 . -20) (undo-tree-id678 . -20) (undo-tree-id679 . -20) (undo-tree-id680 . -20) (undo-tree-id681 . -20) (undo-tree-id682 . -20) (undo-tree-id683 . -20) (undo-tree-id684 . -20) (undo-tree-id685 . -20) (undo-tree-id686 . -20) (undo-tree-id687 . -20) (undo-tree-id688 . -20) (undo-tree-id689 . -20) (undo-tree-id690 . -20) (undo-tree-id691 . -20) (undo-tree-id692 . -20) (undo-tree-id693 . -20) (undo-tree-id694 . -20) (undo-tree-id695 . -20) (undo-tree-id696 . -20) (undo-tree-id697 . -20) (undo-tree-id698 . -20) (undo-tree-id699 . -20) (undo-tree-id700 . -20) (undo-tree-id701 . -20) (undo-tree-id702 . -20) (undo-tree-id703 . -20) (undo-tree-id704 . -20) (undo-tree-id705 . -20) (undo-tree-id706 . -20) (undo-tree-id707 . -20) (undo-tree-id708 . -20) (undo-tree-id709 . -20) (undo-tree-id710 . -20) (undo-tree-id711 . -20) (undo-tree-id712 . -20) (undo-tree-id713 . -20) (undo-tree-id714 . -20) (undo-tree-id715 . -20) (undo-tree-id716 . -20) (undo-tree-id717 . -20) (undo-tree-id718 . -20) (undo-tree-id719 . -20) (undo-tree-id720 . -24) (undo-tree-id721 . -24) (undo-tree-id722 . -24) (undo-tree-id723 . -24) (undo-tree-id724 . -24) (undo-tree-id725 . -24) (undo-tree-id726 . -24) (undo-tree-id727 . -24) (undo-tree-id728 . -24) (undo-tree-id729 . -24) (undo-tree-id730 . -24) (undo-tree-id731 . -24) (undo-tree-id732 . -24) (undo-tree-id733 . -24) (undo-tree-id734 . -24) (undo-tree-id735 . -24) (undo-tree-id736 . -24) (undo-tree-id737 . -24) (undo-tree-id738 . -24) (undo-tree-id739 . -24) (undo-tree-id740 . -24) (undo-tree-id741 . -24) (undo-tree-id742 . -24) (undo-tree-id743 . -24) (undo-tree-id744 . -24) (undo-tree-id745 . -24) (undo-tree-id746 . -24) (undo-tree-id747 . -24) (undo-tree-id748 . -24) (undo-tree-id749 . -24) (undo-tree-id750 . -24) (undo-tree-id751 . -24) (undo-tree-id752 . -24) (undo-tree-id753 . -24) (undo-tree-id754 . -24) (undo-tree-id755 . -24) (undo-tree-id756 . -24) (undo-tree-id757 . -24) (undo-tree-id758 . -24) (undo-tree-id759 . -24) (undo-tree-id760 . -24) (undo-tree-id761 . -24) (undo-tree-id762 . -24) (undo-tree-id763 . -20) (undo-tree-id764 . -20) (undo-tree-id765 . -20) (undo-tree-id766 . -20) (undo-tree-id767 . -20) (undo-tree-id768 . -20) (undo-tree-id769 . -20) (undo-tree-id770 . -20) (undo-tree-id771 . -20) (undo-tree-id772 . -22) (undo-tree-id773 . -24)) nil (26116 12496 688446 127000) 0 nil])
([nil nil ((nil rear-nonsticky nil 549 . 550) (nil fontified nil 238 . 550) (238 . 550)) nil (26116 12496 688334 94000) 0 nil])
([nil nil ((#("

" 0 1 (fontified t) 1 2 (fontified t)) . -49) (undo-tree-id593 . -1) (217 . 218) (218 . 219) (221 . 234) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -228) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (230 . 232) (234 . 238) (289 . 293) (317 . 321) (352 . 356) (356 . 360) 355 (395 . 399) (435 . 439) (486 . 490) (521 . 525) (543 . 547) (#("}
" 0 1 (face (rainbow-delimiters-depth-3-face) rear-nonsticky t fontified t) 1 2 (fontified t)) . 549) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (561 . 562) 355) nil (26116 12534 103598 682000) 0 nil])
([nil nil ((48 . 49) (t 26116 12535 64848 928000)) nil (26116 12548 300957 667000) 0 nil] [nil nil ((#("pid: usize," 0 3 (face font-lock-variable-name-face fontified t) 3 5 (fontified t) 5 10 (face font-lock-type-face fontified t) 10 11 (fontified t)) . 73) (undo-tree-id581 . -11) (undo-tree-id583 . -11) (undo-tree-id584 . -11) (undo-tree-id586 . -11) (undo-tree-id588 . -11) (undo-tree-id590 . -11) (undo-tree-id592 . -11)) ((73 . 84)) (26116 12533 901251 283000) 0 nil])
([nil nil ((48 . 55)) nil (26116 12548 300956 781000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -142) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) 143 (t 26116 12496 694846 572000)) ((142 . 143)) (26116 12533 639247 869000) 0 nil])
([nil nil ((52 . 58) (#("any" 0 3 (fontified nil)) . 52) (52 . 55) (#("anyhow" 0 6 (fontified nil)) . -52) (52 . 58) (#("any" 0 3 (face font-lock-constant-face fontified t)) . -52) (undo-tree-id1327 . -3) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -2) (undo-tree-id1331 . -2) (undo-tree-id1332 . -3) (undo-tree-id1333 . -3) 55) nil (26116 12548 300955 424000) 0 nil])
([nil nil ((#("pid: " 0 3 (face font-lock-variable-name-face fontified t) 3 5 (fontified t)) . -137) (undo-tree-id1295 . -5) (undo-tree-id1296 . -5) (undo-tree-id1297 . -3) (undo-tree-id1298 . -5) (undo-tree-id1299 . -5) (undo-tree-id1300 . -5) (undo-tree-id1301 . -5) (undo-tree-id1302 . -5) (undo-tree-id1303 . -3) (undo-tree-id1304 . -5) (undo-tree-id1305 . -5) (undo-tree-id1306 . -5) 142) ((137 . 142)) (26116 12533 320913 242000) 0 nil])
([nil nil ((58 . 61)) nil (26116 12548 300948 467000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -136) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) 137) ((136 . 137) (t 26116 12514 331514 322000)) (26116 12514 318452 548000) 0 nil])
([nil nil ((#("L" 0 1 (face font-lock-type-face fontified t)) . -59) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (#(":" 0 1 (fontified t)) . -60) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) 61) nil (26116 12548 300947 130000) 0 nil])
nil
([nil nil ((59 . 61)) nil (26116 12548 300940 207000) 0 nil])
([nil nil ((60 . 65) (#("E" 0 1 (fontified nil)) . 60) (60 . 61) (#("Error" 0 5 (fontified nil)) . -60) (60 . 65) (#("E" 0 1 (face font-lock-type-face fontified t)) . -60) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) 61) nil (26116 12548 300937 301000) 0 nil])
([nil nil ((65 . 66)) nil (26116 12548 300923 329000) 0 nil])
([nil nil ((212 . 218) (t 26116 12548 311516 408000)) nil (26116 12565 903667 29000) 0 nil])
([nil nil ((apply yas--snippet-revive 216 224 #s(yas--snippet nil nil #s(yas--exit 223 nil) 6 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 223 nil) 6 nil nil nil nil)) (216 . 224) (#("Result<$0>" 0 10 (fontified nil)) . 216) (216 . 226) (#("Re" 0 2 (fontified nil)) . 216) (216 . 218) (#("Result<â€¦>" 0 9 (fontified nil)) . -216) (216 . 225) (#("Re" 0 2 (face font-lock-type-face fontified t)) . -216) (undo-tree-id1348 . -2) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -2) (undo-tree-id1353 . -2) (undo-tree-id1354 . -2) (undo-tree-id1355 . -2) (undo-tree-id1356 . -2) 218) nil (26116 12565 903665 189000) 0 nil])
([nil nil ((223 . 225)) nil (26116 12565 903657 253000) 0 nil])
([nil nil ((223 . 228) (#("us" 0 2 (fontified nil)) . 223) (223 . 225) (#("usize" 0 5 (fontified nil)) . -223) (223 . 228) (#("us" 0 2 (fontified t)) . -223) (undo-tree-id1340 . -2) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -2) (undo-tree-id1344 . -2) (undo-tree-id1345 . -2) (undo-tree-id1346 . -2) (undo-tree-id1347 . -2) 225) nil (26116 12565 903655 338000) 0 nil])
([nil nil ((228 . 231)) nil (26116 12565 903647 719000) 0 nil])
([nil nil ((230 . 235) (#("E" 0 1 (fontified nil)) . 230) (230 . 231) (#("Error" 0 5 (fontified nil)) . -230) (230 . 235) (#("E" 0 1 (face font-lock-type-face fontified t)) . -230) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) 231) nil (26116 12565 903643 84000) 0 nil])
([nil nil ((#("None" 0 4 (face font-lock-type-face fontified t)) . -411) (undo-tree-id1359 . -4) (undo-tree-id1360 . -4) (undo-tree-id1361 . -4) (undo-tree-id1362 . -4) (undo-tree-id1363 . -4) (undo-tree-id1364 . -4) (undo-tree-id1365 . -4) (undo-tree-id1366 . -4) (undo-tree-id1367 . -4) 415 (t 26116 12565 914850 822000)) nil (26116 12592 474234 652000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -398) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) 399) nil (26116 12592 474226 413000) 0 nil])
([nil nil ((398 . 399)) nil (26116 12592 474216 365000) 0 nil])
([nil nil ((411 . 412)) nil (26116 12592 474211 868000) 0 nil])
([nil nil ((#("all()" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-3-face) fontified t) 4 5 (face (rainbow-delimiters-depth-3-face) fontified t)) . -334) (undo-tree-id1936 . -5) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -3) (undo-tree-id1953 . -4) (undo-tree-id1954 . -5) (undo-tree-id1955 . -5) (undo-tree-id1956 . -5) (undo-tree-id1957 . -5) (undo-tree-id1958 . -5) 339 (t 26116 12592 488185 786000)) nil (26116 12791 655226 137000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -332) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (#(":" 0 1 (fontified t)) . -333) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) 334) nil (26116 12791 655207 671000) 0 nil])
([nil nil ((332 . 337)) nil (26116 12791 654261 780000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -333) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (#("a" 0 1 (fontified t)) . -334) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (#("l" 0 1 (fontified t)) . -335) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (#("l" 0 1 (fontified t)) . -336) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) 337) nil (26116 12791 654258 317000) 0 nil])
([nil nil ((#("Process:" 0 7 (face font-lock-variable-name-face fontified t) 7 8 (fontified t)) . -325) (undo-tree-id1714 . -8) (undo-tree-id1715 . -7) (undo-tree-id1716 . -7) (undo-tree-id1717 . -7) (undo-tree-id1718 . -7) (undo-tree-id1719 . -7) (undo-tree-id1720 . -7) (undo-tree-id1721 . -7) (undo-tree-id1722 . -7) (undo-tree-id1723 . -7) (undo-tree-id1724 . -7) (undo-tree-id1725 . -7) (undo-tree-id1726 . -7) (undo-tree-id1727 . -7) (undo-tree-id1728 . -7) (undo-tree-id1729 . -7) (undo-tree-id1730 . -7) (undo-tree-id1731 . -7) (undo-tree-id1732 . -7) (undo-tree-id1733 . -7) (undo-tree-id1734 . -7) (undo-tree-id1735 . -7) (undo-tree-id1736 . -7) (undo-tree-id1737 . -7) (undo-tree-id1738 . -7) (undo-tree-id1739 . -7) (undo-tree-id1740 . -7) (undo-tree-id1741 . -7) (undo-tree-id1742 . -7) (undo-tree-id1743 . -7) (undo-tree-id1744 . -7) (undo-tree-id1745 . -7) (undo-tree-id1746 . -7) (undo-tree-id1747 . -7) (undo-tree-id1748 . -7) (undo-tree-id1749 . -7) (undo-tree-id1750 . -7) (undo-tree-id1751 . -8) (undo-tree-id1752 . -8) (undo-tree-id1753 . -8) (undo-tree-id1754 . -8) (undo-tree-id1755 . -8) (undo-tree-id1756 . -8) (undo-tree-id1757 . -8) (undo-tree-id1758 . -8) (undo-tree-id1759 . -8) (undo-tree-id1760 . -8) (undo-tree-id1761 . -8) (undo-tree-id1762 . -8) (undo-tree-id1763 . -8) (undo-tree-id1764 . -8) (undo-tree-id1765 . -8) (undo-tree-id1766 . -8) (undo-tree-id1767 . -8) (undo-tree-id1768 . -8) (undo-tree-id1769 . -8) (undo-tree-id1770 . -8) (undo-tree-id1771 . -8) (undo-tree-id1772 . -8) (undo-tree-id1773 . -8) (undo-tree-id1774 . -8) (undo-tree-id1775 . -8) (undo-tree-id1776 . -8) (undo-tree-id1777 . -8) (undo-tree-id1778 . -8) (undo-tree-id1779 . -8) (undo-tree-id1780 . -7) (undo-tree-id1781 . -8) (undo-tree-id1782 . -8) (undo-tree-id1783 . -8) (undo-tree-id1784 . -8) (undo-tree-id1785 . -8) (undo-tree-id1786 . -8) (undo-tree-id1787 . -8) (undo-tree-id1788 . -8) (undo-tree-id1789 . -8) (undo-tree-id1790 . -8) (undo-tree-id1791 . -8) (undo-tree-id1792 . -8) (undo-tree-id1793 . -8) (undo-tree-id1794 . -8) (undo-tree-id1795 . -8) (undo-tree-id1796 . -8) (undo-tree-id1797 . -8) (undo-tree-id1798 . -8) (undo-tree-id1799 . -8) (undo-tree-id1800 . -8) (undo-tree-id1801 . -8) (undo-tree-id1802 . -8) (undo-tree-id1803 . -8) (undo-tree-id1804 . -8) (undo-tree-id1805 . -8) (undo-tree-id1806 . -8) 333) nil (26116 12791 654209 186000) 0 nil])
([nil nil ((325 . 334)) nil (26116 12791 654108 651000) 0 nil])
([nil nil ((45 . 56) (apply yas--snippet-revive 325 336 #s(yas--snippet nil nil #s(yas--exit 336 nil) 7 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 336 nil) 7 nil nil nil nil)) (325 . 336) (#("processes()$0" 0 13 (fontified nil)) . 325) (325 . 338) (#("processes" 0 9 (fontified nil)) . 325) (325 . 334) (#("processes() (use psutil::process::processes)" 0 44 (fontified nil)) . -325) (325 . 369) (#("processes" 0 9 (fontified t)) . -325) (undo-tree-id1691 . -9) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (undo-tree-id1695 . -2) (undo-tree-id1696 . -2) (undo-tree-id1697 . -2) (undo-tree-id1698 . -3) (undo-tree-id1699 . -3) (undo-tree-id1700 . -4) (undo-tree-id1701 . -4) (undo-tree-id1702 . -5) (undo-tree-id1703 . -5) (undo-tree-id1704 . -6) (undo-tree-id1705 . -6) (undo-tree-id1706 . -7) (undo-tree-id1707 . -7) (undo-tree-id1708 . -8) (undo-tree-id1709 . -8) (undo-tree-id1710 . -9) (undo-tree-id1711 . -9) (undo-tree-id1712 . -9) (undo-tree-id1713 . -9) 334) nil (26116 12791 654106 542000) 0 nil])
([nil nil ((#("use psutil::process::{Process, ProcessResult, processes};" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 10 (face font-lock-constant-face fontified t) 10 12 (fontified t) 12 19 (face font-lock-constant-face fontified t) 19 21 (fontified t) 21 22 (face (rainbow-delimiters-depth-1-face) fontified t) 22 29 (face font-lock-type-face fontified t) 29 31 (fontified t) 31 44 (face font-lock-type-face fontified t) 44 55 (fontified t) 55 56 (face (rainbow-delimiters-depth-1-face) fontified t) 56 57 (fontified t)) . 1) (undo-tree-id1677 . -44) (undo-tree-id1678 . -41) (undo-tree-id1679 . -41) (undo-tree-id1680 . -41) (undo-tree-id1681 . -41) (undo-tree-id1682 . -41) (undo-tree-id1683 . -41) (undo-tree-id1684 . -41) (undo-tree-id1685 . -31) (undo-tree-id1686 . -31) (undo-tree-id1687 . -31) (undo-tree-id1688 . -31) (undo-tree-id1689 . -31) (undo-tree-id1690 . -57)) nil (26116 12791 654090 208000) 0 nil])
([nil nil ((#("        let processes = match processes() {" 0 4 (fontified t) 4 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 21 (face font-lock-variable-name-face fontified t) 21 24 (fontified t) 24 29 (face font-lock-keyword-face fontified t) 29 30 (fontified t) 30 39 (fontified t) 39 40 (face (rainbow-delimiters-depth-3-face) fontified t) 40 41 (face (rainbow-delimiters-depth-3-face) fontified t) 41 42 (fontified t) 42 43 (face (rainbow-delimiters-depth-3-face) fontified t)) . 249) (undo-tree-id1547 . -4) (undo-tree-id1548 . -4) (undo-tree-id1549 . -30) (undo-tree-id1550 . -30) (undo-tree-id1551 . -30) (undo-tree-id1552 . -30) (undo-tree-id1553 . -30) (undo-tree-id1554 . -30) (undo-tree-id1555 . -30) (undo-tree-id1556 . -30) (undo-tree-id1557 . -30) (undo-tree-id1558 . -30) (undo-tree-id1559 . -30) (undo-tree-id1560 . -30) (undo-tree-id1561 . -30) (undo-tree-id1562 . -30) (undo-tree-id1563 . -30) (undo-tree-id1564 . -30) (undo-tree-id1565 . -30) (undo-tree-id1566 . -30) (undo-tree-id1567 . -30) (undo-tree-id1568 . -30) (undo-tree-id1569 . -30) (undo-tree-id1570 . -30) (undo-tree-id1571 . -30) (undo-tree-id1572 . -30) (undo-tree-id1573 . -30) (undo-tree-id1574 . -30) (undo-tree-id1575 . -30) (undo-tree-id1576 . -30) (undo-tree-id1577 . -30) (undo-tree-id1578 . -30) (undo-tree-id1579 . -30) (undo-tree-id1580 . -30) (undo-tree-id1581 . -30) (undo-tree-id1582 . -30) (undo-tree-id1583 . -30) (undo-tree-id1584 . -30) (undo-tree-id1585 . -30) (undo-tree-id1586 . -30) (undo-tree-id1587 . -30) (undo-tree-id1588 . -30) (undo-tree-id1589 . -30) (undo-tree-id1590 . -30) (undo-tree-id1591 . -30) (undo-tree-id1592 . -30) (undo-tree-id1593 . -30) (undo-tree-id1594 . -30) (undo-tree-id1595 . -30) (undo-tree-id1596 . -30) (undo-tree-id1597 . -30) (undo-tree-id1598 . -30) (undo-tree-id1599 . -30) (undo-tree-id1600 . -30) (undo-tree-id1601 . -30) (undo-tree-id1602 . -30) (undo-tree-id1603 . -30) (undo-tree-id1604 . -30) (undo-tree-id1605 . -30) (undo-tree-id1606 . -30) (undo-tree-id1607 . -30) (undo-tree-id1608 . -30) (undo-tree-id1609 . -30) (undo-tree-id1610 . -30) (undo-tree-id1611 . -30) (undo-tree-id1612 . -30) (undo-tree-id1613 . -30) (undo-tree-id1614 . -30) (undo-tree-id1615 . -30) (undo-tree-id1616 . -30) (undo-tree-id1617 . -30) (undo-tree-id1618 . -30) (undo-tree-id1619 . -30) (undo-tree-id1620 . -30) (undo-tree-id1621 . -30) (undo-tree-id1622 . -30) (undo-tree-id1623 . -30) (undo-tree-id1624 . -30) (undo-tree-id1625 . -30) (undo-tree-id1626 . -30) (undo-tree-id1627 . -30) (undo-tree-id1628 . -30) (undo-tree-id1629 . -30) (undo-tree-id1630 . -30) (undo-tree-id1631 . -30) (undo-tree-id1632 . -30) (undo-tree-id1633 . -30) (undo-tree-id1634 . -30) (undo-tree-id1635 . -30) (undo-tree-id1636 . -30) (undo-tree-id1637 . -30) (undo-tree-id1638 . -30) (undo-tree-id1639 . -30) (undo-tree-id1640 . -30) (undo-tree-id1641 . -30) (undo-tree-id1642 . -30) (undo-tree-id1643 . -30) (undo-tree-id1644 . -30) (undo-tree-id1645 . -30) (undo-tree-id1646 . -30) (undo-tree-id1647 . -30) (undo-tree-id1648 . -30) (undo-tree-id1649 . -30) (undo-tree-id1650 . -30) (undo-tree-id1651 . -30) (undo-tree-id1652 . -30) (undo-tree-id1653 . -30) (undo-tree-id1654 . -30) (undo-tree-id1655 . -30) (undo-tree-id1656 . -30) (undo-tree-id1657 . -30) (undo-tree-id1658 . -30) (undo-tree-id1659 . -30) (undo-tree-id1660 . -30) (undo-tree-id1661 . -30) (undo-tree-id1662 . -30) (undo-tree-id1663 . -30) (undo-tree-id1664 . -30) (undo-tree-id1665 . -30) (undo-tree-id1666 . -30) (undo-tree-id1667 . -30) (undo-tree-id1668 . -30) (undo-tree-id1669 . -30) (undo-tree-id1670 . -30) (undo-tree-id1671 . -30) (undo-tree-id1672 . -41) (undo-tree-id1673 . -41) (undo-tree-id1674 . -41) (undo-tree-id1675 . -41) (undo-tree-id1676 . -43)) nil (26116 12791 654076 617000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 249) (undo-tree-id1546 . -1)) nil (26116 12791 653919 103000) 0 nil])
([nil nil ((#("            Ok(processes) => processes," 0 8 (fontified t) 8 12 (fontified t) 12 14 (face font-lock-type-face fontified t) 14 15 (face (rainbow-delimiters-depth-3-face) fontified t) 15 24 (fontified t) 24 25 (face (rainbow-delimiters-depth-3-face) fontified t) 25 27 (fontified t) 27 28 (syntax-table (1) fontified t) 28 39 (fontified t)) . 249) (undo-tree-id1545 . -39)) nil (26116 12791 653917 508000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 249) (undo-tree-id1544 . -1)) nil (26116 12791 653916 120000) 0 nil])
([nil nil ((#("            Err(e) => return e," 0 4 (fontified t) 4 12 (fontified t) 12 15 (face font-lock-type-face fontified t) 15 16 (face (rainbow-delimiters-depth-3-face) fontified t) 16 17 (fontified t) 17 18 (face (rainbow-delimiters-depth-3-face) fontified t) 18 20 (fontified t) 20 21 (syntax-table (1) fontified t) 21 22 (fontified t) 22 28 (face font-lock-keyword-face fontified t) 28 30 (fontified t) 30 31 (fontified t)) . 249) (undo-tree-id1523 . -31) (undo-tree-id1524 . -29) (undo-tree-id1525 . -29) (undo-tree-id1526 . -29) (undo-tree-id1527 . -29) (undo-tree-id1528 . -29) (undo-tree-id1529 . -29) (undo-tree-id1530 . -29) (undo-tree-id1531 . -16) (undo-tree-id1532 . -30) (undo-tree-id1533 . -30) (undo-tree-id1534 . -30) (undo-tree-id1535 . -30) (undo-tree-id1536 . -30) (undo-tree-id1537 . -30) (undo-tree-id1538 . -30) (undo-tree-id1539 . -30) (undo-tree-id1540 . -30) (undo-tree-id1541 . -30) (undo-tree-id1542 . -30) (undo-tree-id1543 . -31)) nil (26116 12791 653914 170000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 249) (undo-tree-id1522 . -1)) nil (26116 12791 653899 385000) 0 nil])
([nil nil ((#("        };" 0 4 (fontified t) 4 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t) 9 10 (fontified t)) . 249) (undo-tree-id1521 . -10)) nil (26116 12791 653898 84000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 249) (undo-tree-id1520 . -1)) nil (26116 12791 653896 474000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 249) (undo-tree-id1519 . -1)) nil (26116 12791 653894 869000) 0 nil])
([nil nil ((#("        for process in processes {" 0 4 (fontified t) 4 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 19 (face font-lock-variable-name-face fontified t) 19 20 (fontified t) 20 22 (face font-lock-keyword-face fontified t) 22 33 (fontified t) 33 34 (face (rainbow-delimiters-depth-3-face) fontified t)) . 249) (undo-tree-id1518 . -34)) nil (26116 12791 653893 493000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 249) (undo-tree-id1517 . -1)) nil (26116 12791 653892 74000) 0 nil])
([nil nil ((#("            if let Ok(proc_name) = process.name() {" 0 8 (fontified t) 8 12 (fontified t) 12 14 (face font-lock-keyword-face fontified t) 14 15 (fontified t) 15 18 (face font-lock-keyword-face fontified t) 18 19 (fontified t) 19 21 (face font-lock-type-face fontified t) 21 22 (face (rainbow-delimiters-depth-3-face) fontified t) 22 31 (fontified t) 31 32 (face (rainbow-delimiters-depth-3-face) fontified t) 32 47 (fontified t) 47 48 (face (rainbow-delimiters-depth-3-face) fontified t) 48 49 (face (rainbow-delimiters-depth-3-face) fontified t) 49 50 (fontified t) 50 51 (face (rainbow-delimiters-depth-3-face) fontified t)) . 249) (undo-tree-id1516 . -51)) nil (26116 12791 653890 783000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 249) (undo-tree-id1515 . -1)) nil (26116 12791 653889 468000) 0 nil])
([nil nil ((#("                if proc_name == name {" 0 4 (fontified t) 4 16 (fontified t) 16 18 (face font-lock-keyword-face fontified t) 18 37 (fontified t) 37 38 (face (rainbow-delimiters-depth-3-face) fontified t)) . 249) (undo-tree-id1514 . -38)) nil (26116 12791 653887 991000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 249) (undo-tree-id1513 . -1)) nil (26116 12791 653886 529000) 0 nil])
([nil nil ((#("                    return Some(process.pid() as i32);" 0 16 (fontified t) 16 20 (fontified t) 20 26 (face font-lock-keyword-face fontified t) 26 27 (fontified t) 27 31 (face font-lock-type-face fontified t) 31 32 (face (rainbow-delimiters-depth-3-face) fontified t) 32 43 (fontified t) 43 44 (face (rainbow-delimiters-depth-4-face) fontified t) 44 45 (face (rainbow-delimiters-depth-4-face) fontified t) 45 46 (fontified t) 46 48 (face font-lock-keyword-face fontified t) 48 49 (fontified t) 49 52 (face font-lock-type-face fontified t) 52 53 (face (rainbow-delimiters-depth-3-face) fontified t) 53 54 (fontified t)) . 249) (undo-tree-id1512 . -54)) nil (26116 12791 653885 171000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 249) (undo-tree-id1511 . -1)) nil (26116 12791 653883 812000) 0 nil])
([nil nil ((#("                }" 0 4 (fontified t) 4 16 (fontified t) 16 17 (face (rainbow-delimiters-depth-2-face) fontified t)) . 249) (undo-tree-id1510 . -17)) nil (26116 12791 653882 305000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 249) (undo-tree-id1509 . -1)) nil (26116 12791 653879 951000) 0 nil])
([nil nil ((#("            }" 0 8 (fontified t) 8 12 (fontified t) 12 13 (face (rainbow-delimiters-depth-2-face) fontified t)) . 249) (undo-tree-id1508 . -13)) nil (26116 12791 653878 578000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 249) (undo-tree-id1507 . -1)) nil (26116 12791 653877 197000) 0 nil])
([nil nil ((#("        }" 0 4 (fontified t) 4 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t)) . 249) (undo-tree-id1505 . -9) (undo-tree-id1506 . -9)) nil (26116 12791 653875 675000) 0 nil])
([nil nil ((249 . 257)) nil (26116 12791 653873 628000) 0 nil])
([nil nil ((#("return;" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t)) . -231) (undo-tree-id1487 . -7) (undo-tree-id1488 . -7) (undo-tree-id1489 . -7) (undo-tree-id1490 . -7) (undo-tree-id1491 . -6) (undo-tree-id1492 . -6) (undo-tree-id1493 . -6) (undo-tree-id1494 . -6) (undo-tree-id1495 . -6) (undo-tree-id1496 . -6) (undo-tree-id1497 . -6) (undo-tree-id1498 . -7) (undo-tree-id1499 . -7) (undo-tree-id1500 . -7) (undo-tree-id1501 . -7) (undo-tree-id1502 . -7) (undo-tree-id1503 . -7) (undo-tree-id1504 . -7) 238) nil (26116 12791 653871 782000) 0 nil])
([nil nil ((231 . 233)) nil (26116 12791 653759 577000) 0 nil])
([nil nil ((apply yas--snippet-revive 231 239 #s(yas--snippet nil nil #s(yas--exit 238 nil) 8 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 238 nil) 8 nil nil nil nil)) (231 . 239) (#("return $0;" 0 10 (fontified nil)) . 231) (231 . 241) (#("re" 0 2 (fontified nil)) . 231) (231 . 233) (#("return" 0 6 (fontified nil)) . -231) (231 . 237) (#("re" 0 2 (fontified t)) . -231) (undo-tree-id1479 . -2) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -2) (undo-tree-id1484 . -2) (undo-tree-id1485 . -2) (undo-tree-id1486 . -2) 233) nil (26116 12791 653758 1000) 0 nil])
([nil nil ((#("Error>" 0 5 (face font-lock-type-face fontified t) 5 6 (face (rainbow-delimiters-depth-2-face) fontified t)) . -184) (undo-tree-id1461 . -6) (undo-tree-id1462 . -5) (undo-tree-id1463 . -5) (undo-tree-id1464 . -6) (undo-tree-id1465 . -6) (undo-tree-id1466 . -6) (undo-tree-id1467 . -6) (undo-tree-id1468 . -6) (undo-tree-id1469 . -6) (undo-tree-id1470 . -6) (undo-tree-id1471 . -5) (undo-tree-id1472 . -5) (undo-tree-id1473 . -5) (undo-tree-id1474 . -5) (undo-tree-id1475 . -5) (undo-tree-id1476 . -5) (undo-tree-id1477 . -5) (undo-tree-id1478 . -6) 190) nil (26116 12791 653750 711000) 0 nil])
([nil nil ((#("usize, " 0 5 (face font-lock-type-face fontified t) 5 7 (fontified t)) . -177) (undo-tree-id1432 . -7) (undo-tree-id1433 . -1) (undo-tree-id1434 . -5) (undo-tree-id1435 . -5) (undo-tree-id1436 . -5) (undo-tree-id1437 . -5) (undo-tree-id1438 . -5) (undo-tree-id1439 . -5) (undo-tree-id1440 . -5) (undo-tree-id1441 . -7) (undo-tree-id1442 . -7) (undo-tree-id1443 . -7) (undo-tree-id1444 . -7) (undo-tree-id1445 . -7) (undo-tree-id1446 . -7) (undo-tree-id1447 . -7) (undo-tree-id1448 . -7) (undo-tree-id1449 . -7) (undo-tree-id1450 . -7) (undo-tree-id1451 . -7) (undo-tree-id1452 . -7) (undo-tree-id1453 . -7) (undo-tree-id1454 . -7) (undo-tree-id1455 . -7) (undo-tree-id1456 . -7) (undo-tree-id1457 . -7) (undo-tree-id1458 . -7) (undo-tree-id1459 . -7) (undo-tree-id1460 . -7) 184) nil (26116 12791 653737 902000) 0 nil])
([nil nil ((#("Result<" 0 6 (face font-lock-type-face fontified t) 6 7 (face (rainbow-delimiters-depth-2-face) fontified t)) . -170) (undo-tree-id1399 . -7) (undo-tree-id1400 . -7) (undo-tree-id1401 . -7) (undo-tree-id1402 . -6) (undo-tree-id1403 . -7) (undo-tree-id1404 . -7) (undo-tree-id1405 . -7) (undo-tree-id1406 . -7) (undo-tree-id1407 . -7) (undo-tree-id1408 . -7) (undo-tree-id1409 . -7) (undo-tree-id1410 . -7) (undo-tree-id1411 . -7) (undo-tree-id1412 . -7) (undo-tree-id1413 . -7) (undo-tree-id1414 . -7) (undo-tree-id1415 . -7) (undo-tree-id1416 . -7) (undo-tree-id1417 . -7) (undo-tree-id1418 . -7) (undo-tree-id1419 . -7) (undo-tree-id1420 . -7) (undo-tree-id1421 . -7) (undo-tree-id1422 . -7) (undo-tree-id1423 . -7) (undo-tree-id1424 . -7) (undo-tree-id1425 . -7) (undo-tree-id1426 . -7) (undo-tree-id1427 . -7) (undo-tree-id1428 . -7) (undo-tree-id1429 . -7) (undo-tree-id1430 . -7) (undo-tree-id1431 . -7) 177) nil (26116 12791 653718 915000) 0 nil])
([nil nil ((170 . 172)) nil (26116 12791 653697 426000) 0 nil])
([nil nil ((apply yas--snippet-revive 170 178 #s(yas--snippet nil nil #s(yas--exit 177 nil) 9 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 177 nil) 9 nil nil nil nil)) (170 . 178) (#("Option<$0>" 0 10 (fontified nil)) . 170) (170 . 180) (#("Op" 0 2 (fontified nil)) . 170) (170 . 172) (#("Option<â€¦>" 0 9 (fontified nil)) . -170) (170 . 179) (#("Op" 0 2 (face font-lock-type-face fontified t)) . -170) (undo-tree-id1390 . -2) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -2) (undo-tree-id1395 . -2) (undo-tree-id1396 . -2) (undo-tree-id1397 . -2) (undo-tree-id1398 . -2) 172) nil (26116 12791 653695 697000) 0 nil])
([nil nil ((177 . 178)) nil (26116 12791 653687 661000) 0 nil])
([nil nil ((#("U" 0 1 (face font-lock-type-face fontified t)) . -177) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) 178) nil (26116 12791 653686 519000) 0 nil])
([nil nil ((177 . 179)) nil (26116 12791 653680 799000) 0 nil])
([nil nil ((177 . 182) (#("us" 0 2 (fontified nil)) . 177) (177 . 179) (#("usize" 0 5 (fontified nil)) . -177) (177 . 182) (#("us" 0 2 (fontified t)) . -177) (undo-tree-id1374 . -2) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -2) (undo-tree-id1379 . -2) (undo-tree-id1380 . -2) (undo-tree-id1381 . -2) (undo-tree-id1382 . -2) 179) nil (26116 12791 653679 86000) 0 nil])
([nil nil ((231 . 232)) nil (26116 12791 653671 111000) 0 nil])
([nil nil ((apply yas--snippet-revive 231 235 #s(yas--snippet nil nil #s(yas--exit 235 nil) 10 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 235 nil) 10 nil nil nil nil)) (231 . 235) (#("None$0" 0 6 (fontified nil)) . 231) (231 . 237) (#("N" 0 1 (fontified nil)) . 231) (231 . 232) (#("None" 0 4 (fontified nil)) . -231) (231 . 235) (#("N" 0 1 (face font-lock-type-face fontified t)) . -231) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) 232) nil (26116 12791 653666 421000) 0 nil])
([nil nil ((#("if self.pid > 0 {" 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t) 3 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t syntax-table (1)) 13 14 (fontified t) 14 16 (fontified t) 16 17 (face (rainbow-delimiters-depth-3-face) fontified t)) . 194) (undo-tree-id2981 . -17) (t 26116 12791 668198 13000)) nil (26116 12848 331232 579000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 194) (undo-tree-id2980 . -1)) nil (26116 12848 331230 911000) 0 nil])
([nil nil ((#("            return None;" 0 12 (fontified t) 12 18 (face font-lock-keyword-face fontified t) 18 19 (fontified t) 19 23 (face font-lock-type-face fontified t) 23 24 (fontified t)) . 194) (undo-tree-id2928 . -12) (undo-tree-id2929 . -12) (undo-tree-id2930 . -12) (undo-tree-id2931 . -12) (undo-tree-id2932 . -12) (undo-tree-id2933 . -12) (undo-tree-id2934 . -12) (undo-tree-id2935 . -12) (undo-tree-id2936 . -12) (undo-tree-id2937 . -12) (undo-tree-id2938 . -12) (undo-tree-id2939 . -12) (undo-tree-id2940 . -12) (undo-tree-id2941 . -12) (undo-tree-id2942 . -12) (undo-tree-id2943 . -12) (undo-tree-id2944 . -12) (undo-tree-id2945 . -12) (undo-tree-id2946 . -12) (undo-tree-id2947 . -12) (undo-tree-id2948 . -12) (undo-tree-id2949 . -12) (undo-tree-id2950 . -12) (undo-tree-id2951 . -12) (undo-tree-id2952 . -12) (undo-tree-id2953 . -19) (undo-tree-id2954 . -19) (undo-tree-id2955 . -19) (undo-tree-id2956 . -19) (undo-tree-id2957 . -19) (undo-tree-id2958 . -23) (undo-tree-id2959 . -23) (undo-tree-id2960 . -23) (undo-tree-id2961 . -23) (undo-tree-id2962 . -23) (undo-tree-id2963 . -23) (undo-tree-id2964 . -23) (undo-tree-id2965 . -24) (undo-tree-id2966 . -24) (undo-tree-id2967 . -24) (undo-tree-id2968 . -24) (undo-tree-id2969 . -24) (undo-tree-id2970 . -24) (undo-tree-id2971 . -23) (undo-tree-id2972 . -23) (undo-tree-id2973 . -23) (undo-tree-id2974 . -23) (undo-tree-id2975 . -23) (undo-tree-id2976 . -23) (undo-tree-id2977 . -23) (undo-tree-id2978 . -23) (undo-tree-id2979 . -24)) nil (26116 12848 331227 394000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 194) (undo-tree-id2927 . -1)) nil (26116 12848 331162 796000) 0 nil])
([nil nil ((#("        }" 0 2 (fontified t) 2 6 (fontified t) 6 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t)) . 194) (undo-tree-id2918 . -9) (undo-tree-id2919 . -9) (undo-tree-id2920 . -9) (undo-tree-id2921 . -9) (undo-tree-id2922 . -9) (undo-tree-id2923 . -9) (undo-tree-id2924 . -9) (undo-tree-id2925 . -9) (undo-tree-id2926 . -9)) nil (26116 12848 331161 168000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 194) (undo-tree-id2767 . -1) (undo-tree-id2768 . -1) (undo-tree-id2769 . -1) (undo-tree-id2770 . -1) (undo-tree-id2771 . -1) (undo-tree-id2772 . -1) (undo-tree-id2773 . -1) (undo-tree-id2774 . -1) (undo-tree-id2775 . -1) (undo-tree-id2776 . -1) (undo-tree-id2777 . -1) (undo-tree-id2778 . -1) (undo-tree-id2779 . -1) (undo-tree-id2780 . -1) (undo-tree-id2781 . -1) (undo-tree-id2782 . -1) (undo-tree-id2783 . -1) (undo-tree-id2784 . -1) (undo-tree-id2785 . -1) (undo-tree-id2786 . -1) (undo-tree-id2787 . -1) (undo-tree-id2788 . -1) (undo-tree-id2789 . -1) (undo-tree-id2790 . -1) (undo-tree-id2791 . -1) (undo-tree-id2792 . -1) (undo-tree-id2793 . -1) (undo-tree-id2794 . -1) (undo-tree-id2795 . -1) (undo-tree-id2796 . -1) (undo-tree-id2797 . -1) (undo-tree-id2798 . -1) (undo-tree-id2799 . -1) (undo-tree-id2800 . -1) (undo-tree-id2801 . -1) (undo-tree-id2802 . -1) (undo-tree-id2803 . -1) (undo-tree-id2804 . -1) (undo-tree-id2805 . -1) (undo-tree-id2806 . -1) (undo-tree-id2807 . -1) (undo-tree-id2808 . -1) (undo-tree-id2809 . -1) (undo-tree-id2810 . -1) (undo-tree-id2811 . -1) (undo-tree-id2812 . -1) (undo-tree-id2813 . -1) (undo-tree-id2814 . -1) (undo-tree-id2815 . -1) (undo-tree-id2816 . -1) (undo-tree-id2817 . -1) (undo-tree-id2818 . -1) (undo-tree-id2819 . -1) (undo-tree-id2820 . -1) (undo-tree-id2821 . -1) (undo-tree-id2822 . -1) (undo-tree-id2823 . -1) (undo-tree-id2824 . -1) (undo-tree-id2825 . -1) (undo-tree-id2826 . -1) (undo-tree-id2827 . -1) (undo-tree-id2828 . -1) (undo-tree-id2829 . -1) (undo-tree-id2830 . -1) (undo-tree-id2831 . -1) (undo-tree-id2832 . -1) (undo-tree-id2833 . -1) (undo-tree-id2834 . -1) (undo-tree-id2835 . -1) (undo-tree-id2836 . -1) (undo-tree-id2837 . -1) (undo-tree-id2838 . -1) (undo-tree-id2839 . -1) (undo-tree-id2840 . -1) (undo-tree-id2841 . -1) (undo-tree-id2842 . -1) (undo-tree-id2843 . -1) (undo-tree-id2844 . -1) (undo-tree-id2845 . -1) (undo-tree-id2846 . -1) (undo-tree-id2847 . -1) (undo-tree-id2848 . -1) (undo-tree-id2849 . -1) (undo-tree-id2850 . -1) (undo-tree-id2851 . -1) (undo-tree-id2852 . -1) (undo-tree-id2853 . -1) (undo-tree-id2854 . -1) (undo-tree-id2855 . -1) (undo-tree-id2856 . -1) (undo-tree-id2857 . -1) (undo-tree-id2858 . -1) (undo-tree-id2859 . -1) (undo-tree-id2860 . -1) (undo-tree-id2861 . -1) (undo-tree-id2862 . -1) (undo-tree-id2863 . -1) (undo-tree-id2864 . -1) (undo-tree-id2865 . -1) (undo-tree-id2866 . -1) (undo-tree-id2867 . -1) (undo-tree-id2868 . -1) (undo-tree-id2869 . -1) (undo-tree-id2870 . -1) (undo-tree-id2871 . -1) (undo-tree-id2872 . -1) (undo-tree-id2873 . -1) (undo-tree-id2874 . -1) (undo-tree-id2875 . -1) (undo-tree-id2876 . -1) (undo-tree-id2877 . -1) (undo-tree-id2878 . -1) (undo-tree-id2879 . -1) (undo-tree-id2880 . -1) (undo-tree-id2881 . -1) (undo-tree-id2882 . -1) (undo-tree-id2883 . -1) (undo-tree-id2884 . -1) (undo-tree-id2885 . -1) (undo-tree-id2886 . -1) (undo-tree-id2887 . -1) (undo-tree-id2888 . -1) (undo-tree-id2889 . -1) (undo-tree-id2890 . -1) (undo-tree-id2891 . -1) (undo-tree-id2892 . -1) (undo-tree-id2893 . -1) (undo-tree-id2894 . -1) (undo-tree-id2895 . -1) (undo-tree-id2896 . -1) (undo-tree-id2897 . -1) (undo-tree-id2898 . -1) (undo-tree-id2899 . -1) (undo-tree-id2900 . -1) (undo-tree-id2901 . -1) (undo-tree-id2902 . -1) (undo-tree-id2903 . -1) (undo-tree-id2904 . -1) (undo-tree-id2905 . -1) (undo-tree-id2906 . -1) (undo-tree-id2907 . -1) (undo-tree-id2908 . -1) (undo-tree-id2909 . -1) (undo-tree-id2910 . -1) (undo-tree-id2911 . -1) (undo-tree-id2912 . -1) (undo-tree-id2913 . -1) (undo-tree-id2914 . -1) (undo-tree-id2915 . -1) (undo-tree-id2916 . -1) (undo-tree-id2917 . -1)) nil (26116 12848 331150 106000) 0 nil])
([nil nil ((#("        
" 0 8 (fontified t) 8 9 (fontified t)) . 194) (undo-tree-id2766 . -9)) nil (26116 12848 331055 359000) 0 nil])
([nil nil ((#("        " 0 4 (fontified t) 4 8 (fontified t)) . -190) (undo-tree-id2540 . -4) (undo-tree-id2541 . -4) (undo-tree-id2542 . -4) (undo-tree-id2543 . -4) (undo-tree-id2544 . -4) (undo-tree-id2545 . -4) (undo-tree-id2546 . -4) (undo-tree-id2547 . -4) (undo-tree-id2548 . -4) (undo-tree-id2549 . -4) (undo-tree-id2550 . -4) (undo-tree-id2551 . -4) (undo-tree-id2552 . -4) (undo-tree-id2553 . -4) (undo-tree-id2554 . -4) (undo-tree-id2555 . -4) (undo-tree-id2556 . -4) (undo-tree-id2557 . -4) (undo-tree-id2558 . -4) (undo-tree-id2559 . -4) (undo-tree-id2560 . -4) (undo-tree-id2561 . -4) (undo-tree-id2562 . -4) (undo-tree-id2563 . -4) (undo-tree-id2564 . -4) (undo-tree-id2565 . -4) (undo-tree-id2566 . -4) (undo-tree-id2567 . -4) (undo-tree-id2568 . -4) (undo-tree-id2569 . -4) (undo-tree-id2570 . -4) (undo-tree-id2571 . -4) (undo-tree-id2572 . -4) (undo-tree-id2573 . -4) (undo-tree-id2574 . -4) (undo-tree-id2575 . -4) (undo-tree-id2576 . -4) (undo-tree-id2577 . -4) (undo-tree-id2578 . -4) (undo-tree-id2579 . -4) (undo-tree-id2580 . -4) (undo-tree-id2581 . -4) (undo-tree-id2582 . -4) (undo-tree-id2583 . -4) (undo-tree-id2584 . -4) (undo-tree-id2585 . -4) (undo-tree-id2586 . -4) (undo-tree-id2587 . -4) (undo-tree-id2588 . -4) (undo-tree-id2589 . -4) (undo-tree-id2590 . -4) (undo-tree-id2591 . -4) (undo-tree-id2592 . -4) (undo-tree-id2593 . -4) (undo-tree-id2594 . -4) (undo-tree-id2595 . -4) (undo-tree-id2596 . -4) (undo-tree-id2597 . -4) (undo-tree-id2598 . -4) (undo-tree-id2599 . -4) (undo-tree-id2600 . -4) (undo-tree-id2601 . -4) (undo-tree-id2602 . -4) (undo-tree-id2603 . -4) (undo-tree-id2604 . -4) (undo-tree-id2605 . -4) (undo-tree-id2606 . -4) (undo-tree-id2607 . -4) (undo-tree-id2608 . -4) (undo-tree-id2609 . -4) (undo-tree-id2610 . -4) (undo-tree-id2611 . -4) (undo-tree-id2612 . -4) (undo-tree-id2613 . -4) (undo-tree-id2614 . -4) (undo-tree-id2615 . -4) (undo-tree-id2616 . -4) (undo-tree-id2617 . -4) (undo-tree-id2618 . -4) (undo-tree-id2619 . -4) (undo-tree-id2620 . -4) (undo-tree-id2621 . -4) (undo-tree-id2622 . -4) (undo-tree-id2623 . -4) (undo-tree-id2624 . -4) (undo-tree-id2625 . -4) (undo-tree-id2626 . -4) (undo-tree-id2627 . -4) (undo-tree-id2628 . -4) (undo-tree-id2629 . -4) (undo-tree-id2630 . -4) (undo-tree-id2631 . -4) (undo-tree-id2632 . -4) (undo-tree-id2633 . -4) (undo-tree-id2634 . -4) (undo-tree-id2635 . -4) (undo-tree-id2636 . -4) (undo-tree-id2637 . -4) (undo-tree-id2638 . -4) (undo-tree-id2639 . -4) (undo-tree-id2640 . -4) (undo-tree-id2641 . -4) (undo-tree-id2642 . -4) (undo-tree-id2643 . -4) (undo-tree-id2644 . -4) (undo-tree-id2645 . -4) (undo-tree-id2646 . -4) (undo-tree-id2647 . -4) (undo-tree-id2648 . -4) (undo-tree-id2649 . -4) (undo-tree-id2650 . -4) (undo-tree-id2651 . -4) (undo-tree-id2652 . -4) (undo-tree-id2653 . -4) (undo-tree-id2654 . -4) (undo-tree-id2655 . -4) (undo-tree-id2656 . -4) (undo-tree-id2657 . -4) (undo-tree-id2658 . -4) (undo-tree-id2659 . -4) (undo-tree-id2660 . -4) (undo-tree-id2661 . -4) (undo-tree-id2662 . -4) (undo-tree-id2663 . -4) (undo-tree-id2664 . -4) (undo-tree-id2665 . -4) (undo-tree-id2666 . -4) (undo-tree-id2667 . -4) (undo-tree-id2668 . -4) (undo-tree-id2669 . -4) (undo-tree-id2670 . -4) (undo-tree-id2671 . -4) (undo-tree-id2672 . -4) (undo-tree-id2673 . -4) (undo-tree-id2674 . -4) (undo-tree-id2675 . -4) (undo-tree-id2676 . -4) (undo-tree-id2677 . -4) (undo-tree-id2678 . -4) (undo-tree-id2679 . -4) (undo-tree-id2680 . -4) (undo-tree-id2681 . -4) (undo-tree-id2682 . -4) (undo-tree-id2683 . -4) (undo-tree-id2684 . -4) (undo-tree-id2685 . -4) (undo-tree-id2686 . -4) (undo-tree-id2687 . -4) (undo-tree-id2688 . -4) (undo-tree-id2689 . -4) (undo-tree-id2690 . -4) (undo-tree-id2691 . -4) (undo-tree-id2692 . -4) (undo-tree-id2693 . -4) (undo-tree-id2694 . -4) (undo-tree-id2695 . -4) (undo-tree-id2696 . -4) (undo-tree-id2697 . -4) (undo-tree-id2698 . -4) (undo-tree-id2699 . -4) (undo-tree-id2700 . -4) (undo-tree-id2701 . -4) (undo-tree-id2702 . -4) (undo-tree-id2703 . -4) (undo-tree-id2704 . -4) (undo-tree-id2705 . -4) (undo-tree-id2706 . -4) (undo-tree-id2707 . -4) (undo-tree-id2708 . -4) (undo-tree-id2709 . -4) (undo-tree-id2710 . -4) (undo-tree-id2711 . -4) (undo-tree-id2712 . -4) (undo-tree-id2713 . -4) (undo-tree-id2714 . -4) (undo-tree-id2715 . -4) (undo-tree-id2716 . -4) (undo-tree-id2717 . -4) (undo-tree-id2718 . -4) (undo-tree-id2719 . -4) (undo-tree-id2720 . -4) (undo-tree-id2721 . -4) (undo-tree-id2722 . -4) (undo-tree-id2723 . -4) (undo-tree-id2724 . -4) (undo-tree-id2725 . -4) (undo-tree-id2726 . -4) (undo-tree-id2727 . -4) (undo-tree-id2728 . -4) (undo-tree-id2729 . -4) (undo-tree-id2730 . -4) (undo-tree-id2731 . -4) (undo-tree-id2732 . -4) (undo-tree-id2733 . -4) (undo-tree-id2734 . -4) (undo-tree-id2735 . -4) (undo-tree-id2736 . -4) (undo-tree-id2737 . -4) (undo-tree-id2738 . -4) (undo-tree-id2739 . -4) (undo-tree-id2740 . -4) (undo-tree-id2741 . -4) (undo-tree-id2742 . -4) (undo-tree-id2743 . -4) (undo-tree-id2744 . -4) (undo-tree-id2745 . -4) (undo-tree-id2746 . -4) (undo-tree-id2747 . -4) (undo-tree-id2748 . -4) (undo-tree-id2749 . -4) (undo-tree-id2750 . -4) (undo-tree-id2751 . -4) (undo-tree-id2752 . -4) (undo-tree-id2753 . -4) (undo-tree-id2754 . -4) (undo-tree-id2755 . -4) (undo-tree-id2756 . -4) (undo-tree-id2757 . -4) (undo-tree-id2758 . -4) (undo-tree-id2759 . -4) (undo-tree-id2760 . -4) (undo-tree-id2761 . -4) (undo-tree-id2762 . -4) (undo-tree-id2763 . -4) (undo-tree-id2764 . -4) (undo-tree-id2765 . -4) 194) nil (26116 12848 331046 554000) 0 nil])
([nil nil ((187 . 191) (#("        " 0 8 (fontified nil)) . 186) (186 . 194) (#("    " 0 4 (fontified nil)) . 186) (undo-tree-id2305 . -4) (undo-tree-id2306 . -4) (undo-tree-id2307 . -4) (undo-tree-id2308 . -4) (undo-tree-id2309 . -4) (undo-tree-id2310 . -4) (undo-tree-id2311 . -4) (undo-tree-id2312 . -4) (undo-tree-id2313 . -4) (undo-tree-id2314 . -4) (undo-tree-id2315 . -4) (undo-tree-id2316 . -4) (undo-tree-id2317 . -4) (undo-tree-id2318 . -4) (undo-tree-id2319 . -4) (undo-tree-id2320 . -4) (undo-tree-id2321 . -4) (undo-tree-id2322 . -4) (undo-tree-id2323 . -4) (undo-tree-id2324 . -4) (undo-tree-id2325 . -4) (undo-tree-id2326 . -4) (undo-tree-id2327 . -4) (undo-tree-id2328 . -4) (undo-tree-id2329 . -4) (undo-tree-id2330 . -4) (undo-tree-id2331 . -4) (undo-tree-id2332 . -4) (undo-tree-id2333 . -4) (undo-tree-id2334 . -4) (undo-tree-id2335 . -4) (undo-tree-id2336 . -4) (undo-tree-id2337 . -4) (undo-tree-id2338 . -4) (undo-tree-id2339 . -4) (undo-tree-id2340 . -4) (undo-tree-id2341 . -4) (undo-tree-id2342 . -4) (undo-tree-id2343 . -4) (undo-tree-id2344 . -4) (undo-tree-id2345 . -4) (undo-tree-id2346 . -4) (undo-tree-id2347 . -4) (undo-tree-id2348 . -4) (undo-tree-id2349 . -4) (undo-tree-id2350 . -4) (undo-tree-id2351 . -4) (undo-tree-id2352 . -4) (undo-tree-id2353 . -4) (undo-tree-id2354 . -4) (undo-tree-id2355 . -4) (undo-tree-id2356 . -4) (undo-tree-id2357 . -4) (undo-tree-id2358 . -4) (undo-tree-id2359 . -4) (undo-tree-id2360 . -4) (undo-tree-id2361 . -4) (undo-tree-id2362 . -4) (undo-tree-id2363 . -4) (undo-tree-id2364 . -4) (undo-tree-id2365 . -4) (undo-tree-id2366 . -4) (undo-tree-id2367 . -4) (undo-tree-id2368 . -4) (undo-tree-id2369 . -4) (undo-tree-id2370 . -4) (undo-tree-id2371 . -4) (undo-tree-id2372 . -4) (undo-tree-id2373 . -4) (undo-tree-id2374 . -4) (undo-tree-id2375 . -4) (undo-tree-id2376 . -4) (undo-tree-id2377 . -4) (undo-tree-id2378 . -4) (undo-tree-id2379 . -4) (undo-tree-id2380 . -4) (undo-tree-id2381 . -4) (undo-tree-id2382 . -4) (undo-tree-id2383 . -4) (undo-tree-id2384 . -4) (undo-tree-id2385 . -4) (undo-tree-id2386 . -4) (undo-tree-id2387 . -4) (undo-tree-id2388 . -4) (undo-tree-id2389 . -4) (undo-tree-id2390 . -4) (undo-tree-id2391 . -4) (undo-tree-id2392 . -4) (undo-tree-id2393 . -4) (undo-tree-id2394 . -4) (undo-tree-id2395 . -4) (undo-tree-id2396 . -4) (undo-tree-id2397 . -4) (undo-tree-id2398 . -4) (undo-tree-id2399 . -4) (undo-tree-id2400 . -4) (undo-tree-id2401 . -4) (undo-tree-id2402 . -4) (undo-tree-id2403 . -4) (undo-tree-id2404 . -4) (undo-tree-id2405 . -4) (undo-tree-id2406 . -4) (undo-tree-id2407 . -4) (undo-tree-id2408 . -4) (undo-tree-id2409 . -4) (undo-tree-id2410 . -4) (undo-tree-id2411 . -4) (undo-tree-id2412 . -4) (undo-tree-id2413 . -4) (undo-tree-id2414 . -4) (undo-tree-id2415 . -4) (undo-tree-id2416 . -4) (undo-tree-id2417 . -4) (undo-tree-id2418 . -4) (undo-tree-id2419 . -4) (undo-tree-id2420 . -4) (undo-tree-id2421 . -4) (undo-tree-id2422 . -4) (undo-tree-id2423 . -4) (undo-tree-id2424 . -4) (undo-tree-id2425 . -4) (undo-tree-id2426 . -4) (undo-tree-id2427 . -4) (undo-tree-id2428 . -4) (undo-tree-id2429 . -4) (undo-tree-id2430 . -4) (undo-tree-id2431 . -4) (undo-tree-id2432 . -4) (undo-tree-id2433 . -4) (undo-tree-id2434 . -4) (undo-tree-id2435 . -4) (undo-tree-id2436 . -4) (undo-tree-id2437 . -4) (undo-tree-id2438 . -4) (undo-tree-id2439 . -4) (undo-tree-id2440 . -4) (undo-tree-id2441 . -4) (undo-tree-id2442 . -4) (undo-tree-id2443 . -4) (undo-tree-id2444 . -4) (undo-tree-id2445 . -4) (undo-tree-id2446 . -4) (undo-tree-id2447 . -4) (undo-tree-id2448 . -4) (undo-tree-id2449 . -4) (undo-tree-id2450 . -4) (undo-tree-id2451 . -4) (undo-tree-id2452 . -4) (undo-tree-id2453 . -4) (undo-tree-id2454 . -4) (undo-tree-id2455 . -4) (undo-tree-id2456 . -4) (undo-tree-id2457 . -4) (undo-tree-id2458 . -4) (undo-tree-id2459 . -4) (undo-tree-id2460 . -4) (undo-tree-id2461 . -4) (undo-tree-id2462 . -4) (undo-tree-id2463 . -4) (undo-tree-id2464 . -4) (undo-tree-id2465 . -4) (undo-tree-id2466 . -4) (undo-tree-id2467 . -4) (undo-tree-id2468 . -4) (undo-tree-id2469 . -4) (undo-tree-id2470 . -4) (undo-tree-id2471 . -4) (undo-tree-id2472 . -4) (undo-tree-id2473 . -4) (undo-tree-id2474 . -4) (undo-tree-id2475 . -4) (undo-tree-id2476 . -4) (undo-tree-id2477 . -4) (undo-tree-id2478 . -4) (undo-tree-id2479 . -4) (undo-tree-id2480 . -4) (undo-tree-id2481 . -4) (undo-tree-id2482 . -4) (undo-tree-id2483 . -4) (undo-tree-id2484 . -4) (undo-tree-id2485 . -4) (undo-tree-id2486 . -4) (undo-tree-id2487 . -4) (undo-tree-id2488 . -4) (undo-tree-id2489 . -4) (undo-tree-id2490 . -4) (undo-tree-id2491 . -4) (undo-tree-id2492 . -4) (undo-tree-id2493 . -4) (undo-tree-id2494 . -4) (undo-tree-id2495 . -4) (undo-tree-id2496 . -4) (undo-tree-id2497 . -4) (undo-tree-id2498 . -4) (undo-tree-id2499 . -4) (undo-tree-id2500 . -4) (undo-tree-id2501 . -4) (undo-tree-id2502 . -4) (undo-tree-id2503 . -4) (undo-tree-id2504 . -4) (undo-tree-id2505 . -4) (undo-tree-id2506 . -4) (undo-tree-id2507 . -4) (undo-tree-id2508 . -4) (undo-tree-id2509 . -4) (undo-tree-id2510 . -4) (undo-tree-id2511 . -4) (undo-tree-id2512 . -4) (undo-tree-id2513 . -4) (undo-tree-id2514 . -4) (undo-tree-id2515 . -4) (undo-tree-id2516 . -4) (undo-tree-id2517 . -4) (undo-tree-id2518 . -4) (undo-tree-id2519 . -4) (undo-tree-id2520 . -4) (undo-tree-id2521 . -4) (undo-tree-id2522 . -4) (undo-tree-id2523 . -4) (undo-tree-id2524 . -4) (undo-tree-id2525 . -4) (undo-tree-id2526 . -4) (undo-tree-id2527 . -4) (undo-tree-id2528 . -4) (undo-tree-id2529 . -4) (undo-tree-id2530 . -4) (undo-tree-id2531 . -4) (undo-tree-id2532 . -4) (undo-tree-id2533 . -4) (undo-tree-id2534 . -4) (undo-tree-id2535 . -4) (undo-tree-id2536 . -4) (undo-tree-id2537 . -4) (undo-tree-id2538 . -4) (undo-tree-id2539 . -4) (190 . 191)) nil (26116 12848 330897 475000) 0 nil])
([nil nil ((186 . 194)) nil (26116 12848 330477 910000) 0 nil])
([nil nil ((#("pub struct Memory {
    pid: usize,
}

impl Memory {
    pub fn new() -> Memory {
        Memory { pid: 0 }
    }

    pub fn get_pid(&mut self) -> Option<usize> {
        
    }
}
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 17 (face font-lock-type-face fontified t) 17 18 (fontified t) 18 19 (face (rainbow-delimiters-depth-1-face) fontified t) 19 20 (fontified t) 20 24 (fontified t) 24 27 (face font-lock-variable-name-face fontified t) 27 29 (fontified t) 29 34 (face font-lock-type-face fontified t) 34 35 (fontified t) 35 36 (fontified t) 36 37 (face (rainbow-delimiters-depth-1-face) fontified t) 37 38 (fontified t) 38 39 (fontified t) 39 43 (face font-lock-keyword-face fontified t) 43 44 (fontified t) 44 50 (face font-lock-type-face fontified t) 50 51 (fontified t) 51 52 (face (rainbow-delimiters-depth-1-face) fontified t) 52 53 (fontified t) 53 57 (fontified t) 57 60 (face font-lock-keyword-face fontified t) 60 61 (fontified t) 61 63 (face font-lock-keyword-face fontified t) 63 64 (fontified t) 64 67 (face font-lock-function-name-face fontified t) 67 68 (face (rainbow-delimiters-depth-2-face) fontified t) 68 69 (face (rainbow-delimiters-depth-2-face) fontified t) 69 71 (fontified t) 71 72 (fontified t syntax-table (1)) 72 73 (fontified t) 73 79 (face font-lock-type-face fontified t) 79 80 (fontified t) 80 81 (face (rainbow-delimiters-depth-2-face) fontified t) 81 82 (fontified t) 82 90 (fontified t) 90 96 (face font-lock-type-face fontified t) 96 97 (fontified t) 97 98 (face (rainbow-delimiters-depth-3-face) fontified t) 98 99 (fontified t) 99 102 (face font-lock-variable-name-face fontified t) 102 104 (fontified t) 104 105 (fontified t) 105 106 (fontified t) 106 107 (face (rainbow-delimiters-depth-3-face) fontified t) 107 108 (fontified t) 108 112 (fontified t) 112 113 (face (rainbow-delimiters-depth-2-face) fontified t) 113 114 (fontified t) 114 115 (fontified t) 115 119 (fontified t) 119 122 (face font-lock-keyword-face fontified t) 122 123 (fontified t) 123 125 (face font-lock-keyword-face fontified t) 125 126 (fontified t) 126 133 (face font-lock-function-name-face fontified t) 133 134 (face (rainbow-delimiters-depth-2-face) fontified t) 134 135 (face rust-ampersand-face fontified t) 135 138 (face font-lock-keyword-face fontified t) 138 139 (fontified t) 139 143 (face font-lock-keyword-face fontified t) 143 144 (face (rainbow-delimiters-depth-2-face) fontified t) 144 146 (fontified t) 146 147 (syntax-table (1) fontified t) 147 148 (fontified t) 148 154 (face font-lock-type-face fontified t) 154 155 (face (rainbow-delimiters-depth-2-face) fontified t) 155 160 (face font-lock-type-face fontified t) 160 161 (face (rainbow-delimiters-depth-2-face) fontified t) 161 162 (fontified t) 162 163 (face (rainbow-delimiters-depth-2-face) fontified t) 163 164 (fontified t) 164 172 (fontified t) 172 173 (fontified t) 173 177 (fontified t) 177 178 (face (rainbow-delimiters-depth-2-face) fontified t) 178 179 (fontified t) 179 180 (face (rainbow-delimiters-depth-1-face) fontified t) 180 181 (fontified t)) . 22) (undo-tree-id1963 . -164) (undo-tree-id1964 . -181) (undo-tree-id1965 . -37) (undo-tree-id1966 . -24) (undo-tree-id1967 . -107) (undo-tree-id1968 . -114) (undo-tree-id1969 . -164) (undo-tree-id1970 . -164) (undo-tree-id1971 . -164) (undo-tree-id1972 . -35) (undo-tree-id1973 . -148) (undo-tree-id1974 . -164) (undo-tree-id1975 . -164) (undo-tree-id1976 . -164) (undo-tree-id1977 . -164) (undo-tree-id1978 . -164) (undo-tree-id1979 . -164) (undo-tree-id1980 . -164) (undo-tree-id1981 . -164) (undo-tree-id1982 . -164) (undo-tree-id1983 . -164) (undo-tree-id1984 . -164) (undo-tree-id1985 . -164) (undo-tree-id1986 . -164) (undo-tree-id1987 . -164) (undo-tree-id1988 . -164) (undo-tree-id1989 . -164) (undo-tree-id1990 . -164) (undo-tree-id1991 . -164) (undo-tree-id1992 . -164) (undo-tree-id1993 . -164) (undo-tree-id1994 . -164) (undo-tree-id1995 . -164) (undo-tree-id1996 . -164) (undo-tree-id1997 . -164) (undo-tree-id1998 . -164) (undo-tree-id1999 . -164) (undo-tree-id2000 . -164) (undo-tree-id2001 . -164) (undo-tree-id2002 . -164) (undo-tree-id2003 . -164) (undo-tree-id2004 . -164) (undo-tree-id2005 . -164) (undo-tree-id2006 . -164) (undo-tree-id2007 . -164) (undo-tree-id2008 . -164) (undo-tree-id2009 . -164) (undo-tree-id2010 . -164) (undo-tree-id2011 . -164) (undo-tree-id2012 . -164) (undo-tree-id2013 . -164) (undo-tree-id2014 . -164) (undo-tree-id2015 . -164) (undo-tree-id2016 . -164) (undo-tree-id2017 . -164) (undo-tree-id2018 . -164) (undo-tree-id2019 . -164) (undo-tree-id2020 . -164) (undo-tree-id2021 . -164) (undo-tree-id2022 . -164) (undo-tree-id2023 . -164) (undo-tree-id2024 . -164) (undo-tree-id2025 . -164) (undo-tree-id2026 . -164) (undo-tree-id2027 . -164) (undo-tree-id2028 . -164) (undo-tree-id2029 . -164) (undo-tree-id2030 . -164) (undo-tree-id2031 . -164) (undo-tree-id2032 . -164) (undo-tree-id2033 . -164) (undo-tree-id2034 . -164) (undo-tree-id2035 . -164) (undo-tree-id2036 . -164) (undo-tree-id2037 . -164) (undo-tree-id2038 . -164) (undo-tree-id2039 . -164) (undo-tree-id2040 . -164) (undo-tree-id2041 . -164) (undo-tree-id2042 . -164) (undo-tree-id2043 . -164) (undo-tree-id2044 . -164) (undo-tree-id2045 . -164) (undo-tree-id2046 . -164) (undo-tree-id2047 . -164) (undo-tree-id2048 . -164) (undo-tree-id2049 . -164) (undo-tree-id2050 . -164) (undo-tree-id2051 . -164) (undo-tree-id2052 . -164) (undo-tree-id2053 . -164) (undo-tree-id2054 . -164) (undo-tree-id2055 . -164) (undo-tree-id2056 . -164) (undo-tree-id2057 . -164) (undo-tree-id2058 . -164) (undo-tree-id2059 . -164) (undo-tree-id2060 . -164) (undo-tree-id2061 . -164) (undo-tree-id2062 . -164) (undo-tree-id2063 . -164) (undo-tree-id2064 . -164) (undo-tree-id2065 . -164) (undo-tree-id2066 . -164) (undo-tree-id2067 . -164) (undo-tree-id2068 . -164) (undo-tree-id2069 . -164) (undo-tree-id2070 . -164) (undo-tree-id2071 . -164) (undo-tree-id2072 . -164) (undo-tree-id2073 . -164) (undo-tree-id2074 . -164) (undo-tree-id2075 . -164) (undo-tree-id2076 . -164) (undo-tree-id2077 . -164) (undo-tree-id2078 . -164) (undo-tree-id2079 . -164) (undo-tree-id2080 . -164) (undo-tree-id2081 . -164) (undo-tree-id2082 . -164) (undo-tree-id2083 . -164) (undo-tree-id2084 . -164) (undo-tree-id2085 . -164) (undo-tree-id2086 . -164) (undo-tree-id2087 . -164) (undo-tree-id2088 . -164) (undo-tree-id2089 . -164) (undo-tree-id2090 . -164) (undo-tree-id2091 . -164) (undo-tree-id2092 . -164) (undo-tree-id2093 . -164) (undo-tree-id2094 . -164) (undo-tree-id2095 . -164) (undo-tree-id2096 . -164) (undo-tree-id2097 . -164) (undo-tree-id2098 . -164) (undo-tree-id2099 . -164) (undo-tree-id2100 . -164) (undo-tree-id2101 . -164) (undo-tree-id2102 . -164) (undo-tree-id2103 . -164) (undo-tree-id2104 . -164) (undo-tree-id2105 . -164) (undo-tree-id2106 . -164) (undo-tree-id2107 . -164) (undo-tree-id2108 . -164) (undo-tree-id2109 . -164) (undo-tree-id2110 . -164) (undo-tree-id2111 . -164) (undo-tree-id2112 . -164) (undo-tree-id2113 . -164) (undo-tree-id2114 . -164) (undo-tree-id2115 . -164) (undo-tree-id2116 . -164) (undo-tree-id2117 . -164) (undo-tree-id2118 . -164) (undo-tree-id2119 . -164) (undo-tree-id2120 . -164) (undo-tree-id2121 . -148) (undo-tree-id2122 . -164) (undo-tree-id2123 . -164) (undo-tree-id2124 . -164) (undo-tree-id2125 . -164) (undo-tree-id2126 . -164) (undo-tree-id2127 . -164) (undo-tree-id2128 . -164) (undo-tree-id2129 . -164) (undo-tree-id2130 . -164) (undo-tree-id2131 . -164) (undo-tree-id2132 . -164) (undo-tree-id2133 . -164) (undo-tree-id2134 . -164) (undo-tree-id2135 . -164) (undo-tree-id2136 . -164) (undo-tree-id2137 . -164) (undo-tree-id2138 . -164) (undo-tree-id2139 . -164) (undo-tree-id2140 . -164) (undo-tree-id2141 . -164) (undo-tree-id2142 . -164) (undo-tree-id2143 . -164) (undo-tree-id2144 . -164) (undo-tree-id2145 . -148) (undo-tree-id2146 . -148) (undo-tree-id2147 . -148) (undo-tree-id2148 . -148) (undo-tree-id2149 . -148) (undo-tree-id2150 . -148) (undo-tree-id2151 . -148) (undo-tree-id2152 . -148) (undo-tree-id2153 . -148) (undo-tree-id2154 . -148) (undo-tree-id2155 . -148) (undo-tree-id2156 . -148) (undo-tree-id2157 . -148) (undo-tree-id2158 . -148) (undo-tree-id2159 . -148) (undo-tree-id2160 . -148) (undo-tree-id2161 . -148) (undo-tree-id2162 . -148) (undo-tree-id2163 . -148) (undo-tree-id2164 . -148) (undo-tree-id2165 . -148) (undo-tree-id2166 . -148) (undo-tree-id2167 . -148) (undo-tree-id2168 . -148) (undo-tree-id2169 . -148) (undo-tree-id2170 . -148) (undo-tree-id2171 . -148) (undo-tree-id2172 . -148) (undo-tree-id2173 . -148) (undo-tree-id2174 . -148) (undo-tree-id2175 . -148) (undo-tree-id2176 . -148) (undo-tree-id2177 . -148) (undo-tree-id2178 . -148) (undo-tree-id2179 . -148) (undo-tree-id2180 . -148) (undo-tree-id2181 . -148) (undo-tree-id2182 . -155) (undo-tree-id2183 . -155) (undo-tree-id2184 . -155) (undo-tree-id2185 . -155) (undo-tree-id2186 . -155) (undo-tree-id2187 . -155) (undo-tree-id2188 . -155) (undo-tree-id2189 . -155) (undo-tree-id2190 . -155) (undo-tree-id2191 . -155) (undo-tree-id2192 . -155) (undo-tree-id2193 . -155) (undo-tree-id2194 . -155) (undo-tree-id2195 . -164) (undo-tree-id2196 . -164) (undo-tree-id2197 . -164) (undo-tree-id2198 . -164) (undo-tree-id2199 . -164) (undo-tree-id2200 . -164) (undo-tree-id2201 . -164) (undo-tree-id2202 . -164) (undo-tree-id2203 . -164) (undo-tree-id2204 . -164) (undo-tree-id2205 . -164) (undo-tree-id2206 . -164) (undo-tree-id2207 . -164) (undo-tree-id2208 . -164) (undo-tree-id2209 . -164) (undo-tree-id2210 . -164) (undo-tree-id2211 . -164) (undo-tree-id2212 . -164) (undo-tree-id2213 . -164) (undo-tree-id2214 . -164) (undo-tree-id2215 . -164) (undo-tree-id2216 . -164) (undo-tree-id2217 . -164) (undo-tree-id2218 . -164) (undo-tree-id2219 . -164) (undo-tree-id2220 . -164) (undo-tree-id2221 . -164) (undo-tree-id2222 . -164) (undo-tree-id2223 . -164) (undo-tree-id2224 . -164) (undo-tree-id2225 . -164) (undo-tree-id2226 . -164) (undo-tree-id2227 . -164) (undo-tree-id2228 . -164) (undo-tree-id2229 . -164) (undo-tree-id2230 . -164) (undo-tree-id2231 . -164) (undo-tree-id2232 . -164) (undo-tree-id2233 . -164) (undo-tree-id2234 . -164) (undo-tree-id2235 . -164) (undo-tree-id2236 . -164) (undo-tree-id2237 . -164) (undo-tree-id2238 . -164) (undo-tree-id2239 . -164) (undo-tree-id2240 . -164) (undo-tree-id2241 . -164) (undo-tree-id2242 . -164) (undo-tree-id2243 . -164) (undo-tree-id2244 . -164) (undo-tree-id2245 . -164) (undo-tree-id2246 . -164) (undo-tree-id2247 . -164) (undo-tree-id2248 . -164) (undo-tree-id2249 . -164) (undo-tree-id2250 . -164) (undo-tree-id2251 . -164) (undo-tree-id2252 . -164) (undo-tree-id2253 . 9) (undo-tree-id2254 . -177) (undo-tree-id2255 . -177) (undo-tree-id2256 . -177) (undo-tree-id2257 . -177) (undo-tree-id2258 . -180) (undo-tree-id2259 . -177) (undo-tree-id2260 . -164) (undo-tree-id2261 . -172) (undo-tree-id2262 . -172) (undo-tree-id2263 . -172) (undo-tree-id2264 . -172) (undo-tree-id2265 . -172) (undo-tree-id2266 . -172) (undo-tree-id2267 . -172) (undo-tree-id2268 . -172) (undo-tree-id2269 . -172) (undo-tree-id2270 . -123) (undo-tree-id2271 . -123) (undo-tree-id2272 . -123) (undo-tree-id2273 . -123) (undo-tree-id2274 . -123) (undo-tree-id2275 . -123) (undo-tree-id2276 . -123) (undo-tree-id2277 . -125) (undo-tree-id2278 . -129) (undo-tree-id2279 . -133) (undo-tree-id2280 . -138) (undo-tree-id2281 . -138) (undo-tree-id2282 . -138) (undo-tree-id2283 . -172) (undo-tree-id2284 . -172) (undo-tree-id2285 . -172) (undo-tree-id2286 . -172) (undo-tree-id2287 . -172) (undo-tree-id2288 . -181) (undo-tree-id2289 . -181) (undo-tree-id2290 . -181) (undo-tree-id2291 . -180) (undo-tree-id2292 . -178) (undo-tree-id2293 . -171) (undo-tree-id2294 . -114) (undo-tree-id2295 . -114) (undo-tree-id2296 . -88) (undo-tree-id2297 . -58) (undo-tree-id2298 . -43) (undo-tree-id2299 . -38) (undo-tree-id2300 . -37) (undo-tree-id2301 . -20) (undo-tree-id2302 . -181) (undo-tree-id2303 . -164) (undo-tree-id2304 . -181)) nil (26116 12848 330464 472000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) 2) nil (26116 12848 329746 300000) 0 nil])
([nil nil ((20 . 21)) nil (26116 12848 329730 849000) 0 nil])
([nil nil ((#("use anyhow::Error;" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 10 (face font-lock-constant-face fontified t) 10 12 (fontified t) 12 17 (face font-lock-type-face fontified t) 17 18 (fontified t)) . 1) (undo-tree-id3069 . -18) (t 26116 12848 344868 158000)) nil (26116 12891 173575 914000) 0 nil])
([nil nil ((1 . 2)) nil (26116 12891 173574 227000) 0 nil])
([nil nil ((1 . 3)) nil (26116 12891 173573 466000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -1) (undo-tree-id3054 . -1) (undo-tree-id3055 . -1) (undo-tree-id3056 . -1) (undo-tree-id3057 . -1) (undo-tree-id3058 . -1) (undo-tree-id3059 . -1) (undo-tree-id3060 . -1) (undo-tree-id3061 . -1) (undo-tree-id3062 . -1) (undo-tree-id3063 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -2) (undo-tree-id3064 . -1) (undo-tree-id3065 . -1) (undo-tree-id3066 . -1) (undo-tree-id3067 . -1) (undo-tree-id3068 . -1) 3) nil (26116 12891 173571 985000) 0 nil])
([nil nil ((1 . 3)) nil (26116 12891 173559 884000) 0 nil])
([nil nil ((3 . 5)) nil (26116 12891 173559 285000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -4) (undo-tree-id3051 . -1) (undo-tree-id3052 . -1) (undo-tree-id3053 . -1) 5) nil (26116 12891 173558 388000) 0 nil])
([nil nil ((4 . 17)) nil (26116 12891 173555 140000) 0 nil])
([nil nil ((17 . 19)) nil (26116 12891 173554 446000) 0 nil])
([nil nil ((19 . 24)) nil (26116 12891 173553 880000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -23) (undo-tree-id3047 . -1) (undo-tree-id3048 . -1) (undo-tree-id3049 . -1) (undo-tree-id3050 . -1) 24) nil (26116 12891 173552 991000) 0 nil])
([nil nil ((23 . 25)) nil (26116 12891 173549 262000) 0 nil])
([nil nil ((apply yas--snippet-revive 23 31 #s(yas--snippet nil nil #s(yas--exit 30 nil) 11 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 30 nil) 11 nil nil nil nil)) (23 . 31) (#("Option<$0>" 0 10 (fontified nil)) . 23) (23 . 33) (#("Op" 0 2 (fontified nil)) . 23) (23 . 25) (#("Option<â€¦>" 0 9 (fontified nil)) . -23) (23 . 32) (#("Op" 0 2 (face font-lock-type-face fontified t)) . -23) (undo-tree-id3041 . -2) (undo-tree-id3042 . -1) (undo-tree-id3043 . -1) (undo-tree-id3044 . -2) (undo-tree-id3045 . -2) (undo-tree-id3046 . -2) 25) nil (26116 12891 173547 588000) 0 nil])
([nil nil ((30 . 33)) nil (26116 12891 173539 919000) 0 nil])
([nil nil ((30 . 35) (#("usi" 0 3 (fontified nil)) . 30) (30 . 33) (#("usize" 0 5 (fontified nil)) . -30) (30 . 35) (#("usi" 0 3 (fontified t)) . -30) (undo-tree-id3028 . -3) (undo-tree-id3029 . -1) (undo-tree-id3030 . -1) (undo-tree-id3031 . -2) (undo-tree-id3032 . -2) (undo-tree-id3033 . -2) (undo-tree-id3034 . -2) (undo-tree-id3035 . -3) (undo-tree-id3036 . -3) (undo-tree-id3037 . -3) (undo-tree-id3038 . -3) (undo-tree-id3039 . -3) (undo-tree-id3040 . -3) 33) nil (26116 12891 173538 267000) 0 nil])
([nil nil ((2 . 3)) nil (26116 12891 173527 621000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -2) (undo-tree-id3024 . -1) (undo-tree-id3025 . -1) (undo-tree-id3026 . -1) (undo-tree-id3027 . -1) 3) nil (26116 12891 173526 692000) 0 nil])
([nil nil ((2 . 7)) nil (26116 12891 173522 627000) 0 nil])
([nil nil ((#("typed" 0 5 (fontified t)) . -2) (undo-tree-id3000 . -5) (undo-tree-id3001 . -1) (undo-tree-id3002 . -1) (undo-tree-id3003 . -2) (undo-tree-id3004 . -2) (undo-tree-id3005 . -2) (undo-tree-id3006 . -2) (undo-tree-id3007 . -3) (undo-tree-id3008 . -3) (undo-tree-id3009 . -3) (undo-tree-id3010 . -4) (undo-tree-id3011 . -4) (undo-tree-id3012 . -4) (undo-tree-id3013 . -4) (undo-tree-id3014 . -5) (undo-tree-id3015 . -5) (undo-tree-id3016 . -5) (undo-tree-id3017 . -5) (undo-tree-id3018 . -5) (undo-tree-id3019 . -5) (undo-tree-id3020 . -5) (undo-tree-id3021 . -5) (undo-tree-id3022 . -5) (undo-tree-id3023 . -5) 7) nil (26116 12891 173521 3000) 0 nil])
([nil nil ((2 . 4)) nil (26116 12891 173502 639000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -2) (undo-tree-id2982 . -1) (undo-tree-id2983 . -1) (undo-tree-id2984 . -1) (undo-tree-id2985 . -1) (undo-tree-id2986 . -1) (undo-tree-id2987 . -1) (undo-tree-id2988 . -1) (undo-tree-id2989 . -1) (undo-tree-id2990 . -1) (undo-tree-id2991 . -1) (undo-tree-id2992 . -1) (undo-tree-id2993 . -1) (#("e" 0 1 (fontified t)) . -3) (undo-tree-id2994 . -1) (undo-tree-id2995 . -1) (undo-tree-id2996 . -1) (undo-tree-id2997 . -1) (undo-tree-id2998 . -1) (undo-tree-id2999 . -1) 4) nil (26116 12891 173499 689000) 0 nil])
([nil nil ((2 . 7)) nil (26116 12891 173478 488000) 0 nil])
([nil nil ((7 . 18)) nil (26116 12891 173477 514000) 0 nil])
([nil nil ((13 . 15)) nil (26116 12891 173475 611000) 0 nil])
([nil nil ((20 . 21)) nil (26116 12891 173470 843000) 0 nil])
([nil nil ((2 . 6) (t 26116 12891 188204 122000)) nil (26116 12894 225281 909000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -4) (undo-tree-id3070 . -1) (undo-tree-id3071 . -1) (undo-tree-id3072 . -1) (undo-tree-id3073 . -1) (undo-tree-id3074 . -1) (undo-tree-id3075 . -1) (undo-tree-id3076 . -1) (undo-tree-id3077 . -1) (#("b" 0 1 (fontified t)) . -5) (undo-tree-id3078 . -1) (undo-tree-id3079 . -1) (undo-tree-id3080 . -1) 6) nil (26116 12894 225278 891000) 0 nil])
([nil nil ((4 . 6)) nil (26116 12894 225261 78000) 0 nil])
([nil nil ((#("usize" 0 5 (face font-lock-type-face fontified t)) . -53) (undo-tree-id3087 . -5) (undo-tree-id3088 . -5) (undo-tree-id3089 . -5) 58 (t 26116 12894 271537 644000)) nil (26116 12899 502391 740000) 0 nil])
([nil nil ((53 . 54)) nil (26116 12899 502387 635000) 0 nil])
([nil nil ((53 . 58) (#("p" 0 1 (fontified nil)) . 53) (53 . 54) (#("pid_t" 0 5 (fontified nil)) . -53) (53 . 58) (#("p" 0 1 (fontified t)) . -53) (undo-tree-id3081 . -1) (undo-tree-id3082 . -1) (undo-tree-id3083 . -1) (undo-tree-id3084 . -1) (undo-tree-id3085 . -1) (undo-tree-id3086 . -1) 54) nil (26116 12899 502383 482000) 0 nil])
([nil nil ((59 . 60) (t 26116 12899 548204 635000)) nil (26116 12903 747175 261000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -59) (undo-tree-id3090 . -1) (undo-tree-id3091 . -1) 60) nil (26116 12903 747173 543000) 0 nil])
([nil nil ((59 . 62)) nil (26116 12903 747164 111000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . 62) (62 . 66) (61 . 63)) nil (26116 12903 747158 674000) 0 nil])
([nil nil ((62 . 63) (t 26116 12903 761538 228000)) nil (26116 12906 127306 221000) 0 nil])
([nil nil ((apply yas--snippet-revive 62 66 #s(yas--snippet nil nil #s(yas--exit 66 nil) 12 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 66 nil) 12 nil nil nil nil)) (62 . 66) (#("None$0" 0 6 (fontified nil)) . 62) (62 . 68) (#("N" 0 1 (fontified nil)) . 62) (62 . 63) (#("None" 0 4 (fontified nil)) . -62) (62 . 66) (#("N" 0 1 (face font-lock-type-face fontified t)) . -62) (undo-tree-id3092 . -1) (undo-tree-id3093 . -1) 63) nil (26116 12906 127303 455000) 0 nil])
([nil nil ((62 . 66) 66) nil (26116 12906 127289 929000) 0 nil])
([nil nil ((64 . 68) (#("    " 0 4 (fontified nil)) . 63) (undo-tree-id3137 . -4) (undo-tree-id3138 . -4) (undo-tree-id3139 . -4) (63 . 68) (#("    " 0 4 (fontified nil)) . 62) (undo-tree-id3140 . -4) (undo-tree-id3141 . -4) (66 . 67) (t 26116 12906 141538 373000)) nil (26116 12912 492360 547000) 0 nil])
([nil nil ((#("z" 0 1 (fontified t)) . -21) (undo-tree-id3123 . -1) (undo-tree-id3124 . -1) (undo-tree-id3125 . -1) (undo-tree-id3126 . -1) (undo-tree-id3127 . -1) (undo-tree-id3128 . -1) (undo-tree-id3129 . -1) (undo-tree-id3130 . -1) (undo-tree-id3131 . -1) (undo-tree-id3132 . -1) (undo-tree-id3133 . -1) (undo-tree-id3134 . -1) (undo-tree-id3135 . -1) (undo-tree-id3136 . -1) 22) nil (26116 12912 492355 669000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -21) (undo-tree-id3121 . -1) (undo-tree-id3122 . -1) 22) nil (26116 12912 492345 880000) 0 nil])
([nil nil ((21 . 23)) nil (26116 12912 492342 858000) 0 nil])
([nil nil ((19 . 24) (#("usize" 0 4 (fontified nil) 4 5 (face font-lock-type-face fontified nil)) . 19) (undo-tree-id3094 . 1) (19 . 23) (#("usize" 0 5 (fontified nil)) . -19) (19 . 24) (#("usiz" 0 4 (face font-lock-type-face fontified t)) . -19) (undo-tree-id3095 . -4) (undo-tree-id3096 . -2) (undo-tree-id3097 . -2) (undo-tree-id3098 . -2) (undo-tree-id3099 . -2) (undo-tree-id3100 . -2) (undo-tree-id3101 . -2) (undo-tree-id3102 . -2) (undo-tree-id3103 . -2) (undo-tree-id3104 . -2) (undo-tree-id3105 . -2) (undo-tree-id3106 . -2) (undo-tree-id3107 . -2) (undo-tree-id3108 . -2) (undo-tree-id3109 . -2) (undo-tree-id3110 . -2) (undo-tree-id3111 . -2) (undo-tree-id3112 . -2) (undo-tree-id3113 . -3) (undo-tree-id3114 . -3) (undo-tree-id3115 . -4) (undo-tree-id3116 . -4) (undo-tree-id3117 . -2) (undo-tree-id3118 . -4) (undo-tree-id3119 . -4) (undo-tree-id3120 . -4) 23) nil (26116 12912 492337 608000) 0 nil])
([nil nil ((#("pub type pid_t = usize;" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 8 (face font-lock-keyword-face fontified t) 8 9 (fontified t) 9 14 (face font-lock-type-face fontified t) 14 17 (fontified t) 17 22 (face font-lock-type-face fontified t) 22 23 (fontified t)) . 2) (undo-tree-id3325 . -17) (undo-tree-id3326 . -17) (undo-tree-id3327 . -17) (undo-tree-id3328 . -17) (undo-tree-id3329 . -17) (undo-tree-id3330 . -17) (undo-tree-id3331 . -17) (undo-tree-id3332 . -17) (undo-tree-id3333 . -17) (undo-tree-id3334 . -17) (undo-tree-id3335 . -17) (undo-tree-id3336 . -17) (undo-tree-id3337 . -17) (undo-tree-id3338 . -17) (undo-tree-id3339 . -17) (undo-tree-id3340 . -17) (undo-tree-id3341 . -17) (undo-tree-id3342 . -17) (undo-tree-id3343 . -17) (undo-tree-id3344 . -17) (undo-tree-id3345 . -17) (undo-tree-id3346 . -17) (undo-tree-id3347 . -17) (undo-tree-id3348 . -17) (undo-tree-id3349 . -22) (undo-tree-id3350 . -22) (undo-tree-id3351 . -22) (undo-tree-id3352 . -22) (undo-tree-id3353 . -22) (undo-tree-id3354 . -22) (undo-tree-id3355 . -22) (undo-tree-id3356 . -22) (undo-tree-id3357 . -22) (undo-tree-id3358 . -22) (undo-tree-id3359 . -22) (undo-tree-id3360 . -22) (undo-tree-id3361 . -22) (undo-tree-id3362 . -22) (undo-tree-id3363 . -22) (undo-tree-id3364 . -22) (undo-tree-id3365 . -17) (undo-tree-id3366 . -13) (undo-tree-id3367 . -13) (undo-tree-id3368 . -13) (undo-tree-id3369 . -13) (undo-tree-id3370 . -13) (undo-tree-id3371 . -23) (t 26116 12912 504872 98000)) nil (26116 12997 715240 140000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2) (undo-tree-id3324 . -1)) nil (26116 12997 714753 906000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -33) (undo-tree-id3322 . -1) (undo-tree-id3323 . -1) 34) nil (26116 12997 714752 150000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -29) (undo-tree-id3304 . -1) (undo-tree-id3305 . -1) (undo-tree-id3306 . -1) (undo-tree-id3307 . -1) (undo-tree-id3308 . -1) (undo-tree-id3309 . -1) (#("i" 0 1 (fontified t)) . -30) (undo-tree-id3310 . -1) (undo-tree-id3311 . -1) (undo-tree-id3312 . -1) (undo-tree-id3313 . -1) (undo-tree-id3314 . -1) (#("d" 0 1 (fontified t)) . -31) (undo-tree-id3315 . -1) (undo-tree-id3316 . -1) (undo-tree-id3317 . -1) (undo-tree-id3318 . -1) (#("_" 0 1 (fontified t)) . -32) (undo-tree-id3319 . -1) (undo-tree-id3320 . -1) (undo-tree-id3321 . -1) 33) nil (26116 12997 714748 875000) 0 nil])
([nil nil ((29 . 31)) nil (26116 12997 714735 506000) 0 nil])
([nil nil ((29 . 34) (#("us" 0 2 (fontified nil)) . 29) (29 . 31) (#("usize" 0 5 (fontified nil)) . -29) (29 . 34) (#("us" 0 2 (fontified t)) . -29) (undo-tree-id3294 . -2) (undo-tree-id3295 . -1) (undo-tree-id3296 . -1) (undo-tree-id3297 . -1) (undo-tree-id3298 . -1) (undo-tree-id3299 . -2) (undo-tree-id3300 . -2) (undo-tree-id3301 . -2) (undo-tree-id3302 . -2) (undo-tree-id3303 . -2) 31) nil (26116 12997 714733 964000) 0 nil])
([nil nil ((38 . 42)) nil (26116 12997 714725 352000) 0 nil])
([nil nil ((42 . 51)) nil (26116 12997 714724 734000) 0 nil])
([nil nil ((1 . 34) (apply yas--snippet-revive 42 53 #s(yas--snippet nil nil #s(yas--exit 53 nil) 13 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 53 nil) 13 nil nil nil nil)) (42 . 53) (#("processes()$0" 0 13 (fontified nil)) . 42) (42 . 55) (#("processes" 0 9 (fontified nil)) . 42) (42 . 51) (#("processes() (use psutil::process::processes)" 0 44 (fontified nil)) . -42) (42 . 86) (#("processes" 0 9 (fontified t)) . -42) (undo-tree-id3274 . -9) (undo-tree-id3275 . -1) (undo-tree-id3276 . -2) (undo-tree-id3277 . -2) (undo-tree-id3278 . -3) (undo-tree-id3279 . -3) (undo-tree-id3280 . -4) (undo-tree-id3281 . -4) (undo-tree-id3282 . -5) (undo-tree-id3283 . -5) (undo-tree-id3284 . -6) (undo-tree-id3285 . -6) (undo-tree-id3286 . -7) (undo-tree-id3287 . -7) (undo-tree-id3288 . -8) (undo-tree-id3289 . -8) (undo-tree-id3290 . -9) (undo-tree-id3291 . -9) (undo-tree-id3292 . -9) (undo-tree-id3293 . -9) 51) nil (26116 12997 714722 650000) 0 nil])
([nil nil ((90 . 91) (101 . 102) (75 . 75) (75 . 90)) nil (26116 12997 714706 792000) 0 nil])
([nil nil ((103 . 108)) nil (26116 12997 714705 737000) 0 nil])
([nil nil ((108 . 109)) nil (26116 12997 714705 58000) 0 nil])
([nil nil ((109 . 122)) nil (26116 12997 714704 434000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -119) (undo-tree-id3256 . -1) (undo-tree-id3257 . -1) (undo-tree-id3258 . -1) (undo-tree-id3259 . -1) (undo-tree-id3260 . -1) (undo-tree-id3261 . -1) (undo-tree-id3262 . -1) (undo-tree-id3263 . -1) (undo-tree-id3264 . -1) (#("s" 0 1 (face font-lock-variable-name-face fontified t)) . -120) (undo-tree-id3265 . -1) (undo-tree-id3266 . -1) (undo-tree-id3267 . -1) (undo-tree-id3268 . -1) (undo-tree-id3269 . -1) (undo-tree-id3270 . -1) (#(" " 0 1 (fontified t)) . -121) (undo-tree-id3271 . -1) (undo-tree-id3272 . -1) (undo-tree-id3273 . -1) 122) nil (26116 12997 714702 700000) 0 nil])
([nil nil ((119 . 124)) nil (26116 12997 714689 917000) 0 nil])
([nil nil ((123 . 132) (#("p" 0 1 (fontified nil)) . 123) (123 . 124) (#("processes" 0 9 (fontified nil)) . -123) (123 . 132) (#("p" 0 1 (fontified t)) . -123) (undo-tree-id3252 . -1) (undo-tree-id3253 . -1) (undo-tree-id3254 . -1) (undo-tree-id3255 . -1) 124) nil (26116 12997 714688 588000) 0 nil])
([nil nil ((132 . 135)) nil (26116 12997 714683 683000) 0 nil])
([nil nil ((136 . 140) (#("        " 0 8 (fontified nil)) . 135) (135 . 143) (#("    " 0 4 (fontified nil)) . 135) (undo-tree-id3249 . -4) (undo-tree-id3250 . -4) (undo-tree-id3251 . -4) (134 . 140)) nil (26116 12997 714682 411000) 0 nil])
([nil nil ((135 . 143)) nil (26116 12997 714679 91000) 0 nil])
([nil nil ((143 . 147)) nil (26116 12997 714678 404000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 149 156 nil nil nil t #s(yas--exit 171 nil))) #s(yas--exit 171 nil) 14 nil #s(yas--field 1 149 156 nil nil nil t #s(yas--exit 171 nil)) nil nil)) (143 . 174) (#("match $1 {
            $0
        }" 0 35 (fontified nil)) . 143) (169 . 177) (154 . 166) (#("    " 0 4 (fontified nil)) . 154) (143 . 162) (#("math" 0 4 (fontified nil)) . 143) (143 . 147) (#("match" 0 5 (fontified nil)) . -143) (143 . 148) (#("math" 0 4 (fontified t)) . -143) (undo-tree-id3239 . -4) (undo-tree-id3240 . -1) (undo-tree-id3241 . -2) (undo-tree-id3242 . -2) (undo-tree-id3243 . -3) (undo-tree-id3244 . -3) (undo-tree-id3245 . -4) (undo-tree-id3246 . -4) (undo-tree-id3247 . -4) (undo-tree-id3248 . -4) 147) nil (26116 12997 714676 416000) 0 nil])
([nil nil ((149 . 150)) nil (26116 12997 714667 401000) 0 nil])
([nil nil ((149 . 156) (#("p" 0 1 (fontified nil)) . 149) (undo-tree-id3231 . -1) (149 . 150) (#("process" 0 7 (fontified nil)) . -149) (undo-tree-id3232 . -7) (149 . 156) (#("p" 0 1 (fontified t)) . -149) (undo-tree-id3233 . -1) (undo-tree-id3234 . -1) (undo-tree-id3235 . -1) (undo-tree-id3236 . -1) (undo-tree-id3237 . -1) (undo-tree-id3238 . -1) 150) nil (26116 12997 714665 885000) 0 nil])
([nil nil ((apply yas--snippet-revive 143 181 #s(yas--snippet nil (#s(yas--field 1 149 156 nil nil nil t #s(yas--exit 171 nil))) #s(yas--exit 171 nil) 14 nil #s(yas--field 1 149 156 nil nil nil t #s(yas--exit 171 nil)) nil nil))) nil (26116 12997 714658 28000) 0 nil])
([nil nil ((#("        match process {
            
        }" 0 8 (fontified t) 8 13 (face font-lock-keyword-face fontified t) 13 14 (fontified t) 14 21 (fontified t) 21 22 (fontified t) 22 23 (face (rainbow-delimiters-depth-3-face) fontified t) 23 24 (fontified t) 24 45 (fontified t) 45 46 (face (rainbow-delimiters-depth-3-face) fontified t)) . 135) (undo-tree-id3148 . -46) (undo-tree-id3149 . -8) (undo-tree-id3150 . -8) (undo-tree-id3151 . -8) (undo-tree-id3152 . -8) (undo-tree-id3153 . -8) (undo-tree-id3154 . -8) (undo-tree-id3155 . -8) (undo-tree-id3156 . -8) (undo-tree-id3157 . -8) (undo-tree-id3158 . -8) (undo-tree-id3159 . -8) (undo-tree-id3160 . -8) (undo-tree-id3161 . -8) (undo-tree-id3162 . -8) (undo-tree-id3163 . -8) (undo-tree-id3164 . -8) (undo-tree-id3165 . -46) (undo-tree-id3166 . -46) (undo-tree-id3167 . -14) (undo-tree-id3168 . -14) (undo-tree-id3169 . -14) (undo-tree-id3170 . -14) (undo-tree-id3171 . -14) (undo-tree-id3172 . -14) (undo-tree-id3173 . -14) (undo-tree-id3174 . -14) (undo-tree-id3175 . -14) (undo-tree-id3176 . -14) (undo-tree-id3177 . -21) (undo-tree-id3178 . -21) (undo-tree-id3179 . -21) (undo-tree-id3180 . -21) (undo-tree-id3181 . -21) (undo-tree-id3182 . -21) (undo-tree-id3183 . -21) (undo-tree-id3184 . -21) (undo-tree-id3185 . -36) (undo-tree-id3186 . -36) (undo-tree-id3187 . -36) (undo-tree-id3188 . -36) (undo-tree-id3189 . -36) (undo-tree-id3190 . -21) (undo-tree-id3191 . -36) (undo-tree-id3192 . -46) (undo-tree-id3193 . -36) (undo-tree-id3194 . -36) (undo-tree-id3195 . -36) (undo-tree-id3196 . -36) (undo-tree-id3197 . -36) (undo-tree-id3198 . -36) (undo-tree-id3199 . -36) (undo-tree-id3200 . -36) (undo-tree-id3201 . -36) (undo-tree-id3202 . -36) (undo-tree-id3203 . -36) (undo-tree-id3204 . -36) (undo-tree-id3205 . -36) (undo-tree-id3206 . -36) (undo-tree-id3207 . -36) (undo-tree-id3208 . -36) (undo-tree-id3209 . -36) (undo-tree-id3210 . -36) (undo-tree-id3211 . -36) (undo-tree-id3212 . -36) (undo-tree-id3213 . -36) (undo-tree-id3214 . -46) (undo-tree-id3215 . -46) (undo-tree-id3216 . -46) (undo-tree-id3217 . -46) (undo-tree-id3218 . -46) (undo-tree-id3219 . -46) (undo-tree-id3220 . -46) (undo-tree-id3221 . -44) (undo-tree-id3222 . -43) (undo-tree-id3223 . -29) (undo-tree-id3224 . -28) (undo-tree-id3225 . -27) (undo-tree-id3226 . -26) (undo-tree-id3227 . -25) (undo-tree-id3228 . -24) (undo-tree-id3229 . -46) (undo-tree-id3230 . -46)) nil (26116 12997 714654 253000) 0 nil])
([nil nil ((135 . 143)) nil (26116 12997 714594 470000) 0 nil])
([nil nil ((143 . 145)) nil (26116 12997 714593 744000) 0 nil])
([nil nil ((143 . 150) (#("pr" 0 2 (fontified nil)) . 143) (143 . 145) (#("process" 0 7 (fontified nil)) . -143) (143 . 150) (#("pr" 0 2 (fontified t)) . -143) (undo-tree-id3142 . -2) (undo-tree-id3143 . -1) (undo-tree-id3144 . -2) (undo-tree-id3145 . -2) (undo-tree-id3146 . -2) (undo-tree-id3147 . -2) 145) nil (26116 12997 714590 942000) 0 nil])
([nil nil ((132 . 133)) nil (26116 12997 714574 228000) 0 nil])
([nil nil ((#("?" 0 1 (face rust-question-mark fontified t)) . -132) (undo-tree-id3377 . -1) (undo-tree-id3378 . -1) (undo-tree-id3379 . -1) (undo-tree-id3380 . -1) (undo-tree-id3381 . -1) (undo-tree-id3382 . -1) (undo-tree-id3383 . -1) (undo-tree-id3384 . -1) (undo-tree-id3385 . -1) (undo-tree-id3386 . -1) (undo-tree-id3387 . -1) (undo-tree-id3388 . -1) (undo-tree-id3389 . -1) (undo-tree-id3390 . -1) (undo-tree-id3391 . -1) 133 (t 26116 12997 731543 995000)) nil (26116 13001 500123 992000) 0 nil])
([nil nil ((132 . 134)) nil (26116 13001 500111 625000) 0 nil])
([nil nil ((apply yas--snippet-revive 133 141 #s(yas--snippet nil nil #s(yas--exit 141 nil) 15 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 141 nil) 15 nil nil nil nil)) (133 . 141) (#("unwrap()$0" 0 10 (fontified nil)) . 133) (133 . 143) (#("u" 0 1 (fontified nil)) . 133) (133 . 134) (#("unwrap()" 0 8 (fontified nil)) . -133) (133 . 141) (#("u" 0 1 (fontified t)) . -133) (undo-tree-id3372 . -1) (undo-tree-id3373 . -1) (undo-tree-id3374 . -1) (undo-tree-id3375 . -1) (undo-tree-id3376 . -1) 134) nil (26116 13001 500106 991000) 0 nil])
([nil nil ((#("unwrap()" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-2-face) fontified t) 7 8 (face (rainbow-delimiters-depth-2-face) fontified t)) . -133) (undo-tree-id3579 . -8) (undo-tree-id3580 . -8) (undo-tree-id3581 . -8) (undo-tree-id3582 . -8) (undo-tree-id3583 . -8) (undo-tree-id3584 . -8) (undo-tree-id3585 . -8) (undo-tree-id3586 . -8) (undo-tree-id3587 . -8) (undo-tree-id3588 . -8) (undo-tree-id3589 . -8) (undo-tree-id3590 . -8) 141 (t 26116 13001 514877 561000)) nil (26116 13032 606705 805000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -132) (undo-tree-id3562 . -1) (undo-tree-id3563 . -1) (undo-tree-id3564 . -1) (undo-tree-id3565 . -1) (undo-tree-id3566 . -1) (undo-tree-id3567 . -1) (undo-tree-id3568 . -1) (undo-tree-id3569 . -1) (undo-tree-id3570 . -1) (undo-tree-id3571 . -1) (undo-tree-id3572 . -1) (undo-tree-id3573 . -1) (undo-tree-id3574 . -1) (undo-tree-id3575 . -1) (undo-tree-id3576 . -1) (undo-tree-id3577 . -1) (undo-tree-id3578 . -1) 133) nil (26116 13032 606558 956000) 0 nil])
([nil nil ((102 . 104)) nil (26116 13032 606547 546000) 0 nil])
([nil nil ((apply yas--snippet-revive 103 111 #s(yas--snippet nil nil #s(yas--exit 111 nil) 16 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 111 nil) 16 nil nil nil nil)) (103 . 111) (#("unwrap()$0" 0 10 (fontified nil)) . 103) (103 . 113) (#("u" 0 1 (fontified nil)) . 103) (103 . 104) (#("unwrap()" 0 8 (fontified nil)) . -103) (103 . 111) (#("u" 0 1 (fontified t)) . -103) (undo-tree-id3557 . -1) (undo-tree-id3558 . -1) (undo-tree-id3559 . -1) (undo-tree-id3560 . -1) (undo-tree-id3561 . -1) 104) nil (26116 13032 606546 102000) 0 nil])
([nil nil ((#("usize>" 0 5 (face font-lock-type-face fontified t) 5 6 (face (rainbow-delimiters-depth-1-face) fontified t)) . -62) (undo-tree-id3547 . -6) (undo-tree-id3548 . -6) (undo-tree-id3549 . -5) (undo-tree-id3550 . -6) (undo-tree-id3551 . -6) (undo-tree-id3552 . -6) (undo-tree-id3553 . -6) (undo-tree-id3554 . -6) (undo-tree-id3555 . -6) (undo-tree-id3556 . -6) 68) nil (26116 13032 606540 966000) 0 nil])
([nil nil ((#("Option<" 0 6 (face font-lock-type-face fontified t) 6 7 (face (rainbow-delimiters-depth-1-face) fontified t)) . -55) (undo-tree-id3528 . -7) (undo-tree-id3529 . -7) (undo-tree-id3530 . -7) (undo-tree-id3531 . -7) (undo-tree-id3532 . -7) (undo-tree-id3533 . -7) (undo-tree-id3534 . -7) (undo-tree-id3535 . -7) (undo-tree-id3536 . -7) (undo-tree-id3537 . -7) (undo-tree-id3538 . -7) (undo-tree-id3539 . -7) (undo-tree-id3540 . -7) (undo-tree-id3541 . -7) (undo-tree-id3542 . -7) (undo-tree-id3543 . -7) (undo-tree-id3544 . -7) (undo-tree-id3545 . -7) (undo-tree-id3546 . -7) 62) nil (26116 13032 606532 960000) 0 nil])
([nil nil ((55 . 56)) nil (26116 13032 606521 56000) 0 nil])
([nil nil ((apply yas--snippet-revive 55 63 #s(yas--snippet nil nil #s(yas--exit 62 nil) 17 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 62 nil) 17 nil nil nil nil)) (55 . 63) (#("Result<$0>" 0 10 (fontified nil)) . 55) (55 . 65) (#("R" 0 1 (fontified nil)) . 55) (55 . 56) (#("Result<â€¦>" 0 9 (fontified nil)) . -55) (55 . 64) (#("R" 0 1 (face font-lock-type-face fontified t)) . -55) (undo-tree-id3523 . -1) (undo-tree-id3524 . -1) (undo-tree-id3525 . -1) (undo-tree-id3526 . -1) (undo-tree-id3527 . -1) 56) nil (26116 13032 606519 662000) 0 nil])
([nil nil ((62 . 63)) nil (26116 13032 606514 161000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -62) (undo-tree-id3520 . -1) (undo-tree-id3521 . -1) (undo-tree-id3522 . -1) 63) nil (26116 13032 606513 239000) 0 nil])
([nil nil ((62 . 63)) nil (26116 13032 606510 601000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -62) (undo-tree-id3515 . -1) (undo-tree-id3516 . -1) (undo-tree-id3517 . -1) (undo-tree-id3518 . -1) (undo-tree-id3519 . -1) 63) nil (26116 13032 606509 675000) 0 nil])
([nil nil ((#("Result<>" 0 6 (face font-lock-type-face fontified t) 6 7 (face (rainbow-delimiters-depth-1-face) fontified t) 7 8 (face (rainbow-delimiters-depth-1-face) fontified t)) . -55) (undo-tree-id3480 . -8) (undo-tree-id3481 . -7) (undo-tree-id3482 . -7) (undo-tree-id3483 . -7) (undo-tree-id3484 . -7) (undo-tree-id3485 . -7) (undo-tree-id3486 . -7) (undo-tree-id3487 . -7) (undo-tree-id3488 . -7) (undo-tree-id3489 . -7) (undo-tree-id3490 . -7) (undo-tree-id3491 . -7) (undo-tree-id3492 . -7) (undo-tree-id3493 . -7) (undo-tree-id3494 . -7) (undo-tree-id3495 . -7) (undo-tree-id3496 . 1) (undo-tree-id3497 . -7) (undo-tree-id3498 . -7) (undo-tree-id3499 . -7) (undo-tree-id3500 . -7) (undo-tree-id3501 . -8) (undo-tree-id3502 . -7) (undo-tree-id3503 . -7) (undo-tree-id3504 . -7) (undo-tree-id3505 . -7) (undo-tree-id3506 . -7) (undo-tree-id3507 . -7) (undo-tree-id3508 . -8) (undo-tree-id3509 . -8) (undo-tree-id3510 . -8) (undo-tree-id3511 . -8) (undo-tree-id3512 . -8) (undo-tree-id3513 . -8) (undo-tree-id3514 . -8) 63) nil (26116 13032 606504 636000) 0 nil])
([nil nil ((33 . 39)) nil (26116 13032 606481 867000) 0 nil])
([nil nil ((37 . 43) (#("an" 0 2 (fontified nil)) . 37) (37 . 39) (#("anyhow" 0 6 (fontified nil)) . -37) (37 . 43) (#("an" 0 2 (face font-lock-constant-face fontified t)) . -37) (undo-tree-id3476 . -2) (undo-tree-id3477 . -1) (undo-tree-id3478 . -2) (undo-tree-id3479 . -2) 39) nil (26116 13032 606480 632000) 0 nil])
([nil nil ((43 . 46)) nil (26116 13032 606476 838000) 0 nil])
([nil nil ((45 . 51) (#("R" 0 1 (fontified nil)) . 45) (45 . 46) (#("Result" 0 6 (fontified nil)) . -45) (45 . 51) (#("R" 0 1 (face font-lock-type-face fontified t)) . -45) (undo-tree-id3470 . -1) (undo-tree-id3471 . -1) (undo-tree-id3472 . -1) (undo-tree-id3473 . -1) (undo-tree-id3474 . -1) (undo-tree-id3475 . -1) 46) nil (26116 13032 606475 489000) 0 nil])
([nil nil ((51 . 52)) nil (26116 13032 606470 451000) 0 nil])
([nil nil ((73 . 75)) nil (26116 13032 606469 659000) 0 nil])
([nil nil ((apply yas--snippet-revive 74 82 #s(yas--snippet nil nil #s(yas--exit 81 nil) 18 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 81 nil) 18 nil nil nil nil)) (74 . 82) (#("Result<$0>" 0 10 (fontified nil)) . 74) (74 . 84) (#("R" 0 1 (fontified nil)) . 74) (74 . 75) (#("Result<â€¦>" 0 9 (fontified nil)) . -74) (74 . 83) (#("R" 0 1 (face font-lock-type-face fontified t)) . -74) (undo-tree-id3465 . -1) (undo-tree-id3466 . -1) (undo-tree-id3467 . -1) (undo-tree-id3468 . -1) (undo-tree-id3469 . -1) 75) nil (26116 13032 606468 63000) 0 nil])
([nil nil ((81 . 83)) nil (26116 13032 606462 619000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -81) (undo-tree-id3454 . -1) (undo-tree-id3455 . -1) (undo-tree-id3456 . -1) (undo-tree-id3457 . -1) (undo-tree-id3458 . -1) (undo-tree-id3459 . -1) (undo-tree-id3460 . -1) (#("s" 0 1 (fontified t)) . -82) (undo-tree-id3461 . -1) (undo-tree-id3462 . -1) (undo-tree-id3463 . -1) (undo-tree-id3464 . -1) 83) nil (26116 13032 606461 269000) 0 nil])
([nil nil ((81 . 83)) nil (26116 13032 606452 987000) 0 nil])
([nil nil ((81 . 86) (#("us" 0 2 (fontified nil)) . 81) (81 . 83) (#("usize" 0 5 (fontified nil)) . -81) (81 . 86) (#("us" 0 2 (fontified t)) . -81) (undo-tree-id3447 . -2) (undo-tree-id3448 . -1) (undo-tree-id3449 . -2) (undo-tree-id3450 . -2) (undo-tree-id3451 . -2) (undo-tree-id3452 . -2) (undo-tree-id3453 . -2) 83) nil (26116 13032 606451 300000) 0 nil])
([nil nil ((#("unwrap()" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-2-face) fontified t) 7 8 (face (rainbow-delimiters-depth-2-face) fontified t)) . -123) (undo-tree-id3428 . -8) (undo-tree-id3429 . -8) (undo-tree-id3430 . -8) (undo-tree-id3431 . -8) (undo-tree-id3432 . -8) (undo-tree-id3433 . -8) (undo-tree-id3434 . -8) (undo-tree-id3435 . -8) (undo-tree-id3436 . -8) (undo-tree-id3437 . -8) (undo-tree-id3438 . -6) (undo-tree-id3439 . -6) (undo-tree-id3440 . -6) (undo-tree-id3441 . -7) (undo-tree-id3442 . -7) (undo-tree-id3443 . -7) (undo-tree-id3444 . -7) (undo-tree-id3445 . -7) (undo-tree-id3446 . -8) 131) nil (26116 13032 606988 242000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -122) (undo-tree-id3593 . -1) (undo-tree-id3594 . -1) (undo-tree-id3595 . -1) (undo-tree-id3596 . -1) (undo-tree-id3597 . -1) (undo-tree-id3598 . -1) (undo-tree-id3599 . -1) (undo-tree-id3600 . -1) (undo-tree-id3601 . -1) (undo-tree-id3602 . -1) (undo-tree-id3603 . -1) (undo-tree-id3604 . -1) (undo-tree-id3605 . -1) (undo-tree-id3606 . -1) (undo-tree-id3607 . -1) (undo-tree-id3608 . -1) (undo-tree-id3609 . -1) (undo-tree-id3610 . -1) (undo-tree-id3611 . -1) (undo-tree-id3612 . -1) (undo-tree-id3613 . -1) (undo-tree-id3614 . -1) (undo-tree-id3615 . -1) (undo-tree-id3616 . -1) (undo-tree-id3617 . -1) (undo-tree-id3618 . -1) (undo-tree-id3619 . -1) (undo-tree-id3620 . -1) (undo-tree-id3621 . -1) (undo-tree-id3622 . -1) 123) nil (26116 13035 368599 65000) 0 nil] [nil nil ((#("processes()." 0 9 (fontified t) 9 10 (face (rainbow-delimiters-depth-2-face) fontified t) 10 11 (face (rainbow-delimiters-depth-2-face) fontified t) 11 12 (fontified t)) . -111) (undo-tree-id3392 . -12) (undo-tree-id3393 . -8) (undo-tree-id3394 . -8) (undo-tree-id3395 . -9) (undo-tree-id3396 . -9) (undo-tree-id3397 . -9) (undo-tree-id3398 . -10) (undo-tree-id3399 . -11) (undo-tree-id3400 . -12) (undo-tree-id3401 . -12) (undo-tree-id3402 . -12) (undo-tree-id3403 . -12) (undo-tree-id3404 . -12) (undo-tree-id3405 . -12) (undo-tree-id3406 . -12) (undo-tree-id3407 . -12) (undo-tree-id3408 . -12) (undo-tree-id3409 . -12) (undo-tree-id3410 . -12) (undo-tree-id3411 . -12) (undo-tree-id3412 . -12) (undo-tree-id3413 . -12) (undo-tree-id3414 . -12) (undo-tree-id3415 . -12) (undo-tree-id3416 . -12) (undo-tree-id3417 . -12) (undo-tree-id3418 . -12) (undo-tree-id3419 . -12) (undo-tree-id3420 . -12) (undo-tree-id3421 . -12) (undo-tree-id3422 . -12) (undo-tree-id3423 . -12) (undo-tree-id3424 . -12) (undo-tree-id3425 . -12) (undo-tree-id3426 . -12) (undo-tree-id3427 . -12) 123) ((111 . 123)) (26116 13032 606424 757000) 0 nil])
([nil nil ((122 . 123)) nil (26116 13035 368573 745000) 0 nil])
nil
([nil nil ((#(">" 0 1 (syntax-table (1) fontified t)) . -122) (undo-tree-id3591 . -1) (undo-tree-id3592 . -1) 123) nil (26116 13035 368571 312000) 0 nil])
([nil nil ((122 . 123)) nil (26116 13035 368558 554000) 0 nil])
([nil nil ((#("None" 0 4 (face font-lock-type-face fontified t)) . -183) (undo-tree-id3751 . -4) (undo-tree-id3752 . -4) (undo-tree-id3753 . -4) 187 (t 26116 13035 384879 640000)) nil (26116 13100 987593 509000) 0 nil])
([nil nil ((183 . 184)) nil (26116 13100 987590 761000) 0 nil])
([nil nil ((#("O" 0 1 (face font-lock-type-face fontified t)) . -183) (undo-tree-id3746 . -1) (undo-tree-id3747 . -1) (undo-tree-id3748 . -1) (undo-tree-id3749 . -1) (undo-tree-id3750 . -1) 184) nil (26116 13100 987589 744000) 0 nil])
([nil nil ((#("process" 0 7 (fontified t)) . -164) (undo-tree-id3708 . -7) (undo-tree-id3709 . -7) (undo-tree-id3710 . -7) (undo-tree-id3711 . -7) (undo-tree-id3712 . -7) (undo-tree-id3713 . -7) (undo-tree-id3714 . -7) (undo-tree-id3715 . -7) (undo-tree-id3716 . -7) (undo-tree-id3717 . -7) (undo-tree-id3718 . -7) (undo-tree-id3719 . -7) (undo-tree-id3720 . -7) (undo-tree-id3721 . -7) (undo-tree-id3722 . -7) (undo-tree-id3723 . -7) (undo-tree-id3724 . -7) (undo-tree-id3725 . -7) (undo-tree-id3726 . -7) (undo-tree-id3727 . -7) (undo-tree-id3728 . -7) (undo-tree-id3729 . -7) (undo-tree-id3730 . -7) (undo-tree-id3731 . -7) (undo-tree-id3732 . -7) (undo-tree-id3733 . -7) (undo-tree-id3734 . -7) (undo-tree-id3735 . -7) (undo-tree-id3736 . -7) (undo-tree-id3737 . -7) (undo-tree-id3738 . -7) (undo-tree-id3739 . -7) (undo-tree-id3740 . -7) (undo-tree-id3741 . -7) (undo-tree-id3742 . -7) (undo-tree-id3743 . -7) (undo-tree-id3744 . -7) (undo-tree-id3745 . -7) 171) nil (26116 13100 987584 350000) 0 nil])
([nil nil ((164 . 172)) nil (26116 13100 987557 803000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 174 181 nil nil nil t #s(yas--exit 182 nil))) #s(yas--exit 182 nil) 19 nil #s(yas--field 1 174 181 nil nil nil t #s(yas--exit 182 nil)) nil nil)) (171 . 175) (#("Ok($1)$0" 0 8 (fontified nil)) . 171) (171 . 179) (#("O" 0 1 (fontified nil)) . 171) (171 . 172) (#("Ok(â€¦)" 0 5 (fontified nil)) . -171) (171 . 176) (#("O" 0 1 (face font-lock-type-face fontified t)) . -171) (undo-tree-id3702 . -1) (undo-tree-id3703 . -1) (undo-tree-id3704 . -1) (undo-tree-id3705 . -1) (undo-tree-id3706 . -1) (undo-tree-id3707 . -1) 172) nil (26116 13100 987556 244000) 0 nil])
([nil nil ((174 . 181)) nil (26116 13100 987550 509000) 0 nil])
([nil nil ((apply yas--snippet-revive 171 182 #s(yas--snippet nil (#s(yas--field 1 174 181 nil nil nil t #s(yas--exit 182 nil))) #s(yas--exit 182 nil) 19 nil #s(yas--field 1 174 181 nil nil nil t #s(yas--exit 182 nil)) nil nil))) nil (26116 13100 987549 881000) 0 nil])
([nil nil ((182 . 185)) nil (26116 13100 987549 161000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -183) (undo-tree-id3689 . -1) (undo-tree-id3690 . -1) (undo-tree-id3691 . -1) (undo-tree-id3692 . -1) (undo-tree-id3693 . -1) (undo-tree-id3694 . -1) (undo-tree-id3695 . -1) (undo-tree-id3696 . -1) (#("=" 0 1 (fontified t)) . -184) (undo-tree-id3697 . -1) (undo-tree-id3698 . -1) (undo-tree-id3699 . -1) (undo-tree-id3700 . -1) (undo-tree-id3701 . -1) 185) nil (26116 13100 987547 869000) 0 nil])
([nil nil ((183 . 186)) nil (26116 13100 987538 152000) 0 nil])
([nil nil ((#("P" 0 1 (face font-lock-type-face fontified t)) . -185) (undo-tree-id3684 . -1) (undo-tree-id3685 . -1) (undo-tree-id3686 . -1) (undo-tree-id3687 . -1) (undo-tree-id3688 . -1) 186) nil (26116 13100 987537 355000) 0 nil])
([nil nil ((185 . 187)) nil (26116 13100 987533 160000) 0 nil])
([nil nil ((187 . 188)) nil (26116 13100 987532 643000) 0 nil])
([nil nil ((185 . 192) (#("pro" 0 3 (fontified nil)) . 185) (185 . 188) (#("process" 0 7 (fontified nil)) . -185) (185 . 192) (#("pro" 0 3 (fontified t)) . -185) (undo-tree-id3674 . -3) (undo-tree-id3675 . -1) (undo-tree-id3676 . -1) (undo-tree-id3677 . -2) (undo-tree-id3678 . -2) (undo-tree-id3679 . -2) (undo-tree-id3680 . -3) (undo-tree-id3681 . -3) (undo-tree-id3682 . -3) (undo-tree-id3683 . -3) 188) nil (26116 13100 987530 831000) 0 nil])
([nil nil ((192 . 195)) nil (26116 13100 987399 103000) 0 nil])
([nil nil ((196 . 204) (#("            " 0 12 (fontified nil)) . 195) (undo-tree-id3671 . -8) (undo-tree-id3672 . -8) (undo-tree-id3673 . -8) (203 . 207) (194 . 204)) nil (26116 13100 987398 230000) 0 nil])
([nil nil ((195 . 207)) nil (26116 13100 987394 477000) 0 nil])
([nil nil ((207 . 208)) nil (26116 13100 987393 868000) 0 nil])
([nil nil ((207 . 214) (#("p" 0 1 (fontified nil)) . 207) (207 . 208) (#("process" 0 7 (fontified nil)) . -207) (207 . 214) (#("p" 0 1 (fontified t)) . -207) (undo-tree-id3667 . -1) (undo-tree-id3668 . -1) (undo-tree-id3669 . -1) (undo-tree-id3670 . -1) 208) nil (26116 13100 987392 559000) 0 nil])
([nil nil ((214 . 216)) nil (26116 13100 987388 574000) 0 nil])
([nil nil ((apply yas--snippet-revive 215 221 #s(yas--snippet nil nil #s(yas--exit 221 nil) 20 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 221 nil) 20 nil nil nil nil)) (215 . 221) (#("name()$0" 0 8 (fontified nil)) . 215) (215 . 223) (#("n" 0 1 (fontified nil)) . 215) (215 . 216) (#("name()" 0 6 (fontified nil)) . -215) (215 . 221) (#("n" 0 1 (fontified t)) . -215) (undo-tree-id3661 . -1) (undo-tree-id3662 . -1) (undo-tree-id3663 . -1) (undo-tree-id3664 . -1) (undo-tree-id3665 . -1) (undo-tree-id3666 . -1) 216) nil (26116 13100 987387 93000) 0 nil])
([nil nil ((238 . 242)) nil (26116 13100 987381 405000) 0 nil])
([nil nil ((242 . 243)) nil (26116 13100 987380 804000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 246 248 nil nil nil nil #s(yas--exit 249 nil))) #s(yas--exit 249 nil) 21 nil #s(yas--field 1 246 248 nil nil nil nil #s(yas--exit 249 nil)) nil nil)) (242 . 249) (#("Err(${1:()})$0" 0 14 (fontified nil)) . 242) (242 . 256) (#("E" 0 1 (fontified nil)) . 242) (242 . 243) (#("Err(â€¦)" 0 6 (fontified nil)) . -242) (242 . 248) (#("E" 0 1 (face font-lock-type-face fontified t)) . -242) (undo-tree-id3657 . -1) (undo-tree-id3658 . -1) (undo-tree-id3659 . -1) (undo-tree-id3660 . -1) 243) nil (26116 13100 987379 100000) 0 nil])
([nil nil ((apply yas--snippet-revive 242 249 #s(yas--snippet nil (#s(yas--field 1 246 248 nil nil nil nil #s(yas--exit 249 nil))) #s(yas--exit 249 nil) 21 nil #s(yas--field 1 246 248 nil nil nil nil #s(yas--exit 249 nil)) nil nil))) nil (26116 13100 987988 368000) 0 nil])
([nil nil ((#("use anyhow::Result;" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 10 (face font-lock-constant-face fontified t) 10 12 (fontified t) 12 18 (face font-lock-type-face fontified t) 18 19 (fontified t)) . 33) (undo-tree-id3995 . -4) (undo-tree-id3996 . -19)) nil (26116 13224 648402 49000) 0 nil] [nil nil ((#("Err(())" 0 3 (face font-lock-type-face fontified t) 3 4 (face (rainbow-delimiters-depth-2-face) fontified t) 4 5 (face (rainbow-delimiters-depth-3-face) fontified t) 5 6 (face (rainbow-delimiters-depth-3-face) fontified t) 6 7 (face (rainbow-delimiters-depth-2-face) fontified t)) . 242) (undo-tree-id3623 . -7) (undo-tree-id3624 . -7) (undo-tree-id3625 . -4) (undo-tree-id3626 . -4) (undo-tree-id3627 . -4) (undo-tree-id3628 . -4) (undo-tree-id3629 . -4) (undo-tree-id3630 . -7) (undo-tree-id3631 . -4) (undo-tree-id3632 . -4) (undo-tree-id3633 . -4) (undo-tree-id3634 . -4) (undo-tree-id3635 . -4) (undo-tree-id3636 . -4) (undo-tree-id3637 . -5) (undo-tree-id3638 . -5) (undo-tree-id3639 . -5) (undo-tree-id3640 . -6) (undo-tree-id3641 . -6) (undo-tree-id3642 . -6) (undo-tree-id3643 . -6) (undo-tree-id3644 . -6) (undo-tree-id3645 . -6) (undo-tree-id3646 . -6) (undo-tree-id3647 . -6) (undo-tree-id3648 . -6) (undo-tree-id3649 . -7) (undo-tree-id3650 . -7) (undo-tree-id3651 . -7) (undo-tree-id3652 . -7) (undo-tree-id3653 . -7) (undo-tree-id3654 . -7) (undo-tree-id3655 . -7) (undo-tree-id3656 . -7)) ((242 . 249)) (26116 13100 987368 786000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 33) (undo-tree-id3993 . -1) (undo-tree-id3994 . -1)) nil (26116 13224 648399 947000) 0 nil])
nil
([nil nil ((#("usize>" 0 5 (face font-lock-type-face fontified t) 5 6 (face (rainbow-delimiters-depth-1-face) fontified t)) . -61) (undo-tree-id3983 . -6) (undo-tree-id3984 . -5) (undo-tree-id3985 . -5) (undo-tree-id3986 . -5) (undo-tree-id3987 . -5) (undo-tree-id3988 . -5) (undo-tree-id3989 . -5) (undo-tree-id3990 . -5) (undo-tree-id3991 . -5) (undo-tree-id3992 . -6) 67) nil (26116 13224 648396 993000) 0 nil])
([nil nil ((#("Result<" 0 6 (face font-lock-type-face fontified t) 6 7 (face (rainbow-delimiters-depth-1-face) fontified t)) . -54) (undo-tree-id3971 . -7) (undo-tree-id3972 . -6) (undo-tree-id3973 . -7) (undo-tree-id3974 . -7) (undo-tree-id3975 . -7) (undo-tree-id3976 . -7) (undo-tree-id3977 . -7) (undo-tree-id3978 . -7) (undo-tree-id3979 . -7) (undo-tree-id3980 . -7) (undo-tree-id3981 . -7) (undo-tree-id3982 . -7) 61) nil (26116 13224 648389 507000) 0 nil])
([nil nil ((54 . 56)) nil (26116 13224 648380 470000) 0 nil])
([nil nil ((apply yas--snippet-revive 54 62 #s(yas--snippet nil nil #s(yas--exit 61 nil) 22 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 61 nil) 22 nil nil nil nil)) (54 . 62) (#("Option<$0>" 0 10 (fontified nil)) . 54) (54 . 64) (#("Op" 0 2 (fontified nil)) . 54) (54 . 56) (#("Option<â€¦>" 0 9 (fontified nil)) . -54) (54 . 63) (#("Op" 0 2 (face font-lock-type-face fontified t)) . -54) (undo-tree-id3965 . -2) (undo-tree-id3966 . -1) (undo-tree-id3967 . -1) (undo-tree-id3968 . -2) (undo-tree-id3969 . -2) (undo-tree-id3970 . -2) 56) nil (26116 13224 648379 34000) 0 nil])
([nil nil ((61 . 63)) nil (26116 13224 648373 291000) 0 nil])
([nil nil ((61 . 66) (#("us" 0 2 (fontified nil)) . 61) (61 . 63) (#("usize" 0 5 (fontified nil)) . -61) (61 . 66) (#("us" 0 2 (fontified t)) . -61) (undo-tree-id3960 . -2) (undo-tree-id3961 . -1) (undo-tree-id3962 . -2) (undo-tree-id3963 . -2) (undo-tree-id3964 . -2) 63) nil (26116 13224 648372 1000) 0 nil])
([nil nil ((#("?" 0 1 (face rust-question-mark fontified t)) . -102) (undo-tree-id3956 . -1) (undo-tree-id3957 . -1) (undo-tree-id3958 . -1) (undo-tree-id3959 . -1) 103) nil (26116 13224 648367 49000) 0 nil])
([nil nil ((102 . 104)) nil (26116 13224 648363 731000) 0 nil])
([nil nil ((apply yas--snippet-revive 103 111 #s(yas--snippet nil nil #s(yas--exit 111 nil) 23 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 111 nil) 23 nil nil nil nil)) (103 . 111) (#("unwrap()$0" 0 10 (fontified nil)) . 103) (103 . 113) (#("u" 0 1 (fontified nil)) . 103) (103 . 104) (#("unwrap()" 0 8 (fontified nil)) . -103) (103 . 111) (#("u" 0 1 (fontified t)) . -103) (undo-tree-id3950 . -1) (undo-tree-id3951 . -1) (undo-tree-id3952 . -1) (undo-tree-id3953 . -1) (undo-tree-id3954 . -1) (undo-tree-id3955 . -1) 104) nil (26116 13224 648362 419000) 0 nil])
([nil nil ((#("Err(())" 0 3 (face font-lock-type-face fontified t) 3 4 (face (rainbow-delimiters-depth-2-face) fontified t) 4 5 (face (rainbow-delimiters-depth-3-face) fontified t) 5 6 (face (rainbow-delimiters-depth-3-face) fontified t) 6 7 (face (rainbow-delimiters-depth-2-face) fontified t)) . 230) (undo-tree-id3916 . -7) (undo-tree-id3917 . -7) (undo-tree-id3918 . -4) (undo-tree-id3919 . -4) (undo-tree-id3920 . -4) (undo-tree-id3921 . -4) (undo-tree-id3922 . -4) (undo-tree-id3923 . -4) (undo-tree-id3924 . -4) (undo-tree-id3925 . -4) (undo-tree-id3926 . -4) (undo-tree-id3927 . -4) (undo-tree-id3928 . -4) (undo-tree-id3929 . -5) (undo-tree-id3930 . -5) (undo-tree-id3931 . -5) (undo-tree-id3932 . -6) (undo-tree-id3933 . -6) (undo-tree-id3934 . -6) (undo-tree-id3935 . -6) (undo-tree-id3936 . -6) (undo-tree-id3937 . -6) (undo-tree-id3938 . -6) (undo-tree-id3939 . -6) (undo-tree-id3940 . -6) (undo-tree-id3941 . -7) (undo-tree-id3942 . -7) (undo-tree-id3943 . -7) (undo-tree-id3944 . -7) (undo-tree-id3945 . -7) (undo-tree-id3946 . -7) (undo-tree-id3947 . -7) (undo-tree-id3948 . -7) (undo-tree-id3949 . -7)) nil (26116 13224 648355 146000) 0 nil])
([nil nil ((230 . 231)) nil (26116 13224 648332 211000) 0 nil])
([nil nil ((231 . 235)) nil (26116 13224 648331 516000) 0 nil])
([nil nil ((230 . 231)) nil (26116 13224 648330 867000) 0 nil])
([nil nil ((apply yas--snippet-revive 230 234 #s(yas--snippet nil nil #s(yas--exit 234 nil) 24 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 234 nil) 24 nil nil nil nil)) (230 . 234) (#("None$0" 0 6 (fontified nil)) . 230) (230 . 236) (#("N" 0 1 (fontified nil)) . 230) (230 . 231) (#("None" 0 4 (fontified nil)) . -230) (230 . 234) (#("N" 0 1 (face font-lock-type-face fontified t)) . -230) (undo-tree-id3913 . -1) (undo-tree-id3914 . -1) (undo-tree-id3915 . -1) 231) nil (26116 13224 648329 315000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 235) (undo-tree-id3902 . -4) (undo-tree-id3903 . -4) (undo-tree-id3904 . -4) (undo-tree-id3905 . -4) (undo-tree-id3906 . -4) (undo-tree-id3907 . -4) (undo-tree-id3908 . -4) (undo-tree-id3909 . -4) (undo-tree-id3910 . -4) (undo-tree-id3911 . -4) (undo-tree-id3912 . -5)) nil (26116 13224 648324 690000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 235) (undo-tree-id3896 . -4) (undo-tree-id3897 . -4) (undo-tree-id3898 . -4) (undo-tree-id3899 . -4) (undo-tree-id3900 . -4) (undo-tree-id3901 . -5)) nil (26116 13224 648315 204000) 0 nil])
([nil nil ((195 . 200)) nil (26116 13224 648143 804000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -198) (undo-tree-id3866 . -1) (undo-tree-id3867 . -1) (undo-tree-id3868 . -1) (undo-tree-id3869 . -1) (undo-tree-id3870 . -1) (undo-tree-id3871 . -1) (undo-tree-id3872 . -1) (undo-tree-id3873 . -1) (undo-tree-id3874 . -1) (undo-tree-id3875 . -1) (undo-tree-id3876 . -1) (undo-tree-id3877 . -1) (undo-tree-id3878 . -1) (undo-tree-id3879 . -1) (undo-tree-id3880 . -1) (undo-tree-id3881 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -199) (undo-tree-id3882 . -1) (undo-tree-id3883 . -1) (undo-tree-id3884 . -1) (undo-tree-id3885 . -1) (undo-tree-id3886 . -1) (undo-tree-id3887 . -1) (undo-tree-id3888 . -1) (undo-tree-id3889 . -1) (undo-tree-id3890 . -1) (undo-tree-id3891 . -1) (undo-tree-id3892 . -1) (undo-tree-id3893 . -1) (undo-tree-id3894 . -1) (undo-tree-id3895 . -1) 200) nil (26116 13224 648140 681000) 0 nil])
([nil nil ((212 . 216)) nil (26116 13224 648116 466000) 0 nil])
([nil nil ((215 . 217)) nil (26116 13224 648115 915000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 219 227 nil nil nil t #s(yas--exit 228 nil))) #s(yas--exit 228 nil) 25 nil #s(yas--field 1 219 227 nil nil nil t #s(yas--exit 228 nil)) nil nil)) (216 . 222) (#("Ok(${1:()})$0" 0 13 (fontified nil)) . 216) (216 . 229) (#("O" 0 1 (fontified nil)) . 216) (216 . 217) (#("Ok(â€¦)" 0 5 (fontified nil)) . -216) (216 . 221) (#("O" 0 1 (face font-lock-type-face fontified t)) . -216) (undo-tree-id3861 . -1) (undo-tree-id3862 . -1) (undo-tree-id3863 . -1) (undo-tree-id3864 . -1) (undo-tree-id3865 . -1) 217) nil (26116 13224 648114 469000) 0 nil])
([nil nil ((220 . 221) (#("()" 0 1 (face (rainbow-delimiters-depth-5-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-5-face) fontified nil)) . 220) (undo-tree-id3860 . -2) (219 . 220)) nil (26116 13224 648109 187000) 0 nil])
([nil nil ((220 . 226)) nil (26116 13224 648107 418000) 0 nil])
([nil nil ((apply yas--snippet-revive 216 228 #s(yas--snippet nil (#s(yas--field 1 219 227 nil nil nil t #s(yas--exit 228 nil))) #s(yas--exit 228 nil) 25 nil #s(yas--field 1 219 227 nil nil nil t #s(yas--exit 228 nil)) nil nil))) nil (26116 13224 648106 863000) 0 nil])
([nil nil ((49 . 58)) nil (26116 13224 648106 241000) 0 nil])
([nil nil ((55 . 61) (#("Str" 0 3 (fontified nil)) . 55) (55 . 58) (#("String" 0 6 (fontified nil)) . -55) (55 . 61) (#("Str" 0 3 (face font-lock-type-face fontified t)) . -55) (undo-tree-id3852 . -3) (undo-tree-id3853 . -1) (undo-tree-id3854 . -1) (undo-tree-id3855 . -2) (undo-tree-id3856 . -2) (undo-tree-id3857 . -2) (undo-tree-id3858 . -3) (undo-tree-id3859 . -3) 58) nil (26116 13224 648104 907000) 0 nil])
([nil nil ((#("r5apex\"" 0 7 (face font-lock-string-face fontified t)) . -232) (undo-tree-id3827 . -7) (undo-tree-id3828 . -7) (undo-tree-id3829 . -1) (undo-tree-id3830 . -2) (undo-tree-id3831 . -2) (undo-tree-id3832 . -2) (undo-tree-id3833 . -3) (undo-tree-id3834 . -4) (undo-tree-id3835 . -5) (undo-tree-id3836 . -6) (undo-tree-id3837 . -6) (undo-tree-id3838 . -6) (undo-tree-id3839 . -6) (undo-tree-id3840 . -6) (undo-tree-id3841 . -6) (undo-tree-id3842 . -7) (undo-tree-id3843 . -6) (undo-tree-id3844 . -6) (undo-tree-id3845 . -6) (undo-tree-id3846 . -6) (undo-tree-id3847 . -6) (undo-tree-id3848 . -6) (undo-tree-id3849 . -6) (undo-tree-id3850 . -6) (undo-tree-id3851 . -7) 239) nil (26116 13224 648097 84000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -231) (undo-tree-id3789 . -1) (undo-tree-id3790 . -1) (undo-tree-id3791 . -1) (undo-tree-id3792 . -1) (undo-tree-id3793 . -1) (undo-tree-id3794 . -1) (undo-tree-id3795 . -1) (undo-tree-id3796 . -1) (undo-tree-id3797 . -1) (undo-tree-id3798 . -1) (undo-tree-id3799 . -1) (undo-tree-id3800 . -1) (undo-tree-id3801 . -1) (undo-tree-id3802 . -1) (undo-tree-id3803 . -1) (undo-tree-id3804 . -1) (undo-tree-id3805 . -1) (undo-tree-id3806 . -1) (undo-tree-id3807 . -1) (undo-tree-id3808 . -1) (undo-tree-id3809 . -1) (undo-tree-id3810 . -1) (undo-tree-id3811 . -1) (undo-tree-id3812 . -1) (undo-tree-id3813 . -1) (undo-tree-id3814 . -1) (undo-tree-id3815 . -1) (undo-tree-id3816 . -1) (undo-tree-id3817 . -1) (undo-tree-id3818 . -1) (undo-tree-id3819 . -1) (undo-tree-id3820 . -1) (undo-tree-id3821 . -1) (undo-tree-id3822 . -1) (undo-tree-id3823 . -1) (undo-tree-id3824 . -1) (undo-tree-id3825 . -1) (undo-tree-id3826 . -1) 232) nil (26116 13224 648079 902000) 0 nil])
([nil nil ((231 . 232)) nil (26116 13224 648054 970000) 0 nil])
([nil nil ((231 . 235) (#("n" 0 1 (fontified nil)) . 231) (231 . 232) (#("name" 0 4 (fontified nil)) . -231) (231 . 235) (#("n" 0 1 (fontified t)) . -231) (undo-tree-id3784 . -1) (undo-tree-id3785 . -1) (undo-tree-id3786 . -1) (undo-tree-id3787 . -1) (undo-tree-id3788 . -1) 232) nil (26116 13224 648053 662000) 0 nil])
([nil nil ((236 . 239)) nil (26116 13224 648048 913000) 0 nil])
([nil nil ((240 . 252) (#("                " 0 16 (fontified nil)) . 239) (239 . 255) (#("            " 0 12 (fontified nil)) . 239) (undo-tree-id3781 . -12) (undo-tree-id3782 . -12) (undo-tree-id3783 . -12) (238 . 252)) nil (26116 13224 648047 845000) 0 nil])
([nil nil ((239 . 255)) nil (26116 13224 648044 782000) 0 nil])
([nil nil ((255 . 256)) nil (26116 13224 648044 172000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 260 273 nil nil nil t #s(yas--exit 274 nil))) #s(yas--exit 274 nil) 26 nil #s(yas--field 1 260 273 nil nil nil t #s(yas--exit 274 nil)) nil nil)) (255 . 263) (#("Some(${1:()})$0" 0 15 (fontified nil)) . 255) (255 . 270) (#("S" 0 1 (fontified nil)) . 255) (255 . 256) (#("Some(â€¦)" 0 7 (fontified nil)) . -255) (255 . 262) (#("S" 0 1 (face font-lock-type-face fontified t)) . -255) (undo-tree-id3777 . -1) (undo-tree-id3778 . -1) (undo-tree-id3779 . -1) (undo-tree-id3780 . -1) 256) nil (26116 13224 648042 524000) 0 nil])
([nil nil ((#("()" 0 1 (face (rainbow-delimiters-depth-6-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-6-face) fontified nil)) . 261) (undo-tree-id3776 . -2) (260 . 261)) nil (26116 13224 648037 967000) 0 nil])
([nil nil ((260 . 267) (#("p" 0 1 (fontified nil)) . 260) (undo-tree-id3768 . -1) (260 . 261) (#("process" 0 7 (fontified nil)) . -260) (undo-tree-id3769 . -7) (260 . 267) (#("p" 0 1 (fontified t)) . -260) (undo-tree-id3770 . -1) (undo-tree-id3771 . -1) (undo-tree-id3772 . -1) (undo-tree-id3773 . -1) (undo-tree-id3774 . -1) (undo-tree-id3775 . -1) 261) nil (26116 13224 648035 103000) 0 nil])
([nil nil ((267 . 270)) nil (26116 13224 648027 155000) 0 nil])
([nil nil ((apply yas--snippet-revive 268 273 #s(yas--snippet nil nil #s(yas--exit 273 nil) 27 nil nil #s(yas--field 1 260 273 nil nil nil t #s(yas--exit 274 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 273 nil) 27 nil nil #s(yas--field 1 260 273 nil nil nil t #s(yas--exit 274 nil)) nil)) (268 . 273) (#("pid()$0" 0 7 (fontified nil)) . 268) (undo-tree-id3754 . -7) (268 . 275) (#("id" 0 2 (fontified nil)) . 268) (undo-tree-id3755 . -2) (268 . 270) (#("pid()" 0 5 (fontified nil)) . -268) (undo-tree-id3756 . -5) (268 . 273) (#("id" 0 2 (fontified t)) . -268) (undo-tree-id3757 . -2) (undo-tree-id3758 . -2) (undo-tree-id3759 . -1) (undo-tree-id3760 . -1) (undo-tree-id3761 . -1) (undo-tree-id3762 . -1) (undo-tree-id3763 . -2) (undo-tree-id3764 . -2) (undo-tree-id3765 . -2) (undo-tree-id3766 . -2) (undo-tree-id3767 . -2) 270) nil (26116 13224 648021 861000) 0 nil])
([nil nil ((apply yas--snippet-revive 255 274 #s(yas--snippet nil (#s(yas--field 1 260 273 nil nil nil t #s(yas--exit 274 nil))) #s(yas--exit 274 nil) 26 nil #s(yas--field 1 260 273 nil nil nil t #s(yas--exit 274 nil)) nil nil))) nil (26116 13234 149707 928000) 0 nil])
([nil nil ((273 . 274) (t 26116 13224 654891 258000)) nil (26116 13234 149707 302000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -273) (undo-tree-id4066 . -1) (undo-tree-id4067 . -1) (undo-tree-id4068 . -1) (undo-tree-id4069 . -1) (undo-tree-id4070 . -1) 274) nil (26116 13234 149706 333000) 0 nil])
([nil nil ((273 . 275)) nil (26116 13234 149702 641000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -273) (undo-tree-id4056 . -1) (undo-tree-id4057 . -1) (undo-tree-id4058 . -1) (undo-tree-id4059 . -1) (undo-tree-id4060 . -1) (undo-tree-id4061 . -1) (undo-tree-id4062 . -1) (#("s" 0 1 (face font-lock-keyword-face fontified t)) . -274) (undo-tree-id4063 . -1) (undo-tree-id4064 . -1) (undo-tree-id4065 . -1) 275) nil (26116 13234 149701 294000) 0 nil])
([nil nil ((273 . 277)) nil (26116 13234 149693 109000) 0 nil])
([nil nil ((277 . 278)) nil (26116 13234 149692 204000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -273) (undo-tree-id4005 . -1) (undo-tree-id4006 . -1) (undo-tree-id4007 . -1) (undo-tree-id4008 . -1) (undo-tree-id4009 . -1) (undo-tree-id4010 . -1) (undo-tree-id4011 . -1) (undo-tree-id4012 . -1) (undo-tree-id4013 . -1) (undo-tree-id4014 . -1) (undo-tree-id4015 . -1) (undo-tree-id4016 . -1) (undo-tree-id4017 . -1) (undo-tree-id4018 . -1) (undo-tree-id4019 . -1) (#("a" 0 1 (fontified t)) . -274) (undo-tree-id4020 . -1) (undo-tree-id4021 . -1) (undo-tree-id4022 . -1) (undo-tree-id4023 . -1) (undo-tree-id4024 . -1) (undo-tree-id4025 . -1) (undo-tree-id4026 . -1) (undo-tree-id4027 . -1) (undo-tree-id4028 . -1) (undo-tree-id4029 . -1) (undo-tree-id4030 . -1) (undo-tree-id4031 . -1) (undo-tree-id4032 . -1) (#("s" 0 1 (face font-lock-keyword-face fontified t)) . -275) (undo-tree-id4033 . -1) (undo-tree-id4034 . -1) (undo-tree-id4035 . -1) (undo-tree-id4036 . -1) (undo-tree-id4037 . -1) (undo-tree-id4038 . -1) (undo-tree-id4039 . -1) (undo-tree-id4040 . -1) (undo-tree-id4041 . -1) (undo-tree-id4042 . -1) (undo-tree-id4043 . -1) (#(" " 0 1 (fontified t)) . -276) (undo-tree-id4044 . -1) (undo-tree-id4045 . -1) (undo-tree-id4046 . -1) (undo-tree-id4047 . -1) (undo-tree-id4048 . -1) (undo-tree-id4049 . -1) (undo-tree-id4050 . -1) (undo-tree-id4051 . -1) (#("u" 0 1 (fontified t)) . -277) (undo-tree-id4052 . -1) (undo-tree-id4053 . -1) (undo-tree-id4054 . -1) (undo-tree-id4055 . -1) 278) nil (26116 13234 149688 249000) 0 nil])
([nil nil ((#("usize" 0 5 (face font-lock-type-face fontified t)) . -73) (undo-tree-id4003 . -5) (undo-tree-id4004 . -5) 78) nil (26116 13234 149438 164000) 0 nil])
([nil nil ((73 . 76)) nil (26116 13234 149435 216000) 0 nil])
([nil nil ((73 . 76) (#("u32" 0 3 (fontified nil)) . 73) (73 . 76) (#("u32" 0 3 (face font-lock-type-face fontified t)) . -73) (undo-tree-id3997 . -3) (undo-tree-id3998 . -1) (undo-tree-id3999 . -2) (undo-tree-id4000 . -2) (undo-tree-id4001 . -3) (undo-tree-id4002 . -3) 76) nil (26116 13234 149431 216000) 0 nil])
([nil nil ((253 . 260) (t 26116 13234 164891 842000)) nil (26116 13244 346137 538000) 0 nil])
([nil nil ((279 . 280)) nil (26116 13244 346136 130000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t)) . -279) (undo-tree-id4071 . -1) (undo-tree-id4072 . -1) 280) nil (26116 13244 346133 955000) 0 nil])
([nil nil ((279 . 280)) nil (26116 13244 346121 674000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -222) (undo-tree-id4112 . -1) (undo-tree-id4113 . -1) (undo-tree-id4114 . -1) (undo-tree-id4115 . -1) (undo-tree-id4116 . -1) (undo-tree-id4117 . -1) (undo-tree-id4118 . -1) (undo-tree-id4119 . -1) (undo-tree-id4120 . -1) (undo-tree-id4121 . -1) (undo-tree-id4122 . -1) (#("=" 0 1 (fontified t)) . -223) (undo-tree-id4123 . -1) (undo-tree-id4124 . -1) (undo-tree-id4125 . -1) (undo-tree-id4126 . -1) (undo-tree-id4127 . -1) (undo-tree-id4128 . -1) (undo-tree-id4129 . -1) (undo-tree-id4130 . -1) (undo-tree-id4131 . -1) (undo-tree-id4132 . -1) (#("=" 0 1 (fontified t)) . -224) (undo-tree-id4133 . -1) (undo-tree-id4134 . -1) (undo-tree-id4135 . -1) (undo-tree-id4136 . -1) (undo-tree-id4137 . -1) (undo-tree-id4138 . -1) (undo-tree-id4139 . -1) (undo-tree-id4140 . -1) (undo-tree-id4141 . -1) 225 (t 26116 13244 361559 135000)) nil (26116 13272 475794 927000) 0 nil])
([nil nil ((208 . 212)) nil (26116 13272 475771 996000) 0 nil])
([nil nil ((#("process.name()" 0 7 (face font-lock-variable-name-face fontified t) 7 8 (fontified t) 8 12 (fontified t) 12 13 (face (rainbow-delimiters-depth-4-face) fontified t) 13 14 (face (rainbow-delimiters-depth-4-face) fontified t)) . 212) (undo-tree-id4073 . -11) (undo-tree-id4074 . -9) (undo-tree-id4075 . -1) (undo-tree-id4076 . -14) (undo-tree-id4077 . -11) (undo-tree-id4078 . -14) (undo-tree-id4079 . -14) (undo-tree-id4080 . -14) (undo-tree-id4081 . -14) (undo-tree-id4082 . -14) (undo-tree-id4083 . -14) (undo-tree-id4084 . -14) (undo-tree-id4085 . -14) (undo-tree-id4086 . -14) (undo-tree-id4087 . -14) (undo-tree-id4088 . -14) (undo-tree-id4089 . -14) (undo-tree-id4090 . -14) (undo-tree-id4091 . -8) (undo-tree-id4092 . 14) (undo-tree-id4093 . -14) (undo-tree-id4094 . -11) (undo-tree-id4095 . -7) (undo-tree-id4096 . -12) (undo-tree-id4097 . -12) (undo-tree-id4098 . -12) (undo-tree-id4099 . -12) (undo-tree-id4100 . -12) (undo-tree-id4101 . -12) (undo-tree-id4102 . -12) (undo-tree-id4103 . -13) (undo-tree-id4104 . -14) (undo-tree-id4105 . -14) (undo-tree-id4106 . -14) (undo-tree-id4107 . -14) (undo-tree-id4108 . -14) (undo-tree-id4109 . -14) (undo-tree-id4110 . -14) (undo-tree-id4111 . -14) 226) nil (26116 13272 475769 303000) 0 nil])
([nil nil ((221 . 223)) nil (26116 13272 475735 81000) 0 nil])
([nil nil ((nil rear-nonsticky nil 236 . 237) (nil fontified nil 236 . 237) (nil fontified nil 235 . 236) (nil fontified nil 231 . 235) (nil fontified nil 230 . 231) (nil fontified nil 223 . 230) (223 . 237)) nil (26116 13272 475730 320000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -221) (undo-tree-id4142 . -1) (undo-tree-id4143 . -1) 222 (t 26116 13272 491560 862000)) nil (26116 13277 634787 978000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -77) (#(" " 0 1 (fontified t)) . -212) (221 . 222) (222 . 223) (#(" " 0 1 (fontified t)) . -296) (#("


" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 325) (undo-tree-id4144 . -3) (undo-tree-id4145 . -3) (undo-tree-id4146 . -3) 307 (t 26116 13277 648227 845000)) nil (26116 13283 787202 614000) 0 nil])
([nil nil ((191 . 204) (t 26116 13283 801561 556000)) nil (26116 13398 945082 342000) 0 nil])
([nil nil ((204 . 206)) nil (26116 13398 945081 548000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -204) (undo-tree-id4190 . -1) (undo-tree-id4191 . -1) (undo-tree-id4192 . -1) (undo-tree-id4193 . -1) (undo-tree-id4194 . -1) (undo-tree-id4195 . -1) (undo-tree-id4196 . -1) (undo-tree-id4197 . -1) (undo-tree-id4198 . -1) (undo-tree-id4199 . -1) (undo-tree-id4200 . -1) (#("e" 0 1 (fontified t)) . -205) (undo-tree-id4201 . -1) (undo-tree-id4202 . -1) (undo-tree-id4203 . -1) (undo-tree-id4204 . -1) (undo-tree-id4205 . -1) (undo-tree-id4206 . -1) 206) nil (26116 13398 945080 197000) 0 nil])
([nil nil ((204 . 205)) nil (26116 13398 945068 457000) 0 nil])
([nil nil ((205 . 206)) nil (26116 13398 945067 933000) 0 nil])
([nil nil ((apply yas--snippet-revive 204 214 #s(yas--snippet nil nil #s(yas--exit 213 nil) 31 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 213 nil) 31 nil nil nil nil)) (204 . 214) (#("println!($0)" 0 12 (fontified nil)) . 204) (204 . 216) (#("pr" 0 2 (fontified nil)) . 204) (204 . 206) (#("println!(â€¦)" 0 11 (fontified nil)) . -204) (204 . 215) (#("pr" 0 2 (fontified t)) . -204) (undo-tree-id4180 . -2) (undo-tree-id4181 . -1) (undo-tree-id4182 . -1) (undo-tree-id4183 . -1) (undo-tree-id4184 . -1) (undo-tree-id4185 . -2) (undo-tree-id4186 . -2) (undo-tree-id4187 . -2) (undo-tree-id4188 . -2) (undo-tree-id4189 . -2) 206) nil (26116 13398 945066 541000) 0 nil])
([nil nil ((213 . 215)) nil (26116 13398 945058 168000) 0 nil])
([nil nil ((214 . 216)) nil (26116 13398 945057 573000) 0 nil])
([nil nil ((217 . 219)) nil (26116 13398 945056 929000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -217) (undo-tree-id4170 . -1) (undo-tree-id4171 . -1) (undo-tree-id4172 . -1) (undo-tree-id4173 . -1) (undo-tree-id4174 . -1) (undo-tree-id4175 . -1) (#(" " 0 1 (fontified t)) . -218) (undo-tree-id4176 . -1) (undo-tree-id4177 . -1) (undo-tree-id4178 . -1) (undo-tree-id4179 . -1) 219) nil (26116 13398 945055 887000) 0 nil])
([nil nil ((217 . 220)) nil (26116 13398 945048 498000) 0 nil])
([nil nil ((219 . 226) (#("p" 0 1 (fontified nil)) . 219) (219 . 220) (#("process" 0 7 (fontified nil)) . -219) (219 . 226) (#("p" 0 1 (fontified t)) . -219) (undo-tree-id4160 . -1) (undo-tree-id4161 . -1) (undo-tree-id4162 . -1) (undo-tree-id4163 . -1) (undo-tree-id4164 . -1) (undo-tree-id4165 . -1) (undo-tree-id4166 . -1) (undo-tree-id4167 . -1) (undo-tree-id4168 . -1) (undo-tree-id4169 . -1) 220) nil (26116 13398 945046 903000) 0 nil])
([nil nil ((226 . 229)) nil (26116 13398 945038 354000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -228) (undo-tree-id4157 . -1) (undo-tree-id4158 . -1) (undo-tree-id4159 . -1) 229) nil (26116 13398 945037 336000) 0 nil])
([nil nil ((apply yas--snippet-revive 227 233 #s(yas--snippet nil nil #s(yas--exit 233 nil) 32 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 233 nil) 32 nil nil nil nil)) (227 . 233) (#("name()$0" 0 8 (fontified nil)) . 227) (227 . 235) (#("n" 0 1 (fontified nil)) . 227) (227 . 228) (#("name()" 0 6 (fontified nil)) . -227) (227 . 233) (#("n" 0 1 (fontified t)) . -227) (undo-tree-id4147 . -1) (undo-tree-id4148 . -1) (undo-tree-id4149 . -1) (undo-tree-id4150 . -1) (undo-tree-id4151 . -1) (undo-tree-id4152 . -1) (undo-tree-id4153 . -1) (undo-tree-id4154 . -1) (undo-tree-id4155 . -1) (undo-tree-id4156 . -1) 228) nil (26116 13398 945032 380000) 0 nil])
([nil nil ((234 . 235)) nil (26116 13398 945013 537000) 0 nil])
([nil nil ((233 . 235) (t 26116 13398 961568 625000)) nil (26116 13403 159805 892000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -234) (undo-tree-id4212 . -1) (undo-tree-id4213 . -1) 235) nil (26116 13403 159804 279000) 0 nil])
([nil nil ((234 . 235)) nil (26116 13403 159800 749000) 0 nil])
([nil nil ((apply yas--snippet-revive 234 242 #s(yas--snippet nil nil #s(yas--exit 242 nil) 33 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 242 nil) 33 nil nil nil nil)) (234 . 242) (#("unwrap()$0" 0 10 (fontified nil)) . 234) (234 . 244) (#("u" 0 1 (fontified nil)) . 234) (234 . 235) (#("unwrap()" 0 8 (fontified nil)) . -234) (234 . 242) (#("u" 0 1 (fontified t)) . -234) (undo-tree-id4207 . -1) (undo-tree-id4208 . -1) (undo-tree-id4209 . -1) (undo-tree-id4210 . -1) (undo-tree-id4211 . -1) 235) nil (26116 13403 159796 173000) 0 nil])
([nil nil ((#("println!(\"{}\", process.name().unwrap());" 0 8 (face rust-builtin-formatting-macro fontified t) 8 9 (face (rainbow-delimiters-depth-4-face) fontified t) 9 10 (face font-lock-string-face fontified t) 10 12 (face rust-string-interpolation fontified t) 12 13 (face font-lock-string-face fontified t) 13 15 (fontified t) 15 23 (fontified t) 23 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-5-face) fontified t) 28 29 (face (rainbow-delimiters-depth-5-face) fontified t) 29 30 (fontified t) 30 36 (fontified t) 36 37 (face (rainbow-delimiters-depth-5-face) fontified t) 37 38 (face (rainbow-delimiters-depth-5-face) fontified t) 38 39 (face (rainbow-delimiters-depth-4-face) fontified t) 39 40 (fontified t)) . 204) (undo-tree-id4226 . -14) (undo-tree-id4227 . -30) (undo-tree-id4228 . -30) (undo-tree-id4229 . -30) (undo-tree-id4230 . -30) (undo-tree-id4231 . -30) (undo-tree-id4232 . -38) (undo-tree-id4233 . -38) (undo-tree-id4234 . -38) (undo-tree-id4235 . -38) (undo-tree-id4236 . -38) (undo-tree-id4237 . -38) (undo-tree-id4238 . -38) (undo-tree-id4239 . -38) (undo-tree-id4240 . -38) (undo-tree-id4241 . -38) (undo-tree-id4242 . -38) (undo-tree-id4243 . -38) (undo-tree-id4244 . -38) (undo-tree-id4245 . -38) (undo-tree-id4246 . -38) (undo-tree-id4247 . -38) (undo-tree-id4248 . -38) (undo-tree-id4249 . -7) (undo-tree-id4250 . -40) (t 26116 13403 174902 216000)) nil (26116 13439 314780 710000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 204) (undo-tree-id4225 . -1)) nil (26116 13439 314762 333000) 0 nil])
([nil nil ((#("            " 0 12 (fontified t)) . -204)) nil (26116 13439 314759 813000) 0 nil])
([nil nil ((#("let " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -207) (undo-tree-id4214 . -4) (undo-tree-id4215 . -4) (undo-tree-id4216 . -4) (undo-tree-id4217 . -4) (undo-tree-id4218 . -4) (undo-tree-id4219 . -4) (undo-tree-id4220 . -4) (undo-tree-id4221 . -4) (undo-tree-id4222 . -4) (undo-tree-id4223 . -3) (undo-tree-id4224 . -4) 211) nil (26116 13439 314755 165000) 0 nil])
([nil nil ((216 . 217) (t 26116 13439 331571 102000)) nil (26116 13448 419305 265000) 0 nil])
([nil nil ((#("name) == " 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t) 5 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t)) . -210) (undo-tree-id4353 . -8) (undo-tree-id4354 . -5) (undo-tree-id4355 . -8) (undo-tree-id4356 . -9) (undo-tree-id4357 . -6) (undo-tree-id4358 . 2) (undo-tree-id4359 . -7) (undo-tree-id4360 . -7) (undo-tree-id4361 . -7) (undo-tree-id4362 . -7) (undo-tree-id4363 . -7) (undo-tree-id4364 . -7) (undo-tree-id4365 . -7) (undo-tree-id4366 . -7) (undo-tree-id4367 . -7) (undo-tree-id4368 . -7) (undo-tree-id4369 . -7) (undo-tree-id4370 . -7) (undo-tree-id4371 . -7) (undo-tree-id4372 . -7) (undo-tree-id4373 . -7) (undo-tree-id4374 . -7) (undo-tree-id4375 . -7) (undo-tree-id4376 . -7) (undo-tree-id4377 . -7) (undo-tree-id4378 . -7) (undo-tree-id4379 . -7) (undo-tree-id4380 . -7) (undo-tree-id4381 . -7) (undo-tree-id4382 . -7) (undo-tree-id4383 . -7) (undo-tree-id4384 . -7) (undo-tree-id4385 . -7) (undo-tree-id4386 . -7) (undo-tree-id4387 . -7) (undo-tree-id4388 . -7) (undo-tree-id4389 . -7) (undo-tree-id4390 . -7) (undo-tree-id4391 . -7) (undo-tree-id4392 . -7) (undo-tree-id4393 . -7) (undo-tree-id4394 . -7) (undo-tree-id4395 . -7) (undo-tree-id4396 . -7) (undo-tree-id4397 . -7) (undo-tree-id4398 . -7) (undo-tree-id4399 . -8) (undo-tree-id4400 . -8) (undo-tree-id4401 . -8) (undo-tree-id4402 . -8) (undo-tree-id4403 . -8) (undo-tree-id4404 . -8) (undo-tree-id4405 . -8) (undo-tree-id4406 . -8) (undo-tree-id4407 . -8) (undo-tree-id4408 . -8) (undo-tree-id4409 . -8) (undo-tree-id4410 . -8) (undo-tree-id4411 . -8) (undo-tree-id4412 . -8) (undo-tree-id4413 . -9) 219 (t 26116 13448 434904 994000)) nil (26116 13474 331495 892000) 0 nil])
([nil nil ((#("Ok(" 0 2 (face font-lock-type-face fontified t) 2 3 (face (rainbow-delimiters-depth-4-face) fontified t)) . -207) (undo-tree-id4292 . -3) (undo-tree-id4293 . -3) (undo-tree-id4294 . -3) (undo-tree-id4295 . -3) (undo-tree-id4296 . -3) (undo-tree-id4297 . -3) (undo-tree-id4298 . -3) (undo-tree-id4299 . -3) (undo-tree-id4300 . -3) (undo-tree-id4301 . -3) (undo-tree-id4302 . -3) (undo-tree-id4303 . -3) (undo-tree-id4304 . -3) (undo-tree-id4305 . -3) (undo-tree-id4306 . -3) (undo-tree-id4307 . -3) (undo-tree-id4308 . -3) (undo-tree-id4309 . -3) (undo-tree-id4310 . -3) (undo-tree-id4311 . -3) (undo-tree-id4312 . -3) (undo-tree-id4313 . -3) (undo-tree-id4314 . -3) (undo-tree-id4315 . -3) (undo-tree-id4316 . -3) (undo-tree-id4317 . -3) (undo-tree-id4318 . -3) (undo-tree-id4319 . -3) (undo-tree-id4320 . -3) (undo-tree-id4321 . -3) (undo-tree-id4322 . -3) (undo-tree-id4323 . -3) (undo-tree-id4324 . -3) (undo-tree-id4325 . -3) (undo-tree-id4326 . -3) (undo-tree-id4327 . -3) (undo-tree-id4328 . -3) (undo-tree-id4329 . -3) (undo-tree-id4330 . -3) (undo-tree-id4331 . -3) (undo-tree-id4332 . -3) (undo-tree-id4333 . -3) (undo-tree-id4334 . -3) (undo-tree-id4335 . -3) (undo-tree-id4336 . -3) (undo-tree-id4337 . -3) (undo-tree-id4338 . -3) (undo-tree-id4339 . -3) (undo-tree-id4340 . -3) (undo-tree-id4341 . -3) (undo-tree-id4342 . -3) (undo-tree-id4343 . -3) (undo-tree-id4344 . -3) (undo-tree-id4345 . -3) (undo-tree-id4346 . -3) (undo-tree-id4347 . -3) (undo-tree-id4348 . -3) (undo-tree-id4349 . -3) (undo-tree-id4350 . -3) (undo-tree-id4351 . -3) (undo-tree-id4352 . -3) 210) nil (26116 13474 331039 256000) 0 nil])
([nil nil ((221 . 223)) nil (26116 13474 331000 570000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -222) (undo-tree-id4286 . -1) (undo-tree-id4287 . -1) (undo-tree-id4288 . -1) (undo-tree-id4289 . -1) (undo-tree-id4290 . -1) (undo-tree-id4291 . -1) 223) nil (26116 13474 330999 467000) 0 nil])
([nil nil ((222 . 223)) nil (26116 13474 330994 866000) 0 nil])
([nil nil ((apply yas--snippet-revive 222 230 #s(yas--snippet nil nil #s(yas--exit 230 nil) 34 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 230 nil) 34 nil nil nil nil)) (222 . 230) (#("unwrap()$0" 0 10 (fontified nil)) . 222) (222 . 232) (#("u" 0 1 (fontified nil)) . 222) (222 . 223) (#("unwrap()" 0 8 (fontified nil)) . -222) (222 . 230) (#("u" 0 1 (fontified t)) . -222) (undo-tree-id4281 . -1) (undo-tree-id4282 . -1) (undo-tree-id4283 . -1) (undo-tree-id4284 . -1) (undo-tree-id4285 . -1) 223) nil (26116 13474 330993 361000) 0 nil])
([nil nil ((230 . 234)) nil (26116 13474 330988 332000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 240 245 nil nil nil t #s(yas--exit 246 nil))) #s(yas--exit 246 nil) 35 nil #s(yas--field 1 240 245 nil nil nil t #s(yas--exit 246 nil)) nil nil)) (231 . 244) (#("contains(${1:pat})$0" 0 20 (fontified nil)) . 231) (231 . 251) (#("con" 0 3 (fontified nil)) . 231) (231 . 234) (#("contains(â€¦)" 0 11 (fontified nil)) . -231) (231 . 242) (#("con" 0 3 (fontified t)) . -231) (undo-tree-id4265 . -3) (undo-tree-id4266 . -1) (undo-tree-id4267 . -1) (undo-tree-id4268 . -1) (undo-tree-id4269 . -1) (undo-tree-id4270 . -1) (undo-tree-id4271 . -2) (undo-tree-id4272 . -2) (undo-tree-id4273 . -2) (undo-tree-id4274 . -2) (undo-tree-id4275 . -2) (undo-tree-id4276 . -3) (undo-tree-id4277 . -3) (undo-tree-id4278 . -3) (undo-tree-id4279 . -3) (undo-tree-id4280 . -3) 234) nil (26116 13474 330986 532000) 0 nil])
([nil nil ((#("pat" 0 3 (fontified nil)) . 241) (undo-tree-id4264 . -3) (240 . 241)) nil (26116 13474 330973 981000) 0 nil])
([nil nil ((240 . 244) (#("n" 0 1 (fontified nil)) . 240) (undo-tree-id4251 . -1) (240 . 241) (#("name" 0 4 (fontified nil)) . -240) (undo-tree-id4252 . -4) (240 . 244) (#("n" 0 1 (fontified t)) . -240) (undo-tree-id4253 . -1) (undo-tree-id4254 . -1) (undo-tree-id4255 . -1) (undo-tree-id4256 . -1) (undo-tree-id4257 . -1) (undo-tree-id4258 . -1) (undo-tree-id4259 . -1) (undo-tree-id4260 . -1) (undo-tree-id4261 . -1) (undo-tree-id4262 . -1) (undo-tree-id4263 . -1) 241) nil (26116 13474 330968 436000) 0 nil])
([nil nil ((240 . 241) (t 26116 13474 344906 584000)) nil (26116 13479 893558 794000) 0 nil])
([nil nil ((apply yas--snippet-revive 231 246 #s(yas--snippet nil (#s(yas--field 1 240 245 nil nil nil t #s(yas--exit 246 nil))) #s(yas--exit 246 nil) 35 nil #s(yas--field 1 240 245 nil nil nil t #s(yas--exit 246 nil)) nil nil))) nil (26116 13545 477527 226000) 0 nil])
([nil nil ((#("name)" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t)) . -241) (undo-tree-id4518 . -5) (undo-tree-id4519 . -5) (undo-tree-id4520 . -4) (undo-tree-id4521 . -4) (undo-tree-id4522 . -4) (undo-tree-id4523 . -4) (undo-tree-id4524 . -4) (undo-tree-id4525 . -4) (undo-tree-id4526 . -4) (undo-tree-id4527 . -4) (undo-tree-id4528 . -4) (undo-tree-id4529 . -4) (undo-tree-id4530 . -4) (undo-tree-id4531 . -4) (undo-tree-id4532 . -4) (undo-tree-id4533 . -4) (undo-tree-id4534 . -4) (undo-tree-id4535 . -4) (undo-tree-id4536 . -4) (undo-tree-id4537 . -4) (undo-tree-id4538 . -4) (undo-tree-id4539 . -4) (undo-tree-id4540 . -4) (undo-tree-id4541 . -4) (undo-tree-id4542 . -4) (undo-tree-id4543 . -4) (undo-tree-id4544 . -4) (undo-tree-id4545 . -4) (undo-tree-id4546 . -4) (undo-tree-id4547 . -4) (undo-tree-id4548 . -4) (undo-tree-id4549 . -4) (undo-tree-id4550 . -4) (undo-tree-id4551 . -4) (undo-tree-id4552 . -4) (undo-tree-id4553 . -4) (undo-tree-id4554 . -4) (undo-tree-id4555 . -4) (undo-tree-id4556 . -4) (undo-tree-id4557 . -5) (undo-tree-id4558 . -5) (undo-tree-id4559 . -5) (undo-tree-id4560 . -5) (undo-tree-id4561 . -5) (undo-tree-id4562 . -5) (undo-tree-id4563 . -5) (undo-tree-id4564 . -5) (undo-tree-id4565 . -5) (undo-tree-id4566 . -5) 246 (t 26116 13479 908240 260000)) nil (26116 13545 477524 989000) 0 nil])
([nil nil ((#("contains(&" 0 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-4-face) fontified t) 9 10 (fontified t)) . -231) (undo-tree-id4446 . -10) (undo-tree-id4447 . -10) (undo-tree-id4448 . -9) (undo-tree-id4449 . -10) (undo-tree-id4450 . -10) (undo-tree-id4451 . -10) (undo-tree-id4452 . -10) (undo-tree-id4453 . -10) (undo-tree-id4454 . -10) (undo-tree-id4455 . -10) (undo-tree-id4456 . -10) (undo-tree-id4457 . -10) (undo-tree-id4458 . -10) (undo-tree-id4459 . -10) (undo-tree-id4460 . -10) (undo-tree-id4461 . -10) (undo-tree-id4462 . -10) (undo-tree-id4463 . -10) (undo-tree-id4464 . -10) (undo-tree-id4465 . -10) (undo-tree-id4466 . -10) (undo-tree-id4467 . -10) (undo-tree-id4468 . -4) (undo-tree-id4469 . -8) (undo-tree-id4470 . -10) (undo-tree-id4471 . -10) (undo-tree-id4472 . -10) (undo-tree-id4473 . -10) (undo-tree-id4474 . -10) (undo-tree-id4475 . -10) (undo-tree-id4476 . -10) (undo-tree-id4477 . -10) (undo-tree-id4478 . -10) (undo-tree-id4479 . -10) (undo-tree-id4480 . -10) (undo-tree-id4481 . -10) (undo-tree-id4482 . -10) (undo-tree-id4483 . -10) (undo-tree-id4484 . -10) (undo-tree-id4485 . -10) (undo-tree-id4486 . -10) (undo-tree-id4487 . -10) (undo-tree-id4488 . -10) (undo-tree-id4489 . -10) (undo-tree-id4490 . -10) (undo-tree-id4491 . -10) (undo-tree-id4492 . -10) (undo-tree-id4493 . -10) (undo-tree-id4494 . -10) (undo-tree-id4495 . -10) (undo-tree-id4496 . -10) (undo-tree-id4497 . -10) (undo-tree-id4498 . -10) (undo-tree-id4499 . -10) (undo-tree-id4500 . -10) (undo-tree-id4501 . -10) (undo-tree-id4502 . -10) (undo-tree-id4503 . -10) (undo-tree-id4504 . -10) (undo-tree-id4505 . -10) (undo-tree-id4506 . -10) (undo-tree-id4507 . -10) (undo-tree-id4508 . -10) (undo-tree-id4509 . -10) (undo-tree-id4510 . -10) (undo-tree-id4511 . -10) (undo-tree-id4512 . -10) (undo-tree-id4513 . -10) (undo-tree-id4514 . -10) (undo-tree-id4515 . -10) (undo-tree-id4516 . -10) (undo-tree-id4517 . -10) 241) nil (26116 13545 477493 426000) 0 nil])
([nil nil ((231 . 233)) nil (26116 13545 477448 216000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -232) (undo-tree-id4441 . -1) (undo-tree-id4442 . -1) (undo-tree-id4443 . -1) (undo-tree-id4444 . -1) (undo-tree-id4445 . -1) 233) nil (26116 13545 477447 374000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 241 246 nil nil nil t #s(yas--exit 247 nil))) #s(yas--exit 247 nil) 36 nil #s(yas--field 1 241 246 nil nil nil t #s(yas--exit 247 nil)) nil nil)) (231 . 245) (#("ends_with(${1:pat})$0" 0 21 (fontified nil)) . 231) (231 . 252) (#("e" 0 1 (fontified nil)) . 231) (231 . 232) (#("ends_with(â€¦)" 0 12 (fontified nil)) . -231) (231 . 243) (#("e" 0 1 (fontified t)) . -231) (undo-tree-id4429 . -1) (undo-tree-id4430 . -1) (undo-tree-id4431 . -1) (undo-tree-id4432 . -1) (undo-tree-id4433 . -1) (undo-tree-id4434 . -1) (undo-tree-id4435 . -1) (undo-tree-id4436 . -1) (undo-tree-id4437 . -1) (undo-tree-id4438 . -1) (undo-tree-id4439 . -1) (undo-tree-id4440 . -1) 232) nil (26116 13545 477442 908000) 0 nil])
([nil nil ((#("pat" 0 3 (fontified nil)) . 242) (undo-tree-id4428 . -3) (241 . 242)) nil (26116 13545 477433 257000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -241) (undo-tree-id4422 . -1) (undo-tree-id4423 . -1) (undo-tree-id4424 . -1) (undo-tree-id4425 . -1) (undo-tree-id4426 . -1) (undo-tree-id4427 . -1) 242) nil (26116 13545 477431 535000) 0 nil])
([nil nil ((241 . 242)) nil (26116 13545 477426 676000) 0 nil])
([nil nil ((241 . 245) (#("n" 0 1 (fontified nil)) . 241) (undo-tree-id4414 . -1) (241 . 242) (#("name" 0 4 (fontified nil)) . -241) (undo-tree-id4415 . -4) (241 . 245) (#("n" 0 1 (fontified t)) . -241) (undo-tree-id4416 . -1) (undo-tree-id4417 . -1) (undo-tree-id4418 . -1) (undo-tree-id4419 . -1) (undo-tree-id4420 . -1) (undo-tree-id4421 . -1) 242) nil (26116 13545 477424 242000) 0 nil])
([nil nil ((241 . 242)) nil (26116 13545 477407 777000) 0 nil])
([nil nil ((apply yas--snippet-revive 231 247 #s(yas--snippet nil (#s(yas--field 1 241 246 nil nil nil t #s(yas--exit 247 nil))) #s(yas--exit 247 nil) 36 nil #s(yas--field 1 241 246 nil nil nil t #s(yas--exit 247 nil)) nil nil))) nil (26116 13738 651265 208000) 0 nil])
([nil nil ((335 . 336) (t 26116 13545 491577 619000)) nil (26116 13738 651264 588000) 0 nil])
([nil nil ((336 . 348)) nil (26116 13738 651263 835000) 0 nil])
([nil nil ((#("a" 0 1 (face font-lock-function-name-face fontified t)) . -347) (undo-tree-id4759 . -1) (undo-tree-id4760 . -1) 348) nil (26116 13738 651263 116000) 0 nil])
([nil nil ((347 . 348)) nil (26116 13738 651261 197000) 0 nil])
([nil nil ((#("v" 0 1 (face font-lock-function-name-face fontified nil)) . -347) 348) nil (26116 13738 651260 275000) 0 nil])
([nil nil ((347 . 348)) nil (26116 13738 651259 489000) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-function-name-face fontified t)) . -346) (undo-tree-id4750 . -1) (undo-tree-id4751 . -1) (undo-tree-id4752 . -1) (undo-tree-id4753 . -1) (undo-tree-id4754 . -1) (undo-tree-id4755 . -1) (undo-tree-id4756 . -1) (#("a" 0 1 (face font-lock-function-name-face fontified t)) . -347) (undo-tree-id4757 . -1) (undo-tree-id4758 . -1) 348) nil (26116 13738 651258 461000) 0 nil])
([nil nil ((346 . 351)) nil (26116 13738 651251 896000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-function-name-face fontified t)) . -350) (undo-tree-id4748 . -1) (undo-tree-id4749 . -1) 351) nil (26116 13738 651250 742000) 0 nil])
([nil nil ((350 . 351)) nil (26116 13738 651248 524000) 0 nil])
([nil nil ((351 . 354)) nil (26116 13738 651247 708000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-function-name-face fontified t)) . -353) (undo-tree-id4746 . -1) (undo-tree-id4747 . -1) 354) nil (26116 13738 651246 874000) 0 nil])
([nil nil ((353 . 361)) nil (26116 13738 651245 8000) 0 nil])
([nil nil ((360 . 361)) nil (26116 13738 651244 418000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -360) (undo-tree-id4723 . -1) (undo-tree-id4724 . -1) (undo-tree-id4725 . -1) (undo-tree-id4726 . -1) (undo-tree-id4727 . -1) (undo-tree-id4728 . -1) (undo-tree-id4729 . -1) (undo-tree-id4730 . -1) (undo-tree-id4731 . -1) (undo-tree-id4732 . -1) (undo-tree-id4733 . -1) (undo-tree-id4734 . -1) (undo-tree-id4735 . -1) (undo-tree-id4736 . -1) (undo-tree-id4737 . -1) (undo-tree-id4738 . -1) (undo-tree-id4739 . -1) (undo-tree-id4740 . -1) (undo-tree-id4741 . -1) (undo-tree-id4742 . -1) (undo-tree-id4743 . -1) (undo-tree-id4744 . -1) (undo-tree-id4745 . -1) 361) nil (26116 13738 651242 935000) 0 nil])
([nil nil ((360 . 361)) nil (26116 13738 651227 439000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -360) (undo-tree-id4713 . -1) (undo-tree-id4714 . -1) (undo-tree-id4715 . -1) (undo-tree-id4716 . -1) (undo-tree-id4717 . -1) (undo-tree-id4718 . -1) (undo-tree-id4719 . -1) (undo-tree-id4720 . -1) (undo-tree-id4721 . -1) (undo-tree-id4722 . -1) 361) nil (26116 13738 651226 486000) 0 nil])
([nil nil ((360 . 363)) nil (26116 13738 651219 595000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -362) (undo-tree-id4710 . -1) (undo-tree-id4711 . -1) (undo-tree-id4712 . -1) 363) nil (26116 13738 651218 797000) 0 nil])
([nil nil ((362 . 366)) nil (26116 13738 651216 248000) 0 nil])
([nil nil ((366 . 370)) nil (26116 13738 651215 644000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -369) (undo-tree-id4707 . -1) (undo-tree-id4708 . -1) (undo-tree-id4709 . -1) 370) nil (26116 13738 651214 789000) 0 nil])
([nil nil ((369 . 370)) nil (26116 13738 651211 779000) 0 nil])
([nil nil ((370 . 374)) nil (26116 13738 651211 162000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -369) (undo-tree-id4628 . -1) (undo-tree-id4629 . -1) (undo-tree-id4630 . -1) (undo-tree-id4631 . -1) (undo-tree-id4632 . -1) (undo-tree-id4633 . -1) (undo-tree-id4634 . -1) (undo-tree-id4635 . -1) (undo-tree-id4636 . -1) (undo-tree-id4637 . -1) (undo-tree-id4638 . -1) (undo-tree-id4639 . -1) (undo-tree-id4640 . -1) (undo-tree-id4641 . -1) (undo-tree-id4642 . -1) (undo-tree-id4643 . -1) (undo-tree-id4644 . -1) (undo-tree-id4645 . -1) (undo-tree-id4646 . -1) (undo-tree-id4647 . -1) (undo-tree-id4648 . -1) (undo-tree-id4649 . -1) (undo-tree-id4650 . -1) (undo-tree-id4651 . -1) (undo-tree-id4652 . -1) (undo-tree-id4653 . -1) (undo-tree-id4654 . -1) (undo-tree-id4655 . -1) (#("l" 0 1 (fontified t)) . -370) (undo-tree-id4656 . -1) (undo-tree-id4657 . -1) (undo-tree-id4658 . -1) (undo-tree-id4659 . -1) (undo-tree-id4660 . -1) (undo-tree-id4661 . -1) (undo-tree-id4662 . -1) (undo-tree-id4663 . -1) (undo-tree-id4664 . -1) (undo-tree-id4665 . -1) (undo-tree-id4666 . -1) (undo-tree-id4667 . -1) (undo-tree-id4668 . -1) (undo-tree-id4669 . -1) (undo-tree-id4670 . -1) (undo-tree-id4671 . -1) (undo-tree-id4672 . -1) (undo-tree-id4673 . -1) (undo-tree-id4674 . -1) (undo-tree-id4675 . -1) (undo-tree-id4676 . -1) (#("o" 0 1 (fontified t)) . -371) (undo-tree-id4677 . -1) (undo-tree-id4678 . -1) (undo-tree-id4679 . -1) (undo-tree-id4680 . -1) (undo-tree-id4681 . -1) (undo-tree-id4682 . -1) (undo-tree-id4683 . -1) (undo-tree-id4684 . -1) (undo-tree-id4685 . -1) (undo-tree-id4686 . -1) (undo-tree-id4687 . -1) (undo-tree-id4688 . -1) (undo-tree-id4689 . -1) (undo-tree-id4690 . -1) (undo-tree-id4691 . -1) (#("n" 0 1 (fontified t)) . -372) (undo-tree-id4692 . -1) (undo-tree-id4693 . -1) (undo-tree-id4694 . -1) (undo-tree-id4695 . -1) (undo-tree-id4696 . -1) (undo-tree-id4697 . -1) (undo-tree-id4698 . -1) (undo-tree-id4699 . -1) (undo-tree-id4700 . -1) (undo-tree-id4701 . -1) (#("g" 0 1 (fontified t)) . -373) (undo-tree-id4702 . -1) (undo-tree-id4703 . -1) (undo-tree-id4704 . -1) (undo-tree-id4705 . -1) (undo-tree-id4706 . -1) 374) nil (26116 13738 651207 811000) 0 nil])
([nil nil ((369 . 370)) nil (26116 13738 651157 647000) 0 nil])
([nil nil ((369 . 372) (#("u" 0 1 (fontified nil)) . 369) (369 . 370) (#("u64" 0 3 (fontified nil)) . -369) (369 . 372) (#("u" 0 1 (fontified t)) . -369) (undo-tree-id4622 . -1) (undo-tree-id4623 . -1) (undo-tree-id4624 . -1) (undo-tree-id4625 . -1) (undo-tree-id4626 . -1) (undo-tree-id4627 . -1) 370) nil (26116 13738 651156 386000) 0 nil])
([nil nil ((373 . 376)) nil (26116 13738 651151 72000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . 376) (376 . 380) (375 . 377)) nil (26116 13738 651150 340000) 0 nil])
([nil nil ((376 . 380)) nil (26116 13738 651149 411000) 0 nil])
([nil nil ((373 . 376)) nil (26116 13738 651148 837000) 0 nil])
([nil nil ((#("<" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -375) (undo-tree-id4615 . -1) (undo-tree-id4616 . -1) (undo-tree-id4617 . -1) (undo-tree-id4618 . -1) (undo-tree-id4619 . -1) (undo-tree-id4620 . -1) (undo-tree-id4621 . -1) 376) nil (26116 13738 651147 829000) 0 nil])
([nil nil ((375 . 378)) nil (26116 13738 651078 281000) 0 nil])
([nil nil ((377 . 381) (#("b" 0 1 (fontified nil)) . 377) (377 . 378) (#("bool" 0 4 (fontified nil)) . -377) (377 . 381) (#("b" 0 1 (fontified t)) . -377) (undo-tree-id4610 . -1) (undo-tree-id4611 . -1) (undo-tree-id4612 . -1) (undo-tree-id4613 . -1) (undo-tree-id4614 . -1) 378) nil (26116 13738 651077 129000) 0 nil])
([nil nil ((388 . 389)) nil (26116 13738 651072 333000) 0 nil])
([nil nil ((#("P" 0 1 (face font-lock-type-face fontified t)) . -388) (undo-tree-id4606 . -1) (undo-tree-id4607 . -1) (undo-tree-id4608 . -1) (undo-tree-id4609 . -1) 389) nil (26116 13738 651071 422000) 0 nil])
([nil nil ((388 . 390)) nil (26116 13738 651068 94000) 0 nil])
([nil nil ((388 . 395) (#("po" 0 2 (fontified nil)) . 388) (388 . 390) (#("pointer" 0 7 (fontified nil)) . -388) (388 . 395) (#("po" 0 2 (fontified t)) . -388) (undo-tree-id4602 . -2) (undo-tree-id4603 . -1) (undo-tree-id4604 . -2) (undo-tree-id4605 . -2) 390) nil (26116 13738 651066 955000) 0 nil])
([nil nil ((395 . 400)) nil (26116 13738 651063 52000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -399) (undo-tree-id4597 . -1) (undo-tree-id4598 . -1) (undo-tree-id4599 . -1) (undo-tree-id4600 . -1) (undo-tree-id4601 . -1) 400) nil (26116 13738 651062 169000) 0 nil])
([nil nil ((399 . 405)) nil (26116 13738 651058 224000) 0 nil])
([nil nil ((405 . 413)) nil (26116 13738 651057 648000) 0 nil])
([nil nil ((412 . 419) (#("p" 0 1 (fontified nil)) . 412) (412 . 413) (#("pointer" 0 7 (fontified nil)) . -412) (412 . 419) (#("p" 0 1 (fontified t)) . -412) (undo-tree-id4593 . -1) (undo-tree-id4594 . -1) (undo-tree-id4595 . -1) (undo-tree-id4596 . -1) 413) nil (26116 13738 651056 379000) 0 nil])
([nil nil ((419 . 424)) nil (26116 13738 651052 196000) 0 nil])
([nil nil ((424 . 425)) nil (26116 13738 651051 485000) 0 nil])
([nil nil ((#(" 0x7" 0 4 (fontified t)) . -421) (undo-tree-id4567 . -4) (undo-tree-id4568 . -4) (undo-tree-id4569 . -1) (undo-tree-id4570 . -1) (undo-tree-id4571 . -1) (undo-tree-id4572 . -2) (undo-tree-id4573 . -3) (undo-tree-id4574 . -3) (undo-tree-id4575 . -3) (undo-tree-id4576 . -4) (undo-tree-id4577 . -4) (undo-tree-id4578 . -4) (undo-tree-id4579 . -4) (undo-tree-id4580 . -4) (undo-tree-id4581 . -4) (undo-tree-id4582 . -4) (undo-tree-id4583 . -1) (undo-tree-id4584 . -2) (undo-tree-id4585 . -3) (undo-tree-id4586 . -4) (undo-tree-id4587 . -4) (undo-tree-id4588 . -4) (undo-tree-id4589 . -4) (undo-tree-id4590 . -4) (undo-tree-id4591 . -4) (undo-tree-id4592 . -4) 425) nil (26116 13738 651049 359000) 0 nil])
([nil nil ((nil rear-nonsticky nil 434 . 435) (nil fontified nil 421 . 435) (421 . 435)) nil (26116 13738 651025 641000) 0 nil])
([nil nil ((421 . 422)) nil (26116 13738 651023 796000) 0 nil])
([nil nil ((438 . 439) 422) nil (26116 13738 651019 430000) 0 nil])
([nil nil ((1 . 2) (t 26116 13738 668256 143000)) nil (26116 13763 295551 29000) 0 nil])
([nil nil ((1 . 3)) nil (26116 13763 295550 238000) 0 nil])
([nil nil ((2 . 3)) nil (26116 13763 295549 640000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -1) (undo-tree-id4800 . -1) (undo-tree-id4801 . -1) (undo-tree-id4802 . -1) (undo-tree-id4803 . -1) (undo-tree-id4804 . -1) (undo-tree-id4805 . -1) (undo-tree-id4806 . -1) (undo-tree-id4807 . -1) (undo-tree-id4808 . -1) (undo-tree-id4809 . -1) (#("a" 0 1 (fontified t)) . -2) (undo-tree-id4810 . -1) (undo-tree-id4811 . -1) (undo-tree-id4812 . -1) (undo-tree-id4813 . -1) (undo-tree-id4814 . -1) (undo-tree-id4815 . -1) (undo-tree-id4816 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -3) (undo-tree-id4817 . -1) (undo-tree-id4818 . -1) (undo-tree-id4819 . 1) (undo-tree-id4820 . -1) 4) nil (26116 13763 295547 841000) 0 nil])
([nil nil ((1 . 2)) nil (26116 13763 295533 51000) 0 nil])
([nil nil ((#("@" 0 1 (fontified t)) . -1) (undo-tree-id4798 . -1) (undo-tree-id4799 . -1) 2) nil (26116 13763 295532 309000) 0 nil])
([nil nil ((1 . 3)) nil (26116 13763 295530 99000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -2) (undo-tree-id4793 . -1) (undo-tree-id4794 . -1) (undo-tree-id4795 . -1) (undo-tree-id4796 . -1) (undo-tree-id4797 . -1) 3) nil (26116 13763 295528 886000) 0 nil])
([nil nil ((2 . 4)) nil (26116 13763 295524 695000) 0 nil])
([nil nil ((3 . 4)) nil (26116 13763 295524 58000) 0 nil])
([nil nil ((#("lint" 0 4 (face font-lock-preprocessor-face fontified t)) . 9) (undo-tree-id4787 . -4) (apply yas--snippet-revive 3 14 #s(yas--snippet nil (#s(yas--field 0 9 13 nil nil nil nil nil)) nil 37 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 0 9 13 nil nil nil nil nil)) nil 37 nil nil nil nil)) (3 . 14) (#("allow(${0:lint})" 0 16 (fontified nil)) . 3) (3 . 19) (#("a" 0 1 (fontified nil)) . 3) (3 . 4) (#("allow(â€¦)" 0 8 (fontified nil)) . -3) (3 . 11) (#("a" 0 1 (face font-lock-preprocessor-face fontified t)) . -3) (undo-tree-id4788 . -1) (undo-tree-id4789 . -1) (undo-tree-id4790 . -1) (undo-tree-id4791 . -1) (undo-tree-id4792 . -1) 4) nil (26116 13763 295522 451000) 0 nil])
([nil nil ((9 . 11)) nil (26116 13763 295516 525000) 0 nil])
([nil nil ((#("y" 0 1 (face font-lock-preprocessor-face fontified t)) . -9) (undo-tree-id4773 . -1) (undo-tree-id4774 . -1) (undo-tree-id4775 . -1) (undo-tree-id4776 . -1) (undo-tree-id4777 . -1) (undo-tree-id4778 . -1) (undo-tree-id4779 . -1) (undo-tree-id4780 . -1) (undo-tree-id4781 . -1) (#("b" 0 1 (face font-lock-preprocessor-face fontified t)) . -10) (undo-tree-id4782 . -1) (undo-tree-id4783 . -1) (undo-tree-id4784 . -1) (undo-tree-id4785 . -1) (undo-tree-id4786 . -1) 11) nil (26116 13763 295515 192000) 0 nil])
([nil nil ((9 . 10)) nil (26116 13763 295505 380000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-preprocessor-face fontified t)) . -9) (undo-tree-id4771 . -1) (undo-tree-id4772 . -1) 10) nil (26116 13763 295504 96000) 0 nil])
([nil nil ((9 . 12)) nil (26116 13763 295500 911000) 0 nil])
([nil nil ((9 . 15) (#("unu" 0 3 (fontified nil)) . 9) (9 . 12) (#("unused" 0 6 (fontified nil)) . -9) (9 . 15) (#("unu" 0 3 (face font-lock-preprocessor-face fontified t)) . -9) (undo-tree-id4761 . -3) (undo-tree-id4762 . -1) (undo-tree-id4763 . -2) (undo-tree-id4764 . -2) (undo-tree-id4765 . -2) (undo-tree-id4766 . -2) (undo-tree-id4767 . -3) (undo-tree-id4768 . -3) (undo-tree-id4769 . -3) (undo-tree-id4770 . -3) 12) nil (26116 13763 295496 490000) 0 nil])
([nil nil ((17 . 18) (t 26116 13763 341590 991000)) nil (26116 13771 25047 732000) 0 nil])
([nil nil ((#("#[allow(unused)]" 0 1 (face font-lock-preprocessor-face fontified t) 1 2 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t) 2 7 (face font-lock-preprocessor-face fontified t) 7 8 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 8 14 (face font-lock-preprocessor-face fontified t) 14 15 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 15 16 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t)) . 1) (undo-tree-id4833 . -8) (undo-tree-id4834 . -16) (t 26116 13771 71591 466000)) nil (26116 13775 93687 755000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1) (undo-tree-id4822 . -1) (undo-tree-id4823 . -1) (undo-tree-id4824 . -1) (undo-tree-id4825 . -1) (undo-tree-id4826 . -1) (undo-tree-id4827 . -1) (undo-tree-id4828 . -1) (undo-tree-id4829 . -1) (undo-tree-id4830 . -1) (undo-tree-id4831 . -1) (undo-tree-id4832 . -1)) nil (26116 13775 93684 741000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1) (undo-tree-id4821 . -1)) nil (26116 13775 93673 250000) 0 nil])
([nil nil ((439 . 440) (t 26116 13775 108258 380000)) nil (26116 14152 20223 780000) 0 nil])
([nil nil ((440 . 453)) nil (26116 14152 20222 906000) 0 nil])
([nil nil ((#("m" 0 1 (face font-lock-function-name-face fontified t)) . -452) (undo-tree-id5079 . -1) (undo-tree-id5080 . -1) 453) nil (26116 14152 20222 78000) 0 nil])
([nil nil ((452 . 453)) nil (26116 14152 20219 978000) 0 nil])
([nil nil ((#("V" 0 1 (face font-lock-function-name-face fontified t)) . -451) (undo-tree-id5057 . -1) (undo-tree-id5058 . -1) (undo-tree-id5059 . -1) (undo-tree-id5060 . -1) (undo-tree-id5061 . -1) (undo-tree-id5062 . -1) (undo-tree-id5063 . -1) (undo-tree-id5064 . -1) (undo-tree-id5065 . -1) (undo-tree-id5066 . -1) (undo-tree-id5067 . -1) (undo-tree-id5068 . -1) (undo-tree-id5069 . -1) (#("M" 0 1 (face font-lock-function-name-face fontified t)) . -452) (undo-tree-id5070 . -1) (undo-tree-id5071 . -1) (undo-tree-id5072 . -1) (undo-tree-id5073 . -1) (undo-tree-id5074 . -1) (undo-tree-id5075 . -1) (undo-tree-id5076 . -1) (undo-tree-id5077 . -1) (undo-tree-id5078 . -1) 453) nil (26116 14152 20218 301000) 0 nil])
([nil nil ((451 . 452)) nil (26116 14152 20154 381000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-unmatched-face) fontified t)) . -451) (undo-tree-id5055 . -1) (undo-tree-id5056 . -1) 452) nil (26116 14152 20153 453000) 0 nil])
([nil nil ((451 . 454)) nil (26116 14152 20151 416000) 0 nil])
([nil nil ((#("_" 0 1 (face font-lock-function-name-face fontified t)) . -451) (undo-tree-id5016 . -1) (undo-tree-id5017 . -1) (undo-tree-id5018 . -1) (undo-tree-id5019 . -1) (undo-tree-id5020 . -1) (undo-tree-id5021 . -1) (undo-tree-id5022 . -1) (undo-tree-id5023 . -1) (undo-tree-id5024 . -1) (undo-tree-id5025 . -1) (undo-tree-id5026 . -1) (undo-tree-id5027 . -1) (undo-tree-id5028 . -1) (undo-tree-id5029 . -1) (undo-tree-id5030 . -1) (undo-tree-id5031 . -1) (undo-tree-id5032 . -1) (undo-tree-id5033 . -1) (undo-tree-id5034 . -1) (#("v" 0 1 (face font-lock-function-name-face fontified t)) . -452) (undo-tree-id5035 . -1) (undo-tree-id5036 . -1) (undo-tree-id5037 . -1) (undo-tree-id5038 . -1) (undo-tree-id5039 . -1) (undo-tree-id5040 . -1) (undo-tree-id5041 . -1) (undo-tree-id5042 . -1) (undo-tree-id5043 . -1) (undo-tree-id5044 . -1) (undo-tree-id5045 . -1) (#("m" 0 1 (face font-lock-function-name-face fontified t)) . -453) (undo-tree-id5046 . -1) (undo-tree-id5047 . -1) (undo-tree-id5048 . -1) (undo-tree-id5049 . -1) (undo-tree-id5050 . -1) (undo-tree-id5051 . -1) (undo-tree-id5052 . -1) (undo-tree-id5053 . -1) (undo-tree-id5054 . -1) 454) nil (26116 14152 20149 172000) 0 nil])
([nil nil ((451 . 454)) nil (26116 14152 20122 516000) 0 nil])
([nil nil ((454 . 456)) nil (26116 14152 20121 873000) 0 nil])
([nil nil ((455 . 465)) nil (26116 14152 20121 188000) 0 nil])
([nil nil ((464 . 467) (#("u" 0 1 (fontified nil)) . 464) (464 . 465) (#("u64" 0 3 (fontified nil)) . -464) (464 . 467) (#("u" 0 1 (fontified t)) . -464) (undo-tree-id5005 . -1) (undo-tree-id5006 . -1) (undo-tree-id5007 . -1) (undo-tree-id5008 . -1) (undo-tree-id5009 . -1) (undo-tree-id5010 . -1) (undo-tree-id5011 . -1) (undo-tree-id5012 . -1) (undo-tree-id5013 . -1) (undo-tree-id5014 . -1) (undo-tree-id5015 . -1) 465) nil (26116 14152 20119 682000) 0 nil])
([nil nil ((467 . 469)) nil (26116 14152 20110 787000) 0 nil])
([nil nil ((455 . 465)) nil (26116 14152 20110 130000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -477) (undo-tree-id4888 . -1) (undo-tree-id4889 . -1) (undo-tree-id4890 . -1) (undo-tree-id4891 . -1) (undo-tree-id4892 . -1) (undo-tree-id4893 . -1) (undo-tree-id4894 . -1) (undo-tree-id4895 . -1) (undo-tree-id4896 . -1) (undo-tree-id4897 . -1) (undo-tree-id4898 . -1) (undo-tree-id4899 . -1) (undo-tree-id4900 . -1) (undo-tree-id4901 . -1) (undo-tree-id4902 . -1) (undo-tree-id4903 . -1) (undo-tree-id4904 . -1) (undo-tree-id4905 . -1) (undo-tree-id4906 . -1) (undo-tree-id4907 . -1) (undo-tree-id4908 . -1) (undo-tree-id4909 . -1) (undo-tree-id4910 . -1) (undo-tree-id4911 . -1) (undo-tree-id4912 . -1) (undo-tree-id4913 . -1) (undo-tree-id4914 . -1) (undo-tree-id4915 . -1) (undo-tree-id4916 . -1) (undo-tree-id4917 . -1) (undo-tree-id4918 . -1) (undo-tree-id4919 . -1) (undo-tree-id4920 . -1) (undo-tree-id4921 . -1) (undo-tree-id4922 . -1) (undo-tree-id4923 . -1) (undo-tree-id4924 . -1) (undo-tree-id4925 . -1) (undo-tree-id4926 . -1) (undo-tree-id4927 . -1) (undo-tree-id4928 . -1) (undo-tree-id4929 . -1) (undo-tree-id4930 . -1) (undo-tree-id4931 . -1) (undo-tree-id4932 . -1) (undo-tree-id4933 . -1) (undo-tree-id4934 . -1) (undo-tree-id4935 . -1) (undo-tree-id4936 . -1) (undo-tree-id4937 . -1) (undo-tree-id4938 . -1) (undo-tree-id4939 . -1) (undo-tree-id4940 . -1) (undo-tree-id4941 . -1) (undo-tree-id4942 . -1) (undo-tree-id4943 . -1) (undo-tree-id4944 . -1) (undo-tree-id4945 . -1) (undo-tree-id4946 . -1) (undo-tree-id4947 . -1) (undo-tree-id4948 . -1) (undo-tree-id4949 . -1) (#(" " 0 1 (fontified t)) . -478) (undo-tree-id4950 . -1) (undo-tree-id4951 . -1) (undo-tree-id4952 . -1) (undo-tree-id4953 . -1) (undo-tree-id4954 . -1) (undo-tree-id4955 . -1) (undo-tree-id4956 . -1) (undo-tree-id4957 . -1) (undo-tree-id4958 . -1) (undo-tree-id4959 . -1) (undo-tree-id4960 . -1) (undo-tree-id4961 . -1) (undo-tree-id4962 . -1) (undo-tree-id4963 . -1) (undo-tree-id4964 . -1) (undo-tree-id4965 . -1) (undo-tree-id4966 . -1) (undo-tree-id4967 . -1) (undo-tree-id4968 . -1) (undo-tree-id4969 . -1) (undo-tree-id4970 . -1) (undo-tree-id4971 . -1) (undo-tree-id4972 . -1) (undo-tree-id4973 . -1) (undo-tree-id4974 . -1) (undo-tree-id4975 . -1) (undo-tree-id4976 . -1) (undo-tree-id4977 . -1) (undo-tree-id4978 . -1) (undo-tree-id4979 . -1) (undo-tree-id4980 . -1) (undo-tree-id4981 . -1) (undo-tree-id4982 . -1) (undo-tree-id4983 . -1) (undo-tree-id4984 . -1) (undo-tree-id4985 . -1) (undo-tree-id4986 . -1) (undo-tree-id4987 . -1) (undo-tree-id4988 . -1) (undo-tree-id4989 . -1) (undo-tree-id4990 . -1) (undo-tree-id4991 . -1) (undo-tree-id4992 . -1) (undo-tree-id4993 . -1) (undo-tree-id4994 . -1) (undo-tree-id4995 . -1) (undo-tree-id4996 . -1) (undo-tree-id4997 . -1) (undo-tree-id4998 . -1) (undo-tree-id4999 . -1) (undo-tree-id5000 . -1) (undo-tree-id5001 . -1) (undo-tree-id5002 . -1) (undo-tree-id5003 . -1) (undo-tree-id5004 . -1) 479) nil (26116 14152 20104 976000) 0 nil])
([nil nil ((454 . 456)) nil (26116 14152 19600 67000) 0 nil])
([nil nil ((455 . 456)) nil (26116 14152 19599 389000) 0 nil])
([nil nil ((32 . 33)) nil (26116 14152 19598 654000) 0 nil])
([nil nil ((33 . 43)) nil (26116 14152 19597 940000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -42) (undo-tree-id4882 . -1) (undo-tree-id4883 . -1) (undo-tree-id4884 . -1) (undo-tree-id4885 . -1) (undo-tree-id4886 . -1) (undo-tree-id4887 . -1) 43) nil (26116 14152 19596 938000) 0 nil])
([nil nil ((42 . 44)) nil (26116 14152 19592 318000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -42) (undo-tree-id4872 . -1) (undo-tree-id4873 . -1) (undo-tree-id4874 . -1) (undo-tree-id4875 . -1) (undo-tree-id4876 . -1) (undo-tree-id4877 . -1) (#("o" 0 1 (fontified t)) . -43) (undo-tree-id4878 . -1) (undo-tree-id4879 . -1) (undo-tree-id4880 . -1) (undo-tree-id4881 . -1) 44) nil (26116 14152 19590 917000) 0 nil])
([nil nil ((42 . 43)) nil (26116 14152 19582 982000) 0 nil])
([nil nil ((#("std::io::I" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t) 5 7 (face font-lock-constant-face fontified t) 7 9 (fontified t) 9 10 (face font-lock-type-face fontified t)) . 33) (undo-tree-id4839 . -1) (undo-tree-id4840 . -2) (undo-tree-id4841 . -2) (undo-tree-id4842 . -3) (undo-tree-id4843 . -3) (undo-tree-id4844 . -4) (undo-tree-id4845 . -4) (undo-tree-id4846 . -5) (undo-tree-id4847 . -6) (undo-tree-id4848 . -6) (undo-tree-id4849 . -7) (undo-tree-id4850 . -7) (undo-tree-id4851 . -8) (undo-tree-id4852 . -8) (undo-tree-id4853 . -9) (undo-tree-id4854 . -9) (undo-tree-id4855 . -9) (undo-tree-id4856 . -9) (undo-tree-id4857 . -9) (undo-tree-id4858 . -9) (undo-tree-id4859 . -9) (undo-tree-id4860 . -9) (undo-tree-id4861 . -9) (undo-tree-id4862 . -9) (undo-tree-id4863 . -9) (undo-tree-id4864 . -9) (undo-tree-id4865 . -9) (undo-tree-id4866 . -9) (undo-tree-id4867 . -9) (undo-tree-id4868 . -10) (undo-tree-id4869 . -10) (undo-tree-id4870 . -10) (undo-tree-id4871 . -10)) nil (26116 14152 19580 861000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 33) (undo-tree-id4835 . -1) (undo-tree-id4836 . -1) (undo-tree-id4837 . 1) (undo-tree-id4838 . -1)) nil (26116 14152 19555 381000) 0 nil])
([nil nil ((481 . 482) 33) nil (26116 14152 19540 679000) 0 nil])
([nil nil ((480 . 481) (t 26116 14152 71614 852000)) nil (26116 14198 320382 625000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -480) (undo-tree-id5086 . -1) (undo-tree-id5087 . -1) (undo-tree-id5088 . -1) (undo-tree-id5089 . -1) (undo-tree-id5090 . -1) (undo-tree-id5091 . -1) 481) nil (26116 14198 320381 374000) 0 nil])
([nil nil ((481 . 483)) nil (26116 14198 320376 655000) 0 nil])
([nil nil ((481 . 485)) nil (26116 14198 320376 59000) 0 nil])
([nil nil ((485 . 486)) nil (26116 14198 320375 464000) 0 nil])
([nil nil ((apply yas--snippet-revive 485 493 #s(yas--snippet nil nil #s(yas--exit 492 nil) 38 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 492 nil) 38 nil nil nil nil)) (485 . 493) (#("Result<$0>" 0 10 (fontified nil)) . 485) (485 . 495) (#("R" 0 1 (fontified nil)) . 485) (485 . 486) (#("Result<â€¦>" 0 9 (fontified nil)) . -485) (485 . 494) (#("R" 0 1 (face font-lock-type-face fontified t)) . -485) (undo-tree-id5081 . -1) (undo-tree-id5082 . -1) (undo-tree-id5083 . -1) (undo-tree-id5084 . -1) (undo-tree-id5085 . -1) 486) nil (26116 14198 320373 732000) 0 nil])
([nil nil ((492 . 493)) nil (26116 14198 320361 771000) 0 nil])
([nil nil ((494 . 495)) nil (26116 14198 320360 525000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . 497) (497 . 501) (496 . 498)) nil (26116 14198 320355 703000) 0 nil])
([nil nil ((497 . 501) (t 26116 14198 338284 358000)) nil (26116 14218 443563 771000) 0 nil])
([nil nil ((#("
    
" 0 1 (fontified t) 1 5 (fontified t) 5 6 (fontified t)) . -496) (undo-tree-id5099 . -1) (undo-tree-id5100 . -6) (undo-tree-id5101 . -6) (undo-tree-id5102 . -6) (undo-tree-id5103 . -6) (undo-tree-id5104 . -6) (undo-tree-id5105 . -6) (undo-tree-id5106 . -1) (undo-tree-id5107 . -1) (undo-tree-id5108 . -1) (undo-tree-id5109 . -1) (undo-tree-id5110 . -5) (undo-tree-id5111 . -5) (undo-tree-id5112 . -5) 504) nil (26116 14218 443562 395000) 0 nil])
([nil nil ((#("T" 0 1 (face font-lock-type-face fontified t)) . 492)) nil (26116 14218 443552 509000) 0 nil])
([nil nil ((492 . 493)) nil (26116 14218 443551 978000) 0 nil])
([nil nil ((33 . 34)) nil (26116 14218 443551 419000) 0 nil])
([nil nil ((33 . 39)) nil (26116 14218 443550 875000) 0 nil])
([nil nil ((37 . 43) (#("an" 0 2 (fontified nil)) . 37) (37 . 39) (#("anyhow" 0 6 (fontified nil)) . -37) (37 . 43) (#("an" 0 2 (face font-lock-constant-face fontified t)) . -37) (undo-tree-id5095 . -2) (undo-tree-id5096 . -1) (undo-tree-id5097 . -2) (undo-tree-id5098 . -2) 39) nil (26116 14218 443549 733000) 0 nil])
([nil nil ((43 . 46)) nil (26116 14218 443545 750000) 0 nil])
([nil nil ((45 . 51) (#("R" 0 1 (fontified nil)) . 45) (45 . 46) (#("Result" 0 6 (fontified nil)) . -45) (45 . 51) (#("R" 0 1 (face font-lock-type-face fontified t)) . -45) (undo-tree-id5092 . -1) (undo-tree-id5093 . -1) (undo-tree-id5094 . -1) 46) nil (26116 14218 443543 540000) 0 nil])
([nil nil ((51 . 52)) nil (26116 14218 443531 275000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . 517) (517 . 521) (516 . 518) (t 26116 14218 458285 593000)) nil (26116 14661 542072 320000) 0 nil])
([nil nil ((517 . 521)) nil (26116 14661 542071 400000) 0 nil])
([nil nil ((521 . 528)) nil (26116 14661 542070 930000) 0 nil])
([nil nil ((1 . 34) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 571 574 nil nil nil nil #s(yas--field 2 576 585 nil nil nil nil #s(yas--field 3 587 594 nil nil nil nil #s(yas--field 4 596 606 nil nil nil nil #s(yas--field 5 608 615 nil nil nil nil #s(yas--field 6 617 622 nil nil nil nil #s(yas--exit 623 nil))))))) #s(yas--field 2 576 585 nil nil nil nil #s(yas--field 3 587 594 nil nil nil nil #s(yas--field 4 596 606 nil nil nil nil #s(yas--field 5 608 615 nil nil nil nil #s(yas--field 6 617 622 nil nil nil nil #s(yas--exit 623 nil)))))) #s(yas--field 3 587 594 nil nil nil nil #s(yas--field 4 596 606 nil nil nil nil #s(yas--field 5 608 615 nil nil nil nil #s(yas--field 6 617 622 nil nil nil nil #s(yas--exit 623 nil))))) #s(yas--field 4 596 606 nil nil nil nil #s(yas--field 5 608 615 nil nil nil nil #s(yas--field 6 617 622 nil nil nil nil #s(yas--exit 623 nil)))) #s(yas--field 5 608 615 nil nil nil nil #s(yas--field 6 617 622 nil nil nil nil #s(yas--exit 623 nil))) #s(yas--field 6 617 622 nil nil nil nil #s(yas--exit 623 nil))) #s(yas--exit 623 nil) 39 nil #s(yas--field 1 571 574 nil nil nil nil #s(yas--field 2 576 585 nil nil nil nil #s(yas--field 3 587 594 nil nil nil nil #s(yas--field 4 596 606 nil nil nil nil #s(yas--field 5 608 615 nil nil nil nil #s(yas--field 6 617 622 nil nil nil nil #s(yas--exit 623 nil))))))) nil nil)) (521 . 590) (#("process_vm_readv(${1:pid}, ${2:local_iov}, ${3:liovcnt}, ${4:remote_iov}, ${5:riovcnt}, ${6:flags})$0" 0 101 (fontified nil)) . 521) (521 . 622) (#("process" 0 7 (fontified nil)) . 521) (521 . 528) (#("process_vm_readv(â€¦) (use nix::libc::process_vm_readv)" 0 53 (fontified nil)) . -521) (521 . 574) (#("process" 0 7 (fontified t)) . -521) (undo-tree-id5624 . -7) 528) nil (26116 14661 542069 430000) 0 nil])
([nil nil ((apply yas--snippet-revive 554 623 #s(yas--snippet nil (#s(yas--field 1 571 574 nil nil nil nil #s(yas--field 2 576 585 nil nil nil nil #s(yas--field 3 587 594 nil nil nil nil #s(yas--field 4 596 606 nil nil nil nil #s(yas--field 5 608 615 nil nil nil nil #s(yas--field 6 617 622 nil nil nil nil #s(yas--exit 623 nil))))))) #s(yas--field 2 576 585 nil nil nil nil #s(yas--field 3 587 594 nil nil nil nil #s(yas--field 4 596 606 nil nil nil nil #s(yas--field 5 608 615 nil nil nil nil #s(yas--field 6 617 622 nil nil nil nil #s(yas--exit 623 nil)))))) #s(yas--field 3 587 594 nil nil nil nil #s(yas--field 4 596 606 nil nil nil nil #s(yas--field 5 608 615 nil nil nil nil #s(yas--field 6 617 622 nil nil nil nil #s(yas--exit 623 nil))))) #s(yas--field 4 596 606 nil nil nil nil #s(yas--field 5 608 615 nil nil nil nil #s(yas--field 6 617 622 nil nil nil nil #s(yas--exit 623 nil)))) #s(yas--field 5 608 615 nil nil nil nil #s(yas--field 6 617 622 nil nil nil nil #s(yas--exit 623 nil))) #s(yas--field 6 617 622 nil nil nil nil #s(yas--exit 623 nil))) #s(yas--exit 623 nil) 39 nil #s(yas--field 1 571 574 nil nil nil nil #s(yas--field 2 576 585 nil nil nil nil #s(yas--field 3 587 594 nil nil nil nil #s(yas--field 4 596 606 nil nil nil nil #s(yas--field 5 608 615 nil nil nil nil #s(yas--field 6 617 622 nil nil nil nil #s(yas--exit 623 nil))))))) nil nil))) nil (26116 14661 542067 281000) 0 nil])
([nil nil ((#("process_vm_readv(pid, local_iov, liovcnt, remote_iov, riovcnt, flags)" 0 16 (fontified t) 16 17 (face (rainbow-delimiters-depth-2-face) fontified t) 17 68 (fontified t) 68 69 (face (rainbow-delimiters-depth-2-face) fontified t)) . 554)) nil (26116 14661 542066 631000) 0 nil])
([nil nil ((554 . 556)) nil (26116 14661 542066 101000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -555) (undo-tree-id5622 . -1) (undo-tree-id5623 . -1) 556) nil (26116 14661 542065 435000) 0 nil])
([nil nil ((555 . 565)) nil (26116 14661 542063 456000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -561) (undo-tree-id5615 . -1) (undo-tree-id5616 . -1) (#("e" 0 1 (fontified t)) . -562) (undo-tree-id5617 . -1) (undo-tree-id5618 . -1) (#("a" 0 1 (fontified t)) . -563) (undo-tree-id5619 . -1) (undo-tree-id5620 . -1) (#("d" 0 1 (fontified t)) . -564) (undo-tree-id5621 . -1) 565) nil (26116 14661 542062 314000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 571 574 nil nil nil nil #s(yas--field 2 576 585 nil nil nil nil #s(yas--field 3 587 594 nil nil nil nil #s(yas--field 4 596 606 nil nil nil nil #s(yas--field 5 608 615 nil nil nil nil #s(yas--field 6 617 622 nil nil nil nil #s(yas--exit 623 nil))))))) #s(yas--field 2 576 585 nil nil nil nil #s(yas--field 3 587 594 nil nil nil nil #s(yas--field 4 596 606 nil nil nil nil #s(yas--field 5 608 615 nil nil nil nil #s(yas--field 6 617 622 nil nil nil nil #s(yas--exit 623 nil)))))) #s(yas--field 3 587 594 nil nil nil nil #s(yas--field 4 596 606 nil nil nil nil #s(yas--field 5 608 615 nil nil nil nil #s(yas--field 6 617 622 nil nil nil nil #s(yas--exit 623 nil))))) #s(yas--field 4 596 606 nil nil nil nil #s(yas--field 5 608 615 nil nil nil nil #s(yas--field 6 617 622 nil nil nil nil #s(yas--exit 623 nil)))) #s(yas--field 5 608 615 nil nil nil nil #s(yas--field 6 617 622 nil nil nil nil #s(yas--exit 623 nil))) #s(yas--field 6 617 622 nil nil nil nil #s(yas--exit 623 nil))) #s(yas--exit 623 nil) 40 nil #s(yas--field 1 571 574 nil nil nil nil #s(yas--field 2 576 585 nil nil nil nil #s(yas--field 3 587 594 nil nil nil nil #s(yas--field 4 596 606 nil nil nil nil #s(yas--field 5 608 615 nil nil nil nil #s(yas--field 6 617 622 nil nil nil nil #s(yas--exit 623 nil))))))) nil nil)) (554 . 623) (#("process_vm_readv(${1:pid}, ${2:local_iov}, ${3:liovcnt}, ${4:remote_iov}, ${5:riovcnt}, ${6:flags})$0" 0 101 (fontified nil)) . 554) (554 . 655) (#("process" 0 7 (fontified nil)) . 554) (554 . 561) (#("process_vm_readv(â€¦)" 0 19 (fontified nil)) . -554) (554 . 573) (#("process" 0 7 (fontified t)) . -554) (undo-tree-id5613 . -7) (undo-tree-id5614 . -7) 561) nil (26116 14661 542056 826000) 0 nil])
([nil nil ((apply yas--snippet-revive 554 623 #s(yas--snippet nil (#s(yas--field 1 571 574 nil nil nil nil #s(yas--field 2 576 585 nil nil nil nil #s(yas--field 3 587 594 nil nil nil nil #s(yas--field 4 596 606 nil nil nil nil #s(yas--field 5 608 615 nil nil nil nil #s(yas--field 6 617 622 nil nil nil nil #s(yas--exit 623 nil))))))) #s(yas--field 2 576 585 nil nil nil nil #s(yas--field 3 587 594 nil nil nil nil #s(yas--field 4 596 606 nil nil nil nil #s(yas--field 5 608 615 nil nil nil nil #s(yas--field 6 617 622 nil nil nil nil #s(yas--exit 623 nil)))))) #s(yas--field 3 587 594 nil nil nil nil #s(yas--field 4 596 606 nil nil nil nil #s(yas--field 5 608 615 nil nil nil nil #s(yas--field 6 617 622 nil nil nil nil #s(yas--exit 623 nil))))) #s(yas--field 4 596 606 nil nil nil nil #s(yas--field 5 608 615 nil nil nil nil #s(yas--field 6 617 622 nil nil nil nil #s(yas--exit 623 nil)))) #s(yas--field 5 608 615 nil nil nil nil #s(yas--field 6 617 622 nil nil nil nil #s(yas--exit 623 nil))) #s(yas--field 6 617 622 nil nil nil nil #s(yas--exit 623 nil))) #s(yas--exit 623 nil) 40 nil #s(yas--field 1 571 574 nil nil nil nil #s(yas--field 2 576 585 nil nil nil nil #s(yas--field 3 587 594 nil nil nil nil #s(yas--field 4 596 606 nil nil nil nil #s(yas--field 5 608 615 nil nil nil nil #s(yas--field 6 617 622 nil nil nil nil #s(yas--exit 623 nil))))))) nil nil))) nil (26116 14661 542053 934000) 0 nil])
([nil nil ((#("u" 0 1 (face font-lock-type-face fontified t)) . -516) (undo-tree-id5611 . -1) (undo-tree-id5612 . -1) 517) nil (26116 14661 542053 175000) 0 nil])
([nil nil ((516 . 517)) nil (26116 14661 542050 951000) 0 nil])
([nil nil ((549 . 554)) nil (26116 14661 542050 306000) 0 nil])
([nil nil ((554 . 558)) nil (26116 14661 542049 803000) 0 nil])
([nil nil ((558 . 563)) nil (26116 14661 542049 198000) 0 nil])
([nil nil ((#("::libc" 0 2 (fontified t) 2 6 (face font-lock-constant-face fontified t)) . -8) 14 (16 . 23) (32 . 40) (558 . 558) (558 . 563) (#("iovec" 0 5 (fontified nil)) . 558) (558 . 563) (#("iovec (use nix::libc::iovec)" 0 28 (fontified nil)) . -558) (558 . 586) (#("iovec" 0 5 (face font-lock-variable-name-face fontified t)) . -558) (undo-tree-id5610 . -5) 563) nil (26116 14661 542047 802000) 0 nil])
([nil nil ((#("iovec" 0 5 (face font-lock-variable-name-face fontified t)) . -567) (undo-tree-id5606 . -2) (undo-tree-id5607 . -5) (undo-tree-id5608 . -5) (undo-tree-id5609 . -2) 572) nil (26116 14661 542045 116000) 0 nil])
([nil nil ((nil rear-nonsticky nil 586 . 587) (nil fontified nil 567 . 587) (567 . 587)) nil (26116 14661 542042 3000) 0 nil])
([nil nil ((587 . 589)) nil (26116 14661 542041 208000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -587) (undo-tree-id5604 . -1) (#(" " 0 1 (fontified t)) . -588) (undo-tree-id5605 . -1) 589) nil (26116 14661 542040 525000) 0 nil])
([nil nil ((587 . 590)) nil (26116 14661 542038 552000) 0 nil])
([nil nil ((587 . 589)) nil (26116 14661 542038 45000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -587) (undo-tree-id5602 . -1) (#(" " 0 1 (fontified t)) . -588) (undo-tree-id5603 . -1) 589) nil (26116 14661 542037 305000) 0 nil])
([nil nil ((590 . 592)) nil (26116 14661 542035 329000) 0 nil])
([nil nil ((591 . 593)) nil (26116 14661 542034 796000) 0 nil])
([nil nil ((591 . 596) (#("io" 0 2 (fontified nil)) . 591) (591 . 593) (#("iovec" 0 5 (fontified nil)) . -591) (591 . 596) (#("io" 0 2 (fontified t)) . -591) (undo-tree-id5601 . -2) 593) nil (26116 14661 542033 760000) 0 nil])
([nil nil ((596 . 598)) nil (26116 14661 542031 923000) 0 nil])
([nil nil ((597 . 598)) nil (26116 14661 542031 397000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -597) (undo-tree-id5600 . -1) 598) nil (26116 14661 542030 565000) 0 nil])
([nil nil ((597 . 598)) nil (26116 14661 542029 177000) 0 nil])
([nil nil ((597 . 605) (#("i" 0 1 (fontified nil)) . 597) (597 . 598) (#("iov_base" 0 8 (fontified nil)) . -597) (597 . 605) (#("i" 0 1 (fontified t)) . -597) (undo-tree-id5599 . -1) 598) nil (26116 14661 542028 111000) 0 nil])
([nil nil ((605 . 606)) nil (26116 14661 542026 199000) 0 nil])
([nil nil ((606 . 607)) nil (26116 14661 542025 655000) 0 nil])
([nil nil ((#("    let iovLocalAddressSpace = [iovec{iov_base: }]" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 27 (face font-lock-variable-name-face fontified t) 27 28 (face font-lock-variable-name-face rear-nonsticky t fontified t) 28 31 (fontified t) 31 32 (face (rainbow-delimiters-depth-2-face) fontified t) 32 37 (fontified t) 37 38 (face (rainbow-delimiters-depth-3-face) fontified t) 38 46 (face font-lock-variable-name-face fontified t) 46 48 (fontified t) 48 49 (face (rainbow-delimiters-depth-3-face) fontified t) 49 50 (face (rainbow-delimiters-depth-2-face) fontified t)) . 559) (undo-tree-id5592 . -34) (undo-tree-id5593 . -34) (undo-tree-id5594 . -8) (undo-tree-id5595 . -8) (undo-tree-id5596 . -4) (undo-tree-id5597 . -50) (undo-tree-id5598 . -50)) nil (26116 14661 542024 829000) 0 nil])
([nil nil ((559 . 563)) nil (26116 14661 542019 949000) 0 nil])
([nil nil ((563 . 571)) nil (26116 14661 542019 432000) 0 nil])
([nil nil ((#("B" 0 1 (face font-lock-variable-name-face fontified t)) . -568) (undo-tree-id5589 . -1) (#("u" 0 1 (face font-lock-variable-name-face fontified t)) . -569) (undo-tree-id5590 . -1) (#("f" 0 1 (face font-lock-variable-name-face fontified t)) . -570) (undo-tree-id5591 . -1) 571) nil (26116 14661 542018 503000) 0 nil])
([nil nil ((#("p" 0 1 (face font-lock-variable-name-face fontified t)) . -567) (undo-tree-id5588 . -1) 568) nil (26116 14661 542014 895000) 0 nil])
([nil nil ((567 . 568)) nil (26116 14661 542013 690000) 0 nil])
([nil nil ((#("T" 0 1 (face font-lock-type-face fontified t)) . -567) (undo-tree-id5585 . -1) (undo-tree-id5586 . -1) (undo-tree-id5587 . -1) 568) nil (26116 14661 542012 841000) 0 nil])
([nil nil ((#("pub fn read_vm<T>(pid: i32, address: u64) -> Result<T> {" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 14 (face font-lock-function-name-face fontified t) 14 15 (face (rainbow-delimiters-depth-1-face) fontified t) 15 16 (face font-lock-type-face fontified t) 16 17 (face (rainbow-delimiters-depth-1-face) fontified t) 17 18 (face (rainbow-delimiters-depth-1-face) fontified t) 18 21 (face font-lock-variable-name-face fontified t) 21 23 (fontified t) 23 24 (face font-lock-type-face fontified t) 24 26 (face font-lock-type-face fontified t) 26 28 (fontified t) 28 29 (face font-lock-variable-name-face fontified t) 29 35 (face font-lock-variable-name-face fontified t) 35 37 (fontified t) 37 40 (face font-lock-type-face fontified t) 40 41 (face (rainbow-delimiters-depth-1-face) fontified t) 41 43 (fontified t) 43 44 (fontified t syntax-table (1)) 44 45 (fontified t) 45 51 (face font-lock-type-face fontified t) 51 52 (face (rainbow-delimiters-depth-1-face) fontified t) 52 53 (face font-lock-type-face fontified t) 53 54 (face (rainbow-delimiters-depth-1-face) fontified t) 54 55 (fontified t) 55 56 (face (rainbow-delimiters-depth-1-face) fontified t)) . 502) (undo-tree-id5584 . -56)) nil (26116 14661 542010 136000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 502) (undo-tree-id5577 . -1) (undo-tree-id5578 . -1) (undo-tree-id5579 . -1) (undo-tree-id5580 . -1) (undo-tree-id5581 . -1) (undo-tree-id5582 . -1) (undo-tree-id5583 . -1)) nil (26116 14661 542008 559000) 0 nil])
([nil nil ((#("    let " 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t)) . 502) (undo-tree-id5517 . -8) (undo-tree-id5518 . -8) (undo-tree-id5519 . -8) (undo-tree-id5520 . -8) (undo-tree-id5521 . -8) (undo-tree-id5522 . -8) (undo-tree-id5523 . -8) (undo-tree-id5524 . -8) (undo-tree-id5525 . -8) (undo-tree-id5526 . -8) (undo-tree-id5527 . -8) (undo-tree-id5528 . -8) (undo-tree-id5529 . -8) (undo-tree-id5530 . -8) (undo-tree-id5531 . -8) (undo-tree-id5532 . -8) (undo-tree-id5533 . -8) (undo-tree-id5534 . -8) (undo-tree-id5535 . -8) (undo-tree-id5536 . -8) (undo-tree-id5537 . -8) (undo-tree-id5538 . -8) (undo-tree-id5539 . -8) (undo-tree-id5540 . -8) (undo-tree-id5541 . -8) (undo-tree-id5542 . -8) (undo-tree-id5543 . -8) (undo-tree-id5544 . -8) (undo-tree-id5545 . -8) (undo-tree-id5546 . -8) (undo-tree-id5547 . -8) (undo-tree-id5548 . -8) (undo-tree-id5549 . -8) (undo-tree-id5550 . -8) (undo-tree-id5551 . -8) (undo-tree-id5552 . -8) (undo-tree-id5553 . -8) (undo-tree-id5554 . -8) (undo-tree-id5555 . -8) (undo-tree-id5556 . -8) (undo-tree-id5557 . -8) (undo-tree-id5558 . -8) (undo-tree-id5559 . -8) (undo-tree-id5560 . -8) (undo-tree-id5561 . -8) (undo-tree-id5562 . -8) (undo-tree-id5563 . -8) (undo-tree-id5564 . -8) (undo-tree-id5565 . -8) (undo-tree-id5566 . -8) (undo-tree-id5567 . -8) (undo-tree-id5568 . -8) (undo-tree-id5569 . -8) (undo-tree-id5570 . -8) (undo-tree-id5571 . -8) (undo-tree-id5572 . -8) (undo-tree-id5573 . -8) (undo-tree-id5574 . -8) (undo-tree-id5575 . -8) (undo-tree-id5576 . -8)) nil (26116 14661 542001 873000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 502) (undo-tree-id5515 . 1) (undo-tree-id5516 . -1)) nil (26116 14661 541964 250000) 0 nil])
([nil nil ((#("    process_vm_readv(pid, local_iov, liovcnt, remote_iov, riovcnt, flags)" 0 4 (fontified t) 4 20 (fontified t) 20 21 (face (rainbow-delimiters-depth-1-face) fontified t) 21 72 (fontified t) 72 73 (face (rainbow-delimiters-depth-1-face) fontified t)) . 502) (undo-tree-id5509 . -21) (undo-tree-id5510 . -27) (undo-tree-id5511 . -27) (undo-tree-id5512 . -15) (undo-tree-id5513 . 73) (undo-tree-id5514 . -73)) nil (26116 14661 541961 988000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 502) (undo-tree-id5507 . 1) (undo-tree-id5508 . -1)) nil (26116 14661 541957 275000) 0 nil])
([nil nil ((#("}" 0 1 (face (rainbow-delimiters-unmatched-face) fontified t)) . 502) (undo-tree-id5505 . 1) (undo-tree-id5506 . -1)) nil (26116 14661 541952 641000) 0 nil])
([nil nil ((502 . 503)) nil (26116 14661 541950 817000) 0 nil])
([nil nil ((503 . 507)) nil (26116 14661 541950 219000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -505) (undo-tree-id5492 . -1) (undo-tree-id5493 . -1) (undo-tree-id5494 . -1) (undo-tree-id5495 . -1) (undo-tree-id5496 . -1) (undo-tree-id5497 . -1) (undo-tree-id5498 . -1) (undo-tree-id5499 . -1) (#("b" 0 1 (fontified t)) . -506) (undo-tree-id5500 . -1) (undo-tree-id5501 . -1) (undo-tree-id5502 . -1) (undo-tree-id5503 . -1) (undo-tree-id5504 . -1) 507) nil (26116 14661 541949 112000) 0 nil])
([nil nil ((505 . 508)) nil (26116 14661 541940 834000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -505) (undo-tree-id5480 . -1) (undo-tree-id5481 . -1) (undo-tree-id5482 . -1) (undo-tree-id5483 . -1) (undo-tree-id5484 . -1) (undo-tree-id5485 . -1) (#(" " 0 1 (fontified t)) . -506) (undo-tree-id5486 . -1) (undo-tree-id5487 . -1) (undo-tree-id5488 . -1) (undo-tree-id5489 . -1) (#("t" 0 1 (fontified t)) . -507) (undo-tree-id5490 . -1) (undo-tree-id5491 . -1) 508) nil (26116 14661 541939 584000) 0 nil])
([nil nil ((505 . 509)) nil (26116 14661 541930 779000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 513 521 nil nil nil t #s(yas--exit 528 nil))) #s(yas--exit 528 nil) 41 nil #s(yas--field 1 513 521 nil nil nil t #s(yas--exit 528 nil)) nil nil)) (507 . 522) (#("trait $1 {
    $0
}" 0 19 (fontified nil)) . 507) (507 . 526) (#("tr" 0 2 (fontified nil)) . 507) (507 . 509) (#("trait" 0 5 (fontified nil)) . -507) (507 . 512) (#("tr" 0 2 (fontified t)) . -507) (undo-tree-id5475 . -2) (undo-tree-id5476 . -1) (undo-tree-id5477 . -2) (undo-tree-id5478 . -2) (undo-tree-id5479 . -2) 509) nil (26116 14661 541929 178000) 0 nil])
([nil nil ((513 . 517)) nil (26116 14661 541924 321000) 0 nil])
([nil nil ((517 . 518)) nil (26116 14661 541923 694000) 0 nil])
([nil nil ((#("A" 0 1 (face font-lock-type-face fontified t)) . -517) (undo-tree-id5468 . -1) (undo-tree-id5469 . -1) (undo-tree-id5470 . -1) (undo-tree-id5471 . -1) (undo-tree-id5472 . -1) (undo-tree-id5473 . -1) (undo-tree-id5474 . -1) 518) nil (26116 14661 541922 755000) 0 nil])
([nil nil ((517 . 521)) nil (26116 14661 541832 120000) 0 nil])
([nil nil ((apply yas--snippet-revive 507 530 #s(yas--snippet nil (#s(yas--field 1 513 521 nil nil nil t #s(yas--exit 528 nil))) #s(yas--exit 528 nil) 41 nil #s(yas--field 1 513 521 nil nil nil t #s(yas--exit 528 nil)) nil nil))) nil (26116 14661 541831 507000) 0 nil])
([nil nil ((528 . 536)) nil (26116 14661 541830 862000) 0 nil])
([nil nil ((521 . 523)) nil (26116 14661 541830 191000) 0 nil])
([nil nil ((522 . 523)) nil (26116 14661 541829 667000) 0 nil])
([nil nil ((539 . 541)) nil (26116 14661 541829 65000) 0 nil])
([nil nil ((540 . 541)) nil (26116 14661 541828 448000) 0 nil])
([nil nil ((542 . 544)) nil (26116 14661 541827 852000) 0 nil])
([nil nil ((544 . 546)) nil (26116 14661 541826 901000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -545) (undo-tree-id5465 . -1) (undo-tree-id5466 . -1) (undo-tree-id5467 . -1) 546) nil (26116 14661 541826 86000) 0 nil])
([nil nil ((545 . 551)) nil (26116 14661 541823 247000) 0 nil])
([nil nil ((#(">" 0 1 (syntax-table (1) fontified t)) . -546) (undo-tree-id5332 . -1) (undo-tree-id5333 . -1) (undo-tree-id5334 . -1) (undo-tree-id5335 . -1) (undo-tree-id5336 . -1) (undo-tree-id5337 . -1) (undo-tree-id5338 . -1) (undo-tree-id5339 . -1) (undo-tree-id5340 . -1) (undo-tree-id5341 . -1) (undo-tree-id5342 . -1) (undo-tree-id5343 . -1) (undo-tree-id5344 . -1) (undo-tree-id5345 . -1) (undo-tree-id5346 . -1) (undo-tree-id5347 . -1) (undo-tree-id5348 . -1) (undo-tree-id5349 . -1) (undo-tree-id5350 . -1) (undo-tree-id5351 . -1) (undo-tree-id5352 . -1) (undo-tree-id5353 . -1) (undo-tree-id5354 . -1) (undo-tree-id5355 . -1) (undo-tree-id5356 . -1) (undo-tree-id5357 . -1) (undo-tree-id5358 . -1) (undo-tree-id5359 . -1) (undo-tree-id5360 . -1) (undo-tree-id5361 . -1) (undo-tree-id5362 . -1) (undo-tree-id5363 . -1) (undo-tree-id5364 . -1) (undo-tree-id5365 . -1) (undo-tree-id5366 . -1) (undo-tree-id5367 . -1) (undo-tree-id5368 . -1) (undo-tree-id5369 . -1) (undo-tree-id5370 . -1) (#(" " 0 1 (fontified t)) . -547) (undo-tree-id5371 . -1) (undo-tree-id5372 . -1) (undo-tree-id5373 . -1) (undo-tree-id5374 . -1) (undo-tree-id5375 . -1) (undo-tree-id5376 . -1) (undo-tree-id5377 . -1) (undo-tree-id5378 . -1) (undo-tree-id5379 . -1) (undo-tree-id5380 . -1) (undo-tree-id5381 . -1) (undo-tree-id5382 . -1) (undo-tree-id5383 . -1) (undo-tree-id5384 . -1) (undo-tree-id5385 . -1) (undo-tree-id5386 . -1) (undo-tree-id5387 . -1) (undo-tree-id5388 . -1) (undo-tree-id5389 . -1) (undo-tree-id5390 . -1) (undo-tree-id5391 . -1) (undo-tree-id5392 . -1) (undo-tree-id5393 . -1) (undo-tree-id5394 . -1) (undo-tree-id5395 . -1) (undo-tree-id5396 . -1) (undo-tree-id5397 . -1) (undo-tree-id5398 . -1) (undo-tree-id5399 . -1) (undo-tree-id5400 . -1) (undo-tree-id5401 . -1) (undo-tree-id5402 . -1) (undo-tree-id5403 . -1) (undo-tree-id5404 . -1) (undo-tree-id5405 . -1) (#("R" 0 1 (face font-lock-type-face fontified t)) . -548) (undo-tree-id5406 . -1) (undo-tree-id5407 . -1) (undo-tree-id5408 . -1) (undo-tree-id5409 . -1) (undo-tree-id5410 . -1) (undo-tree-id5411 . -1) (undo-tree-id5412 . -1) (undo-tree-id5413 . -1) (undo-tree-id5414 . -1) (undo-tree-id5415 . -1) (undo-tree-id5416 . -1) (undo-tree-id5417 . -1) (undo-tree-id5418 . -1) (undo-tree-id5419 . -1) (undo-tree-id5420 . -1) (undo-tree-id5421 . -1) (undo-tree-id5422 . -1) (undo-tree-id5423 . -1) (undo-tree-id5424 . -1) (undo-tree-id5425 . -1) (undo-tree-id5426 . -1) (undo-tree-id5427 . -1) (undo-tree-id5428 . -1) (undo-tree-id5429 . -1) (undo-tree-id5430 . -1) (undo-tree-id5431 . -1) (undo-tree-id5432 . -1) (undo-tree-id5433 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -549) (undo-tree-id5434 . -1) (undo-tree-id5435 . -1) (undo-tree-id5436 . -1) (undo-tree-id5437 . -1) (undo-tree-id5438 . -1) (undo-tree-id5439 . -1) (undo-tree-id5440 . -1) (undo-tree-id5441 . -1) (undo-tree-id5442 . -1) (undo-tree-id5443 . -1) (undo-tree-id5444 . -1) (undo-tree-id5445 . -1) (undo-tree-id5446 . -1) (undo-tree-id5447 . -1) (undo-tree-id5448 . -1) (undo-tree-id5449 . -1) (undo-tree-id5450 . -1) (undo-tree-id5451 . -1) (undo-tree-id5452 . -1) (undo-tree-id5453 . -1) (undo-tree-id5454 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -550) (undo-tree-id5455 . -1) (undo-tree-id5456 . -1) (undo-tree-id5457 . -1) (undo-tree-id5458 . -1) (undo-tree-id5459 . -1) (undo-tree-id5460 . -1) (undo-tree-id5461 . -1) (undo-tree-id5462 . -1) (undo-tree-id5463 . -1) (undo-tree-id5464 . -1) 551) nil (26116 14661 541817 309000) 0 nil])
([nil nil ((#("T>() -" 0 1 (face font-lock-type-face fontified t) 1 2 (face (rainbow-delimiters-depth-2-face) fontified t) 2 3 (face (rainbow-delimiters-depth-2-face) fontified t) 3 4 (face (rainbow-delimiters-depth-2-face) fontified t) 4 6 (fontified t)) . -540) (undo-tree-id5258 . -6) (undo-tree-id5259 . -2) (undo-tree-id5260 . -2) (undo-tree-id5261 . -2) (undo-tree-id5262 . -2) (undo-tree-id5263 . -2) (undo-tree-id5264 . -1) (undo-tree-id5265 . -1) (undo-tree-id5266 . -2) (undo-tree-id5267 . -2) (undo-tree-id5268 . -2) (undo-tree-id5269 . -2) (undo-tree-id5270 . -2) (undo-tree-id5271 . -2) (undo-tree-id5272 . -2) (undo-tree-id5273 . -2) (undo-tree-id5274 . -3) (undo-tree-id5275 . -3) (undo-tree-id5276 . -3) (undo-tree-id5277 . -3) (undo-tree-id5278 . -3) (undo-tree-id5279 . -4) (undo-tree-id5280 . -4) (undo-tree-id5281 . -4) (undo-tree-id5282 . -4) (undo-tree-id5283 . -4) (undo-tree-id5284 . -5) (undo-tree-id5285 . -5) (undo-tree-id5286 . -5) (undo-tree-id5287 . -5) (undo-tree-id5288 . -5) (undo-tree-id5289 . -5) (undo-tree-id5290 . -6) (undo-tree-id5291 . -6) (undo-tree-id5292 . -6) (undo-tree-id5293 . -6) (undo-tree-id5294 . -6) (undo-tree-id5295 . -6) (undo-tree-id5296 . -6) (undo-tree-id5297 . -6) (undo-tree-id5298 . -6) (undo-tree-id5299 . -6) (undo-tree-id5300 . -6) (undo-tree-id5301 . -6) (undo-tree-id5302 . -6) (undo-tree-id5303 . -6) (undo-tree-id5304 . -6) (undo-tree-id5305 . -6) (undo-tree-id5306 . -6) (undo-tree-id5307 . -6) (undo-tree-id5308 . -6) (undo-tree-id5309 . -6) (undo-tree-id5310 . -6) (undo-tree-id5311 . -6) (undo-tree-id5312 . -6) (undo-tree-id5313 . -6) (undo-tree-id5314 . -6) (undo-tree-id5315 . -6) (undo-tree-id5316 . -6) (undo-tree-id5317 . -6) (undo-tree-id5318 . -6) (undo-tree-id5319 . -6) (undo-tree-id5320 . -6) (undo-tree-id5321 . -6) (undo-tree-id5322 . -6) (undo-tree-id5323 . -6) (undo-tree-id5324 . -6) (undo-tree-id5325 . -6) (undo-tree-id5326 . -6) (undo-tree-id5327 . -6) (undo-tree-id5328 . -6) (undo-tree-id5329 . -6) (undo-tree-id5330 . -6) (undo-tree-id5331 . -6) 546) nil (26116 14661 541039 447000) 0 nil])
([nil nil ((#("<" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -539) (undo-tree-id5173 . -1) (undo-tree-id5174 . -1) (undo-tree-id5175 . -1) (undo-tree-id5176 . -1) (undo-tree-id5177 . -1) (undo-tree-id5178 . -1) (undo-tree-id5179 . -1) (undo-tree-id5180 . -1) (undo-tree-id5181 . -1) (undo-tree-id5182 . -1) (undo-tree-id5183 . -1) (undo-tree-id5184 . -1) (undo-tree-id5185 . -1) (undo-tree-id5186 . -1) (undo-tree-id5187 . -1) (undo-tree-id5188 . -1) (undo-tree-id5189 . -1) (undo-tree-id5190 . -1) (undo-tree-id5191 . -1) (undo-tree-id5192 . -1) (undo-tree-id5193 . -1) (undo-tree-id5194 . -1) (undo-tree-id5195 . -1) (undo-tree-id5196 . -1) (undo-tree-id5197 . -1) (undo-tree-id5198 . -1) (undo-tree-id5199 . -1) (undo-tree-id5200 . -1) (undo-tree-id5201 . -1) (undo-tree-id5202 . -1) (undo-tree-id5203 . -1) (undo-tree-id5204 . -1) (undo-tree-id5205 . -1) (undo-tree-id5206 . -1) (undo-tree-id5207 . -1) (undo-tree-id5208 . -1) (undo-tree-id5209 . -1) (undo-tree-id5210 . -1) (undo-tree-id5211 . -1) (undo-tree-id5212 . -1) (undo-tree-id5213 . -1) (undo-tree-id5214 . -1) (undo-tree-id5215 . -1) (undo-tree-id5216 . -1) (undo-tree-id5217 . -1) (undo-tree-id5218 . -1) (undo-tree-id5219 . -1) (undo-tree-id5220 . -1) (undo-tree-id5221 . -1) (undo-tree-id5222 . -1) (undo-tree-id5223 . -1) (undo-tree-id5224 . -1) (undo-tree-id5225 . -1) (undo-tree-id5226 . -1) (undo-tree-id5227 . -1) (undo-tree-id5228 . -1) (undo-tree-id5229 . -1) (undo-tree-id5230 . -1) (undo-tree-id5231 . -1) (undo-tree-id5232 . -1) (undo-tree-id5233 . -1) (undo-tree-id5234 . -1) (undo-tree-id5235 . -1) (undo-tree-id5236 . -1) (undo-tree-id5237 . -1) (undo-tree-id5238 . -1) (undo-tree-id5239 . -1) (undo-tree-id5240 . -1) (undo-tree-id5241 . -1) (undo-tree-id5242 . -1) (undo-tree-id5243 . -1) (undo-tree-id5244 . -1) (undo-tree-id5245 . -1) (undo-tree-id5246 . -1) (undo-tree-id5247 . -1) (undo-tree-id5248 . -1) (undo-tree-id5249 . -1) (undo-tree-id5250 . -1) (undo-tree-id5251 . -1) (undo-tree-id5252 . -1) (undo-tree-id5253 . -1) (undo-tree-id5254 . -1) (undo-tree-id5255 . -1) (undo-tree-id5256 . -1) (undo-tree-id5257 . -1) 540) nil (26116 14661 540994 682000) 0 nil])
([nil nil ((539 . 541)) nil (26116 14661 540648 442000) 0 nil])
([nil nil ((541 . 545)) nil (26116 14661 540647 890000) 0 nil])
([nil nil ((#(">" 0 1 (syntax-table (1) fontified t)) . -543) (undo-tree-id5163 . -1) (undo-tree-id5164 . -1) (undo-tree-id5165 . -1) (undo-tree-id5166 . -1) (undo-tree-id5167 . -1) (undo-tree-id5168 . -1) (undo-tree-id5169 . -1) (#("?" 0 1 (face rust-question-mark fontified t)) . -544) (undo-tree-id5170 . -1) (undo-tree-id5171 . -1) (undo-tree-id5172 . -1) 545) nil (26116 14661 540646 786000) 0 nil])
([nil nil ((#("T>" 0 1 (face font-lock-type-face fontified t) 1 2 (face (rainbow-delimiters-depth-1-face) fontified t)) . -522) (undo-tree-id5147 . -2) (undo-tree-id5148 . -2) (undo-tree-id5149 . -2) (undo-tree-id5150 . -2) (undo-tree-id5151 . -2) (undo-tree-id5152 . -2) (undo-tree-id5153 . -2) (undo-tree-id5154 . -2) (undo-tree-id5155 . -1) (undo-tree-id5156 . -1) (undo-tree-id5157 . -2) (undo-tree-id5158 . -2) (undo-tree-id5159 . -2) (undo-tree-id5160 . -2) (undo-tree-id5161 . -2) (undo-tree-id5162 . -2) 524) nil (26116 14661 540639 708000) 0 nil])
([nil nil ((#("<" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -521) (undo-tree-id5126 . -1) (undo-tree-id5127 . -1) (undo-tree-id5128 . -1) (undo-tree-id5129 . -1) (undo-tree-id5130 . -1) (undo-tree-id5131 . -1) (undo-tree-id5132 . -1) (undo-tree-id5133 . -1) (undo-tree-id5134 . -1) (undo-tree-id5135 . -1) (undo-tree-id5136 . -1) (undo-tree-id5137 . -1) (undo-tree-id5138 . -1) (undo-tree-id5139 . -1) (undo-tree-id5140 . -1) (undo-tree-id5141 . -1) (undo-tree-id5142 . -1) (undo-tree-id5143 . -1) (undo-tree-id5144 . -1) (undo-tree-id5145 . -1) (undo-tree-id5146 . -1) 522) nil (26116 14661 540628 878000) 0 nil])
([nil nil ((512 . 514)) nil (26116 14661 540614 785000) 0 nil])
([nil nil ((#(">" 0 1 (syntax-table (1) fontified t)) . -512) (undo-tree-id5113 . -1) (undo-tree-id5114 . -1) (undo-tree-id5115 . -1) (undo-tree-id5116 . -1) (undo-tree-id5117 . -1) (undo-tree-id5118 . -1) (undo-tree-id5119 . -1) (undo-tree-id5120 . -1) (undo-tree-id5121 . -1) (undo-tree-id5122 . -1) (#("?" 0 1 (face rust-question-mark fontified t)) . -513) (undo-tree-id5123 . -1) (undo-tree-id5124 . -1) (undo-tree-id5125 . -1) 514) nil (26116 14661 540612 786000) 0 nil])
([nil nil ((512 . 514)) nil (26116 14661 540599 53000) 0 nil])
([nil nil ((513 . 514)) nil (26116 14661 540594 840000) 0 nil])
([nil nil ((#("<" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -512) (undo-tree-id5833 . -1) (undo-tree-id5834 . -1) (undo-tree-id5835 . -1) (undo-tree-id5836 . -1) (undo-tree-id5837 . -1) (undo-tree-id5838 . -1) (undo-tree-id5839 . -1) (undo-tree-id5840 . -1) (undo-tree-id5841 . -1) (undo-tree-id5842 . -1) (undo-tree-id5843 . -1) (undo-tree-id5844 . -1) (undo-tree-id5845 . -1) (undo-tree-id5846 . -1) (undo-tree-id5847 . -1) (#("T" 0 1 (face font-lock-type-face fontified t)) . -513) (undo-tree-id5848 . -1) (undo-tree-id5849 . -1) (undo-tree-id5850 . -1) (undo-tree-id5851 . -1) (undo-tree-id5852 . -1) (undo-tree-id5853 . -1) (undo-tree-id5854 . -1) (undo-tree-id5855 . -1) (undo-tree-id5856 . -1) (undo-tree-id5857 . -1) (undo-tree-id5858 . -1) (undo-tree-id5859 . -1) (undo-tree-id5860 . -1) (undo-tree-id5861 . -1) (#(">" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -514) (undo-tree-id5862 . -1) (undo-tree-id5863 . 1) (undo-tree-id5864 . -1) 515 (t 26116 14661 558312 793000)) nil (26116 14673 751112 971000) 0 nil])
([nil nil ((521 . 523)) nil (26116 14673 751090 777000) 0 nil])
([nil nil ((522 . 523)) nil (26116 14673 751090 29000) 0 nil])
([nil nil ((#("read() -" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-2-face) fontified t) 5 6 (face (rainbow-delimiters-depth-2-face) fontified t) 6 8 (fontified t)) . -535) (undo-tree-id5730 . -8) (undo-tree-id5731 . -8) (undo-tree-id5732 . -4) (undo-tree-id5733 . -4) (undo-tree-id5734 . -4) (undo-tree-id5735 . -4) (undo-tree-id5736 . -4) (undo-tree-id5737 . -4) (undo-tree-id5738 . -4) (undo-tree-id5739 . -4) (undo-tree-id5740 . -4) (undo-tree-id5741 . -4) (undo-tree-id5742 . -4) (undo-tree-id5743 . -4) (undo-tree-id5744 . -4) (undo-tree-id5745 . -4) (undo-tree-id5746 . -4) (undo-tree-id5747 . -4) (undo-tree-id5748 . -4) (undo-tree-id5749 . -4) (undo-tree-id5750 . -4) (undo-tree-id5751 . -4) (undo-tree-id5752 . -4) (undo-tree-id5753 . -4) (undo-tree-id5754 . -4) (undo-tree-id5755 . -4) (undo-tree-id5756 . -4) (undo-tree-id5757 . -4) (undo-tree-id5758 . -4) (undo-tree-id5759 . -4) (undo-tree-id5760 . -4) (undo-tree-id5761 . -4) (undo-tree-id5762 . -4) (undo-tree-id5763 . -4) (undo-tree-id5764 . -4) (undo-tree-id5765 . -4) (undo-tree-id5766 . -4) (undo-tree-id5767 . -4) (undo-tree-id5768 . -4) (undo-tree-id5769 . -4) (undo-tree-id5770 . -4) (undo-tree-id5771 . -4) (undo-tree-id5772 . -4) (undo-tree-id5773 . -4) (undo-tree-id5774 . -4) (undo-tree-id5775 . -4) (undo-tree-id5776 . -4) (undo-tree-id5777 . -4) (undo-tree-id5778 . -4) (undo-tree-id5779 . -4) (undo-tree-id5780 . -4) (undo-tree-id5781 . -4) (undo-tree-id5782 . -4) (undo-tree-id5783 . -4) (undo-tree-id5784 . -4) (undo-tree-id5785 . -4) (undo-tree-id5786 . -4) (undo-tree-id5787 . -4) (undo-tree-id5788 . -4) (undo-tree-id5789 . -4) (undo-tree-id5790 . -4) (undo-tree-id5791 . -4) (undo-tree-id5792 . -4) (undo-tree-id5793 . -4) (undo-tree-id5794 . -4) (undo-tree-id5795 . -4) (undo-tree-id5796 . -4) (undo-tree-id5797 . -4) (undo-tree-id5798 . -4) (undo-tree-id5799 . -4) (undo-tree-id5800 . -4) (undo-tree-id5801 . -4) (undo-tree-id5802 . -4) (undo-tree-id5803 . -4) (undo-tree-id5804 . -4) (undo-tree-id5805 . -4) (undo-tree-id5806 . -4) (undo-tree-id5807 . -4) (undo-tree-id5808 . -4) (undo-tree-id5809 . -4) (undo-tree-id5810 . -4) (undo-tree-id5811 . -4) (undo-tree-id5812 . -4) (undo-tree-id5813 . -4) (undo-tree-id5814 . -4) (undo-tree-id5815 . -4) (undo-tree-id5816 . -8) (undo-tree-id5817 . -8) (undo-tree-id5818 . -8) (undo-tree-id5819 . -8) (undo-tree-id5820 . -8) (undo-tree-id5821 . -8) (undo-tree-id5822 . -8) (undo-tree-id5823 . -8) (undo-tree-id5824 . -8) (undo-tree-id5825 . -8) (undo-tree-id5826 . -8) (undo-tree-id5827 . -8) (undo-tree-id5828 . -8) (undo-tree-id5829 . -8) (undo-tree-id5830 . -8) (undo-tree-id5831 . -8) (undo-tree-id5832 . -8) 543) nil (26116 14673 751084 793000) 0 nil])
([nil nil ((#("pub " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . 531) (undo-tree-id5625 . -4) (undo-tree-id5626 . -4) (undo-tree-id5627 . -4) (undo-tree-id5628 . -4) (undo-tree-id5629 . -4) (undo-tree-id5630 . -4) (undo-tree-id5631 . -4) (undo-tree-id5632 . -4) (undo-tree-id5633 . -4) (undo-tree-id5634 . -4) (undo-tree-id5635 . -4) (undo-tree-id5636 . -4) (undo-tree-id5637 . -4) (undo-tree-id5638 . -4) (undo-tree-id5639 . -4) (undo-tree-id5640 . -4) (undo-tree-id5641 . -4) (undo-tree-id5642 . -4) (undo-tree-id5643 . -4) (undo-tree-id5644 . -4) (undo-tree-id5645 . -4) (undo-tree-id5646 . -4) (undo-tree-id5647 . -4) (undo-tree-id5648 . -4) (undo-tree-id5649 . -4) (undo-tree-id5650 . -4) (undo-tree-id5651 . -4) (undo-tree-id5652 . -4) (undo-tree-id5653 . -4) (undo-tree-id5654 . -4) (undo-tree-id5655 . -4) (undo-tree-id5656 . -4) (undo-tree-id5657 . -4) (undo-tree-id5658 . -4) (undo-tree-id5659 . -4) (undo-tree-id5660 . -4) (undo-tree-id5661 . -4) (undo-tree-id5662 . -4) (undo-tree-id5663 . -4) (undo-tree-id5664 . -4) (undo-tree-id5665 . -4) (undo-tree-id5666 . -4) (undo-tree-id5667 . -4) (undo-tree-id5668 . -4) (undo-tree-id5669 . -4) (undo-tree-id5670 . -4) (undo-tree-id5671 . -4) (undo-tree-id5672 . -4) (undo-tree-id5673 . -4) (undo-tree-id5674 . -4) (undo-tree-id5675 . -4) (undo-tree-id5676 . -4) (undo-tree-id5677 . -4) (undo-tree-id5678 . -4) (undo-tree-id5679 . -4) (undo-tree-id5680 . -4) (undo-tree-id5681 . -4) (undo-tree-id5682 . -4) (undo-tree-id5683 . -4) (undo-tree-id5684 . -4) (undo-tree-id5685 . -4) (undo-tree-id5686 . -4) (undo-tree-id5687 . -4) (undo-tree-id5688 . -4) (undo-tree-id5689 . -4) (undo-tree-id5690 . -4) (undo-tree-id5691 . -4) (undo-tree-id5692 . -4) (undo-tree-id5693 . -4) (undo-tree-id5694 . -4) (undo-tree-id5695 . -4) (undo-tree-id5696 . -4) (undo-tree-id5697 . -4) (undo-tree-id5698 . -4) (undo-tree-id5699 . -4) (undo-tree-id5700 . -4) (undo-tree-id5701 . -4) (undo-tree-id5702 . -4) (undo-tree-id5703 . -4) (undo-tree-id5704 . -4) (undo-tree-id5705 . -4) (undo-tree-id5706 . -4) (undo-tree-id5707 . -4) (undo-tree-id5708 . -4) (undo-tree-id5709 . -4) (undo-tree-id5710 . -4) (undo-tree-id5711 . -4) (undo-tree-id5712 . -4) (undo-tree-id5713 . -4) (undo-tree-id5714 . -4) (undo-tree-id5715 . -4) (undo-tree-id5716 . -4) (undo-tree-id5717 . -4) (undo-tree-id5718 . -4) (undo-tree-id5719 . -4) (undo-tree-id5720 . -4) (undo-tree-id5721 . -4) (undo-tree-id5722 . -4) (undo-tree-id5723 . -4) (undo-tree-id5724 . -4) (undo-tree-id5725 . -4) (undo-tree-id5726 . -4) (undo-tree-id5727 . -4) (undo-tree-id5728 . -4) (undo-tree-id5729 . -4)) nil (26116 14673 750745 381000) 0 nil])
([nil nil ((531 . 535) (t 26116 14673 768313 542000)) nil (26116 14694 921600 135000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -532) (undo-tree-id5907 . -1) (undo-tree-id5908 . -1) (undo-tree-id5909 . -1) (undo-tree-id5910 . -1) (undo-tree-id5911 . -1) (undo-tree-id5912 . -1) (undo-tree-id5913 . -1) (undo-tree-id5914 . -1) (undo-tree-id5915 . -1) (undo-tree-id5916 . -1) (undo-tree-id5917 . -1) (#("u" 0 1 (fontified t)) . -533) (undo-tree-id5918 . -1) (undo-tree-id5919 . -1) (undo-tree-id5920 . -1) (undo-tree-id5921 . -1) (undo-tree-id5922 . -1) (undo-tree-id5923 . -1) (undo-tree-id5924 . -1) (undo-tree-id5925 . -1) (#("b" 0 1 (fontified t)) . -534) (undo-tree-id5926 . -1) (undo-tree-id5927 . -1) (undo-tree-id5928 . -1) 535) nil (26116 14694 921598 212000) 0 nil])
([nil nil ((532 . 534)) nil (26116 14694 921582 736000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -531) (undo-tree-id5876 . -1) (undo-tree-id5877 . -1) (undo-tree-id5878 . -1) (undo-tree-id5879 . -1) (undo-tree-id5880 . -1) (undo-tree-id5881 . -1) (undo-tree-id5882 . -1) (undo-tree-id5883 . -1) (undo-tree-id5884 . -1) (undo-tree-id5885 . -1) (undo-tree-id5886 . -1) (undo-tree-id5887 . -1) (undo-tree-id5888 . -1) (undo-tree-id5889 . -1) (undo-tree-id5890 . -1) (undo-tree-id5891 . -1) (undo-tree-id5892 . -1) (undo-tree-id5893 . -1) (undo-tree-id5894 . -1) (undo-tree-id5895 . -1) (undo-tree-id5896 . -1) (undo-tree-id5897 . -1) (#("u" 0 1 (fontified t)) . -532) (undo-tree-id5898 . -1) (undo-tree-id5899 . -1) (undo-tree-id5900 . -1) (undo-tree-id5901 . -1) (undo-tree-id5902 . -1) (undo-tree-id5903 . -1) (#("y" 0 1 (fontified t)) . -533) (undo-tree-id5904 . -1) (undo-tree-id5905 . -1) (undo-tree-id5906 . -1) 534) nil (26116 14694 921580 582000) 0 nil])
([nil nil ((531 . 540)) nil (26116 14694 921410 598000) 0 nil])
([nil nil ((540 . 546)) nil (26116 14694 921409 897000) 0 nil])
([nil nil ((apply yas--snippet-revive 544 552 #s(yas--snippet nil nil #s(yas--exit 551 nil) 42 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 551 nil) 42 nil nil nil nil)) (544 . 552) (#("Result<$0>" 0 10 (fontified nil)) . 544) (544 . 554) (#("Re" 0 2 (fontified nil)) . 544) (544 . 546) (#("Result<â€¦>" 0 9 (fontified nil)) . -544) (544 . 553) (#("Re" 0 2 (face font-lock-type-face fontified t)) . -544) (undo-tree-id5865 . -2) (undo-tree-id5866 . -1) (undo-tree-id5867 . -1) (undo-tree-id5868 . -1) (undo-tree-id5869 . -1) (undo-tree-id5870 . -1) (undo-tree-id5871 . -2) (undo-tree-id5872 . -2) (undo-tree-id5873 . -2) (undo-tree-id5874 . -2) (undo-tree-id5875 . -2) 546) nil (26116 14694 921407 68000) 0 nil])
([nil nil ((551 . 552)) nil (26116 14694 921390 288000) 0 nil])
([nil nil ((553 . 556)) nil (26116 14694 921386 274000) 0 nil])
([nil nil ((539 . 549) (t 26116 14694 938314 841000)) nil (26116 14727 441259 59000) 0 nil])
([nil nil ((#("u" 0 1 (face font-lock-type-face fontified t)) . -544) (undo-tree-id5963 . -1) (undo-tree-id5964 . -1) (undo-tree-id5965 . -1) (undo-tree-id5966 . -1) (undo-tree-id5967 . -1) 545) nil (26116 14727 441257 680000) 0 nil])
([nil nil ((544 . 545)) nil (26116 14727 441253 8000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-type-face fontified t)) . -544) (undo-tree-id5940 . -1) (undo-tree-id5941 . -1) (undo-tree-id5942 . -1) (undo-tree-id5943 . -1) (undo-tree-id5944 . -1) (undo-tree-id5945 . -1) (undo-tree-id5946 . -1) (undo-tree-id5947 . -1) (undo-tree-id5948 . -1) (undo-tree-id5949 . -1) (undo-tree-id5950 . -1) (undo-tree-id5951 . -1) (undo-tree-id5952 . -1) (undo-tree-id5953 . -1) (undo-tree-id5954 . -1) (undo-tree-id5955 . -1) (undo-tree-id5956 . -1) (undo-tree-id5957 . -1) (undo-tree-id5958 . -1) (undo-tree-id5959 . -1) (undo-tree-id5960 . -1) (undo-tree-id5961 . -1) (undo-tree-id5962 . -1) 545) nil (26116 14727 441250 285000) 0 nil])
([nil nil ((544 . 546)) nil (26116 14727 441103 782000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -545) (undo-tree-id5929 . -1) (undo-tree-id5930 . -1) (undo-tree-id5931 . -1) (undo-tree-id5932 . -1) (undo-tree-id5933 . -1) (undo-tree-id5934 . -1) (undo-tree-id5935 . -1) (undo-tree-id5936 . -1) (undo-tree-id5937 . -1) (undo-tree-id5938 . -1) (undo-tree-id5939 . -1) 546) nil (26116 14727 441099 695000) 0 nil])
([nil nil ((549 . 560) (t 26116 14727 488316 840000)) nil (26116 14734 952958 619000) 0 nil])
([nil nil ((558 . 563) (#("us" 0 2 (fontified nil)) . 558) (558 . 560) (#("usize" 0 5 (fontified nil)) . -558) (558 . 563) (#("us" 0 2 (fontified t)) . -558) (undo-tree-id5968 . -2) (undo-tree-id5969 . -1) (undo-tree-id5970 . -1) (undo-tree-id5971 . -1) (undo-tree-id5972 . -2) (undo-tree-id5973 . -2) (undo-tree-id5974 . -2) (undo-tree-id5975 . -2) 560) nil (26116 14734 952954 69000) 0 nil])
([nil nil ((581 . 585) (#("        " 0 8 (fontified nil)) . 580) (580 . 588) (#("    " 0 4 (fontified nil)) . 580) (undo-tree-id6040 . -4) (undo-tree-id6041 . -4) (undo-tree-id6042 . -4) (undo-tree-id6043 . -4) (579 . 585) (t 26116 14734 971650 632000)) nil (26116 14771 856950 680000) 0 nil])
([nil nil ((580 . 588)) nil (26116 14771 856946 474000) 0 nil])
([nil nil ((588 . 592)) nil (26116 14771 856945 964000) 0 nil])
([nil nil ((592 . 597)) nil (26116 14771 856945 310000) 0 nil])
([nil nil ((#("f" 0 1 (face font-lock-variable-name-face fontified t)) . -594) (undo-tree-id6007 . -1) (undo-tree-id6008 . -1) (undo-tree-id6009 . -1) (undo-tree-id6010 . -1) (undo-tree-id6011 . -1) (undo-tree-id6012 . -1) (undo-tree-id6013 . -1) (undo-tree-id6014 . -1) (undo-tree-id6015 . -1) (undo-tree-id6016 . -1) (undo-tree-id6017 . -1) (undo-tree-id6018 . -1) (undo-tree-id6019 . -1) (undo-tree-id6020 . -1) (undo-tree-id6021 . -1) (undo-tree-id6022 . -1) (undo-tree-id6023 . -1) (#(" " 0 1 (fontified t)) . -595) (undo-tree-id6024 . -1) (undo-tree-id6025 . -1) (undo-tree-id6026 . -1) (undo-tree-id6027 . -1) (undo-tree-id6028 . -1) (undo-tree-id6029 . -1) (undo-tree-id6030 . -1) (undo-tree-id6031 . -1) (undo-tree-id6032 . -1) (undo-tree-id6033 . -1) (undo-tree-id6034 . -1) (#("=" 0 1 (fontified t)) . -596) (undo-tree-id6035 . -1) (undo-tree-id6036 . -1) (undo-tree-id6037 . -1) (undo-tree-id6038 . -1) (undo-tree-id6039 . -1) 597) nil (26116 14771 856943 266000) 0 nil])
([nil nil ((594 . 597)) nil (26116 14771 856920 708000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -595) (undo-tree-id5986 . -1) (undo-tree-id5987 . -1) (undo-tree-id5988 . -1) (undo-tree-id5989 . -1) (undo-tree-id5990 . -1) (undo-tree-id5991 . -1) (undo-tree-id5992 . -1) (undo-tree-id5993 . -1) (undo-tree-id5994 . -1) (undo-tree-id5995 . -1) (undo-tree-id5996 . -1) (undo-tree-id5997 . -1) (undo-tree-id5998 . -1) (undo-tree-id5999 . -1) (undo-tree-id6000 . -1) (undo-tree-id6001 . -1) (undo-tree-id6002 . -1) (#("T" 0 1 (face font-lock-type-face fontified t)) . -596) (undo-tree-id6003 . -1) (undo-tree-id6004 . -1) (undo-tree-id6005 . -1) (undo-tree-id6006 . -1) 597) nil (26116 14771 856918 926000) 0 nil])
([nil nil ((595 . 604)) nil (26116 14771 856611 177000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -602) (undo-tree-id5976 . -1) (undo-tree-id5977 . -1) (undo-tree-id5978 . -1) (undo-tree-id5979 . -1) (undo-tree-id5980 . -1) (undo-tree-id5981 . -1) (undo-tree-id5982 . -1) (#(";" 0 1 (fontified t)) . -603) (undo-tree-id5983 . -1) (undo-tree-id5984 . -1) (undo-tree-id5985 . -1) 604) nil (26116 14771 856608 786000) 0 nil])
([nil nil ((602 . 603)) nil (26116 14771 856591 750000) 0 nil])
([nil nil ((591 . 592) (t 26116 14771 874986 230000)) nil (26116 14782 319925 425000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -591) (undo-tree-id6114 . -1) (undo-tree-id6115 . -1) (undo-tree-id6116 . -1) (undo-tree-id6117 . -1) (undo-tree-id6118 . -1) (undo-tree-id6119 . -1) 592) nil (26116 14782 319924 442000) 0 nil])
([nil nil ((591 . 596)) nil (26116 14782 319919 252000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -595) (undo-tree-id6107 . -1) (undo-tree-id6108 . -1) (undo-tree-id6109 . -1) (undo-tree-id6110 . -1) (undo-tree-id6111 . -1) (undo-tree-id6112 . -1) (undo-tree-id6113 . -1) 596) nil (26116 14782 319917 786000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -602) (undo-tree-id6044 . -1) (undo-tree-id6045 . -1) (undo-tree-id6046 . -1) (undo-tree-id6047 . -1) (undo-tree-id6048 . -1) (undo-tree-id6049 . -1) (undo-tree-id6050 . -1) (undo-tree-id6051 . -1) (undo-tree-id6052 . -1) (undo-tree-id6053 . -1) (undo-tree-id6054 . -1) (undo-tree-id6055 . -1) (undo-tree-id6056 . -1) (undo-tree-id6057 . -1) (undo-tree-id6058 . -1) (undo-tree-id6059 . -1) (undo-tree-id6060 . -1) (undo-tree-id6061 . -1) (undo-tree-id6062 . -1) (undo-tree-id6063 . -1) (undo-tree-id6064 . -1) (#("=" 0 1 (fontified t)) . -603) (undo-tree-id6065 . -1) (undo-tree-id6066 . -1) (undo-tree-id6067 . -1) (undo-tree-id6068 . -1) (undo-tree-id6069 . -1) (undo-tree-id6070 . -1) (undo-tree-id6071 . -1) (undo-tree-id6072 . -1) (undo-tree-id6073 . -1) (undo-tree-id6074 . -1) (undo-tree-id6075 . -1) (undo-tree-id6076 . -1) (undo-tree-id6077 . -1) (undo-tree-id6078 . -1) (undo-tree-id6079 . -1) (undo-tree-id6080 . -1) (#(" " 0 1 (fontified t)) . -604) (undo-tree-id6081 . -1) (undo-tree-id6082 . -1) (undo-tree-id6083 . -1) (undo-tree-id6084 . -1) (undo-tree-id6085 . -1) (undo-tree-id6086 . -1) (undo-tree-id6087 . -1) (undo-tree-id6088 . -1) (undo-tree-id6089 . -1) (undo-tree-id6090 . -1) (undo-tree-id6091 . -1) (undo-tree-id6092 . -1) (undo-tree-id6093 . -1) (undo-tree-id6094 . -1) (#("0" 0 1 (fontified t)) . -605) (undo-tree-id6095 . -1) (undo-tree-id6096 . -1) (undo-tree-id6097 . -1) (undo-tree-id6098 . -1) (undo-tree-id6099 . -1) (undo-tree-id6100 . -1) (undo-tree-id6101 . -1) (undo-tree-id6102 . -1) (undo-tree-id6103 . -1) (undo-tree-id6104 . -1) (undo-tree-id6105 . -1) (undo-tree-id6106 . -1) 606) nil (26116 14782 319908 66000) 0 nil])
([nil nil ((#("let mut buf: T;" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 11 (face font-lock-variable-name-face fontified t) 11 13 (fontified t) 13 14 (face font-lock-type-face fontified t) 14 15 (fontified t)) . 588) (undo-tree-id6120 . -14) (undo-tree-id6121 . -14) (undo-tree-id6122 . -14) (undo-tree-id6123 . -14) (undo-tree-id6124 . -14) (undo-tree-id6125 . -14) (undo-tree-id6126 . -14) (undo-tree-id6127 . -3) (undo-tree-id6128 . -3) (undo-tree-id6129 . -3) (undo-tree-id6130 . -3) (undo-tree-id6131 . -3) (undo-tree-id6132 . 8) (undo-tree-id6133 . -7) (undo-tree-id6134 . -7) (undo-tree-id6135 . -7) (undo-tree-id6136 . -7) (undo-tree-id6137 . -7) (undo-tree-id6138 . -7) (undo-tree-id6139 . -14) (undo-tree-id6140 . -14) (undo-tree-id6141 . -14) (undo-tree-id6142 . -14) (undo-tree-id6143 . -14) (undo-tree-id6144 . -14) (undo-tree-id6145 . -14) (undo-tree-id6146 . -14) (undo-tree-id6147 . -14) (undo-tree-id6148 . -14) (undo-tree-id6149 . -14) (undo-tree-id6150 . -14) (undo-tree-id6151 . -14) (undo-tree-id6152 . -14) (undo-tree-id6153 . -14) (undo-tree-id6154 . -14) (undo-tree-id6155 . -14) (undo-tree-id6156 . -14) (undo-tree-id6157 . -14) (undo-tree-id6158 . -14) (undo-tree-id6159 . -14) (undo-tree-id6160 . -14) (undo-tree-id6161 . -14) (undo-tree-id6162 . -14) (undo-tree-id6163 . -14) (undo-tree-id6164 . -14) (undo-tree-id6165 . -15) (t 26116 14782 368320 208000)) nil (26116 14785 92711 810000) 0 nil])
([nil nil ((549 . 560) (t 26116 14785 108320 376000)) nil (26116 14812 383671 274000) 0 nil])
([nil nil ((#("T>" 0 1 (face font-lock-type-face fontified t) 1 2 (face (rainbow-delimiters-depth-2-face) fontified t)) . -586) (undo-tree-id6189 . -2) (undo-tree-id6190 . -2) (undo-tree-id6191 . -2) (undo-tree-id6192 . -2) (undo-tree-id6193 . -2) (undo-tree-id6194 . -2) (undo-tree-id6195 . -2) (undo-tree-id6196 . -2) (undo-tree-id6197 . -2) (undo-tree-id6198 . -2) (undo-tree-id6199 . -2) (undo-tree-id6200 . -2) (undo-tree-id6201 . -2) (undo-tree-id6202 . -2) 588 (t 26116 14812 431655 387000)) nil (26116 14841 155706 206000) 0 nil])
([nil nil ((#("Result<" 0 6 (face font-lock-type-face fontified t) 6 7 (face (rainbow-delimiters-depth-2-face) fontified t)) . -579) (undo-tree-id6172 . -7) (undo-tree-id6173 . -7) (undo-tree-id6174 . -7) (undo-tree-id6175 . -7) (undo-tree-id6176 . -7) (undo-tree-id6177 . -7) (undo-tree-id6178 . -7) (undo-tree-id6179 . -7) (undo-tree-id6180 . -7) (undo-tree-id6181 . -7) (undo-tree-id6182 . -7) (undo-tree-id6183 . -7) (undo-tree-id6184 . -7) (undo-tree-id6185 . -7) (undo-tree-id6186 . -7) (undo-tree-id6187 . -7) (undo-tree-id6188 . -7) 586) nil (26116 14841 155694 696000) 0 nil])
([nil nil ((579 . 580)) nil (26116 14841 155681 938000) 0 nil])
([nil nil ((579 . 583) (#("b" 0 1 (fontified nil)) . 579) (579 . 580) (#("bool" 0 4 (fontified nil)) . -579) (579 . 583) (#("b" 0 1 (fontified t)) . -579) (undo-tree-id6166 . -1) (undo-tree-id6167 . -1) (undo-tree-id6168 . -1) (undo-tree-id6169 . -1) (undo-tree-id6170 . -1) (undo-tree-id6171 . -1) 580) nil (26116 14841 155677 637000) 0 nil])
([nil nil ((594 . 595) (t 26116 14841 171657 151000)) nil (26116 14845 939819 614000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -594) (undo-tree-id6214 . -1) (undo-tree-id6215 . -1) (undo-tree-id6216 . -1) (undo-tree-id6217 . -1) (undo-tree-id6218 . -1) (undo-tree-id6219 . -1) (undo-tree-id6220 . -1) 595) nil (26116 14845 939818 124000) 0 nil])
([nil nil ((594 . 596)) nil (26116 14845 939811 662000) 0 nil])
([nil nil ((apply yas--snippet-revive 594 598 #s(yas--snippet nil nil nil 43 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 43 nil nil nil nil)) (594 . 598) (#("true" 0 4 (fontified nil)) . 594) (594 . 598) (#("tr" 0 2 (fontified nil)) . 594) (594 . 596) (#("true" 0 4 (fontified nil)) . -594) (594 . 598) (#("tr" 0 2 (fontified t)) . -594) (undo-tree-id6203 . -2) (undo-tree-id6204 . -1) (undo-tree-id6205 . -1) (undo-tree-id6206 . -1) (undo-tree-id6207 . -1) (undo-tree-id6208 . -1) (undo-tree-id6209 . -2) (undo-tree-id6210 . -2) (undo-tree-id6211 . -2) (undo-tree-id6212 . -2) (undo-tree-id6213 . -2) 596) nil (26116 14845 939807 35000) 0 nil])
([nil nil ((587 . 595) (#("        " 0 8 (fontified nil)) . 586) (undo-tree-id6221 . -8) (undo-tree-id6222 . -8) (undo-tree-id6223 . -8) (undo-tree-id6224 . -8) (585 . 595) (t 26116 14845 958324 111000)) nil (26116 14853 997536 45000) 0 nil])
([nil nil ((586 . 594)) nil (26116 14853 997525 915000) 0 nil])
([nil nil ((557 . 561)) nil (26116 14853 997522 109000) 0 nil])
([nil nil ((598 . 602) (t 26116 14854 14991 272000)) nil (26116 14924 598465 213000) 0 nil])
([nil nil ((#("let " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -598) (undo-tree-id6335 . -4) (undo-tree-id6336 . -1) (undo-tree-id6337 . -1) (undo-tree-id6338 . -2) (undo-tree-id6339 . -3) (undo-tree-id6340 . -4) (undo-tree-id6341 . -4) (undo-tree-id6342 . -4) (undo-tree-id6343 . -4) (undo-tree-id6344 . -4) (undo-tree-id6345 . -4) 602) nil (26116 14924 598463 822000) 0 nil])
([nil nil ((607 . 610)) nil (26116 14924 598455 550000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -609) (undo-tree-id6333 . -1) (undo-tree-id6334 . -1) 610) nil (26116 14924 598454 646000) 0 nil])
([nil nil ((609 . 610)) nil (26116 14924 598452 170000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 624 627 nil nil nil nil #s(yas--field 2 629 638 nil nil nil nil #s(yas--field 3 640 647 nil nil nil nil #s(yas--field 4 649 659 nil nil nil nil #s(yas--field 5 661 668 nil nil nil nil #s(yas--field 6 670 675 nil nil nil nil #s(yas--exit 676 nil))))))) #s(yas--field 2 629 638 nil nil nil nil #s(yas--field 3 640 647 nil nil nil nil #s(yas--field 4 649 659 nil nil nil nil #s(yas--field 5 661 668 nil nil nil nil #s(yas--field 6 670 675 nil nil nil nil #s(yas--exit 676 nil)))))) #s(yas--field 3 640 647 nil nil nil nil #s(yas--field 4 649 659 nil nil nil nil #s(yas--field 5 661 668 nil nil nil nil #s(yas--field 6 670 675 nil nil nil nil #s(yas--exit 676 nil))))) #s(yas--field 4 649 659 nil nil nil nil #s(yas--field 5 661 668 nil nil nil nil #s(yas--field 6 670 675 nil nil nil nil #s(yas--exit 676 nil)))) #s(yas--field 5 661 668 nil nil nil nil #s(yas--field 6 670 675 nil nil nil nil #s(yas--exit 676 nil))) #s(yas--field 6 670 675 nil nil nil nil #s(yas--exit 676 nil))) #s(yas--exit 676 nil) 44 nil #s(yas--field 1 624 627 nil nil nil nil #s(yas--field 2 629 638 nil nil nil nil #s(yas--field 3 640 647 nil nil nil nil #s(yas--field 4 649 659 nil nil nil nil #s(yas--field 5 661 668 nil nil nil nil #s(yas--field 6 670 675 nil nil nil nil #s(yas--exit 676 nil))))))) nil nil)) (607 . 676) (#("process_vm_readv(${1:pid}, ${2:local_iov}, ${3:liovcnt}, ${4:remote_iov}, ${5:riovcnt}, ${6:flags})$0" 0 101 (fontified nil)) . 607) (607 . 708) (#("pro" 0 3 (fontified nil)) . 607) (607 . 610) (#("process_vm_readv(â€¦)" 0 19 (fontified nil)) . -607) (607 . 626) (#("pro" 0 3 (fontified t)) . -607) (undo-tree-id6321 . -3) (undo-tree-id6322 . -1) (undo-tree-id6323 . -1) (undo-tree-id6324 . -2) (undo-tree-id6325 . -2) (undo-tree-id6326 . -2) (undo-tree-id6327 . -2) (undo-tree-id6328 . -2) (undo-tree-id6329 . -3) (undo-tree-id6330 . -3) (undo-tree-id6331 . -3) (undo-tree-id6332 . -3) 610) nil (26116 14924 598450 526000) 0 nil])
([nil nil ((apply yas--snippet-revive 607 676 #s(yas--snippet nil (#s(yas--field 1 624 627 nil nil nil nil #s(yas--field 2 629 638 nil nil nil nil #s(yas--field 3 640 647 nil nil nil nil #s(yas--field 4 649 659 nil nil nil nil #s(yas--field 5 661 668 nil nil nil nil #s(yas--field 6 670 675 nil nil nil nil #s(yas--exit 676 nil))))))) #s(yas--field 2 629 638 nil nil nil nil #s(yas--field 3 640 647 nil nil nil nil #s(yas--field 4 649 659 nil nil nil nil #s(yas--field 5 661 668 nil nil nil nil #s(yas--field 6 670 675 nil nil nil nil #s(yas--exit 676 nil)))))) #s(yas--field 3 640 647 nil nil nil nil #s(yas--field 4 649 659 nil nil nil nil #s(yas--field 5 661 668 nil nil nil nil #s(yas--field 6 670 675 nil nil nil nil #s(yas--exit 676 nil))))) #s(yas--field 4 649 659 nil nil nil nil #s(yas--field 5 661 668 nil nil nil nil #s(yas--field 6 670 675 nil nil nil nil #s(yas--exit 676 nil)))) #s(yas--field 5 661 668 nil nil nil nil #s(yas--field 6 670 675 nil nil nil nil #s(yas--exit 676 nil))) #s(yas--field 6 670 675 nil nil nil nil #s(yas--exit 676 nil))) #s(yas--exit 676 nil) 44 nil #s(yas--field 1 624 627 nil nil nil nil #s(yas--field 2 629 638 nil nil nil nil #s(yas--field 3 640 647 nil nil nil nil #s(yas--field 4 649 659 nil nil nil nil #s(yas--field 5 661 668 nil nil nil nil #s(yas--field 6 670 675 nil nil nil nil #s(yas--exit 676 nil))))))) nil nil))) nil (26116 14924 598440 289000) 0 nil])
([nil nil ((#("bool" 0 4 (face font-lock-type-face fontified t)) . -583) (undo-tree-id6311 . -4) (undo-tree-id6312 . -4) (undo-tree-id6313 . -4) (undo-tree-id6314 . -4) (undo-tree-id6315 . -4) (undo-tree-id6316 . -4) (undo-tree-id6317 . -4) (undo-tree-id6318 . -4) (undo-tree-id6319 . -4) (undo-tree-id6320 . -4) 587) nil (26116 14924 598439 231000) 0 nil])
([nil nil ((583 . 584)) nil (26116 14924 598431 660000) 0 nil])
([nil nil ((apply yas--snippet-revive 583 591 #s(yas--snippet nil nil #s(yas--exit 590 nil) 45 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 590 nil) 45 nil nil nil nil)) (583 . 591) (#("Result<$0>" 0 10 (fontified nil)) . 583) (583 . 593) (#("R" 0 1 (fontified nil)) . 583) (583 . 584) (#("Result<â€¦>" 0 9 (fontified nil)) . -583) (583 . 592) (#("R" 0 1 (face font-lock-type-face fontified t)) . -583) (undo-tree-id6304 . -1) (undo-tree-id6305 . -1) (undo-tree-id6306 . -1) (undo-tree-id6307 . -1) (undo-tree-id6308 . -1) (undo-tree-id6309 . -1) (undo-tree-id6310 . -1) 584) nil (26116 14924 598429 995000) 0 nil])
([nil nil ((590 . 591)) nil (26116 14924 598422 901000) 0 nil])
([nil nil ((#("T," 0 1 (face font-lock-type-face fontified t) 1 2 (fontified t)) . -561) (undo-tree-id6293 . -2) (undo-tree-id6294 . -1) (undo-tree-id6295 . -1) (undo-tree-id6296 . -1) (undo-tree-id6297 . -1) (undo-tree-id6298 . -1) (undo-tree-id6299 . -1) (undo-tree-id6300 . -1) (undo-tree-id6301 . -1) (undo-tree-id6302 . -1) (undo-tree-id6303 . -2) 563) nil (26116 14924 598421 661000) 0 nil])
([nil nil ((#("mut " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -557) (undo-tree-id6273 . -4) (undo-tree-id6274 . -4) (undo-tree-id6275 . -4) (undo-tree-id6276 . -4) (undo-tree-id6277 . -4) (undo-tree-id6278 . -4) (undo-tree-id6279 . -4) (undo-tree-id6280 . -4) (undo-tree-id6281 . -4) (undo-tree-id6282 . -4) (undo-tree-id6283 . -4) (undo-tree-id6284 . -4) (undo-tree-id6285 . -4) (undo-tree-id6286 . -4) (undo-tree-id6287 . -4) (undo-tree-id6288 . -4) (undo-tree-id6289 . -4) (undo-tree-id6290 . -4) (undo-tree-id6291 . -4) (undo-tree-id6292 . -4) 561) nil (26116 14924 598411 770000) 0 nil])
([nil nil ((#("pBuff: &" 0 5 (face font-lock-variable-name-face fontified t) 5 7 (fontified t) 7 8 (fontified t)) . -549) (undo-tree-id6250 . -8) (undo-tree-id6251 . -8) (undo-tree-id6252 . -8) (undo-tree-id6253 . -8) (undo-tree-id6254 . -8) (undo-tree-id6255 . -8) (undo-tree-id6256 . -8) (undo-tree-id6257 . -8) (undo-tree-id6258 . -8) (undo-tree-id6259 . -8) (undo-tree-id6260 . -8) (undo-tree-id6261 . -8) (undo-tree-id6262 . -8) (undo-tree-id6263 . -8) (undo-tree-id6264 . -8) (undo-tree-id6265 . -8) (undo-tree-id6266 . -8) (undo-tree-id6267 . -8) (undo-tree-id6268 . -8) (undo-tree-id6269 . -8) (undo-tree-id6270 . -8) (undo-tree-id6271 . -8) (undo-tree-id6272 . -8) 557) nil (26116 14924 598252 859000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -548) (undo-tree-id6225 . -1) (undo-tree-id6226 . -1) (undo-tree-id6227 . -1) (undo-tree-id6228 . -1) (undo-tree-id6229 . -1) (undo-tree-id6230 . -1) (undo-tree-id6231 . -1) (undo-tree-id6232 . -1) (undo-tree-id6233 . -1) (undo-tree-id6234 . -1) (undo-tree-id6235 . -1) (undo-tree-id6236 . -1) (undo-tree-id6237 . -1) (undo-tree-id6238 . -1) (undo-tree-id6239 . -1) (undo-tree-id6240 . -1) (undo-tree-id6241 . -1) (undo-tree-id6242 . -1) (undo-tree-id6243 . -1) (undo-tree-id6244 . -1) (undo-tree-id6245 . -1) (undo-tree-id6246 . -1) (undo-tree-id6247 . -1) (undo-tree-id6248 . -1) (undo-tree-id6249 . -1) 549) nil (26116 14924 598234 649000) 0 nil])
([nil nil ((588 . 598)) nil (26116 14924 598205 902000) 0 nil])
([nil nil ((#("true" 0 4 (face font-lock-keyword-face fontified t)) . 685) (undo-tree-id6352 . -4) (undo-tree-id6353 . -4) (t 26116 14924 618328 940000)) nil (26116 14941 47428 825000) 0 nil])
([nil nil ((685 . 686)) nil (26116 14941 47426 420000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 688 690 nil nil nil nil #s(yas--exit 691 nil))) #s(yas--exit 691 nil) 46 nil #s(yas--field 1 688 690 nil nil nil nil #s(yas--exit 691 nil)) nil nil)) (685 . 691) (#("Ok(${1:()})$0" 0 13 (fontified nil)) . 685) (685 . 698) (#("O" 0 1 (fontified nil)) . 685) (685 . 686) (#("Ok(â€¦)" 0 5 (fontified nil)) . -685) (685 . 690) (#("O" 0 1 (face font-lock-type-face fontified t)) . -685) (undo-tree-id6346 . -1) (undo-tree-id6347 . -1) (undo-tree-id6348 . -1) (undo-tree-id6349 . -1) (undo-tree-id6350 . -1) (undo-tree-id6351 . -1) 686) nil (26116 14941 47424 197000) 0 nil])
([nil nil ((apply yas--snippet-revive 685 691 #s(yas--snippet nil (#s(yas--field 1 688 690 nil nil nil nil #s(yas--exit 691 nil))) #s(yas--exit 691 nil) 46 nil #s(yas--field 1 688 690 nil nil nil nil #s(yas--exit 691 nil)) nil nil))) nil (26116 14941 47411 440000) 0 nil])
([nil nil ((596 . 601)) nil (26116 14941 47407 340000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -693) (undo-tree-id6354 . -1) (undo-tree-id6355 . -1) (undo-tree-id6356 . -1) (undo-tree-id6357 . -1) (undo-tree-id6358 . -1) (undo-tree-id6359 . -1) (undo-tree-id6360 . -1) (undo-tree-id6361 . -1) (undo-tree-id6362 . -1) (undo-tree-id6363 . -1) (undo-tree-id6364 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -694) (undo-tree-id6365 . -1) (undo-tree-id6366 . -1) (undo-tree-id6367 . -1) (undo-tree-id6368 . -1) (undo-tree-id6369 . -1) (undo-tree-id6370 . -1) (undo-tree-id6371 . -1) (undo-tree-id6372 . -1) (undo-tree-id6373 . -1) 695 (t 26116 14941 64996 616000)) nil (26116 14946 978844 615000) 0 nil])
([nil nil ((693 . 696)) nil (26116 14946 978821 195000) 0 nil])
([nil nil ((681 . 682) (t 26116 14946 994996 980000)) nil (26116 14950 28787 730000) 0 nil])
([nil nil ((632 . 637) (t 26116 14950 34997 167000)) nil (26116 14960 463717 70000) 0 nil])
([nil nil ((636 . 639) (#("i" 0 1 (fontified nil)) . 636) (636 . 637) (#("i32" 0 3 (fontified nil)) . -636) (636 . 639) (#("i" 0 1 (fontified t)) . -636) (undo-tree-id6374 . -1) (undo-tree-id6375 . -1) (undo-tree-id6376 . -1) (undo-tree-id6377 . -1) (undo-tree-id6378 . -1) (undo-tree-id6379 . -1) (undo-tree-id6380 . -1) 637) nil (26116 14960 463712 342000) 0 nil])
([nil nil ((603 . 612) (t 26116 14960 481664 475000)) nil (26116 15102 138686 412000) 0 nil])
([nil nil ((612 . 623)) nil (26116 15102 138685 757000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -622) (undo-tree-id6409 . -1) 623) nil (26116 15102 138685 123000) 0 nil])
([nil nil ((622 . 628)) nil (26116 15102 138683 782000) 0 nil])
([nil nil ((628 . 630)) nil (26116 15102 138683 278000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -628) (undo-tree-id6403 . -1) (undo-tree-id6404 . -1) (undo-tree-id6405 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -629) (undo-tree-id6406 . -1) (undo-tree-id6407 . -1) (undo-tree-id6408 . -1) 630) nil (26116 15102 138682 285000) 0 nil])
([nil nil ((628 . 630)) nil (26116 15102 138677 142000) 0 nil])
([nil nil ((628 . 633) (#("io" 0 2 (fontified nil)) . 628) (628 . 630) (#("iovec" 0 5 (fontified nil)) . -628) (628 . 633) (#("io" 0 2 (fontified t)) . -628) (undo-tree-id6402 . -2) 630) nil (26116 15102 138676 133000) 0 nil])
([nil nil ((633 . 636)) nil (26116 15102 138674 230000) 0 nil])
([nil nil ((635 . 636)) nil (26116 15102 138673 795000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -635) (undo-tree-id6401 . -1) 636) nil (26116 15102 138673 164000) 0 nil])
([nil nil ((635 . 636)) nil (26116 15102 138671 731000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -635) (undo-tree-id6400 . -1) 636) nil (26116 15102 138671 90000) 0 nil])
([nil nil ((635 . 636)) nil (26116 15102 138669 808000) 0 nil])
([nil nil ((635 . 643) (#("b" 0 1 (fontified nil)) . 635) (635 . 636) (#("iov_base" 0 8 (fontified nil)) . -635) (635 . 643) (#("b" 0 1 (fontified t)) . -635) (undo-tree-id6399 . -1) 636) nil (26116 15102 138668 799000) 0 nil])
([nil nil ((643 . 645)) nil (26116 15102 138666 848000) 0 nil])
([nil nil ((645 . 647)) nil (26116 15102 138666 322000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t)) . -645) (undo-tree-id6397 . -1) (#("b" 0 1 (fontified t)) . -646) (undo-tree-id6398 . -1) 647) nil (26116 15102 138665 111000) 0 nil])
([nil nil ((645 . 647)) nil (26116 15102 138663 8000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t)) . -646) (undo-tree-id6396 . -1) 647) nil (26116 15102 138662 292000) 0 nil])
([nil nil ((646 . 647)) nil (26116 15102 138660 956000) 0 nil])
([nil nil ((646 . 649) (#("b" 0 1 (fontified nil)) . 646) (646 . 647) (#("buf" 0 3 (fontified nil)) . -646) (646 . 649) (#("b" 0 1 (fontified t)) . -646) (undo-tree-id6395 . -1) 647) nil (26116 15102 138659 997000) 0 nil])
([nil nil ((646 . 650)) nil (26116 15102 138658 118000) 0 nil])
([nil nil ((653 . 661)) nil (26116 15102 138657 313000) 0 nil])
([nil nil ((661 . 665)) nil (26116 15102 138656 607000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -664) (undo-tree-id6394 . -1) 665) nil (26116 15102 138655 958000) 0 nil])
([nil nil ((664 . 665)) nil (26116 15102 138654 565000) 0 nil])
([nil nil ((665 . 668)) nil (26116 15102 138653 982000) 0 nil])
([nil nil ((1 . 28) (662 . 662) (662 . 668) (#("c_void" 0 6 (fontified nil)) . 662) (662 . 668) (#("c_void (use std::os::raw::c_void)" 0 33 (fontified nil)) . -662) (662 . 695) (#("c_void" 0 6 (fontified t)) . -662) (undo-tree-id6393 . -6) 668) nil (26116 15102 138652 918000) 0 nil])
([nil nil ((695 . 697)) nil (26116 15102 138650 688000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -695) (undo-tree-id6391 . -1) (#(" " 0 1 (fontified t)) . -696) (undo-tree-id6392 . -1) 697) nil (26116 15102 138649 679000) 0 nil])
([nil nil ((695 . 698)) nil (26116 15102 138647 516000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -697) (undo-tree-id6389 . -1) (undo-tree-id6390 . -1) 698) nil (26116 15102 138646 726000) 0 nil])
([nil nil ((697 . 698)) nil (26116 15102 138644 712000) 0 nil])
([nil nil ((697 . 704) (#("i" 0 1 (fontified nil)) . 697) (697 . 698) (#("iov_len" 0 7 (fontified nil)) . -697) (697 . 704) (#("i" 0 1 (fontified t)) . -697) (undo-tree-id6387 . -1) (undo-tree-id6388 . -1) 698) nil (26116 15102 138643 597000) 0 nil])
([nil nil ((704 . 712)) nil (26116 15102 138640 641000) 0 nil])
([nil nil ((10 . 11) (25 . 40) (apply yas--snippet-revive 706 715 #s(yas--snippet nil nil #s(yas--exit 715 nil) 47 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 715 nil) 47 nil nil nil nil)) (706 . 715) (#("size_of()$0" 0 11 (fontified nil)) . 706) (706 . 717) (#("sizeof" 0 6 (fontified nil)) . 706) (706 . 712) (#("size_of() (use std::mem::size_of)" 0 33 (fontified nil)) . -706) (706 . 739) (#("sizeof" 0 6 (fontified t)) . -706) (undo-tree-id6381 . -6) (undo-tree-id6382 . -6) (undo-tree-id6383 . -6) (undo-tree-id6384 . -6) (undo-tree-id6385 . -6) (undo-tree-id6386 . -6) 712) nil (26116 15102 138638 210000) 0 nil])
([nil nil ((729 . 731)) nil (26116 15102 138871 459000) 0 nil])
([nil nil ((#("of::()" 0 2 (face font-lock-constant-face fontified t) 2 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t) 5 6 (face (rainbow-delimiters-depth-4-face) fontified t)) . -727) (undo-tree-id6486 . -4) (undo-tree-id6487 . -6) (undo-tree-id6488 . 2) (undo-tree-id6489 . -4) (undo-tree-id6490 . -4) (undo-tree-id6491 . -4) (undo-tree-id6492 . -4) (undo-tree-id6493 . -4) (undo-tree-id6494 . -4) (undo-tree-id6495 . -4) (undo-tree-id6496 . -4) (undo-tree-id6497 . -4) (undo-tree-id6498 . -5) (undo-tree-id6499 . -6) 733) nil (26116 15124 748529 287000) 0 nil] [nil nil ((731 . 763)) ((#("
                               " 0 32 (fontified t)) . 731) (undo-tree-id6410 . -32) (undo-tree-id6411 . -32) (undo-tree-id6412 . -1)) (26116 15102 138621 496000) 0 nil])
([nil nil ((#("size_" 0 5 (fontified t)) . -722) (undo-tree-id6471 . -5) (undo-tree-id6472 . -5) (undo-tree-id6473 . -5) (undo-tree-id6474 . -5) (undo-tree-id6475 . -5) (undo-tree-id6476 . -5) (undo-tree-id6477 . -5) (undo-tree-id6478 . -5) (undo-tree-id6479 . -5) (undo-tree-id6480 . -5) (undo-tree-id6481 . -5) (undo-tree-id6482 . -5) (undo-tree-id6483 . -5) (undo-tree-id6484 . -5) (undo-tree-id6485 . -5) 727) nil (26116 15124 748518 807000) 0 nil])
nil
([nil nil ((722 . 727)) nil (26116 15124 748508 868000) 0 nil])
([nil nil ((#("si" 0 2 (fontified t)) . -725) (undo-tree-id6456 . -2) (undo-tree-id6457 . -2) (undo-tree-id6458 . -1) (undo-tree-id6459 . -1) (undo-tree-id6460 . -1) (undo-tree-id6461 . -1) (undo-tree-id6462 . -2) (undo-tree-id6463 . -2) (undo-tree-id6464 . -2) (undo-tree-id6465 . -2) (undo-tree-id6466 . -2) (undo-tree-id6467 . -2) (undo-tree-id6468 . -2) (undo-tree-id6469 . -2) (undo-tree-id6470 . -2) 727) nil (26116 15124 748507 650000) 0 nil])
([nil nil ((#("T::" 0 1 (face font-lock-type-face fontified t) 1 3 (fontified t)) . -722) (undo-tree-id6424 . -3) (undo-tree-id6425 . -3) (undo-tree-id6426 . -1) (undo-tree-id6427 . -1) (undo-tree-id6428 . -1) (undo-tree-id6429 . -1) (undo-tree-id6430 . -1) (undo-tree-id6431 . -1) (undo-tree-id6432 . -1) (undo-tree-id6433 . -1) (undo-tree-id6434 . -1) (undo-tree-id6435 . -2) (undo-tree-id6436 . -2) (undo-tree-id6437 . -2) (undo-tree-id6438 . -3) (undo-tree-id6439 . -3) (undo-tree-id6440 . -3) (undo-tree-id6441 . -3) (undo-tree-id6442 . -3) (undo-tree-id6443 . -3) (undo-tree-id6444 . -3) (undo-tree-id6445 . -3) (undo-tree-id6446 . -3) (undo-tree-id6447 . -3) (undo-tree-id6448 . -3) (undo-tree-id6449 . -3) (undo-tree-id6450 . -3) (undo-tree-id6451 . -3) (undo-tree-id6452 . -3) (undo-tree-id6453 . -3) (undo-tree-id6454 . -3) (undo-tree-id6455 . -3) 725) nil (26116 15124 748496 866000) 0 nil])
([nil nil ((722 . 724)) nil (26116 15124 748475 239000) 0 nil])
([nil nil ((724 . 725)) nil (26116 15124 748474 637000) 0 nil])
([nil nil ((apply yas--snippet-revive 722 731 #s(yas--snippet nil nil #s(yas--exit 731 nil) 48 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 731 nil) 48 nil nil nil nil)) (722 . 731) (#("size_of()$0" 0 11 (fontified nil)) . 722) (722 . 733) (#("siz" 0 3 (fontified nil)) . 722) (722 . 725) (#("size_of()" 0 9 (fontified nil)) . -722) (722 . 731) (#("siz" 0 3 (fontified t)) . -722) (undo-tree-id6413 . -3) (undo-tree-id6414 . -1) (undo-tree-id6415 . -1) (undo-tree-id6416 . -1) (undo-tree-id6417 . -2) (undo-tree-id6418 . -2) (undo-tree-id6419 . -2) (undo-tree-id6420 . -3) (undo-tree-id6421 . -3) (undo-tree-id6422 . -3) (undo-tree-id6423 . -3) 725) nil (26116 15124 748471 947000) 0 nil])
([nil nil ((729 . 732)) nil (26116 15124 748456 958000) 0 nil])
([nil nil ((732 . 733)) nil (26116 15124 748455 585000) 0 nil])
([nil nil ((732 . 733)) nil (26116 15124 748451 415000) 0 nil])
([nil nil ((737 . 738) (t 26116 15124 768341 227000)) nil (26116 15128 796402 43000) 0 nil])
([nil nil ((11 . 25) (26 . 32) (", m" . 26) (30 . 37) ("m" . 30) (33 . 34) ("siz" . 33) (37 . 41) ("_of}" . -37) (undo-tree-id6500 . -4) 41 ("
" . -43) (60 . 67) (", iovec" . -76) (undo-tree-id6501 . -3) (#("
use anyhow::Result;" 1 4 (face font-lock-keyword-face) 5 11 (face font-lock-constant-face) 13 19 (face font-lock-type-face)) . -117) (#("
" 0 1 (fontified t)) . -545) (678 . 691) (712 . 724) (736 . 746) 849 (t 26116 15128 815008 141000)) nil (26116 15132 922737 270000) 0 nil])
([nil nil ((712 . 713) (t 26116 15132 941675 62000)) nil (26116 15250 479095 159000) 0 nil])
([nil nil ((712 . 714)) nil (26116 15250 479094 357000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -712) (undo-tree-id6507 . -1) (undo-tree-id6508 . -1) (undo-tree-id6509 . -1) (undo-tree-id6510 . -1) (undo-tree-id6511 . -1) (undo-tree-id6512 . -1) (undo-tree-id6513 . -1) (undo-tree-id6514 . -1) (#("s" 0 1 (face font-lock-keyword-face fontified t)) . -713) (undo-tree-id6515 . -1) (undo-tree-id6516 . -1) (undo-tree-id6517 . -1) 714) nil (26116 15250 479093 187000) 0 nil])
([nil nil ((712 . 715)) nil (26116 15250 479084 620000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -714) (undo-tree-id6502 . -1) (undo-tree-id6503 . -1) (undo-tree-id6504 . -1) (undo-tree-id6505 . -1) (undo-tree-id6506 . -1) 715) nil (26116 15250 479082 977000) 0 nil])
([nil nil ((712 . 717)) nil (26116 15250 479072 7000) 0 nil])
([nil nil ((717 . 719)) nil (26116 15250 479068 110000) 0 nil])
([nil nil ((734 . 737) (t 26116 15250 511682 279000)) nil (26116 15299 176471 253000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -734) (undo-tree-id6518 . -1) (undo-tree-id6519 . -1) (undo-tree-id6520 . -1) (undo-tree-id6521 . -1) (undo-tree-id6522 . -1) (undo-tree-id6523 . -1) (undo-tree-id6524 . -1) (undo-tree-id6525 . -1) (undo-tree-id6526 . -1) (undo-tree-id6527 . -1) (undo-tree-id6528 . -1) (undo-tree-id6529 . -1) (undo-tree-id6530 . -1) (undo-tree-id6531 . -1) (#("t" 0 1 (fontified t)) . -735) (undo-tree-id6532 . -1) (undo-tree-id6533 . -1) (undo-tree-id6534 . -1) (undo-tree-id6535 . -1) (undo-tree-id6536 . -1) (undo-tree-id6537 . -1) (undo-tree-id6538 . -1) (undo-tree-id6539 . -1) (undo-tree-id6540 . -1) (undo-tree-id6541 . -1) (#("d" 0 1 (fontified t)) . -736) (undo-tree-id6542 . -1) (undo-tree-id6543 . -1) (undo-tree-id6544 . -1) (undo-tree-id6545 . -1) (undo-tree-id6546 . -1) (undo-tree-id6547 . -1) 737) nil (26116 15299 176853 786000) 0 nil])
([nil nil ((784 . 792) (#("        " 0 8 (fontified nil)) . 783) (undo-tree-id6854 . -8) (undo-tree-id6855 . -8) (undo-tree-id6856 . -8) (undo-tree-id6857 . -8) (782 . 792)) nil (26116 15341 468636 565000) 0 nil] [nil nil ((840 . 865) (#(" " 0 1 (fontified nil)) . 840) (839 . 840)) ((#("
" 0 1 (fontified t)) . 839) (undo-tree-id6548 . -1) (undo-tree-id6549 . -1) (840 . 841) (#("                         " 0 25 (fontified t)) . 840) (undo-tree-id6550 . -25)) (26116 15299 176035 681000) 0 nil])
([nil nil ((792 . 803)) nil (26116 15341 468631 142000) 0 nil])
nil
([nil nil ((#("t" 0 1 (fontified t)) . -802) (undo-tree-id6849 . -1) (undo-tree-id6850 . -1) (undo-tree-id6851 . -1) (undo-tree-id6852 . -1) (undo-tree-id6853 . -1) 803) nil (26116 15341 468630 9000) 0 nil])
([nil nil ((802 . 804)) nil (26116 15341 468624 78000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -802) (undo-tree-id6836 . -1) (undo-tree-id6837 . -1) (undo-tree-id6838 . -1) (undo-tree-id6839 . -1) (undo-tree-id6840 . -1) (undo-tree-id6841 . -1) (undo-tree-id6842 . -1) (undo-tree-id6843 . -1) (#("d" 0 1 (fontified t)) . -803) (undo-tree-id6844 . -1) (undo-tree-id6845 . -1) (undo-tree-id6846 . -1) (undo-tree-id6847 . -1) (undo-tree-id6848 . -1) 804) nil (26116 15341 468622 159000) 0 nil])
([nil nil ((802 . 804)) nil (26116 15341 468609 684000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -802) (undo-tree-id6811 . -1) (undo-tree-id6812 . -1) (undo-tree-id6813 . -1) (undo-tree-id6814 . -1) (undo-tree-id6815 . -1) (undo-tree-id6816 . -1) (undo-tree-id6817 . -1) (undo-tree-id6818 . -1) (undo-tree-id6819 . -1) (undo-tree-id6820 . -1) (undo-tree-id6821 . -1) (undo-tree-id6822 . -1) (undo-tree-id6823 . -1) (undo-tree-id6824 . -1) (undo-tree-id6825 . -1) (undo-tree-id6826 . -1) (#("t" 0 1 (fontified t)) . -803) (undo-tree-id6827 . -1) (undo-tree-id6828 . -1) (undo-tree-id6829 . -1) (undo-tree-id6830 . -1) (undo-tree-id6831 . -1) (undo-tree-id6832 . -1) (undo-tree-id6833 . -1) (undo-tree-id6834 . -1) (undo-tree-id6835 . -1) 804) nil (26116 15341 468608 83000) 0 nil])
([nil nil ((802 . 804)) nil (26116 15341 468591 373000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -803) (undo-tree-id6804 . -1) (undo-tree-id6805 . -1) (undo-tree-id6806 . -1) (undo-tree-id6807 . -1) (undo-tree-id6808 . -1) (undo-tree-id6809 . -1) (undo-tree-id6810 . -1) 804) nil (26116 15341 468590 304000) 0 nil])
([nil nil ((803 . 805)) nil (26116 15341 468367 911000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -802) (undo-tree-id6763 . -1) (undo-tree-id6764 . -1) (undo-tree-id6765 . -1) (undo-tree-id6766 . -1) (undo-tree-id6767 . -1) (undo-tree-id6768 . -1) (undo-tree-id6769 . -1) (undo-tree-id6770 . -1) (undo-tree-id6771 . -1) (undo-tree-id6772 . -1) (undo-tree-id6773 . -1) (undo-tree-id6774 . -1) (undo-tree-id6775 . -1) (undo-tree-id6776 . -1) (undo-tree-id6777 . -1) (undo-tree-id6778 . -1) (undo-tree-id6779 . -1) (undo-tree-id6780 . -1) (undo-tree-id6781 . -1) (undo-tree-id6782 . -1) (undo-tree-id6783 . -1) (undo-tree-id6784 . -1) (undo-tree-id6785 . -1) (undo-tree-id6786 . -1) (undo-tree-id6787 . -1) (#("t" 0 1 (fontified t)) . -803) (undo-tree-id6788 . -1) (undo-tree-id6789 . -1) (undo-tree-id6790 . -1) (undo-tree-id6791 . -1) (undo-tree-id6792 . -1) (undo-tree-id6793 . -1) (undo-tree-id6794 . -1) (undo-tree-id6795 . -1) (undo-tree-id6796 . -1) (undo-tree-id6797 . -1) (#("r" 0 1 (fontified t)) . -804) (undo-tree-id6798 . -1) (undo-tree-id6799 . -1) (undo-tree-id6800 . -1) (undo-tree-id6801 . -1) (undo-tree-id6802 . -1) (undo-tree-id6803 . -1) 805) nil (26116 15341 468365 801000) 0 nil])
([nil nil ((802 . 804)) nil (26116 15341 468339 725000) 0 nil])
([nil nil ((#("std::mem::as" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t) 5 8 (face font-lock-constant-face fontified t) 8 10 (fontified t) 10 12 (face font-lock-keyword-face fontified t)) . 792) (undo-tree-id6667 . -1) (undo-tree-id6668 . -1) (undo-tree-id6669 . -2) (undo-tree-id6670 . -2) (undo-tree-id6671 . -3) (undo-tree-id6672 . -3) (undo-tree-id6673 . -4) (undo-tree-id6674 . -4) (undo-tree-id6675 . -5) (undo-tree-id6676 . -5) (undo-tree-id6677 . -6) (undo-tree-id6678 . -6) (undo-tree-id6679 . -7) (undo-tree-id6680 . -7) (undo-tree-id6681 . -8) (undo-tree-id6682 . -8) (undo-tree-id6683 . -8) (undo-tree-id6684 . -8) (undo-tree-id6685 . -8) (undo-tree-id6686 . -9) (undo-tree-id6687 . -9) (undo-tree-id6688 . -9) (undo-tree-id6689 . -10) (undo-tree-id6690 . -10) (undo-tree-id6691 . -10) (undo-tree-id6692 . -10) (undo-tree-id6693 . -10) (undo-tree-id6694 . -10) (undo-tree-id6695 . -10) (undo-tree-id6696 . -10) (undo-tree-id6697 . -10) (undo-tree-id6698 . -10) (undo-tree-id6699 . -10) (undo-tree-id6700 . -10) (undo-tree-id6701 . -10) (undo-tree-id6702 . -10) (undo-tree-id6703 . -10) (undo-tree-id6704 . -10) (undo-tree-id6705 . -10) (undo-tree-id6706 . -10) (undo-tree-id6707 . -10) (undo-tree-id6708 . -10) (undo-tree-id6709 . -10) (undo-tree-id6710 . -10) (undo-tree-id6711 . -10) (undo-tree-id6712 . -10) (undo-tree-id6713 . -10) (undo-tree-id6714 . -10) (undo-tree-id6715 . -10) (undo-tree-id6716 . -10) (undo-tree-id6717 . -10) (undo-tree-id6718 . -10) (undo-tree-id6719 . -10) (undo-tree-id6720 . -10) (undo-tree-id6721 . -10) (undo-tree-id6722 . -10) (undo-tree-id6723 . -10) (undo-tree-id6724 . -10) (undo-tree-id6725 . -10) (undo-tree-id6726 . -10) (undo-tree-id6727 . -10) (undo-tree-id6728 . -10) (undo-tree-id6729 . -10) (undo-tree-id6730 . -10) (undo-tree-id6731 . -10) (undo-tree-id6732 . -10) (undo-tree-id6733 . -10) (undo-tree-id6734 . -10) (undo-tree-id6735 . -10) (undo-tree-id6736 . -10) (undo-tree-id6737 . -10) (undo-tree-id6738 . -10) (undo-tree-id6739 . -10) (undo-tree-id6740 . -10) (undo-tree-id6741 . -10) (undo-tree-id6742 . -10) (undo-tree-id6743 . -10) (undo-tree-id6744 . -10) (undo-tree-id6745 . -10) (undo-tree-id6746 . -10) (undo-tree-id6747 . -10) (undo-tree-id6748 . -10) (undo-tree-id6749 . -10) (undo-tree-id6750 . -10) (undo-tree-id6751 . -10) (undo-tree-id6752 . -10) (undo-tree-id6753 . -10) (undo-tree-id6754 . -10) (undo-tree-id6755 . -10) (undo-tree-id6756 . -11) (undo-tree-id6757 . -11) (undo-tree-id6758 . -12) (undo-tree-id6759 . -12) (undo-tree-id6760 . -12) (undo-tree-id6761 . -12) (undo-tree-id6762 . -12)) nil (26116 15341 468335 837000) 0 nil])
([nil nil ((708 . 710)) nil (26116 15341 468208 55000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -708) (undo-tree-id6653 . -1) (undo-tree-id6654 . -1) (undo-tree-id6655 . -1) (undo-tree-id6656 . -1) (undo-tree-id6657 . -1) (undo-tree-id6658 . -1) (undo-tree-id6659 . -1) (undo-tree-id6660 . -1) (undo-tree-id6661 . -1) (#("s" 0 1 (fontified t)) . -709) (undo-tree-id6662 . -1) (undo-tree-id6663 . -1) (undo-tree-id6664 . -1) (undo-tree-id6665 . -1) (undo-tree-id6666 . -1) 710) nil (26116 15341 468206 733000) 0 nil])
([nil nil ((708 . 711)) nil (26116 15341 468196 180000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -708) (undo-tree-id6619 . -1) (undo-tree-id6620 . -1) (undo-tree-id6621 . -1) (undo-tree-id6622 . -1) (undo-tree-id6623 . -1) (undo-tree-id6624 . -1) (undo-tree-id6625 . -1) (undo-tree-id6626 . -1) (undo-tree-id6627 . -1) (undo-tree-id6628 . -1) (undo-tree-id6629 . -1) (undo-tree-id6630 . -1) (undo-tree-id6631 . -1) (undo-tree-id6632 . -1) (undo-tree-id6633 . -1) (undo-tree-id6634 . -1) (#("a" 0 1 (fontified t)) . -709) (undo-tree-id6635 . -1) (undo-tree-id6636 . -1) (undo-tree-id6637 . -1) (undo-tree-id6638 . -1) (undo-tree-id6639 . -1) (undo-tree-id6640 . -1) (undo-tree-id6641 . -1) (undo-tree-id6642 . -1) (undo-tree-id6643 . -1) (undo-tree-id6644 . -1) (undo-tree-id6645 . -1) (#("s" 0 1 (face font-lock-keyword-face fontified t)) . -710) (undo-tree-id6646 . -1) (undo-tree-id6647 . -1) (undo-tree-id6648 . -1) (undo-tree-id6649 . -1) (undo-tree-id6650 . -1) (undo-tree-id6651 . -1) (undo-tree-id6652 . -1) 711) nil (26116 15341 468194 238000) 0 nil])
([nil nil ((708 . 711)) nil (26116 15341 468172 807000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -708) (undo-tree-id6584 . -1) (undo-tree-id6585 . -1) (undo-tree-id6586 . -1) (undo-tree-id6587 . -1) (undo-tree-id6588 . -1) (undo-tree-id6589 . -1) (undo-tree-id6590 . -1) (undo-tree-id6591 . -1) (undo-tree-id6592 . -1) (undo-tree-id6593 . -1) (undo-tree-id6594 . -1) (undo-tree-id6595 . -1) (undo-tree-id6596 . -1) (undo-tree-id6597 . -1) (undo-tree-id6598 . -1) (undo-tree-id6599 . -1) (#("a" 0 1 (fontified t)) . -709) (undo-tree-id6600 . -1) (undo-tree-id6601 . -1) (undo-tree-id6602 . -1) (undo-tree-id6603 . -1) (undo-tree-id6604 . -1) (undo-tree-id6605 . -1) (undo-tree-id6606 . -1) (undo-tree-id6607 . -1) (undo-tree-id6608 . -1) (undo-tree-id6609 . -1) (undo-tree-id6610 . -1) (undo-tree-id6611 . -1) (#("s" 0 1 (face font-lock-keyword-face fontified t)) . -710) (undo-tree-id6612 . -1) (undo-tree-id6613 . -1) (undo-tree-id6614 . -1) (undo-tree-id6615 . -1) (undo-tree-id6616 . -1) (undo-tree-id6617 . -1) (undo-tree-id6618 . -1) 711) nil (26116 15341 468170 634000) 0 nil])
([nil nil ((708 . 711)) nil (26116 15341 468145 801000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -708) (undo-tree-id6551 . -1) (undo-tree-id6552 . -1) (undo-tree-id6553 . -1) (undo-tree-id6554 . -1) (undo-tree-id6555 . -1) (undo-tree-id6556 . -1) (undo-tree-id6557 . -1) (undo-tree-id6558 . -1) (undo-tree-id6559 . -1) (undo-tree-id6560 . -1) (undo-tree-id6561 . -1) (undo-tree-id6562 . -1) (undo-tree-id6563 . -1) (undo-tree-id6564 . -1) (undo-tree-id6565 . -1) (#("t" 0 1 (fontified t)) . -709) (undo-tree-id6566 . -1) (undo-tree-id6567 . -1) (undo-tree-id6568 . -1) (undo-tree-id6569 . -1) (undo-tree-id6570 . -1) (undo-tree-id6571 . -1) (undo-tree-id6572 . -1) (undo-tree-id6573 . -1) (undo-tree-id6574 . -1) (undo-tree-id6575 . -1) (undo-tree-id6576 . -1) (#("p" 0 1 (fontified t)) . -710) (undo-tree-id6577 . -1) (undo-tree-id6578 . -1) (undo-tree-id6579 . -1) (undo-tree-id6580 . -1) (undo-tree-id6581 . -1) (undo-tree-id6582 . -1) (undo-tree-id6583 . -1) 711) nil (26116 15341 468140 637000) 0 nil])
([nil nil ((565 . 567) (t 26116 15341 485021 197000)) nil (26116 15355 98501 894000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -566) (undo-tree-id6864 . -1) (undo-tree-id6865 . -1) (undo-tree-id6866 . -1) (undo-tree-id6867 . -1) (undo-tree-id6868 . -1) 567) nil (26116 15355 98500 616000) 0 nil])
([nil nil ((566 . 569)) nil (26116 15355 98495 614000) 0 nil])
([nil nil ((567 . 572) (#("Si" 0 2 (fontified nil)) . 567) (567 . 569) (#("Sized (alias ?)" 0 15 (fontified nil)) . -567) (567 . 582) (#("Si" 0 2 (face font-lock-type-face fontified t)) . -567) (undo-tree-id6858 . -2) (undo-tree-id6859 . -1) (undo-tree-id6860 . -1) (undo-tree-id6861 . -2) (undo-tree-id6862 . -2) (undo-tree-id6863 . -2) 569) nil (26116 15355 98491 415000) 0 nil])
([nil nil ((790 . 798) (t 26116 15355 148355 369000)) nil (26116 15363 91215 736000) 0 nil])
([nil nil ((798 . 802)) nil (26116 15363 91214 594000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -801) (undo-tree-id6884 . -1) (undo-tree-id6885 . -1) (undo-tree-id6886 . -1) (undo-tree-id6887 . -1) (undo-tree-id6888 . -1) (undo-tree-id6889 . -1) (undo-tree-id6890 . -1) 802) nil (26116 15363 91212 970000) 0 nil])
([nil nil ((#(";et" 0 3 (fontified t)) . 798) (undo-tree-id6869 . -1) (undo-tree-id6870 . -1) (undo-tree-id6871 . -2) (undo-tree-id6872 . -2) (undo-tree-id6873 . -3) (undo-tree-id6874 . -3) (undo-tree-id6875 . -3) (undo-tree-id6876 . -3) (undo-tree-id6877 . -3) (undo-tree-id6878 . -3) (undo-tree-id6879 . -3) (undo-tree-id6880 . -3) (undo-tree-id6881 . -3) (undo-tree-id6882 . -3) (undo-tree-id6883 . -3)) nil (26116 15363 91204 548000) 0 nil])
([nil nil ((845 . 846) (t 26116 15363 141689 193000)) nil (26116 15382 685810 816000) 0 nil])
([nil nil ((791 . 799) (#("        " 0 8 (fontified nil)) . 790) (undo-tree-id6961 . -8) (undo-tree-id6962 . -8) (undo-tree-id6963 . -8) (undo-tree-id6964 . -8) (789 . 799) (t 26116 15382 705023 727000)) nil (26116 15440 543983 355000) 0 nil])
([nil nil ((799 . 804)) nil (26116 15440 543976 977000) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-variable-name-face fontified t)) . -803) (undo-tree-id6958 . -1) (undo-tree-id6959 . -1) (undo-tree-id6960 . -1) 804) nil (26116 15440 543975 430000) 0 nil])
([nil nil ((803 . 804)) nil (26116 15440 543970 731000) 0 nil])
([nil nil ((#("l" 0 1 (face font-lock-variable-name-face fontified t)) . -803) (undo-tree-id6955 . -1) (undo-tree-id6956 . -1) (undo-tree-id6957 . -1) 804) nil (26116 15440 543969 265000) 0 nil])
([nil nil ((803 . 819)) nil (26116 15440 543964 839000) 0 nil])
([nil nil ((816 . 821) (#("iov" 0 3 (fontified nil)) . 816) (816 . 819) (#("iovec" 0 5 (fontified nil)) . -816) (816 . 821) (#("iov" 0 3 (fontified t)) . -816) (undo-tree-id6944 . -3) (undo-tree-id6945 . -1) (undo-tree-id6946 . -1) (undo-tree-id6947 . -1) (undo-tree-id6948 . -1) (undo-tree-id6949 . -1) (undo-tree-id6950 . -2) (undo-tree-id6951 . -2) (undo-tree-id6952 . -2) (undo-tree-id6953 . -3) (undo-tree-id6954 . -3) 819) nil (26116 15440 543962 686000) 0 nil])
([nil nil ((821 . 824)) nil (26116 15440 543947 321000) 0 nil])
([nil nil ((824 . 825)) nil (26116 15440 543946 342000) 0 nil])
([nil nil ((825 . 833) (#("            " 0 12 (fontified nil)) . 824) (undo-tree-id6939 . -8) (undo-tree-id6940 . -8) (undo-tree-id6941 . -8) (undo-tree-id6942 . -8) (undo-tree-id6943 . -8) (832 . 836) (823 . 833)) nil (26116 15440 543944 443000) 0 nil])
([nil nil ((824 . 836)) nil (26116 15440 543936 492000) 0 nil])
([nil nil ((836 . 837)) nil (26116 15440 543935 338000) 0 nil])
([nil nil ((836 . 844) (#("i" 0 1 (fontified nil)) . 836) (836 . 837) (#("iov_base" 0 8 (fontified nil)) . -836) (836 . 844) (#("i" 0 1 (fontified t)) . -836) (undo-tree-id6933 . -1) (undo-tree-id6934 . -1) (undo-tree-id6935 . -1) (undo-tree-id6936 . -1) (undo-tree-id6937 . -1) (undo-tree-id6938 . -1) 837) nil (26116 15440 543933 255000) 0 nil])
([nil nil ((844 . 847)) nil (26116 15440 543923 608000) 0 nil])
([nil nil ((#("&" 0 1 (fontified t)) . -846) (undo-tree-id6923 . -1) (undo-tree-id6924 . -1) (undo-tree-id6925 . -1) (undo-tree-id6926 . -1) (undo-tree-id6927 . -1) (undo-tree-id6928 . -1) (undo-tree-id6929 . -1) (undo-tree-id6930 . -1) (undo-tree-id6931 . -1) (undo-tree-id6932 . -1) 847) nil (26116 15440 543921 514000) 0 nil])
([nil nil ((846 . 847)) nil (26116 15440 543909 813000) 0 nil])
([nil nil ((846 . 853) (#("a" 0 1 (fontified nil)) . 846) (846 . 847) (#("address" 0 7 (fontified nil)) . -846) (846 . 853) (#("a" 0 1 (fontified t)) . -846) (undo-tree-id6917 . -1) (undo-tree-id6918 . -1) (undo-tree-id6919 . -1) (undo-tree-id6920 . -1) (undo-tree-id6921 . -1) (undo-tree-id6922 . -1) 847) nil (26116 15440 543906 781000) 0 nil])
([nil nil ((853 . 857)) nil (26116 15440 543490 611000) 0 nil])
([nil nil ((857 . 864)) nil (26116 15440 543490 77000) 0 nil])
([nil nil ((862 . 868) (#("c_" 0 2 (fontified nil)) . 862) (862 . 864) (#("c_void" 0 6 (fontified nil)) . -862) (862 . 868) (#("c_" 0 2 (fontified t)) . -862) (undo-tree-id6909 . -2) (undo-tree-id6910 . -1) (undo-tree-id6911 . -1) (undo-tree-id6912 . -1) (undo-tree-id6913 . -2) (undo-tree-id6914 . -2) (undo-tree-id6915 . -2) (undo-tree-id6916 . -2) 864) nil (26116 15440 543488 758000) 0 nil])
([nil nil ((868 . 869)) nil (26116 15440 543482 242000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -868) (undo-tree-id6906 . -1) (undo-tree-id6907 . -1) (undo-tree-id6908 . -1) 869) nil (26116 15440 543481 380000) 0 nil])
([nil nil ((868 . 869)) nil (26116 15440 543478 466000) 0 nil])
([nil nil ((869 . 882)) nil (26116 15440 543477 873000) 0 nil])
([nil nil ((882 . 884)) nil (26116 15440 543477 286000) 0 nil])
([nil nil ((882 . 889) (#("io" 0 2 (fontified nil)) . 882) (882 . 884) (#("iov_len" 0 7 (fontified nil)) . -882) (882 . 889) (#("io" 0 2 (fontified t)) . -882) (undo-tree-id6901 . -2) (undo-tree-id6902 . -2) (undo-tree-id6903 . -1) (undo-tree-id6904 . -1) (undo-tree-id6905 . -2) 884) nil (26116 15440 543476 17000) 0 nil])
([nil nil ((889 . 894)) nil (26116 15440 543471 67000) 0 nil])
([nil nil ((apply yas--snippet-revive 891 900 #s(yas--snippet nil nil #s(yas--exit 900 nil) 49 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 900 nil) 49 nil nil nil nil)) (891 . 900) (#("size_of()$0" 0 11 (fontified nil)) . 891) (891 . 902) (#("siz" 0 3 (fontified nil)) . 891) (891 . 894) (#("size_of()" 0 9 (fontified nil)) . -891) (891 . 900) (#("siz" 0 3 (fontified t)) . -891) (undo-tree-id6891 . -3) (undo-tree-id6892 . -3) (undo-tree-id6893 . -1) (undo-tree-id6894 . -1) (undo-tree-id6895 . -1) (undo-tree-id6896 . -2) (undo-tree-id6897 . -2) (undo-tree-id6898 . -3) (undo-tree-id6899 . -3) (undo-tree-id6900 . -3) 894) nil (26116 15440 543468 745000) 0 nil])
([nil nil ((898 . 902)) nil (26116 15440 543454 482000) 0 nil])
([nil nil ((901 . 902)) nil (26116 15440 543452 870000) 0 nil])
([nil nil ((905 . 906)) nil (26116 15440 543448 53000) 0 nil])
([nil nil ((994 . 995) (t 26116 15440 595027 281000)) nil (26116 15457 644151 215000) 0 nil])
([nil nil ((#("liovcnt" 0 7 (fontified t)) . -985) (undo-tree-id6973 . -7) (undo-tree-id6974 . -7) (undo-tree-id6975 . -7) (undo-tree-id6976 . -7) (undo-tree-id6977 . -7) (undo-tree-id6978 . -7) (undo-tree-id6979 . -7) (undo-tree-id6980 . -7) (undo-tree-id6981 . -7) (undo-tree-id6982 . -7) (undo-tree-id6983 . -7) (undo-tree-id6984 . -7) (undo-tree-id6985 . -7) (undo-tree-id6986 . -7) (undo-tree-id6987 . -7) (undo-tree-id6988 . -7) (undo-tree-id6989 . -7) (undo-tree-id6990 . -7) 992) nil (26116 15457 644149 846000) 0 nil])
([nil nil ((985 . 986)) nil (26116 15457 644137 630000) 0 nil])
([nil nil ((#("riovcnt" 0 7 (fontified t)) . -1001) (undo-tree-id6971 . -7) (undo-tree-id6972 . -7) 1008) nil (26116 15457 644136 932000) 0 nil])
([nil nil ((1001 . 1002)) nil (26116 15457 644134 849000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . -1001) (undo-tree-id6967 . -1) (undo-tree-id6968 . -1) (undo-tree-id6969 . -1) (undo-tree-id6970 . -1) 1002) nil (26116 15457 644133 795000) 0 nil])
([nil nil ((1001 . 1002)) nil (26116 15457 644129 912000) 0 nil])
([nil nil ((#("flags" 0 5 (fontified t)) . -1004) (undo-tree-id6965 . -5) (undo-tree-id6966 . -5) 1009) nil (26116 15457 644127 963000) 0 nil])
([nil nil ((1004 . 1005)) nil (26116 15457 644117 510000) 0 nil])
([nil nil ((944 . 945) (t 26116 15457 661694 995000)) nil (26116 15469 180243 995000) 0 nil])
([nil nil ((935 . 941)) nil (26116 15469 180243 102000) 0 nil])
([nil nil ((#("e" 0 1 (face rust-unsafe fontified t)) . -940) (undo-tree-id6991 . -1) (undo-tree-id6992 . -1) (undo-tree-id6993 . -1) 941) nil (26116 15469 180241 498000) 0 nil])
([nil nil ((940 . 943)) nil (26116 15469 180232 579000) 0 nil])
([nil nil ((953 . 956) (1016 . 1017)) nil (26116 15469 180231 93000) 0 nil])
([nil nil ((1019 . 1028)) nil (26116 15469 180226 635000) 0 nil])
([nil nil ((588 . 599) (t 26116 15469 198362 370000)) nil (26116 15679 848102 331000) 0 nil])
([nil nil ((#("let mut buf: T;" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 11 (face font-lock-variable-name-face fontified t) 11 13 (fontified t) 13 14 (face font-lock-type-face fontified t) 14 15 (fontified t)) . 648) (undo-tree-id7144 . -15) (undo-tree-id7145 . -12) (undo-tree-id7146 . -12) (undo-tree-id7147 . -12) (undo-tree-id7148 . -12) (undo-tree-id7149 . -12) (undo-tree-id7150 . -12) (undo-tree-id7151 . -12) (undo-tree-id7152 . -12) (undo-tree-id7153 . -12) (undo-tree-id7154 . -12) (undo-tree-id7155 . -12) (undo-tree-id7156 . -12) (undo-tree-id7157 . -12) (undo-tree-id7158 . -12) (undo-tree-id7159 . -12) (undo-tree-id7160 . -12) (undo-tree-id7161 . -12) (undo-tree-id7162 . -12) (undo-tree-id7163 . -12) (undo-tree-id7164 . -12) (undo-tree-id7165 . -12) (undo-tree-id7166 . -12) (undo-tree-id7167 . -12) (undo-tree-id7168 . -12) (undo-tree-id7169 . -12) (undo-tree-id7170 . -12) (undo-tree-id7171 . -12) (undo-tree-id7172 . -12) (undo-tree-id7173 . -12) (undo-tree-id7174 . -12) (undo-tree-id7175 . -12) (undo-tree-id7176 . -12) (undo-tree-id7177 . -12) (undo-tree-id7178 . -15) (undo-tree-id7179 . -15) (undo-tree-id7180 . -15) (undo-tree-id7181 . -15) (undo-tree-id7182 . -15) (undo-tree-id7183 . -15) (undo-tree-id7184 . -15) (undo-tree-id7185 . -15) (undo-tree-id7186 . -15) (undo-tree-id7187 . -15) (undo-tree-id7188 . -15) (undo-tree-id7189 . -15) (undo-tree-id7190 . -15) (undo-tree-id7191 . -15) (undo-tree-id7192 . -15) (undo-tree-id7193 . -15) (undo-tree-id7194 . -15) (undo-tree-id7195 . -15) (undo-tree-id7196 . -15) (undo-tree-id7197 . -15) (undo-tree-id7198 . -15) (undo-tree-id7199 . -15) (undo-tree-id7200 . -15) (undo-tree-id7201 . -15) (undo-tree-id7202 . -15) (undo-tree-id7203 . -15) (undo-tree-id7204 . -15) (undo-tree-id7205 . -15) (undo-tree-id7206 . -15) (undo-tree-id7207 . -15) (undo-tree-id7208 . -15) (undo-tree-id7209 . -15) (undo-tree-id7210 . -15) (undo-tree-id7211 . -15) (undo-tree-id7212 . -15) (undo-tree-id7213 . -15) (undo-tree-id7214 . -15) (undo-tree-id7215 . -15) (undo-tree-id7216 . -15) (undo-tree-id7217 . -15)) nil (26116 15679 848098 946000) 0 nil])
([nil nil ((#("T>" 0 1 (face font-lock-type-face fontified t) 1 2 (face (rainbow-delimiters-depth-2-face) fontified t)) . -635) (undo-tree-id7134 . -2) (undo-tree-id7135 . -2) (undo-tree-id7136 . -1) (undo-tree-id7137 . -2) (undo-tree-id7138 . -2) (undo-tree-id7139 . -2) (undo-tree-id7140 . -2) (undo-tree-id7141 . -2) (undo-tree-id7142 . -2) (undo-tree-id7143 . -2) 637) nil (26116 15679 847969 417000) 0 nil])
([nil nil ((#("Result<" 0 6 (face font-lock-type-face fontified t) 6 7 (face (rainbow-delimiters-depth-2-face) fontified t)) . -628) (undo-tree-id7112 . -7) (undo-tree-id7113 . -7) (undo-tree-id7114 . -6) (undo-tree-id7115 . -6) (undo-tree-id7116 . -6) (undo-tree-id7117 . -6) (undo-tree-id7118 . -6) (undo-tree-id7119 . -6) (undo-tree-id7120 . -6) (undo-tree-id7121 . -6) (undo-tree-id7122 . -6) (undo-tree-id7123 . -7) (undo-tree-id7124 . -7) (undo-tree-id7125 . -7) (undo-tree-id7126 . -7) (undo-tree-id7127 . -7) (undo-tree-id7128 . -7) (undo-tree-id7129 . -7) (undo-tree-id7130 . -7) (undo-tree-id7131 . -7) (undo-tree-id7132 . -7) (undo-tree-id7133 . -7) 635) nil (26116 15679 847960 734000) 0 nil])
([nil nil ((628 . 629)) nil (26116 15679 847945 43000) 0 nil])
([nil nil ((628 . 632) (#("b" 0 1 (fontified nil)) . 628) (628 . 629) (#("bool" 0 4 (fontified nil)) . -628) (628 . 632) (#("b" 0 1 (fontified t)) . -628) (undo-tree-id7107 . -1) (undo-tree-id7108 . -1) (undo-tree-id7109 . -1) (undo-tree-id7110 . -1) (undo-tree-id7111 . -1) 629) nil (26116 15679 847943 694000) 0 nil])
([nil nil ((#("buf)" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-3-face) fontified t)) . -1032) (undo-tree-id7101 . -4) (undo-tree-id7102 . -4) (undo-tree-id7103 . -4) (undo-tree-id7104 . -4) (undo-tree-id7105 . -4) (undo-tree-id7106 . -4) 1036) nil (26116 15679 847938 840000) 0 nil])
([nil nil ((#("Ok(" 0 2 (face font-lock-type-face fontified t) 2 3 (face (rainbow-delimiters-depth-3-face) fontified t)) . -1029) (undo-tree-id7086 . -3) (undo-tree-id7087 . -3) (undo-tree-id7088 . -3) (undo-tree-id7089 . -3) (undo-tree-id7090 . -3) (undo-tree-id7091 . -3) (undo-tree-id7092 . -3) (undo-tree-id7093 . -3) (undo-tree-id7094 . -3) (undo-tree-id7095 . -3) (undo-tree-id7096 . -3) (undo-tree-id7097 . -3) (undo-tree-id7098 . -3) (undo-tree-id7099 . -3) (undo-tree-id7100 . -3) 1032) nil (26116 15679 847933 688000) 0 nil])
([nil nil ((1029 . 1031)) nil (26116 15679 847921 993000) 0 nil])
([nil nil ((apply yas--snippet-revive 1029 1033 #s(yas--snippet nil nil nil 50 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 50 nil nil nil nil)) (1029 . 1033) (#("true" 0 4 (fontified nil)) . 1029) (1029 . 1033) (#("tr" 0 2 (fontified nil)) . 1029) (1029 . 1031) (#("true" 0 4 (fontified nil)) . -1029) (1029 . 1033) (#("tr" 0 2 (fontified t)) . -1029) (undo-tree-id7079 . -2) (undo-tree-id7080 . -1) (undo-tree-id7081 . -1) (undo-tree-id7082 . -2) (undo-tree-id7083 . -2) (undo-tree-id7084 . -2) (undo-tree-id7085 . -2) 1031) nil (26116 15679 847919 999000) 0 nil])
([nil nil ((#("        
" 0 8 (fontified t) 8 9 (fontified t)) . 635) (undo-tree-id6996 . -8) (undo-tree-id6997 . -8) (undo-tree-id6998 . -8) (undo-tree-id6999 . -8) (undo-tree-id7000 . -8) (undo-tree-id7001 . -8) (undo-tree-id7002 . -8) (undo-tree-id7003 . -8) (undo-tree-id7004 . -8) (undo-tree-id7005 . -8) (undo-tree-id7006 . -8) (undo-tree-id7007 . -8) (undo-tree-id7008 . -8) (undo-tree-id7009 . -8) (undo-tree-id7010 . -8) (undo-tree-id7011 . -8) (undo-tree-id7012 . -8) (undo-tree-id7013 . -8) (undo-tree-id7014 . -8) (undo-tree-id7015 . -8) (undo-tree-id7016 . -8) (undo-tree-id7017 . -8) (undo-tree-id7018 . -8) (undo-tree-id7019 . -8) (undo-tree-id7020 . -8) (undo-tree-id7021 . -8) (undo-tree-id7022 . -8) (undo-tree-id7023 . -8) (undo-tree-id7024 . -8) (undo-tree-id7025 . -8) (undo-tree-id7026 . -8) (undo-tree-id7027 . -8) (undo-tree-id7028 . -8) (undo-tree-id7029 . -8) (undo-tree-id7030 . -8) (undo-tree-id7031 . -8) (undo-tree-id7032 . -8) (undo-tree-id7033 . -8) (undo-tree-id7034 . -8) (undo-tree-id7035 . -8) (undo-tree-id7036 . -8) (undo-tree-id7037 . -8) (undo-tree-id7038 . -8) (undo-tree-id7039 . -8) (undo-tree-id7040 . -8) (undo-tree-id7041 . -8) (undo-tree-id7042 . -8) (undo-tree-id7043 . -8) (undo-tree-id7044 . -8) (undo-tree-id7045 . -8) (undo-tree-id7046 . -8) (undo-tree-id7047 . -8) (undo-tree-id7048 . -8) (undo-tree-id7049 . -8) (undo-tree-id7050 . -8) (undo-tree-id7051 . -8) (undo-tree-id7052 . -8) (undo-tree-id7053 . -8) (undo-tree-id7054 . -8) (undo-tree-id7055 . -8) (undo-tree-id7056 . -8) (undo-tree-id7057 . -8) (undo-tree-id7058 . -8) (undo-tree-id7059 . -8) (undo-tree-id7060 . -8) (undo-tree-id7061 . -8) (undo-tree-id7062 . -8) (undo-tree-id7063 . -8) (undo-tree-id7064 . -8) (undo-tree-id7065 . -8) (undo-tree-id7066 . -8) (undo-tree-id7067 . -8) (undo-tree-id7068 . -8) (undo-tree-id7069 . -8) (undo-tree-id7070 . -8) (undo-tree-id7071 . -8) (undo-tree-id7072 . -8) (undo-tree-id7073 . -8) (undo-tree-id7074 . -8) (undo-tree-id7075 . -8) (undo-tree-id7076 . -8) (undo-tree-id7077 . -8) (undo-tree-id7078 . -9)) nil (26116 15679 847908 896000) 0 nil])
([nil nil ((#("buf" 0 3 (fontified t)) . -694) (undo-tree-id6994 . -3) (undo-tree-id6995 . -3) 697) nil (26116 15679 846880 749000) 0 nil])
([nil nil ((694 . 698)) nil (26116 15679 846869 567000) 0 nil])
([nil nil ((#("mut " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -690) (undo-tree-id7227 . -4) (undo-tree-id7228 . -4) (undo-tree-id7229 . -4) 694 (t 26116 15679 868375 301000)) nil (26116 15683 502468 464000) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . -689) (undo-tree-id7218 . -1) (undo-tree-id7219 . -1) (undo-tree-id7220 . -1) (undo-tree-id7221 . -1) (undo-tree-id7222 . -1) (undo-tree-id7223 . -1) (undo-tree-id7224 . -1) (undo-tree-id7225 . -1) (undo-tree-id7226 . -1) 690) nil (26116 15699 499022 36000) 0 nil])
([nil nil ((934 . 944) (t 26116 15700 45043 206000)) nil (26116 15767 743966 248000) 0 nil] [nil nil ((#("mut _ " 0 3 (face font-lock-keyword-face fontified t) 3 6 (fontified t)) . -698) (undo-tree-id7243 . -6) (undo-tree-id7244 . -6) (undo-tree-id7245 . -3) (undo-tree-id7246 . -6) (undo-tree-id7247 . -6) (undo-tree-id7248 . -6) (undo-tree-id7249 . -6) (undo-tree-id7250 . -6) (undo-tree-id7251 . -6) (undo-tree-id7252 . -6) 704 (t 26116 15683 521708 859000)) ((698 . 704)) (26116 15699 193672 140000) 0 nil])
([nil nil ((634 . 643)) nil (26116 15767 743965 375000) 0 nil])
([nil nil ((#("as *" 0 2 (face font-lock-keyword-face fontified t) 2 4 (fontified t)) . -694) (undo-tree-id7230 . -4) (undo-tree-id7231 . -4) (undo-tree-id7232 . -2) (undo-tree-id7233 . -4) (undo-tree-id7234 . -4) (undo-tree-id7235 . -4) (undo-tree-id7236 . -4) (undo-tree-id7237 . -4) (undo-tree-id7238 . -4) (undo-tree-id7239 . -4) (undo-tree-id7240 . -4) (undo-tree-id7241 . -4) (undo-tree-id7242 . -4) 698) ((694 . 698) (t 26116 15697 431709 713000)) (26116 15697 411548 86000) 0 nil])
([nil nil ((643 . 658)) nil (26116 15767 743964 493000) 0 nil])
nil
([nil nil ((apply yas--snippet-revive 654 663 #s(yas--snippet nil nil #s(yas--exit 663 nil) 51 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 663 nil) 51 nil nil nil nil)) (654 . 663) (#("size_of()$0" 0 11 (fontified nil)) . 654) (654 . 665) (#("size" 0 4 (fontified nil)) . 654) (654 . 658) (#("size_of()" 0 9 (fontified nil)) . -654) (654 . 663) (#("size" 0 4 (fontified t)) . -654) (undo-tree-id7253 . -4) (undo-tree-id7254 . -1) (undo-tree-id7255 . -1) (undo-tree-id7256 . -2) (undo-tree-id7257 . -2) (undo-tree-id7258 . -3) (undo-tree-id7259 . -3) (undo-tree-id7260 . -4) (undo-tree-id7261 . -4) (undo-tree-id7262 . -4) (undo-tree-id7263 . -4) 658) nil (26116 15767 743960 956000) 0 nil])
([nil nil ((661 . 665)) nil (26116 15767 743401 201000) 0 nil])
([nil nil ((664 . 665)) nil (26116 15767 743399 401000) 0 nil])
([nil nil ((668 . 669)) nil (26116 15767 743395 65000) 0 nil])
([nil nil ((#("T>()" 0 1 (face font-lock-type-face fontified t) 1 2 (face (rainbow-delimiters-depth-4-face) fontified t) 2 3 (face (rainbow-delimiters-depth-4-face) fontified t) 3 4 (face (rainbow-delimiters-depth-4-face) fontified t)) . -786) (undo-tree-id7315 . -4) (undo-tree-id7316 . -4) (undo-tree-id7317 . -4) (undo-tree-id7318 . -4) (undo-tree-id7319 . -4) (undo-tree-id7320 . -4) (undo-tree-id7321 . -4) (undo-tree-id7322 . -4) (undo-tree-id7323 . -4) 790 (t 26116 15767 765047 363000)) nil (26116 15776 888933 304000) 0 nil])
([nil nil ((#("of::<" 0 2 (fontified t) 2 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t)) . -781) (undo-tree-id7304 . -5) (undo-tree-id7305 . -5) (undo-tree-id7306 . -5) (undo-tree-id7307 . -5) (undo-tree-id7308 . -5) (undo-tree-id7309 . -5) (undo-tree-id7310 . -5) (undo-tree-id7311 . -5) (undo-tree-id7312 . -5) (undo-tree-id7313 . -5) (undo-tree-id7314 . -5) 786) nil (26116 15776 888926 206000) 0 nil])
([nil nil ((#("size_" 0 5 (fontified t)) . -776) (undo-tree-id7291 . -5) (undo-tree-id7292 . -5) (undo-tree-id7293 . -5) (undo-tree-id7294 . -5) (undo-tree-id7295 . -5) (undo-tree-id7296 . -5) (undo-tree-id7297 . -5) (undo-tree-id7298 . -5) (undo-tree-id7299 . -5) (undo-tree-id7300 . -5) (undo-tree-id7301 . -5) (undo-tree-id7302 . -5) (undo-tree-id7303 . -5) 781) nil (26116 15776 888917 434000) 0 nil])
([nil nil ((776 . 778)) nil (26116 15776 888908 532000) 0 nil])
([nil nil ((776 . 780) (#("si" 0 2 (fontified nil)) . 776) (776 . 778) (#("size" 0 4 (fontified nil)) . -776) (776 . 780) (#("si" 0 2 (fontified t)) . -776) (undo-tree-id7286 . -2) (undo-tree-id7287 . -1) (undo-tree-id7288 . -1) (undo-tree-id7289 . -2) (undo-tree-id7290 . -2) 778) nil (26116 15776 888907 222000) 0 nil])
([nil nil ((#("T>()" 0 1 (face font-lock-type-face fontified t) 1 2 (face (rainbow-delimiters-depth-4-face) fontified t) 2 3 (face (rainbow-delimiters-depth-4-face) fontified t) 3 4 (face (rainbow-delimiters-depth-4-face) fontified t)) . -904) (undo-tree-id7283 . -4) (undo-tree-id7284 . -1) (undo-tree-id7285 . -4) 908) nil (26116 15776 888902 446000) 0 nil])
([nil nil ((#("of::<" 0 2 (fontified t) 2 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t)) . -899) (undo-tree-id7277 . -5) (undo-tree-id7278 . -2) (undo-tree-id7279 . -5) (undo-tree-id7280 . -5) (undo-tree-id7281 . -5) (undo-tree-id7282 . -5) 904) nil (26116 15776 888899 542000) 0 nil])
([nil nil ((#("size_" 0 5 (fontified t)) . -894) (undo-tree-id7269 . -5) (undo-tree-id7270 . -5) (undo-tree-id7271 . -5) (undo-tree-id7272 . -5) (undo-tree-id7273 . -5) (undo-tree-id7274 . -5) (undo-tree-id7275 . -5) (undo-tree-id7276 . -5) 899) nil (26116 15776 888894 672000) 0 nil])
([nil nil ((894 . 895)) nil (26116 15776 888887 474000) 0 nil])
([nil nil ((894 . 898) (#("s" 0 1 (fontified nil)) . 894) (894 . 895) (#("size" 0 4 (fontified nil)) . -894) (894 . 898) (#("s" 0 1 (fontified t)) . -894) (undo-tree-id7264 . -1) (undo-tree-id7265 . -1) (undo-tree-id7266 . -1) (undo-tree-id7267 . -1) (undo-tree-id7268 . -1) 895) nil (26116 15776 888883 110000) 0 nil])
([nil nil ((1032 . 1041) (t 26116 15776 908381 258000)) nil (26116 15826 684458 537000) 0 nil])
([nil nil ((1041 . 1047)) nil (26116 15826 684457 701000) 0 nil])
([nil nil ((#("if len" 0 2 (face font-lock-keyword-face fontified t) 2 6 (fontified t)) . 1041) (undo-tree-id7449 . -1) (undo-tree-id7450 . -1) (undo-tree-id7451 . -2) (undo-tree-id7452 . -2) (undo-tree-id7453 . -3) (undo-tree-id7454 . -3) (undo-tree-id7455 . -3) (undo-tree-id7456 . -4) (undo-tree-id7457 . -4) (undo-tree-id7458 . -5) (undo-tree-id7459 . -5) (undo-tree-id7460 . -6) (undo-tree-id7461 . -6) (undo-tree-id7462 . -6) (undo-tree-id7463 . -6) (undo-tree-id7464 . -6) (undo-tree-id7465 . -5) (undo-tree-id7466 . 1) (undo-tree-id7467 . -6)) nil (26116 15826 684456 421000) 0 nil])
([nil nil ((1022 . 1035)) nil (26116 15826 684444 899000) 0 nil])
([nil nil ((1035 . 1037)) nil (26116 15826 684444 338000) 0 nil])
([nil nil ((1037 . 1046)) nil (26116 15826 684443 741000) 0 nil])
([nil nil ((1045 . 1049) (#("s" 0 1 (fontified nil)) . 1045) (1045 . 1046) (#("self" 0 4 (fontified nil)) . -1045) (1045 . 1049) (#("s" 0 1 (fontified t)) . -1045) (undo-tree-id7443 . -1) (undo-tree-id7444 . -1) (undo-tree-id7445 . -1) (undo-tree-id7446 . -1) (undo-tree-id7447 . -1) (undo-tree-id7448 . -1) 1046) nil (26116 15826 684442 404000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -1045) (undo-tree-id7415 . -1) (undo-tree-id7416 . -1) (undo-tree-id7417 . -1) (undo-tree-id7418 . -1) (undo-tree-id7419 . -1) (undo-tree-id7420 . -1) (undo-tree-id7421 . -1) (undo-tree-id7422 . -1) (undo-tree-id7423 . -1) (undo-tree-id7424 . -1) (#("e" 0 1 (fontified t)) . -1046) (undo-tree-id7425 . -1) (undo-tree-id7426 . -1) (undo-tree-id7427 . -1) (undo-tree-id7428 . -1) (undo-tree-id7429 . -1) (undo-tree-id7430 . -1) (undo-tree-id7431 . -1) (undo-tree-id7432 . -1) (#("l" 0 1 (fontified t)) . -1047) (undo-tree-id7433 . -1) (undo-tree-id7434 . -1) (undo-tree-id7435 . -1) (undo-tree-id7436 . -1) (undo-tree-id7437 . -1) (undo-tree-id7438 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -1048) (undo-tree-id7439 . -1) (undo-tree-id7440 . -1) (undo-tree-id7441 . -1) (undo-tree-id7442 . -1) 1049) nil (26116 15826 684436 351000) 0 nil])
([nil nil ((1045 . 1047)) nil (26116 15826 684418 603000) 0 nil])
([nil nil ((1045 . 1049) (#("si" 0 2 (fontified nil)) . 1045) (1045 . 1047) (#("size" 0 4 (fontified nil)) . -1045) (1045 . 1049) (#("si" 0 2 (fontified t)) . -1045) (undo-tree-id7407 . -2) (undo-tree-id7408 . -1) (undo-tree-id7409 . -1) (undo-tree-id7410 . -1) (undo-tree-id7411 . -2) (undo-tree-id7412 . -2) (undo-tree-id7413 . -2) (undo-tree-id7414 . -2) 1047) nil (26116 15826 684417 398000) 0 nil])
([nil nil ((1049 . 1052)) nil (26116 15826 684411 51000) 0 nil])
([nil nil ((1051 . 1064)) nil (26116 15826 684410 487000) 0 nil])
([nil nil ((1064 . 1065)) nil (26116 15826 684409 892000) 0 nil])
([nil nil ((1064 . 1067) (#("f" 0 1 (fontified nil)) . 1064) (1064 . 1065) (#("f32" 0 3 (fontified nil)) . -1064) (1064 . 1067) (#("f" 0 1 (fontified t)) . -1064) (undo-tree-id7404 . -1) (undo-tree-id7405 . -1) (undo-tree-id7406 . -1) 1065) nil (26116 15826 684408 855000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -1064) (undo-tree-id7386 . -1) (undo-tree-id7387 . -1) (undo-tree-id7388 . -1) (undo-tree-id7389 . -1) (undo-tree-id7390 . -1) (undo-tree-id7391 . -1) (undo-tree-id7392 . -1) (undo-tree-id7393 . -1) (#("3" 0 1 (fontified t)) . -1065) (undo-tree-id7394 . -1) (undo-tree-id7395 . -1) (undo-tree-id7396 . -1) (undo-tree-id7397 . -1) (undo-tree-id7398 . -1) (undo-tree-id7399 . -1) (#("2" 0 1 (face font-lock-type-face fontified t)) . -1066) (undo-tree-id7400 . -1) (undo-tree-id7401 . -1) (undo-tree-id7402 . -1) (undo-tree-id7403 . -1) 1067) nil (26116 15826 684404 902000) 0 nil])
([nil nil ((1053 . 1065) (#("                " 0 16 (fontified nil)) . 1052) (1052 . 1068) (#("            " 0 12 (fontified nil)) . 1052) (undo-tree-id7371 . -12) (undo-tree-id7372 . -12) (undo-tree-id7373 . -12) (undo-tree-id7374 . -12) (undo-tree-id7375 . -12) (undo-tree-id7376 . -12) (undo-tree-id7377 . -12) (undo-tree-id7378 . -12) (undo-tree-id7379 . -12) (undo-tree-id7380 . -12) (undo-tree-id7381 . -12) (undo-tree-id7382 . -12) (undo-tree-id7383 . -12) (undo-tree-id7384 . -12) (undo-tree-id7385 . -12) (1064 . 1065)) nil (26116 15826 684392 255000) 0 nil])
([nil nil ((1052 . 1068)) nil (26116 15826 684381 364000) 0 nil])
([nil nil ((1068 . 1069)) nil (26116 15826 684380 802000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -1068) (undo-tree-id7366 . -1) (undo-tree-id7367 . -1) (undo-tree-id7368 . -1) (undo-tree-id7369 . -1) (undo-tree-id7370 . -1) 1069) nil (26116 15826 684379 762000) 0 nil])
([nil nil ((1068 . 1070)) nil (26116 15826 684376 237000) 0 nil])
([nil nil ((apply yas--snippet-revive 1068 1076 #s(yas--snippet nil nil #s(yas--exit 1075 nil) 52 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1075 nil) 52 nil nil nil nil)) (1068 . 1076) (#("return $0;" 0 10 (fontified nil)) . 1068) (1068 . 1078) (#("rt" 0 2 (fontified nil)) . 1068) (1068 . 1070) (#("return" 0 6 (fontified nil)) . -1068) (1068 . 1074) (#("rt" 0 2 (fontified t)) . -1068) (undo-tree-id7359 . -2) (undo-tree-id7360 . -1) (undo-tree-id7361 . -1) (undo-tree-id7362 . -2) (undo-tree-id7363 . -2) (undo-tree-id7364 . -2) (undo-tree-id7365 . -2) 1070) nil (26116 15826 684374 753000) 0 nil])
([nil nil ((1075 . 1076)) nil (26116 15826 684368 213000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1075) (undo-tree-id7356 . -1) (undo-tree-id7357 . -1) (undo-tree-id7358 . -1) 1076) nil (26116 15826 684367 356000) 0 nil])
([nil nil ((1075 . 1077)) nil (26116 15826 684364 505000) 0 nil])
([nil nil ((apply yas--snippet-revive 1075 1080 #s(yas--snippet nil nil nil 53 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 53 nil nil nil nil)) (1075 . 1080) (#("false" 0 5 (fontified nil)) . 1075) (1075 . 1080) (#("fa" 0 2 (fontified nil)) . 1075) (1075 . 1077) (#("false" 0 5 (fontified nil)) . -1075) (1075 . 1080) (#("fa" 0 2 (fontified t)) . -1075) (undo-tree-id7349 . -2) (undo-tree-id7350 . -1) (undo-tree-id7351 . -1) (undo-tree-id7352 . -2) (undo-tree-id7353 . -2) (undo-tree-id7354 . -2) (undo-tree-id7355 . -2) 1077) nil (26116 15826 684362 195000) 0 nil])
([nil nil ((#("        
" 0 8 (fontified t) 8 9 (fontified t)) . 1106) (undo-tree-id7324 . -8) (undo-tree-id7325 . -8) (undo-tree-id7326 . -8) (undo-tree-id7327 . -8) (undo-tree-id7328 . -8) (undo-tree-id7329 . -8) (undo-tree-id7330 . -8) (undo-tree-id7331 . -8) (undo-tree-id7332 . -8) (undo-tree-id7333 . -8) (undo-tree-id7334 . -8) (undo-tree-id7335 . -8) (undo-tree-id7336 . -8) (undo-tree-id7337 . -8) (undo-tree-id7338 . -8) (undo-tree-id7339 . -8) (undo-tree-id7340 . -8) (undo-tree-id7341 . -8) (undo-tree-id7342 . -8) (undo-tree-id7343 . -8) (undo-tree-id7344 . -8) (undo-tree-id7345 . -8) (undo-tree-id7346 . -8) (undo-tree-id7347 . -8) (undo-tree-id7348 . -9)) nil (26116 15826 684351 871000) 0 nil])
([nil nil ((1049 . 1053) (t 26116 15826 705050 981000)) nil (26116 15838 347459 861000) 0 nil])
([nil nil ((1053 . 1056)) nil (26116 15838 347458 570000) 0 nil])
([nil nil ((1053 . 1058) (#("isi" 0 3 (fontified nil)) . 1053) (1053 . 1056) (#("isize" 0 5 (fontified nil)) . -1053) (1053 . 1058) (#("isi" 0 3 (fontified t)) . -1053) (undo-tree-id7468 . -3) (undo-tree-id7469 . -1) (undo-tree-id7470 . -1) (undo-tree-id7471 . -1) (undo-tree-id7472 . -1) (undo-tree-id7473 . -1) (undo-tree-id7474 . -2) (undo-tree-id7475 . -2) (undo-tree-id7476 . -2) (undo-tree-id7477 . -2) (undo-tree-id7478 . -2) (undo-tree-id7479 . -3) (undo-tree-id7480 . -3) (undo-tree-id7481 . -3) (undo-tree-id7482 . -3) (undo-tree-id7483 . -3) 1056) nil (26116 15838 347454 312000) 0 nil])
([nil nil ((1136 . 1137) (t 26116 15838 365051 697000)) nil (26116 15858 524743 505000) 0 nil])
([nil nil ((1137 . 1138)) nil (26116 15858 524742 717000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -1137) (undo-tree-id7498 . -1) (undo-tree-id7499 . -1) (undo-tree-id7500 . -1) (undo-tree-id7501 . -1) 1138) nil (26116 15858 524741 889000) 0 nil])
([nil nil ((1137 . 1139)) nil (26116 15858 524738 105000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1142 1163 nil nil nil t #s(yas--exit 1170 nil))) #s(yas--exit 1170 nil) 54 nil #s(yas--field 1 1142 1163 nil nil nil t #s(yas--exit 1170 nil)) nil nil)) (1137 . 1151) (#("impl $1 {
    $0
}" 0 18 (fontified nil)) . 1137) (1137 . 1155) (#("im" 0 2 (fontified nil)) . 1137) (1137 . 1139) (#("impl" 0 4 (fontified nil)) . -1137) (1137 . 1141) (#("im" 0 2 (fontified t)) . -1137) (undo-tree-id7492 . -2) (undo-tree-id7493 . -1) (undo-tree-id7494 . -1) (undo-tree-id7495 . -2) (undo-tree-id7496 . -2) (undo-tree-id7497 . -2) 1139) nil (26116 15858 524736 616000) 0 nil])
([nil nil ((1142 . 1143)) nil (26116 15858 524730 761000) 0 nil])
([nil nil ((1142 . 1150) (#("R" 0 1 (fontified nil)) . 1142) (undo-tree-id7484 . -1) (1142 . 1143) (#("Readable" 0 8 (fontified nil)) . -1142) (undo-tree-id7485 . -8) (1142 . 1150) (#("R" 0 1 (face font-lock-type-face fontified t)) . -1142) (undo-tree-id7486 . -1) (undo-tree-id7487 . -1) (undo-tree-id7488 . -1) (undo-tree-id7489 . -1) (undo-tree-id7490 . -1) (undo-tree-id7491 . -1) 1143) nil (26116 15858 524728 705000) 0 nil])
([nil nil ((1150 . 1155)) nil (26116 15858 524714 575000) 0 nil])
([nil nil ((1155 . 1158)) nil (26116 15858 524713 169000) 0 nil])
([nil nil ((1167 . 1168) 1158) nil (26116 15858 524708 877000) 0 nil])
([nil nil ((1150 . 1152) (t 26116 15858 545052 936000)) nil (26116 15864 677783 844000) 0 nil])
([nil nil ((1151 . 1152)) nil (26116 15864 677782 696000) 0 nil])
([nil nil ((#("F" 0 1 (face font-lock-type-face fontified t)) . -1151) (undo-tree-id7502 . -1) (undo-tree-id7503 . -1) (undo-tree-id7504 . -1) 1152) nil (26116 15864 677780 638000) 0 nil])
([nil nil ((1151 . 1154)) nil (26116 15864 677768 505000) 0 nil])
([nil nil ((apply yas--snippet-revive 1137 1173 #s(yas--snippet nil (#s(yas--field 1 1142 1163 nil nil nil t #s(yas--exit 1170 nil))) #s(yas--exit 1170 nil) 54 nil #s(yas--field 1 1142 1163 nil nil nil t #s(yas--exit 1170 nil)) nil nil))) nil (26116 15871 222209 660000) 0 nil])
([nil nil ((#("
impl Readable<f32> for f32 {
    
}
" 0 1 (fontified t) 1 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 14 (face font-lock-type-face fontified t) 14 15 (face (rainbow-delimiters-depth-1-face) fontified t) 15 18 (face font-lock-type-face fontified t) 18 19 (face (rainbow-delimiters-depth-1-face) fontified t) 19 20 (fontified t) 20 23 (face font-lock-keyword-face fontified t) 23 24 (fontified t) 24 27 (face font-lock-type-face fontified t) 27 28 (fontified t) 28 29 (face (rainbow-delimiters-depth-1-face) fontified t) 29 30 (fontified t) 30 35 (fontified t) 35 36 (face (rainbow-delimiters-depth-1-face) fontified t) 36 37 (fontified t)) . 1136) (undo-tree-id7505 . -37) (undo-tree-id7506 . -15) (undo-tree-id7507 . -15) (undo-tree-id7508 . -15) (undo-tree-id7509 . 19) (undo-tree-id7510 . -18) (undo-tree-id7511 . -18) (undo-tree-id7512 . -18) (undo-tree-id7513 . -18) (undo-tree-id7514 . -18) (undo-tree-id7515 . -18) (undo-tree-id7516 . -18) (undo-tree-id7517 . -18) (undo-tree-id7518 . -18) (undo-tree-id7519 . -18) (undo-tree-id7520 . -18) (undo-tree-id7521 . -18) (undo-tree-id7522 . -18) (undo-tree-id7523 . -34) (undo-tree-id7524 . -18) (undo-tree-id7525 . -34) (undo-tree-id7526 . -34) (undo-tree-id7527 . -34) (undo-tree-id7528 . -34) (undo-tree-id7529 . -34) (undo-tree-id7530 . -36) (undo-tree-id7531 . -36) (undo-tree-id7532 . -36) (undo-tree-id7533 . -36) (undo-tree-id7534 . -36) (undo-tree-id7535 . -37) (undo-tree-id7536 . -37) (undo-tree-id7537 . -37) (undo-tree-id7538 . -36) (undo-tree-id7539 . -34) (undo-tree-id7540 . -7) (undo-tree-id7541 . -6) (undo-tree-id7542 . -5) (undo-tree-id7543 . -37) (t 26116 15864 728386 648000)) nil (26116 15871 222204 977000) 0 nil])
([nil nil ((1022 . 1035) (t 26116 15871 241720 382000)) nil (26116 16323 34058 767000) 0 nil])
([nil nil ((1035 . 1040)) nil (26116 16323 34057 910000) 0 nil])
([nil nil ((apply yas--snippet-revive 1035 1045 #s(yas--snippet nil nil #s(yas--exit 1044 nil) 60 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1044 nil) 60 nil nil nil nil)) (1035 . 1045) (#("println!($0)" 0 12 (fontified nil)) . 1035) (1035 . 1047) (#("print" 0 5 (fontified nil)) . 1035) (1035 . 1040) (#("println!(â€¦)" 0 11 (fontified nil)) . -1035) (1035 . 1046) (#("print" 0 5 (fontified t)) . -1035) (undo-tree-id7555 . -5) (undo-tree-id7556 . -1) (undo-tree-id7557 . -1) (undo-tree-id7558 . -2) (undo-tree-id7559 . -3) (undo-tree-id7560 . -4) (undo-tree-id7561 . -5) (undo-tree-id7562 . -5) (undo-tree-id7563 . -5) (undo-tree-id7564 . -5) 1040) nil (26116 16323 34056 233000) 0 nil])
([nil nil ((1044 . 1046)) nil (26116 16323 34047 91000) 0 nil])
([nil nil ((1045 . 1047)) nil (26116 16323 34046 518000) 0 nil])
([nil nil ((1048 . 1051)) nil (26116 16323 34045 304000) 0 nil])
([nil nil ((1050 . 1053) (#("l" 0 1 (fontified nil)) . 1050) (1050 . 1051) (#("len" 0 3 (fontified nil)) . -1050) (1050 . 1053) (#("l" 0 1 (fontified t)) . -1050) (undo-tree-id7544 . -1) (undo-tree-id7545 . -1) (undo-tree-id7546 . -1) (undo-tree-id7547 . -1) (undo-tree-id7548 . -1) (undo-tree-id7549 . -1) (undo-tree-id7550 . -1) (undo-tree-id7551 . -1) (undo-tree-id7552 . -1) (undo-tree-id7553 . -1) (undo-tree-id7554 . -1) 1051) nil (26116 16323 34042 486000) 0 nil])
([nil nil ((1054 . 1055)) nil (26116 16323 34021 619000) 0 nil])
([nil nil ((1093 . 1110) (t 26116 16323 41748 115000)) nil (26116 16471 656932 517000) 0 nil])
([nil nil ((1110 . 1111)) nil (26116 16471 656931 782000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -1110) (undo-tree-id7832 . -1) (undo-tree-id7833 . -1) (undo-tree-id7834 . -1) (undo-tree-id7835 . -1) (undo-tree-id7836 . -1) 1111) nil (26116 16471 656930 915000) 0 nil])
([nil nil ((#("println!(\"{}\", len);" 0 8 (face rust-builtin-formatting-macro fontified t) 8 9 (face (rainbow-delimiters-depth-4-face) fontified t) 9 10 (face font-lock-string-face fontified t) 10 12 (face rust-string-interpolation fontified t) 12 13 (face font-lock-string-face fontified t) 13 15 (fontified t) 15 18 (fontified t) 18 19 (face (rainbow-delimiters-depth-4-face) fontified t) 19 20 (fontified t)) . 1035) (undo-tree-id7767 . -20) (undo-tree-id7768 . -14) (undo-tree-id7769 . -15) (undo-tree-id7770 . -15) (undo-tree-id7771 . -15) (undo-tree-id7772 . -15) (undo-tree-id7773 . -15) (undo-tree-id7774 . -15) (undo-tree-id7775 . -15) (undo-tree-id7776 . -15) (undo-tree-id7777 . -15) (undo-tree-id7778 . -20) (undo-tree-id7779 . -20) (undo-tree-id7780 . -20) (undo-tree-id7781 . -20) (undo-tree-id7782 . -20) (undo-tree-id7783 . -20) (undo-tree-id7784 . -20) (undo-tree-id7785 . -20) (undo-tree-id7786 . -20) (undo-tree-id7787 . -20) (undo-tree-id7788 . -20) (undo-tree-id7789 . -20) (undo-tree-id7790 . -20) (undo-tree-id7791 . -20) (undo-tree-id7792 . -20) (undo-tree-id7793 . -20) (undo-tree-id7794 . -20) (undo-tree-id7795 . -20) (undo-tree-id7796 . -20) (undo-tree-id7797 . -20) (undo-tree-id7798 . -20) (undo-tree-id7799 . -20) (undo-tree-id7800 . -20) (undo-tree-id7801 . -20) (undo-tree-id7802 . -20) (undo-tree-id7803 . -20) (undo-tree-id7804 . -20) (undo-tree-id7805 . -20) (undo-tree-id7806 . -20) (undo-tree-id7807 . -20) (undo-tree-id7808 . -20) (undo-tree-id7809 . -20) (undo-tree-id7810 . -20) (undo-tree-id7811 . -20) (undo-tree-id7812 . -20) (undo-tree-id7813 . -20) (undo-tree-id7814 . -20) (undo-tree-id7815 . -20) (undo-tree-id7816 . -20) (undo-tree-id7817 . -20) (undo-tree-id7818 . -20) (undo-tree-id7819 . -20) (undo-tree-id7820 . -20) (undo-tree-id7821 . -20) (undo-tree-id7822 . -20) (undo-tree-id7823 . -20) (undo-tree-id7824 . -20) (undo-tree-id7825 . -20) (undo-tree-id7826 . -20) (undo-tree-id7827 . -20) (undo-tree-id7828 . -20) (undo-tree-id7829 . -20) (undo-tree-id7830 . -20) (undo-tree-id7831 . -20)) nil (26116 16471 656924 208000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1035) (undo-tree-id7766 . -1)) nil (26116 16471 656080 299000) 0 nil])
([nil nil ((#("            " 0 12 (fontified t)) . -1035)) nil (26116 16471 656078 579000) 0 nil])
([nil nil ((1077 . 1081)) nil (26116 16471 656077 999000) 0 nil])
([nil nil ((apply yas--snippet-revive 1077 1088 #s(yas--snippet nil nil #s(yas--exit 1087 nil) 61 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1087 nil) 61 nil nil nil nil)) (1077 . 1088) (#("eprintln!($0)" 0 13 (fontified nil)) . 1077) (1077 . 1090) (#("prin" 0 4 (fontified nil)) . 1077) (1077 . 1081) (#("eprintln!(â€¦)" 0 12 (fontified nil)) . -1077) (1077 . 1089) (#("prin" 0 4 (fontified t)) . -1077) (undo-tree-id7757 . -4) (undo-tree-id7758 . -1) (undo-tree-id7759 . -1) (undo-tree-id7760 . -2) (undo-tree-id7761 . -3) (undo-tree-id7762 . -4) (undo-tree-id7763 . -4) (undo-tree-id7764 . -4) (undo-tree-id7765 . -4) 1081) nil (26116 16471 656076 583000) 0 nil])
([nil nil ((1087 . 1089)) nil (26116 16471 656069 24000) 0 nil])
([nil nil ((1088 . 1093)) nil (26116 16471 656068 452000) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-string-face fontified t)) . -1092) (undo-tree-id7747 . -1) (undo-tree-id7748 . -1) (undo-tree-id7749 . -1) (undo-tree-id7750 . -1) (undo-tree-id7751 . -1) (undo-tree-id7752 . -1) (undo-tree-id7753 . -1) (undo-tree-id7754 . -1) (undo-tree-id7755 . -1) (undo-tree-id7756 . -1) 1093) nil (26116 16471 656067 520000) 0 nil])
([nil nil ((1092 . 1102)) nil (26116 16471 656060 999000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-string-face fontified t)) . -1098) (undo-tree-id7655 . -1) (undo-tree-id7656 . -1) (undo-tree-id7657 . -1) (undo-tree-id7658 . -1) (undo-tree-id7659 . -1) (undo-tree-id7660 . -1) (undo-tree-id7661 . -1) (undo-tree-id7662 . -1) (undo-tree-id7663 . -1) (undo-tree-id7664 . -1) (undo-tree-id7665 . -1) (undo-tree-id7666 . -1) (undo-tree-id7667 . -1) (undo-tree-id7668 . -1) (undo-tree-id7669 . -1) (undo-tree-id7670 . -1) (undo-tree-id7671 . -1) (undo-tree-id7672 . -1) (undo-tree-id7673 . -1) (undo-tree-id7674 . -1) (undo-tree-id7675 . -1) (undo-tree-id7676 . -1) (undo-tree-id7677 . -1) (undo-tree-id7678 . -1) (undo-tree-id7679 . -1) (undo-tree-id7680 . -1) (undo-tree-id7681 . -1) (undo-tree-id7682 . -1) (undo-tree-id7683 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -1099) (undo-tree-id7684 . -1) (undo-tree-id7685 . -1) (undo-tree-id7686 . -1) (undo-tree-id7687 . -1) (undo-tree-id7688 . -1) (undo-tree-id7689 . -1) (undo-tree-id7690 . -1) (undo-tree-id7691 . -1) (undo-tree-id7692 . -1) (undo-tree-id7693 . -1) (undo-tree-id7694 . -1) (undo-tree-id7695 . -1) (undo-tree-id7696 . -1) (undo-tree-id7697 . -1) (undo-tree-id7698 . -1) (undo-tree-id7699 . -1) (undo-tree-id7700 . -1) (undo-tree-id7701 . -1) (undo-tree-id7702 . -1) (undo-tree-id7703 . -1) (undo-tree-id7704 . -1) (undo-tree-id7705 . -1) (undo-tree-id7706 . -1) (undo-tree-id7707 . -1) (undo-tree-id7708 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -1100) (undo-tree-id7709 . -1) (undo-tree-id7710 . -1) (undo-tree-id7711 . -1) (undo-tree-id7712 . -1) (undo-tree-id7713 . -1) (undo-tree-id7714 . -1) (undo-tree-id7715 . -1) (undo-tree-id7716 . -1) (undo-tree-id7717 . -1) (undo-tree-id7718 . -1) (undo-tree-id7719 . -1) (undo-tree-id7720 . -1) (undo-tree-id7721 . -1) (undo-tree-id7722 . -1) (undo-tree-id7723 . -1) (undo-tree-id7724 . -1) (undo-tree-id7725 . -1) (undo-tree-id7726 . -1) (undo-tree-id7727 . -1) (undo-tree-id7728 . -1) (undo-tree-id7729 . -1) (#("d" 0 1 (face font-lock-string-face fontified t)) . -1101) (undo-tree-id7730 . -1) (undo-tree-id7731 . -1) (undo-tree-id7732 . -1) (undo-tree-id7733 . -1) (undo-tree-id7734 . -1) (undo-tree-id7735 . -1) (undo-tree-id7736 . -1) (undo-tree-id7737 . -1) (undo-tree-id7738 . -1) (undo-tree-id7739 . -1) (undo-tree-id7740 . -1) (undo-tree-id7741 . -1) (undo-tree-id7742 . -1) (undo-tree-id7743 . -1) (undo-tree-id7744 . -1) (undo-tree-id7745 . -1) (undo-tree-id7746 . -1) 1102) nil (26116 16471 656057 155000) 0 nil])
([nil nil ((1098 . 1101)) nil (26116 16471 656000 890000) 0 nil])
([nil nil ((#("g" 0 1 (face font-lock-string-face fontified t)) . -1098) (undo-tree-id7634 . -1) (undo-tree-id7635 . -1) (undo-tree-id7636 . -1) (undo-tree-id7637 . -1) (undo-tree-id7638 . -1) (undo-tree-id7639 . -1) (undo-tree-id7640 . -1) (undo-tree-id7641 . -1) (undo-tree-id7642 . -1) (undo-tree-id7643 . -1) (undo-tree-id7644 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -1099) (undo-tree-id7645 . -1) (undo-tree-id7646 . -1) (undo-tree-id7647 . -1) (undo-tree-id7648 . -1) (undo-tree-id7649 . -1) (undo-tree-id7650 . -1) (undo-tree-id7651 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -1100) (undo-tree-id7652 . -1) (undo-tree-id7653 . -1) (undo-tree-id7654 . -1) 1101) nil (26116 16471 655999 314000) 0 nil])
([nil nil ((1098 . 1102)) nil (26116 16471 655984 980000) 0 nil])
([nil nil ((1102 . 1112)) nil (26116 16471 655984 454000) 0 nil])
([nil nil ((1111 . 1113)) nil (26116 16471 655983 933000) 0 nil])
([nil nil ((1115 . 1117)) nil (26116 16471 655983 346000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1116) (undo-tree-id7625 . -1) (undo-tree-id7626 . -1) (undo-tree-id7627 . -1) (undo-tree-id7628 . -1) (undo-tree-id7629 . -1) (undo-tree-id7630 . -1) (undo-tree-id7631 . -1) (undo-tree-id7632 . -1) (undo-tree-id7633 . -1) 1117) nil (26116 16471 655982 275000) 0 nil])
([nil nil ((1116 . 1117)) nil (26116 16471 655975 652000) 0 nil])
([nil nil ((1117 . 1118)) nil (26116 16471 655975 67000) 0 nil])
([nil nil ((1117 . 1121) (#("s" 0 1 (fontified nil)) . 1117) (1117 . 1118) (#("self" 0 4 (fontified nil)) . -1117) (1117 . 1121) (#("s" 0 1 (fontified t)) . -1117) (undo-tree-id7619 . -1) (undo-tree-id7620 . -1) (undo-tree-id7621 . -1) (undo-tree-id7622 . -1) (undo-tree-id7623 . -1) (undo-tree-id7624 . -1) 1118) nil (26116 16471 655973 860000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -1118) (undo-tree-id7601 . -1) (undo-tree-id7602 . -1) (undo-tree-id7603 . -1) (undo-tree-id7604 . -1) (undo-tree-id7605 . -1) (undo-tree-id7606 . -1) (undo-tree-id7607 . -1) (undo-tree-id7608 . -1) (#("l" 0 1 (fontified t)) . -1119) (undo-tree-id7609 . -1) (undo-tree-id7610 . -1) (undo-tree-id7611 . -1) (undo-tree-id7612 . -1) (undo-tree-id7613 . -1) (undo-tree-id7614 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -1120) (undo-tree-id7615 . -1) (undo-tree-id7616 . -1) (undo-tree-id7617 . -1) (undo-tree-id7618 . -1) 1121) nil (26116 16471 655967 579000) 0 nil])
([nil nil ((1118 . 1120)) nil (26116 16471 655955 673000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -1119) (undo-tree-id7597 . -1) (undo-tree-id7598 . -1) (undo-tree-id7599 . -1) (undo-tree-id7600 . -1) 1120) nil (26116 16471 655954 928000) 0 nil])
([nil nil ((1119 . 1120)) nil (26116 16471 655951 525000) 0 nil])
([nil nil ((1117 . 1121) (#("siz" 0 3 (fontified nil)) . 1117) (1117 . 1120) (#("size" 0 4 (fontified nil)) . -1117) (1117 . 1121) (#("siz" 0 3 (fontified t)) . -1117) (undo-tree-id7578 . -3) (undo-tree-id7579 . -1) (undo-tree-id7580 . -1) (undo-tree-id7581 . -1) (undo-tree-id7582 . -1) (undo-tree-id7583 . -1) (undo-tree-id7584 . -1) (undo-tree-id7585 . -1) (undo-tree-id7586 . -1) (undo-tree-id7587 . -1) (undo-tree-id7588 . -2) (undo-tree-id7589 . -2) (undo-tree-id7590 . -2) (undo-tree-id7591 . -2) (undo-tree-id7592 . -2) (undo-tree-id7593 . -2) (undo-tree-id7594 . -3) (undo-tree-id7595 . -3) (undo-tree-id7596 . -3) 1120) nil (26116 16471 655949 860000) 0 nil])
([nil nil ((1121 . 1125)) nil (26116 16471 655935 88000) 0 nil])
([nil nil ((1123 . 1130) (#("ad" 0 2 (fontified nil)) . 1123) (1123 . 1125) (#("address" 0 7 (fontified nil)) . -1123) (1123 . 1130) (#("ad" 0 2 (fontified t)) . -1123) (undo-tree-id7565 . -1) (undo-tree-id7566 . -2) (undo-tree-id7567 . -1) (undo-tree-id7568 . -1) (undo-tree-id7569 . -1) (undo-tree-id7570 . -1) (undo-tree-id7571 . -1) (undo-tree-id7572 . -1) (undo-tree-id7573 . -1) (undo-tree-id7574 . -2) (undo-tree-id7575 . -2) (undo-tree-id7576 . -2) (undo-tree-id7577 . -2) 1125) nil (26116 16471 655932 442000) 0 nil])
([nil nil ((1131 . 1132)) nil (26116 16471 655912 725000) 0 nil])
([nil nil ((1132 . 1149) (t 26116 16471 675090 571000)) nil (26116 16942 156779 228000) 0 nil])
([nil nil ((1149 . 1154)) nil (26116 16942 156778 551000) 0 nil])
([nil nil ((apply yas--snippet-revive 1149 1159 #s(yas--snippet nil nil #s(yas--exit 1158 nil) 62 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1158 nil) 62 nil nil nil nil)) (1149 . 1159) (#("println!($0)" 0 12 (fontified nil)) . 1149) (1149 . 1161) (#("print" 0 5 (fontified nil)) . 1149) (1149 . 1154) (#("println!(â€¦)" 0 11 (fontified nil)) . -1149) (1149 . 1160) (#("print" 0 5 (fontified t)) . -1149) (undo-tree-id7883 . -5) (undo-tree-id7884 . -1) (undo-tree-id7885 . -1) (undo-tree-id7886 . -2) (undo-tree-id7887 . -2) (undo-tree-id7888 . -3) (undo-tree-id7889 . -3) (undo-tree-id7890 . -4) (undo-tree-id7891 . -4) (undo-tree-id7892 . -5) (undo-tree-id7893 . -5) (undo-tree-id7894 . -5) (undo-tree-id7895 . -5) (undo-tree-id7896 . -5) 1154) nil (26116 16942 156776 942000) 0 nil])
([nil nil ((1158 . 1160)) nil (26116 16942 156765 620000) 0 nil])
([nil nil ((1149 . 1150)) nil (26116 16942 156765 88000) 0 nil])
([nil nil ((1160 . 1162)) nil (26116 16942 156764 359000) 0 nil])
([nil nil ((1161 . 1162)) nil (26116 16942 156763 844000) 0 nil])
([nil nil ((1162 . 1163)) nil (26116 16942 156763 316000) 0 nil])
([nil nil ((1160 . 1167)) nil (26116 16942 156762 767000) 0 nil])
([nil nil ((1172 . 1176)) nil (26116 16942 156762 134000) 0 nil])
([nil nil ((1174 . 1183) (#("lo" 0 2 (fontified nil)) . 1174) (1174 . 1176) (#("local_iov" 0 9 (fontified nil)) . -1174) (1174 . 1183) (#("lo" 0 2 (fontified t)) . -1174) (undo-tree-id7869 . -1) (undo-tree-id7870 . -2) (undo-tree-id7871 . -1) (undo-tree-id7872 . -1) (undo-tree-id7873 . -1) (undo-tree-id7874 . -1) (undo-tree-id7875 . -1) (undo-tree-id7876 . -1) (undo-tree-id7877 . -1) (undo-tree-id7878 . -2) (undo-tree-id7879 . -2) (undo-tree-id7880 . -2) (undo-tree-id7881 . -2) (undo-tree-id7882 . -2) 1176) nil (26116 16942 156760 506000) 0 nil])
([nil nil ((1184 . 1185)) nil (26116 16942 156749 16000) 0 nil])
([nil nil ((1185 . 1202)) nil (26116 16942 156748 329000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1237 . 1238) (nil fontified nil 1237 . 1238) (nil fontified nil 1236 . 1237) (nil fontified nil 1227 . 1236) (nil fontified nil 1225 . 1227) (nil fontified nil 1224 . 1225) (nil fontified nil 1220 . 1224) (nil fontified nil 1212 . 1220) (nil fontified nil 1211 . 1212) (nil fontified nil 1203 . 1211) (nil fontified nil 1202 . 1203) (1202 . 1238)) nil (26116 16942 156747 349000) 0 nil])
([nil nil ((#("local" 0 5 (face font-lock-string-face fontified t)) . -1213) (undo-tree-id7863 . -5) (undo-tree-id7864 . -5) (undo-tree-id7865 . -5) (undo-tree-id7866 . -5) (undo-tree-id7867 . -5) (undo-tree-id7868 . -5) 1218) nil (26116 16942 156745 172000) 0 nil])
([nil nil ((1213 . 1219)) nil (26116 16942 156740 240000) 0 nil])
([nil nil ((#("local" 0 5 (fontified t)) . -1228) (undo-tree-id7858 . -5) (undo-tree-id7859 . -5) (undo-tree-id7860 . -5) (undo-tree-id7861 . -5) (undo-tree-id7862 . -5) 1233) nil (26116 16942 156738 958000) 0 nil])
([nil nil ((1228 . 1230)) nil (26116 16942 156733 503000) 0 nil])
([nil nil ((1228 . 1238) (#("re_iov" 0 2 (fontified nil) 2 6 (fontified nil)) . 1228) (undo-tree-id7837 . -3) (undo-tree-id7838 . -3) (undo-tree-id7839 . -6) (undo-tree-id7840 . -3) (undo-tree-id7841 . -3) (undo-tree-id7842 . -3) (undo-tree-id7843 . -3) (undo-tree-id7844 . -3) (undo-tree-id7845 . -3) (undo-tree-id7846 . -3) (undo-tree-id7847 . -3) (undo-tree-id7848 . 4) (1228 . 1230) (#("remote_iov" 0 10 (fontified nil)) . -1228) (1228 . 1238) (#("re" 0 2 (fontified t)) . -1228) (undo-tree-id7849 . -2) (undo-tree-id7850 . -1) (undo-tree-id7851 . -1) (undo-tree-id7852 . -2) (undo-tree-id7853 . -2) (undo-tree-id7854 . -2) (undo-tree-id7855 . -2) (undo-tree-id7856 . -2) (undo-tree-id7857 . -2) 1230) nil (26116 16942 156728 518000) 0 nil])
([nil nil ((1132 . 1149) (t 26116 16942 185119 453000)) nil (26116 16993 769788 20000) 0 nil])
([nil nil ((1149 . 1150)) nil (26116 16993 769787 308000) 0 nil])
([nil nil ((apply yas--snippet-revive 1149 1160 #s(yas--snippet nil nil #s(yas--exit 1159 nil) 63 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1159 nil) 63 nil nil nil nil)) (1149 . 1160) (#("eprintln!($0)" 0 13 (fontified nil)) . 1149) (1149 . 1162) (#("e" 0 1 (fontified nil)) . 1149) (1149 . 1150) (#("eprintln!(â€¦)" 0 12 (fontified nil)) . -1149) (1149 . 1161) (#("e" 0 1 (fontified t)) . -1149) (undo-tree-id7921 . -1) (undo-tree-id7922 . -1) (undo-tree-id7923 . -1) (undo-tree-id7924 . -1) (undo-tree-id7925 . -1) (undo-tree-id7926 . -1) (undo-tree-id7927 . -1) (undo-tree-id7928 . -1) (undo-tree-id7929 . -1) (undo-tree-id7930 . -1) (undo-tree-id7931 . -1) 1150) nil (26116 16993 769785 737000) 0 nil])
([nil nil ((1159 . 1161)) nil (26116 16993 769776 344000) 0 nil])
([nil nil ((1160 . 1172)) nil (26116 16993 769775 807000) 0 nil])
([nil nil ((1172 . 1173)) nil (26116 16993 769775 250000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t)) . -1172) (undo-tree-id7911 . -1) (undo-tree-id7912 . -1) (undo-tree-id7913 . -1) (undo-tree-id7914 . -1) (undo-tree-id7915 . -1) (undo-tree-id7916 . -1) (undo-tree-id7917 . -1) (undo-tree-id7918 . -1) (undo-tree-id7919 . -1) (undo-tree-id7920 . -1) 1173) nil (26116 16993 769774 186000) 0 nil])
([nil nil ((1172 . 1176)) nil (26116 16993 769767 48000) 0 nil])
([nil nil ((1175 . 1177)) nil (26116 16993 769766 484000) 0 nil])
([nil nil ((#("[" 0 1 (face rust-string-interpolation fontified t)) . -1176) (undo-tree-id7908 . -1) (undo-tree-id7909 . -1) (undo-tree-id7910 . -1) 1177) nil (26116 16993 769765 341000) 0 nil])
([nil nil ((1176 . 1177)) nil (26116 16993 769762 438000) 0 nil])
([nil nil ((1179 . 1182)) nil (26116 16993 769761 572000) 0 nil])
([nil nil ((1181 . 1185) (#("s" 0 1 (fontified nil)) . 1181) (1181 . 1182) (#("self" 0 4 (fontified nil)) . -1181) (1181 . 1185) (#("s" 0 1 (fontified t)) . -1181) (undo-tree-id7897 . -1) (undo-tree-id7898 . -1) (undo-tree-id7899 . -1) (undo-tree-id7900 . -1) (undo-tree-id7901 . -1) (undo-tree-id7902 . -1) (undo-tree-id7903 . -1) (undo-tree-id7904 . -1) (undo-tree-id7905 . -1) (undo-tree-id7906 . -1) (undo-tree-id7907 . -1) 1182) nil (26116 16993 769758 788000) 0 nil])
([nil nil ((1186 . 1187)) nil (26116 16993 769737 409000) 0 nil])
([nil nil ((998 . 999) (t 26116 16993 791789 287000)) nil (26116 17220 123602 480000) 0 nil])
([nil nil ((999 . 1002)) nil (26116 17220 123601 429000) 0 nil])
([nil nil ((1002 . 1011)) nil (26116 17220 123600 367000) 0 nil])
([nil nil ((1009 . 1014) (#("io" 0 2 (fontified nil)) . 1009) (1009 . 1011) (#("iovec" 0 5 (fontified nil)) . -1009) (1009 . 1014) (#("io" 0 2 (fontified t)) . -1009) (undo-tree-id7940 . -2) (undo-tree-id7941 . -1) (undo-tree-id7942 . -1) (undo-tree-id7943 . -1) (undo-tree-id7944 . -1) (undo-tree-id7945 . -1) (undo-tree-id7946 . -2) (undo-tree-id7947 . -2) (undo-tree-id7948 . -2) (undo-tree-id7949 . -2) 1011) nil (26116 17220 123597 735000) 0 nil])
([nil nil ((1030 . 1034)) nil (26116 17220 123583 358000) 0 nil])
([nil nil ((1034 . 1043)) nil (26116 17282 847445 772000) 0 nil])
([nil nil ((#("io" 0 2 (fontified t)) . -1041) (undo-tree-id8060 . -2) (undo-tree-id8061 . -2) (undo-tree-id8062 . -2) (undo-tree-id8063 . -2) (undo-tree-id8064 . -2) (undo-tree-id8065 . -2) 1043) nil (26116 17290 675718 457000) 0 nil] [nil nil ((1041 . 1046) (#("io" 0 2 (fontified nil)) . 1041) (1041 . 1043) (#("iovec" 0 5 (fontified nil)) . -1041) (1041 . 1046) (#("io" 0 2 (fontified t)) . -1041) (undo-tree-id7932 . -2) (undo-tree-id7934 . -1) (undo-tree-id7936 . -2) (undo-tree-id7938 . -2) 1043) ((1041 . 1043) (#("iovec" 0 5 (fontified nil)) . 1041) (1041 . 1046) (#("io" 0 2 (fontified nil)) . 1041) (1041 . 1043) (#("iovec" 0 5 (fontified t)) . 1041) (t 26116 17220 145136 516000)) (26116 17282 316085 228000) 0 nil])
([nil nil ((#("const " 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t)) . -1035) (undo-tree-id8052 . -6) (undo-tree-id8053 . -6) (undo-tree-id8054 . -6) (undo-tree-id8055 . -6) (undo-tree-id8056 . -6) (undo-tree-id8057 . -6) (undo-tree-id8058 . -6) (undo-tree-id8059 . -6) 1041) nil (26116 17290 675714 647000) 0 nil])
([nil nil ((#("    eprintln!(\"Failed to read {} at: {:x}\", size, address);" 0 4 (fontified t) 4 13 (face rust-builtin-formatting-macro fontified t) 13 14 (face (rainbow-delimiters-depth-5-face) fontified t) 14 30 (face font-lock-string-face fontified t) 30 32 (face rust-string-interpolation fontified t) 32 37 (face font-lock-string-face fontified t) 37 41 (face rust-string-interpolation fontified t) 41 42 (face font-lock-string-face fontified t) 42 44 (fontified t) 44 50 (fontified t) 50 57 (fontified t) 57 58 (face (rainbow-delimiters-depth-5-face) fontified t) 58 59 (fontified t)) . 1105) (undo-tree-id7951 . -59) (t 26116 17220 145136 516000)) ((1105 . 1164)) (26116 17282 120764 147000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1030) (undo-tree-id7972 . -1) (undo-tree-id7973 . -1) (undo-tree-id7974 . -1) (undo-tree-id7975 . -1) (undo-tree-id7976 . -1) (undo-tree-id7977 . -1) (undo-tree-id7978 . -1) (undo-tree-id7979 . -1) (undo-tree-id7980 . -1) (undo-tree-id7981 . -1) (undo-tree-id7982 . -1) (undo-tree-id7983 . -1) (undo-tree-id7984 . -1) (undo-tree-id7985 . -1) (undo-tree-id7986 . -1) (undo-tree-id7987 . -1) (undo-tree-id7988 . -1) (undo-tree-id7989 . -1) (undo-tree-id7990 . -1) (undo-tree-id7991 . -1) (#("a" 0 1 (fontified t)) . -1031) (undo-tree-id7992 . -1) (undo-tree-id7993 . -1) (undo-tree-id7994 . -1) (undo-tree-id7995 . -1) (undo-tree-id7996 . -1) (undo-tree-id7997 . -1) (undo-tree-id7998 . -1) (undo-tree-id7999 . -1) (undo-tree-id8000 . -1) (undo-tree-id8001 . -1) (undo-tree-id8002 . -1) (undo-tree-id8003 . -1) (undo-tree-id8004 . -1) (undo-tree-id8005 . -1) (undo-tree-id8006 . -1) (undo-tree-id8007 . -1) (undo-tree-id8008 . -1) (undo-tree-id8009 . -1) (#("s" 0 1 (face font-lock-keyword-face fontified t)) . -1032) (undo-tree-id8010 . -1) (undo-tree-id8011 . -1) (undo-tree-id8012 . -1) (undo-tree-id8013 . -1) (undo-tree-id8014 . -1) (undo-tree-id8015 . -1) (undo-tree-id8016 . -1) (undo-tree-id8017 . -1) (undo-tree-id8018 . -1) (undo-tree-id8019 . -1) (undo-tree-id8020 . -1) (undo-tree-id8021 . -1) (undo-tree-id8022 . -1) (undo-tree-id8023 . -1) (undo-tree-id8024 . -1) (undo-tree-id8025 . -1) (#(" " 0 1 (fontified t)) . -1033) (undo-tree-id8026 . -1) (undo-tree-id8027 . -1) (undo-tree-id8028 . -1) (undo-tree-id8029 . -1) (undo-tree-id8030 . -1) (undo-tree-id8031 . -1) (undo-tree-id8032 . -1) (undo-tree-id8033 . -1) (undo-tree-id8034 . -1) (undo-tree-id8035 . -1) (undo-tree-id8036 . -1) (undo-tree-id8037 . -1) (undo-tree-id8038 . -1) (undo-tree-id8039 . -1) (#("*" 0 1 (fontified t)) . -1034) (undo-tree-id8040 . -1) (undo-tree-id8041 . -1) (undo-tree-id8042 . -1) (undo-tree-id8043 . -1) (undo-tree-id8044 . -1) (undo-tree-id8045 . -1) (undo-tree-id8046 . -1) (undo-tree-id8047 . -1) (undo-tree-id8048 . -1) (undo-tree-id8049 . -1) (undo-tree-id8050 . -1) (undo-tree-id8051 . -1) 1035) nil (26116 17290 675706 809000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1105) (undo-tree-id7950 . -1)) ((1105 . 1106)) (26116 17282 120554 976000) 0 nil])
([nil nil ((#("iovec" 0 5 (fontified t)) . -1009) (undo-tree-id7970 . -5) (undo-tree-id7971 . -5) 1014) nil (26116 17290 675522 542000) 0 nil])
nil
([nil nil ((#("const " 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t)) . -1003) (undo-tree-id7966 . -6) (undo-tree-id7967 . -6) (undo-tree-id7968 . -6) (undo-tree-id7969 . -6) 1009) nil (26116 17290 675520 306000) 0 nil])
([nil nil ((#("as *" 0 2 (face font-lock-keyword-face fontified t) 2 4 (fontified t)) . -999) (undo-tree-id7960 . -4) (undo-tree-id7961 . -4) (undo-tree-id7962 . -4) (undo-tree-id7963 . -4) (undo-tree-id7964 . -4) (undo-tree-id7965 . -4) 1003) nil (26116 17290 675516 839000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -998) (undo-tree-id7952 . -1) (undo-tree-id7953 . -1) (undo-tree-id7954 . -1) (undo-tree-id7955 . -1) (undo-tree-id7956 . -1) (undo-tree-id7957 . -1) (undo-tree-id7958 . -1) (undo-tree-id7959 . -1) 999) nil (26116 17290 675510 353000) 0 nil])
([nil nil ((apply -12 1061 1308 undo--wrap-and-run-primitive-undo 1061 1308 ((1266 . 1269) (1210 . 1213) (1152 . 1155) (1077 . 1080)))) nil (26116 17328 670089 504000) 0 nil])
([nil nil ((#("bool" 0 4 (face font-lock-type-face fontified t)) . -628) (undo-tree-id8118 . -4) (undo-tree-id8119 . -4) (undo-tree-id8120 . -4) (undo-tree-id8121 . -4) (undo-tree-id8122 . -4) (undo-tree-id8123 . -4) (undo-tree-id8124 . -4) (undo-tree-id8125 . -4) 632 (t 26116 17328 688476 512000)) nil (26116 17350 468497 802000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -624) (undo-tree-id8066 . -1) (undo-tree-id8067 . -1) (undo-tree-id8068 . -1) (undo-tree-id8069 . -1) (undo-tree-id8070 . -1) (undo-tree-id8071 . -1) (undo-tree-id8072 . -1) (undo-tree-id8073 . -1) (undo-tree-id8074 . -1) (undo-tree-id8075 . -1) (undo-tree-id8076 . -1) (undo-tree-id8077 . -1) (undo-tree-id8078 . -1) (undo-tree-id8079 . -1) (undo-tree-id8080 . -1) (undo-tree-id8081 . -1) (#("-" 0 1 (fontified t)) . -625) (undo-tree-id8082 . -1) (undo-tree-id8083 . -1) (undo-tree-id8084 . -1) (undo-tree-id8085 . -1) (undo-tree-id8086 . -1) (undo-tree-id8087 . -1) (undo-tree-id8088 . -1) (undo-tree-id8089 . -1) (undo-tree-id8090 . -1) (undo-tree-id8091 . -1) (undo-tree-id8092 . -1) (undo-tree-id8093 . -1) (undo-tree-id8094 . -1) (undo-tree-id8095 . -1) (#(">" 0 1 (syntax-table (1) fontified t)) . -626) (undo-tree-id8096 . -1) (undo-tree-id8097 . -1) (undo-tree-id8098 . -1) (undo-tree-id8099 . -1) (undo-tree-id8100 . -1) (undo-tree-id8101 . -1) (undo-tree-id8102 . -1) (undo-tree-id8103 . -1) (undo-tree-id8104 . -1) (undo-tree-id8105 . -1) (undo-tree-id8106 . -1) (undo-tree-id8107 . -1) (#(" " 0 1 (fontified t)) . -627) (undo-tree-id8108 . -1) (undo-tree-id8109 . -1) (undo-tree-id8110 . -1) (undo-tree-id8111 . -1) (undo-tree-id8112 . -1) (undo-tree-id8113 . -1) (undo-tree-id8114 . -1) (undo-tree-id8115 . -1) (undo-tree-id8116 . -1) (undo-tree-id8117 . -1) 628) nil (26116 17350 468487 835000) 0 nil])
([nil nil ((#("true" 0 4 (face font-lock-keyword-face fontified t)) . 1362) (undo-tree-id8153 . -4) (undo-tree-id8154 . -4) (t 26116 17350 491811 183000)) nil (26116 17371 905313 343000) 0 nil])
([nil nil ((#("        
" 0 8 (fontified t) 8 9 (fontified t)) . 1354) (undo-tree-id8138 . -8) (undo-tree-id8139 . -8) (undo-tree-id8140 . -8) (undo-tree-id8141 . -8) (undo-tree-id8142 . -8) (undo-tree-id8143 . -8) (undo-tree-id8144 . -8) (undo-tree-id8145 . -8) (undo-tree-id8146 . -8) (undo-tree-id8147 . -8) (undo-tree-id8148 . -8) (undo-tree-id8149 . -8) (undo-tree-id8150 . -8) (undo-tree-id8151 . -8) (undo-tree-id8152 . -9)) nil (26116 17371 905310 678000) 0 nil])
([nil nil ((#("                return false;" 0 16 (fontified t) 16 22 (face font-lock-keyword-face fontified t) 22 23 (fontified t) 23 28 (face font-lock-keyword-face fontified t) 28 29 (fontified t)) . 1300) (undo-tree-id8136 . -29) (undo-tree-id8137 . -29)) nil (26116 17371 905299 597000) 0 nil])
([nil nil ((1300 . 1316)) nil (26116 17371 905297 343000) 0 nil])
([nil nil ((1316 . 1319)) nil (26116 17371 905296 685000) 0 nil])
([nil nil ((apply yas--snippet-revive 1316 1324 #s(yas--snippet nil nil #s(yas--exit 1323 nil) 64 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1323 nil) 64 nil nil nil nil)) (1316 . 1324) (#("panic!($0)" 0 10 (fontified nil)) . 1316) (1316 . 1326) (#("pan" 0 3 (fontified nil)) . 1316) (1316 . 1319) (#("panic!(â€¦)" 0 9 (fontified nil)) . -1316) (1316 . 1325) (#("pan" 0 3 (fontified t)) . -1316) (undo-tree-id8126 . -3) (undo-tree-id8127 . -1) (undo-tree-id8128 . -1) (undo-tree-id8129 . -1) (undo-tree-id8130 . -2) (undo-tree-id8131 . -2) (undo-tree-id8132 . -3) (undo-tree-id8133 . -3) (undo-tree-id8134 . -3) (undo-tree-id8135 . -3) 1319) nil (26116 17371 905294 273000) 0 nil])
([nil nil ((1323 . 1325)) nil (26116 17371 905279 866000) 0 nil])
([nil nil ((1324 . 1333)) nil (26116 17371 905279 172000) 0 nil])
([nil nil ((1333 . 1338)) nil (26116 17371 905277 744000) 0 nil])
([nil nil ((1340 . 1341)) nil (26116 17371 905273 262000) 0 nil])
([nil nil ((#("Cannot " 0 7 (face font-lock-string-face fontified t)) . -1324) (undo-tree-id8160 . -7) (undo-tree-id8161 . -7) 1331 (t 26116 17371 925145 832000)) nil (26116 17393 213987 498000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-string-face fontified t)) . -1324) (undo-tree-id8155 . -1) (undo-tree-id8156 . -1) (undo-tree-id8157 . -1) (undo-tree-id8158 . -1) (undo-tree-id8159 . -1) 1325) nil (26116 17393 213983 988000) 0 nil])
([nil nil ((1324 . 1325)) nil (26116 17393 213971 957000) 0 nil])
([nil nil ((1331 . 1337)) nil (26116 17393 213967 631000) 0 nil])
([nil nil ((#("Error" 0 5 (face font-lock-string-face fontified t)) . -1332) (undo-tree-id8219 . -4) (undo-tree-id8220 . -5) (undo-tree-id8221 . -5) (undo-tree-id8222 . -5) (undo-tree-id8223 . -5) (undo-tree-id8224 . -5) (undo-tree-id8225 . -5) (undo-tree-id8226 . -5) (undo-tree-id8227 . -5) (undo-tree-id8228 . -5) (undo-tree-id8229 . -5) (undo-tree-id8230 . -5) (undo-tree-id8231 . -5) (undo-tree-id8232 . -4) (undo-tree-id8233 . -3) (undo-tree-id8234 . -3) (undo-tree-id8235 . -3) (undo-tree-id8236 . -3) (undo-tree-id8237 . -3) (undo-tree-id8238 . -4) (undo-tree-id8239 . -5) 1337 (t 26116 17393 228480 473000)) nil (26116 17401 826872 542000) 0 nil])
([nil nil ((#("vm " 0 3 (face font-lock-string-face fontified t)) . -1329) (undo-tree-id8196 . -3) (undo-tree-id8197 . -3) (undo-tree-id8198 . -3) (undo-tree-id8199 . -3) (undo-tree-id8200 . -3) (undo-tree-id8201 . -3) (undo-tree-id8202 . -3) (undo-tree-id8203 . -3) (undo-tree-id8204 . -3) (undo-tree-id8205 . -3) (undo-tree-id8206 . -3) (undo-tree-id8207 . -3) (undo-tree-id8208 . -3) (undo-tree-id8209 . -3) (undo-tree-id8210 . -3) (undo-tree-id8211 . -3) (undo-tree-id8212 . -3) (undo-tree-id8213 . -3) (undo-tree-id8214 . -3) (undo-tree-id8215 . -3) (undo-tree-id8216 . -3) (undo-tree-id8217 . -3) (undo-tree-id8218 . -3) 1332) nil (26116 17401 826857 398000) 0 nil])
([nil nil ((#("Read " 0 5 (face font-lock-string-face fontified t)) . -1324) (undo-tree-id8168 . -5) (undo-tree-id8169 . -5) (undo-tree-id8170 . -5) (undo-tree-id8171 . -5) (undo-tree-id8172 . -5) (undo-tree-id8173 . -5) (undo-tree-id8174 . -5) (undo-tree-id8175 . -5) (undo-tree-id8176 . -5) (undo-tree-id8177 . -5) (undo-tree-id8178 . -5) (undo-tree-id8179 . -5) (undo-tree-id8180 . -5) (undo-tree-id8181 . -5) (undo-tree-id8182 . -5) (undo-tree-id8183 . -5) (undo-tree-id8184 . -5) (undo-tree-id8185 . -5) (undo-tree-id8186 . -5) (undo-tree-id8187 . -5) (undo-tree-id8188 . -5) (undo-tree-id8189 . -5) (undo-tree-id8190 . -5) (undo-tree-id8191 . -5) (undo-tree-id8192 . -5) (undo-tree-id8193 . -5) (undo-tree-id8194 . -5) (undo-tree-id8195 . -5) 1329) nil (26116 17401 826841 612000) 0 nil])
([nil nil ((1324 . 1325)) nil (26116 17401 826822 737000) 0 nil])
([nil nil ((#("D" 0 1 (face font-lock-string-face fontified t)) . -1324) (undo-tree-id8162 . -1) (undo-tree-id8163 . -1) (undo-tree-id8164 . -1) (undo-tree-id8165 . -1) (undo-tree-id8166 . -1) (undo-tree-id8167 . -1) 1325) nil (26116 17401 826821 95000) 0 nil])
([nil nil ((1324 . 1327)) nil (26116 17401 826808 479000) 0 nil])
([nil nil ((1327 . 1341)) nil (26116 17401 826804 275000) 0 nil])
([nil nil ((1377 . 1379) (t 26116 17401 851814 336000)) nil (26116 19299 806616 831000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1456 . 1457) (nil fontified nil 1456 . 1457) (nil fontified nil 1455 . 1456) (nil fontified nil 1450 . 1455) (nil fontified nil 1449 . 1450) (nil fontified nil 1448 . 1449) (nil fontified nil 1447 . 1448) (nil fontified nil 1441 . 1447) (nil fontified nil 1440 . 1441) (nil fontified nil 1437 . 1440) (nil fontified nil 1436 . 1437) (nil fontified nil 1435 . 1436) (nil fontified nil 1429 . 1435) (nil fontified nil 1428 . 1429) (nil fontified nil 1420 . 1428) (nil fontified nil 1419 . 1420) (nil fontified nil 1415 . 1419) (nil fontified nil 1414 . 1415) (nil fontified nil 1413 . 1414) (nil fontified nil 1412 . 1413) (nil fontified nil 1407 . 1412) (nil fontified nil 1406 . 1407) (nil fontified nil 1405 . 1406) (nil fontified nil 1402 . 1405) (nil fontified nil 1401 . 1402) (nil fontified nil 1398 . 1401) (nil fontified nil 1397 . 1398) (nil fontified nil 1396 . 1397) (nil fontified nil 1393 . 1396) (nil fontified nil 1392 . 1393) (nil fontified nil 1384 . 1392) (nil fontified nil 1383 . 1384) (nil fontified nil 1379 . 1383) (1379 . 1457)) nil (26116 19299 806611 722000) 0 nil])
([nil nil ((1379 . 1383) (t 26116 19299 821930 843000)) nil (26116 19357 808843 23000) 0 nil])
([nil nil ((1419 . 1423) (t 26116 19357 828601 70000)) nil (26116 19360 618935 909000) 0 nil])
([nil nil ((#("pub " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -1379) (undo-tree-id8250 . -4) (undo-tree-id8251 . -4) (undo-tree-id8252 . -4) (undo-tree-id8253 . -4) (undo-tree-id8254 . -4) (undo-tree-id8255 . -4) (undo-tree-id8256 . -4) (undo-tree-id8257 . -4) 1383 (t 26116 19360 638601 243000)) nil (26116 19367 577891 925000) 0 nil])
([nil nil ((#("p" 0 1 (face font-lock-keyword-face fontified t)) . 1415)) nil (26116 19367 577881 228000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1415) (undo-tree-id8240 . -1) (undo-tree-id8241 . -1) (undo-tree-id8242 . -1) (undo-tree-id8243 . -1) (undo-tree-id8244 . -1) (undo-tree-id8245 . -1) (undo-tree-id8246 . -1) (undo-tree-id8247 . -1) (undo-tree-id8248 . -1) (undo-tree-id8249 . -1) (#("b" 0 1 (fontified t)) . 1415) (#("u" 0 1 (fontified t)) . 1415)) nil (26116 19367 577875 984000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2251 . 2252) (nil fontified nil 2251 . 2252) (nil fontified nil 2247 . 2251) (nil fontified nil 2246 . 2247) (nil fontified nil 2245 . 2246) (nil fontified nil 2237 . 2245) (nil fontified nil 2236 . 2237) (nil fontified nil 2235 . 2236) (nil fontified nil 2223 . 2235) (nil fontified nil 2222 . 2223) (nil fontified nil 2221 . 2222) (nil fontified nil 2220 . 2221) (nil fontified nil 2201 . 2220) (nil fontified nil 2200 . 2201) (nil fontified nil 2194 . 2200) (nil fontified nil 2178 . 2194) (nil fontified nil 2177 . 2178) (nil fontified nil 2176 . 2177) (nil fontified nil 2175 . 2176) (nil fontified nil 2165 . 2175) (nil fontified nil 2163 . 2165) (nil fontified nil 2162 . 2163) (nil fontified nil 2158 . 2162) (nil fontified nil 2149 . 2158) (nil fontified nil 2148 . 2149) (nil fontified nil 2140 . 2148) (nil fontified nil 2139 . 2140) (nil fontified nil 2136 . 2139) (nil fontified nil 2120 . 2136) (nil fontified nil 2118 . 2120) (nil fontified nil 2117 . 2118) (nil fontified nil 2108 . 2117) (nil fontified nil 2106 . 2108) (nil fontified nil 2105 . 2106) (nil fontified nil 2101 . 2105) (nil fontified nil 2093 . 2101) (nil fontified nil 2092 . 2093) (nil fontified nil 2084 . 2092) (nil fontified nil 2083 . 2084) (nil fontified nil 2080 . 2083) (nil fontified nil 2064 . 2080) (nil fontified nil 2063 . 2064) (nil fontified nil 2062 . 2063) (nil fontified nil 2061 . 2062) (nil fontified nil 2057 . 2061) (nil fontified nil 2055 . 2057) (nil fontified nil 2054 . 2055) (nil fontified nil 2050 . 2054) (nil fontified nil 2035 . 2050) (nil fontified nil 2034 . 2035) (nil fontified nil 2025 . 2034) (nil fontified nil 2022 . 2025) (nil fontified nil 2006 . 2022) (nil fontified nil 2005 . 2006) (nil fontified nil 2004 . 2005) (nil fontified nil 2003 . 2004) (nil fontified nil 1996 . 2003) (nil fontified nil 1990 . 1996) (nil fontified nil 1988 . 1990) (nil fontified nil 1987 . 1988) (nil fontified nil 1983 . 1987) (nil fontified nil 1978 . 1983) (nil fontified nil 1976 . 1978) (nil fontified nil 1960 . 1976) (nil fontified nil 1959 . 1960) (nil fontified nil 1950 . 1959) (nil fontified nil 1947 . 1950) (nil fontified nil 1943 . 1947) (nil fontified nil 1931 . 1943) (nil fontified nil 1930 . 1931) (nil fontified nil 1929 . 1930) (nil fontified nil 1928 . 1929) (nil fontified nil 1923 . 1928) (nil fontified nil 1922 . 1923) (nil fontified nil 1920 . 1922) (nil fontified nil 1915 . 1920) (nil fontified nil 1907 . 1915) (nil fontified nil 1905 . 1907) (nil fontified nil 1893 . 1905) (nil fontified nil 1891 . 1893) (nil fontified nil 1890 . 1891) (nil fontified nil 1884 . 1890) (nil fontified nil 1874 . 1884) (nil fontified nil 1873 . 1874) (nil fontified nil 1872 . 1873) (nil fontified nil 1868 . 1872) (nil fontified nil 1859 . 1868) (nil fontified nil 1858 . 1859) (nil fontified nil 1856 . 1858) (nil fontified nil 1853 . 1856) (nil fontified nil 1852 . 1853) (nil fontified nil 1850 . 1852) (nil fontified nil 1846 . 1850) (nil fontified nil 1845 . 1846) (nil fontified nil 1829 . 1845) (nil fontified nil 1826 . 1829) (nil fontified nil 1823 . 1826) (nil fontified nil 1822 . 1823) (nil fontified nil 1819 . 1822) (nil fontified nil 1807 . 1819) (nil fontified nil 1806 . 1807) (nil fontified nil 1805 . 1806) (nil fontified nil 1804 . 1805) (nil fontified nil 1798 . 1804) (nil fontified nil 1790 . 1798) (nil fontified nil 1789 . 1790) (nil fontified nil 1781 . 1789) (nil fontified nil 1780 . 1781) (nil fontified nil 1779 . 1780) (nil fontified nil 1778 . 1779) (nil fontified nil 1770 . 1778) (nil fontified nil 1769 . 1770) (nil fontified nil 1768 . 1769) (nil fontified nil 1764 . 1768) (nil fontified nil 1762 . 1764) (nil fontified nil 1755 . 1762) (nil fontified nil 1743 . 1755) (nil fontified nil 1735 . 1743) (nil fontified nil 1734 . 1735) (nil fontified nil 1731 . 1734) (nil fontified nil 1729 . 1731) (nil fontified nil 1727 . 1729) (nil fontified nil 1719 . 1727) (nil fontified nil 1717 . 1719) (nil fontified nil 1709 . 1717) (nil fontified nil 1697 . 1709) (nil fontified nil 1696 . 1697) (nil fontified nil 1695 . 1696) (nil fontified nil 1689 . 1695) (nil fontified nil 1686 . 1689) (nil fontified nil 1676 . 1686) (nil fontified nil 1675 . 1676) (nil fontified nil 1672 . 1675) (nil fontified nil 1664 . 1672) (nil fontified nil 1663 . 1664) (nil fontified nil 1661 . 1663) (nil fontified nil 1660 . 1661) (nil fontified nil 1652 . 1660) (nil fontified nil 1650 . 1652) (nil fontified nil 1646 . 1650) (nil fontified nil 1644 . 1646) (nil fontified nil 1637 . 1644) (nil fontified nil 1636 . 1637) (nil fontified nil 1625 . 1636) (nil fontified nil 1624 . 1625) (nil fontified nil 1617 . 1624) (nil fontified nil 1616 . 1617) (nil fontified nil 1613 . 1616) (nil fontified nil 1611 . 1613) (nil fontified nil 1609 . 1611) (nil fontified nil 1606 . 1609) (nil fontified nil 1603 . 1606) (nil fontified nil 1601 . 1603) (nil fontified nil 1599 . 1601) (nil fontified nil 1598 . 1599) (nil fontified nil 1594 . 1598) (nil fontified nil 1592 . 1594) (nil fontified nil 1584 . 1592) (nil fontified nil 1572 . 1584) (nil fontified nil 1571 . 1572) (nil fontified nil 1570 . 1571) (nil fontified nil 1564 . 1570) (nil fontified nil 1561 . 1564) (nil fontified nil 1552 . 1561) (nil fontified nil 1551 . 1552) (nil fontified nil 1548 . 1551) (nil fontified nil 1540 . 1548) (nil fontified nil 1539 . 1540) (nil fontified nil 1538 . 1539) (nil fontified nil 1537 . 1538) (nil fontified nil 1536 . 1537) (nil fontified nil 1535 . 1536) (nil fontified nil 1534 . 1535) (nil fontified nil 1533 . 1534) (nil fontified nil 1531 . 1533) (nil fontified nil 1524 . 1531) (nil fontified nil 1521 . 1524) (nil fontified nil 1517 . 1521) (nil fontified nil 1516 . 1517) (nil fontified nil 1513 . 1516) (nil fontified nil 1505 . 1513) (nil fontified nil 1504 . 1505) (nil fontified nil 1503 . 1504) (nil fontified nil 1502 . 1503) (nil fontified nil 1501 . 1502) (nil fontified nil 1496 . 1501) (nil fontified nil 1494 . 1496) (nil fontified nil 1488 . 1494) (nil fontified nil 1487 . 1488) (nil fontified nil 1486 . 1487) (nil fontified nil 1485 . 1486) (nil fontified nil 1483 . 1485) (nil fontified nil 1482 . 1483) (nil fontified nil 1480 . 1482) (nil fontified nil 1477 . 1480) (nil fontified nil 1475 . 1477) (nil fontified nil 1471 . 1475) (nil fontified nil 1470 . 1471) (nil fontified nil 1467 . 1470) (nil fontified nil 1466 . 1467) (nil fontified nil 1465 . 1466) (nil fontified nil 1461 . 1465) (nil fontified nil 1460 . 1461) (nil fontified nil 1458 . 1460) (nil fontified nil 1454 . 1458) (1454 . 2252) (t 26116 19367 601935 4000)) nil (26116 19394 219339 238000) 0 nil])
([nil nil ((1513 . 1517) 1519) nil (26116 19394 219301 174000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1454) 1465) nil (26116 19394 219300 22000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1509) 1423) nil (26116 19394 219298 676000) 0 nil])
([nil nil ((#("T>()" 0 1 (face font-lock-type-face fontified t) 1 2 (face (rainbow-delimiters-depth-3-face) fontified t) 2 3 (face (rainbow-delimiters-depth-3-face) fontified t) 3 4 (face (rainbow-delimiters-depth-3-face) fontified t)) . -1530) (undo-tree-id8277 . -4) (undo-tree-id8278 . -4) (undo-tree-id8279 . -4) (undo-tree-id8280 . -4) (undo-tree-id8281 . -4) (undo-tree-id8282 . -4) (undo-tree-id8283 . -4) (undo-tree-id8284 . -4) 1534) nil (26116 19394 219297 34000) 0 nil])
([nil nil ((#("of::<" 0 2 (fontified t) 2 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-3-face) fontified t)) . -1525) (undo-tree-id8268 . -5) (undo-tree-id8269 . -5) (undo-tree-id8270 . -5) (undo-tree-id8271 . -5) (undo-tree-id8272 . -5) (undo-tree-id8273 . -5) (undo-tree-id8274 . -5) (undo-tree-id8275 . -5) (undo-tree-id8276 . -5) 1530) nil (26116 19394 219288 11000) 0 nil])
([nil nil ((#("size_" 0 5 (fontified t)) . -1520) (undo-tree-id8258 . -5) (undo-tree-id8259 . -5) (undo-tree-id8260 . -5) (undo-tree-id8261 . -5) (undo-tree-id8262 . -5) (undo-tree-id8263 . -5) (undo-tree-id8264 . -5) (undo-tree-id8265 . -5) (undo-tree-id8266 . -5) (undo-tree-id8267 . -5) 1525) nil (26116 19394 219276 534000) 0 nil])
([nil nil ((1520 . 1522)) nil (26116 19394 219255 80000) 0 nil])
([nil nil ((1502 . 1510) (#("        " 0 8 (fontified nil)) . 1501) (undo-tree-id8332 . -8) (undo-tree-id8333 . -8) (undo-tree-id8334 . -8) (undo-tree-id8335 . -8) (undo-tree-id8336 . -8) (undo-tree-id8337 . -8) (undo-tree-id8338 . -8) (1509 . 1510) (t 26116 19394 238603 306000)) nil (26116 19419 371611 887000) 0 nil])
([nil nil ((1501 . 1509)) nil (26116 19419 371606 180000) 0 nil])
([nil nil ((1509 . 1516)) nil (26116 19419 371605 619000) 0 nil])
([nil nil ((#("y" 0 1 (face font-lock-variable-name-face fontified t)) . -1513) (undo-tree-id8310 . -1) (undo-tree-id8311 . -1) (undo-tree-id8312 . -1) (undo-tree-id8313 . -1) (undo-tree-id8314 . -1) (undo-tree-id8315 . -1) (undo-tree-id8316 . -1) (undo-tree-id8317 . -1) (undo-tree-id8318 . -1) (#("b" 0 1 (face font-lock-variable-name-face fontified t)) . -1514) (undo-tree-id8319 . -1) (undo-tree-id8320 . -1) (undo-tree-id8321 . -1) (undo-tree-id8322 . -1) (undo-tree-id8323 . -1) (undo-tree-id8324 . -1) (undo-tree-id8325 . -1) (undo-tree-id8326 . -1) (#("v" 0 1 (face font-lock-variable-name-face fontified t)) . -1515) (undo-tree-id8327 . -1) (undo-tree-id8328 . -1) (undo-tree-id8329 . -1) (undo-tree-id8330 . -1) (undo-tree-id8331 . -1) 1516) nil (26116 19419 371603 928000) 0 nil])
([nil nil ((1513 . 1516)) nil (26116 19419 371588 423000) 0 nil])
([nil nil ((#("v" 0 1 (face font-lock-variable-name-face fontified t)) . -1513) (undo-tree-id8291 . -1) (undo-tree-id8292 . -1) (undo-tree-id8293 . -1) (undo-tree-id8294 . -1) (undo-tree-id8295 . -1) (undo-tree-id8296 . -1) (undo-tree-id8297 . -1) (undo-tree-id8298 . -1) (undo-tree-id8299 . -1) (undo-tree-id8300 . -1) (#("y" 0 1 (face font-lock-variable-name-face fontified t)) . -1514) (undo-tree-id8301 . -1) (undo-tree-id8302 . -1) (undo-tree-id8303 . -1) (undo-tree-id8304 . -1) (undo-tree-id8305 . -1) (undo-tree-id8306 . -1) (undo-tree-id8307 . -1) (#("f" 0 1 (face font-lock-variable-name-face fontified t)) . -1515) (undo-tree-id8308 . -1) (undo-tree-id8309 . -1) 1516) nil (26116 19419 371586 686000) 0 nil])
([nil nil ((1513 . 1521)) nil (26116 19419 371572 525000) 0 nil])
([nil nil ((1520 . 1524)) nil (26116 19419 371571 571000) 0 nil])
([nil nil ((#("7" 0 1 (fontified t)) . -1522) (undo-tree-id8285 . -1) (undo-tree-id8286 . -1) (undo-tree-id8287 . -1) (undo-tree-id8288 . -1) (#("8" 0 1 (fontified t)) . -1523) (undo-tree-id8289 . -1) (undo-tree-id8290 . -1) 1524) nil (26116 19419 371569 187000) 0 nil])
([nil nil ((1522 . 1527)) nil (26116 19419 371200 57000) 0 nil])
([nil nil ((1528 . 1529)) nil (26116 19419 371195 640000) 0 nil])
([nil nil ((#("void" 0 4 (fontified t)) . -1632) (undo-tree-id8517 . -4) (undo-tree-id8518 . -4) (undo-tree-id8519 . -4) (undo-tree-id8520 . -4) (undo-tree-id8521 . -4) (undo-tree-id8522 . -4) (undo-tree-id8523 . -4) 1636 (t 26116 19419 388604 850000)) nil (26116 19451 413055 243000) 0 nil])
([nil nil ((#("c_" 0 2 (fontified t)) . -1630) (undo-tree-id8508 . -2) (undo-tree-id8509 . -2) (undo-tree-id8510 . -1) (undo-tree-id8511 . -2) (undo-tree-id8512 . -2) (undo-tree-id8513 . -2) (undo-tree-id8514 . -2) (undo-tree-id8515 . -2) (undo-tree-id8516 . -2) 1632) nil (26116 19451 413049 615000) 0 nil])
([nil nil ((#("mut " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -1626) (undo-tree-id8497 . -4) (undo-tree-id8498 . -4) (undo-tree-id8499 . -3) (undo-tree-id8500 . -4) (undo-tree-id8501 . -4) (undo-tree-id8502 . -4) (undo-tree-id8503 . -4) (undo-tree-id8504 . -4) (undo-tree-id8505 . -4) (undo-tree-id8506 . -4) (undo-tree-id8507 . -4) 1630) nil (26116 19451 413042 971000) 0 nil])
([nil nil ((#("as *" 0 2 (face font-lock-keyword-face fontified t) 2 4 (fontified t)) . -1622) (undo-tree-id8484 . -4) (undo-tree-id8485 . -4) (undo-tree-id8486 . -2) (undo-tree-id8487 . -4) (undo-tree-id8488 . -4) (undo-tree-id8489 . -4) (undo-tree-id8490 . -4) (undo-tree-id8491 . -4) (undo-tree-id8492 . -4) (undo-tree-id8493 . -4) (undo-tree-id8494 . -4) (undo-tree-id8495 . -4) (undo-tree-id8496 . -4) 1626) nil (26116 19451 413035 429000) 0 nil])
([nil nil ((#("mut _ " 0 3 (face font-lock-keyword-face fontified t) 3 6 (fontified t)) . -1616) (undo-tree-id8469 . -6) (undo-tree-id8470 . -6) (undo-tree-id8471 . -3) (undo-tree-id8472 . -6) (undo-tree-id8473 . -6) (undo-tree-id8474 . -6) (undo-tree-id8475 . -6) (undo-tree-id8476 . -6) (undo-tree-id8477 . -6) (undo-tree-id8478 . -6) (undo-tree-id8479 . -6) (undo-tree-id8480 . -6) (undo-tree-id8481 . -6) (undo-tree-id8482 . -6) (undo-tree-id8483 . -6) 1622) nil (26116 19451 413025 819000) 0 nil])
([nil nil ((#("as *" 0 2 (face font-lock-keyword-face fontified t) 2 4 (fontified t)) . -1612) (undo-tree-id8444 . -4) (undo-tree-id8445 . -4) (undo-tree-id8446 . -1) (undo-tree-id8447 . -1) (undo-tree-id8448 . -1) (undo-tree-id8449 . -1) (undo-tree-id8450 . -1) (undo-tree-id8451 . -1) (undo-tree-id8452 . -2) (undo-tree-id8453 . -4) (undo-tree-id8454 . -4) (undo-tree-id8455 . -4) (undo-tree-id8456 . -4) (undo-tree-id8457 . -4) (undo-tree-id8458 . -4) (undo-tree-id8459 . -4) (undo-tree-id8460 . -4) (undo-tree-id8461 . -4) (undo-tree-id8462 . -4) (undo-tree-id8463 . -4) (undo-tree-id8464 . -4) (undo-tree-id8465 . -4) (undo-tree-id8466 . -4) (undo-tree-id8467 . -4) (undo-tree-id8468 . -4) 1616) nil (26116 19451 413014 892000) 0 nil])
([nil nil ((#("self " 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t)) . -1607) (undo-tree-id8412 . -5) (undo-tree-id8413 . -5) (undo-tree-id8414 . -5) (undo-tree-id8415 . -5) (undo-tree-id8416 . -5) (undo-tree-id8417 . -5) (undo-tree-id8418 . -5) (undo-tree-id8419 . -5) (undo-tree-id8420 . -5) (undo-tree-id8421 . -5) (undo-tree-id8422 . -5) (undo-tree-id8423 . -5) (undo-tree-id8424 . -5) (undo-tree-id8425 . -5) (undo-tree-id8426 . -5) (undo-tree-id8427 . -5) (undo-tree-id8428 . -5) (undo-tree-id8429 . -5) (undo-tree-id8430 . -5) (undo-tree-id8431 . -5) (undo-tree-id8432 . -5) (undo-tree-id8433 . -5) (undo-tree-id8434 . -5) (undo-tree-id8435 . -5) (undo-tree-id8436 . -5) (undo-tree-id8437 . -5) (undo-tree-id8438 . -5) (undo-tree-id8439 . -5) (undo-tree-id8440 . -5) (undo-tree-id8441 . -5) (undo-tree-id8442 . -5) (undo-tree-id8443 . -5) 1612) nil (26116 19451 412997 343000) 0 nil])
([nil nil ((1607 . 1612)) nil (26116 19451 412974 883000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -1609) (undo-tree-id8387 . -1) (undo-tree-id8388 . -1) (undo-tree-id8389 . -1) (undo-tree-id8390 . -1) (undo-tree-id8391 . -1) (undo-tree-id8392 . -1) (undo-tree-id8393 . -1) (undo-tree-id8394 . -1) (undo-tree-id8395 . -1) (undo-tree-id8396 . -1) (undo-tree-id8397 . -1) (#("u" 0 1 (fontified t)) . -1610) (undo-tree-id8398 . -1) (undo-tree-id8399 . -1) (undo-tree-id8400 . -1) (undo-tree-id8401 . -1) (undo-tree-id8402 . -1) (undo-tree-id8403 . -1) (undo-tree-id8404 . -1) (undo-tree-id8405 . -1) (undo-tree-id8406 . -1) (#("f" 0 1 (fontified t)) . -1611) (undo-tree-id8407 . -1) (undo-tree-id8408 . -1) (undo-tree-id8409 . -1) (undo-tree-id8410 . -1) (undo-tree-id8411 . -1) 1612) nil (26116 19451 412972 931000) 0 nil])
([nil nil ((1609 . 1611)) nil (26116 19451 412566 486000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -1610) (undo-tree-id8384 . -1) (undo-tree-id8385 . -1) (undo-tree-id8386 . -1) 1611) nil (26116 19451 412565 648000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -1609) (undo-tree-id8376 . -1) (undo-tree-id8377 . -1) (undo-tree-id8378 . -1) (undo-tree-id8379 . -1) (undo-tree-id8380 . -1) (undo-tree-id8381 . -1) (undo-tree-id8382 . -1) (undo-tree-id8383 . -1) 1610) nil (26116 19451 412562 793000) 0 nil])
([nil nil ((1609 . 1620)) nil (26116 19451 412556 334000) 0 nil])
([nil nil ((#("mut " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -1616) (undo-tree-id8363 . -4) (undo-tree-id8364 . -1) (undo-tree-id8365 . -1) (undo-tree-id8366 . -1) (undo-tree-id8367 . -1) (undo-tree-id8368 . -2) (undo-tree-id8369 . -2) (undo-tree-id8370 . -3) (undo-tree-id8371 . -3) (undo-tree-id8372 . -4) (undo-tree-id8373 . -4) (undo-tree-id8374 . -4) (undo-tree-id8375 . -4) 1620) nil (26116 19451 412555 171000) 0 nil])
([nil nil ((1616 . 1619)) nil (26116 19451 412545 133000) 0 nil])
([nil nil ((1619 . 1620)) nil (26116 19451 412544 438000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -1619) (undo-tree-id8360 . -1) (undo-tree-id8361 . -1) (undo-tree-id8362 . -1) 1620) nil (26116 19451 412543 400000) 0 nil])
([nil nil ((1619 . 1621)) nil (26116 19451 412540 470000) 0 nil])
([nil nil ((#("const" 0 5 (face font-lock-keyword-face fontified t)) . -1616) (undo-tree-id8339 . -5) (undo-tree-id8340 . -5) (undo-tree-id8341 . -1) (undo-tree-id8342 . -2) (undo-tree-id8343 . -2) (undo-tree-id8344 . -3) (undo-tree-id8345 . -3) (undo-tree-id8346 . -3) (undo-tree-id8347 . -3) (undo-tree-id8348 . -3) (undo-tree-id8349 . -3) (undo-tree-id8350 . -4) (undo-tree-id8351 . -4) (undo-tree-id8352 . -5) (undo-tree-id8353 . -5) (undo-tree-id8354 . -5) (undo-tree-id8355 . -5) (undo-tree-id8356 . -5) (undo-tree-id8357 . -5) (undo-tree-id8358 . -5) (undo-tree-id8359 . -5) 1621) nil (26116 19451 412537 775000) 0 nil])
([nil nil ((1616 . 1621)) nil (26116 19451 412512 74000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -1620) (undo-tree-id8532 . -1) (undo-tree-id8533 . -1) (undo-tree-id8534 . -1) (undo-tree-id8535 . -1) (undo-tree-id8536 . -1) (undo-tree-id8537 . -1) (undo-tree-id8538 . -1) (undo-tree-id8539 . -1) (undo-tree-id8540 . -1) (undo-tree-id8541 . -1) (undo-tree-id8542 . -1) (undo-tree-id8543 . -1) 1621 (t 26116 19451 431940 150000)) nil (26116 19456 968268 430000) 0 nil])
([nil nil ((1620 . 1622)) nil (26116 19456 968257 618000) 0 nil])
([nil nil ((1620 . 1626) (#("c_" 0 2 (fontified nil)) . 1620) (1620 . 1622) (#("c_void" 0 6 (fontified nil)) . -1620) (1620 . 1626) (#("c_" 0 2 (fontified t)) . -1620) (undo-tree-id8524 . -2) (undo-tree-id8525 . -1) (undo-tree-id8526 . -1) (undo-tree-id8527 . -1) (undo-tree-id8528 . -1) (undo-tree-id8529 . -2) (undo-tree-id8530 . -2) (undo-tree-id8531 . -2) 1622) nil (26116 19456 968252 873000) 0 nil])
([nil nil ((1612 . 1613) (t 26116 19456 995273 824000)) nil (26116 19463 986894 578000) 0 nil])
([nil nil ((1612 . 1621)) nil (26116 19463 986889 772000) 0 nil])
([nil nil ((1513 . 1517) (t 26116 19464 5274 255000)) nil (26116 19469 966048 453000) 0 nil])
([nil nil ((1612 . 1616) (t 26116 19469 998607 956000)) nil (26116 19473 450351 836000) 0 nil])
([nil nil ((2267 . 2276) (t 26116 19473 475274 836000)) nil (26116 19585 135878 312000) 0 nil])
([nil nil ((2276 . 2277)) nil (26116 19585 135877 458000) 0 nil])
([nil nil ((2276 . 2280) (#("s" 0 1 (fontified nil)) . 2276) (2276 . 2277) (#("self" 0 4 (fontified nil)) . -2276) (2276 . 2280) (#("s" 0 1 (fontified t)) . -2276) (undo-tree-id8615 . -1) 2277) nil (26116 19585 135876 309000) 0 nil])
([nil nil ((2280 . 2283)) nil (26116 19585 135873 539000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2280) (undo-tree-id8612 . -1) (#("=" 0 1 (fontified t)) . -2281) (undo-tree-id8613 . -1) (#(" " 0 1 (fontified t)) . -2282) (undo-tree-id8614 . -1) 2283) nil (26116 19585 135872 323000) 0 nil])
([nil nil ((2280 . 2281)) nil (26116 19585 135868 167000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2280) (undo-tree-id8611 . -1) 2281) nil (26116 19585 135867 123000) 0 nil])
([nil nil ((2280 . 2283)) nil (26116 19585 135865 452000) 0 nil])
([nil nil ((2283 . 2286)) nil (26116 19585 135864 811000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -2283) (undo-tree-id8608 . -1) (#("y" 0 1 (fontified t)) . -2284) (undo-tree-id8609 . -1) (#("f" 0 1 (fontified t)) . -2285) (undo-tree-id8610 . -1) 2286) nil (26116 19585 135863 529000) 0 nil])
([nil nil ((2283 . 2287)) nil (26116 19585 135859 737000) 0 nil])
([nil nil ((#("std:" 0 3 (face font-lock-variable-name-face fontified t) 3 4 (fontified t)) . -2283) (undo-tree-id8607 . -4) 2287) nil (26116 19585 135858 733000) 0 nil])
([nil nil ((2283 . 2295)) nil (26116 19585 135857 22000) 0 nil])
([nil nil ((#("F" 0 1 (face font-lock-type-face fontified t)) . -2291) (undo-tree-id8603 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -2292) (undo-tree-id8604 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -2293) (undo-tree-id8605 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -2294) (undo-tree-id8606 . -1) 2295) nil (26116 19585 135855 724000) 0 nil])
([nil nil ((2291 . 2295)) nil (26116 19585 135850 970000) 0 nil])
([nil nil ((#("from" 0 4 (fontified t)) . -2291) (undo-tree-id8602 . -4) 2295) nil (26116 19585 135850 35000) 0 nil])
([nil nil ((#("String::" 0 6 (face font-lock-type-face fontified t) 6 8 (fontified t)) . -2283) (undo-tree-id8601 . -8) 2291) nil (26116 19585 135848 135000) 0 nil])
([nil nil ((2283 . 2297)) nil (26116 19585 135845 789000) 0 nil])
([nil nil ((#("from" 0 4 (fontified t)) . -2293) (undo-tree-id8600 . -4) 2297) nil (26116 19585 135844 926000) 0 nil])
([nil nil ((#("str::" 0 3 (face font-lock-type-face fontified t) 3 5 (fontified t)) . -2288) (undo-tree-id8599 . -5) 2293) nil (26116 19585 135843 205000) 0 nil])
([nil nil ((#("std::" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t)) . -2283) (undo-tree-id8598 . -5) 2288) nil (26116 19585 135839 903000) 0 nil])
([nil nil ((2283 . 2286)) nil (26116 19585 135837 698000) 0 nil])
([nil nil ((2283 . 2289) (#("Str" 0 3 (fontified nil)) . 2283) (2283 . 2286) (#("String" 0 6 (fontified nil)) . -2283) (2283 . 2289) (#("Str" 0 3 (face font-lock-type-face fontified t)) . -2283) (undo-tree-id8595 . -3) (undo-tree-id8596 . -2) (undo-tree-id8597 . -3) 2286) nil (26116 19585 135836 84000) 0 nil])
([nil nil ((2289 . 2295)) nil (26116 19585 135831 597000) 0 nil])
([nil nil ((2295 . 2296)) nil (26116 19585 135830 748000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -2295) (undo-tree-id8593 . -1) (undo-tree-id8594 . -1) 2296) nil (26116 19585 135829 829000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2301 2313 nil nil nil t #s(yas--exit 2314 nil))) #s(yas--exit 2314 nil) 78 nil #s(yas--field 1 2301 2313 nil nil nil t #s(yas--exit 2314 nil)) nil nil)) (2291 . 2305) (#("from_utf8(${1:vec})$0" 0 21 (fontified nil)) . 2291) (2291 . 2312) (#("from" 0 4 (fontified nil)) . 2291) (2291 . 2295) (#("from_utf8(â€¦)" 0 12 (fontified nil)) . -2291) (2291 . 2303) (#("from" 0 4 (fontified t)) . -2291) (undo-tree-id8577 . -4) (undo-tree-id8578 . -1) (undo-tree-id8579 . -2) (undo-tree-id8580 . -3) (undo-tree-id8581 . -4) (undo-tree-id8582 . -4) (undo-tree-id8583 . -4) (undo-tree-id8584 . -4) (undo-tree-id8585 . -4) (undo-tree-id8586 . -4) (undo-tree-id8587 . -4) (undo-tree-id8588 . -4) (undo-tree-id8589 . -4) (undo-tree-id8590 . -4) (undo-tree-id8591 . -4) (undo-tree-id8592 . -4) 2295) nil (26116 19585 135826 77000) 0 nil])
([nil nil ((#("vec" 0 3 (fontified nil)) . 2302) (undo-tree-id8576 . -3) (2301 . 2302)) nil (26116 19585 135808 898000) 0 nil])
([nil nil ((2301 . 2304) (#("b" 0 1 (fontified nil)) . 2301) (undo-tree-id8564 . -1) (2301 . 2302) (#("buf" 0 3 (fontified nil)) . -2301) (undo-tree-id8565 . -3) (2301 . 2304) (#("b" 0 1 (fontified t)) . -2301) (undo-tree-id8566 . -1) (undo-tree-id8567 . -1) (undo-tree-id8568 . -1) (undo-tree-id8569 . -1) (undo-tree-id8570 . -1) (undo-tree-id8571 . -1) (undo-tree-id8572 . -1) (undo-tree-id8573 . -1) (undo-tree-id8574 . -1) (undo-tree-id8575 . -1) 2302) nil (26116 19585 135805 861000) 0 nil])
([nil nil ((2304 . 2305)) nil (26116 19585 135793 464000) 0 nil])
([nil nil ((2305 . 2307)) nil (26116 19585 135792 821000) 0 nil])
([nil nil ((apply yas--snippet-revive 2305 2313 #s(yas--snippet nil nil #s(yas--exit 2313 nil) 79 nil nil #s(yas--field 1 2301 2313 nil nil nil t #s(yas--exit 2314 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2313 nil) 79 nil nil #s(yas--field 1 2301 2313 nil nil nil t #s(yas--exit 2314 nil)) nil)) (2305 . 2313) (#("to_vec()$0" 0 10 (fontified nil)) . 2305) (undo-tree-id8550 . -10) (2305 . 2315) (#("to" 0 2 (fontified nil)) . 2305) (undo-tree-id8551 . -2) (2305 . 2307) (#("to_vec()" 0 8 (fontified nil)) . -2305) (undo-tree-id8552 . -8) (2305 . 2313) (#("to" 0 2 (fontified t)) . -2305) (undo-tree-id8553 . -2) (undo-tree-id8554 . -2) (undo-tree-id8555 . -2) (undo-tree-id8556 . -1) (undo-tree-id8557 . -1) (undo-tree-id8558 . -1) (undo-tree-id8559 . -1) (undo-tree-id8560 . -2) (undo-tree-id8561 . -2) (undo-tree-id8562 . -2) (undo-tree-id8563 . -2) 2307) nil (26116 19585 135790 691000) 0 nil])
([nil nil ((apply yas--snippet-revive 2291 2314 #s(yas--snippet nil (#s(yas--field 1 2301 2313 nil nil nil t #s(yas--exit 2314 nil))) #s(yas--exit 2314 nil) 78 nil #s(yas--field 1 2301 2313 nil nil nil t #s(yas--exit 2314 nil)) nil nil))) nil (26116 19585 135775 56000) 0 nil])
([nil nil ((2314 . 2316)) nil (26116 19585 135774 196000) 0 nil])
([nil nil ((apply yas--snippet-revive 2315 2323 #s(yas--snippet nil nil #s(yas--exit 2323 nil) 80 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2323 nil) 80 nil nil nil nil)) (2315 . 2323) (#("unwrap()$0" 0 10 (fontified nil)) . 2315) (2315 . 2325) (#("u" 0 1 (fontified nil)) . 2315) (2315 . 2316) (#("unwrap()" 0 8 (fontified nil)) . -2315) (2315 . 2323) (#("u" 0 1 (fontified t)) . -2315) (undo-tree-id8544 . -1) (undo-tree-id8545 . -1) (undo-tree-id8546 . -1) (undo-tree-id8547 . -1) (undo-tree-id8548 . -1) (undo-tree-id8549 . -1) 2316) nil (26116 19585 135771 160000) 0 nil])
([nil nil ((2323 . 2324)) nil (26116 19585 135749 691000) 0 nil])
([nil nil ((2276 . 2277) (t 26116 19585 161948 359000)) nil (26116 19596 901943 616000) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . -2276) (undo-tree-id8621 . -1) (undo-tree-id8622 . -1) 2277) nil (26116 19596 901942 576000) 0 nil])
([nil nil ((2276 . 2278)) nil (26116 19596 901940 165000) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . -2276) (undo-tree-id8616 . -1) (undo-tree-id8617 . -1) (undo-tree-id8618 . -1) (#("*" 0 1 (fontified t)) . -2277) (undo-tree-id8619 . -1) (undo-tree-id8620 . -1) 2278) nil (26116 19596 901937 763000) 0 nil])
([nil nil ((2276 . 2277)) nil (26116 19596 901923 830000) 0 nil])
([nil nil ((#("unwrap();" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-3-face) fontified t) 7 8 (face (rainbow-delimiters-depth-3-face) fontified t) 8 9 (fontified t)) . -2316) (undo-tree-id8925 . -9) (undo-tree-id8926 . -9) (undo-tree-id8927 . -9) (undo-tree-id8928 . -9) (undo-tree-id8929 . -9) (undo-tree-id8930 . -9) (undo-tree-id8931 . -9) (undo-tree-id8932 . -9) (undo-tree-id8933 . -9) (undo-tree-id8934 . -9) (undo-tree-id8935 . -9) (undo-tree-id8936 . -9) 2325 (t 26116 19596 928615 747000)) nil (26116 19818 717293 282000) 0 nil])
([nil nil ((#("vec())." 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-4-face) fontified t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t) 5 6 (face (rainbow-delimiters-depth-3-face) fontified t) 6 7 (fontified t)) . -2309) (undo-tree-id8912 . -7) (undo-tree-id8913 . -7) (undo-tree-id8914 . -7) (undo-tree-id8915 . -7) (undo-tree-id8916 . -7) (undo-tree-id8917 . -7) (undo-tree-id8918 . -7) (undo-tree-id8919 . -7) (undo-tree-id8920 . -7) (undo-tree-id8921 . -7) (undo-tree-id8922 . -7) (undo-tree-id8923 . -7) (undo-tree-id8924 . -7) 2316) nil (26116 19818 717284 584000) 0 nil])
([nil nil ((#("to_" 0 3 (fontified t)) . -2306) (undo-tree-id8898 . -3) (undo-tree-id8899 . -3) (undo-tree-id8900 . -3) (undo-tree-id8901 . -3) (undo-tree-id8902 . -3) (undo-tree-id8903 . -3) (undo-tree-id8904 . -3) (undo-tree-id8905 . -3) (undo-tree-id8906 . -3) (undo-tree-id8907 . -3) (undo-tree-id8908 . -3) (undo-tree-id8909 . -3) (undo-tree-id8910 . -3) (undo-tree-id8911 . -3) 2309) nil (26116 19818 717275 428000) 0 nil])
([nil nil ((#("buf." 0 4 (fontified t)) . -2302) (undo-tree-id8883 . -4) (undo-tree-id8884 . -4) (undo-tree-id8885 . -4) (undo-tree-id8886 . -4) (undo-tree-id8887 . -4) (undo-tree-id8888 . -4) (undo-tree-id8889 . -4) (undo-tree-id8890 . -4) (undo-tree-id8891 . -4) (undo-tree-id8892 . -4) (undo-tree-id8893 . -4) (undo-tree-id8894 . -4) (undo-tree-id8895 . -4) (undo-tree-id8896 . -4) (undo-tree-id8897 . -4) 2306) nil (26116 19818 717266 203000) 0 nil])
([nil nil ((#("utf8(" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-3-face) fontified t)) . -2297) (undo-tree-id8866 . -5) (undo-tree-id8867 . -5) (undo-tree-id8868 . -5) (undo-tree-id8869 . -5) (undo-tree-id8870 . -5) (undo-tree-id8871 . -5) (undo-tree-id8872 . -5) (undo-tree-id8873 . -5) (undo-tree-id8874 . -5) (undo-tree-id8875 . -5) (undo-tree-id8876 . -5) (undo-tree-id8877 . -5) (undo-tree-id8878 . -5) (undo-tree-id8879 . -5) (undo-tree-id8880 . -5) (undo-tree-id8881 . -5) (undo-tree-id8882 . -5) 2302) nil (26116 19818 717255 464000) 0 nil])
([nil nil ((#("from_" 0 5 (fontified t)) . -2292) (undo-tree-id8848 . -5) (undo-tree-id8849 . -5) (undo-tree-id8850 . -5) (undo-tree-id8851 . -5) (undo-tree-id8852 . -5) (undo-tree-id8853 . -5) (undo-tree-id8854 . -5) (undo-tree-id8855 . -5) (undo-tree-id8856 . -5) (undo-tree-id8857 . -5) (undo-tree-id8858 . -5) (undo-tree-id8859 . -5) (undo-tree-id8860 . -5) (undo-tree-id8861 . -5) (undo-tree-id8862 . -5) (undo-tree-id8863 . -5) (undo-tree-id8864 . -5) (undo-tree-id8865 . -5) 2297) nil (26116 19818 717243 482000) 0 nil])
([nil nil ((2292 . 2296)) nil (26116 19818 717160 371000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -2295) (undo-tree-id8844 . -1) (undo-tree-id8845 . -1) (undo-tree-id8846 . -1) (undo-tree-id8847 . -1) 2296) nil (26116 19818 717159 498000) 0 nil])
([nil nil ((2295 . 2296)) nil (26116 19818 717156 13000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2312 2324 nil nil nil t #s(yas--exit 2325 nil))) #s(yas--exit 2325 nil) 82 nil #s(yas--field 1 2312 2324 nil nil nil t #s(yas--exit 2325 nil)) nil nil)) (2292 . 2318) (#("from_utf8_unchecked(${1:bytes})$0" 0 33 (fontified nil)) . 2292) (2292 . 2325) (#("from" 0 4 (fontified nil)) . 2292) (2292 . 2296) (#("from_utf8_unchecked(â€¦)" 0 22 (fontified nil)) . -2292) (2292 . 2314) (#("from" 0 4 (fontified t)) . -2292) (undo-tree-id8826 . -4) (undo-tree-id8827 . -1) (undo-tree-id8828 . -2) (undo-tree-id8829 . -3) (undo-tree-id8830 . -3) (undo-tree-id8831 . -3) (undo-tree-id8832 . -3) (undo-tree-id8833 . -3) (undo-tree-id8834 . -3) (undo-tree-id8835 . -3) (undo-tree-id8836 . -3) (undo-tree-id8837 . -3) (undo-tree-id8838 . -3) (undo-tree-id8839 . -4) (undo-tree-id8840 . -4) (undo-tree-id8841 . -4) (undo-tree-id8842 . -4) (undo-tree-id8843 . -4) 2296) nil (26116 19818 717154 109000) 0 nil])
([nil nil ((2313 . 2314) (#("bytes" 0 5 (fontified nil)) . 2313) (undo-tree-id8825 . -5) (2312 . 2313)) nil (26116 19818 717015 462000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2313) (undo-tree-id8811 . -1) (undo-tree-id8812 . -1) (undo-tree-id8813 . -1) (undo-tree-id8814 . -1) (undo-tree-id8815 . -1) (undo-tree-id8816 . -1) (undo-tree-id8817 . -1) (undo-tree-id8818 . -1) (undo-tree-id8819 . -1) (undo-tree-id8820 . -1) (undo-tree-id8821 . -1) (undo-tree-id8822 . -1) (undo-tree-id8823 . -1) (undo-tree-id8824 . -1) 2314) nil (26116 19818 717013 339000) 0 nil])
([nil nil ((2313 . 2314)) nil (26116 19818 717003 782000) 0 nil])
([nil nil ((2312 . 2315) (#("bu" 0 2 (fontified nil)) . 2312) (undo-tree-id8777 . -2) (2312 . 2314) (#("buf" 0 3 (fontified nil)) . -2312) (undo-tree-id8778 . -3) (2312 . 2315) (#("bu" 0 2 (fontified t)) . -2312) (undo-tree-id8779 . -2) (undo-tree-id8780 . -2) (undo-tree-id8781 . -2) (undo-tree-id8782 . -1) (undo-tree-id8783 . -1) (undo-tree-id8784 . -1) (undo-tree-id8785 . -1) (undo-tree-id8786 . -1) (undo-tree-id8787 . -1) (undo-tree-id8788 . -1) (undo-tree-id8789 . -1) (undo-tree-id8790 . -1) (undo-tree-id8791 . -1) (undo-tree-id8792 . -1) (undo-tree-id8793 . -1) (undo-tree-id8794 . -1) (undo-tree-id8795 . -1) (undo-tree-id8796 . -1) (undo-tree-id8797 . -1) (undo-tree-id8798 . -1) (undo-tree-id8799 . -1) (undo-tree-id8800 . -1) (undo-tree-id8801 . -1) (undo-tree-id8802 . -1) (undo-tree-id8803 . -1) (undo-tree-id8804 . -1) (undo-tree-id8805 . -2) (undo-tree-id8806 . -2) (undo-tree-id8807 . -2) (undo-tree-id8808 . -2) (undo-tree-id8809 . -2) (undo-tree-id8810 . -2) 2314) nil (26116 19818 717001 554000) 0 nil])
([nil nil ((2315 . 2320)) nil (26116 19818 716979 441000) 0 nil])
([nil nil ((apply yas--snippet-revive 2316 2324 #s(yas--snippet nil nil #s(yas--exit 2324 nil) 83 nil nil #s(yas--field 1 2312 2324 nil nil nil t #s(yas--exit 2325 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2324 nil) 83 nil nil #s(yas--field 1 2312 2324 nil nil nil t #s(yas--exit 2325 nil)) nil)) (2316 . 2324) (#("to_vec()$0" 0 10 (fontified nil)) . 2316) (undo-tree-id8753 . -10) (2316 . 2326) (#("to_v" 0 4 (fontified nil)) . 2316) (undo-tree-id8754 . -4) (2316 . 2320) (#("to_vec()" 0 8 (fontified nil)) . -2316) (undo-tree-id8755 . -8) (2316 . 2324) (#("to_v" 0 4 (fontified t)) . -2316) (undo-tree-id8756 . -4) (undo-tree-id8757 . -4) (undo-tree-id8758 . -4) (undo-tree-id8759 . -1) (undo-tree-id8760 . -1) (undo-tree-id8761 . -1) (undo-tree-id8762 . -2) (undo-tree-id8763 . -2) (undo-tree-id8764 . -2) (undo-tree-id8765 . -2) (undo-tree-id8766 . -2) (undo-tree-id8767 . -2) (undo-tree-id8768 . -2) (undo-tree-id8769 . -2) (undo-tree-id8770 . -3) (undo-tree-id8771 . -3) (undo-tree-id8772 . -3) (undo-tree-id8773 . -4) (undo-tree-id8774 . -4) (undo-tree-id8775 . -4) (undo-tree-id8776 . -4) 2320) nil (26116 19818 716977 289000) 0 nil])
([nil nil ((apply yas--snippet-revive 2292 2325 #s(yas--snippet nil (#s(yas--field 1 2312 2324 nil nil nil t #s(yas--exit 2325 nil))) #s(yas--exit 2325 nil) 82 nil #s(yas--field 1 2312 2324 nil nil nil t #s(yas--exit 2325 nil)) nil nil))) nil (26116 19818 716959 670000) 0 nil])
([nil nil ((2325 . 2327)) nil (26116 19818 719255 351000) 0 nil])
([nil nil ((2327 . 2328)) nil (26116 19832 269119 515000) 0 nil] [nil nil ((apply yas--snippet-revive 2284 2336 #s(yas--snippet nil nil nil 84 nil nil nil nil)) (#("String::from_utf8_unchecked(buf.to_vec())." 0 6 (face font-lock-type-face fontified nil) 6 8 (fontified nil) 8 27 (fontified nil) 27 28 (face (rainbow-delimiters-depth-3-face) fontified nil) 28 32 (fontified nil) 32 38 (fontified nil) 38 39 (face (rainbow-delimiters-depth-4-face) fontified nil) 39 40 (face (rainbow-delimiters-depth-4-face) fontified nil) 40 41 (face (rainbow-delimiters-depth-3-face) fontified nil) 41 42 (fontified nil)) . -2284) (undo-tree-id8623 . -8) (undo-tree-id8624 . -41) (undo-tree-id8625 . -42) (undo-tree-id8626 . -8) (undo-tree-id8627 . -8) (undo-tree-id8628 . -8) (undo-tree-id8629 . -8) (undo-tree-id8630 . -8) (undo-tree-id8631 . -8) (undo-tree-id8632 . -8) (undo-tree-id8633 . -8) (undo-tree-id8634 . -8) (undo-tree-id8635 . -8) (undo-tree-id8636 . -8) (undo-tree-id8637 . -8) (undo-tree-id8638 . -8) (undo-tree-id8639 . -8) (undo-tree-id8640 . -8) (undo-tree-id8641 . -8) (undo-tree-id8642 . -8) (undo-tree-id8643 . -8) (undo-tree-id8644 . -8) (undo-tree-id8645 . -8) (undo-tree-id8646 . -8) (undo-tree-id8647 . -8) (undo-tree-id8648 . -8) (undo-tree-id8649 . -8) (undo-tree-id8650 . -8) (undo-tree-id8651 . -8) (undo-tree-id8652 . -8) (undo-tree-id8653 . -8) (undo-tree-id8654 . -8) (undo-tree-id8655 . -8) (undo-tree-id8656 . -8) (undo-tree-id8657 . -8) (undo-tree-id8658 . -8) (undo-tree-id8659 . -41) (undo-tree-id8660 . -41) (undo-tree-id8661 . -28) (undo-tree-id8662 . -28) (undo-tree-id8663 . -28) (undo-tree-id8664 . -28) (undo-tree-id8665 . -28) (undo-tree-id8666 . -28) (undo-tree-id8667 . -28) (undo-tree-id8668 . -28) (undo-tree-id8669 . -28) (undo-tree-id8670 . -28) (undo-tree-id8671 . -28) (undo-tree-id8672 . -28) (undo-tree-id8673 . -28) (undo-tree-id8674 . -28) (undo-tree-id8675 . -28) (undo-tree-id8676 . -28) (undo-tree-id8677 . -28) (undo-tree-id8678 . -28) (undo-tree-id8679 . -28) (undo-tree-id8680 . -28) (undo-tree-id8681 . -28) (undo-tree-id8682 . -28) (undo-tree-id8683 . -28) (undo-tree-id8684 . -28) (undo-tree-id8685 . -28) (undo-tree-id8686 . -28) (undo-tree-id8687 . -28) (undo-tree-id8688 . -28) (undo-tree-id8689 . -28) (undo-tree-id8690 . -28) (undo-tree-id8691 . -28) (undo-tree-id8692 . -28) (undo-tree-id8693 . -28) (undo-tree-id8694 . -28) (undo-tree-id8695 . -28) (undo-tree-id8696 . -28) (undo-tree-id8697 . -28) (undo-tree-id8698 . -28) (undo-tree-id8699 . -28) (undo-tree-id8700 . -28) (undo-tree-id8701 . -31) (undo-tree-id8702 . -31) (undo-tree-id8703 . -32) (undo-tree-id8704 . -32) (undo-tree-id8705 . -32) (undo-tree-id8706 . -32) (undo-tree-id8707 . -32) (undo-tree-id8708 . -32) (undo-tree-id8709 . -32) (undo-tree-id8710 . -32) (undo-tree-id8711 . -32) (undo-tree-id8712 . -32) (undo-tree-id8713 . -32) (undo-tree-id8714 . -32) (undo-tree-id8715 . -32) (undo-tree-id8716 . -32) (undo-tree-id8717 . -32) (undo-tree-id8718 . -32) (undo-tree-id8719 . -32) (undo-tree-id8720 . -32) (undo-tree-id8721 . -32) (undo-tree-id8722 . -32) (undo-tree-id8723 . -32) (undo-tree-id8724 . -32) (undo-tree-id8725 . -32) (undo-tree-id8726 . -32) (undo-tree-id8727 . -32) (undo-tree-id8728 . -32) (undo-tree-id8729 . -32) (undo-tree-id8730 . -32) (undo-tree-id8731 . -40) (undo-tree-id8732 . -40) (undo-tree-id8733 . -41) (undo-tree-id8734 . -41) (undo-tree-id8735 . -41) (undo-tree-id8736 . -41) (undo-tree-id8737 . -41) (undo-tree-id8738 . -41) (undo-tree-id8739 . -41) (undo-tree-id8740 . -42) (undo-tree-id8741 . -42) (undo-tree-id8742 . -42) (undo-tree-id8743 . -42) (undo-tree-id8744 . -42) (undo-tree-id8745 . -42) (undo-tree-id8746 . -42) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 84 nil nil nil nil)) (2326 . 2378) (#("unsafe { String::from_utf8_unchecked(buf.to_vec()) }" 0 52 (fontified nil)) . 2326) (2326 . 2378) (#("u" 0 1 (fontified nil)) . 2326) (2326 . 2327) (#("unsafe" 0 6 (fontified nil)) . -2326) (2326 . 2332) (#("u" 0 1 (fontified t)) . -2326) (undo-tree-id8747 . -1) (undo-tree-id8748 . -1) (undo-tree-id8749 . -1) (undo-tree-id8750 . -1) (undo-tree-id8751 . -1) (undo-tree-id8752 . -1) 2327) ((2326 . 2327) (#("unsafe" 0 6 (fontified nil)) . 2326) (2326 . 2332) (#("u" 0 1 (fontified nil)) . 2326) (2326 . 2327) (#("unsafe { String::from_utf8_unchecked(buf.to_vec()) }" 0 52 (fontified nil)) . 2326) (2326 . 2378) (#("unsafe { String::from_utf8_unchecked(buf.to_vec()) }" 0 6 (face rust-unsafe fontified nil) 6 7 (fontified nil) 7 8 (face (rainbow-delimiters-depth-3-face) fontified nil) 8 9 (fontified nil) 9 15 (face font-lock-type-face fontified nil) 15 36 (fontified nil) 36 37 (face (rainbow-delimiters-depth-4-face) fontified nil) 37 47 (fontified nil) 47 48 (face (rainbow-delimiters-depth-5-face) fontified nil) 48 49 (face (rainbow-delimiters-depth-5-face) fontified nil) 49 50 (face (rainbow-delimiters-depth-4-face) fontified nil) 50 51 (fontified nil) 51 52 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 2326) (undo-tree-id8937 . -52) (2284 . 2326)) (26116 19818 716949 852000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t)) . -2327) (undo-tree-id9194 . -1) (undo-tree-id9195 . -1) 2328) nil (26116 19832 269118 688000) 0 nil])
nil
([nil nil ((2327 . 2328)) nil (26116 19832 269116 568000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2325) (undo-tree-id9135 . -1) (undo-tree-id9136 . -1) (undo-tree-id9137 . -1) (undo-tree-id9138 . -1) (undo-tree-id9139 . -1) (undo-tree-id9140 . -1) (undo-tree-id9141 . -1) (undo-tree-id9142 . -1) (undo-tree-id9143 . -1) (undo-tree-id9144 . -1) (undo-tree-id9145 . -1) (undo-tree-id9146 . -1) (undo-tree-id9147 . -1) (undo-tree-id9148 . -1) (undo-tree-id9149 . -1) (undo-tree-id9150 . -1) (undo-tree-id9151 . -1) (undo-tree-id9152 . -1) (undo-tree-id9153 . -1) (undo-tree-id9154 . -1) (undo-tree-id9155 . -1) (undo-tree-id9156 . -1) (undo-tree-id9157 . -1) (undo-tree-id9158 . -1) (undo-tree-id9159 . -1) (undo-tree-id9160 . -1) (undo-tree-id9161 . -1) (undo-tree-id9162 . -1) (undo-tree-id9163 . -1) (undo-tree-id9164 . -1) (#("u" 0 1 (fontified t)) . -2326) (undo-tree-id9165 . -1) (undo-tree-id9166 . -1) (undo-tree-id9167 . -1) (undo-tree-id9168 . -1) (undo-tree-id9169 . -1) (undo-tree-id9170 . -1) (undo-tree-id9171 . -1) (undo-tree-id9172 . -1) (undo-tree-id9173 . -1) (undo-tree-id9174 . -1) (undo-tree-id9175 . -1) (undo-tree-id9176 . -1) (undo-tree-id9177 . -1) (undo-tree-id9178 . -1) (undo-tree-id9179 . -1) (undo-tree-id9180 . -1) (undo-tree-id9181 . -1) (undo-tree-id9182 . -1) (undo-tree-id9183 . -1) (undo-tree-id9184 . -1) (undo-tree-id9185 . -1) (undo-tree-id9186 . -1) (undo-tree-id9187 . -1) (undo-tree-id9188 . -1) (#("n" 0 1 (fontified t)) . -2327) (undo-tree-id9189 . -1) (undo-tree-id9190 . -1) (undo-tree-id9191 . -1) (undo-tree-id9192 . -1) (undo-tree-id9193 . -1) 2328) nil (26116 19832 269113 871000) 0 nil])
([nil nil ((2325 . 2326)) nil (26116 19832 268750 308000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -2325) (undo-tree-id9130 . -1) (undo-tree-id9131 . -1) (undo-tree-id9132 . -1) (undo-tree-id9133 . -1) (undo-tree-id9134 . -1) 2326) nil (26116 19832 268749 224000) 0 nil])
([nil nil ((2325 . 2327)) nil (26116 19832 268744 638000) 0 nil])
([nil nil ((apply yas--snippet-revive 2284 2336 #s(yas--snippet nil nil nil 85 nil nil nil nil)) (#("String::from_utf8_unchecked(buf.to_vec())." 0 6 (face font-lock-type-face fontified nil) 6 8 (fontified nil) 8 27 (fontified nil) 27 28 (face (rainbow-delimiters-depth-3-face) fontified nil) 28 32 (fontified nil) 32 38 (fontified nil) 38 39 (face (rainbow-delimiters-depth-4-face) fontified nil) 39 40 (face (rainbow-delimiters-depth-4-face) fontified nil) 40 41 (face (rainbow-delimiters-depth-3-face) fontified nil) 41 42 (fontified nil)) . -2284) (undo-tree-id8938 . -8) (undo-tree-id8939 . -41) (undo-tree-id8940 . -42) (undo-tree-id8941 . -8) (undo-tree-id8942 . -8) (undo-tree-id8943 . -8) (undo-tree-id8944 . -8) (undo-tree-id8945 . -8) (undo-tree-id8946 . -8) (undo-tree-id8947 . -8) (undo-tree-id8948 . -8) (undo-tree-id8949 . -8) (undo-tree-id8950 . -8) (undo-tree-id8951 . -8) (undo-tree-id8952 . -8) (undo-tree-id8953 . -8) (undo-tree-id8954 . -8) (undo-tree-id8955 . -8) (undo-tree-id8956 . -8) (undo-tree-id8957 . -8) (undo-tree-id8958 . -8) (undo-tree-id8959 . -8) (undo-tree-id8960 . -8) (undo-tree-id8961 . -8) (undo-tree-id8962 . -8) (undo-tree-id8963 . -8) (undo-tree-id8964 . -8) (undo-tree-id8965 . -8) (undo-tree-id8966 . -8) (undo-tree-id8967 . -8) (undo-tree-id8968 . -8) (undo-tree-id8969 . -8) (undo-tree-id8970 . -8) (undo-tree-id8971 . -8) (undo-tree-id8972 . -8) (undo-tree-id8973 . -41) (undo-tree-id8974 . -41) (undo-tree-id8975 . -28) (undo-tree-id8976 . -28) (undo-tree-id8977 . -28) (undo-tree-id8978 . -28) (undo-tree-id8979 . -28) (undo-tree-id8980 . -28) (undo-tree-id8981 . -28) (undo-tree-id8982 . -28) (undo-tree-id8983 . -28) (undo-tree-id8984 . -28) (undo-tree-id8985 . -28) (undo-tree-id8986 . -28) (undo-tree-id8987 . -28) (undo-tree-id8988 . -28) (undo-tree-id8989 . -28) (undo-tree-id8990 . -28) (undo-tree-id8991 . -28) (undo-tree-id8992 . -28) (undo-tree-id8993 . -28) (undo-tree-id8994 . -28) (undo-tree-id8995 . -28) (undo-tree-id8996 . -28) (undo-tree-id8997 . -28) (undo-tree-id8998 . -28) (undo-tree-id8999 . -28) (undo-tree-id9000 . -28) (undo-tree-id9001 . -28) (undo-tree-id9002 . -28) (undo-tree-id9003 . -28) (undo-tree-id9004 . -28) (undo-tree-id9005 . -28) (undo-tree-id9006 . -28) (undo-tree-id9007 . -28) (undo-tree-id9008 . -28) (undo-tree-id9009 . -28) (undo-tree-id9010 . -28) (undo-tree-id9011 . -28) (undo-tree-id9012 . -28) (undo-tree-id9013 . -28) (undo-tree-id9014 . -28) (undo-tree-id9015 . -31) (undo-tree-id9016 . -31) (undo-tree-id9017 . -32) (undo-tree-id9018 . -32) (undo-tree-id9019 . -32) (undo-tree-id9020 . -32) (undo-tree-id9021 . -32) (undo-tree-id9022 . -32) (undo-tree-id9023 . -32) (undo-tree-id9024 . -32) (undo-tree-id9025 . -32) (undo-tree-id9026 . -32) (undo-tree-id9027 . -32) (undo-tree-id9028 . -32) (undo-tree-id9029 . -32) (undo-tree-id9030 . -32) (undo-tree-id9031 . -32) (undo-tree-id9032 . -32) (undo-tree-id9033 . -32) (undo-tree-id9034 . -32) (undo-tree-id9035 . -32) (undo-tree-id9036 . -32) (undo-tree-id9037 . -32) (undo-tree-id9038 . -32) (undo-tree-id9039 . -32) (undo-tree-id9040 . -32) (undo-tree-id9041 . -32) (undo-tree-id9042 . -32) (undo-tree-id9043 . -32) (undo-tree-id9044 . -32) (undo-tree-id9045 . -40) (undo-tree-id9046 . -40) (undo-tree-id9047 . -41) (undo-tree-id9048 . -41) (undo-tree-id9049 . -41) (undo-tree-id9050 . -41) (undo-tree-id9051 . -41) (undo-tree-id9052 . -41) (undo-tree-id9053 . -41) (undo-tree-id9054 . -41) (undo-tree-id9055 . -41) (undo-tree-id9056 . -41) (undo-tree-id9057 . -41) (undo-tree-id9058 . -41) (undo-tree-id9059 . -41) (undo-tree-id9060 . -41) (undo-tree-id9061 . -41) (undo-tree-id9062 . -41) (undo-tree-id9063 . -41) (undo-tree-id9064 . -41) (undo-tree-id9065 . -41) (undo-tree-id9066 . -41) (undo-tree-id9067 . -41) (undo-tree-id9068 . -41) (undo-tree-id9069 . -41) (undo-tree-id9070 . -41) (undo-tree-id9071 . -41) (undo-tree-id9072 . -41) (undo-tree-id9073 . -41) (undo-tree-id9074 . -41) (undo-tree-id9075 . -41) (undo-tree-id9076 . -41) (undo-tree-id9077 . -41) (undo-tree-id9078 . -41) (undo-tree-id9079 . -41) (undo-tree-id9080 . -41) (undo-tree-id9081 . -41) (undo-tree-id9082 . -41) (undo-tree-id9083 . -41) (undo-tree-id9084 . -41) (undo-tree-id9085 . -41) (undo-tree-id9086 . -41) (undo-tree-id9087 . -41) (undo-tree-id9088 . -41) (undo-tree-id9089 . -41) (undo-tree-id9090 . -41) (undo-tree-id9091 . -41) (undo-tree-id9092 . -41) (undo-tree-id9093 . -41) (undo-tree-id9094 . -41) (undo-tree-id9095 . -41) (undo-tree-id9096 . -41) (undo-tree-id9097 . -41) (undo-tree-id9098 . -41) (undo-tree-id9099 . -41) (undo-tree-id9100 . -41) (undo-tree-id9101 . -41) (undo-tree-id9102 . -41) (undo-tree-id9103 . -41) (undo-tree-id9104 . -41) (undo-tree-id9105 . -41) (undo-tree-id9106 . -41) (undo-tree-id9107 . -41) (undo-tree-id9108 . -41) (undo-tree-id9109 . -41) (undo-tree-id9110 . -41) (undo-tree-id9111 . -41) (undo-tree-id9112 . -41) (undo-tree-id9113 . -41) (undo-tree-id9114 . -41) (undo-tree-id9115 . -41) (undo-tree-id9116 . -41) (undo-tree-id9117 . -42) (undo-tree-id9118 . -42) (undo-tree-id9119 . -42) (undo-tree-id9120 . -42) (undo-tree-id9121 . -42) (undo-tree-id9122 . -42) (undo-tree-id9123 . -42) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 85 nil nil nil nil)) (2326 . 2378) (#("unsafe { String::from_utf8_unchecked(buf.to_vec()) }" 0 52 (fontified nil)) . 2326) (2326 . 2378) (#("u" 0 1 (fontified nil)) . 2326) (2326 . 2327) (#("unsafe" 0 6 (fontified nil)) . -2326) (2326 . 2332) (#("u" 0 1 (fontified t)) . -2326) (undo-tree-id9124 . -1) (undo-tree-id9125 . -1) (undo-tree-id9126 . -1) (undo-tree-id9127 . -1) (undo-tree-id9128 . -1) (undo-tree-id9129 . -1) 2327) nil (26116 19896 403676 134000) 0 nil])
([nil nil ((2267 . 2276) (t 26116 19897 518634 199000)) nil (26116 20071 672338 688000) 0 nil] [nil nil ((#("unchecked" 0 9 (fontified t)) . -2311) (undo-tree-id9222 . -9) (undo-tree-id9223 . -9) (undo-tree-id9224 . -9) (undo-tree-id9225 . -9) (undo-tree-id9226 . -9) (undo-tree-id9227 . -9) (undo-tree-id9228 . -9) (undo-tree-id9229 . -9) (undo-tree-id9230 . -9) (undo-tree-id9231 . -9) (undo-tree-id9232 . -9) (undo-tree-id9233 . -9) 2320 (t 26116 19832 288630 194000)) ((2311 . 2320)) (26116 19895 955528 988000) 0 nil])
([nil nil ((2276 . 2281)) nil (26116 20071 672337 994000) 0 nil])
([nil nil ((2311 . 2312)) ((#(" " 0 1 (fontified t)) . 2311) (undo-tree-id9275 . -1) (undo-tree-id9276 . -1) (undo-tree-id9277 . -1)) (26116 19895 207203 151000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -2280) (undo-tree-id9347 . -1) (undo-tree-id9348 . -1) (undo-tree-id9349 . -1) (undo-tree-id9350 . -1) (undo-tree-id9351 . -1) 2281) nil (26116 20071 672337 63000) 0 nil])
([nil nil ((2311 . 2312)) ((#("l" 0 1 (fontified t)) . 2311) (undo-tree-id9261 . -1) (undo-tree-id9262 . -1) (undo-tree-id9263 . -1) (undo-tree-id9264 . -1) (undo-tree-id9265 . -1) (undo-tree-id9266 . -1) (undo-tree-id9267 . -1) (undo-tree-id9268 . -1) (undo-tree-id9269 . -1) (undo-tree-id9270 . -1) (undo-tree-id9271 . -1) (undo-tree-id9272 . -1) (undo-tree-id9273 . -1) (undo-tree-id9274 . -1)) (26116 19894 352633 211000) 0 nil])
([nil nil ((2280 . 2283)) nil (26116 20071 672333 267000) 0 nil])
([nil nil ((2301 . 2316) (#("from_utf8_l" 0 11 (fontified nil)) . 2301) (2301 . 2312) (#("from_utf8_lossy" 0 15 (fontified nil)) . -2301) (2301 . 2316) (#("from_utf8_l" 0 11 (fontified t)) . -2301) (undo-tree-id9199 . -11) (undo-tree-id9200 . -11) (undo-tree-id9201 . -10) (undo-tree-id9202 . -10) (undo-tree-id9203 . -10) (undo-tree-id9204 . -10) (undo-tree-id9205 . -10) (undo-tree-id9206 . -10) (undo-tree-id9207 . -10) (undo-tree-id9208 . -10) (undo-tree-id9209 . -10) (undo-tree-id9210 . -10) (undo-tree-id9211 . -10) (undo-tree-id9212 . -10) (undo-tree-id9213 . -10) (undo-tree-id9214 . -10) (undo-tree-id9215 . -11) (undo-tree-id9216 . -11) (undo-tree-id9217 . -11) (undo-tree-id9218 . -11) (undo-tree-id9219 . -11) (undo-tree-id9220 . -11) (undo-tree-id9221 . -11) 2312) ((2301 . 2312) (#("from_utf8_lossy" 0 15 (fontified nil)) . 2301) (2301 . 2316) (#("from_utf8_l" 0 11 (fontified nil)) . 2301) (2301 . 2312) (#("from_utf8_lossy" 0 15 (fontified t)) . 2301) (undo-tree-id9234 . -15) (undo-tree-id9235 . -15) (undo-tree-id9236 . -15) (undo-tree-id9237 . -15) (undo-tree-id9238 . -15) (undo-tree-id9239 . -15) (undo-tree-id9240 . -15) (undo-tree-id9241 . -15) (undo-tree-id9242 . -15) (undo-tree-id9243 . -15) (undo-tree-id9244 . -15) (undo-tree-id9245 . -15) (undo-tree-id9246 . -15) (undo-tree-id9247 . -15) (undo-tree-id9248 . -15) (undo-tree-id9249 . -15) (undo-tree-id9250 . -15) (undo-tree-id9251 . -15) (undo-tree-id9252 . -15) (undo-tree-id9253 . -15) (undo-tree-id9254 . -15) (undo-tree-id9255 . -15) (undo-tree-id9256 . -15) (undo-tree-id9257 . -15) (undo-tree-id9258 . -15) (undo-tree-id9259 . -15) (undo-tree-id9260 . -15)) (26116 19893 905277 588000) 0 nil])
([nil nil ((#("asc" 0 3 (fontified t)) . -2280) (undo-tree-id9336 . -3) (undo-tree-id9337 . -1) (undo-tree-id9338 . -1) (undo-tree-id9339 . -2) (undo-tree-id9340 . -2) (undo-tree-id9341 . -3) (undo-tree-id9342 . -3) (undo-tree-id9343 . -3) (undo-tree-id9344 . -3) (undo-tree-id9345 . -3) (undo-tree-id9346 . -3) 2283) nil (26116 20071 672332 27000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2316) (undo-tree-id9196 . -1) (undo-tree-id9197 . -1) (undo-tree-id9198 . -1) 2317) ((2316 . 2317) (t 26116 19888 275300 298000)) (26116 19888 253672 872000) 0 nil])
([nil nil ((#("get_" 0 4 (fontified t)) . -2276) (undo-tree-id9306 . -4) (undo-tree-id9307 . -1) (undo-tree-id9308 . -2) (undo-tree-id9309 . -2) (undo-tree-id9310 . -3) (undo-tree-id9311 . -3) (undo-tree-id9312 . -3) (undo-tree-id9313 . -3) (undo-tree-id9314 . -4) (undo-tree-id9315 . -4) (undo-tree-id9316 . -4) (undo-tree-id9317 . -4) (undo-tree-id9318 . -4) (undo-tree-id9319 . -4) (undo-tree-id9320 . -4) (undo-tree-id9321 . -4) (undo-tree-id9322 . -4) (undo-tree-id9323 . -4) (undo-tree-id9324 . -4) (undo-tree-id9325 . -4) (undo-tree-id9326 . -4) (undo-tree-id9327 . -4) (undo-tree-id9328 . -4) (undo-tree-id9329 . -4) (undo-tree-id9330 . -4) (undo-tree-id9331 . -4) (undo-tree-id9332 . -4) (undo-tree-id9333 . -4) (undo-tree-id9334 . -4) (undo-tree-id9335 . -4) 2280) nil (26116 20071 672322 674000) 0 nil])
nil
([nil nil ((2276 . 2279)) nil (26116 20071 672301 346000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -2278) (undo-tree-id9301 . -1) (undo-tree-id9302 . -1) (undo-tree-id9303 . -1) (undo-tree-id9304 . -1) (undo-tree-id9305 . -1) 2279) nil (26116 20071 672300 270000) 0 nil])
([nil nil ((2278 . 2282)) nil (26116 20071 672295 524000) 0 nil])
([nil nil ((2282 . 2284)) nil (26116 20071 672294 278000) 0 nil])
([nil nil ((#("str::get" 0 3 (face font-lock-type-face fontified t) 3 8 (fontified t)) . 2276) (undo-tree-id9278 . -1) (undo-tree-id9279 . -2) (undo-tree-id9280 . -2) (undo-tree-id9281 . -2) (undo-tree-id9282 . -2) (undo-tree-id9283 . -2) (undo-tree-id9284 . -2) (undo-tree-id9285 . -2) (undo-tree-id9286 . -2) (undo-tree-id9287 . -3) (undo-tree-id9288 . -3) (undo-tree-id9289 . -4) (undo-tree-id9290 . -4) (undo-tree-id9291 . -5) (undo-tree-id9292 . -6) (undo-tree-id9293 . -6) (undo-tree-id9294 . -7) (undo-tree-id9295 . -7) (undo-tree-id9296 . -8) (undo-tree-id9297 . -8) (undo-tree-id9298 . -8) (undo-tree-id9299 . -8) (undo-tree-id9300 . -8)) nil (26116 20071 672289 479000) 0 nil])
([nil nil ((#("unchecked" 0 9 (fontified t)) . -2320) (undo-tree-id9361 . -9) (undo-tree-id9362 . -9) (undo-tree-id9363 . -9) (undo-tree-id9364 . -9) (undo-tree-id9365 . -9) (undo-tree-id9366 . -9) (undo-tree-id9367 . -9) (undo-tree-id9368 . -9) 2329 (t 26116 20071 698644 892000)) nil (26116 20101 50282 271000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -2319) (undo-tree-id9352 . -1) (undo-tree-id9353 . -1) (undo-tree-id9354 . -1) (undo-tree-id9355 . -1) (undo-tree-id9356 . -1) (undo-tree-id9357 . -1) (undo-tree-id9358 . -1) (undo-tree-id9359 . -1) (undo-tree-id9360 . -1) 2320) nil (26116 20101 50272 473000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2333) (undo-tree-id9404 . -1) (undo-tree-id9405 . -1) (undo-tree-id9406 . -1) (undo-tree-id9407 . -1) (undo-tree-id9408 . -1) (undo-tree-id9409 . -1) (undo-tree-id9410 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -2334) (undo-tree-id9411 . -1) (undo-tree-id9412 . -1) (undo-tree-id9413 . -1) (undo-tree-id9414 . -1) (undo-tree-id9415 . -1) (undo-tree-id9416 . -1) 2335 (t 26116 20101 75313 362000)) nil (26116 20113 496648 124000) 0 nil])
([nil nil ((#("unsafe { " 0 6 (face rust-unsafe fontified t) 6 7 (fontified t) 7 8 (face (rainbow-delimiters-depth-3-face) fontified t) 8 9 (fontified t)) . -2293) (undo-tree-id9400 . -9) (undo-tree-id9401 . -9) (undo-tree-id9402 . -6) (undo-tree-id9403 . -9) 2302) nil (26116 20113 496637 823000) 0 nil])
([nil nil ((2324 . 2325)) nil (26116 20113 496634 55000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -2323) (undo-tree-id9380 . -1) (undo-tree-id9381 . -1) (undo-tree-id9382 . -1) (undo-tree-id9383 . -1) (undo-tree-id9384 . -1) (undo-tree-id9385 . -1) (undo-tree-id9386 . -1) (undo-tree-id9387 . -1) (undo-tree-id9388 . -1) (undo-tree-id9389 . -1) (undo-tree-id9390 . -1) (undo-tree-id9391 . -1) (undo-tree-id9392 . -1) (undo-tree-id9393 . -1) (undo-tree-id9394 . -1) (#("." 0 1 (fontified t)) . -2324) (undo-tree-id9395 . -1) (undo-tree-id9396 . -1) (undo-tree-id9397 . -1) (undo-tree-id9398 . -1) (undo-tree-id9399 . -1) 2325) nil (26116 20113 496632 514000) 0 nil])
([nil nil ((2323 . 2324)) nil (26116 20113 496617 363000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2323) (undo-tree-id9375 . -1) (undo-tree-id9376 . -1) (undo-tree-id9377 . -1) (undo-tree-id9378 . -1) (undo-tree-id9379 . -1) 2324) nil (26116 20113 496616 152000) 0 nil])
([nil nil ((2323 . 2326)) nil (26116 20113 496610 125000) 0 nil])
([nil nil ((apply yas--snippet-revive 2325 2333 #s(yas--snippet nil nil #s(yas--exit 2333 nil) 86 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2333 nil) 86 nil nil nil nil)) (2325 . 2333) (#("unwrap()$0" 0 10 (fontified nil)) . 2325) (2325 . 2335) (#("u" 0 1 (fontified nil)) . 2325) (2325 . 2326) (#("unwrap()" 0 8 (fontified nil)) . -2325) (2325 . 2333) (#("u" 0 1 (fontified t)) . -2325) (undo-tree-id9369 . -1) (undo-tree-id9370 . -1) (undo-tree-id9371 . -1) (undo-tree-id9372 . -1) (undo-tree-id9373 . -1) (undo-tree-id9374 . -1) 2326) nil (26116 20113 496605 378000) 0 nil])
([nil nil ((2333 . 2334) (t 26116 20113 528647 459000)) nil (26116 20114 199924 607000) 0 nil])
([nil nil ((2323 . 2326) (t 26116 20114 218647 502000)) nil (26116 20438 794267 526000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2323) (undo-tree-id9454 . -1) (undo-tree-id9455 . -1) (#("s" 0 1 (fontified t)) . -2324) (undo-tree-id9456 . -1) (undo-tree-id9457 . -1) (#("p" 0 1 (fontified t)) . -2325) (undo-tree-id9458 . -1) 2326) nil (26116 20438 794266 496000) 0 nil])
([nil nil ((2323 . 2325)) nil (26116 20438 794263 186000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -2324) (undo-tree-id9452 . -1) (undo-tree-id9453 . -1) 2325) nil (26116 20438 794262 552000) 0 nil])
([nil nil ((#("*self = String::from_utf8(buf.to_vec().).unwrap();" 0 1 (fontified t) 1 5 (face font-lock-keyword-face fontified t) 5 8 (fontified t) 8 14 (face font-lock-type-face fontified t) 14 16 (fontified t) 16 25 (fontified t) 25 26 (face (rainbow-delimiters-depth-3-face) fontified t) 26 36 (fontified t) 36 37 (face (rainbow-delimiters-depth-4-face) fontified t) 37 38 (face (rainbow-delimiters-depth-4-face) fontified t) 38 39 (fontified t) 39 40 (face (rainbow-delimiters-depth-3-face) fontified t) 40 41 (fontified t) 41 47 (fontified t) 47 48 (face (rainbow-delimiters-depth-3-face) fontified t) 48 49 (face (rainbow-delimiters-depth-3-face) fontified t) 49 50 (fontified t)) . 2285) (undo-tree-id9447 . -50) (undo-tree-id9448 . -8) (undo-tree-id9449 . -50) (undo-tree-id9450 . -38) (undo-tree-id9451 . -38)) nil (26116 20438 794260 657000) 0 nil])
([nil nil ((2285 . 2290)) nil (26116 20438 794256 976000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-variable-name-face fontified t)) . -2289) (undo-tree-id9446 . -1) 2290) nil (26116 20438 794256 361000) 0 nil])
([nil nil ((2289 . 2295)) nil (26116 20438 794255 163000) 0 nil])
([nil nil ((2295 . 2300)) nil (26116 20438 794254 677000) 0 nil])
([nil nil ((2301 . 2309) (#("            " 0 12 (fontified nil)) . 2300) (undo-tree-id9445 . -8) (2308 . 2312) (2299 . 2309)) nil (26116 20438 794253 894000) 0 nil])
([nil nil ((2300 . 2312)) nil (26116 20438 794252 505000) 0 nil])
([nil nil ((2276 . 2279)) nil (26116 20438 794252 58000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -2276) (undo-tree-id9442 . -1) (#("e" 0 1 (fontified t)) . -2277) (undo-tree-id9443 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -2278) (undo-tree-id9444 . -1) 2279) nil (26116 20438 794251 138000) 0 nil])
([nil nil ((2276 . 2285)) nil (26116 20438 794248 621000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-variable-name-face fontified t)) . -2280) (undo-tree-id9437 . -1) (#(" " 0 1 (fontified t)) . -2281) (undo-tree-id9438 . -1) (#("=" 0 1 (fontified t)) . -2282) (undo-tree-id9439 . -1) (#(" " 0 1 (fontified t)) . -2283) (undo-tree-id9440 . -1) (#("0" 0 1 (fontified t)) . -2284) (undo-tree-id9441 . -1) 2285) nil (26116 20438 794247 583000) 0 nil])
([nil nil ((2280 . 2290)) nil (26116 20438 794243 500000) 0 nil])
([nil nil ((2326 . 2333)) nil (26116 20438 794243 29000) 0 nil])
([nil nil ((2333 . 2334)) nil (26116 20438 794242 636000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2332) (undo-tree-id9435 . -1) (#("8" 0 1 (fontified t)) . -2333) (undo-tree-id9436 . -1) 2334) nil (26116 20438 794242 3000) 0 nil])
([nil nil ((2332 . 2343)) nil (26116 20438 794240 43000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . -2342) (undo-tree-id9433 . -1) (undo-tree-id9434 . -1) 2343) nil (26116 20438 794239 291000) 0 nil])
([nil nil ((2342 . 2345)) nil (26116 20438 794237 494000) 0 nil])
([nil nil ((2322 . 2323)) nil (26116 20438 794237 42000) 0 nil])
([nil nil ((#("E" 0 1 (face font-lock-type-face fontified t)) . -2322) (undo-tree-id9428 . -1) (undo-tree-id9429 . -1) (undo-tree-id9430 . -1) (undo-tree-id9431 . -1) (undo-tree-id9432 . -1) 2323) nil (26116 20438 794236 254000) 0 nil])
([nil nil ((2345 . 2348)) nil (26116 20438 794232 741000) 0 nil])
([nil nil ((2347 . 2348)) nil (26116 20438 794232 289000) 0 nil])
([nil nil ((2348 . 2349)) nil (26116 20438 794231 828000) 0 nil])
([nil nil ((#("+" 0 1 (fontified t)) . -2348) (undo-tree-id9425 . -1) (undo-tree-id9426 . -1) (undo-tree-id9427 . -1) 2349) nil (26116 20438 794231 42000) 0 nil])
([nil nil ((2348 . 2349)) nil (26116 20438 794228 598000) 0 nil])
([nil nil ((2347 . 2352) (#("sp" 0 2 (fontified nil)) . 2347) (2347 . 2349) (#("spilt" 0 5 (fontified nil)) . -2347) (2347 . 2352) (#("sp" 0 2 (fontified t)) . -2347) (undo-tree-id9417 . -2) (undo-tree-id9418 . -1) (undo-tree-id9419 . -1) (undo-tree-id9420 . -1) (undo-tree-id9421 . -1) (undo-tree-id9422 . -1) (undo-tree-id9423 . -1) (undo-tree-id9424 . -2) 2349) nil (26116 20438 794226 485000) 0 nil])
([nil nil ((2352 . 2353)) nil (26116 20438 794213 190000) 0 nil])
([nil nil ((2353 . 2355)) nil (26116 20438 794212 74000) 0 nil])
([nil nil ((2355 . 2356)) nil (26116 20438 794208 168000) 0 nil])
([nil nil ((2280 . 2284) (t 26116 20438 815334 95000)) nil (26116 20442 115731 272000) 0 nil])
([nil nil ((2361 . 2374) (t 26116 20442 138667 632000)) nil (26116 20494 369436 979000) 0 nil])
([nil nil ((2374 . 2378)) nil (26116 20494 369436 360000) 0 nil])
([nil nil ((2378 . 2381)) nil (26116 20494 369435 914000) 0 nil])
([nil nil ((2380 . 2382)) nil (26116 20494 369435 431000) 0 nil])
([nil nil ((apply yas--snippet-revive 2380 2386 #s(yas--snippet nil nil nil 87 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 87 nil nil nil nil)) (2380 . 2386) (#("break;" 0 6 (fontified nil)) . 2380) (2380 . 2386) (#("br" 0 2 (fontified nil)) . 2380) (2380 . 2382) (#("break" 0 5 (fontified nil)) . -2380) (2380 . 2385) (#("br" 0 2 (fontified t)) . -2380) (undo-tree-id9639 . -2) (undo-tree-id9640 . -1) (undo-tree-id9641 . -1) (undo-tree-id9642 . -1) (undo-tree-id9643 . -2) (undo-tree-id9644 . -2) (undo-tree-id9645 . -2) 2382) nil (26116 20494 369434 208000) 0 nil])
([nil nil ((2386 . 2387)) nil (26116 20494 369428 776000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -2386) (undo-tree-id9635 . -1) (undo-tree-id9636 . -1) (undo-tree-id9637 . -1) (undo-tree-id9638 . -1) 2387) nil (26116 20494 369428 96000) 0 nil])
([nil nil ((2397 . 2406)) nil (26116 20494 369425 368000) 0 nil])
([nil nil ((2406 . 2407)) nil (26116 20494 369424 896000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -2406) (undo-tree-id9633 . -1) (undo-tree-id9634 . -1) 2407) nil (26116 20494 369424 190000) 0 nil])
([nil nil ((2406 . 2408)) nil (26116 20494 369422 217000) 0 nil])
([nil nil ((2407 . 2411) (#("s" 0 1 (fontified nil)) . 2407) (2407 . 2408) (#("self" 0 4 (fontified nil)) . -2407) (2407 . 2411) (#("s" 0 1 (fontified t)) . -2407) (undo-tree-id9629 . -1) (undo-tree-id9630 . -1) (undo-tree-id9631 . -1) (undo-tree-id9632 . -1) 2408) nil (26116 20494 369421 121000) 0 nil])
([nil nil ((2411 . 2412)) nil (26116 20494 369417 119000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -2411) (undo-tree-id9627 . -1) (undo-tree-id9628 . -1) 2412) nil (26116 20494 369416 413000) 0 nil])
([nil nil ((2411 . 2412)) nil (26116 20494 369414 368000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -2411) (undo-tree-id9623 . -1) (undo-tree-id9624 . -1) (undo-tree-id9625 . -1) (undo-tree-id9626 . -1) 2412) nil (26116 20494 369413 658000) 0 nil])
([nil nil ((2411 . 2417)) nil (26116 20494 369410 922000) 0 nil])
([nil nil ((2414 . 2420) (#("Str" 0 3 (fontified nil)) . 2414) (2414 . 2417) (#("String" 0 6 (fontified nil)) . -2414) (2414 . 2420) (#("Str" 0 3 (face font-lock-type-face fontified t)) . -2414) (undo-tree-id9614 . -3) (undo-tree-id9615 . -1) (undo-tree-id9616 . -1) (undo-tree-id9617 . -2) (undo-tree-id9618 . -2) (undo-tree-id9619 . -2) (undo-tree-id9620 . -2) (undo-tree-id9621 . -3) (undo-tree-id9622 . -3) 2417) nil (26116 20494 369409 766000) 0 nil])
([nil nil ((2420 . 2426)) nil (26116 20494 369403 580000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2442 2455 nil nil nil t #s(yas--exit 2456 nil))) #s(yas--exit 2456 nil) 88 nil #s(yas--field 1 2442 2455 nil nil nil t #s(yas--exit 2456 nil)) nil nil)) (2422 . 2448) (#("from_utf8_unchecked(${1:bytes})$0" 0 33 (fontified nil)) . 2422) (2422 . 2455) (#("from" 0 4 (fontified nil)) . 2422) (2422 . 2426) (#("from_utf8_unchecked(â€¦)" 0 22 (fontified nil)) . -2422) (2422 . 2444) (#("from" 0 4 (fontified t)) . -2422) (undo-tree-id9607 . -4) (undo-tree-id9608 . -1) (undo-tree-id9609 . -2) (undo-tree-id9610 . -3) (undo-tree-id9611 . -4) (undo-tree-id9612 . -4) (undo-tree-id9613 . -4) 2426) nil (26116 20494 369402 339000) 0 nil])
([nil nil ((2443 . 2444) (#("bytes" 0 5 (fontified nil)) . 2443) (undo-tree-id9606 . -5) (2442 . 2443)) nil (26116 20494 369396 628000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t)) . -2443) (undo-tree-id9597 . -1) (undo-tree-id9598 . -1) (undo-tree-id9599 . -1) (undo-tree-id9600 . -1) (undo-tree-id9601 . -1) (undo-tree-id9602 . -1) (undo-tree-id9603 . -1) (undo-tree-id9604 . -1) (undo-tree-id9605 . -1) 2444) nil (26116 20494 369395 67000) 0 nil])
([nil nil ((2443 . 2444)) nil (26116 20494 369389 998000) 0 nil])
([nil nil ((2443 . 2446) (#("b" 0 1 (fontified nil)) . 2443) (undo-tree-id9586 . -1) (2443 . 2444) (#("buf" 0 3 (fontified nil)) . -2443) (undo-tree-id9587 . -3) (2443 . 2446) (#("b" 0 1 (fontified t)) . -2443) (undo-tree-id9588 . -1) (undo-tree-id9589 . -1) (undo-tree-id9590 . -1) (undo-tree-id9591 . -1) (undo-tree-id9592 . -1) (undo-tree-id9593 . -1) (undo-tree-id9594 . -1) (undo-tree-id9595 . -1) (undo-tree-id9596 . -1) 2444) nil (26116 20494 369388 819000) 0 nil])
([nil nil ((2446 . 2448)) nil (26116 20494 369381 527000) 0 nil])
([nil nil ((2447 . 2449)) nil (26116 20494 369381 88000) 0 nil])
([nil nil ((2449 . 2450)) nil (26116 20494 369380 511000) 0 nil])
([nil nil ((2449 . 2454) (#("s" 0 1 (fontified nil)) . 2449) (2449 . 2450) (#("spilt" 0 5 (fontified nil)) . -2449) (2449 . 2454) (#("s" 0 1 (fontified t)) . -2449) (undo-tree-id9574 . -1) (undo-tree-id9575 . -1) (undo-tree-id9576 . -1) (undo-tree-id9577 . -1) (undo-tree-id9578 . -1) (undo-tree-id9579 . -1) (undo-tree-id9580 . -1) (undo-tree-id9581 . -1) (undo-tree-id9582 . -1) (undo-tree-id9583 . -1) (undo-tree-id9584 . -1) (undo-tree-id9585 . -1) 2450) nil (26116 20494 369379 128000) 0 nil])
([nil nil ((apply yas--snippet-revive 2422 2456 #s(yas--snippet nil (#s(yas--field 1 2442 2455 nil nil nil t #s(yas--exit 2456 nil))) #s(yas--exit 2456 nil) 88 nil #s(yas--field 1 2442 2455 nil nil nil t #s(yas--exit 2456 nil)) nil nil))) nil (26116 20494 369371 979000) 0 nil])
([nil nil ((2456 . 2458)) nil (26116 20494 369371 440000) 0 nil])
([nil nil ((apply yas--snippet-revive 2414 2467 #s(yas--snippet nil nil nil 89 nil nil nil nil)) (#("String::from_utf8_unchecked(&buf[..spilt])." 0 6 (face font-lock-type-face fontified nil) 6 8 (fontified nil) 8 27 (fontified nil) 27 28 (face (rainbow-delimiters-depth-3-face) fontified nil) 28 29 (face rust-ampersand-face fontified nil) 29 32 (fontified nil) 32 33 (face (rainbow-delimiters-depth-4-face) fontified nil) 33 35 (fontified nil) 35 40 (fontified nil) 40 41 (face (rainbow-delimiters-depth-4-face) fontified nil) 41 42 (face (rainbow-delimiters-depth-3-face) fontified nil) 42 43 (fontified nil)) . -2414) (undo-tree-id9463 . -42) (undo-tree-id9464 . -43) (undo-tree-id9465 . -6) (undo-tree-id9466 . -6) (undo-tree-id9467 . -7) (undo-tree-id9468 . -8) (undo-tree-id9469 . -8) (undo-tree-id9470 . -8) (undo-tree-id9471 . -8) (undo-tree-id9472 . -8) (undo-tree-id9473 . -8) (undo-tree-id9474 . -8) (undo-tree-id9475 . -42) (undo-tree-id9476 . -42) (undo-tree-id9477 . -28) (undo-tree-id9478 . -28) (undo-tree-id9479 . -28) (undo-tree-id9480 . -28) (undo-tree-id9481 . -28) (undo-tree-id9482 . -28) (undo-tree-id9483 . -28) (undo-tree-id9484 . -28) (undo-tree-id9485 . -28) (undo-tree-id9486 . -28) (undo-tree-id9487 . -28) (undo-tree-id9488 . -29) (undo-tree-id9489 . -29) (undo-tree-id9490 . -29) (undo-tree-id9491 . -29) (undo-tree-id9492 . -29) (undo-tree-id9493 . -29) (undo-tree-id9494 . -29) (undo-tree-id9495 . -29) (undo-tree-id9496 . -29) (undo-tree-id9497 . -29) (undo-tree-id9498 . -29) (undo-tree-id9499 . -29) (undo-tree-id9500 . -29) (undo-tree-id9501 . -29) (undo-tree-id9502 . -29) (undo-tree-id9503 . -32) (undo-tree-id9504 . -32) (undo-tree-id9505 . -32) (undo-tree-id9506 . -32) (undo-tree-id9507 . -32) (undo-tree-id9508 . -32) (undo-tree-id9509 . -32) (undo-tree-id9510 . -32) (undo-tree-id9511 . -33) (undo-tree-id9512 . -41) (undo-tree-id9513 . -33) (undo-tree-id9514 . -33) (undo-tree-id9515 . -33) (undo-tree-id9516 . -33) (undo-tree-id9517 . -33) (undo-tree-id9518 . -33) (undo-tree-id9519 . -33) (undo-tree-id9520 . -34) (undo-tree-id9521 . -34) (undo-tree-id9522 . -35) (undo-tree-id9523 . -35) (undo-tree-id9524 . -35) (undo-tree-id9525 . -35) (undo-tree-id9526 . -35) (undo-tree-id9527 . -35) (undo-tree-id9528 . -35) (undo-tree-id9529 . -35) (undo-tree-id9530 . -35) (undo-tree-id9531 . -35) (undo-tree-id9532 . -35) (undo-tree-id9533 . -35) (undo-tree-id9534 . -35) (undo-tree-id9535 . -35) (undo-tree-id9536 . -35) (undo-tree-id9537 . -35) (undo-tree-id9538 . -35) (undo-tree-id9539 . -35) (undo-tree-id9540 . -35) (undo-tree-id9541 . -35) (undo-tree-id9542 . -40) (undo-tree-id9543 . -40) (undo-tree-id9544 . -40) (undo-tree-id9545 . -40) (undo-tree-id9546 . -40) (undo-tree-id9547 . -40) (undo-tree-id9548 . -40) (undo-tree-id9549 . -40) (undo-tree-id9550 . -40) (undo-tree-id9551 . -40) (undo-tree-id9552 . -42) (undo-tree-id9553 . -42) (undo-tree-id9554 . -42) (undo-tree-id9555 . -42) (undo-tree-id9556 . -42) (undo-tree-id9557 . -42) (undo-tree-id9558 . -42) (undo-tree-id9559 . -43) (undo-tree-id9560 . -43) (undo-tree-id9561 . -43) (undo-tree-id9562 . -43) (undo-tree-id9563 . -43) (undo-tree-id9564 . -43) (undo-tree-id9565 . -43) (undo-tree-id9566 . -43) (undo-tree-id9567 . -43) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 89 nil nil nil nil)) (2457 . 2510) (#("unsafe { String::from_utf8_unchecked(&buf[..spilt]) }" 0 53 (fontified nil)) . 2457) (2457 . 2510) (#("u" 0 1 (fontified nil)) . 2457) (2457 . 2458) (#("unsafe" 0 6 (fontified nil)) . -2457) (2457 . 2463) (#("u" 0 1 (fontified t)) . -2457) (undo-tree-id9568 . -1) (undo-tree-id9569 . -1) (undo-tree-id9570 . -1) (undo-tree-id9571 . -1) (undo-tree-id9572 . -1) (undo-tree-id9573 . -1) 2458) nil (26116 20494 369366 817000) 0 nil])
([nil nil ((2467 . 2468)) nil (26116 20494 369171 624000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -2467) (undo-tree-id9459 . -1) (undo-tree-id9460 . -1) (undo-tree-id9461 . -1) (undo-tree-id9462 . -1) 2468) nil (26116 20494 369168 363000) 0 nil])
([nil nil ((2467 . 2468) (t 26116 20494 398670 840000)) nil (26116 20495 528158 330000) 0 nil])
([nil nil ((2464 . 2466) (t 26116 20495 658670 917000)) nil (26116 20504 585756 462000) 0 nil])
([nil nil ((apply yas--snippet-revive 2465 2473 #s(yas--snippet nil nil #s(yas--exit 2473 nil) 90 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2473 nil) 90 nil nil nil nil)) (2465 . 2473) (#("to_vec()$0" 0 10 (fontified nil)) . 2465) (2465 . 2475) (#("t" 0 1 (fontified nil)) . 2465) (2465 . 2466) (#("to_vec()" 0 8 (fontified nil)) . -2465) (2465 . 2473) (#("t" 0 1 (fontified t)) . -2465) (undo-tree-id9646 . -1) (undo-tree-id9647 . -1) (undo-tree-id9648 . -1) (undo-tree-id9649 . -1) (undo-tree-id9650 . -1) (undo-tree-id9651 . -1) (undo-tree-id9652 . -1) (undo-tree-id9653 . -1) (undo-tree-id9654 . -1) (undo-tree-id9655 . -1) (undo-tree-id9656 . -1) (undo-tree-id9657 . -1) 2466) nil (26116 20504 585752 244000) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . -2451) (undo-tree-id9658 . -1) (undo-tree-id9659 . -1) (undo-tree-id9660 . -1) (undo-tree-id9661 . -1) (undo-tree-id9662 . -1) (undo-tree-id9663 . -1) (undo-tree-id9664 . -1) (undo-tree-id9665 . -1) (undo-tree-id9666 . -1) 2452 (t 26116 20504 605338 133000)) nil (26116 20511 408214 515000) 0 nil])
([nil nil ((137 . 139) (t 26116 20511 425338 552000)) nil (26116 21640 120742 848000) 0 nil])
([nil nil ((139 . 142)) nil (26116 21640 120742 46000) 0 nil])
([nil nil ((apply yas--snippet-revive 139 146 #s(yas--snippet nil nil #s(yas--exit 146 nil) 97 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 146 nil) 97 nil nil nil nil)) (139 . 146) (#("static $0" 0 9 (fontified nil)) . 139) (139 . 148) (#("sta" 0 3 (fontified nil)) . 139) (139 . 142) (#("static" 0 6 (fontified nil)) . -139) (139 . 145) (#("sta" 0 3 (fontified t)) . -139) (undo-tree-id9752 . -3) (undo-tree-id9753 . -1) (undo-tree-id9754 . -1) (undo-tree-id9755 . -2) (undo-tree-id9756 . -2) (undo-tree-id9757 . -2) (undo-tree-id9758 . -3) (undo-tree-id9759 . -3) (undo-tree-id9760 . -3) (undo-tree-id9761 . -3) (undo-tree-id9762 . -3) 142) nil (26116 21640 120740 348000) 0 nil])
([nil nil ((146 . 153)) nil (26116 21640 120731 681000) 0 nil])
([nil nil ((153 . 157)) nil (26116 21640 120731 58000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -156) (undo-tree-id9746 . -1) (undo-tree-id9747 . -1) (undo-tree-id9748 . -1) (undo-tree-id9749 . -1) (undo-tree-id9750 . -1) (undo-tree-id9751 . -1) 157) nil (26116 21640 120730 126000) 0 nil])
([nil nil ((156 . 163)) nil (26116 21640 120725 427000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -161) (undo-tree-id9729 . -1) (undo-tree-id9730 . -1) (undo-tree-id9731 . -1) (undo-tree-id9732 . -1) (undo-tree-id9733 . -1) (undo-tree-id9734 . -1) (undo-tree-id9735 . -1) (undo-tree-id9736 . -1) (undo-tree-id9737 . -1) (undo-tree-id9738 . -1) (undo-tree-id9739 . -1) (#(":" 0 1 (fontified t)) . -162) (undo-tree-id9740 . -1) (undo-tree-id9741 . -1) (undo-tree-id9742 . -1) (undo-tree-id9743 . -1) (undo-tree-id9744 . -1) (undo-tree-id9745 . -1) 163) nil (26116 21640 120723 935000) 0 nil])
([nil nil ((#("atomic" 0 6 (fontified t)) . -155) (undo-tree-id9684 . -6) (undo-tree-id9685 . -1) (undo-tree-id9686 . -1) (undo-tree-id9687 . -1) (undo-tree-id9688 . -1) (undo-tree-id9689 . -1) (undo-tree-id9690 . -1) (undo-tree-id9691 . -1) (undo-tree-id9692 . -1) (undo-tree-id9693 . -1) (undo-tree-id9694 . -1) (undo-tree-id9695 . -1) (undo-tree-id9696 . -1) (undo-tree-id9697 . -1) (undo-tree-id9698 . -2) (undo-tree-id9699 . -2) (undo-tree-id9700 . -2) (undo-tree-id9701 . -3) (undo-tree-id9702 . -3) (undo-tree-id9703 . -4) (undo-tree-id9704 . -4) (undo-tree-id9705 . -4) (undo-tree-id9706 . -4) (undo-tree-id9707 . -5) (undo-tree-id9708 . -5) (undo-tree-id9709 . -5) (undo-tree-id9710 . -6) (undo-tree-id9711 . -6) (undo-tree-id9712 . -6) (undo-tree-id9713 . -6) (undo-tree-id9714 . -6) (undo-tree-id9715 . -6) (undo-tree-id9716 . -6) (undo-tree-id9717 . -6) (undo-tree-id9718 . -6) (undo-tree-id9719 . -6) (undo-tree-id9720 . -6) (undo-tree-id9721 . -6) (undo-tree-id9722 . -6) (undo-tree-id9723 . -6) (undo-tree-id9724 . -6) (undo-tree-id9725 . -6) (undo-tree-id9726 . -6) (undo-tree-id9727 . -6) (undo-tree-id9728 . -6) 161) nil (26116 21640 120710 228000) 0 nil])
([nil nil ((155 . 157)) nil (26116 21640 120678 914000) 0 nil])
([nil nil ((157 . 159)) nil (26116 21640 120678 173000) 0 nil])
([nil nil ((40 . 65) (155 . 155) (155 . 164) (#("Atom" 0 4 (fontified nil)) . 155) (155 . 159) (#("AtomicU32 (use std::sync::atomic::AtomicU32)" 0 44 (fontified nil)) . -155) (155 . 199) (#("Atom" 0 4 (face font-lock-type-face fontified t)) . -155) (undo-tree-id9667 . -4) (undo-tree-id9668 . -1) (undo-tree-id9669 . -1) (undo-tree-id9670 . -1) (undo-tree-id9671 . -2) (undo-tree-id9672 . -2) (undo-tree-id9673 . -2) (undo-tree-id9674 . -2) (undo-tree-id9675 . -2) (undo-tree-id9676 . -3) (undo-tree-id9677 . -3) (undo-tree-id9678 . -3) (undo-tree-id9679 . -4) (undo-tree-id9680 . -4) (undo-tree-id9681 . -4) (undo-tree-id9682 . -4) (undo-tree-id9683 . -4) 159) nil (26116 21640 120675 178000) 0 nil])
([nil nil ((189 . 194)) nil (26116 21640 120650 817000) 0 nil])
([nil nil ((164 . 168) (t 26116 21640 172073 917000)) nil (26116 21643 515354 615000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -196) (undo-tree-id9777 . -1) (undo-tree-id9778 . -1) (undo-tree-id9779 . -1) (undo-tree-id9780 . -1) (undo-tree-id9781 . -1) (undo-tree-id9782 . -1) (undo-tree-id9783 . -1) 197 (t 26116 21643 565407 453000)) nil (26116 21649 734338 796000) 0 nil])
([nil nil ((196 . 197)) nil (26116 21649 734332 718000) 0 nil])
([nil nil ((196 . 205) (#("A" 0 1 (fontified nil)) . 196) (196 . 197) (#("AtomicU32" 0 9 (fontified nil)) . -196) (196 . 205) (#("A" 0 1 (face font-lock-type-face fontified t)) . -196) (undo-tree-id9770 . -1) (undo-tree-id9771 . -1) (undo-tree-id9772 . -1) (undo-tree-id9773 . -1) (undo-tree-id9774 . -1) (undo-tree-id9775 . -1) (undo-tree-id9776 . -1) 197) nil (26116 21649 734331 165000) 0 nil])
([nil nil ((205 . 208)) nil (26116 21649 734325 60000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 211 212 nil nil nil t #s(yas--exit 213 nil))) #s(yas--exit 213 nil) 98 nil #s(yas--field 1 211 212 nil nil nil t #s(yas--exit 213 nil)) nil nil)) (207 . 213) (#("new(${1:v})$0" 0 13 (fontified nil)) . 207) (207 . 220) (#("n" 0 1 (fontified nil)) . 207) (207 . 208) (#("new(â€¦)" 0 6 (fontified nil)) . -207) (207 . 213) (#("n" 0 1 (fontified t)) . -207) (undo-tree-id9764 . -1) (undo-tree-id9765 . -1) (undo-tree-id9766 . -1) (undo-tree-id9767 . -1) (undo-tree-id9768 . -1) (undo-tree-id9769 . -1) 208) nil (26116 21649 734322 746000) 0 nil])
([nil nil ((#("v" 0 1 (fontified nil)) . 212) (undo-tree-id9763 . -1) (211 . 212)) nil (26116 21649 734312 989000) 0 nil])
([nil nil ((apply yas--snippet-revive 207 213 #s(yas--snippet nil (#s(yas--field 1 211 212 nil nil nil t #s(yas--exit 213 nil))) #s(yas--exit 213 nil) 98 nil #s(yas--field 1 211 212 nil nil nil t #s(yas--exit 213 nil)) nil nil))) nil (26116 21773 414498 570000) 0 nil])
([nil nil ((703 . 712) (t 26116 21649 785407 817000)) nil (26116 21773 414497 932000) 0 nil])
([nil nil ((712 . 720)) nil (26116 21773 414497 236000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -719) (undo-tree-id9890 . -1) (undo-tree-id9891 . -1) (undo-tree-id9892 . -1) (undo-tree-id9893 . -1) (undo-tree-id9894 . -1) 720) nil (26116 21773 414496 353000) 0 nil])
([nil nil ((719 . 720)) nil (26116 21773 414492 438000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -719) (undo-tree-id9887 . -1) (undo-tree-id9888 . -1) (undo-tree-id9889 . -1) 720) nil (26116 21773 414491 603000) 0 nil])
([nil nil ((719 . 720)) nil (26116 21773 414488 276000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 724 760 nil nil nil t #s(yas--exit 761 nil))) #s(yas--exit 761 nil) 99 nil #s(yas--field 1 724 760 nil nil nil t #s(yas--exit 761 nil)) nil nil)) (719 . 730) (#("load(${1:order})$0" 0 18 (fontified nil)) . 719) (719 . 737) (#("l" 0 1 (fontified nil)) . 719) (719 . 720) (#("load(â€¦)" 0 7 (fontified nil)) . -719) (719 . 726) (#("l" 0 1 (fontified t)) . -719) (undo-tree-id9882 . -1) (undo-tree-id9883 . -1) (undo-tree-id9884 . -1) (undo-tree-id9885 . -1) (undo-tree-id9886 . -1) 720) nil (26116 21773 414486 592000) 0 nil])
([nil nil ((725 . 726) (#("order" 0 5 (fontified nil)) . 725) (undo-tree-id9881 . -5) (724 . 725)) nil (26116 21773 414481 541000) 0 nil])
([nil nil ((#("P" 0 1 (face font-lock-type-face fontified t)) . -724) (undo-tree-id9857 . -1) (undo-tree-id9858 . -1) (undo-tree-id9859 . -1) (undo-tree-id9860 . -1) (undo-tree-id9861 . -1) (undo-tree-id9862 . -1) (undo-tree-id9863 . -1) (undo-tree-id9864 . -1) (undo-tree-id9865 . -1) (undo-tree-id9866 . -1) (undo-tree-id9867 . -1) (undo-tree-id9868 . -1) (undo-tree-id9869 . -1) (undo-tree-id9870 . -1) (#("O" 0 1 (face font-lock-type-face fontified t)) . -725) (undo-tree-id9871 . -1) (undo-tree-id9872 . -1) (undo-tree-id9873 . -1) (undo-tree-id9874 . -1) (undo-tree-id9875 . -1) (undo-tree-id9876 . -1) (undo-tree-id9877 . -1) (undo-tree-id9878 . -1) (undo-tree-id9879 . -1) (undo-tree-id9880 . -1) 726) nil (26116 21773 414478 668000) 0 nil])
([nil nil ((724 . 727)) nil (26116 21773 414462 780000) 0 nil])
([nil nil ((apply yas--snippet-revive 724 760 #s(yas--snippet nil nil #s(yas--exit 760 nil) 100 nil nil #s(yas--field 1 724 760 nil nil nil t #s(yas--exit 761 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 760 nil) 100 nil nil #s(yas--field 1 724 760 nil nil nil t #s(yas--exit 761 nil)) nil)) (724 . 760) (#("std::sync::atomic::Ordering::Relaxed$0" 0 38 (fontified nil)) . 724) (undo-tree-id9837 . -38) (724 . 762) (#("Ori" 0 3 (fontified nil)) . 724) (undo-tree-id9838 . -3) (724 . 727) (#("std::sync::atomic::Ordering::Relaxed" 0 36 (fontified nil)) . -724) (undo-tree-id9839 . -36) (724 . 760) (#("Ori" 0 3 (face font-lock-type-face fontified t)) . -724) (undo-tree-id9840 . -3) (undo-tree-id9841 . -3) (undo-tree-id9842 . -3) (undo-tree-id9843 . -1) (undo-tree-id9844 . -1) (undo-tree-id9845 . -1) (undo-tree-id9846 . -1) (undo-tree-id9847 . -1) (undo-tree-id9848 . -2) (undo-tree-id9849 . -2) (undo-tree-id9850 . -2) (undo-tree-id9851 . -3) (undo-tree-id9852 . -3) (undo-tree-id9853 . -3) (undo-tree-id9854 . -3) (undo-tree-id9855 . -3) (undo-tree-id9856 . -3) 727) nil (26116 21773 414460 817000) 0 nil])
([nil nil ((apply yas--snippet-revive 719 761 #s(yas--snippet nil (#s(yas--field 1 724 760 nil nil nil t #s(yas--exit 761 nil))) #s(yas--exit 761 nil) 99 nil #s(yas--field 1 724 760 nil nil nil t #s(yas--exit 761 nil)) nil nil))) nil (26116 21773 414445 522000) 0 nil])
([nil nil ((761 . 765)) nil (26116 21773 414444 966000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -764) (undo-tree-id9829 . -1) (undo-tree-id9830 . -1) (undo-tree-id9831 . -1) (undo-tree-id9832 . -1) (undo-tree-id9833 . -1) (undo-tree-id9834 . -1) (undo-tree-id9835 . -1) (undo-tree-id9836 . -1) 765) nil (26116 21773 414444 54000) 0 nil])
([nil nil ((764 . 769)) nil (26116 21773 414438 278000) 0 nil])
([nil nil ((770 . 778) (#("            " 0 12 (fontified nil)) . 769) (undo-tree-id9825 . -8) (undo-tree-id9826 . -8) (undo-tree-id9827 . -8) (undo-tree-id9828 . -8) (777 . 781) (768 . 778)) nil (26116 21773 414437 390000) 0 nil])
([nil nil ((769 . 781)) nil (26116 21773 414433 652000) 0 nil])
([nil nil ((791 . 800)) nil (26116 21773 414432 988000) 0 nil])
([nil nil ((781 . 785)) nil (26116 21773 414432 30000) 0 nil])
([nil nil ((785 . 786)) nil (26116 21773 414431 368000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 791 812 nil nil nil t #s(yas--field 2 814 819 nil nil nil nil #s(yas--exit 820 nil))) #s(yas--field 2 814 819 nil nil nil nil #s(yas--exit 820 nil))) #s(yas--exit 820 nil) 101 nil #s(yas--field 1 791 812 nil nil nil t #s(yas--field 2 814 819 nil nil nil nil #s(yas--exit 820 nil))) nil nil)) (785 . 802) (#("store(${1:val}, ${2:order})$0" 0 29 (fontified nil)) . 785) (785 . 814) (#("s" 0 1 (fontified nil)) . 785) (785 . 786) (#("store(â€¦)" 0 8 (fontified nil)) . -785) (785 . 793) (#("s" 0 1 (fontified t)) . -785) (undo-tree-id9819 . -1) (undo-tree-id9820 . -1) (undo-tree-id9821 . -1) (undo-tree-id9822 . -1) (undo-tree-id9823 . -1) (undo-tree-id9824 . -1) 786) nil (26116 21773 414429 951000) 0 nil])
([nil nil ((792 . 794) (#("val" 0 3 (fontified nil)) . 792) (undo-tree-id9818 . -3) (791 . 792)) nil (26116 21773 414424 160000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 799 811 nil nil nil t #s(yas--exit 812 nil))) #s(yas--exit 812 nil) 102 nil #s(yas--field 1 799 811 nil nil nil t #s(yas--exit 812 nil)) #s(yas--field 1 791 812 nil nil nil t #s(yas--field 2 814 819 nil nil nil nil #s(yas--exit 820 nil))) nil)) (791 . 804) (#("get_pid(${1:name})$0" 0 20 (fontified nil)) . 791) (undo-tree-id9803 . -20) (791 . 811) (#("get" 0 3 (fontified nil)) . 791) (undo-tree-id9804 . -3) (791 . 794) (#("get_pid(â€¦)" 0 10 (fontified nil)) . -791) (undo-tree-id9805 . -10) (791 . 801) (#("get" 0 3 (fontified t)) . -791) (undo-tree-id9806 . -3) (undo-tree-id9807 . -3) (undo-tree-id9808 . -3) (undo-tree-id9809 . -1) (undo-tree-id9810 . -1) (undo-tree-id9811 . -2) (undo-tree-id9812 . -2) (undo-tree-id9813 . -3) (undo-tree-id9814 . -3) (undo-tree-id9815 . -3) (undo-tree-id9816 . -3) (undo-tree-id9817 . -3) 794) nil (26116 21773 414414 435000) 0 nil])
([nil nil ((800 . 801) (#("name" 0 4 (fontified nil)) . 800) (undo-tree-id9802 . -4) (799 . 800)) nil (26116 21773 414402 524000) 0 nil])
([nil nil ((800 . 811)) nil (26116 21773 414400 877000) 0 nil])
([nil nil ((#("w" 0 1 (face font-lock-string-face fontified t)) . -810) (undo-tree-id9799 . -1) (undo-tree-id9800 . -1) (undo-tree-id9801 . -1) 811) nil (26116 21773 414399 980000) 0 nil])
([nil nil ((apply yas--snippet-revive 785 820 #s(yas--snippet nil (#s(yas--field 1 791 812 nil nil nil t #s(yas--field 2 814 819 nil nil nil nil #s(yas--exit 820 nil))) #s(yas--field 2 814 819 nil nil nil nil #s(yas--exit 820 nil))) #s(yas--exit 820 nil) 101 nil #s(yas--field 1 791 812 nil nil nil t #s(yas--field 2 814 819 nil nil nil nil #s(yas--exit 820 nil))) nil nil)) (apply yas--snippet-revive 791 812 #s(yas--snippet nil (#s(yas--field 1 799 811 nil nil nil t #s(yas--exit 812 nil))) #s(yas--exit 812 nil) 102 nil #s(yas--field 1 799 811 nil nil nil t #s(yas--exit 812 nil)) #s(yas--field 1 791 812 nil nil nil t #s(yas--field 2 814 819 nil nil nil nil #s(yas--exit 820 nil))) nil))) nil (26116 21773 414397 313000) 0 nil])
([nil nil ((#("order" 0 5 (fontified t)) . -814) (undo-tree-id9797 . -5) (undo-tree-id9798 . -5) 819) nil (26116 21773 414396 338000) 0 nil])
([nil nil ((814 . 815)) nil (26116 21773 414394 136000) 0 nil])
([nil nil ((#("P" 0 1 (face font-lock-type-face fontified t)) . -814) (undo-tree-id9792 . -1) (undo-tree-id9793 . -1) (undo-tree-id9794 . -1) (undo-tree-id9795 . -1) (undo-tree-id9796 . -1) 815) nil (26116 21773 414393 40000) 0 nil])
([nil nil ((814 . 816)) nil (26116 21773 414388 527000) 0 nil])
([nil nil ((apply yas--snippet-revive 814 850 #s(yas--snippet nil nil #s(yas--exit 850 nil) 103 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 850 nil) 103 nil nil nil nil)) (814 . 850) (#("std::sync::atomic::Ordering::Relaxed$0" 0 38 (fontified nil)) . 814) (814 . 852) (#("Or" 0 2 (fontified nil)) . 814) (814 . 816) (#("std::sync::atomic::Ordering::Relaxed" 0 36 (fontified nil)) . -814) (814 . 850) (#("Or" 0 2 (face font-lock-type-face fontified t)) . -814) (undo-tree-id9784 . -2) (undo-tree-id9785 . -1) (undo-tree-id9786 . -1) (undo-tree-id9787 . -2) (undo-tree-id9788 . -2) (undo-tree-id9789 . -2) (undo-tree-id9790 . -2) (undo-tree-id9791 . -2) 816) nil (26116 21773 414385 709000) 0 nil])
([nil nil ((851 . 852)) nil (26116 21773 414367 671000) 0 nil])
([nil nil ((811 . 813) (t 26116 21773 425415 260000)) nil (26116 21781 844723 134000) 0 nil])
([nil nil ((apply yas--snippet-revive 812 823 #s(yas--snippet nil nil #s(yas--exit 823 nil) 104 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 823 nil) 104 nil nil nil nil)) (812 . 823) (#("to_string()$0" 0 13 (fontified nil)) . 812) (812 . 825) (#("t" 0 1 (fontified nil)) . 812) (812 . 813) (#("to_string() (as ToString)" 0 25 (fontified nil)) . -812) (812 . 837) (#("t" 0 1 (fontified t)) . -812) (undo-tree-id9895 . -1) (undo-tree-id9896 . -1) (undo-tree-id9897 . -1) (undo-tree-id9898 . -1) (undo-tree-id9899 . -1) (undo-tree-id9900 . -1) (undo-tree-id9901 . -1) 813) nil (26116 21781 844717 588000) 0 nil])
([nil nil ((824 . 826) (t 26116 21781 865415 772000)) nil (26116 21791 616927 281000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -825) (undo-tree-id9908 . -1) (undo-tree-id9909 . -1) (undo-tree-id9910 . -1) (undo-tree-id9911 . -1) 826) nil (26116 21791 616925 670000) 0 nil])
([nil nil ((825 . 826)) nil (26116 21791 616920 891000) 0 nil])
([nil nil ((apply yas--snippet-revive 825 833 #s(yas--snippet nil nil #s(yas--exit 833 nil) 105 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 833 nil) 105 nil nil nil nil)) (825 . 833) (#("unwrap()$0" 0 10 (fontified nil)) . 825) (825 . 835) (#("u" 0 1 (fontified nil)) . 825) (825 . 826) (#("unwrap()" 0 8 (fontified nil)) . -825) (825 . 833) (#("u" 0 1 (fontified t)) . -825) (undo-tree-id9902 . -1) (undo-tree-id9903 . -1) (undo-tree-id9904 . -1) (undo-tree-id9905 . -1) (undo-tree-id9906 . -1) (undo-tree-id9907 . -1) 826) nil (26116 21791 616916 301000) 0 nil])
([nil nil ((703 . 712) (t 26116 21791 635416 367000)) nil (26116 21809 385883 548000) 0 nil])
([nil nil ((712 . 720)) nil (26116 21809 385882 674000) 0 nil])
([nil nil ((900 . 901)) nil (26116 21809 385881 444000) 0 nil])
([nil nil ((729 . 733) (798 . 802) (808 . 829) (851 . 871) (888 . 906) (891 . 895) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -900) (undo-tree-id9912 . -1) (undo-tree-id9913 . -1) (910 . 912) (#("        " 0 8 (fontified t)) . 1187) (#("
" 0 1 (fontified t)) . 1662) (undo-tree-id9914 . -1) (1689 . 1690) (#("
    
" 0 1 (fontified t) 1 6 (fontified t)) . 1690) (#("        " 0 8 (fontified t)) . 2086) (2635 . 2652) (2640 . 2641) (2642 . 2643) (#("}" 0 1 (face (rainbow-delimiters-depth-4-face))) . 2644) (2657 . 2659) (2664 . 2681) (2670 . 2683) 2664) nil (26116 21809 385876 768000) 0 nil])
([nil nil ((#("u32, " 0 1 (face font-lock-type-face fontified t) 1 3 (face font-lock-type-face fontified t) 3 4 (fontified t) 4 5 (fontified t)) . -681) (undo-tree-id9938 . -5) (undo-tree-id9939 . -5) (undo-tree-id9940 . -3) (undo-tree-id9941 . -3) (undo-tree-id9942 . -3) (undo-tree-id9943 . -3) (undo-tree-id9944 . -3) (undo-tree-id9945 . -3) (undo-tree-id9946 . -3) (undo-tree-id9947 . -3) (undo-tree-id9948 . -3) (undo-tree-id9949 . -3) (undo-tree-id9950 . -3) (undo-tree-id9951 . -4) (undo-tree-id9952 . -5) (undo-tree-id9953 . -5) (undo-tree-id9954 . -5) (undo-tree-id9955 . -5) (undo-tree-id9956 . -5) (undo-tree-id9957 . -5) (undo-tree-id9958 . -5) 686 (t 26116 21809 408750 782000)) nil (26116 21833 61686 595000) 0 nil])
([nil nil ((#("pid: " 0 3 (face font-lock-variable-name-face fontified t) 3 5 (fontified t)) . -676) (undo-tree-id9915 . -5) (undo-tree-id9916 . -5) (undo-tree-id9917 . -5) (undo-tree-id9918 . -5) (undo-tree-id9919 . -5) (undo-tree-id9920 . -5) (undo-tree-id9921 . -5) (undo-tree-id9922 . -5) (undo-tree-id9923 . -5) (undo-tree-id9924 . -5) (undo-tree-id9925 . -5) (undo-tree-id9926 . -5) (undo-tree-id9927 . -5) (undo-tree-id9928 . -5) (undo-tree-id9929 . -5) (undo-tree-id9930 . -5) (undo-tree-id9931 . -5) (undo-tree-id9932 . -5) (undo-tree-id9933 . -5) (undo-tree-id9934 . -5) (undo-tree-id9935 . -5) (undo-tree-id9936 . -5) (undo-tree-id9937 . -5) 681) nil (26116 21833 61668 457000) 0 nil])
([nil nil ((972 . 980) (t 26116 21833 82085 559000)) nil (26116 21857 768681 255000) 0 nil])
([nil nil ((980 . 991)) nil (26116 21857 768680 402000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -989) (undo-tree-id9980 . -1) (undo-tree-id9981 . -1) (undo-tree-id9982 . -1) (undo-tree-id9983 . -1) (undo-tree-id9984 . -1) (undo-tree-id9985 . -1) (#(" " 0 1 (fontified t)) . -990) (undo-tree-id9986 . -1) (undo-tree-id9987 . -1) (undo-tree-id9988 . -1) (undo-tree-id9989 . -1) 991) nil (26116 21857 768679 153000) 0 nil])
([nil nil ((989 . 993)) nil (26116 21857 768671 680000) 0 nil])
([nil nil ((993 . 995)) nil (26116 21857 768671 56000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 999 1035 nil nil nil t #s(yas--exit 1036 nil))) #s(yas--exit 1036 nil) 106 nil #s(yas--field 1 999 1035 nil nil nil t #s(yas--exit 1036 nil)) nil nil)) (994 . 1005) (#("load(${1:order})$0" 0 18 (fontified nil)) . 994) (994 . 1012) (#("l" 0 1 (fontified nil)) . 994) (994 . 995) (#("load(â€¦)" 0 7 (fontified nil)) . -994) (994 . 1001) (#("l" 0 1 (fontified t)) . -994) (undo-tree-id9974 . -1) (undo-tree-id9975 . -1) (undo-tree-id9976 . -1) (undo-tree-id9977 . -1) (undo-tree-id9978 . -1) (undo-tree-id9979 . -1) 995) nil (26116 21857 768669 308000) 0 nil])
([nil nil ((#("order" 0 5 (fontified nil)) . 1000) (undo-tree-id9973 . -5) (999 . 1000)) nil (26116 21857 768663 332000) 0 nil])
([nil nil ((apply yas--snippet-revive 999 1035 #s(yas--snippet nil nil #s(yas--exit 1035 nil) 107 nil nil #s(yas--field 1 999 1035 nil nil nil t #s(yas--exit 1036 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1035 nil) 107 nil nil #s(yas--field 1 999 1035 nil nil nil t #s(yas--exit 1036 nil)) nil)) (999 . 1035) (#("std::sync::atomic::Ordering::Relaxed$0" 0 38 (fontified nil)) . 999) (undo-tree-id9959 . -38) (999 . 1037) (#("O" 0 1 (fontified nil)) . 999) (undo-tree-id9960 . -1) (999 . 1000) (#("std::sync::atomic::Ordering::Relaxed" 0 36 (fontified nil)) . -999) (undo-tree-id9961 . -36) (999 . 1035) (#("O" 0 1 (face font-lock-type-face fontified t)) . -999) (undo-tree-id9962 . -1) (undo-tree-id9963 . -1) (undo-tree-id9964 . -1) (undo-tree-id9965 . -1) (undo-tree-id9966 . -1) (undo-tree-id9967 . -1) (undo-tree-id9968 . -1) (undo-tree-id9969 . -1) (undo-tree-id9970 . -1) (undo-tree-id9971 . -1) (undo-tree-id9972 . -1) 1000) nil (26116 21857 768659 628000) 0 nil])
([nil nil ((apply yas--snippet-revive 994 1036 #s(yas--snippet nil (#s(yas--field 1 999 1035 nil nil nil t #s(yas--exit 1036 nil))) #s(yas--exit 1036 nil) 106 nil #s(yas--field 1 999 1035 nil nil nil t #s(yas--exit 1036 nil)) nil nil))) nil (26116 21857 768636 862000) 0 nil])
([nil nil ((1036 . 1037)) nil (26116 21857 768632 756000) 0 nil])
([nil nil ((1897 . 1906) (t 26116 21857 778753 734000)) nil (26116 21880 982958 210000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2248 . 2249) (nil fontified nil 2248 . 2249) (nil fontified nil 2247 . 2248) (nil fontified nil 2240 . 2247) (nil fontified nil 2238 . 2240) (nil fontified nil 2230 . 2238) (nil fontified nil 2228 . 2230) (nil fontified nil 2222 . 2228) (nil fontified nil 2220 . 2222) (nil fontified nil 2216 . 2220) (nil fontified nil 2214 . 2216) (nil fontified nil 2211 . 2214) (nil fontified nil 2210 . 2211) (nil fontified nil 2206 . 2210) (nil fontified nil 2205 . 2206) (nil fontified nil 2202 . 2205) (nil fontified nil 2199 . 2202) (nil fontified nil 2196 . 2199) (nil fontified nil 2195 . 2196) (nil fontified nil 2192 . 2195) (nil fontified nil 2184 . 2192) (nil fontified nil 2183 . 2184) (nil fontified nil 2182 . 2183) (nil fontified nil 2174 . 2182) (nil fontified nil 2173 . 2174) (nil fontified nil 2172 . 2173) (nil fontified nil 2164 . 2172) (nil fontified nil 2160 . 2164) (nil fontified nil 2159 . 2160) (nil fontified nil 2158 . 2159) (nil fontified nil 2157 . 2158) (nil fontified nil 2141 . 2157) (nil fontified nil 2139 . 2141) (nil fontified nil 2132 . 2139) (nil fontified nil 2130 . 2132) (nil fontified nil 2122 . 2130) (nil fontified nil 2120 . 2122) (nil fontified nil 2114 . 2120) (nil fontified nil 2112 . 2114) (nil fontified nil 2108 . 2112) (nil fontified nil 2106 . 2108) (nil fontified nil 2103 . 2106) (nil fontified nil 2102 . 2103) (nil fontified nil 2083 . 2102) (nil fontified nil 2082 . 2083) (nil fontified nil 2081 . 2082) (nil fontified nil 2080 . 2081) (nil fontified nil 2079 . 2080) (nil fontified nil 2073 . 2079) (nil fontified nil 2072 . 2073) (nil fontified nil 2071 . 2072) (nil fontified nil 2070 . 2071) (nil fontified nil 2069 . 2070) (nil fontified nil 2060 . 2069) (nil fontified nil 2059 . 2060) (nil fontified nil 2047 . 2059) (nil fontified nil 2046 . 2047) (nil fontified nil 2039 . 2046) (nil fontified nil 2019 . 2039) (nil fontified nil 2018 . 2019) (nil fontified nil 2017 . 2018) (nil fontified nil 2012 . 2017) (nil fontified nil 2011 . 2012) (nil fontified nil 2008 . 2011) (nil fontified nil 2004 . 2008) (nil fontified nil 1992 . 2004) (nil fontified nil 1991 . 1992) (nil fontified nil 1990 . 1991) (nil fontified nil 1984 . 1990) (nil fontified nil 1983 . 1984) (nil fontified nil 1976 . 1983) (nil fontified nil 1974 . 1976) (nil fontified nil 1966 . 1974) (nil fontified nil 1964 . 1966) (nil fontified nil 1958 . 1964) (nil fontified nil 1956 . 1958) (nil fontified nil 1952 . 1956) (nil fontified nil 1950 . 1952) (nil fontified nil 1947 . 1950) (nil fontified nil 1946 . 1947) (nil fontified nil 1942 . 1946) (nil fontified nil 1941 . 1942) (nil fontified nil 1938 . 1941) (nil fontified nil 1937 . 1938) (nil fontified nil 1935 . 1937) (nil fontified nil 1931 . 1935) (nil fontified nil 1923 . 1931) (nil fontified nil 1922 . 1923) (nil fontified nil 1921 . 1922) (nil fontified nil 1920 . 1921) (nil fontified nil 1914 . 1920) (nil fontified nil 1906 . 1914) (1906 . 2249)) nil (26116 21880 982954 513000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -1906) 1811) nil (26116 21880 982943 192000) 0 nil])
([nil nil ((#("u32, " 0 1 (face font-lock-type-face fontified t) 1 3 (face font-lock-type-face fontified t) 3 4 (fontified t) 4 5 (fontified t)) . -1875) (undo-tree-id10013 . -5) (undo-tree-id10014 . -5) (undo-tree-id10015 . -5) (undo-tree-id10016 . -5) (undo-tree-id10017 . -5) (undo-tree-id10018 . -5) (undo-tree-id10019 . -5) (undo-tree-id10020 . -5) (undo-tree-id10021 . -5) (undo-tree-id10022 . -5) (undo-tree-id10023 . -5) (undo-tree-id10024 . -5) 1880) nil (26116 21933 230177 760000) 0 nil])
([nil nil ((#("pid: " 0 3 (face font-lock-variable-name-face fontified t) 3 5 (fontified t)) . -1870) (undo-tree-id10126 . -5) (undo-tree-id10127 . -5) (undo-tree-id10128 . -5) (undo-tree-id10129 . -5) (undo-tree-id10130 . -5) (undo-tree-id10131 . -5) (undo-tree-id10132 . -5) (undo-tree-id10133 . -5) (undo-tree-id10134 . -5) (undo-tree-id10135 . -5) 1875 (t 26116 21934 405425 79000)) nil (26116 21960 390285 232000) 0 nil] [nil nil ((#("let pid = PID.load(std::sync::atomic::Ordering::Relaxed);" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 7 (face font-lock-variable-name-face fontified t) 7 10 (fontified t) 10 13 (face font-lock-type-face fontified t) 13 14 (fontified t) 14 18 (fontified t) 18 19 (face (rainbow-delimiters-depth-3-face) fontified t) 19 22 (face font-lock-constant-face fontified t) 22 24 (fontified t) 24 28 (face font-lock-constant-face fontified t) 28 30 (fontified t) 30 36 (face font-lock-constant-face fontified t) 36 38 (fontified t) 38 46 (face font-lock-type-face fontified t) 46 48 (fontified t) 48 55 (face font-lock-type-face fontified t) 55 56 (face (rainbow-delimiters-depth-3-face) fontified t) 56 57 (fontified t rear-nonsticky t)) . 2179) (undo-tree-id10051 . -57) (undo-tree-id10052 . -57) (undo-tree-id10053 . -57) (undo-tree-id10054 . -57) (undo-tree-id10055 . -20) (undo-tree-id10056 . -20) (undo-tree-id10057 . -20) (undo-tree-id10058 . -20) (undo-tree-id10059 . -20) (undo-tree-id10060 . -20) (undo-tree-id10061 . -20) (undo-tree-id10062 . -20) (undo-tree-id10063 . -20) (undo-tree-id10064 . -57) (undo-tree-id10065 . -57) (undo-tree-id10066 . -57) (undo-tree-id10067 . -57) (undo-tree-id10068 . -57) (undo-tree-id10069 . -57) (undo-tree-id10070 . -57) (undo-tree-id10071 . -57) (undo-tree-id10072 . -57) (undo-tree-id10073 . -57) (undo-tree-id10074 . -57) (undo-tree-id10075 . -57) (undo-tree-id10076 . -57) 2236) ((2179 . 2236)) (26116 21932 690321 382000) 0 nil] [nil nil ((#("pid: " 0 3 (face font-lock-variable-name-face fontified t) 3 5 (fontified t)) . -1870) (undo-tree-id9990 . -5) (undo-tree-id9991 . -5) (undo-tree-id9993 . -5) (undo-tree-id9995 . -5) (undo-tree-id9997 . -5) (undo-tree-id9999 . -5) (undo-tree-id10001 . -5) (undo-tree-id10003 . -5) (undo-tree-id10005 . -5) (undo-tree-id10007 . -5) (undo-tree-id10009 . -5) (undo-tree-id10011 . -5) 1875) ((1870 . 1875) (t 26116 21880 995421 811000)) (26116 21900 436103 715000) 0 nil])
([nil nil ((1036 . 1039) (t 26116 21960 412093 334000)) nil (26116 22199 501388 115000) 0 nil])
([nil nil ((2160 . 2173)) ((#("
            " 0 1 (fontified t) 1 13 (fontified t)) . 2160) (undo-tree-id10118 . -13) (undo-tree-id10119 . -13) (undo-tree-id10120 . -1) (undo-tree-id10121 . -1) (undo-tree-id10122 . -13) (undo-tree-id10123 . -13) (undo-tree-id10124 . -13) (undo-tree-id10125 . -13)) (26116 21932 139360 291000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2231) (undo-tree-id10034 . -1) (t 26116 21880 995421 811000)) ((2231 . 2232)) (26116 21900 435661 461000) 0 nil] [nil nil ((2231 . 2240) (t 26116 21880 995421 811000)) ((#("
        " 0 1 (fontified t) 1 5 (fontified t) 5 9 (fontified t)) . 2231) (undo-tree-id10028 . -9) (undo-tree-id10029 . -9) (undo-tree-id10030 . -9) (undo-tree-id10031 . -9) (undo-tree-id10032 . -1) (undo-tree-id10033 . -9)) (26116 21895 198060 990000) 0 nil])
([nil nil ((apply yas--snippet-revive 990 1047 #s(yas--snippet nil nil nil 112 nil nil nil nil)) (#("PID.load(std::sync::atomic::Ordering::Relaxed)." 0 3 (face font-lock-type-face fontified nil) 3 4 (fontified nil) 4 8 (fontified nil) 8 9 (face (rainbow-delimiters-depth-3-face) fontified nil) 9 12 (face font-lock-constant-face fontified nil) 12 14 (fontified nil) 14 18 (face font-lock-constant-face fontified nil) 18 20 (fontified nil) 20 26 (face font-lock-constant-face fontified nil) 26 28 (fontified nil) 28 36 (face font-lock-type-face fontified nil) 36 38 (fontified nil) 38 45 (face font-lock-type-face fontified nil) 45 46 (face (rainbow-delimiters-depth-3-face) fontified nil) 46 47 (fontified nil)) . -990) (undo-tree-id10136 . -4) (undo-tree-id10137 . -46) (undo-tree-id10138 . -47) (undo-tree-id10139 . -8) (undo-tree-id10140 . -8) (undo-tree-id10141 . -8) (undo-tree-id10142 . -8) (undo-tree-id10143 . -8) (undo-tree-id10144 . -8) (undo-tree-id10145 . -8) (undo-tree-id10146 . -8) (undo-tree-id10147 . -8) (undo-tree-id10148 . -8) (undo-tree-id10149 . -8) (undo-tree-id10150 . -8) (undo-tree-id10151 . -8) (undo-tree-id10152 . -8) (undo-tree-id10153 . -8) (undo-tree-id10154 . -8) (undo-tree-id10155 . -46) (undo-tree-id10156 . -46) (undo-tree-id10157 . -46) (undo-tree-id10158 . -46) (undo-tree-id10159 . -46) (undo-tree-id10160 . -46) (undo-tree-id10161 . -46) (undo-tree-id10162 . -46) (undo-tree-id10163 . -46) (undo-tree-id10164 . -46) (undo-tree-id10165 . -47) (undo-tree-id10166 . -47) (undo-tree-id10167 . -47) (undo-tree-id10168 . -47) (undo-tree-id10169 . -47) (undo-tree-id10170 . -47) (undo-tree-id10171 . -47) (undo-tree-id10172 . -47) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 112 nil nil nil nil)) (1037 . 1094) (#("unsafe { PID.load(std::sync::atomic::Ordering::Relaxed) }" 0 57 (fontified nil)) . 1037) (1037 . 1094) (#("un" 0 2 (fontified nil)) . 1037) (1037 . 1039) (#("unsafe" 0 6 (fontified nil)) . -1037) (1037 . 1043) (#("un" 0 2 (fontified t)) . -1037) (undo-tree-id10173 . -2) (undo-tree-id10174 . -1) (undo-tree-id10175 . -1) (undo-tree-id10176 . -2) (undo-tree-id10177 . -2) (undo-tree-id10178 . -2) (undo-tree-id10179 . -2) 1039) nil (26116 22199 501381 999000) 0 nil])
([nil nil ((nil fontified nil 2229 . 2230) (nil fontified nil 2228 . 2229) (nil fontified nil 2221 . 2228) (nil fontified nil 2219 . 2221) (nil fontified nil 2211 . 2219) (nil fontified nil 2209 . 2211) (nil fontified nil 2203 . 2209) (nil fontified nil 2201 . 2203) (nil fontified nil 2197 . 2201) (nil fontified nil 2195 . 2197) (nil fontified nil 2192 . 2195) (nil fontified nil 2191 . 2192) (nil fontified nil 2187 . 2191) (nil fontified nil 2186 . 2187) (nil fontified nil 2183 . 2186) (nil fontified nil 2180 . 2183) (nil fontified nil 2177 . 2180) (nil fontified nil 2176 . 2177) (nil fontified nil 2173 . 2176) (2173 . 2230)) ((#("let pid = PID.load(std::sync::atomic::Ordering::Relaxed);" 0 3 (face font-lock-keyword-face fontified nil) 3 4 (fontified nil) 4 7 (face font-lock-variable-name-face fontified nil) 7 10 (fontified nil) 10 13 (face font-lock-type-face fontified nil) 13 14 (fontified nil) 14 18 (fontified nil) 18 19 (face (rainbow-delimiters-depth-4-face) fontified nil) 19 22 (face font-lock-constant-face fontified nil) 22 24 (fontified nil) 24 28 (face font-lock-constant-face fontified nil) 28 30 (fontified nil) 30 36 (face font-lock-constant-face fontified nil) 36 38 (fontified nil) 38 46 (face font-lock-type-face fontified nil) 46 48 (fontified nil) 48 55 (face font-lock-type-face fontified nil) 55 56 (face (rainbow-delimiters-depth-4-face) fontified nil) 56 57 (fontified nil rear-nonsticky t)) . 2173) (nil fontified t 2229 . 2230)) (26116 21928 59110 113000) 0 nil])
nil
([nil nil ((#("    " 0 4 (fontified nil)) . -2236) (undo-tree-id10025 . -4) (undo-tree-id10026 . -4) (undo-tree-id10027 . -4) (2240 . 2241)) ((#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 2240) (2236 . 2240)) (26116 21895 197716 574000) 0 nil])
([nil nil ((2241 . 2244) (t 26116 22199 522107 949000)) nil (26116 22209 8819 451000) 0 nil])
([nil nil ((#("let pid = PID.load(std::sync::atomic::Ordering::Relaxed);" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 7 (face font-lock-variable-name-face fontified t) 7 10 (fontified t) 10 13 (face font-lock-type-face fontified t) 13 14 (fontified t) 14 18 (fontified t) 18 19 (face (rainbow-delimiters-depth-3-face) fontified t) 19 22 (face font-lock-constant-face fontified t) 22 24 (fontified t) 24 28 (face font-lock-constant-face fontified t) 28 30 (fontified t) 30 36 (face font-lock-constant-face fontified t) 36 38 (fontified t) 38 46 (face font-lock-type-face fontified t) 46 48 (fontified t) 48 55 (face font-lock-type-face fontified t) 55 56 (face (rainbow-delimiters-depth-3-face) fontified t) 56 57 (fontified t)) . 980) (undo-tree-id10035 . -57) (undo-tree-id10036 . -19) (undo-tree-id10037 . -28) (undo-tree-id10038 . -57) (undo-tree-id10039 . -57) (undo-tree-id10040 . -57) (undo-tree-id10041 . -57) (undo-tree-id10042 . -57) (undo-tree-id10043 . -57) (undo-tree-id10044 . -57) (undo-tree-id10045 . -57) (undo-tree-id10046 . -57) (undo-tree-id10047 . -57) (undo-tree-id10048 . -57) (undo-tree-id10049 . -57) (undo-tree-id10050 . -57) 1037) ((980 . 1037)) (26116 21927 692765 623000) 0 nil])
nil
([nil nil ((#("b" 0 1 (fontified t)) . -2243) (undo-tree-id10218 . -1) (undo-tree-id10219 . -1) (undo-tree-id10220 . -1) (undo-tree-id10221 . -1) (undo-tree-id10222 . -1) (undo-tree-id10223 . -1) (undo-tree-id10224 . -1) 2244) nil (26116 22211 481360 31000) 0 nil] [nil nil ((65 . 81) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2253 2256 nil nil nil nil #s(yas--exit 2257 nil))) #s(yas--exit 2257 nil) 113 nil #s(yas--field 1 2253 2256 nil nil nil nil #s(yas--exit 2257 nil)) nil nil)) (2242 . 2257) (#("sub_assign(${1:rhs})$0" 0 22 (fontified nil)) . 2242) (2242 . 2264) (#("ub" 0 2 (fontified nil)) . 2242) (2242 . 2244) (#("sub_assign(â€¦) (use std::ops::SubAssign)" 0 39 (fontified nil)) . -2242) (2242 . 2281) (#("ub" 0 2 (fontified t)) . -2242) (undo-tree-id10180 . -2) (undo-tree-id10181 . -1) (undo-tree-id10182 . -1) (undo-tree-id10183 . -2) (undo-tree-id10184 . -2) (undo-tree-id10185 . -2) 2244) ((2242 . 2244) (#("sub_assign(â€¦) (use std::ops::SubAssign)" 0 39 (fontified nil)) . 2242) (2242 . 2281) (#("ub" 0 2 (fontified nil)) . 2242) (2242 . 2244) (#("sub_assign(${1:rhs})$0" 0 22 (fontified nil)) . 2242) (2242 . 2264) (#("sub_assign(rhs)" 0 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-3-face) fontified t) 11 14 (fontified t) 14 15 (face (rainbow-delimiters-depth-3-face) fontified t)) . 2242) (undo-tree-id10186 . -11) (apply yas--snippet-revive 2242 2257 #s(yas--snippet nil (#s(yas--field 1 2253 2256 nil nil nil nil #s(yas--exit 2257 nil))) #s(yas--exit 2257 nil) 113 nil #s(yas--field 1 2253 2256 nil nil nil nil #s(yas--exit 2257 nil)) nil nil)) (", ops::SubAssign" . 65)) (26116 22209 7608 521000) 0 nil])
([nil nil ((961 . 974)) ((#("
            " 0 1 (fontified t) 1 13 (fontified t)) . 961) (undo-tree-id10095 . -13) (undo-tree-id10096 . -13) (undo-tree-id10097 . -13) (undo-tree-id10098 . -13) (undo-tree-id10099 . -13) (undo-tree-id10100 . -13) (undo-tree-id10101 . -13) (undo-tree-id10102 . -13) (undo-tree-id10103 . -13) (undo-tree-id10104 . -13) (undo-tree-id10105 . -13) (undo-tree-id10106 . -13) (undo-tree-id10107 . -13) (undo-tree-id10108 . -13) (undo-tree-id10109 . -13) (undo-tree-id10110 . -13) (undo-tree-id10111 . -13) (undo-tree-id10112 . -13) (undo-tree-id10113 . -13) (undo-tree-id10114 . -13) (undo-tree-id10115 . -1) (undo-tree-id10116 . -13) (undo-tree-id10117 . -13)) (26116 21927 380417 169000) 0 nil])
([nil nil ((2243 . 2244)) nil (26116 22211 481353 282000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 1030 . 1031) (nil fontified nil 1030 . 1031) (nil fontified nil 1029 . 1030) (nil fontified nil 1022 . 1029) (nil fontified nil 1020 . 1022) (nil fontified nil 1012 . 1020) (nil fontified nil 1010 . 1012) (nil fontified nil 1004 . 1010) (nil fontified nil 1002 . 1004) (nil fontified nil 998 . 1002) (nil fontified nil 996 . 998) (nil fontified nil 993 . 996) (nil fontified nil 992 . 993) (nil fontified nil 988 . 992) (nil fontified nil 987 . 988) (nil fontified nil 984 . 987) (nil fontified nil 981 . 984) (nil fontified nil 978 . 981) (nil fontified nil 977 . 978) (nil fontified nil 974 . 977) (974 . 1031)) ((#("let pid = PID.load(std::sync::atomic::Ordering::Relaxed);" 0 3 (face font-lock-keyword-face fontified nil) 3 4 (fontified nil) 4 7 (face font-lock-variable-name-face fontified nil) 7 10 (fontified nil) 10 13 (face font-lock-type-face fontified nil) 13 14 (fontified nil) 14 18 (fontified nil) 18 19 (face (rainbow-delimiters-depth-4-face) fontified nil) 19 22 (face font-lock-constant-face fontified nil) 22 24 (fontified nil) 24 28 (face font-lock-constant-face fontified nil) 28 30 (fontified nil) 30 36 (face font-lock-constant-face fontified nil) 36 38 (fontified nil) 38 46 (face font-lock-type-face fontified nil) 46 48 (fontified nil) 48 55 (face font-lock-type-face fontified nil) 55 56 (face (rainbow-delimiters-depth-4-face) fontified nil) 56 57 (rear-nonsticky nil fontified nil)) . 974) (undo-tree-id10077 . -57) (undo-tree-id10078 . -57) (undo-tree-id10079 . -57) (undo-tree-id10080 . -57) (undo-tree-id10081 . -57) (undo-tree-id10082 . -57) (undo-tree-id10083 . -57) (undo-tree-id10084 . -57) (undo-tree-id10085 . -57) (undo-tree-id10086 . -57) (undo-tree-id10087 . -57) (undo-tree-id10088 . -57) (undo-tree-id10089 . -57) (undo-tree-id10090 . -57) (undo-tree-id10091 . -57) (undo-tree-id10092 . -57) (undo-tree-id10093 . -57) (undo-tree-id10094 . -57) (nil rear-nonsticky t 1030 . 1031) (t 26116 21917 338757 369000)) (26116 21917 318788 416000) 0 nil])
([nil nil ((apply yas--snippet-revive 2195 2252 #s(yas--snippet nil nil nil 114 nil nil nil nil)) (#("PID.load(std::sync::atomic::Ordering::Relaxed)." 0 3 (face font-lock-type-face fontified nil) 3 4 (fontified nil) 4 8 (fontified nil) 8 9 (face (rainbow-delimiters-depth-3-face) fontified nil) 9 12 (face font-lock-constant-face fontified nil) 12 14 (fontified nil) 14 18 (face font-lock-constant-face fontified nil) 18 20 (fontified nil) 20 26 (face font-lock-constant-face fontified nil) 26 28 (fontified nil) 28 36 (face font-lock-type-face fontified nil) 36 38 (fontified nil) 38 45 (face font-lock-type-face fontified nil) 45 46 (face (rainbow-delimiters-depth-3-face) fontified nil) 46 47 (fontified nil)) . -2195) (undo-tree-id10187 . -46) (undo-tree-id10188 . -47) (undo-tree-id10189 . -46) (undo-tree-id10190 . -46) (undo-tree-id10191 . -47) (undo-tree-id10192 . -47) (undo-tree-id10193 . -47) (undo-tree-id10194 . -47) (undo-tree-id10195 . -47) (undo-tree-id10196 . -47) (undo-tree-id10197 . -47) (undo-tree-id10198 . -47) (undo-tree-id10199 . -47) (undo-tree-id10200 . -47) (undo-tree-id10201 . -47) (undo-tree-id10202 . -47) (undo-tree-id10203 . -47) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 114 nil nil nil nil)) (2242 . 2299) (#("unsafe { PID.load(std::sync::atomic::Ordering::Relaxed) }" 0 57 (fontified nil)) . 2242) (2242 . 2299) (#("un" 0 2 (fontified nil)) . 2242) (2242 . 2244) (#("unsafe" 0 6 (fontified nil)) . -2242) (2242 . 2248) (#("un" 0 2 (fontified t)) . -2242) (undo-tree-id10204 . -2) (undo-tree-id10205 . -1) (undo-tree-id10206 . -1) (undo-tree-id10207 . -1) (undo-tree-id10208 . -1) (undo-tree-id10209 . -1) (undo-tree-id10210 . -1) (undo-tree-id10211 . -1) (undo-tree-id10212 . -1) (undo-tree-id10213 . -1) (undo-tree-id10214 . -2) (undo-tree-id10215 . -2) (undo-tree-id10216 . -2) (undo-tree-id10217 . -2) 2244) nil (26116 22211 481347 954000) 0 nil])
nil
([nil nil ((1791 . 1792) (t 26116 22211 502108 678000)) nil (26116 23855 272000 49000) 0 nil])
([nil nil ((1823 . 1824)) nil (26116 23855 271999 83000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1851 . 1852) (nil fontified nil 1851 . 1852) (nil fontified nil 1850 . 1851) (nil fontified nil 1849 . 1850) (nil fontified nil 1846 . 1849) (nil fontified nil 1845 . 1846) (nil fontified nil 1842 . 1845) (nil fontified nil 1841 . 1842) (nil fontified nil 1840 . 1841) (nil fontified nil 1837 . 1840) (nil fontified nil 1836 . 1837) (nil fontified nil 1828 . 1836) (nil fontified nil 1827 . 1828) (nil fontified nil 1823 . 1827) (1823 . 1852)) nil (26116 23855 271997 734000) 0 nil])
([nil nil ((#("3" 0 1 (face font-lock-variable-name-face fontified t)) . -1847) (undo-tree-id10232 . -1) (undo-tree-id10233 . -1) (undo-tree-id10234 . -1) (#("2" 0 1 (face font-lock-type-face fontified t)) . -1848) (undo-tree-id10235 . -1) (undo-tree-id10236 . -1) 1849) nil (26116 23855 271994 550000) 0 nil])
([nil nil ((1847 . 1848)) nil (26116 23855 271989 183000) 0 nil])
([nil nil ((1846 . 1851) (#("us" 0 2 (fontified nil)) . 1846) (1846 . 1848) (#("usize" 0 5 (fontified nil)) . -1846) (1846 . 1851) (#("us" 0 2 (face font-lock-variable-name-face fontified t)) . -1846) (undo-tree-id10225 . -2) (undo-tree-id10226 . -1) (undo-tree-id10227 . -1) (undo-tree-id10228 . -1) (undo-tree-id10229 . -2) (undo-tree-id10230 . -2) (undo-tree-id10231 . -2) 1848) nil (26116 23855 271985 196000) 0 nil])
([nil nil ((#("3" 0 1 (fontified t)) . -1838) (undo-tree-id10266 . -1) (undo-tree-id10267 . -1) (undo-tree-id10268 . -1) (undo-tree-id10269 . -1) (undo-tree-id10270 . -1) (undo-tree-id10271 . -1) (undo-tree-id10272 . -1) (undo-tree-id10273 . -1) (undo-tree-id10274 . -1) (undo-tree-id10275 . -1) (undo-tree-id10276 . -1) (undo-tree-id10277 . -1) (undo-tree-id10278 . -1) (#("2" 0 1 (face font-lock-type-face fontified t)) . -1839) (undo-tree-id10279 . -1) (undo-tree-id10280 . -1) (undo-tree-id10281 . -1) (undo-tree-id10282 . -1) (undo-tree-id10283 . -1) (undo-tree-id10284 . -1) (undo-tree-id10285 . -1) (undo-tree-id10286 . -1) (undo-tree-id10287 . -1) (undo-tree-id10288 . -1) (undo-tree-id10289 . -1) (undo-tree-id10290 . -1) 1840 (t 26116 23855 292209 310000)) nil (26116 23890 216311 593000) 0 nil])
([nil nil ((1838 . 1839)) nil (26116 23890 216294 902000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -1837) (undo-tree-id10248 . -1) (undo-tree-id10249 . -1) (undo-tree-id10250 . -1) (undo-tree-id10251 . -1) (undo-tree-id10252 . -1) (undo-tree-id10253 . -1) (undo-tree-id10254 . -1) (undo-tree-id10255 . -1) (undo-tree-id10256 . -1) (undo-tree-id10257 . -1) (undo-tree-id10258 . -1) (undo-tree-id10259 . -1) (undo-tree-id10260 . -1) (undo-tree-id10261 . -1) (undo-tree-id10262 . -1) (undo-tree-id10263 . -1) (#("u" 0 1 (fontified t)) . -1838) (undo-tree-id10264 . -1) (undo-tree-id10265 . -1) 1839) nil (26116 23890 216293 183000) 0 nil])
([nil nil ((1837 . 1839)) nil (26116 23890 216279 547000) 0 nil])
([nil current ((1837 . 1842) (#("us" 0 2 (fontified nil)) . 1837) (1837 . 1839) (#("usize" 0 5 (fontified nil)) . -1837) (1837 . 1842) (#("us" 0 2 (fontified t)) . -1837) (undo-tree-id10237 . -2) (undo-tree-id10238 . -2) (undo-tree-id10239 . -1) (undo-tree-id10240 . -2) (undo-tree-id10241 . -2) (undo-tree-id10242 . -2) (undo-tree-id10243 . -2) (undo-tree-id10244 . -2) (undo-tree-id10245 . -2) (undo-tree-id10246 . -2) (undo-tree-id10247 . -2) 1839) nil (26116 23890 216275 441000) 0 nil])
nil
