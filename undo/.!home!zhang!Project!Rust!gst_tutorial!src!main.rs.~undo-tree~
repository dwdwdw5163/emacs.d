(undo-tree-save-format-version . 1)
"d7bf4223bc9a4dbd1ca8ade011fa35f53be92f0d"
[nil nil nil nil (26044 56633 399071 341000) 0 nil]
([nil nil ((#("gst::" 0 5 (fontified nil)) . 6431) (6436 . 6447) (#("gst::" 0 5 (fontified nil)) . 6330) (6335 . 6346) (#("gst::" 0 5 (fontified nil)) . 4811) (4816 . 4827) (#("gst::" 0 5 (fontified nil)) . 4622) (4627 . 4638) (#("gst::" 0 5 (fontified nil)) . 4539) (4544 . 4555) (#("gst::" 0 5 (fontified nil)) . 4453) (4458 . 4469) (#("gst::" 0 5 (fontified nil)) . 4372) (4377 . 4388) (#("gst::" 0 3 (face font-lock-constant-face fontified nil) 3 5 (fontified nil)) . 3437) (3442 . 3453) (#("gst::" 0 3 (face font-lock-constant-face fontified nil) 3 5 (fontified nil)) . 3245) (3250 . 3261) (#("gst::" 0 3 (face font-lock-constant-face fontified nil) 3 5 (fontified nil)) . 3159) (3164 . 3175) (#("gst::" 0 3 (face font-lock-constant-face fontified nil) 3 5 (fontified nil)) . 3070) (3075 . 3086) (#("gst::" 0 3 (face font-lock-constant-face fontified nil) 3 5 (fontified nil)) . 2989) (2994 . 3005) (#("gst::" 0 3 (face font-lock-constant-face fontified nil) 3 5 (fontified nil)) . 2118) (undo-tree-id2376 . -5) (undo-tree-id2377 . -5) (undo-tree-id2378 . -5) (2123 . 2134)) ((#("gstreamer::" 0 9 (fontified nil face font-lock-constant-face) 9 11 (fontified nil)) . 2123) (2118 . 2123) (#("gstreamer::" 0 1 (fontified nil face font-lock-constant-face) 1 2 (fontified nil face font-lock-constant-face) 2 4 (fontified nil face font-lock-constant-face) 4 9 (fontified nil face font-lock-constant-face) 9 11 (fontified nil)) . 2994) (2989 . 2994) (#("gstreamer::" 0 9 (fontified nil face font-lock-constant-face) 9 11 (fontified nil)) . 3075) (3070 . 3075) (#("gstreamer::" 0 9 (fontified nil face font-lock-constant-face) 9 11 (fontified nil)) . 3164) (3159 . 3164) (#("gstreamer::" 0 9 (fontified nil face font-lock-constant-face) 9 11 (fontified nil)) . 3250) (3245 . 3250) (#("gstreamer::" 0 9 (fontified nil face font-lock-constant-face) 9 11 (fontified nil)) . 3442) (3437 . 3442) (#("gstreamer::" 0 9 (fontified nil face font-lock-constant-face) 9 11 (fontified nil)) . 4377) (4372 . 4377) (#("gstreamer::" 0 9 (fontified nil face font-lock-constant-face) 9 11 (fontified nil)) . 4458) (4453 . 4458) (#("gstreamer::" 0 1 (fontified nil face font-lock-constant-face) 1 9 (fontified nil face font-lock-constant-face) 9 11 (fontified nil)) . 4544) (4539 . 4544) (#("gstreamer::" 0 9 (fontified nil face font-lock-constant-face) 9 11 (fontified nil)) . 4627) (4622 . 4627) (#("gstreamer::" 0 9 (fontified nil face font-lock-constant-face) 9 11 (fontified nil)) . 4816) (4811 . 4816) (#("gstreamer::" 0 9 (face font-lock-constant-face fontified nil) 9 11 (fontified nil)) . 6335) (6330 . 6335) (#("gstreamer::" 0 9 (face font-lock-constant-face fontified nil) 9 11 (fontified nil)) . 6436) (6431 . 6436)) (26044 56636 478048 663000) 0 nil])
([nil nil ((#("error" 0 5 (face font-lock-preprocessor-face fontified t)) . 6284)) ((6284 . 6289)) (26044 56637 137650 905000) 0 nil])
([nil nil ((#("element_" 0 8 (face font-lock-preprocessor-face fontified t)) . 6276) (undo-tree-id2379 . -8) (undo-tree-id2380 . -8)) ((6276 . 6284)) (26044 56640 216818 872000) 0 nil])
([nil nil ((6276 . 6286)) ((#("element_er" 0 10 (face font-lock-preprocessor-face fontified t)) . 6276)) (26044 56640 598026 363000) 0 nil])
([nil nil ((84 . 99) (6276 . 6289) (#("element_er" 0 10 (fontified nil)) . 6276) (6276 . 6286) (#("element_error (use gstreamer::element_error)" 0 44 (fontified nil)) . 6276) (6276 . 6320) (#("element_er" 0 10 (face font-lock-preprocessor-face fontified t)) . 6276)) ((6276 . 6286) (#("element_error (use gstreamer::element_error)" 0 44 (fontified nil)) . 6276) (6276 . 6320) (#("element_er" 0 10 (fontified nil)) . 6276) (6276 . 6286) (#("element_error" 0 13 (face font-lock-preprocessor-face fontified t)) . 6276) (#(", element_error" 0 15 (fontified t)) . 84)) (26044 56646 734734 122000) 0 nil])
([nil nil ((#("          // The following sends a message of type Error on the bus, containing our detailed
            // error information.
            element_error!(
                dbin,
                gstreamer::LibraryError::Failed,
                (\"Failed to insert sink\"),
                details: gstreamer::Structure::builder(\"error-details\")
                    .field(\"error\",
                           &ErrorValue(Arc::new(Mutex::new(Some(err)))))
                    .build()
            );
        }" 0 10 (fontified t) 10 13 (face font-lock-comment-delimiter-face fontified t) 13 93 (face font-lock-comment-face fontified t) 93 105 (fontified t) 105 108 (face font-lock-comment-delimiter-face fontified t) 108 112 (face font-lock-comment-face fontified t) 112 127 (face font-lock-comment-face fontified t) 127 139 (fontified t) 139 152 (face font-lock-preprocessor-face fontified t) 152 153 (face font-lock-preprocessor-face fontified t) 153 154 (face (rainbow-delimiters-depth-5-face) fontified t) 154 155 (fontified t) 155 177 (fontified t) 177 193 (fontified t) 193 202 (face font-lock-constant-face fontified t) 202 204 (fontified t) 204 216 (face font-lock-type-face fontified t) 216 218 (fontified t) 218 224 (face font-lock-type-face fontified t) 224 226 (fontified t) 226 242 (fontified t) 242 243 (face (rainbow-delimiters-depth-6-face) fontified t) 243 266 (face font-lock-string-face fontified t) 266 267 (face (rainbow-delimiters-depth-6-face) fontified t) 267 269 (fontified t) 269 285 (fontified t) 285 292 (face font-lock-variable-name-face fontified t) 292 294 (fontified t) 294 303 (face font-lock-constant-face fontified t) 303 305 (fontified t) 305 314 (face font-lock-type-face fontified t) 314 323 (fontified t) 323 324 (face (rainbow-delimiters-depth-6-face) fontified t) 324 339 (face font-lock-string-face fontified t) 339 340 (face (rainbow-delimiters-depth-6-face) fontified t) 340 341 (fontified t) 341 367 (fontified t) 367 368 (face (rainbow-delimiters-depth-6-face) fontified t) 368 375 (face font-lock-string-face fontified t) 375 377 (fontified t) 377 404 (fontified t) 404 405 (face rust-ampersand-face fontified t) 405 415 (face font-lock-type-face fontified t) 415 416 (face (rainbow-delimiters-depth-7-face) fontified t) 416 419 (face font-lock-type-face fontified t) 419 424 (fontified t) 424 425 (face (rainbow-delimiters-depth-8-face) fontified t) 425 430 (face font-lock-type-face fontified t) 430 435 (fontified t) 435 436 (face (rainbow-delimiters-depth-9-face) fontified t) 436 440 (face font-lock-type-face fontified t) 440 441 (face (rainbow-delimiters-depth-1-face) fontified t) 441 444 (fontified t) 444 445 (face (rainbow-delimiters-depth-1-face) fontified t) 445 446 (face (rainbow-delimiters-depth-9-face) fontified t) 446 447 (face (rainbow-delimiters-depth-8-face) fontified t) 447 448 (face (rainbow-delimiters-depth-7-face) fontified t) 448 449 (face (rainbow-delimiters-depth-6-face) fontified t) 449 450 (fontified t) 450 476 (fontified t) 476 477 (face (rainbow-delimiters-depth-6-face) fontified t) 477 478 (face (rainbow-delimiters-depth-6-face) fontified t) 478 491 (fontified t) 491 492 (face (rainbow-delimiters-depth-5-face) fontified t) 492 502 (fontified t) 502 503 (face (rainbow-delimiters-depth-4-face) fontified t)) . 6152) (undo-tree-id2414 . -405) (undo-tree-id2415 . -405) (undo-tree-id2416 . -269) (undo-tree-id2417 . -294) (undo-tree-id2418 . -269) (undo-tree-id2419 . -294) (undo-tree-id2420 . -377) (undo-tree-id2421 . -405)) ((6152 . 6655)) (26044 56647 335887 342000) 0 nil] [nil nil ((#("ErrorValue" 0 10 (face font-lock-type-face fontified t)) . 6557)) ((6557 . 6567)) (26044 56645 802645 93000) 0 nil])
([nil nil ((6150 . 6162) (#("  " 0 2 (fontified t)) . 6150) (undo-tree-id2422 . -2) (undo-tree-id2423 . -2) (undo-tree-id2424 . -2) (undo-tree-id2425 . -2) (undo-tree-id2426 . -2) (undo-tree-id2427 . -2) (undo-tree-id2428 . -2) (undo-tree-id2429 . -2) (undo-tree-id2430 . -2) (undo-tree-id2431 . -2)) ((6150 . 6152) (#("            " 0 12 (fontified t)) . 6150) (undo-tree-id2410 . -12) (undo-tree-id2411 . -12) (undo-tree-id2412 . -12) (undo-tree-id2413 . -12)) (26044 56647 532673 210000) 0 nil])
([nil nil ((6557 . 6567)) ((#("ErroeValue" 0 10 (face font-lock-type-face fontified t)) . 6557)) (26044 56644 991016 731000) 0 nil])
([nil nil ((6162 . 6163)) ((#("e" 0 1 (fontified t)) . 6162)) (26044 56647 708275 926000) 0 nil])
nil
([nil nil ((6163 . 6164)) ((#("p" 0 1 (fontified t)) . 6163) (undo-tree-id2364 . -1) (undo-tree-id2365 . -1)) (26044 56647 903529 2000) 0 nil])
([nil nil ((6162 . 6173) (#("eprintln!($0)" 0 13 (fontified nil)) . 6162) (6162 . 6175) (#("ep" 0 2 (fontified nil)) . 6162) (6162 . 6164) (#("eprintln!(…)" 0 12 (fontified nil)) . 6162) (6162 . 6174) (#("ep" 0 1 (fontified t) 1 2 (fontified t)) . 6162) (undo-tree-id2432 . -1) (undo-tree-id2433 . -1)) ((6162 . 6164) (#("eprintln!(…)" 0 12 (fontified nil)) . 6162) (6162 . 6174) (#("ep" 0 2 (fontified nil)) . 6162) (6162 . 6164) (#("eprintln!($0)" 0 13 (fontified nil)) . 6162) (6162 . 6175) (#("eprintln!()" 0 9 (face rust-builtin-formatting-macro fontified t) 9 10 (face (rainbow-delimiters-depth-5-face) fontified t) 10 11 (face (rainbow-delimiters-depth-5-face) fontified t)) . 6162) (undo-tree-id2358 . -10) (undo-tree-id2359 . -10) (undo-tree-id2360 . -11) (undo-tree-id2361 . -11) (undo-tree-id2362 . -11) (undo-tree-id2363 . -10)) (26044 56648 128009 951000) 0 nil])
([nil nil ((6172 . 6174)) ((#("\"\"" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t)) . 6172) (undo-tree-id2356 . -1) (undo-tree-id2357 . -1)) (26044 56648 368829 67000) 0 nil])
([nil nil ((6173 . 6175)) ((#("{}" 0 2 (face rust-string-interpolation fontified t)) . 6173)) (26044 56648 634217 105000) 0 nil])
([nil nil ((6176 . 6181)) ((#(", err" 0 5 (fontified t)) . 6176)) (26044 56648 909660 834000) 0 nil])
([nil nil ((6182 . 6183)) ((#(";" 0 1 (fontified t)) . 6182) (undo-tree-id2353 . -1) (undo-tree-id2354 . -1) (undo-tree-id2355 . -1)) (26044 56649 136025 586000) 0 nil])
([nil nil ((6184 . 6192) (#("    " 0 4 (fontified t)) . 6184)) ((6184 . 6188) (#("        " 0 4 (fontified t) 4 8 (fontified t)) . 6184)) (26044 56649 367176 962000) 0 nil])
([nil nil ((6183 . 6196)) ((#("
            " 0 1 (fontified t) 1 9 (fontified t) 9 13 (fontified t)) . 6183) (undo-tree-id2348 . -13) (undo-tree-id2349 . -13) (undo-tree-id2350 . -13) (undo-tree-id2351 . -13) (undo-tree-id2352 . -13)) (26044 56649 754776 913000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . 6192) (6196 . 6197)) ((#("}" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 6196) (undo-tree-id2345 . -1) (undo-tree-id2346 . -1) (undo-tree-id2347 . -1) (6192 . 6196)) (26044 56650 168906 690000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . 6198)) ((6198 . 6202)) (26044 56650 532241 221000) 0 nil])
([nil nil ((1508 . 1513)) ((#("&mut " 0 1 (face rust-ampersand-face fontified t) 1 2 (face font-lock-keyword-face fontified t) 2 3 (face font-lock-keyword-face fontified t) 3 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t)) . 1508) (undo-tree-id2342 . -5) (undo-tree-id2343 . -5) (undo-tree-id2344 . -5)) (26044 56663 132712 343000) 0 nil])
([nil nil ((#("mut " 0 1 (face font-lock-keyword-face fontified t) 1 2 (face font-lock-keyword-face fontified t) 2 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . 1509) (undo-tree-id2460 . -4)) ((1509 . 1513)) (26044 56664 972452 777000) 0 nil])
([nil nil ((#("clone()" 0 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-2-face) fontified t) 6 7 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1238) (undo-tree-id2489 . -7) (undo-tree-id2490 . -7) (undo-tree-id2491 . -7) (undo-tree-id2492 . -7) (undo-tree-id2493 . -7) (undo-tree-id2494 . -7) (undo-tree-id2495 . -7) (undo-tree-id2496 . -7) (undo-tree-id2497 . -7) (undo-tree-id2498 . -7) (undo-tree-id2499 . -7) 1245 (t 26044 56671 754481 388000)) nil (26044 58222 810438 910000) 0 nil] [nil nil ((503 . 508)) ((#("
    " 0 1 (fontified t) 1 5 (fontified t)) . 503) (undo-tree-id2454 . -5) (undo-tree-id2455 . -5) (undo-tree-id2456 . -1) (undo-tree-id2457 . -5) (undo-tree-id2458 . -1) (undo-tree-id2459 . -5)) (26044 56661 522150 219000) 0 nil])
([nil nil ((1238 . 1239)) nil (26044 58222 810430 37000) 0 nil])
([nil nil ((508 . 521)) ((#("let queue = E" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 9 (face font-lock-variable-name-face fontified t) 9 12 (fontified t) 12 13 (face font-lock-type-face fontified t)) . 508) (undo-tree-id2452 . -12) (undo-tree-id2453 . -12)) (26044 56660 965525 33000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -1238) (undo-tree-id2485 . -1) (undo-tree-id2486 . -1) (undo-tree-id2487 . -1) (undo-tree-id2488 . -1) 1239) nil (26044 58222 810429 143000) 0 nil])
([nil nil ((520 . 534) (#("E" 0 1 (fontified nil)) . 520) (520 . 521) (#("ElementFactory (alias GstElementFactory)" 0 40 (fontified nil)) . 520) (520 . 560) (#("E" 0 1 (face font-lock-type-face fontified nil)) . 520)) ((520 . 521) (#("ElementFactory (alias GstElementFactory)" 0 40 (fontified nil)) . 520) (520 . 560) (#("E" 0 1 (fontified nil)) . 520) (520 . 521) (#("ElementFactory" 0 14 (face font-lock-type-face fontified t)) . 520) (undo-tree-id2438 . -14) (undo-tree-id2439 . -14) (undo-tree-id2440 . -14)) (26044 56655 950851 106000) 0 nil])
([nil nil ((1238 . 1240)) nil (26044 58222 810425 351000) 0 nil])
([nil nil ((534 . 540)) ((#("::make" 0 2 (fontified t) 2 6 (fontified t)) . 534) (undo-tree-id2437 . -2)) (26044 56655 427872 753000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -1239) (undo-tree-id2480 . -1) (undo-tree-id2481 . -1) (undo-tree-id2482 . -1) (undo-tree-id2483 . -1) (undo-tree-id2484 . -1) 1240) nil (26044 58222 810424 160000) 0 nil])
([nil nil ((536 . 550) (#("make" 0 4 (fontified nil)) . 536) (536 . 540) (#("make_with_name (alias gst_element_factory_make)" 0 47 (fontified nil)) . -536) (536 . 583) (#("make" 0 4 (fontified t)) . -536) (undo-tree-id496 . -4) 540) ((536 . 540) (#("make_with_name (alias gst_element_factory_make)" 0 47 (fontified nil)) . 536) (536 . 583) (#("make" 0 4 (fontified nil)) . 536) (536 . 540) (#("make_with_name" 0 14 (fontified t)) . 536) (undo-tree-id2326 . -14) (undo-tree-id2327 . -14) (undo-tree-id2328 . -14)) (26044 56630 44604 70000) 0 nil])
([nil nil ((1239 . 1242)) nil (26044 58222 810418 855000) 0 nil])
([nil nil ((550 . 552)) ((#("()" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t) 1 2 (face (rainbow-delimiters-depth-2-face) fontified t)) . 550) (undo-tree-id2323 . -1) (undo-tree-id2324 . -1) (undo-tree-id2325 . -2)) (26044 56630 5739 686000) 0 nil])
([nil nil ((41 . 80) (apply yas--snippet-revive 1238 1249 #s(yas--snippet nil nil #s(yas--exit 1249 nil) 20 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1249 nil) 20 nil nil nil nil)) (1238 . 1249) (#("downgrade()$0" 0 13 (fontified nil)) . 1238) (1238 . 1251) (#("down" 0 4 (fontified nil)) . 1238) (1238 . 1242) (#("downgrade() (use gstreamer::glib::clone::Downgrade)" 0 51 (fontified nil)) . -1238) (1238 . 1289) (#("down" 0 4 (fontified t)) . -1238) (undo-tree-id2461 . -4) (undo-tree-id2462 . -1) (undo-tree-id2463 . -1) (undo-tree-id2464 . -1) (undo-tree-id2465 . -1) (undo-tree-id2466 . -1) (undo-tree-id2467 . -1) (undo-tree-id2468 . -1) (undo-tree-id2469 . -1) (undo-tree-id2470 . -1) (undo-tree-id2471 . -1) (undo-tree-id2472 . -2) (undo-tree-id2473 . -2) (undo-tree-id2474 . -3) (undo-tree-id2475 . -3) (undo-tree-id2476 . -4) (undo-tree-id2477 . -4) (undo-tree-id2478 . -4) (undo-tree-id2479 . -4) 1242) nil (26044 58222 810413 807000) 0 nil])
([nil nil ((551 . 553)) ((#("\"\"" 0 2 (face font-lock-string-face fontified t)) . 551) (undo-tree-id2321 . -1) (undo-tree-id2322 . -1)) (26044 56629 965084 834000) 0 nil])
([nil nil ((1565 . 1566) (t 26044 58222 854576 313000)) nil (26044 58435 514706 624000) 0 nil])
([nil nil ((552 . 557)) ((#("queue" 0 5 (face font-lock-string-face fontified t)) . 552)) (26044 56629 924240 445000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1565) (undo-tree-id2819 . -1) (undo-tree-id2820 . -1) (undo-tree-id2821 . -1) (undo-tree-id2822 . -1) (undo-tree-id2823 . -1) 1566) nil (26044 58435 514705 549000) 0 nil])
([nil nil ((558 . 561)) ((#(", S" 0 2 (fontified t) 2 3 (face font-lock-type-face fontified t)) . 558) (undo-tree-id2319 . -3) (undo-tree-id2320 . -3)) (26044 56629 886619 434000) 0 nil])
([nil nil ((#("pipeline" 0 3 (fontified t) 3 8 (fontified t)) . -1557) (undo-tree-id2758 . -8) (undo-tree-id2759 . -8) (undo-tree-id2760 . -2) (undo-tree-id2761 . -2) (undo-tree-id2762 . -2) (undo-tree-id2763 . -2) (undo-tree-id2764 . -2) (undo-tree-id2765 . -2) (undo-tree-id2766 . -2) (undo-tree-id2767 . -2) (undo-tree-id2768 . -2) (undo-tree-id2769 . -8) (undo-tree-id2770 . -8) (undo-tree-id2771 . -8) (undo-tree-id2772 . -8) (undo-tree-id2773 . -8) (undo-tree-id2774 . -8) (undo-tree-id2775 . -8) (undo-tree-id2776 . -8) (undo-tree-id2777 . -8) (undo-tree-id2778 . -8) (undo-tree-id2779 . -8) (undo-tree-id2780 . -8) (undo-tree-id2781 . -8) (undo-tree-id2782 . -8) (undo-tree-id2783 . -8) (undo-tree-id2784 . -8) (undo-tree-id2785 . -8) (undo-tree-id2786 . -8) (undo-tree-id2787 . -8) (undo-tree-id2788 . -8) (undo-tree-id2789 . -8) (undo-tree-id2790 . -8) (undo-tree-id2791 . -8) (undo-tree-id2792 . -8) (undo-tree-id2793 . -8) (undo-tree-id2794 . -8) (undo-tree-id2795 . -8) (undo-tree-id2796 . -8) (undo-tree-id2797 . -8) (undo-tree-id2798 . -8) (undo-tree-id2799 . -8) (undo-tree-id2800 . -8) (undo-tree-id2801 . -8) (undo-tree-id2802 . -8) (undo-tree-id2803 . -8) (undo-tree-id2804 . -8) (undo-tree-id2805 . -8) (undo-tree-id2806 . -8) (undo-tree-id2807 . -8) (undo-tree-id2808 . -8) (undo-tree-id2809 . -8) (undo-tree-id2810 . -8) (undo-tree-id2811 . -8) (undo-tree-id2812 . -8) (undo-tree-id2813 . -8) (undo-tree-id2814 . -8) (undo-tree-id2815 . -8) (undo-tree-id2816 . -8) (undo-tree-id2817 . -8) (undo-tree-id2818 . -8) 1565) nil (26044 58435 514699 660000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 565 565 nil nil nil t #s(yas--exit 568 nil))) #s(yas--exit 568 nil) 1 nil #s(yas--field 1 565 565 nil nil nil t #s(yas--exit 568 nil)) nil nil)) (560 . 568) (#("Some(${1:()})$0" 0 15 (fontified nil)) . 560) (560 . 575) (#("S" 0 1 (fontified nil)) . 560) (560 . 561) (#("Some(…)" 0 7 (fontified nil)) . -560) (560 . 567) (#("S" 0 1 (face font-lock-type-face fontified t)) . -560) (undo-tree-id494 . -1) (undo-tree-id495 . -1) 561) ((560 . 561) (#("Some(…)" 0 7 (fontified nil)) . 560) (560 . 567) (#("S" 0 1 (fontified nil)) . 560) (560 . 561) (#("Some(${1:()})$0" 0 15 (fontified nil)) . 560) (560 . 575) (#("Some(())" 0 4 (face font-lock-type-face fontified t) 4 5 (face (rainbow-delimiters-depth-3-face) fontified t) 5 6 (face (rainbow-delimiters-depth-4-face) fontified t) 6 7 (face (rainbow-delimiters-depth-4-face) fontified t) 7 8 (face (rainbow-delimiters-depth-3-face) fontified t)) . 560) (undo-tree-id2317 . -5) (undo-tree-id2318 . -5) (apply yas--snippet-revive 560 568 #s(yas--snippet nil (#s(yas--field 1 565 565 nil nil nil t #s(yas--exit 568 nil))) #s(yas--exit 568 nil) 1 nil #s(yas--field 1 565 565 nil nil nil t #s(yas--exit 568 nil)) nil nil))) (26044 56629 851453 570000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1556) (undo-tree-id2690 . -1) (undo-tree-id2691 . -1) (undo-tree-id2692 . -1) (undo-tree-id2693 . -1) (undo-tree-id2694 . -1) (undo-tree-id2695 . -1) (undo-tree-id2696 . -1) (undo-tree-id2697 . -1) (undo-tree-id2698 . -1) (undo-tree-id2699 . -1) (undo-tree-id2700 . -1) (undo-tree-id2701 . -1) (undo-tree-id2702 . -1) (undo-tree-id2703 . -1) (undo-tree-id2704 . -1) (undo-tree-id2705 . -1) (undo-tree-id2706 . -1) (undo-tree-id2707 . -1) (undo-tree-id2708 . -1) (undo-tree-id2709 . -1) (undo-tree-id2710 . -1) (undo-tree-id2711 . -1) (undo-tree-id2712 . -1) (undo-tree-id2713 . -1) (undo-tree-id2714 . -1) (undo-tree-id2715 . -1) (undo-tree-id2716 . -1) (undo-tree-id2717 . -1) (undo-tree-id2718 . -1) (undo-tree-id2719 . -1) (undo-tree-id2720 . -1) (undo-tree-id2721 . -1) (undo-tree-id2722 . -1) (undo-tree-id2723 . -1) (undo-tree-id2724 . -1) (undo-tree-id2725 . -1) (undo-tree-id2726 . -1) (undo-tree-id2727 . -1) (undo-tree-id2728 . -1) (undo-tree-id2729 . -1) (undo-tree-id2730 . -1) (undo-tree-id2731 . -1) (undo-tree-id2732 . -1) (undo-tree-id2733 . -1) (undo-tree-id2734 . -1) (undo-tree-id2735 . -1) (undo-tree-id2736 . -1) (undo-tree-id2737 . -1) (undo-tree-id2738 . -1) (undo-tree-id2739 . -1) (undo-tree-id2740 . -1) (undo-tree-id2741 . -1) (undo-tree-id2742 . -1) (undo-tree-id2743 . -1) (undo-tree-id2744 . -1) (undo-tree-id2745 . -1) (undo-tree-id2746 . -1) (undo-tree-id2747 . -1) (undo-tree-id2748 . -1) (undo-tree-id2749 . -1) (undo-tree-id2750 . -1) (undo-tree-id2751 . -1) (undo-tree-id2752 . -1) (undo-tree-id2753 . -1) (undo-tree-id2754 . -1) (undo-tree-id2755 . -1) (undo-tree-id2756 . -1) (undo-tree-id2757 . -1) 1557) nil (26044 58435 514660 539000) 0 nil])
([nil nil ((566 . 567) (#("()" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 566) (565 . 566)) ((#("\"" 0 1 (face font-lock-string-face fontified nil)) . 565) (undo-tree-id2313 . -1) (undo-tree-id2314 . -1) (undo-tree-id2315 . -1) (566 . 568) (#("\"" 0 1 (face font-lock-string-face fontified t)) . 566) (undo-tree-id2316 . -1)) (26044 56629 803767 110000) 0 nil])
([nil nil ((1556 . 1557)) nil (26044 58435 514617 759000) 0 nil])
([nil nil ((566 . 567)) ((#("S" 0 1 (face font-lock-string-face fontified t)) . 566) (undo-tree-id2311 . -1) (undo-tree-id2312 . -1)) (26044 56629 765330 62000) 0 nil])
([nil nil ((#("data." 0 5 (fontified t)) . -1552) (undo-tree-id2617 . -4) (undo-tree-id2618 . -5) (undo-tree-id2619 . -4) (undo-tree-id2620 . -4) (undo-tree-id2621 . -4) (undo-tree-id2622 . -4) (undo-tree-id2623 . -4) (undo-tree-id2624 . -4) (undo-tree-id2625 . -4) (undo-tree-id2626 . -4) (undo-tree-id2627 . -4) (undo-tree-id2628 . -4) (undo-tree-id2629 . -4) (undo-tree-id2630 . -4) (undo-tree-id2631 . -4) (undo-tree-id2632 . -4) (undo-tree-id2633 . -4) (undo-tree-id2634 . -4) (undo-tree-id2635 . -4) (undo-tree-id2636 . -4) (undo-tree-id2637 . -4) (undo-tree-id2638 . -4) (undo-tree-id2639 . -4) (undo-tree-id2640 . -4) (undo-tree-id2641 . -4) (undo-tree-id2642 . -4) (undo-tree-id2643 . -4) (undo-tree-id2644 . -4) (undo-tree-id2645 . -4) (undo-tree-id2646 . -4) (undo-tree-id2647 . -4) (undo-tree-id2648 . -4) (undo-tree-id2649 . -4) (undo-tree-id2650 . -4) (undo-tree-id2651 . -4) (undo-tree-id2652 . -4) (undo-tree-id2653 . -4) (undo-tree-id2654 . -4) (undo-tree-id2655 . -4) (undo-tree-id2656 . -4) (undo-tree-id2657 . -4) (undo-tree-id2658 . -4) (undo-tree-id2659 . -4) (undo-tree-id2660 . -4) (undo-tree-id2661 . -4) (undo-tree-id2662 . -4) (undo-tree-id2663 . -4) (undo-tree-id2664 . -4) (undo-tree-id2665 . -4) (undo-tree-id2666 . -4) (undo-tree-id2667 . -4) (undo-tree-id2668 . -4) (undo-tree-id2669 . -4) (undo-tree-id2670 . -4) (undo-tree-id2671 . -4) (undo-tree-id2672 . -4) (undo-tree-id2673 . -4) (undo-tree-id2674 . -4) (undo-tree-id2675 . -4) (undo-tree-id2676 . -4) (undo-tree-id2677 . -4) (undo-tree-id2678 . -4) (undo-tree-id2679 . -4) (undo-tree-id2680 . -4) (undo-tree-id2681 . -4) (undo-tree-id2682 . -4) (undo-tree-id2683 . -4) (undo-tree-id2684 . -4) (undo-tree-id2685 . -4) (undo-tree-id2686 . -5) (undo-tree-id2687 . -5) (undo-tree-id2688 . -5) (undo-tree-id2689 . -5) 1557) nil (26044 58435 514614 684000) 0 nil])
([nil nil ((#("S" 0 1 (face font-lock-string-face fontified t)) . -566) (undo-tree-id493 . -1) 567) ((566 . 567)) (26044 56629 731461 440000) 0 nil])
([nil nil ((#("&" 0 1 (fontified t)) . -1551) (undo-tree-id2536 . -1) (undo-tree-id2537 . -1) (undo-tree-id2538 . -1) (undo-tree-id2539 . -1) (undo-tree-id2540 . -1) (undo-tree-id2541 . -1) (undo-tree-id2542 . -1) (undo-tree-id2543 . -1) (undo-tree-id2544 . -1) (undo-tree-id2545 . -1) (undo-tree-id2546 . -1) (undo-tree-id2547 . -1) (undo-tree-id2548 . -1) (undo-tree-id2549 . -1) (undo-tree-id2550 . -1) (undo-tree-id2551 . -1) (undo-tree-id2552 . -1) (undo-tree-id2553 . -1) (undo-tree-id2554 . -1) (undo-tree-id2555 . -1) (undo-tree-id2556 . -1) (undo-tree-id2557 . -1) (undo-tree-id2558 . -1) (undo-tree-id2559 . -1) (undo-tree-id2560 . -1) (undo-tree-id2561 . -1) (undo-tree-id2562 . -1) (undo-tree-id2563 . -1) (undo-tree-id2564 . -1) (undo-tree-id2565 . -1) (undo-tree-id2566 . -1) (undo-tree-id2567 . -1) (undo-tree-id2568 . -1) (undo-tree-id2569 . -1) (undo-tree-id2570 . -1) (undo-tree-id2571 . -1) (undo-tree-id2572 . -1) (undo-tree-id2573 . -1) (undo-tree-id2574 . -1) (undo-tree-id2575 . -1) (undo-tree-id2576 . -1) (undo-tree-id2577 . -1) (undo-tree-id2578 . -1) (undo-tree-id2579 . -1) (undo-tree-id2580 . -1) (undo-tree-id2581 . -1) (undo-tree-id2582 . -1) (undo-tree-id2583 . -1) (undo-tree-id2584 . -1) (undo-tree-id2585 . -1) (undo-tree-id2586 . -1) (undo-tree-id2587 . -1) (undo-tree-id2588 . -1) (undo-tree-id2589 . -1) (undo-tree-id2590 . -1) (undo-tree-id2591 . -1) (undo-tree-id2592 . -1) (undo-tree-id2593 . -1) (undo-tree-id2594 . -1) (undo-tree-id2595 . -1) (undo-tree-id2596 . -1) (undo-tree-id2597 . -1) (undo-tree-id2598 . -1) (undo-tree-id2599 . -1) (undo-tree-id2600 . -1) (undo-tree-id2601 . -1) (undo-tree-id2602 . -1) (undo-tree-id2603 . -1) (undo-tree-id2604 . -1) (undo-tree-id2605 . -1) (undo-tree-id2606 . -1) (undo-tree-id2607 . -1) (undo-tree-id2608 . -1) (undo-tree-id2609 . -1) (undo-tree-id2610 . -1) (undo-tree-id2611 . -1) (undo-tree-id2612 . -1) (undo-tree-id2613 . -1) (undo-tree-id2614 . -1) (undo-tree-id2615 . -1) (undo-tree-id2616 . -1) 1552) nil (26044 58435 514514 531000) 0 nil])
([nil nil ((566 . 571)) ((#("queue" 0 5 (face font-lock-string-face fontified t)) . 566)) (26044 56629 683733 635000) 0 nil])
([nil nil ((1551 . 1553)) nil (26044 58435 514459 616000) 0 nil])
([nil nil ((apply yas--snippet-revive 560 573 #s(yas--snippet nil (#s(yas--field 1 565 565 nil nil nil t #s(yas--exit 568 nil))) #s(yas--exit 568 nil) 1 nil #s(yas--field 1 565 565 nil nil nil t #s(yas--exit 568 nil)) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 565 565 nil nil nil t #s(yas--exit 568 nil))) #s(yas--exit 568 nil) 1 nil #s(yas--field 1 565 565 nil nil nil t #s(yas--exit 568 nil)) nil nil))) (26044 56629 642289 111000) 0 nil])
([nil nil ((1551 . 1555) (#("da" 0 2 (fontified nil)) . 1551) (1551 . 1553) (#("data" 0 4 (fontified nil)) . -1551) (1551 . 1555) (#("da" 0 2 (fontified t)) . -1551) (undo-tree-id2529 . -2) (undo-tree-id2530 . -1) (undo-tree-id2531 . -1) (undo-tree-id2532 . -2) (undo-tree-id2533 . -2) (undo-tree-id2534 . -2) (undo-tree-id2535 . -2) 1553) nil (26044 58435 514458 108000) 0 nil])
([nil nil ((574 . 576)) ((#("?;" 0 1 (face rust-question-mark)) . 574)) (26044 56629 604077 668000) 0 nil])
([nil nil ((1555 . 1556)) nil (26044 58435 514451 462000) 0 nil])
([nil nil ((969 . 973) (#("    " 0 4 (fontified nil)) . 968) (undo-tree-id588 . -4) (undo-tree-id590 . -4) (967 . 973) (t 26044 55924 314435 988000)) ((#("
    
" 0 1 (fontified t) 1 5 (fontified nil) 5 6 (fontified nil)) . 967) (undo-tree-id2307 . -6) (undo-tree-id2308 . -6) (968 . 972) (#("    " 0 4 (fontified t)) . 969) (undo-tree-id2309 . -4) (undo-tree-id2310 . -4)) (26044 56629 562057 468000) 0 nil])
([nil nil ((#("new(" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1128) (undo-tree-id2515 . -4) (undo-tree-id2516 . -4) (undo-tree-id2517 . -4) (undo-tree-id2518 . -4) (undo-tree-id2519 . -4) (undo-tree-id2520 . -4) (undo-tree-id2521 . -4) (undo-tree-id2522 . -4) (undo-tree-id2523 . -4) (undo-tree-id2524 . -4) (undo-tree-id2525 . -4) (undo-tree-id2526 . -4) (undo-tree-id2527 . -4) (undo-tree-id2528 . -4) 1132) nil (26044 58435 514449 322000) 0 nil])
([nil nil ((937 . 939)) ((#("//" 0 2 (face font-lock-comment-delimiter-face fontified t)) . 937)) (26044 56629 521613 83000) 0 nil])
([nil nil ((#("Arc::" 0 3 (face font-lock-type-face fontified t) 3 5 (fontified t)) . -1123) (undo-tree-id2500 . -5) (undo-tree-id2501 . -5) (undo-tree-id2502 . -5) (undo-tree-id2503 . -5) (undo-tree-id2504 . -5) (undo-tree-id2505 . -5) (undo-tree-id2506 . -5) (undo-tree-id2507 . -5) (undo-tree-id2508 . -5) (undo-tree-id2509 . -5) (undo-tree-id2510 . -5) (undo-tree-id2511 . -5) (undo-tree-id2512 . -5) (undo-tree-id2513 . -5) (undo-tree-id2514 . -5) 1128) nil (26044 58435 514435 545000) 0 nil])
([nil nil ((975 . 976)) ((#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . 975) (undo-tree-id2305 . -1) (undo-tree-id2306 . -1)) (26044 56629 482828 670000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -1240) (undo-tree-id2824 . -1) (undo-tree-id2825 . -1) 1241 (t 26044 58435 527922 689000)) nil (26044 58438 853475 18000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -975) (undo-tree-id586 . -1) 976) ((975 . 976)) (26044 56629 441908 418000) 0 nil])
([nil nil ((#("downgrade()" 0 9 (fontified t) 9 10 (face (rainbow-delimiters-depth-2-face) fontified t) 10 11 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1267) (undo-tree-id2886 . -11) (undo-tree-id2887 . -9) (undo-tree-id2888 . -9) (undo-tree-id2889 . -9) (undo-tree-id2890 . -9) (undo-tree-id2891 . -9) (undo-tree-id2892 . -10) (undo-tree-id2893 . -11) (undo-tree-id2894 . -11) (undo-tree-id2895 . -11) (undo-tree-id2896 . -11) (undo-tree-id2897 . -11) (undo-tree-id2898 . -11) (undo-tree-id2899 . -11) 1278 (t 26044 58438 857922 893000)) nil (26044 58453 64767 770000) 0 nil])
([nil nil ((975 . 976)) ((#("p" 0 1 (fontified t)) . 975) (undo-tree-id2303 . -1) (undo-tree-id2304 . -1)) (26044 56629 402675 299000) 0 nil])
([nil nil ((1267 . 1270)) nil (26044 58453 64757 6000) 0 nil])
([nil nil ((975 . 983) (#("p" 0 1 (fontified nil)) . 975) (975 . 976) (#("pipeline" 0 8 (fontified nil)) . -975) (975 . 983) (#("p" 0 1 (fontified t)) . -975) (undo-tree-id582 . -1) (undo-tree-id584 . -1) 976) ((975 . 976) (#("pipeline" 0 8 (fontified nil)) . 975) (975 . 983) (#("p" 0 1 (fontified nil)) . 975) (975 . 976) (#("pipeline" 0 8 (fontified t)) . 975) (undo-tree-id2299 . -8) (undo-tree-id2300 . -8) (undo-tree-id2301 . -8) (undo-tree-id2302 . -8)) (26044 56629 361778 261000) 0 nil])
([nil nil ((1 . 29) (apply yas--snippet-revive 1267 1279 #s(yas--snippet nil nil #s(yas--exit 1279 nil) 21 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1279 nil) 21 nil nil nil nil)) (1267 . 1279) (#("borrow_mut()$0" 0 14 (fontified nil)) . 1267) (1267 . 1281) (#("bro" 0 3 (fontified nil)) . 1267) (1267 . 1270) (#("borrow_mut() (use std::borrow::BorrowMut)" 0 41 (fontified nil)) . -1267) (1267 . 1308) (#("bro" 0 3 (fontified t)) . -1267) (undo-tree-id2870 . -3) (undo-tree-id2871 . -1) (undo-tree-id2872 . -1) (undo-tree-id2873 . -1) (undo-tree-id2874 . -1) (undo-tree-id2875 . -2) (undo-tree-id2876 . -2) (undo-tree-id2877 . -2) (undo-tree-id2878 . -3) (undo-tree-id2879 . -3) (undo-tree-id2880 . -3) (undo-tree-id2881 . -3) (undo-tree-id2882 . -3) (undo-tree-id2883 . -3) (undo-tree-id2884 . -3) (undo-tree-id2885 . -3) 1270) nil (26044 58453 64755 136000) 0 nil])
([nil nil ((983 . 987)) ((#(".add" 0 1 (fontified t) 1 4 (fontified t)) . 983) (undo-tree-id2295 . -4) (undo-tree-id2296 . -4) (undo-tree-id2297 . -1) (undo-tree-id2298 . -1)) (26044 56629 322816 344000) 0 nil])
([nil nil ((1307 . 1309)) nil (26044 58453 64741 153000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 993 993 nil nil nil t #s(yas--exit 1002 nil))) #s(yas--exit 1002 nil) 2 nil #s(yas--field 1 993 993 nil nil nil t #s(yas--exit 1002 nil)) nil nil)) (984 . 1002) (#("add_many(${1:elements})$0" 0 25 (fontified nil)) . 984) (984 . 1009) (#("add" 0 3 (fontified nil)) . 984) (984 . 987) (#("add_many(…) (alias gst_bin_add_many) (as GstBinExtManual)" 0 57 (fontified nil)) . -984) (984 . 1041) (#("add" 0 3 (fontified t)) . -984) (undo-tree-id572 . -3) (undo-tree-id574 . -1) (undo-tree-id576 . -2) (undo-tree-id578 . -3) (undo-tree-id580 . -3) 987) ((984 . 987) (#("add_many(…) (alias gst_bin_add_many) (as GstBinExtManual)" 0 57 (fontified nil)) . 984) (984 . 1041) (#("add" 0 3 (fontified nil)) . 984) (984 . 987) (#("add_many(${1:elements})$0" 0 25 (fontified nil)) . 984) (984 . 1009) (#("add_many(elements)" 0 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t) 9 17 (fontified t) 17 18 (face (rainbow-delimiters-depth-2-face) fontified t)) . 984) (undo-tree-id2291 . -9) (undo-tree-id2292 . -9) (undo-tree-id2293 . -18) (undo-tree-id2294 . -18) (apply yas--snippet-revive 984 1002 #s(yas--snippet nil (#s(yas--field 1 993 993 nil nil nil t #s(yas--exit 1002 nil))) #s(yas--exit 1002 nil) 2 nil #s(yas--field 1 993 993 nil nil nil t #s(yas--exit 1002 nil)) nil nil))) (26044 56629 281515 237000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -1308) (undo-tree-id2865 . -1) (undo-tree-id2866 . -1) (undo-tree-id2867 . -1) (undo-tree-id2868 . -1) (undo-tree-id2869 . -1) 1309) nil (26044 58453 64739 877000) 0 nil])
([nil nil ((994 . 996) (#("elements" 0 8 (fontified nil)) . 994) (993 . 994)) ((#("]" 0 1 (face (rainbow-delimiters-mismatched-face) fontified nil)) . 993) (undo-tree-id2287 . -1) (undo-tree-id2288 . -1) (994 . 1002) (#("[\"" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t) 1 2 (face font-lock-string-face fontified t)) . 994) (undo-tree-id2289 . -2) (undo-tree-id2290 . -2)) (26044 56629 241601 721000) 0 nil])
([nil nil ((1308 . 1310)) nil (26044 58453 64733 855000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -995) (undo-tree-id560 . -1) (undo-tree-id562 . -1) (undo-tree-id564 . -1) (undo-tree-id566 . -1) (undo-tree-id568 . -1) (undo-tree-id570 . -1) 996) ((995 . 996)) (26044 56629 202888 617000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1307) (undo-tree-id2826 . -1) (undo-tree-id2827 . -1) (undo-tree-id2828 . -1) (undo-tree-id2829 . -1) (undo-tree-id2830 . -1) (undo-tree-id2831 . -1) (undo-tree-id2832 . -1) (undo-tree-id2833 . -1) (undo-tree-id2834 . -1) (undo-tree-id2835 . -1) (undo-tree-id2836 . -1) (undo-tree-id2837 . -1) (undo-tree-id2838 . -1) (undo-tree-id2839 . -1) (undo-tree-id2840 . -1) (undo-tree-id2841 . -1) (undo-tree-id2842 . -1) (undo-tree-id2843 . -1) (undo-tree-id2844 . -1) (undo-tree-id2845 . -1) (undo-tree-id2846 . -1) (undo-tree-id2847 . -1) (undo-tree-id2848 . -1) (#("d" 0 1 (fontified t)) . -1308) (undo-tree-id2849 . -1) (undo-tree-id2850 . -1) (undo-tree-id2851 . -1) (undo-tree-id2852 . -1) (undo-tree-id2853 . -1) (undo-tree-id2854 . -1) (undo-tree-id2855 . -1) (undo-tree-id2856 . -1) (undo-tree-id2857 . -1) (undo-tree-id2858 . -1) (undo-tree-id2859 . -1) (#("o" 0 1 (face font-lock-keyword-face fontified t)) . -1309) (undo-tree-id2860 . -1) (undo-tree-id2861 . -1) (undo-tree-id2862 . -1) (undo-tree-id2863 . -1) (undo-tree-id2864 . -1) 1310) nil (26044 58453 64728 216000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -993) (undo-tree-id535 . -1) (undo-tree-id537 . -1) (undo-tree-id539 . -1) (undo-tree-id541 . -1) (undo-tree-id543 . -1) (undo-tree-id545 . -1) (undo-tree-id547 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -994) (undo-tree-id548 . -1) (undo-tree-id550 . -1) (undo-tree-id552 . -1) (undo-tree-id554 . -1) (undo-tree-id556 . -1) (undo-tree-id558 . -1) 995) ((993 . 995)) (26044 56629 161922 434000) 0 nil])
([nil nil ((1575 . 1576) (t 26044 58453 107923 767000)) nil (26044 58459 922876 421000) 0 nil])
([nil nil ((993 . 995)) ((#("[]" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 2 (face (rainbow-delimiters-depth-3-face) fontified t)) . 993) (undo-tree-id2286 . -2)) (26044 56629 121614 899000) 0 nil])
([nil nil ((1575 . 1583) (#("p" 0 1 (fontified nil)) . 1575) (1575 . 1576) (#("pipeline" 0 8 (fontified nil)) . -1575) (1575 . 1583) (#("p" 0 1 (fontified t)) . -1575) (undo-tree-id2900 . -1) (undo-tree-id2901 . -1) (undo-tree-id2902 . -1) (undo-tree-id2903 . -1) (undo-tree-id2904 . -1) 1576) nil (26044 58459 922872 8000) 0 nil])
([nil nil ((apply yas--snippet-revive 984 996 #s(yas--snippet nil (#s(yas--field 1 993 993 nil nil nil t #s(yas--exit 1002 nil))) #s(yas--exit 1002 nil) 2 nil #s(yas--field 1 993 993 nil nil nil t #s(yas--exit 1002 nil)) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 993 993 nil nil nil t #s(yas--exit 1002 nil))) #s(yas--exit 1002 nil) 2 nil #s(yas--field 1 993 993 nil nil nil t #s(yas--exit 1002 nil)) nil nil))) (26044 56629 84937 330000) 0 nil])
([nil nil ((1570 . 1571) (t 26044 58459 941257 520000)) nil (26044 58465 754574 311000) 0 nil])
([nil nil ((996 . 997)) ((#(";" 0 1 (fontified t)) . 996) (undo-tree-id2284 . -1) (undo-tree-id2285 . -1)) (26044 56629 41372 483000) 0 nil])
([nil nil ((#("mut()" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-2-face) fontified t) 4 5 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1302) (undo-tree-id2932 . -5) (undo-tree-id2933 . -3) (undo-tree-id2934 . -3) (undo-tree-id2935 . -3) (undo-tree-id2936 . -3) (undo-tree-id2937 . -3) (undo-tree-id2938 . -4) (undo-tree-id2939 . -5) 1307 (t 26044 58465 767924 545000)) nil (26044 58492 912060 85000) 0 nil])
([nil nil ((994 . 996)) ((#("&q" 0 1 (face rust-ampersand-face fontified t) 1 2 (fontified t)) . 994) (undo-tree-id2282 . -2) (undo-tree-id2283 . -2)) (26044 56629 1031 714000) 0 nil])
([nil nil ((#("borrow_" 0 7 (fontified t)) . -1295) (undo-tree-id2922 . -7) (undo-tree-id2923 . -6) (undo-tree-id2924 . -7) (undo-tree-id2925 . -7) (undo-tree-id2926 . -7) (undo-tree-id2927 . -7) (undo-tree-id2928 . -7) (undo-tree-id2929 . -7) (undo-tree-id2930 . -7) (undo-tree-id2931 . -7) 1302) nil (26044 58492 911799 202000) 0 nil])
([nil nil ((995 . 1000) (#("q" 0 1 (fontified nil)) . 995) (995 . 996) (#("queue" 0 5 (fontified nil)) . -995) (995 . 1000) (#("q" 0 1 (fontified t)) . -995) (undo-tree-id530 . -1) (undo-tree-id532 . -1) (undo-tree-id534 . -1) 996) ((995 . 996) (#("queue" 0 5 (fontified nil)) . 995) (995 . 1000) (#("q" 0 1 (fontified nil)) . 995) (995 . 996) (#("queue" 0 5 (fontified t)) . 995) (undo-tree-id2280 . -5) (undo-tree-id2281 . -5)) (26044 56628 970584 625000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1294) (undo-tree-id2905 . -1) (undo-tree-id2906 . -1) (undo-tree-id2907 . -1) (undo-tree-id2908 . -1) (undo-tree-id2909 . -1) (undo-tree-id2910 . -1) (undo-tree-id2911 . -1) (undo-tree-id2912 . -1) (undo-tree-id2913 . -1) (undo-tree-id2914 . -1) (undo-tree-id2915 . -1) (undo-tree-id2916 . -1) (undo-tree-id2917 . -1) (undo-tree-id2918 . -1) (undo-tree-id2919 . -1) (undo-tree-id2920 . -1) (undo-tree-id2921 . -1) 1295) nil (26044 58492 911789 63000) 0 nil])
([nil nil ((1000 . 1001)) ((#("," 0 1 (fontified t)) . 1000) (undo-tree-id2278 . -1) (undo-tree-id2279 . -1)) (26044 56628 307868 921000) 0 nil])
([nil nil ((1139 . 1143)) nil (26044 58492 911765 585000) 0 nil])
([nil nil ((1001 . 1004)) ((#(" &a" 0 1 (fontified t) 1 2 (face rust-ampersand-face fontified t) 2 3 (fontified t)) . 1001) (undo-tree-id2276 . -3) (undo-tree-id2277 . -3)) (26044 56627 828722 666000) 0 nil])
([nil nil ((1289 . 1292) (t 26044 58492 957926 214000)) nil (26044 58499 708650 743000) 0 nil])
([nil nil ((1003 . 1016) (#("a" 0 1 (fontified nil)) . 1003) (1003 . 1004) (#("audio_convert" 0 13 (fontified nil)) . -1003) (1003 . 1016) (#("a" 0 1 (fontified t)) . -1003) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id526 . -1) (undo-tree-id528 . -1) 1004) ((1003 . 1004) (#("audio_convert" 0 13 (fontified nil)) . 1003) (1003 . 1016) (#("a" 0 1 (fontified nil)) . 1003) (1003 . 1004) (#("audio_convert" 0 13 (fontified t)) . 1003) (undo-tree-id2274 . -13) (undo-tree-id2275 . -13)) (26044 56627 788015 331000) 0 nil])
([nil nil ((1292 . 1294)) nil (26044 58499 708649 654000) 0 nil])
([nil nil ((1016 . 1017)) ((#("." 0 1 (fontified t)) . 1016) (undo-tree-id2272 . -1) (undo-tree-id2273 . -1)) (26044 56627 748565 711000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -1291) (undo-tree-id2940 . -1) (undo-tree-id2941 . -1) (undo-tree-id2942 . -1) (undo-tree-id2943 . -1) (undo-tree-id2944 . -1) (undo-tree-id2945 . -1) (undo-tree-id2946 . -1) (undo-tree-id2947 . -1) (undo-tree-id2948 . -1) (undo-tree-id2949 . -1) (undo-tree-id2950 . -1) (undo-tree-id2951 . -1) (undo-tree-id2952 . -1) (undo-tree-id2953 . -1) (undo-tree-id2954 . -1) (#("t" 0 1 (fontified t)) . -1292) (undo-tree-id2955 . -1) (undo-tree-id2956 . -1) (undo-tree-id2957 . -1) (undo-tree-id2958 . -1) (undo-tree-id2959 . -1) (undo-tree-id2960 . -1) (undo-tree-id2961 . -1) (undo-tree-id2962 . -1) (undo-tree-id2963 . -1) (undo-tree-id2964 . -1) (undo-tree-id2965 . -1) (undo-tree-id2966 . -1) (#(" " 0 1 (fontified t)) . -1293) (undo-tree-id2967 . -1) (undo-tree-id2968 . -1) (undo-tree-id2969 . -1) (undo-tree-id2970 . -1) (undo-tree-id2971 . -1) (undo-tree-id2972 . -1) (undo-tree-id2973 . -1) (undo-tree-id2974 . -1) (undo-tree-id2975 . -1) 1294) nil (26044 58499 708646 163000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1016) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id519 . -1) (undo-tree-id521 . -1) 1017) ((1016 . 1017)) (26044 56627 708116 206000) 0 nil])
([nil nil ((1291 . 1294)) nil (26044 58499 708608 904000) 0 nil])
([nil nil ((1016 . 1020)) ((#(", &a" 0 2 (fontified t) 2 3 (face rust-ampersand-face fontified t) 3 4 (fontified t)) . 1016) (undo-tree-id2270 . -4) (undo-tree-id2271 . -4)) (26044 56627 668769 601000) 0 nil])
([nil nil ((#("mut " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -1139) (undo-tree-id2995 . -4) (undo-tree-id2996 . -4) (undo-tree-id2997 . -4) (undo-tree-id2998 . -4) 1143 (t 26044 58499 721259 963000)) nil (26044 58629 40658 366000) 0 nil])
([nil nil ((1019 . 1033) (#("a" 0 1 (fontified nil)) . 1019) (1019 . 1020) (#("audio_resample" 0 14 (fontified nil)) . -1019) (1019 . 1033) (#("a" 0 1 (fontified t)) . -1019) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id512 . -1) (undo-tree-id514 . -1) 1020) ((1019 . 1020) (#("audio_resample" 0 14 (fontified nil)) . 1019) (1019 . 1033) (#("a" 0 1 (fontified nil)) . 1019) (1019 . 1020) (#("audio_resample" 0 14 (fontified t)) . 1019) (undo-tree-id2268 . -14) (undo-tree-id2269 . -14)) (26044 56627 627649 218000) 0 nil])
([nil nil ((1151 . 1153)) nil (26044 58629 40654 752000) 0 nil])
([nil nil ((1033 . 1037)) ((#(", &a" 0 2 (fontified t) 2 3 (face rust-ampersand-face fontified t) 3 4 (fontified t)) . 1033) (undo-tree-id2266 . -4) (undo-tree-id2267 . -4)) (26044 56627 588624 113000) 0 nil])
([nil nil ((1151 . 1156)) nil (26044 58629 40654 213000) 0 nil])
([nil nil ((1036 . 1046) (#("a" 0 1 (fontified nil)) . 1036) (1036 . 1037) (#("audio_sink" 0 10 (fontified nil)) . -1036) (1036 . 1046) (#("a" 0 1 (fontified t)) . -1036) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id505 . -1) (undo-tree-id507 . -1) 1037) ((1036 . 1037) (#("audio_sink" 0 10 (fontified nil)) . 1036) (1036 . 1046) (#("a" 0 1 (fontified nil)) . 1036) (1036 . 1037) (#("audio_sink" 0 10 (fontified t)) . 1036)) (26044 56627 547916 253000) 0 nil])
([nil nil ((29 . 53) (1151 . 1151) (1151 . 1158) (#("RefCe" 0 5 (fontified nil)) . 1151) (1151 . 1156) (#("RefCell (use std::cell::RefCell)" 0 32 (fontified nil)) . -1151) (1151 . 1183) (#("RefCe" 0 5 (face font-lock-type-face fontified t)) . -1151) (undo-tree-id2994 . -5) 1156) nil (26044 58629 40653 130000) 0 nil])
([nil nil ((1049 . 1054)) ((#("
    " 0 1 (fontified t) 1 5 (fontified t)) . 1049) (undo-tree-id2262 . -5) (undo-tree-id2263 . -5) (undo-tree-id2264 . -1) (undo-tree-id2265 . -5)) (26044 56627 507771 613000) 0 nil])
([nil nil ((1182 . 1185)) nil (26044 58629 40650 867000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1127 . 1128) (nil fontified nil 1127 . 1128) (nil fontified nil 1126 . 1127) (nil fontified nil 1125 . 1126) (nil fontified nil 1115 . 1125) (nil fontified nil 1114 . 1115) (nil fontified nil 1098 . 1114) (nil fontified nil 1097 . 1098) (nil fontified nil 1082 . 1097) (nil fontified nil 1081 . 1082) (nil fontified nil 1074 . 1081) (nil fontified nil 1073 . 1074) (nil fontified nil 1072 . 1073) (nil fontified nil 1071 . 1072) (nil fontified nil 1063 . 1071) (nil fontified nil 1054 . 1063) (1054 . 1128)) ((#("pipeline.add_many([&queue, &audio_convert, &audio_resample, &audio_sink]);" 0 9 (fontified nil) 9 13 (fontified nil) 13 17 (fontified nil) 17 18 (face (rainbow-delimiters-depth-2-face) fontified nil) 18 19 (face (rainbow-delimiters-depth-3-face) fontified nil) 19 20 (face rust-ampersand-face fontified nil) 20 27 (fontified nil) 27 28 (face rust-ampersand-face fontified nil) 28 43 (fontified nil) 43 44 (face rust-ampersand-face fontified nil) 44 60 (fontified nil) 60 61 (face rust-ampersand-face fontified nil) 61 71 (fontified nil) 71 72 (face (rainbow-delimiters-depth-3-face) fontified nil) 72 73 (face (rainbow-delimiters-depth-2-face) fontified nil) 73 74 (fontified nil rear-nonsticky nil)) . 1054) (undo-tree-id2261 . -73) (nil rear-nonsticky t 1127 . 1128)) (26044 56627 468190 444000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1188 1193 nil nil nil nil #s(yas--exit 1194 nil))) #s(yas--exit 1194 nil) 22 nil #s(yas--field 1 1188 1193 nil nil nil nil #s(yas--exit 1194 nil)) nil nil)) (1184 . 1194) (#("new(${1:value})$0" 0 17 (fontified nil)) . 1184) (1184 . 1201) (#("n" 0 1 (fontified nil)) . 1184) (1184 . 1185) (#("new(…)" 0 6 (fontified nil)) . -1184) (1184 . 1190) (#("n" 0 1 (fontified t)) . -1184) (undo-tree-id2993 . -1) 1185) nil (26044 58629 40649 627000) 0 nil])
([nil nil ((994 . 995)) ((#(" " 0 1 (fontified t)) . 994)) (26044 56627 426881 443000) 0 nil])
([nil nil ((apply yas--snippet-revive 1184 1194 #s(yas--snippet nil (#s(yas--field 1 1188 1193 nil nil nil nil #s(yas--exit 1194 nil))) #s(yas--exit 1194 nil) 22 nil #s(yas--field 1 1188 1193 nil nil nil nil #s(yas--exit 1194 nil)) nil nil))) nil (26044 58629 40647 233000) 0 nil])
([nil nil ((994 . 996)) ((#("&s" 0 1 (face rust-ampersand-face fontified t) 1 2 (fontified t)) . 994) (undo-tree-id2259 . -2) (undo-tree-id2260 . -2)) (26044 56627 388850 471000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t)) . -1188) (undo-tree-id2982 . -1) (undo-tree-id2983 . -1) (#("a" 0 1 (fontified t)) . -1189) (undo-tree-id2984 . -1) (undo-tree-id2985 . -1) (#("l" 0 1 (fontified t)) . -1190) (undo-tree-id2986 . -1) (undo-tree-id2987 . -1) (#("u" 0 1 (fontified t)) . -1191) (undo-tree-id2988 . -1) (undo-tree-id2989 . -1) (#("e" 0 1 (fontified t)) . -1192) (undo-tree-id2990 . -1) (undo-tree-id2991 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1193) (undo-tree-id2992 . -1) 1194) nil (26044 58629 40645 482000) 0 nil])
([nil nil ((995 . 1001) (#("s" 0 1 (fontified nil)) . 995) (995 . 996) (#("source" 0 6 (fontified nil)) . -995) (995 . 1001) (#("s" 0 1 (fontified t)) . -995) (undo-tree-id498 . -1) (undo-tree-id500 . -1) 996) ((995 . 996) (#("source" 0 6 (fontified nil)) . 995) (995 . 1001) (#("s" 0 1 (fontified nil)) . 995) (995 . 996) (#("source" 0 6 (fontified t)) . 995) (undo-tree-id2257 . -6) (undo-tree-id2258 . -6)) (26044 56627 347065 578000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1189) (undo-tree-id2981 . -1) 1190) nil (26044 58629 40635 533000) 0 nil])
([nil nil ((1001 . 1002)) ((#("," 0 1 (fontified t)) . 1001)) (26044 56627 306538 821000) 0 nil])
([nil nil ((1306 . 1307)) nil (26044 58629 40633 722000) 0 nil])
([nil nil ((#("many" 0 4 (fontified t)) . -1076) (undo-tree-id964 . -4) (undo-tree-id966 . -4) (undo-tree-id968 . -4) (undo-tree-id970 . -4) (undo-tree-id972 . -4) (undo-tree-id974 . -4) 1080 (t 26044 55993 804440 213000)) ((1076 . 1080)) (26044 56627 265895 969000) 0 nil])
([nil nil ((#("}" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -1306) (undo-tree-id2976 . -1) (undo-tree-id2977 . -1) (undo-tree-id2978 . -1) (undo-tree-id2979 . -1) (undo-tree-id2980 . -1) 1307) nil (26044 58629 40631 567000) 0 nil])
([nil nil ((#("add_" 0 4 (fontified t)) . -1072) (undo-tree-id945 . -4) (undo-tree-id947 . -4) (undo-tree-id949 . -4) (undo-tree-id951 . -4) (undo-tree-id953 . -4) (undo-tree-id955 . -4) (undo-tree-id957 . -4) (undo-tree-id959 . -4) (undo-tree-id961 . -4) (undo-tree-id963 . -4) 1076) ((1072 . 1076)) (26044 56627 225560 820000) 0 nil])
([nil nil ((1306 . 1307)) nil (26044 58629 40617 83000) 0 nil])
([nil nil ((1072 . 1076)) ((#("link" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . 1072) (undo-tree-id2255 . -4) (undo-tree-id2256 . -4)) (26044 56627 185798 756000) 0 nil])
([nil nil ((#("state;" 0 5 (fontified t) 5 6 (fontified t)) . -1333) (undo-tree-id3322 . -6) (undo-tree-id3323 . -6) (undo-tree-id3324 . -6) (undo-tree-id3325 . -6) (undo-tree-id3326 . -6) (undo-tree-id3327 . -6) 1339 (t 26044 58629 54601 226000)) nil (26044 58675 439965 135000) 0 nil])
([nil nil ((1076 . 1081)) ((#("_many" 0 1 (fontified t) 1 5 (fontified t)) . 1076) (undo-tree-id2253 . -5) (undo-tree-id2254 . -5)) (26044 56627 144806 401000) 0 nil])
([nil nil ((#("gst_" 0 4 (fontified t)) . -1329) (undo-tree-id3315 . -4) (undo-tree-id3316 . -4) (undo-tree-id3317 . -4) (undo-tree-id3318 . -4) (undo-tree-id3319 . -4) (undo-tree-id3320 . -4) (undo-tree-id3321 . -4) 1333) nil (26044 58675 439959 972000) 0 nil])
([nil nil ((#("many" 0 4 (fontified t)) . -1077) (undo-tree-id920 . -4) (undo-tree-id922 . -1) (undo-tree-id924 . -1) (undo-tree-id926 . -1) (undo-tree-id928 . -1) (undo-tree-id930 . -2) (undo-tree-id932 . -3) (undo-tree-id934 . -3) (undo-tree-id936 . -3) (undo-tree-id938 . -4) (undo-tree-id940 . -4) (undo-tree-id942 . -4) (undo-tree-id944 . -4) 1081) ((1077 . 1081)) (26044 56627 105368 397000) 0 nil])
([nil nil ((#("mut " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -1325) (undo-tree-id3307 . -4) (undo-tree-id3308 . -4) (undo-tree-id3309 . -4) (undo-tree-id3310 . -4) (undo-tree-id3311 . -4) (undo-tree-id3312 . -4) (undo-tree-id3313 . -4) (undo-tree-id3314 . -4) 1329) nil (26044 58675 439954 534000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -1072) (undo-tree-id718 . -1) (undo-tree-id720 . -1) (undo-tree-id722 . -1) (undo-tree-id724 . -1) (undo-tree-id726 . -1) (undo-tree-id728 . -1) (undo-tree-id730 . -1) (undo-tree-id732 . -1) (undo-tree-id734 . -1) (undo-tree-id736 . -1) (undo-tree-id738 . -1) (undo-tree-id740 . -1) (undo-tree-id742 . -1) (undo-tree-id744 . -1) (undo-tree-id746 . -1) (undo-tree-id748 . -1) (undo-tree-id750 . -1) (undo-tree-id752 . -1) (undo-tree-id754 . -1) (undo-tree-id756 . -1) (undo-tree-id758 . -1) (undo-tree-id760 . -1) (undo-tree-id762 . -1) (undo-tree-id764 . -1) (#("i" 0 1 (fontified t)) . -1073) (undo-tree-id766 . -1) (undo-tree-id768 . -1) (undo-tree-id770 . -1) (undo-tree-id772 . -1) (undo-tree-id774 . -1) (undo-tree-id776 . -1) (undo-tree-id778 . -1) (undo-tree-id780 . -1) (undo-tree-id782 . -1) (undo-tree-id784 . -1) (undo-tree-id786 . -1) (undo-tree-id788 . -1) (undo-tree-id790 . -1) (undo-tree-id792 . -1) (undo-tree-id794 . -1) (undo-tree-id796 . -1) (undo-tree-id798 . -1) (undo-tree-id800 . -1) (undo-tree-id802 . -1) (undo-tree-id804 . -1) (undo-tree-id806 . -1) (undo-tree-id808 . -1) (undo-tree-id810 . -1) (#("n" 0 1 (fontified t)) . -1074) (undo-tree-id811 . -1) (undo-tree-id813 . -1) (undo-tree-id815 . -1) (undo-tree-id817 . -1) (undo-tree-id819 . -1) (undo-tree-id821 . -1) (undo-tree-id823 . -1) (undo-tree-id825 . -1) (undo-tree-id827 . -1) (undo-tree-id829 . -1) (undo-tree-id831 . -1) (undo-tree-id833 . -1) (undo-tree-id835 . -1) (undo-tree-id837 . -1) (undo-tree-id839 . -1) (undo-tree-id841 . -1) (undo-tree-id843 . -1) (undo-tree-id845 . -1) (undo-tree-id847 . -1) (undo-tree-id849 . -1) (undo-tree-id851 . -1) (#("k" 0 1 (fontified t)) . -1075) (undo-tree-id852 . -1) (undo-tree-id854 . -1) (undo-tree-id856 . -1) (undo-tree-id858 . -1) (undo-tree-id860 . -1) (undo-tree-id862 . -1) (undo-tree-id864 . -1) (undo-tree-id866 . -1) (undo-tree-id868 . -1) (undo-tree-id870 . -1) (undo-tree-id872 . -1) (undo-tree-id874 . -1) (undo-tree-id876 . -1) (undo-tree-id878 . -1) (undo-tree-id880 . -1) (undo-tree-id882 . -1) (undo-tree-id884 . -1) (undo-tree-id886 . -1) (undo-tree-id888 . -1) (#("_" 0 1 (fontified t)) . -1076) (undo-tree-id890 . -1) (undo-tree-id892 . -1) (undo-tree-id894 . -1) (undo-tree-id896 . -1) (undo-tree-id898 . -1) (undo-tree-id900 . -1) (undo-tree-id902 . -1) (undo-tree-id904 . -1) (undo-tree-id906 . -1) (undo-tree-id908 . -1) (undo-tree-id910 . -1) (undo-tree-id912 . -1) (undo-tree-id914 . -1) (undo-tree-id916 . -1) (undo-tree-id918 . -1) 1077) ((1072 . 1077)) (26044 56627 64269 967000) 0 nil])
([nil nil ((#("&" 0 1 (fontified t)) . -1324) (undo-tree-id3296 . -1) (undo-tree-id3297 . -1) (undo-tree-id3298 . -1) (undo-tree-id3299 . -1) (undo-tree-id3300 . -1) (undo-tree-id3301 . -1) (undo-tree-id3302 . -1) (undo-tree-id3303 . -1) (undo-tree-id3304 . -1) (undo-tree-id3305 . -1) (undo-tree-id3306 . -1) 1325) nil (26044 58675 439948 190000) 0 nil])
([nil nil ((1072 . 1073)) ((#(" " 0 1 (fontified t)) . 1072) (undo-tree-id2251 . -1) (undo-tree-id2252 . -1)) (26044 56627 24690 867000) 0 nil])
([nil nil ((1324 . 1325)) nil (26044 58675 439940 356000) 0 nil])
([nil nil ((#("pipeline. " 0 10 (fontified t)) . -1063) (undo-tree-id616 . -10) (undo-tree-id617 . -10) (undo-tree-id619 . -9) (undo-tree-id621 . -9) (undo-tree-id623 . -9) (undo-tree-id625 . -9) (undo-tree-id627 . -9) (undo-tree-id629 . -9) (undo-tree-id631 . -9) (undo-tree-id633 . -9) (undo-tree-id635 . -9) (undo-tree-id637 . -9) (undo-tree-id639 . -9) (undo-tree-id641 . -9) (undo-tree-id643 . -9) (undo-tree-id645 . -9) (undo-tree-id647 . -9) (undo-tree-id649 . -9) (undo-tree-id651 . -9) (undo-tree-id653 . -9) (undo-tree-id655 . -9) (undo-tree-id657 . -9) (undo-tree-id659 . -9) (undo-tree-id661 . -9) (undo-tree-id663 . -9) (undo-tree-id665 . -9) (undo-tree-id667 . -9) (undo-tree-id669 . -9) (undo-tree-id671 . -9) (undo-tree-id673 . -9) (undo-tree-id675 . -9) (undo-tree-id677 . -9) (undo-tree-id679 . -9) (undo-tree-id681 . -9) (undo-tree-id683 . -9) (undo-tree-id685 . -9) (undo-tree-id687 . -10) (undo-tree-id689 . -9) (undo-tree-id691 . -9) (undo-tree-id693 . -9) (undo-tree-id695 . -9) (undo-tree-id697 . -9) (undo-tree-id699 . -9) (undo-tree-id701 . -9) (undo-tree-id703 . -9) (undo-tree-id705 . -9) (undo-tree-id707 . -10) (undo-tree-id709 . -10) (undo-tree-id711 . -10) (undo-tree-id713 . -10) (undo-tree-id715 . -10) (undo-tree-id717 . -10) 1073) ((1063 . 1073)) (26044 56626 984576 160000) 0 nil])
([nil nil ((1325 . 1326)) nil (26044 58675 439939 724000) 0 nil])
([nil nil ((1063 . 1065)) ((#("EL" 0 2 (face font-lock-type-face fontified t)) . 1063) (undo-tree-id2249 . -2) (undo-tree-id2250 . -2)) (26044 56626 944342 29000) 0 nil])
([nil nil ((1324 . 1333) (#("gs" 0 2 (fontified nil)) . 1324) (1324 . 1326) (#("gst_state" 0 9 (fontified nil)) . -1324) (1324 . 1333) (#("gs" 0 2 (fontified t)) . -1324) (undo-tree-id3292 . -2) (undo-tree-id3293 . -1) (undo-tree-id3294 . -2) (undo-tree-id3295 . -2) 1326) nil (26044 58675 439938 719000) 0 nil])
([nil nil ((1063 . 1070) (#("EL" 0 2 (fontified nil)) . 1063) (1063 . 1065) (#("Element (alias GstElement)" 0 26 (fontified nil)) . -1063) (1063 . 1089) (#("EL" 0 2 (face font-lock-type-face fontified t)) . -1063) (undo-tree-id604 . -2) (undo-tree-id605 . -2) (undo-tree-id607 . -1) (undo-tree-id609 . -2) (undo-tree-id611 . -2) (undo-tree-id613 . -2) (undo-tree-id615 . -2) 1065) ((1063 . 1065) (#("Element (alias GstElement)" 0 26 (fontified nil)) . 1063) (1063 . 1089) (#("EL" 0 2 (fontified nil)) . 1063) (1063 . 1065) (#("Element" 0 7 (face font-lock-type-face fontified t)) . 1063) (undo-tree-id2247 . -7) (undo-tree-id2248 . -7)) (26044 56626 904342 241000) 0 nil])
([nil nil ((1333 . 1336)) nil (26044 58675 439934 583000) 0 nil])
([nil nil ((1070 . 1076)) ((#("::link" 0 2 (fontified t) 2 6 (fontified t)) . 1070) (undo-tree-id2245 . -6) (undo-tree-id2246 . -6)) (26044 56626 864084 710000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -1334) (undo-tree-id3273 . -1) (undo-tree-id3274 . -1) (undo-tree-id3275 . -1) (undo-tree-id3276 . -1) (undo-tree-id3277 . -1) (undo-tree-id3278 . -1) (undo-tree-id3279 . -1) (undo-tree-id3280 . -1) (undo-tree-id3281 . -1) (undo-tree-id3282 . -1) (undo-tree-id3283 . -1) (undo-tree-id3284 . -1) (#("o" 0 1 (face font-lock-keyword-face fontified t)) . -1335) (undo-tree-id3285 . -1) (undo-tree-id3286 . -1) (undo-tree-id3287 . -1) (undo-tree-id3288 . -1) (undo-tree-id3289 . -1) (undo-tree-id3290 . -1) (undo-tree-id3291 . -1) 1336) nil (26044 58675 439933 107000) 0 nil])
([nil nil ((1072 . 1081) (#("link" 0 4 (fontified nil)) . 1072) (1072 . 1076) (#("link_many (alias gst_element_link_many)" 0 39 (fontified nil)) . -1072) (1072 . 1111) (#("link" 0 4 (fontified t)) . -1072) (undo-tree-id591 . -4) (undo-tree-id593 . -1) (undo-tree-id595 . -2) (undo-tree-id597 . -3) (undo-tree-id599 . -4) (undo-tree-id601 . -4) (undo-tree-id603 . -4) 1076) ((1072 . 1076) (#("link_many (alias gst_element_link_many)" 0 39 (fontified nil)) . 1072) (1072 . 1111) (#("link" 0 4 (fontified nil)) . 1072) (1072 . 1076) (#("link_many" 0 9 (fontified t)) . 1072)) (26044 56626 823427 61000) 0 nil])
([nil nil ((1334 . 1335)) nil (26044 58675 439920 206000) 0 nil])
([nil nil ((1057 . 1058) (t 26044 56047 314443 449000)) ((#("?" 0 1 (face rust-question-mark fontified t)) . 1057)) (26044 56626 785388 391000) 0 nil])
([nil nil ((apply yas--snippet-revive 1334 1346 #s(yas--snippet nil nil #s(yas--exit 1346 nil) 23 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1346 nil) 23 nil nil nil nil)) (1334 . 1346) (#("borrow_mut()$0" 0 14 (fontified nil)) . 1334) (1334 . 1348) (#("b" 0 1 (fontified nil)) . 1334) (1334 . 1335) (#("borrow_mut()" 0 12 (fontified nil)) . -1334) (1334 . 1346) (#("b" 0 1 (fontified t)) . -1334) (undo-tree-id3268 . -1) (undo-tree-id3269 . -1) (undo-tree-id3270 . -1) (undo-tree-id3271 . -1) (undo-tree-id3272 . -1) 1335) nil (26044 58675 439918 779000) 0 nil])
([nil nil ((1138 . 1139)) ((#(">" 0 1 (syntax-table (1) fontified t)) . 1138) (undo-tree-id2243 . -1) (undo-tree-id2244 . -1)) (26044 56626 743738 537000) 0 nil])
([nil nil ((1346 . 1349)) nil (26044 58675 439912 712000) 0 nil])
([nil nil ((#(">" 0 1 (syntax-table (1) fontified t)) . -1138) (undo-tree-id975 . -1) (undo-tree-id977 . -1) (undo-tree-id979 . -1) (undo-tree-id981 . -1) (undo-tree-id983 . -1) 1139) ((1138 . 1139)) (26044 56626 704706 696000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -1348) (undo-tree-id3262 . -1) (undo-tree-id3263 . -1) (undo-tree-id3264 . -1) (undo-tree-id3265 . -1) (undo-tree-id3266 . -1) (undo-tree-id3267 . -1) 1349) nil (26044 58675 439911 762000) 0 nil])
([nil nil ((1138 . 1139)) ((#("?" 0 1 (face rust-question-mark fontified t)) . 1138)) (26044 56626 663219 363000) 0 nil])
([nil nil ((1348 . 1352)) nil (26044 58675 439906 928000) 0 nil])
([nil nil ((217 . 222) (t 26044 56053 807777 173000)) ((#("
    " 0 1 (fontified t) 1 5 (fontified t)) . 217) (undo-tree-id2239 . -5) (undo-tree-id2240 . -5) (undo-tree-id2241 . -1) (undo-tree-id2242 . -5)) (26044 56626 622801 530000) 0 nil])
([nil nil ((#("downg" 0 5 (fontified t)) . -1347) (undo-tree-id3232 . -5) (undo-tree-id3233 . -1) (undo-tree-id3234 . -1) (undo-tree-id3235 . -1) (undo-tree-id3236 . -1) (undo-tree-id3237 . -1) (undo-tree-id3238 . -1) (undo-tree-id3239 . -1) (undo-tree-id3240 . -1) (undo-tree-id3241 . -1) (undo-tree-id3242 . -1) (undo-tree-id3243 . -1) (undo-tree-id3244 . -1) (undo-tree-id3245 . -1) (undo-tree-id3246 . -2) (undo-tree-id3247 . -2) (undo-tree-id3248 . -3) (undo-tree-id3249 . -3) (undo-tree-id3250 . -3) (undo-tree-id3251 . -3) (undo-tree-id3252 . -4) (undo-tree-id3253 . -4) (undo-tree-id3254 . -4) (undo-tree-id3255 . -5) (undo-tree-id3256 . -5) (undo-tree-id3257 . -5) (undo-tree-id3258 . -5) (undo-tree-id3259 . -5) (undo-tree-id3260 . -5) (undo-tree-id3261 . -5) 1352) nil (26044 58675 439905 147000) 0 nil])
([nil nil ((222 . 230)) ((#("queue: E" 0 5 (face font-lock-variable-name-face fontified t) 5 7 (fontified t) 7 8 (face font-lock-type-face fontified t)) . 222) (undo-tree-id2236 . -8) (undo-tree-id2237 . -8) (undo-tree-id2238 . -7)) (26044 56626 584547 631000) 0 nil])
([nil nil ((#("mut()." 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-2-face) fontified t) 4 5 (face (rainbow-delimiters-depth-2-face) fontified t) 5 6 (fontified t)) . -1341) (undo-tree-id3197 . -6) (undo-tree-id3198 . -5) (undo-tree-id3199 . -5) (undo-tree-id3200 . -6) (undo-tree-id3201 . -6) (undo-tree-id3202 . -6) (undo-tree-id3203 . -6) (undo-tree-id3204 . -6) (undo-tree-id3205 . -6) (undo-tree-id3206 . -6) (undo-tree-id3207 . -6) (undo-tree-id3208 . -6) (undo-tree-id3209 . -6) (undo-tree-id3210 . -6) (undo-tree-id3211 . -6) (undo-tree-id3212 . -6) (undo-tree-id3213 . -6) (undo-tree-id3214 . -6) (undo-tree-id3215 . -6) (undo-tree-id3216 . -6) (undo-tree-id3217 . -6) (undo-tree-id3218 . -6) (undo-tree-id3219 . -6) (undo-tree-id3220 . -6) (undo-tree-id3221 . -6) (undo-tree-id3222 . -6) (undo-tree-id3223 . -6) (undo-tree-id3224 . -6) (undo-tree-id3225 . -6) (undo-tree-id3226 . -6) (undo-tree-id3227 . -6) (undo-tree-id3228 . -6) (undo-tree-id3229 . -6) (undo-tree-id3230 . -6) (undo-tree-id3231 . -6) 1347) nil (26044 58675 439883 595000) 0 nil])
([nil nil ((229 . 236) (#("E" 0 1 (fontified nil)) . 229) (229 . 230) (#("Element (alias GstElement)" 0 26 (fontified nil)) . -229) (229 . 255) (#("E" 0 1 (face font-lock-type-face fontified t)) . -229) (undo-tree-id985 . -1) (undo-tree-id987 . -1) (undo-tree-id989 . -1) 230) ((229 . 230) (#("Element (alias GstElement)" 0 26 (fontified nil)) . 229) (229 . 255) (#("E" 0 1 (fontified nil)) . 229) (229 . 230) (#("Element" 0 7 (face font-lock-type-face fontified t)) . 229) (undo-tree-id2233 . -7) (undo-tree-id2234 . -7) (undo-tree-id2235 . -7)) (26044 56626 542118 361000) 0 nil])
([nil nil ((#("borrow_" 0 7 (fontified t)) . -1334) (undo-tree-id3161 . -7) (undo-tree-id3162 . -7) (undo-tree-id3163 . -7) (undo-tree-id3164 . -7) (undo-tree-id3165 . -7) (undo-tree-id3166 . -7) (undo-tree-id3167 . -7) (undo-tree-id3168 . -7) (undo-tree-id3169 . -7) (undo-tree-id3170 . -7) (undo-tree-id3171 . -7) (undo-tree-id3172 . -7) (undo-tree-id3173 . -7) (undo-tree-id3174 . -7) (undo-tree-id3175 . -7) (undo-tree-id3176 . -7) (undo-tree-id3177 . -7) (undo-tree-id3178 . -7) (undo-tree-id3179 . -7) (undo-tree-id3180 . -7) (undo-tree-id3181 . -7) (undo-tree-id3182 . -7) (undo-tree-id3183 . -7) (undo-tree-id3184 . -7) (undo-tree-id3185 . -7) (undo-tree-id3186 . -7) (undo-tree-id3187 . -7) (undo-tree-id3188 . -7) (undo-tree-id3189 . -7) (undo-tree-id3190 . -7) (undo-tree-id3191 . -7) (undo-tree-id3192 . -7) (undo-tree-id3193 . -7) (undo-tree-id3194 . -7) (undo-tree-id3195 . -7) (undo-tree-id3196 . -7) 1341) nil (26044 58675 439858 398000) 0 nil])
([nil nil ((236 . 237)) ((#("," 0 1 (fontified t)) . 236)) (26044 56626 501923 883000) 0 nil])
([nil nil ((#("state." 0 6 (fontified t)) . -1328) (undo-tree-id3099 . -6) (undo-tree-id3100 . -5) (undo-tree-id3101 . -5) (undo-tree-id3102 . -6) (undo-tree-id3103 . -6) (undo-tree-id3104 . -6) (undo-tree-id3105 . -6) (undo-tree-id3106 . -6) (undo-tree-id3107 . -6) (undo-tree-id3108 . -6) (undo-tree-id3109 . -6) (undo-tree-id3110 . -6) (undo-tree-id3111 . -6) (undo-tree-id3112 . -6) (undo-tree-id3113 . -6) (undo-tree-id3114 . -6) (undo-tree-id3115 . -6) (undo-tree-id3116 . -6) (undo-tree-id3117 . -6) (undo-tree-id3118 . -6) (undo-tree-id3119 . -6) (undo-tree-id3120 . -6) (undo-tree-id3121 . -6) (undo-tree-id3122 . -6) (undo-tree-id3123 . -6) (undo-tree-id3124 . -6) (undo-tree-id3125 . -6) (undo-tree-id3126 . -6) (undo-tree-id3127 . -6) (undo-tree-id3128 . -6) (undo-tree-id3129 . -6) (undo-tree-id3130 . -6) (undo-tree-id3131 . -6) (undo-tree-id3132 . -6) (undo-tree-id3133 . -6) (undo-tree-id3134 . -6) (undo-tree-id3135 . -6) (undo-tree-id3136 . -6) (undo-tree-id3137 . -6) (undo-tree-id3138 . -6) (undo-tree-id3139 . -6) (undo-tree-id3140 . -6) (undo-tree-id3141 . -6) (undo-tree-id3142 . -6) (undo-tree-id3143 . -6) (undo-tree-id3144 . -6) (undo-tree-id3145 . -6) (undo-tree-id3146 . -6) (undo-tree-id3147 . -6) (undo-tree-id3148 . -6) (undo-tree-id3149 . -6) (undo-tree-id3150 . -6) (undo-tree-id3151 . -6) (undo-tree-id3152 . -6) (undo-tree-id3153 . -6) (undo-tree-id3154 . -6) (undo-tree-id3155 . -6) (undo-tree-id3156 . -6) (undo-tree-id3157 . -6) (undo-tree-id3158 . -6) (undo-tree-id3159 . -6) (undo-tree-id3160 . -6) 1334) nil (26044 58675 439831 602000) 0 nil])
([nil nil ((1403 . 1412) (t 26044 56062 867777 721000)) ((#("
        " 0 1 (fontified t) 1 9 (fontified t)) . 1403) (undo-tree-id2229 . -9) (undo-tree-id2230 . -9) (undo-tree-id2231 . -1) (undo-tree-id2232 . -9)) (26044 56626 461823 484000) 0 nil])
([nil nil ((#("gst_" 0 4 (fontified t)) . -1324) (undo-tree-id3036 . -4) (undo-tree-id3037 . -4) (undo-tree-id3038 . -4) (undo-tree-id3039 . -4) (undo-tree-id3040 . -4) (undo-tree-id3041 . -4) (undo-tree-id3042 . -4) (undo-tree-id3043 . -4) (undo-tree-id3044 . -4) (undo-tree-id3045 . -4) (undo-tree-id3046 . -4) (undo-tree-id3047 . -4) (undo-tree-id3048 . -4) (undo-tree-id3049 . -4) (undo-tree-id3050 . -4) (undo-tree-id3051 . -4) (undo-tree-id3052 . -4) (undo-tree-id3053 . -4) (undo-tree-id3054 . -4) (undo-tree-id3055 . -4) (undo-tree-id3056 . -4) (undo-tree-id3057 . -4) (undo-tree-id3058 . -4) (undo-tree-id3059 . -4) (undo-tree-id3060 . -4) (undo-tree-id3061 . -4) (undo-tree-id3062 . -4) (undo-tree-id3063 . -4) (undo-tree-id3064 . -4) (undo-tree-id3065 . -4) (undo-tree-id3066 . -4) (undo-tree-id3067 . -4) (undo-tree-id3068 . -4) (undo-tree-id3069 . -4) (undo-tree-id3070 . -4) (undo-tree-id3071 . -4) (undo-tree-id3072 . -4) (undo-tree-id3073 . -4) (undo-tree-id3074 . -4) (undo-tree-id3075 . -4) (undo-tree-id3076 . -4) (undo-tree-id3077 . -4) (undo-tree-id3078 . -4) (undo-tree-id3079 . -4) (undo-tree-id3080 . -4) (undo-tree-id3081 . -4) (undo-tree-id3082 . -4) (undo-tree-id3083 . -4) (undo-tree-id3084 . -4) (undo-tree-id3085 . -4) (undo-tree-id3086 . -4) (undo-tree-id3087 . -4) (undo-tree-id3088 . -4) (undo-tree-id3089 . -4) (undo-tree-id3090 . -4) (undo-tree-id3091 . -4) (undo-tree-id3092 . -4) (undo-tree-id3093 . -4) (undo-tree-id3094 . -4) (undo-tree-id3095 . -4) (undo-tree-id3096 . -4) (undo-tree-id3097 . -4) (undo-tree-id3098 . -4) 1328) nil (26044 58675 439789 696000) 0 nil])
([nil nil ((1412 . 1413)) ((#("q" 0 1 (fontified t)) . 1412) (undo-tree-id2227 . -1) (undo-tree-id2228 . -1)) (26044 56626 422715 863000) 0 nil])
([nil nil ((1175 . 1176)) nil (26044 58675 439746 75000) 0 nil])
([nil nil ((1412 . 1417) (#("q" 0 1 (fontified nil)) . 1412) (1412 . 1413) (#("queue" 0 5 (fontified nil)) . -1412) (1412 . 1417) (#("q" 0 1 (fontified t)) . -1412) (undo-tree-id991 . -1) (undo-tree-id993 . -1) 1413) ((1412 . 1413) (#("queue" 0 5 (fontified nil)) . 1412) (1412 . 1417) (#("q" 0 1 (fontified nil)) . 1412) (1412 . 1413) (#("queue" 0 5 (fontified t)) . 1412) (undo-tree-id2224 . -5) (undo-tree-id2225 . -5) (undo-tree-id2226 . -5)) (26044 56626 382479 506000) 0 nil])
([nil nil ((1175 . 1177)) nil (26044 58675 439745 489000) 0 nil])
([nil nil ((1417 . 1418)) ((#("," 0 1 (fontified t)) . 1417)) (26044 56626 342315 733000) 0 nil])
([nil nil ((#("R" 0 1 (face font-lock-type-face fontified t)) . -1176) (undo-tree-id3033 . -1) (undo-tree-id3034 . -1) (undo-tree-id3035 . -1) 1177) nil (26044 58675 439744 601000) 0 nil])
([nil nil ((apply -48 4494 5578 undo--wrap-and-run-primitive-undo 4494 5578 ((5549 . 5552) (5458 . 5461) (5400 . 5403) (5306 . 5309) (5284 . 5287) (5233 . 5236) (5194 . 5197) (5132 . 5135) (5083 . 5086) (5013 . 5016) (4923 . 4926) (4836 . 4839) (4745 . 4748) (4663 . 4666) (4605 . 4608) (4510 . 4513)))) ((apply 48 4494 5530 undo--wrap-and-run-primitive-undo 4494 5530 ((#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 4510) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 4605) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 4663) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 4745) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 4836) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 4923) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 5013) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 5083) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 5132) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 5194) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 5233) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 5284) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 5306) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 5400) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 5458) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 5549)))) (26044 56626 302185 597000) 0 nil])
([nil nil ((1176 . 1178)) nil (26044 58675 439741 435000) 0 nil])
([nil nil ((apply -48 3079 4232 undo--wrap-and-run-primitive-undo 3079 4232 ((4227 . 4230) (4175 . 4178) (4136 . 4139) (4056 . 4059) (3956 . 3959) (3857 . 3860) (3820 . 3823) (3758 . 3761) (3709 . 3712) (3636 . 3639) (3546 . 3549) (3453 . 3456) (3362 . 3365) (3280 . 3283) (3190 . 3193) (3095 . 3098)))) ((apply 48 3079 4184 undo--wrap-and-run-primitive-undo 3079 4184 ((#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3095) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3190) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3280) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3362) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3453) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3546) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3636) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3709) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3758) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3820) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3857) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3956) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 4056) (#("// " 0 1 (face font-lock-comment-delimiter-face fontified t) 1 2 (face font-lock-comment-delimiter-face fontified t) 2 3 (face font-lock-comment-delimiter-face fontified t)) . 4136) (#("// " 0 1 (face font-lock-comment-delimiter-face fontified t) 1 2 (face font-lock-comment-delimiter-face fontified t) 2 3 (face font-lock-comment-delimiter-face fontified t)) . 4175) (#("// " 0 1 (face font-lock-comment-delimiter-face fontified t) 1 2 (face font-lock-comment-delimiter-face fontified t) 2 3 (face font-lock-comment-delimiter-face fontified t)) . 4227)))) (26044 56626 262134 13000) 0 nil])
([nil nil ((1175 . 1178) (#("Arc" 0 3 (fontified nil)) . 1175) (1175 . 1178) (#("Arc" 0 3 (face font-lock-type-face fontified t)) . -1175) (undo-tree-id3022 . -3) (undo-tree-id3023 . -1) (undo-tree-id3024 . -1) (undo-tree-id3025 . -1) (undo-tree-id3026 . -1) (undo-tree-id3027 . -1) (undo-tree-id3028 . -1) (undo-tree-id3029 . -2) (undo-tree-id3030 . -2) (undo-tree-id3031 . -3) (undo-tree-id3032 . -3) 1178) nil (26044 58675 439740 46000) 0 nil])
([nil nil ((#("queue" 0 5 (fontified t)) . -4410) (undo-tree-id1006 . -5) (undo-tree-id1008 . -5) (undo-tree-id1010 . -5) (undo-tree-id1012 . -5) 4415 (t 26044 56132 874448 646000)) ((4410 . 4415)) (26044 56626 223172 799000) 0 nil])
([nil nil ((1178 . 1182)) nil (26044 58675 439730 679000) 0 nil])
([nil nil ((4410 . 4412)) ((#("da" 0 2 (fontified t)) . 4410) (undo-tree-id2222 . -2) (undo-tree-id2223 . -2)) (26044 56626 183991 183000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1181) (undo-tree-id3019 . -1) (undo-tree-id3020 . -1) (undo-tree-id3021 . -1) 1182) nil (26044 58675 439729 761000) 0 nil])
([nil nil ((4410 . 4414) (#("da" 0 2 (fontified nil)) . 4410) (4410 . 4412) (#("data" 0 4 (fontified nil)) . -4410) (4410 . 4414) (#("da" 0 2 (fontified t)) . -4410) (undo-tree-id1000 . -2) (undo-tree-id1002 . -1) (undo-tree-id1004 . -2) 4412) ((4410 . 4412) (#("data" 0 4 (fontified nil)) . 4410) (4410 . 4414) (#("da" 0 2 (fontified nil)) . 4410) (4410 . 4412) (#("data" 0 4 (fontified t)) . 4410) (undo-tree-id2220 . -4) (undo-tree-id2221 . -4)) (26044 56626 142040 770000) 0 nil])
([nil nil ((1181 . 1183)) nil (26044 58675 439726 368000) 0 nil])
([nil nil ((4414 . 4416)) ((#(".q" 0 1 (fontified t) 1 2 (fontified t)) . 4414) (undo-tree-id2218 . -2) (undo-tree-id2219 . -2)) (26044 56626 103004 308000) 0 nil])
([nil nil ((1180 . 1183) (#("new" 0 3 (fontified nil)) . 1180) (1180 . 1183) (#("new" 0 3 (fontified t)) . -1180) (undo-tree-id3008 . -3) (undo-tree-id3009 . -1) (undo-tree-id3010 . -1) (undo-tree-id3011 . -1) (undo-tree-id3012 . -1) (undo-tree-id3013 . -1) (undo-tree-id3014 . -2) (undo-tree-id3015 . -3) (undo-tree-id3016 . -3) (undo-tree-id3017 . -3) (undo-tree-id3018 . -3) 1183) nil (26044 58675 439724 210000) 0 nil])
([nil nil ((4415 . 4420) (#("q" 0 1 (fontified nil)) . 4415) (4415 . 4416) (#("queue" 0 5 (fontified nil)) . -4415) (4415 . 4420) (#("q" 0 1 (fontified t)) . -4415) (undo-tree-id995 . -1) (undo-tree-id997 . -1) (undo-tree-id999 . -1) 4416) ((4415 . 4416) (#("queue" 0 5 (fontified nil)) . 4415) (4415 . 4420) (#("q" 0 1 (fontified nil)) . 4415) (4415 . 4416) (#("queue" 0 5 (fontified t)) . 4415)) (26044 56626 61278 778000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1183) (undo-tree-id2999 . -1) (undo-tree-id3000 . -1) (undo-tree-id3001 . -1) (undo-tree-id3002 . -1) (undo-tree-id3003 . -1) (undo-tree-id3004 . -1) (undo-tree-id3005 . -1) (undo-tree-id3006 . -1) (undo-tree-id3007 . -1) 1184) nil (26044 58675 439529 311000) 0 nil])
([nil nil ((4233 . 4249) (#("                " 0 16 (face font-lock-comment-face fontified nil)) . 4232) (4232 . 4248) (4232 . 4233) (t 26044 56144 181116 4000)) ((#("
" 0 1 (fontified nil)) . 4232) (#("                " 0 16 (face font-lock-comment-face fontified nil)) . 4232) (4232 . 4248) (#("                " 0 16 (fontified t)) . 4233)) (26044 56626 20813 492000) 0 nil] [nil nil ((#("/" 0 1 (fontified t)) . -4136) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -4137) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (#(" " 0 1 (face font-lock-comment-delimiter-face fontified t)) . -4138) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) 4139 (t 26044 56144 181116 4000)) ((4136 . 4139)) (26044 56178 18602 102000) 0 nil])
([nil nil ((1183 . 1184)) nil (26044 58675 439515 539000) 0 nil])
([nil nil ((4232 . 4248)) ((#("                " 0 16 (fontified t)) . 4232) (undo-tree-id2209 . -16) (undo-tree-id2210 . -16) (undo-tree-id2211 . -16) (undo-tree-id2212 . -16) (undo-tree-id2213 . -16) (undo-tree-id2214 . -16) (undo-tree-id2215 . -16) (undo-tree-id2216 . -16) (undo-tree-id2217 . -16)) (26044 56625 980401 792000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -4172) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -4173) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) 4174) ((4172 . 4174)) (26044 56177 789918 741000) 0 nil])
([nil nil ((1316 . 1317)) nil (26044 58675 439511 503000) 0 nil])
([nil nil ((4248 . 4254)) ((#("data.q" 0 5 (fontified t) 5 6 (fontified t)) . 4248) (undo-tree-id2201 . -6) (undo-tree-id2202 . -6) (undo-tree-id2203 . -5) (undo-tree-id2204 . -5) (undo-tree-id2205 . -5) (undo-tree-id2206 . -5) (undo-tree-id2207 . -5) (undo-tree-id2208 . -5)) (26044 56625 939863 694000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -4222) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -4223) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) 4224) ((4222 . 4224)) (26044 56177 623304 639000) 0 nil])
([nil nil ((1333 . 1335) (t 26044 58675 454604 72000)) nil (26044 58696 680077 840000) 0 nil])
([nil nil ((4253 . 4258) (#("q" 0 1 (fontified nil)) . 4253) (4253 . 4254) (#("queue" 0 5 (fontified nil)) . -4253) (4253 . 4258) (#("q" 0 1 (fontified t)) . -4253) (undo-tree-id1109 . -1) (undo-tree-id1111 . -1) (undo-tree-id1113 . -1) 4254) ((4253 . 4254) (#("queue" 0 5 (fontified nil)) . 4253) (4253 . 4258) (#("q" 0 1 (fontified nil)) . 4253) (4253 . 4254) (#("queue" 0 5 (fontified t)) . 4253) (undo-tree-id2193 . -5) (undo-tree-id2194 . -5) (undo-tree-id2195 . -5) (undo-tree-id2196 . -5) (undo-tree-id2197 . -5) (undo-tree-id2198 . -5) (undo-tree-id2199 . -5) (undo-tree-id2200 . -5)) (26044 56625 900394 935000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -4222) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) 4223) ((4222 . 4223)) (26044 56177 474769 272000) 0 nil])
([nil nil ((#("A" 0 1 (face font-lock-type-face fontified t)) . -1334) (undo-tree-id3341 . -1) (undo-tree-id3342 . -1) (undo-tree-id3343 . -1) (undo-tree-id3344 . -1) 1335) nil (26044 58696 680076 622000) 0 nil])
([nil nil ((4258 . 4263)) ((#(".sync" 0 1 (fontified t) 1 5 (fontified t)) . 4258) (undo-tree-id2185 . -5) (undo-tree-id2186 . -5) (undo-tree-id2187 . -1) (undo-tree-id2188 . -1) (undo-tree-id2189 . -1) (undo-tree-id2190 . -1) (undo-tree-id2191 . -1) (undo-tree-id2192 . -1)) (26044 56625 860316 465000) 0 nil])
([nil nil ((#("for e in elements {" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 5 (face font-lock-variable-name-face fontified t) 5 6 (fontified t) 6 8 (face font-lock-keyword-face fontified t) 8 18 (fontified t) 18 19 (face (rainbow-delimiters-depth-6-face) fontified t)) . 4136) (undo-tree-id1013 . -3) (undo-tree-id1014 . -5) (undo-tree-id1015 . -8) (undo-tree-id1016 . -17) (undo-tree-id1017 . -17) (undo-tree-id1018 . -17) (undo-tree-id1019 . -17) (undo-tree-id1020 . -17) (undo-tree-id1021 . -17) (undo-tree-id1022 . -17) (undo-tree-id1023 . -19)) ((4136 . 4155)) (26044 56177 474178 68000) 0 nil])
([nil nil ((1334 . 1335)) nil (26044 58696 680072 464000) 0 nil])
([nil nil ((apply yas--snippet-revive 4259 4283 #s(yas--snippet nil nil #s(yas--exit #<marker at 3406 in main.rs> nil) 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 3406 in main.rs> nil) 3 nil nil nil nil)) (4259 . 4283) (#("sync_state_with_parent()$0" 0 26 (fontified nil)) . 4259) (4259 . 4285) (#("sync" 0 4 (fontified nil)) . 4259) (4259 . 4263) (#("sync_state_with_parent() (alias gst_element_sync_state_with_parent) (as ElementExt)" 0 83 (fontified nil)) . -4259) (4259 . 4342) (#("sync" 0 4 (fontified t)) . -4259) (undo-tree-id1097 . -4) (undo-tree-id1099 . -1) (undo-tree-id1101 . -2) (undo-tree-id1103 . -3) (undo-tree-id1105 . -4) (undo-tree-id1107 . -4) 4263) ((4259 . 4263) (#("sync_state_with_parent() (alias gst_element_sync_state_with_parent) (as ElementExt)" 0 83 (fontified nil)) . 4259) (4259 . 4342) (#("sync" 0 4 (fontified nil)) . 4259) (4259 . 4263) (#("sync_state_with_parent()$0" 0 26 (fontified nil)) . 4259) (4259 . 4285) (#("sync_state_with_parent()" 0 22 (fontified t) 22 23 (face (rainbow-delimiters-depth-6-face) fontified t) 23 24 (face (rainbow-delimiters-depth-6-face) fontified t)) . 4259) (undo-tree-id2177 . -24) (undo-tree-id2178 . -24) (undo-tree-id2179 . -24) (undo-tree-id2180 . -24) (undo-tree-id2181 . -24) (undo-tree-id2182 . -24) (undo-tree-id2183 . -24) (undo-tree-id2184 . -24)) (26044 56625 820507 816000) 0 nil])
nil
([nil nil ((#("s" 0 1 (fontified t)) . -1334) (undo-tree-id3338 . -1) (undo-tree-id3339 . -1) (undo-tree-id3340 . -1) 1335) nil (26044 58696 680071 517000) 0 nil])
([nil nil ((4283 . 4285)) ((#("?;" 0 1 (face rust-question-mark fontified t) 1 2 (fontified t)) . 4283) (undo-tree-id2170 . -2) (undo-tree-id2171 . -2) (undo-tree-id2172 . -2) (undo-tree-id2173 . -2) (undo-tree-id2174 . -2) (undo-tree-id2175 . -2) (undo-tree-id2176 . -2)) (26044 56625 779431 549000) 0 nil])
([nil nil ((1334 . 1335)) nil (26044 58696 680068 502000) 0 nil])
([nil nil ((4285 . 4286)) ((#("
" 0 1 (fontified t)) . 4285) (undo-tree-id2163 . -1) (undo-tree-id2164 . -1) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) (undo-tree-id2169 . -1)) (26044 56625 740857 88000) 0 nil])
([nil nil ((1334 . 1343) (#("g" 0 1 (fontified nil)) . 1334) (1334 . 1335) (#("gst_state" 0 9 (fontified nil)) . -1334) (1334 . 1343) (#("g" 0 1 (fontified t)) . -1334) (undo-tree-id3333 . -1) (undo-tree-id3334 . -1) (undo-tree-id3335 . -1) (undo-tree-id3336 . -1) (undo-tree-id3337 . -1) 1335) nil (26044 58696 680066 935000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4322 . 4323) (nil fontified nil 4322 . 4323) (nil fontified nil 4321 . 4322) (nil fontified nil 4320 . 4321) (nil fontified nil 4319 . 4320) (nil fontified nil 4297 . 4319) (nil fontified nil 4291 . 4297) (nil fontified nil 4286 . 4291) (4286 . 4323)) ((#("data.queue.sync_state_with_parent()?;" 0 5 (fontified nil) 5 10 (fontified nil) 10 11 (fontified nil) 11 33 (fontified nil) 33 34 (face (rainbow-delimiters-depth-6-face) fontified nil) 34 35 (face (rainbow-delimiters-depth-6-face) fontified nil) 35 36 (face rust-question-mark fontified nil) 36 37 (fontified nil rear-nonsticky nil)) . 4286) (undo-tree-id2157 . -37) (undo-tree-id2158 . -37) (undo-tree-id2159 . -37) (undo-tree-id2160 . -37) (undo-tree-id2161 . -37) (undo-tree-id2162 . -37) (nil rear-nonsticky t 4322 . 4323)) (26044 56625 701684 844000) 0 nil])
([nil nil ((1343 . 1344)) nil (26044 58696 680061 637000) 0 nil])
([nil nil ((4323 . 4324)) ((#("
" 0 1 (fontified t)) . 4323) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1)) (26044 56625 659322 413000) 0 nil])
([nil nil ((apply yas--snippet-revive 1344 1355 #s(yas--snippet nil nil #s(yas--exit 1355 nil) 24 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1355 nil) 24 nil nil nil nil)) (1344 . 1355) (#("downgrade()$0" 0 13 (fontified nil)) . 1344) (1344 . 1357) (#("downgrade() (as Downgrade)" 0 26 (fontified nil)) . -1344) (1344 . 1370)) nil (26044 58696 680060 440000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4360 . 4361) (nil fontified nil 4360 . 4361) (nil fontified nil 4359 . 4360) (nil fontified nil 4358 . 4359) (nil fontified nil 4357 . 4358) (nil fontified nil 4335 . 4357) (nil fontified nil 4329 . 4335) (nil fontified nil 4324 . 4329) (4324 . 4361)) ((#("data.queue.sync_state_with_parent()?;" 0 5 (fontified nil) 5 8 (fontified nil) 8 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil) 11 33 (fontified nil) 33 34 (face (rainbow-delimiters-depth-6-face) fontified nil) 34 35 (face (rainbow-delimiters-depth-6-face) fontified nil) 35 36 (face rust-question-mark fontified nil) 36 37 (fontified nil rear-nonsticky nil)) . 4324) (undo-tree-id2146 . -37) (undo-tree-id2147 . -37) (undo-tree-id2148 . -37) (undo-tree-id2149 . -37) (undo-tree-id2150 . -37) (nil rear-nonsticky t 4360 . 4361)) (26044 56625 619182 933000) 0 nil])
([nil nil ((1355 . 1356)) nil (26044 58696 680058 664000) 0 nil])
([nil nil ((4361 . 4362)) ((#("
" 0 1 (fontified t)) . 4361) (undo-tree-id2141 . -1) (undo-tree-id2142 . -1) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (undo-tree-id2145 . -1)) (26044 56625 578835 860000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1355) (undo-tree-id3328 . -1) (undo-tree-id3329 . -1) (undo-tree-id3330 . -1) (undo-tree-id3331 . -1) (undo-tree-id3332 . -1) 1356) nil (26044 58696 680056 373000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4398 . 4399) (nil fontified nil 4398 . 4399) (nil fontified nil 4397 . 4398) (nil fontified nil 4396 . 4397) (nil fontified nil 4395 . 4396) (nil fontified nil 4373 . 4395) (nil fontified nil 4367 . 4373) (nil fontified nil 4362 . 4367) (4362 . 4399)) ((#("data.queue.sync_state_with_parent()?;" 0 5 (fontified nil) 5 10 (fontified nil) 10 11 (fontified nil) 11 33 (fontified nil) 33 34 (face (rainbow-delimiters-depth-6-face) fontified nil) 34 35 (face (rainbow-delimiters-depth-6-face) fontified nil) 35 36 (face rust-question-mark fontified nil) 36 37 (fontified nil rear-nonsticky nil)) . 4362) (undo-tree-id2138 . -37) (undo-tree-id2139 . -37) (undo-tree-id2140 . -5) (nil rear-nonsticky t 4398 . 4399)) (26044 56625 540441 941000) 0 nil])
([nil nil ((1355 . 1356)) nil (26044 58696 680041 988000) 0 nil])
([nil nil ((4362 . 4378) 4399) ((#("                " 0 16 (fontified t)) . 4362)) (26044 56625 499832 195000) 0 nil])
([nil nil ((1415 . 1416) (t 26044 58696 694605 378000)) nil (26044 58744 271450 513000) 0 nil])
([nil nil ((4286 . 4302) 4323) ((#("                " 0 16 (fontified t)) . 4286)) (26044 56625 458846 125000) 0 nil])
([nil nil ((1415 . 1416)) nil (26044 58744 271449 585000) 0 nil])
([nil nil ((4340 . 4356) 4377) ((#("                " 0 16 (fontified t)) . 4340)) (26044 56625 418873 755000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1414) (undo-tree-id3348 . -1) (undo-tree-id3349 . -1) (undo-tree-id3350 . -1) (undo-tree-id3351 . -1) (undo-tree-id3352 . -1) (undo-tree-id3353 . -1) (undo-tree-id3354 . -1) (undo-tree-id3355 . -1) (undo-tree-id3356 . -1) (undo-tree-id3357 . -1) (undo-tree-id3358 . -1) (undo-tree-id3359 . -1) (undo-tree-id3360 . -1) (undo-tree-id3361 . -1) (undo-tree-id3362 . -1) (undo-tree-id3363 . -1) (undo-tree-id3364 . -1) (undo-tree-id3365 . -1) (#("." 0 1 (fontified t)) . -1415) (undo-tree-id3366 . -1) (undo-tree-id3367 . -1) (undo-tree-id3368 . -1) 1416) nil (26044 58744 271447 876000) 0 nil])
([nil nil ((#("queue" 0 5 (fontified t)) . -4307) (undo-tree-id1091 . -5) (undo-tree-id1093 . -5) (undo-tree-id1095 . -5) 4312) ((4307 . 4312)) (26044 56625 378635 653000) 0 nil])
([nil nil ((1414 . 1415)) nil (26044 58744 271431 122000) 0 nil])
([nil nil ((4307 . 4308)) ((#("a" 0 1 (fontified t)) . 4307) (undo-tree-id2136 . -1) (undo-tree-id2137 . -1)) (26044 56625 340372 518000) 0 nil])
([nil nil ((apply yas--snippet-revive 1415 1423 #s(yas--snippet nil nil #s(yas--exit 1423 nil) 25 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1423 nil) 25 nil nil nil nil)) (1415 . 1423) (#("borrow()$0" 0 10 (fontified nil)) . 1415) (1415 . 1425) (#("borrow()" 0 8 (fontified nil)) . -1415) (1415 . 1423)) nil (26044 58744 271429 865000) 0 nil])
([nil nil ((4307 . 4320) (#("a" 0 1 (fontified nil)) . 4307) (4307 . 4308) (#("audio_convert" 0 13 (fontified nil)) . -4307) (4307 . 4320) (#("a" 0 1 (fontified t)) . -4307) (undo-tree-id1083 . -1) (undo-tree-id1085 . -1) (undo-tree-id1087 . -1) (undo-tree-id1089 . -1) 4308) ((4307 . 4308) (#("audio_convert" 0 13 (fontified nil)) . 4307) (4307 . 4320) (#("a" 0 1 (fontified nil)) . 4307) (4307 . 4308) (#("audio_convert" 0 13 (fontified t)) . 4307)) (26044 56625 299135 915000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1423) (undo-tree-id3345 . -1) (undo-tree-id3346 . -1) (undo-tree-id3347 . -1) 1424) nil (26044 58744 271426 835000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -4372) (undo-tree-id1078 . -1) (undo-tree-id1080 . -1) (#("e" 0 1 (fontified t)) . -4373) (undo-tree-id1081 . -1) 4374) ((4372 . 4374)) (26044 56625 258747 990000) 0 nil])
([nil nil ((1423 . 1424)) nil (26044 58744 271414 16000) 0 nil])
([nil nil ((#("que" 0 3 (fontified t)) . -4369) (undo-tree-id1074 . -3) (undo-tree-id1076 . -3) 4372) ((4369 . 4372)) (26044 56625 219350 597000) 0 nil])
([nil nil ((#("pipeline;" 0 8 (fontified t) 8 9 (fontified t)) . -1634) (undo-tree-id3676 . -9) (undo-tree-id3677 . -8) (undo-tree-id3678 . -9) (undo-tree-id3679 . -9) (undo-tree-id3680 . -9) (undo-tree-id3681 . -9) (undo-tree-id3682 . -9) 1643 (t 26044 58744 317941 630000)) nil (26044 58819 541344 144000) 0 nil])
([nil nil ((4369 . 4370)) ((#("a" 0 1 (fontified t)) . 4369) (undo-tree-id2134 . -1) (undo-tree-id2135 . -1)) (26044 56625 177557 521000) 0 nil])
([nil nil ((#("data." 0 5 (fontified t)) . -1629) (undo-tree-id3667 . -5) (undo-tree-id3668 . -4) (undo-tree-id3669 . -5) (undo-tree-id3670 . -5) (undo-tree-id3671 . -5) (undo-tree-id3672 . -5) (undo-tree-id3673 . -5) (undo-tree-id3674 . -5) (undo-tree-id3675 . -5) 1634) nil (26044 58819 541338 585000) 0 nil])
([nil nil ((4369 . 4383) (#("a" 0 1 (fontified nil)) . 4369) (4369 . 4370) (#("audio_resample" 0 14 (fontified nil)) . -4369) (4369 . 4383) (#("a" 0 1 (fontified t)) . -4369) (undo-tree-id1070 . -1) (undo-tree-id1072 . -1) 4370) ((4369 . 4370) (#("audio_resample" 0 14 (fontified nil)) . 4369) (4369 . 4383) (#("a" 0 1 (fontified nil)) . 4369) (4369 . 4370) (#("audio_resample" 0 14 (fontified t)) . 4369)) (26044 56625 138724 385000) 0 nil])
([nil nil ((#("&" 0 1 (fontified t)) . -1628) (undo-tree-id3655 . -1) (undo-tree-id3656 . -1) (undo-tree-id3657 . -1) (undo-tree-id3658 . -1) (undo-tree-id3659 . -1) (undo-tree-id3660 . -1) (undo-tree-id3661 . -1) (undo-tree-id3662 . -1) (undo-tree-id3663 . -1) (undo-tree-id3664 . -1) (undo-tree-id3665 . -1) (undo-tree-id3666 . -1) 1629) nil (26044 58819 541331 972000) 0 nil])
([nil nil ((#("queue" 0 5 (fontified t)) . -4432) (undo-tree-id1068 . -5) 4437) ((4432 . 4437)) (26044 56625 96984 782000) 0 nil])
([nil nil ((1628 . 1630)) nil (26044 58819 541323 950000) 0 nil])
([nil nil ((4432 . 4433)) ((#("a" 0 1 (fontified t)) . 4432) (undo-tree-id2131 . -1) (undo-tree-id2132 . -1) (undo-tree-id2133 . -1)) (26044 56625 57941 568000) 0 nil])
([nil nil ((1628 . 1632) (#("da" 0 2 (fontified nil)) . 1628) (1628 . 1630) (#("data" 0 4 (fontified nil)) . -1628) (1628 . 1632) (#("da" 0 2 (fontified t)) . -1628) (undo-tree-id3650 . -2) (undo-tree-id3651 . -2) (undo-tree-id3652 . -2) (undo-tree-id3653 . -2) (undo-tree-id3654 . -2) 1630) nil (26044 58819 541322 785000) 0 nil])
([nil nil ((4432 . 4442) (#("a" 0 1 (fontified nil)) . 4432) (4432 . 4433) (#("audio_sink" 0 10 (fontified nil)) . -4432) (4432 . 4442) (#("a" 0 1 (fontified t)) . -4432) (undo-tree-id1064 . -1) (undo-tree-id1066 . -1) 4433) ((4432 . 4433) (#("audio_sink" 0 10 (fontified nil)) . 4432) (4432 . 4442) (#("a" 0 1 (fontified nil)) . 4432) (4432 . 4433) (#("audio_sink" 0 10 (fontified t)) . 4432)) (26044 56625 16650 884000) 0 nil])
([nil nil ((1632 . 1633)) nil (26044 58819 541318 554000) 0 nil])
([nil nil ((1359 . 1360) (t 26044 56207 611119 834000)) ((#(" " 0 1 (fontified t)) . 1359) (undo-tree-id2130 . -1)) (26044 56624 976147 662000) 0 nil])
([nil nil ((apply yas--snippet-revive 1633 1645 #s(yas--snippet nil nil #s(yas--exit 1645 nil) 26 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1645 nil) 26 nil nil nil nil)) (1633 . 1645) (#("borrow_mut()$0" 0 14 (fontified nil)) . 1633) (1633 . 1647) (#("borrow_mut() (as BorrowMut)" 0 27 (fontified nil)) . -1633) (1633 . 1660)) nil (26044 58819 541317 701000) 0 nil])
([nil nil ((1359 . 1363)) ((#("Mute" 0 4 (face font-lock-type-face fontified t)) . 1359) (undo-tree-id2128 . -4) (undo-tree-id2129 . -4)) (26044 56624 936303 500000) 0 nil])
([nil nil ((1645 . 1647)) nil (26044 58819 541316 358000) 0 nil])
([nil nil ((#("::sync" 0 2 (fontified t) 2 6 (face font-lock-constant-face fontified t)) . -8) 14 (16 . 23) (19 . 27) (1359 . 1359) (1359 . 1364) (#("Mute" 0 4 (fontified nil)) . 1359) (1359 . 1363) (#("Mutex (use std::sync::Mutex)" 0 28 (fontified nil)) . -1359) (1359 . 1387) (#("Mute" 0 4 (face font-lock-type-face fontified t)) . -1359) (undo-tree-id1150 . -4) (undo-tree-id1152 . -1) (undo-tree-id1154 . -1) (undo-tree-id1156 . -1) (undo-tree-id1158 . -2) (undo-tree-id1160 . -2) (undo-tree-id1162 . -3) (undo-tree-id1164 . -4) (undo-tree-id1166 . -4) (undo-tree-id1168 . -4) 1363) ((1359 . 1363) (#("Mutex (use std::sync::Mutex)" 0 28 (fontified nil)) . 1359) (1359 . 1387) (#("Mute" 0 4 (fontified nil)) . 1359) (1359 . 1363) (#("Mutex" 0 5 (face font-lock-type-face fontified t)) . 1359) (undo-tree-id2126 . -5) (undo-tree-id2127 . -5) (#(", Mutex}" 0 2 (fontified nil) 2 7 (face font-lock-type-face fontified nil) 7 8 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 19) (#("sync::{" 0 4 (face font-lock-constant-face fontified nil) 4 6 (fontified nil) 6 7 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 16) (8 . 14)) (26044 56624 895528 961000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -1646) (undo-tree-id3644 . -1) (undo-tree-id3645 . -1) (undo-tree-id3646 . -1) (undo-tree-id3647 . -1) (undo-tree-id3648 . -1) (undo-tree-id3649 . -1) 1647) nil (26044 58819 541315 467000) 0 nil])
([nil nil ((1373 . 1376)) ((#("::n" 0 2 (fontified t) 2 3 (fontified t)) . 1373) (undo-tree-id2124 . -3) (undo-tree-id2125 . -3)) (26044 56624 857931 623000) 0 nil])
([nil nil ((#("mut()." 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-4-face) fontified t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t) 5 6 (fontified t)) . -1640) (undo-tree-id3628 . -6) (undo-tree-id3629 . -5) (undo-tree-id3630 . -5) (undo-tree-id3631 . -6) (undo-tree-id3632 . -6) (undo-tree-id3633 . -6) (undo-tree-id3634 . -6) (undo-tree-id3635 . -6) (undo-tree-id3636 . -6) (undo-tree-id3637 . -6) (undo-tree-id3638 . -6) (undo-tree-id3639 . -6) (undo-tree-id3640 . -6) (undo-tree-id3641 . -6) (undo-tree-id3642 . -6) (undo-tree-id3643 . -6) 1646) nil (26044 58819 541310 579000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1379 1380 nil nil nil nil #s(yas--exit 1381 nil))) #s(yas--exit 1381 nil) 4 nil #s(yas--field 1 1379 1380 nil nil nil nil #s(yas--exit 1381 nil)) nil nil)) (1375 . 1381) (#("new(${1:t})$0" 0 13 (fontified nil)) . 1375) (1375 . 1388) (#("n" 0 1 (fontified nil)) . 1375) (1375 . 1376) (#("new(…)" 0 6 (fontified nil)) . -1375) (1375 . 1381) (#("n" 0 1 (fontified t)) . -1375) (undo-tree-id1145 . -1) (undo-tree-id1147 . -1) 1376) ((1375 . 1376) (#("new(…)" 0 6 (fontified nil)) . 1375) (1375 . 1381) (#("n" 0 1 (fontified nil)) . 1375) (1375 . 1376) (#("new(${1:t})$0" 0 13 (fontified nil)) . 1375) (1375 . 1388) (#("new(t)" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-3-face) fontified t) 4 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-3-face) fontified t)) . 1375) (undo-tree-id2122 . -4) (undo-tree-id2123 . -4) (apply yas--snippet-revive 1375 1381 #s(yas--snippet nil (#s(yas--field 1 1379 1380 nil nil nil nil #s(yas--exit 1381 nil))) #s(yas--exit 1381 nil) 4 nil #s(yas--field 1 1379 1380 nil nil nil nil #s(yas--exit 1381 nil)) nil nil))) (26044 56624 815085 180000) 0 nil])
([nil nil ((#("borrow_" 0 7 (fontified t)) . -1633) (undo-tree-id3604 . -7) (undo-tree-id3605 . -7) (undo-tree-id3606 . -7) (undo-tree-id3607 . -7) (undo-tree-id3608 . -7) (undo-tree-id3609 . -7) (undo-tree-id3610 . -7) (undo-tree-id3611 . -7) (undo-tree-id3612 . -7) (undo-tree-id3613 . -7) (undo-tree-id3614 . -7) (undo-tree-id3615 . -7) (undo-tree-id3616 . -7) (undo-tree-id3617 . -7) (undo-tree-id3618 . -7) (undo-tree-id3619 . -7) (undo-tree-id3620 . -7) (undo-tree-id3621 . -7) (undo-tree-id3622 . -7) (undo-tree-id3623 . -7) (undo-tree-id3624 . -7) (undo-tree-id3625 . -7) (undo-tree-id3626 . -7) (undo-tree-id3627 . -7) 1640) nil (26044 58819 541298 896000) 0 nil])
([nil nil ((apply yas--snippet-revive 1375 1381 #s(yas--snippet nil (#s(yas--field 1 1379 1380 nil nil nil nil #s(yas--exit 1381 nil))) #s(yas--exit 1381 nil) 4 nil #s(yas--field 1 1379 1380 nil nil nil nil #s(yas--exit 1381 nil)) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1379 1380 nil nil nil nil #s(yas--exit 1381 nil))) #s(yas--exit 1381 nil) 4 nil #s(yas--field 1 1379 1380 nil nil nil nil #s(yas--exit 1381 nil)) nil nil))) (26044 56624 774881 931000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -1628) (undo-tree-id3406 . -1) (undo-tree-id3407 . -1) (undo-tree-id3408 . -1) (undo-tree-id3409 . -1) (undo-tree-id3410 . -1) (undo-tree-id3411 . -1) (undo-tree-id3412 . -1) (undo-tree-id3413 . -1) (undo-tree-id3414 . -1) (undo-tree-id3415 . -1) (undo-tree-id3416 . -1) (undo-tree-id3417 . -1) (undo-tree-id3418 . -1) (undo-tree-id3419 . -1) (undo-tree-id3420 . -1) (undo-tree-id3421 . -1) (undo-tree-id3422 . -1) (undo-tree-id3423 . -1) (undo-tree-id3424 . -1) (undo-tree-id3425 . -1) (undo-tree-id3426 . -1) (undo-tree-id3427 . -1) (undo-tree-id3428 . -1) (undo-tree-id3429 . -1) (undo-tree-id3430 . -1) (undo-tree-id3431 . -1) (undo-tree-id3432 . -1) (undo-tree-id3433 . -1) (undo-tree-id3434 . -1) (undo-tree-id3435 . -1) (undo-tree-id3436 . -1) (undo-tree-id3437 . -1) (undo-tree-id3438 . -1) (undo-tree-id3439 . -1) (undo-tree-id3440 . -1) (undo-tree-id3441 . -1) (undo-tree-id3442 . -1) (undo-tree-id3443 . -1) (undo-tree-id3444 . -1) (undo-tree-id3445 . -1) (undo-tree-id3446 . -1) (undo-tree-id3447 . -1) (#("a" 0 1 (fontified t)) . -1629) (undo-tree-id3448 . -1) (undo-tree-id3449 . -1) (undo-tree-id3450 . -1) (undo-tree-id3451 . -1) (undo-tree-id3452 . -1) (undo-tree-id3453 . -1) (undo-tree-id3454 . -1) (undo-tree-id3455 . -1) (undo-tree-id3456 . -1) (undo-tree-id3457 . -1) (undo-tree-id3458 . -1) (undo-tree-id3459 . -1) (undo-tree-id3460 . -1) (undo-tree-id3461 . -1) (undo-tree-id3462 . -1) (undo-tree-id3463 . -1) (undo-tree-id3464 . -1) (undo-tree-id3465 . -1) (undo-tree-id3466 . -1) (undo-tree-id3467 . -1) (undo-tree-id3468 . -1) (undo-tree-id3469 . -1) (undo-tree-id3470 . -1) (undo-tree-id3471 . -1) (undo-tree-id3472 . -1) (undo-tree-id3473 . -1) (undo-tree-id3474 . -1) (undo-tree-id3475 . -1) (undo-tree-id3476 . -1) (undo-tree-id3477 . -1) (undo-tree-id3478 . -1) (undo-tree-id3479 . -1) (undo-tree-id3480 . -1) (undo-tree-id3481 . -1) (undo-tree-id3482 . -1) (undo-tree-id3483 . -1) (undo-tree-id3484 . -1) (undo-tree-id3485 . -1) (undo-tree-id3486 . -1) (undo-tree-id3487 . -1) (undo-tree-id3488 . -1) (#("t" 0 1 (fontified t)) . -1630) (undo-tree-id3489 . -1) (undo-tree-id3490 . -1) (undo-tree-id3491 . -1) (undo-tree-id3492 . -1) (undo-tree-id3493 . -1) (undo-tree-id3494 . -1) (undo-tree-id3495 . -1) (undo-tree-id3496 . -1) (undo-tree-id3497 . -1) (undo-tree-id3498 . -1) (undo-tree-id3499 . -1) (undo-tree-id3500 . -1) (undo-tree-id3501 . -1) (undo-tree-id3502 . -1) (undo-tree-id3503 . -1) (undo-tree-id3504 . -1) (undo-tree-id3505 . -1) (undo-tree-id3506 . -1) (undo-tree-id3507 . -1) (undo-tree-id3508 . -1) (undo-tree-id3509 . -1) (undo-tree-id3510 . -1) (undo-tree-id3511 . -1) (undo-tree-id3512 . -1) (undo-tree-id3513 . -1) (undo-tree-id3514 . -1) (undo-tree-id3515 . -1) (undo-tree-id3516 . -1) (undo-tree-id3517 . -1) (undo-tree-id3518 . -1) (undo-tree-id3519 . -1) (undo-tree-id3520 . -1) (undo-tree-id3521 . -1) (undo-tree-id3522 . -1) (undo-tree-id3523 . -1) (undo-tree-id3524 . -1) (undo-tree-id3525 . -1) (undo-tree-id3526 . -1) (undo-tree-id3527 . -1) (undo-tree-id3528 . -1) (#("a" 0 1 (fontified t)) . -1631) (undo-tree-id3529 . -1) (undo-tree-id3530 . -1) (undo-tree-id3531 . -1) (undo-tree-id3532 . -1) (undo-tree-id3533 . -1) (undo-tree-id3534 . -1) (undo-tree-id3535 . -1) (undo-tree-id3536 . -1) (undo-tree-id3537 . -1) (undo-tree-id3538 . -1) (undo-tree-id3539 . -1) (undo-tree-id3540 . -1) (undo-tree-id3541 . -1) (undo-tree-id3542 . -1) (undo-tree-id3543 . -1) (undo-tree-id3544 . -1) (undo-tree-id3545 . -1) (undo-tree-id3546 . -1) (undo-tree-id3547 . -1) (undo-tree-id3548 . -1) (undo-tree-id3549 . -1) (undo-tree-id3550 . -1) (undo-tree-id3551 . -1) (undo-tree-id3552 . -1) (undo-tree-id3553 . -1) (undo-tree-id3554 . -1) (undo-tree-id3555 . -1) (undo-tree-id3556 . -1) (undo-tree-id3557 . -1) (undo-tree-id3558 . -1) (undo-tree-id3559 . -1) (undo-tree-id3560 . -1) (undo-tree-id3561 . -1) (undo-tree-id3562 . -1) (undo-tree-id3563 . -1) (undo-tree-id3564 . -1) (undo-tree-id3565 . -1) (undo-tree-id3566 . -1) (undo-tree-id3567 . -1) (#("." 0 1 (fontified t)) . -1632) (undo-tree-id3568 . -1) (undo-tree-id3569 . -1) (undo-tree-id3570 . -1) (undo-tree-id3571 . -1) (undo-tree-id3572 . -1) (undo-tree-id3573 . -1) (undo-tree-id3574 . -1) (undo-tree-id3575 . -1) (undo-tree-id3576 . -1) (undo-tree-id3577 . -1) (undo-tree-id3578 . -1) (undo-tree-id3579 . -1) (undo-tree-id3580 . -1) (undo-tree-id3581 . -1) (undo-tree-id3582 . -1) (undo-tree-id3583 . -1) (undo-tree-id3584 . -1) (undo-tree-id3585 . -1) (undo-tree-id3586 . -1) (undo-tree-id3587 . -1) (undo-tree-id3588 . -1) (undo-tree-id3589 . -1) (undo-tree-id3590 . -1) (undo-tree-id3591 . -1) (undo-tree-id3592 . -1) (undo-tree-id3593 . -1) (undo-tree-id3594 . -1) (undo-tree-id3595 . -1) (undo-tree-id3596 . -1) (undo-tree-id3597 . -1) (undo-tree-id3598 . -1) (undo-tree-id3599 . -1) (undo-tree-id3600 . -1) (undo-tree-id3601 . -1) (undo-tree-id3602 . -1) (undo-tree-id3603 . -1) 1633) nil (26044 58819 541274 742000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -1379) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1118 . -1) (undo-tree-id1120 . -1) (undo-tree-id1122 . -1) (undo-tree-id1124 . -1) (undo-tree-id1126 . -1) (undo-tree-id1128 . -1) (undo-tree-id1130 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -1380) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1134 . -1) (undo-tree-id1136 . -1) (undo-tree-id1138 . -1) (undo-tree-id1140 . -1) (#(" " 0 1 (fontified t)) . -1381) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1144 . -1) 1382) ((1379 . 1382)) (26044 56624 735557 584000) 0 nil])
([nil nil ((1628 . 1630)) nil (26044 58819 540917 930000) 0 nil])
([nil nil ((1512 . 1513)) ((#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1512)) (26044 56624 695061 534000) 0 nil])
([nil nil ((1628 . 1632) (#("da" 0 2 (fontified nil)) . 1628) (1628 . 1630) (#("data" 0 4 (fontified nil)) . -1628) (1628 . 1632) (#("da" 0 2 (fontified t)) . -1628) (undo-tree-id3399 . -2) (undo-tree-id3400 . -1) (undo-tree-id3401 . -1) (undo-tree-id3402 . -2) (undo-tree-id3403 . -2) (undo-tree-id3404 . -2) (undo-tree-id3405 . -2) 1630) nil (26044 58819 540916 768000) 0 nil])
([nil nil ((1612 . 1614) (t 26044 56430 994466 701000)) ((#(". " 0 1 (fontified t) 1 2 (fontified t)) . 1612) (undo-tree-id2120 . -1) (undo-tree-id2121 . -1)) (26044 56624 655176 869000) 0 nil])
([nil nil ((1632 . 1633)) nil (26044 58819 540910 979000) 0 nil])
([nil nil ((1613 . 1614)) ((#("m" 0 1 (fontified t)) . 1613) (undo-tree-id2118 . -1) (undo-tree-id2119 . -1)) (26044 56624 615588 510000) 0 nil])
([nil nil ((apply yas--snippet-revive 1633 1645 #s(yas--snippet nil nil #s(yas--exit 1645 nil) 27 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1645 nil) 27 nil nil nil nil)) (1633 . 1645) (#("borrow_mut()$0" 0 14 (fontified nil)) . 1633) (1633 . 1647) (#("borrow_mut() (as BorrowMut)" 0 27 (fontified nil)) . -1633) (1633 . 1660)) nil (26044 58819 540909 895000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -1613) (undo-tree-id1219 . -1) (undo-tree-id1221 . -1) (undo-tree-id1223 . -1) 1614) ((1613 . 1614)) (26044 56624 574998 430000) 0 nil])
([nil nil ((1645 . 1648)) nil (26044 58819 540907 866000) 0 nil])
([nil nil ((1613 . 1614)) ((#("a" 0 1 (fontified t)) . 1613) (undo-tree-id2116 . -1) (undo-tree-id2117 . -1)) (26044 56624 534347 200000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1645) (undo-tree-id3369 . -1) (undo-tree-id3370 . -1) (undo-tree-id3371 . -1) (undo-tree-id3372 . -1) (undo-tree-id3373 . -1) (undo-tree-id3374 . -1) (undo-tree-id3375 . -1) (undo-tree-id3376 . -1) (undo-tree-id3377 . -1) (undo-tree-id3378 . -1) (undo-tree-id3379 . -1) (undo-tree-id3380 . -1) (undo-tree-id3381 . -1) (undo-tree-id3382 . -1) (undo-tree-id3383 . -1) (#("p" 0 1 (fontified t)) . -1646) (undo-tree-id3384 . -1) (undo-tree-id3385 . -1) (undo-tree-id3386 . -1) (undo-tree-id3387 . -1) (undo-tree-id3388 . -1) (undo-tree-id3389 . -1) (undo-tree-id3390 . -1) (undo-tree-id3391 . -1) (undo-tree-id3392 . -1) (undo-tree-id3393 . -1) (undo-tree-id3394 . -1) (#("o" 0 1 (fontified t)) . -1647) (undo-tree-id3395 . -1) (undo-tree-id3396 . -1) (undo-tree-id3397 . -1) (undo-tree-id3398 . -1) 1648) nil (26044 58819 540903 157000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -1613) (undo-tree-id1215 . -1) (undo-tree-id1217 . -1) 1614) ((1613 . 1614)) (26044 56624 493843 111000) 0 nil])
([nil nil ((1645 . 1646) (t 26044 58819 584612 918000)) nil (26044 58904 247044 698000) 0 nil])
([nil nil ((1613 . 1614)) ((#("l" 0 1 (fontified t)) . 1613) (undo-tree-id2114 . -1) (undo-tree-id2115 . -1)) (26044 56624 454165 831000) 0 nil])
([nil nil ((#("mut();" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-4-face) fontified t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t) 5 6 (fontified t)) . -1640) (undo-tree-id3747 . -6) (undo-tree-id3748 . -6) (undo-tree-id3749 . -5) (undo-tree-id3750 . -5) (undo-tree-id3751 . -5) (undo-tree-id3752 . -5) (undo-tree-id3753 . -5) (undo-tree-id3754 . -5) (undo-tree-id3755 . -5) (undo-tree-id3756 . -5) (undo-tree-id3757 . -5) (undo-tree-id3758 . -5) (undo-tree-id3759 . -5) (undo-tree-id3760 . -5) (undo-tree-id3761 . -5) (undo-tree-id3762 . -5) (undo-tree-id3763 . -5) (undo-tree-id3764 . -5) (undo-tree-id3765 . -5) (undo-tree-id3766 . -5) (undo-tree-id3767 . -5) (undo-tree-id3768 . -5) (undo-tree-id3769 . -5) (undo-tree-id3770 . -5) (undo-tree-id3771 . -5) (undo-tree-id3772 . -5) (undo-tree-id3773 . -6) (undo-tree-id3774 . -6) (undo-tree-id3775 . -6) (undo-tree-id3776 . -6) (undo-tree-id3777 . -6) (undo-tree-id3778 . -6) (undo-tree-id3779 . -6) (undo-tree-id3780 . -6) (undo-tree-id3781 . -6) (undo-tree-id3782 . -6) (undo-tree-id3783 . -6) (undo-tree-id3784 . -6) (undo-tree-id3785 . -6) (undo-tree-id3786 . -6) (undo-tree-id3787 . -6) (undo-tree-id3788 . -6) (undo-tree-id3789 . -6) (undo-tree-id3790 . -6) (undo-tree-id3791 . -6) (undo-tree-id3792 . -6) (undo-tree-id3793 . -6) 1646) nil (26044 58904 247042 263000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1612) (undo-tree-id1179 . -1) (undo-tree-id1181 . -1) (undo-tree-id1183 . -1) (undo-tree-id1185 . -1) (undo-tree-id1187 . -1) (undo-tree-id1189 . -1) (undo-tree-id1191 . -1) (undo-tree-id1193 . -1) (undo-tree-id1195 . -1) (undo-tree-id1197 . -1) (undo-tree-id1199 . -1) (undo-tree-id1201 . -1) (undo-tree-id1203 . -1) (undo-tree-id1205 . -1) (undo-tree-id1207 . -1) (undo-tree-id1209 . -1) (#("l" 0 1 (fontified t)) . -1613) (undo-tree-id1210 . -1) (undo-tree-id1212 . -1) (undo-tree-id1214 . -1) 1614) ((1612 . 1614)) (26044 56624 412286 961000) 0 nil])
([nil nil ((#("borrow_" 0 7 (fontified t)) . -1633) (undo-tree-id3699 . -7) (undo-tree-id3700 . -7) (undo-tree-id3701 . -7) (undo-tree-id3702 . -7) (undo-tree-id3703 . -7) (undo-tree-id3704 . -7) (undo-tree-id3705 . -7) (undo-tree-id3706 . -7) (undo-tree-id3707 . -7) (undo-tree-id3708 . -7) (undo-tree-id3709 . -7) (undo-tree-id3710 . -7) (undo-tree-id3711 . -7) (undo-tree-id3712 . -7) (undo-tree-id3713 . -7) (undo-tree-id3714 . -7) (undo-tree-id3715 . -7) (undo-tree-id3716 . -7) (undo-tree-id3717 . -7) (undo-tree-id3718 . -7) (undo-tree-id3719 . -7) (undo-tree-id3720 . -7) (undo-tree-id3721 . -7) (undo-tree-id3722 . -7) (undo-tree-id3723 . -7) (undo-tree-id3724 . -7) (undo-tree-id3725 . -7) (undo-tree-id3726 . -7) (undo-tree-id3727 . -7) (undo-tree-id3728 . -7) (undo-tree-id3729 . -7) (undo-tree-id3730 . -7) (undo-tree-id3731 . -7) (undo-tree-id3732 . -7) (undo-tree-id3733 . -7) (undo-tree-id3734 . -7) (undo-tree-id3735 . -7) (undo-tree-id3736 . -7) (undo-tree-id3737 . -7) (undo-tree-id3738 . -7) (undo-tree-id3739 . -7) (undo-tree-id3740 . -7) (undo-tree-id3741 . -7) (undo-tree-id3742 . -7) (undo-tree-id3743 . -7) (undo-tree-id3744 . -7) (undo-tree-id3745 . -7) (undo-tree-id3746 . -7) 1640) nil (26044 58904 247009 640000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1612) (undo-tree-id1169 . -1) (undo-tree-id1171 . -1) (undo-tree-id1173 . -1) (undo-tree-id1175 . -1) (undo-tree-id1177 . -1) 1613) ((1612 . 1613)) (26044 56624 373320 231000) 0 nil])
([nil nil ((1633 . 1635)) nil (26044 58904 246976 981000) 0 nil])
([nil nil ((1605 . 1606) (t 26044 56479 601136 346000)) ((#(" " 0 1 (fontified t)) . 1605)) (26044 56624 332961 141000) 0 nil])
([nil nil ((apply yas--snippet-revive 1633 1642 #s(yas--snippet nil nil #s(yas--exit 1642 nil) 28 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1642 nil) 28 nil nil nil nil)) (1633 . 1642) (#("upgrade()$0" 0 11 (fontified nil)) . 1633) (1633 . 1644) (#("up" 0 2 (fontified nil)) . 1633) (1633 . 1635) (#("upgrade()" 0 9 (fontified nil)) . -1633) (1633 . 1642) (#("up" 0 2 (fontified t)) . -1633) (undo-tree-id3689 . -2) (undo-tree-id3690 . -2) (undo-tree-id3691 . -2) (undo-tree-id3692 . -2) (undo-tree-id3693 . -2) (undo-tree-id3694 . -2) (undo-tree-id3695 . -2) (undo-tree-id3696 . -2) (undo-tree-id3697 . -2) (undo-tree-id3698 . -2) 1635) nil (26044 58904 246975 323000) 0 nil])
([nil nil ((1605 . 1607)) ((#(".m" 0 1 (fontified t) 1 2 (fontified t)) . 1605) (undo-tree-id2110 . -2) (undo-tree-id2111 . -2) (undo-tree-id2112 . -1) (undo-tree-id2113 . -1)) (26044 56624 291438 89000) 0 nil])
([nil nil ((1642 . 1644)) nil (26044 58904 246965 934000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -1606) (undo-tree-id1236 . -1) (undo-tree-id1238 . -1) 1607) ((1606 . 1607)) (26044 56624 251739 780000) 0 nil])
([nil nil ((apply yas--snippet-revive 1643 1651 #s(yas--snippet nil nil #s(yas--exit 1651 nil) 29 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1651 nil) 29 nil nil nil nil)) (1643 . 1651) (#("unwrap()$0" 0 10 (fontified nil)) . 1643) (1643 . 1653) (#("u" 0 1 (fontified nil)) . 1643) (1643 . 1644) (#("unwrap()" 0 8 (fontified nil)) . -1643) (1643 . 1651) (#("u" 0 1 (fontified t)) . -1643) (undo-tree-id3683 . -1) (undo-tree-id3684 . -1) (undo-tree-id3685 . -1) (undo-tree-id3686 . -1) (undo-tree-id3687 . -1) (undo-tree-id3688 . -1) 1644) nil (26044 58904 246963 398000) 0 nil])
([nil nil ((1606 . 1607)) ((#("l" 0 1 (fontified t)) . 1606) (undo-tree-id2108 . -1) (undo-tree-id2109 . -1)) (26044 56624 211631 326000) 0 nil])
([nil nil ((1651 . 1652)) nil (26044 58904 246947 28000) 0 nil])
([nil nil ((apply yas--snippet-revive 1606 1612 #s(yas--snippet nil nil #s(yas--exit #<marker at 786 in main.rs> nil) 5 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 786 in main.rs> nil) 5 nil nil nil nil)) (1606 . 1612) (#("lock()$0" 0 8 (fontified nil)) . 1606) (1606 . 1614) (#("l" 0 1 (fontified nil)) . 1606) (1606 . 1607) (#("lock()" 0 6 (fontified nil)) . -1606) (1606 . 1612) (#("l" 0 1 (fontified t)) . -1606) (undo-tree-id1231 . -1) (undo-tree-id1233 . -1) (undo-tree-id1235 . -1) 1607) ((1606 . 1607) (#("lock()" 0 6 (fontified nil)) . 1606) (1606 . 1612) (#("l" 0 1 (fontified nil)) . 1606) (1606 . 1607) (#("lock()$0" 0 8 (fontified nil)) . 1606) (1606 . 1614) (#("lock()" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-2-face) fontified t) 5 6 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1606) (undo-tree-id2104 . -6) (undo-tree-id2105 . -6) (undo-tree-id2106 . -6) (undo-tree-id2107 . -6)) (26044 56624 170848 971000) 0 nil])
([nil nil ((1651 . 1653) (t 26044 58904 261284 775000)) nil (26044 59080 808194 178000) 0 nil])
([nil nil ((1612 . 1614)) ((#(".a" 0 1 (fontified t) 1 2 (fontified t)) . 1612) (undo-tree-id2101 . -2) (undo-tree-id2102 . -2) (undo-tree-id2103 . -1)) (26044 56624 131380 867000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1651) (undo-tree-id3920 . -1) (undo-tree-id3921 . -1) (undo-tree-id3922 . -1) (undo-tree-id3923 . -1) (undo-tree-id3924 . -1) (undo-tree-id3925 . -1) (undo-tree-id3926 . -1) (undo-tree-id3927 . -1) (undo-tree-id3928 . -1) (undo-tree-id3929 . -1) (undo-tree-id3930 . -1) (undo-tree-id3931 . -1) (undo-tree-id3932 . -1) (undo-tree-id3933 . -1) (undo-tree-id3934 . -1) (#("p" 0 1 (fontified t)) . -1652) (undo-tree-id3935 . -1) (undo-tree-id3936 . -1) (undo-tree-id3937 . -1) (undo-tree-id3938 . -1) (undo-tree-id3939 . -1) (undo-tree-id3940 . -1) 1653) nil (26044 59080 808192 484000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -1613) (undo-tree-id1257 . -1) (undo-tree-id1259 . -1) (undo-tree-id1261 . -1) (undo-tree-id1263 . -1) (undo-tree-id1265 . -1) (undo-tree-id1267 . -1) 1614) ((1613 . 1614)) (26044 56624 90960 130000) 0 nil] [nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1622 1624 nil nil nil nil #s(yas--exit 1625 nil))) #s(yas--exit 1625 nil) 6 nil #s(yas--field 1 1622 1624 nil nil nil nil #s(yas--exit 1625 nil)) nil nil)) (1613 . 1625) (#("and_then(${1:op})$0" 0 19 (fontified nil)) . 1613) (1613 . 1632) (#("a" 0 1 (fontified nil)) . 1613) (1613 . 1614) (#("and_then(…)" 0 11 (fontified nil)) . -1613) (1613 . 1624) (#("a" 0 1 (fontified t)) . -1613) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) 1614) ((1613 . 1614) (#("and_then(…)" 0 11 (fontified nil)) . 1613) (1613 . 1624) (#("a" 0 1 (fontified nil)) . 1613) (1613 . 1614) (#("and_then(${1:op})$0" 0 19 (fontified nil)) . 1613) (1613 . 1632) (#("and_then(op)" 0 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t) 9 11 (fontified t) 11 12 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1613) (undo-tree-id1240 . -9) (undo-tree-id1241 . -9) (undo-tree-id1242 . -9) (apply yas--snippet-revive 1613 1625 #s(yas--snippet nil (#s(yas--field 1 1622 1624 nil nil nil nil #s(yas--exit 1625 nil))) #s(yas--exit 1625 nil) 6 nil #s(yas--field 1 1622 1624 nil nil nil nil #s(yas--exit 1625 nil)) nil nil))) (26044 56488 768302 769000) 0 nil])
([nil nil ((#("struct GstState {
    pipeline: Pipeline,
    source: Element,
    audio_convert: Element,
    audio_resample: Element,
    audio_sink: Element,
}" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 15 (face font-lock-type-face fontified t) 15 16 (fontified t) 16 17 (face (rainbow-delimiters-depth-1-face) fontified t) 17 18 (fontified t) 18 22 (fontified t) 22 30 (face font-lock-variable-name-face fontified t) 30 32 (fontified t) 32 40 (face font-lock-type-face fontified t) 40 42 (fontified t) 42 46 (fontified t) 46 52 (face font-lock-variable-name-face fontified t) 52 54 (fontified t) 54 61 (face font-lock-type-face fontified t) 61 62 (fontified t) 62 63 (fontified t) 63 67 (fontified t) 67 80 (face font-lock-variable-name-face fontified t) 80 82 (fontified t) 82 89 (face font-lock-type-face fontified t) 89 91 (fontified t) 91 95 (fontified t) 95 109 (face font-lock-variable-name-face fontified t) 109 111 (fontified t) 111 118 (face font-lock-type-face fontified t) 118 120 (fontified t) 120 124 (fontified t) 124 134 (face font-lock-variable-name-face fontified t) 134 136 (fontified t) 136 143 (face font-lock-type-face fontified t) 143 145 (fontified t) 145 146 (face (rainbow-delimiters-depth-1-face) fontified t)) . 246) (undo-tree-id3886 . -146) (undo-tree-id3887 . -120) (undo-tree-id3888 . -133) (undo-tree-id3889 . -133) (undo-tree-id3890 . -133) (undo-tree-id3891 . -133) (undo-tree-id3892 . -133) (undo-tree-id3893 . -133) (undo-tree-id3894 . -133) (undo-tree-id3895 . -146) (undo-tree-id3896 . -146) (undo-tree-id3897 . -146) (undo-tree-id3898 . -129) (undo-tree-id3899 . -128) (undo-tree-id3900 . -98) (undo-tree-id3901 . -69) (undo-tree-id3902 . -68) (undo-tree-id3903 . -46) (undo-tree-id3904 . -45) (undo-tree-id3905 . -20) (undo-tree-id3906 . -19) (undo-tree-id3907 . -146) (undo-tree-id3908 . -146) (undo-tree-id3909 . -146) (undo-tree-id3910 . -146) (undo-tree-id3911 . -122) (undo-tree-id3912 . -121) (undo-tree-id3913 . -91) (undo-tree-id3914 . -19) (undo-tree-id3915 . -20) (undo-tree-id3916 . -19) (undo-tree-id3917 . -146) (undo-tree-id3918 . -146) (undo-tree-id3919 . -146)) nil (26044 59080 808177 271000) 0 nil])
([nil nil ((1613 . 1614)) ((#("y" 0 1 (fontified t)) . 1613) (undo-tree-id2099 . -1) (undo-tree-id2100 . -1)) (26044 56624 51140 412000) 0 nil])
nil
([nil nil ((#("
" 0 1 (fontified t)) . -245) (undo-tree-id3794 . -1) (undo-tree-id3795 . -1) (undo-tree-id3796 . -1) (undo-tree-id3797 . -1) (undo-tree-id3798 . -1) (undo-tree-id3799 . -1) (undo-tree-id3800 . -1) (undo-tree-id3801 . -1) (undo-tree-id3802 . -1) (undo-tree-id3803 . -1) (undo-tree-id3804 . -1) (undo-tree-id3805 . -1) (undo-tree-id3806 . -1) (undo-tree-id3807 . -1) (undo-tree-id3808 . -1) (undo-tree-id3809 . -1) (undo-tree-id3810 . -1) (undo-tree-id3811 . -1) (undo-tree-id3812 . -1) (undo-tree-id3813 . -1) (undo-tree-id3814 . -1) (undo-tree-id3815 . -1) (undo-tree-id3816 . -1) (undo-tree-id3817 . -1) (undo-tree-id3818 . -1) (undo-tree-id3819 . -1) (undo-tree-id3820 . -1) (undo-tree-id3821 . -1) (undo-tree-id3822 . -1) (undo-tree-id3823 . -1) (undo-tree-id3824 . -1) (undo-tree-id3825 . -1) (undo-tree-id3826 . -1) (undo-tree-id3827 . -1) (undo-tree-id3828 . -1) (undo-tree-id3829 . -1) (undo-tree-id3830 . -1) (undo-tree-id3831 . -1) (undo-tree-id3832 . -1) (undo-tree-id3833 . -1) (undo-tree-id3834 . -1) (undo-tree-id3835 . -1) (undo-tree-id3836 . -1) (undo-tree-id3837 . -1) (undo-tree-id3838 . -1) (undo-tree-id3839 . -1) (undo-tree-id3840 . -1) (undo-tree-id3841 . -1) (undo-tree-id3842 . -1) (undo-tree-id3843 . -1) (undo-tree-id3844 . -1) (undo-tree-id3845 . -1) (undo-tree-id3846 . -1) (undo-tree-id3847 . -1) (undo-tree-id3848 . -1) (undo-tree-id3849 . -1) (undo-tree-id3850 . -1) (undo-tree-id3851 . -1) (undo-tree-id3852 . -1) (undo-tree-id3853 . -1) (undo-tree-id3854 . -1) (undo-tree-id3855 . -1) (undo-tree-id3856 . -1) (undo-tree-id3857 . -1) (undo-tree-id3858 . -1) (undo-tree-id3859 . -1) (undo-tree-id3860 . -1) (undo-tree-id3861 . -1) (undo-tree-id3862 . -1) (undo-tree-id3863 . -1) (undo-tree-id3864 . -1) (undo-tree-id3865 . -1) (undo-tree-id3866 . -1) (undo-tree-id3867 . -1) (undo-tree-id3868 . -1) (undo-tree-id3869 . -1) (undo-tree-id3870 . -1) (undo-tree-id3871 . -1) (undo-tree-id3872 . -1) (undo-tree-id3873 . -1) (undo-tree-id3874 . -1) (undo-tree-id3875 . -1) (undo-tree-id3876 . -1) (undo-tree-id3877 . -1) (undo-tree-id3878 . -1) (undo-tree-id3879 . -1) (undo-tree-id3880 . -1) (undo-tree-id3881 . -1) (undo-tree-id3882 . -1) (undo-tree-id3883 . -1) (#("
" 0 1 (fontified t)) . -246) (undo-tree-id3884 . -1) (undo-tree-id3885 . -1) 247) nil (26044 59080 808152 413000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -1613) (undo-tree-id1252 . -1) (undo-tree-id1254 . -1) (undo-tree-id1256 . -1) 1614) ((1613 . 1614)) (26044 56624 11112 156000) 0 nil])
([nil nil ((245 . 246)) nil (26044 59080 808082 384000) 0 nil])
([nil nil ((1613 . 1614)) ((#("u" 0 1 (fontified t)) . 1613) (undo-tree-id2097 . -1) (undo-tree-id2098 . -1)) (26044 56623 972411 697000) 0 nil])
([nil nil ((#("    let gst_state = Arc::new(RefCell::new( GstState {
        pipeline,
        source,
        audio_convert,
        audio_resample,
        audio_sink,
    }));" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 17 (face font-lock-variable-name-face fontified t) 17 20 (fontified t) 20 23 (face font-lock-type-face fontified t) 23 25 (fontified t) 25 28 (fontified t) 28 29 (face (rainbow-delimiters-depth-2-face) fontified t) 29 36 (face font-lock-type-face fontified t) 36 38 (fontified t) 38 41 (fontified t) 41 42 (face (rainbow-delimiters-depth-3-face) fontified t) 42 43 (fontified t) 43 51 (face font-lock-type-face fontified t) 51 52 (fontified t) 52 53 (face (rainbow-delimiters-depth-4-face) fontified t) 53 54 (fontified t) 54 72 (fontified t) 72 87 (fontified t) 87 88 (fontified t) 88 135 (fontified t) 135 155 (fontified t) 155 159 (fontified t) 159 160 (face (rainbow-delimiters-depth-4-face) fontified t) 160 161 (face (rainbow-delimiters-depth-3-face) fontified t) 161 162 (face (rainbow-delimiters-depth-2-face) fontified t) 162 163 (fontified t)) . 1008) (undo-tree-id4078 . -163) (undo-tree-id4079 . -29) (undo-tree-id4080 . -163) (undo-tree-id4081 . -163) (undo-tree-id4082 . -163) (undo-tree-id4083 . -144) (undo-tree-id4084 . -143) (undo-tree-id4085 . -95) (undo-tree-id4086 . -78) (undo-tree-id4087 . -59) (undo-tree-id4088 . -4) (undo-tree-id4089 . -163) (t 26044 59080 854628 946000)) nil (26044 59118 323205 106000) 0 nil])
([nil nil ((apply yas--snippet-revive 1613 1621 #s(yas--snippet nil nil #s(yas--exit #<marker at 786 in main.rs> nil) 7 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 786 in main.rs> nil) 7 nil nil nil nil)) (1613 . 1621) (#("unwrap()$0" 0 10 (fontified nil)) . 1613) (1613 . 1623) (#("u" 0 1 (fontified nil)) . 1613) (1613 . 1614) (#("unwrap()" 0 8 (fontified nil)) . -1613) (1613 . 1621) (#("u" 0 1 (fontified t)) . -1613) (undo-tree-id1247 . -1) (undo-tree-id1249 . -1) (undo-tree-id1251 . -1) 1614) ((1613 . 1614) (#("unwrap()" 0 8 (fontified nil)) . 1613) (1613 . 1621) (#("u" 0 1 (fontified nil)) . 1613) (1613 . 1614) (#("unwrap()$0" 0 10 (fontified nil)) . 1613) (1613 . 1623) (#("unwrap()" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-2-face) fontified t) 7 8 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1613) (undo-tree-id2096 . -8)) (26044 56623 932130 672000) 0 nil])
([nil nil ((#("    let data = gst_state.downgrade(); " 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 12 (face font-lock-variable-name-face fontified t) 12 15 (fontified t) 15 25 (fontified t) 25 34 (fontified t) 34 35 (face (rainbow-delimiters-depth-2-face) fontified t) 35 36 (face (rainbow-delimiters-depth-2-face) fontified t) 36 37 (fontified t) 37 38 (fontified t)) . 1009) (undo-tree-id4042 . -38) (undo-tree-id4043 . -38) (undo-tree-id4044 . -38) (undo-tree-id4045 . -38) (undo-tree-id4046 . -37) (undo-tree-id4047 . -35) (undo-tree-id4048 . -34) (undo-tree-id4049 . -33) (undo-tree-id4050 . -32) (undo-tree-id4051 . -32) (undo-tree-id4052 . -32) (undo-tree-id4053 . -30) (undo-tree-id4054 . -29) (undo-tree-id4055 . -27) (undo-tree-id4056 . -25) (undo-tree-id4057 . -24) (undo-tree-id4058 . -22) (undo-tree-id4059 . -20) (undo-tree-id4060 . -19) (undo-tree-id4061 . -17) (undo-tree-id4062 . -16) (undo-tree-id4063 . -15) (undo-tree-id4064 . -13) (undo-tree-id4065 . -12) (undo-tree-id4066 . -11) (undo-tree-id4067 . -10) (undo-tree-id4068 . -9) (undo-tree-id4069 . -8) (undo-tree-id4070 . -7) (undo-tree-id4071 . -6) (undo-tree-id4072 . -5) (undo-tree-id4073 . -4) (undo-tree-id4074 . -3) (undo-tree-id4075 . -2) (undo-tree-id4076 . -1) (undo-tree-id4077 . -38)) nil (26044 59118 323195 540000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1621) (undo-tree-id1243 . -1) (undo-tree-id1245 . -1) 1622) ((1621 . 1622)) (26044 56623 890592 862000) 0 nil])
([nil nil ((1009 . 1013)) nil (26044 59118 323173 1000) 0 nil])
([nil nil ((#("let pipeline = &data.pipeline;" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 12 (face font-lock-variable-name-face fontified t) 12 15 (fontified t) 15 16 (face rust-ampersand-face fontified t) 16 24 (fontified t) 24 30 (fontified t)) . 1811) (t 26044 56493 627803 860000)) ((1811 . 1841)) (26044 56623 851574 585000) 0 nil])
([nil nil ((1013 . 1023)) nil (26044 59118 323172 321000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1811) (undo-tree-id1356 . -1)) ((1811 . 1812)) (26044 56623 811532 43000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -1021) (undo-tree-id4028 . -1) (undo-tree-id4029 . -1) (undo-tree-id4030 . -1) (undo-tree-id4031 . -1) (undo-tree-id4032 . -1) (undo-tree-id4033 . -1) (undo-tree-id4034 . -1) (undo-tree-id4035 . -1) (undo-tree-id4036 . -1) (undo-tree-id4037 . -1) (#("o" 0 1 (fontified t)) . -1022) (undo-tree-id4038 . -1) (undo-tree-id4039 . -1) (undo-tree-id4040 . -1) (undo-tree-id4041 . -1) 1023) nil (26044 59118 323171 51000) 0 nil])
([nil nil ((1805 . 1813) (#("        " 0 8 (fontified nil)) . 1804) (undo-tree-id1347 . -8) (undo-tree-id1349 . -8) (1804 . 1813) (#("        " 0 8 (fontified nil)) . 1803) (undo-tree-id1350 . -8) (undo-tree-id1351 . -8) (undo-tree-id1353 . -8) (undo-tree-id1355 . -8) (1811 . 1812)) ((#("
" 0 1 (fontified nil)) . 1811) (undo-tree-id2093 . -1) (undo-tree-id2094 . -1) (1803 . 1811) (#("        
" 0 8 (fontified nil) 8 9 (fontified nil)) . 1804) (undo-tree-id2095 . -8) (1804 . 1812) (#("        " 0 8 (fontified t)) . 1805)) (26044 56623 771429 979000) 0 nil])
([nil nil ((1021 . 1022)) nil (26044 59118 323161 246000) 0 nil])
([nil nil ((1804 . 1812)) ((#("        " 0 8 (fontified t)) . 1804)) (26044 56623 730543 579000) 0 nil])
([nil nil ((1022 . 1034)) nil (26044 59118 323160 662000) 0 nil])
([nil nil ((1803 . 1811)) ((#("        " 0 8 (fontified t)) . 1803) (undo-tree-id2088 . -8) (undo-tree-id2089 . -8) (undo-tree-id2090 . -8) (undo-tree-id2091 . -8) (undo-tree-id2092 . -8)) (26044 56623 691091 260000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -1032) (undo-tree-id4018 . -1) (undo-tree-id4019 . -1) (undo-tree-id4020 . -1) (undo-tree-id4021 . -1) (undo-tree-id4022 . -1) (undo-tree-id4023 . -1) (undo-tree-id4024 . -1) (#("-" 0 1 (fontified t)) . -1033) (undo-tree-id4025 . -1) (undo-tree-id4026 . -1) (undo-tree-id4027 . -1) 1034) nil (26044 59118 323159 602000) 0 nil])
([nil nil ((1811 . 1815)) ((#("let " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . 1811) (undo-tree-id2083 . -4) (undo-tree-id2084 . -4) (undo-tree-id2085 . -4) (undo-tree-id2086 . -4) (undo-tree-id2087 . -4)) (26044 56623 651269 36000) 0 nil])
([nil nil ((1032 . 1033)) nil (26044 59118 323152 750000) 0 nil])
([nil nil ((1815 . 1820)) ((#("data " 0 1 (face font-lock-variable-name-face fontified t) 1 2 (face font-lock-variable-name-face fontified t) 2 3 (face font-lock-variable-name-face fontified t) 3 4 (face font-lock-variable-name-face fontified t) 4 5 (fontified t)) . 1815) (undo-tree-id2081 . -5) (undo-tree-id2082 . -5)) (26044 56623 609866 713000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1031) (undo-tree-id3994 . -1) (undo-tree-id3995 . -1) (undo-tree-id3996 . -1) (undo-tree-id3997 . -1) (undo-tree-id3998 . -1) (undo-tree-id3999 . -1) (undo-tree-id4000 . -1) (undo-tree-id4001 . -1) (undo-tree-id4002 . -1) (undo-tree-id4003 . -1) (undo-tree-id4004 . -1) (undo-tree-id4005 . -1) (undo-tree-id4006 . -1) (undo-tree-id4007 . -1) (undo-tree-id4008 . -1) (undo-tree-id4009 . -1) (undo-tree-id4010 . -1) (undo-tree-id4011 . -1) (undo-tree-id4012 . -1) (undo-tree-id4013 . -1) (#("=" 0 1 (fontified t)) . -1032) (undo-tree-id4014 . -1) (undo-tree-id4015 . -1) (undo-tree-id4016 . -1) (undo-tree-id4017 . -1) 1033) nil (26044 59118 323151 136000) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-variable-name-face fontified t)) . -1815) (undo-tree-id1292 . -1) (undo-tree-id1294 . -1) (undo-tree-id1296 . -1) (undo-tree-id1298 . -1) (undo-tree-id1300 . -1) (undo-tree-id1302 . -1) (undo-tree-id1304 . -1) (undo-tree-id1306 . -1) (undo-tree-id1308 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -1816) (undo-tree-id1309 . -1) (undo-tree-id1311 . -1) (undo-tree-id1313 . -1) (undo-tree-id1315 . -1) (undo-tree-id1317 . -1) (undo-tree-id1319 . -1) (undo-tree-id1321 . -1) (#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -1817) (undo-tree-id1323 . -1) (undo-tree-id1325 . -1) (undo-tree-id1327 . -1) (undo-tree-id1329 . -1) (undo-tree-id1331 . -1) (undo-tree-id1333 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -1818) (undo-tree-id1334 . -1) (undo-tree-id1336 . -1) (undo-tree-id1338 . -1) (undo-tree-id1340 . -1) (#(" " 0 1 (fontified t)) . -1819) (undo-tree-id1342 . -1) (undo-tree-id1344 . -1) (undo-tree-id1346 . -1) 1820) ((1815 . 1820)) (26044 56623 570699 589000) 0 nil])
([nil nil ((1031 . 1034)) nil (26044 59118 323135 362000) 0 nil])
([nil nil ((1815 . 1824)) ((#("data = da" 0 4 (face font-lock-variable-name-face fontified t) 4 7 (fontified t) 7 9 (fontified t)) . 1815) (undo-tree-id2076 . -9) (undo-tree-id2077 . -9) (undo-tree-id2078 . -7) (undo-tree-id2079 . -7) (undo-tree-id2080 . -7)) (26044 56623 529552 934000) 0 nil])
([nil nil ((1033 . 1041) (#("p" 0 1 (fontified nil)) . 1033) (1033 . 1034) (#("pipeline" 0 8 (fontified nil)) . -1033) (1033 . 1041) (#("p" 0 1 (fontified t)) . -1033) (undo-tree-id3991 . -1) (undo-tree-id3992 . -1) (undo-tree-id3993 . -1) 1034) nil (26044 59118 323134 203000) 0 nil])
([nil nil ((1822 . 1826) (#("da" 0 2 (fontified nil)) . 1822) (1822 . 1824) (#("data" 0 4 (fontified nil)) . -1822) (1822 . 1826) (#("da" 0 2 (fontified t)) . -1822) (undo-tree-id1283 . -2) (undo-tree-id1285 . -1) (undo-tree-id1287 . -2) (undo-tree-id1289 . -2) (undo-tree-id1291 . -2) 1824) ((1822 . 1824) (#("data" 0 4 (fontified nil)) . 1822) (1822 . 1826) (#("da" 0 2 (fontified nil)) . 1822) (1822 . 1824) (#("data" 0 4 (fontified t)) . 1822) (undo-tree-id2071 . -4) (undo-tree-id2072 . -4) (undo-tree-id2073 . -4) (undo-tree-id2074 . -4) (undo-tree-id2075 . -4)) (26044 56623 491147 776000) 0 nil])
([nil nil ((1041 . 1044)) nil (26044 59118 323130 918000) 0 nil])
([nil nil ((1826 . 1827)) ((#("." 0 1 (fontified t)) . 1826) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1)) (26044 56623 450766 938000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -1043) (undo-tree-id3985 . -1) (undo-tree-id3986 . -1) (undo-tree-id3987 . -1) (undo-tree-id3988 . -1) (undo-tree-id3989 . -1) (undo-tree-id3990 . -1) 1044) nil (26044 59118 323129 727000) 0 nil])
([nil nil ((1827 . 1828)) ((#("l" 0 1 (fontified t)) . 1827) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1)) (26044 56623 409627 36000) 0 nil])
([nil nil ((1043 . 1045)) nil (26044 59118 323125 336000) 0 nil])
([nil nil ((apply yas--snippet-revive 1827 1833 #s(yas--snippet nil nil #s(yas--exit #<marker at 970 in main.rs> nil) 8 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 970 in main.rs> nil) 8 nil nil nil nil)) (1827 . 1833) (#("lock()$0" 0 8 (fontified nil)) . 1827) (1827 . 1835) (#("l" 0 1 (fontified nil)) . 1827) (1827 . 1828) (#("lock()" 0 6 (fontified nil)) . -1827) (1827 . 1833) (#("l" 0 1 (fontified t)) . -1827) (undo-tree-id1277 . -1) (undo-tree-id1279 . -1) (undo-tree-id1281 . -1) 1828) ((1827 . 1828) (#("lock()" 0 6 (fontified nil)) . 1827) (1827 . 1833) (#("l" 0 1 (fontified nil)) . 1827) (1827 . 1828) (#("lock()$0" 0 8 (fontified nil)) . 1827) (1827 . 1835) (#("lock()" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t) 5 6 (face (rainbow-delimiters-depth-4-face) fontified t)) . 1827) (undo-tree-id2059 . -6) (undo-tree-id2060 . -6) (undo-tree-id2061 . -6) (undo-tree-id2062 . -6) (undo-tree-id2063 . -6)) (26044 56623 370753 238000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -1043) (undo-tree-id3975 . -1) (undo-tree-id3976 . -1) (undo-tree-id3977 . -1) (undo-tree-id3978 . -1) (undo-tree-id3979 . -1) (undo-tree-id3980 . -1) (undo-tree-id3981 . -1) (#("w" 0 1 (fontified t)) . -1044) (undo-tree-id3982 . -1) (undo-tree-id3983 . -1) (undo-tree-id3984 . -1) 1045) nil (26044 59118 323124 152000) 0 nil])
([nil nil ((1833 . 1834)) ((#(">" 0 1 (syntax-table (1) fontified t)) . 1833) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1)) (26044 56623 329768 681000) 0 nil])
([nil nil ((1043 . 1046)) nil (26044 59118 323117 82000) 0 nil])
([nil nil ((#(">" 0 1 (syntax-table (1) fontified t)) . -1833) (undo-tree-id1269 . -1) (undo-tree-id1271 . -1) (undo-tree-id1273 . -1) (undo-tree-id1275 . -1) 1834) ((1833 . 1834)) (26044 56623 290475 30000) 0 nil])
([nil nil ((1046 . 1047)) nil (26044 59118 323116 376000) 0 nil])
([nil nil ((1833 . 1835)) ((#("?;" 0 1 (face rust-question-mark fontified t) 1 2 (fontified t)) . 1833) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1)) (26044 56623 250666 520000) 0 nil])
([nil nil ((apply yas--snippet-revive 1042 1053 #s(yas--snippet nil nil #s(yas--exit 1053 nil) 30 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1053 nil) 30 nil nil nil nil)) (1042 . 1053) (#("downgrade()$0" 0 13 (fontified nil)) . 1042) (1042 . 1055) (#("downg" 0 5 (fontified nil)) . 1042) (1042 . 1047) (#("downgrade() (as Downgrade)" 0 26 (fontified nil)) . -1042) (1042 . 1068) (#("downg" 0 5 (fontified t)) . -1042) (undo-tree-id3941 . -5) (undo-tree-id3942 . -1) (undo-tree-id3943 . -1) (undo-tree-id3944 . -1) (undo-tree-id3945 . -1) (undo-tree-id3946 . -1) (undo-tree-id3947 . -1) (undo-tree-id3948 . -1) (undo-tree-id3949 . -1) (undo-tree-id3950 . -1) (undo-tree-id3951 . -1) (undo-tree-id3952 . -1) (undo-tree-id3953 . -1) (undo-tree-id3954 . -1) (undo-tree-id3955 . -1) (undo-tree-id3956 . -1) (undo-tree-id3957 . -1) (undo-tree-id3958 . -1) (undo-tree-id3959 . -1) (undo-tree-id3960 . -1) (undo-tree-id3961 . -1) (undo-tree-id3962 . -2) (undo-tree-id3963 . -2) (undo-tree-id3964 . -3) (undo-tree-id3965 . -3) (undo-tree-id3966 . -4) (undo-tree-id3967 . -4) (undo-tree-id3968 . -4) (undo-tree-id3969 . -4) (undo-tree-id3970 . -5) (undo-tree-id3971 . -5) (undo-tree-id3972 . -5) (undo-tree-id3973 . -5) (undo-tree-id3974 . -5) 1047) nil (26044 59118 323112 737000) 0 nil])
([nil nil ((#("?" 0 1 (face rust-question-mark fontified t)) . -1833) (undo-tree-id1365 . -1) (undo-tree-id1367 . -1) (undo-tree-id1369 . -1) (undo-tree-id1371 . -1) 1834 (t 26044 56518 291138 685000)) ((1833 . 1834)) (26044 56623 210146 95000) 0 nil])
([nil nil ((1053 . 1054)) nil (26044 59118 323079 128000) 0 nil])
([nil nil ((1833 . 1835)) ((#(".u" 0 1 (fontified t) 1 2 (fontified t)) . 1833) (undo-tree-id2051 . -2) (undo-tree-id2052 . -2) (undo-tree-id2053 . -1) (undo-tree-id2054 . -2)) (26044 56623 170843 7000) 0 nil])
([nil nil ((#("borrow()." 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-2-face) fontified t) 7 8 (face (rainbow-delimiters-depth-2-face) fontified t) 8 9 (fontified t)) . -1112) (undo-tree-id4228 . -9) (undo-tree-id4229 . -9) (undo-tree-id4230 . -9) (undo-tree-id4231 . -9) (undo-tree-id4232 . -9) (undo-tree-id4233 . -9) 1121 (t 26044 59118 337964 580000)) nil (26044 59136 9788 641000) 0 nil])
([nil nil ((apply yas--snippet-revive 1834 1842 #s(yas--snippet nil nil #s(yas--exit #<marker at 970 in main.rs> nil) 9 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 970 in main.rs> nil) 9 nil nil nil nil)) (1834 . 1842) (#("unwrap()$0" 0 10 (fontified nil)) . 1834) (1834 . 1844) (#("u" 0 1 (fontified nil)) . 1834) (1834 . 1835) (#("unwrap()" 0 8 (fontified nil)) . -1834) (1834 . 1842) (#("u" 0 1 (fontified t)) . -1834) (undo-tree-id1359 . -1) (undo-tree-id1361 . -1) (undo-tree-id1363 . -1) 1835) ((1834 . 1835) (#("unwrap()" 0 8 (fontified nil)) . 1834) (1834 . 1842) (#("u" 0 1 (fontified nil)) . 1834) (1834 . 1835) (#("unwrap()$0" 0 10 (fontified nil)) . 1834) (1834 . 1844) (#("unwrap()" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-4-face) fontified t) 7 8 (face (rainbow-delimiters-depth-4-face) fontified t)) . 1834) (undo-tree-id2050 . -8)) (26044 56623 129826 822000) 0 nil])
([nil nil ((#("state." 0 6 (fontified t)) . -1106) (undo-tree-id4215 . -5) (undo-tree-id4216 . -5) (undo-tree-id4217 . -6) (undo-tree-id4218 . -6) (undo-tree-id4219 . -6) (undo-tree-id4220 . -6) (undo-tree-id4221 . -6) (undo-tree-id4222 . -6) (undo-tree-id4223 . -6) (undo-tree-id4224 . -6) (undo-tree-id4225 . -6) (undo-tree-id4226 . -6) (undo-tree-id4227 . -6) 1112) nil (26044 59136 9783 747000) 0 nil])
([nil nil ((6888 . 6896) (#("        " 0 8 (fontified nil)) . 6887) (undo-tree-id1391 . -8) (undo-tree-id1393 . -8) (6886 . 6896) (t 26044 56523 224472 319000)) ((#("
        
" 0 1 (fontified t) 1 9 (fontified nil) 9 10 (fontified nil)) . 6886) (undo-tree-id2041 . -10) (undo-tree-id2042 . -10) (undo-tree-id2043 . -10) (undo-tree-id2044 . -10) (undo-tree-id2045 . -10) (6887 . 6895) (#("        " 0 8 (fontified t)) . 6888) (undo-tree-id2046 . -8) (undo-tree-id2047 . -8) (undo-tree-id2048 . -8) (undo-tree-id2049 . -8)) (26044 56623 90519 247000) 0 nil])
([nil nil ((1106 . 1107)) nil (26044 59136 9774 676000) 0 nil])
([nil nil ((6896 . 6898)) ((#("dr" 0 2 (fontified t)) . 6896) (undo-tree-id2039 . -2) (undo-tree-id2040 . -2)) (26044 56623 50856 932000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -1106) (undo-tree-id4210 . -1) (undo-tree-id4211 . -1) (undo-tree-id4212 . -1) (undo-tree-id4213 . -1) (undo-tree-id4214 . -1) 1107) nil (26044 59136 9773 110000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6901 6901 nil nil nil t #s(yas--exit 6903 nil))) #s(yas--exit 6903 nil) 10 nil #s(yas--field 1 6901 6901 nil nil nil t #s(yas--exit 6903 nil)) nil nil)) (6896 . 6903) (#("drop(${1:x})$0" 0 14 (fontified nil)) . 6896) (6896 . 6910) (#("dr" 0 2 (fontified nil)) . 6896) (6896 . 6898) (#("drop(…)" 0 7 (fontified nil)) . -6896) (6896 . 6903) (#("dr" 0 2 (fontified t)) . -6896) (undo-tree-id1384 . -2) (undo-tree-id1386 . -1) (undo-tree-id1388 . -2) (undo-tree-id1390 . -2) 6898) ((6896 . 6898) (#("drop(…)" 0 7 (fontified nil)) . 6896) (6896 . 6903) (#("dr" 0 2 (fontified nil)) . 6896) (6896 . 6898) (#("drop(${1:x})$0" 0 14 (fontified nil)) . 6896) (6896 . 6910) (#("drop(x)" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t) 5 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-4-face) fontified t)) . 6896) (undo-tree-id2035 . -5) (undo-tree-id2036 . -5) (undo-tree-id2037 . -5) (undo-tree-id2038 . -7) (apply yas--snippet-revive 6896 6903 #s(yas--snippet nil (#s(yas--field 1 6901 6901 nil nil nil t #s(yas--exit 6903 nil))) #s(yas--exit 6903 nil) 10 nil #s(yas--field 1 6901 6901 nil nil nil t #s(yas--exit 6903 nil)) nil nil))) (26044 56623 8824 625000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -1102) (undo-tree-id4090 . -1) (undo-tree-id4091 . -1) (undo-tree-id4092 . -1) (undo-tree-id4093 . -1) (undo-tree-id4094 . -1) (undo-tree-id4095 . -1) (undo-tree-id4096 . -1) (undo-tree-id4097 . -1) (undo-tree-id4098 . -1) (undo-tree-id4099 . -1) (undo-tree-id4100 . -1) (undo-tree-id4101 . -1) (undo-tree-id4102 . -1) (undo-tree-id4103 . -1) (undo-tree-id4104 . -1) (undo-tree-id4105 . -1) (undo-tree-id4106 . -1) (undo-tree-id4107 . -1) (undo-tree-id4108 . -1) (undo-tree-id4109 . -1) (undo-tree-id4110 . -1) (undo-tree-id4111 . -1) (undo-tree-id4112 . -1) (undo-tree-id4113 . -1) (undo-tree-id4114 . -1) (undo-tree-id4115 . -1) (undo-tree-id4116 . -1) (undo-tree-id4117 . -1) (undo-tree-id4118 . -1) (undo-tree-id4119 . -1) (undo-tree-id4120 . -1) (undo-tree-id4121 . -1) (undo-tree-id4122 . -1) (#("s" 0 1 (fontified t)) . -1103) (undo-tree-id4123 . -1) (undo-tree-id4124 . -1) (undo-tree-id4125 . -1) (undo-tree-id4126 . -1) (undo-tree-id4127 . -1) (undo-tree-id4128 . -1) (undo-tree-id4129 . -1) (undo-tree-id4130 . -1) (undo-tree-id4131 . -1) (undo-tree-id4132 . -1) (undo-tree-id4133 . -1) (undo-tree-id4134 . -1) (undo-tree-id4135 . -1) (undo-tree-id4136 . -1) (undo-tree-id4137 . -1) (undo-tree-id4138 . -1) (undo-tree-id4139 . -1) (undo-tree-id4140 . -1) (undo-tree-id4141 . -1) (undo-tree-id4142 . -1) (undo-tree-id4143 . -1) (undo-tree-id4144 . -1) (undo-tree-id4145 . -1) (undo-tree-id4146 . -1) (undo-tree-id4147 . -1) (undo-tree-id4148 . -1) (undo-tree-id4149 . -1) (undo-tree-id4150 . -1) (undo-tree-id4151 . -1) (undo-tree-id4152 . -1) (undo-tree-id4153 . -1) (#("t" 0 1 (fontified t)) . -1104) (undo-tree-id4154 . -1) (undo-tree-id4155 . -1) (undo-tree-id4156 . -1) (undo-tree-id4157 . -1) (undo-tree-id4158 . -1) (undo-tree-id4159 . -1) (undo-tree-id4160 . -1) (undo-tree-id4161 . -1) (undo-tree-id4162 . -1) (undo-tree-id4163 . -1) (undo-tree-id4164 . -1) (undo-tree-id4165 . -1) (undo-tree-id4166 . -1) (undo-tree-id4167 . -1) (undo-tree-id4168 . -1) (undo-tree-id4169 . -1) (undo-tree-id4170 . -1) (undo-tree-id4171 . -1) (undo-tree-id4172 . -1) (undo-tree-id4173 . -1) (undo-tree-id4174 . -1) (undo-tree-id4175 . -1) (undo-tree-id4176 . -1) (undo-tree-id4177 . -1) (undo-tree-id4178 . -1) (undo-tree-id4179 . -1) (undo-tree-id4180 . -1) (undo-tree-id4181 . -1) (undo-tree-id4182 . -1) (#("_" 0 1 (fontified t)) . -1105) (undo-tree-id4183 . -1) (undo-tree-id4184 . -1) (undo-tree-id4185 . -1) (undo-tree-id4186 . -1) (undo-tree-id4187 . -1) (undo-tree-id4188 . -1) (undo-tree-id4189 . -1) (undo-tree-id4190 . -1) (undo-tree-id4191 . -1) (undo-tree-id4192 . -1) (undo-tree-id4193 . -1) (undo-tree-id4194 . -1) (undo-tree-id4195 . -1) (undo-tree-id4196 . -1) (undo-tree-id4197 . -1) (undo-tree-id4198 . -1) (undo-tree-id4199 . -1) (undo-tree-id4200 . -1) (undo-tree-id4201 . -1) (undo-tree-id4202 . -1) (undo-tree-id4203 . -1) (undo-tree-id4204 . -1) (undo-tree-id4205 . -1) (undo-tree-id4206 . -1) (undo-tree-id4207 . -1) (undo-tree-id4208 . -1) (undo-tree-id4209 . -1) 1106) nil (26044 59136 9762 33000) 0 nil])
([nil nil ((#("x" 0 1 (fontified nil)) . 6902) (6901 . 6902)) ((#("d" 0 1 (fontified nil)) . 6901) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (6902 . 6903)) (26044 56622 971038 293000) 0 nil])
([nil nil ((#("data" 0 4 (fontified t)) . -1306) (undo-tree-id4241 . -4) (undo-tree-id4242 . -4) (undo-tree-id4243 . -4) (undo-tree-id4244 . -4) (undo-tree-id4245 . -4) (undo-tree-id4246 . -4) (undo-tree-id4247 . -4) (undo-tree-id4248 . -4) (undo-tree-id4249 . -4) 1310 (t 26044 59136 54632 333000)) nil (26044 59142 456208 62000) 0 nil])
([nil nil ((6901 . 6905) (#("d" 0 1 (fontified nil)) . 6901) (6901 . 6902) (#("data" 0 4 (fontified nil)) . -6901) (6901 . 6905) (#("d" 0 1 (fontified t)) . -6901) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1378 . -1) (undo-tree-id1380 . -1) (undo-tree-id1382 . -1) 6902) ((6901 . 6902) (#("data" 0 4 (fontified nil)) . 6901) (6901 . 6905) (#("d" 0 1 (fontified nil)) . 6901) (6901 . 6902) (#("data" 0 4 (fontified t)) . 6901) (undo-tree-id2032 . -4)) (26044 56622 928544 378000) 0 nil])
([nil nil ((1306 . 1307)) nil (26044 59142 456200 21000) 0 nil])
([nil nil ((apply yas--snippet-revive 6896 6906 #s(yas--snippet nil (#s(yas--field 1 6901 6901 nil nil nil t #s(yas--exit 6903 nil))) #s(yas--exit 6903 nil) 10 nil #s(yas--field 1 6901 6901 nil nil nil t #s(yas--exit 6903 nil)) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6901 6901 nil nil nil t #s(yas--exit 6903 nil))) #s(yas--exit 6903 nil) 10 nil #s(yas--field 1 6901 6901 nil nil nil t #s(yas--exit 6903 nil)) nil nil))) (26044 56622 889049 111000) 0 nil])
([nil nil ((1306 . 1319) (#("p" 0 1 (fontified nil)) . 1306) (1306 . 1307) (#("pipeline_weak" 0 13 (fontified nil)) . -1306) (1306 . 1319) (#("p" 0 1 (fontified t)) . -1306) (undo-tree-id4234 . -1) (undo-tree-id4235 . -1) (undo-tree-id4236 . -1) (undo-tree-id4237 . -1) (undo-tree-id4238 . -1) (undo-tree-id4239 . -1) (undo-tree-id4240 . -1) 1307) nil (26044 59142 456195 927000) 0 nil])
([nil nil ((6906 . 6907)) ((#(";" 0 1 (fontified t)) . 6906)) (26044 56622 848438 723000) 0 nil])
([nil nil ((#("downgrade()" 0 9 (fontified t) 9 10 (face (rainbow-delimiters-depth-2-face) fontified t) 10 11 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1042) (undo-tree-id4455 . -4) (undo-tree-id4456 . -4) (undo-tree-id4457 . -4) (undo-tree-id4458 . -3) (undo-tree-id4459 . -11) (undo-tree-id4460 . -3) (undo-tree-id4461 . -3) (undo-tree-id4462 . -3) (undo-tree-id4463 . -3) (undo-tree-id4464 . -3) (undo-tree-id4465 . -3) (undo-tree-id4466 . -3) (undo-tree-id4467 . -3) (undo-tree-id4468 . -3) (undo-tree-id4469 . -3) (undo-tree-id4470 . -3) (undo-tree-id4471 . -3) (undo-tree-id4472 . -3) (undo-tree-id4473 . -3) (undo-tree-id4474 . -3) (undo-tree-id4475 . -3) (undo-tree-id4476 . -3) (undo-tree-id4477 . -3) (undo-tree-id4478 . -3) (undo-tree-id4479 . -3) (undo-tree-id4480 . -3) (undo-tree-id4481 . -3) (undo-tree-id4482 . -3) (undo-tree-id4483 . -3) (undo-tree-id4484 . -3) (undo-tree-id4485 . -3) (undo-tree-id4486 . -3) (undo-tree-id4487 . -3) (undo-tree-id4488 . -3) (undo-tree-id4489 . -3) (undo-tree-id4490 . -3) (undo-tree-id4491 . -3) (undo-tree-id4492 . -3) (undo-tree-id4493 . -3) (undo-tree-id4494 . -3) (undo-tree-id4495 . -3) (undo-tree-id4496 . -3) (undo-tree-id4497 . -3) (undo-tree-id4498 . -3) (undo-tree-id4499 . -3) (undo-tree-id4500 . -3) (undo-tree-id4501 . -3) (undo-tree-id4502 . -3) (undo-tree-id4503 . -3) (undo-tree-id4504 . -3) (undo-tree-id4505 . -3) (undo-tree-id4506 . -3) (undo-tree-id4507 . -3) (undo-tree-id4508 . -3) (undo-tree-id4509 . -3) (undo-tree-id4510 . -3) (undo-tree-id4511 . -3) (undo-tree-id4512 . -3) (undo-tree-id4513 . -3) (undo-tree-id4514 . -3) (undo-tree-id4515 . -3) (undo-tree-id4516 . -3) (undo-tree-id4517 . -3) (undo-tree-id4518 . -3) (undo-tree-id4519 . -3) (undo-tree-id4520 . -3) (undo-tree-id4521 . -3) (undo-tree-id4522 . -3) (undo-tree-id4523 . -11) (undo-tree-id4524 . -11) (undo-tree-id4525 . -11) (undo-tree-id4526 . -11) (undo-tree-id4527 . -11) (undo-tree-id4528 . -11) (undo-tree-id4529 . -11) (undo-tree-id4530 . -11) 1053 (t 26044 59142 471299 394000)) nil (26044 59233 514710 810000) 0 nil])
([nil nil ((6956 . 6957) (t 26044 56538 797806 598000)) ((#(" " 0 1 (fontified t)) . 6956) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1)) (26044 56622 808928 945000) 0 nil])
([nil nil ((#("pipeline." 0 9 (fontified t)) . -1033) (undo-tree-id4372 . -9) (undo-tree-id4373 . -9) (undo-tree-id4374 . -9) (undo-tree-id4375 . -9) (undo-tree-id4376 . -9) (undo-tree-id4377 . -9) (undo-tree-id4378 . -9) (undo-tree-id4379 . -9) (undo-tree-id4380 . -9) (undo-tree-id4381 . -9) (undo-tree-id4382 . -9) (undo-tree-id4383 . -9) (undo-tree-id4384 . -9) (undo-tree-id4385 . -9) (undo-tree-id4386 . -9) (undo-tree-id4387 . -9) (undo-tree-id4388 . -9) (undo-tree-id4389 . -9) (undo-tree-id4390 . -9) (undo-tree-id4391 . -9) (undo-tree-id4392 . -9) (undo-tree-id4393 . -9) (undo-tree-id4394 . -9) (undo-tree-id4395 . -9) (undo-tree-id4396 . -9) (undo-tree-id4397 . -9) (undo-tree-id4398 . -9) (undo-tree-id4399 . -9) (undo-tree-id4400 . -9) (undo-tree-id4401 . -9) (undo-tree-id4402 . -9) (undo-tree-id4403 . -9) (undo-tree-id4404 . -9) (undo-tree-id4405 . -9) (undo-tree-id4406 . -9) (undo-tree-id4407 . -9) (undo-tree-id4408 . -9) (undo-tree-id4409 . -9) (undo-tree-id4410 . -9) (undo-tree-id4411 . -9) (undo-tree-id4412 . -9) (undo-tree-id4413 . -9) (undo-tree-id4414 . -9) (undo-tree-id4415 . -9) (undo-tree-id4416 . -9) (undo-tree-id4417 . -9) (undo-tree-id4418 . -9) (undo-tree-id4419 . -9) (undo-tree-id4420 . -9) (undo-tree-id4421 . -9) (undo-tree-id4422 . -9) (undo-tree-id4423 . -9) (undo-tree-id4424 . -9) (undo-tree-id4425 . -9) (undo-tree-id4426 . -9) (undo-tree-id4427 . -9) (undo-tree-id4428 . -9) (undo-tree-id4429 . -9) (undo-tree-id4430 . -9) (undo-tree-id4431 . -9) (undo-tree-id4432 . -9) (undo-tree-id4433 . -9) (undo-tree-id4434 . -9) (undo-tree-id4435 . -9) (undo-tree-id4436 . -9) (undo-tree-id4437 . -9) (undo-tree-id4438 . -9) (undo-tree-id4439 . -9) (undo-tree-id4440 . -9) (undo-tree-id4441 . -9) (undo-tree-id4442 . -9) (undo-tree-id4443 . -9) (undo-tree-id4444 . -9) (undo-tree-id4445 . -9) (undo-tree-id4446 . -9) (undo-tree-id4447 . -9) (undo-tree-id4448 . -9) (undo-tree-id4449 . -9) (undo-tree-id4450 . -9) (undo-tree-id4451 . -9) (undo-tree-id4452 . -9) (undo-tree-id4453 . -9) (undo-tree-id4454 . -9) 1042) nil (26044 59233 514617 412000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -6956) (undo-tree-id1763 . -1) (undo-tree-id1765 . -1) (undo-tree-id1767 . -1) (undo-tree-id1769 . -1) 6957) ((6956 . 6957)) (26044 56622 769268 174000) 0 nil])
([nil nil ((1033 . 1039)) nil (26044 59233 514559 492000) 0 nil])
([nil nil ((6942 . 6947)) ((#("
    " 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . 6942) (undo-tree-id2028 . -5) (undo-tree-id2029 . -5)) (26044 56622 728597 309000) 0 nil])
([nil nil ((#("W" 0 1 (face font-lock-type-face fontified t)) . -1038) (undo-tree-id4364 . -1) (undo-tree-id4365 . -1) (undo-tree-id4366 . -1) (undo-tree-id4367 . -1) (undo-tree-id4368 . -1) (undo-tree-id4369 . -1) (undo-tree-id4370 . -1) (undo-tree-id4371 . -1) 1039) nil (26044 59233 514558 604000) 0 nil])
([nil nil ((6947 . 6949)) ((#(";l" 0 1 (fontified t) 1 2 (fontified t)) . 6947) (undo-tree-id2026 . -2) (undo-tree-id2027 . -2)) (26044 56622 688760 705000) 0 nil])
([nil nil ((1038 . 1039)) nil (26044 59233 514552 290000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -6947) (undo-tree-id1750 . -1) (undo-tree-id1752 . -1) (undo-tree-id1754 . -1) (undo-tree-id1756 . -1) (#("l" 0 1 (fontified t)) . -6948) (undo-tree-id1758 . -1) (undo-tree-id1760 . -1) (undo-tree-id1762 . -1) 6949) ((6947 . 6949)) (26044 56622 649708 950000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -1038) (undo-tree-id4359 . -1) (undo-tree-id4360 . -1) (undo-tree-id4361 . -1) (undo-tree-id4362 . -1) (undo-tree-id4363 . -1) 1039) nil (26044 59233 514551 330000) 0 nil])
([nil nil ((6947 . 6954)) ((#("let gst" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 7 (face font-lock-variable-name-face fontified t)) . 6947) (undo-tree-id2024 . -7) (undo-tree-id2025 . -7)) (26044 56622 608924 126000) 0 nil])
([nil nil ((1038 . 1039)) nil (26044 59233 514547 305000) 0 nil])
([nil nil ((#("gst" 0 3 (face font-lock-variable-name-face fontified t)) . -6951) (undo-tree-id1735 . -3) (undo-tree-id1737 . -1) (undo-tree-id1739 . -1) (undo-tree-id1741 . -2) (undo-tree-id1743 . -2) (undo-tree-id1745 . -3) (undo-tree-id1747 . -3) (undo-tree-id1749 . -3) 6954) ((6951 . 6954)) (26044 56622 567478 926000) 0 nil])
([nil nil ((1038 . 1044) (#("b" 0 1 (fontified nil)) . 1038) (1038 . 1039) (#("borrow" 0 6 (fontified nil)) . -1038) (1038 . 1044) (#("b" 0 1 (fontified t)) . -1038) (undo-tree-id4353 . -1) (undo-tree-id4354 . -1) (undo-tree-id4355 . -1) (undo-tree-id4356 . -1) (undo-tree-id4357 . -1) (undo-tree-id4358 . -1) 1039) nil (26044 59233 514546 136000) 0 nil])
([nil nil ((#("let " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -6947) (undo-tree-id1702 . -4) (undo-tree-id1704 . -1) (undo-tree-id1706 . -2) (undo-tree-id1708 . -3) (undo-tree-id1710 . -4) (undo-tree-id1712 . -4) (undo-tree-id1714 . -4) (undo-tree-id1716 . -4) (undo-tree-id1718 . -4) (undo-tree-id1720 . -4) (undo-tree-id1722 . -4) (undo-tree-id1724 . -4) (undo-tree-id1726 . -4) (undo-tree-id1728 . -4) (undo-tree-id1730 . -4) (undo-tree-id1732 . -4) (undo-tree-id1734 . -4) 6951) ((6947 . 6951)) (26044 56622 527296 761000) 0 nil])
([nil nil ((1044 . 1047)) nil (26044 59233 514540 956000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -6942) (undo-tree-id1421 . -1) (undo-tree-id1423 . -1) (undo-tree-id1425 . -1) (undo-tree-id1427 . -1) (undo-tree-id1429 . -1) (undo-tree-id1431 . -1) (undo-tree-id1433 . -1) (undo-tree-id1435 . -1) (undo-tree-id1437 . -1) (undo-tree-id1439 . -1) (undo-tree-id1441 . -1) (undo-tree-id1443 . -1) (undo-tree-id1445 . -1) (undo-tree-id1447 . -1) (undo-tree-id1449 . -1) (undo-tree-id1451 . -1) (undo-tree-id1453 . -1) (undo-tree-id1455 . -1) (undo-tree-id1457 . -1) (undo-tree-id1459 . -1) (undo-tree-id1461 . -1) (undo-tree-id1463 . -1) (undo-tree-id1465 . -1) (undo-tree-id1467 . -1) (undo-tree-id1469 . -1) (undo-tree-id1471 . -1) (undo-tree-id1473 . -1) (undo-tree-id1475 . -1) (undo-tree-id1477 . -1) (undo-tree-id1479 . -1) (undo-tree-id1481 . -1) (undo-tree-id1483 . -1) (#(" " 0 1 (fontified t)) . -6943) (undo-tree-id1484 . -1) (undo-tree-id1486 . -1) (undo-tree-id1488 . -1) (undo-tree-id1490 . -1) (undo-tree-id1492 . -1) (undo-tree-id1494 . -1) (undo-tree-id1496 . -1) (undo-tree-id1498 . -1) (undo-tree-id1500 . -1) (undo-tree-id1502 . -1) (undo-tree-id1504 . -1) (undo-tree-id1506 . -1) (undo-tree-id1508 . -1) (undo-tree-id1510 . -1) (undo-tree-id1512 . -1) (undo-tree-id1514 . -1) (undo-tree-id1516 . -1) (undo-tree-id1518 . -1) (undo-tree-id1520 . -1) (undo-tree-id1522 . -1) (undo-tree-id1524 . -1) (undo-tree-id1526 . -1) (undo-tree-id1528 . -1) (undo-tree-id1530 . -1) (undo-tree-id1532 . -1) (undo-tree-id1534 . -1) (undo-tree-id1536 . -1) (undo-tree-id1538 . -1) (#(" " 0 1 (fontified t)) . -6944) (undo-tree-id1540 . -1) (undo-tree-id1542 . -1) (undo-tree-id1544 . -1) (undo-tree-id1546 . -1) (undo-tree-id1548 . -1) (undo-tree-id1550 . -1) (undo-tree-id1552 . -1) (undo-tree-id1554 . -1) (undo-tree-id1556 . -1) (undo-tree-id1558 . -1) (undo-tree-id1560 . -1) (undo-tree-id1562 . -1) (undo-tree-id1564 . -1) (undo-tree-id1566 . -1) (undo-tree-id1568 . -1) (undo-tree-id1570 . -1) (undo-tree-id1572 . -1) (undo-tree-id1574 . -1) (undo-tree-id1576 . -1) (undo-tree-id1578 . -1) (undo-tree-id1580 . -1) (undo-tree-id1582 . -1) (undo-tree-id1584 . -1) (undo-tree-id1586 . -1) (undo-tree-id1588 . -1) (undo-tree-id1590 . -1) (undo-tree-id1592 . -1) (undo-tree-id1594 . -1) (#(" " 0 1 (fontified t)) . -6945) (undo-tree-id1595 . -1) (undo-tree-id1597 . -1) (undo-tree-id1599 . -1) (undo-tree-id1601 . -1) (undo-tree-id1603 . -1) (undo-tree-id1605 . -1) (undo-tree-id1607 . -1) (undo-tree-id1609 . -1) (undo-tree-id1611 . -1) (undo-tree-id1613 . -1) (undo-tree-id1615 . -1) (undo-tree-id1617 . -1) (undo-tree-id1619 . -1) (undo-tree-id1621 . -1) (undo-tree-id1623 . -1) (undo-tree-id1625 . -1) (undo-tree-id1627 . -1) (undo-tree-id1629 . -1) (undo-tree-id1631 . -1) (undo-tree-id1633 . -1) (undo-tree-id1635 . -1) (undo-tree-id1637 . -1) (undo-tree-id1639 . -1) (undo-tree-id1641 . -1) (undo-tree-id1643 . -1) (undo-tree-id1645 . -1) (undo-tree-id1647 . -1) (#(" " 0 1 (fontified t)) . -6946) (undo-tree-id1649 . -1) (undo-tree-id1651 . -1) (undo-tree-id1653 . -1) (undo-tree-id1655 . -1) (undo-tree-id1657 . -1) (undo-tree-id1659 . -1) (undo-tree-id1661 . -1) (undo-tree-id1663 . -1) (undo-tree-id1665 . -1) (undo-tree-id1667 . -1) (undo-tree-id1669 . -1) (undo-tree-id1671 . -1) (undo-tree-id1673 . -1) (undo-tree-id1675 . -1) (undo-tree-id1677 . -1) (undo-tree-id1679 . -1) (undo-tree-id1681 . -1) (undo-tree-id1683 . -1) (undo-tree-id1685 . -1) (undo-tree-id1687 . -1) (undo-tree-id1689 . -1) (undo-tree-id1691 . -1) (undo-tree-id1693 . -1) (undo-tree-id1695 . -1) (undo-tree-id1697 . -1) (undo-tree-id1699 . -1) (undo-tree-id1701 . -1) 6947) ((6942 . 6947)) (26044 56622 487762 498000) 0 nil])
([nil nil ((#("W" 0 1 (face font-lock-type-face fontified t)) . -1046) (undo-tree-id4346 . -1) (undo-tree-id4347 . -1) (undo-tree-id4348 . -1) (undo-tree-id4349 . -1) (undo-tree-id4350 . -1) (undo-tree-id4351 . -1) (undo-tree-id4352 . -1) 1047) nil (26044 59233 514539 987000) 0 nil])
([nil nil ((6956 . 6958)) ((#(". " 0 1 (fontified t) 1 2 (fontified t)) . 6956) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1)) (26044 56622 447020 220000) 0 nil])
([nil nil ((#("borrow::" 0 6 (face font-lock-constant-face fontified t) 6 8 (fontified t)) . -1038) (undo-tree-id4329 . -8) (undo-tree-id4330 . -6) (undo-tree-id4331 . -6) (undo-tree-id4332 . -6) (undo-tree-id4333 . -7) (undo-tree-id4334 . -7) (undo-tree-id4335 . -8) (undo-tree-id4336 . -8) (undo-tree-id4337 . -8) (undo-tree-id4338 . -8) (undo-tree-id4339 . -8) (undo-tree-id4340 . -8) (undo-tree-id4341 . -8) (undo-tree-id4342 . -8) (undo-tree-id4343 . -8) (undo-tree-id4344 . -8) (undo-tree-id4345 . -8) 1046) nil (26044 59233 514534 407000) 0 nil])
([nil nil ((6957 . 6958)) ((#("l" 0 1 (fontified t)) . 6957) (undo-tree-id2017 . -1) (undo-tree-id2018 . -1)) (26044 56622 408313 16000) 0 nil])
([nil nil ((1038 . 1040)) nil (26044 59249 82047 204000) 0 nil])
([nil nil ((apply yas--snippet-revive 6957 6963 #s(yas--snippet nil nil #s(yas--exit #<marker at 5735 in main.rs> nil) 11 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 5735 in main.rs> nil) 11 nil nil nil nil)) (6957 . 6963) (#("lock()$0" 0 8 (fontified nil)) . 6957) (6957 . 6965) (#("l" 0 1 (fontified nil)) . 6957) (6957 . 6958) (#("lock()" 0 6 (fontified nil)) . -6957) (6957 . 6963) (#("l" 0 1 (fontified t)) . -6957) (undo-tree-id1416 . -1) (undo-tree-id1418 . -1) (undo-tree-id1420 . -1) 6958) ((6957 . 6958) (#("lock()" 0 6 (fontified nil)) . 6957) (6957 . 6963) (#("l" 0 1 (fontified nil)) . 6957) (6957 . 6958) (#("lock()$0" 0 8 (fontified nil)) . 6957) (6957 . 6965) (#("lock()" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-2-face) fontified t) 5 6 (face (rainbow-delimiters-depth-2-face) fontified t)) . 6957) (undo-tree-id2012 . -6) (undo-tree-id2013 . -6) (undo-tree-id2014 . -6) (undo-tree-id2015 . -6) (undo-tree-id2016 . -6)) (26044 56622 367576 239000) 0 nil])
([nil nil ((#("rd" 0 1 (fontified t) 1 2 (fontified t)) . -1038) (undo-tree-id4835 . -1) (undo-tree-id4836 . -2) (undo-tree-id4837 . -1) (undo-tree-id4838 . -1) (undo-tree-id4839 . -1) (undo-tree-id4840 . -1) (undo-tree-id4841 . -1) (undo-tree-id4842 . -1) (undo-tree-id4843 . -1) (undo-tree-id4844 . -1) (undo-tree-id4845 . -1) (undo-tree-id4846 . -1) (undo-tree-id4847 . -1) (undo-tree-id4848 . -1) (undo-tree-id4849 . -1) (undo-tree-id4850 . -1) (undo-tree-id4851 . -1) (undo-tree-id4852 . -1) (undo-tree-id4853 . -1) (undo-tree-id4854 . -1) (undo-tree-id4855 . -1) (undo-tree-id4856 . -1) (undo-tree-id4857 . -1) (undo-tree-id4858 . -1) (undo-tree-id4859 . -1) (undo-tree-id4860 . -1) (undo-tree-id4861 . -1) (undo-tree-id4862 . -1) (undo-tree-id4863 . -1) (undo-tree-id4864 . -1) (undo-tree-id4865 . -1) (undo-tree-id4866 . -1) (undo-tree-id4867 . -1) (undo-tree-id4868 . -1) (undo-tree-id4869 . -1) (undo-tree-id4870 . -1) (undo-tree-id4871 . -1) (undo-tree-id4872 . -1) (undo-tree-id4873 . -1) (undo-tree-id4874 . -1) (undo-tree-id4875 . -1) (undo-tree-id4876 . -1) (undo-tree-id4877 . -1) (undo-tree-id4878 . -1) (undo-tree-id4879 . -1) (undo-tree-id4880 . -1) (undo-tree-id4881 . -2) (undo-tree-id4882 . -2) (undo-tree-id4883 . -2) (undo-tree-id4884 . -2) (undo-tree-id4885 . -2) 1040) nil (26044 59264 516814 829000) 0 nil] [nil nil ((#("d" 0 1 (fontified t)) . -1039) (undo-tree-id4324 . -1) (undo-tree-id4326 . -1) (undo-tree-id4328 . -1) 1040) ((1039 . 1040)) (26044 59248 926281 518000) 0 nil])
([nil nil ((6963 . 6965)) ((#(".y" 0 1 (fontified t) 1 2 (fontified t)) . 6963) (undo-tree-id2008 . -2) (undo-tree-id2009 . -2) (undo-tree-id2010 . -1) (undo-tree-id2011 . -1)) (26044 56622 327288 907000) 0 nil])
([nil nil ((#("std::" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t)) . -1033) (undo-tree-id4782 . -5) (undo-tree-id4783 . -5) (undo-tree-id4784 . -5) (undo-tree-id4785 . -5) (undo-tree-id4786 . -5) (undo-tree-id4787 . -5) (undo-tree-id4788 . -5) (undo-tree-id4789 . -5) (undo-tree-id4790 . -5) (undo-tree-id4791 . -5) (undo-tree-id4792 . -5) (undo-tree-id4793 . -5) (undo-tree-id4794 . -5) (undo-tree-id4795 . -5) (undo-tree-id4796 . -5) (undo-tree-id4797 . -5) (undo-tree-id4798 . -5) (undo-tree-id4799 . -5) (undo-tree-id4800 . -5) (undo-tree-id4801 . -5) (undo-tree-id4802 . -5) (undo-tree-id4803 . -5) (undo-tree-id4804 . -5) (undo-tree-id4805 . -5) (undo-tree-id4806 . -5) (undo-tree-id4807 . -5) (undo-tree-id4808 . -5) (undo-tree-id4809 . -5) (undo-tree-id4810 . -5) (undo-tree-id4811 . -5) (undo-tree-id4812 . -5) (undo-tree-id4813 . -5) (undo-tree-id4814 . -5) (undo-tree-id4815 . -5) (undo-tree-id4816 . -5) (undo-tree-id4817 . -5) (undo-tree-id4818 . -5) (undo-tree-id4819 . -5) (undo-tree-id4820 . -5) (undo-tree-id4821 . -5) (undo-tree-id4822 . -5) (undo-tree-id4823 . -5) (undo-tree-id4824 . -5) (undo-tree-id4825 . -5) (undo-tree-id4826 . -5) (undo-tree-id4827 . -5) (undo-tree-id4828 . -5) (undo-tree-id4829 . -5) (undo-tree-id4830 . -5) (undo-tree-id4831 . -5) (undo-tree-id4832 . -5) (undo-tree-id4833 . -5) (undo-tree-id4834 . -5) 1038) nil (26044 59264 516778 138000) 0 nil])
([nil nil ((1039 . 1043)) ((#("c::W" 0 1 (face font-lock-constant-face fontified t) 1 3 (fontified t) 3 4 (face font-lock-type-face fontified t)) . 1039) (undo-tree-id4683 . -3) (undo-tree-id4684 . -4) (undo-tree-id4685 . -3) (undo-tree-id4686 . -3) (undo-tree-id4687 . -3) (undo-tree-id4688 . -3) (undo-tree-id4689 . -3) (undo-tree-id4690 . -3) (undo-tree-id4691 . -3) (undo-tree-id4692 . -3) (undo-tree-id4693 . -3) (undo-tree-id4694 . -3) (undo-tree-id4695 . -3) (undo-tree-id4696 . -3) (undo-tree-id4697 . -3) (undo-tree-id4698 . -3) (undo-tree-id4699 . -3) (undo-tree-id4700 . -3) (undo-tree-id4701 . -3) (undo-tree-id4702 . -3) (undo-tree-id4703 . -3) (undo-tree-id4704 . -3) (undo-tree-id4705 . -3) (undo-tree-id4706 . -3) (undo-tree-id4707 . -3) (undo-tree-id4708 . -3) (undo-tree-id4709 . -3) (undo-tree-id4710 . -3) (undo-tree-id4711 . -3) (undo-tree-id4712 . -3) (undo-tree-id4713 . -3) (undo-tree-id4714 . -3) (undo-tree-id4715 . -3) (undo-tree-id4716 . -3) (undo-tree-id4717 . -3) (undo-tree-id4718 . -3) (undo-tree-id4719 . -3) (undo-tree-id4720 . -3) (undo-tree-id4721 . -3) (undo-tree-id4722 . -3) (undo-tree-id4723 . -3) (undo-tree-id4724 . -3) (undo-tree-id4725 . -4) (undo-tree-id4726 . -4)) (26044 59248 770661 399000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -6964) (undo-tree-id1412 . -1) (undo-tree-id1414 . -1) 6965) ((6964 . 6965)) (26044 56622 287301 822000) 0 nil])
([nil nil ((1033 . 1036)) nil (26044 59264 516500 545000) 0 nil])
([nil nil ((1042 . 1046) (#("W" 0 1 (fontified nil)) . 1042) (1042 . 1043) (#("Weak" 0 4 (fontified nil)) . -1042) (1042 . 1046) (#("W" 0 1 (face font-lock-type-face fontified t)) . -1042) (undo-tree-id4318 . -1) (undo-tree-id4320 . -1) (undo-tree-id4322 . -1) 1043) ((1042 . 1043) (#("Weak" 0 4 (fontified nil)) . 1042) (1042 . 1046) (#("W" 0 1 (fontified nil)) . 1042) (1042 . 1043) (#("Weak" 0 4 (face font-lock-type-face fontified t)) . 1042) (undo-tree-id4641 . -4) (undo-tree-id4642 . -4) (undo-tree-id4643 . -4) (undo-tree-id4644 . -4) (undo-tree-id4645 . -4) (undo-tree-id4646 . -4) (undo-tree-id4647 . -4) (undo-tree-id4648 . -4) (undo-tree-id4649 . -4) (undo-tree-id4650 . -4) (undo-tree-id4651 . -4) (undo-tree-id4652 . -4) (undo-tree-id4653 . -4) (undo-tree-id4654 . -4) (undo-tree-id4655 . -4) (undo-tree-id4656 . -4) (undo-tree-id4657 . -4) (undo-tree-id4658 . -4) (undo-tree-id4659 . -4) (undo-tree-id4660 . -4) (undo-tree-id4661 . -4) (undo-tree-id4662 . -4) (undo-tree-id4663 . -4) (undo-tree-id4664 . -4) (undo-tree-id4665 . -4) (undo-tree-id4666 . -4) (undo-tree-id4667 . -4) (undo-tree-id4668 . -4) (undo-tree-id4669 . -4) (undo-tree-id4670 . -4) (undo-tree-id4671 . -4) (undo-tree-id4672 . -4) (undo-tree-id4673 . -4) (undo-tree-id4674 . -4) (undo-tree-id4675 . -4) (undo-tree-id4676 . -4) (undo-tree-id4677 . -4) (undo-tree-id4678 . -4) (undo-tree-id4679 . -4) (undo-tree-id4680 . -4) (undo-tree-id4681 . -4) (undo-tree-id4682 . -4)) (26044 59248 623562 934000) 0 nil])
([nil nil ((6964 . 6965)) ((#("u" 0 1 (fontified t)) . 6964) (undo-tree-id2006 . -1) (undo-tree-id2007 . -1)) (26044 56622 248145 598000) 0 nil])
([nil nil ((1033 . 1041) (#("pip" 0 3 (fontified nil)) . 1033) (1033 . 1036) (#("pipeline" 0 8 (fontified nil)) . -1033) (1033 . 1041) (#("pip" 0 3 (fontified t)) . -1033) (undo-tree-id4772 . -3) (undo-tree-id4773 . -1) (undo-tree-id4774 . -1) (undo-tree-id4775 . -1) (undo-tree-id4776 . -2) (undo-tree-id4777 . -2) (undo-tree-id4778 . -3) (undo-tree-id4779 . -3) (undo-tree-id4780 . -3) (undo-tree-id4781 . -3) 1036) nil (26044 59264 516499 224000) 0 nil])
([nil nil ((1046 . 1048)) ((#("::" 0 2 (fontified t)) . 1046) (undo-tree-id4601 . -2) (undo-tree-id4602 . -2) (undo-tree-id4603 . -2) (undo-tree-id4604 . -2) (undo-tree-id4605 . -2) (undo-tree-id4606 . -2) (undo-tree-id4607 . -2) (undo-tree-id4608 . -2) (undo-tree-id4609 . -2) (undo-tree-id4610 . -2) (undo-tree-id4611 . -2) (undo-tree-id4612 . -2) (undo-tree-id4613 . -2) (undo-tree-id4614 . -2) (undo-tree-id4615 . -2) (undo-tree-id4616 . -2) (undo-tree-id4617 . -2) (undo-tree-id4618 . -2) (undo-tree-id4619 . -2) (undo-tree-id4620 . -2) (undo-tree-id4621 . -2) (undo-tree-id4622 . -2) (undo-tree-id4623 . -2) (undo-tree-id4624 . -2) (undo-tree-id4625 . -2) (undo-tree-id4626 . -2) (undo-tree-id4627 . -2) (undo-tree-id4628 . -2) (undo-tree-id4629 . -2) (undo-tree-id4630 . -2) (undo-tree-id4631 . -2) (undo-tree-id4632 . -2) (undo-tree-id4633 . -2) (undo-tree-id4634 . -2) (undo-tree-id4635 . -2) (undo-tree-id4636 . -2) (undo-tree-id4637 . -2) (undo-tree-id4638 . -2) (undo-tree-id4639 . -2) (undo-tree-id4640 . -2)) (26044 59248 460820 975000) 0 nil])
([nil nil ((apply yas--snippet-revive 6964 6972 #s(yas--snippet nil nil #s(yas--exit #<marker at 5735 in main.rs> nil) 12 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 5735 in main.rs> nil) 12 nil nil nil nil)) (6964 . 6972) (#("unwrap()$0" 0 10 (fontified nil)) . 6964) (6964 . 6974) (#("u" 0 1 (fontified nil)) . 6964) (6964 . 6965) (#("unwrap()" 0 8 (fontified nil)) . -6964) (6964 . 6972) (#("u" 0 1 (fontified t)) . -6964) (undo-tree-id1407 . -1) (undo-tree-id1409 . -1) (undo-tree-id1411 . -1) 6965) ((6964 . 6965) (#("unwrap()" 0 8 (fontified nil)) . 6964) (6964 . 6972) (#("u" 0 1 (fontified nil)) . 6964) (6964 . 6965) (#("unwrap()$0" 0 10 (fontified nil)) . 6964) (6964 . 6974) (#("unwrap()" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-2-face) fontified t) 7 8 (face (rainbow-delimiters-depth-2-face) fontified t)) . 6964) (undo-tree-id2005 . -8)) (26044 56622 206476 878000) 0 nil])
([nil nil ((1041 . 1044)) nil (26044 59264 516490 527000) 0 nil])
([nil nil ((1048 . 1051)) ((#("new" 0 3 (fontified t)) . 1048) (undo-tree-id4598 . -3) (undo-tree-id4599 . -3) (undo-tree-id4600 . -3)) (26044 59248 306202 89000) 0 nil])
([nil nil ((#("unwrap() " 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-2-face) fontified t) 7 8 (face (rainbow-delimiters-depth-2-face) fontified t) 8 9 (fontified t)) . -6964) (undo-tree-id1399 . -9) (undo-tree-id1401 . -9) (undo-tree-id1403 . -8) (undo-tree-id1405 . -9) 6973) ((6964 . 6973)) (26044 56622 166038 188000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -1043) (undo-tree-id4766 . -1) (undo-tree-id4767 . -1) (undo-tree-id4768 . -1) (undo-tree-id4769 . -1) (undo-tree-id4770 . -1) (undo-tree-id4771 . -1) 1044) nil (26044 59264 516489 475000) 0 nil])
([nil nil ((#("new" 0 3 (fontified t)) . -1048) (undo-tree-id4304 . -3) (undo-tree-id4306 . -1) (undo-tree-id4308 . -2) (undo-tree-id4310 . -3) (undo-tree-id4312 . -3) (undo-tree-id4314 . -3) (undo-tree-id4316 . -3) 1051) ((1048 . 1051)) (26044 59248 136145 25000) 0 nil])
([nil nil ((6964 . 6965)) ((#("u" 0 1 (fontified t)) . 6964) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1)) (26044 56622 125111 981000) 0 nil])
([nil nil ((1043 . 1047)) nil (26044 59264 516484 676000) 0 nil])
([nil nil ((1048 . 1050)) ((#("fd" 0 1 (fontified t) 1 2 (fontified t)) . 1048) (undo-tree-id4589 . -2) (undo-tree-id4590 . -1) (undo-tree-id4591 . -1) (undo-tree-id4592 . -1) (undo-tree-id4593 . -1) (undo-tree-id4594 . -1) (undo-tree-id4595 . -1) (undo-tree-id4596 . -2) (undo-tree-id4597 . -2)) (26044 59247 954184 46000) 0 nil])
([nil nil ((apply yas--snippet-revive 6964 6972 #s(yas--snippet nil nil #s(yas--exit #<marker at 5735 in main.rs> nil) 13 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 5735 in main.rs> nil) 13 nil nil nil nil)) (6964 . 6972) (#("unwrap()$0" 0 10 (fontified nil)) . 6964) (6964 . 6974) (#("u" 0 1 (fontified nil)) . 6964) (6964 . 6965) (#("unwrap()" 0 8 (fontified nil)) . -6964) (6964 . 6972) (#("u" 0 1 (fontified t)) . -6964) (undo-tree-id1394 . -1) (undo-tree-id1396 . -1) (undo-tree-id1398 . -1) 6965) ((6964 . 6965) (#("unwrap()" 0 8 (fontified nil)) . 6964) (6964 . 6972) (#("u" 0 1 (fontified nil)) . 6964) (6964 . 6965) (#("unwrap()$0" 0 10 (fontified nil)) . 6964) (6964 . 6974) (#("unwrap()" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-2-face) fontified t) 7 8 (face (rainbow-delimiters-depth-2-face) fontified t)) . 6964) (undo-tree-id2002 . -8)) (26044 56622 85390 770000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -1046) (undo-tree-id4760 . -1) (undo-tree-id4761 . -1) (undo-tree-id4762 . -1) (undo-tree-id4763 . -1) (undo-tree-id4764 . -1) (undo-tree-id4765 . -1) 1047) nil (26044 59264 516482 940000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -1049) (undo-tree-id4292 . -1) (undo-tree-id4294 . -1) (undo-tree-id4296 . -1) (undo-tree-id4298 . -1) (undo-tree-id4300 . -1) (undo-tree-id4302 . -1) 1050) ((1049 . 1050)) (26044 59247 659064 770000) 0 nil])
([nil nil ((7073 . 7075) (t 26044 56572 857808 681000)) ((#(".l" 0 1 (fontified t) 1 2 (fontified t)) . 7073) (undo-tree-id1997 . -2) (undo-tree-id1998 . -2) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1)) (26044 56622 44914 373000) 0 nil])
([nil nil ((apply yas--snippet-revive 1042 1053 #s(yas--snippet nil nil #s(yas--exit 1053 nil) 32 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1053 nil) 32 nil nil nil nil)) (1042 . 1053) (#("downgrade()$0" 0 13 (fontified nil)) . 1042) (1042 . 1055) (#("down" 0 4 (fontified nil)) . 1042) (1042 . 1046) (#("downgrade() (as Downgrade)" 0 26 (fontified nil)) . -1042) (1042 . 1068) (#("down" 0 4 (fontified t)) . -1042) (undo-tree-id4727 . -4) (undo-tree-id4728 . -1) (undo-tree-id4729 . -1) (undo-tree-id4730 . -1) (undo-tree-id4731 . -1) (undo-tree-id4732 . -1) (undo-tree-id4733 . -1) (undo-tree-id4734 . -1) (undo-tree-id4735 . -1) (undo-tree-id4736 . -1) (undo-tree-id4737 . -1) (undo-tree-id4738 . -1) (undo-tree-id4739 . -1) (undo-tree-id4740 . -1) (undo-tree-id4741 . -2) (undo-tree-id4742 . -2) (undo-tree-id4743 . -2) (undo-tree-id4744 . -3) (undo-tree-id4745 . -3) (undo-tree-id4746 . -4) (undo-tree-id4747 . -4) (undo-tree-id4748 . -4) (undo-tree-id4749 . -4) (undo-tree-id4750 . -4) (undo-tree-id4751 . -4) (undo-tree-id4752 . -4) (undo-tree-id4753 . -4) (undo-tree-id4754 . -4) (undo-tree-id4755 . -4) (undo-tree-id4756 . -4) (undo-tree-id4757 . -4) (undo-tree-id4758 . -4) (undo-tree-id4759 . -4) 1046) nil (26044 59264 516472 522000) 0 nil])
([nil nil ((1049 . 1050)) ((#("r" 0 1 (fontified t)) . 1049) (undo-tree-id4584 . -1) (undo-tree-id4585 . -1) (undo-tree-id4586 . -1) (undo-tree-id4587 . -1) (undo-tree-id4588 . -1)) (26044 59247 277401 216000) 0 nil])
([nil nil ((apply yas--snippet-revive 7074 7080 #s(yas--snippet nil nil #s(yas--exit #<marker at 5826 in main.rs> nil) 14 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 5826 in main.rs> nil) 14 nil nil nil nil)) (7074 . 7080) (#("lock()$0" 0 8 (fontified nil)) . 7074) (7074 . 7082) (#("l" 0 1 (fontified nil)) . 7074) (7074 . 7075) (#("lock()" 0 6 (fontified nil)) . -7074) (7074 . 7080) (#("l" 0 1 (fontified t)) . -7074) (undo-tree-id1776 . -1) (undo-tree-id1778 . -1) 7075) ((7074 . 7075) (#("lock()" 0 6 (fontified nil)) . 7074) (7074 . 7080) (#("l" 0 1 (fontified nil)) . 7074) (7074 . 7075) (#("lock()$0" 0 8 (fontified nil)) . 7074) (7074 . 7082) (#("lock()" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-2-face) fontified t) 5 6 (face (rainbow-delimiters-depth-2-face) fontified t)) . 7074) (undo-tree-id1992 . -6) (undo-tree-id1993 . -6) (undo-tree-id1994 . -6) (undo-tree-id1995 . -6) (undo-tree-id1996 . -6)) (26044 56622 4653 595000) 0 nil])
([nil nil ((#("state." 0 5 (fontified t) 5 6 (fontified t)) . -6054) (undo-tree-id5027 . -6) (undo-tree-id5028 . -5) (undo-tree-id5029 . -5) (undo-tree-id5030 . -5) (undo-tree-id5031 . -6) (undo-tree-id5032 . -6) (undo-tree-id5033 . -6) (undo-tree-id5034 . -6) (undo-tree-id5035 . -6) (undo-tree-id5036 . -6) (undo-tree-id5037 . -6) (undo-tree-id5038 . -6) (undo-tree-id5039 . -6) 6060 (t 26044 59264 561306 887000)) nil (26044 59283 659008 854000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1053 1058 nil nil nil t #s(yas--exit 1059 nil))) #s(yas--exit 1059 nil) 31 nil #s(yas--field 1 1053 1058 nil nil nil t #s(yas--exit 1059 nil)) nil nil)) (1048 . 1059) (#("from(${1:value})$0" 0 18 (fontified nil)) . 1048) (1048 . 1066) (#("fr" 0 2 (fontified nil)) . 1048) (1048 . 1050) (#("from(…) (as From)" 0 17 (fontified nil)) . -1048) (1048 . 1065) (#("fr" 0 2 (fontified t)) . -1048) (undo-tree-id4269 . -2) (undo-tree-id4271 . -1) (undo-tree-id4273 . -1) (undo-tree-id4275 . -1) (undo-tree-id4277 . -1) (undo-tree-id4279 . -1) (undo-tree-id4281 . -1) (undo-tree-id4283 . -2) (undo-tree-id4285 . -2) (undo-tree-id4287 . -2) (undo-tree-id4289 . -2) (undo-tree-id4291 . -2) 1050) ((1048 . 1050) (#("from(…) (as From)" 0 17 (fontified nil)) . 1048) (1048 . 1065) (#("fr" 0 2 (fontified nil)) . 1048) (1048 . 1050) (#("from(${1:value})$0" 0 18 (fontified nil)) . 1048) (1048 . 1066) (#("from(value)" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-2-face) fontified t) 5 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1048) (undo-tree-id4558 . -5) (undo-tree-id4559 . -5) (undo-tree-id4560 . -5) (undo-tree-id4561 . -5) (undo-tree-id4562 . -5) (undo-tree-id4563 . -5) (undo-tree-id4564 . -5) (undo-tree-id4565 . -5) (undo-tree-id4566 . -5) (undo-tree-id4567 . -5) (undo-tree-id4568 . -5) (undo-tree-id4569 . -5) (undo-tree-id4570 . -5) (undo-tree-id4571 . -5) (undo-tree-id4572 . -5) (undo-tree-id4573 . -5) (undo-tree-id4574 . -5) (undo-tree-id4575 . -5) (undo-tree-id4576 . -5) (undo-tree-id4577 . -5) (undo-tree-id4578 . -5) (undo-tree-id4579 . -5) (undo-tree-id4580 . -5) (undo-tree-id4581 . -5) (undo-tree-id4582 . -5) (undo-tree-id4583 . -5) (apply yas--snippet-revive 1048 1059 #s(yas--snippet nil (#s(yas--field 1 1053 1058 nil nil nil t #s(yas--exit 1059 nil))) #s(yas--exit 1059 nil) 31 nil #s(yas--field 1 1053 1058 nil nil nil t #s(yas--exit 1059 nil)) nil nil))) (26044 59246 956535 703000) 0 nil])
([nil nil ((7080 . 7081)) ((#("." 0 1 (fontified t)) . 7080) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1)) (26044 56621 963963 206000) 0 nil])
([nil nil ((#("gst_" 0 4 (fontified t)) . -6050) (undo-tree-id5012 . -4) (undo-tree-id5013 . -4) (undo-tree-id5014 . -4) (undo-tree-id5015 . -4) (undo-tree-id5016 . -4) (undo-tree-id5017 . -4) (undo-tree-id5018 . -4) (undo-tree-id5019 . -4) (undo-tree-id5020 . -4) (undo-tree-id5021 . -4) (undo-tree-id5022 . -4) (undo-tree-id5023 . -4) (undo-tree-id5024 . -4) (undo-tree-id5025 . -4) (undo-tree-id5026 . -4) 6054) nil (26044 59283 658998 161000) 0 nil])
([nil nil ((#("value" 0 5 (fontified nil)) . 1054) (undo-tree-id4268 . -5) (1053 . 1054)) ((#("o" 0 1 (fontified nil)) . 1053) (undo-tree-id4554 . -1) (undo-tree-id4555 . -1) (undo-tree-id4556 . -1) (undo-tree-id4557 . -1) (1054 . 1059)) (26044 59246 686144 990000) 0 nil])
([nil nil ((7081 . 7082)) ((#("l" 0 1 (fontified t)) . 7081) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1)) (26044 56621 924048 693000) 0 nil])
([nil nil ((#("state" 0 5 (fontified t)) . -6145) (undo-tree-id5006 . -5) (undo-tree-id5007 . -5) (undo-tree-id5008 . -5) (undo-tree-id5009 . -5) (undo-tree-id5010 . -5) (undo-tree-id5011 . -5) 6150) nil (26044 59283 658987 490000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -1053) (undo-tree-id4261 . -1) (undo-tree-id4262 . -1) (undo-tree-id4263 . -1) (undo-tree-id4265 . -1) (undo-tree-id4267 . -1) 1054) ((1053 . 1054)) (26044 59246 367129 644000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -7081) (undo-tree-id1773 . -1) (undo-tree-id1775 . -1) 7082) ((7081 . 7082)) (26044 56621 884051 602000) 0 nil])
([nil nil ((#("gst_" 0 4 (fontified t)) . -6141) (undo-tree-id4997 . -4) (undo-tree-id4998 . -4) (undo-tree-id4999 . -4) (undo-tree-id5000 . -3) (undo-tree-id5001 . -4) (undo-tree-id5002 . -4) (undo-tree-id5003 . -4) (undo-tree-id5004 . -4) (undo-tree-id5005 . -4) 6145) nil (26044 59283 658981 202000) 0 nil])
([nil nil ((1053 . 1054)) ((#("p" 0 1 (fontified t)) . 1053) (undo-tree-id4549 . -1) (undo-tree-id4550 . -1) (undo-tree-id4551 . -1) (undo-tree-id4552 . -1) (undo-tree-id4553 . -1)) (26044 59246 110880 927000) 0 nil])
([nil nil ((7081 . 7082)) ((#("u" 0 1 (fontified t)) . 7081) (undo-tree-id1983 . -1) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1)) (26044 56621 843007 840000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -6141) (undo-tree-id4886 . -1) (undo-tree-id4887 . -1) (undo-tree-id4888 . -1) (undo-tree-id4889 . -1) (undo-tree-id4890 . -1) (undo-tree-id4891 . -1) (undo-tree-id4892 . -1) (undo-tree-id4893 . -1) (undo-tree-id4894 . -1) (undo-tree-id4895 . -1) (undo-tree-id4896 . -1) (undo-tree-id4897 . -1) (undo-tree-id4898 . -1) (undo-tree-id4899 . -1) (undo-tree-id4900 . -1) (undo-tree-id4901 . -1) (undo-tree-id4902 . -1) (undo-tree-id4903 . -1) (undo-tree-id4904 . -1) (undo-tree-id4905 . -1) (undo-tree-id4906 . -1) (#(" " 0 1 (fontified t)) . -6142) (undo-tree-id4907 . -1) (undo-tree-id4908 . -1) (undo-tree-id4909 . -1) (undo-tree-id4910 . -1) (undo-tree-id4911 . -1) (undo-tree-id4912 . -1) (undo-tree-id4913 . -1) (undo-tree-id4914 . -1) (undo-tree-id4915 . -1) (undo-tree-id4916 . -1) (undo-tree-id4917 . -1) (undo-tree-id4918 . -1) (undo-tree-id4919 . -1) (undo-tree-id4920 . -1) (undo-tree-id4921 . -1) (undo-tree-id4922 . -1) (undo-tree-id4923 . -1) (undo-tree-id4924 . -1) (#(" " 0 1 (fontified t)) . -6143) (undo-tree-id4925 . -1) (undo-tree-id4926 . -1) (undo-tree-id4927 . -1) (undo-tree-id4928 . -1) (undo-tree-id4929 . -1) (undo-tree-id4930 . -1) (undo-tree-id4931 . -1) (undo-tree-id4932 . -1) (undo-tree-id4933 . -1) (undo-tree-id4934 . -1) (undo-tree-id4935 . -1) (undo-tree-id4936 . -1) (undo-tree-id4937 . -1) (undo-tree-id4938 . -1) (undo-tree-id4939 . -1) (undo-tree-id4940 . -1) (#(" " 0 1 (fontified t)) . -6144) (undo-tree-id4941 . -1) (undo-tree-id4942 . -1) (undo-tree-id4943 . -1) (undo-tree-id4944 . -1) (undo-tree-id4945 . -1) (undo-tree-id4946 . -1) (undo-tree-id4947 . -1) (undo-tree-id4948 . -1) (undo-tree-id4949 . -1) (undo-tree-id4950 . -1) (undo-tree-id4951 . -1) (undo-tree-id4952 . -1) (undo-tree-id4953 . -1) (undo-tree-id4954 . -1) (#(" " 0 1 (fontified t)) . -6145) (undo-tree-id4955 . -1) (undo-tree-id4956 . -1) (undo-tree-id4957 . -1) (undo-tree-id4958 . -1) (undo-tree-id4959 . -1) (undo-tree-id4960 . -1) (undo-tree-id4961 . -1) (undo-tree-id4962 . -1) (undo-tree-id4963 . -1) (undo-tree-id4964 . -1) (undo-tree-id4965 . -1) (undo-tree-id4966 . -1) (#(" " 0 1 (fontified t)) . -6146) (undo-tree-id4967 . -1) (undo-tree-id4968 . -1) (undo-tree-id4969 . -1) (undo-tree-id4970 . -1) (undo-tree-id4971 . -1) (undo-tree-id4972 . -1) (undo-tree-id4973 . -1) (undo-tree-id4974 . -1) (undo-tree-id4975 . -1) (undo-tree-id4976 . -1) (#(" " 0 1 (fontified t)) . -6147) (undo-tree-id4977 . -1) (undo-tree-id4978 . -1) (undo-tree-id4979 . -1) (undo-tree-id4980 . -1) (undo-tree-id4981 . -1) (undo-tree-id4982 . -1) (undo-tree-id4983 . -1) (undo-tree-id4984 . -1) (#(" " 0 1 (fontified t)) . -6148) (undo-tree-id4985 . -1) (undo-tree-id4986 . -1) (undo-tree-id4987 . -1) (undo-tree-id4988 . -1) (undo-tree-id4989 . -1) (undo-tree-id4990 . -1) (#(" " 0 1 (fontified t)) . -6149) (undo-tree-id4991 . -1) (undo-tree-id4992 . -1) (undo-tree-id4993 . -1) (undo-tree-id4994 . -1) (#("." 0 1 (fontified t)) . -6150) (undo-tree-id4995 . -1) (undo-tree-id4996 . -1) 6151) nil (26044 59283 658966 491000) 0 nil])
([nil nil ((1053 . 1061) (#("p" 0 1 (fontified nil)) . 1053) (undo-tree-id4250 . -1) (1053 . 1054) (#("pipeline" 0 8 (fontified nil)) . -1053) (undo-tree-id4251 . -8) (1053 . 1061) (#("p" 0 1 (fontified t)) . -1053) (undo-tree-id4252 . -1) (undo-tree-id4253 . -1) (undo-tree-id4254 . -1) (undo-tree-id4256 . -1) (undo-tree-id4258 . -1) (undo-tree-id4260 . -1) 1054) ((1053 . 1054) (#("pipeline" 0 8 (fontified nil)) . 1053) (undo-tree-id4546 . -8) (1053 . 1061) (#("p" 0 1 (fontified nil)) . 1053) (undo-tree-id4547 . -1) (1053 . 1054) (#("pipeline" 0 8 (fontified t)) . 1053) (undo-tree-id4548 . -8)) (26044 59245 785435 522000) 0 nil])
([nil nil ((apply yas--snippet-revive 7081 7089 #s(yas--snippet nil nil #s(yas--exit #<marker at 5826 in main.rs> nil) 15 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 5826 in main.rs> nil) 15 nil nil nil nil)) (7081 . 7089) (#("unwrap()$0" 0 10 (fontified nil)) . 7081) (7081 . 7091) (#("u" 0 1 (fontified nil)) . 7081) (7081 . 7082) (#("unwrap()" 0 8 (fontified nil)) . -7081) (7081 . 7089) (#("u" 0 1 (fontified t)) . -7081) (undo-tree-id1770 . -1) (undo-tree-id1772 . -1) 7082) ((7081 . 7082) (#("unwrap()" 0 8 (fontified nil)) . 7081) (7081 . 7089) (#("u" 0 1 (fontified nil)) . 7081) (7081 . 7082) (#("unwrap()$0" 0 10 (fontified nil)) . 7081) (7081 . 7091) (#("unwrap()" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-2-face) fontified t) 7 8 (face (rainbow-delimiters-depth-2-face) fontified t)) . 7081) (undo-tree-id1982 . -8)) (26044 56621 803768 427000) 0 nil])
([nil nil ((#("state." 0 5 (fontified t) 5 6 (fontified t)) . -6478) (undo-tree-id5071 . -5) (undo-tree-id5072 . -5) (undo-tree-id5073 . -6) (undo-tree-id5074 . -6) (undo-tree-id5075 . -6) (undo-tree-id5076 . -6) (undo-tree-id5077 . -6) (undo-tree-id5078 . -6) (undo-tree-id5079 . -6) 6484 (t 26044 59283 674641 395000)) nil (26044 59289 639965 205000) 0 nil])
([nil nil ((1053 . 1054) (t 26044 59233 531304 982000)) ((#("&" 0 1 (face rust-ampersand-face fontified t)) . 1053) (undo-tree-id4531 . -1) (undo-tree-id4532 . -1) (undo-tree-id4533 . -1) (undo-tree-id4534 . -1) (undo-tree-id4535 . -1) (undo-tree-id4536 . -1) (undo-tree-id4537 . -1) (undo-tree-id4538 . -1) (undo-tree-id4539 . -1) (undo-tree-id4540 . -1) (undo-tree-id4541 . -1) (undo-tree-id4542 . -1) (undo-tree-id4543 . -1) (undo-tree-id4544 . -1) (undo-tree-id4545 . -1) (t 26044 59237 461305 223000)) (26044 59237 447577 485000) 0 nil])
([nil nil ((7442 . 7443) (t 26044 56577 801142 317000)) ((#("l" 0 1 (fontified t)) . 7442) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1)) (26044 56621 762305 264000) 0 nil])
([nil nil ((#("gst_" 0 4 (fontified t)) . -6474) (undo-tree-id5060 . -4) (undo-tree-id5061 . -4) (undo-tree-id5062 . -4) (undo-tree-id5063 . -4) (undo-tree-id5064 . -4) (undo-tree-id5065 . -4) (undo-tree-id5066 . -4) (undo-tree-id5067 . -4) (undo-tree-id5068 . -4) (undo-tree-id5069 . -4) (undo-tree-id5070 . -4) 6478) nil (26044 59289 639957 850000) 0 nil])
nil
([nil nil ((#("l" 0 1 (fontified t)) . -7442) (undo-tree-id1796 . -1) (undo-tree-id1798 . -1) (undo-tree-id1800 . -1) 7443) ((7442 . 7443)) (26044 56621 722412 587000) 0 nil])
([nil nil ((#("state." 0 5 (fontified t) 5 6 (fontified t)) . -6693) (undo-tree-id5051 . -5) (undo-tree-id5052 . -5) (undo-tree-id5053 . -6) (undo-tree-id5054 . -6) (undo-tree-id5055 . -6) (undo-tree-id5056 . -6) (undo-tree-id5057 . -6) (undo-tree-id5058 . -6) (undo-tree-id5059 . -6) 6699) nil (26044 59289 639948 190000) 0 nil])
([nil nil ((7441 . 7443)) ((#(".l" 0 1 (fontified t) 1 2 (fontified t)) . 7441) (undo-tree-id1976 . -2) (undo-tree-id1977 . -2) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1)) (26044 56621 684405 210000) 0 nil])
([nil nil ((#("gst_" 0 4 (fontified t)) . -6689) (undo-tree-id5040 . -4) (undo-tree-id5041 . -4) (undo-tree-id5042 . -4) (undo-tree-id5043 . -4) (undo-tree-id5044 . -4) (undo-tree-id5045 . -4) (undo-tree-id5046 . -4) (undo-tree-id5047 . -4) (undo-tree-id5048 . -4) (undo-tree-id5049 . -4) (undo-tree-id5050 . -4) 6693) nil (26044 59289 639937 913000) 0 nil])
([nil nil ((apply yas--snippet-revive 7442 7448 #s(yas--snippet nil nil #s(yas--exit #<marker at 6159 in main.rs> nil) 16 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 6159 in main.rs> nil) 16 nil nil nil nil)) (7442 . 7448) (#("lock()$0" 0 8 (fontified nil)) . 7442) (7442 . 7450) (#("l" 0 1 (fontified nil)) . 7442) (7442 . 7443) (#("lock()" 0 6 (fontified nil)) . -7442) (7442 . 7448) (#("l" 0 1 (fontified t)) . -7442) (undo-tree-id1790 . -1) (undo-tree-id1792 . -1) (undo-tree-id1794 . -1) 7443) ((7442 . 7443) (#("lock()" 0 6 (fontified nil)) . 7442) (7442 . 7448) (#("l" 0 1 (fontified nil)) . 7442) (7442 . 7443) (#("lock()$0" 0 8 (fontified nil)) . 7442) (7442 . 7450) (#("lock()" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-5-face) fontified t) 5 6 (face (rainbow-delimiters-depth-5-face) fontified t)) . 7442) (undo-tree-id1972 . -6) (undo-tree-id1973 . -6) (undo-tree-id1974 . -6) (undo-tree-id1975 . -6)) (26044 56621 642358 88000) 0 nil])
([nil nil ((#("pr" 0 2 (face font-lock-constant-face fontified t)) . 148) (#("ud" 0 2 (face font-lock-constant-face fontified t)) . 152) (155 . 165) (#("::*" 0 3 (fontified t)) . -155) (undo-tree-id5080 . -3) 158 (177 . 179) (179 . 181) (#("ement_" 0 6 (fontified t)) . 179) (186 . 189) (#("rror" 0 4 (fontified t)) . -186) (undo-tree-id5081 . -4) 190 (#("
" 0 1 (fontified t)) . -246) (#("
" 0 1 (fontified t)) . -1008) (undo-tree-id5082 . -1) (#("

" 0 2 (fontified t)) . -6020) 6658 (t 26044 59289 684641 763000)) nil (26044 59304 658315 449000) 0 nil])
([nil nil ((7448 . 7450)) ((#(".y" 0 1 (fontified t) 1 2 (fontified t)) . 7448) (undo-tree-id1969 . -2) (undo-tree-id1970 . -2) (undo-tree-id1971 . -1)) (26044 56621 602430 267000) 0 nil])
([nil nil ((#("downgrade()" 0 9 (fontified t) 9 10 (face (rainbow-delimiters-depth-2-face) fontified t) 10 11 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1040) (undo-tree-id5169 . -11) (undo-tree-id5170 . -11) (undo-tree-id5171 . -3) (undo-tree-id5172 . -3) (undo-tree-id5173 . -3) (undo-tree-id5174 . -3) (undo-tree-id5175 . -3) (undo-tree-id5176 . -3) (undo-tree-id5177 . -3) (undo-tree-id5178 . -3) (undo-tree-id5179 . -3) (undo-tree-id5180 . -3) (undo-tree-id5181 . -3) (undo-tree-id5182 . -3) (undo-tree-id5183 . -3) (undo-tree-id5184 . -3) (undo-tree-id5185 . -3) (undo-tree-id5186 . -3) (undo-tree-id5187 . -3) (undo-tree-id5188 . -3) (undo-tree-id5189 . -3) (undo-tree-id5190 . -3) (undo-tree-id5191 . -3) (undo-tree-id5192 . -3) (undo-tree-id5193 . -3) (undo-tree-id5194 . -3) (undo-tree-id5195 . -3) (undo-tree-id5196 . -3) (undo-tree-id5197 . -4) (undo-tree-id5198 . -4) (undo-tree-id5199 . -4) (undo-tree-id5200 . -4) (undo-tree-id5201 . -4) (undo-tree-id5202 . -4) (undo-tree-id5203 . -4) (undo-tree-id5204 . -4) (undo-tree-id5205 . -4) (undo-tree-id5206 . -4) (undo-tree-id5207 . -4) (undo-tree-id5208 . -4) (undo-tree-id5209 . -4) (undo-tree-id5210 . -4) (undo-tree-id5211 . -4) (undo-tree-id5212 . -4) (undo-tree-id5213 . -11) (undo-tree-id5214 . -11) (undo-tree-id5215 . -11) (undo-tree-id5216 . -11) (undo-tree-id5217 . -11) (undo-tree-id5218 . -11) (undo-tree-id5219 . -11) (undo-tree-id5220 . -11) (undo-tree-id5221 . -11) (undo-tree-id5222 . -11) (undo-tree-id5223 . -11) (undo-tree-id5224 . -11) (undo-tree-id5225 . -11) (undo-tree-id5226 . -11) 1051 (t 26044 59304 674642 683000)) nil (26044 59799 89234 459000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -7449) (undo-tree-id1784 . -1) (undo-tree-id1786 . -1) (undo-tree-id1788 . -1) 7450) ((7449 . 7450)) (26044 56621 563127 890000) 0 nil])
([nil nil ((#("pipeline." 0 9 (fontified t)) . 1031) (undo-tree-id6152 . -9) (undo-tree-id6153 . -9)) ((1031 . 1040)) (26044 59799 257562 394000) 0 nil])
([nil nil ((7449 . 7450)) ((#("u" 0 1 (fontified t)) . 7449) (undo-tree-id1967 . -1) (undo-tree-id1968 . -1)) (26044 56621 522865 757000) 0 nil])
([nil nil ((1031 . 1033)) ((#("Do" 0 2 (face font-lock-type-face fontified t)) . 1031) (undo-tree-id6150 . -2) (undo-tree-id6151 . -2)) (26044 59799 611340 339000) 0 nil])
([nil nil ((apply yas--snippet-revive 7449 7457 #s(yas--snippet nil nil #s(yas--exit #<marker at 6159 in main.rs> nil) 17 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 6159 in main.rs> nil) 17 nil nil nil nil)) (7449 . 7457) (#("unwrap()$0" 0 10 (fontified nil)) . 7449) (7449 . 7459) (#("u" 0 1 (fontified nil)) . 7449) (7449 . 7450) (#("unwrap()" 0 8 (fontified nil)) . -7449) (7449 . 7457) (#("u" 0 1 (fontified t)) . -7449) (undo-tree-id1779 . -1) (undo-tree-id1781 . -1) (undo-tree-id1783 . -1) 7450) ((7449 . 7450) (#("unwrap()" 0 8 (fontified nil)) . 7449) (7449 . 7457) (#("u" 0 1 (fontified nil)) . 7449) (7449 . 7450) (#("unwrap()$0" 0 10 (fontified nil)) . 7449) (7449 . 7459) (#("unwrap()" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-5-face) fontified t) 7 8 (face (rainbow-delimiters-depth-5-face) fontified t)) . 7449) (undo-tree-id1966 . -8)) (26044 56621 483443 725000) 0 nil])
([nil nil ((1031 . 1040) (#("Do" 0 2 (fontified nil)) . 1031) (1031 . 1033) (#("Downgrade" 0 9 (fontified nil)) . 1031) (1031 . 1040) (#("Do" 0 2 (face font-lock-type-face fontified t)) . 1031)) ((1031 . 1033) (#("Downgrade" 0 9 (fontified nil)) . 1031) (1031 . 1040) (#("Do" 0 2 (fontified nil)) . 1031) (1031 . 1033) (#("Downgrade" 0 9 (face font-lock-type-face fontified t)) . 1031) (undo-tree-id6148 . -9) (undo-tree-id6149 . -9)) (26044 59799 802765 655000) 0 nil])
([nil nil ((7682 . 7683) (t 26044 56589 284476 355000)) ((#(" " 0 1 (fontified t)) . 7682) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1)) (26044 56621 442874 669000) 0 nil])
([nil nil ((1040 . 1042)) ((#("::" 0 2 (fontified t)) . 1040) (undo-tree-id6146 . -2) (undo-tree-id6147 . -2)) (26044 59799 993001 304000) 0 nil])
([nil nil ((7682 . 7684)) ((#(".l" 0 1 (fontified t) 1 2 (fontified t)) . 7682) (undo-tree-id1922 . -2) (undo-tree-id1923 . -2) (undo-tree-id1924 . -2) (undo-tree-id1925 . -2) (undo-tree-id1926 . -2) (undo-tree-id1927 . -2) (undo-tree-id1928 . -2) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1)) (26044 56621 402877 923000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1052 1052 nil nil nil t #s(yas--exit 1062 nil))) #s(yas--exit 1062 nil) 33 nil #s(yas--field 1 1052 1052 nil nil nil t #s(yas--exit 1062 nil)) nil nil)) (1042 . 1058) (#("downgrade(${1:&self})$0" 0 23 (fontified nil)) . 1042) (1042 . 1065) (#("downgrade(…) (as Downgrade)" 0 27 (fontified nil)) . 1042) (1042 . 1069)) ((#("downgrade(…) (as Downgrade)" 0 27 (fontified nil)) . 1042) (1042 . 1069) (#("downgrade(${1:&self})$0" 0 23 (fontified nil)) . 1042) (1042 . 1065) (#("downgrade(&self)" 0 9 (fontified t) 9 10 (face (rainbow-delimiters-depth-2-face) fontified t) 10 11 (face rust-ampersand-face fontified t) 11 15 (face font-lock-keyword-face fontified t) 15 16 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1042) (undo-tree-id6144 . -10) (undo-tree-id6145 . -10) (apply yas--snippet-revive 1042 1058 #s(yas--snippet nil (#s(yas--field 1 1052 1052 nil nil nil t #s(yas--exit 1062 nil))) #s(yas--exit 1062 nil) 33 nil #s(yas--field 1 1052 1052 nil nil nil t #s(yas--exit 1062 nil)) nil nil))) (26044 59800 292895 558000) 0 nil])
([nil nil ((apply yas--snippet-revive 7683 7689 #s(yas--snippet nil nil #s(yas--exit #<marker at 6397 in main.rs> nil) 18 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 6397 in main.rs> nil) 18 nil nil nil nil)) (7683 . 7689) (#("lock()$0" 0 8 (fontified nil)) . 7683) (7683 . 7691) (#("l" 0 1 (fontified nil)) . 7683) (7683 . 7684) (#("lock()" 0 6 (fontified nil)) . -7683) (7683 . 7689) (#("l" 0 1 (fontified t)) . -7683) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) 7684) ((7683 . 7684) (#("lock()" 0 6 (fontified nil)) . 7683) (7683 . 7689) (#("l" 0 1 (fontified nil)) . 7683) (7683 . 7684) (#("lock()$0" 0 8 (fontified nil)) . 7683) (7683 . 7691) (#("lock()" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-2-face) fontified t) 5 6 (face (rainbow-delimiters-depth-2-face) fontified t)) . 7683) (undo-tree-id1886 . -6) (undo-tree-id1887 . -6) (undo-tree-id1888 . -6) (undo-tree-id1889 . -6) (undo-tree-id1890 . -6) (undo-tree-id1891 . -6) (undo-tree-id1892 . -6) (undo-tree-id1893 . -6) (undo-tree-id1894 . -6) (undo-tree-id1895 . -6) (undo-tree-id1896 . -6) (undo-tree-id1897 . -6) (undo-tree-id1898 . -6) (undo-tree-id1899 . -6) (undo-tree-id1900 . -6) (undo-tree-id1901 . -6) (undo-tree-id1902 . -6) (undo-tree-id1903 . -6) (undo-tree-id1904 . -6) (undo-tree-id1905 . -6) (undo-tree-id1906 . -6) (undo-tree-id1907 . -6) (undo-tree-id1908 . -6) (undo-tree-id1909 . -6) (undo-tree-id1910 . -6) (undo-tree-id1911 . -6) (undo-tree-id1912 . -6) (undo-tree-id1913 . -6) (undo-tree-id1914 . -6) (undo-tree-id1915 . -6) (undo-tree-id1916 . -6) (undo-tree-id1917 . -6) (undo-tree-id1918 . -6) (undo-tree-id1919 . -6) (undo-tree-id1920 . -6) (undo-tree-id1921 . -6)) (26044 56621 362970 748000) 0 nil])
([nil nil ((1053 . 1054) (#("&self" 0 1 (face rust-ampersand-face fontified nil) 1 5 (face font-lock-keyword-face fontified nil)) . 1053) (1052 . 1053)) ((#("&" 0 1 (face rust-ampersand-face fontified nil)) . 1052) (undo-tree-id6139 . -1) (undo-tree-id6140 . -1) (undo-tree-id6141 . -1) (1053 . 1058) (#("p" 0 1 (fontified t)) . 1053) (undo-tree-id6142 . -1) (undo-tree-id6143 . -1)) (26044 59804 408423 695000) 0 nil])
([nil nil ((7689 . 7691)) ((#(".y" 0 1 (fontified t) 1 2 (fontified t)) . 7689) (undo-tree-id1851 . -2) (undo-tree-id1852 . -2) (undo-tree-id1853 . -2) (undo-tree-id1854 . -2) (undo-tree-id1855 . -2) (undo-tree-id1856 . -2) (undo-tree-id1857 . -2) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1)) (26044 56621 332623 736000) 0 nil])
([nil nil ((1053 . 1061) (#("p" 0 1 (fontified nil)) . 1053) (1053 . 1054) (#("pipeline" 0 8 (fontified nil)) . 1053) (1053 . 1061) (#("p" 0 1 (fontified t)) . 1053)) ((1053 . 1054) (#("pipeline" 0 8 (fontified nil)) . 1053) (1053 . 1061) (#("p" 0 1 (fontified nil)) . 1053) (1053 . 1054) (#("pipeline" 0 8 (fontified t)) . 1053)) (26044 59804 775740 46000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -7690) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) 7691) ((7690 . 7691)) (26044 56620 668923 489000) 0 nil])
([nil nil ((apply yas--snippet-revive 1042 1062 #s(yas--snippet nil (#s(yas--field 1 1052 1052 nil nil nil t #s(yas--exit 1062 nil))) #s(yas--exit 1062 nil) 33 nil #s(yas--field 1 1052 1052 nil nil nil t #s(yas--exit 1062 nil)) nil nil))) nil (26044 59813 314087 817000) 0 nil] [nil nil ((apply yas--snippet-revive 1042 1062 #s(yas--snippet nil (#s(yas--field 1 1052 1052 nil nil nil t #s(yas--exit 1062 nil))) #s(yas--exit 1062 nil) 33 nil #s(yas--field 1 1052 1052 nil nil nil t #s(yas--exit 1062 nil)) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1052 1052 nil nil nil t #s(yas--exit 1062 nil))) #s(yas--exit 1062 nil) 33 nil #s(yas--field 1 1052 1052 nil nil nil t #s(yas--exit 1062 nil)) nil nil))) (26044 59802 647084 415000) 0 nil])
([nil nil ((7690 . 7691)) ((#("u" 0 1 (fontified t)) . 7690) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1)) (26044 56618 779305 524000) 0 nil])
([nil nil ((#("    let audio_convert = ElementFactory::make_with_name(\"audioconvert\", Some(\"convert\"))?;" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 21 (face font-lock-variable-name-face fontified t) 21 24 (fontified t) 24 38 (face font-lock-type-face fontified t) 38 54 (fontified t) 54 55 (face (rainbow-delimiters-depth-2-face) fontified t) 55 69 (face font-lock-string-face fontified t) 69 71 (fontified t) 71 75 (face font-lock-type-face fontified t) 75 76 (face (rainbow-delimiters-depth-3-face) fontified t) 76 85 (face font-lock-string-face fontified t) 85 86 (face (rainbow-delimiters-depth-3-face) fontified t) 86 87 (face (rainbow-delimiters-depth-2-face) fontified t) 87 88 (face rust-question-mark fontified t) 88 89 (fontified t)) . 447) (undo-tree-id6177 . -89) (t 26044 59813 361340 555000)) nil (26044 60299 207925 369000) 0 nil])
([nil nil ((839 . 843) (#("    " 0 4 (fontified nil)) . 838) (837 . 843)) ((#("
    
" 0 1 (fontified t) 1 5 (fontified nil) 5 6 (fontified nil)) . 837) (undo-tree-id6154 . -6) (undo-tree-id6155 . -6) (undo-tree-id6156 . -6) (undo-tree-id6157 . -6) (undo-tree-id6158 . -6) (undo-tree-id6159 . -6) (undo-tree-id6160 . -6) (undo-tree-id6161 . -6) (undo-tree-id6162 . -6) (undo-tree-id6163 . -6) (838 . 842) (#("    " 0 4 (fontified t)) . 839) (undo-tree-id6164 . -4) (undo-tree-id6165 . -4) (undo-tree-id6166 . -4) (undo-tree-id6167 . -4) (undo-tree-id6168 . -4) (undo-tree-id6169 . -4) (undo-tree-id6170 . -4) (undo-tree-id6171 . -4)) (26044 59801 989778 694000) 0 nil])
([nil nil ((apply yas--snippet-revive 7690 7698 #s(yas--snippet nil nil #s(yas--exit #<marker at 6397 in main.rs> nil) 19 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 6397 in main.rs> nil) 19 nil nil nil nil)) (7690 . 7698) (#("unwrap()$0" 0 10 (fontified nil)) . 7690) (7690 . 7700) (#("u" 0 1 (fontified nil)) . 7690) (7690 . 7691) (#("unwrap()" 0 8 (fontified nil)) . -7690) (7690 . 7698) (#("u" 0 1 (fontified t)) . -7690) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) 7691) ((7690 . 7691) (#("unwrap()" 0 8 (fontified nil)) . 7690) (7690 . 7698) (#("u" 0 1 (fontified nil)) . 7690) (7690 . 7691) (#("unwrap()$0" 0 10 (fontified nil)) . 7690) (7690 . 7700) (#("unwrap()" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-2-face) fontified t) 7 8 (face (rainbow-delimiters-depth-2-face) fontified t)) . 7690) (undo-tree-id1821 . -8) (undo-tree-id1822 . -8) (undo-tree-id1823 . -8) (undo-tree-id1824 . -8) (undo-tree-id1825 . -8) (undo-tree-id1826 . -8) (undo-tree-id1827 . -8) (undo-tree-id1828 . -8) (undo-tree-id1829 . -8) (undo-tree-id1830 . -8) (undo-tree-id1831 . -8) (undo-tree-id1832 . -8) (undo-tree-id1833 . -8) (undo-tree-id1834 . -8) (undo-tree-id1835 . -8) (undo-tree-id1836 . -8) (undo-tree-id1837 . -8) (undo-tree-id1838 . -8) (undo-tree-id1839 . -8) (undo-tree-id1840 . -8)) (26044 56618 648124 36000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 447) (undo-tree-id6176 . -1)) nil (26044 60299 207923 795000) 0 nil])
([nil nil ((843 . 845)) ((#("pi" 0 2 (fontified t)) . 843) (undo-tree-id6116 . -2) (undo-tree-id6117 . -2)) (26044 59797 557782 320000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -7698) (undo-tree-id1801 . -1) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) 7699) ((7698 . 7699) (t 26044 56609 11144 233000)) (26044 56608 969207 609000) 0 nil])
([nil nil ((#("    let audio_resample = ElementFactory::make_with_name(\"audioresample\", Some(\"resample\"))?;" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 22 (face font-lock-variable-name-face fontified t) 22 25 (fontified t) 25 39 (face font-lock-type-face fontified t) 39 55 (fontified t) 55 56 (face (rainbow-delimiters-depth-2-face) fontified t) 56 71 (face font-lock-string-face fontified t) 71 73 (fontified t) 73 77 (face font-lock-type-face fontified t) 77 78 (face (rainbow-delimiters-depth-3-face) fontified t) 78 88 (face font-lock-string-face fontified t) 88 89 (face (rainbow-delimiters-depth-3-face) fontified t) 89 90 (face (rainbow-delimiters-depth-2-face) fontified t) 90 91 (face rust-question-mark fontified t) 91 92 (fontified t)) . 447) (undo-tree-id6175 . -92)) nil (26044 60299 207922 270000) 0 nil])
([nil nil ((843 . 851) (#("pi" 0 2 (fontified nil)) . 843) (843 . 845) (#("pipeline" 0 8 (fontified nil)) . -843) (843 . 851) (#("pi" 0 2 (fontified t)) . -843) (undo-tree-id5272 . -2) (undo-tree-id5274 . -1) (undo-tree-id5276 . -2) 845) ((843 . 845) (#("pipeline" 0 8 (fontified nil)) . 843) (843 . 851) (#("pi" 0 2 (fontified nil)) . 843) (843 . 845) (#("pipeline" 0 8 (fontified t)) . 843) (undo-tree-id6107 . -8) (undo-tree-id6108 . -8) (undo-tree-id6109 . -8) (undo-tree-id6110 . -8) (undo-tree-id6111 . -8) (undo-tree-id6112 . -8) (undo-tree-id6113 . -8) (undo-tree-id6114 . -8) (undo-tree-id6115 . -8)) (26044 59797 516894 245000) 0 nil])
nil
([nil nil ((#("
" 0 1 (fontified t)) . 447) (undo-tree-id6174 . -1)) nil (26044 60299 207920 610000) 0 nil])
([nil nil ((851 . 855)) ((#(".add" 0 1 (fontified t) 1 4 (fontified t)) . 851) (undo-tree-id6098 . -4) (undo-tree-id6099 . -4) (undo-tree-id6100 . -1) (undo-tree-id6101 . -1) (undo-tree-id6102 . -1) (undo-tree-id6103 . -1) (undo-tree-id6104 . -1) (undo-tree-id6105 . -1) (undo-tree-id6106 . -1)) (26044 59797 476800 963000) 0 nil])
([nil nil ((#("    let audio_sink = ElementFactory::make_with_name(\"autovideosink\", Some(\"sink\"))?;" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 18 (face font-lock-variable-name-face fontified t) 18 21 (fontified t) 21 35 (face font-lock-type-face fontified t) 35 51 (fontified t) 51 52 (face (rainbow-delimiters-depth-2-face) fontified t) 52 67 (face font-lock-string-face fontified t) 67 69 (fontified t) 69 73 (face font-lock-type-face fontified t) 73 74 (face (rainbow-delimiters-depth-3-face) fontified t) 74 80 (face font-lock-string-face fontified t) 80 81 (face (rainbow-delimiters-depth-3-face) fontified t) 81 82 (face (rainbow-delimiters-depth-2-face) fontified t) 82 83 (face rust-question-mark fontified t) 83 84 (fontified t)) . 447) (undo-tree-id6173 . -84)) nil (26044 60299 207918 124000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 861 861 nil nil nil t #s(yas--exit 870 nil))) #s(yas--exit 870 nil) 34 nil #s(yas--field 1 861 861 nil nil nil t #s(yas--exit 870 nil)) nil nil)) (852 . 870) (#("add_many(${1:elements})$0" 0 25 (fontified nil)) . 852) (852 . 877) (#("add" 0 3 (fontified nil)) . 852) (852 . 855) (#("add_many(…) (alias gst_bin_add_many) (as GstBinExtManual)" 0 57 (fontified nil)) . -852) (852 . 909) (#("add" 0 3 (fontified t)) . -852) (undo-tree-id5262 . -3) (undo-tree-id5264 . -1) (undo-tree-id5266 . -2) (undo-tree-id5268 . -3) (undo-tree-id5270 . -3) 855) ((852 . 855) (#("add_many(…) (alias gst_bin_add_many) (as GstBinExtManual)" 0 57 (fontified nil)) . 852) (852 . 909) (#("add" 0 3 (fontified nil)) . 852) (852 . 855) (#("add_many(${1:elements})$0" 0 25 (fontified nil)) . 852) (852 . 877) (#("add_many(elements)" 0 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t) 9 17 (fontified t) 17 18 (face (rainbow-delimiters-depth-2-face) fontified t)) . 852) (undo-tree-id6089 . -9) (undo-tree-id6090 . -9) (undo-tree-id6091 . -9) (undo-tree-id6092 . -18) (undo-tree-id6093 . -18) (undo-tree-id6094 . -18) (undo-tree-id6095 . -18) (undo-tree-id6096 . -18) (undo-tree-id6097 . -18) (apply yas--snippet-revive 852 870 #s(yas--snippet nil (#s(yas--field 1 861 861 nil nil nil t #s(yas--exit 870 nil))) #s(yas--exit 870 nil) 34 nil #s(yas--field 1 861 861 nil nil nil t #s(yas--exit 870 nil)) nil nil))) (26044 59797 439127 101000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 447) (undo-tree-id6172 . -1)) nil (26044 60299 207912 746000) 0 nil])
([nil nil ((862 . 863) (#("elements" 0 8 (fontified nil)) . 862) (861 . 862)) ((#("[" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 861) (undo-tree-id6084 . -1) (undo-tree-id6085 . -1) (undo-tree-id6086 . -1) (undo-tree-id6087 . -1) (862 . 870) (#("]" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . 862) (undo-tree-id6088 . -1)) (26044 59797 396014 263000) 0 nil])
([nil nil ((#("use std::borrow::BorrowMut;
use std::cell::RefCell;
use std::sync::Arc;
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 7 (face font-lock-constant-face fontified t) 7 9 (fontified t) 9 15 (face font-lock-constant-face fontified t) 15 17 (fontified t) 17 26 (face font-lock-type-face fontified t) 26 28 (fontified t) 28 31 (face font-lock-keyword-face fontified t) 31 32 (fontified t) 32 35 (face font-lock-constant-face fontified t) 35 37 (fontified t) 37 41 (face font-lock-constant-face fontified t) 41 43 (fontified t) 43 50 (face font-lock-type-face fontified t) 50 52 (fontified t) 52 55 (face font-lock-keyword-face fontified t) 55 56 (fontified t) 56 59 (face font-lock-constant-face fontified t) 59 61 (fontified t) 61 65 (face font-lock-constant-face fontified t) 65 67 (fontified t) 67 70 (face font-lock-type-face fontified t) 70 72 (fontified t)) . 1) (undo-tree-id6182 . -72) (undo-tree-id6183 . -72) (undo-tree-id6184 . -72) (undo-tree-id6185 . -72) (undo-tree-id6186 . -71) (undo-tree-id6187 . -48) (undo-tree-id6188 . -45) (undo-tree-id6189 . -41) (undo-tree-id6190 . -11) (undo-tree-id6191 . -10) (undo-tree-id6192 . -8) (undo-tree-id6193 . -7) (undo-tree-id6194 . -5) (undo-tree-id6195 . -72) (t 26044 60299 224703 690000)) nil (26044 60305 312878 215000) 0 nil])
([nil nil ((862 . 864)) ((#("&s" 0 1 (face rust-ampersand-face fontified t) 1 2 (fontified t)) . 862) (undo-tree-id6081 . -2) (undo-tree-id6082 . -2) (undo-tree-id6083 . -1)) (26044 59797 356873 189000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1) (undo-tree-id6178 . -1) (undo-tree-id6179 . -1) (undo-tree-id6180 . -1) (undo-tree-id6181 . -1) 2) nil (26044 60305 312864 603000) 0 nil])
([nil nil ((863 . 869) (#("s" 0 1 (fontified nil)) . 863) (863 . 864) (#("source" 0 6 (fontified nil)) . -863) (863 . 869) (#("s" 0 1 (fontified t)) . -863) (undo-tree-id5253 . -1) (undo-tree-id5254 . -1) (undo-tree-id5256 . -1) (undo-tree-id5258 . -1) (undo-tree-id5260 . -1) 864) ((863 . 864) (#("source" 0 6 (fontified nil)) . 863) (863 . 869) (#("s" 0 1 (fontified nil)) . 863) (863 . 864) (#("source" 0 6 (fontified t)) . 863) (undo-tree-id6078 . -6) (undo-tree-id6079 . -6) (undo-tree-id6080 . -6)) (26044 59797 316106 725000) 0 nil])
([nil nil ((83 . 135) (#("error, element_warning, prelude::*};
use gstreamer::{Element, ElementFactory, Pipeline" 0 5 (fontified t) 5 22 (fontified t) 22 24 (fontified t) 24 26 (face font-lock-constant-face fontified t) 26 28 (face font-lock-constant-face fontified t) 28 30 (face font-lock-constant-face fontified t) 30 31 (face font-lock-constant-face fontified t) 31 34 (fontified t) 34 35 (face (rainbow-delimiters-depth-1-face) fontified t) 35 37 (fontified t) 37 40 (face font-lock-keyword-face fontified t) 40 41 (fontified t) 41 50 (face font-lock-constant-face fontified t) 50 52 (fontified t) 52 53 (face (rainbow-delimiters-depth-1-face) fontified t) 53 60 (face font-lock-type-face fontified t) 60 62 (fontified t) 62 76 (face font-lock-type-face fontified t) 76 78 (fontified t) 78 86 (face font-lock-type-face fontified t)) . 83) (undo-tree-id6390 . -60) (undo-tree-id6391 . -60) (undo-tree-id6392 . -60) (undo-tree-id6393 . -60) (undo-tree-id6394 . -60) (undo-tree-id6395 . -60) (undo-tree-id6396 . -60) (undo-tree-id6397 . -76) (undo-tree-id6398 . -86) (undo-tree-id6399 . -86) (undo-tree-id6400 . -86) (undo-tree-id6401 . -86) (undo-tree-id6402 . -86) (undo-tree-id6403 . -39) (undo-tree-id6404 . -40) (undo-tree-id6405 . -50) (undo-tree-id6406 . -60) (undo-tree-id6407 . -76) (undo-tree-id6408 . -86) (undo-tree-id6409 . -86) (undo-tree-id6410 . -86) (undo-tree-id6411 . -86) (undo-tree-id6412 . -86) (undo-tree-id6413 . -86) (undo-tree-id6414 . -86) 236 (t 26044 60305 328037 397000)) nil (26044 60413 871743 707000) 0 nil])
([nil nil ((869 . 873)) ((#(", &a" 0 2 (fontified t) 2 3 (face rust-ampersand-face fontified t) 3 4 (fontified t)) . 869) (undo-tree-id6075 . -4) (undo-tree-id6076 . -4) (undo-tree-id6077 . -2)) (26044 59797 276706 260000) 0 nil])
([nil nil ((#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -135) (undo-tree-id6419 . -1) (undo-tree-id6420 . -1) (undo-tree-id6421 . -1) (undo-tree-id6422 . -1) (undo-tree-id6423 . -1) (undo-tree-id6424 . -1) (undo-tree-id6425 . -1) 136 (t 26044 60377 494708 494000)) nil (26044 60418 921085 676000) 0 nil] [nil nil ((#("warning" 0 7 (fontified t)) . -83) (undo-tree-id6347 . -7) (undo-tree-id6348 . -7) (undo-tree-id6349 . -7) (undo-tree-id6350 . -7) (undo-tree-id6351 . -7) (undo-tree-id6352 . -7) (undo-tree-id6353 . -7) (undo-tree-id6354 . -7) (undo-tree-id6355 . -7) (undo-tree-id6356 . -7) (undo-tree-id6357 . -7) (undo-tree-id6358 . -7) (undo-tree-id6359 . -7) (undo-tree-id6360 . -7) (undo-tree-id6361 . -7) (undo-tree-id6362 . -7) (undo-tree-id6363 . -7) (undo-tree-id6364 . -7) (undo-tree-id6365 . -7) (undo-tree-id6366 . -7) (undo-tree-id6367 . -7) (undo-tree-id6368 . -7) (undo-tree-id6369 . -7) (undo-tree-id6370 . -7) (undo-tree-id6371 . -7) (undo-tree-id6372 . -7) (undo-tree-id6373 . -7) (undo-tree-id6374 . -7) (undo-tree-id6375 . -7) (undo-tree-id6376 . -7) (undo-tree-id6377 . -7) (undo-tree-id6378 . -7) (undo-tree-id6379 . -7) (undo-tree-id6380 . -7) (undo-tree-id6381 . -7) (undo-tree-id6382 . -7) (undo-tree-id6383 . -7) (undo-tree-id6384 . -7) (undo-tree-id6385 . -7) (undo-tree-id6386 . -7) (undo-tree-id6387 . -7) (undo-tree-id6388 . -7) (undo-tree-id6389 . -7) 90 (t 26044 60377 494708 494000)) ((83 . 90)) (26044 60412 985773 893000) 0 nil])
([nil nil ((872 . 885) (#("a" 0 1 (fontified nil)) . 872) (872 . 873) (#("audio_convert" 0 13 (fontified nil)) . -872) (872 . 885) (#("a" 0 1 (fontified t)) . -872) (undo-tree-id5245 . -1) (undo-tree-id5246 . -1) (undo-tree-id5248 . -1) (undo-tree-id5250 . -1) (undo-tree-id5252 . -1) 873) ((872 . 873) (#("audio_convert" 0 13 (fontified nil)) . 872) (872 . 885) (#("a" 0 1 (fontified nil)) . 872) (872 . 873) (#("audio_convert" 0 13 (fontified t)) . 872) (undo-tree-id6073 . -13) (undo-tree-id6074 . -13)) (26044 59797 236366 282000) 0 nil])
([nil nil ((#("{" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -120) (undo-tree-id6426 . -1) (undo-tree-id6427 . -1) (undo-tree-id6428 . -1) (undo-tree-id6429 . -1) (undo-tree-id6430 . -1) (undo-tree-id6431 . -1) (undo-tree-id6432 . -1) (undo-tree-id6433 . -1) (undo-tree-id6434 . -1) (undo-tree-id6435 . -1) (undo-tree-id6436 . -1) (undo-tree-id6437 . -1) 121) nil (26044 60419 969521 271000) 0 nil] [nil nil ((#("gstreamer::{" 0 9 (face font-lock-constant-face fontified t) 9 11 (fontified t) 11 12 (face (rainbow-delimiters-depth-1-face) fontified t)) . -109) (undo-tree-id6415 . -12) (undo-tree-id6416 . -12) (undo-tree-id6417 . -12) (undo-tree-id6418 . -12) 121) ((109 . 121)) (26044 60418 920864 676000) 0 nil])
([nil nil ((#("element_" 0 3 (fontified t) 3 8 (fontified t)) . -75) (undo-tree-id6276 . -8) (undo-tree-id6277 . -7) (undo-tree-id6278 . -8) (undo-tree-id6279 . -8) (undo-tree-id6280 . -8) (undo-tree-id6281 . -8) (undo-tree-id6282 . -8) (undo-tree-id6283 . -8) (undo-tree-id6284 . -8) (undo-tree-id6285 . -8) (undo-tree-id6286 . -8) (undo-tree-id6287 . -8) (undo-tree-id6288 . -8) (undo-tree-id6289 . -8) (undo-tree-id6290 . -8) (undo-tree-id6291 . -8) (undo-tree-id6292 . -8) (undo-tree-id6293 . -8) (undo-tree-id6294 . -8) (undo-tree-id6295 . -8) (undo-tree-id6296 . -8) (undo-tree-id6297 . -8) (undo-tree-id6298 . -8) (undo-tree-id6299 . -8) (undo-tree-id6300 . -8) (undo-tree-id6301 . -8) (undo-tree-id6302 . -8) (undo-tree-id6303 . -8) (undo-tree-id6304 . -8) (undo-tree-id6305 . -8) (undo-tree-id6306 . -8) (undo-tree-id6307 . -8) (undo-tree-id6308 . -8) (undo-tree-id6309 . -8) (undo-tree-id6310 . -8) (undo-tree-id6311 . -8) (undo-tree-id6312 . -8) (undo-tree-id6313 . -8) (undo-tree-id6314 . -8) (undo-tree-id6315 . -8) (undo-tree-id6316 . -8) (undo-tree-id6317 . -8) (undo-tree-id6318 . -8) (undo-tree-id6319 . -8) (undo-tree-id6320 . -8) (undo-tree-id6321 . -8) (undo-tree-id6322 . -8) (undo-tree-id6323 . -8) (undo-tree-id6324 . -8) (undo-tree-id6325 . -8) (undo-tree-id6326 . -8) (undo-tree-id6327 . -8) (undo-tree-id6328 . -8) (undo-tree-id6329 . -8) (undo-tree-id6330 . -8) (undo-tree-id6331 . -8) (undo-tree-id6332 . -8) (undo-tree-id6333 . -8) (undo-tree-id6334 . -8) (undo-tree-id6335 . -8) (undo-tree-id6336 . -8) (undo-tree-id6337 . -8) (undo-tree-id6338 . -8) (undo-tree-id6339 . -8) (undo-tree-id6340 . -8) (undo-tree-id6341 . -8) (undo-tree-id6342 . -8) (undo-tree-id6343 . -8) (undo-tree-id6344 . -8) (undo-tree-id6345 . -8) (undo-tree-id6346 . -8) 83) ((75 . 83)) (26044 60412 798128 947000) 0 nil])
([nil nil ((885 . 889)) ((#(", &a" 0 2 (fontified t) 2 3 (face rust-ampersand-face fontified t) 3 4 (fontified t)) . 885) (undo-tree-id6071 . -4) (undo-tree-id6072 . -4)) (26044 59797 196477 609000) 0 nil])
([nil nil ((#("u" 0 1 (face font-lock-string-face fontified t)) . -305) (undo-tree-id6534 . -1) (undo-tree-id6535 . -1) (undo-tree-id6536 . -1) (undo-tree-id6537 . -1) (undo-tree-id6538 . -1) (undo-tree-id6539 . -1) (undo-tree-id6540 . -1) (undo-tree-id6541 . -1) (undo-tree-id6542 . -1) (undo-tree-id6543 . -1) (undo-tree-id6544 . -1) (undo-tree-id6545 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -306) (undo-tree-id6546 . -1) (undo-tree-id6547 . -1) (undo-tree-id6548 . -1) (undo-tree-id6549 . -1) (undo-tree-id6550 . -1) (undo-tree-id6551 . -1) (undo-tree-id6552 . -1) (undo-tree-id6553 . -1) (undo-tree-id6554 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -307) (undo-tree-id6555 . -1) (undo-tree-id6556 . -1) (undo-tree-id6557 . -1) (undo-tree-id6558 . -1) (undo-tree-id6559 . -1) (undo-tree-id6560 . -1) 308 (t 26044 60420 18044 436000)) nil (26044 60686 975404 420000) 0 nil])
nil
([nil nil ((#("{" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -74) (undo-tree-id6196 . -1) (undo-tree-id6197 . -1) (undo-tree-id6198 . -1) (undo-tree-id6199 . -1) (undo-tree-id6200 . -1) (undo-tree-id6201 . -1) (undo-tree-id6202 . -1) (undo-tree-id6203 . -1) (undo-tree-id6204 . -1) (undo-tree-id6205 . -1) (undo-tree-id6206 . -1) (undo-tree-id6207 . -1) (undo-tree-id6208 . -1) (undo-tree-id6209 . -1) (undo-tree-id6210 . -1) (undo-tree-id6211 . -1) (undo-tree-id6212 . -1) (undo-tree-id6213 . -1) (undo-tree-id6214 . -1) (undo-tree-id6215 . -1) (undo-tree-id6216 . -1) (undo-tree-id6217 . -1) (undo-tree-id6218 . -1) (undo-tree-id6219 . -1) (undo-tree-id6220 . -1) (undo-tree-id6221 . -1) (undo-tree-id6222 . -1) (undo-tree-id6223 . -1) (undo-tree-id6224 . -1) (undo-tree-id6225 . -1) (undo-tree-id6226 . -1) (undo-tree-id6227 . -1) (undo-tree-id6228 . -1) (undo-tree-id6229 . -1) (undo-tree-id6230 . -1) (undo-tree-id6231 . -1) (undo-tree-id6232 . -1) (undo-tree-id6233 . -1) (undo-tree-id6234 . -1) (undo-tree-id6235 . -1) (undo-tree-id6236 . -1) (undo-tree-id6237 . -1) (undo-tree-id6238 . -1) (undo-tree-id6239 . -1) (undo-tree-id6240 . -1) (undo-tree-id6241 . -1) (undo-tree-id6242 . -1) (undo-tree-id6243 . -1) (undo-tree-id6244 . -1) (undo-tree-id6245 . -1) (undo-tree-id6246 . -1) (undo-tree-id6247 . -1) (undo-tree-id6248 . -1) (undo-tree-id6249 . -1) (undo-tree-id6250 . -1) (undo-tree-id6251 . -1) (undo-tree-id6252 . -1) (undo-tree-id6253 . -1) (undo-tree-id6254 . -1) (undo-tree-id6255 . -1) (undo-tree-id6256 . -1) (undo-tree-id6257 . -1) (undo-tree-id6258 . -1) (undo-tree-id6259 . -1) (undo-tree-id6260 . -1) (undo-tree-id6261 . -1) (undo-tree-id6262 . -1) (undo-tree-id6263 . -1) (undo-tree-id6264 . -1) (undo-tree-id6265 . -1) (undo-tree-id6266 . -1) (undo-tree-id6267 . -1) (undo-tree-id6268 . -1) (undo-tree-id6269 . -1) (undo-tree-id6270 . -1) (undo-tree-id6271 . -1) (undo-tree-id6272 . -1) (undo-tree-id6273 . -1) (undo-tree-id6274 . -1) (undo-tree-id6275 . -1) 75) ((74 . 75)) (26044 60412 797594 669000) 0 nil])
([nil nil ((888 . 902) (#("a" 0 1 (fontified nil)) . 888) (888 . 889) (#("audio_resample" 0 14 (fontified nil)) . -888) (888 . 902) (#("a" 0 1 (fontified t)) . -888) (undo-tree-id5236 . -1) (undo-tree-id5237 . -1) (undo-tree-id5239 . -1) (undo-tree-id5241 . -1) (undo-tree-id5243 . -1) 889) ((888 . 889) (#("audio_resample" 0 14 (fontified nil)) . 888) (888 . 902) (#("a" 0 1 (fontified nil)) . 888) (888 . 889) (#("audio_resample" 0 14 (fontified t)) . 888) (undo-tree-id6069 . -14) (undo-tree-id6070 . -14)) (26044 59797 156809 240000) 0 nil])
([nil nil ((#("source" 0 6 (face font-lock-string-face fontified t)) . -323) (undo-tree-id6527 . -6) (undo-tree-id6528 . -6) (undo-tree-id6529 . -6) (undo-tree-id6530 . -6) (undo-tree-id6531 . -6) (undo-tree-id6532 . -6) (undo-tree-id6533 . -6) 329) nil (26044 60686 975385 593000) 0 nil])
nil
([nil nil ((902 . 906)) ((#(", &a" 0 2 (fontified t) 2 3 (face rust-ampersand-face fontified t) 3 4 (fontified t)) . 902) (undo-tree-id6067 . -4) (undo-tree-id6068 . -4)) (26044 59797 124936 227000) 0 nil])
([nil nil ((323 . 332)) nil (26044 60686 975379 940000) 0 nil])
([nil nil ((905 . 915) (#("a" 0 1 (fontified nil)) . 905) (905 . 906) (#("audio_sink" 0 10 (fontified nil)) . -905) (905 . 915) (#("a" 0 1 (fontified t)) . -905) (undo-tree-id5227 . -1) (undo-tree-id5228 . -1) (undo-tree-id5230 . -1) (undo-tree-id5232 . -1) (undo-tree-id5234 . -1) 906) ((905 . 906) (#("audio_sink" 0 10 (fontified nil)) . 905) (905 . 915) (#("a" 0 1 (fontified nil)) . 905) (905 . 906) (#("audio_sink" 0 10 (fontified t)) . 905)) (26044 59797 86839 817000) 0 nil])
([nil nil ((255 . 260)) nil (26044 60686 975379 344000) 0 nil])
([nil nil ((apply yas--snippet-revive 852 917 #s(yas--snippet nil (#s(yas--field 1 861 861 nil nil nil t #s(yas--exit 870 nil))) #s(yas--exit 870 nil) 34 nil #s(yas--field 1 861 861 nil nil nil t #s(yas--exit 870 nil)) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 861 861 nil nil nil t #s(yas--exit 870 nil))) #s(yas--exit 870 nil) 34 nil #s(yas--field 1 861 861 nil nil nil t #s(yas--exit 870 nil)) nil nil))) (26044 59796 426851 493000) 0 nil])
([nil nil ((#("source" 0 6 (face font-lock-variable-name-face fontified t)) . -269) (undo-tree-id6513 . -6) (undo-tree-id6514 . -6) (undo-tree-id6515 . -6) (undo-tree-id6516 . -6) (undo-tree-id6517 . -6) (undo-tree-id6518 . -6) (undo-tree-id6519 . -6) (undo-tree-id6520 . -6) (undo-tree-id6521 . -6) (undo-tree-id6522 . -6) (undo-tree-id6523 . -6) (undo-tree-id6524 . -6) (undo-tree-id6525 . -6) (undo-tree-id6526 . -6) 275) nil (26044 60686 975378 224000) 0 nil])
([nil nil ((917 . 918)) ((#(";" 0 1 (fontified t)) . 917) (undo-tree-id6061 . -1) (undo-tree-id6062 . -1) (undo-tree-id6063 . -1) (undo-tree-id6064 . -1) (undo-tree-id6065 . -1) (undo-tree-id6066 . -1)) (26044 59796 255726 929000) 0 nil])
([nil nil ((269 . 275)) nil (26044 60686 975368 258000) 0 nil])
([nil nil ((917 . 918) (t 26044 59389 494647 885000)) ((#(">" 0 1 (syntax-table (1) fontified t)) . 917) (undo-tree-id6059 . -1) (undo-tree-id6060 . -1)) (26044 59796 24802 146000) 0 nil])
([nil nil ((275 . 278)) nil (26044 60686 975367 774000) 0 nil])
([nil nil ((#(">" 0 1 (syntax-table (1) fontified t)) . -917) (undo-tree-id5401 . -1) (undo-tree-id5403 . -1) 918) ((917 . 918)) (26044 59795 489977 536000) 0 nil])
([nil nil ((260 . 274)) nil (26044 60686 975367 252000) 0 nil])
([nil nil ((917 . 918)) ((#("?" 0 1 (face rust-question-mark fontified t)) . 917)) (26044 59794 845174 331000) 0 nil])
([nil nil ((273 . 287) (#("E" 0 1 (fontified nil)) . 273) (273 . 274) (#("ElementFactory (alias GstElementFactory)" 0 40 (fontified nil)) . -273) (273 . 313) (#("E" 0 1 (face font-lock-type-face fontified t)) . -273) (undo-tree-id6507 . -1) (undo-tree-id6508 . -1) (undo-tree-id6509 . -1) (undo-tree-id6510 . -1) (undo-tree-id6511 . -1) (undo-tree-id6512 . -1) 274) nil (26044 60686 975366 133000) 0 nil])
([nil nil ((807 . 809)) ((#("//" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 2 (face font-lock-comment-delimiter-face fontified t)) . 807) (undo-tree-id6058 . -2)) (26044 59794 586908 920000) 0 nil])
([nil nil ((287 . 293)) nil (26044 60686 975360 866000) 0 nil])
([nil nil ((921 . 926)) ((#("
    " 0 1 (fontified t) 1 5 (fontified t)) . 921) (undo-tree-id6050 . -5) (undo-tree-id6051 . -5) (undo-tree-id6052 . -5) (undo-tree-id6053 . -5) (undo-tree-id6054 . -1) (undo-tree-id6055 . -5) (undo-tree-id6056 . -1) (undo-tree-id6057 . -5)) (26044 59794 325967 447000) 0 nil])
([nil nil ((289 . 303) (#("make" 0 4 (fontified nil)) . 289) (289 . 293) (#("make_with_name (alias gst_element_factory_make)" 0 47 (fontified nil)) . -289) (289 . 336) (#("make" 0 4 (fontified t)) . -289) (undo-tree-id6494 . -4) (undo-tree-id6495 . -1) (undo-tree-id6496 . -1) (undo-tree-id6497 . -1) (undo-tree-id6498 . -2) (undo-tree-id6499 . -2) (undo-tree-id6500 . -3) (undo-tree-id6501 . -3) (undo-tree-id6502 . -4) (undo-tree-id6503 . -4) (undo-tree-id6504 . -4) (undo-tree-id6505 . -4) (undo-tree-id6506 . -4) 293) nil (26044 60686 975359 426000) 0 nil])
([nil nil ((926 . 927)) ((#("E" 0 1 (face font-lock-type-face fontified t)) . 926) (undo-tree-id6048 . -1) (undo-tree-id6049 . -1)) (26044 59793 984974 762000) 0 nil])
([nil nil ((303 . 305)) nil (26044 60686 975349 470000) 0 nil])
([nil nil ((927 . 929)) ((#("le" 0 2 (face font-lock-type-face fontified t)) . 927) (undo-tree-id6046 . -2) (undo-tree-id6047 . -2)) (26044 59793 616132 943000) 0 nil])
([nil nil ((304 . 305)) nil (26044 60686 975349 17000) 0 nil])
([nil nil ((926 . 933) (#("Ele" 0 3 (fontified nil)) . 926) (926 . 929) (#("Element (alias GstElement)" 0 26 (fontified nil)) . -926) (926 . 952) (#("Ele" 0 3 (face font-lock-type-face fontified t)) . -926) (undo-tree-id5394 . -3) (undo-tree-id5396 . -1) (undo-tree-id5398 . -2) (undo-tree-id5400 . -3) 929) ((926 . 929) (#("Element (alias GstElement)" 0 26 (fontified nil)) . 926) (926 . 952) (#("Ele" 0 3 (fontified nil)) . 926) (926 . 929) (#("Element" 0 7 (face font-lock-type-face fontified t)) . 926) (undo-tree-id6042 . -7) (undo-tree-id6043 . -7) (undo-tree-id6044 . -7) (undo-tree-id6045 . -7)) (26044 59793 281017 726000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -304) (undo-tree-id6491 . -1) (undo-tree-id6492 . -1) (undo-tree-id6493 . -1) 305) nil (26044 60686 975348 233000) 0 nil])
([nil nil ((933 . 939)) ((#("::link" 0 2 (fontified t) 2 6 (fontified t)) . 933) (undo-tree-id6038 . -6) (undo-tree-id6039 . -6) (undo-tree-id6040 . -2) (undo-tree-id6041 . -2)) (26044 59792 850312 279000) 0 nil])
([nil nil ((304 . 306)) nil (26044 60686 975345 592000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 945 945 nil nil nil t #s(yas--exit 954 nil))) #s(yas--exit 954 nil) 35 nil #s(yas--field 1 945 945 nil nil nil t #s(yas--exit 954 nil)) nil nil)) (935 . 954) (#("link_many(${1:elements})$0" 0 26 (fontified nil)) . 935) (935 . 961) (#("link" 0 4 (fontified nil)) . 935) (935 . 939) (#("link_many(…) (alias gst_element_link_many)" 0 42 (fontified nil)) . -935) (935 . 977) (#("link" 0 4 (fontified t)) . -935) (undo-tree-id5382 . -4) (undo-tree-id5384 . -1) (undo-tree-id5386 . -2) (undo-tree-id5388 . -3) (undo-tree-id5390 . -4) (undo-tree-id5392 . -4) 939) ((935 . 939) (#("link_many(…) (alias gst_element_link_many)" 0 42 (fontified nil)) . 935) (935 . 977) (#("link" 0 4 (fontified nil)) . 935) (935 . 939) (#("link_many(${1:elements})$0" 0 26 (fontified nil)) . 935) (935 . 961) (#("link_many(elements)" 0 9 (fontified t) 9 10 (face (rainbow-delimiters-depth-2-face) fontified t) 10 18 (fontified t) 18 19 (face (rainbow-delimiters-depth-2-face) fontified t)) . 935) (undo-tree-id6034 . -10) (undo-tree-id6035 . -10) (undo-tree-id6036 . -10) (undo-tree-id6037 . -10) (apply yas--snippet-revive 935 954 #s(yas--snippet nil (#s(yas--field 1 945 945 nil nil nil t #s(yas--exit 954 nil))) #s(yas--exit 954 nil) 35 nil #s(yas--field 1 945 945 nil nil nil t #s(yas--exit 954 nil)) nil nil))) (26044 59791 811805 618000) 0 nil])
([nil nil ((305 . 307)) nil (26044 60686 975344 988000) 0 nil])
([nil nil ((#("elements" 0 8 (fontified t)) . 945)) ((945 . 953)) (26044 59791 771188 675000) 0 nil])
([nil nil ((#("b" 0 1 (face font-lock-string-face fontified t)) . -306) (undo-tree-id6488 . -1) (undo-tree-id6489 . -1) (undo-tree-id6490 . -1) 307) nil (26044 60686 975344 113000) 0 nil])
([nil nil ((945 . 946)) ((#("(" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . 945) (undo-tree-id6032 . -1) (undo-tree-id6033 . -1)) (26044 59791 732863 455000) 0 nil])
([nil nil ((306 . 315)) nil (26044 60686 975341 290000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -945) (undo-tree-id5372 . -1) (undo-tree-id5373 . -1) (undo-tree-id5375 . -1) (undo-tree-id5377 . -1) (undo-tree-id5379 . -1) 946) ((945 . 946)) (26044 59791 694374 247000) 0 nil])
([nil nil ((#("," 0 1 (face font-lock-string-face fontified t)) . -312) (undo-tree-id6460 . -1) (undo-tree-id6461 . -1) (undo-tree-id6462 . -1) (undo-tree-id6463 . -1) (undo-tree-id6464 . -1) (undo-tree-id6465 . -1) (undo-tree-id6466 . -1) (undo-tree-id6467 . -1) (undo-tree-id6468 . -1) (undo-tree-id6469 . -1) (undo-tree-id6470 . -1) (undo-tree-id6471 . -1) (undo-tree-id6472 . -1) (undo-tree-id6473 . -1) (undo-tree-id6474 . -1) (undo-tree-id6475 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -313) (undo-tree-id6476 . -1) (undo-tree-id6477 . -1) (undo-tree-id6478 . -1) (undo-tree-id6479 . -1) (undo-tree-id6480 . -1) (undo-tree-id6481 . -1) (undo-tree-id6482 . -1) (undo-tree-id6483 . -1) (#("S" 0 1 (face font-lock-string-face fontified t)) . -314) (undo-tree-id6484 . -1) (undo-tree-id6485 . -1) (undo-tree-id6486 . -1) (undo-tree-id6487 . -1) 315) nil (26044 60686 975339 200000) 0 nil])
([nil nil ((945 . 947)) ((#("{}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 2 (face (rainbow-delimiters-depth-3-face) fontified t)) . 945) (undo-tree-id6031 . -2)) (26044 59791 651514 382000) 0 nil])
([nil nil ((313 . 316)) nil (26044 60686 974507 540000) 0 nil])
([nil nil ((apply yas--snippet-revive 935 948 #s(yas--snippet nil (#s(yas--field 1 945 945 nil nil nil t #s(yas--exit 954 nil))) #s(yas--exit 954 nil) 35 nil #s(yas--field 1 945 945 nil nil nil t #s(yas--exit 954 nil)) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 945 945 nil nil nil t #s(yas--exit 954 nil))) #s(yas--exit 954 nil) 35 nil #s(yas--field 1 945 945 nil nil nil t #s(yas--exit 954 nil)) nil nil))) (26044 59791 610765 687000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 320 328 nil nil nil t #s(yas--exit 329 nil))) #s(yas--exit 329 nil) 38 nil #s(yas--field 1 320 328 nil nil nil t #s(yas--exit 329 nil)) nil nil)) (315 . 323) (#("Some(${1:()})$0" 0 15 (fontified nil)) . 315) (315 . 330) (#("S" 0 1 (fontified nil)) . 315) (315 . 316) (#("Some(…)" 0 7 (fontified nil)) . -315) (315 . 322) (#("S" 0 1 (face font-lock-type-face fontified t)) . -315) (undo-tree-id6452 . -1) (undo-tree-id6453 . -1) (undo-tree-id6454 . -1) (undo-tree-id6455 . -1) (undo-tree-id6456 . -1) (undo-tree-id6457 . -1) (undo-tree-id6458 . -1) (undo-tree-id6459 . -1) 316) nil (26044 60686 974506 22000) 0 nil])
([nil nil ((#("{" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -945) (undo-tree-id5358 . -1) (undo-tree-id5360 . -1) (undo-tree-id5362 . -1) (undo-tree-id5364 . -1) (undo-tree-id5366 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -946) (undo-tree-id5368 . -1) (undo-tree-id5370 . -1) 947) ((945 . 947)) (26044 59791 571031 782000) 0 nil])
([nil nil ((321 . 322) (#("()" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 321) (undo-tree-id6451 . -2) (320 . 321)) nil (26044 60686 974498 983000) 0 nil])
([nil nil ((945 . 947)) ((#("[]" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 2 (face (rainbow-delimiters-depth-3-face) fontified t)) . 945) (undo-tree-id6029 . -1) (undo-tree-id6030 . -1)) (26044 59791 531012 100000) 0 nil])
([nil nil ((321 . 322)) nil (26044 60686 974497 315000) 0 nil])
([nil nil ((948 . 949)) ((#(";" 0 1 (fontified t)) . 948) (undo-tree-id6027 . -1) (undo-tree-id6028 . -1)) (26044 59791 490580 24000) 0 nil])
([nil nil ((322 . 327)) nil (26044 60686 974496 732000) 0 nil])
([nil nil ((949 . 954)) ((#("
    " 0 1 (fontified t) 1 5 (fontified t)) . 949)) (26044 59791 450285 52000) 0 nil])
([nil nil ((apply yas--snippet-revive 315 329 #s(yas--snippet nil (#s(yas--field 1 320 328 nil nil nil t #s(yas--exit 329 nil))) #s(yas--exit 329 nil) 38 nil #s(yas--field 1 320 328 nil nil nil t #s(yas--exit 329 nil)) nil nil))) nil (26044 60686 974496 97000) 0 nil])
([nil nil ((948 . 949)) ((#("?" 0 1 (face rust-question-mark fontified t)) . 948)) (26044 59791 410755 811000) 0 nil])
([nil nil ((330 . 331)) nil (26044 60686 974495 511000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -946) (undo-tree-id5281 . -1) (undo-tree-id5283 . -1) (undo-tree-id5285 . -1) (undo-tree-id5287 . -1) (undo-tree-id5289 . -1) (undo-tree-id5291 . -1) (undo-tree-id5293 . -1) (undo-tree-id5295 . -1) (undo-tree-id5297 . -1) (undo-tree-id5299 . -1) (undo-tree-id5301 . -1) (undo-tree-id5303 . -1) (undo-tree-id5305 . -1) (undo-tree-id5307 . -1) (undo-tree-id5309 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -947) (undo-tree-id5310 . -1) (undo-tree-id5312 . -1) (undo-tree-id5314 . -1) (undo-tree-id5316 . -1) (undo-tree-id5318 . -1) (undo-tree-id5320 . -1) (undo-tree-id5322 . -1) (undo-tree-id5324 . -1) (undo-tree-id5326 . -1) (undo-tree-id5328 . -1) (undo-tree-id5330 . -1) (undo-tree-id5332 . -1) (undo-tree-id5334 . -1) (#("?" 0 1 (face rust-question-mark fontified t)) . -948) (undo-tree-id5335 . -1) (undo-tree-id5337 . -1) (undo-tree-id5339 . -1) (undo-tree-id5341 . -1) (undo-tree-id5343 . -1) (undo-tree-id5345 . -1) (undo-tree-id5347 . -1) (undo-tree-id5349 . -1) (#(";" 0 1 (fontified t)) . -949) (undo-tree-id5351 . -1) (undo-tree-id5353 . -1) (undo-tree-id5355 . -1) (undo-tree-id5357 . -1) 950) ((946 . 950)) (26044 59791 370100 851000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -330) (undo-tree-id6448 . -1) (undo-tree-id6449 . -1) (undo-tree-id6450 . -1) 331) nil (26044 60686 974494 430000) 0 nil])
([nil nil ((nil rear-nonsticky nil 993 . 994) (nil fontified nil 993 . 994) (nil fontified nil 992 . 993) (nil fontified nil 991 . 992) (nil fontified nil 990 . 991) (nil fontified nil 980 . 990) (nil fontified nil 979 . 980) (nil fontified nil 963 . 979) (nil fontified nil 962 . 963) (nil fontified nil 947 . 962) (nil fontified nil 946 . 947) (946 . 994)) ((#("&audio_convert, &audio_resample, &audio_sink])?;" 0 1 (face rust-ampersand-face fontified nil) 1 16 (fontified nil) 16 17 (face rust-ampersand-face fontified nil) 17 33 (fontified nil) 33 34 (face rust-ampersand-face fontified nil) 34 44 (fontified nil) 44 45 (face (rainbow-delimiters-depth-3-face) fontified nil) 45 46 (face (rainbow-delimiters-depth-2-face) fontified nil) 46 47 (face rust-question-mark fontified nil) 47 48 (fontified nil rear-nonsticky nil)) . 946) (nil rear-nonsticky t 993 . 994)) (26044 59791 329947 300000) 0 nil])
([nil nil ((330 . 332)) nil (26044 60686 974491 271000) 0 nil])
([nil nil ((3394 . 3395) (t 26044 59420 524649 790000)) ((#("/" 0 1 (fontified t)) . 3394) (undo-tree-id6024 . -1) (undo-tree-id6025 . -1) (undo-tree-id6026 . -1)) (26044 59791 290798 298000) 0 nil])
([nil nil ((#(">" 0 1 (syntax-table (1) fontified t)) . -330) (undo-tree-id6438 . -1) (undo-tree-id6439 . -1) (undo-tree-id6440 . -1) (undo-tree-id6441 . -1) (undo-tree-id6442 . -1) (undo-tree-id6443 . -1) (undo-tree-id6444 . -1) (#("'" 0 1 (fontified t)) . -331) (undo-tree-id6445 . -1) (undo-tree-id6446 . -1) (undo-tree-id6447 . -1) 332) nil (26044 60686 974488 997000) 0 nil])
([nil nil ((3395 . 3396)) ((#("/" 0 1 (face font-lock-comment-delimiter-face)) . 3395)) (26044 59791 249358 241000) 0 nil])
([nil nil ((330 . 332)) nil (26044 60686 974470 742000) 0 nil])
([nil nil ((3442 . 3444)) ((#("//" 0 2 (face font-lock-comment-delimiter-face fontified t)) . 3442)) (26044 59791 210052 156000) 0 nil])
([nil nil ((529 . 530) (t 26044 60687 21394 146000)) nil (26044 60721 245859 614000) 0 nil])
([nil nil ((#("queue" 0 5 (fontified t)) . -4072) (undo-tree-id5465 . -5) (undo-tree-id5466 . -5) (undo-tree-id5468 . -5) 4077 (t 26044 59431 481317 129000)) ((4072 . 4077)) (26044 59791 169830 738000) 0 nil] [nil nil ((#("queue" 0 5 (fontified t)) . -4072) (undo-tree-id5404 . -5) (undo-tree-id5405 . -5) (undo-tree-id5406 . -5) (undo-tree-id5407 . -5) (undo-tree-id5408 . -5) (undo-tree-id5409 . -5) (undo-tree-id5410 . -5) (undo-tree-id5411 . -5) (undo-tree-id5412 . -5) (undo-tree-id5413 . -5) (undo-tree-id5414 . -5) (undo-tree-id5415 . -5) (undo-tree-id5416 . -5) (undo-tree-id5417 . -5) (undo-tree-id5418 . -5) (undo-tree-id5419 . -5) 4077 (t 26044 59431 481317 129000)) ((4072 . 4077)) (26044 59443 439488 784000) 0 nil])
([nil nil ((529 . 531)) nil (26044 60721 245858 875000) 0 nil])
([nil nil ((4072 . 4074)) ((#("p " 0 1 (fontified t) 1 2 (fontified t)) . 4072) (undo-tree-id6022 . -1) (undo-tree-id6023 . -1)) (26044 59791 130187 31000) 0 nil])
nil
([nil nil ((530 . 536) (#("s" 0 1 (fontified nil)) . 530) (530 . 531) (#("source" 0 6 (fontified nil)) . -530) (530 . 536) (#("s" 0 1 (fontified t)) . -530) (undo-tree-id6632 . -1) (undo-tree-id6633 . -1) (undo-tree-id6634 . -1) (undo-tree-id6635 . -1) (undo-tree-id6636 . -1) 531) nil (26044 60721 245857 639000) 0 nil])
([nil nil ((4073 . 4074)) ((#("i" 0 1 (fontified t)) . 4073) (undo-tree-id6020 . -1) (undo-tree-id6021 . -1)) (26044 59791 90913 778000) 0 nil])
([nil nil ((536 . 537)) nil (26044 60721 245852 862000) 0 nil])
([nil nil ((4072 . 4080) (#("pi" 0 2 (fontified nil)) . 4072) (4072 . 4074) (#("pipeline" 0 8 (fontified nil)) . -4072) (4072 . 4080) (#("pi" 0 2 (fontified t)) . -4072) (undo-tree-id5464 . -2) 4074) ((4072 . 4074) (#("pipeline" 0 8 (fontified nil)) . 4072) (4072 . 4080) (#("pi" 0 2 (fontified nil)) . 4072) (4072 . 4074) (#("pipeline" 0 8 (fontified t)) . 4072) (undo-tree-id6016 . -8) (undo-tree-id6017 . -8) (undo-tree-id6018 . -8) (undo-tree-id6019 . -8)) (26044 59791 50135 523000) 0 nil])
([nil nil ((#("source" 0 6 (fontified t)) . -539) (undo-tree-id6629 . -6) (undo-tree-id6630 . -6) (undo-tree-id6631 . -6) 545) nil (26044 60721 245851 990000) 0 nil])
([nil nil ((4080 . 4084)) ((#(".get" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . 4080) (undo-tree-id6012 . -4) (undo-tree-id6013 . -4) (undo-tree-id6014 . -1) (undo-tree-id6015 . -1)) (26044 59791 10281 902000) 0 nil])
([nil nil ((539 . 540)) nil (26044 60721 245633 249000) 0 nil])
([nil nil ((4084 . 4085)) ((#("e" 0 1 (fontified t)) . 4084) (undo-tree-id6010 . -1) (undo-tree-id6011 . -1)) (26044 59790 969739 631000) 0 nil])
([nil nil ((539 . 548) (#("d" 0 1 (fontified nil)) . 539) (539 . 540) (#("decodebin" 0 9 (fontified nil)) . -539) (539 . 548) (#("d" 0 1 (fontified t)) . -539) (undo-tree-id6621 . -1) (undo-tree-id6622 . -1) (undo-tree-id6623 . -1) (undo-tree-id6624 . -1) (undo-tree-id6625 . -1) (undo-tree-id6626 . -1) (undo-tree-id6627 . -1) (undo-tree-id6628 . -1) 540) nil (26044 60721 245632 14000) 0 nil])
([nil nil ((4085 . 4087)) ((#("le" 0 1 (fontified t) 1 2 (fontified t)) . 4085) (undo-tree-id6008 . -2) (undo-tree-id6009 . -2)) (26044 59790 930877 787000) 0 nil])
([nil nil ((552 . 557)) nil (26044 60721 245625 677000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -4081) (undo-tree-id5458 . -1) (#("e" 0 1 (fontified t)) . -4082) (undo-tree-id5459 . -1) (#("t" 0 1 (fontified t)) . -4083) (undo-tree-id5460 . -1) (#("e" 0 1 (fontified t)) . -4084) (undo-tree-id5461 . -1) (#("l" 0 1 (fontified t)) . -4085) (undo-tree-id5462 . -1) (#("e" 0 1 (fontified t)) . -4086) (undo-tree-id5463 . -1) 4087) ((4081 . 4087)) (26044 59790 890362 209000) 0 nil])
([nil nil ((557 . 558)) nil (26044 60721 245625 49000) 0 nil])
([nil nil ((4081 . 4088)) ((#("element" 0 7 (fontified t)) . 4081) (undo-tree-id6006 . -7) (undo-tree-id6007 . -7)) (26044 59790 850036 884000) 0 nil])
([nil nil ((558 . 560)) nil (26044 60721 245624 495000) 0 nil])
([nil nil ((#("element" 0 7 (fontified t)) . -4081) (undo-tree-id5457 . -7) 4088) ((4081 . 4088)) (26044 59790 810662 61000) 0 nil])
([nil nil ((102 . 111) (557 . 557) (557 . 564) (#("Ele" 0 3 (fontified nil)) . 557) (557 . 560) (#("Element (alias GstElement) (use gstreamer::Element)" 0 51 (fontified nil)) . -557) (557 . 608) (#("Ele" 0 3 (face font-lock-type-face fontified t)) . -557) (undo-tree-id6608 . -3) (undo-tree-id6609 . -1) (undo-tree-id6610 . -1) (undo-tree-id6611 . -1) (undo-tree-id6612 . -1) (undo-tree-id6613 . -1) (undo-tree-id6614 . -2) (undo-tree-id6615 . -2) (undo-tree-id6616 . -3) (undo-tree-id6617 . -3) (undo-tree-id6618 . -3) (undo-tree-id6619 . -3) (undo-tree-id6620 . -3) 560) nil (26044 60721 245623 65000) 0 nil])
([nil nil ((4081 . 4084)) ((#("chi" 0 3 (fontified t)) . 4081) (undo-tree-id6004 . -3) (undo-tree-id6005 . -3)) (26044 59790 769552 153000) 0 nil])
([nil nil ((573 . 575)) nil (26044 60721 245612 928000) 0 nil])
([nil nil ((4084 . 4085)) ((#("l" 0 1 (fontified t)) . 4084) (undo-tree-id6002 . -1) (undo-tree-id6003 . -1)) (26044 59790 728398 89000) 0 nil])
([nil nil ((#("L" 0 1 (face font-lock-type-face fontified t)) . -573) (undo-tree-id6594 . -1) (undo-tree-id6595 . -1) (undo-tree-id6596 . -1) (undo-tree-id6597 . -1) (undo-tree-id6598 . -1) (undo-tree-id6599 . -1) (undo-tree-id6600 . -1) (undo-tree-id6601 . -1) (undo-tree-id6602 . -1) (#("L" 0 1 (face font-lock-type-face fontified t)) . -574) (undo-tree-id6603 . -1) (undo-tree-id6604 . -1) (undo-tree-id6605 . -1) (undo-tree-id6606 . -1) (undo-tree-id6607 . -1) 575) nil (26044 60721 245611 660000) 0 nil])
([nil nil ((4085 . 4086)) ((#("d" 0 1 (fontified t)) . 4085) (undo-tree-id6000 . -1) (undo-tree-id6001 . -1)) (26044 59790 691170 533000) 0 nil])
([nil nil ((573 . 576)) nil (26044 60721 245602 472000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4095 4095 nil nil nil t #s(yas--exit 4100 nil))) #s(yas--exit 4100 nil) 36 nil #s(yas--field 1 4095 4095 nil nil nil t #s(yas--exit 4100 nil)) nil nil)) (4081 . 4100) (#("child_by_name(${1:name})$0" 0 26 (fontified nil)) . 4081) (4081 . 4107) (#("child" 0 5 (fontified nil)) . 4081) (4081 . 4086) (#("child_by_name(…) (alias gst_child_proxy_get_child_by_name, get_child_by_name) (as ChildProxyExt)" 0 96 (fontified nil)) . -4081) (4081 . 4177) (#("child" 0 5 (fontified t)) . -4081) (undo-tree-id5456 . -5) 4086) ((4081 . 4086) (#("child_by_name(…) (alias gst_child_proxy_get_child_by_name, get_child_by_name) (as ChildProxyExt)" 0 96 (fontified nil)) . 4081) (4081 . 4177) (#("child" 0 5 (fontified nil)) . 4081) (4081 . 4086) (#("child_by_name(${1:name})$0" 0 26 (fontified nil)) . 4081) (4081 . 4107) (#("child_by_name(name)" 0 6 (fontified t) 6 9 (fontified t) 9 13 (fontified t) 13 14 (face (rainbow-delimiters-depth-6-face) fontified t) 14 18 (fontified t) 18 19 (face (rainbow-delimiters-depth-6-face) fontified t)) . 4081) (undo-tree-id5996 . -14) (undo-tree-id5997 . -14) (undo-tree-id5998 . -14) (undo-tree-id5999 . -19) (apply yas--snippet-revive 4081 4100 #s(yas--snippet nil (#s(yas--field 1 4095 4095 nil nil nil t #s(yas--exit 4100 nil))) #s(yas--exit 4100 nil) 36 nil #s(yas--field 1 4095 4095 nil nil nil t #s(yas--exit 4100 nil)) nil nil))) (26044 59790 650600 437000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 585 607 nil nil nil t #s(yas--exit 608 nil))) #s(yas--exit 608 nil) 39 nil #s(yas--field 1 585 607 nil nil nil t #s(yas--exit 608 nil)) nil nil)) (575 . 594) (#("link_many(${1:elements})$0" 0 26 (fontified nil)) . 575) (575 . 601) (#("l" 0 1 (fontified nil)) . 575) (575 . 576) (#("link_many(…) (alias gst_element_link_many)" 0 42 (fontified nil)) . -575) (575 . 617) (#("l" 0 1 (fontified t)) . -575) (undo-tree-id6587 . -1) (undo-tree-id6588 . -1) (undo-tree-id6589 . -1) (undo-tree-id6590 . -1) (undo-tree-id6591 . -1) (undo-tree-id6592 . -1) (undo-tree-id6593 . -1) 576) nil (26044 60721 245601 138000) 0 nil])
([nil nil ((4096 . 4097) (#("name" 0 4 (fontified nil)) . 4096) (4095 . 4096)) ((#("\"" 0 1 (face font-lock-string-face fontified nil)) . 4095) (undo-tree-id5994 . -1) (4096 . 4100) (#("\"" 0 1 (face font-lock-string-face fontified t)) . 4096) (undo-tree-id5995 . -1)) (26044 59790 607892 707000) 0 nil])
([nil nil ((586 . 587) (#("elements" 0 8 (fontified nil)) . 586) (undo-tree-id6586 . -8) (585 . 586)) nil (26044 60721 245594 562000) 0 nil])
([nil nil ((apply yas--snippet-revive 4081 4098 #s(yas--snippet nil (#s(yas--field 1 4095 4095 nil nil nil t #s(yas--exit 4100 nil))) #s(yas--exit 4100 nil) 36 nil #s(yas--field 1 4095 4095 nil nil nil t #s(yas--exit 4100 nil)) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4095 4095 nil nil nil t #s(yas--exit 4100 nil))) #s(yas--exit 4100 nil) 36 nil #s(yas--field 1 4095 4095 nil nil nil t #s(yas--exit 4100 nil)) nil nil))) (26044 59790 567888 341000) 0 nil])
([nil nil ((586 . 588)) nil (26044 60721 245593 52000) 0 nil])
([nil nil ((4096 . 4098)) ((#("ch" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t)) . 4096) (undo-tree-id5992 . -2) (undo-tree-id5993 . -2)) (26044 59790 527698 333000) 0 nil])
([nil nil ((587 . 593) (#("s" 0 1 (fontified nil)) . 587) (587 . 588) (#("source" 0 6 (fontified nil)) . -587) (587 . 593) (#("s" 0 1 (fontified t)) . -587) (undo-tree-id6578 . -1) (undo-tree-id6579 . -1) (undo-tree-id6580 . -1) (undo-tree-id6581 . -1) (undo-tree-id6582 . -1) (undo-tree-id6583 . -1) (undo-tree-id6584 . -1) (undo-tree-id6585 . -1) 588) nil (26044 60721 245591 712000) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-string-face fontified t)) . -4096) (undo-tree-id5439 . -1) (undo-tree-id5441 . -1) (undo-tree-id5443 . -1) (undo-tree-id5445 . -1) (undo-tree-id5447 . -1) (#("h" 0 1 (face font-lock-string-face fontified t)) . -4097) (undo-tree-id5449 . -1) (undo-tree-id5451 . -1) (undo-tree-id5453 . -1) 4098) ((4096 . 4098)) (26044 59790 487349 314000) 0 nil])
([nil nil ((593 . 596)) nil (26044 60721 245585 170000) 0 nil])
([nil nil ((4096 . 4103)) ((#("convefr" 0 5 (face font-lock-string-face fontified t) 5 6 (face font-lock-string-face fontified t) 6 7 (face font-lock-string-face fontified t)) . 4096) (undo-tree-id5990 . -7) (undo-tree-id5991 . -7)) (26044 59790 446769 616000) 0 nil])
([nil nil ((596 . 598)) nil (26044 60721 245584 622000) 0 nil])
([nil nil ((#("f" 0 1 (face font-lock-string-face fontified t)) . -4101) (undo-tree-id5429 . -1) (undo-tree-id5431 . -1) (undo-tree-id5433 . -1) (undo-tree-id5435 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -4102) (undo-tree-id5436 . -1) (undo-tree-id5438 . -1) 4103) ((4101 . 4103)) (26044 59790 408244 738000) 0 nil])
([nil nil ((597 . 606) (#("d" 0 1 (fontified nil)) . 597) (597 . 598) (#("decodebin" 0 9 (fontified nil)) . -597) (597 . 606) (#("d" 0 1 (fontified t)) . -597) (undo-tree-id6570 . -1) (undo-tree-id6571 . -1) (undo-tree-id6572 . -1) (undo-tree-id6573 . -1) (undo-tree-id6574 . -1) (undo-tree-id6575 . -1) (undo-tree-id6576 . -1) (undo-tree-id6577 . -1) 598) nil (26044 60721 245583 404000) 0 nil])
([nil nil ((4101 . 4103)) ((#("rt" 0 2 (face font-lock-string-face fontified t)) . 4101)) (26044 59790 365337 975000) 0 nil])
([nil nil ((apply yas--snippet-revive 575 608 #s(yas--snippet nil (#s(yas--field 1 585 607 nil nil nil t #s(yas--exit 608 nil))) #s(yas--exit 608 nil) 39 nil #s(yas--field 1 585 607 nil nil nil t #s(yas--exit 608 nil)) nil nil))) nil (26044 60721 245576 710000) 0 nil])
([nil nil ((4105 . 4107)) ((#(".u" 0 1 (fontified t) 1 2 (fontified t)) . 4105) (undo-tree-id5987 . -2) (undo-tree-id5988 . -2) (undo-tree-id5989 . -1)) (26044 59790 326405 975000) 0 nil])
([nil nil ((608 . 609)) nil (26044 60721 245576 113000) 0 nil])
([nil nil ((apply yas--snippet-revive 4106 4114 #s(yas--snippet nil nil #s(yas--exit #<marker at 3584 in main.rs> nil) 37 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 3584 in main.rs> nil) 37 nil nil nil nil)) (4106 . 4114) (#("unwrap()$0" 0 10 (fontified nil)) . 4106) (4106 . 4116) (#("u" 0 1 (fontified nil)) . 4106) (4106 . 4107) (#("unwrap()" 0 8 (fontified nil)) . -4106) (4106 . 4114) (#("u" 0 1 (fontified t)) . -4106) (undo-tree-id5424 . -1) (undo-tree-id5426 . -1) (undo-tree-id5428 . -1) 4107) ((4106 . 4107) (#("unwrap()" 0 8 (fontified nil)) . 4106) (4106 . 4114) (#("u" 0 1 (fontified nil)) . 4106) (4106 . 4107) (#("unwrap()$0" 0 10 (fontified nil)) . 4106) (4106 . 4116) (#("unwrap()" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-6-face) fontified t) 7 8 (face (rainbow-delimiters-depth-6-face) fontified t)) . 4106) (undo-tree-id5986 . -8)) (26044 59790 296717 122000) 0 nil])
([nil nil ((#(">" 0 1 (syntax-table (1) fontified t)) . -608) (undo-tree-id6567 . -1) (undo-tree-id6568 . -1) (undo-tree-id6569 . -1) 609) nil (26044 60721 245575 100000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -4114) (undo-tree-id5420 . -1) (undo-tree-id5422 . -1) 4115) ((4114 . 4115)) (26044 59789 636146 851000) 0 nil])
([nil nil ((608 . 610)) nil (26044 60721 245572 24000) 0 nil])
([nil nil ((#("unwrap()" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-6-face) fontified t) 7 8 (face (rainbow-delimiters-depth-6-face) fontified t)) . -4106) (undo-tree-id5785 . -8) (undo-tree-id5787 . -8) (undo-tree-id5789 . -8) (undo-tree-id5791 . -8) (undo-tree-id5793 . -8) (undo-tree-id5795 . -8) (undo-tree-id5797 . -8) (undo-tree-id5799 . -8) 4114 (t 26044 59542 144657 252000)) ((4106 . 4114)) (26044 59789 465196 673000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -609) (undo-tree-id6561 . -1) (undo-tree-id6562 . -1) (undo-tree-id6563 . -1) (undo-tree-id6564 . -1) (undo-tree-id6565 . -1) (undo-tree-id6566 . -1) 610) nil (26044 60721 245569 919000) 0 nil])
([nil nil ((#("convert\")." 0 8 (face font-lock-string-face fontified t) 8 9 (face (rainbow-delimiters-depth-6-face) fontified t) 9 10 (fontified t)) . -4096) (undo-tree-id5752 . -9) (undo-tree-id5753 . -10) (undo-tree-id5755 . -5) (undo-tree-id5757 . -5) (undo-tree-id5759 . -5) (undo-tree-id5761 . -9) (undo-tree-id5763 . -10) (undo-tree-id5765 . -10) (undo-tree-id5767 . -10) (undo-tree-id5769 . -10) (undo-tree-id5771 . -10) (undo-tree-id5773 . -10) (undo-tree-id5775 . -10) (undo-tree-id5777 . -10) (undo-tree-id5779 . -10) (undo-tree-id5781 . -10) (undo-tree-id5783 . -10) 4106) ((4096 . 4106)) (26044 59789 282349 125000) 0 nil])
([nil nil ((609 . 610)) nil (26044 60721 245555 164000) 0 nil])
([nil nil ((4096 . 4097)) ((#(" " 0 1 (face font-lock-string-face fontified t)) . 4096)) (26044 59789 110461 671000) 0 nil])
([nil nil ((#("    /* Set the URI to play */
    source.set_property_from_str(
        \"uri\",
        \"https://gstreamer.freedesktop.org/data/media/sintel_trailer-480p.webm\",
    );" 0 4 (fontified t) 4 7 (face font-lock-comment-delimiter-face fontified t) 7 29 (face font-lock-comment-face fontified t) 29 62 (fontified t) 62 63 (face (rainbow-delimiters-depth-2-face) fontified t) 63 64 (fontified t) 64 72 (fontified t) 72 77 (face font-lock-string-face fontified t) 77 79 (fontified t) 79 87 (fontified t) 87 158 (face font-lock-string-face fontified t) 158 164 (fontified t) 164 165 (face (rainbow-delimiters-depth-2-face) fontified t) 165 166 (fontified t)) . 612) (undo-tree-id6666 . -166) (undo-tree-id6667 . -166) (undo-tree-id6668 . -166) (undo-tree-id6669 . -166) (undo-tree-id6670 . -90) (undo-tree-id6671 . -89) (undo-tree-id6672 . -88) (undo-tree-id6673 . -87) (undo-tree-id6674 . -71) (undo-tree-id6675 . -70) (undo-tree-id6676 . -69) (undo-tree-id6677 . -68) (undo-tree-id6678 . -33) (undo-tree-id6679 . -32) (undo-tree-id6680 . -31) (undo-tree-id6681 . -30) (undo-tree-id6682 . -30) (undo-tree-id6683 . -30) (undo-tree-id6684 . -30) (undo-tree-id6685 . -30) (undo-tree-id6686 . -30) (undo-tree-id6687 . -166) (t 26044 60721 261396 248000)) nil (26044 60866 570044 630000) 0 nil])
([nil nil ((#("name(\"" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-6-face) fontified t) 5 6 (face font-lock-string-face fontified t)) . -4090) (undo-tree-id5697 . -6) (undo-tree-id5698 . -6) (undo-tree-id5699 . -5) (undo-tree-id5701 . -6) (undo-tree-id5703 . -6) (undo-tree-id5705 . -6) (undo-tree-id5707 . -6) (undo-tree-id5709 . -6) (undo-tree-id5711 . -6) (undo-tree-id5713 . -6) (undo-tree-id5715 . -6) (undo-tree-id5717 . -6) (undo-tree-id5719 . -6) (undo-tree-id5721 . -6) (undo-tree-id5723 . -6) (undo-tree-id5725 . -6) (undo-tree-id5727 . -6) (undo-tree-id5729 . -6) (undo-tree-id5731 . -6) (undo-tree-id5733 . -6) (undo-tree-id5735 . -6) (undo-tree-id5737 . -6) (undo-tree-id5739 . -6) (undo-tree-id5741 . -6) (undo-tree-id5743 . -6) (undo-tree-id5745 . -6) (undo-tree-id5747 . -6) (undo-tree-id5749 . -6) (undo-tree-id5751 . -6) 4096) ((4090 . 4096)) (26044 59788 950179 61000) 0 nil])
([nil nil ((#("source" 0 6 (fontified t)) . -718) (undo-tree-id6707 . -6) (undo-tree-id6708 . -6) 724 (t 26044 60867 508071 884000)) nil (26044 60887 994924 510000) 0 nil] [nil nil ((#("
" 0 1 (fontified t)) . -611) (undo-tree-id6637 . -1) (undo-tree-id6638 . -1) (undo-tree-id6640 . -1) (undo-tree-id6642 . -1) (undo-tree-id6644 . -1) (undo-tree-id6646 . -1) (undo-tree-id6648 . -1) (undo-tree-id6650 . -1) (undo-tree-id6652 . -1) (undo-tree-id6654 . -1) (undo-tree-id6656 . -1) (undo-tree-id6658 . -1) (undo-tree-id6659 . -1) (undo-tree-id6661 . -1) (undo-tree-id6663 . -1) (undo-tree-id6665 . -1) 612) ((611 . 612)) (26044 60866 380797 431000) 0 nil])
([nil nil ((#("by_" 0 3 (fontified t)) . -4087) (undo-tree-id5640 . -3) (undo-tree-id5641 . -3) (undo-tree-id5642 . -3) (undo-tree-id5644 . -3) (undo-tree-id5646 . -3) (undo-tree-id5648 . -3) (undo-tree-id5650 . -3) (undo-tree-id5652 . -3) (undo-tree-id5654 . -3) (undo-tree-id5656 . -3) (undo-tree-id5658 . -3) (undo-tree-id5660 . -3) (undo-tree-id5662 . -3) (undo-tree-id5664 . -3) (undo-tree-id5666 . -3) (undo-tree-id5668 . -3) (undo-tree-id5670 . -3) (undo-tree-id5672 . -3) (undo-tree-id5674 . -3) (undo-tree-id5676 . -3) (undo-tree-id5678 . -3) (undo-tree-id5680 . -3) (undo-tree-id5682 . -3) (undo-tree-id5684 . -3) (undo-tree-id5686 . -3) (undo-tree-id5688 . -3) (undo-tree-id5690 . -3) (undo-tree-id5692 . -3) (undo-tree-id5694 . -3) (undo-tree-id5696 . -3) 4090) ((4087 . 4090)) (26044 59788 779462 43000) 0 nil])
([nil nil ((718 . 720)) nil (26044 60887 994921 80000) 0 nil])
([nil nil ((342 . 344) (t 26044 60728 131396 669000)) ((#("//" 0 2 (face font-lock-comment-delimiter-face fontified t)) . 342) (undo-tree-id6688 . -2) (undo-tree-id6689 . -2) (undo-tree-id6690 . -2) (undo-tree-id6691 . -2) (undo-tree-id6692 . -2) (undo-tree-id6693 . -2) (undo-tree-id6694 . -2) (undo-tree-id6695 . -2) (undo-tree-id6696 . -2) (undo-tree-id6697 . -2) (undo-tree-id6698 . -2) (undo-tree-id6699 . -2) (t 26044 60864 401405 27000)) (26044 60864 366801 397000) 0 nil])
([nil nil ((#("child_" 0 6 (fontified t)) . -4081) (undo-tree-id5581 . -6) (undo-tree-id5582 . -6) (undo-tree-id5583 . -6) (undo-tree-id5585 . -6) (undo-tree-id5587 . -6) (undo-tree-id5589 . -6) (undo-tree-id5591 . -6) (undo-tree-id5593 . -6) (undo-tree-id5595 . -6) (undo-tree-id5597 . -6) (undo-tree-id5599 . -6) (undo-tree-id5601 . -6) (undo-tree-id5603 . -6) (undo-tree-id5605 . -6) (undo-tree-id5607 . -6) (undo-tree-id5609 . -6) (undo-tree-id5611 . -6) (undo-tree-id5613 . -6) (undo-tree-id5615 . -6) (undo-tree-id5617 . -6) (undo-tree-id5619 . -6) (undo-tree-id5621 . -6) (undo-tree-id5623 . -6) (undo-tree-id5625 . -6) (undo-tree-id5627 . -6) (undo-tree-id5629 . -6) (undo-tree-id5631 . -6) (undo-tree-id5633 . -6) (undo-tree-id5635 . -6) (undo-tree-id5637 . -6) (undo-tree-id5639 . -6) 4087) ((4081 . 4087)) (26044 59788 619647 487000) 0 nil])
([nil nil ((718 . 727) (#("de" 0 2 (fontified nil)) . 718) (718 . 720) (#("decodebin" 0 9 (fontified nil)) . -718) (718 . 727) (#("de" 0 2 (fontified t)) . -718) (undo-tree-id6700 . -2) (undo-tree-id6701 . -1) (undo-tree-id6702 . -1) (undo-tree-id6703 . -2) (undo-tree-id6704 . -2) (undo-tree-id6705 . -2) (undo-tree-id6706 . -2) 720) nil (26044 60960 420781 28000) 0 nil])
nil
([nil nil ((4081 . 4082)) ((#("c" 0 1 (fontified t)) . 4081) (undo-tree-id5984 . -1) (undo-tree-id5985 . -1)) (26044 59788 455378 896000) 0 nil])
([nil nil ((6224 . 6241) (t 26044 60888 11406 474000)) nil (26044 60971 860360 299000) 0 nil] [nil nil ((#("
" 0 1 (fontified t)) . 6135) (undo-tree-id6709 . -1) (t 26044 60888 11406 474000)) ((6135 . 6136)) (26044 60960 420025 230000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -4081) (undo-tree-id5575 . -1) (undo-tree-id5577 . -1) (undo-tree-id5579 . -1) 4082) ((4081 . 4082)) (26044 59788 279224 435000) 0 nil])
([nil nil ((6241 . 6243)) nil (26044 60971 860359 353000) 0 nil])
nil
([nil nil ((4081 . 4084)) ((#("ele" 0 3 (fontified t)) . 4081) (undo-tree-id5982 . -3) (undo-tree-id5983 . -3)) (26044 59788 110469 934000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -6241) (undo-tree-id6725 . -1) (undo-tree-id6726 . -1) (undo-tree-id6727 . -1) (undo-tree-id6728 . -1) (undo-tree-id6729 . -1) (undo-tree-id6730 . -1) (undo-tree-id6731 . -1) (undo-tree-id6732 . -1) (undo-tree-id6733 . -1) (#("e" 0 1 (fontified t)) . -6242) (undo-tree-id6734 . -1) (undo-tree-id6735 . -1) (undo-tree-id6736 . -1) (undo-tree-id6737 . -1) (undo-tree-id6738 . -1) 6243) nil (26044 60971 860357 918000) 0 nil])
([nil nil ((#("ele" 0 3 (fontified t)) . -4081) (undo-tree-id5565 . -3) (undo-tree-id5567 . -1) (undo-tree-id5569 . -2) (undo-tree-id5571 . -3) (undo-tree-id5573 . -3) 4084) ((4081 . 4084)) (26044 59787 942315 145000) 0 nil])
([nil nil ((6241 . 6242)) nil (26044 60971 860346 823000) 0 nil])
([nil nil ((#("pipeline. " 0 9 (fontified t) 9 10 (fontified t)) . -4072) (undo-tree-id5475 . -9) (undo-tree-id5476 . -10) (undo-tree-id5477 . -9) (undo-tree-id5479 . -9) (undo-tree-id5481 . -9) (undo-tree-id5483 . -9) (undo-tree-id5485 . -9) (undo-tree-id5487 . -9) (undo-tree-id5489 . -9) (undo-tree-id5491 . -9) (undo-tree-id5493 . -9) (undo-tree-id5495 . -9) (undo-tree-id5497 . -9) (undo-tree-id5499 . -9) (undo-tree-id5501 . -9) (undo-tree-id5503 . -9) (undo-tree-id5505 . -9) (undo-tree-id5507 . -9) (undo-tree-id5509 . -9) (undo-tree-id5511 . -9) (undo-tree-id5513 . -9) (undo-tree-id5515 . -9) (undo-tree-id5517 . -9) (undo-tree-id5519 . -9) (undo-tree-id5521 . -9) (undo-tree-id5523 . -9) (undo-tree-id5525 . -9) (undo-tree-id5527 . -10) (undo-tree-id5529 . -9) (undo-tree-id5531 . -9) (undo-tree-id5533 . -9) (undo-tree-id5535 . -9) (undo-tree-id5537 . -9) (undo-tree-id5539 . -9) (undo-tree-id5541 . -9) (undo-tree-id5543 . -9) (undo-tree-id5545 . -9) (undo-tree-id5547 . -9) (undo-tree-id5549 . -9) (undo-tree-id5551 . -9) (undo-tree-id5553 . -9) (undo-tree-id5555 . -9) (undo-tree-id5557 . -9) (undo-tree-id5559 . -9) (undo-tree-id5561 . -9) (undo-tree-id5563 . -10) 4082) ((4072 . 4082)) (26044 59787 773222 782000) 0 nil])
([nil nil ((6242 . 6243)) nil (26044 60971 860345 912000) 0 nil])
([nil nil ((4072 . 4073)) ((#("a" 0 1 (fontified t)) . 4072) (undo-tree-id5980 . -1) (undo-tree-id5981 . -1)) (26044 59787 588297 693000) 0 nil])
([nil nil ((apply yas--snippet-revive 6241 6247 #s(yas--snippet nil nil nil 40 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 40 nil nil nil nil)) (6241 . 6247) (#("break;" 0 6 (fontified nil)) . 6241) (6241 . 6247) (#("br" 0 2 (fontified nil)) . 6241) (6241 . 6243) (#("break" 0 5 (fontified nil)) . -6241) (6241 . 6246) (#("br" 0 2 (fontified t)) . -6241) (undo-tree-id6716 . -2) (undo-tree-id6717 . -1) (undo-tree-id6718 . -1) (undo-tree-id6719 . -1) (undo-tree-id6720 . -1) (undo-tree-id6721 . -2) (undo-tree-id6722 . -2) (undo-tree-id6723 . -2) (undo-tree-id6724 . -2) 6243) nil (26044 60971 860343 815000) 0 nil])
([nil nil ((4072 . 4085) (#("a" 0 1 (fontified nil)) . 4072) (4072 . 4073) (#("audio_convert" 0 13 (fontified nil)) . -4072) (4072 . 4085) (#("a" 0 1 (fontified t)) . -4072) (undo-tree-id5469 . -1) (undo-tree-id5471 . -1) (undo-tree-id5473 . -1) 4073) ((4072 . 4073) (#("audio_convert" 0 13 (fontified nil)) . 4072) (4072 . 4085) (#("a" 0 1 (fontified nil)) . 4072) (4072 . 4073) (#("audio_convert" 0 13 (fontified t)) . 4072)) (26044 59787 381957 782000) 0 nil])
([nil nil ((6247 . 6248)) nil (26044 60971 860333 946000) 0 nil])
([nil nil ((3807 . 3809) (t 26044 59565 304658 674000)) ((#("//" 0 2 (face font-lock-comment-delimiter-face fontified t)) . 3807)) (26044 59787 147550 552000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -6247) (undo-tree-id6710 . -1) (undo-tree-id6711 . -1) (undo-tree-id6712 . -1) (undo-tree-id6713 . -1) (undo-tree-id6714 . -1) (undo-tree-id6715 . -1) 6248) nil (26044 60971 860329 815000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3845) (undo-tree-id5801 . -2) (undo-tree-id5803 . -2) (undo-tree-id5805 . -2) (undo-tree-id5807 . -2) 3847) ((3845 . 3849)) (26044 59786 904440 152000) 0 nil])
([nil nil ((340 . 344) (t 26044 60971 908078 287000)) nil (26044 61068 494797 820000) 0 nil])
([nil nil ((3845 . 3847)) ((#("//" 0 2 (face font-lock-comment-delimiter-face fontified t)) . 3845)) (26044 59786 654646 534000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -340) (undo-tree-id6795 . -1) (undo-tree-id6796 . -1) (undo-tree-id6797 . -1) (undo-tree-id6798 . -1) (undo-tree-id6799 . -1) (undo-tree-id6800 . -1) (undo-tree-id6801 . -1) (undo-tree-id6802 . -1) (undo-tree-id6803 . -1) (undo-tree-id6804 . -1) (undo-tree-id6805 . -1) (undo-tree-id6806 . -1) (undo-tree-id6807 . -1) (undo-tree-id6808 . -1) (undo-tree-id6809 . -1) (undo-tree-id6810 . -1) (undo-tree-id6811 . -1) (undo-tree-id6812 . -1) (undo-tree-id6813 . -1) (undo-tree-id6814 . -1) (#("p" 0 1 (fontified t)) . -341) (undo-tree-id6815 . -1) (undo-tree-id6816 . -1) (undo-tree-id6817 . -1) (undo-tree-id6818 . -1) (undo-tree-id6819 . -1) (undo-tree-id6820 . -1) (undo-tree-id6821 . -1) (undo-tree-id6822 . -1) (undo-tree-id6823 . -1) (undo-tree-id6824 . -1) (undo-tree-id6825 . -1) (undo-tree-id6826 . -1) (undo-tree-id6827 . -1) (undo-tree-id6828 . -1) (#("r" 0 1 (fontified t)) . -342) (undo-tree-id6829 . -1) (undo-tree-id6830 . -1) (undo-tree-id6831 . -1) (undo-tree-id6832 . -1) (undo-tree-id6833 . -1) (undo-tree-id6834 . -1) (undo-tree-id6835 . -1) (#("o" 0 1 (fontified t)) . -343) (undo-tree-id6836 . -1) (undo-tree-id6837 . -1) (undo-tree-id6838 . -1) (undo-tree-id6839 . -1) (undo-tree-id6840 . -1) 344) nil (26044 61068 494795 69000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3888) 3893) ((3888 . 3892)) (26044 59786 327009 826000) 0 nil])
([nil nil ((428 . 432) (#("    " 0 4 (fontified nil)) . 427) (427 . 431) (427 . 428)) nil (26044 61068 494763 145000) 0 nil])
([nil nil ((3888 . 3890)) ((#("//" 0 2 (face font-lock-comment-delimiter-face fontified t)) . 3888) (undo-tree-id5977 . -2) (undo-tree-id5978 . -2) (undo-tree-id5979 . -2)) (26044 59786 70951 14000) 0 nil])
([nil nil ((428 . 432) (#("    " 0 4 (fontified nil)) . 427) (427 . 431) (427 . 428)) nil (26044 61068 494761 998000) 0 nil])
([nil nil ((3876 . 3892) (#("            " 0 12 (fontified t)) . 3876) 3890) ((3876 . 3888) (#("                " 0 8 (fontified t) 8 16 (fontified t)) . 3876)) (26044 59785 824844 128000) 0 nil])
([nil nil ((432 . 433)) nil (26044 61068 494761 127000) 0 nil])
([nil nil ((926 . 928) (t 26044 59599 77994 79000)) ((#("//" 0 2 (face font-lock-comment-delimiter-face fontified t)) . 926) (undo-tree-id5976 . -2)) (26044 59785 785397 408000) 0 nil])
([nil nil ((432 . 438) (#("s" 0 1 (fontified nil)) . 432) (432 . 433) (#("source" 0 6 (fontified nil)) . -432) (432 . 438) (#("s" 0 1 (fontified t)) . -432) (undo-tree-id6790 . -1) (undo-tree-id6791 . -1) (undo-tree-id6792 . -1) (undo-tree-id6793 . -1) (undo-tree-id6794 . -1) 433) nil (26044 61068 494760 55000) 0 nil])
([nil nil ((3489 . 3505) (#("                " 0 16 (face font-lock-comment-face fontified nil)) . 3488) (3488 . 3504) (3488 . 3489)) ((#("
" 0 1 (fontified nil)) . 3488) (undo-tree-id5967 . -1) (undo-tree-id5968 . -1) (undo-tree-id5969 . -1) (undo-tree-id5970 . -1) (undo-tree-id5971 . -1) (#("                " 0 16 (face font-lock-comment-face fontified nil)) . 3488) (3488 . 3504) (#("                " 0 16 (fontified t)) . 3489) (undo-tree-id5972 . -16) (undo-tree-id5973 . -16) (undo-tree-id5974 . -16) (undo-tree-id5975 . -16)) (26044 59785 745178 601000) 0 nil])
([nil nil ((438 . 440)) nil (26044 61068 494755 491000) 0 nil])
([nil nil ((nil fontified nil 3572 . 3573) (nil fontified nil 3571 . 3572) (nil fontified nil 3570 . 3571) (nil fontified nil 3569 . 3570) (nil fontified nil 3559 . 3569) (nil fontified nil 3558 . 3559) (nil fontified nil 3542 . 3558) (nil fontified nil 3541 . 3542) (nil fontified nil 3526 . 3541) (nil fontified nil 3525 . 3526) (nil fontified nil 3524 . 3525) (nil fontified nil 3523 . 3524) (nil fontified nil 3514 . 3523) (nil fontified nil 3512 . 3514) (nil fontified nil 3505 . 3512) (3505 . 3573)) ((#("Element::link_many([&audio_convert, &audio_resample, &audio_sink])?;" 0 7 (face font-lock-type-face fontified nil) 7 9 (fontified nil) 9 18 (fontified nil) 18 19 (face (rainbow-delimiters-depth-6-face) fontified nil) 19 20 (face (rainbow-delimiters-depth-7-face) fontified nil) 20 21 (face rust-ampersand-face fontified nil) 21 36 (fontified nil) 36 37 (face rust-ampersand-face fontified nil) 37 53 (fontified nil) 53 54 (face rust-ampersand-face fontified nil) 54 64 (fontified nil) 64 65 (face (rainbow-delimiters-depth-7-face) fontified nil) 65 66 (face (rainbow-delimiters-depth-6-face) fontified nil) 66 67 (face rust-question-mark fontified nil) 67 68 (fontified nil rear-nonsticky t)) . 3505) (nil fontified t 3572 . 3573)) (26044 59785 704560 234000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -439) (undo-tree-id6784 . -1) (undo-tree-id6785 . -1) (undo-tree-id6786 . -1) (undo-tree-id6787 . -1) (undo-tree-id6788 . -1) (undo-tree-id6789 . -1) 440) nil (26044 61068 494754 648000) 0 nil])
([nil nil ((845 . 847) (t 26044 59644 677996 878000)) ((#("//" 0 2 (face font-lock-comment-delimiter-face fontified t)) . 845) (undo-tree-id5966 . -2)) (26044 59785 667218 172000) 0 nil])
([nil nil ((439 . 442)) nil (26044 61068 494750 189000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -807) (undo-tree-id5809 . -1) (undo-tree-id5811 . -1) (undo-tree-id5813 . -1) (undo-tree-id5815 . -1) (undo-tree-id5817 . -1) (undo-tree-id5819 . -1) (undo-tree-id5821 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -808) (undo-tree-id5822 . -1) (undo-tree-id5824 . -1) (undo-tree-id5826 . -1) (undo-tree-id5828 . -1) (undo-tree-id5830 . -1) (undo-tree-id5832 . -1) 809) ((807 . 809)) (26044 59785 624897 475000) 0 nil])
([nil nil ((442 . 443)) nil (26044 61068 494749 530000) 0 nil])
([nil nil ((3310 . 3326) (#("                " 0 16 (fontified nil)) . 3309) (3309 . 3325) (3309 . 3310) (t 26044 59740 291336 73000)) ((#("
" 0 1 (fontified nil)) . 3309) (undo-tree-id5924 . -1) (undo-tree-id5925 . -1) (undo-tree-id5926 . -1) (undo-tree-id5927 . -1) (undo-tree-id5928 . -1) (undo-tree-id5929 . -1) (undo-tree-id5930 . -1) (undo-tree-id5931 . -1) (undo-tree-id5932 . -1) (undo-tree-id5933 . -1) (undo-tree-id5934 . -1) (undo-tree-id5935 . -1) (undo-tree-id5936 . -1) (undo-tree-id5937 . -1) (undo-tree-id5938 . -1) (undo-tree-id5939 . -1) (undo-tree-id5940 . -1) (undo-tree-id5941 . -1) (undo-tree-id5942 . -1) (undo-tree-id5943 . -1) (undo-tree-id5944 . -1) (#("                " 0 16 (fontified nil)) . 3309) (3309 . 3325) (#("                " 0 16 (fontified t)) . 3310) (undo-tree-id5945 . -16) (undo-tree-id5946 . -16) (undo-tree-id5947 . -16) (undo-tree-id5948 . -16) (undo-tree-id5949 . -16) (undo-tree-id5950 . -16) (undo-tree-id5951 . -16) (undo-tree-id5952 . -16) (undo-tree-id5953 . -16) (undo-tree-id5954 . -16) (undo-tree-id5955 . -16) (undo-tree-id5956 . -16) (undo-tree-id5957 . -16) (undo-tree-id5958 . -16) (undo-tree-id5959 . -16) (undo-tree-id5960 . -16) (undo-tree-id5961 . -16) (undo-tree-id5962 . -16) (undo-tree-id5963 . -16) (undo-tree-id5964 . -16) (undo-tree-id5965 . -16)) (26044 59785 584920 52000) 0 nil])
([nil nil ((#("prop" 0 4 (fontified t)) . -439) (undo-tree-id6771 . -4) (undo-tree-id6772 . -1) (undo-tree-id6773 . -1) (undo-tree-id6774 . -1) (undo-tree-id6775 . -2) (undo-tree-id6776 . -2) (undo-tree-id6777 . -3) (undo-tree-id6778 . -3) (undo-tree-id6779 . -4) (undo-tree-id6780 . -4) (undo-tree-id6781 . -4) (undo-tree-id6782 . -4) (undo-tree-id6783 . -4) 443) nil (26044 61068 494748 317000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3401 . 3402) (nil fontified nil 3401 . 3402) (nil fontified nil 3400 . 3401) (nil fontified nil 3399 . 3400) (nil fontified nil 3398 . 3399) (nil fontified nil 3388 . 3398) (nil fontified nil 3387 . 3388) (nil fontified nil 3371 . 3387) (nil fontified nil 3370 . 3371) (nil fontified nil 3355 . 3370) (nil fontified nil 3354 . 3355) (nil fontified nil 3346 . 3354) (nil fontified nil 3345 . 3346) (nil fontified nil 3344 . 3345) (nil fontified nil 3343 . 3344) (nil fontified nil 3335 . 3343) (nil fontified nil 3326 . 3335) (3326 . 3402)) ((#("pipeline.add_many([&source, &audio_convert, &audio_resample, &audio_sink])?;" 0 9 (fontified nil) 9 17 (fontified nil) 17 18 (face (rainbow-delimiters-depth-6-face) fontified nil) 18 19 (face (rainbow-delimiters-depth-7-face) fontified nil) 19 20 (face rust-ampersand-face fontified nil) 20 28 (fontified nil) 28 29 (face rust-ampersand-face fontified nil) 29 44 (fontified nil) 44 45 (face rust-ampersand-face fontified nil) 45 61 (fontified nil) 61 62 (face rust-ampersand-face fontified nil) 62 72 (fontified nil) 72 73 (face (rainbow-delimiters-depth-7-face) fontified nil) 73 74 (face (rainbow-delimiters-depth-6-face) fontified nil) 74 75 (face rust-question-mark fontified nil) 75 76 (rear-nonsticky nil fontified nil)) . 3326) (undo-tree-id5904 . -28) (undo-tree-id5905 . -28) (undo-tree-id5906 . -28) (undo-tree-id5907 . -20) (undo-tree-id5908 . -20) (undo-tree-id5909 . -20) (undo-tree-id5910 . -20) (undo-tree-id5911 . -20) (undo-tree-id5912 . -19) (undo-tree-id5913 . -19) (undo-tree-id5914 . -19) (undo-tree-id5915 . -19) (undo-tree-id5916 . -19) (undo-tree-id5917 . -19) (undo-tree-id5918 . -19) (undo-tree-id5919 . -19) (undo-tree-id5920 . -19) (undo-tree-id5921 . -19) (undo-tree-id5922 . -19) (undo-tree-id5923 . -19) (nil rear-nonsticky t 3401 . 3402)) (26044 59785 544104 504000) 0 nil])
([nil nil ((439 . 447)) nil (26044 61068 494738 331000) 0 nil])
([nil nil ((#("source, " 0 8 (fontified t)) . -3346) (undo-tree-id5840 . -8) (undo-tree-id5841 . -8) 3354 (t 26044 59747 238003 166000)) ((3346 . 3354)) (26044 59785 514631 643000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 461 469 nil nil nil t #s(yas--field 2 471 476 nil nil nil nil #s(yas--exit 477 nil))) #s(yas--field 2 471 476 nil nil nil nil #s(yas--exit 477 nil))) #s(yas--exit 477 nil) 41 nil #s(yas--field 1 461 469 nil nil nil t #s(yas--field 2 471 476 nil nil nil nil #s(yas--exit 477 nil))) nil nil)) (439 . 473) (#("set_property_from_str(${1:name}, ${2:value})$0" 0 46 (fontified nil)) . 439) (439 . 485) (#("set_prop" 0 8 (fontified nil)) . 439) (439 . 447) (#("set_property_from_str(…) (alias gst_util_set_object_arg) (as GObjectExtManualGst)" 0 81 (fontified nil)) . -439) (439 . 520) (#("set_prop" 0 8 (fontified t)) . -439) (undo-tree-id6746 . -8) (undo-tree-id6747 . -1) (undo-tree-id6748 . -1) (undo-tree-id6749 . -1) (undo-tree-id6750 . -2) (undo-tree-id6751 . -2) (undo-tree-id6752 . -2) (undo-tree-id6753 . -3) (undo-tree-id6754 . -3) (undo-tree-id6755 . -3) (undo-tree-id6756 . -3) (undo-tree-id6757 . -4) (undo-tree-id6758 . -4) (undo-tree-id6759 . -4) (undo-tree-id6760 . -5) (undo-tree-id6761 . -5) (undo-tree-id6762 . -6) (undo-tree-id6763 . -6) (undo-tree-id6764 . -7) (undo-tree-id6765 . -7) (undo-tree-id6766 . -8) (undo-tree-id6767 . -8) (undo-tree-id6768 . -8) (undo-tree-id6769 . -8) (undo-tree-id6770 . -8) 447) nil (26044 61068 494736 20000) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . -3345) (undo-tree-id5833 . -1) (undo-tree-id5834 . -1) (undo-tree-id5835 . -1) (undo-tree-id5836 . -1) (undo-tree-id5837 . -1) (undo-tree-id5838 . -1) (undo-tree-id5839 . -1) 3346) ((3345 . 3346)) (26044 59784 854477 886000) 0 nil])
([nil nil ((462 . 463) (#("name" 0 4 (fontified nil)) . 462) (undo-tree-id6745 . -4) (461 . 462)) nil (26044 61068 494714 108000) 0 nil])
([nil nil ((#("pipeline.add_many([&audio_convert, &audio_resample, &audio_sink])?;" 0 9 (fontified t) 9 17 (fontified t) 17 18 (face (rainbow-delimiters-depth-6-face) fontified t) 18 19 (face (rainbow-delimiters-depth-7-face) fontified t) 19 20 (face rust-ampersand-face fontified t) 20 35 (fontified t) 35 36 (face rust-ampersand-face fontified t) 36 52 (fontified t) 52 53 (face rust-ampersand-face fontified t) 53 63 (fontified t) 63 64 (face (rainbow-delimiters-depth-7-face) fontified t) 64 65 (face (rainbow-delimiters-depth-6-face) fontified t) 65 66 (face rust-question-mark fontified t) 66 67 (rear-nonsticky t fontified t)) . 3326) (undo-tree-id5842 . -19) (undo-tree-id5843 . -19) (undo-tree-id5844 . -19) (undo-tree-id5845 . -19) (undo-tree-id5846 . -19) (undo-tree-id5847 . -19) (undo-tree-id5848 . -19) (undo-tree-id5849 . -19) (undo-tree-id5850 . -19) (undo-tree-id5851 . -19) (undo-tree-id5852 . -19) (undo-tree-id5853 . -19) (undo-tree-id5854 . -19) (undo-tree-id5855 . -19) (undo-tree-id5856 . -19) (undo-tree-id5857 . -19) (undo-tree-id5858 . -19) (undo-tree-id5859 . -19) (undo-tree-id5860 . -67) (t 26044 59752 101336 799000)) ((3326 . 3393)) (26044 59783 297216 321000) 0 nil])
([nil nil ((462 . 468)) nil (26044 61068 494711 280000) 0 nil])
([nil nil ((nil fontified nil 3571 . 3572) (nil fontified nil 3570 . 3571) (nil fontified nil 3569 . 3570) (nil fontified nil 3568 . 3569) (nil fontified nil 3558 . 3568) (nil fontified nil 3557 . 3558) (nil fontified nil 3541 . 3557) (nil fontified nil 3540 . 3541) (nil fontified nil 3525 . 3540) (nil fontified nil 3524 . 3525) (nil fontified nil 3523 . 3524) (nil fontified nil 3522 . 3523) (nil fontified nil 3514 . 3522) (nil fontified nil 3505 . 3514) (3505 . 3572)) ((#("pipeline.add_many([&audio_convert, &audio_resample, &audio_sink])?;" 0 9 (fontified nil) 9 17 (fontified nil) 17 18 (face (rainbow-delimiters-depth-6-face) fontified nil) 18 19 (face (rainbow-delimiters-depth-7-face) fontified nil) 19 20 (face rust-ampersand-face fontified nil) 20 35 (fontified nil) 35 36 (face rust-ampersand-face fontified nil) 36 52 (fontified nil) 52 53 (face rust-ampersand-face fontified nil) 53 63 (fontified nil) 63 64 (face (rainbow-delimiters-depth-7-face) fontified nil) 64 65 (face (rainbow-delimiters-depth-6-face) fontified nil) 65 66 (face rust-question-mark fontified nil) 66 67 (fontified nil rear-nonsticky t)) . 3505) (undo-tree-id5869 . -67) (undo-tree-id5870 . -67) (undo-tree-id5871 . -67) (undo-tree-id5872 . -67) (undo-tree-id5873 . -67) (undo-tree-id5874 . -67) (undo-tree-id5875 . -67) (undo-tree-id5876 . -67) (undo-tree-id5877 . -67) (undo-tree-id5878 . -67) (undo-tree-id5879 . -67) (undo-tree-id5880 . -67) (undo-tree-id5881 . -67) (undo-tree-id5882 . -67) (undo-tree-id5883 . -67) (undo-tree-id5884 . -67) (undo-tree-id5885 . -67) (undo-tree-id5886 . -67) (undo-tree-id5887 . -67) (undo-tree-id5888 . -67) (undo-tree-id5889 . -67) (undo-tree-id5890 . -67) (undo-tree-id5891 . -67) (undo-tree-id5892 . -67) (undo-tree-id5893 . -67) (undo-tree-id5894 . -67) (undo-tree-id5895 . -67) (undo-tree-id5896 . -67) (undo-tree-id5897 . -67) (undo-tree-id5898 . -67) (undo-tree-id5899 . -67) (undo-tree-id5900 . -67) (undo-tree-id5901 . -67) (undo-tree-id5902 . -67) (undo-tree-id5903 . -67) (nil fontified t 3571 . 3572)) (26044 59783 79489 374000) 0 nil])
([nil nil ((apply yas--snippet-revive 439 477 #s(yas--snippet nil (#s(yas--field 1 461 469 nil nil nil t #s(yas--field 2 471 476 nil nil nil nil #s(yas--exit 477 nil))) #s(yas--field 2 471 476 nil nil nil nil #s(yas--exit 477 nil))) #s(yas--exit 477 nil) 41 nil #s(yas--field 1 461 469 nil nil nil t #s(yas--field 2 471 476 nil nil nil nil #s(yas--exit 477 nil))) nil nil))) nil (26044 61068 494710 235000) 0 nil])
([nil nil ((3505 . 3521) 3572) ((#("                " 0 16 (fontified t)) . 3505) (undo-tree-id5861 . -16) (undo-tree-id5862 . -16) (undo-tree-id5863 . -16) (undo-tree-id5864 . -16) (undo-tree-id5865 . -16) (undo-tree-id5866 . -16) (undo-tree-id5867 . -16) (undo-tree-id5868 . -16) (t 26044 59758 738003 873000)) (26044 59758 725501 481000) 0 nil])
([nil nil ((#("value" 0 5 (fontified t)) . -471) (undo-tree-id6739 . -5) (undo-tree-id6740 . -5) (undo-tree-id6741 . -5) (undo-tree-id6742 . -5) (undo-tree-id6743 . -5) (undo-tree-id6744 . -5) 476) nil (26044 61068 494707 668000) 0 nil])
nil
([nil nil ((471 . 473)) nil (26044 61068 494693 156000) 0 nil])
([nil nil ((472 . 483)) nil (26044 61068 494691 204000) 0 nil])
([nil nil ((485 . 486)) nil (26044 61068 494686 276000) 0 nil])
([nil nil ((#("0" 0 1 (face font-lock-string-face fontified t)) . -482) (undo-tree-id6841 . -1) (undo-tree-id6842 . -1) (undo-tree-id6843 . -1) (undo-tree-id6844 . -1) (undo-tree-id6845 . -1) (undo-tree-id6846 . -1) 483 (t 26044 61068 544750 884000)) nil (26044 61100 512553 837000) 0 nil])
([nil nil ((482 . 483)) nil (26044 61100 512538 653000) 0 nil])
([nil nil ((#("1" 0 1 (face font-lock-string-face fontified t)) . -482) (undo-tree-id6847 . -1) (undo-tree-id6848 . -1) (undo-tree-id6849 . -1) (undo-tree-id6850 . -1) (undo-tree-id6851 . -1) (undo-tree-id6852 . -1) (undo-tree-id6853 . -1) (undo-tree-id6854 . -1) (undo-tree-id6855 . -1) (undo-tree-id6856 . -1) (undo-tree-id6857 . -1) (undo-tree-id6858 . -1) (undo-tree-id6859 . -1) (undo-tree-id6860 . -1) (undo-tree-id6861 . -1) (undo-tree-id6862 . -1) (undo-tree-id6863 . -1) (undo-tree-id6864 . -1) (undo-tree-id6865 . -1) (undo-tree-id6866 . -1) (undo-tree-id6867 . -1) (undo-tree-id6868 . -1) (undo-tree-id6869 . -1) (undo-tree-id6870 . -1) (undo-tree-id6871 . -1) (undo-tree-id6872 . -1) (undo-tree-id6873 . -1) (undo-tree-id6874 . -1) (undo-tree-id6875 . -1) (undo-tree-id6876 . -1) (undo-tree-id6877 . -1) 483 (t 26044 61100 528086 182000)) nil (26044 61118 34051 190000) 0 nil])
([nil nil ((482 . 483)) nil (26044 61118 34015 841000) 0 nil])
([nil nil ((428 . 432) (#("    " 0 4 (fontified nil)) . 427) (427 . 431) (427 . 428) (t 26044 61118 81420 587000)) nil (26044 61344 644958 810000) 0 nil])
([nil nil ((428 . 432) (#("    " 0 4 (fontified nil)) . 427) (427 . 431) (427 . 428)) nil (26044 61344 644956 789000) 0 nil])
([nil nil ((432 . 438)) nil (26044 61344 644955 170000) 0 nil])
([nil nil ((#("AppSrc" 0 6 (face font-lock-type-face fontified t)) . -432) (undo-tree-id7091 . -6) (undo-tree-id7092 . -1) (undo-tree-id7093 . -1) (undo-tree-id7094 . -2) (undo-tree-id7095 . -2) (undo-tree-id7096 . -2) (undo-tree-id7097 . -2) (undo-tree-id7098 . -3) (undo-tree-id7099 . -3) (undo-tree-id7100 . -4) (undo-tree-id7101 . -4) (undo-tree-id7102 . -4) (undo-tree-id7103 . -4) (undo-tree-id7104 . -4) (undo-tree-id7105 . -4) (undo-tree-id7106 . -5) (undo-tree-id7107 . -5) (undo-tree-id7108 . -5) (undo-tree-id7109 . -5) (undo-tree-id7110 . -6) (undo-tree-id7111 . -6) (undo-tree-id7112 . -6) (undo-tree-id7113 . -6) (undo-tree-id7114 . -6) 438) nil (26044 61344 644951 953000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -427) (undo-tree-id6885 . -1) (undo-tree-id6886 . 1) (undo-tree-id6887 . -1) (undo-tree-id6888 . -1) (undo-tree-id6889 . -1) (undo-tree-id6890 . -1) (undo-tree-id6891 . -1) (undo-tree-id6892 . -1) (undo-tree-id6893 . -1) (undo-tree-id6894 . -1) (undo-tree-id6895 . -1) (undo-tree-id6896 . -1) (undo-tree-id6897 . -1) (undo-tree-id6898 . -1) (undo-tree-id6899 . -1) (undo-tree-id6900 . -1) (undo-tree-id6901 . -1) (undo-tree-id6902 . -1) (undo-tree-id6903 . -1) (undo-tree-id6904 . -1) (undo-tree-id6905 . -1) (undo-tree-id6906 . -1) (undo-tree-id6907 . -1) (undo-tree-id6908 . -1) (undo-tree-id6909 . -1) (undo-tree-id6910 . -1) (undo-tree-id6911 . -1) (undo-tree-id6912 . -1) (undo-tree-id6913 . -1) (undo-tree-id6914 . -1) (undo-tree-id6915 . -1) (undo-tree-id6916 . -1) (undo-tree-id6917 . -1) (undo-tree-id6918 . -1) (undo-tree-id6919 . -1) (undo-tree-id6920 . -1) (undo-tree-id6921 . -1) (undo-tree-id6922 . -1) (undo-tree-id6923 . -1) (undo-tree-id6924 . -1) (undo-tree-id6925 . -1) (undo-tree-id6926 . -1) (undo-tree-id6927 . -1) (undo-tree-id6928 . -1) (undo-tree-id6929 . -1) (undo-tree-id6930 . -1) (undo-tree-id6931 . -1) (undo-tree-id6932 . -1) (undo-tree-id6933 . -1) (undo-tree-id6934 . -1) (#(" " 0 1 (fontified t)) . -428) (undo-tree-id6935 . -1) (undo-tree-id6936 . -1) (undo-tree-id6937 . -1) (undo-tree-id6938 . -1) (undo-tree-id6939 . -1) (undo-tree-id6940 . -1) (undo-tree-id6941 . -1) (undo-tree-id6942 . -1) (undo-tree-id6943 . -1) (undo-tree-id6944 . -1) (undo-tree-id6945 . -1) (undo-tree-id6946 . -1) (undo-tree-id6947 . -1) (undo-tree-id6948 . -1) (undo-tree-id6949 . -1) (undo-tree-id6950 . -1) (undo-tree-id6951 . -1) (undo-tree-id6952 . -1) (undo-tree-id6953 . -1) (undo-tree-id6954 . -1) (undo-tree-id6955 . -1) (undo-tree-id6956 . -1) (undo-tree-id6957 . -1) (undo-tree-id6958 . -1) (undo-tree-id6959 . -1) (undo-tree-id6960 . -1) (undo-tree-id6961 . -1) (undo-tree-id6962 . -1) (undo-tree-id6963 . -1) (undo-tree-id6964 . -1) (undo-tree-id6965 . -1) (undo-tree-id6966 . -1) (undo-tree-id6967 . -1) (undo-tree-id6968 . -1) (undo-tree-id6969 . -1) (undo-tree-id6970 . -1) (undo-tree-id6971 . -1) (undo-tree-id6972 . -1) (undo-tree-id6973 . -1) (undo-tree-id6974 . -1) (undo-tree-id6975 . -1) (undo-tree-id6976 . -1) (#(" " 0 1 (fontified t)) . -429) (undo-tree-id6977 . -1) (undo-tree-id6978 . -1) (undo-tree-id6979 . -1) (undo-tree-id6980 . -1) (undo-tree-id6981 . -1) (undo-tree-id6982 . -1) (undo-tree-id6983 . -1) (undo-tree-id6984 . -1) (undo-tree-id6985 . -1) (undo-tree-id6986 . -1) (undo-tree-id6987 . -1) (undo-tree-id6988 . -1) (undo-tree-id6989 . -1) (undo-tree-id6990 . -1) (undo-tree-id6991 . -1) (undo-tree-id6992 . -1) (undo-tree-id6993 . -1) (undo-tree-id6994 . -1) (undo-tree-id6995 . -1) (undo-tree-id6996 . -1) (undo-tree-id6997 . -1) (undo-tree-id6998 . -1) (undo-tree-id6999 . -1) (undo-tree-id7000 . -1) (undo-tree-id7001 . -1) (undo-tree-id7002 . -1) (undo-tree-id7003 . -1) (undo-tree-id7004 . -1) (undo-tree-id7005 . -1) (undo-tree-id7006 . -1) (undo-tree-id7007 . -1) (undo-tree-id7008 . -1) (undo-tree-id7009 . -1) (undo-tree-id7010 . -1) (undo-tree-id7011 . -1) (undo-tree-id7012 . -1) (undo-tree-id7013 . -1) (undo-tree-id7014 . -1) (undo-tree-id7015 . -1) (undo-tree-id7016 . -1) (#(" " 0 1 (fontified t)) . -430) (undo-tree-id7017 . -1) (undo-tree-id7018 . -1) (undo-tree-id7019 . -1) (undo-tree-id7020 . -1) (undo-tree-id7021 . -1) (undo-tree-id7022 . -1) (undo-tree-id7023 . -1) (undo-tree-id7024 . -1) (undo-tree-id7025 . -1) (undo-tree-id7026 . -1) (undo-tree-id7027 . -1) (undo-tree-id7028 . -1) (undo-tree-id7029 . -1) (undo-tree-id7030 . -1) (undo-tree-id7031 . -1) (undo-tree-id7032 . -1) (undo-tree-id7033 . -1) (undo-tree-id7034 . -1) (undo-tree-id7035 . -1) (undo-tree-id7036 . -1) (undo-tree-id7037 . -1) (undo-tree-id7038 . -1) (undo-tree-id7039 . -1) (undo-tree-id7040 . -1) (undo-tree-id7041 . -1) (undo-tree-id7042 . -1) (undo-tree-id7043 . -1) (undo-tree-id7044 . -1) (undo-tree-id7045 . -1) (undo-tree-id7046 . -1) (undo-tree-id7047 . -1) (undo-tree-id7048 . -1) (undo-tree-id7049 . -1) (undo-tree-id7050 . -1) (undo-tree-id7051 . -1) (undo-tree-id7052 . -1) (undo-tree-id7053 . -1) (undo-tree-id7054 . -1) (#(" " 0 1 (fontified t)) . -431) (undo-tree-id7055 . -1) (undo-tree-id7056 . -1) (undo-tree-id7057 . -1) (undo-tree-id7058 . -1) (undo-tree-id7059 . -1) (undo-tree-id7060 . -1) (undo-tree-id7061 . -1) (undo-tree-id7062 . -1) (undo-tree-id7063 . -1) (undo-tree-id7064 . -1) (undo-tree-id7065 . -1) (undo-tree-id7066 . -1) (undo-tree-id7067 . -1) (undo-tree-id7068 . -1) (undo-tree-id7069 . -1) (undo-tree-id7070 . -1) (undo-tree-id7071 . -1) (undo-tree-id7072 . -1) (undo-tree-id7073 . -1) (undo-tree-id7074 . -1) (undo-tree-id7075 . -1) (undo-tree-id7076 . -1) (undo-tree-id7077 . -1) (undo-tree-id7078 . -1) (undo-tree-id7079 . -1) (undo-tree-id7080 . -1) (undo-tree-id7081 . -1) (undo-tree-id7082 . -1) (undo-tree-id7083 . -1) (undo-tree-id7084 . -1) (undo-tree-id7085 . -1) (undo-tree-id7086 . -1) (undo-tree-id7087 . -1) (undo-tree-id7088 . -1) (undo-tree-id7089 . -1) (undo-tree-id7090 . -1) 432) nil (26044 61344 644917 29000) 0 nil])
([nil current ((#("
" 0 1 (fontified t)) . -427) (undo-tree-id6878 . -1) (undo-tree-id6879 . 1) (undo-tree-id6880 . 1) (undo-tree-id6881 . 1) (undo-tree-id6882 . -1) (undo-tree-id6883 . -1) (undo-tree-id6884 . -1) 428) nil (26044 61344 643897 4000) 0 nil])
nil
