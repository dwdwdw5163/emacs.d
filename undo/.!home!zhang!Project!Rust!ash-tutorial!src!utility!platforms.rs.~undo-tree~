(undo-tree-save-format-version . 1)
"419067e9fca4a7d5cf057f3667b0158008722265"
[nil nil nil nil (26049 52078 791888 931000) 0 nil]
([nil nil ((#("use ash::version::{EntryV1_0, InstanceV1_0};" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 7 (face font-lock-constant-face fontified t) 7 9 (fontified t) 9 16 (face font-lock-constant-face fontified t) 16 18 (fontified t) 18 19 (face (rainbow-delimiters-depth-1-face) fontified t) 19 28 (face font-lock-type-face fontified t) 28 30 (fontified t) 30 42 (face font-lock-type-face fontified t) 42 43 (face (rainbow-delimiters-depth-1-face) fontified t) 43 44 (fontified t)) . 1) (undo-tree-id1 . -13) (undo-tree-id2 . -36) (undo-tree-id3 . -44) (undo-tree-id4 . -44) (undo-tree-id5 . -44) (t 26049 51177 78935 895000)) nil (26049 52173 848710 516000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) 2) nil (26049 52176 836133 501000) 0 nil] [nil nil ((#("
" 0 1 (fontified t)) . 1)) ((1 . 2) (t 26049 52129 425660 965000)) (26049 52173 173953 781000) 0 nil])
([nil nil ((1743 . 1745) (t 26049 52176 835663 875000)) nil (26049 52183 233992 24000) 0 nil])
([nil nil ((#("WindowExtUnix" 0 13 (face font-lock-type-face fontified t)) . -1770) (undo-tree-id322 . -13) (undo-tree-id323 . -13) (undo-tree-id324 . -13) (undo-tree-id325 . -13) (undo-tree-id326 . -13) (undo-tree-id327 . -13) (undo-tree-id328 . -13) (undo-tree-id329 . -13) (undo-tree-id330 . -13) (undo-tree-id331 . -13) (undo-tree-id332 . -13) (undo-tree-id333 . -13) (undo-tree-id334 . -13) (undo-tree-id335 . -13) 1783 (t 26049 52129 425660 965000)) ((1770 . 1783)) (26049 52172 853853 663000) 0 nil] [nil nil ((#("0" 0 1 (face font-lock-type-face fontified t)) . -1589) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) 1590 (t 26049 52078 802324 525000)) ((1589 . 1590) (t 26049 52128 65660 882000)) (26049 52127 426905 414000) 0 nil])
([nil nil ((1789 . 1793) (#("    " 0 4 (fontified nil)) . 1788) (undo-tree-id501 . -4) (undo-tree-id502 . -4) (undo-tree-id503 . -4) (1788 . 1793) (#("    " 0 4 (face font-lock-comment-face fontified nil)) . 1787) (1787 . 1791) (1787 . 1788)) nil (26049 52183 233989 580000) 0 nil])
([nil nil ((#("unix::" 0 4 (face font-lock-constant-face fontified t) 4 6 (fontified t)) . -1764) (undo-tree-id307 . -6) (undo-tree-id308 . -6) (undo-tree-id309 . -6) (undo-tree-id310 . -6) (undo-tree-id311 . -6) (undo-tree-id312 . -6) (undo-tree-id313 . -6) (undo-tree-id314 . -6) (undo-tree-id315 . -6) (undo-tree-id316 . -6) (undo-tree-id317 . -6) (undo-tree-id318 . -6) (undo-tree-id319 . -6) (undo-tree-id320 . -6) (undo-tree-id321 . -6) 1770) ((1764 . 1770)) (26049 52172 517801 739000) 0 nil])
([nil nil ((#("EntryV1_" 0 8 (face font-lock-type-face fontified t)) . -1581) (undo-tree-id6 . -8) (undo-tree-id7 . -8) (undo-tree-id8 . -2) (undo-tree-id9 . -2) (undo-tree-id10 . -2) (undo-tree-id11 . -2) (undo-tree-id12 . -2) (undo-tree-id13 . -2) (undo-tree-id14 . -2) (undo-tree-id15 . -2) (undo-tree-id16 . -2) (undo-tree-id17 . -2) (undo-tree-id18 . -2) (undo-tree-id19 . -2) (undo-tree-id20 . -2) (undo-tree-id21 . -2) (undo-tree-id22 . -2) (undo-tree-id23 . -2) (undo-tree-id24 . -8) (undo-tree-id25 . -8) (undo-tree-id26 . -8) (undo-tree-id27 . -8) (undo-tree-id28 . -8) (undo-tree-id29 . -8) (undo-tree-id30 . -8) (undo-tree-id31 . -8) (undo-tree-id32 . -8) (undo-tree-id33 . -8) (undo-tree-id34 . -8) (undo-tree-id35 . -8) (undo-tree-id36 . -8) (undo-tree-id37 . -8) (undo-tree-id38 . -8) 1589) ((1581 . 1589)) (26049 52126 907185 891000) 0 nil])
([nil nil ((1787 . 1791)) nil (26049 52183 233978 542000) 0 nil])
([nil nil ((1764 . 1770)) ((#("Window" 0 6 (face font-lock-type-face fontified t)) . 1764) (undo-tree-id483 . -6) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -2) (undo-tree-id492 . -3) (undo-tree-id493 . -4) (undo-tree-id494 . -5) (undo-tree-id495 . -6) (undo-tree-id496 . -6) (undo-tree-id497 . -6) (undo-tree-id498 . -6)) (26049 52172 105313 204000) 0 nil])
([nil nil ((1581 . 1586)) ((#("Entry" 0 5 (face font-lock-type-face fontified t)) . 1581) (undo-tree-id53 . -5) (undo-tree-id54 . -3)) (26049 52126 906700 659000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1790) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (#("
" 0 1 (fontified t)) . -1791) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (#("
" 0 1 (fontified t)) . -1792) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (#(" " 0 1 (fontified t)) . -1793) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (#(" " 0 1 (fontified t)) . -1794) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (#(" " 0 1 (fontified t)) . -1795) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (#(" " 0 1 (fontified t)) . -1796) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) 1797 (t 26049 52183 245664 266000)) nil (26049 52245 482378 209000) 0 nil])
([nil nil ((#("Window" 0 6 (face font-lock-type-face fontified t)) . -1764) (undo-tree-id292 . -6) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -2) (undo-tree-id301 . -3) (undo-tree-id302 . -4) (undo-tree-id303 . -5) (undo-tree-id304 . -6) (undo-tree-id305 . -6) (undo-tree-id306 . -6) 1770) ((1764 . 1770)) (26049 52171 767049 166000) 0 nil])
nil
([nil nil ((1738 . 1743)) nil (26049 52245 481612 922000) 0 nil])
([nil nil ((#("platform::" 0 8 (face font-lock-constant-face fontified t) 8 10 (fontified t)) . -1754) (undo-tree-id237 . -10) (undo-tree-id238 . -10) (undo-tree-id239 . -10) (undo-tree-id240 . -10) (undo-tree-id241 . -10) (undo-tree-id242 . -10) (undo-tree-id243 . -10) (undo-tree-id244 . -10) (undo-tree-id245 . -10) (undo-tree-id246 . -10) (undo-tree-id247 . -10) (undo-tree-id248 . -10) (undo-tree-id249 . -10) (undo-tree-id250 . -10) (undo-tree-id251 . -10) (undo-tree-id252 . -10) (undo-tree-id253 . -10) (undo-tree-id254 . -10) (undo-tree-id255 . -10) (undo-tree-id256 . -10) (undo-tree-id257 . -10) (undo-tree-id258 . -10) (undo-tree-id259 . -10) (undo-tree-id260 . -10) (undo-tree-id261 . -10) (undo-tree-id262 . -10) (undo-tree-id263 . -10) (undo-tree-id264 . -10) (undo-tree-id265 . -10) (undo-tree-id266 . -10) (undo-tree-id267 . -10) (undo-tree-id268 . -10) (undo-tree-id269 . -10) (undo-tree-id270 . -10) (undo-tree-id271 . -10) (undo-tree-id272 . -10) (undo-tree-id273 . -10) (undo-tree-id274 . -10) (undo-tree-id275 . -10) (undo-tree-id276 . -10) (undo-tree-id277 . -10) (undo-tree-id278 . -10) (undo-tree-id279 . -10) (undo-tree-id280 . -10) (undo-tree-id281 . -10) (undo-tree-id282 . -10) (undo-tree-id283 . -10) (undo-tree-id284 . -10) (undo-tree-id285 . -10) (undo-tree-id286 . -10) (undo-tree-id287 . -10) (undo-tree-id288 . -10) (undo-tree-id289 . -10) (undo-tree-id290 . -10) (undo-tree-id291 . -10) 1764) ((1754 . 1764)) (26049 52171 500743 336000) 0 nil])
([nil nil ((1743 . 1745)) nil (26049 52245 481612 256000) 0 nil])
([nil nil ((1754 . 1755)) ((#("W" 0 1 (face font-lock-type-face fontified t)) . 1754) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1)) (26049 52171 202732 364000) 0 nil])
([nil nil ((1745 . 1748)) nil (26049 52245 481611 627000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -1752) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (#(":" 0 1 (fontified t)) . -1753) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (#("W" 0 1 (face font-lock-type-face fontified t)) . -1754) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) 1755) ((1752 . 1755)) (26049 52170 896725 579000) 0 nil])
([nil nil ((1747 . 1752) (#("w" 0 1 (fontified nil)) . 1747) (1747 . 1748) (#("winit" 0 5 (fontified nil)) . -1747) (1747 . 1752) (#("w" 0 1 (face font-lock-constant-face fontified t)) . -1747) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) 1748) nil (26049 52245 481610 260000) 0 nil])
([nil nil ((1752 . 1753)) ((#(":" 0 1 (fontified t)) . 1752) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1)) (26049 52170 579519 877000) 0 nil])
([nil nil ((1752 . 1755)) nil (26049 52245 481605 780000) 0 nil])
([nil nil ((1753 . 1754)) ((#(":" 0 1 (fontified t)) . 1753) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1)) (26049 52170 362714 793000) 0 nil])
([nil nil ((1754 . 1762) (#("p" 0 1 (fontified nil)) . 1754) (1754 . 1755) (#("platform" 0 8 (fontified nil)) . -1754) (1754 . 1762) (#("p" 0 1 (fontified t)) . -1754) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) 1755) nil (26049 52245 481604 430000) 0 nil])
([nil nil ((1754 . 1762) (#("platform" 0 8 (fontified nil)) . -1754) (1754 . 1762)) ((#("platform" 0 8 (fontified nil)) . 1754) (1754 . 1762) (#("platform" 0 8 (fontified t)) . 1754) (undo-tree-id387 . -8) (undo-tree-id388 . -8) (undo-tree-id389 . -8) (undo-tree-id390 . -8) (undo-tree-id391 . -8) (undo-tree-id392 . -8) (undo-tree-id393 . -8) (undo-tree-id394 . -8) (undo-tree-id395 . -8) (undo-tree-id396 . -8) (undo-tree-id397 . -8) (undo-tree-id398 . -8) (undo-tree-id399 . -8) (undo-tree-id400 . -8) (undo-tree-id401 . -8) (undo-tree-id402 . -8) (undo-tree-id403 . -8) (undo-tree-id404 . -8) (undo-tree-id405 . -8) (undo-tree-id406 . -8) (undo-tree-id407 . -8) (undo-tree-id408 . -8) (undo-tree-id409 . -8) (undo-tree-id410 . -8) (undo-tree-id411 . -8) (undo-tree-id412 . -8) (undo-tree-id413 . -8) (undo-tree-id414 . -8)) (26049 52170 142401 919000) 0 nil])
([nil nil ((1762 . 1764)) nil (26049 52245 481597 949000) 0 nil])
([nil nil ((1762 . 1765)) ((#("::w" 0 2 (fontified t) 2 3 (fontified t)) . 1762) (undo-tree-id360 . -3) (undo-tree-id361 . -3) (undo-tree-id362 . -3) (undo-tree-id363 . -3) (undo-tree-id364 . -3) (undo-tree-id365 . -3) (undo-tree-id366 . -2) (undo-tree-id367 . -2) (undo-tree-id368 . -2) (undo-tree-id369 . -2) (undo-tree-id370 . -2) (undo-tree-id371 . -2) (undo-tree-id372 . -2) (undo-tree-id373 . -2) (undo-tree-id374 . -2) (undo-tree-id375 . -2) (undo-tree-id376 . -2) (undo-tree-id377 . -2) (undo-tree-id378 . -2) (undo-tree-id379 . -2) (undo-tree-id380 . -2) (undo-tree-id381 . -2) (undo-tree-id382 . -2) (undo-tree-id383 . -2) (undo-tree-id384 . -2) (undo-tree-id385 . -2) (undo-tree-id386 . -3)) (26049 52169 935817 460000) 0 nil])
([nil nil ((1764 . 1767) (#("x11" 0 3 (fontified nil)) . -1764) (1764 . 1767)) nil (26049 52245 481597 17000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t)) . -1764) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) 1765) ((1764 . 1765)) (26049 52169 737438 894000) 0 nil])
([nil nil ((1767 . 1770)) nil (26049 52245 481595 554000) 0 nil])
([nil nil ((1764 . 1765)) ((#("w" 0 1 (fontified t)) . 1764) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1)) (26049 52169 547565 623000) 0 nil])
([nil nil ((1769 . 1781) (#("W" 0 1 (fontified nil)) . 1769) (1769 . 1770) (#("WindowExtX11" 0 12 (fontified nil)) . -1769) (1769 . 1781) (#("W" 0 1 (face font-lock-type-face fontified t)) . -1769) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) 1770) nil (26049 52245 481593 93000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t)) . -1764) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) 1765) ((1764 . 1765)) (26049 52169 368984 187000) 0 nil])
([nil nil ((1781 . 1782)) nil (26049 52245 481577 256000) 0 nil])
([nil nil ((1764 . 1767)) ((#("x1:" 0 2 (face font-lock-variable-name-face fontified t) 2 3 (fontified t)) . 1764) (undo-tree-id340 . -3) (undo-tree-id341 . -3) (undo-tree-id342 . -3) (undo-tree-id343 . -3) (undo-tree-id344 . -3) (undo-tree-id345 . -3) (undo-tree-id346 . -3) (undo-tree-id347 . -3) (undo-tree-id348 . -3) (undo-tree-id349 . -2) (undo-tree-id350 . -2) (undo-tree-id351 . -2) (undo-tree-id352 . -3)) (26049 52169 200013 618000) 0 nil])
([nil nil ((#("use winit::platform::x11::WindowExtX11;" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 9 (face font-lock-constant-face fontified t) 9 11 (fontified t) 11 19 (face font-lock-constant-face fontified t) 19 21 (fontified t) 21 24 (face font-lock-constant-face fontified t) 24 26 (fontified t) 26 38 (face font-lock-type-face fontified t) 38 39 (fontified t)) . 1743) (undo-tree-id673 . -4) (undo-tree-id674 . -4) (undo-tree-id675 . -4) (undo-tree-id676 . -11) (undo-tree-id677 . -11) (undo-tree-id678 . -11) (undo-tree-id679 . -11) (undo-tree-id680 . -11) (undo-tree-id681 . -26) (undo-tree-id682 . -26) (undo-tree-id683 . -26) (undo-tree-id684 . -26) (undo-tree-id685 . -26) (undo-tree-id686 . -26) (undo-tree-id687 . -39) (undo-tree-id688 . -39) (undo-tree-id689 . -39) (undo-tree-id690 . -39) (undo-tree-id691 . -39) (undo-tree-id692 . -39) (undo-tree-id693 . -39) (undo-tree-id694 . -39) (undo-tree-id695 . -39) (undo-tree-id696 . -39) (undo-tree-id697 . -39) (t 26049 52245 482334 750000)) nil (26049 52251 485731 344000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -1766) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) 1767) ((1766 . 1767)) (26049 52169 26660 729000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1743) (undo-tree-id672 . -1)) nil (26049 52251 485709 710000) 0 nil])
([nil nil ((1766 . 1767)) ((#("1" 0 1 (fontified t)) . 1766) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1)) (26049 52168 918471 885000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1743)) nil (26049 52300 847364 840000) 0 nil])
([nil nil ((1767 . 1770)) ((#("::w" 0 3 (fontified t)) . 1767) (undo-tree-id336 . -3)) (26049 52168 917156 596000) 0 nil])
([nil nil ((apply -213 1477 4520 undo--wrap-and-run-primitive-undo 1477 4520 ((4515 . 4518) (4440 . 4443) (4370 . 4373) (4360 . 4363) (4320 . 4323) (4298 . 4301) (4260 . 4263) (4228 . 4231) (4159 . 4162) (4096 . 4099) (4025 . 4028) (3984 . 3987) (3928 . 3931) (3873 . 3876) (3832 . 3835) (3811 . 3814) (3778 . 3781) (3733 . 3736) (3694 . 3697) (3673 . 3676) (3655 . 3658) (3591 . 3594) (3558 . 3561) (3552 . 3555) (3478 . 3481) (3408 . 3411) (3397 . 3400) (3343 . 3346) (3305 . 3308) (3273 . 3276) (3206 . 3209) (3149 . 3152) (3116 . 3119) (3062 . 3065) (3002 . 3005) (2964 . 2967) (2925 . 2928) (2874 . 2877) (2830 . 2833) (2783 . 2786) (2719 . 2722) (2667 . 2670) (2646 . 2649) (2613 . 2616) (2592 . 2595) (2547 . 2550) (2508 . 2511) (2487 . 2490) (2469 . 2472) (2405 . 2408) (2374 . 2377) (2368 . 2371) (2297 . 2300) (2229 . 2232) (2219 . 2222) (2170 . 2173) (2125 . 2128) (2087 . 2090) (2055 . 2058) (1987 . 1990) (1927 . 1930) (1872 . 1875) (1815 . 1818) (1760 . 1763) (1739 . 1742) (1694 . 1697) (1655 . 1658) (1634 . 1637) (1616 . 1619) (1552 . 1555) (1477 . 1480)))) nil (26049 52388 710457 367000) 0 nil] [nil nil ((#("0" 0 1 (face font-lock-type-face fontified t)) . -1589) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id744 . -1) (undo-tree-id746 . -1) (undo-tree-id748 . -1) 1590 (t 26049 52251 495668 453000)) ((1589 . 1590)) (26049 52300 228040 916000) 0 nil])
nil
([nil nil ((apply 213 1477 4306 undo--wrap-and-run-primitive-undo 1477 4306 ((#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -4305) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -4233) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -4166) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -4159) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -4122) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -4103) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -4068) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -4039) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -3973) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -3913) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -3845) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -3807) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -3754) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -3702) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -3664) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -3646) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -3616) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -3574) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -3538) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -3520) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -3505) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -3444) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -3414) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -3411) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -3340) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -3273) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -3265) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -3214) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -3179) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -3150) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -3086) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -3032) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -3002) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2951) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2894) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2859) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2823) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2775) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2734) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2690) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2629) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2580) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2562) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2532) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2514) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2472) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2436) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2418) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2403) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2342) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2314) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2311) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2243) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2178) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2171) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2125) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2083) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2048) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2019) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -1954) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -1897) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -1845) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -1791) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -1739) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -1721) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -1679) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -1643) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -1625) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -1610) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -1549) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -1477)))) nil (26050 10534 595459 221000) 0 nil])
([nil nil ((#("EntryV1_" 0 8 (face font-lock-type-face fontified t)) . -1581) (undo-tree-id709 . -8) (undo-tree-id710 . -8) (undo-tree-id711 . -2) (undo-tree-id712 . -8) (undo-tree-id714 . -3) (undo-tree-id716 . -3) (undo-tree-id718 . -3) (undo-tree-id720 . -3) (undo-tree-id722 . -3) (undo-tree-id724 . -3) (undo-tree-id725 . -8) (undo-tree-id727 . -8) (undo-tree-id728 . -8) (undo-tree-id730 . -8) (undo-tree-id732 . -8) (undo-tree-id734 . -8) 1589) ((1581 . 1589)) (26049 52299 862601 333000) 0 nil])
([nil nil ((#("0>" 0 1 (face font-lock-type-face fontified t) 1 2 (face (rainbow-delimiters-depth-1-face) fontified t)) . -1606) (undo-tree-id973 . -2) (undo-tree-id974 . -2) (undo-tree-id975 . -2) (undo-tree-id976 . -2) 1608 (t 26050 10534 607128 143000)) nil (26050 10558 551023 121000) 0 nil])
([nil nil ((1581 . 1582)) ((#("E" 0 1 (face font-lock-type-face fontified t)) . 1581) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1)) (26049 52299 496194 183000) 0 nil])
([nil nil ((#("InstanceV1_" 0 11 (face font-lock-type-face fontified t)) . -1595) (undo-tree-id969 . -11) (undo-tree-id970 . -11) (undo-tree-id971 . -11) (undo-tree-id972 . -11) 1606) nil (26050 10558 551019 929000) 0 nil])
([nil nil ((1582 . 1587)) ((#("ntryV" 0 4 (face font-lock-type-face fontified t) 4 5 (face font-lock-type-face fontified t)) . 1582) (undo-tree-id806 . -5) (undo-tree-id807 . -4) (undo-tree-id808 . -5) (undo-tree-id809 . -5) (undo-tree-id810 . -5) (undo-tree-id811 . -5) (undo-tree-id812 . -5) (undo-tree-id813 . -5) (undo-tree-id814 . -5) (undo-tree-id815 . -5) (undo-tree-id816 . -5) (undo-tree-id817 . -5) (undo-tree-id818 . -4) (undo-tree-id819 . -4) (undo-tree-id820 . -4) (undo-tree-id821 . -4) (undo-tree-id822 . -4) (undo-tree-id823 . -4) (undo-tree-id824 . -4) (undo-tree-id825 . -4) (undo-tree-id826 . -4) (undo-tree-id827 . -4) (undo-tree-id828 . -4) (undo-tree-id829 . -4) (undo-tree-id830 . -4) (undo-tree-id831 . -4) (undo-tree-id832 . -5) (undo-tree-id833 . -5) (undo-tree-id834 . -5)) (26049 52298 858965 819000) 0 nil])
([nil nil ((#("I: " 0 1 (face font-lock-variable-name-face fontified t) 1 3 (fontified t)) . -1592) (undo-tree-id965 . -3) (undo-tree-id966 . -3) (undo-tree-id967 . -3) (undo-tree-id968 . -3) 1595) nil (26050 10558 551015 779000) 0 nil])
([nil nil ((#("V" 0 1 (face font-lock-type-face fontified t)) . -1586) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) 1587) ((1586 . 1587) (t 26049 52266 522336 42000)) (26049 52286 701667 248000) 0 nil])
([nil nil ((#("0, " 0 1 (face font-lock-type-face fontified t) 1 3 (fontified t)) . -1589) (undo-tree-id960 . -1) (undo-tree-id961 . -3) (undo-tree-id962 . -3) (undo-tree-id963 . -3) (undo-tree-id964 . -3) 1592) nil (26050 10558 551012 736000) 0 nil])
([nil nil ((#("Entry" 0 5 (face font-lock-type-face fontified t)) . -1581) (undo-tree-id765 . -5) (undo-tree-id766 . -5) (undo-tree-id767 . -5) (undo-tree-id768 . -5) (undo-tree-id769 . -5) (undo-tree-id770 . -5) (undo-tree-id771 . -5) (undo-tree-id772 . -5) (undo-tree-id773 . -5) (undo-tree-id774 . -5) (undo-tree-id775 . -5) (undo-tree-id776 . -5) (undo-tree-id777 . -5) (undo-tree-id778 . -5) (undo-tree-id779 . -5) (undo-tree-id780 . -5) (undo-tree-id781 . -5) (undo-tree-id782 . -5) (undo-tree-id783 . -5) (undo-tree-id784 . -5) (undo-tree-id785 . -5) (undo-tree-id786 . -5) 1586 (t 26049 52266 522336 42000)) ((1581 . 1586)) (26049 52286 334829 737000) 0 nil])
([nil nil ((#("EntryV1_" 0 8 (face font-lock-type-face fontified t)) . -1581) (undo-tree-id954 . -2) (undo-tree-id955 . -8) (undo-tree-id956 . -8) (undo-tree-id957 . -8) (undo-tree-id958 . -8) (undo-tree-id959 . -8) 1589) nil (26050 10558 551009 306000) 0 nil])
([nil nil ((1581 . 1586)) ((#("Entry" 0 5 (face font-lock-type-face fontified t)) . 1581) (undo-tree-id787 . -5) (undo-tree-id788 . -2) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -2) (undo-tree-id792 . -2) (undo-tree-id793 . -2) (undo-tree-id794 . -3) (undo-tree-id795 . -3) (undo-tree-id796 . -4) (undo-tree-id797 . -4) (undo-tree-id798 . -5) (undo-tree-id799 . -5) (undo-tree-id800 . -5) (undo-tree-id801 . -5) (undo-tree-id802 . -5) (undo-tree-id803 . -5) (undo-tree-id804 . -5) (undo-tree-id805 . -5)) (26049 52285 647134 216000) 0 nil])
([nil nil ((#("<" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -1577) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -1578) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (#(":" 0 1 (fontified t)) . -1579) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (#(" " 0 1 (fontified t)) . -1580) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) 1581) nil (26050 10558 551004 58000) 0 nil])
([nil nil ((#("Entry" 0 5 (face font-lock-type-face fontified t)) . -1581) (undo-tree-id749 . -5) (undo-tree-id750 . -2) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -2) (undo-tree-id754 . -2) (undo-tree-id755 . -2) (undo-tree-id756 . -3) (undo-tree-id757 . -3) (undo-tree-id758 . -4) (undo-tree-id759 . -4) (undo-tree-id760 . -5) (undo-tree-id761 . -5) (undo-tree-id762 . -5) (undo-tree-id763 . -5) (undo-tree-id764 . -5) 1586) ((1581 . 1586)) (26049 52285 646821 964000) 0 nil])
([nil nil ((#("E" 0 1 (face font-lock-type-face fontified t)) . -1591) (undo-tree-id929 . -1) 1592) nil (26050 10558 550987 135000) 0 nil])
nil
([nil nil ((1591 . 1596)) nil (26050 10558 550985 936000) 0 nil])
([nil nil ((1596 . 1600)) nil (26050 10558 550985 378000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-type-face fontified t)) . -1598) (undo-tree-id927 . -1) (#("y" 0 1 (face font-lock-type-face fontified t)) . -1599) (undo-tree-id928 . -1) 1600) nil (26050 10558 550984 376000) 0 nil])
([nil nil ((1598 . 1599)) nil (26050 10558 550981 723000) 0 nil])
([nil nil ((#("Enty" 0 4 (face font-lock-type-face fontified t)) . -1595) (undo-tree-id926 . -4) 1599) nil (26050 10558 550981 91000) 0 nil])
([nil nil ((#("vk::" 0 2 (face font-lock-constant-face fontified t) 2 4 (fontified t)) . -1591) (undo-tree-id923 . -4) (undo-tree-id924 . -4) (undo-tree-id925 . -4) 1595) nil (26050 10558 550979 656000) 0 nil])
([nil nil ((1591 . 1593)) nil (26050 10558 550977 116000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -1591) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (#("s" 0 1 (face font-lock-keyword-face fontified t)) . -1592) (undo-tree-id921 . -1) (undo-tree-id922 . -1) 1593) nil (26050 10558 550976 88000) 0 nil])
([nil nil ((1591 . 1592)) nil (26050 10560 170857 416000) 0 nil])
([nil nil ((#("E" 0 1 (face font-lock-type-face fontified t)) . -1591) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) 1592) nil (26050 10571 318871 759000) 0 nil] [nil nil ((#("&" 0 1 (fontified t)) . -1590) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -1591) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) 1592) ((1590 . 1592)) (26050 10559 726509 263000) 0 nil])
([nil nil ((1591 . 1593)) nil (26050 10571 318866 804000) 0 nil])
([nil nil ((1590 . 1592)) ((#("as" 0 1 (face font-lock-keyword-face fontified t) 1 2 (face font-lock-keyword-face fontified t)) . 1590) (undo-tree-id977 . -2) (undo-tree-id978 . -2) (undo-tree-id979 . -1) (undo-tree-id980 . -2) (undo-tree-id981 . -2) (undo-tree-id982 . -2) (undo-tree-id983 . -2) (undo-tree-id984 . -2) (undo-tree-id985 . -2) (undo-tree-id986 . -2) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -2) (undo-tree-id990 . -2) (undo-tree-id991 . -2)) (26050 10558 551338 285000) 0 nil])
([nil nil ((1591 . 1594) (#("as" 0 2 (fontified nil)) . 1591) (1591 . 1593) (#("ash" 0 3 (fontified nil)) . -1591) (1591 . 1594) (#("as" 0 2 (face font-lock-keyword-face fontified t)) . -1591) (undo-tree-id1007 . -2) (undo-tree-id1008 . -2) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -2) (undo-tree-id1012 . -2) (undo-tree-id1013 . -2) (undo-tree-id1014 . -2) (undo-tree-id1015 . -2) (undo-tree-id1016 . -2) (undo-tree-id1017 . -2) (undo-tree-id1018 . -2) 1593) nil (26050 10571 318865 298000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -1590) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (#("s" 0 1 (face font-lock-keyword-face fontified t)) . -1591) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) 1592) ((1590 . 1592)) (26050 10558 550945 682000) 0 nil])
([nil nil ((1594 . 1596)) nil (26050 10571 318600 694000) 0 nil])
nil
([nil nil ((1596 . 1597)) nil (26050 10571 318600 54000) 0 nil])
([nil nil ((1596 . 1601) (#("E" 0 1 (fontified nil)) . 1596) (1596 . 1597) (#("Entry" 0 5 (fontified nil)) . -1596) (1596 . 1601) (#("E" 0 1 (face font-lock-type-face fontified t)) . -1596) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) 1597) nil (26050 10571 318598 862000) 0 nil])
([nil nil ((#("I" 0 1 (face font-lock-type-face fontified t)) . -1618) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) 1619) nil (26050 10571 318594 187000) 0 nil])
([nil nil ((1618 . 1619)) nil (26050 10571 318591 869000) 0 nil])
([nil nil ((1618 . 1621) (#("a" 0 1 (fontified nil)) . 1618) (1618 . 1619) (#("ash" 0 3 (fontified nil)) . -1618) (1618 . 1621) (#("a" 0 1 (fontified t)) . -1618) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) 1619) nil (26050 10571 318590 529000) 0 nil])
([nil nil ((1621 . 1624)) nil (26050 10571 318584 961000) 0 nil])
([nil nil ((1623 . 1631) (#("I" 0 1 (fontified nil)) . 1623) (1623 . 1624) (#("Instance" 0 8 (fontified nil)) . -1623) (1623 . 1631) (#("I" 0 1 (face font-lock-type-face fontified t)) . -1623) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) 1624) nil (26050 10571 318581 25000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . 1733) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 1733) (t 26050 10571 330463 732000)) nil (26050 10683 250202 837000) 0 nil])
([nil nil ((#("WindowExtUnix" 0 13 (face font-lock-type-face fontified t)) . -1760) (undo-tree-id1042 . -13) (undo-tree-id1043 . -13) (undo-tree-id1044 . -13) 1773 (t 26050 10683 263803 937000)) nil (26050 10712 158631 919000) 0 nil])
([nil nil ((#("unix::" 0 4 (face font-lock-constant-face fontified t) 4 6 (fontified t)) . -1754) (undo-tree-id1037 . -6) (undo-tree-id1038 . -6) (undo-tree-id1039 . -4) (undo-tree-id1040 . -6) (undo-tree-id1041 . -6) 1760) nil (26050 10712 158629 353000) 0 nil])
([nil nil ((1754 . 1755)) nil (26050 10712 158625 754000) 0 nil])
([nil nil ((1754 . 1757) (#("x" 0 1 (fontified nil)) . 1754) (1754 . 1755) (#("x11" 0 3 (fontified nil)) . -1754) (1754 . 1757) (#("x" 0 1 (fontified t)) . -1754) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) 1755) nil (26050 10712 158624 283000) 0 nil])
([nil nil ((1757 . 1759)) nil (26050 10712 158619 550000) 0 nil])
([nil nil ((1759 . 1760)) nil (26050 10712 158618 535000) 0 nil])
([nil nil ((1759 . 1771) (#("W" 0 1 (fontified nil)) . 1759) (1759 . 1760) (#("WindowExtX11" 0 12 (fontified nil)) . -1759) (1759 . 1771) (#("W" 0 1 (face font-lock-type-face fontified t)) . -1759) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) 1760) nil (26050 10796 525170 131000) 0 nil])
([nil nil ((#("WindowExtX11" 0 12 (face font-lock-type-face fontified t)) . -1759) (undo-tree-id1127 . -12) (undo-tree-id1128 . -12) 1771 (t 26050 10712 157139 43000)) nil (26050 11028 174900 422000) 0 nil] [nil nil ((#("display()" 0 7 (fontified t) 7 8 (face (rainbow-delimiters-depth-2-face) fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1811) (undo-tree-id1076 . -8) (undo-tree-id1077 . -9) (undo-tree-id1078 . -8) (undo-tree-id1079 . -8) (undo-tree-id1080 . -8) (undo-tree-id1081 . -8) (undo-tree-id1082 . -8) (undo-tree-id1083 . -8) (undo-tree-id1084 . -8) (undo-tree-id1085 . -8) (undo-tree-id1086 . -8) (undo-tree-id1087 . -8) (undo-tree-id1088 . -9) 1820 (t 26050 10712 157139 43000)) ((1811 . 1820)) (26050 10795 811728 491000) 0 nil])
([nil nil ((#("x11::" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t)) . -1754) (undo-tree-id1124 . -5) (undo-tree-id1125 . -5) (undo-tree-id1126 . -5) 1759) nil (26050 11028 174898 535000) 0 nil])
([nil nil ((#("xlib_" 0 5 (fontified t)) . -1806) (undo-tree-id1062 . -5) (undo-tree-id1063 . -5) (undo-tree-id1064 . -5) (undo-tree-id1065 . -5) (undo-tree-id1066 . -5) (undo-tree-id1067 . -5) (undo-tree-id1068 . -5) (undo-tree-id1069 . -5) (undo-tree-id1070 . -5) (undo-tree-id1071 . -5) (undo-tree-id1072 . -5) (undo-tree-id1073 . -5) (undo-tree-id1074 . -5) (undo-tree-id1075 . -5) 1811) ((1806 . 1811)) (26050 10795 471840 529000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -1752) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (#(":" 0 1 (fontified t)) . -1753) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) 1754) nil (26050 11028 174895 207000) 0 nil])
([nil nil ((1806 . 1809)) ((#("x11" 0 3 (fontified t)) . 1806) (undo-tree-id1089 . -3) (undo-tree-id1090 . -3) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -2) (undo-tree-id1094 . -2) (undo-tree-id1095 . -2) (undo-tree-id1096 . -2) (undo-tree-id1097 . -2) (undo-tree-id1098 . -2) (undo-tree-id1099 . -3) (undo-tree-id1100 . -3) (undo-tree-id1101 . -3) (undo-tree-id1102 . -3) (undo-tree-id1103 . -3) (undo-tree-id1104 . -3) (undo-tree-id1105 . -3) (undo-tree-id1106 . -3)) (26050 10794 982604 964000) 0 nil])
([nil nil ((1752 . 1754)) nil (26050 11028 174326 409000) 0 nil])
([nil nil ((#("x11" 0 3 (fontified t)) . -1806) (undo-tree-id1045 . -3) (undo-tree-id1046 . -3) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -2) (undo-tree-id1050 . -2) (undo-tree-id1051 . -2) (undo-tree-id1052 . -2) (undo-tree-id1053 . -2) (undo-tree-id1054 . -2) (undo-tree-id1055 . -3) (undo-tree-id1056 . -3) (undo-tree-id1057 . -3) (undo-tree-id1058 . -3) (undo-tree-id1059 . -3) (undo-tree-id1060 . -3) (undo-tree-id1061 . -3) 1809) ((1806 . 1809)) (26050 10794 982389 857000) 0 nil])
([nil nil ((1754 . 1757) (#("x11" 0 3 (fontified nil)) . -1754) (1754 . 1757)) nil (26050 11028 174325 368000) 0 nil])
nil
([nil nil ((1757 . 1759)) nil (26050 11028 174324 32000) 0 nil])
([nil nil ((1759 . 1771) (#("WindowExtX11" 0 12 (fontified nil)) . -1759) (1759 . 1771)) nil (26050 11259 915089 652000) 0 nil])
([nil nil ((1776 . 1777) 1773 (t 26050 11260 420506 31000)) nil (26050 11404 308150 256000) 0 nil] [nil nil ((#("display()" 0 7 (fontified t) 7 8 (face (rainbow-delimiters-depth-2-face) fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1811) (undo-tree-id1168 . -9) (undo-tree-id1169 . -9) 1820 (t 26050 11028 183825 109000)) ((1811 . 1820) (t 26050 11259 420505 970000)) (26050 11258 893944 369000) 0 nil] [nil nil ((#("XlibSurfaceCreateInfoKHR" 0 24 (face font-lock-type-face fontified t)) . -1913) (undo-tree-id1139 . -7) (undo-tree-id1140 . -24) (undo-tree-id1141 . -24) (undo-tree-id1142 . -24) (undo-tree-id1143 . -24) 1937 (t 26050 11028 183825 109000)) ((1913 . 1937)) (26050 11091 448763 620000) 0 nil])
([nil nil ((1807 . 1808)) nil (26050 11421 772635 310000) 0 nil])
([nil nil ((#("xlib_" 0 5 (fontified t)) . -1806) (undo-tree-id1165 . -5) (undo-tree-id1166 . -5) (undo-tree-id1167 . -5) 1811) ((1806 . 1811)) (26050 11258 578805 777000) 0 nil])
([nil nil ((1913 . 1916)) ((#("X11" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face fontified t)) . 1913) (undo-tree-id1144 . -3) (undo-tree-id1145 . -3) (undo-tree-id1146 . -3) (undo-tree-id1147 . -3) (undo-tree-id1148 . -2) (undo-tree-id1149 . -2) (undo-tree-id1150 . -3) (undo-tree-id1151 . -3)) (26050 11091 115113 769000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1806) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) 1807) nil (26050 11423 281168 360000) 0 nil] [nil nil ((#("." 0 1 (fontified t)) . -1806) (undo-tree-id1201 . -1) (undo-tree-id1203 . -1) (undo-tree-id1205 . -1) (undo-tree-id1207 . -1) (undo-tree-id1209 . -1) (undo-tree-id1211 . -1) (undo-tree-id1213 . -1) (undo-tree-id1215 . -1) (undo-tree-id1217 . -1) (undo-tree-id1219 . -1) (undo-tree-id1221 . -1) (undo-tree-id1223 . -1) (undo-tree-id1225 . -1) (undo-tree-id1227 . -1) 1807) ((1806 . 1807)) (26050 11421 196929 82000) 0 nil])
([nil nil ((1806 . 1807)) ((#("x" 0 1 (fontified t)) . 1806) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1)) (26050 11258 151818 782000) 0 nil])
([nil nil ((#("1" 0 1 (face font-lock-type-face fontified t)) . -1914) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (#("1" 0 1 (face font-lock-type-face fontified t)) . -1915) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) 1916) ((1914 . 1916)) (26050 11091 114798 20000) 0 nil])
([nil nil ((1806 . 1807) (t 26050 11423 323849 364000)) nil (26050 11425 266816 685000) 0 nil])
([nil nil ((1806 . 1810)) ((#(".raw" 0 1 (fontified t) 1 4 (fontified t)) . 1806) (undo-tree-id1300 . -4) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -4) (undo-tree-id1313 . -4) (undo-tree-id1314 . -4) (undo-tree-id1315 . -4) (undo-tree-id1316 . -4)) (26050 11420 199432 651000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -1806) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) 1807) ((1806 . 1807)) (26050 11257 791847 502000) 0 nil])
nil
([nil nil ((#(" " 0 1 (fontified t)) . -1807) (undo-tree-id1325 . -1) (undo-tree-id1326 . 1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) 1808) nil (26050 11425 266812 558000) 0 nil])
([nil nil ((1744 . 1745) (1771 . 1812) (apply yas--snippet-revive 1807 1827 #s(yas--snippet nil nil #s(yas--exit #<marker at 2336 in platforms.rs> nil) 30 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 2336 in platforms.rs> nil) 30 nil nil nil nil)) (1807 . 1827) (#("raw_display_handle()$0" 0 22 (fontified nil)) . 1807) (1807 . 1829) (#("raw" 0 3 (fontified nil)) . 1807) (1807 . 1810) (#("raw_display_handle() (use winit::raw_window_handle::HasRawDisplayHandle)" 0 72 (fontified nil)) . -1807) (1807 . 1879) (#("raw" 0 3 (fontified t)) . -1807) (undo-tree-id1188 . -3) (undo-tree-id1190 . -1) (undo-tree-id1192 . -1) (undo-tree-id1194 . -2) (undo-tree-id1196 . -2) (undo-tree-id1198 . -3) (undo-tree-id1200 . -3) 1810) ((1807 . 1810) (#("raw_display_handle() (use winit::raw_window_handle::HasRawDisplayHandle)" 0 72 (fontified nil)) . 1807) (1807 . 1879) (#("raw" 0 3 (fontified nil)) . 1807) (1807 . 1810) (#("raw_display_handle()$0" 0 22 (fontified nil)) . 1807) (1807 . 1829) (#("raw_display_handle()" 0 18 (fontified t) 18 19 (face (rainbow-delimiters-depth-2-face) fontified t) 19 20 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1807) (undo-tree-id1261 . -20) (undo-tree-id1262 . -20) (undo-tree-id1263 . -20) (undo-tree-id1264 . -20) (undo-tree-id1265 . -20) (undo-tree-id1266 . -20) (undo-tree-id1267 . -20) (undo-tree-id1268 . -20) (undo-tree-id1269 . -20) (undo-tree-id1270 . -20) (undo-tree-id1271 . -20) (#(", raw_window_handle::HasRawDisplayHandle}" 0 2 (fontified nil) 2 19 (face font-lock-constant-face fontified nil) 19 21 (fontified nil) 21 40 (face font-lock-type-face fontified nil) 40 41 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 1771) (undo-tree-id1272 . -23) (undo-tree-id1273 . -23) (undo-tree-id1274 . -23) (undo-tree-id1275 . -23) (undo-tree-id1276 . -23) (undo-tree-id1277 . -23) (undo-tree-id1278 . -23) (undo-tree-id1279 . -23) (undo-tree-id1280 . -23) (undo-tree-id1281 . -23) (undo-tree-id1282 . -23) (undo-tree-id1283 . -23) (undo-tree-id1284 . -23) (undo-tree-id1285 . -23) (undo-tree-id1286 . -23) (undo-tree-id1287 . -23) (undo-tree-id1288 . -23) (undo-tree-id1289 . -23) (undo-tree-id1290 . -23) (undo-tree-id1291 . -23) (undo-tree-id1292 . -23) (undo-tree-id1293 . -23) (undo-tree-id1294 . -23) (undo-tree-id1295 . -23) (undo-tree-id1296 . -23) (undo-tree-id1297 . -23) (undo-tree-id1298 . -23) (undo-tree-id1299 . -23) (#("{" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1744)) (26050 11419 913801 414000) 0 nil])
([nil nil ((1806 . 1807)) ((#("X" 0 1 (face font-lock-type-face fontified t)) . 1806) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1)) (26050 11257 388476 101000) 0 nil])
([nil nil ((#("XlibSurfaceCreateInfoKHR" 0 24 (face font-lock-type-face fontified t)) . -1914) (undo-tree-id1338 . -7) (undo-tree-id1339 . -24) (undo-tree-id1340 . -24) 1938 (t 26050 11425 277182 817000)) nil (26050 11587 218655 409000) 0 nil])
([nil nil ((#("display()" 0 7 (fontified t) 7 8 (face (rainbow-delimiters-depth-2-face) fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1875) (undo-tree-id1251 . -9) (undo-tree-id1252 . -9) (undo-tree-id1253 . -9) (undo-tree-id1254 . -9) (undo-tree-id1255 . -9) (undo-tree-id1256 . -9) (undo-tree-id1257 . -9) (undo-tree-id1258 . -9) (undo-tree-id1259 . -9) (undo-tree-id1260 . -9) 1884 (t 26050 11404 320514 864000)) ((1875 . 1884)) (26050 11419 680564 243000) 0 nil])
([nil nil ((#("X" 0 1 (face font-lock-type-face fontified t)) . -1806) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) 1807) ((1806 . 1807)) (26050 11257 387729 152000) 0 nil])
([nil nil ((1914 . 1931)) nil (26050 11587 218652 675000) 0 nil])
([nil nil ((#("xlib_" 0 5 (fontified t)) . -1870) (undo-tree-id1240 . -5) (undo-tree-id1241 . -5) (undo-tree-id1242 . -5) (undo-tree-id1243 . -5) (undo-tree-id1244 . -5) (undo-tree-id1245 . -5) (undo-tree-id1246 . -5) (undo-tree-id1247 . -5) (undo-tree-id1248 . -5) (undo-tree-id1249 . -5) (undo-tree-id1250 . -5) 1875) ((1870 . 1875)) (26050 11419 414832 238000) 0 nil])
nil
([nil nil ((1931 . 1932)) nil (26050 11587 218651 973000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1869) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) 1870) ((1869 . 1870) (t 26050 11409 560515 186000)) (26050 11409 551244 144000) 0 nil])
([nil nil ((#("H" 0 1 (face font-lock-type-face fontified t)) . -1931) (undo-tree-id1337 . -1) 1932) nil (26050 11587 218650 864000) 0 nil])
nil
([nil nil ((1931 . 1934)) nil (26050 11587 218649 39000) 0 nil])
([nil nil ((1914 . 1938) (#("SurfaceCreateInfoKHR" 0 20 (fontified nil)) . 1914) (1914 . 1934) (#("XlibSurfaceCreateInfoKHR" 0 24 (fontified nil)) . -1914) (1914 . 1938) (#("SurfaceCreateInfoKHR" 0 20 (face font-lock-type-face fontified t)) . -1914) (undo-tree-id1331 . -20) (undo-tree-id1332 . -19) (undo-tree-id1333 . -20) (undo-tree-id1334 . -20) (undo-tree-id1335 . -20) (undo-tree-id1336 . -20) 1934) nil (26050 11587 218644 822000) 0 nil])
([nil nil ((2022 . 2023) (t 26050 11587 230526 92000)) nil (26050 11609 218953 361000) 0 nil])
([nil nil ((2023 . 2027)) nil (26050 11609 218948 203000) 0 nil])
([nil nil ((1774 . 1778) (#("    " 0 4 (fontified nil)) . 1773) (undo-tree-id1363 . -4) (1777 . 1778) (t 26050 11609 230527 443000)) nil (26050 11730 727079 679000) 0 nil])
([nil nil ((1778 . 1781)) nil (26050 11730 727078 177000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -1779) (undo-tree-id1361 . -1) (#("e" 0 1 (fontified t)) . -1780) (undo-tree-id1362 . -1) 1781) nil (26050 11730 727077 433000) 0 nil])
([nil nil ((1779 . 1797)) nil (26050 11730 727075 523000) 0 nil])
([nil nil ((1796 . 1802) (#("w" 0 1 (fontified nil)) . 1796) (1796 . 1797) (#("window" 0 6 (fontified nil)) . -1796) (1796 . 1802) (#("w" 0 1 (fontified t)) . -1796) (undo-tree-id1360 . -1) 1797) nil (26050 11730 727074 554000) 0 nil])
([nil nil ((1802 . 1806)) nil (26050 11730 727072 439000) 0 nil])
([nil nil ((#("raw" 0 3 (fontified t)) . -1803) (undo-tree-id1359 . -3) 1806) nil (26050 11730 727071 772000) 0 nil])
([nil nil ((1803 . 1804)) nil (26050 11730 727070 600000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t)) . -1803) (undo-tree-id1358 . -1) 1804) nil (26050 11730 727069 894000) 0 nil])
([nil nil ((1803 . 1804)) nil (26050 11730 727068 632000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -1803) (undo-tree-id1357 . -1) 1804) nil (26050 11730 727067 983000) 0 nil])
([nil nil ((1803 . 1804)) nil (26050 11730 727066 784000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -1803) (undo-tree-id1356 . -1) 1804) nil (26050 11730 727066 16000) 0 nil])
([nil nil ((1803 . 1806)) nil (26050 11730 727064 625000) 0 nil])
([nil nil ((#("let x11_display = window.han" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 15 (face font-lock-variable-name-face fontified t) 15 18 (fontified t) 18 28 (fontified t)) . 1778)) nil (26050 11730 727063 764000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1778) (undo-tree-id1355 . 1)) nil (26050 11730 727063 30000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1778) (undo-tree-id1354 . 4)) nil (26050 11768 416101 82000) 0 nil])
([nil nil ((1774 . 1778) (#("    " 0 4 (fontified nil)) . 1773) (1773 . 1777) (1773 . 1774) (t 26050 11769 263870 599000)) nil (26050 12413 937977 685000) 0 nil] [nil nil ((#("display()" 0 7 (fontified t) 7 8 (face (rainbow-delimiters-depth-2-face) fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1808) (undo-tree-id1352 . -7) (undo-tree-id1353 . -9) 1817) ((1808 . 1817)) (26050 11767 974990 520000) 0 nil])
([nil nil ((1778 . 1796)) nil (26050 12413 937976 563000) 0 nil])
([nil nil ((#("xlib_" 0 5 (fontified t)) . -1803) (undo-tree-id1350 . -5) (undo-tree-id1351 . -5) 1808) ((1803 . 1808)) (26050 11767 584988 376000) 0 nil])
([nil nil ((1795 . 1801) (#("w" 0 1 (fontified nil)) . 1795) (1795 . 1796) (#("window" 0 6 (fontified nil)) . -1795) (1795 . 1801) (#("w" 0 1 (fontified t)) . -1795) (undo-tree-id1506 . -1) 1796) nil (26050 12413 937975 495000) 0 nil])
([nil nil ((1803 . 1806)) ((#("dis" 0 3 (fontified t)) . 1803) (undo-tree-id1485 . -3) (undo-tree-id1486 . -3)) (26050 11767 382663 958000) 0 nil])
([nil nil ((1801 . 1803)) nil (26050 12413 937973 659000) 0 nil])
([nil nil ((1744 . 1745) (1771 . 1809) (apply yas--snippet-revive 1803 1819 #s(yas--snippet nil nil #s(yas--exit #<marker at 2337 in platforms.rs> nil) 31 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 2337 in platforms.rs> nil) 31 nil nil nil nil)) (1803 . 1819) (#("display_handle()$0" 0 18 (fontified nil)) . 1803) (1803 . 1821) (#("dis" 0 3 (fontified nil)) . 1803) (1803 . 1806) (#("display_handle() (use winit::raw_window_handle::HasDisplayHandle)" 0 65 (fontified nil)) . -1803) (1803 . 1868) (#("dis" 0 3 (fontified t)) . -1803) (undo-tree-id1341 . -3) (undo-tree-id1343 . -2) (undo-tree-id1345 . -2) (undo-tree-id1347 . -3) (undo-tree-id1349 . -3) 1806) ((1803 . 1806) (#("display_handle() (use winit::raw_window_handle::HasDisplayHandle)" 0 65 (fontified nil)) . 1803) (1803 . 1868) (#("dis" 0 3 (fontified nil)) . 1803) (1803 . 1806) (#("display_handle()$0" 0 18 (fontified nil)) . 1803) (1803 . 1821) (#("display_handle()" 0 14 (fontified t) 14 15 (face (rainbow-delimiters-depth-2-face) fontified t) 15 16 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1803) (undo-tree-id1484 . -16) (#(", raw_window_handle::HasDisplayHandle}" 0 2 (fontified nil) 2 19 (face font-lock-constant-face fontified nil) 19 21 (fontified nil) 21 37 (face font-lock-type-face fontified nil) 37 38 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 1771) (#("{" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1744)) (26050 11767 195598 226000) 0 nil])
([nil nil ((1803 . 1804)) nil (26050 12413 937973 39000) 0 nil])
([nil nil ((#("window()" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-2-face) fontified t) 7 8 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1902) (undo-tree-id1393 . -8) (undo-tree-id1394 . -8) (undo-tree-id1395 . -8) (undo-tree-id1396 . -8) (undo-tree-id1397 . -8) (undo-tree-id1398 . -8) (undo-tree-id1399 . -8) (undo-tree-id1400 . -8) (undo-tree-id1401 . -8) (undo-tree-id1402 . -8) (undo-tree-id1403 . -8) 1910 (t 26050 11730 737201 567000)) ((1902 . 1910)) (26050 11767 16188 472000) 0 nil])
([nil nil ((apply yas--snippet-revive 1802 1806 #s(yas--snippet nil nil #s(yas--exit 1806 nil) 33 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1806 nil) 33 nil nil nil nil)) (1802 . 1806) (#("id()$0" 0 6 (fontified nil)) . 1802) (1802 . 1808) (#("id" 0 2 (fontified nil)) . 1802) (1802 . 1804) (#("id()" 0 4 (fontified nil)) . -1802) (1802 . 1806) (#("id" 0 2 (fontified t)) . -1802) (undo-tree-id1505 . -2) 1804) nil (26050 12413 937971 177000) 0 nil])
([nil nil ((#("xlib_" 0 5 (fontified t)) . -1897) (undo-tree-id1381 . -5) (undo-tree-id1382 . -5) (undo-tree-id1383 . -5) (undo-tree-id1384 . -5) (undo-tree-id1385 . -5) (undo-tree-id1386 . -5) (undo-tree-id1387 . -5) (undo-tree-id1388 . -5) (undo-tree-id1389 . -5) (undo-tree-id1390 . -5) (undo-tree-id1391 . -5) (undo-tree-id1392 . -5) 1902) ((1897 . 1902)) (26050 11766 834883 397000) 0 nil])
([nil nil ((#("id()" 0 2 (fontified t) 2 3 (face (rainbow-delimiters-depth-2-face) fontified t) 3 4 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1802) (undo-tree-id1501 . -2) (undo-tree-id1502 . -2) (undo-tree-id1503 . -2) (undo-tree-id1504 . -4) 1806) nil (26050 12413 937968 719000) 0 nil])
([nil nil ((1897 . 1899)) ((#("wi" 0 2 (fontified t)) . 1897) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -2) (undo-tree-id1475 . -2) (undo-tree-id1476 . -2) (undo-tree-id1477 . -2) (undo-tree-id1478 . -2) (undo-tree-id1479 . -2) (undo-tree-id1480 . -2) (undo-tree-id1481 . -2) (undo-tree-id1482 . -2) (undo-tree-id1483 . -2)) (26050 11766 641704 384000) 0 nil])
([nil nil ((1802 . 1804)) nil (26050 12413 937964 918000) 0 nil])
([nil nil ((1899 . 1900)) ((#("n" 0 1 (fontified t)) . 1899) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1)) (26050 11766 330925 304000) 0 nil])
([nil nil ((#("di" 0 2 (fontified t)) . -1802) (undo-tree-id1500 . -2) 1804) nil (26050 12413 937964 316000) 0 nil])
([nil nil ((1793 . 1794) (1809 . 1827) (apply yas--snippet-revive 1897 1912 #s(yas--snippet nil nil #s(yas--exit #<marker at 2396 in platforms.rs> nil) 32 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 2396 in platforms.rs> nil) 32 nil nil nil nil)) (1897 . 1912) (#("window_handle()$0" 0 17 (fontified nil)) . 1897) (1897 . 1914) (#("win" 0 3 (fontified nil)) . 1897) (1897 . 1900) (#("window_handle() (use winit::raw_window_handle::HasWindowHandle)" 0 63 (fontified nil)) . -1897) (1897 . 1960) (#("win" 0 3 (fontified t)) . -1897) (undo-tree-id1364 . -1) (undo-tree-id1365 . -3) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -2) (undo-tree-id1375 . -2) (undo-tree-id1376 . -2) (undo-tree-id1377 . -3) (undo-tree-id1378 . -3) (undo-tree-id1379 . -3) (undo-tree-id1380 . -3) 1900) ((1897 . 1900) (#("window_handle() (use winit::raw_window_handle::HasWindowHandle)" 0 63 (fontified nil)) . 1897) (1897 . 1960) (#("win" 0 3 (fontified nil)) . 1897) (1897 . 1900) (#("window_handle()$0" 0 17 (fontified nil)) . 1897) (1897 . 1914) (#("window_handle()" 0 13 (fontified t) 13 14 (face (rainbow-delimiters-depth-2-face) fontified t) 14 15 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1897) (undo-tree-id1404 . -8) (undo-tree-id1405 . -8) (undo-tree-id1406 . -15) (undo-tree-id1407 . -15) (undo-tree-id1408 . -15) (undo-tree-id1409 . -15) (undo-tree-id1410 . -15) (undo-tree-id1411 . -15) (undo-tree-id1412 . -15) (undo-tree-id1413 . -15) (undo-tree-id1414 . -15) (undo-tree-id1415 . -15) (undo-tree-id1416 . -15) (undo-tree-id1417 . -15) (undo-tree-id1418 . -15) (undo-tree-id1419 . -15) (undo-tree-id1420 . -15) (undo-tree-id1421 . -15) (undo-tree-id1422 . -8) (undo-tree-id1423 . -8) (undo-tree-id1424 . -8) (undo-tree-id1425 . -8) (undo-tree-id1426 . -8) (undo-tree-id1427 . -8) (undo-tree-id1428 . -8) (undo-tree-id1429 . -8) (undo-tree-id1430 . -8) (undo-tree-id1431 . -8) (undo-tree-id1432 . -8) (undo-tree-id1433 . -8) (undo-tree-id1434 . -8) (undo-tree-id1435 . -8) (undo-tree-id1436 . -8) (undo-tree-id1437 . -8) (undo-tree-id1438 . -8) (undo-tree-id1439 . -8) (undo-tree-id1440 . -8) (undo-tree-id1441 . -8) (undo-tree-id1442 . -8) (undo-tree-id1443 . -8) (undo-tree-id1444 . -8) (undo-tree-id1445 . -8) (undo-tree-id1446 . -8) (undo-tree-id1447 . -8) (undo-tree-id1448 . -8) (undo-tree-id1449 . -8) (undo-tree-id1450 . -8) (undo-tree-id1451 . -8) (undo-tree-id1452 . -8) (undo-tree-id1453 . -8) (undo-tree-id1454 . -8) (undo-tree-id1455 . -8) (undo-tree-id1456 . -8) (undo-tree-id1457 . -8) (undo-tree-id1458 . -8) (undo-tree-id1459 . -15) (#(", HasWindowHandle}" 0 2 (fontified nil) 2 17 (face font-lock-type-face fontified nil) 17 18 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 1809) (#("{" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . 1793) (t 26050 11740 187202 147000)) (26050 11740 176587 139000) 0 nil])
([nil nil ((1802 . 1808)) nil (26050 12413 937962 924000) 0 nil])
nil
([nil nil ((#("window" 0 6 (fontified t)) . -1802) (undo-tree-id1499 . -6) 1808) nil (26050 12413 937962 205000) 0 nil])
([nil nil ((1802 . 1803)) nil (26050 12413 937961 143000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t)) . -1802) (undo-tree-id1498 . -1) 1803) nil (26050 12413 937960 509000) 0 nil])
([nil nil ((1802 . 1803)) nil (26050 12413 937959 322000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t)) . -1802) (undo-tree-id1497 . -1) 1803) nil (26050 12413 937958 601000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1801) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) 1802) nil (26050 12413 937957 82000) 0 nil])
([nil nil ((#("use std::ptr;" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 7 (face font-lock-constant-face fontified t) 7 13 (fontified t)) . 1715) (undo-tree-id1488 . -13) (undo-tree-id1489 . -13) (undo-tree-id1490 . -13) (undo-tree-id1491 . -13) (undo-tree-id1492 . -13) (undo-tree-id1493 . -13)) nil (26050 12413 937954 409000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1715) (undo-tree-id1487 . -1)) nil (26050 12413 937948 64000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1715)) nil (26050 12413 937939 753000) 0 nil])
([nil nil ((1783 . 1785) (t 26050 12413 950576 839000)) nil (26050 12755 214474 178000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -1784) (undo-tree-id1568 . -1) 1785) nil (26050 12755 214473 313000) 0 nil])
([nil nil ((1784 . 1785)) nil (26050 12755 214472 162000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -1784) (undo-tree-id1567 . -1) 1785) nil (26050 12755 214471 473000) 0 nil])
([nil nil ((1784 . 1785)) nil (26050 12755 214470 303000) 0 nil])
([nil nil ((1785 . 1787)) nil (26050 12755 214469 823000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -1784) (undo-tree-id1564 . -1) (#("a" 0 1 (fontified t)) . -1785) (undo-tree-id1565 . -1) (#("w" 0 1 (fontified t)) . -1786) (undo-tree-id1566 . -1) 1787) nil (26050 12755 214468 964000) 0 nil])
([nil nil ((1784 . 1787)) nil (26050 12755 214466 418000) 0 nil])
([nil nil ((1726 . 1727) (1753 . 1791) (apply yas--snippet-revive 1784 1800 #s(yas--snippet nil nil #s(yas--exit 1800 nil) 34 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1800 nil) 34 nil nil nil nil)) (1784 . 1800) (#("display_handle()$0" 0 18 (fontified nil)) . 1784) (1784 . 1802) (#("dis" 0 3 (fontified nil)) . 1784) (1784 . 1787) (#("display_handle() (use winit::raw_window_handle::HasDisplayHandle)" 0 65 (fontified nil)) . -1784) (1784 . 1849) (#("dis" 0 3 (fontified t)) . -1784) (undo-tree-id1563 . -3) 1787) nil (26050 12755 214465 183000) 0 nil])
([nil nil ((1839 . 1841)) nil (26050 12755 214462 797000) 0 nil])
([nil nil ((apply yas--snippet-revive 1840 1848 #s(yas--snippet nil nil #s(yas--exit 1848 nil) 35 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1848 nil) 35 nil nil nil nil)) (1840 . 1848) (#("unwrap()$0" 0 10 (fontified nil)) . 1840) (1840 . 1850) (#("u" 0 1 (fontified nil)) . 1840) (1840 . 1841) (#("unwrap()" 0 8 (fontified nil)) . -1840) (1840 . 1848) (#("u" 0 1 (fontified t)) . -1840) (undo-tree-id1562 . -1) 1841) nil (26050 12755 214461 475000) 0 nil])
([nil nil ((1848 . 1849)) nil (26050 12755 214459 188000) 0 nil])
([nil nil ((1849 . 1854)) nil (26050 12755 214458 678000) 0 nil])
([nil nil ((1854 . 1855)) nil (26050 12755 214458 142000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -1854) (undo-tree-id1561 . -1) 1855) nil (26050 12755 214457 496000) 0 nil])
([nil nil ((1854 . 1865)) nil (26050 12755 214456 159000) 0 nil])
([nil nil ((#("o" 0 1 (face font-lock-variable-name-face fontified t)) . -1863) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (#("s" 0 1 (face font-lock-variable-name-face fontified t)) . -1864) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) 1865) nil (26050 12755 214455 261000) 0 nil])
([nil nil ((1863 . 1870)) nil (26050 12755 214452 326000) 0 nil])
([nil nil ((1870 . 1871)) nil (26050 12755 214451 799000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -1870) (undo-tree-id1556 . -1) 1871) nil (26050 12755 214451 60000) 0 nil])
([nil nil ((#("let x11_displ.la" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 13 (face font-lock-variable-name-face fontified t) 13 16 (fontified t)) . 1854) (undo-tree-id1555 . -9)) nil (26050 12755 214449 544000) 0 nil])
([nil nil ((#("window" 0 6 (face font-lock-variable-name-face fontified t)) . -1807) (undo-tree-id1554 . -6) 1813) nil (26050 12755 214448 313000) 0 nil])
([nil nil ((1807 . 1814)) nil (26050 12755 214447 179000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1811) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (#("l" 0 1 (fontified t)) . -1812) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (#("a" 0 1 (fontified t)) . -1813) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) 1814) nil (26050 12755 214445 659000) 0 nil])
([nil nil ((1811 . 1814)) nil (26050 12755 214432 757000) 0 nil])
([nil nil ((1855 . 1863)) nil (26050 12755 214432 266000) 0 nil])
([nil nil ((1863 . 1873)) nil (26050 12755 214431 779000) 0 nil])
([nil nil ((1872 . 1878) (#("w" 0 1 (fontified nil)) . 1872) (1872 . 1873) (#("window" 0 6 (fontified nil)) . -1872) (1872 . 1878) (#("w" 0 1 (fontified t)) . -1872) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) 1873) nil (26050 12755 214430 647000) 0 nil])
([nil nil ((1878 . 1882)) nil (26050 12755 214427 346000) 0 nil])
([nil nil ((1775 . 1776) (1791 . 1809) (apply yas--snippet-revive 1879 1894 #s(yas--snippet nil nil #s(yas--exit 1894 nil) 36 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1894 nil) 36 nil nil nil nil)) (1879 . 1894) (#("window_handle()$0" 0 17 (fontified nil)) . 1879) (1879 . 1896) (#("win" 0 3 (fontified nil)) . 1879) (1879 . 1882) (#("window_handle() (use winit::raw_window_handle::HasWindowHandle)" 0 63 (fontified nil)) . -1879) (1879 . 1942) (#("win" 0 3 (fontified t)) . -1879) (undo-tree-id1518 . -3) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -2) (undo-tree-id1525 . -2) (undo-tree-id1526 . -2) (undo-tree-id1527 . -3) (undo-tree-id1528 . -3) (undo-tree-id1529 . -3) (undo-tree-id1530 . -3) 1882) nil (26050 12755 214425 799000) 0 nil])
([nil nil ((1913 . 1915)) nil (26050 12755 214415 862000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -1914) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) 1915) nil (26050 12755 214414 900000) 0 nil])
([nil nil ((1914 . 1915)) nil (26050 12755 214410 254000) 0 nil])
([nil nil ((apply yas--snippet-revive 1914 1922 #s(yas--snippet nil nil #s(yas--exit 1922 nil) 37 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1922 nil) 37 nil nil nil nil)) (1914 . 1922) (#("unwrap()$0" 0 10 (fontified nil)) . 1914) (1914 . 1924) (#("u" 0 1 (fontified nil)) . 1914) (1914 . 1915) (#("unwrap()" 0 8 (fontified nil)) . -1914) (1914 . 1922) (#("u" 0 1 (fontified t)) . -1914) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) 1915) nil (26050 12755 214407 949000) 0 nil])
([nil nil ((1922 . 1923)) nil (26050 12755 214394 764000) 0 nil])
([nil nil ((1928 . 1930) (t 26050 12755 227264 455000)) nil (26050 12757 331642 265000) 0 nil])
([nil nil ((1984 . 1986)) nil (26050 12757 331637 493000) 0 nil])
([nil nil ((2251 . 2253) (t 26050 12757 343931 252000)) nil (26050 12778 318288 614000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -2251) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (#("." 0 1 (fontified t)) . -2252) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) 2253) nil (26050 12778 318286 691000) 0 nil])
([nil nil ((2251 . 2253)) nil (26050 12778 318266 397000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2251) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (#("a" 0 1 (fontified t)) . -2252) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) 2253) nil (26050 12778 318264 469000) 0 nil])
([nil nil ((2251 . 2253)) nil (26050 12778 318246 558000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2252) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) 2253) nil (26050 12778 318245 611000) 0 nil])
([nil nil ((2252 . 2254)) nil (26050 12868 792929 43000) 0 nil])
([nil nil ((1869 . 1870)) nil (26050 12889 433788 96000) 0 nil] [nil nil ((apply yas--snippet-revive 2252 2260 #s(yas--snippet nil nil #s(yas--exit #<marker at 2647 in platforms.rs> nil) 38 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 2647 in platforms.rs> nil) 38 nil nil nil nil)) (2252 . 2260) (#("as_raw()$0" 0 10 (fontified nil)) . 2252) (2252 . 2262) (#("as" 0 2 (fontified nil)) . 2252) (2252 . 2254) (#("as_raw()" 0 8 (fontified nil)) . -2252) (2252 . 2260) (#("as" 0 2 (face font-lock-keyword-face fontified t)) . -2252) (undo-tree-id1576 . -2) (undo-tree-id1577 . -2) (undo-tree-id1579 . -1) (undo-tree-id1581 . -2) 2254) ((2252 . 2254) (#("as_raw()" 0 8 (fontified nil)) . 2252) (2252 . 2260) (#("as" 0 2 (fontified nil)) . 2252) (2252 . 2254) (#("as_raw()$0" 0 10 (fontified nil)) . 2252) (2252 . 2262) (#("as_raw()" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-3-face) fontified t) 7 8 (face (rainbow-delimiters-depth-3-face) fontified t)) . 2252) (undo-tree-id1850 . -5) (undo-tree-id1851 . -5) (undo-tree-id1852 . -8)) (26050 12868 508355 677000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -1869) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) 1870) nil (26050 12889 433787 483000) 0 nil])
([nil nil ((1836 . 1843)) ((#("if let " 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t) 3 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t)) . 1836)) (26050 12868 258435 543000) 0 nil] [nil nil ((2260 . 2261)) ((#("." 0 1 (fontified t)) . 2260) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1)) (26050 12821 177846 390000) 0 nil])
([nil nil ((1868 . 1871)) nil (26050 12889 433785 799000) 0 nil])
([nil nil ((1875 . 1878)) ((#(".as" 0 1 (fontified t) 1 2 (face font-lock-keyword-face fontified t) 2 3 (face font-lock-keyword-face fontified t)) . 1875) (undo-tree-id1828 . -3) (undo-tree-id1829 . -3) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -2) (undo-tree-id1833 . -2) (undo-tree-id1834 . -2) (undo-tree-id1835 . -3) (undo-tree-id1836 . -3) (undo-tree-id1837 . -3) (undo-tree-id1838 . -3) (undo-tree-id1839 . -3) (undo-tree-id1840 . -3) (undo-tree-id1841 . -3) (undo-tree-id1842 . -3) (undo-tree-id1843 . -3) (undo-tree-id1844 . -3) (undo-tree-id1845 . -3) (undo-tree-id1846 . -3) (undo-tree-id1847 . -2) (undo-tree-id1848 . -1) (undo-tree-id1849 . -3)) (26050 12868 7642 922000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2260) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1572 . -1) (undo-tree-id1574 . -1) 2261) ((2260 . 2261) (t 26050 12778 330599 206000)) (26050 12820 902874 533000) 0 nil])
([nil nil ((apply yas--snippet-revive 1869 1877 #s(yas--snippet nil nil #s(yas--exit 1877 nil) 39 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1877 nil) 39 nil nil nil nil)) (1869 . 1877) (#("as_raw()$0" 0 10 (fontified nil)) . 1869) (1869 . 1879) (#("as" 0 2 (fontified nil)) . 1869) (1869 . 1871) (#("as_raw()" 0 8 (fontified nil)) . -1869) (1869 . 1877) (#("as" 0 2 (face font-lock-keyword-face fontified t)) . -1869) (undo-tree-id1902 . -2) (undo-tree-id1903 . -2) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -2) (undo-tree-id1907 . -2) (undo-tree-id1908 . -2) (undo-tree-id1909 . -2) 1871) nil (26050 12889 433784 574000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1875) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) (undo-tree-id1793 . -1) (#("a" 0 1 (fontified t)) . -1876) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (#("s" 0 1 (face font-lock-keyword-face fontified t)) . -1877) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) 1878) ((1875 . 1878)) (26050 12867 895209 762000) 0 nil])
([nil nil ((2260 . 2261) (t 26050 12778 330599 206000)) ((#(":" 0 1 (fontified t)) . 2260) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1)) (26050 12820 587980 389000) 0 nil])
([nil nil ((1836 . 1843)) nil (26050 12889 433777 443000) 0 nil])
([nil nil ((1875 . 1876)) ((#("." 0 1 (fontified t)) . 1875) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1)) (26050 12867 894975 554000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -2260) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) 2261) ((2260 . 2261)) (26050 12820 271562 699000) 0 nil])
([nil nil ((#("let " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -1839) (undo-tree-id1891 . -4) (undo-tree-id1892 . -4) (undo-tree-id1893 . -1) (undo-tree-id1894 . -2) (undo-tree-id1895 . -2) (undo-tree-id1896 . -3) (undo-tree-id1897 . -3) (undo-tree-id1898 . -4) (undo-tree-id1899 . -4) (undo-tree-id1900 . -4) (undo-tree-id1901 . -4) 1843) nil (26050 12889 433776 510000) 0 nil])
nil
([nil nil ((2260 . 2262)) ((#(".x" 0 1 (fontified t) 1 2 (fontified t)) . 2260) (undo-tree-id1752 . -2) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (undo-tree-id1756 . -1) (undo-tree-id1757 . -2) (undo-tree-id1758 . -2) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -2)) (26050 12819 928692 595000) 0 nil])
([nil nil ((#("if " 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t)) . -1836) (undo-tree-id1872 . -3) (undo-tree-id1873 . -3) (undo-tree-id1874 . -1) (undo-tree-id1875 . -2) (undo-tree-id1876 . -2) (undo-tree-id1877 . -2) (undo-tree-id1878 . -2) (undo-tree-id1879 . -3) (undo-tree-id1880 . -3) (undo-tree-id1881 . -3) (undo-tree-id1882 . -3) (undo-tree-id1883 . -3) (undo-tree-id1884 . -3) (undo-tree-id1885 . -3) (undo-tree-id1886 . -3) (undo-tree-id1887 . -3) (undo-tree-id1888 . -3) (undo-tree-id1889 . -3) (undo-tree-id1890 . -3) 1839) nil (26050 12889 433769 662000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2260) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (undo-tree-id1689 . -1) (#("x" 0 1 (fontified t)) . -2261) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) 2262) ((2260 . 2262)) (26050 12819 610983 307000) 0 nil])
([nil nil ((1877 . 1879)) nil (26050 12889 433756 955000) 0 nil])
([nil nil ((2260 . 2261)) ((#(":" 0 1 (fontified t)) . 2260) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1)) (26050 12819 297968 77000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1877) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (#("," 0 1 (fontified t)) . -1878) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) 1879) nil (26050 12889 433753 234000) 0 nil])
([nil nil ((2261 . 2262)) ((#(":" 0 1 (fontified t)) . 2261) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1)) (26050 12818 948714 234000) 0 nil])
([nil nil ((1877 . 1878) (t 26050 12889 433939 360000)) nil (26050 12942 918890 743000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -2260) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (#(":" 0 1 (fontified t)) . -2261) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) 2262) ((2260 . 2262)) (26050 12818 588558 936000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1877) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) 1878) nil (26050 12942 918889 316000) 0 nil])
([nil nil ((2260 . 2262)) ((#("::" 0 1 (fontified t) 1 2 (fontified t)) . 2260) (undo-tree-id1727 . -2) (undo-tree-id1728 . -1) (undo-tree-id1729 . -2) (undo-tree-id1730 . -2) (undo-tree-id1731 . -2) (undo-tree-id1732 . -2) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -2)) (26050 12818 135682 378000) 0 nil])
([nil nil ((1877 . 1881)) nil (26050 12942 918883 865000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -2260) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (#(":" 0 1 (fontified t)) . -2261) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) 2262) ((2260 . 2262)) (26050 12817 829912 575000) 0 nil])
([nil nil ((1881 . 1882)) nil (26050 12942 918883 3000) 0 nil])
([nil nil ((2260 . 2261)) ((#("a" 0 1 (fontified t)) . 2260) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1)) (26050 12817 502888 57000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -1881) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) 1882) nil (26050 12942 918881 816000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -2260) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) 2261) ((2260 . 2261)) (26050 12817 186075 694000) 0 nil])
([nil nil ((1881 . 1882)) nil (26050 12942 918877 901000) 0 nil])
([nil nil ((2260 . 2261)) ((#("." 0 1 (fontified t)) . 2260) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1)) (26050 12816 861330 476000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -1881) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) 1882) nil (26050 12942 918876 285000) 0 nil])
([nil nil ((2261 . 2262)) ((#("x" 0 1 (fontified t)) . 2261) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1)) (26050 12816 538013 400000) 0 nil])
([nil nil ((1881 . 1885)) nil (26050 12942 918869 543000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2260) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (#("x" 0 1 (fontified t)) . -2261) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) 2262) ((2260 . 2262)) (26050 12816 536529 495000) 0 nil])
([nil nil ((1809 . 1828) (1881 . 1881) (1881 . 1898) (#("Xlib" 0 4 (fontified nil)) . 1881) (1881 . 1885) (#("XlibDisplayHandle (use winit::raw_window_handle::XlibDisplayHandle)" 0 67 (fontified nil)) . -1881) (1881 . 1948) (#("Xlib" 0 4 (face font-lock-type-face fontified t)) . -1881) (undo-tree-id1912 . -4) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -2) (undo-tree-id1917 . -2) (undo-tree-id1918 . -3) (undo-tree-id1919 . -3) (undo-tree-id1920 . -4) (undo-tree-id1921 . -4) (undo-tree-id1922 . -4) (undo-tree-id1923 . -4) 1885) nil (26050 12942 918864 76000) 0 nil])
nil
([nil nil ((#("XlibDisplayHandle" 0 17 (face font-lock-type-face fontified t)) . -1900) (undo-tree-id2003 . -17) (undo-tree-id2004 . -17) (undo-tree-id2005 . -17) (undo-tree-id2006 . -17) (undo-tree-id2007 . -17) (undo-tree-id2008 . -17) (undo-tree-id2009 . -17) (undo-tree-id2010 . -17) (undo-tree-id2011 . -17) (undo-tree-id2012 . -17) (undo-tree-id2013 . -17) (undo-tree-id2014 . -17) (undo-tree-id2015 . -17) 1917 (t 26050 12942 930609 311000)) nil (26050 13013 309402 955000) 0 nil])
([nil nil ((#("as " 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t)) . -1897) (undo-tree-id1971 . -3) (undo-tree-id1972 . -3) (undo-tree-id1973 . -3) (undo-tree-id1974 . -3) (undo-tree-id1975 . -3) (undo-tree-id1976 . -3) (undo-tree-id1977 . -3) (undo-tree-id1978 . -3) (undo-tree-id1979 . -3) (undo-tree-id1980 . -3) (undo-tree-id1981 . -3) (undo-tree-id1982 . -3) (undo-tree-id1983 . -3) (undo-tree-id1984 . -3) (undo-tree-id1985 . -3) (undo-tree-id1986 . -3) (undo-tree-id1987 . -3) (undo-tree-id1988 . -3) (undo-tree-id1989 . -3) (undo-tree-id1990 . -3) (undo-tree-id1991 . -3) (undo-tree-id1992 . -2) (undo-tree-id1993 . -3) (undo-tree-id1994 . -3) (undo-tree-id1995 . -3) (undo-tree-id1996 . -3) (undo-tree-id1997 . -3) (undo-tree-id1998 . -3) (undo-tree-id1999 . -3) (undo-tree-id2000 . -3) (undo-tree-id2001 . -3) (undo-tree-id2002 . -3) 1900) nil (26050 13013 309387 256000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1896) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (undo-tree-id1970 . -1) 1897) nil (26050 13013 309354 592000) 0 nil])
([nil nil ((1950 . 1953) (t 26050 13013 353946 967000)) nil (26050 13090 463095 96000) 0 nil])
([nil nil ((apply yas--snippet-revive 1951 1959 #s(yas--snippet nil nil #s(yas--exit 1959 nil) 40 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1959 nil) 40 nil nil nil nil)) (1951 . 1959) (#("as_raw()$0" 0 10 (fontified nil)) . 1951) (1951 . 1961) (#("as" 0 2 (fontified nil)) . 1951) (1951 . 1953) (#("as_raw()" 0 8 (fontified nil)) . -1951) (1951 . 1959) (#("as" 0 2 (face font-lock-keyword-face fontified t)) . -1951) (undo-tree-id2016 . -2) (undo-tree-id2017 . -2) (undo-tree-id2018 . -1) (undo-tree-id2019 . -1) (undo-tree-id2020 . -2) (undo-tree-id2021 . -2) (undo-tree-id2022 . -2) (undo-tree-id2023 . -2) (undo-tree-id2024 . -2) (undo-tree-id2025 . -2) (undo-tree-id2026 . -2) (undo-tree-id2027 . -2) 1953) nil (26050 13090 463090 634000) 0 nil])
([nil nil ((1852 . 1856) (t 26050 13090 477285 34000)) nil (26050 13098 504596 308000) 0 nil])
([nil nil ((1920 . 1924)) nil (26050 13098 504592 376000) 0 nil])
([nil nil ((1971 . 1975) (#("    " 0 4 (fontified nil)) . 1970) (undo-tree-id2117 . -4) (1970 . 1975) (#("    " 0 4 (fontified nil)) . 1969) (undo-tree-id2118 . -4) (1968 . 1974) (t 26050 13098 547285 530000)) nil (26050 13229 871385 461000) 0 nil])
([nil nil ((1970 . 1974)) nil (26050 13229 871383 320000) 0 nil])
([nil nil ((1974 . 1975)) nil (26050 13229 871382 862000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -1974) (undo-tree-id2116 . -1) 1975) nil (26050 13229 871382 325000) 0 nil])
([nil nil ((1974 . 1982)) nil (26050 13229 871381 231000) 0 nil])
([nil nil ((#("x" 0 1 (face font-lock-variable-name-face fontified t)) . -1981) (undo-tree-id2115 . -1) 1982) nil (26050 13229 871380 581000) 0 nil])
([nil nil ((#("let " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -1977) (undo-tree-id2114 . -4) 1981) nil (26050 13229 871379 412000) 0 nil])
([nil nil ((#("if " 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t)) . -1974) (undo-tree-id2113 . -3) 1977) nil (26050 13229 871378 110000) 0 nil])
([nil nil ((1974 . 1981)) nil (26050 13229 871377 17000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -1980) (undo-tree-id2112 . -1) 1981) nil (26050 13229 871376 420000) 0 nil])
([nil nil ((#("match " 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t)) . -1974) (undo-tree-id2111 . -6) 1980) nil (26050 13229 871375 160000) 0 nil])
([nil nil ((1974 . 1980)) nil (26050 13229 871374 66000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -1977) (undo-tree-id2108 . -1) (#("t" 0 1 (fontified t)) . -1978) (undo-tree-id2109 . -1) (#("e" 0 1 (fontified t)) . -1979) (undo-tree-id2110 . -1) 1980) nil (26050 13229 871373 198000) 0 nil])
([nil nil ((1977 . 1982)) nil (26050 13229 871369 682000) 0 nil])
([nil nil ((1982 . 1984)) nil (26050 13229 871369 209000) 0 nil])
([nil nil ((#("X" 0 1 (face font-lock-type-face fontified t)) . -1981) (undo-tree-id2105 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1982) (undo-tree-id2106 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -1983) (undo-tree-id2107 . -1) 1984) nil (26050 13229 871368 257000) 0 nil])
([nil nil ((1981 . 1984)) nil (26050 13229 871365 959000) 0 nil])
([nil nil ((1828 . 1846) (1981 . 1981) (1981 . 1997) (#("Raw" 0 3 (fontified nil)) . 1981) (1981 . 1984) (#("RawDisplayHandle (use winit::raw_window_handle::RawDisplayHandle)" 0 65 (fontified nil)) . -1981) (1981 . 2046) (#("Raw" 0 3 (face font-lock-type-face fontified t)) . -1981) (undo-tree-id2104 . -3) 1984) nil (26050 13229 871364 957000) 0 nil])
([nil nil ((2015 . 2017)) nil (26050 13229 871362 390000) 0 nil])
([nil nil ((2017 . 2018)) nil (26050 13229 871361 843000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2022 2022 nil nil nil nil #s(yas--exit 2023 nil))) #s(yas--exit 2023 nil) 41 nil #s(yas--field 1 2022 2022 nil nil nil nil #s(yas--exit 2023 nil)) nil nil)) (2017 . 2023) (#("Xlib($1)$0" 0 10 (fontified nil)) . 2017) (2017 . 2027) (#("X" 0 1 (fontified nil)) . 2017) (2017 . 2018) (#("Xlib(…)" 0 7 (fontified nil)) . -2017) (2017 . 2024) (#("X" 0 1 (face font-lock-type-face fontified t)) . -2017) (undo-tree-id2103 . -1) 2018) nil (26050 13229 871360 653000) 0 nil])
([nil nil ((apply yas--snippet-revive 2017 2023 #s(yas--snippet nil (#s(yas--field 1 2022 2022 nil nil nil nil #s(yas--exit 2023 nil))) #s(yas--exit 2023 nil) 41 nil #s(yas--field 1 2022 2022 nil nil nil nil #s(yas--exit 2023 nil)) nil nil))) nil (26050 13229 871358 506000) 0 nil])
([nil nil ((2022 . 2025)) nil (26050 13229 871358 19000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -2022) (undo-tree-id2100 . -1) (#("l" 0 1 (fontified t)) . -2023) (undo-tree-id2101 . -1) (#("k" 0 1 (fontified t)) . -2024) (undo-tree-id2102 . -1) 2025) nil (26050 13229 871357 199000) 0 nil])
([nil nil ((2022 . 2033)) nil (26050 13229 871354 858000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t)) . -2027) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) (#("a" 0 1 (fontified t)) . -2028) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) (undo-tree-id2071 . -1) (undo-tree-id2072 . -1) (undo-tree-id2073 . -1) (undo-tree-id2074 . -1) (undo-tree-id2075 . -1) (undo-tree-id2076 . -1) (#("n" 0 1 (fontified t)) . -2029) (undo-tree-id2077 . -1) (undo-tree-id2078 . -1) (undo-tree-id2079 . -1) (undo-tree-id2080 . -1) (undo-tree-id2081 . -1) (undo-tree-id2082 . -1) (undo-tree-id2083 . -1) (undo-tree-id2084 . -1) (undo-tree-id2085 . -1) (#("d" 0 1 (fontified t)) . -2030) (undo-tree-id2086 . -1) (undo-tree-id2087 . -1) (undo-tree-id2088 . -1) (undo-tree-id2089 . -1) (undo-tree-id2090 . -1) (undo-tree-id2091 . -1) (undo-tree-id2092 . -1) (#("p" 0 1 (fontified t)) . -2031) (undo-tree-id2093 . -1) (undo-tree-id2094 . -1) (undo-tree-id2095 . -1) (undo-tree-id2096 . -1) (undo-tree-id2097 . -1) (#("o" 0 1 (fontified t)) . -2032) (undo-tree-id2098 . -1) (undo-tree-id2099 . -1) 2033) nil (26050 13229 871352 577000) 0 nil])
([nil nil ((2027 . 2040)) nil (26050 13229 871326 689000) 0 nil])
([nil nil ((2040 . 2041)) nil (26050 13229 871326 166000) 0 nil])
([nil nil ((2042 . 2046)) nil (26050 13229 871325 494000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t)) . -2045) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) 2046) nil (26050 13229 871324 769000) 0 nil])
([nil nil ((2045 . 2046)) nil (26050 13229 871323 5000) 0 nil])
([nil nil ((2045 . 2060) (#("x" 0 1 (fontified nil)) . 2045) (2045 . 2046) (#("x11_display_raw" 0 15 (fontified nil)) . -2045) (2045 . 2060) (#("x" 0 1 (fontified t)) . -2045) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) 2046) nil (26050 13229 871321 953000) 0 nil])
([nil nil ((2060 . 2063)) nil (26050 13229 871318 466000) 0 nil])
([nil nil ((2064 . 2068) (#("        " 0 8 (fontified nil)) . 2063) (2063 . 2071) (#("    " 0 4 (fontified nil)) . 2063) (undo-tree-id2044 . -4) (undo-tree-id2045 . -4) (undo-tree-id2046 . -4) (2062 . 2068)) nil (26050 13229 871317 563000) 0 nil])
([nil nil ((2063 . 2071)) nil (26050 13229 871314 354000) 0 nil])
([nil nil ((2060 . 2063)) nil (26050 13229 871313 212000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -2060) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) (#(":" 0 1 (fontified t)) . -2061) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (#("X" 0 1 (face font-lock-type-face fontified t)) . -2062) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) 2063) nil (26050 13229 871309 8000) 0 nil])
([nil nil ((#("    if let RawDisplayHandle::Xlib(xlib_display_handle) = x11_display_raw {
        
    }
    " 0 4 (fontified t) 4 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 27 (face font-lock-type-face fontified t) 27 29 (fontified t) 29 33 (face font-lock-type-face fontified t) 33 34 (face (rainbow-delimiters-depth-2-face) fontified t) 34 53 (fontified t) 53 54 (face (rainbow-delimiters-depth-2-face) fontified t) 54 57 (fontified t) 57 72 (fontified t) 72 73 (fontified t) 73 74 (face (rainbow-delimiters-depth-2-face) fontified t) 74 75 (fontified t) 75 83 (fontified t) 83 84 (fontified t) 84 88 (fontified t) 88 89 (face (rainbow-delimiters-depth-2-face) fontified t) 89 90 (fontified t) 90 94 (fontified t)) . 1988) (undo-tree-id2184 . -94) (undo-tree-id2185 . -31) (undo-tree-id2186 . -34) (undo-tree-id2187 . -39) (undo-tree-id2188 . -39) (undo-tree-id2189 . -39) (undo-tree-id2190 . -39) (undo-tree-id2191 . -39) (undo-tree-id2192 . -39) (undo-tree-id2193 . -39) (undo-tree-id2194 . -39) (undo-tree-id2195 . -39) (undo-tree-id2196 . -39) (undo-tree-id2197 . -39) (undo-tree-id2198 . -57) (undo-tree-id2199 . -57) (undo-tree-id2200 . -57) (undo-tree-id2201 . -57) (undo-tree-id2202 . -75) (undo-tree-id2203 . -75) (undo-tree-id2204 . -72) (undo-tree-id2205 . -72) (undo-tree-id2206 . -72) (undo-tree-id2207 . -72) (undo-tree-id2208 . -72) (undo-tree-id2209 . -72) (undo-tree-id2210 . 22) (undo-tree-id2211 . -72) (undo-tree-id2212 . -72) (undo-tree-id2213 . -72) (undo-tree-id2214 . -72) (undo-tree-id2215 . -72) (undo-tree-id2216 . -72) (undo-tree-id2217 . -72) (undo-tree-id2218 . -72) (undo-tree-id2219 . -72) (undo-tree-id2220 . -72) (undo-tree-id2221 . -72) (undo-tree-id2222 . -72) (undo-tree-id2223 . -83) (undo-tree-id2224 . -72) (undo-tree-id2225 . -72) (undo-tree-id2226 . -72) (undo-tree-id2227 . -83) (undo-tree-id2228 . -83) (undo-tree-id2229 . -83) (undo-tree-id2230 . -83) (undo-tree-id2231 . -83) (undo-tree-id2232 . -83) (undo-tree-id2233 . -83) (undo-tree-id2234 . -83) (undo-tree-id2235 . -83) (undo-tree-id2236 . -83) (undo-tree-id2237 . -83) (undo-tree-id2238 . -83) (undo-tree-id2239 . -83) (undo-tree-id2240 . -83) (undo-tree-id2241 . -83) (undo-tree-id2242 . -28) (undo-tree-id2243 . -28) (undo-tree-id2244 . -28) (undo-tree-id2245 . -28) (undo-tree-id2246 . -28) (undo-tree-id2247 . -28) (undo-tree-id2248 . -28) (undo-tree-id2249 . -28) (undo-tree-id2250 . -28) (undo-tree-id2251 . -28) (undo-tree-id2252 . -28) (undo-tree-id2253 . -28) (undo-tree-id2254 . -28) (undo-tree-id2255 . -28) (undo-tree-id2256 . -28) (undo-tree-id2257 . -28) (undo-tree-id2258 . -28) (undo-tree-id2259 . -94) (undo-tree-id2260 . -94) (undo-tree-id2261 . -94) (undo-tree-id2262 . -89) (undo-tree-id2263 . -82) (undo-tree-id2264 . -81) (undo-tree-id2265 . -80) (undo-tree-id2266 . -79) (undo-tree-id2267 . -78) (undo-tree-id2268 . -77) (undo-tree-id2269 . -76) (undo-tree-id2270 . -31) (undo-tree-id2271 . -94) (t 26050 13229 883960 258000)) nil (26050 13372 703887 97000) 0 nil])
([nil nil ((1988 . 1992)) nil (26050 13372 702645 156000) 0 nil])
([nil nil ((1992 . 1996)) nil (26050 13372 702644 627000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -1992) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1) (#("l" 0 1 (fontified t)) . -1993) (undo-tree-id2164 . -1) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) (undo-tree-id2173 . -1) (#("e" 0 1 (fontified t)) . -1994) (undo-tree-id2174 . -1) (undo-tree-id2175 . -1) (undo-tree-id2176 . -1) (undo-tree-id2177 . -1) (undo-tree-id2178 . -1) (undo-tree-id2179 . -1) (undo-tree-id2180 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -1995) (undo-tree-id2181 . -1) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) 1996) nil (26050 13372 702642 576000) 0 nil])
([nil nil ((1992 . 2000)) nil (26050 13372 702621 135000) 0 nil])
([nil nil ((#("a = " 0 1 (face font-lock-variable-name-face fontified t) 1 4 (fontified t)) . -1996) (undo-tree-id2140 . -4) (undo-tree-id2141 . -1) (undo-tree-id2142 . -1) (undo-tree-id2143 . -2) (undo-tree-id2144 . -2) (undo-tree-id2145 . -3) (undo-tree-id2146 . -3) (undo-tree-id2147 . -4) (undo-tree-id2148 . -4) (undo-tree-id2149 . -4) (undo-tree-id2150 . -4) 2000) nil (26050 13372 702619 506000) 0 nil])
([nil nil ((#("let " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -1992) (undo-tree-id2119 . -4) (undo-tree-id2120 . -1) (undo-tree-id2121 . -2) (undo-tree-id2122 . -2) (undo-tree-id2123 . -3) (undo-tree-id2124 . -3) (undo-tree-id2125 . -4) (undo-tree-id2126 . -4) (undo-tree-id2127 . -4) (undo-tree-id2128 . -4) (undo-tree-id2129 . -4) (undo-tree-id2130 . -4) (undo-tree-id2131 . -4) (undo-tree-id2132 . -4) (undo-tree-id2133 . -4) (undo-tree-id2134 . -4) (undo-tree-id2135 . -4) (undo-tree-id2136 . -4) (undo-tree-id2137 . -4) (undo-tree-id2138 . -4) (undo-tree-id2139 . -4) 1996) nil (26050 13372 702608 849000) 0 nil])
([nil nil ((1874 . 1876) (t 26050 13372 717302 359000)) nil (26050 13405 420146 46000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -1875) (undo-tree-id2286 . -1) (undo-tree-id2287 . -1) (undo-tree-id2288 . -1) (undo-tree-id2289 . -1) (undo-tree-id2290 . -1) (undo-tree-id2291 . -1) (undo-tree-id2292 . -1) (undo-tree-id2293 . -1) 1876) nil (26050 13405 420144 913000) 0 nil])
([nil nil ((1875 . 1877)) nil (26050 13405 420138 907000) 0 nil])
([nil nil ((#("X" 0 1 (face font-lock-type-face fontified t)) . -1876) (undo-tree-id2276 . -1) (undo-tree-id2277 . -1) (undo-tree-id2278 . -1) (undo-tree-id2279 . -1) (undo-tree-id2280 . -1) (undo-tree-id2281 . -1) (undo-tree-id2282 . -1) (undo-tree-id2283 . -1) (undo-tree-id2284 . -1) (undo-tree-id2285 . -1) 1877) nil (26050 13405 420137 800000) 0 nil])
([nil nil ((1876 . 1877)) nil (26050 13405 420130 87000) 0 nil])
([nil nil ((1876 . 1892) (#("R" 0 1 (fontified nil)) . 1876) (1876 . 1877) (#("RawDisplayHandle" 0 16 (fontified nil)) . -1876) (1876 . 1892) (#("R" 0 1 (face font-lock-type-face fontified t)) . -1876) (undo-tree-id2272 . -1) (undo-tree-id2273 . -1) (undo-tree-id2274 . -1) (undo-tree-id2275 . -1) 1877) nil (26050 13405 420127 719000) 0 nil])
([nil nil ((1892 . 1895)) nil (26050 13405 420117 975000) 0 nil])
([nil nil ((1895 . 1898)) nil (26050 13405 420113 738000) 0 nil])
([nil nil ((#("Xlib" 0 4 (face font-lock-type-face fontified t)) . -1894) (undo-tree-id2345 . -4) (undo-tree-id2346 . -4) (undo-tree-id2347 . -4) (undo-tree-id2348 . -4) (undo-tree-id2349 . -4) (undo-tree-id2350 . -4) (undo-tree-id2351 . -4) (undo-tree-id2352 . -4) (undo-tree-id2353 . -4) (undo-tree-id2354 . -4) (undo-tree-id2355 . -4) (undo-tree-id2356 . -4) 1898 (t 26050 13405 433971 34000)) nil (26050 13416 837405 384000) 0 nil])
([nil nil ((#("RawDisplayHandle::" 0 16 (face font-lock-type-face fontified t) 16 18 (fontified t)) . -1876) (undo-tree-id2329 . -10) (undo-tree-id2330 . -10) (undo-tree-id2331 . -10) (undo-tree-id2332 . -18) (undo-tree-id2333 . -18) (undo-tree-id2334 . -18) (undo-tree-id2335 . -18) (undo-tree-id2336 . -18) (undo-tree-id2337 . -18) (undo-tree-id2338 . -18) (undo-tree-id2339 . -18) (undo-tree-id2340 . -18) (undo-tree-id2341 . -18) (undo-tree-id2342 . -18) (undo-tree-id2343 . -18) (undo-tree-id2344 . -18) 1894) nil (26050 13416 837763 697000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -1874) (undo-tree-id2357 . -1) (undo-tree-id2358 . -1) (undo-tree-id2359 . -1) (undo-tree-id2360 . -1) (undo-tree-id2361 . -1) (undo-tree-id2362 . -1) (undo-tree-id2363 . -1) (undo-tree-id2364 . -1) (undo-tree-id2365 . -1) (undo-tree-id2366 . -1) (undo-tree-id2367 . -1) (undo-tree-id2368 . -1) (undo-tree-id2369 . -1) (undo-tree-id2370 . -1) (undo-tree-id2371 . -1) (undo-tree-id2372 . -1) (undo-tree-id2373 . -1) (undo-tree-id2374 . -1) (undo-tree-id2375 . -1) (undo-tree-id2376 . -1) (undo-tree-id2377 . -1) (undo-tree-id2378 . -1) (undo-tree-id2379 . -1) (undo-tree-id2380 . -1) (undo-tree-id2381 . -1) (undo-tree-id2382 . -1) (undo-tree-id2383 . -1) (undo-tree-id2384 . -1) (undo-tree-id2385 . -1) (undo-tree-id2386 . -1) (undo-tree-id2387 . -1) (undo-tree-id2388 . -1) (undo-tree-id2389 . -1) (undo-tree-id2390 . -1) (undo-tree-id2391 . -1) (undo-tree-id2392 . -1) (undo-tree-id2393 . -1) (#(" " 0 1 (fontified t)) . -1875) (undo-tree-id2394 . -1) (undo-tree-id2395 . -1) (undo-tree-id2396 . -1) (undo-tree-id2397 . -1) (undo-tree-id2398 . -1) (undo-tree-id2399 . -1) (undo-tree-id2400 . -1) (undo-tree-id2401 . -1) (undo-tree-id2402 . -1) (undo-tree-id2403 . -1) (undo-tree-id2404 . -1) (undo-tree-id2405 . -1) (undo-tree-id2406 . -1) (undo-tree-id2407 . -1) (undo-tree-id2408 . -1) (undo-tree-id2409 . -1) (undo-tree-id2410 . -1) (undo-tree-id2411 . -1) (undo-tree-id2412 . -1) (undo-tree-id2413 . -1) (undo-tree-id2414 . -1) (undo-tree-id2415 . -1) (undo-tree-id2416 . -1) (undo-tree-id2417 . -1) (undo-tree-id2418 . -1) (undo-tree-id2419 . -1) (undo-tree-id2420 . -1) (undo-tree-id2421 . -1) (undo-tree-id2422 . -1) 1876) nil (26050 13418 56114 91000) 0 nil] [nil nil ((#("raw: " 0 3 (face font-lock-variable-name-face fontified t) 3 5 (fontified t)) . -1871) (undo-tree-id2294 . -5) (undo-tree-id2295 . -5) (undo-tree-id2296 . -4) (undo-tree-id2297 . -4) (undo-tree-id2298 . -4) (undo-tree-id2299 . -4) (undo-tree-id2300 . -4) (undo-tree-id2301 . -4) (undo-tree-id2302 . -4) (undo-tree-id2303 . -5) (undo-tree-id2304 . -5) (undo-tree-id2305 . -5) (undo-tree-id2306 . -5) (undo-tree-id2307 . -5) (undo-tree-id2308 . -5) (undo-tree-id2309 . -5) (undo-tree-id2310 . -5) (undo-tree-id2311 . -5) (undo-tree-id2312 . -5) (undo-tree-id2313 . -5) (undo-tree-id2314 . -5) (undo-tree-id2315 . -5) (undo-tree-id2316 . -5) (undo-tree-id2317 . -5) (undo-tree-id2318 . -5) (undo-tree-id2319 . -5) (undo-tree-id2320 . -5) (undo-tree-id2321 . -5) (undo-tree-id2322 . -5) (undo-tree-id2323 . -5) (undo-tree-id2324 . -5) (undo-tree-id2325 . -5) (undo-tree-id2326 . -5) (undo-tree-id2327 . -5) (undo-tree-id2328 . -5) 1876) ((1871 . 1876)) (26050 13416 837383 421000) 0 nil])
([nil nil ((1988 . 1992) (#("    " 0 4 (fontified nil)) . 1987) (1987 . 1991) (1987 . 1988) (t 26050 13418 67305 142000)) nil (26050 13611 399474 78000) 0 nil])
nil
([nil nil ((1992 . 1995)) nil (26050 13611 399473 152000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -1992) (undo-tree-id2443 . -1) (#("e" 0 1 (fontified t)) . -1993) (undo-tree-id2444 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -1994) (undo-tree-id2445 . -1) 1995) nil (26050 13611 399472 322000) 0 nil])
([nil nil ((1992 . 1999)) nil (26050 13611 399469 600000) 0 nil])
([nil nil ((#("raw" 0 3 (face font-lock-variable-name-face fontified t)) . -1871) (undo-tree-id2438 . -3) (undo-tree-id2439 . -3) (undo-tree-id2440 . -3) (undo-tree-id2441 . -3) (undo-tree-id2442 . -3) 1874) nil (26050 13611 399468 904000) 0 nil])
([nil nil ((#("display_" 0 8 (face font-lock-variable-name-face fontified t)) . -1863) (undo-tree-id2433 . -8) (undo-tree-id2434 . -8) (undo-tree-id2435 . -8) (undo-tree-id2436 . -8) (undo-tree-id2437 . -8) 1871) nil (26050 13611 399465 387000) 0 nil])
([nil nil ((#("x11_" 0 4 (face font-lock-variable-name-face fontified t)) . -1859) (undo-tree-id2428 . -4) (undo-tree-id2429 . -4) (undo-tree-id2430 . -4) (undo-tree-id2431 . -4) (undo-tree-id2432 . -4) 1863) nil (26050 13611 399461 927000) 0 nil])
([nil nil ((1859 . 1873)) nil (26050 13611 399457 728000) 0 nil])
([nil nil ((#("o" 0 1 (face font-lock-variable-name-face fontified t)) . -1871) (undo-tree-id2426 . -1) (#("w" 0 1 (face font-lock-variable-name-face fontified t)) . -1872) (undo-tree-id2427 . -1) 1873) nil (26050 13611 399456 749000) 0 nil])
([nil nil ((1871 . 1873)) nil (26050 13611 399454 514000) 0 nil])
([nil nil ((#("raw" 0 3 (face font-lock-variable-name-face fontified t)) . -1938) (undo-tree-id2425 . -3) 1941) nil (26050 13611 399453 693000) 0 nil])
([nil nil ((#("window_" 0 7 (face font-lock-variable-name-face fontified t)) . -1931) (undo-tree-id2424 . -7) 1938) nil (26050 13611 399452 95000) 0 nil])
([nil nil ((#("x11_" 0 4 (face font-lock-variable-name-face fontified t)) . -1927) (undo-tree-id2423 . -4) 1931) nil (26050 13611 399449 180000) 0 nil])
([nil nil ((1927 . 1940)) nil (26050 13611 399439 733000) 0 nil])
([nil nil ((#("raw()" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-2-face) fontified t) 4 5 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1912) (undo-tree-id2495 . -1) (undo-tree-id2496 . -5) (undo-tree-id2497 . -3) (undo-tree-id2498 . -4) (undo-tree-id2499 . -5) 1917 (t 26050 13611 413983 678000)) nil (26050 13638 769696 637000) 0 nil])
([nil nil ((#("as_" 0 3 (fontified t)) . -1909) (undo-tree-id2487 . -3) (undo-tree-id2488 . -2) (undo-tree-id2489 . -3) (undo-tree-id2490 . -2) (undo-tree-id2491 . -3) (undo-tree-id2492 . -3) (undo-tree-id2493 . -3) (undo-tree-id2494 . -3) 1912) nil (26050 13638 769692 939000) 0 nil])
([nil nil ((#("unwrap()." 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-2-face) fontified t) 7 8 (face (rainbow-delimiters-depth-2-face) fontified t) 8 9 (fontified t)) . -1900) (undo-tree-id2477 . -9) (undo-tree-id2478 . -9) (undo-tree-id2479 . -9) (undo-tree-id2480 . -6) (undo-tree-id2481 . -9) (undo-tree-id2482 . -9) (undo-tree-id2483 . -9) (undo-tree-id2484 . -9) (undo-tree-id2485 . -9) (undo-tree-id2486 . -9) 1909) nil (26050 13638 769687 777000) 0 nil])
([nil nil ((1900 . 1902)) nil (26050 13638 769681 25000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1907 1940 nil nil nil t #s(yas--exit 1941 nil))) #s(yas--exit 1941 nil) 42 nil #s(yas--field 1 1907 1940 nil nil nil t #s(yas--exit 1941 nil)) nil nil)) (1900 . 1911) (#("expect(${1:msg})$0" 0 18 (fontified nil)) . 1900) (1900 . 1918) (#("ex" 0 2 (fontified nil)) . 1900) (1900 . 1902) (#("expect(…)" 0 9 (fontified nil)) . -1900) (1900 . 1909) (#("ex" 0 2 (fontified t)) . -1900) (undo-tree-id2471 . -2) (undo-tree-id2472 . -1) (undo-tree-id2473 . -2) (undo-tree-id2474 . -2) (undo-tree-id2475 . -2) (undo-tree-id2476 . -2) 1902) nil (26050 13638 769679 808000) 0 nil])
([nil nil ((1908 . 1909) (#("msg" 0 3 (fontified nil)) . 1908) (undo-tree-id2470 . -3) (1907 . 1908)) nil (26050 13638 769674 730000) 0 nil])
([nil nil ((1908 . 1920)) nil (26050 13638 769673 316000) 0 nil])
([nil nil ((#("w" 0 1 (face font-lock-string-face fontified t)) . -1919) (undo-tree-id2466 . -1) (undo-tree-id2467 . -1) (undo-tree-id2468 . -1) (undo-tree-id2469 . -1) 1920) nil (26050 13638 769672 573000) 0 nil])
([nil nil ((1919 . 1920)) nil (26050 13638 769669 698000) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-string-face fontified t)) . -1919) (undo-tree-id2464 . -1) (undo-tree-id2465 . -1) 1920) nil (26050 13638 769669 45000) 0 nil])
([nil nil ((1919 . 1939)) nil (26050 13638 769667 88000) 0 nil])
([nil nil ((apply yas--snippet-revive 1900 1941 #s(yas--snippet nil (#s(yas--field 1 1907 1940 nil nil nil t #s(yas--exit 1941 nil))) #s(yas--exit 1941 nil) 42 nil #s(yas--field 1 1907 1940 nil nil nil t #s(yas--exit 1941 nil)) nil nil))) nil (26050 13638 769666 470000) 0 nil])
([nil nil ((#("raw()" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-2-face) fontified t) 4 5 (face (rainbow-delimiters-depth-2-face) fontified t)) . -2002) (undo-tree-id2462 . -5) (undo-tree-id2463 . -5) 2007) nil (26050 13638 769665 695000) 0 nil])
([nil nil ((#("as_" 0 3 (fontified t)) . -1999) (undo-tree-id2457 . -3) (undo-tree-id2458 . -3) (undo-tree-id2459 . -3) (undo-tree-id2460 . -3) (undo-tree-id2461 . -3) 2002) nil (26050 13638 769663 630000) 0 nil])
([nil nil ((#("unwrap()." 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-2-face) fontified t) 7 8 (face (rainbow-delimiters-depth-2-face) fontified t) 8 9 (fontified t)) . -1990) (undo-tree-id2451 . -9) (undo-tree-id2452 . -9) (undo-tree-id2453 . -9) (undo-tree-id2454 . -9) (undo-tree-id2455 . -9) (undo-tree-id2456 . -9) 1999) nil (26050 13638 769660 4000) 0 nil])
([nil nil ((1990 . 1991)) nil (26050 13638 769655 665000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1997 2029 nil nil nil t #s(yas--exit 2030 nil))) #s(yas--exit 2030 nil) 43 nil #s(yas--field 1 1997 2029 nil nil nil t #s(yas--exit 2030 nil)) nil nil)) (1990 . 2001) (#("expect(${1:msg})$0" 0 18 (fontified nil)) . 1990) (1990 . 2008) (#("e" 0 1 (fontified nil)) . 1990) (1990 . 1991) (#("expect(…)" 0 9 (fontified nil)) . -1990) (1990 . 1999) (#("e" 0 1 (fontified t)) . -1990) (undo-tree-id2447 . -1) (undo-tree-id2448 . -1) (undo-tree-id2449 . -1) (undo-tree-id2450 . -1) 1991) nil (26050 13638 769653 962000) 0 nil])
([nil nil ((1998 . 1999) (#("msg" 0 3 (fontified nil)) . 1998) (undo-tree-id2446 . -3) (1997 . 1998)) nil (26050 13638 769647 642000) 0 nil])
([nil nil ((1998 . 2001)) nil (26050 13638 769642 173000) 0 nil])
([nil nil ((2001 . 2022)) nil (26050 13638 769641 129000) 0 nil])
([nil nil ((2022 . 2028)) nil (26050 13638 769637 345000) 0 nil])
([nil nil ((apply yas--snippet-revive 1990 2030 #s(yas--snippet nil (#s(yas--field 1 1997 2029 nil nil nil t #s(yas--exit 2030 nil))) #s(yas--exit 2030 nil) 43 nil #s(yas--field 1 1997 2029 nil nil nil t #s(yas--exit 2030 nil)) nil nil))) nil (26050 13728 583974 732000) 0 nil])
([nil nil ((2044 . 2045) (t 26050 13638 783985 358000)) nil (26050 13728 583974 151000) 0 nil])
([nil nil ((2044 . 2061) (#("X" 0 1 (fontified nil)) . 2044) (2044 . 2045) (#("XlibDisplayHandle" 0 17 (fontified nil)) . -2044) (2044 . 2061) (#("X" 0 1 (face font-lock-type-face fontified t)) . -2044) (undo-tree-id2513 . -1) 2045) nil (26050 13728 583973 181000) 0 nil])
([nil nil ((2061 . 2067)) nil (26050 13728 583971 461000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-type-face fontified nil)) . -2065) (undo-tree-id2511 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -2066) (undo-tree-id2512 . -1) 2067) nil (26050 13728 583970 721000) 0 nil])
([nil nil ((#("Xl" 0 2 (face font-lock-type-face fontified t)) . -2063) (undo-tree-id2510 . -2) 2065) nil (26050 13728 583968 858000) 0 nil])
([nil nil ((#("XlibDisplayHandle::" 0 17 (face font-lock-type-face fontified t) 17 19 (fontified t)) . -2044) (undo-tree-id2509 . -19) 2063) nil (26050 13728 583967 510000) 0 nil])
([nil nil ((2044 . 2045)) nil (26050 13728 583966 87000) 0 nil])
([nil nil ((2044 . 2060) (#("R" 0 1 (fontified nil)) . 2044) (2044 . 2045) (#("RawDisplayHandle" 0 16 (fontified nil)) . -2044) (2044 . 2060) (#("R" 0 1 (face font-lock-type-face fontified t)) . -2044) (undo-tree-id2508 . -1) 2045) nil (26050 13728 583965 73000) 0 nil])
([nil nil ((2060 . 2062)) nil (26050 13728 583963 314000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2067 2073 nil nil nil t #s(yas--exit 2074 nil))) #s(yas--exit 2074 nil) 44 nil #s(yas--field 1 2067 2073 nil nil nil t #s(yas--exit 2074 nil)) nil nil)) (2062 . 2068) (#("Xlib($1)$0" 0 10 (fontified nil)) . 2062) (2062 . 2072) (#("Xlib(…)" 0 7 (fontified nil)) . -2062) (2062 . 2069)) nil (26050 13728 583962 556000) 0 nil])
([nil nil ((2067 . 2073)) nil (26050 13728 583961 469000) 0 nil])
([nil nil ((apply yas--snippet-revive 2062 2074 #s(yas--snippet nil (#s(yas--field 1 2067 2073 nil nil nil t #s(yas--exit 2074 nil))) #s(yas--exit 2074 nil) 44 nil #s(yas--field 1 2067 2073 nil nil nil t #s(yas--exit 2074 nil)) nil nil))) nil (26050 13728 583961 14000) 0 nil])
([nil nil ((2074 . 2078)) nil (26050 13728 583960 521000) 0 nil])
([nil nil ((2077 . 2091) (#("d" 0 1 (fontified nil)) . 2077) (2077 . 2078) (#("display_handle" 0 14 (fontified nil)) . -2077) (2077 . 2091) (#("d" 0 1 (fontified t)) . -2077) (undo-tree-id2507 . -1) 2078) nil (26050 13728 583959 596000) 0 nil])
([nil nil ((2091 . 2092)) nil (26050 13728 583957 718000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -2091) (undo-tree-id2506 . -1) 2092) nil (26050 13728 583957 116000) 0 nil])
([nil nil ((2091 . 2094)) nil (26050 13728 583955 877000) 0 nil])
([nil nil ((2095 . 2099) (#("        " 0 8 (fontified nil)) . 2094) (2094 . 2102) (#("    " 0 4 (fontified nil)) . 2094) (undo-tree-id2505 . -4) (2093 . 2099)) nil (26050 13728 583955 96000) 0 nil])
([nil nil ((2094 . 2102)) nil (26050 13728 583953 555000) 0 nil])
([nil nil ((2033 . 2037) (#("    " 0 4 (fontified nil)) . 2032) (2032 . 2036) (2032 . 2033)) nil (26050 13728 583952 877000) 0 nil])
([nil nil ((2037 . 2051)) nil (26050 13728 583952 17000) 0 nil])
([nil nil ((2051 . 2052)) nil (26050 13728 583951 502000) 0 nil])
([nil nil ((apply yas--snippet-revive 2051 2055 #s(yas--snippet nil nil #s(yas--exit 2055 nil) 45 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2055 nil) 45 nil nil nil nil)) (2051 . 2055) (#("None$0" 0 6 (fontified nil)) . 2051) (2051 . 2057) (#("N" 0 1 (fontified nil)) . 2051) (2051 . 2052) (#("None" 0 4 (fontified nil)) . -2051) (2051 . 2055) (#("N" 0 1 (face font-lock-type-face fontified t)) . -2051) (undo-tree-id2504 . -1) 2052) nil (26050 13728 583950 195000) 0 nil])
([nil nil ((2055 . 2056)) nil (26050 13728 583947 886000) 0 nil])
([nil nil ((2056 . 2061)) nil (26050 13728 583947 438000) 0 nil])
([nil nil ((2061 . 2071)) nil (26050 13728 583946 996000) 0 nil])
([nil nil ((#("window" 0 6 (face font-lock-variable-name-face fontified t)) . -2065) (undo-tree-id2503 . -6) 2071) nil (26050 13728 583946 363000) 0 nil])
([nil nil ((2041 . 2045)) nil (26050 13728 583944 750000) 0 nil])
([nil nil ((2069 . 2083)) nil (26050 13728 583944 131000) 0 nil])
([nil nil ((apply yas--snippet-revive 2082 2086 #s(yas--snippet nil nil #s(yas--exit 2086 nil) 46 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2086 nil) 46 nil nil nil nil)) (2082 . 2086) (#("None$0" 0 6 (fontified nil)) . 2082) (2082 . 2088) (#("N" 0 1 (fontified nil)) . 2082) (2082 . 2083) (#("None" 0 4 (fontified nil)) . -2082) (2082 . 2086) (#("N" 0 1 (face font-lock-type-face fontified t)) . -2082) (undo-tree-id2500 . -1) (undo-tree-id2501 . -1) (undo-tree-id2502 . -1) 2083) nil (26050 13728 583941 606000) 0 nil])
([nil nil ((2086 . 2087)) nil (26050 13728 583929 831000) 0 nil])
([nil nil ((2157 . 2160) (t 26050 13728 597324 204000)) nil (26050 13764 14291 682000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -2157) (undo-tree-id2633 . -1) (undo-tree-id2634 . -1) (undo-tree-id2635 . -1) (undo-tree-id2636 . -1) (undo-tree-id2637 . -1) (undo-tree-id2638 . -1) (undo-tree-id2639 . -1) (undo-tree-id2640 . -1) (undo-tree-id2641 . -1) (undo-tree-id2642 . -1) (undo-tree-id2643 . -1) (undo-tree-id2644 . -1) (#("e" 0 1 (fontified t)) . -2158) (undo-tree-id2645 . -1) (undo-tree-id2646 . -1) (undo-tree-id2647 . -1) (undo-tree-id2648 . -1) (undo-tree-id2649 . -1) (undo-tree-id2650 . -1) (undo-tree-id2651 . -1) (undo-tree-id2652 . -1) (undo-tree-id2653 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -2159) (undo-tree-id2654 . -1) (undo-tree-id2655 . -1) (undo-tree-id2656 . -1) (undo-tree-id2657 . -1) (undo-tree-id2658 . -1) 2160) nil (26050 13764 14290 0) 0 nil])
([nil nil ((2041 . 2045)) nil (26050 13764 14274 933000) 0 nil])
([nil nil ((2073 . 2077)) nil (26050 13764 14274 459000) 0 nil])
([nil nil ((2165 . 2166)) nil (26050 13764 14273 957000) 0 nil])
([nil nil ((2165 . 2176) (#("x" 0 1 (fontified nil)) . 2165) (2165 . 2166) (#("x11_display" 0 11 (fontified nil)) . -2165) (2165 . 2176) (#("x" 0 1 (fontified t)) . -2165) (undo-tree-id2629 . -1) (undo-tree-id2630 . -1) (undo-tree-id2631 . -1) (undo-tree-id2632 . -1) 2166) nil (26050 13764 14272 910000) 0 nil])
([nil nil ((2176 . 2180)) nil (26050 13764 14269 263000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2184 2198 nil nil nil t #s(yas--exit 2199 nil))) #s(yas--exit 2199 nil) 47 nil #s(yas--field 1 2184 2198 nil nil nil t #s(yas--exit 2199 nil)) nil nil)) (2179 . 2187) (#("Some(${1:()})$0" 0 15 (fontified nil)) . 2179) (2179 . 2194) (#("S" 0 1 (fontified nil)) . 2179) (2179 . 2180) (#("Some(…)" 0 7 (fontified nil)) . -2179) (2179 . 2186) (#("S" 0 1 (face font-lock-type-face fontified t)) . -2179) (undo-tree-id2624 . -1) (undo-tree-id2625 . -1) (undo-tree-id2626 . -1) (undo-tree-id2627 . -1) (undo-tree-id2628 . -1) 2180) nil (26050 13764 14268 15000) 0 nil])
([nil nil ((#("()" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 2185) (undo-tree-id2623 . -2) (2184 . 2185)) nil (26050 13764 14263 685000) 0 nil])
([nil nil ((2184 . 2190) (#("h" 0 1 (fontified nil)) . 2184) (undo-tree-id2615 . -1) (2184 . 2185) (#("handle" 0 6 (fontified nil)) . -2184) (undo-tree-id2616 . -6) (2184 . 2190) (#("h" 0 1 (fontified t)) . -2184) (undo-tree-id2617 . -1) (undo-tree-id2618 . -1) (undo-tree-id2619 . -1) (undo-tree-id2620 . -1) (undo-tree-id2621 . -1) (undo-tree-id2622 . -1) 2185) nil (26050 13764 14261 994000) 0 nil])
([nil nil ((2190 . 2191)) nil (26050 13764 14256 609000) 0 nil])
([nil nil ((2191 . 2198) (#("display" 0 7 (fontified nil)) . -2191) (undo-tree-id2614 . -7) (2191 . 2198)) nil (26050 13764 14255 880000) 0 nil])
([nil nil ((apply yas--snippet-revive 2179 2199 #s(yas--snippet nil (#s(yas--field 1 2184 2198 nil nil nil t #s(yas--exit 2199 nil))) #s(yas--exit 2199 nil) 47 nil #s(yas--field 1 2184 2198 nil nil nil t #s(yas--exit 2199 nil)) nil nil))) nil (26050 13764 14254 483000) 0 nil])
([nil nil ((#("display)" 0 7 (fontified t) 7 8 (face (rainbow-delimiters-depth-3-face) fontified t)) . -2191) (undo-tree-id2593 . -8) (undo-tree-id2594 . -8) (undo-tree-id2595 . -8) (undo-tree-id2596 . -8) (undo-tree-id2597 . -7) (undo-tree-id2598 . -7) (undo-tree-id2599 . -7) (undo-tree-id2600 . -7) (undo-tree-id2601 . -7) (undo-tree-id2602 . -7) (undo-tree-id2603 . -7) (undo-tree-id2604 . -7) (undo-tree-id2605 . -7) (undo-tree-id2606 . -7) (undo-tree-id2607 . -8) (undo-tree-id2608 . -8) (undo-tree-id2609 . -8) (undo-tree-id2610 . -8) (undo-tree-id2611 . -8) (undo-tree-id2612 . -8) (undo-tree-id2613 . -8) 2199) nil (26050 13764 14252 990000) 0 nil])
([nil nil ((#("handle." 0 7 (fontified t)) . -2184) (undo-tree-id2561 . -7) (undo-tree-id2562 . -7) (undo-tree-id2563 . -7) (undo-tree-id2564 . -7) (undo-tree-id2565 . -6) (undo-tree-id2566 . -6) (undo-tree-id2567 . -7) (undo-tree-id2568 . -7) (undo-tree-id2569 . -7) (undo-tree-id2570 . -7) (undo-tree-id2571 . -7) (undo-tree-id2572 . -7) (undo-tree-id2573 . -7) (undo-tree-id2574 . -7) (undo-tree-id2575 . -7) (undo-tree-id2576 . -7) (undo-tree-id2577 . -7) (undo-tree-id2578 . -7) (undo-tree-id2579 . -7) (undo-tree-id2580 . -7) (undo-tree-id2581 . -7) (undo-tree-id2582 . -7) (undo-tree-id2583 . -7) (undo-tree-id2584 . -7) (undo-tree-id2585 . -7) (undo-tree-id2586 . -7) (undo-tree-id2587 . -7) (undo-tree-id2588 . -7) (undo-tree-id2589 . -7) (undo-tree-id2590 . -7) (undo-tree-id2591 . -7) (undo-tree-id2592 . -7) 2191) nil (26050 13764 14240 731000) 0 nil])
([nil nil ((#("Some(" 0 4 (face font-lock-type-face fontified t) 4 5 (face (rainbow-delimiters-depth-3-face) fontified t)) . -2179) (undo-tree-id2518 . -5) (undo-tree-id2519 . -5) (undo-tree-id2520 . -5) (undo-tree-id2521 . -5) (undo-tree-id2522 . -5) (undo-tree-id2523 . -5) (undo-tree-id2524 . -5) (undo-tree-id2525 . -5) (undo-tree-id2526 . -5) (undo-tree-id2527 . -5) (undo-tree-id2528 . -5) (undo-tree-id2529 . -5) (undo-tree-id2530 . -5) (undo-tree-id2531 . -5) (undo-tree-id2532 . -5) (undo-tree-id2533 . -5) (undo-tree-id2534 . -5) (undo-tree-id2535 . -5) (undo-tree-id2536 . -5) (undo-tree-id2537 . -5) (undo-tree-id2538 . -5) (undo-tree-id2539 . -5) (undo-tree-id2540 . -5) (undo-tree-id2541 . -5) (undo-tree-id2542 . -5) (undo-tree-id2543 . -5) (undo-tree-id2544 . -5) (undo-tree-id2545 . -5) (undo-tree-id2546 . -5) (undo-tree-id2547 . -5) (undo-tree-id2548 . -5) (undo-tree-id2549 . -5) (undo-tree-id2550 . -5) (undo-tree-id2551 . -5) (undo-tree-id2552 . -5) (undo-tree-id2553 . -5) (undo-tree-id2554 . -5) (undo-tree-id2555 . -5) (undo-tree-id2556 . -5) (undo-tree-id2557 . -5) (undo-tree-id2558 . -5) (undo-tree-id2559 . -5) (undo-tree-id2560 . -5) 2184) nil (26050 13764 14221 437000) 0 nil])
([nil nil ((2179 . 2180)) nil (26050 13764 14195 881000) 0 nil])
([nil nil ((2179 . 2185) (#("h" 0 1 (fontified nil)) . 2179) (2179 . 2180) (#("handle" 0 6 (fontified nil)) . -2179) (2179 . 2185) (#("h" 0 1 (fontified t)) . -2179) (undo-tree-id2514 . -1) (undo-tree-id2515 . -1) (undo-tree-id2516 . -1) (undo-tree-id2517 . -1) 2180) nil (26050 13764 14194 635000) 0 nil])
([nil nil ((2185 . 2186)) nil (26050 13764 14185 372000) 0 nil])
([nil nil ((2186 . 2193) (#("display" 0 7 (fontified nil)) . -2186) (2186 . 2193)) nil (26050 13764 14183 794000) 0 nil])
([nil nil ((2193 . 2194)) nil (26050 13764 14179 658000) 0 nil])
([nil nil ((2154 . 2157) (t 26050 13764 60659 715000)) nil (26050 13772 206891 937000) 0 nil])
([nil nil ((apply yas--snippet-revive 2155 2163 #s(yas--snippet nil nil #s(yas--exit 2163 nil) 48 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2163 nil) 48 nil nil nil nil)) (2155 . 2163) (#("as_raw()$0" 0 10 (fontified nil)) . 2155) (2155 . 2165) (#("ra" 0 2 (fontified nil)) . 2155) (2155 . 2157) (#("as_raw()" 0 8 (fontified nil)) . -2155) (2155 . 2163) (#("ra" 0 2 (fontified t)) . -2155) (undo-tree-id2659 . -2) (undo-tree-id2660 . -1) (undo-tree-id2661 . -1) (undo-tree-id2662 . -1) (undo-tree-id2663 . -1) (undo-tree-id2664 . -1) (undo-tree-id2665 . -2) (undo-tree-id2666 . -2) (undo-tree-id2667 . -2) (undo-tree-id2668 . -2) (undo-tree-id2669 . -2) 2157) nil (26050 13772 206887 474000) 0 nil])
([nil nil ((2209 . 2214) (t 26050 13772 250660 217000)) nil (26050 13804 563669 467000) 0 nil])
([nil nil ((2214 . 2218)) nil (26050 13804 563668 747000) 0 nil])
([nil nil ((apply yas--snippet-revive 2217 2220 #s(yas--snippet nil nil nil 49 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 49 nil nil nil nil)) (2217 . 2220) (#("let" 0 3 (fontified nil)) . 2217) (2217 . 2220) (#("l" 0 1 (fontified nil)) . 2217) (2217 . 2218) (#("let" 0 3 (fontified nil)) . -2217) (2217 . 2220) (#("l" 0 1 (fontified t)) . -2217) (undo-tree-id2744 . -1) (undo-tree-id2745 . -1) (undo-tree-id2746 . -1) (undo-tree-id2747 . -1) (undo-tree-id2748 . -1) (undo-tree-id2749 . -1) 2218) nil (26050 13804 563667 520000) 0 nil])
([nil nil ((2220 . 2225)) nil (26050 13804 563662 758000) 0 nil])
([nil nil ((1846 . 1863) (2221 . 2221) (2221 . 2236) (#("RawW" 0 4 (fontified nil)) . 2221) (2221 . 2225) (#("RawWindowHandle (use winit::raw_window_handle::RawWindowHandle)" 0 63 (fontified nil)) . -2221) (2221 . 2284) (#("RawW" 0 4 (face font-lock-type-face fontified t)) . -2221) (undo-tree-id2726 . -4) (undo-tree-id2727 . -1) (undo-tree-id2728 . -1) (undo-tree-id2729 . -1) (undo-tree-id2730 . -1) (undo-tree-id2731 . -2) (undo-tree-id2732 . -2) (undo-tree-id2733 . -2) (undo-tree-id2734 . -3) (undo-tree-id2735 . -3) (undo-tree-id2736 . -3) (undo-tree-id2737 . -3) (undo-tree-id2738 . -4) (undo-tree-id2739 . -4) (undo-tree-id2740 . -4) (undo-tree-id2741 . -4) (undo-tree-id2742 . -4) (undo-tree-id2743 . -4) 2225) nil (26050 13804 563661 403000) 0 nil])
([nil nil ((2253 . 2256)) nil (26050 13804 563649 309000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2260 2266 nil nil nil t #s(yas--exit 2267 nil))) #s(yas--exit 2267 nil) 50 nil #s(yas--field 1 2260 2266 nil nil nil t #s(yas--exit 2267 nil)) nil nil)) (2255 . 2261) (#("Xlib($1)$0" 0 10 (fontified nil)) . 2255) (2255 . 2265) (#("X" 0 1 (fontified nil)) . 2255) (2255 . 2256) (#("Xlib(…)" 0 7 (fontified nil)) . -2255) (2255 . 2262) (#("X" 0 1 (face font-lock-type-face fontified t)) . -2255) (undo-tree-id2719 . -1) (undo-tree-id2720 . -1) (undo-tree-id2721 . -1) (undo-tree-id2722 . -1) (undo-tree-id2723 . -1) (undo-tree-id2724 . -1) (undo-tree-id2725 . -1) 2256) nil (26050 13804 563648 2000) 0 nil])
([nil nil ((2260 . 2266)) nil (26050 13804 563642 866000) 0 nil])
([nil nil ((apply yas--snippet-revive 2255 2267 #s(yas--snippet nil (#s(yas--field 1 2260 2266 nil nil nil t #s(yas--exit 2267 nil))) #s(yas--exit 2267 nil) 50 nil #s(yas--field 1 2260 2266 nil nil nil t #s(yas--exit 2267 nil)) nil nil))) nil (26050 13804 563642 373000) 0 nil])
([nil nil ((2267 . 2271)) nil (26050 13804 563641 814000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -2270) (undo-tree-id2714 . -1) (undo-tree-id2715 . -1) (undo-tree-id2716 . -1) (undo-tree-id2717 . -1) (undo-tree-id2718 . -1) 2271) nil (26050 13804 563640 990000) 0 nil])
([nil nil ((2270 . 2273)) nil (26050 13804 563635 731000) 0 nil])
([nil nil ((2270 . 2283) (#("win" 0 3 (fontified nil)) . 2270) (2270 . 2273) (#("window_handle" 0 13 (fontified nil)) . -2270) (2270 . 2283) (#("win" 0 3 (fontified t)) . -2270) (undo-tree-id2704 . -3) (undo-tree-id2705 . -1) (undo-tree-id2706 . -1) (undo-tree-id2707 . -2) (undo-tree-id2708 . -2) (undo-tree-id2709 . -3) (undo-tree-id2710 . -3) (undo-tree-id2711 . -3) (undo-tree-id2712 . -3) (undo-tree-id2713 . -3) 2273) nil (26050 13804 563634 620000) 0 nil])
([nil nil ((2283 . 2285)) nil (26050 13804 563627 578000) 0 nil])
([nil nil ((apply yas--snippet-revive 2284 2292 #s(yas--snippet nil nil #s(yas--exit 2292 nil) 51 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2292 nil) 51 nil nil nil nil)) (2284 . 2292) (#("as_raw()$0" 0 10 (fontified nil)) . 2284) (2284 . 2294) (#("a" 0 1 (fontified nil)) . 2284) (2284 . 2285) (#("as_raw()" 0 8 (fontified nil)) . -2284) (2284 . 2292) (#("a" 0 1 (fontified t)) . -2284) (undo-tree-id2699 . -1) (undo-tree-id2700 . -1) (undo-tree-id2701 . -1) (undo-tree-id2702 . -1) (undo-tree-id2703 . -1) 2285) nil (26050 13804 563626 425000) 0 nil])
([nil nil ((2292 . 2295)) nil (26050 13804 563621 871000) 0 nil])
([nil nil ((2296 . 2300) (#("        " 0 8 (fontified nil)) . 2295) (2295 . 2303) (#("    " 0 4 (fontified nil)) . 2295) (undo-tree-id2696 . -4) (undo-tree-id2697 . -4) (undo-tree-id2698 . -4) (2294 . 2300)) nil (26050 13804 563621 30000) 0 nil])
([nil nil ((2295 . 2303)) nil (26050 13804 563618 434000) 0 nil])
([nil nil ((2303 . 2304)) nil (26050 13804 563617 984000) 0 nil])
([nil nil ((2303 . 2313) (#("x" 0 1 (fontified nil)) . 2303) (2303 . 2304) (#("x11_window" 0 10 (fontified nil)) . -2303) (2303 . 2313) (#("x" 0 1 (fontified t)) . -2303) (undo-tree-id2692 . -1) (undo-tree-id2693 . -1) (undo-tree-id2694 . -1) (undo-tree-id2695 . -1) 2304) nil (26050 13804 563616 973000) 0 nil])
([nil nil ((2313 . 2317)) nil (26050 13804 563613 224000) 0 nil])
([nil nil ((2316 . 2322) (#("h" 0 1 (fontified nil)) . 2316) (2316 . 2317) (#("handle" 0 6 (fontified nil)) . -2316) (2316 . 2322) (#("h" 0 1 (fontified t)) . -2316) (undo-tree-id2687 . -1) (undo-tree-id2688 . -1) (undo-tree-id2689 . -1) (undo-tree-id2690 . -1) (undo-tree-id2691 . -1) 2317) nil (26050 13804 563612 155000) 0 nil])
([nil nil ((2322 . 2325)) nil (26050 13804 563608 105000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t)) . -2324) (undo-tree-id2682 . -1) (undo-tree-id2683 . -1) (undo-tree-id2684 . -1) (undo-tree-id2685 . -1) (undo-tree-id2686 . -1) 2325) nil (26050 13804 563607 240000) 0 nil])
([nil nil ((2323 . 2329) (#("w" 0 1 (fontified nil)) . 2323) (2323 . 2324) (#("window" 0 6 (fontified nil)) . -2323) (2323 . 2329) (#("w" 0 1 (fontified t)) . -2323) (undo-tree-id2670 . -1) (undo-tree-id2671 . -1) (undo-tree-id2672 . -1) (undo-tree-id2673 . -1) (undo-tree-id2674 . -1) (undo-tree-id2675 . -1) (undo-tree-id2676 . -1) (undo-tree-id2677 . -1) (undo-tree-id2678 . -1) (undo-tree-id2679 . -1) (undo-tree-id2680 . -1) (undo-tree-id2681 . -1) 2324) nil (26050 13804 563601 986000) 0 nil])
([nil nil ((2329 . 2330)) nil (26050 13804 563586 371000) 0 nil])
([nil nil ((2316 . 2318) (t 26050 13804 577328 869000)) nil (26050 13823 632820 767000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-type-face fontified t)) . -2317) (undo-tree-id2851 . -1) (undo-tree-id2852 . -1) (undo-tree-id2853 . -1) (undo-tree-id2854 . -1) 2318) nil (26050 13823 632819 939000) 0 nil])
([nil nil ((2317 . 2318)) nil (26050 13823 632817 264000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2321 2323 nil nil nil nil #s(yas--exit 2324 nil))) #s(yas--exit 2324 nil) 52 nil #s(yas--field 1 2321 2323 nil nil nil nil #s(yas--exit 2324 nil)) nil nil)) (2316 . 2324) (#("Some(${1:()})$0" 0 15 (fontified nil)) . 2316) (2316 . 2331) (#("Sohandle" 0 2 (fontified nil) 2 8 (face font-lock-type-face fontified nil)) . 2316) (undo-tree-id2833 . 6) (2316 . 2318) (#("Some(…)" 0 7 (fontified nil)) . -2316) (2316 . 2323) (#("So" 0 2 (face font-lock-type-face fontified t)) . -2316) (undo-tree-id2834 . -2) (undo-tree-id2835 . -2) (undo-tree-id2836 . -1) (undo-tree-id2837 . -1) (undo-tree-id2838 . -1) (undo-tree-id2839 . -1) (undo-tree-id2840 . -1) (undo-tree-id2841 . -1) (undo-tree-id2842 . -1) (undo-tree-id2843 . -2) (undo-tree-id2844 . -2) (undo-tree-id2845 . -2) (undo-tree-id2846 . -2) (undo-tree-id2847 . -2) (undo-tree-id2848 . -2) (undo-tree-id2849 . -2) (undo-tree-id2850 . -2) 2318) nil (26050 13823 632815 465000) 0 nil])
([nil nil ((apply yas--snippet-revive 2316 2324 #s(yas--snippet nil (#s(yas--field 1 2321 2323 nil nil nil nil #s(yas--exit 2324 nil))) #s(yas--exit 2324 nil) 52 nil #s(yas--field 1 2321 2323 nil nil nil nil #s(yas--exit 2324 nil)) nil nil))) nil (26050 13823 632802 591000) 0 nil])
([nil nil ((#("window" 0 6 (fontified t)) . -2325) (undo-tree-id2819 . -6) (undo-tree-id2820 . -6) (undo-tree-id2821 . -6) (undo-tree-id2822 . -6) (undo-tree-id2823 . -6) (undo-tree-id2824 . -6) (undo-tree-id2825 . -6) (undo-tree-id2826 . -6) (undo-tree-id2827 . -6) (undo-tree-id2828 . -6) (undo-tree-id2829 . -6) (undo-tree-id2830 . -6) (undo-tree-id2831 . -6) (undo-tree-id2832 . -6) 2331) nil (26050 13823 632801 515000) 0 nil])
([nil nil ((#("Some(())." 0 4 (face font-lock-type-face fontified t) 4 5 (face (rainbow-delimiters-depth-3-face) fontified t) 5 6 (face (rainbow-delimiters-depth-4-face) fontified t) 6 7 (face (rainbow-delimiters-depth-4-face) fontified t) 7 8 (face (rainbow-delimiters-depth-3-face) fontified t) 8 9 (fontified t)) . -2316) (undo-tree-id2775 . -9) (undo-tree-id2776 . -9) (undo-tree-id2777 . -9) (undo-tree-id2778 . -9) (undo-tree-id2779 . -9) (undo-tree-id2780 . -9) (undo-tree-id2781 . -9) (undo-tree-id2782 . -9) (undo-tree-id2783 . -9) (undo-tree-id2784 . -9) (undo-tree-id2785 . -9) (undo-tree-id2786 . -9) (undo-tree-id2787 . -9) (undo-tree-id2788 . -9) (undo-tree-id2789 . -9) (undo-tree-id2790 . -9) (undo-tree-id2791 . -9) (undo-tree-id2792 . -9) (undo-tree-id2793 . -9) (undo-tree-id2794 . -9) (undo-tree-id2795 . -9) (undo-tree-id2796 . -8) (undo-tree-id2797 . -8) (undo-tree-id2798 . -5) (undo-tree-id2799 . -5) (undo-tree-id2800 . -5) (undo-tree-id2801 . -5) (undo-tree-id2802 . -5) (undo-tree-id2803 . -5) (undo-tree-id2804 . -5) (undo-tree-id2805 . -5) (undo-tree-id2806 . -5) (undo-tree-id2807 . -5) (undo-tree-id2808 . -5) (undo-tree-id2809 . -9) (undo-tree-id2810 . -9) (undo-tree-id2811 . -9) (undo-tree-id2812 . -9) (undo-tree-id2813 . -9) (undo-tree-id2814 . -9) (undo-tree-id2815 . -9) (undo-tree-id2816 . -9) (undo-tree-id2817 . -9) (undo-tree-id2818 . -9) 2325) nil (26050 13823 632791 912000) 0 nil])
([nil nil ((2316 . 2317)) nil (26050 13823 632765 358000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2321 2334 nil nil nil t #s(yas--exit 2335 nil))) #s(yas--exit 2335 nil) 53 nil #s(yas--field 1 2321 2334 nil nil nil t #s(yas--exit 2335 nil)) nil nil)) (2316 . 2324) (#("Some(${1:()})$0" 0 15 (fontified nil)) . 2316) (2316 . 2331) (#("S" 0 1 (fontified nil)) . 2316) (2316 . 2317) (#("Some(…)" 0 7 (fontified nil)) . -2316) (2316 . 2323) (#("S" 0 1 (face font-lock-type-face fontified t)) . -2316) (undo-tree-id2770 . -1) (undo-tree-id2771 . -1) (undo-tree-id2772 . -1) (undo-tree-id2773 . -1) (undo-tree-id2774 . -1) 2317) nil (26050 13823 632763 888000) 0 nil])
([nil nil ((#("()" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 2322) (undo-tree-id2769 . -2) (2321 . 2322)) nil (26050 13823 632758 42000) 0 nil])
([nil nil ((2321 . 2327) (#("h" 0 1 (fontified nil)) . 2321) (undo-tree-id2760 . -1) (2321 . 2322) (#("handle" 0 6 (fontified nil)) . -2321) (undo-tree-id2761 . -6) (2321 . 2327) (#("h" 0 1 (fontified t)) . -2321) (undo-tree-id2762 . -1) (undo-tree-id2763 . -1) (undo-tree-id2764 . -1) (undo-tree-id2765 . -1) (undo-tree-id2766 . -1) (undo-tree-id2767 . -1) (undo-tree-id2768 . -1) 2322) nil (26050 13823 632081 826000) 0 nil])
([nil nil ((2327 . 2329)) nil (26050 13823 632075 92000) 0 nil])
([nil nil ((2328 . 2334) (#("w" 0 1 (fontified nil)) . 2328) (undo-tree-id2750 . -1) (2328 . 2329) (#("window" 0 6 (fontified nil)) . -2328) (undo-tree-id2751 . -6) (2328 . 2334) (#("w" 0 1 (fontified t)) . -2328) (undo-tree-id2752 . -1) (undo-tree-id2753 . -1) (undo-tree-id2754 . -1) (undo-tree-id2755 . -1) (undo-tree-id2756 . -1) (undo-tree-id2757 . -1) (undo-tree-id2758 . -1) (undo-tree-id2759 . -1) 2329) nil (26050 13823 632070 778000) 0 nil])
([nil nil ((apply yas--snippet-revive 2316 2335 #s(yas--snippet nil (#s(yas--field 1 2321 2334 nil nil nil t #s(yas--exit 2335 nil))) #s(yas--exit 2335 nil) 53 nil #s(yas--field 1 2321 2334 nil nil nil t #s(yas--exit 2335 nil)) nil nil))) nil (26050 13841 568626 677000) 0 nil])
([nil nil ((#("as" 0 2 (face font-lock-keyword-face fontified t)) . -2676) (undo-tree-id2893 . -2) (undo-tree-id2894 . -2) (undo-tree-id2895 . -2) (undo-tree-id2896 . -2) (undo-tree-id2897 . -2) (undo-tree-id2898 . -2) (undo-tree-id2899 . -2) (undo-tree-id2900 . -2) (undo-tree-id2901 . -2) (undo-tree-id2902 . -2) 2678 (t 26050 13823 647330 39000)) nil (26050 13841 568625 745000) 0 nil])
([nil nil ((#("window." 0 7 (fontified t)) . -2669) (undo-tree-id2880 . -7) (undo-tree-id2881 . -7) (undo-tree-id2882 . -7) (undo-tree-id2883 . -7) (undo-tree-id2884 . -7) (undo-tree-id2885 . -7) (undo-tree-id2886 . -7) (undo-tree-id2887 . -7) (undo-tree-id2888 . -7) (undo-tree-id2889 . -7) (undo-tree-id2890 . -7) (undo-tree-id2891 . -7) (undo-tree-id2892 . -7) 2676) nil (26050 13841 568619 546000) 0 nil])
([nil nil ((#("x11_" 0 4 (fontified t)) . -2665) (undo-tree-id2866 . -4) (undo-tree-id2867 . -4) (undo-tree-id2868 . -4) (undo-tree-id2869 . -4) (undo-tree-id2870 . -4) (undo-tree-id2871 . -4) (undo-tree-id2872 . -4) (undo-tree-id2873 . -4) (undo-tree-id2874 . -4) (undo-tree-id2875 . -4) (undo-tree-id2876 . -4) (undo-tree-id2877 . -4) (undo-tree-id2878 . -4) (undo-tree-id2879 . -4) 2669) nil (26050 13841 568611 825000) 0 nil])
([nil nil ((2665 . 2666)) nil (26050 13841 568603 140000) 0 nil])
([nil nil ((2665 . 2676) (#("x" 0 1 (fontified nil)) . 2665) (2665 . 2666) (#("x11_display" 0 11 (fontified nil)) . -2665) (2665 . 2676) (#("x" 0 1 (fontified t)) . -2665) (undo-tree-id2861 . -1) (undo-tree-id2862 . -1) (undo-tree-id2863 . -1) (undo-tree-id2864 . -1) (undo-tree-id2865 . -1) 2666) nil (26050 13841 568601 853000) 0 nil])
([nil nil ((2676 . 2678)) nil (26050 13846 383603 872000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -2677) (undo-tree-id2965 . -1) (undo-tree-id2966 . -1) (undo-tree-id2967 . -1) (undo-tree-id2968 . -1) (undo-tree-id2969 . -1) (undo-tree-id2970 . -1) (undo-tree-id2971 . -1) (undo-tree-id2972 . -1) (undo-tree-id2973 . -1) 2678) nil (26050 13849 49174 58000) 0 nil] [nil nil ((apply yas--snippet-revive 2677 2685 #s(yas--snippet nil nil #s(yas--exit #<marker at 2647 in platforms.rs> nil) 54 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 2647 in platforms.rs> nil) 54 nil nil nil nil)) (2677 . 2685) (#("unwrap()$0" 0 10 (fontified nil)) . 2677) (2677 . 2687) (#("u" 0 1 (fontified nil)) . 2677) (2677 . 2678) (#("unwrap()" 0 8 (fontified nil)) . -2677) (2677 . 2685) (#("u" 0 1 (fontified t)) . -2677) (undo-tree-id2855 . -1) (undo-tree-id2856 . -1) (undo-tree-id2857 . -1) (undo-tree-id2858 . -1) (undo-tree-id2859 . -1) (undo-tree-id2860 . -1) 2678) ((2677 . 2678) (#("unwrap()" 0 8 (fontified nil)) . 2677) (2677 . 2685) (#("u" 0 1 (fontified nil)) . 2677) (2677 . 2678) (#("unwrap()$0" 0 10 (fontified nil)) . 2677) (2677 . 2687) (#("unwrap()" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-3-face) fontified t) 7 8 (face (rainbow-delimiters-depth-3-face) fontified t)) . 2677) (undo-tree-id2903 . -8) (undo-tree-id2904 . -8) (undo-tree-id2905 . -8) (undo-tree-id2906 . -8) (undo-tree-id2907 . -8) (undo-tree-id2908 . -8) (undo-tree-id2909 . -8) (undo-tree-id2910 . -8) (undo-tree-id2911 . -8) (undo-tree-id2912 . -8) (undo-tree-id2913 . -8) (undo-tree-id2914 . -8) (undo-tree-id2915 . -8) (t 26050 13841 613997 808000)) (26050 13841 568592 803000) 0 nil])
([nil nil ((#("display." 0 8 (fontified t)) . -2669) (undo-tree-id2943 . -8) (undo-tree-id2944 . -8) (undo-tree-id2945 . -8) (undo-tree-id2946 . -8) (undo-tree-id2947 . -8) (undo-tree-id2948 . -8) (undo-tree-id2949 . -8) (undo-tree-id2950 . -8) (undo-tree-id2951 . -8) (undo-tree-id2952 . -8) (undo-tree-id2953 . -8) (undo-tree-id2954 . -8) (undo-tree-id2955 . -8) (undo-tree-id2956 . -8) (undo-tree-id2957 . -8) (undo-tree-id2958 . -8) (undo-tree-id2959 . -8) (undo-tree-id2960 . -8) (undo-tree-id2961 . -8) (undo-tree-id2962 . -8) (undo-tree-id2963 . -8) (undo-tree-id2964 . -8) 2677) nil (26050 13849 49165 868000) 0 nil])
nil
([nil nil ((2669 . 2670)) nil (26050 13849 49153 215000) 0 nil])
([nil nil ((2665 . 2675) (#("x11_w" 0 5 (fontified nil)) . 2665) (2665 . 2670) (#("x11_window" 0 10 (fontified nil)) . -2665) (2665 . 2675) (#("x11_w" 0 5 (fontified t)) . -2665) (undo-tree-id2916 . -4) (undo-tree-id2917 . -5) (undo-tree-id2918 . -4) (undo-tree-id2919 . -4) (undo-tree-id2920 . -4) (undo-tree-id2921 . -4) (undo-tree-id2922 . -4) (undo-tree-id2923 . -4) (undo-tree-id2924 . -4) (undo-tree-id2925 . -4) (undo-tree-id2926 . -4) (undo-tree-id2927 . -4) (undo-tree-id2928 . -4) (undo-tree-id2929 . -4) (undo-tree-id2930 . -4) (undo-tree-id2931 . -4) (undo-tree-id2932 . -4) (undo-tree-id2933 . -4) (undo-tree-id2934 . -4) (undo-tree-id2935 . -4) (undo-tree-id2936 . -4) (undo-tree-id2937 . -4) (undo-tree-id2938 . -4) (undo-tree-id2939 . -5) (undo-tree-id2940 . -5) (undo-tree-id2941 . -5) (undo-tree-id2942 . -5) 2670) nil (26050 13849 49148 991000) 0 nil])
([nil nil ((2675 . 2677) (t 26050 13849 63998 265000)) nil (26050 13860 873719 782000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -2676) (undo-tree-id2986 . -1) (undo-tree-id2987 . -1) (undo-tree-id2988 . -1) (undo-tree-id2989 . -1) 2677) nil (26050 13860 873718 785000) 0 nil])
([nil nil ((2676 . 2677)) nil (26050 13860 873715 321000) 0 nil])
([nil nil ((apply yas--snippet-revive 2676 2684 #s(yas--snippet nil nil #s(yas--exit 2684 nil) 55 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2684 nil) 55 nil nil nil nil)) (2676 . 2684) (#("unwrap()$0" 0 10 (fontified nil)) . 2676) (2676 . 2686) (#("u" 0 1 (fontified nil)) . 2676) (2676 . 2677) (#("unwrap()" 0 8 (fontified nil)) . -2676) (2676 . 2684) (#("u" 0 1 (fontified t)) . -2676) (undo-tree-id2978 . -1) (undo-tree-id2979 . -1) (undo-tree-id2980 . -1) (undo-tree-id2981 . -1) (undo-tree-id2982 . -1) (undo-tree-id2983 . -1) (undo-tree-id2984 . -1) (undo-tree-id2985 . -1) 2677) nil (26050 13860 873713 714000) 0 nil])
([nil nil ((2724 . 2726)) nil (26050 13860 873706 127000) 0 nil])
([nil nil ((apply yas--snippet-revive 2725 2733 #s(yas--snippet nil nil #s(yas--exit 2733 nil) 56 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2733 nil) 56 nil nil nil nil)) (2725 . 2733) (#("unwrap()$0" 0 10 (fontified nil)) . 2725) (2725 . 2735) (#("u" 0 1 (fontified nil)) . 2725) (2725 . 2726) (#("unwrap()" 0 8 (fontified nil)) . -2725) (2725 . 2733) (#("u" 0 1 (fontified t)) . -2725) (undo-tree-id2974 . -1) (undo-tree-id2975 . -1) (undo-tree-id2976 . -1) (undo-tree-id2977 . -1) 2726) nil (26050 13860 873701 781000) 0 nil])
([nil nil ((2733 . 2734) (t 26050 13860 917332 326000)) nil (26050 13917 352291 110000) 0 nil])
([nil nil ((apply yas--snippet-revive 2734 2744 #s(yas--snippet nil nil #s(yas--exit 2744 nil) 57 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2744 nil) 57 nil nil nil nil)) (2734 . 2744) (#("to_owned()$0" 0 12 (fontified nil)) . 2734) (2734 . 2746) (#("to_owned() (as ToOwned)" 0 23 (fontified nil)) . -2734) (2734 . 2757)) nil (26050 13917 352285 633000) 0 nil])
([nil nil ((#("owned()" 0 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-3-face) fontified t) 6 7 (face (rainbow-delimiters-depth-3-face) fontified t)) . -2737) (undo-tree-id3056 . -7) (undo-tree-id3057 . -7) (undo-tree-id3058 . -7) (undo-tree-id3059 . -7) (undo-tree-id3060 . -7) (undo-tree-id3061 . -7) (undo-tree-id3062 . -7) (undo-tree-id3063 . -7) (undo-tree-id3064 . -7) (undo-tree-id3065 . -7) (undo-tree-id3066 . -7) (undo-tree-id3067 . -7) 2744 (t 26050 13917 357335 791000)) nil (26050 13922 86034 12000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2733) (undo-tree-id2990 . -1) (undo-tree-id2991 . -1) (undo-tree-id2992 . -1) (undo-tree-id2993 . -1) (undo-tree-id2994 . -1) (undo-tree-id2995 . -1) (undo-tree-id2996 . -1) (undo-tree-id2997 . -1) (undo-tree-id2998 . -1) (undo-tree-id2999 . -1) (undo-tree-id3000 . -1) (undo-tree-id3001 . -1) (undo-tree-id3002 . -1) (undo-tree-id3003 . -1) (undo-tree-id3004 . -1) (undo-tree-id3005 . -1) (undo-tree-id3006 . -1) (undo-tree-id3007 . -1) (#("t" 0 1 (fontified t)) . -2734) (undo-tree-id3008 . -1) (undo-tree-id3009 . -1) (undo-tree-id3010 . -1) (undo-tree-id3011 . -1) (undo-tree-id3012 . -1) (undo-tree-id3013 . -1) (undo-tree-id3014 . -1) (undo-tree-id3015 . -1) (undo-tree-id3016 . -1) (undo-tree-id3017 . -1) (undo-tree-id3018 . -1) (undo-tree-id3019 . -1) (undo-tree-id3020 . -1) (undo-tree-id3021 . -1) (undo-tree-id3022 . -1) (undo-tree-id3023 . -1) (undo-tree-id3024 . -1) (#("o" 0 1 (fontified t)) . -2735) (undo-tree-id3025 . -1) (undo-tree-id3026 . -1) (undo-tree-id3027 . -1) (undo-tree-id3028 . -1) (undo-tree-id3029 . -1) (undo-tree-id3030 . -1) (undo-tree-id3031 . -1) (undo-tree-id3032 . -1) (undo-tree-id3033 . -1) (undo-tree-id3034 . -1) (undo-tree-id3035 . -1) (undo-tree-id3036 . -1) (undo-tree-id3037 . -1) (undo-tree-id3038 . -1) (undo-tree-id3039 . -1) (undo-tree-id3040 . -1) (#("_" 0 1 (fontified t)) . -2736) (undo-tree-id3041 . -1) (undo-tree-id3042 . -1) (undo-tree-id3043 . -1) (undo-tree-id3044 . -1) (undo-tree-id3045 . -1) (undo-tree-id3046 . -1) (undo-tree-id3047 . -1) (undo-tree-id3048 . -1) (undo-tree-id3049 . -1) (undo-tree-id3050 . -1) (undo-tree-id3051 . -1) (undo-tree-id3052 . -1) (undo-tree-id3053 . -1) (undo-tree-id3054 . -1) (undo-tree-id3055 . -1) 2737) nil (26050 14027 258028 808000) 0 nil])
([nil nil ((2733 . 2735) (t 26050 14027 867342 575000)) nil (26050 14138 391456 44000) 0 nil] [nil nil ((#("Display" 0 7 (face font-lock-type-face fontified t)) . -2746) (undo-tree-id3080 . -2) (undo-tree-id3081 . -7) (undo-tree-id3082 . -7) (undo-tree-id3083 . -7) (undo-tree-id3084 . -7) (undo-tree-id3085 . -7) (undo-tree-id3086 . -7) (undo-tree-id3087 . -7) (undo-tree-id3088 . -7) (undo-tree-id3089 . -7) 2753 (t 26050 13922 100669 415000)) ((2746 . 2753)) (26050 14026 867060 817000) 0 nil])
([nil nil ((apply yas--snippet-revive 2734 2742 #s(yas--snippet nil nil #s(yas--exit 2742 nil) 58 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2742 nil) 58 nil nil nil nil)) (2734 . 2742) (#("as_ptr()$0" 0 10 (fontified nil)) . 2734) (2734 . 2744) (#("a" 0 1 (fontified nil)) . 2734) (2734 . 2735) (#("as_ptr()" 0 8 (fontified nil)) . -2734) (2734 . 2742) (#("a" 0 1 (fontified t)) . -2734) (undo-tree-id3109 . -1) (undo-tree-id3110 . -1) (undo-tree-id3111 . -1) (undo-tree-id3112 . -1) (undo-tree-id3113 . -1) (undo-tree-id3114 . -1) 2735) nil (26050 14138 391451 972000) 0 nil])
([nil nil ((#("vk::" 0 2 (face font-lock-constant-face fontified t) 2 4 (fontified t)) . -2742) (undo-tree-id3068 . -4) (undo-tree-id3069 . -4) (undo-tree-id3070 . -4) (undo-tree-id3071 . -2) (undo-tree-id3072 . -4) (undo-tree-id3073 . -4) (undo-tree-id3074 . -4) (undo-tree-id3075 . -4) (undo-tree-id3076 . -4) (undo-tree-id3077 . -4) (undo-tree-id3078 . -4) (undo-tree-id3079 . -4) 2746) ((2742 . 2746)) (26050 14026 592110 652000) 0 nil])
([nil nil ((#("ptr()" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-3-face) fontified t) 4 5 (face (rainbow-delimiters-depth-3-face) fontified t)) . -2737) (undo-tree-id3139 . -5) (undo-tree-id3140 . -5) (undo-tree-id3141 . -5) (undo-tree-id3142 . -5) (undo-tree-id3143 . -5) (undo-tree-id3144 . -5) (undo-tree-id3145 . -5) (undo-tree-id3146 . -5) (undo-tree-id3147 . -5) (undo-tree-id3148 . -5) (undo-tree-id3149 . -5) (undo-tree-id3150 . -5) (undo-tree-id3151 . -5) (undo-tree-id3152 . -5) (undo-tree-id3153 . -5) (undo-tree-id3154 . -5) (undo-tree-id3155 . -5) (undo-tree-id3156 . -5) (undo-tree-id3157 . -5) (undo-tree-id3158 . -5) (undo-tree-id3159 . -5) (undo-tree-id3160 . -5) (undo-tree-id3161 . -5) 2742 (t 26050 14138 407349 360000)) nil (26050 14191 281774 162000) 0 nil])
([nil nil ((2742 . 2743)) ((#("_" 0 1 (fontified t)) . 2742) (undo-tree-id3090 . -1) (undo-tree-id3091 . -1) (undo-tree-id3092 . -1) (undo-tree-id3093 . -1) (undo-tree-id3094 . -1) (undo-tree-id3095 . -1) (undo-tree-id3096 . -1) (undo-tree-id3097 . -1) (undo-tree-id3098 . -1) (undo-tree-id3099 . -1) (undo-tree-id3100 . -1) (undo-tree-id3101 . -1) (undo-tree-id3102 . -1) (undo-tree-id3103 . -1) (undo-tree-id3104 . -1) (undo-tree-id3105 . -1) (undo-tree-id3106 . -1) (undo-tree-id3107 . -1) (undo-tree-id3108 . -1) (t 26050 14020 334008 779000)) (26050 14020 318324 720000) 0 nil])
([nil nil ((#("as_" 0 3 (fontified t)) . -2734) (undo-tree-id3115 . -3) (undo-tree-id3116 . -3) (undo-tree-id3117 . -3) (undo-tree-id3118 . -3) (undo-tree-id3119 . -3) (undo-tree-id3120 . -3) (undo-tree-id3121 . -3) (undo-tree-id3122 . -3) (undo-tree-id3123 . -3) (undo-tree-id3124 . -3) (undo-tree-id3125 . -3) (undo-tree-id3126 . -3) (undo-tree-id3127 . -3) (undo-tree-id3128 . -3) (undo-tree-id3129 . -3) (undo-tree-id3130 . -3) (undo-tree-id3131 . -3) (undo-tree-id3132 . -3) (undo-tree-id3133 . -3) (undo-tree-id3134 . -3) (undo-tree-id3135 . -3) (undo-tree-id3136 . -3) (undo-tree-id3137 . -3) (undo-tree-id3138 . -3) 2737) nil (26050 14191 282185 17000) 0 nil])
nil
([nil nil ((2734 . 2736)) nil (26050 14194 754626 347000) 0 nil] [nil nil ((2734 . 2736)) ((#("ca" 0 2 (fontified t)) . 2734) (undo-tree-id3162 . -1) (undo-tree-id3163 . -2)) (26050 14191 281736 194000) 0 nil])
([nil nil ((apply yas--snippet-revive 2734 2742 #s(yas--snippet nil nil #s(yas--exit 2742 nil) 59 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2742 nil) 59 nil nil nil nil)) (2734 . 2742) (#("as_ptr()$0" 0 10 (fontified nil)) . 2734) (2734 . 2744) (#("as" 0 2 (fontified nil)) . 2734) (2734 . 2736) (#("as_ptr()" 0 8 (fontified nil)) . -2734) (2734 . 2742) (#("as" 0 2 (face font-lock-keyword-face fontified t)) . -2734) (undo-tree-id3164 . -2) (undo-tree-id3165 . -1) (undo-tree-id3166 . -1) (undo-tree-id3167 . -2) (undo-tree-id3168 . -2) (undo-tree-id3169 . -2) (undo-tree-id3170 . -2) 2736) nil (26050 14194 754621 921000) 0 nil])
nil
([nil nil ((#("WindowExtX11, " 0 12 (face font-lock-type-face fontified t) 12 14 (fontified t)) . -1742) (undo-tree-id3202 . -14) (undo-tree-id3203 . -14) (undo-tree-id3204 . -14) (undo-tree-id3205 . -14) (undo-tree-id3206 . -14) (undo-tree-id3207 . -14) (undo-tree-id3208 . -14) (undo-tree-id3209 . -14) (undo-tree-id3210 . -14) (undo-tree-id3211 . -14) (undo-tree-id3212 . -14) (undo-tree-id3213 . -14) (undo-tree-id3214 . -14) (undo-tree-id3215 . -14) 1756 (t 26050 14194 770686 153000)) nil (26050 14205 91556 327000) 0 nil])
([nil nil ((#("x11::" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t)) . -1737) (undo-tree-id3187 . -5) (undo-tree-id3188 . -5) (undo-tree-id3189 . -5) (undo-tree-id3190 . -5) (undo-tree-id3191 . -5) (undo-tree-id3192 . -5) (undo-tree-id3193 . -5) (undo-tree-id3194 . -5) (undo-tree-id3195 . -5) (undo-tree-id3196 . -5) (undo-tree-id3197 . -5) (undo-tree-id3198 . -5) (undo-tree-id3199 . -5) (undo-tree-id3200 . -5) (undo-tree-id3201 . -5) 1742) nil (26050 14205 91546 979000) 0 nil])
([nil nil ((#("platform::" 0 8 (face font-lock-constant-face fontified t) 8 10 (fontified t)) . -1727) (undo-tree-id3171 . -10) (undo-tree-id3172 . -10) (undo-tree-id3173 . -10) (undo-tree-id3174 . -10) (undo-tree-id3175 . -10) (undo-tree-id3176 . -10) (undo-tree-id3177 . -10) (undo-tree-id3178 . -10) (undo-tree-id3179 . -10) (undo-tree-id3180 . -10) (undo-tree-id3181 . -10) (undo-tree-id3182 . -10) (undo-tree-id3183 . -10) (undo-tree-id3184 . -10) (undo-tree-id3185 . -10) (undo-tree-id3186 . -10) 1737) nil (26050 14205 91535 70000) 0 nil])
([nil nil ((#("XlibDisplayHandle" 0 17 (face font-lock-type-face fontified t)) . -1782) (undo-tree-id3234 . -3) (undo-tree-id3235 . -17) (undo-tree-id3236 . -17) (undo-tree-id3237 . -17) (undo-tree-id3238 . -17) (undo-tree-id3239 . -17) (undo-tree-id3240 . -17) (undo-tree-id3241 . -17) (undo-tree-id3242 . -17) (undo-tree-id3243 . -17) (undo-tree-id3244 . -17) (undo-tree-id3245 . -17) (undo-tree-id3246 . -17) (undo-tree-id3247 . -17) (undo-tree-id3248 . -17) (undo-tree-id3249 . -17) (undo-tree-id3250 . -17) 1799 (t 26050 14205 107353 454000)) nil (26050 14209 238871 350000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -1780) (undo-tree-id3251 . -1) (undo-tree-id3252 . -1) (undo-tree-id3253 . -1) (undo-tree-id3254 . -1) (undo-tree-id3255 . -1) (undo-tree-id3256 . -1) (undo-tree-id3257 . -1) (undo-tree-id3258 . -1) (undo-tree-id3259 . -1) (undo-tree-id3260 . -1) (undo-tree-id3261 . -1) (undo-tree-id3262 . -1) (undo-tree-id3263 . -1) (undo-tree-id3264 . -1) (undo-tree-id3265 . -1) (undo-tree-id3266 . -1) (undo-tree-id3267 . -1) (undo-tree-id3268 . -1) (undo-tree-id3269 . -1) (undo-tree-id3270 . -1) (undo-tree-id3271 . -1) (undo-tree-id3272 . -1) (undo-tree-id3273 . -1) (undo-tree-id3274 . -1) (undo-tree-id3275 . -1) (undo-tree-id3276 . -1) (undo-tree-id3277 . -1) (undo-tree-id3278 . -1) (undo-tree-id3279 . -1) (undo-tree-id3280 . -1) (undo-tree-id3281 . -1) (undo-tree-id3282 . -1) (#(" " 0 1 (fontified t)) . -1781) (undo-tree-id3283 . -1) (undo-tree-id3284 . -1) (undo-tree-id3285 . -1) (undo-tree-id3286 . -1) (undo-tree-id3287 . -1) (undo-tree-id3288 . -1) (undo-tree-id3289 . -1) (undo-tree-id3290 . -1) (undo-tree-id3291 . -1) (undo-tree-id3292 . -1) (undo-tree-id3293 . -1) (undo-tree-id3294 . -1) (undo-tree-id3295 . -1) (undo-tree-id3296 . -1) (undo-tree-id3297 . -1) (undo-tree-id3298 . -1) (undo-tree-id3299 . -1) (undo-tree-id3300 . -1) (undo-tree-id3301 . -1) (undo-tree-id3302 . -1) (undo-tree-id3303 . -1) (undo-tree-id3304 . -1) (undo-tree-id3305 . -1) (undo-tree-id3306 . -1) (undo-tree-id3307 . -1) (undo-tree-id3308 . -1) (undo-tree-id3309 . -1) (undo-tree-id3310 . -1) (undo-tree-id3311 . -1) (undo-tree-id3312 . -1) (undo-tree-id3313 . -1) 1782 (t 26050 14209 790687 75000)) nil (26050 14210 901891 410000) 0 nil] [nil nil ((#("HasWindowHandle, " 0 15 (face font-lock-type-face fontified t) 15 17 (fontified t)) . -1765) (undo-tree-id3216 . -17) (undo-tree-id3217 . -17) (undo-tree-id3218 . -17) (undo-tree-id3219 . -17) (undo-tree-id3220 . -17) (undo-tree-id3221 . -17) (undo-tree-id3222 . -17) (undo-tree-id3223 . -17) (undo-tree-id3224 . -17) (undo-tree-id3225 . -17) (undo-tree-id3226 . -17) (undo-tree-id3227 . -17) (undo-tree-id3228 . -17) (undo-tree-id3229 . -17) (undo-tree-id3230 . -17) (undo-tree-id3231 . -17) (undo-tree-id3232 . -17) (undo-tree-id3233 . -17) 1782) ((1765 . 1782)) (26050 14209 238416 713000) 0 nil])
([nil nil ((#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1816) (undo-tree-id3323 . -1) (undo-tree-id3324 . -1) (undo-tree-id3325 . -1) (undo-tree-id3326 . -1) (undo-tree-id3327 . -1) (undo-tree-id3328 . -1) (undo-tree-id3329 . -1) 1817 (t 26050 14210 917353 811000)) nil (26050 14225 798359 931000) 0 nil])
nil
([nil nil ((#("{" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1726) (undo-tree-id3314 . -1) (undo-tree-id3315 . -1) (undo-tree-id3316 . -1) (undo-tree-id3317 . -1) (undo-tree-id3318 . -1) (undo-tree-id3319 . -1) (undo-tree-id3320 . -1) (undo-tree-id3321 . -1) (undo-tree-id3322 . -1) 1727) nil (26050 14655 956152 269000) 0 nil])
([nil nil ((2074 . 2075) (t 26050 14637 84046 637000)) nil (26050 14728 744988 973000) 0 nil] [nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -2632) (undo-tree-id3449 . -1) (undo-tree-id3450 . -1) (undo-tree-id3451 . -1) (undo-tree-id3452 . -1) (undo-tree-id3453 . -1) (undo-tree-id3454 . -1) (undo-tree-id3455 . -1) (undo-tree-id3456 . -1) (undo-tree-id3457 . -1) (undo-tree-id3458 . -1) (undo-tree-id3459 . -1) (undo-tree-id3460 . -1) (undo-tree-id3461 . -1) (undo-tree-id3462 . -1) (undo-tree-id3463 . -1) (undo-tree-id3464 . -1) (undo-tree-id3465 . -1) (undo-tree-id3466 . -1) (undo-tree-id3467 . -1) (undo-tree-id3468 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -2633) (undo-tree-id3469 . -1) (undo-tree-id3470 . -1) (undo-tree-id3471 . -1) (undo-tree-id3472 . -1) (undo-tree-id3473 . -1) (undo-tree-id3474 . -1) (undo-tree-id3475 . -1) (undo-tree-id3476 . -1) (undo-tree-id3477 . -1) (undo-tree-id3478 . -1) (undo-tree-id3479 . -1) (undo-tree-id3480 . -1) (undo-tree-id3481 . -1) (undo-tree-id3482 . -1) (undo-tree-id3483 . -1) (undo-tree-id3484 . -1) (undo-tree-id3485 . -1) (undo-tree-id3486 . -1) (undo-tree-id3487 . -1) 2634 (t 26050 14637 84046 637000)) ((2632 . 2634)) (26050 14655 235193 117000) 0 nil] [nil nil ((#("unwrap()" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-3-face) fontified t) 7 8 (face (rainbow-delimiters-depth-3-face) fontified t)) . -2626) (undo-tree-id3378 . -8) (undo-tree-id3380 . -8) (undo-tree-id3382 . -8) (undo-tree-id3384 . -8) (undo-tree-id3386 . -8) (undo-tree-id3388 . -8) (undo-tree-id3390 . -8) (undo-tree-id3392 . -8) (undo-tree-id3394 . -8) (undo-tree-id3396 . -8) (undo-tree-id3398 . -8) (undo-tree-id3400 . -8) (undo-tree-id3402 . -8) (undo-tree-id3404 . -8) (undo-tree-id3406 . -8) (undo-tree-id3408 . -8) (undo-tree-id3410 . -8) (undo-tree-id3412 . -8) (undo-tree-id3414 . -8) (undo-tree-id3415 . -8) (undo-tree-id3416 . -8) (undo-tree-id3417 . -8) (undo-tree-id3419 . -8) (undo-tree-id3420 . -8) (undo-tree-id3422 . -8) 2634 (t 26050 14225 844021 394000)) ((2626 . 2634)) (26050 14636 98041 535000) 0 nil])
([nil nil ((2105 . 2108)) nil (26050 14728 744988 372000) 0 nil])
([nil nil ((2632 . 2633)) ((#("_" 0 1 (fontified t)) . 2632) (undo-tree-id3488 . -1)) (26050 14655 234954 992000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2625) (undo-tree-id3331 . -1) (undo-tree-id3333 . -1) (undo-tree-id3335 . -1) (undo-tree-id3337 . -1) (undo-tree-id3339 . -1) (undo-tree-id3341 . -1) (undo-tree-id3343 . -1) (undo-tree-id3345 . -1) (undo-tree-id3347 . -1) (undo-tree-id3349 . -1) (undo-tree-id3351 . -1) (undo-tree-id3353 . -1) (undo-tree-id3355 . -1) (undo-tree-id3357 . -1) (undo-tree-id3359 . -1) (undo-tree-id3361 . -1) (undo-tree-id3363 . -1) (undo-tree-id3365 . -1) (undo-tree-id3367 . -1) (undo-tree-id3368 . -1) (undo-tree-id3369 . -1) (undo-tree-id3370 . -1) (undo-tree-id3372 . -1) (undo-tree-id3373 . -1) (undo-tree-id3375 . -1) 2626) ((2625 . 2626)) (26050 14635 777166 744000) 0 nil])
([nil nil ((#("RawWindowHandle::Xlib(handle)" 0 15 (face font-lock-type-face fontified t) 15 17 (fontified t) 17 21 (face font-lock-type-face fontified t) 21 22 (face (rainbow-delimiters-depth-2-face) fontified t) 22 28 (fontified t) 28 29 (face (rainbow-delimiters-depth-2-face) fontified t)) . 2192) (undo-tree-id3730 . -29) (undo-tree-id3731 . -19) (undo-tree-id3732 . -29) (undo-tree-id3733 . -29) (undo-tree-id3734 . -29) (undo-tree-id3735 . -29) (undo-tree-id3736 . -29) (undo-tree-id3737 . -29) (undo-tree-id3738 . -29) (undo-tree-id3739 . -19) (undo-tree-id3740 . -29) (undo-tree-id3741 . -29) (undo-tree-id3742 . -29)) nil (26050 14728 744987 442000) 0 nil])
nil
([nil nil ((2625 . 2626)) ((#("?" 0 1 (face rust-question-mark fontified t)) . 2625) (undo-tree-id3435 . -1) (undo-tree-id3436 . -1) (undo-tree-id3437 . -1) (undo-tree-id3438 . -1) (undo-tree-id3439 . -1) (undo-tree-id3440 . -1) (undo-tree-id3441 . -1) (undo-tree-id3442 . -1) (undo-tree-id3443 . -1) (undo-tree-id3444 . -1) (undo-tree-id3445 . -1) (undo-tree-id3446 . -1) (undo-tree-id3447 . -1) (undo-tree-id3448 . -1) (t 26050 14631 130712 938000)) (26050 14635 354082 323000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2135 . 2136) (nil fontified nil 2135 . 2136) (nil fontified nil 2129 . 2135) (nil fontified nil 2128 . 2129) (nil fontified nil 2124 . 2128) (nil fontified nil 2122 . 2124) (nil fontified nil 2107 . 2122) (2107 . 2136)) nil (26050 14728 744978 706000) 0 nil])
([nil nil ((#("?" 0 1 (face rust-question-mark fontified t)) . -2625) (undo-tree-id3423 . -1) (undo-tree-id3424 . -1) (undo-tree-id3425 . -1) (undo-tree-id3426 . -1) (undo-tree-id3427 . -1) (undo-tree-id3428 . -1) (undo-tree-id3429 . -1) (undo-tree-id3430 . -1) (undo-tree-id3431 . -1) (undo-tree-id3432 . -1) (undo-tree-id3433 . -1) (undo-tree-id3434 . -1) 2626 (t 26050 14631 130712 938000)) ((2625 . 2626)) (26050 14635 353649 217000) 0 nil])
([nil nil ((#("handle" 0 6 (fontified t)) . -2129) (undo-tree-id3719 . -6) (undo-tree-id3720 . -6) (undo-tree-id3721 . -6) (undo-tree-id3722 . -6) (undo-tree-id3723 . -6) (undo-tree-id3724 . -6) (undo-tree-id3725 . -6) (undo-tree-id3726 . -6) (undo-tree-id3727 . -6) (undo-tree-id3728 . -6) (undo-tree-id3729 . -6) 2135) nil (26050 14728 744977 105000) 0 nil])
nil
([nil nil ((2129 . 2135)) nil (26050 14728 744970 82000) 0 nil])
([nil nil ((#("window" 0 6 (fontified t)) . -2129) (undo-tree-id3700 . -6) (undo-tree-id3701 . -6) (undo-tree-id3702 . -1) (undo-tree-id3703 . -2) (undo-tree-id3704 . -2) (undo-tree-id3705 . -3) (undo-tree-id3706 . -3) (undo-tree-id3707 . -4) (undo-tree-id3708 . -4) (undo-tree-id3709 . -5) (undo-tree-id3710 . -5) (undo-tree-id3711 . -5) (undo-tree-id3712 . -5) (undo-tree-id3713 . -5) (undo-tree-id3714 . -5) (undo-tree-id3715 . -6) (undo-tree-id3716 . -6) (undo-tree-id3717 . -6) (undo-tree-id3718 . -6) 2135) nil (26050 14728 744968 33000) 0 nil])
([nil nil ((2129 . 2135)) nil (26050 14728 743042 26000) 0 nil])
([nil nil ((#("window" 0 6 (fontified t)) . -2129) (undo-tree-id3684 . -6) (undo-tree-id3685 . -6) (undo-tree-id3686 . -1) (undo-tree-id3687 . -2) (undo-tree-id3688 . -2) (undo-tree-id3689 . -3) (undo-tree-id3690 . -3) (undo-tree-id3691 . -4) (undo-tree-id3692 . -4) (undo-tree-id3693 . -5) (undo-tree-id3694 . -5) (undo-tree-id3695 . -6) (undo-tree-id3696 . -6) (undo-tree-id3697 . -6) (undo-tree-id3698 . -6) (undo-tree-id3699 . -6) 2135) nil (26050 14728 743040 746000) 0 nil])
([nil nil ((2129 . 2139)) nil (26050 14728 742918 379000) 0 nil])
([nil nil ((#("handle" 0 6 (fontified t)) . -2098) (undo-tree-id3674 . -6) (undo-tree-id3675 . -1) (undo-tree-id3676 . -6) (undo-tree-id3677 . -6) (undo-tree-id3678 . -6) (undo-tree-id3679 . -6) (undo-tree-id3680 . -6) (undo-tree-id3681 . -6) (undo-tree-id3682 . -6) (undo-tree-id3683 . -6) 2104) nil (26050 14728 742917 156000) 0 nil])
([nil nil ((2098 . 2109)) nil (26050 14728 742911 201000) 0 nil])
([nil nil ((2149 . 2150)) nil (26050 14728 742910 770000) 0 nil])
([nil nil ((2173 . 2174)) nil (26050 14728 742910 279000) 0 nil])
([nil nil ((2173 . 2175)) nil (26050 14728 742909 527000) 0 nil])
([nil nil ((#("window_handle.as_raw()" 0 14 (fontified t) 14 20 (fontified t) 20 21 (face (rainbow-delimiters-depth-2-face) fontified t) 21 22 (face (rainbow-delimiters-depth-2-face) fontified t)) . 2237) (undo-tree-id3639 . -22) (undo-tree-id3640 . -22) (undo-tree-id3641 . -2) (undo-tree-id3642 . -2) (undo-tree-id3643 . -2) (undo-tree-id3644 . -2) (undo-tree-id3645 . -2) (undo-tree-id3646 . -2) (undo-tree-id3647 . -2) (undo-tree-id3648 . -1) (undo-tree-id3649 . -1) (undo-tree-id3650 . -2) (undo-tree-id3651 . -3) (undo-tree-id3652 . -4) (undo-tree-id3653 . -5) (undo-tree-id3654 . -6) (undo-tree-id3655 . -7) (undo-tree-id3656 . -8) (undo-tree-id3657 . -9) (undo-tree-id3658 . -10) (undo-tree-id3659 . -11) (undo-tree-id3660 . -12) (undo-tree-id3661 . -13) (undo-tree-id3662 . -14) (undo-tree-id3663 . -15) (undo-tree-id3664 . -16) (undo-tree-id3665 . -17) (undo-tree-id3666 . -18) (undo-tree-id3667 . -19) (undo-tree-id3668 . -20) (undo-tree-id3669 . -21) (undo-tree-id3670 . -22) (undo-tree-id3671 . -22) (undo-tree-id3672 . -22) (undo-tree-id3673 . -22) 2259) nil (26050 14728 742907 781000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2196 . 2197) (nil fontified nil 2196 . 2197) (nil fontified nil 2195 . 2196) (nil fontified nil 2189 . 2195) (nil fontified nil 2175 . 2189) (2175 . 2197)) nil (26050 14728 745366 924000) 0 nil])
([nil nil ((#("x11_window = Some(handle.window);" 0 13 (fontified t) 13 17 (face font-lock-type-face fontified t) 17 18 (face (rainbow-delimiters-depth-3-face) fontified t) 18 25 (fontified t) 25 31 (fontified t) 31 32 (face (rainbow-delimiters-depth-3-face) fontified t) 32 33 (fontified t)) . 2270) (undo-tree-id4337 . -18) (undo-tree-id4338 . -33) (undo-tree-id4339 . -33) (undo-tree-id4340 . -27) (undo-tree-id4341 . -1) (undo-tree-id4342 . -2) (undo-tree-id4343 . -3) (undo-tree-id4344 . -4) (undo-tree-id4345 . -5) (undo-tree-id4346 . -6) (undo-tree-id4347 . -7) (undo-tree-id4348 . -8) (undo-tree-id4349 . -9) (undo-tree-id4350 . -10) (undo-tree-id4351 . -11) (undo-tree-id4352 . -12) (undo-tree-id4353 . -13) (undo-tree-id4354 . -14) (undo-tree-id4355 . -15) (undo-tree-id4356 . -16) (undo-tree-id4357 . -17) (undo-tree-id4358 . -18) (undo-tree-id4359 . -19) (undo-tree-id4360 . -20) (undo-tree-id4361 . -21) (undo-tree-id4362 . -22) (undo-tree-id4363 . -23) (undo-tree-id4364 . -24) (undo-tree-id4365 . -25) (undo-tree-id4366 . -26) (undo-tree-id4367 . -27) (undo-tree-id4368 . -28) (undo-tree-id4369 . -29) (undo-tree-id4370 . -30) (undo-tree-id4371 . -31) (undo-tree-id4372 . -32) (undo-tree-id4373 . -33) (undo-tree-id4374 . -33) (undo-tree-id4375 . -33) (undo-tree-id4376 . -33) (undo-tree-id4377 . -33) (undo-tree-id4378 . -33) (undo-tree-id4379 . -33) (undo-tree-id4380 . -1) (undo-tree-id4381 . -2) (undo-tree-id4382 . -3) (undo-tree-id4383 . -4) (undo-tree-id4384 . -5) (undo-tree-id4385 . -6) (undo-tree-id4386 . -7) (undo-tree-id4387 . -8) (undo-tree-id4388 . -9) (undo-tree-id4389 . -11) (undo-tree-id4390 . -12) (undo-tree-id4391 . -13) (undo-tree-id4392 . -15) (undo-tree-id4393 . -16) (undo-tree-id4394 . -17) (undo-tree-id4395 . -18) (undo-tree-id4396 . -19) (undo-tree-id4397 . -20) (undo-tree-id4398 . -21) (undo-tree-id4399 . -22) (undo-tree-id4400 . -23) (undo-tree-id4401 . -24) (undo-tree-id4402 . -25) (undo-tree-id4403 . -26) (undo-tree-id4404 . -27) (undo-tree-id4405 . -28) (undo-tree-id4406 . -29) (undo-tree-id4407 . -30) (undo-tree-id4408 . -31) (undo-tree-id4409 . -32) (undo-tree-id4410 . -33) (undo-tree-id4411 . -33) (undo-tree-id4412 . -33) (undo-tree-id4413 . -33) (undo-tree-id4414 . -33) (undo-tree-id4415 . -33) 2303) nil (26050 14736 552721 739000) 0 nil] [nil nil ((#("window_handle.as_raw()) {
        x11_display = handle.display;
    }
    if let  =  {
        x11_window = Some(handle.window);" 0 14 (fontified t) 14 20 (fontified t) 20 21 (face (rainbow-delimiters-depth-3-face) fontified t) 21 22 (face (rainbow-delimiters-depth-3-face) rear-nonsticky t fontified t) 22 23 (face (rainbow-delimiters-depth-2-face) fontified t) 23 24 (fontified t) 24 25 (face (rainbow-delimiters-depth-2-face) fontified t) 25 26 (fontified t) 26 34 (fontified t) 34 48 (fontified t) 48 55 (fontified t) 55 63 (fontified t) 63 64 (fontified t) 64 68 (fontified t) 68 69 (face (rainbow-delimiters-depth-2-face) fontified t) 69 70 (fontified t) 70 74 (fontified t) 74 76 (face font-lock-keyword-face fontified t) 76 77 (fontified t) 77 80 (face font-lock-keyword-face fontified t) 80 81 (fontified t) 81 84 (fontified t) 84 85 (fontified t) 85 86 (face (rainbow-delimiters-depth-2-face) fontified t) 86 87 (fontified t) 87 95 (fontified t) 95 108 (fontified t) 108 112 (face font-lock-type-face fontified t) 112 113 (face (rainbow-delimiters-depth-3-face) fontified t) 113 120 (fontified t) 120 126 (fontified t) 126 127 (face (rainbow-delimiters-depth-3-face) fontified t) 127 128 (fontified t)) . 2175) (undo-tree-id3489 . -81) (undo-tree-id3490 . -113) (undo-tree-id3491 . -128) (undo-tree-id3492 . -128) (undo-tree-id3493 . -122) (undo-tree-id3494 . -69) (undo-tree-id3495 . -61) (undo-tree-id3496 . -63) (undo-tree-id3497 . -69) (undo-tree-id3498 . -84) (undo-tree-id3499 . -84) (undo-tree-id3500 . -84) (undo-tree-id3501 . -84) (undo-tree-id3502 . -84) (undo-tree-id3503 . -84) (undo-tree-id3504 . -84) (undo-tree-id3505 . -84) (undo-tree-id3506 . -84) (undo-tree-id3507 . -83) (undo-tree-id3508 . -82) (undo-tree-id3509 . -81) (undo-tree-id3510 . -81) (undo-tree-id3511 . -81) (undo-tree-id3512 . -81) (undo-tree-id3513 . -81) (undo-tree-id3514 . -81) (undo-tree-id3515 . -81) (undo-tree-id3516 . -81) (undo-tree-id3517 . -81) (undo-tree-id3518 . -81) (undo-tree-id3519 . -81) (undo-tree-id3520 . -74) (undo-tree-id3521 . -74) (undo-tree-id3522 . -74) (undo-tree-id3523 . -74) (undo-tree-id3524 . -74) (undo-tree-id3525 . -75) (undo-tree-id3526 . -76) (undo-tree-id3527 . -77) (undo-tree-id3528 . -78) (undo-tree-id3529 . -79) (undo-tree-id3530 . -80) (undo-tree-id3531 . -81) (undo-tree-id3532 . -81) (undo-tree-id3533 . -81) (undo-tree-id3534 . -81) (undo-tree-id3535 . -81) (undo-tree-id3536 . -81) (undo-tree-id3537 . -81) (undo-tree-id3538 . -81) (undo-tree-id3539 . -81) (undo-tree-id3540 . -81) (undo-tree-id3541 . -81) (undo-tree-id3542 . -81) (undo-tree-id3543 . -81) (undo-tree-id3544 . -81) (undo-tree-id3545 . -81) (undo-tree-id3546 . -81) (undo-tree-id3547 . -81) (undo-tree-id3548 . -23) (undo-tree-id3549 . -23) (undo-tree-id3550 . -23) (undo-tree-id3551 . -84) (undo-tree-id3552 . -84) (undo-tree-id3553 . -84) (undo-tree-id3554 . -84) (undo-tree-id3555 . -84) (undo-tree-id3556 . -84) (undo-tree-id3557 . -84) (undo-tree-id3558 . -84) (undo-tree-id3559 . -84) (undo-tree-id3560 . -84) (undo-tree-id3561 . -84) (undo-tree-id3562 . -84) (undo-tree-id3563 . -84) (undo-tree-id3564 . -84) (undo-tree-id3565 . -84) (undo-tree-id3566 . -84) (undo-tree-id3567 . -84) (undo-tree-id3568 . -84) (undo-tree-id3569 . -84) (undo-tree-id3570 . -84) (undo-tree-id3571 . -84) (undo-tree-id3572 . -84) (undo-tree-id3573 . -84) (undo-tree-id3574 . -84) (undo-tree-id3575 . -84) (undo-tree-id3576 . -84) (undo-tree-id3577 . -84) (undo-tree-id3578 . -84) (undo-tree-id3579 . -84) (undo-tree-id3580 . -84) (undo-tree-id3581 . -84) (undo-tree-id3582 . -84) (undo-tree-id3583 . -84) (undo-tree-id3584 . -84) (undo-tree-id3585 . -84) (undo-tree-id3586 . -84) (undo-tree-id3587 . -84) (undo-tree-id3588 . -84) (undo-tree-id3589 . -84) (undo-tree-id3590 . -84) (undo-tree-id3591 . -22) (undo-tree-id3592 . -22) (undo-tree-id3593 . -22) (undo-tree-id3594 . -22) (undo-tree-id3595 . -22) (undo-tree-id3596 . -95) (undo-tree-id3597 . -95) (undo-tree-id3598 . -95) (undo-tree-id3599 . -96) (undo-tree-id3600 . -97) (undo-tree-id3601 . -98) (undo-tree-id3602 . -99) (undo-tree-id3603 . -100) (undo-tree-id3604 . -101) (undo-tree-id3605 . -102) (undo-tree-id3606 . -103) (undo-tree-id3607 . -104) (undo-tree-id3608 . -105) (undo-tree-id3609 . -106) (undo-tree-id3610 . -107) (undo-tree-id3611 . -108) (undo-tree-id3612 . -109) (undo-tree-id3613 . -110) (undo-tree-id3614 . -111) (undo-tree-id3615 . -112) (undo-tree-id3616 . -113) (undo-tree-id3617 . -114) (undo-tree-id3618 . -115) (undo-tree-id3619 . -116) (undo-tree-id3620 . -117) (undo-tree-id3621 . -118) (undo-tree-id3622 . -119) (undo-tree-id3623 . -120) (undo-tree-id3624 . -121) (undo-tree-id3625 . -122) (undo-tree-id3626 . -123) (undo-tree-id3627 . -124) (undo-tree-id3628 . -125) (undo-tree-id3629 . -126) (undo-tree-id3630 . -127) (undo-tree-id3631 . -128) (undo-tree-id3632 . -95) (undo-tree-id3633 . -128) (undo-tree-id3634 . -128) (undo-tree-id3635 . -128) (undo-tree-id3636 . -128) (undo-tree-id3637 . -87) (undo-tree-id3638 . -128) 2303) ((2175 . 2303)) (26050 14728 742878 853000) 0 nil])
([nil nil ((2238 . 2247)) nil (26050 14736 552678 417000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 2279 . 2280) (nil fontified nil 2279 . 2280) (nil fontified nil 2278 . 2279) (nil fontified nil 2272 . 2278) (nil fontified nil 2265 . 2272) (nil fontified nil 2264 . 2265) (nil fontified nil 2260 . 2264) (nil fontified nil 2247 . 2260) (2247 . 2280)) nil (26050 14738 575182 464000) 0 nil])
([nil nil ((#("    if let  =  {
        
    }" 0 4 (fontified t) 4 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 14 (fontified t) 14 15 (fontified t) 15 16 (face (rainbow-delimiters-depth-2-face) fontified t) 16 17 (fontified t) 17 25 (fontified t) 25 26 (fontified t) 26 30 (fontified t) 30 31 (face (rainbow-delimiters-depth-2-face) fontified t)) . 2287) (undo-tree-id4416 . -31) (undo-tree-id4417 . -11) (undo-tree-id4418 . -25) (undo-tree-id4419 . -25) (undo-tree-id4420 . -14) (undo-tree-id4421 . -14) (undo-tree-id4422 . -14) (undo-tree-id4423 . -14) (undo-tree-id4424 . -14) (undo-tree-id4425 . -14) (undo-tree-id4426 . -14) (undo-tree-id4427 . -14) (undo-tree-id4428 . -14) (undo-tree-id4429 . -13) (undo-tree-id4430 . -12) (undo-tree-id4431 . -11) (undo-tree-id4432 . -11) (undo-tree-id4433 . -11) (undo-tree-id4434 . -11) (undo-tree-id4435 . -11) (undo-tree-id4436 . -11) (undo-tree-id4437 . -11) (undo-tree-id4438 . -11) (undo-tree-id4439 . -11) (undo-tree-id4440 . -11) (undo-tree-id4441 . -11) (undo-tree-id4442 . -4) (undo-tree-id4443 . -4) (undo-tree-id4444 . -4) (undo-tree-id4445 . -4) (undo-tree-id4446 . -4) (undo-tree-id4447 . -5) (undo-tree-id4448 . -6) (undo-tree-id4449 . -7) (undo-tree-id4450 . -8) (undo-tree-id4451 . -9) (undo-tree-id4452 . -10) (undo-tree-id4453 . -11) (undo-tree-id4454 . -11) (undo-tree-id4455 . -11) (undo-tree-id4456 . -11) (undo-tree-id4457 . -11) (undo-tree-id4458 . -11) (undo-tree-id4459 . -11) (undo-tree-id4460 . -11) (undo-tree-id4461 . -11) (undo-tree-id4462 . -11) (undo-tree-id4463 . -11) (undo-tree-id4464 . -11) (undo-tree-id4465 . -11) (undo-tree-id4466 . -11) (undo-tree-id4467 . -11) (undo-tree-id4468 . -11) (undo-tree-id4469 . -11) (undo-tree-id4470 . -14) (undo-tree-id4471 . -14) (undo-tree-id4472 . -14) (undo-tree-id4473 . -14) (undo-tree-id4474 . -14) (undo-tree-id4475 . -14) (undo-tree-id4476 . -14) (undo-tree-id4477 . -14) (undo-tree-id4478 . -14) (undo-tree-id4479 . -14) (undo-tree-id4480 . -14) (undo-tree-id4481 . -14) (undo-tree-id4482 . -14) (undo-tree-id4483 . -14) (undo-tree-id4484 . -14) (undo-tree-id4485 . -14) (undo-tree-id4486 . -14) (undo-tree-id4487 . -14) (undo-tree-id4488 . -14) (undo-tree-id4489 . -14) (undo-tree-id4490 . -14) (undo-tree-id4491 . -14) (undo-tree-id4492 . -14) (undo-tree-id4493 . -14) (undo-tree-id4494 . -14) (undo-tree-id4495 . -14) (undo-tree-id4496 . -14) (undo-tree-id4497 . -14) (undo-tree-id4498 . -14) (undo-tree-id4499 . -14) (undo-tree-id4500 . -14) (undo-tree-id4501 . -14) (undo-tree-id4502 . -14) (undo-tree-id4503 . -14) (undo-tree-id4504 . -14) (undo-tree-id4505 . -14) (undo-tree-id4506 . -14) (undo-tree-id4507 . -14) (undo-tree-id4508 . -14) (undo-tree-id4509 . -14) (undo-tree-id4510 . -25) (undo-tree-id4511 . -25) (undo-tree-id4512 . -25) (undo-tree-id4513 . -25) (undo-tree-id4514 . -25) (undo-tree-id4515 . -25) (undo-tree-id4516 . -25) (undo-tree-id4517 . -25) (undo-tree-id4518 . -25) (undo-tree-id4519 . -25) (undo-tree-id4520 . -25) (undo-tree-id4521 . -25) (undo-tree-id4522 . -25) (undo-tree-id4523 . -25) (undo-tree-id4524 . -25) (undo-tree-id4525 . -25) (undo-tree-id4526 . -25) (undo-tree-id4527 . -25) (undo-tree-id4528 . -25) (undo-tree-id4529 . -25) (undo-tree-id4530 . -25) (undo-tree-id4531 . -25) (undo-tree-id4532 . -25) (undo-tree-id4533 . -25) (undo-tree-id4534 . -25) (undo-tree-id4535 . -25) (undo-tree-id4536 . -25) (undo-tree-id4537 . -25) (undo-tree-id4538 . -25) (undo-tree-id4539 . -25) (undo-tree-id4540 . -25) (undo-tree-id4541 . -25) (undo-tree-id4542 . -25) (undo-tree-id4543 . -25) (undo-tree-id4544 . -25) (undo-tree-id4545 . -25) (undo-tree-id4546 . -25) (undo-tree-id4547 . -25) (undo-tree-id4548 . -25) (undo-tree-id4549 . -25) (undo-tree-id4550 . -25) (undo-tree-id4551 . -25) (undo-tree-id4552 . -25) (undo-tree-id4553 . -25) (undo-tree-id4554 . -25) (undo-tree-id4555 . -25) (undo-tree-id4556 . -25) (undo-tree-id4557 . -25) (undo-tree-id4558 . -25) (undo-tree-id4559 . -25) (undo-tree-id4560 . -25) (undo-tree-id4561 . -25) (undo-tree-id4562 . -25) (undo-tree-id4563 . -25) (undo-tree-id4564 . -25) (undo-tree-id4565 . -25) (undo-tree-id4566 . -25) (undo-tree-id4567 . -25) (undo-tree-id4568 . -25) (undo-tree-id4569 . -25) (undo-tree-id4570 . -25) (undo-tree-id4571 . -25) (undo-tree-id4572 . -25) (undo-tree-id4573 . -25) (undo-tree-id4574 . -25) (undo-tree-id4575 . -25) (undo-tree-id4576 . -25) (undo-tree-id4577 . -25) (undo-tree-id4578 . -25) (undo-tree-id4579 . -25) (undo-tree-id4580 . -25) (undo-tree-id4581 . -25) (undo-tree-id4582 . -25) (undo-tree-id4583 . -25) (undo-tree-id4584 . -25) (undo-tree-id4585 . -31) (undo-tree-id4586 . -31) (undo-tree-id4587 . -31) (undo-tree-id4588 . -25) (undo-tree-id4589 . -25) (undo-tree-id4590 . -25) (undo-tree-id4591 . -25) (undo-tree-id4592 . -25) (undo-tree-id4593 . -25) (undo-tree-id4594 . -25) (undo-tree-id4595 . -25) (undo-tree-id4596 . -25) (undo-tree-id4597 . -31) (undo-tree-id4598 . -31) (undo-tree-id4599 . -31) (undo-tree-id4600 . -23) (undo-tree-id4601 . -22) (undo-tree-id4602 . -4) (undo-tree-id4603 . -3) (undo-tree-id4604 . -31) (undo-tree-id4605 . -31) (undo-tree-id4606 . -31) (undo-tree-id4607 . -31) (undo-tree-id4608 . -21) (undo-tree-id4609 . -20) (undo-tree-id4610 . -19) (undo-tree-id4611 . -18) (undo-tree-id4612 . -17) (undo-tree-id4613 . -31) (undo-tree-id4614 . -31) (undo-tree-id4615 . -31)) nil (26050 14741 129700 226000) 0 nil] [nil nil ((#("   }
    if let  =  {
        
    }" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-2-face) fontified t) 4 5 (fontified t) 5 9 (fontified t) 9 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 15 (face font-lock-keyword-face fontified t) 15 16 (fontified t) 16 19 (fontified t) 19 20 (fontified t) 20 21 (face (rainbow-delimiters-depth-2-face) fontified t) 21 22 (fontified t) 22 30 (fontified t) 30 31 (fontified t) 31 35 (fontified t) 35 36 (face (rainbow-delimiters-depth-2-face) fontified t)) . 2282) (undo-tree-id4145 . -36) (undo-tree-id4146 . -16) (undo-tree-id4147 . -30) (undo-tree-id4148 . -30) (undo-tree-id4149 . -4) (undo-tree-id4150 . -4) (undo-tree-id4151 . -19) (undo-tree-id4152 . -19) (undo-tree-id4153 . -19) (undo-tree-id4154 . -19) (undo-tree-id4155 . -19) (undo-tree-id4156 . -19) (undo-tree-id4157 . -19) (undo-tree-id4158 . -19) (undo-tree-id4159 . -19) (undo-tree-id4160 . -18) (undo-tree-id4161 . -17) (undo-tree-id4162 . -16) (undo-tree-id4163 . -16) (undo-tree-id4164 . -16) (undo-tree-id4165 . -16) (undo-tree-id4166 . -16) (undo-tree-id4167 . -16) (undo-tree-id4168 . -16) (undo-tree-id4169 . -16) (undo-tree-id4170 . -16) (undo-tree-id4171 . -16) (undo-tree-id4172 . -16) (undo-tree-id4173 . -9) (undo-tree-id4174 . -9) (undo-tree-id4175 . -9) (undo-tree-id4176 . -9) (undo-tree-id4177 . -9) (undo-tree-id4178 . -10) (undo-tree-id4179 . -11) (undo-tree-id4180 . -12) (undo-tree-id4181 . -13) (undo-tree-id4182 . -14) (undo-tree-id4183 . -15) (undo-tree-id4184 . -16) (undo-tree-id4185 . -16) (undo-tree-id4186 . -16) (undo-tree-id4187 . -16) (undo-tree-id4188 . -16) (undo-tree-id4189 . -16) (undo-tree-id4190 . -16) (undo-tree-id4191 . -16) (undo-tree-id4192 . -16) (undo-tree-id4193 . -16) (undo-tree-id4194 . -16) (undo-tree-id4195 . -16) (undo-tree-id4196 . -16) (undo-tree-id4197 . -16) (undo-tree-id4198 . -16) (undo-tree-id4199 . -16) (undo-tree-id4200 . -16) (undo-tree-id4201 . -19) (undo-tree-id4202 . -19) (undo-tree-id4203 . -19) (undo-tree-id4204 . -19) (undo-tree-id4205 . -19) (undo-tree-id4206 . -19) (undo-tree-id4207 . -19) (undo-tree-id4208 . -19) (undo-tree-id4209 . -19) (undo-tree-id4210 . -19) (undo-tree-id4211 . -19) (undo-tree-id4212 . -19) (undo-tree-id4213 . -19) (undo-tree-id4214 . -19) (undo-tree-id4215 . -19) (undo-tree-id4216 . -19) (undo-tree-id4217 . -19) (undo-tree-id4218 . -19) (undo-tree-id4219 . -19) (undo-tree-id4220 . -19) (undo-tree-id4221 . -19) (undo-tree-id4222 . -19) (undo-tree-id4223 . -19) (undo-tree-id4224 . -19) (undo-tree-id4225 . -19) (undo-tree-id4226 . -19) (undo-tree-id4227 . -19) (undo-tree-id4228 . -19) (undo-tree-id4229 . -19) (undo-tree-id4230 . -19) (undo-tree-id4231 . -19) (undo-tree-id4232 . -19) (undo-tree-id4233 . -19) (undo-tree-id4234 . -19) (undo-tree-id4235 . -19) (undo-tree-id4236 . -19) (undo-tree-id4237 . -19) (undo-tree-id4238 . -19) (undo-tree-id4239 . -19) (undo-tree-id4240 . -19) (undo-tree-id4241 . -30) (undo-tree-id4242 . -30) (undo-tree-id4243 . -30) (undo-tree-id4244 . -30) (undo-tree-id4245 . -30) (undo-tree-id4246 . -30) (undo-tree-id4247 . -30) (undo-tree-id4248 . -30) (undo-tree-id4249 . -30) (undo-tree-id4250 . -30) (undo-tree-id4251 . -30) (undo-tree-id4252 . -30) (undo-tree-id4253 . -30) (undo-tree-id4254 . -30) (undo-tree-id4255 . -30) (undo-tree-id4256 . -30) (undo-tree-id4257 . -30) (undo-tree-id4258 . -30) (undo-tree-id4259 . -30) (undo-tree-id4260 . -30) (undo-tree-id4261 . -30) (undo-tree-id4262 . -30) (undo-tree-id4263 . -30) (undo-tree-id4264 . -30) (undo-tree-id4265 . -30) (undo-tree-id4266 . -30) (undo-tree-id4267 . -30) (undo-tree-id4268 . -30) (undo-tree-id4269 . -30) (undo-tree-id4270 . -30) (undo-tree-id4271 . -30) (undo-tree-id4272 . -30) (undo-tree-id4273 . -30) (undo-tree-id4274 . -30) (undo-tree-id4275 . -30) (undo-tree-id4276 . -30) (undo-tree-id4277 . -30) (undo-tree-id4278 . -30) (undo-tree-id4279 . -30) (undo-tree-id4280 . -30) (undo-tree-id4281 . -30) (undo-tree-id4282 . -30) (undo-tree-id4283 . -30) (undo-tree-id4284 . -30) (undo-tree-id4285 . -30) (undo-tree-id4286 . -30) (undo-tree-id4287 . -30) (undo-tree-id4288 . -30) (undo-tree-id4289 . -30) (undo-tree-id4290 . -30) (undo-tree-id4291 . -30) (undo-tree-id4292 . -30) (undo-tree-id4293 . -30) (undo-tree-id4294 . -30) (undo-tree-id4295 . -30) (undo-tree-id4296 . -30) (undo-tree-id4297 . -30) (undo-tree-id4298 . -30) (undo-tree-id4299 . -30) (undo-tree-id4300 . -30) (undo-tree-id4301 . -30) (undo-tree-id4302 . -30) (undo-tree-id4303 . -30) (undo-tree-id4304 . -30) (undo-tree-id4305 . -30) (undo-tree-id4306 . -30) (undo-tree-id4307 . -30) (undo-tree-id4308 . -30) (undo-tree-id4309 . -30) (undo-tree-id4310 . -30) (undo-tree-id4311 . -30) (undo-tree-id4312 . -30) (undo-tree-id4313 . -30) (undo-tree-id4314 . -30) (undo-tree-id4315 . -30) (undo-tree-id4316 . -36) (undo-tree-id4317 . -36) (undo-tree-id4318 . -36) (undo-tree-id4319 . -30) (undo-tree-id4320 . -30) (undo-tree-id4321 . -30) (undo-tree-id4322 . -30) (undo-tree-id4323 . -30) (undo-tree-id4324 . -30) (undo-tree-id4325 . -30) (undo-tree-id4326 . -30) (undo-tree-id4327 . -30) (undo-tree-id4328 . -36) (undo-tree-id4329 . -36) (undo-tree-id4330 . -36) (undo-tree-id4331 . -28) (undo-tree-id4332 . -27) (undo-tree-id4333 . -9) (undo-tree-id4334 . -8) (undo-tree-id4335 . -1) (undo-tree-id4336 . -36)) ((2282 . 2318)) (26050 14738 230231 925000) 0 nil])
([nil nil ((#("handle" 0 6 (fontified t)) . -2223) (undo-tree-id4640 . -6) (undo-tree-id4641 . -6) (undo-tree-id4642 . -6) (undo-tree-id4643 . -6) (undo-tree-id4644 . -6) (undo-tree-id4645 . -6) (undo-tree-id4646 . -6) (undo-tree-id4647 . -6) (undo-tree-id4648 . -6) (undo-tree-id4649 . -6) (undo-tree-id4650 . -6) (undo-tree-id4651 . -6) 2229 (t 26050 14741 134053 24000)) nil (26050 14752 624109 740000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2280) (undo-tree-id3743 . -1) (undo-tree-id3744 . -1) (undo-tree-id3745 . -1) (undo-tree-id3746 . -1) (undo-tree-id3747 . -1) (undo-tree-id3748 . -1) (undo-tree-id3749 . -1) (undo-tree-id3750 . -1) (undo-tree-id3751 . -1) (undo-tree-id3752 . -1) (undo-tree-id3753 . -1) (undo-tree-id3754 . -1) (undo-tree-id3755 . -1) (undo-tree-id3756 . -1) (undo-tree-id3757 . -1) (undo-tree-id3758 . -1) (undo-tree-id3759 . -1) (undo-tree-id3760 . -1) (undo-tree-id3761 . -1) (undo-tree-id3762 . -1) (undo-tree-id3763 . -1) (undo-tree-id3764 . -1) (undo-tree-id3765 . -1) (undo-tree-id3766 . -1) (undo-tree-id3767 . -1) (undo-tree-id3768 . -1) (undo-tree-id3769 . -1) (undo-tree-id3770 . -1) (undo-tree-id3771 . -1) (undo-tree-id3772 . -1) (undo-tree-id3773 . -1) (undo-tree-id3774 . -1) (undo-tree-id3775 . -1) (undo-tree-id3776 . -1) (undo-tree-id3777 . -1) (undo-tree-id3778 . -1) (undo-tree-id3779 . -1) (undo-tree-id3780 . -1) (undo-tree-id3781 . -1) (undo-tree-id3782 . -1) (undo-tree-id3783 . -1) (undo-tree-id3784 . -1) (undo-tree-id3785 . -1) (undo-tree-id3786 . -1) (undo-tree-id3787 . -1) (undo-tree-id3788 . -1) (undo-tree-id3789 . -1) (undo-tree-id3790 . -1) (undo-tree-id3791 . -1) (undo-tree-id3792 . -1) (undo-tree-id3793 . -1) (undo-tree-id3794 . -1) (undo-tree-id3795 . -1) (undo-tree-id3796 . -1) (undo-tree-id3797 . -1) (undo-tree-id3798 . -1) (undo-tree-id3799 . -1) (undo-tree-id3800 . -1) (undo-tree-id3801 . -1) (undo-tree-id3802 . -1) (undo-tree-id3803 . -1) (undo-tree-id3804 . -1) (undo-tree-id3805 . -1) (undo-tree-id3806 . -1) (undo-tree-id3807 . -1) (undo-tree-id3808 . -1) (undo-tree-id3809 . -1) (undo-tree-id3810 . -1) (undo-tree-id3811 . -1) (undo-tree-id3812 . -1) (undo-tree-id3813 . -1) (undo-tree-id3814 . -1) (undo-tree-id3815 . -1) (undo-tree-id3816 . -1) (undo-tree-id3817 . -1) (undo-tree-id3818 . -1) (undo-tree-id3819 . -1) (undo-tree-id3820 . -1) (undo-tree-id3821 . -1) (undo-tree-id3822 . -1) (undo-tree-id3823 . -1) (undo-tree-id3824 . -1) (undo-tree-id3825 . -1) (undo-tree-id3826 . -1) (undo-tree-id3827 . -1) (undo-tree-id3828 . -1) (undo-tree-id3829 . -1) (undo-tree-id3830 . -1) (undo-tree-id3831 . -1) (undo-tree-id3832 . -1) (undo-tree-id3833 . -1) (undo-tree-id3834 . -1) (undo-tree-id3835 . -1) (undo-tree-id3836 . -1) (undo-tree-id3837 . -1) (undo-tree-id3838 . -1) (undo-tree-id3839 . -1) (undo-tree-id3840 . -1) (undo-tree-id3841 . -1) (undo-tree-id3842 . -1) (undo-tree-id3843 . -1) (undo-tree-id3844 . -1) (undo-tree-id3845 . -1) (undo-tree-id3846 . -1) (undo-tree-id3847 . -1) (undo-tree-id3848 . -1) (undo-tree-id3849 . -1) (undo-tree-id3850 . -1) (undo-tree-id3851 . -1) (undo-tree-id3852 . -1) (undo-tree-id3853 . -1) (undo-tree-id3854 . -1) (undo-tree-id3855 . -1) (undo-tree-id3856 . -1) (undo-tree-id3857 . -1) (undo-tree-id3858 . -1) (undo-tree-id3859 . -1) (undo-tree-id3860 . -1) (undo-tree-id3861 . -1) (undo-tree-id3862 . -1) (undo-tree-id3863 . -1) (undo-tree-id3864 . -1) (undo-tree-id3865 . -1) (undo-tree-id3866 . -1) (undo-tree-id3867 . -1) (undo-tree-id3868 . -1) (undo-tree-id3869 . -1) (undo-tree-id3870 . -1) (undo-tree-id3871 . -1) (undo-tree-id3872 . -1) (undo-tree-id3873 . -1) (undo-tree-id3874 . -1) (undo-tree-id3875 . -1) (undo-tree-id3876 . -1) (undo-tree-id3877 . -1) (undo-tree-id3878 . -1) (undo-tree-id3879 . -1) (undo-tree-id3880 . -1) (undo-tree-id3881 . -1) (undo-tree-id3882 . -1) (undo-tree-id3883 . -1) (undo-tree-id3884 . -1) (undo-tree-id3885 . -1) (undo-tree-id3886 . -1) (undo-tree-id3887 . -1) (undo-tree-id3888 . -1) (undo-tree-id3889 . -1) (undo-tree-id3890 . -1) (undo-tree-id3891 . -1) (undo-tree-id3892 . -1) (undo-tree-id3893 . -1) (undo-tree-id3894 . -1) (undo-tree-id3895 . -1) (undo-tree-id3896 . -1) (undo-tree-id3897 . -1) (undo-tree-id3898 . -1) (undo-tree-id3899 . -1) (undo-tree-id3900 . -1) (undo-tree-id3901 . -1) (undo-tree-id3902 . -1) (undo-tree-id3903 . -1) (undo-tree-id3904 . -1) (undo-tree-id3905 . -1) (undo-tree-id3906 . -1) (undo-tree-id3907 . -1) (undo-tree-id3908 . -1) (undo-tree-id3909 . -1) (undo-tree-id3910 . -1) (undo-tree-id3911 . -1) (undo-tree-id3912 . -1) (undo-tree-id3913 . -1) (undo-tree-id3914 . -1) (undo-tree-id3915 . -1) (undo-tree-id3916 . -1) (undo-tree-id3917 . -1) (undo-tree-id3918 . -1) (undo-tree-id3919 . -1) (undo-tree-id3920 . -1) (undo-tree-id3921 . -1) (undo-tree-id3922 . -1) (undo-tree-id3923 . -1) (undo-tree-id3924 . -1) (undo-tree-id3925 . -1) (undo-tree-id3926 . -1) (undo-tree-id3927 . -1) (undo-tree-id3928 . -1) (undo-tree-id3929 . -1) (undo-tree-id3930 . -1) (undo-tree-id3931 . -1) (undo-tree-id3932 . -1) (undo-tree-id3933 . -1) (undo-tree-id3934 . -1) (undo-tree-id3935 . -1) (undo-tree-id3936 . -1) (undo-tree-id3937 . -1) (undo-tree-id3938 . -1) (undo-tree-id3939 . -1) (undo-tree-id3940 . -1) (undo-tree-id3941 . -1) (undo-tree-id3942 . -1) (undo-tree-id3943 . -1) (undo-tree-id3944 . -1) (undo-tree-id3945 . -1) (#(" " 0 1 (fontified t)) . -2281) (undo-tree-id3946 . -1) (undo-tree-id3947 . -1) (undo-tree-id3948 . -1) (undo-tree-id3949 . -1) (undo-tree-id3950 . -1) (undo-tree-id3951 . -1) (undo-tree-id3952 . -1) (undo-tree-id3953 . -1) (undo-tree-id3954 . -1) (undo-tree-id3955 . -1) (undo-tree-id3956 . -1) (undo-tree-id3957 . -1) (undo-tree-id3958 . -1) (undo-tree-id3959 . -1) (undo-tree-id3960 . -1) (undo-tree-id3961 . -1) (undo-tree-id3962 . -1) (undo-tree-id3963 . -1) (undo-tree-id3964 . -1) (undo-tree-id3965 . -1) (undo-tree-id3966 . -1) (undo-tree-id3967 . -1) (undo-tree-id3968 . -1) (undo-tree-id3969 . -1) (undo-tree-id3970 . -1) (undo-tree-id3971 . -1) (undo-tree-id3972 . -1) (undo-tree-id3973 . -1) (undo-tree-id3974 . -1) (undo-tree-id3975 . -1) (undo-tree-id3976 . -1) (undo-tree-id3977 . -1) (undo-tree-id3978 . -1) (undo-tree-id3979 . -1) (undo-tree-id3980 . -1) (undo-tree-id3981 . -1) (undo-tree-id3982 . -1) (undo-tree-id3983 . -1) (undo-tree-id3984 . -1) (undo-tree-id3985 . -1) (undo-tree-id3986 . -1) (undo-tree-id3987 . -1) (undo-tree-id3988 . -1) (undo-tree-id3989 . -1) (undo-tree-id3990 . -1) (undo-tree-id3991 . -1) (undo-tree-id3992 . -1) (undo-tree-id3993 . -1) (undo-tree-id3994 . -1) (undo-tree-id3995 . -1) (undo-tree-id3996 . -1) (undo-tree-id3997 . -1) (undo-tree-id3998 . -1) (undo-tree-id3999 . -1) (undo-tree-id4000 . -1) (undo-tree-id4001 . -1) (undo-tree-id4002 . -1) (undo-tree-id4003 . -1) (undo-tree-id4004 . -1) (undo-tree-id4005 . -1) (undo-tree-id4006 . -1) (undo-tree-id4007 . -1) (undo-tree-id4008 . -1) (undo-tree-id4009 . -1) (undo-tree-id4010 . -1) (undo-tree-id4011 . -1) (undo-tree-id4012 . -1) (undo-tree-id4013 . -1) (undo-tree-id4014 . -1) (undo-tree-id4015 . -1) (undo-tree-id4016 . -1) (undo-tree-id4017 . -1) (undo-tree-id4018 . -1) (undo-tree-id4019 . -1) (undo-tree-id4020 . -1) (undo-tree-id4021 . -1) (undo-tree-id4022 . -1) (undo-tree-id4023 . -1) (undo-tree-id4024 . -1) (undo-tree-id4025 . -1) (undo-tree-id4026 . -1) (undo-tree-id4027 . -1) (undo-tree-id4028 . -1) (undo-tree-id4029 . -1) (undo-tree-id4030 . -1) (undo-tree-id4031 . -1) (undo-tree-id4032 . -1) (undo-tree-id4033 . -1) (undo-tree-id4034 . -1) (undo-tree-id4035 . -1) (undo-tree-id4036 . -1) (undo-tree-id4037 . -1) (undo-tree-id4038 . -1) (undo-tree-id4039 . -1) (undo-tree-id4040 . -1) (undo-tree-id4041 . -1) (undo-tree-id4042 . -1) (undo-tree-id4043 . -1) (undo-tree-id4044 . -1) (undo-tree-id4045 . -1) (undo-tree-id4046 . -1) (undo-tree-id4047 . -1) (undo-tree-id4048 . -1) (undo-tree-id4049 . -1) (undo-tree-id4050 . -1) (undo-tree-id4051 . -1) (undo-tree-id4052 . -1) (undo-tree-id4053 . -1) (undo-tree-id4054 . -1) (undo-tree-id4055 . -1) (undo-tree-id4056 . -1) (undo-tree-id4057 . -1) (undo-tree-id4058 . -1) (undo-tree-id4059 . -1) (undo-tree-id4060 . -1) (undo-tree-id4061 . -1) (undo-tree-id4062 . -1) (undo-tree-id4063 . -1) (undo-tree-id4064 . -1) (undo-tree-id4065 . -1) (undo-tree-id4066 . -1) (undo-tree-id4067 . -1) (undo-tree-id4068 . -1) (undo-tree-id4069 . -1) (undo-tree-id4070 . -1) (undo-tree-id4071 . -1) (undo-tree-id4072 . -1) (undo-tree-id4073 . -1) (undo-tree-id4074 . -1) (undo-tree-id4075 . -1) (undo-tree-id4076 . -1) (undo-tree-id4077 . -1) (undo-tree-id4078 . -1) (undo-tree-id4079 . -1) (undo-tree-id4080 . -1) (undo-tree-id4081 . -1) (undo-tree-id4082 . -1) (undo-tree-id4083 . -1) (undo-tree-id4084 . -1) (undo-tree-id4085 . -1) (undo-tree-id4086 . -1) (undo-tree-id4087 . -1) (undo-tree-id4088 . -1) (undo-tree-id4089 . -1) (undo-tree-id4090 . -1) (undo-tree-id4091 . -1) (undo-tree-id4092 . -1) (undo-tree-id4093 . -1) (undo-tree-id4094 . -1) (undo-tree-id4095 . -1) (undo-tree-id4096 . -1) (undo-tree-id4097 . -1) (undo-tree-id4098 . -1) (undo-tree-id4099 . -1) (undo-tree-id4100 . -1) (undo-tree-id4101 . -1) (undo-tree-id4102 . -1) (undo-tree-id4103 . -1) (undo-tree-id4104 . -1) (undo-tree-id4105 . -1) (undo-tree-id4106 . -1) (undo-tree-id4107 . -1) (undo-tree-id4108 . -1) (undo-tree-id4109 . -1) (undo-tree-id4110 . -1) (undo-tree-id4111 . -1) (undo-tree-id4112 . -1) (undo-tree-id4113 . -1) (undo-tree-id4114 . -1) (undo-tree-id4115 . -1) (undo-tree-id4116 . -1) (undo-tree-id4117 . -1) (undo-tree-id4118 . -1) (undo-tree-id4119 . -1) (undo-tree-id4120 . -1) (undo-tree-id4121 . -1) (undo-tree-id4122 . -1) (undo-tree-id4123 . -1) (undo-tree-id4124 . -1) (undo-tree-id4125 . -1) (undo-tree-id4126 . -1) (undo-tree-id4127 . -1) (undo-tree-id4128 . -1) (undo-tree-id4129 . -1) (undo-tree-id4130 . -1) (undo-tree-id4131 . -1) (undo-tree-id4132 . -1) (undo-tree-id4133 . -1) (undo-tree-id4134 . -1) (undo-tree-id4135 . -1) (undo-tree-id4136 . -1) (undo-tree-id4137 . -1) (undo-tree-id4138 . -1) (undo-tree-id4139 . -1) (undo-tree-id4140 . -1) (undo-tree-id4141 . -1) (undo-tree-id4142 . -1) (undo-tree-id4143 . -1) (undo-tree-id4144 . -1) 2282) ((2280 . 2282) (t 26050 14736 597386 79000)) (26050 14736 552552 468000) 0 nil])
([nil nil ((2223 . 2224)) nil (26050 14752 624101 646000) 0 nil])
nil
([nil nil ((#("d" 0 1 (fontified t)) . -2223) (undo-tree-id4635 . -1) (undo-tree-id4636 . -1) (undo-tree-id4637 . -1) (undo-tree-id4638 . -1) (undo-tree-id4639 . -1) 2224) nil (26050 14752 624100 777000) 0 nil])
([nil nil ((2223 . 2226)) nil (26050 14752 624096 930000) 0 nil])
([nil nil ((2223 . 2234) (#("raw" 0 3 (fontified nil)) . 2223) (2223 . 2226) (#("raw_display" 0 11 (fontified nil)) . -2223) (2223 . 2234) (#("raw" 0 3 (fontified t)) . -2223) (undo-tree-id4628 . -3) (undo-tree-id4629 . -1) (undo-tree-id4630 . -1) (undo-tree-id4631 . -2) (undo-tree-id4632 . -2) (undo-tree-id4633 . -3) (undo-tree-id4634 . -3) 2226) nil (26050 14752 624095 173000) 0 nil])
([nil nil ((#("handle" 0 6 (fontified t)) . -2270) (undo-tree-id4626 . -6) (undo-tree-id4627 . -6) 2276) nil (26050 14752 624089 579000) 0 nil])
([nil nil ((2270 . 2273)) nil (26050 14752 624086 481000) 0 nil])
([nil nil ((2270 . 2280) (#("raw" 0 3 (fontified nil)) . 2270) (2270 . 2273) (#("raw_window" 0 10 (fontified nil)) . -2270) (2270 . 2280) (#("raw" 0 3 (fontified t)) . -2270) (undo-tree-id4616 . -3) (undo-tree-id4617 . -1) (undo-tree-id4618 . -1) (undo-tree-id4619 . -2) (undo-tree-id4620 . -2) (undo-tree-id4621 . -3) (undo-tree-id4622 . -3) (undo-tree-id4623 . -3) (undo-tree-id4624 . -3) (undo-tree-id4625 . -3) 2273) nil (26050 14752 624082 668000) 0 nil])
([nil nil ((1746 . 1755) (1814 . 1820) (1849 . 1858) (1866 . 1875) (1940 . 1949) (1956 . 1965) (2148 . 2156) (2198 . 2202) (#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 2297) 2264 (t 26050 14752 640720 397000)) nil (26050 14770 341624 880000) 0 nil])
([nil nil ((#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -2357) (undo-tree-id4674 . -1) (undo-tree-id4675 . -1) (undo-tree-id4676 . -1) (undo-tree-id4677 . -1) (undo-tree-id4678 . -1) (undo-tree-id4679 . -1) (undo-tree-id4680 . -1) (undo-tree-id4681 . -1) (undo-tree-id4682 . -1) (undo-tree-id4683 . -1) (undo-tree-id4684 . -1) (undo-tree-id4685 . -1) 2358) nil (26050 14770 341622 728000) 0 nil])
([nil nil ((2919 . 2931) (2847 . 2855) (#("    " 0 4 (fontified nil)) . 2847) (2914 . 2915)) nil (26050 14770 341614 719000) 0 nil])
([nil nil ((#("        " 0 8 (fontified nil)) . -2923) (undo-tree-id4671 . -8) (undo-tree-id4672 . -8) (undo-tree-id4673 . -8) (2931 . 2932)) nil (26050 14770 341613 245000) 0 nil])
([nil nil ((2822 . 2830) (#("    " 0 4 (fontified t)) . 2822) (2811 . 2819) (#("    " 0 4 (fontified t)) . 2811) (2751 . 2755) (2696 . 2700) (2657 . 2661) (2619 . 2623) (2550 . 2554) (2481 . 2489) (#("    " 0 4 (fontified t)) . 2481) (2423 . 2431) (#("    " 0 4 (fontified t)) . 2423) (2363 . 2371) (#("    " 0 4 (fontified t)) . 2363) (2353 . 2361) (#("    " 0 1 (fontified t) 1 4 (fontified t)) . 2353) (undo-tree-id4652 . -4) (undo-tree-id4653 . -4) (undo-tree-id4654 . -4) (undo-tree-id4655 . -4) (undo-tree-id4656 . -4) (undo-tree-id4657 . -4) (undo-tree-id4658 . -4) (undo-tree-id4659 . -4) (undo-tree-id4660 . -4) (undo-tree-id4661 . -4) (undo-tree-id4662 . -4) (undo-tree-id4663 . -4) (undo-tree-id4664 . -4) (undo-tree-id4665 . -4) (undo-tree-id4666 . -4) (undo-tree-id4667 . -4) (undo-tree-id4668 . -4) (undo-tree-id4669 . -4) (undo-tree-id4670 . -4) 2116) nil (26050 14794 894691 522000) 0 nil])
([nil nil ((2968 . 2976) (t 26050 14770 357388 151000)) nil (26050 14876 515361 159000) 0 nil] [nil nil ((2968 . 2969) (t 26050 14770 357388 151000)) ((#(" " 0 1 (fontified t)) . 2968) (undo-tree-id4686 . -1) (undo-tree-id4687 . -1) (undo-tree-id4688 . -1) (undo-tree-id4689 . -1)) (26050 14794 894375 831000) 0 nil])
([nil nil ((2977 . 2981) (#("        " 0 8 (fontified nil)) . 2976) (2976 . 2984) (#("    " 0 4 (fontified nil)) . 2976) (undo-tree-id4720 . -4) (2975 . 2981)) nil (26050 14876 515360 58000) 0 nil])
nil
([nil nil ((2976 . 2984)) nil (26050 14876 515358 460000) 0 nil])
([nil nil ((2984 . 2985)) nil (26050 14876 515357 955000) 0 nil])
([nil nil ((2984 . 2986) (#("v" 0 1 (fontified nil)) . 2984) (2984 . 2985) (#("vk" 0 2 (fontified nil)) . -2984) (2984 . 2986) (#("v" 0 1 (fontified t)) . -2984) (undo-tree-id4719 . -1) 2985) nil (26050 14876 515357 67000) 0 nil])
([nil nil ((2986 . 2990)) nil (26050 14876 515355 115000) 0 nil])
([nil nil ((2990 . 2994)) nil (26050 14876 515354 493000) 0 nil])
([nil nil ((2988 . 2994) (#("Result" 0 6 (fontified nil)) . 2988) (2988 . 2994) (#("Result" 0 6 (face font-lock-type-face fontified t)) . -2988) (undo-tree-id4705 . -2) (undo-tree-id4706 . -6) (undo-tree-id4707 . -2) (undo-tree-id4708 . -2) (undo-tree-id4709 . -3) (undo-tree-id4710 . -3) (undo-tree-id4711 . -4) (undo-tree-id4712 . -4) (undo-tree-id4713 . -5) (undo-tree-id4714 . -5) (undo-tree-id4715 . -6) (undo-tree-id4716 . -6) (undo-tree-id4717 . -6) (undo-tree-id4718 . -6) 2994) nil (26050 14876 515353 102000) 0 nil])
([nil nil ((2994 . 3001)) nil (26050 14876 515342 833000) 0 nil])
([nil nil ((2996 . 3018) (#("ERROR" 0 5 (fontified nil)) . 2996) (2996 . 3001) (#("ERROR_SURFACE_LOST_KHR" 0 22 (fontified nil)) . -2996) (2996 . 3018) (#("ERROR" 0 5 (face font-lock-type-face fontified t)) . -2996) (undo-tree-id4690 . -5) (undo-tree-id4691 . -1) (undo-tree-id4692 . -1) (undo-tree-id4693 . -1) (undo-tree-id4694 . -1) (undo-tree-id4695 . -2) (undo-tree-id4696 . -2) (undo-tree-id4697 . -3) (undo-tree-id4698 . -3) (undo-tree-id4699 . -4) (undo-tree-id4700 . -4) (undo-tree-id4701 . -5) (undo-tree-id4702 . -5) (undo-tree-id4703 . -5) (undo-tree-id4704 . -5) 3001) nil (26050 14876 515338 347000) 0 nil])
([nil nil ((2984 . 2986) (t 26050 14876 530728 2000)) nil (26050 14888 647479 722000) 0 nil])
([nil nil ((2985 . 2986)) nil (26050 14888 647478 977000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2988 2990 nil nil nil nil #s(yas--exit 2991 nil))) #s(yas--exit 2991 nil) 60 nil #s(yas--field 1 2988 2990 nil nil nil nil #s(yas--exit 2991 nil)) nil nil)) (2984 . 2991) (#("Err(${1:()})$0" 0 14 (fontified nil)) . 2984) (2984 . 2998) (#("Er" 0 2 (fontified nil)) . 2984) (2984 . 2986) (#("Err(…)" 0 6 (fontified nil)) . -2984) (2984 . 2990) (#("Er" 0 2 (face font-lock-type-face fontified t)) . -2984) (undo-tree-id4764 . -2) (undo-tree-id4765 . -1) (undo-tree-id4766 . -1) (undo-tree-id4767 . -1) (undo-tree-id4768 . -1) (undo-tree-id4769 . -1) (undo-tree-id4770 . -1) (undo-tree-id4771 . -1) (undo-tree-id4772 . -1) (undo-tree-id4773 . -1) (undo-tree-id4774 . -2) (undo-tree-id4775 . -2) (undo-tree-id4776 . -2) (undo-tree-id4777 . -2) (undo-tree-id4778 . -2) (undo-tree-id4779 . -2) 2986) nil (26050 14888 647477 303000) 0 nil])
([nil nil ((apply yas--snippet-revive 2984 2991 #s(yas--snippet nil (#s(yas--field 1 2988 2990 nil nil nil nil #s(yas--exit 2991 nil))) #s(yas--exit 2991 nil) 60 nil #s(yas--field 1 2988 2990 nil nil nil nil #s(yas--exit 2991 nil)) nil nil))) nil (26050 14888 647466 302000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -2988) (undo-tree-id4731 . -1) (undo-tree-id4732 . -1) (undo-tree-id4733 . -1) (undo-tree-id4734 . -1) (undo-tree-id4735 . -1) (undo-tree-id4736 . -1) (undo-tree-id4737 . -1) (undo-tree-id4738 . -1) (undo-tree-id4739 . -1) (undo-tree-id4740 . -1) (undo-tree-id4741 . -1) (undo-tree-id4742 . -1) (undo-tree-id4743 . -1) (undo-tree-id4744 . -1) (undo-tree-id4745 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -2989) (undo-tree-id4746 . -1) (undo-tree-id4747 . -1) (undo-tree-id4748 . -1) (undo-tree-id4749 . -1) (undo-tree-id4750 . -1) (undo-tree-id4751 . -1) (undo-tree-id4752 . -1) (undo-tree-id4753 . -1) (undo-tree-id4754 . -1) (undo-tree-id4755 . -1) (undo-tree-id4756 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -2990) (undo-tree-id4757 . -1) (undo-tree-id4758 . -1) (undo-tree-id4759 . -1) (undo-tree-id4760 . -1) (undo-tree-id4761 . -1) (undo-tree-id4762 . -1) (undo-tree-id4763 . -1) 2991) nil (26050 14888 647463 373000) 0 nil])
([nil nil ((3023 . 3024)) nil (26050 14888 647071 256000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2988) (undo-tree-id4721 . -1) (undo-tree-id4722 . -1) (undo-tree-id4723 . -1) (undo-tree-id4724 . -1) (undo-tree-id4725 . -1) (undo-tree-id4726 . -1) (undo-tree-id4727 . -1) (undo-tree-id4728 . -1) (undo-tree-id4729 . -1) (undo-tree-id4730 . -1) 2989) nil (26050 14888 647067 543000) 0 nil])
([nil nil ((#("    let mut x11_display = None;
    let mut x11_window = None;" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 16 (face font-lock-variable-name-face fontified t) 16 23 (face font-lock-variable-name-face fontified t) 23 26 (fontified t) 26 30 (face font-lock-type-face fontified t) 30 32 (fontified t) 32 36 (fontified t) 36 39 (face font-lock-keyword-face fontified t) 39 40 (fontified t) 40 43 (face font-lock-keyword-face fontified t) 43 44 (fontified t) 44 54 (face font-lock-variable-name-face fontified t) 54 57 (fontified t) 57 61 (face font-lock-type-face fontified t) 61 62 (fontified t)) . 2051) (undo-tree-id4780 . -62) (undo-tree-id4781 . -20) (undo-tree-id4782 . -20) (undo-tree-id4783 . -20) (undo-tree-id4784 . -20) (undo-tree-id4785 . -20) (undo-tree-id4786 . -20) (undo-tree-id4787 . -20) (undo-tree-id4788 . -20) (undo-tree-id4789 . -20) (undo-tree-id4790 . -20) (undo-tree-id4791 . -20) (undo-tree-id4792 . -20) (undo-tree-id4793 . -20) (undo-tree-id4794 . -20) (undo-tree-id4795 . -20) (undo-tree-id4796 . -20) (undo-tree-id4797 . -20) (undo-tree-id4798 . -20) (undo-tree-id4799 . -20) (undo-tree-id4800 . -20) (undo-tree-id4801 . -20) (undo-tree-id4802 . -20) (undo-tree-id4803 . -20) (undo-tree-id4804 . -20) (undo-tree-id4805 . -20) (undo-tree-id4806 . -20) (undo-tree-id4807 . -20) (undo-tree-id4808 . -20) (undo-tree-id4809 . -20) (undo-tree-id4810 . -20) (undo-tree-id4811 . -20) (undo-tree-id4812 . -20) (undo-tree-id4813 . -20) (undo-tree-id4814 . -20) (undo-tree-id4815 . -20) (undo-tree-id4816 . -20) (undo-tree-id4817 . -62) (undo-tree-id4818 . -62) (undo-tree-id4819 . -62) (undo-tree-id4820 . -62) (undo-tree-id4821 . -62) (undo-tree-id4822 . -62) (undo-tree-id4823 . -62) (undo-tree-id4824 . -62) (undo-tree-id4825 . -62) (undo-tree-id4826 . -62) (undo-tree-id4827 . -62) (undo-tree-id4828 . -62) (undo-tree-id4829 . -62) (undo-tree-id4830 . -62) (undo-tree-id4831 . -62) (undo-tree-id4832 . -62) (undo-tree-id4833 . -62) (undo-tree-id4834 . -62) (undo-tree-id4835 . -62) (undo-tree-id4836 . -62) (undo-tree-id4837 . -61) (undo-tree-id4838 . -60) (undo-tree-id4839 . -59) (undo-tree-id4840 . -58) (undo-tree-id4841 . -25) (undo-tree-id4842 . -24) (undo-tree-id4843 . -23) (undo-tree-id4844 . -22) (undo-tree-id4845 . -21) (undo-tree-id4846 . -20) (undo-tree-id4847 . -19) (undo-tree-id4848 . -18) (undo-tree-id4849 . -17) (undo-tree-id4850 . -16) (undo-tree-id4851 . -15) (undo-tree-id4852 . -14) (undo-tree-id4853 . -13) (undo-tree-id4854 . -12) (undo-tree-id4855 . -11) (undo-tree-id4856 . -10) (undo-tree-id4857 . -9) (undo-tree-id4858 . -8) (undo-tree-id4859 . -7) (undo-tree-id4860 . -6) (undo-tree-id4861 . -5) (undo-tree-id4862 . -4) (undo-tree-id4863 . -3) (undo-tree-id4864 . -2) (undo-tree-id4865 . -1) (undo-tree-id4866 . -62) (t 26050 14888 694062 82000)) nil (26050 14916 943771 197000) 0 nil])
([nil nil ((2210 . 2214)) nil (26050 14916 943711 578000) 0 nil])
([nil nil ((2257 . 2261)) nil (26050 14916 943707 762000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2050) (undo-tree-id4867 . -1) (undo-tree-id4868 . -1) (undo-tree-id4869 . -1) (undo-tree-id4870 . -1) (undo-tree-id4871 . -1) (undo-tree-id4872 . -1) (undo-tree-id4873 . -1) (undo-tree-id4874 . -1) (undo-tree-id4875 . -1) (undo-tree-id4876 . -1) (undo-tree-id4877 . -1) (undo-tree-id4878 . -1) (undo-tree-id4879 . -1) (undo-tree-id4880 . -1) (undo-tree-id4881 . -1) (undo-tree-id4882 . -1) (undo-tree-id4883 . -1) (undo-tree-id4884 . -1) (undo-tree-id4885 . -1) (undo-tree-id4886 . -1) (undo-tree-id4887 . -1) (undo-tree-id4888 . -1) (undo-tree-id4889 . -1) (undo-tree-id4890 . -1) (undo-tree-id4891 . -1) (undo-tree-id4892 . -1) (undo-tree-id4893 . -1) (undo-tree-id4894 . -1) (undo-tree-id4895 . -1) (undo-tree-id4896 . -1) (undo-tree-id4897 . -1) (undo-tree-id4898 . -1) (undo-tree-id4899 . -1) (undo-tree-id4900 . -1) (undo-tree-id4901 . -1) (undo-tree-id4902 . -1) (undo-tree-id4903 . -1) (undo-tree-id4904 . -1) (undo-tree-id4905 . -1) (undo-tree-id4906 . -1) (undo-tree-id4907 . -1) (undo-tree-id4908 . -1) (undo-tree-id4909 . -1) (undo-tree-id4910 . -1) (undo-tree-id4911 . -1) (undo-tree-id4912 . -1) (undo-tree-id4913 . -1) (undo-tree-id4914 . -1) (undo-tree-id4915 . -1) (undo-tree-id4916 . -1) (undo-tree-id4917 . -1) (undo-tree-id4918 . -1) (undo-tree-id4919 . -1) (undo-tree-id4920 . -1) (undo-tree-id4921 . -1) (undo-tree-id4922 . -1) (undo-tree-id4923 . -1) (undo-tree-id4924 . -1) (undo-tree-id4925 . -1) (undo-tree-id4926 . -1) (undo-tree-id4927 . -1) (undo-tree-id4928 . -1) (undo-tree-id4929 . -1) (undo-tree-id4930 . -1) (undo-tree-id4931 . -1) (undo-tree-id4932 . -1) (undo-tree-id4933 . -1) (undo-tree-id4934 . -1) (undo-tree-id4935 . -1) (undo-tree-id4936 . -1) (undo-tree-id4937 . -1) (undo-tree-id4938 . -1) (undo-tree-id4939 . -1) (undo-tree-id4940 . -1) (undo-tree-id4941 . -1) (undo-tree-id4942 . -1) (undo-tree-id4943 . -1) (undo-tree-id4944 . -1) (undo-tree-id4945 . -1) (undo-tree-id4946 . -1) (undo-tree-id4947 . -1) (undo-tree-id4948 . -1) (undo-tree-id4949 . -1) (undo-tree-id4950 . -1) (undo-tree-id4951 . -1) (undo-tree-id4952 . -1) (undo-tree-id4953 . -1) (undo-tree-id4954 . -1) (undo-tree-id4955 . -1) (undo-tree-id4956 . -1) (undo-tree-id4957 . -1) (undo-tree-id4958 . -1) (undo-tree-id4959 . -1) (undo-tree-id4960 . -1) (undo-tree-id4961 . -1) 2051 (t 26050 14916 990730 486000)) nil (26050 14922 379609 482000) 0 nil])
([nil nil ((#("KHR" 0 3 (face font-lock-type-face fontified t)) . -2964) (undo-tree-id4988 . -3) (undo-tree-id4989 . -3) 2967 (t 26050 14922 394064 151000)) nil (26050 14956 338106 91000) 0 nil])
([nil nil ((#("LOST_" 0 5 (face font-lock-type-face fontified t)) . -2959) (undo-tree-id4984 . -5) (undo-tree-id4985 . -4) (undo-tree-id4986 . -5) (undo-tree-id4987 . -5) 2964) nil (26050 14956 338104 90000) 0 nil])
([nil nil ((#("_" 0 1 (face font-lock-type-face fontified t)) . -2958) (undo-tree-id4977 . -1) (undo-tree-id4978 . -1) (undo-tree-id4979 . -1) (undo-tree-id4980 . -1) (undo-tree-id4981 . -1) (undo-tree-id4982 . -1) (undo-tree-id4983 . -1) 2959) nil (26050 14956 338100 836000) 0 nil])
([nil nil ((2958 . 2959)) nil (26050 15024 651618 996000) 0 nil])
([nil nil ((2959 . 2960)) nil (26050 15027 352904 158000) 0 nil] [nil nil ((2945 . 2967) (#("ERROR_SURFACE_" 0 14 (fontified nil)) . 2945) (2945 . 2959) (#("ERROR_SURFACE_LOST_KHR" 0 22 (fontified nil)) . -2945) (2945 . 2967) (#("ERROR_SURFACE_" 0 14 (face font-lock-type-face fontified t)) . -2945) (undo-tree-id4962 . -14) (undo-tree-id4964 . -13) (undo-tree-id4966 . -13) (undo-tree-id4968 . -13) (undo-tree-id4970 . -13) (undo-tree-id4972 . -13) (undo-tree-id4974 . -14) (undo-tree-id4976 . -14) 2959) ((2945 . 2959) (#("ERROR_SURFACE_LOST_KHR" 0 22 (fontified nil)) . 2945) (2945 . 2967) (#("ERROR_SURFACE_" 0 14 (fontified nil)) . 2945) (2945 . 2959) (#("ERROR_SURFACE_LOST_KHR" 0 22 (face font-lock-type-face fontified t)) . 2945) (t 26050 14956 384066 237000)) (26050 15024 263027 291000) 0 nil])
([nil nil ((2945 . 2967) (#("ERROR_SURFACE_L" 0 15 (fontified nil)) . 2945) (2945 . 2960) (#("ERROR_SURFACE_LOST_KHR" 0 22 (fontified nil)) . -2945) (2945 . 2967) (#("ERROR_SURFACE_L" 0 15 (face font-lock-type-face fontified t)) . -2945) (undo-tree-id4990 . -15) (undo-tree-id4991 . -14) (undo-tree-id4992 . -14) (undo-tree-id4993 . -14) (undo-tree-id4994 . -15) 2960) nil (26050 15027 352900 161000) 0 nil])
([nil nil ((2246 . 2248) (t 26050 14956 384066 237000)) ((#(".u" 0 2 (fontified t)) . 2246)) (26050 15024 262307 427000) 0 nil])
([nil nil ((2246 . 2248) (t 26050 15027 367403 928000)) nil (26050 15032 926846 205000) 0 nil])
nil
([nil nil ((apply yas--snippet-revive 2247 2255 #s(yas--snippet nil nil #s(yas--exit 2255 nil) 61 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2255 nil) 61 nil nil nil nil)) (2247 . 2255) (#("unwrap()$0" 0 10 (fontified nil)) . 2247) (2247 . 2257) (#("u" 0 1 (fontified nil)) . 2247) (2247 . 2248) (#("unwrap()" 0 8 (fontified nil)) . -2247) (2247 . 2255) (#("u" 0 1 (fontified t)) . -2247) (undo-tree-id4995 . -1) (undo-tree-id4996 . -1) (undo-tree-id4997 . -1) (undo-tree-id4998 . -1) (undo-tree-id4999 . -1) (undo-tree-id5000 . -1) 2248) nil (26050 15032 926842 381000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -2304) (undo-tree-id5003 . -1) (undo-tree-id5004 . -1) (undo-tree-id5005 . -1) (undo-tree-id5006 . -1) (undo-tree-id5007 . -1) (undo-tree-id5008 . -1) (undo-tree-id5009 . -1) (undo-tree-id5010 . -1) (undo-tree-id5011 . -1) 2305 (t 26050 15032 930737 603000)) nil (26050 15037 150414 385000) 0 nil])
([nil nil ((#("Some(" 0 4 (face font-lock-type-face fontified t) 4 5 (face (rainbow-delimiters-depth-3-face) fontified t)) . -2282) (undo-tree-id5001 . -5) (undo-tree-id5002 . -5) 2287) nil (26050 15037 150404 420000) 0 nil])
([nil nil ((#("unwrap()" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-4-face) fontified t) 7 8 (face (rainbow-delimiters-depth-4-face) fontified t)) . -2667) (undo-tree-id5031 . -8) (undo-tree-id5032 . -8) (undo-tree-id5033 . -7) (undo-tree-id5034 . -7) (undo-tree-id5035 . -7) (undo-tree-id5036 . -7) (undo-tree-id5037 . -7) (undo-tree-id5038 . -7) (undo-tree-id5039 . -7) (undo-tree-id5040 . -7) (undo-tree-id5041 . -7) (undo-tree-id5042 . -8) (undo-tree-id5043 . -8) (undo-tree-id5044 . -8) (undo-tree-id5045 . -8) (undo-tree-id5046 . -8) (undo-tree-id5047 . -8) (undo-tree-id5048 . -8) 2675 (t 26050 15037 167404 530000)) nil (26050 15046 465353 204000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2666) (undo-tree-id5012 . -1) (undo-tree-id5013 . -1) (undo-tree-id5014 . -1) (undo-tree-id5015 . -1) (undo-tree-id5016 . -1) (undo-tree-id5017 . -1) (undo-tree-id5018 . -1) (undo-tree-id5019 . -1) (undo-tree-id5020 . -1) (undo-tree-id5021 . -1) (undo-tree-id5022 . -1) (undo-tree-id5023 . -1) (undo-tree-id5024 . -1) (undo-tree-id5025 . -1) (undo-tree-id5026 . -1) (undo-tree-id5027 . -1) (undo-tree-id5028 . -1) (undo-tree-id5029 . -1) (undo-tree-id5030 . -1) 2667) nil (26050 15046 465338 662000) 0 nil])
([nil nil ((#("unwrap()" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-4-face) fontified t) 7 8 (face (rainbow-delimiters-depth-4-face) fontified t)) . -2711) (undo-tree-id5070 . -4) (undo-tree-id5071 . -7) (undo-tree-id5072 . -8) (undo-tree-id5073 . -1) (undo-tree-id5074 . -1) (undo-tree-id5075 . -1) (undo-tree-id5076 . -1) (undo-tree-id5077 . -6) (undo-tree-id5078 . -7) (undo-tree-id5079 . -7) (undo-tree-id5080 . -7) (undo-tree-id5081 . -7) (undo-tree-id5082 . -7) (undo-tree-id5083 . -7) (undo-tree-id5084 . -7) (undo-tree-id5085 . -7) (undo-tree-id5086 . -7) (undo-tree-id5087 . -8) 2719 (t 26050 15046 480738 434000)) nil (26050 15050 630346 784000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2710) (undo-tree-id5049 . -1) (undo-tree-id5050 . -1) (undo-tree-id5051 . -1) (undo-tree-id5052 . -1) (undo-tree-id5053 . -1) (undo-tree-id5054 . -1) (undo-tree-id5055 . -1) (undo-tree-id5056 . -1) (undo-tree-id5057 . -1) (undo-tree-id5058 . -1) (undo-tree-id5059 . -1) (undo-tree-id5060 . -1) (undo-tree-id5061 . -1) (undo-tree-id5062 . -1) (undo-tree-id5063 . -1) (undo-tree-id5064 . -1) (undo-tree-id5065 . -1) (undo-tree-id5066 . -1) (undo-tree-id5067 . -1) (undo-tree-id5068 . -1) (undo-tree-id5069 . -1) 2711) nil (26050 15050 630331 739000) 0 nil])
([nil current ((#("
        " 0 1 (fontified t) 1 9 (fontified t)) . -2300) 2353 (t 26050 15050 634072 22000)) nil (26050 15059 54902 713000) 0 nil])
nil
