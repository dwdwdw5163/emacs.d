(undo-tree-save-format-version . 1)
"8ef74db8ec8a66e644fb048155e93cc4bac0deb0"
[nil nil nil nil (26116 11537 356355 283000) 0 nil]
([nil nil ((1 . 3) (t 26116 11258 94770 540000)) nil (26116 11537 356351 316000) 0 nil])
([nil nil ((1 . 8) (t 26116 11537 364787 683000)) nil (26116 11701 305848 723000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-constant-face fontified t)) . -7) (undo-tree-id9 . -1) 8) nil (26116 11701 305847 602000) 0 nil])
([nil nil ((5 . 13) (#("sy" 0 2 (fontified nil)) . 5) (5 . 7) (#("syscalls" 0 8 (fontified nil)) . -5) (5 . 13) (#("sy" 0 2 (face font-lock-constant-face fontified t)) . -5) (undo-tree-id7 . -2) (undo-tree-id8 . -2) 7) nil (26116 11701 305845 349000) 0 nil])
([nil nil ((13 . 15)) nil (26116 11701 305842 456000) 0 nil])
([nil nil ((1 . 2)) nil (26116 11701 305841 697000) 0 nil])
([nil nil ((1 . 4)) nil (26116 11701 305840 900000) 0 nil])
([nil nil ((4 . 7)) nil (26116 11701 305839 607000) 0 nil])
([nil nil ((5 . 12) (#("me" 0 2 (fontified nil)) . 5) (5 . 7) (#("memory;" 0 7 (fontified nil)) . -5) (5 . 12) (#("me" 0 2 (face font-lock-constant-face fontified t)) . -5) (undo-tree-id0 . -2) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -2) (undo-tree-id4 . -2) (undo-tree-id5 . -2) (undo-tree-id6 . -2) 7) nil (26116 11701 305835 682000) 0 nil])
([nil nil ((27 . 29) (t 26116 11701 314797 748000)) nil (26116 11732 740400 687000) 0 nil])
([nil nil ((#("Sy" 0 2 (face font-lock-type-face fontified t)) . -27) (undo-tree-id81 . -2) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -2) (undo-tree-id86 . -2) (undo-tree-id87 . -2) (undo-tree-id88 . -2) (undo-tree-id89 . -2) 29) nil (26116 11732 740399 216000) 0 nil])
([nil nil ((27 . 28)) nil (26116 11732 740391 582000) 0 nil])
([nil nil ((27 . 33) (#("x" 0 1 (fontified nil)) . 27) (27 . 28) (#("x86_64" 0 6 (fontified nil)) . -27) (27 . 33) (#("x" 0 1 (fontified t)) . -27) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) 28) nil (26116 11732 740389 367000) 0 nil])
([nil nil ((33 . 35)) nil (26116 11732 739626 355000) 0 nil])
([nil nil ((#("64::" 0 2 (face font-lock-constant-face fontified t) 2 4 (fontified t)) . -31) (undo-tree-id57 . -4) (undo-tree-id58 . -2) (undo-tree-id59 . -2) (undo-tree-id60 . -2) (undo-tree-id61 . -2) (undo-tree-id62 . -2) (undo-tree-id63 . -2) (undo-tree-id64 . -2) (undo-tree-id65 . -2) (undo-tree-id66 . -2) (undo-tree-id67 . -2) (undo-tree-id68 . -3) (undo-tree-id69 . -3) (undo-tree-id70 . -4) (undo-tree-id71 . -4) (undo-tree-id72 . -4) (undo-tree-id73 . -4) (undo-tree-id74 . -4) 35) nil (26116 11732 739624 926000) 0 nil])
([nil nil ((#("x86_" 0 4 (fontified t)) . -27) (undo-tree-id36 . -4) (undo-tree-id37 . -4) (undo-tree-id38 . -4) (undo-tree-id39 . -4) (undo-tree-id40 . -4) (undo-tree-id41 . -4) (undo-tree-id42 . -4) (undo-tree-id43 . -4) (undo-tree-id44 . -4) (undo-tree-id45 . -4) (undo-tree-id46 . -4) (undo-tree-id47 . -4) (undo-tree-id48 . -4) (undo-tree-id49 . -4) (undo-tree-id50 . -4) (undo-tree-id51 . -4) (undo-tree-id52 . -4) (undo-tree-id53 . -4) (undo-tree-id54 . -4) (undo-tree-id55 . -4) (undo-tree-id56 . -4) 31) nil (26116 11732 739609 264000) 0 nil])
([nil nil ((27 . 28)) nil (26116 11732 739592 849000) 0 nil])
([nil nil ((27 . 32) (#("S" 0 1 (fontified nil)) . 27) (27 . 28) (#("Sysno" 0 5 (fontified nil)) . -27) (27 . 32) (#("S" 0 1 (face font-lock-type-face fontified t)) . -27) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) 28) nil (26116 11732 739591 380000) 0 nil])
([nil nil ((32 . 41)) nil (26116 11732 739584 596000) 0 nil])
([nil nil ((apply yas--snippet-revive 34 50 #s(yas--snippet nil nil #s(yas--exit 50 nil) 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 50 nil) 0 nil nil nil nil)) (34 . 50) (#("process_vm_readv$0" 0 18 (fontified nil)) . 34) (34 . 52) (#("process" 0 7 (fontified nil)) . 34) (34 . 41) (#("process_vm_readv" 0 16 (fontified nil)) . -34) (34 . 50) (#("process" 0 7 (fontified t)) . -34) (undo-tree-id10 . -7) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -2) (undo-tree-id15 . -2) (undo-tree-id16 . -3) (undo-tree-id17 . -3) (undo-tree-id18 . -4) (undo-tree-id19 . -4) (undo-tree-id20 . -5) (undo-tree-id21 . -5) (undo-tree-id22 . -6) (undo-tree-id23 . -6) (undo-tree-id24 . -7) (undo-tree-id25 . -7) (undo-tree-id26 . -7) (undo-tree-id27 . -7) (undo-tree-id28 . -7) 41) nil (26116 11732 739581 183000) 0 nil])
([nil nil ((50 . 51)) nil (26116 11732 739555 331000) 0 nil])
([nil nil ((#("use syscalls::Sysno::process_vm_readv;" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 12 (face font-lock-constant-face fontified t) 12 14 (fontified t) 14 19 (face font-lock-type-face fontified t) 19 21 (fontified t) 21 38 (fontified t)) . 13) (undo-tree-id90 . -38) (t 26116 11732 751466 344000)) nil (26116 13293 203838 817000) 0 nil])
([nil nil ((57 . 62) (t 26116 13288 378228 503000)) nil (26116 13348 499120 487000) 0 nil] [nil nil ((#("
" 0 1 (fontified t)) . 57) (t 26116 13288 378228 503000)) ((57 . 58)) (26116 13292 302781 220000) 0 nil])
([nil nil ((62 . 64)) nil (26116 13348 499119 783000) 0 nil])
([nil nil ((57 . 58)) ((#("
" 0 1 (fontified t)) . 57) (undo-tree-id91 . -1) (undo-tree-id92 . -1)) (26116 13292 302576 753000) 0 nil])
([nil nil ((apply yas--snippet-revive 62 72 #s(yas--snippet nil nil #s(yas--exit 71 nil) 28 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 71 nil) 28 nil nil nil nil)) (62 . 72) (#("println!($0)" 0 12 (fontified nil)) . 62) (62 . 74) (#("pr" 0 2 (fontified nil)) . 62) (62 . 64) (#("println!(…)" 0 11 (fontified nil)) . -62) (62 . 73) (#("pr" 0 2 (fontified t)) . -62) (undo-tree-id115 . -2) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -2) (undo-tree-id119 . -2) (undo-tree-id120 . -2) (undo-tree-id121 . -2) 64) nil (26116 13348 499118 427000) 0 nil])
nil
([nil nil ((71 . 72)) nil (26116 13348 499112 502000) 0 nil])
([nil nil ((72 . 73)) nil (26116 13348 499111 899000) 0 nil])
([nil nil ((72 . 74)) nil (26116 13348 499111 339000) 0 nil])
([nil nil ((75 . 78)) nil (26116 13348 499110 675000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -77) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) 78) nil (26116 13348 499109 547000) 0 nil])
([nil nil ((77 . 79)) nil (26116 13348 499105 71000) 0 nil])
([nil nil ((77 . 83) (#("me" 0 2 (fontified nil)) . 77) (77 . 79) (#("memory" 0 6 (fontified nil)) . -77) (77 . 83) (#("me" 0 2 (fontified t)) . -77) (undo-tree-id102 . -2) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -2) (undo-tree-id108 . -2) 79) nil (26116 13348 499103 848000) 0 nil])
([nil nil ((83 . 85)) nil (26116 13348 499097 958000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 93 100 nil nil nil t #s(yas--exit 101 nil))) #s(yas--exit 101 nil) 29 nil #s(yas--field 1 93 100 nil nil nil t #s(yas--exit 101 nil)) nil nil)) (85 . 98) (#("get_pid(${1:name})$0" 0 20 (fontified nil)) . 85) (85 . 105) (#("get_pid(…)" 0 10 (fontified nil)) . -85) (85 . 95)) nil (26116 13348 499097 40000) 0 nil])
([nil nil ((94 . 95) (#("name" 0 4 (fontified nil)) . 94) (undo-tree-id101 . -4) (93 . 94)) nil (26116 13348 499095 570000) 0 nil])
([nil nil ((94 . 99)) nil (26116 13348 499093 946000) 0 nil])
([nil nil ((apply yas--snippet-revive 85 101 #s(yas--snippet nil (#s(yas--field 1 93 100 nil nil nil t #s(yas--exit 101 nil))) #s(yas--exit 101 nil) 29 nil #s(yas--field 1 93 100 nil nil nil t #s(yas--exit 101 nil)) nil nil))) nil (26116 13348 499093 342000) 0 nil])
([nil nil ((100 . 103)) nil (26116 13348 499092 593000) 0 nil])
([nil nil ((apply yas--snippet-revive 101 112 #s(yas--snippet nil nil #s(yas--exit 112 nil) 30 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 112 nil) 30 nil nil nil nil)) (101 . 112) (#("to_string()$0" 0 13 (fontified nil)) . 101) (101 . 114) (#("to" 0 2 (fontified nil)) . 101) (101 . 103) (#("to_string() (as ToString)" 0 25 (fontified nil)) . -101) (101 . 126) (#("to" 0 2 (fontified t)) . -101) (undo-tree-id93 . -2) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -2) (undo-tree-id98 . -2) (undo-tree-id99 . -2) (undo-tree-id100 . -2) 103) nil (26116 13348 499089 826000) 0 nil])
([nil nil ((114 . 115)) nil (26116 13348 499074 609000) 0 nil])
([nil nil ((73 . 75) (t 26116 13348 511565 528000)) nil (26116 13358 280177 879000) 0 nil])
([nil nil ((57 . 62) (t 26116 13358 291566 128000)) nil (26116 15919 486071 513000) 0 nil])
([nil nil ((62 . 69)) nil (26116 15919 486070 578000) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-variable-name-face fontified t)) . -68) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) 69) nil (26116 15919 486069 292000) 0 nil])
([nil nil ((68 . 72)) nil (26116 15919 486058 449000) 0 nil])
([nil nil ((nil rear-nonsticky nil 107 . 108) (nil fontified nil 107 . 108) (nil fontified nil 106 . 107) (nil fontified nil 105 . 106) (nil fontified nil 96 . 105) (nil fontified nil 95 . 96) (nil fontified nil 88 . 95) (nil fontified nil 87 . 88) (nil fontified nil 80 . 87) (nil fontified nil 78 . 80) (nil fontified nil 72 . 78) (72 . 108)) nil (26116 15919 486056 474000) 0 nil])
([nil nil ((108 . 109)) nil (26116 15919 486051 131000) 0 nil])
([nil nil ((#("string())" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-4-face) fontified t) 7 8 (face (rainbow-delimiters-depth-4-face) fontified t) 8 9 (face (rainbow-delimiters-depth-3-face) fontified t)) . -158) (undo-tree-id173 . -9) (undo-tree-id174 . -6) (undo-tree-id175 . -9) 167 (t 26116 15919 528390 12000)) nil (26116 15925 22064 133000) 0 nil])
([nil nil ((#("to_" 0 3 (fontified t)) . -155) (undo-tree-id168 . -3) (undo-tree-id169 . -3) (undo-tree-id170 . -3) (undo-tree-id171 . -3) (undo-tree-id172 . -3) 158) nil (26116 15925 22061 380000) 0 nil])
([nil nil ((#("steam\"." 0 6 (face font-lock-string-face fontified t) 6 7 (fontified t)) . -148) (undo-tree-id161 . -7) (undo-tree-id162 . -7) (undo-tree-id163 . -7) (undo-tree-id164 . -7) (undo-tree-id165 . -7) (undo-tree-id166 . -7) (undo-tree-id167 . -7) 155) nil (26116 15925 22057 235000) 0 nil])
([nil nil ((#("pid(\"" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-3-face) fontified t) 4 5 (face font-lock-string-face fontified t)) . -143) (undo-tree-id152 . -5) (undo-tree-id153 . -5) (undo-tree-id154 . -5) (undo-tree-id155 . -5) (undo-tree-id156 . -5) (undo-tree-id157 . -5) (undo-tree-id158 . -5) (undo-tree-id159 . -5) (undo-tree-id160 . -5) 148) nil (26116 15925 22051 945000) 0 nil])
([nil nil ((#("get_" 0 4 (fontified t)) . -139) (undo-tree-id141 . -4) (undo-tree-id142 . -4) (undo-tree-id143 . -4) (undo-tree-id144 . -4) (undo-tree-id145 . -4) (undo-tree-id146 . -4) (undo-tree-id147 . -4) (undo-tree-id148 . -4) (undo-tree-id149 . -4) (undo-tree-id150 . -4) (undo-tree-id151 . -4) 143) nil (26116 15925 22045 653000) 0 nil])
([nil nil ((#("memory::" 0 6 (face font-lock-constant-face fontified t) 6 8 (fontified t)) . -131) (undo-tree-id128 . -8) (undo-tree-id129 . -8) (undo-tree-id130 . -8) (undo-tree-id131 . -8) (undo-tree-id132 . -8) (undo-tree-id133 . -8) (undo-tree-id134 . -8) (undo-tree-id135 . -8) (undo-tree-id136 . -8) (undo-tree-id137 . -8) (undo-tree-id138 . -8) (undo-tree-id139 . -8) (undo-tree-id140 . -8) 139) nil (26116 15925 22037 727000) 0 nil])
([nil nil ((131 . 132)) nil (26116 15925 22028 517000) 0 nil])
([nil nil ((131 . 134) (#("p" 0 1 (fontified nil)) . 131) (131 . 132) (#("pid" 0 3 (fontified nil)) . -131) (131 . 134) (#("p" 0 1 (fontified t)) . -131) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) 132) nil (26116 15925 22024 152000) 0 nil])
([nil nil ((108 . 110) (t 26116 15925 65057 19000)) nil (26116 15928 320095 690000) 0 nil])
([nil nil ((apply yas--snippet-revive 109 117 #s(yas--snippet nil nil #s(yas--exit 117 nil) 55 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 117 nil) 55 nil nil nil nil)) (109 . 117) (#("unwrap()$0" 0 10 (fontified nil)) . 109) (109 . 119) (#("u" 0 1 (fontified nil)) . 109) (109 . 110) (#("unwrap()" 0 8 (fontified nil)) . -109) (109 . 117) (#("u" 0 1 (fontified t)) . -109) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) 110) nil (26116 15928 320091 500000) 0 nil])
([nil nil ((120 . 124) (#("    " 0 4 (fontified nil)) . 119) (undo-tree-id273 . -4) (undo-tree-id274 . -4) (undo-tree-id275 . -4) (undo-tree-id276 . -4) (118 . 124) (t 26116 15928 361723 888000)) nil (26116 15950 496338 99000) 0 nil])
([nil nil ((119 . 123)) nil (26116 15950 496334 649000) 0 nil])
([nil nil ((14 . 15)) nil (26116 15950 496334 74000) 0 nil])
([nil nil ((14 . 19)) nil (26116 15950 496333 470000) 0 nil])
([nil nil ((18 . 24) (#("m" 0 1 (fontified nil)) . 18) (18 . 19) (#("memory" 0 6 (fontified nil)) . -18) (18 . 24) (#("m" 0 1 (face font-lock-constant-face fontified t)) . -18) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) 19) nil (26116 15950 496332 355000) 0 nil])
([nil nil ((24 . 26)) nil (26116 15950 496329 129000) 0 nil])
([nil nil ((26 . 34) (#("Readable" 0 8 (fontified nil)) . -26) (26 . 34)) nil (26116 15950 496328 431000) 0 nil])
([nil nil ((34 . 35)) nil (26116 15950 496327 537000) 0 nil])
([nil nil ((35 . 37)) nil (26116 15950 496326 980000) 0 nil])
([nil nil ((37 . 40)) nil (26116 15950 496326 392000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 42 55 nil nil nil t #s(yas--exit 62 nil))) #s(yas--exit 62 nil) 56 nil #s(yas--field 1 42 55 nil nil nil t #s(yas--exit 62 nil)) nil nil)) (37 . 51) (#("impl $1 {
    $0
}" 0 18 (fontified nil)) . 37) (37 . 55) (#("imp" 0 3 (fontified nil)) . 37) (37 . 40) (#("impl" 0 4 (fontified nil)) . -37) (37 . 41) (#("imp" 0 3 (fontified t)) . -37) (undo-tree-id263 . -3) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -2) (undo-tree-id267 . -2) (undo-tree-id268 . -3) (undo-tree-id269 . -3) 40) nil (26116 15950 496324 853000) 0 nil])
([nil nil ((42 . 44)) nil (26116 15950 496318 329000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -42) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (#("R" 0 1 (face font-lock-type-face fontified t)) . -43) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) 44) nil (26116 15950 496316 862000) 0 nil])
([nil nil ((42 . 43)) nil (26116 15950 495576 92000) 0 nil])
([nil nil ((42 . 50) (#("R" 0 1 (fontified nil)) . 42) (undo-tree-id239 . -1) (42 . 43) (#("Readable" 0 8 (fontified nil)) . -42) (undo-tree-id240 . -8) (42 . 50) (#("R" 0 1 (face font-lock-type-face fontified t)) . -42) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) 43) nil (26116 15950 495574 846000) 0 nil])
([nil nil ((50 . 52)) nil (26116 15950 495567 854000) 0 nil])
([nil nil ((51 . 52)) nil (26116 15950 495567 322000) 0 nil])
([nil nil ((52 . 54)) nil (26116 15950 495566 714000) 0 nil])
([nil nil ((apply yas--snippet-revive 37 64 #s(yas--snippet nil (#s(yas--field 1 42 55 nil nil nil t #s(yas--exit 62 nil))) #s(yas--exit 62 nil) 56 nil #s(yas--field 1 42 55 nil nil nil t #s(yas--exit 62 nil)) nil nil))) nil (26116 15950 495566 159000) 0 nil])
([nil nil ((56 . 57)) nil (26116 15950 495565 534000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -55) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (#("f" 0 1 (fontified t)) . -56) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) 57) nil (26116 15950 495564 168000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -51) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (#("3" 0 1 (fontified t)) . -52) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (#("2" 0 1 (face font-lock-type-face fontified t)) . -53) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) 54) nil (26116 15950 495550 749000) 0 nil])
([nil nil ((51 . 54)) nil (26116 15950 495530 391000) 0 nil])
([nil nil ((55 . 61)) nil (26116 15950 495529 260000) 0 nil])
([nil nil ((60 . 63) (#("u" 0 1 (fontified nil)) . 60) (60 . 61) (#("u32" 0 3 (fontified nil)) . -60) (60 . 63) (#("u" 0 1 (face font-lock-variable-name-face fontified t)) . -60) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) 61) nil (26116 15950 495525 182000) 0 nil])
([nil nil ((181 . 187) (t 26116 15950 508391 914000)) nil (26116 15974 139369 997000) 0 nil])
([nil nil ((#("u" 0 1 (face font-lock-variable-name-face fontified t)) . -185) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (#("3" 0 1 (face font-lock-variable-name-face fontified t)) . -186) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) 187) nil (26116 15974 139368 655000) 0 nil])
([nil nil ((185 . 190)) nil (26116 15974 139359 883000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -188) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (#("=" 0 1 (fontified t)) . -189) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) 190) nil (26116 15974 139358 669000) 0 nil])
([nil nil ((188 . 190)) nil (26116 15974 139351 37000) 0 nil])
([nil nil ((#("L" 0 1 (face font-lock-type-face fontified t)) . -189) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) 190) nil (26116 15974 139350 167000) 0 nil])
([nil nil ((189 . 190)) nil (26116 15974 139346 268000) 0 nil])
([nil nil ((#("7" 0 1 (fontified t)) . -189) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) 190) nil (26116 15974 139345 428000) 0 nil])
([nil nil ((189 . 193)) nil (26116 15974 139341 799000) 0 nil])
([nil nil ((189 . 190)) nil (26116 15974 139341 251000) 0 nil])
([nil nil ((193 . 194)) nil (26116 15974 139340 661000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -193) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) 194) nil (26116 15974 139339 374000) 0 nil])
([nil nil ((193 . 198)) nil (26116 15974 139129 942000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -196) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) 197) nil (26116 15974 139127 667000) 0 nil])
([nil nil ((196 . 197)) nil (26116 15974 139110 958000) 0 nil])
([nil nil ((204 . 207) (t 26116 15974 181726 701000)) nil (26116 16182 939669 591000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -206) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) 207) nil (26116 16182 939668 727000) 0 nil])
([nil nil ((206 . 209)) nil (26116 16182 939665 535000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 213 216 nil nil nil nil #s(yas--field 2 218 225 nil nil nil nil #s(yas--exit 226 nil))) #s(yas--field 2 218 225 nil nil nil nil #s(yas--exit 226 nil))) #s(yas--exit 226 nil) 57 nil #s(yas--field 1 213 216 nil nil nil nil #s(yas--field 2 218 225 nil nil nil nil #s(yas--exit 226 nil))) nil nil)) (208 . 226) (#("read(${1:pid}, ${2:address})$0" 0 30 (fontified nil)) . 208) (208 . 238) (#("r" 0 1 (fontified nil)) . 208) (208 . 209) (#("read(…) (as Readable)" 0 21 (fontified nil)) . -208) (208 . 229) (#("r" 0 1 (fontified t)) . -208) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) 209) nil (26116 16182 939664 223000) 0 nil])
([nil nil ((apply yas--snippet-revive 208 226 #s(yas--snippet nil (#s(yas--field 1 213 216 nil nil nil nil #s(yas--field 2 218 225 nil nil nil nil #s(yas--exit 226 nil))) #s(yas--field 2 218 225 nil nil nil nil #s(yas--exit 226 nil))) #s(yas--exit 226 nil) 57 nil #s(yas--field 1 213 216 nil nil nil nil #s(yas--field 2 218 225 nil nil nil nil #s(yas--exit 226 nil))) nil nil))) nil (26116 16182 939659 735000) 0 nil])
([nil nil ((#("address" 0 7 (fontified t)) . -218) (undo-tree-id327 . -7) (undo-tree-id328 . -7) (undo-tree-id329 . -7) (undo-tree-id330 . -7) (undo-tree-id331 . -7) (undo-tree-id332 . -7) (undo-tree-id333 . -7) 225) nil (26116 16182 939658 253000) 0 nil])
([nil nil ((nil rear-nonsticky nil 231 . 232) (nil fontified nil 218 . 232) (218 . 232)) nil (26116 16182 939647 335000) 0 nil])
([nil nil ((233 . 234)) nil (26116 16182 939643 802000) 0 nil])
([nil nil ((185 . 189) (t 26116 16182 951739 517000)) nil (26116 16188 956679 713000) 0 nil])
([nil nil ((#("println!(\"{:?}\", pid);" 0 8 (face rust-builtin-formatting-macro fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t) 9 10 (face font-lock-string-face fontified t) 10 14 (face rust-string-interpolation fontified t) 14 15 (face font-lock-string-face fontified t) 15 17 (fontified t) 17 20 (fontified t) 20 21 (face (rainbow-delimiters-depth-2-face) fontified t) 21 22 (fontified t)) . 243) (undo-tree-id369 . -17) (undo-tree-id370 . -8) (undo-tree-id371 . -8) (undo-tree-id372 . -8) (undo-tree-id373 . -8) (undo-tree-id374 . -22) (undo-tree-id375 . -22) (undo-tree-id376 . -22) (undo-tree-id377 . -22) (undo-tree-id378 . -22) (undo-tree-id379 . -22) (t 26116 16188 958406 552000)) nil (26116 16211 670154 177000) 0 nil])
([nil nil ((176 . 181)) nil (26116 16211 670146 654000) 0 nil])
([nil nil ((nil rear-nonsticky nil 202 . 203) (nil fontified nil 202 . 203) (nil fontified nil 201 . 202) (nil fontified nil 198 . 201) (nil fontified nil 196 . 198) (nil fontified nil 195 . 196) (nil fontified nil 191 . 195) (nil fontified nil 190 . 191) (nil fontified nil 189 . 190) (nil fontified nil 181 . 189) (181 . 203)) nil (26116 16211 670145 649000) 0 nil])
([nil nil ((270 . 275)) nil (26116 16211 670144 31000) 0 nil])
([nil nil ((apply yas--snippet-revive 270 280 #s(yas--snippet nil nil #s(yas--exit 279 nil) 58 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 279 nil) 58 nil nil nil nil)) (270 . 280) (#("println!($0)" 0 12 (fontified nil)) . 270) (270 . 282) (#("print" 0 5 (fontified nil)) . 270) (270 . 275) (#("println!(…)" 0 11 (fontified nil)) . -270) (270 . 281) (#("print" 0 5 (fontified t)) . -270) (undo-tree-id356 . -5) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -2) (undo-tree-id360 . -2) (undo-tree-id361 . -3) (undo-tree-id362 . -3) (undo-tree-id363 . -4) (undo-tree-id364 . -4) (undo-tree-id365 . -5) (undo-tree-id366 . -5) (undo-tree-id367 . -5) (undo-tree-id368 . -5) 275) nil (26116 16211 670142 540000) 0 nil])
([nil nil ((279 . 281)) nil (26116 16211 670133 105000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . 280) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) 281) nil (26116 16211 670132 254000) 0 nil])
([nil nil ((280 . 283)) nil (26116 16211 670129 25000) 0 nil])
([nil nil ((283 . 286)) nil (26116 16211 670128 216000) 0 nil])
([nil nil ((285 . 288) (#("b" 0 1 (fontified nil)) . 285) (285 . 286) (#("buf" 0 3 (fontified nil)) . -285) (285 . 288) (#("b" 0 1 (fontified t)) . -285) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) 286) nil (26116 16211 670125 806000) 0 nil])
([nil nil ((289 . 290)) nil (26116 16211 670109 174000) 0 nil])
([nil nil ((#("steam" 0 5 (face font-lock-string-face fontified t)) . -147) (undo-tree-id380 . -5) (undo-tree-id381 . -5) (undo-tree-id382 . -1) (undo-tree-id383 . -2) (undo-tree-id384 . -3) (undo-tree-id385 . -4) (undo-tree-id386 . -5) (undo-tree-id387 . -5) (undo-tree-id388 . -5) (undo-tree-id389 . -5) (undo-tree-id390 . -5) (undo-tree-id391 . -5) (undo-tree-id392 . -5) (undo-tree-id393 . -5) (undo-tree-id394 . -5) (undo-tree-id395 . -5) (undo-tree-id396 . -5) (undo-tree-id397 . -5) (undo-tree-id398 . -5) (undo-tree-id399 . -5) (undo-tree-id400 . -5) (undo-tree-id401 . -5) (undo-tree-id402 . -5) (undo-tree-id403 . -5) (undo-tree-id404 . -5) (undo-tree-id405 . -5) (undo-tree-id406 . -5) (undo-tree-id407 . -5) (undo-tree-id408 . -5) (undo-tree-id409 . -5) (undo-tree-id410 . -5) (undo-tree-id411 . -5) (undo-tree-id412 . -5) (undo-tree-id413 . -5) (undo-tree-id414 . -5) (undo-tree-id415 . -5) (undo-tree-id416 . -5) 152 (t 26116 16211 681741 280000)) nil (26116 16249 401677 720000) 0 nil])
([nil nil ((147 . 151)) nil (26116 16249 401644 908000) 0 nil])
([nil nil ((234 . 239) (t 26116 16249 415076 929000)) nil (26116 16295 947473 903000) 0 nil])
([nil nil ((239 . 240)) nil (26116 16295 947473 84000) 0 nil])
([nil nil ((239 . 241)) nil (26116 16295 947472 416000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -240) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) 241) nil (26116 16295 947471 490000) 0 nil])
([nil nil ((240 . 241)) nil (26116 16295 947469 47000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -240) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) 241) nil (26116 16295 947467 812000) 0 nil])
([nil nil ((240 . 241)) nil (26116 16295 946818 194000) 0 nil])
([nil nil ((apply yas--snippet-revive 234 244 #s(yas--snippet nil nil #s(yas--exit 243 nil) 59 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 243 nil) 59 nil nil nil nil)) (234 . 244) (#("println!($0)" 0 12 (fontified nil)) . 234) (234 . 246) (#("println" 0 7 (fontified nil)) . 234) (234 . 241) (#("println!(…)" 0 11 (fontified nil)) . -234) (234 . 245) (#("println" 0 7 (fontified t)) . -234) (undo-tree-id454 . -7) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -2) (undo-tree-id458 . -2) (undo-tree-id459 . -3) (undo-tree-id460 . -3) (undo-tree-id461 . -4) (undo-tree-id462 . -4) (undo-tree-id463 . -5) (undo-tree-id464 . -5) (undo-tree-id465 . -5) (undo-tree-id466 . -5) (undo-tree-id467 . -5) (undo-tree-id468 . -5) (undo-tree-id469 . -5) (undo-tree-id470 . -5) (undo-tree-id471 . -5) (undo-tree-id472 . -6) (undo-tree-id473 . -6) (undo-tree-id474 . -6) (undo-tree-id475 . -6) (undo-tree-id476 . -6) (undo-tree-id477 . -6) (undo-tree-id478 . -6) (undo-tree-id479 . -6) (undo-tree-id480 . -6) (undo-tree-id481 . -6) (undo-tree-id482 . -6) (undo-tree-id483 . -6) (undo-tree-id484 . -6) (undo-tree-id485 . -6) (undo-tree-id486 . -6) (undo-tree-id487 . -6) (undo-tree-id488 . -6) (undo-tree-id489 . -6) (undo-tree-id490 . -6) (undo-tree-id491 . -7) (undo-tree-id492 . -7) (undo-tree-id493 . -7) (undo-tree-id494 . -7) (undo-tree-id495 . -7) 241) nil (26116 16295 946815 473000) 0 nil])
([nil nil ((243 . 245)) nil (26116 16295 946787 486000) 0 nil])
([nil nil ((244 . 246)) nil (26116 16295 946786 891000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -247) (undo-tree-id452 . -1) (undo-tree-id453 . -1) 248) nil (26116 16295 946786 119000) 0 nil])
([nil nil ((247 . 248)) nil (26116 16295 946784 102000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -247) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) 248) nil (26116 16295 946783 127000) 0 nil])
([nil nil ((247 . 248)) nil (26116 16295 946778 928000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -278) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) 279) nil (26116 16295 946776 118000) 0 nil])
([nil nil ((278 . 280)) nil (26116 16295 946747 426000) 0 nil])
([nil nil ((nil rear-nonsticky nil 290 . 291) (nil fontified nil 277 . 291) (277 . 291) (t 26116 16295 991746 455000)) nil (26116 16704 566224 307000) 0 nil])
([nil nil ((#("0x7ffd5790a1cc" 0 13 (fontified t) 13 14 (fontified t rear-nonsticky t)) . -263) (undo-tree-id509 . -7) (undo-tree-id510 . -14) (undo-tree-id511 . -7) (undo-tree-id512 . -7) (undo-tree-id513 . -14) (undo-tree-id514 . -14) (undo-tree-id515 . -7) (undo-tree-id516 . -7) (undo-tree-id517 . -14) (undo-tree-id518 . -14) (undo-tree-id519 . -14) (undo-tree-id520 . -14) (undo-tree-id521 . -14) (undo-tree-id522 . -14) (undo-tree-id523 . -14) (undo-tree-id524 . -14) (undo-tree-id525 . -14) (undo-tree-id526 . -14) (undo-tree-id527 . -14) 277) nil (26116 16704 566220 108000) 0 nil])
([nil nil ((175 . 180) (t 26116 16704 578438 202000)) nil (26116 17566 488568 497000) 0 nil])
([nil nil ((180 . 184)) nil (26116 17566 488567 814000) 0 nil])
([nil nil ((#("let " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . 180) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -2) (undo-tree-id645 . -2) (undo-tree-id646 . -3) (undo-tree-id647 . -3) (undo-tree-id648 . -4) (undo-tree-id649 . -4) (undo-tree-id650 . -4) (undo-tree-id651 . -4) (undo-tree-id652 . -4) (undo-tree-id653 . -4) (undo-tree-id654 . -4)) nil (26116 17566 488566 882000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 180) (undo-tree-id640 . 1) (undo-tree-id641 . -1)) nil (26116 17566 488558 824000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -180) (undo-tree-id639 . 4)) nil (26116 17566 488557 177000) 0 nil])
([nil nil ((229 . 233) (#(" " 0 1 (fontified nil)) . 228) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (229 . 230)) nil (26116 17566 488554 796000) 0 nil])
([nil nil ((233 . 244)) nil (26116 17566 487666 45000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -242) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (#(" " 0 1 (fontified t)) . -243) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) 244) nil (26116 17566 487665 105000) 0 nil])
([nil nil ((242 . 244)) nil (26116 17566 487656 489000) 0 nil])
([nil nil ((244 . 246)) nil (26116 17566 487655 940000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -242) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (#(" " 0 1 (fontified t)) . -243) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (#("s" 0 1 (fontified t)) . -244) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (#("t" 0 1 (fontified t)) . -245) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) 246) nil (26116 17566 487653 690000) 0 nil])
([nil nil ((242 . 247)) nil (26116 17566 487626 684000) 0 nil])
([nil nil ((245 . 251) (#("St" 0 2 (fontified nil)) . 245) (245 . 247) (#("String" 0 6 (fontified nil)) . -245) (245 . 251) (#("St" 0 2 (face font-lock-type-face fontified t)) . -245) (undo-tree-id546 . -2) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -2) (undo-tree-id551 . -2) (undo-tree-id552 . -2) (undo-tree-id553 . -2) (undo-tree-id554 . -2) 247) nil (26116 17566 487625 592000) 0 nil])
([nil nil ((251 . 255)) nil (26116 17566 487619 585000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -253) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (#("b" 0 1 (fontified t)) . -254) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) 255) nil (26116 17566 487618 604000) 0 nil])
([nil nil ((253 . 254)) nil (26116 17566 487612 958000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -253) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) 254) nil (26116 17566 487612 138000) 0 nil])
([nil nil ((253 . 254)) nil (26116 17566 487608 317000) 0 nil])
([nil nil ((apply yas--snippet-revive 253 258 #s(yas--snippet nil nil #s(yas--exit 258 nil) 65 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 258 nil) 65 nil nil nil nil)) (253 . 258) (#("new()$0" 0 7 (fontified nil)) . 253) (253 . 260) (#("n" 0 1 (fontified nil)) . 253) (253 . 254) (#("new()" 0 5 (fontified nil)) . -253) (253 . 258) (#("n" 0 1 (fontified t)) . -253) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) 254) nil (26116 17566 487606 154000) 0 nil])
([nil nil ((258 . 259)) nil (26116 17566 487592 475000) 0 nil])
([nil nil ((#("println!(\"{}\", " 0 8 (face rust-builtin-formatting-macro fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t) 9 10 (face font-lock-string-face fontified t) 10 12 (face rust-string-interpolation fontified t) 12 13 (face font-lock-string-face fontified t) 13 14 (fontified t) 14 15 (fontified t)) . -264) (undo-tree-id677 . -15) (undo-tree-id678 . -15) (undo-tree-id679 . -15) (undo-tree-id680 . -15) (undo-tree-id681 . -15) (undo-tree-id682 . -15) (undo-tree-id683 . -7) (undo-tree-id684 . -15) 279 (t 26116 17566 491824 443000)) nil (26116 17579 285581 819000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -293) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (#(";" 0 1 (fontified t)) . -294) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) 295) nil (26116 17579 285574 83000) 0 nil])
([nil nil ((293 . 294)) nil (26116 17579 285550 358000) 0 nil])
([nil nil ((294 . 299) (t 26116 17579 301825 229000)) nil (26116 17601 96831 383000) 0 nil])
([nil nil ((299 . 301)) nil (26116 17601 96830 672000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -299) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (#("." 0 1 (fontified t)) . -300) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) 301) nil (26116 17601 96828 926000) 0 nil])
([nil nil ((71 . 73)) nil (26116 17601 96814 348000) 0 nil])
([nil nil ((73 . 76)) nil (26116 17601 96813 706000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 78 105 nil nil nil t #s(yas--exit 112 nil))) #s(yas--exit 112 nil) 66 nil #s(yas--field 1 78 105 nil nil nil t #s(yas--exit 112 nil)) nil nil)) (73 . 87) (#("impl $1 {
    $0
}" 0 18 (fontified nil)) . 73) (73 . 91) (#("imp" 0 3 (fontified nil)) . 73) (73 . 76) (#("impl" 0 4 (fontified nil)) . -73) (73 . 77) (#("imp" 0 3 (fontified t)) . -73) (undo-tree-id731 . -3) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -2) (undo-tree-id735 . -2) (undo-tree-id736 . -3) (undo-tree-id737 . -3) 76) nil (26116 17601 96812 199000) 0 nil])
([nil nil ((78 . 79)) nil (26116 17601 96803 830000) 0 nil])
([nil nil ((78 . 86) (#("R" 0 1 (fontified nil)) . 78) (undo-tree-id722 . -1) (78 . 79) (#("Readable" 0 8 (fontified nil)) . -78) (undo-tree-id723 . -8) (78 . 86) (#("R" 0 1 (face font-lock-type-face fontified t)) . -78) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) 79) nil (26116 17601 96802 568000) 0 nil])
([nil nil ((86 . 88)) nil (26116 17601 96795 483000) 0 nil])
([nil nil ((#(">" 0 1 (syntax-table (1) fontified t)) . -86) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (#("?" 0 1 (face rust-question-mark fontified t)) . -87) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) 88) nil (26116 17601 96794 78000) 0 nil])
([nil nil ((86 . 88)) nil (26116 17601 96782 285000) 0 nil])
([nil nil ((87 . 90)) nil (26116 17601 96781 695000) 0 nil])
([nil nil ((87 . 93) (#("Str" 0 3 (fontified nil)) . 87) (87 . 90) (#("String" 0 6 (fontified nil)) . -87) (87 . 93) (#("Str" 0 3 (face font-lock-type-face fontified t)) . -87) (undo-tree-id697 . -3) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -2) (undo-tree-id701 . -2) (undo-tree-id702 . -3) (undo-tree-id703 . -3) 90) nil (26116 17601 96780 161000) 0 nil])
([nil nil ((94 . 97)) nil (26116 17601 96773 714000) 0 nil])
([nil nil ((97 . 101)) nil (26116 17601 96772 566000) 0 nil])
([nil nil ((99 . 105) (#("St" 0 2 (fontified nil)) . 99) (undo-tree-id685 . -2) (99 . 101) (#("String" 0 6 (fontified nil)) . -99) (undo-tree-id686 . -6) (99 . 105) (#("St" 0 2 (face font-lock-type-face fontified t)) . -99) (undo-tree-id687 . -2) (undo-tree-id688 . -2) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -2) (undo-tree-id693 . -2) (undo-tree-id694 . -2) (undo-tree-id695 . -2) (undo-tree-id696 . -2) 101) nil (26116 17601 96767 816000) 0 nil])
([nil nil ((apply yas--snippet-revive 73 114 #s(yas--snippet nil (#s(yas--field 1 78 105 nil nil nil t #s(yas--exit 112 nil))) #s(yas--exit 112 nil) 66 nil #s(yas--field 1 78 105 nil nil nil t #s(yas--exit 112 nil)) nil nil))) nil (26116 17625 797914 58000) 0 nil])
([nil nil ((342 . 345) (t 26116 17601 141826 569000)) nil (26116 17625 797913 451000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 349 352 nil nil nil nil #s(yas--field 2 354 361 nil nil nil nil #s(yas--exit 362 nil))) #s(yas--field 2 354 361 nil nil nil nil #s(yas--exit 362 nil))) #s(yas--exit 362 nil) 67 nil #s(yas--field 1 349 352 nil nil nil nil #s(yas--field 2 354 361 nil nil nil nil #s(yas--exit 362 nil))) nil nil)) (344 . 362) (#("read(${1:pid}, ${2:address})$0" 0 30 (fontified nil)) . 344) (344 . 374) (#("r" 0 1 (fontified nil)) . 344) (344 . 345) (#("read(…) (as Readable)" 0 21 (fontified nil)) . -344) (344 . 365) (#("r" 0 1 (fontified t)) . -344) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) 345) nil (26116 17625 797911 725000) 0 nil])
([nil nil ((apply yas--snippet-revive 344 362 #s(yas--snippet nil (#s(yas--field 1 349 352 nil nil nil nil #s(yas--field 2 354 361 nil nil nil nil #s(yas--exit 362 nil))) #s(yas--field 2 354 361 nil nil nil nil #s(yas--exit 362 nil))) #s(yas--exit 362 nil) 67 nil #s(yas--field 1 349 352 nil nil nil nil #s(yas--field 2 354 361 nil nil nil nil #s(yas--exit 362 nil))) nil nil))) nil (26116 17625 797906 189000) 0 nil])
([nil nil ((#("address" 0 7 (fontified t)) . -354) (undo-tree-id775 . -7) (undo-tree-id776 . -7) (undo-tree-id777 . -7) (undo-tree-id778 . -7) (undo-tree-id779 . -7) (undo-tree-id780 . -7) (undo-tree-id781 . -7) 361) nil (26116 17625 797905 126000) 0 nil])
([nil nil ((355 . 356)) nil (26116 17625 797899 906000) 0 nil])
([nil nil ((#("0x7ffea7f94134" 0 13 (fontified t) 13 14 (fontified t rear-nonsticky t)) . -321) (undo-tree-id759 . -14) (undo-tree-id760 . -14) (undo-tree-id761 . -14) (undo-tree-id762 . -7) (undo-tree-id763 . -7) (undo-tree-id764 . -7) (undo-tree-id765 . -7) (undo-tree-id766 . -7) (undo-tree-id767 . -14) (undo-tree-id768 . -14) (undo-tree-id769 . -14) (undo-tree-id770 . -14) (undo-tree-id771 . -14) (undo-tree-id772 . -14) (undo-tree-id773 . -14) (undo-tree-id774 . -14) 335) nil (26116 17625 797897 651000) 0 nil])
([nil nil ((nil rear-nonsticky nil 334 . 335) (nil fontified nil 321 . 335) (321 . 335)) nil (26116 17625 797877 772000) 0 nil])
([nil nil ((nil rear-nonsticky nil 367 . 368) (nil fontified nil 354 . 368) (354 . 368)) nil (26116 17625 797872 142000) 0 nil])
([nil nil ((395 . 400) (t 26116 17625 811828 84000)) nil (26116 17631 676145 740000) 0 nil])
([nil nil ((nil rear-nonsticky nil 419 . 420) (nil fontified nil 419 . 420) (nil fontified nil 418 . 419) (nil fontified nil 415 . 418) (nil fontified nil 413 . 415) (nil fontified nil 412 . 413) (nil fontified nil 410 . 412) (nil fontified nil 409 . 410) (nil fontified nil 408 . 409) (nil fontified nil 400 . 408) (400 . 420)) nil (26116 17631 676144 639000) 0 nil])
([nil nil ((#("buf" 0 3 (fontified t)) . -415) (undo-tree-id788 . -3) (undo-tree-id789 . -3) 418) nil (26116 17631 676141 330000) 0 nil])
([nil nil ((415 . 416)) nil (26116 17631 676131 622000) 0 nil])
([nil nil ((nil rear-nonsticky nil 909 . 910) (nil fontified nil 909 . 910) (nil fontified nil 905 . 909) (nil fontified nil 904 . 905) (nil fontified nil 903 . 904) (nil fontified nil 895 . 903) (nil fontified nil 894 . 895) (nil fontified nil 893 . 894) (nil fontified nil 881 . 893) (nil fontified nil 880 . 881) (nil fontified nil 879 . 880) (nil fontified nil 878 . 879) (nil fontified nil 859 . 878) (nil fontified nil 858 . 859) (nil fontified nil 852 . 858) (nil fontified nil 836 . 852) (nil fontified nil 835 . 836) (nil fontified nil 834 . 835) (nil fontified nil 833 . 834) (nil fontified nil 823 . 833) (nil fontified nil 821 . 823) (nil fontified nil 820 . 821) (nil fontified nil 816 . 820) (nil fontified nil 807 . 816) (nil fontified nil 806 . 807) (nil fontified nil 798 . 806) (nil fontified nil 797 . 798) (nil fontified nil 794 . 797) (nil fontified nil 778 . 794) (nil fontified nil 776 . 778) (nil fontified nil 775 . 776) (nil fontified nil 766 . 775) (nil fontified nil 764 . 766) (nil fontified nil 763 . 764) (nil fontified nil 759 . 763) (nil fontified nil 751 . 759) (nil fontified nil 750 . 751) (nil fontified nil 742 . 750) (nil fontified nil 741 . 742) (nil fontified nil 738 . 741) (nil fontified nil 722 . 738) (nil fontified nil 721 . 722) (nil fontified nil 720 . 721) (nil fontified nil 719 . 720) (nil fontified nil 715 . 719) (nil fontified nil 713 . 715) (nil fontified nil 712 . 713) (nil fontified nil 708 . 712) (nil fontified nil 693 . 708) (nil fontified nil 692 . 693) (nil fontified nil 683 . 692) (nil fontified nil 680 . 683) (nil fontified nil 664 . 680) (nil fontified nil 663 . 664) (nil fontified nil 662 . 663) (nil fontified nil 661 . 662) (nil fontified nil 654 . 661) (nil fontified nil 648 . 654) (nil fontified nil 646 . 648) (nil fontified nil 645 . 646) (nil fontified nil 641 . 645) (nil fontified nil 636 . 641) (nil fontified nil 634 . 636) (nil fontified nil 618 . 634) (nil fontified nil 617 . 618) (nil fontified nil 608 . 617) (nil fontified nil 605 . 608) (nil fontified nil 601 . 605) (nil fontified nil 589 . 601) (nil fontified nil 588 . 589) (nil fontified nil 587 . 588) (nil fontified nil 586 . 587) (nil fontified nil 581 . 586) (nil fontified nil 580 . 581) (nil fontified nil 578 . 580) (nil fontified nil 573 . 578) (nil fontified nil 565 . 573) (nil fontified nil 563 . 565) (nil fontified nil 551 . 563) (nil fontified nil 549 . 551) (nil fontified nil 548 . 549) (nil fontified nil 542 . 548) (nil fontified nil 532 . 542) (nil fontified nil 531 . 532) (nil fontified nil 530 . 531) (nil fontified nil 526 . 530) (nil fontified nil 517 . 526) (nil fontified nil 516 . 517) (nil fontified nil 514 . 516) (nil fontified nil 511 . 514) (nil fontified nil 510 . 511) (nil fontified nil 508 . 510) (nil fontified nil 504 . 508) (nil fontified nil 503 . 504) (nil fontified nil 487 . 503) (nil fontified nil 484 . 487) (nil fontified nil 481 . 484) (nil fontified nil 480 . 481) (nil fontified nil 477 . 480) (nil fontified nil 465 . 477) (nil fontified nil 464 . 465) (nil fontified nil 463 . 464) (nil fontified nil 462 . 463) (nil fontified nil 456 . 462) (nil fontified nil 448 . 456) (nil fontified nil 447 . 448) (nil fontified nil 439 . 447) (nil fontified nil 438 . 439) (nil fontified nil 437 . 438) (nil fontified nil 436 . 437) (nil fontified nil 428 . 436) (nil fontified nil 427 . 428) (nil fontified nil 426 . 427) (nil fontified nil 422 . 426) (nil fontified nil 420 . 422) (nil fontified nil 413 . 420) (nil fontified nil 401 . 413) (nil fontified nil 393 . 401) (nil fontified nil 392 . 393) (nil fontified nil 389 . 392) (nil fontified nil 387 . 389) (nil fontified nil 385 . 387) (nil fontified nil 377 . 385) (nil fontified nil 375 . 377) (nil fontified nil 367 . 375) (nil fontified nil 355 . 367) (nil fontified nil 354 . 355) (nil fontified nil 353 . 354) (nil fontified nil 347 . 353) (nil fontified nil 344 . 347) (nil fontified nil 334 . 344) (nil fontified nil 333 . 334) (nil fontified nil 330 . 333) (nil fontified nil 322 . 330) (nil fontified nil 321 . 322) (nil fontified nil 319 . 321) (nil fontified nil 318 . 319) (nil fontified nil 310 . 318) (nil fontified nil 308 . 310) (nil fontified nil 304 . 308) (nil fontified nil 302 . 304) (nil fontified nil 295 . 302) (nil fontified nil 294 . 295) (nil fontified nil 283 . 294) (nil fontified nil 282 . 283) (nil fontified nil 275 . 282) (nil fontified nil 274 . 275) (nil fontified nil 271 . 274) (nil fontified nil 269 . 271) (nil fontified nil 267 . 269) (nil fontified nil 264 . 267) (nil fontified nil 261 . 264) (nil fontified nil 259 . 261) (nil fontified nil 257 . 259) (nil fontified nil 256 . 257) (nil fontified nil 252 . 256) (nil fontified nil 250 . 252) (nil fontified nil 242 . 250) (nil fontified nil 230 . 242) (nil fontified nil 229 . 230) (nil fontified nil 228 . 229) (nil fontified nil 222 . 228) (nil fontified nil 219 . 222) (nil fontified nil 210 . 219) (nil fontified nil 209 . 210) (nil fontified nil 206 . 209) (nil fontified nil 198 . 206) (nil fontified nil 197 . 198) (nil fontified nil 196 . 197) (nil fontified nil 195 . 196) (nil fontified nil 194 . 195) (nil fontified nil 193 . 194) (nil fontified nil 192 . 193) (nil fontified nil 191 . 192) (nil fontified nil 189 . 191) (nil fontified nil 182 . 189) (nil fontified nil 179 . 182) (nil fontified nil 175 . 179) (nil fontified nil 174 . 175) (nil fontified nil 171 . 174) (nil fontified nil 163 . 171) (nil fontified nil 162 . 163) (nil fontified nil 161 . 162) (nil fontified nil 160 . 161) (nil fontified nil 159 . 160) (nil fontified nil 154 . 159) (nil fontified nil 152 . 154) (nil fontified nil 146 . 152) (nil fontified nil 145 . 146) (nil fontified nil 144 . 145) (nil fontified nil 143 . 144) (nil fontified nil 141 . 143) (nil fontified nil 140 . 141) (nil fontified nil 138 . 140) (nil fontified nil 135 . 138) (nil fontified nil 133 . 135) (nil fontified nil 129 . 133) (nil fontified nil 128 . 129) (nil fontified nil 125 . 128) (nil fontified nil 124 . 125) (nil fontified nil 123 . 124) (nil fontified nil 119 . 123) (nil fontified nil 118 . 119) (nil fontified nil 116 . 118) (nil fontified nil 112 . 116) (112 . 910) (t 26116 17631 685161 778000)) nil (26116 17721 640297 728000) 0 nil])
([nil nil ((#("size_of::<T>()" 0 7 (fontified t) 7 9 (fontified t) 9 10 (face (rainbow-delimiters-depth-3-face) fontified t) 10 11 (face font-lock-type-face fontified t) 11 12 (face (rainbow-delimiters-depth-3-face) fontified t) 12 13 (face (rainbow-delimiters-depth-3-face) fontified t) 13 14 (face (rainbow-delimiters-depth-3-face) fontified t)) . -182) (undo-tree-id790 . -14) (undo-tree-id791 . -14) (undo-tree-id792 . -1) (undo-tree-id793 . -2) (undo-tree-id794 . -3) (undo-tree-id795 . -4) (undo-tree-id796 . -5) (undo-tree-id797 . -6) (undo-tree-id798 . -7) (undo-tree-id799 . -8) (undo-tree-id800 . -9) (undo-tree-id801 . -10) (undo-tree-id802 . -11) (undo-tree-id803 . -12) (undo-tree-id804 . -13) (undo-tree-id805 . -14) (undo-tree-id806 . -14) (undo-tree-id807 . -14) (undo-tree-id808 . -14) (undo-tree-id809 . -14) (undo-tree-id810 . -14) (undo-tree-id811 . -14) (undo-tree-id812 . -14) 196) nil (26116 17721 640271 956000) 0 nil])
([nil nil ((182 . 184)) nil (26116 17721 640247 455000) 0 nil])
([nil nil ((#("impl Readable<String> for String {
        fn read(&mut self, pid: u32, address: usize) {
        let size = 32;
        let local_iov = iovec {
            iov_base: self as *mut _ as *mut c_void,
            iov_len: size,
        };

        let remote_iov = iovec {
            iov_base: address as *mut c_void,
            iov_len: size,
        };
        
        unsafe {
            let len = process_vm_readv(pid as i32, &local_iov, 1, &remote_iov, 1, 0);
            if len != size as isize {
                // eprintln!(\"Failed to read {} at: {:x}\", size, address);
                // eprintln!(\"local v addr: {:p}\", self);
                // eprintln!(\"local: {:?}\", local_iov);
                // eprintln!(\"remote: {:?}\", remote_iov);
                panic!(\"Failed to read vm\");
            }
        }
    }
}" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 13 (face font-lock-type-face fontified t) 13 14 (face (rainbow-delimiters-depth-1-face) fontified t) 14 20 (face font-lock-type-face fontified t) 20 21 (face (rainbow-delimiters-depth-1-face) fontified t) 21 22 (fontified t) 22 25 (face font-lock-keyword-face fontified t) 25 26 (fontified t) 26 32 (face font-lock-type-face fontified t) 32 33 (fontified t) 33 34 (face (rainbow-delimiters-depth-1-face) fontified t) 34 35 (fontified t) 35 39 (fontified t) 39 43 (fontified t) 43 45 (face font-lock-keyword-face fontified t) 45 46 (fontified t) 46 50 (face font-lock-function-name-face fontified t) 50 51 (face (rainbow-delimiters-depth-2-face) fontified t) 51 52 (face rust-ampersand-face fontified t) 52 55 (face font-lock-keyword-face fontified t) 55 56 (fontified t) 56 60 (face font-lock-keyword-face fontified t) 60 62 (fontified t) 62 65 (face font-lock-variable-name-face fontified t) 65 67 (fontified t) 67 68 (face font-lock-type-face fontified t) 68 70 (face font-lock-type-face fontified t) 70 71 (fontified t) 71 72 (fontified t) 72 73 (face font-lock-variable-name-face fontified t) 73 79 (face font-lock-variable-name-face fontified t) 79 81 (fontified t) 81 86 (face font-lock-type-face fontified t) 86 87 (face (rainbow-delimiters-depth-2-face) fontified t) 87 88 (fontified t) 88 89 (face (rainbow-delimiters-depth-2-face) fontified t) 89 90 (fontified t) 90 98 (fontified t) 98 101 (face font-lock-keyword-face fontified t) 101 102 (fontified t) 102 106 (face font-lock-variable-name-face fontified t) 106 111 (fontified t) 111 112 (fontified t) 112 113 (fontified t) 113 121 (fontified t) 121 124 (face font-lock-keyword-face fontified t) 124 125 (fontified t) 125 134 (face font-lock-variable-name-face fontified t) 134 137 (fontified t) 137 143 (fontified t) 143 144 (face (rainbow-delimiters-depth-3-face) fontified t) 144 145 (fontified t) 145 157 (fontified t) 157 165 (face font-lock-variable-name-face fontified t) 165 167 (fontified t) 167 171 (face font-lock-keyword-face fontified t) 171 172 (fontified t) 172 174 (face font-lock-keyword-face fontified t) 174 176 (fontified t) 176 179 (face font-lock-keyword-face fontified t) 179 182 (fontified t) 182 184 (face font-lock-keyword-face fontified t) 184 186 (fontified t) 186 189 (face font-lock-keyword-face fontified t) 189 190 (fontified t) 190 197 (fontified t) 197 198 (fontified t) 198 209 (fontified t) 209 210 (fontified t) 210 217 (face font-lock-variable-name-face fontified t) 217 219 (fontified t) 219 223 (fontified t) 223 225 (fontified t) 225 233 (fontified t) 233 234 (face (rainbow-delimiters-depth-3-face) fontified t) 234 236 (fontified t) 236 237 (fontified t) 237 245 (fontified t) 245 248 (face font-lock-keyword-face fontified t) 248 249 (fontified t) 249 259 (face font-lock-variable-name-face fontified t) 259 262 (fontified t) 262 268 (fontified t) 268 269 (face (rainbow-delimiters-depth-3-face) fontified t) 269 270 (fontified t) 270 282 (fontified t) 282 290 (face font-lock-variable-name-face fontified t) 290 292 (fontified t) 292 300 (fontified t) 300 302 (face font-lock-keyword-face fontified t) 302 304 (fontified t) 304 307 (face font-lock-keyword-face fontified t) 307 308 (fontified t) 308 316 (fontified t) 316 328 (fontified t) 328 335 (face font-lock-variable-name-face fontified t) 335 337 (fontified t) 337 341 (fontified t) 341 342 (fontified t) 342 343 (fontified t) 343 351 (fontified t) 351 352 (face (rainbow-delimiters-depth-3-face) fontified t) 352 353 (fontified t) 353 354 (fontified t) 354 362 (fontified t) 362 363 (fontified t) 363 371 (fontified t) 371 377 (face rust-unsafe fontified t) 377 378 (fontified t) 378 379 (face (rainbow-delimiters-depth-3-face) fontified t) 379 380 (fontified t) 380 392 (fontified t) 392 395 (face font-lock-keyword-face fontified t) 395 396 (fontified t) 396 399 (face font-lock-variable-name-face fontified t) 399 402 (fontified t) 402 418 (fontified t) 418 419 (face (rainbow-delimiters-depth-4-face) fontified t) 419 423 (fontified t) 423 425 (face font-lock-keyword-face fontified t) 425 426 (fontified t) 426 429 (face font-lock-type-face fontified t) 429 431 (fontified t) 431 432 (face rust-ampersand-face fontified t) 432 441 (fontified t) 441 445 (fontified t) 445 446 (fontified t) 446 447 (face rust-ampersand-face fontified t) 447 457 (fontified t) 457 463 (fontified t) 463 464 (face (rainbow-delimiters-depth-4-face) fontified t) 464 466 (fontified t) 466 478 (fontified t) 478 480 (face font-lock-keyword-face fontified t) 480 488 (fontified t) 488 493 (fontified t) 493 495 (face font-lock-keyword-face fontified t) 495 496 (fontified t) 496 501 (face font-lock-type-face fontified t) 501 502 (fontified t) 502 503 (face (rainbow-delimiters-depth-4-face) fontified t) 503 504 (fontified t) 504 516 (fontified t) 516 520 (fontified t) 520 523 (face font-lock-comment-delimiter-face fontified t) 523 532 (face font-lock-comment-face fontified t) 532 533 (face font-lock-comment-face fontified t) 533 549 (face font-lock-comment-face fontified t) 549 551 (face font-lock-comment-face fontified t) 551 556 (face font-lock-comment-face fontified t) 556 560 (face font-lock-comment-face fontified t) 560 561 (face font-lock-comment-face fontified t) 561 563 (face font-lock-comment-face fontified t) 563 569 (face font-lock-comment-face fontified t) 569 576 (face font-lock-comment-face fontified t) 576 577 (face font-lock-comment-face fontified t) 577 578 (face font-lock-comment-face fontified t) 578 579 (face font-lock-comment-face fontified t) 579 595 (fontified t) 595 598 (face font-lock-comment-delimiter-face fontified t) 598 607 (face font-lock-comment-face fontified t) 607 608 (face font-lock-comment-face fontified t) 608 623 (face font-lock-comment-face fontified t) 623 627 (face font-lock-comment-face fontified t) 627 628 (face font-lock-comment-face fontified t) 628 630 (face font-lock-comment-face fontified t) 630 634 (face font-lock-comment-face fontified t) 634 635 (face font-lock-comment-face fontified t) 635 636 (face font-lock-comment-face fontified t) 636 637 (face font-lock-comment-face fontified t) 637 653 (fontified t) 653 656 (face font-lock-comment-delimiter-face fontified t) 656 657 (face font-lock-comment-face fontified t) 657 665 (face font-lock-comment-face fontified t) 665 666 (face font-lock-comment-face fontified t) 666 674 (face font-lock-comment-face fontified t) 674 678 (face font-lock-comment-face fontified t) 678 679 (face font-lock-comment-face fontified t) 679 681 (face font-lock-comment-face fontified t) 681 690 (face font-lock-comment-face fontified t) 690 691 (face font-lock-comment-face fontified t) 691 693 (face font-lock-comment-face fontified t) 693 709 (fontified t) 709 712 (face font-lock-comment-delimiter-face fontified t) 712 713 (face font-lock-comment-face fontified t) 713 721 (face font-lock-comment-face fontified t) 721 722 (face font-lock-comment-face fontified t) 722 731 (face font-lock-comment-face fontified t) 731 735 (face font-lock-comment-face fontified t) 735 736 (face font-lock-comment-face fontified t) 736 738 (face font-lock-comment-face fontified t) 738 748 (face font-lock-comment-face fontified t) 748 749 (face font-lock-comment-face fontified t) 749 750 (face font-lock-comment-face fontified t rear-nonsticky t) 750 751 (face font-lock-comment-face fontified t) 751 767 (fontified t) 767 773 (face font-lock-preprocessor-face fontified t) 773 774 (face (rainbow-delimiters-depth-5-face) fontified t) 774 793 (face font-lock-string-face fontified t) 793 794 (face (rainbow-delimiters-depth-5-face) fontified t) 794 795 (fontified t) 795 796 (fontified t) 796 808 (fontified t) 808 809 (face (rainbow-delimiters-depth-4-face) fontified t) 809 810 (fontified t) 810 818 (fontified t) 818 819 (face (rainbow-delimiters-depth-3-face) fontified t) 819 820 (fontified t) 820 824 (fontified t) 824 825 (face (rainbow-delimiters-depth-2-face) fontified t rear-nonsticky t) 825 826 (fontified t) 826 827 (face (rainbow-delimiters-depth-1-face) fontified t)) . 73) (undo-tree-id813 . -827) (undo-tree-id814 . -109) (undo-tree-id815 . -109) (undo-tree-id816 . -109) (undo-tree-id817 . -109) (undo-tree-id818 . -109) (undo-tree-id819 . -109) (undo-tree-id820 . -109) (undo-tree-id821 . -109) (undo-tree-id822 . -109) (undo-tree-id823 . -109) (undo-tree-id824 . -109) (undo-tree-id825 . -109) (undo-tree-id826 . -109) (undo-tree-id827 . -109) (undo-tree-id828 . -109) (undo-tree-id829 . -109) (undo-tree-id830 . -109) (undo-tree-id831 . -109) (undo-tree-id832 . -109) (undo-tree-id833 . -39) (undo-tree-id834 . -109) (undo-tree-id835 . -109) (undo-tree-id836 . -109) (undo-tree-id837 . 716) (undo-tree-id838 . -111) (undo-tree-id839 . -111) (undo-tree-id840 . -111) (undo-tree-id841 . -111) (undo-tree-id842 . -111) (undo-tree-id843 . -111) (undo-tree-id844 . -111) (undo-tree-id845 . -111) (undo-tree-id846 . -111) (undo-tree-id847 . -111) (undo-tree-id848 . -111) (undo-tree-id849 . -111) (undo-tree-id850 . -111) (undo-tree-id851 . -111) (undo-tree-id852 . -111) (undo-tree-id853 . -111) (undo-tree-id854 . -111) (undo-tree-id855 . -111) (undo-tree-id856 . -111) (undo-tree-id857 . -111) (undo-tree-id858 . -111) (undo-tree-id859 . -111) (undo-tree-id860 . -111) (undo-tree-id861 . -111) (undo-tree-id862 . -111) (undo-tree-id863 . -111) (undo-tree-id864 . -111) (undo-tree-id865 . -141) (undo-tree-id866 . -141) (undo-tree-id867 . -141) (undo-tree-id868 . -141) (undo-tree-id869 . -141) (undo-tree-id870 . -141) (undo-tree-id871 . -141) (undo-tree-id872 . -141) (undo-tree-id873 . -141) (undo-tree-id874 . -141) (undo-tree-id875 . -141) (undo-tree-id876 . -141) (undo-tree-id877 . -141) (undo-tree-id878 . -141) (undo-tree-id879 . -141) (undo-tree-id880 . -141) (undo-tree-id881 . -141) (undo-tree-id882 . -141) (undo-tree-id883 . -141) (undo-tree-id884 . -141) (undo-tree-id885 . -141) (undo-tree-id886 . -141) (undo-tree-id887 . -141) (undo-tree-id888 . -141) (undo-tree-id889 . -141) (undo-tree-id890 . -141) (undo-tree-id891 . -141) (undo-tree-id892 . -141) (undo-tree-id893 . -141) (undo-tree-id894 . -141) (undo-tree-id895 . -827) (undo-tree-id896 . -827) (undo-tree-id897 . -827) (undo-tree-id898 . -825) (undo-tree-id899 . -755) (undo-tree-id900 . -357) (undo-tree-id901 . -357) (undo-tree-id902 . -357) (undo-tree-id903 . -357) (undo-tree-id904 . -109) (undo-tree-id905 . -827) (t 26116 17721 655167 301000)) nil (26116 17739 855293 322000) 0 nil])
([nil nil ((#("new();" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-2-face) fontified t) 4 5 (face (rainbow-delimiters-depth-2-face) fontified t) 5 6 (fontified t)) . -255) (undo-tree-id961 . -6) (undo-tree-id962 . -6) (undo-tree-id963 . -6) (undo-tree-id964 . -6) (undo-tree-id965 . -6) (undo-tree-id966 . -6) (undo-tree-id967 . -6) (undo-tree-id968 . -6) (undo-tree-id969 . -6) (undo-tree-id970 . -6) (undo-tree-id971 . -6) (undo-tree-id972 . -6) (undo-tree-id973 . -6) 261 (t 26116 17739 858501 752000)) nil (26116 17766 271265 682000) 0 nil])
([nil nil ((#("String::" 0 6 (face font-lock-type-face fontified t) 6 8 (fontified t)) . -247) (undo-tree-id946 . -8) (undo-tree-id947 . -8) (undo-tree-id948 . -8) (undo-tree-id949 . -8) (undo-tree-id950 . -8) (undo-tree-id951 . -8) (undo-tree-id952 . -8) (undo-tree-id953 . -8) (undo-tree-id954 . -8) (undo-tree-id955 . -8) (undo-tree-id956 . -8) (undo-tree-id957 . -8) (undo-tree-id958 . -8) (undo-tree-id959 . -8) (undo-tree-id960 . -8) 255) nil (26116 17766 271255 909000) 0 nil])
([nil nil ((#("b = " 0 1 (face font-lock-variable-name-face fontified t) 1 4 (fontified t)) . -243) (undo-tree-id929 . -4) (undo-tree-id930 . -4) (undo-tree-id931 . -4) (undo-tree-id932 . -4) (undo-tree-id933 . -4) (undo-tree-id934 . -4) (undo-tree-id935 . -4) (undo-tree-id936 . -4) (undo-tree-id937 . -4) (undo-tree-id938 . -4) (undo-tree-id939 . -4) (undo-tree-id940 . -4) (undo-tree-id941 . -4) (undo-tree-id942 . -4) (undo-tree-id943 . -4) (undo-tree-id944 . -4) (undo-tree-id945 . -4) 247) nil (26116 17766 271246 4000) 0 nil])
([nil nil ((243 . 244)) nil (26116 17766 271235 245000) 0 nil])
([nil nil ((#("n" 0 1 (face font-lock-variable-name-face fontified t)) . -243) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) 244) nil (26116 17766 271234 409000) 0 nil])
([nil nil ((243 . 245)) nil (26116 17766 271231 977000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -244) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) 245) nil (26116 17766 271230 889000) 0 nil])
([nil nil ((244 . 245)) nil (26116 17766 271223 366000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -244) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) 245) nil (26116 17766 271222 481000) 0 nil])
([nil nil ((244 . 245)) nil (26116 17766 271218 417000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -244) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) 245) nil (26116 17766 271216 883000) 0 nil])
([nil nil ((244 . 249)) nil (26116 17766 271206 779000) 0 nil])
([nil nil ((248 . 252)) nil (26116 17766 271205 510000) 0 nil])
([nil nil ((253 . 254)) nil (26116 17766 271201 92000) 0 nil])
([nil nil ((72 . 73) (t 26116 17766 275170 40000)) nil (26116 17800 985131 599000) 0 nil])
([nil nil ((73 . 75)) nil (26116 17800 985130 878000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 78 95 nil nil nil t #s(yas--exit 102 nil))) #s(yas--exit 102 nil) 68 nil #s(yas--field 1 78 95 nil nil nil t #s(yas--exit 102 nil)) nil nil)) (73 . 87) (#("impl $1 {
    $0
}" 0 18 (fontified nil)) . 73) (73 . 91) (#("im" 0 2 (fontified nil)) . 73) (73 . 75) (#("impl" 0 4 (fontified nil)) . -73) (73 . 77) (#("im" 0 2 (fontified t)) . -73) (undo-tree-id1050 . -2) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -2) (undo-tree-id1054 . -2) (undo-tree-id1055 . -2) (undo-tree-id1056 . -2) (undo-tree-id1057 . -2) 75) nil (26116 17800 985129 429000) 0 nil])
([nil nil ((78 . 79)) nil (26116 17800 985122 635000) 0 nil])
([nil nil ((78 . 86) (#("R" 0 1 (fontified nil)) . 78) (undo-tree-id1041 . -1) (78 . 79) (#("Readable" 0 8 (fontified nil)) . -78) (undo-tree-id1042 . -8) (78 . 86) (#("R" 0 1 (face font-lock-type-face fontified t)) . -78) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) 79) nil (26116 17800 985121 282000) 0 nil])
([nil nil ((86 . 88)) nil (26116 17800 985114 337000) 0 nil])
([nil nil ((87 . 90)) nil (26116 17800 985113 783000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -87) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (#("o" 0 1 (fontified t)) . -88) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (#("r" 0 1 (face font-lock-keyword-face fontified t)) . -89) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) 90) nil (26116 17800 985111 8000) 0 nil])
([nil nil ((87 . 89)) nil (26116 17800 985076 295000) 0 nil])
([nil nil ((88 . 89)) nil (26116 17800 985075 703000) 0 nil])
([nil nil ((#("8" 0 1 (fontified t)) . -88) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) 89) nil (26116 17800 985074 27000) 0 nil])
([nil nil ((88 . 93)) nil (26116 17800 985060 21000) 0 nil])
([nil nil ((apply yas--snippet-revive 73 104 #s(yas--snippet nil (#s(yas--field 1 78 95 nil nil nil t #s(yas--exit 102 nil))) #s(yas--exit 102 nil) 68 nil #s(yas--field 1 78 95 nil nil nil t #s(yas--exit 102 nil)) nil nil))) nil (26116 17800 985059 400000) 0 nil])
([nil nil ((96 . 102)) nil (26116 17800 985058 128000) 0 nil])
([nil nil ((101 . 106)) nil (26116 17800 985053 952000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -410) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) 411 (t 26116 17800 998505 505000)) nil (26116 17835 242056 606000) 0 nil])
([nil nil ((410 . 422)) nil (26116 17835 242050 139000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 430 433 nil nil nil nil #s(yas--exit 434 nil))) #s(yas--exit 434 nil) 69 nil #s(yas--field 1 430 433 nil nil nil nil #s(yas--exit 434 nil)) nil nil)) (420 . 434) (#("transmute(${1:src})$0" 0 21 (fontified nil)) . 420) (420 . 441) (#("tr" 0 2 (fontified nil)) . 420) (420 . 422) (#("transmute(…)" 0 12 (fontified nil)) . -420) (420 . 432) (#("tr" 0 2 (fontified t)) . -420) (undo-tree-id1104 . -2) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -2) (undo-tree-id1108 . -2) (undo-tree-id1109 . -2) (undo-tree-id1110 . -2) (undo-tree-id1111 . -2) (undo-tree-id1112 . -2) (undo-tree-id1113 . -2) (undo-tree-id1114 . -2) (undo-tree-id1115 . -2) (undo-tree-id1116 . -2) 422) nil (26116 17835 242048 486000) 0 nil])
([nil nil ((apply yas--snippet-revive 420 434 #s(yas--snippet nil (#s(yas--field 1 430 433 nil nil nil nil #s(yas--exit 434 nil))) #s(yas--exit 434 nil) 69 nil #s(yas--field 1 430 433 nil nil nil nil #s(yas--exit 434 nil)) nil nil))) nil (26116 17835 242037 986000) 0 nil])
([nil nil ((429 . 431)) nil (26116 17835 242037 474000) 0 nil])
([nil nil ((#(">" 0 1 (syntax-table (1) fontified t)) . -429) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (#("?" 0 1 (face rust-question-mark fontified t)) . -430) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) 431) nil (26116 17835 242036 388000) 0 nil])
([nil nil ((429 . 431)) nil (26116 17835 242029 728000) 0 nil])
([nil nil ((430 . 432)) nil (26116 17835 242029 101000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -430) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -431) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) 432) nil (26116 17835 242027 914000) 0 nil])
([nil nil ((430 . 434)) nil (26116 17835 242021 55000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t)) . -430) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) 431) nil (26116 17835 242020 156000) 0 nil])
([nil nil ((430 . 431)) nil (26116 17835 242017 9000) 0 nil])
([nil nil ((#("src" 0 3 (fontified t)) . -436) (undo-tree-id1069 . -3) (undo-tree-id1070 . -3) (undo-tree-id1071 . -3) (undo-tree-id1072 . -3) (undo-tree-id1073 . -3) (undo-tree-id1074 . -3) (undo-tree-id1075 . -3) (undo-tree-id1076 . -3) (undo-tree-id1077 . -3) (undo-tree-id1078 . -3) (undo-tree-id1079 . -3) 439) nil (26116 17835 242015 658000) 0 nil])
([nil nil ((436 . 437)) nil (26116 17835 242007 231000) 0 nil])
([nil nil ((436 . 437) (#("b" 0 1 (fontified nil)) . 436) (436 . 437) (#("b" 0 1 (fontified t)) . -436) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) 437) nil (26116 17835 242002 565000) 0 nil])
([nil nil ((435 . 437) (t 26116 17835 255174 274000)) nil (26116 17843 307799 116000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -435) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (#(":" 0 1 (fontified t)) . -436) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) 437 (t 26116 17843 328508 103000)) nil (26116 17877 890915 206000) 0 nil])
([nil nil ((430 . 431)) nil (26116 17877 890883 653000) 0 nil])
([nil nil ((430 . 432)) nil (26116 17877 890883 89000) 0 nil])
([nil nil ((431 . 434)) nil (26116 17877 890882 543000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -433) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) 434) nil (26116 17877 890881 755000) 0 nil])
([nil nil ((433 . 434)) nil (26116 17877 890876 804000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -433) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) 434) nil (26116 17877 890875 829000) 0 nil])
([nil nil ((433 . 434)) nil (26116 17877 890870 359000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t)) . -433) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) 434) nil (26116 17877 890868 274000) 0 nil])
([nil nil ((433 . 436)) nil (26116 17877 890856 336000) 0 nil])
([nil nil ((406 . 408) (t 26116 17877 908510 225000)) nil (26116 17886 365861 71000) 0 nil])
([nil nil ((#("b)" 0 1 (fontified t) 1 2 (face (rainbow-delimiters-depth-3-face) fontified t)) . -446) (undo-tree-id1978 . -2) (undo-tree-id1979 . -2) (undo-tree-id1980 . -2) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (undo-tree-id1983 . -1) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) (undo-tree-id1986 . -1) (undo-tree-id1987 . -2) (undo-tree-id1988 . -2) (undo-tree-id1989 . -2) (undo-tree-id1990 . -2) (undo-tree-id1991 . -2) (undo-tree-id1992 . -2) (undo-tree-id1993 . -2) (undo-tree-id1994 . -2) (undo-tree-id1995 . -2) (undo-tree-id1996 . -2) (undo-tree-id1997 . -2) (undo-tree-id1998 . -2) 448 (t 26116 17886 381844 79000)) nil (26116 17970 154406 848000) 0 nil])
([nil nil ((#("str>(" 0 3 (face font-lock-type-face fontified t) 3 4 (syntax-table (1) fontified t) 4 5 (face (rainbow-delimiters-depth-3-face) fontified t)) . -441) (undo-tree-id1906 . -5) (undo-tree-id1907 . -5) (undo-tree-id1908 . -5) (undo-tree-id1909 . -5) (undo-tree-id1910 . -5) (undo-tree-id1911 . -5) (undo-tree-id1912 . -5) (undo-tree-id1913 . -5) (undo-tree-id1914 . -4) (undo-tree-id1915 . -4) (undo-tree-id1916 . -4) (undo-tree-id1917 . -4) (undo-tree-id1918 . -4) (undo-tree-id1919 . -3) (undo-tree-id1920 . -2) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -2) (undo-tree-id1924 . -3) (undo-tree-id1925 . -3) (undo-tree-id1926 . -3) (undo-tree-id1927 . -3) (undo-tree-id1928 . -3) (undo-tree-id1929 . -4) (undo-tree-id1930 . -5) (undo-tree-id1931 . -5) (undo-tree-id1932 . -5) (undo-tree-id1933 . -5) (undo-tree-id1934 . -5) (undo-tree-id1935 . -5) (undo-tree-id1936 . -5) (undo-tree-id1937 . -4) (undo-tree-id1938 . -3) (undo-tree-id1939 . -3) (undo-tree-id1940 . -3) (undo-tree-id1941 . -3) (undo-tree-id1942 . -3) (undo-tree-id1943 . -2) (undo-tree-id1944 . -2) (undo-tree-id1945 . -2) (undo-tree-id1946 . -2) (undo-tree-id1947 . -2) (undo-tree-id1948 . -2) (undo-tree-id1949 . -2) (undo-tree-id1950 . -3) (undo-tree-id1951 . -3) (undo-tree-id1952 . -3) (undo-tree-id1953 . -3) (undo-tree-id1954 . -3) (undo-tree-id1955 . -3) (undo-tree-id1956 . -3) (undo-tree-id1957 . -3) (undo-tree-id1958 . -3) (undo-tree-id1959 . -3) (undo-tree-id1960 . -3) (undo-tree-id1961 . -3) (undo-tree-id1962 . -3) (undo-tree-id1963 . -5) (undo-tree-id1964 . -5) (undo-tree-id1965 . -5) (undo-tree-id1966 . -5) (undo-tree-id1967 . -5) (undo-tree-id1968 . -5) (undo-tree-id1969 . -5) (undo-tree-id1970 . -5) (undo-tree-id1971 . -5) (undo-tree-id1972 . -5) (undo-tree-id1973 . -5) (undo-tree-id1974 . -5) (undo-tree-id1975 . -5) (undo-tree-id1976 . -5) (undo-tree-id1977 . -5) 446) nil (26116 17970 154392 326000) 0 nil])
([nil nil ((#("32],&" 0 2 (fontified t) 2 3 (face (rainbow-delimiters-depth-3-face) fontified t) 3 4 (fontified t) 4 5 (fontified t)) . -436) (undo-tree-id1791 . -5) (undo-tree-id1792 . -4) (undo-tree-id1793 . -5) (undo-tree-id1794 . -5) (undo-tree-id1795 . -5) (undo-tree-id1796 . -5) (undo-tree-id1797 . -5) (undo-tree-id1798 . -5) (undo-tree-id1799 . -5) (undo-tree-id1800 . -5) (undo-tree-id1801 . -5) (undo-tree-id1802 . -5) (undo-tree-id1803 . -5) (undo-tree-id1804 . -5) (undo-tree-id1805 . -5) (undo-tree-id1806 . -5) (undo-tree-id1807 . -5) (undo-tree-id1808 . -5) (undo-tree-id1809 . -4) (undo-tree-id1810 . -3) (undo-tree-id1811 . -3) (undo-tree-id1812 . -3) (undo-tree-id1813 . -3) (undo-tree-id1814 . -3) (undo-tree-id1815 . -2) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -2) (undo-tree-id1819 . -3) (undo-tree-id1820 . -3) (undo-tree-id1821 . -3) (undo-tree-id1822 . -3) (undo-tree-id1823 . -3) (undo-tree-id1824 . -3) (undo-tree-id1825 . -3) (undo-tree-id1826 . -3) (undo-tree-id1827 . -3) (undo-tree-id1828 . -3) (undo-tree-id1829 . -3) (undo-tree-id1830 . -3) (undo-tree-id1831 . -3) (undo-tree-id1832 . -3) (undo-tree-id1833 . -3) (undo-tree-id1834 . -4) (undo-tree-id1835 . -5) (undo-tree-id1836 . -5) (undo-tree-id1837 . -5) (undo-tree-id1838 . -5) (undo-tree-id1839 . -5) (undo-tree-id1840 . -4) (undo-tree-id1841 . -3) (undo-tree-id1842 . -3) (undo-tree-id1843 . -3) (undo-tree-id1844 . -3) (undo-tree-id1845 . -3) (undo-tree-id1846 . -4) (undo-tree-id1847 . -5) (undo-tree-id1848 . -5) (undo-tree-id1849 . -5) (undo-tree-id1850 . -5) (undo-tree-id1851 . -5) (undo-tree-id1852 . -5) (undo-tree-id1853 . -5) (undo-tree-id1854 . -5) (undo-tree-id1855 . -5) (undo-tree-id1856 . -5) (undo-tree-id1857 . -5) (undo-tree-id1858 . -5) (undo-tree-id1859 . -5) (undo-tree-id1860 . -5) (undo-tree-id1861 . -5) (undo-tree-id1862 . -5) (undo-tree-id1863 . -5) (undo-tree-id1864 . -5) (undo-tree-id1865 . -5) (undo-tree-id1866 . -5) (undo-tree-id1867 . -5) (undo-tree-id1868 . -5) (undo-tree-id1869 . -5) (undo-tree-id1870 . -5) (undo-tree-id1871 . -5) (undo-tree-id1872 . -5) (undo-tree-id1873 . -5) (undo-tree-id1874 . -5) (undo-tree-id1875 . -5) (undo-tree-id1876 . -5) (undo-tree-id1877 . -5) (undo-tree-id1878 . -5) (undo-tree-id1879 . -5) (undo-tree-id1880 . -5) (undo-tree-id1881 . -5) (undo-tree-id1882 . -5) (undo-tree-id1883 . -5) (undo-tree-id1884 . -5) (undo-tree-id1885 . -5) (undo-tree-id1886 . -5) (undo-tree-id1887 . -5) (undo-tree-id1888 . -5) (undo-tree-id1889 . -5) (undo-tree-id1890 . -5) (undo-tree-id1891 . -5) (undo-tree-id1892 . -5) (undo-tree-id1893 . -5) (undo-tree-id1894 . -5) (undo-tree-id1895 . -5) (undo-tree-id1896 . -5) (undo-tree-id1897 . -5) (undo-tree-id1898 . -5) (undo-tree-id1899 . -5) (undo-tree-id1900 . -5) (undo-tree-id1901 . -5) (undo-tree-id1902 . -5) (undo-tree-id1903 . -5) (undo-tree-id1904 . -5) (undo-tree-id1905 . -5) 441) nil (26116 17970 154347 882000) 0 nil])
([nil nil ((#("u8;" 0 2 (face font-lock-type-face fontified t) 2 3 (fontified t)) . -433) (undo-tree-id1669 . -3) (undo-tree-id1670 . -3) (undo-tree-id1671 . -3) (undo-tree-id1672 . -3) (undo-tree-id1673 . -3) (undo-tree-id1674 . -3) (undo-tree-id1675 . -3) (undo-tree-id1676 . -3) (undo-tree-id1677 . -3) (undo-tree-id1678 . -3) (undo-tree-id1679 . -3) (undo-tree-id1680 . -3) (undo-tree-id1681 . -3) (undo-tree-id1682 . -3) (undo-tree-id1683 . -3) (undo-tree-id1684 . -3) (undo-tree-id1685 . -3) (undo-tree-id1686 . -3) (undo-tree-id1687 . -3) (undo-tree-id1688 . -3) (undo-tree-id1689 . -3) (undo-tree-id1690 . -3) (undo-tree-id1691 . -3) (undo-tree-id1692 . -3) (undo-tree-id1693 . -3) (undo-tree-id1694 . -3) (undo-tree-id1695 . -3) (undo-tree-id1696 . -3) (undo-tree-id1697 . -3) (undo-tree-id1698 . -3) (undo-tree-id1699 . -3) (undo-tree-id1700 . -3) (undo-tree-id1701 . -3) (undo-tree-id1702 . -3) (undo-tree-id1703 . -3) (undo-tree-id1704 . -3) (undo-tree-id1705 . -3) (undo-tree-id1706 . -3) (undo-tree-id1707 . -3) (undo-tree-id1708 . -3) (undo-tree-id1709 . -3) (undo-tree-id1710 . -3) (undo-tree-id1711 . -3) (undo-tree-id1712 . -3) (undo-tree-id1713 . -3) (undo-tree-id1714 . -3) (undo-tree-id1715 . -3) (undo-tree-id1716 . -3) (undo-tree-id1717 . -3) (undo-tree-id1718 . -3) (undo-tree-id1719 . -3) (undo-tree-id1720 . -3) (undo-tree-id1721 . -3) (undo-tree-id1722 . -3) (undo-tree-id1723 . -3) (undo-tree-id1724 . -3) (undo-tree-id1725 . -3) (undo-tree-id1726 . -3) (undo-tree-id1727 . -3) (undo-tree-id1728 . -3) (undo-tree-id1729 . -3) (undo-tree-id1730 . -3) (undo-tree-id1731 . -3) (undo-tree-id1732 . -3) (undo-tree-id1733 . -3) (undo-tree-id1734 . -3) (undo-tree-id1735 . -3) (undo-tree-id1736 . -3) (undo-tree-id1737 . -3) (undo-tree-id1738 . -3) (undo-tree-id1739 . -3) (undo-tree-id1740 . -3) (undo-tree-id1741 . -3) (undo-tree-id1742 . -3) (undo-tree-id1743 . -3) (undo-tree-id1744 . -3) (undo-tree-id1745 . -3) (undo-tree-id1746 . -3) (undo-tree-id1747 . -3) (undo-tree-id1748 . -3) (undo-tree-id1749 . -3) (undo-tree-id1750 . -3) (undo-tree-id1751 . -3) (undo-tree-id1752 . -3) (undo-tree-id1753 . -3) (undo-tree-id1754 . -3) (undo-tree-id1755 . -3) (undo-tree-id1756 . -3) (undo-tree-id1757 . -3) (undo-tree-id1758 . -3) (undo-tree-id1759 . -3) (undo-tree-id1760 . -3) (undo-tree-id1761 . -3) (undo-tree-id1762 . -3) (undo-tree-id1763 . -3) (undo-tree-id1764 . -3) (undo-tree-id1765 . -3) (undo-tree-id1766 . -3) (undo-tree-id1767 . -3) (undo-tree-id1768 . -3) (undo-tree-id1769 . -3) (undo-tree-id1770 . -3) (undo-tree-id1771 . -3) (undo-tree-id1772 . -3) (undo-tree-id1773 . -3) (undo-tree-id1774 . -3) (undo-tree-id1775 . -3) (undo-tree-id1776 . -3) (undo-tree-id1777 . -3) (undo-tree-id1778 . -3) (undo-tree-id1779 . -3) (undo-tree-id1780 . -3) (undo-tree-id1781 . -3) (undo-tree-id1782 . -3) (undo-tree-id1783 . -3) (undo-tree-id1784 . -3) (undo-tree-id1785 . -3) (undo-tree-id1786 . -3) (undo-tree-id1787 . -3) (undo-tree-id1788 . -3) (undo-tree-id1789 . -3) (undo-tree-id1790 . -3) 436) nil (26116 17970 154277 439000) 0 nil])
([nil nil ((#("transmute<[" 0 9 (fontified t) 9 10 (syntax-table (1) fontified t) 10 11 (face (rainbow-delimiters-depth-3-face) fontified t)) . -422) (undo-tree-id1545 . -11) (undo-tree-id1546 . -11) (undo-tree-id1547 . -11) (undo-tree-id1548 . -11) (undo-tree-id1549 . -11) (undo-tree-id1550 . -11) (undo-tree-id1551 . -11) (undo-tree-id1552 . -11) (undo-tree-id1553 . -11) (undo-tree-id1554 . -11) (undo-tree-id1555 . -11) (undo-tree-id1556 . -11) (undo-tree-id1557 . -11) (undo-tree-id1558 . -11) (undo-tree-id1559 . -11) (undo-tree-id1560 . -11) (undo-tree-id1561 . -11) (undo-tree-id1562 . -11) (undo-tree-id1563 . -11) (undo-tree-id1564 . -11) (undo-tree-id1565 . -11) (undo-tree-id1566 . -11) (undo-tree-id1567 . -11) (undo-tree-id1568 . -11) (undo-tree-id1569 . -11) (undo-tree-id1570 . -11) (undo-tree-id1571 . -11) (undo-tree-id1572 . -11) (undo-tree-id1573 . -11) (undo-tree-id1574 . -11) (undo-tree-id1575 . -11) (undo-tree-id1576 . -11) (undo-tree-id1577 . -11) (undo-tree-id1578 . -11) (undo-tree-id1579 . -11) (undo-tree-id1580 . -11) (undo-tree-id1581 . -11) (undo-tree-id1582 . -11) (undo-tree-id1583 . -11) (undo-tree-id1584 . -11) (undo-tree-id1585 . -11) (undo-tree-id1586 . -11) (undo-tree-id1587 . -11) (undo-tree-id1588 . -11) (undo-tree-id1589 . -11) (undo-tree-id1590 . -11) (undo-tree-id1591 . -11) (undo-tree-id1592 . -11) (undo-tree-id1593 . -11) (undo-tree-id1594 . -11) (undo-tree-id1595 . -11) (undo-tree-id1596 . -11) (undo-tree-id1597 . -11) (undo-tree-id1598 . -11) (undo-tree-id1599 . -11) (undo-tree-id1600 . -11) (undo-tree-id1601 . -11) (undo-tree-id1602 . -11) (undo-tree-id1603 . -11) (undo-tree-id1604 . -11) (undo-tree-id1605 . -11) (undo-tree-id1606 . -11) (undo-tree-id1607 . -11) (undo-tree-id1608 . -11) (undo-tree-id1609 . -11) (undo-tree-id1610 . -11) (undo-tree-id1611 . -11) (undo-tree-id1612 . -11) (undo-tree-id1613 . -11) (undo-tree-id1614 . -11) (undo-tree-id1615 . -11) (undo-tree-id1616 . -11) (undo-tree-id1617 . -11) (undo-tree-id1618 . -11) (undo-tree-id1619 . -11) (undo-tree-id1620 . -11) (undo-tree-id1621 . -11) (undo-tree-id1622 . -11) (undo-tree-id1623 . -11) (undo-tree-id1624 . -11) (undo-tree-id1625 . -11) (undo-tree-id1626 . -11) (undo-tree-id1627 . -11) (undo-tree-id1628 . -11) (undo-tree-id1629 . -11) (undo-tree-id1630 . -11) (undo-tree-id1631 . -11) (undo-tree-id1632 . -11) (undo-tree-id1633 . -11) (undo-tree-id1634 . -11) (undo-tree-id1635 . -11) (undo-tree-id1636 . -11) (undo-tree-id1637 . -11) (undo-tree-id1638 . -11) (undo-tree-id1639 . -11) (undo-tree-id1640 . -11) (undo-tree-id1641 . -11) (undo-tree-id1642 . -11) (undo-tree-id1643 . -11) (undo-tree-id1644 . -11) (undo-tree-id1645 . -11) (undo-tree-id1646 . -11) (undo-tree-id1647 . -11) (undo-tree-id1648 . -11) (undo-tree-id1649 . -11) (undo-tree-id1650 . -11) (undo-tree-id1651 . -11) (undo-tree-id1652 . -11) (undo-tree-id1653 . -11) (undo-tree-id1654 . -11) (undo-tree-id1655 . -11) (undo-tree-id1656 . -11) (undo-tree-id1657 . -11) (undo-tree-id1658 . -11) (undo-tree-id1659 . -11) (undo-tree-id1660 . -11) (undo-tree-id1661 . -11) (undo-tree-id1662 . -11) (undo-tree-id1663 . -11) (undo-tree-id1664 . -11) (undo-tree-id1665 . -11) (undo-tree-id1666 . -11) (undo-tree-id1667 . -11) (undo-tree-id1668 . -11) 433) nil (26116 17970 154183 960000) 0 nil])
([nil nil ((#("mem::" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t)) . -417) (undo-tree-id1419 . -5) (undo-tree-id1420 . -5) (undo-tree-id1421 . -5) (undo-tree-id1422 . -5) (undo-tree-id1423 . -5) (undo-tree-id1424 . -5) (undo-tree-id1425 . -5) (undo-tree-id1426 . -5) (undo-tree-id1427 . -5) (undo-tree-id1428 . -5) (undo-tree-id1429 . -5) (undo-tree-id1430 . -5) (undo-tree-id1431 . -5) (undo-tree-id1432 . -5) (undo-tree-id1433 . -5) (undo-tree-id1434 . -5) (undo-tree-id1435 . -5) (undo-tree-id1436 . -5) (undo-tree-id1437 . -5) (undo-tree-id1438 . -5) (undo-tree-id1439 . -5) (undo-tree-id1440 . -5) (undo-tree-id1441 . -5) (undo-tree-id1442 . -5) (undo-tree-id1443 . -5) (undo-tree-id1444 . -5) (undo-tree-id1445 . -5) (undo-tree-id1446 . -5) (undo-tree-id1447 . -5) (undo-tree-id1448 . -5) (undo-tree-id1449 . -5) (undo-tree-id1450 . -5) (undo-tree-id1451 . -5) (undo-tree-id1452 . -5) (undo-tree-id1453 . -5) (undo-tree-id1454 . -5) (undo-tree-id1455 . -5) (undo-tree-id1456 . -5) (undo-tree-id1457 . -5) (undo-tree-id1458 . -5) (undo-tree-id1459 . -5) (undo-tree-id1460 . -5) (undo-tree-id1461 . -5) (undo-tree-id1462 . -5) (undo-tree-id1463 . -5) (undo-tree-id1464 . -5) (undo-tree-id1465 . -5) (undo-tree-id1466 . -5) (undo-tree-id1467 . -5) (undo-tree-id1468 . -5) (undo-tree-id1469 . -5) (undo-tree-id1470 . -5) (undo-tree-id1471 . -5) (undo-tree-id1472 . -5) (undo-tree-id1473 . -5) (undo-tree-id1474 . -5) (undo-tree-id1475 . -5) (undo-tree-id1476 . -5) (undo-tree-id1477 . -5) (undo-tree-id1478 . -5) (undo-tree-id1479 . -5) (undo-tree-id1480 . -5) (undo-tree-id1481 . -5) (undo-tree-id1482 . -5) (undo-tree-id1483 . -5) (undo-tree-id1484 . -5) (undo-tree-id1485 . -5) (undo-tree-id1486 . -5) (undo-tree-id1487 . -5) (undo-tree-id1488 . -5) (undo-tree-id1489 . -5) (undo-tree-id1490 . -5) (undo-tree-id1491 . -5) (undo-tree-id1492 . -5) (undo-tree-id1493 . -5) (undo-tree-id1494 . -5) (undo-tree-id1495 . -5) (undo-tree-id1496 . -5) (undo-tree-id1497 . -5) (undo-tree-id1498 . -5) (undo-tree-id1499 . -5) (undo-tree-id1500 . -5) (undo-tree-id1501 . -5) (undo-tree-id1502 . -5) (undo-tree-id1503 . -5) (undo-tree-id1504 . -5) (undo-tree-id1505 . -5) (undo-tree-id1506 . -5) (undo-tree-id1507 . -5) (undo-tree-id1508 . -5) (undo-tree-id1509 . -5) (undo-tree-id1510 . -5) (undo-tree-id1511 . -5) (undo-tree-id1512 . -5) (undo-tree-id1513 . -5) (undo-tree-id1514 . -5) (undo-tree-id1515 . -5) (undo-tree-id1516 . -5) (undo-tree-id1517 . -5) (undo-tree-id1518 . -5) (undo-tree-id1519 . -5) (undo-tree-id1520 . -5) (undo-tree-id1521 . -5) (undo-tree-id1522 . -5) (undo-tree-id1523 . -5) (undo-tree-id1524 . -5) (undo-tree-id1525 . -5) (undo-tree-id1526 . -5) (undo-tree-id1527 . -5) (undo-tree-id1528 . -5) (undo-tree-id1529 . -5) (undo-tree-id1530 . -5) (undo-tree-id1531 . -5) (undo-tree-id1532 . -5) (undo-tree-id1533 . -5) (undo-tree-id1534 . -5) (undo-tree-id1535 . -5) (undo-tree-id1536 . -5) (undo-tree-id1537 . -5) (undo-tree-id1538 . -5) (undo-tree-id1539 . -5) (undo-tree-id1540 . -5) (undo-tree-id1541 . -5) (undo-tree-id1542 . -5) (undo-tree-id1543 . -5) (undo-tree-id1544 . -5) 422) nil (26116 17970 154094 960000) 0 nil])
([nil nil ((#("std::" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t)) . -412) (undo-tree-id1291 . -5) (undo-tree-id1292 . -5) (undo-tree-id1293 . -5) (undo-tree-id1294 . -5) (undo-tree-id1295 . -5) (undo-tree-id1296 . -5) (undo-tree-id1297 . -5) (undo-tree-id1298 . -5) (undo-tree-id1299 . -5) (undo-tree-id1300 . -5) (undo-tree-id1301 . -5) (undo-tree-id1302 . -5) (undo-tree-id1303 . -5) (undo-tree-id1304 . -5) (undo-tree-id1305 . -5) (undo-tree-id1306 . -5) (undo-tree-id1307 . -5) (undo-tree-id1308 . -5) (undo-tree-id1309 . -5) (undo-tree-id1310 . -5) (undo-tree-id1311 . -5) (undo-tree-id1312 . -5) (undo-tree-id1313 . -5) (undo-tree-id1314 . -5) (undo-tree-id1315 . -5) (undo-tree-id1316 . -5) (undo-tree-id1317 . -5) (undo-tree-id1318 . -5) (undo-tree-id1319 . -5) (undo-tree-id1320 . -5) (undo-tree-id1321 . -5) (undo-tree-id1322 . -5) (undo-tree-id1323 . -5) (undo-tree-id1324 . -5) (undo-tree-id1325 . -5) (undo-tree-id1326 . -5) (undo-tree-id1327 . -5) (undo-tree-id1328 . -5) (undo-tree-id1329 . -5) (undo-tree-id1330 . -5) (undo-tree-id1331 . -5) (undo-tree-id1332 . -5) (undo-tree-id1333 . -5) (undo-tree-id1334 . -5) (undo-tree-id1335 . -5) (undo-tree-id1336 . -5) (undo-tree-id1337 . -5) (undo-tree-id1338 . -5) (undo-tree-id1339 . -5) (undo-tree-id1340 . -5) (undo-tree-id1341 . -5) (undo-tree-id1342 . -5) (undo-tree-id1343 . -5) (undo-tree-id1344 . -5) (undo-tree-id1345 . -5) (undo-tree-id1346 . -5) (undo-tree-id1347 . -5) (undo-tree-id1348 . -5) (undo-tree-id1349 . -5) (undo-tree-id1350 . -5) (undo-tree-id1351 . -5) (undo-tree-id1352 . -5) (undo-tree-id1353 . -5) (undo-tree-id1354 . -5) (undo-tree-id1355 . -5) (undo-tree-id1356 . -5) (undo-tree-id1357 . -5) (undo-tree-id1358 . -5) (undo-tree-id1359 . -5) (undo-tree-id1360 . -5) (undo-tree-id1361 . -5) (undo-tree-id1362 . -5) (undo-tree-id1363 . -5) (undo-tree-id1364 . -5) (undo-tree-id1365 . -5) (undo-tree-id1366 . -5) (undo-tree-id1367 . -5) (undo-tree-id1368 . -5) (undo-tree-id1369 . -5) (undo-tree-id1370 . -5) (undo-tree-id1371 . -5) (undo-tree-id1372 . -5) (undo-tree-id1373 . -5) (undo-tree-id1374 . -5) (undo-tree-id1375 . -5) (undo-tree-id1376 . -5) (undo-tree-id1377 . -5) (undo-tree-id1378 . -5) (undo-tree-id1379 . -5) (undo-tree-id1380 . -5) (undo-tree-id1381 . -5) (undo-tree-id1382 . -5) (undo-tree-id1383 . -5) (undo-tree-id1384 . -5) (undo-tree-id1385 . -5) (undo-tree-id1386 . -5) (undo-tree-id1387 . -5) (undo-tree-id1388 . -5) (undo-tree-id1389 . -5) (undo-tree-id1390 . -5) (undo-tree-id1391 . -5) (undo-tree-id1392 . -5) (undo-tree-id1393 . -5) (undo-tree-id1394 . -5) (undo-tree-id1395 . -5) (undo-tree-id1396 . -5) (undo-tree-id1397 . -5) (undo-tree-id1398 . -5) (undo-tree-id1399 . -5) (undo-tree-id1400 . -5) (undo-tree-id1401 . -5) (undo-tree-id1402 . -5) (undo-tree-id1403 . -5) (undo-tree-id1404 . -5) (undo-tree-id1405 . -5) (undo-tree-id1406 . -5) (undo-tree-id1407 . -5) (undo-tree-id1408 . -5) (undo-tree-id1409 . -5) (undo-tree-id1410 . -5) (undo-tree-id1411 . -5) (undo-tree-id1412 . -5) (undo-tree-id1413 . -5) (undo-tree-id1414 . -5) (undo-tree-id1415 . -5) (undo-tree-id1416 . -5) (undo-tree-id1417 . -5) (undo-tree-id1418 . -5) 417) nil (26116 17970 154000 694000) 0 nil])
([nil nil ((392 . 396) (#("    " 0 4 (fontified nil)) . 391) (undo-tree-id1287 . -4) (undo-tree-id1288 . -4) (undo-tree-id1289 . -4) (undo-tree-id1290 . -4) (390 . 396)) nil (26116 17970 153904 779000) 0 nil])
([nil nil ((391 . 395)) nil (26116 17970 153901 594000) 0 nil])
([nil nil ((395 . 402)) nil (26116 17970 153901 39000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -400) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (#("s" 0 1 (face font-lock-variable-name-face fontified t)) . -401) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) 402) nil (26116 17970 153899 278000) 0 nil])
([nil nil ((400 . 405)) nil (26116 17970 152777 314000) 0 nil])
([nil nil ((402 . 407)) nil (26116 17970 152776 437000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t)) . -404) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (#("s" 0 1 (face font-lock-variable-name-face fontified t)) . -405) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -406) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) 407) nil (26116 17970 152773 778000) 0 nil])
([nil nil ((404 . 408)) nil (26116 17970 151987 849000) 0 nil])
([nil nil ((411 . 423)) nil (26116 17970 151987 233000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 431 432 nil nil nil t #s(yas--exit 433 nil))) #s(yas--exit 433 nil) 70 nil #s(yas--field 1 431 432 nil nil nil t #s(yas--exit 433 nil)) nil nil)) (421 . 435) (#("transmute(${1:src})$0" 0 21 (fontified nil)) . 421) (421 . 442) (#("tr" 0 2 (fontified nil)) . 421) (421 . 423) (#("transmute(…)" 0 12 (fontified nil)) . -421) (421 . 433) (#("tr" 0 2 (fontified t)) . -421) (undo-tree-id1239 . -2) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -2) (undo-tree-id1245 . -2) (undo-tree-id1246 . -2) (undo-tree-id1247 . -2) (undo-tree-id1248 . -2) 423) nil (26116 17970 151985 650000) 0 nil])
([nil nil ((#("src" 0 3 (fontified nil)) . 432) (undo-tree-id1238 . -3) (431 . 432)) nil (26116 17970 151976 521000) 0 nil])
([nil nil ((apply yas--snippet-revive 421 433 #s(yas--snippet nil (#s(yas--field 1 431 432 nil nil nil t #s(yas--exit 433 nil))) #s(yas--exit 433 nil) 70 nil #s(yas--field 1 431 432 nil nil nil t #s(yas--exit 433 nil)) nil nil))) nil (26116 17970 151974 332000) 0 nil])
([nil nil ((433 . 434)) nil (26116 17970 151973 568000) 0 nil])
([nil nil ((430 . 432)) nil (26116 17970 151972 379000) 0 nil])
([nil nil ((#("<" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -430) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (#(">" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -431) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) 432) nil (26116 17970 151966 973000) 0 nil])
([nil nil ((390 . 395) (t 26116 17970 175182 556000)) nil (26116 17980 468139 911000) 0 nil])
([nil nil ((395 . 398)) nil (26116 17980 468138 576000) 0 nil])
([nil nil ((apply yas--snippet-revive 395 401 #s(yas--snippet nil nil nil 71 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 71 nil nil nil nil)) (395 . 401) (#("unsafe" 0 6 (fontified nil)) . 395) (395 . 401) (#("uns" 0 3 (fontified nil)) . 395) (395 . 398) (#("unsafe" 0 6 (fontified nil)) . -395) (395 . 401) (#("uns" 0 3 (fontified t)) . -395) (undo-tree-id1999 . -3) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1) (undo-tree-id2002 . -2) (undo-tree-id2003 . -2) (undo-tree-id2004 . -2) (undo-tree-id2005 . -3) (undo-tree-id2006 . -3) (undo-tree-id2007 . -3) (undo-tree-id2008 . -3) (undo-tree-id2009 . -3) 398) nil (26116 17980 468136 547000) 0 nil])
([nil nil ((401 . 402)) nil (26116 17980 468120 707000) 0 nil])
([nil nil ((451 . 452)) nil (26116 17980 468119 525000) 0 nil])
([nil nil ((403 . 411) (#("    " 0 4 (fontified t)) . 403) 408) nil (26116 17980 468114 211000) 0 nil])
([nil nil ((446 . 447) (t 26116 17980 488516 522000)) nil (26116 17989 483780 114000) 0 nil])
([nil nil ((#(">" 0 1 (syntax-table (1) fontified t)) . -446) (undo-tree-id2010 . -1) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) (undo-tree-id2016 . -1) (undo-tree-id2017 . -1) (undo-tree-id2018 . -1) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) 447) nil (26116 17989 483778 268000) 0 nil])
([nil nil ((446 . 448)) nil (26116 17989 483765 754000) 0 nil])
([nil nil ((447 . 449)) nil (26116 17989 483764 526000) 0 nil])
([nil nil ((448 . 453)) nil (26116 17989 483760 530000) 0 nil])
([nil nil ((446 . 448) (t 26116 17989 498517 75000)) nil (26116 17996 204505 250000) 0 nil])
([nil nil ((457 . 459) (t 26116 17996 248517 490000)) nil (26116 17999 137936 830000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -457) (undo-tree-id2021 . -1) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (#(":" 0 1 (fontified t)) . -458) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) 459 (t 26116 17999 151851 1000)) nil (26116 18000 917715 142000) 0 nil])
([nil nil ((457 . 459) (t 26116 18000 931851 111000)) nil (26116 18016 761951 383000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -457) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) (#(":" 0 1 (fontified t)) . -458) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) (undo-tree-id2071 . -1) 459 (t 26116 18017 355185 452000)) nil (26116 18025 497698 655000) 0 nil] [nil nil ((#(":" 0 1 (fontified t)) . -446) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (#(":" 0 1 (fontified t)) . -447) (undo-tree-id2056 . -1) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) 448 (t 26116 18010 701851 711000)) ((446 . 448) (t 26116 18015 111851 981000)) (26116 18015 107101 93000) 0 nil])
([nil nil ((456 . 463) (t 26116 18025 511852 620000)) nil (26116 18035 200854 79000) 0 nil])
nil
([nil nil ((#("e" 0 1 (fontified t)) . -462) (undo-tree-id2072 . -1) (undo-tree-id2073 . -1) (undo-tree-id2074 . -1) (undo-tree-id2075 . -1) (undo-tree-id2076 . -1) (undo-tree-id2077 . -1) 463) nil (26116 18035 200849 609000) 0 nil])
([nil nil ((411 . 412) (t 26116 18035 215186 548000)) nil (26116 18050 822772 397000) 0 nil])
([nil nil ((#("let msg: &str = std::mem::transmute::<[u8;32], &str>(b);" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 7 (face font-lock-variable-name-face fontified t) 7 9 (fontified t) 9 10 (face rust-ampersand-face fontified t) 10 13 (face font-lock-type-face fontified t) 13 16 (fontified t) 16 19 (face font-lock-constant-face fontified t) 19 21 (fontified t) 21 24 (face font-lock-constant-face fontified t) 24 26 (fontified t) 26 35 (fontified t) 35 36 (fontified t) 36 37 (fontified t) 37 38 (face (rainbow-delimiters-depth-3-face) fontified t) 38 39 (face (rainbow-delimiters-depth-4-face) fontified t) 39 41 (face font-lock-type-face fontified t) 41 44 (fontified t) 44 45 (face (rainbow-delimiters-depth-4-face) fontified t) 45 47 (fontified t) 47 48 (face rust-ampersand-face fontified t) 48 51 (face font-lock-type-face fontified t) 51 52 (face (rainbow-delimiters-depth-3-face) fontified t) 52 53 (face (rainbow-delimiters-depth-3-face) fontified t) 53 54 (fontified t) 54 55 (face (rainbow-delimiters-depth-3-face) fontified t) 55 56 (fontified t)) . 412) (undo-tree-id2123 . -46) (undo-tree-id2124 . -51) (undo-tree-id2125 . -51) (undo-tree-id2126 . -51) (undo-tree-id2127 . -51) (undo-tree-id2128 . 5) (undo-tree-id2129 . -51) (undo-tree-id2130 . -51) (undo-tree-id2131 . -51) (undo-tree-id2132 . -51) (undo-tree-id2133 . -51) (undo-tree-id2134 . -51) (undo-tree-id2135 . -51) (undo-tree-id2136 . -51) (undo-tree-id2137 . -51) (undo-tree-id2138 . -51) (undo-tree-id2139 . -51) (undo-tree-id2140 . -51) (undo-tree-id2141 . -51) (undo-tree-id2142 . -50) (undo-tree-id2143 . -49) (undo-tree-id2144 . -48) (undo-tree-id2145 . -48) (undo-tree-id2146 . -48) (undo-tree-id2147 . -48) (undo-tree-id2148 . -48) (undo-tree-id2149 . -48) (undo-tree-id2150 . -48) (undo-tree-id2151 . -56)) nil (26116 18050 822770 568000) 0 nil])
([nil nil ((#("    unsafe{" 0 4 (fontified t) 4 10 (face rust-unsafe fontified t) 10 11 (face (rainbow-delimiters-depth-2-face) fontified t)) . 391) (undo-tree-id2122 . -11)) nil (26116 18050 822751 301000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 391) (undo-tree-id2119 . -1) (undo-tree-id2120 . -1) (undo-tree-id2121 . -1)) nil (26116 18050 822749 871000) 0 nil])
([nil nil ((#("        
" 0 9 (fontified t)) . 391) (undo-tree-id2082 . -9) (undo-tree-id2083 . -9) (undo-tree-id2084 . -9) (undo-tree-id2085 . -9) (undo-tree-id2086 . -9) (undo-tree-id2087 . -9) (undo-tree-id2088 . -9) (undo-tree-id2089 . -9) (undo-tree-id2090 . -9) (undo-tree-id2091 . -9) (undo-tree-id2092 . -9) (undo-tree-id2093 . -9) (undo-tree-id2094 . -9) (undo-tree-id2095 . -9) (undo-tree-id2096 . -9) (undo-tree-id2097 . -9) (undo-tree-id2098 . -9) (undo-tree-id2099 . -9) (undo-tree-id2100 . -9) (undo-tree-id2101 . -9) (undo-tree-id2102 . -9) (undo-tree-id2103 . -9) (undo-tree-id2104 . -9) (undo-tree-id2105 . -9) (undo-tree-id2106 . -9) (undo-tree-id2107 . -9) (undo-tree-id2108 . -9) (undo-tree-id2109 . -8) (undo-tree-id2110 . -8) (undo-tree-id2111 . -8) (undo-tree-id2112 . -9) (undo-tree-id2113 . -9) (undo-tree-id2114 . -9) (undo-tree-id2115 . -9) (undo-tree-id2116 . -9) (undo-tree-id2117 . -9) (undo-tree-id2118 . -9)) nil (26116 18050 822745 771000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 391) (undo-tree-id2080 . 1) (undo-tree-id2081 . -1)) nil (26116 18050 822720 577000) 0 nil])
([nil nil ((#("    }" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-1-face) fontified t)) . 391) (undo-tree-id2078 . 5) (undo-tree-id2079 . -5)) nil (26116 18050 822714 377000) 0 nil])
([nil nil ((413 . 416) (t 26116 18050 835187 507000)) nil (26116 18172 323810 328000) 0 nil])
([nil nil ((413 . 419) (#("Str" 0 3 (fontified nil)) . 413) (413 . 416) (#("String" 0 6 (fontified nil)) . -413) (413 . 419) (#("Str" 0 3 (face font-lock-type-face fontified t)) . -413) (undo-tree-id2969 . -3) (undo-tree-id2970 . -1) (undo-tree-id2971 . -1) (undo-tree-id2972 . -1) (undo-tree-id2973 . -2) (undo-tree-id2974 . -2) (undo-tree-id2975 . -2) (undo-tree-id2976 . -3) (undo-tree-id2977 . -3) 416) nil (26116 18172 323808 899000) 0 nil])
([nil nil ((419 . 425)) nil (26116 18172 323802 12000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 436 437 nil nil nil t #s(yas--field 2 439 445 nil nil nil nil #s(yas--field 3 447 455 nil nil nil nil #s(yas--exit 456 nil)))) #s(yas--field 2 439 445 nil nil nil nil #s(yas--field 3 447 455 nil nil nil nil #s(yas--exit 456 nil))) #s(yas--field 3 447 455 nil nil nil nil #s(yas--exit 456 nil))) #s(yas--exit 456 nil) 72 nil #s(yas--field 1 436 437 nil nil nil t #s(yas--field 2 439 445 nil nil nil nil #s(yas--field 3 447 455 nil nil nil nil #s(yas--exit 456 nil)))) nil nil)) (421 . 458) (#("from_raw_parts(${1:buf}, ${2:length}, ${3:capacity})$0" 0 54 (fontified nil)) . 421) (421 . 475) (#("from" 0 4 (fontified nil)) . 421) (421 . 425) (#("from_raw_parts(…)" 0 17 (fontified nil)) . -421) (421 . 438) (#("from" 0 4 (fontified t)) . -421) (undo-tree-id2951 . -4) (undo-tree-id2952 . -4) (undo-tree-id2953 . -1) (undo-tree-id2954 . -1) (undo-tree-id2955 . -1) (undo-tree-id2956 . -2) (undo-tree-id2957 . -2) (undo-tree-id2958 . -3) (undo-tree-id2959 . -3) (undo-tree-id2960 . -4) (undo-tree-id2961 . -4) (undo-tree-id2962 . -4) (undo-tree-id2963 . -4) (undo-tree-id2964 . -4) (undo-tree-id2965 . -4) (undo-tree-id2966 . -4) (undo-tree-id2967 . -4) (undo-tree-id2968 . -4) 425) nil (26116 18172 323800 316000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -436) (undo-tree-id2906 . -1) (undo-tree-id2907 . -1) (undo-tree-id2908 . -1) (undo-tree-id2909 . -1) (undo-tree-id2910 . -1) (undo-tree-id2911 . -1) (undo-tree-id2912 . -1) (undo-tree-id2913 . -1) (undo-tree-id2914 . -1) (undo-tree-id2915 . -1) (undo-tree-id2916 . -1) (undo-tree-id2917 . -1) (undo-tree-id2918 . -1) (undo-tree-id2919 . -1) (undo-tree-id2920 . -1) (undo-tree-id2921 . -1) (undo-tree-id2922 . -1) (#("u" 0 1 (fontified t)) . -437) (undo-tree-id2923 . -1) (undo-tree-id2924 . -1) (undo-tree-id2925 . -1) (undo-tree-id2926 . -1) (undo-tree-id2927 . -1) (undo-tree-id2928 . -1) (undo-tree-id2929 . -1) (undo-tree-id2930 . -1) (undo-tree-id2931 . -1) (undo-tree-id2932 . -1) (undo-tree-id2933 . -1) (undo-tree-id2934 . -1) (undo-tree-id2935 . -1) (undo-tree-id2936 . -1) (undo-tree-id2937 . -1) (#("f" 0 1 (fontified t)) . -438) (undo-tree-id2938 . -1) (undo-tree-id2939 . -1) (undo-tree-id2940 . -1) (undo-tree-id2941 . -1) (undo-tree-id2942 . -1) (undo-tree-id2943 . -1) (undo-tree-id2944 . -1) (undo-tree-id2945 . -1) (undo-tree-id2946 . -1) (undo-tree-id2947 . -1) (undo-tree-id2948 . -1) (undo-tree-id2949 . -1) (undo-tree-id2950 . -1) 439) nil (26116 18172 323785 915000) 0 nil])
([nil nil ((436 . 437)) nil (26116 18172 323759 117000) 0 nil])
([nil nil ((436 . 437) (#("b" 0 1 (fontified nil)) . 436) (undo-tree-id2888 . -1) (436 . 437) (#("b" 0 1 (fontified t)) . -436) (undo-tree-id2889 . -1) (undo-tree-id2890 . -1) (undo-tree-id2891 . -1) (undo-tree-id2892 . -1) (undo-tree-id2893 . -1) (undo-tree-id2894 . -1) (undo-tree-id2895 . -1) (undo-tree-id2896 . -1) (undo-tree-id2897 . -1) (undo-tree-id2898 . -1) (undo-tree-id2899 . -1) (undo-tree-id2900 . -1) (undo-tree-id2901 . -1) (undo-tree-id2902 . -1) (undo-tree-id2903 . -1) (undo-tree-id2904 . -1) (undo-tree-id2905 . -1) 437) nil (26116 18172 323757 752000) 0 nil])
([nil nil ((apply yas--snippet-revive 421 456 #s(yas--snippet nil (#s(yas--field 1 436 437 nil nil nil t #s(yas--field 2 439 445 nil nil nil nil #s(yas--field 3 447 455 nil nil nil nil #s(yas--exit 456 nil)))) #s(yas--field 2 439 445 nil nil nil nil #s(yas--field 3 447 455 nil nil nil nil #s(yas--exit 456 nil))) #s(yas--field 3 447 455 nil nil nil nil #s(yas--exit 456 nil))) #s(yas--exit 456 nil) 72 nil #s(yas--field 1 436 437 nil nil nil t #s(yas--field 2 439 445 nil nil nil nil #s(yas--field 3 447 455 nil nil nil nil #s(yas--exit 456 nil)))) nil nil))) nil (26116 18172 323746 619000) 0 nil])
([nil nil ((#("capacity))" 0 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-3-face) fontified t) 9 10 (face (rainbow-delimiters-depth-2-face) fontified t)) . -447) (undo-tree-id2873 . -10) (undo-tree-id2874 . -10) (undo-tree-id2875 . -9) (undo-tree-id2876 . -9) (undo-tree-id2877 . -8) (undo-tree-id2878 . -8) (undo-tree-id2879 . -8) (undo-tree-id2880 . -8) (undo-tree-id2881 . -8) (undo-tree-id2882 . -9) (undo-tree-id2883 . -9) (undo-tree-id2884 . -9) (undo-tree-id2885 . -10) (undo-tree-id2886 . -10) (undo-tree-id2887 . -10) 457) nil (26116 18172 323745 497000) 0 nil])
([nil nil ((#("length, " 0 8 (fontified t)) . -439) (undo-tree-id2851 . -8) (undo-tree-id2852 . -8) (undo-tree-id2853 . -8) (undo-tree-id2854 . -8) (undo-tree-id2855 . -6) (undo-tree-id2856 . -6) (undo-tree-id2857 . -6) (undo-tree-id2858 . -6) (undo-tree-id2859 . -6) (undo-tree-id2860 . -8) (undo-tree-id2861 . -8) (undo-tree-id2862 . -8) (undo-tree-id2863 . -8) (undo-tree-id2864 . -8) (undo-tree-id2865 . -8) (undo-tree-id2866 . -8) (undo-tree-id2867 . -8) (undo-tree-id2868 . -8) (undo-tree-id2869 . -8) (undo-tree-id2870 . -8) (undo-tree-id2871 . -8) (undo-tree-id2872 . -8) 447) nil (26116 18172 323735 877000) 0 nil])
([nil nil ((#("b, " 0 1 (fontified t) 1 3 (fontified t)) . -436) (undo-tree-id2817 . -3) (undo-tree-id2818 . -3) (undo-tree-id2819 . -3) (undo-tree-id2820 . -3) (undo-tree-id2821 . -1) (undo-tree-id2822 . -1) (undo-tree-id2823 . -1) (undo-tree-id2824 . -1) (undo-tree-id2825 . -1) (undo-tree-id2826 . -1) (undo-tree-id2827 . -1) (undo-tree-id2828 . -1) (undo-tree-id2829 . -1) (undo-tree-id2830 . -1) (undo-tree-id2831 . -3) (undo-tree-id2832 . -3) (undo-tree-id2833 . -3) (undo-tree-id2834 . -3) (undo-tree-id2835 . -3) (undo-tree-id2836 . -3) (undo-tree-id2837 . -3) (undo-tree-id2838 . -3) (undo-tree-id2839 . -3) (undo-tree-id2840 . -3) (undo-tree-id2841 . -3) (undo-tree-id2842 . -3) (undo-tree-id2843 . -3) (undo-tree-id2844 . -3) (undo-tree-id2845 . -3) (undo-tree-id2846 . -3) (undo-tree-id2847 . -3) (undo-tree-id2848 . -3) (undo-tree-id2849 . -3) (undo-tree-id2850 . -3) 439) nil (26116 18172 323720 702000) 0 nil])
([nil nil ((#("parts(" 0 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-3-face) fontified t)) . -430) (undo-tree-id2729 . -6) (undo-tree-id2730 . -6) (undo-tree-id2731 . -6) (undo-tree-id2732 . -6) (undo-tree-id2733 . -6) (undo-tree-id2734 . -6) (undo-tree-id2735 . -6) (undo-tree-id2736 . -6) (undo-tree-id2737 . -6) (undo-tree-id2738 . -6) (undo-tree-id2739 . -6) (undo-tree-id2740 . -6) (undo-tree-id2741 . -6) (undo-tree-id2742 . -6) (undo-tree-id2743 . -6) (undo-tree-id2744 . -6) (undo-tree-id2745 . -6) (undo-tree-id2746 . -6) (undo-tree-id2747 . -6) (undo-tree-id2748 . -6) (undo-tree-id2749 . -6) (undo-tree-id2750 . -6) (undo-tree-id2751 . -6) (undo-tree-id2752 . -6) (undo-tree-id2753 . -6) (undo-tree-id2754 . -6) (undo-tree-id2755 . -6) (undo-tree-id2756 . -6) (undo-tree-id2757 . -6) (undo-tree-id2758 . -6) (undo-tree-id2759 . -6) (undo-tree-id2760 . -6) (undo-tree-id2761 . -6) (undo-tree-id2762 . -6) (undo-tree-id2763 . -6) (undo-tree-id2764 . -6) (undo-tree-id2765 . -6) (undo-tree-id2766 . -6) (undo-tree-id2767 . -6) (undo-tree-id2768 . -6) (undo-tree-id2769 . -6) (undo-tree-id2770 . -6) (undo-tree-id2771 . -6) (undo-tree-id2772 . -6) (undo-tree-id2773 . -6) (undo-tree-id2774 . -6) (undo-tree-id2775 . -6) (undo-tree-id2776 . -6) (undo-tree-id2777 . -6) (undo-tree-id2778 . -6) (undo-tree-id2779 . -6) (undo-tree-id2780 . -6) (undo-tree-id2781 . -6) (undo-tree-id2782 . -6) (undo-tree-id2783 . -6) (undo-tree-id2784 . -6) (undo-tree-id2785 . -6) (undo-tree-id2786 . -6) (undo-tree-id2787 . -6) (undo-tree-id2788 . -6) (undo-tree-id2789 . -6) (undo-tree-id2790 . -6) (undo-tree-id2791 . -6) (undo-tree-id2792 . -6) (undo-tree-id2793 . -6) (undo-tree-id2794 . -6) (undo-tree-id2795 . -6) (undo-tree-id2796 . -6) (undo-tree-id2797 . -6) (undo-tree-id2798 . -6) (undo-tree-id2799 . -6) (undo-tree-id2800 . -6) (undo-tree-id2801 . -6) (undo-tree-id2802 . -6) (undo-tree-id2803 . -6) (undo-tree-id2804 . -6) (undo-tree-id2805 . -6) (undo-tree-id2806 . -6) (undo-tree-id2807 . -6) (undo-tree-id2808 . -6) (undo-tree-id2809 . -6) (undo-tree-id2810 . -6) (undo-tree-id2811 . -6) (undo-tree-id2812 . -6) (undo-tree-id2813 . -6) (undo-tree-id2814 . -6) (undo-tree-id2815 . -6) (undo-tree-id2816 . -6) 436) nil (26116 18172 323698 623000) 0 nil])
([nil nil ((#("raw_" 0 4 (fontified t)) . -426) (undo-tree-id2639 . -4) (undo-tree-id2640 . -4) (undo-tree-id2641 . -4) (undo-tree-id2642 . -4) (undo-tree-id2643 . -4) (undo-tree-id2644 . -4) (undo-tree-id2645 . -4) (undo-tree-id2646 . -4) (undo-tree-id2647 . -4) (undo-tree-id2648 . -4) (undo-tree-id2649 . -4) (undo-tree-id2650 . -4) (undo-tree-id2651 . -4) (undo-tree-id2652 . -4) (undo-tree-id2653 . -4) (undo-tree-id2654 . -4) (undo-tree-id2655 . -4) (undo-tree-id2656 . -4) (undo-tree-id2657 . -4) (undo-tree-id2658 . -4) (undo-tree-id2659 . -4) (undo-tree-id2660 . -4) (undo-tree-id2661 . -4) (undo-tree-id2662 . -4) (undo-tree-id2663 . -4) (undo-tree-id2664 . -4) (undo-tree-id2665 . -4) (undo-tree-id2666 . -4) (undo-tree-id2667 . -4) (undo-tree-id2668 . -4) (undo-tree-id2669 . -4) (undo-tree-id2670 . -4) (undo-tree-id2671 . -4) (undo-tree-id2672 . -4) (undo-tree-id2673 . -4) (undo-tree-id2674 . -4) (undo-tree-id2675 . -4) (undo-tree-id2676 . -4) (undo-tree-id2677 . -4) (undo-tree-id2678 . -4) (undo-tree-id2679 . -4) (undo-tree-id2680 . -4) (undo-tree-id2681 . -4) (undo-tree-id2682 . -4) (undo-tree-id2683 . -4) (undo-tree-id2684 . -4) (undo-tree-id2685 . -4) (undo-tree-id2686 . -4) (undo-tree-id2687 . -4) (undo-tree-id2688 . -4) (undo-tree-id2689 . -4) (undo-tree-id2690 . -4) (undo-tree-id2691 . -4) (undo-tree-id2692 . -4) (undo-tree-id2693 . -4) (undo-tree-id2694 . -4) (undo-tree-id2695 . -4) (undo-tree-id2696 . -4) (undo-tree-id2697 . -4) (undo-tree-id2698 . -4) (undo-tree-id2699 . -4) (undo-tree-id2700 . -4) (undo-tree-id2701 . -4) (undo-tree-id2702 . -4) (undo-tree-id2703 . -4) (undo-tree-id2704 . -4) (undo-tree-id2705 . -4) (undo-tree-id2706 . -4) (undo-tree-id2707 . -4) (undo-tree-id2708 . -4) (undo-tree-id2709 . -4) (undo-tree-id2710 . -4) (undo-tree-id2711 . -4) (undo-tree-id2712 . -4) (undo-tree-id2713 . -4) (undo-tree-id2714 . -4) (undo-tree-id2715 . -4) (undo-tree-id2716 . -4) (undo-tree-id2717 . -4) (undo-tree-id2718 . -4) (undo-tree-id2719 . -4) (undo-tree-id2720 . -4) (undo-tree-id2721 . -4) (undo-tree-id2722 . -4) (undo-tree-id2723 . -4) (undo-tree-id2724 . -4) (undo-tree-id2725 . -4) (undo-tree-id2726 . -4) (undo-tree-id2727 . -4) (undo-tree-id2728 . -4) 430) nil (26116 18172 323645 56000) 0 nil])
([nil nil ((#("from_" 0 5 (fontified t)) . -421) (undo-tree-id2547 . -5) (undo-tree-id2548 . -5) (undo-tree-id2549 . -5) (undo-tree-id2550 . -5) (undo-tree-id2551 . -5) (undo-tree-id2552 . -5) (undo-tree-id2553 . -5) (undo-tree-id2554 . -5) (undo-tree-id2555 . -5) (undo-tree-id2556 . -5) (undo-tree-id2557 . -5) (undo-tree-id2558 . -5) (undo-tree-id2559 . -5) (undo-tree-id2560 . -5) (undo-tree-id2561 . -5) (undo-tree-id2562 . -5) (undo-tree-id2563 . -5) (undo-tree-id2564 . -5) (undo-tree-id2565 . -5) (undo-tree-id2566 . -5) (undo-tree-id2567 . -5) (undo-tree-id2568 . -5) (undo-tree-id2569 . -5) (undo-tree-id2570 . -5) (undo-tree-id2571 . -5) (undo-tree-id2572 . -5) (undo-tree-id2573 . -5) (undo-tree-id2574 . -5) (undo-tree-id2575 . -5) (undo-tree-id2576 . -5) (undo-tree-id2577 . -5) (undo-tree-id2578 . -5) (undo-tree-id2579 . -5) (undo-tree-id2580 . -5) (undo-tree-id2581 . -5) (undo-tree-id2582 . -5) (undo-tree-id2583 . -5) (undo-tree-id2584 . -5) (undo-tree-id2585 . -5) (undo-tree-id2586 . -5) (undo-tree-id2587 . -5) (undo-tree-id2588 . -5) (undo-tree-id2589 . -5) (undo-tree-id2590 . -5) (undo-tree-id2591 . -5) (undo-tree-id2592 . -5) (undo-tree-id2593 . -5) (undo-tree-id2594 . -5) (undo-tree-id2595 . -5) (undo-tree-id2596 . -5) (undo-tree-id2597 . -5) (undo-tree-id2598 . -5) (undo-tree-id2599 . -5) (undo-tree-id2600 . -5) (undo-tree-id2601 . -5) (undo-tree-id2602 . -5) (undo-tree-id2603 . -5) (undo-tree-id2604 . -5) (undo-tree-id2605 . -5) (undo-tree-id2606 . -5) (undo-tree-id2607 . -5) (undo-tree-id2608 . -5) (undo-tree-id2609 . -5) (undo-tree-id2610 . -5) (undo-tree-id2611 . -5) (undo-tree-id2612 . -5) (undo-tree-id2613 . -5) (undo-tree-id2614 . -5) (undo-tree-id2615 . -5) (undo-tree-id2616 . -5) (undo-tree-id2617 . -5) (undo-tree-id2618 . -5) (undo-tree-id2619 . -5) (undo-tree-id2620 . -5) (undo-tree-id2621 . -5) (undo-tree-id2622 . -5) (undo-tree-id2623 . -5) (undo-tree-id2624 . -5) (undo-tree-id2625 . -5) (undo-tree-id2626 . -5) (undo-tree-id2627 . -5) (undo-tree-id2628 . -5) (undo-tree-id2629 . -5) (undo-tree-id2630 . -5) (undo-tree-id2631 . -5) (undo-tree-id2632 . -5) (undo-tree-id2633 . -5) (undo-tree-id2634 . -5) (undo-tree-id2635 . -5) (undo-tree-id2636 . -5) (undo-tree-id2637 . -5) (undo-tree-id2638 . -5) 426) nil (26116 18172 323589 484000) 0 nil])
([nil nil ((#("String::" 0 6 (face font-lock-type-face fontified t) 6 8 (fontified t)) . -413) (undo-tree-id2429 . -8) (undo-tree-id2430 . -8) (undo-tree-id2431 . -6) (undo-tree-id2432 . -6) (undo-tree-id2433 . -6) (undo-tree-id2434 . -7) (undo-tree-id2435 . -7) (undo-tree-id2436 . -8) (undo-tree-id2437 . -8) (undo-tree-id2438 . -8) (undo-tree-id2439 . -8) (undo-tree-id2440 . -8) (undo-tree-id2441 . -8) (undo-tree-id2442 . -8) (undo-tree-id2443 . -8) (undo-tree-id2444 . -8) (undo-tree-id2445 . -8) (undo-tree-id2446 . -8) (undo-tree-id2447 . -8) (undo-tree-id2448 . -8) (undo-tree-id2449 . -8) (undo-tree-id2450 . -8) (undo-tree-id2451 . -8) (undo-tree-id2452 . -8) (undo-tree-id2453 . -8) (undo-tree-id2454 . -8) (undo-tree-id2455 . -8) (undo-tree-id2456 . -8) (undo-tree-id2457 . -8) (undo-tree-id2458 . -8) (undo-tree-id2459 . -8) (undo-tree-id2460 . -8) (undo-tree-id2461 . -8) (undo-tree-id2462 . -8) (undo-tree-id2463 . -8) (undo-tree-id2464 . -8) (undo-tree-id2465 . -8) (undo-tree-id2466 . -8) (undo-tree-id2467 . -8) (undo-tree-id2468 . -8) (undo-tree-id2469 . -8) (undo-tree-id2470 . -8) (undo-tree-id2471 . -8) (undo-tree-id2472 . -8) (undo-tree-id2473 . -8) (undo-tree-id2474 . -8) (undo-tree-id2475 . -8) (undo-tree-id2476 . -8) (undo-tree-id2477 . -8) (undo-tree-id2478 . -8) (undo-tree-id2479 . -8) (undo-tree-id2480 . -8) (undo-tree-id2481 . -8) (undo-tree-id2482 . -8) (undo-tree-id2483 . -8) (undo-tree-id2484 . -8) (undo-tree-id2485 . -8) (undo-tree-id2486 . -8) (undo-tree-id2487 . -8) (undo-tree-id2488 . -8) (undo-tree-id2489 . -8) (undo-tree-id2490 . -8) (undo-tree-id2491 . -8) (undo-tree-id2492 . -8) (undo-tree-id2493 . -8) (undo-tree-id2494 . -8) (undo-tree-id2495 . -8) (undo-tree-id2496 . -8) (undo-tree-id2497 . -8) (undo-tree-id2498 . -8) (undo-tree-id2499 . -8) (undo-tree-id2500 . -8) (undo-tree-id2501 . -8) (undo-tree-id2502 . -8) (undo-tree-id2503 . -8) (undo-tree-id2504 . -8) (undo-tree-id2505 . -8) (undo-tree-id2506 . -8) (undo-tree-id2507 . -8) (undo-tree-id2508 . -8) (undo-tree-id2509 . -8) (undo-tree-id2510 . -8) (undo-tree-id2511 . -8) (undo-tree-id2512 . -8) (undo-tree-id2513 . -8) (undo-tree-id2514 . -8) (undo-tree-id2515 . -8) (undo-tree-id2516 . -8) (undo-tree-id2517 . -8) (undo-tree-id2518 . -8) (undo-tree-id2519 . -8) (undo-tree-id2520 . -8) (undo-tree-id2521 . -8) (undo-tree-id2522 . -8) (undo-tree-id2523 . -8) (undo-tree-id2524 . -8) (undo-tree-id2525 . -8) (undo-tree-id2526 . -8) (undo-tree-id2527 . -8) (undo-tree-id2528 . -8) (undo-tree-id2529 . -8) (undo-tree-id2530 . -8) (undo-tree-id2531 . -8) (undo-tree-id2532 . -8) (undo-tree-id2533 . -8) (undo-tree-id2534 . -8) (undo-tree-id2535 . -8) (undo-tree-id2536 . -8) (undo-tree-id2537 . -8) (undo-tree-id2538 . -8) (undo-tree-id2539 . -8) (undo-tree-id2540 . -8) (undo-tree-id2541 . -8) (undo-tree-id2542 . -8) (undo-tree-id2543 . -8) (undo-tree-id2544 . -8) (undo-tree-id2545 . -8) (undo-tree-id2546 . -8) 421) nil (26116 18172 323037 510000) 0 nil])
([nil nil ((413 . 420)) nil (26116 18172 322719 350000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -419) (undo-tree-id2426 . -1) (undo-tree-id2427 . -1) (undo-tree-id2428 . -1) 420) nil (26116 18172 322718 623000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -418) (undo-tree-id2419 . -1) (undo-tree-id2420 . -1) (undo-tree-id2421 . -1) (undo-tree-id2422 . -1) (undo-tree-id2423 . -1) (undo-tree-id2424 . -1) (undo-tree-id2425 . -1) 419) nil (26116 18172 322715 930000) 0 nil])
([nil nil ((#("str::" 0 3 (face font-lock-type-face fontified t) 3 5 (fontified t)) . -413) (undo-tree-id2397 . -5) (undo-tree-id2398 . -1) (undo-tree-id2399 . -1) (undo-tree-id2400 . -2) (undo-tree-id2401 . -2) (undo-tree-id2402 . -3) (undo-tree-id2403 . -3) (undo-tree-id2404 . -3) (undo-tree-id2405 . -3) (undo-tree-id2406 . -3) (undo-tree-id2407 . -4) (undo-tree-id2408 . -4) (undo-tree-id2409 . -5) (undo-tree-id2410 . -5) (undo-tree-id2411 . -5) (undo-tree-id2412 . -5) (undo-tree-id2413 . -5) (undo-tree-id2414 . -5) (undo-tree-id2415 . -5) (undo-tree-id2416 . -5) (undo-tree-id2417 . -5) (undo-tree-id2418 . -5) 418) nil (26116 18172 322710 468000) 0 nil])
([nil nil ((413 . 416)) nil (26116 18172 322695 740000) 0 nil])
([nil nil ((#("S" 0 1 (face font-lock-type-face fontified t)) . -413) (undo-tree-id2364 . -1) (undo-tree-id2365 . -1) (undo-tree-id2366 . -1) (undo-tree-id2367 . -1) (undo-tree-id2368 . -1) (undo-tree-id2369 . -1) (undo-tree-id2370 . -1) (undo-tree-id2371 . -1) (undo-tree-id2372 . -1) (undo-tree-id2373 . -1) (undo-tree-id2374 . -1) (undo-tree-id2375 . -1) (undo-tree-id2376 . -1) (undo-tree-id2377 . -1) (undo-tree-id2378 . -1) (undo-tree-id2379 . -1) (undo-tree-id2380 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -414) (undo-tree-id2381 . -1) (undo-tree-id2382 . -1) (undo-tree-id2383 . -1) (undo-tree-id2384 . -1) (undo-tree-id2385 . -1) (undo-tree-id2386 . -1) (undo-tree-id2387 . -1) (undo-tree-id2388 . -1) (undo-tree-id2389 . -1) (undo-tree-id2390 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -415) (undo-tree-id2391 . -1) (undo-tree-id2392 . -1) (undo-tree-id2393 . -1) (undo-tree-id2394 . -1) (undo-tree-id2395 . -1) (undo-tree-id2396 . -1) 416) nil (26116 18172 322693 693000) 0 nil])
([nil nil ((413 . 414)) nil (26116 18172 322610 67000) 0 nil])
([nil nil ((413 . 418)) nil (26116 18172 322609 488000) 0 nil])
([nil nil ((418 . 420)) nil (26116 18172 322608 955000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -416) (undo-tree-id2284 . -1) (undo-tree-id2285 . -1) (undo-tree-id2286 . -1) (undo-tree-id2287 . -1) (undo-tree-id2288 . -1) (undo-tree-id2289 . -1) (undo-tree-id2290 . -1) (undo-tree-id2291 . -1) (undo-tree-id2292 . -1) (undo-tree-id2293 . -1) (undo-tree-id2294 . -1) (undo-tree-id2295 . -1) (undo-tree-id2296 . -1) (undo-tree-id2297 . -1) (undo-tree-id2298 . -1) (undo-tree-id2299 . -1) (undo-tree-id2300 . -1) (undo-tree-id2301 . -1) (undo-tree-id2302 . -1) (undo-tree-id2303 . -1) (undo-tree-id2304 . -1) (undo-tree-id2305 . -1) (undo-tree-id2306 . -1) (undo-tree-id2307 . -1) (undo-tree-id2308 . -1) (undo-tree-id2309 . -1) (undo-tree-id2310 . -1) (undo-tree-id2311 . -1) (undo-tree-id2312 . -1) (undo-tree-id2313 . -1) (undo-tree-id2314 . -1) (#(":" 0 1 (fontified t)) . -417) (undo-tree-id2315 . -1) (undo-tree-id2316 . -1) (undo-tree-id2317 . -1) (undo-tree-id2318 . -1) (undo-tree-id2319 . -1) (undo-tree-id2320 . -1) (undo-tree-id2321 . -1) (undo-tree-id2322 . -1) (undo-tree-id2323 . -1) (undo-tree-id2324 . -1) (undo-tree-id2325 . -1) (undo-tree-id2326 . -1) (undo-tree-id2327 . -1) (undo-tree-id2328 . -1) (undo-tree-id2329 . -1) (undo-tree-id2330 . -1) (undo-tree-id2331 . -1) (undo-tree-id2332 . -1) (undo-tree-id2333 . -1) (undo-tree-id2334 . -1) (undo-tree-id2335 . -1) (undo-tree-id2336 . -1) (undo-tree-id2337 . -1) (undo-tree-id2338 . -1) (undo-tree-id2339 . -1) (undo-tree-id2340 . -1) (#("f" 0 1 (fontified t)) . -418) (undo-tree-id2341 . -1) (undo-tree-id2342 . -1) (undo-tree-id2343 . -1) (undo-tree-id2344 . -1) (undo-tree-id2345 . -1) (undo-tree-id2346 . -1) (undo-tree-id2347 . -1) (undo-tree-id2348 . -1) (undo-tree-id2349 . -1) (undo-tree-id2350 . -1) (undo-tree-id2351 . -1) (undo-tree-id2352 . -1) (undo-tree-id2353 . -1) (undo-tree-id2354 . -1) (undo-tree-id2355 . -1) (#("r" 0 1 (fontified t)) . -419) (undo-tree-id2356 . -1) (undo-tree-id2357 . -1) (undo-tree-id2358 . -1) (undo-tree-id2359 . -1) (undo-tree-id2360 . -1) (undo-tree-id2361 . -1) (undo-tree-id2362 . -1) (undo-tree-id2363 . -1) 420) nil (26116 18172 322605 639000) 0 nil])
([nil nil ((416 . 422)) nil (26116 18172 322558 817000) 0 nil])
([nil nil ((#("from" 0 4 (fontified t)) . -418) (undo-tree-id2269 . -4) (undo-tree-id2270 . -1) (undo-tree-id2271 . -1) (undo-tree-id2272 . -1) (undo-tree-id2273 . -2) (undo-tree-id2274 . -2) (undo-tree-id2275 . -2) (undo-tree-id2276 . -2) (undo-tree-id2277 . -3) (undo-tree-id2278 . -3) (undo-tree-id2279 . -4) (undo-tree-id2280 . -4) (undo-tree-id2281 . -4) (undo-tree-id2282 . -4) (undo-tree-id2283 . -4) 422) nil (26116 18172 322557 660000) 0 nil])
([nil nil ((#("str::" 0 3 (face font-lock-type-face fontified t) 3 5 (fontified t)) . -413) (undo-tree-id2199 . -5) (undo-tree-id2200 . -3) (undo-tree-id2201 . -1) (undo-tree-id2202 . -1) (undo-tree-id2203 . -1) (undo-tree-id2204 . -2) (undo-tree-id2205 . -2) (undo-tree-id2206 . -2) (undo-tree-id2207 . -3) (undo-tree-id2208 . -3) (undo-tree-id2209 . -3) (undo-tree-id2210 . -3) (undo-tree-id2211 . -3) (undo-tree-id2212 . -3) (undo-tree-id2213 . -3) (undo-tree-id2214 . -3) (undo-tree-id2215 . -3) (undo-tree-id2216 . -3) (undo-tree-id2217 . -3) (undo-tree-id2218 . -3) (undo-tree-id2219 . -3) (undo-tree-id2220 . -3) (undo-tree-id2221 . -3) (undo-tree-id2222 . -3) (undo-tree-id2223 . -3) (undo-tree-id2224 . -3) (undo-tree-id2225 . -3) (undo-tree-id2226 . -3) (undo-tree-id2227 . -3) (undo-tree-id2228 . -3) (undo-tree-id2229 . -3) (undo-tree-id2230 . -3) (undo-tree-id2231 . -3) (undo-tree-id2232 . -3) (undo-tree-id2233 . -3) (undo-tree-id2234 . -3) (undo-tree-id2235 . -3) (undo-tree-id2236 . -3) (undo-tree-id2237 . -3) (undo-tree-id2238 . -3) (undo-tree-id2239 . -3) (undo-tree-id2240 . -3) (undo-tree-id2241 . -3) (undo-tree-id2242 . -3) (undo-tree-id2243 . -3) (undo-tree-id2244 . -3) (undo-tree-id2245 . -3) (undo-tree-id2246 . -4) (undo-tree-id2247 . -4) (undo-tree-id2248 . -5) (undo-tree-id2249 . -5) (undo-tree-id2250 . -5) (undo-tree-id2251 . -5) (undo-tree-id2252 . -5) (undo-tree-id2253 . -5) (undo-tree-id2254 . -5) (undo-tree-id2255 . -5) (undo-tree-id2256 . -5) (undo-tree-id2257 . -5) (undo-tree-id2258 . -5) (undo-tree-id2259 . -5) (undo-tree-id2260 . -5) (undo-tree-id2261 . -5) (undo-tree-id2262 . -5) (undo-tree-id2263 . -5) (undo-tree-id2264 . -5) (undo-tree-id2265 . -5) (undo-tree-id2266 . -5) (undo-tree-id2267 . -5) (undo-tree-id2268 . -5) 418) nil (26116 18172 322546 472000) 0 nil])
([nil nil ((413 . 415)) nil (26116 18172 322406 386000) 0 nil])
([nil nil ((413 . 419) (#("St" 0 2 (fontified nil)) . 413) (413 . 415) (#("String" 0 6 (fontified nil)) . -413) (413 . 419) (#("St" 0 2 (face font-lock-type-face fontified t)) . -413) (undo-tree-id2190 . -2) (undo-tree-id2191 . -1) (undo-tree-id2192 . -1) (undo-tree-id2193 . -1) (undo-tree-id2194 . -2) (undo-tree-id2195 . -2) (undo-tree-id2196 . -2) (undo-tree-id2197 . -2) (undo-tree-id2198 . -2) 415) nil (26116 18172 322405 56000) 0 nil])
([nil nil ((419 . 425)) nil (26116 18172 322397 874000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 441 442 nil nil nil t #s(yas--exit 443 nil))) #s(yas--exit 443 nil) 73 nil #s(yas--field 1 441 442 nil nil nil t #s(yas--exit 443 nil)) nil nil)) (421 . 447) (#("from_utf8_unchecked(${1:bytes})$0" 0 33 (fontified nil)) . 421) (421 . 454) (#("from" 0 4 (fontified nil)) . 421) (421 . 425) (#("from_utf8_unchecked(…)" 0 22 (fontified nil)) . -421) (421 . 443) (#("from" 0 4 (fontified t)) . -421) (undo-tree-id2169 . -4) (undo-tree-id2170 . -4) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) (undo-tree-id2173 . -1) (undo-tree-id2174 . -1) (undo-tree-id2175 . -1) (undo-tree-id2176 . -2) (undo-tree-id2177 . -2) (undo-tree-id2178 . -2) (undo-tree-id2179 . -3) (undo-tree-id2180 . -3) (undo-tree-id2181 . -4) (undo-tree-id2182 . -4) (undo-tree-id2183 . -4) (undo-tree-id2184 . -4) (undo-tree-id2185 . -4) (undo-tree-id2186 . -4) (undo-tree-id2187 . -4) (undo-tree-id2188 . -4) (undo-tree-id2189 . -4) 425) nil (26116 18172 322395 551000) 0 nil])
([nil nil ((#("bytes" 0 5 (fontified nil)) . 442) (undo-tree-id2168 . -5) (441 . 442)) nil (26116 18172 322379 852000) 0 nil])
([nil nil ((441 . 442) (#("b" 0 1 (fontified nil)) . 441) (undo-tree-id2152 . -1) (441 . 442) (#("b" 0 1 (fontified t)) . -441) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1) (undo-tree-id2164 . -1) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) (undo-tree-id2167 . -1) 442) nil (26116 18172 322374 588000) 0 nil])
([nil nil ((442 . 445) (t 26116 18172 338528 299000)) nil (26116 18177 597020 400000) 0 nil])
([nil nil ((apply yas--snippet-revive 443 451 #s(yas--snippet nil nil #s(yas--exit 451 nil) 74 nil nil #s(yas--field 1 441 442 nil nil nil t #s(yas--exit 443 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 451 nil) 74 nil nil #s(yas--field 1 441 442 nil nil nil t #s(yas--exit 443 nil)) nil)) (443 . 451) (#("to_vec()$0" 0 10 (fontified nil)) . 443) (undo-tree-id2978 . -10) (443 . 453) (#("to" 0 2 (fontified nil)) . 443) (undo-tree-id2979 . -2) (443 . 445) (#("to_vec()" 0 8 (fontified nil)) . -443) (undo-tree-id2980 . -8) (443 . 451) (#("to" 0 2 (fontified t)) . -443) (undo-tree-id2981 . -2) (undo-tree-id2982 . -2) (undo-tree-id2983 . -2) (undo-tree-id2984 . -1) (undo-tree-id2985 . -1) (undo-tree-id2986 . -1) (undo-tree-id2987 . -2) (undo-tree-id2988 . -2) (undo-tree-id2989 . -2) (undo-tree-id2990 . -2) (undo-tree-id2991 . -2) 445) nil (26116 18177 597014 536000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -442) (undo-tree-id2992 . -1) (undo-tree-id2993 . -1) (undo-tree-id2994 . -1) (undo-tree-id2995 . -1) (undo-tree-id2996 . -1) (undo-tree-id2997 . -1) (undo-tree-id2998 . -1) (undo-tree-id2999 . -1) (undo-tree-id3000 . -1) (undo-tree-id3001 . -1) (undo-tree-id3002 . -1) (undo-tree-id3003 . -1) (undo-tree-id3004 . -1) (undo-tree-id3005 . -1) (undo-tree-id3006 . -1) (undo-tree-id3007 . -1) (undo-tree-id3008 . -1) (undo-tree-id3009 . -1) (undo-tree-id3010 . -1) (undo-tree-id3011 . -1) (undo-tree-id3012 . -1) (undo-tree-id3013 . -1) (undo-tree-id3014 . -1) (undo-tree-id3015 . -1) (undo-tree-id3016 . -1) (undo-tree-id3017 . -1) (undo-tree-id3018 . -1) (undo-tree-id3019 . -1) (undo-tree-id3020 . -1) (undo-tree-id3021 . -1) (undo-tree-id3022 . -1) (undo-tree-id3023 . -1) (undo-tree-id3024 . -1) (undo-tree-id3025 . -1) (undo-tree-id3026 . -1) (undo-tree-id3027 . -1) (undo-tree-id3028 . -1) (undo-tree-id3029 . -1) (undo-tree-id3030 . -1) (undo-tree-id3031 . -1) (undo-tree-id3032 . -1) (#("t" 0 1 (fontified t)) . -443) (undo-tree-id3033 . -1) (undo-tree-id3034 . -1) (undo-tree-id3035 . -1) (undo-tree-id3036 . -1) (undo-tree-id3037 . -1) (undo-tree-id3038 . -1) (undo-tree-id3039 . -1) (undo-tree-id3040 . -1) (undo-tree-id3041 . -1) (undo-tree-id3042 . -1) (undo-tree-id3043 . -1) (undo-tree-id3044 . -1) (undo-tree-id3045 . -1) (undo-tree-id3046 . -1) (undo-tree-id3047 . -1) (undo-tree-id3048 . -1) (undo-tree-id3049 . -1) (undo-tree-id3050 . -1) (undo-tree-id3051 . -1) (undo-tree-id3052 . -1) (undo-tree-id3053 . -1) (undo-tree-id3054 . -1) (undo-tree-id3055 . -1) (undo-tree-id3056 . -1) (undo-tree-id3057 . -1) (undo-tree-id3058 . -1) (undo-tree-id3059 . -1) (undo-tree-id3060 . -1) (undo-tree-id3061 . -1) (undo-tree-id3062 . -1) (undo-tree-id3063 . -1) (#("o" 0 1 (fontified t)) . -444) (undo-tree-id3064 . -1) (undo-tree-id3065 . -1) (undo-tree-id3066 . -1) (undo-tree-id3067 . -1) (undo-tree-id3068 . -1) (undo-tree-id3069 . -1) (undo-tree-id3070 . -1) (undo-tree-id3071 . -1) (undo-tree-id3072 . -1) (undo-tree-id3073 . -1) (undo-tree-id3074 . -1) (undo-tree-id3075 . -1) (undo-tree-id3076 . -1) (undo-tree-id3077 . -1) (undo-tree-id3078 . -1) (undo-tree-id3079 . -1) (undo-tree-id3080 . -1) (undo-tree-id3081 . -1) (undo-tree-id3082 . -1) (undo-tree-id3083 . -1) (undo-tree-id3084 . -1) (undo-tree-id3085 . -1) (undo-tree-id3086 . -1) (undo-tree-id3087 . -1) (undo-tree-id3088 . -1) (undo-tree-id3089 . -1) (undo-tree-id3090 . -1) (undo-tree-id3091 . -1) (undo-tree-id3092 . -1) (#("_" 0 1 (fontified t)) . -445) (undo-tree-id3093 . -1) (undo-tree-id3094 . -1) (undo-tree-id3095 . -1) (undo-tree-id3096 . -1) (undo-tree-id3097 . -1) (undo-tree-id3098 . -1) (undo-tree-id3099 . -1) (undo-tree-id3100 . -1) (undo-tree-id3101 . -1) (undo-tree-id3102 . -1) (undo-tree-id3103 . -1) (undo-tree-id3104 . -1) (undo-tree-id3105 . -1) (undo-tree-id3106 . -1) (undo-tree-id3107 . -1) (undo-tree-id3108 . -1) (undo-tree-id3109 . -1) (undo-tree-id3110 . -1) (undo-tree-id3111 . -1) (undo-tree-id3112 . -1) (undo-tree-id3113 . -1) (undo-tree-id3114 . -1) (undo-tree-id3115 . -1) (undo-tree-id3116 . -1) (undo-tree-id3117 . -1) (undo-tree-id3118 . -1) (undo-tree-id3119 . -1) (#("v" 0 1 (fontified t)) . -446) (undo-tree-id3120 . -1) (undo-tree-id3121 . -1) (undo-tree-id3122 . -1) (undo-tree-id3123 . -1) (undo-tree-id3124 . -1) (undo-tree-id3125 . -1) (undo-tree-id3126 . -1) (undo-tree-id3127 . -1) (undo-tree-id3128 . -1) (undo-tree-id3129 . -1) (undo-tree-id3130 . -1) (undo-tree-id3131 . -1) (undo-tree-id3132 . -1) (undo-tree-id3133 . -1) (undo-tree-id3134 . -1) (undo-tree-id3135 . -1) (undo-tree-id3136 . -1) (undo-tree-id3137 . -1) (undo-tree-id3138 . -1) (undo-tree-id3139 . -1) (undo-tree-id3140 . -1) (undo-tree-id3141 . -1) (undo-tree-id3142 . -1) (undo-tree-id3143 . -1) (undo-tree-id3144 . -1) (#("e" 0 1 (fontified t)) . -447) (undo-tree-id3145 . -1) (undo-tree-id3146 . -1) (undo-tree-id3147 . -1) (undo-tree-id3148 . -1) (undo-tree-id3149 . -1) (undo-tree-id3150 . -1) (undo-tree-id3151 . -1) (undo-tree-id3152 . -1) (undo-tree-id3153 . -1) (undo-tree-id3154 . -1) (undo-tree-id3155 . -1) (undo-tree-id3156 . -1) (undo-tree-id3157 . -1) (undo-tree-id3158 . -1) (undo-tree-id3159 . -1) (undo-tree-id3160 . -1) (undo-tree-id3161 . -1) (undo-tree-id3162 . -1) (undo-tree-id3163 . -1) (undo-tree-id3164 . -1) (undo-tree-id3165 . -1) (undo-tree-id3166 . -1) (undo-tree-id3167 . -1) (#("c" 0 1 (fontified t)) . -448) (undo-tree-id3168 . -1) (undo-tree-id3169 . -1) (undo-tree-id3170 . -1) (undo-tree-id3171 . -1) (undo-tree-id3172 . -1) (undo-tree-id3173 . -1) (undo-tree-id3174 . -1) (undo-tree-id3175 . -1) (undo-tree-id3176 . -1) (undo-tree-id3177 . -1) (undo-tree-id3178 . -1) (undo-tree-id3179 . -1) (undo-tree-id3180 . -1) (undo-tree-id3181 . -1) (undo-tree-id3182 . -1) (undo-tree-id3183 . -1) (undo-tree-id3184 . -1) (undo-tree-id3185 . -1) (undo-tree-id3186 . -1) (undo-tree-id3187 . -1) (undo-tree-id3188 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -449) (undo-tree-id3189 . -1) (undo-tree-id3190 . -1) (undo-tree-id3191 . -1) (undo-tree-id3192 . -1) (undo-tree-id3193 . -1) (undo-tree-id3194 . -1) (undo-tree-id3195 . -1) (undo-tree-id3196 . -1) (undo-tree-id3197 . -1) (undo-tree-id3198 . -1) (undo-tree-id3199 . -1) (undo-tree-id3200 . -1) (undo-tree-id3201 . -1) (undo-tree-id3202 . -1) (undo-tree-id3203 . -1) (undo-tree-id3204 . -1) (undo-tree-id3205 . -1) (undo-tree-id3206 . -1) (undo-tree-id3207 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -450) (undo-tree-id3208 . -1) (undo-tree-id3209 . -1) (undo-tree-id3210 . -1) (undo-tree-id3211 . -1) (undo-tree-id3212 . -1) (undo-tree-id3213 . -1) (undo-tree-id3214 . -1) (undo-tree-id3215 . -1) (undo-tree-id3216 . -1) (undo-tree-id3217 . -1) (undo-tree-id3218 . -1) (undo-tree-id3219 . -1) (undo-tree-id3220 . -1) (undo-tree-id3221 . -1) (undo-tree-id3222 . -1) 451 (t 26116 18177 615195 290000)) nil (26116 18184 462597 903000) 0 nil])
([nil nil ((apply yas--snippet-revive 421 443 #s(yas--snippet nil (#s(yas--field 1 441 442 nil nil nil t #s(yas--exit 443 nil))) #s(yas--exit 443 nil) 73 nil #s(yas--field 1 441 442 nil nil nil t #s(yas--exit 443 nil)) nil nil))) nil (26116 18187 705448 701000) 0 nil])
([nil nil ((442 . 445)) nil (26116 18191 699017 713000) 0 nil] [nil nil ((441 . 442)) ((#("&" 0 1 (face rust-ampersand-face fontified t)) . 441) (undo-tree-id3223 . -1) (undo-tree-id3224 . -1) (undo-tree-id3225 . -1) (undo-tree-id3226 . -1) (undo-tree-id3227 . -1) (undo-tree-id3228 . -1) (undo-tree-id3229 . -1) (undo-tree-id3230 . -1) (undo-tree-id3231 . -1) (undo-tree-id3232 . -1) (undo-tree-id3233 . -1) (undo-tree-id3234 . -1) (undo-tree-id3235 . -1) (t 26116 18184 468529 44000)) (26116 18184 462214 437000) 0 nil])
([nil nil ((apply yas--snippet-revive 443 451 #s(yas--snippet nil nil #s(yas--exit 451 nil) 75 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 451 nil) 75 nil nil nil nil)) (443 . 451) (#("to_vec()$0" 0 10 (fontified nil)) . 443) (443 . 453) (#("to" 0 2 (fontified nil)) . 443) (443 . 445) (#("to_vec()" 0 8 (fontified nil)) . -443) (443 . 451) (#("to" 0 2 (fontified t)) . -443) (undo-tree-id3236 . -2) (undo-tree-id3237 . -2) (undo-tree-id3238 . -1) (undo-tree-id3239 . -1) (undo-tree-id3240 . -1) (undo-tree-id3241 . -2) (undo-tree-id3242 . -2) (undo-tree-id3243 . -2) (undo-tree-id3244 . -2) (undo-tree-id3245 . -2) (undo-tree-id3246 . -2) (undo-tree-id3247 . -2) (undo-tree-id3248 . -2) (undo-tree-id3249 . -2) 445) nil (26116 18191 699007 627000) 0 nil])
nil
([nil nil ((396 . 401) (t 26116 18191 705196 155000)) nil (26116 18199 734230 325000) 0 nil])
([nil nil ((#("f" 0 1 (face font-lock-preprocessor-face fontified t)) . -399) (undo-tree-id3250 . -1) (undo-tree-id3251 . -1) (undo-tree-id3252 . -1) (undo-tree-id3253 . -1) (undo-tree-id3254 . -1) (undo-tree-id3255 . -1) (undo-tree-id3256 . -1) (undo-tree-id3257 . -1) (#("a" 0 1 (face font-lock-preprocessor-face fontified t)) . -400) (undo-tree-id3258 . -1) (undo-tree-id3259 . -1) (undo-tree-id3260 . -1) 401) nil (26116 18199 734227 907000) 0 nil])
([nil nil ((399 . 404)) nil (26116 18199 734212 491000) 0 nil])
([nil nil ((462 . 463)) nil (26116 18199 734208 668000) 0 nil])
([nil nil ((#(":" 0 1 (face rust-string-interpolation fontified t)) . -415) (undo-tree-id3261 . -1) (undo-tree-id3262 . -1) (undo-tree-id3263 . -1) (undo-tree-id3264 . -1) (undo-tree-id3265 . -1) (#("?" 0 1 (face rust-string-interpolation fontified t)) . -416) (undo-tree-id3266 . -1) (undo-tree-id3267 . -1) 417 (t 26116 18199 741863 314000)) nil (26116 18215 677668 298000) 0 nil])
([nil nil ((415 . 417) (t 26116 18215 681864 293000)) nil (26116 18240 319084 52000) 0 nil])
([nil nil ((#("vec())" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-5-face) fontified t) 4 5 (face (rainbow-delimiters-depth-5-face) fontified t) 5 6 (face (rainbow-delimiters-depth-4-face) fontified t)) . -454) (undo-tree-id3444 . -6) (undo-tree-id3445 . -1) (undo-tree-id3446 . -2) (undo-tree-id3447 . -3) (undo-tree-id3448 . -4) (undo-tree-id3449 . -5) (undo-tree-id3450 . -6) 460) nil (26116 18240 319082 941000) 0 nil])
([nil nil ((#("to_" 0 3 (fontified t)) . -451) (undo-tree-id3424 . -3) (undo-tree-id3425 . -1) (undo-tree-id3426 . -1) (undo-tree-id3427 . -1) (undo-tree-id3428 . -1) (undo-tree-id3429 . -1) (undo-tree-id3430 . -1) (undo-tree-id3431 . -1) (undo-tree-id3432 . -1) (undo-tree-id3433 . -1) (undo-tree-id3434 . -2) (undo-tree-id3435 . -3) (undo-tree-id3436 . -3) (undo-tree-id3437 . -3) (undo-tree-id3438 . -3) (undo-tree-id3439 . -3) (undo-tree-id3440 . -3) (undo-tree-id3441 . -3) (undo-tree-id3442 . -3) (undo-tree-id3443 . -3) 454) nil (26116 18240 319076 854000) 0 nil])
([nil nil ((#("b." 0 2 (fontified t)) . -449) (undo-tree-id3400 . -2) (undo-tree-id3401 . -2) (undo-tree-id3402 . -1) (undo-tree-id3403 . -2) (undo-tree-id3404 . -2) (undo-tree-id3405 . -2) (undo-tree-id3406 . -2) (undo-tree-id3407 . -2) (undo-tree-id3408 . -2) (undo-tree-id3409 . -2) (undo-tree-id3410 . -2) (undo-tree-id3411 . -2) (undo-tree-id3412 . -2) (undo-tree-id3413 . -2) (undo-tree-id3414 . -2) (undo-tree-id3415 . -2) (undo-tree-id3416 . -2) (undo-tree-id3417 . -2) (undo-tree-id3418 . -2) (undo-tree-id3419 . -2) (undo-tree-id3420 . -2) (undo-tree-id3421 . -2) (undo-tree-id3422 . -2) (undo-tree-id3423 . -2) 451) nil (26116 18240 319062 560000) 0 nil])
([nil nil ((#("unchecked(" 0 9 (fontified t) 9 10 (face (rainbow-delimiters-depth-4-face) fontified t)) . -439) (undo-tree-id3372 . -10) (undo-tree-id3373 . -10) (undo-tree-id3374 . -10) (undo-tree-id3375 . -9) (undo-tree-id3376 . -10) (undo-tree-id3377 . -10) (undo-tree-id3378 . -10) (undo-tree-id3379 . -10) (undo-tree-id3380 . -10) (undo-tree-id3381 . -10) (undo-tree-id3382 . -10) (undo-tree-id3383 . -10) (undo-tree-id3384 . -10) (undo-tree-id3385 . -10) (undo-tree-id3386 . -10) (undo-tree-id3387 . -10) (undo-tree-id3388 . -10) (undo-tree-id3389 . -10) (undo-tree-id3390 . -10) (undo-tree-id3391 . -10) (undo-tree-id3392 . -10) (undo-tree-id3393 . -10) (undo-tree-id3394 . -10) (undo-tree-id3395 . -10) (undo-tree-id3396 . -10) (undo-tree-id3397 . -10) (undo-tree-id3398 . -10) (undo-tree-id3399 . -10) 449) nil (26116 18240 319046 9000) 0 nil])
([nil nil ((#("utf8_" 0 5 (fontified t)) . -434) (undo-tree-id3341 . -5) (undo-tree-id3342 . -5) (undo-tree-id3343 . -5) (undo-tree-id3344 . -4) (undo-tree-id3345 . -5) (undo-tree-id3346 . -5) (undo-tree-id3347 . -5) (undo-tree-id3348 . -5) (undo-tree-id3349 . -5) (undo-tree-id3350 . -5) (undo-tree-id3351 . -5) (undo-tree-id3352 . -5) (undo-tree-id3353 . -5) (undo-tree-id3354 . -5) (undo-tree-id3355 . -5) (undo-tree-id3356 . -5) (undo-tree-id3357 . -5) (undo-tree-id3358 . -5) (undo-tree-id3359 . -5) (undo-tree-id3360 . -5) (undo-tree-id3361 . -5) (undo-tree-id3362 . -5) (undo-tree-id3363 . -5) (undo-tree-id3364 . -5) (undo-tree-id3365 . -5) (undo-tree-id3366 . -5) (undo-tree-id3367 . -5) (undo-tree-id3368 . -5) (undo-tree-id3369 . -5) (undo-tree-id3370 . -5) (undo-tree-id3371 . -5) 439) nil (26116 18240 319025 821000) 0 nil])
([nil nil ((#("from_" 0 5 (fontified t)) . -429) (undo-tree-id3307 . -5) (undo-tree-id3308 . -5) (undo-tree-id3309 . -5) (undo-tree-id3310 . -4) (undo-tree-id3311 . -5) (undo-tree-id3312 . -5) (undo-tree-id3313 . -5) (undo-tree-id3314 . -5) (undo-tree-id3315 . -5) (undo-tree-id3316 . -5) (undo-tree-id3317 . -5) (undo-tree-id3318 . -5) (undo-tree-id3319 . -5) (undo-tree-id3320 . -5) (undo-tree-id3321 . -5) (undo-tree-id3322 . -5) (undo-tree-id3323 . -5) (undo-tree-id3324 . -5) (undo-tree-id3325 . -5) (undo-tree-id3326 . -5) (undo-tree-id3327 . -5) (undo-tree-id3328 . -5) (undo-tree-id3329 . -5) (undo-tree-id3330 . -5) (undo-tree-id3331 . -5) (undo-tree-id3332 . -5) (undo-tree-id3333 . -5) (undo-tree-id3334 . -5) (undo-tree-id3335 . -5) (undo-tree-id3336 . -5) (undo-tree-id3337 . -5) (undo-tree-id3338 . -5) (undo-tree-id3339 . -5) (undo-tree-id3340 . -5) 434) nil (26116 18240 318770 477000) 0 nil])
([nil nil ((#("String::" 0 6 (face font-lock-type-face fontified t) 6 8 (fontified t)) . -421) (undo-tree-id3268 . -8) (undo-tree-id3269 . -8) (undo-tree-id3270 . -8) (undo-tree-id3271 . -6) (undo-tree-id3272 . -6) (undo-tree-id3273 . -6) (undo-tree-id3274 . -8) (undo-tree-id3275 . -8) (undo-tree-id3276 . -8) (undo-tree-id3277 . -8) (undo-tree-id3278 . -8) (undo-tree-id3279 . -8) (undo-tree-id3280 . -8) (undo-tree-id3281 . -8) (undo-tree-id3282 . -8) (undo-tree-id3283 . -8) (undo-tree-id3284 . -8) (undo-tree-id3285 . -8) (undo-tree-id3286 . -8) (undo-tree-id3287 . -8) (undo-tree-id3288 . -8) (undo-tree-id3289 . -8) (undo-tree-id3290 . -8) (undo-tree-id3291 . -8) (undo-tree-id3292 . -8) (undo-tree-id3293 . -8) (undo-tree-id3294 . -8) (undo-tree-id3295 . -8) (undo-tree-id3296 . -8) (undo-tree-id3297 . -8) (undo-tree-id3298 . -8) (undo-tree-id3299 . -8) (undo-tree-id3300 . -8) (undo-tree-id3301 . -8) (undo-tree-id3302 . -8) (undo-tree-id3303 . -8) (undo-tree-id3304 . -8) (undo-tree-id3305 . -8) (undo-tree-id3306 . -8) 429) nil (26116 18240 318744 897000) 0 nil])
([nil nil ((421 . 422)) nil (26116 18240 318707 575000) 0 nil])
([nil nil ((#("unsafe {" 0 6 (face rust-unsafe fontified t) 6 7 (fontified t) 7 8 (face (rainbow-delimiters-depth-2-face) fontified t)) . -396) (undo-tree-id3533 . -8) (undo-tree-id3534 . -7) (undo-tree-id3535 . -7) (undo-tree-id3536 . -7) (undo-tree-id3537 . -7) (undo-tree-id3538 . -7) (undo-tree-id3539 . -7) (undo-tree-id3540 . -7) (undo-tree-id3541 . -7) (undo-tree-id3542 . -7) (undo-tree-id3543 . -7) (undo-tree-id3544 . -7) (undo-tree-id3545 . -7) (undo-tree-id3546 . -7) (undo-tree-id3547 . -8) 404 (t 26116 18240 335199 140000)) nil (26116 18402 827078 517000) 0 nil])
([nil nil ((#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -416) (undo-tree-id3531 . -1) (undo-tree-id3532 . -1) 417) nil (26116 18402 827068 147000) 0 nil])
([nil nil ((414 . 416)) nil (26116 18402 827066 326000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -415) (undo-tree-id3527 . -1) (undo-tree-id3528 . -1) (undo-tree-id3529 . -1) (undo-tree-id3530 . -1) 416) nil (26116 18402 827065 597000) 0 nil])
([nil nil ((415 . 417)) nil (26116 18402 827062 517000) 0 nil])
([nil nil ((417 . 418)) nil (26116 18402 827061 815000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-keyword-face fontified t)) . -416) (undo-tree-id3514 . -1) (undo-tree-id3515 . -1) (undo-tree-id3516 . -1) (undo-tree-id3517 . -1) (undo-tree-id3518 . -1) (undo-tree-id3519 . -1) (undo-tree-id3520 . -1) (undo-tree-id3521 . -1) (undo-tree-id3522 . -1) (undo-tree-id3523 . -1) (#("a" 0 1 (fontified t)) . -417) (undo-tree-id3524 . -1) (undo-tree-id3525 . -1) (undo-tree-id3526 . -1) 418) nil (26116 18402 827060 649000) 0 nil])
([nil nil ((416 . 418)) nil (26116 18402 827051 451000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-keyword-face fontified t)) . -416) (undo-tree-id3499 . -1) (undo-tree-id3500 . -1) (undo-tree-id3501 . -1) (undo-tree-id3502 . -1) (undo-tree-id3503 . -1) (undo-tree-id3504 . -1) (undo-tree-id3505 . -1) (undo-tree-id3506 . -1) (undo-tree-id3507 . -1) (undo-tree-id3508 . -1) (#("c" 0 1 (fontified t)) . -417) (undo-tree-id3509 . -1) (undo-tree-id3510 . -1) (undo-tree-id3511 . -1) (undo-tree-id3512 . -1) (undo-tree-id3513 . -1) 418) nil (26116 18402 827050 136000) 0 nil])
([nil nil ((416 . 417)) nil (26116 18402 827040 143000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -416) (undo-tree-id3494 . -1) (undo-tree-id3495 . -1) (undo-tree-id3496 . -1) (undo-tree-id3497 . -1) (undo-tree-id3498 . -1) 417) nil (26116 18402 827039 149000) 0 nil])
([nil nil ((416 . 419)) nil (26116 18402 827034 533000) 0 nil])
([nil nil ((apply yas--snippet-revive 415 435 #s(yas--snippet nil nil #s(yas--exit 435 nil) 76 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 435 nil) 76 nil nil nil nil)) (415 . 435) (#("to_ascii_lowercase()$0" 0 22 (fontified nil)) . 415) (415 . 437) (#("asci" 0 4 (fontified nil)) . 415) (415 . 419) (#("to_ascii_lowercase()" 0 20 (fontified nil)) . -415) (415 . 435) (#("asci" 0 4 (fontified t)) . -415) (undo-tree-id3451 . -4) (undo-tree-id3452 . -1) (undo-tree-id3453 . -1) (undo-tree-id3454 . -1) (undo-tree-id3455 . -1) (undo-tree-id3456 . -1) (undo-tree-id3457 . -1) (undo-tree-id3458 . -1) (undo-tree-id3459 . -1) (undo-tree-id3460 . -1) (undo-tree-id3461 . -1) (undo-tree-id3462 . -1) (undo-tree-id3463 . -1) (undo-tree-id3464 . -1) (undo-tree-id3465 . -1) (undo-tree-id3466 . -1) (undo-tree-id3467 . -1) (undo-tree-id3468 . -1) (undo-tree-id3469 . -1) (undo-tree-id3470 . -1) (undo-tree-id3471 . -1) (undo-tree-id3472 . -1) (undo-tree-id3473 . -1) (undo-tree-id3474 . -1) (undo-tree-id3475 . -1) (undo-tree-id3476 . -1) (undo-tree-id3477 . -1) (undo-tree-id3478 . -1) (undo-tree-id3479 . -1) (undo-tree-id3480 . -1) (undo-tree-id3481 . -1) (undo-tree-id3482 . -1) (undo-tree-id3483 . -1) (undo-tree-id3484 . -1) (undo-tree-id3485 . -2) (undo-tree-id3486 . -2) (undo-tree-id3487 . -3) (undo-tree-id3488 . -3) (undo-tree-id3489 . -4) (undo-tree-id3490 . -4) (undo-tree-id3491 . -4) (undo-tree-id3492 . -4) (undo-tree-id3493 . -4) 419) nil (26116 18402 827028 986000) 0 nil])
([nil nil ((#("lowercase()" 0 9 (fontified t) 9 10 (face (rainbow-delimiters-depth-3-face) fontified t) 10 11 (face (rainbow-delimiters-depth-3-face) fontified t)) . -424) (undo-tree-id4121 . -11) (undo-tree-id4122 . -11) (undo-tree-id4123 . -11) (undo-tree-id4124 . -11) (undo-tree-id4125 . -11) (undo-tree-id4126 . -11) (undo-tree-id4127 . -11) (undo-tree-id4128 . -11) (undo-tree-id4129 . -11) (undo-tree-id4130 . -11) (undo-tree-id4131 . -11) (undo-tree-id4132 . -11) (undo-tree-id4133 . -11) (undo-tree-id4134 . -11) (undo-tree-id4135 . -11) (undo-tree-id4136 . -11) (undo-tree-id4137 . -11) (undo-tree-id4138 . -11) (undo-tree-id4139 . -11) (undo-tree-id4140 . -11) (undo-tree-id4141 . -11) (undo-tree-id4142 . -11) (undo-tree-id4143 . -11) (undo-tree-id4144 . -11) (undo-tree-id4145 . -11) (undo-tree-id4146 . -11) (undo-tree-id4147 . -11) (undo-tree-id4148 . -11) (undo-tree-id4149 . -11) (undo-tree-id4150 . -11) (undo-tree-id4151 . -9) (undo-tree-id4152 . -1) (undo-tree-id4153 . -2) (undo-tree-id4154 . -3) (undo-tree-id4155 . -4) (undo-tree-id4156 . -5) (undo-tree-id4157 . -6) (undo-tree-id4158 . -7) (undo-tree-id4159 . -8) (undo-tree-id4160 . -9) (undo-tree-id4161 . -10) (undo-tree-id4162 . -11) 435 (t 26116 18402 835209 115000)) nil (26116 18444 514082 49000) 0 nil])
([nil nil ((#("ascii_" 0 6 (fontified t)) . -418) (undo-tree-id4043 . -1) (undo-tree-id4044 . -1) (undo-tree-id4045 . -6) (undo-tree-id4046 . -6) (undo-tree-id4047 . -6) (undo-tree-id4048 . -6) (undo-tree-id4049 . -6) (undo-tree-id4050 . -6) (undo-tree-id4051 . -6) (undo-tree-id4052 . -6) (undo-tree-id4053 . -6) (undo-tree-id4054 . -6) (undo-tree-id4055 . -6) (undo-tree-id4056 . -6) (undo-tree-id4057 . -6) (undo-tree-id4058 . -6) (undo-tree-id4059 . -6) (undo-tree-id4060 . -6) (undo-tree-id4061 . -6) (undo-tree-id4062 . -6) (undo-tree-id4063 . -6) (undo-tree-id4064 . -6) (undo-tree-id4065 . -6) (undo-tree-id4066 . -6) (undo-tree-id4067 . -6) (undo-tree-id4068 . -6) (undo-tree-id4069 . -6) (undo-tree-id4070 . -6) (undo-tree-id4071 . -6) (undo-tree-id4072 . -6) (undo-tree-id4073 . -6) (undo-tree-id4074 . -1) (undo-tree-id4075 . -1) (undo-tree-id4076 . -1) (undo-tree-id4077 . -1) (undo-tree-id4078 . -6) (undo-tree-id4079 . -1) (undo-tree-id4080 . -1) (undo-tree-id4081 . -1) (undo-tree-id4082 . -1) (undo-tree-id4083 . -1) (undo-tree-id4084 . -1) (undo-tree-id4085 . -1) (undo-tree-id4086 . -1) (undo-tree-id4087 . -1) (undo-tree-id4088 . -1) (undo-tree-id4089 . -1) (undo-tree-id4090 . -1) (undo-tree-id4091 . -1) (undo-tree-id4092 . -1) (undo-tree-id4093 . -1) (undo-tree-id4094 . -1) (undo-tree-id4095 . -1) (undo-tree-id4096 . -1) (undo-tree-id4097 . -1) (undo-tree-id4098 . -1) (undo-tree-id4099 . -1) (undo-tree-id4100 . -1) (undo-tree-id4101 . -1) (undo-tree-id4102 . -1) (undo-tree-id4103 . -1) (undo-tree-id4104 . -1) (undo-tree-id4105 . -5) (undo-tree-id4106 . -6) (undo-tree-id4107 . -6) (undo-tree-id4108 . -6) (undo-tree-id4109 . -6) (undo-tree-id4110 . -6) (undo-tree-id4111 . -6) (undo-tree-id4112 . -6) (undo-tree-id4113 . -6) (undo-tree-id4114 . -6) (undo-tree-id4115 . -6) (undo-tree-id4116 . -6) (undo-tree-id4117 . -6) (undo-tree-id4118 . -6) (undo-tree-id4119 . -6) (undo-tree-id4120 . -6) 424) nil (26116 18444 514034 254000) 0 nil])
([nil nil ((#("to_" 0 3 (fontified t)) . -415) (undo-tree-id3963 . -3) (undo-tree-id3964 . -3) (undo-tree-id3965 . -3) (undo-tree-id3966 . -3) (undo-tree-id3967 . -3) (undo-tree-id3968 . -3) (undo-tree-id3969 . -3) (undo-tree-id3970 . -3) (undo-tree-id3971 . -3) (undo-tree-id3972 . -3) (undo-tree-id3973 . -3) (undo-tree-id3974 . -3) (undo-tree-id3975 . -3) (undo-tree-id3976 . -3) (undo-tree-id3977 . -3) (undo-tree-id3978 . -3) (undo-tree-id3979 . -3) (undo-tree-id3980 . -3) (undo-tree-id3981 . -3) (undo-tree-id3982 . -3) (undo-tree-id3983 . -3) (undo-tree-id3984 . -3) (undo-tree-id3985 . -3) (undo-tree-id3986 . -3) (undo-tree-id3987 . -3) (undo-tree-id3988 . -3) (undo-tree-id3989 . -3) (undo-tree-id3990 . -3) (undo-tree-id3991 . -3) (undo-tree-id3992 . -3) (undo-tree-id3993 . -3) (undo-tree-id3994 . -3) (undo-tree-id3995 . -3) (undo-tree-id3996 . -3) (undo-tree-id3997 . -3) (undo-tree-id3998 . -3) (undo-tree-id3999 . -3) (undo-tree-id4000 . -3) (undo-tree-id4001 . -3) (undo-tree-id4002 . -3) (undo-tree-id4003 . -3) (undo-tree-id4004 . -3) (undo-tree-id4005 . -3) (undo-tree-id4006 . -3) (undo-tree-id4007 . -3) (undo-tree-id4008 . -3) (undo-tree-id4009 . -3) (undo-tree-id4010 . -3) (undo-tree-id4011 . -3) (undo-tree-id4012 . -3) (undo-tree-id4013 . -3) (undo-tree-id4014 . -3) (undo-tree-id4015 . -3) (undo-tree-id4016 . -3) (undo-tree-id4017 . -3) (undo-tree-id4018 . -3) (undo-tree-id4019 . -3) (undo-tree-id4020 . -3) (undo-tree-id4021 . -3) (undo-tree-id4022 . -3) (undo-tree-id4023 . -3) (undo-tree-id4024 . -3) (undo-tree-id4025 . -3) (undo-tree-id4026 . -3) (undo-tree-id4027 . -3) (undo-tree-id4028 . -3) (undo-tree-id4029 . -3) (undo-tree-id4030 . -3) (undo-tree-id4031 . -3) (undo-tree-id4032 . -3) (undo-tree-id4033 . -3) (undo-tree-id4034 . -3) (undo-tree-id4035 . -3) (undo-tree-id4036 . -3) (undo-tree-id4037 . -3) (undo-tree-id4038 . -3) (undo-tree-id4039 . -3) (undo-tree-id4040 . -3) (undo-tree-id4041 . -3) (undo-tree-id4042 . -3) 418) nil (26116 18444 513950 991000) 0 nil])
([nil nil ((415 . 419)) nil (26116 18444 513866 500000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -413) (undo-tree-id3550 . -1) (undo-tree-id3551 . -1) (undo-tree-id3552 . -1) (undo-tree-id3553 . -1) (undo-tree-id3554 . -1) (undo-tree-id3555 . -1) (undo-tree-id3556 . -1) (undo-tree-id3557 . -1) (undo-tree-id3558 . -1) (undo-tree-id3559 . -1) (undo-tree-id3560 . -1) (undo-tree-id3561 . -1) (undo-tree-id3562 . -1) (undo-tree-id3563 . -1) (undo-tree-id3564 . -1) (undo-tree-id3565 . -1) (undo-tree-id3566 . -1) (undo-tree-id3567 . -1) (undo-tree-id3568 . -1) (undo-tree-id3569 . -1) (undo-tree-id3570 . -1) (undo-tree-id3571 . -1) (undo-tree-id3572 . -1) (undo-tree-id3573 . -1) (undo-tree-id3574 . -1) (undo-tree-id3575 . -1) (undo-tree-id3576 . -1) (undo-tree-id3577 . -1) (undo-tree-id3578 . -1) (undo-tree-id3579 . -1) (undo-tree-id3580 . -1) (undo-tree-id3581 . -1) (undo-tree-id3582 . -1) (undo-tree-id3583 . -1) (undo-tree-id3584 . -1) (undo-tree-id3585 . -1) (undo-tree-id3586 . -1) (undo-tree-id3587 . -1) (undo-tree-id3588 . -1) (undo-tree-id3589 . -1) (undo-tree-id3590 . -1) (undo-tree-id3591 . -1) (undo-tree-id3592 . -1) (undo-tree-id3593 . -1) (undo-tree-id3594 . -1) (undo-tree-id3595 . -1) (undo-tree-id3596 . -1) (undo-tree-id3597 . -1) (undo-tree-id3598 . -1) (undo-tree-id3599 . -1) (undo-tree-id3600 . -1) (undo-tree-id3601 . -1) (undo-tree-id3602 . -1) (undo-tree-id3603 . -1) (undo-tree-id3604 . -1) (undo-tree-id3605 . -1) (undo-tree-id3606 . -1) (undo-tree-id3607 . -1) (undo-tree-id3608 . -1) (undo-tree-id3609 . -1) (undo-tree-id3610 . -1) (undo-tree-id3611 . -1) (undo-tree-id3612 . -1) (undo-tree-id3613 . -1) (undo-tree-id3614 . -1) (undo-tree-id3615 . -1) (undo-tree-id3616 . -1) (undo-tree-id3617 . -1) (undo-tree-id3618 . -1) (undo-tree-id3619 . -1) (undo-tree-id3620 . -1) (undo-tree-id3621 . -1) (undo-tree-id3622 . -1) (undo-tree-id3623 . -1) (undo-tree-id3624 . -1) (undo-tree-id3625 . -1) (undo-tree-id3626 . -1) (undo-tree-id3627 . -1) (undo-tree-id3628 . -1) (undo-tree-id3629 . -1) (undo-tree-id3630 . -1) (undo-tree-id3631 . -1) (undo-tree-id3632 . -1) (undo-tree-id3633 . -1) (undo-tree-id3634 . -1) (undo-tree-id3635 . -1) (undo-tree-id3636 . -1) (undo-tree-id3637 . -1) (undo-tree-id3638 . -1) (undo-tree-id3639 . -1) (undo-tree-id3640 . -1) (undo-tree-id3641 . -1) (undo-tree-id3642 . -1) (undo-tree-id3643 . -1) (undo-tree-id3644 . -1) (undo-tree-id3645 . -1) (undo-tree-id3646 . -1) (undo-tree-id3647 . -1) (undo-tree-id3648 . -1) (undo-tree-id3649 . -1) (undo-tree-id3650 . -1) (undo-tree-id3651 . -1) (undo-tree-id3652 . -1) (undo-tree-id3653 . -1) (undo-tree-id3654 . -1) (undo-tree-id3655 . -1) (undo-tree-id3656 . -1) (undo-tree-id3657 . -1) (undo-tree-id3658 . -1) (undo-tree-id3659 . -1) (undo-tree-id3660 . -1) (undo-tree-id3661 . -1) (undo-tree-id3662 . -1) (undo-tree-id3663 . -1) (undo-tree-id3664 . -1) (undo-tree-id3665 . -1) (undo-tree-id3666 . -1) (undo-tree-id3667 . -1) (undo-tree-id3668 . -1) (undo-tree-id3669 . -1) (undo-tree-id3670 . -1) (undo-tree-id3671 . -1) (undo-tree-id3672 . -1) (undo-tree-id3673 . -1) (undo-tree-id3674 . -1) (undo-tree-id3675 . -1) (undo-tree-id3676 . -1) (undo-tree-id3677 . -1) (undo-tree-id3678 . -1) (undo-tree-id3679 . -1) (undo-tree-id3680 . -1) (undo-tree-id3681 . -1) (undo-tree-id3682 . -1) (undo-tree-id3683 . -1) (undo-tree-id3684 . -1) (undo-tree-id3685 . -1) (undo-tree-id3686 . -1) (undo-tree-id3687 . -1) (undo-tree-id3688 . -1) (undo-tree-id3689 . -1) (undo-tree-id3690 . -1) (undo-tree-id3691 . -1) (undo-tree-id3692 . -1) (undo-tree-id3693 . -1) (undo-tree-id3694 . -1) (undo-tree-id3695 . -1) (undo-tree-id3696 . -1) (undo-tree-id3697 . -1) (undo-tree-id3698 . -1) (undo-tree-id3699 . -1) (undo-tree-id3700 . -1) (undo-tree-id3701 . -1) (undo-tree-id3702 . -1) (undo-tree-id3703 . -1) (undo-tree-id3704 . -1) (undo-tree-id3705 . -1) (undo-tree-id3706 . -1) (undo-tree-id3707 . -1) (undo-tree-id3708 . -1) (undo-tree-id3709 . -1) (undo-tree-id3710 . -1) (undo-tree-id3711 . -1) (undo-tree-id3712 . -1) (undo-tree-id3713 . -1) (undo-tree-id3714 . -1) (undo-tree-id3715 . -1) (undo-tree-id3716 . -1) (#("." 0 1 (fontified t)) . -414) (undo-tree-id3717 . -1) (undo-tree-id3718 . -1) (undo-tree-id3719 . -1) (undo-tree-id3720 . -1) (undo-tree-id3721 . -1) (undo-tree-id3722 . -1) (undo-tree-id3723 . -1) (undo-tree-id3724 . -1) (undo-tree-id3725 . -1) (undo-tree-id3726 . -1) (undo-tree-id3727 . -1) (undo-tree-id3728 . -1) (undo-tree-id3729 . -1) (undo-tree-id3730 . -1) (undo-tree-id3731 . -1) (undo-tree-id3732 . -1) (undo-tree-id3733 . -1) (undo-tree-id3734 . -1) (undo-tree-id3735 . -1) (undo-tree-id3736 . -1) (undo-tree-id3737 . -1) (undo-tree-id3738 . -1) (undo-tree-id3739 . -1) (undo-tree-id3740 . -1) (undo-tree-id3741 . -1) (undo-tree-id3742 . -1) (undo-tree-id3743 . -1) (undo-tree-id3744 . -1) (undo-tree-id3745 . -1) (undo-tree-id3746 . -1) (undo-tree-id3747 . -1) (undo-tree-id3748 . -1) (undo-tree-id3749 . -1) (undo-tree-id3750 . -1) (undo-tree-id3751 . -1) (undo-tree-id3752 . -1) (undo-tree-id3753 . -1) (undo-tree-id3754 . -1) (undo-tree-id3755 . -1) (undo-tree-id3756 . -1) (undo-tree-id3757 . -1) (undo-tree-id3758 . -1) (undo-tree-id3759 . -1) (undo-tree-id3760 . -1) (undo-tree-id3761 . -1) (undo-tree-id3762 . -1) (undo-tree-id3763 . -1) (undo-tree-id3764 . -1) (undo-tree-id3765 . -1) (undo-tree-id3766 . -1) (undo-tree-id3767 . -1) (undo-tree-id3768 . -1) (undo-tree-id3769 . -1) (undo-tree-id3770 . -1) (undo-tree-id3771 . -1) (undo-tree-id3772 . -1) (undo-tree-id3773 . -1) (undo-tree-id3774 . -1) (undo-tree-id3775 . -1) (undo-tree-id3776 . -1) (undo-tree-id3777 . -1) (undo-tree-id3778 . -1) (undo-tree-id3779 . -1) (undo-tree-id3780 . -1) (undo-tree-id3781 . -1) (undo-tree-id3782 . -1) (undo-tree-id3783 . -1) (undo-tree-id3784 . -1) (undo-tree-id3785 . -1) (undo-tree-id3786 . -1) (undo-tree-id3787 . -1) (undo-tree-id3788 . -1) (undo-tree-id3789 . -1) (undo-tree-id3790 . -1) (undo-tree-id3791 . -1) (undo-tree-id3792 . -1) (undo-tree-id3793 . -1) (undo-tree-id3794 . -1) (undo-tree-id3795 . -1) (undo-tree-id3796 . -1) (undo-tree-id3797 . -1) (undo-tree-id3798 . -1) (undo-tree-id3799 . -1) (undo-tree-id3800 . -1) (undo-tree-id3801 . -1) (undo-tree-id3802 . -1) (undo-tree-id3803 . -1) (undo-tree-id3804 . -1) (undo-tree-id3805 . -1) (undo-tree-id3806 . -1) (undo-tree-id3807 . -1) (undo-tree-id3808 . -1) (undo-tree-id3809 . -1) (undo-tree-id3810 . -1) (undo-tree-id3811 . -1) (undo-tree-id3812 . -1) (undo-tree-id3813 . -1) (undo-tree-id3814 . -1) (undo-tree-id3815 . -1) (undo-tree-id3816 . -1) (undo-tree-id3817 . -1) (undo-tree-id3818 . -1) (undo-tree-id3819 . -1) (undo-tree-id3820 . -1) (undo-tree-id3821 . -1) (undo-tree-id3822 . -1) (undo-tree-id3823 . -1) (undo-tree-id3824 . -1) (undo-tree-id3825 . -1) (undo-tree-id3826 . -1) (undo-tree-id3827 . -1) (undo-tree-id3828 . -1) (undo-tree-id3829 . -1) (undo-tree-id3830 . -1) (undo-tree-id3831 . -1) (undo-tree-id3832 . -1) (undo-tree-id3833 . -1) (undo-tree-id3834 . -1) (undo-tree-id3835 . -1) (undo-tree-id3836 . -1) (undo-tree-id3837 . -1) (undo-tree-id3838 . -1) (undo-tree-id3839 . -1) (undo-tree-id3840 . -1) (undo-tree-id3841 . -1) (undo-tree-id3842 . -1) (undo-tree-id3843 . -1) (undo-tree-id3844 . -1) (undo-tree-id3845 . -1) (undo-tree-id3846 . -1) (undo-tree-id3847 . -1) (undo-tree-id3848 . -1) (undo-tree-id3849 . -1) (undo-tree-id3850 . -1) (undo-tree-id3851 . -1) (undo-tree-id3852 . -1) (undo-tree-id3853 . -1) (undo-tree-id3854 . -1) (undo-tree-id3855 . -1) (undo-tree-id3856 . -1) (undo-tree-id3857 . -1) (undo-tree-id3858 . -1) (undo-tree-id3859 . -1) (undo-tree-id3860 . -1) (undo-tree-id3861 . -1) (undo-tree-id3862 . -1) (undo-tree-id3863 . -1) (undo-tree-id3864 . -1) (undo-tree-id3865 . -1) (undo-tree-id3866 . -1) (undo-tree-id3867 . -1) (undo-tree-id3868 . -1) (undo-tree-id3869 . -1) (undo-tree-id3870 . -1) (undo-tree-id3871 . -1) (undo-tree-id3872 . -1) (undo-tree-id3873 . -1) (undo-tree-id3874 . -1) (undo-tree-id3875 . -1) (undo-tree-id3876 . -1) (undo-tree-id3877 . -1) (undo-tree-id3878 . -1) (undo-tree-id3879 . -1) (undo-tree-id3880 . -1) (#("a" 0 1 (fontified t)) . -415) (undo-tree-id3881 . -1) (undo-tree-id3882 . -1) (undo-tree-id3883 . -1) (undo-tree-id3884 . -1) (undo-tree-id3885 . -1) (undo-tree-id3886 . -1) (undo-tree-id3887 . -1) (undo-tree-id3888 . -1) (undo-tree-id3889 . -1) (undo-tree-id3890 . -1) (undo-tree-id3891 . -1) (undo-tree-id3892 . -1) (undo-tree-id3893 . -1) (undo-tree-id3894 . -1) (undo-tree-id3895 . -1) (undo-tree-id3896 . -1) (undo-tree-id3897 . -1) (undo-tree-id3898 . -1) (undo-tree-id3899 . -1) (undo-tree-id3900 . -1) (undo-tree-id3901 . -1) (undo-tree-id3902 . -1) (undo-tree-id3903 . -1) (undo-tree-id3904 . -1) (undo-tree-id3905 . -1) (undo-tree-id3906 . -1) (undo-tree-id3907 . -1) (undo-tree-id3908 . -1) (undo-tree-id3909 . -1) (undo-tree-id3910 . -1) (undo-tree-id3911 . -1) (undo-tree-id3912 . -1) (undo-tree-id3913 . -1) (#("s" 0 1 (face font-lock-keyword-face fontified t)) . -416) (undo-tree-id3914 . -1) (undo-tree-id3915 . -1) (undo-tree-id3916 . -1) (undo-tree-id3917 . -1) (undo-tree-id3918 . -1) (undo-tree-id3919 . -1) (undo-tree-id3920 . -1) (undo-tree-id3921 . -1) (undo-tree-id3922 . -1) (undo-tree-id3923 . -1) (undo-tree-id3924 . -1) (undo-tree-id3925 . -1) (undo-tree-id3926 . -1) (undo-tree-id3927 . -1) (undo-tree-id3928 . -1) (undo-tree-id3929 . -1) (undo-tree-id3930 . -1) (undo-tree-id3931 . -1) (undo-tree-id3932 . -1) (undo-tree-id3933 . -1) (undo-tree-id3934 . -1) (undo-tree-id3935 . -1) (undo-tree-id3936 . -1) (undo-tree-id3937 . -1) (undo-tree-id3938 . -1) (#("_" 0 1 (fontified t)) . -417) (undo-tree-id3939 . -1) (undo-tree-id3940 . -1) (undo-tree-id3941 . -1) (undo-tree-id3942 . -1) (undo-tree-id3943 . -1) (undo-tree-id3944 . -1) (undo-tree-id3945 . -1) (undo-tree-id3946 . -1) (undo-tree-id3947 . -1) (undo-tree-id3948 . -1) (undo-tree-id3949 . -1) (undo-tree-id3950 . -1) (undo-tree-id3951 . -1) (undo-tree-id3952 . -1) (undo-tree-id3953 . -1) (#("a" 0 1 (fontified t)) . -418) (undo-tree-id3954 . -1) (undo-tree-id3955 . -1) (undo-tree-id3956 . -1) (undo-tree-id3957 . -1) (undo-tree-id3958 . -1) (undo-tree-id3959 . -1) (undo-tree-id3960 . -1) (undo-tree-id3961 . -1) (undo-tree-id3962 . -1) 419) nil (26116 18444 513841 241000) 0 nil])
([nil nil ((#("?" 0 1 (face rust-string-interpolation fontified t)) . -408) (undo-tree-id3548 . -1) (undo-tree-id3549 . -1) 409) nil (26116 18444 512225 151000) 0 nil])
([nil nil ((408 . 409)) nil (26116 18444 512208 162000) 0 nil])
([nil nil ((413 . 414) (t 26116 18444 531878 342000)) nil (26116 18446 309019 120000) 0 nil])
([nil nil ((#("s" 0 1 (face rust-string-interpolation fontified t)) . -408) (undo-tree-id4380 . -1) (undo-tree-id4381 . -1) (undo-tree-id4382 . -1) (undo-tree-id4383 . -1) (undo-tree-id4384 . -1) (undo-tree-id4385 . -1) 409 (t 26116 18446 325211 785000)) nil (26116 18525 414065 796000) 0 nil])
([nil nil ((408 . 409)) nil (26116 18525 414060 256000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -413) (undo-tree-id4359 . -1) (undo-tree-id4360 . -1) (undo-tree-id4361 . -1) (undo-tree-id4362 . -1) (undo-tree-id4363 . -1) (undo-tree-id4364 . -1) (undo-tree-id4365 . -1) (undo-tree-id4366 . -1) (undo-tree-id4367 . -1) (undo-tree-id4368 . -1) (undo-tree-id4369 . -1) (undo-tree-id4370 . -1) (undo-tree-id4371 . -1) (undo-tree-id4372 . -1) (undo-tree-id4373 . -1) (undo-tree-id4374 . -1) (undo-tree-id4375 . -1) (undo-tree-id4376 . -1) (undo-tree-id4377 . -1) (undo-tree-id4378 . -1) (undo-tree-id4379 . -1) 414) nil (26116 18525 414058 630000) 0 nil])
([nil nil ((413 . 415)) nil (26116 18525 414041 715000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -414) (undo-tree-id4348 . -1) (undo-tree-id4349 . -1) (undo-tree-id4350 . -1) (undo-tree-id4351 . -1) (undo-tree-id4352 . -1) (undo-tree-id4353 . -1) (undo-tree-id4354 . -1) (undo-tree-id4355 . -1) (undo-tree-id4356 . -1) (undo-tree-id4357 . -1) (undo-tree-id4358 . -1) 415) nil (26116 18525 414038 188000) 0 nil])
([nil nil ((414 . 418)) nil (26116 18525 413166 901000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -413) (undo-tree-id4232 . -1) (undo-tree-id4233 . -1) (undo-tree-id4234 . -1) (undo-tree-id4235 . -1) (undo-tree-id4236 . -1) (undo-tree-id4237 . -1) (undo-tree-id4238 . -1) (undo-tree-id4239 . -1) (undo-tree-id4240 . -1) (undo-tree-id4241 . -1) (undo-tree-id4242 . -1) (undo-tree-id4243 . -1) (undo-tree-id4244 . -1) (undo-tree-id4245 . -1) (undo-tree-id4246 . -1) (undo-tree-id4247 . -1) (undo-tree-id4248 . -1) (undo-tree-id4249 . -1) (undo-tree-id4250 . -1) (undo-tree-id4251 . -1) (undo-tree-id4252 . -1) (undo-tree-id4253 . -1) (undo-tree-id4254 . -1) (undo-tree-id4255 . -1) (undo-tree-id4256 . -1) (undo-tree-id4257 . -1) (undo-tree-id4258 . -1) (undo-tree-id4259 . -1) (undo-tree-id4260 . -1) (undo-tree-id4261 . -1) (undo-tree-id4262 . -1) (undo-tree-id4263 . -1) (undo-tree-id4264 . -1) (undo-tree-id4265 . -1) (undo-tree-id4266 . -1) (undo-tree-id4267 . -1) (undo-tree-id4268 . -1) (undo-tree-id4269 . -1) (undo-tree-id4270 . -1) (undo-tree-id4271 . -1) (undo-tree-id4272 . -1) (undo-tree-id4273 . -1) (undo-tree-id4274 . -1) (undo-tree-id4275 . -1) (undo-tree-id4276 . -1) (undo-tree-id4277 . -1) (undo-tree-id4278 . -1) (undo-tree-id4279 . -1) (undo-tree-id4280 . -1) (undo-tree-id4281 . -1) (undo-tree-id4282 . -1) (undo-tree-id4283 . -1) (#("." 0 1 (fontified t)) . -414) (undo-tree-id4284 . -1) (undo-tree-id4285 . -1) (undo-tree-id4286 . -1) (undo-tree-id4287 . -1) (undo-tree-id4288 . -1) (undo-tree-id4289 . -1) (undo-tree-id4290 . -1) (undo-tree-id4291 . -1) (undo-tree-id4292 . -1) (undo-tree-id4293 . -1) (undo-tree-id4294 . -1) (undo-tree-id4295 . -1) (undo-tree-id4296 . -1) (undo-tree-id4297 . -1) (undo-tree-id4298 . -1) (undo-tree-id4299 . -1) (undo-tree-id4300 . -1) (undo-tree-id4301 . -1) (undo-tree-id4302 . -1) (undo-tree-id4303 . -1) (undo-tree-id4304 . -1) (undo-tree-id4305 . -1) (undo-tree-id4306 . -1) (undo-tree-id4307 . -1) (undo-tree-id4308 . -1) (undo-tree-id4309 . -1) (#("s" 0 1 (fontified t)) . -415) (undo-tree-id4310 . -1) (undo-tree-id4311 . -1) (undo-tree-id4312 . -1) (undo-tree-id4313 . -1) (undo-tree-id4314 . -1) (undo-tree-id4315 . -1) (undo-tree-id4316 . -1) (undo-tree-id4317 . -1) (undo-tree-id4318 . -1) (undo-tree-id4319 . -1) (undo-tree-id4320 . -1) (undo-tree-id4321 . -1) (undo-tree-id4322 . -1) (undo-tree-id4323 . -1) (undo-tree-id4324 . -1) (undo-tree-id4325 . -1) (undo-tree-id4326 . -1) (undo-tree-id4327 . -1) (undo-tree-id4328 . -1) (#("t" 0 1 (fontified t)) . -416) (undo-tree-id4329 . -1) (undo-tree-id4330 . -1) (undo-tree-id4331 . -1) (undo-tree-id4332 . -1) (undo-tree-id4333 . -1) (undo-tree-id4334 . -1) (undo-tree-id4335 . -1) (undo-tree-id4336 . -1) (undo-tree-id4337 . -1) (undo-tree-id4338 . -1) (undo-tree-id4339 . -1) (undo-tree-id4340 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -417) (undo-tree-id4341 . -1) (undo-tree-id4342 . -1) (undo-tree-id4343 . -1) (undo-tree-id4344 . -1) (undo-tree-id4345 . -1) (undo-tree-id4346 . -1) (undo-tree-id4347 . -1) 418) nil (26116 18525 413161 773000) 0 nil])
([nil nil ((413 . 427)) nil (26116 18525 413083 205000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -424) (undo-tree-id4196 . -1) (undo-tree-id4197 . -1) (undo-tree-id4198 . -1) (undo-tree-id4199 . -1) (undo-tree-id4200 . -1) (undo-tree-id4201 . -1) (undo-tree-id4202 . -1) (undo-tree-id4203 . -1) (undo-tree-id4204 . -1) (undo-tree-id4205 . -1) (undo-tree-id4206 . -1) (undo-tree-id4207 . -1) (undo-tree-id4208 . -1) (undo-tree-id4209 . -1) (undo-tree-id4210 . -1) (undo-tree-id4211 . -1) (#("r" 0 1 (face font-lock-keyword-face fontified t)) . -425) (undo-tree-id4212 . -1) (undo-tree-id4213 . -1) (undo-tree-id4214 . -1) (undo-tree-id4215 . -1) (undo-tree-id4216 . -1) (undo-tree-id4217 . -1) (undo-tree-id4218 . -1) (undo-tree-id4219 . -1) (undo-tree-id4220 . -1) (undo-tree-id4221 . -1) (undo-tree-id4222 . -1) (undo-tree-id4223 . -1) (#("m" 0 1 (fontified t)) . -426) (undo-tree-id4224 . -1) (undo-tree-id4225 . -1) (undo-tree-id4226 . -1) (undo-tree-id4227 . -1) (undo-tree-id4228 . -1) (undo-tree-id4229 . -1) (undo-tree-id4230 . -1) (undo-tree-id4231 . -1) 427) nil (26116 18525 413080 797000) 0 nil])
([nil nil ((424 . 427)) nil (26116 18525 413054 372000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 433 439 nil nil nil t #s(yas--exit 440 nil))) #s(yas--exit 440 nil) 77 nil #s(yas--field 1 433 439 nil nil nil t #s(yas--exit 440 nil)) nil nil)) (423 . 435) (#("from_utf8(${1:v})$0" 0 19 (fontified nil)) . 423) (423 . 442) (#("from" 0 4 (fontified nil)) . 423) (423 . 427) (#("from_utf8(…)" 0 12 (fontified nil)) . -423) (423 . 435) (#("from" 0 4 (fontified t)) . -423) (undo-tree-id4164 . -4) (undo-tree-id4165 . -1) (undo-tree-id4166 . -1) (undo-tree-id4167 . -1) (undo-tree-id4168 . -1) (undo-tree-id4169 . -1) (undo-tree-id4170 . -1) (undo-tree-id4171 . -1) (undo-tree-id4172 . -1) (undo-tree-id4173 . -1) (undo-tree-id4174 . -1) (undo-tree-id4175 . -1) (undo-tree-id4176 . -1) (undo-tree-id4177 . -1) (undo-tree-id4178 . -1) (undo-tree-id4179 . -1) (undo-tree-id4180 . -1) (undo-tree-id4181 . -1) (undo-tree-id4182 . -1) (undo-tree-id4183 . -1) (undo-tree-id4184 . -1) (undo-tree-id4185 . -2) (undo-tree-id4186 . -2) (undo-tree-id4187 . -2) (undo-tree-id4188 . -3) (undo-tree-id4189 . -3) (undo-tree-id4190 . -3) (undo-tree-id4191 . -4) (undo-tree-id4192 . -4) (undo-tree-id4193 . -4) (undo-tree-id4194 . -4) (undo-tree-id4195 . -4) 427) nil (26116 18525 413051 500000) 0 nil])
([nil nil ((#("v" 0 1 (fontified nil)) . 434) (undo-tree-id4163 . -1) (433 . 434)) nil (26116 18525 413024 640000) 0 nil])
([nil nil ((433 . 434)) nil (26116 18525 413014 571000) 0 nil])
([nil nil ((435 . 437) (t 26116 18525 428549 974000)) nil (26116 18539 557605 804000) 0 nil])
([nil nil ((436 . 438)) nil (26116 18539 557601 754000) 0 nil])
([nil nil ((apply yas--snippet-revive 423 440 #s(yas--snippet nil (#s(yas--field 1 433 439 nil nil nil t #s(yas--exit 440 nil))) #s(yas--exit 440 nil) 77 nil #s(yas--field 1 433 439 nil nil nil t #s(yas--exit 440 nil)) nil nil))) nil (26116 18633 635886 947000) 0 nil])
([nil nil ((436 . 437) (t 26116 18539 575217 509000)) nil (26116 18633 635881 240000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . -436) (undo-tree-id4386 . -1) (undo-tree-id4387 . -1) (undo-tree-id4388 . -1) (undo-tree-id4389 . -1) (undo-tree-id4390 . -1) (undo-tree-id4391 . -1) (undo-tree-id4392 . -1) (undo-tree-id4393 . -1) (undo-tree-id4394 . -1) (undo-tree-id4395 . -1) (undo-tree-id4396 . -1) (undo-tree-id4397 . -1) (undo-tree-id4398 . -1) (undo-tree-id4399 . -1) (undo-tree-id4400 . -1) (undo-tree-id4401 . -1) (undo-tree-id4402 . -1) (undo-tree-id4403 . -1) (undo-tree-id4404 . -1) (undo-tree-id4405 . -1) (undo-tree-id4406 . -1) (undo-tree-id4407 . -1) 437 (t 26116 18633 651889 951000)) nil (26116 18641 307935 805000) 0 nil])
([nil nil ((436 . 437)) nil (26116 18641 307908 132000) 0 nil])
([nil nil ((391 . 395) (t 26116 18641 318557 87000)) nil (26116 18743 54818 672000) 0 nil])
([nil nil ((395 . 397)) nil (26116 18743 54817 841000) 0 nil])
([nil nil ((396 . 400)) nil (26116 18743 54817 289000) 0 nil])
([nil nil ((401 . 404)) nil (26116 18743 54816 706000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-string-face fontified t)) . -396) (undo-tree-id4546 . -1) (undo-tree-id4547 . -1) (undo-tree-id4548 . -1) (undo-tree-id4549 . -1) (undo-tree-id4550 . -1) (undo-tree-id4551 . -1) (undo-tree-id4552 . -1) (undo-tree-id4553 . -1) (undo-tree-id4554 . -1) (undo-tree-id4555 . -1) (undo-tree-id4556 . -1) (undo-tree-id4557 . -1) (undo-tree-id4558 . -1) (undo-tree-id4559 . -1) (undo-tree-id4560 . -1) (undo-tree-id4561 . -1) (undo-tree-id4562 . -1) (undo-tree-id4563 . -1) (undo-tree-id4564 . -1) (undo-tree-id4565 . -1) (undo-tree-id4566 . -1) (undo-tree-id4567 . -1) (undo-tree-id4568 . -1) (undo-tree-id4569 . -1) (undo-tree-id4570 . -1) (undo-tree-id4571 . -1) (undo-tree-id4572 . -1) (undo-tree-id4573 . -1) (undo-tree-id4574 . -1) (undo-tree-id4575 . -1) (undo-tree-id4576 . -1) (undo-tree-id4577 . -1) (undo-tree-id4578 . -1) (undo-tree-id4579 . -1) (undo-tree-id4580 . -1) (undo-tree-id4581 . -1) (undo-tree-id4582 . -1) (undo-tree-id4583 . -1) (undo-tree-id4584 . -1) (undo-tree-id4585 . -1) (undo-tree-id4586 . -1) (undo-tree-id4587 . -1) (undo-tree-id4588 . -1) (undo-tree-id4589 . -1) (undo-tree-id4590 . -1) (undo-tree-id4591 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -397) (undo-tree-id4592 . -1) (undo-tree-id4593 . -1) (undo-tree-id4594 . -1) (undo-tree-id4595 . -1) (undo-tree-id4596 . -1) (undo-tree-id4597 . -1) (undo-tree-id4598 . -1) (undo-tree-id4599 . -1) (undo-tree-id4600 . -1) (undo-tree-id4601 . -1) (undo-tree-id4602 . -1) (undo-tree-id4603 . -1) (undo-tree-id4604 . -1) (undo-tree-id4605 . -1) (undo-tree-id4606 . -1) (undo-tree-id4607 . -1) (undo-tree-id4608 . -1) (undo-tree-id4609 . -1) (undo-tree-id4610 . -1) (undo-tree-id4611 . -1) (undo-tree-id4612 . -1) (undo-tree-id4613 . -1) (undo-tree-id4614 . -1) (undo-tree-id4615 . -1) (undo-tree-id4616 . -1) (undo-tree-id4617 . -1) (undo-tree-id4618 . -1) (undo-tree-id4619 . -1) (undo-tree-id4620 . -1) (undo-tree-id4621 . -1) (undo-tree-id4622 . -1) (undo-tree-id4623 . -1) (undo-tree-id4624 . -1) (undo-tree-id4625 . -1) (undo-tree-id4626 . -1) (undo-tree-id4627 . -1) (undo-tree-id4628 . -1) (undo-tree-id4629 . -1) (undo-tree-id4630 . -1) (undo-tree-id4631 . -1) (undo-tree-id4632 . -1) (undo-tree-id4633 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -398) (undo-tree-id4634 . -1) (undo-tree-id4635 . -1) (undo-tree-id4636 . -1) (undo-tree-id4637 . -1) (undo-tree-id4638 . -1) (undo-tree-id4639 . -1) (undo-tree-id4640 . -1) (undo-tree-id4641 . -1) (undo-tree-id4642 . -1) (undo-tree-id4643 . -1) (undo-tree-id4644 . -1) (undo-tree-id4645 . -1) (undo-tree-id4646 . -1) (undo-tree-id4647 . -1) (undo-tree-id4648 . -1) (undo-tree-id4649 . -1) (undo-tree-id4650 . -1) (undo-tree-id4651 . -1) (undo-tree-id4652 . -1) (undo-tree-id4653 . -1) (undo-tree-id4654 . -1) (undo-tree-id4655 . -1) (undo-tree-id4656 . -1) (undo-tree-id4657 . -1) (undo-tree-id4658 . -1) (undo-tree-id4659 . -1) (undo-tree-id4660 . -1) (undo-tree-id4661 . -1) (undo-tree-id4662 . -1) (undo-tree-id4663 . -1) (undo-tree-id4664 . -1) (undo-tree-id4665 . -1) (undo-tree-id4666 . -1) (undo-tree-id4667 . -1) (undo-tree-id4668 . -1) (undo-tree-id4669 . -1) (undo-tree-id4670 . -1) (undo-tree-id4671 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -399) (undo-tree-id4672 . -1) (undo-tree-id4673 . -1) (undo-tree-id4674 . -1) (undo-tree-id4675 . -1) (undo-tree-id4676 . -1) (undo-tree-id4677 . -1) (undo-tree-id4678 . -1) (undo-tree-id4679 . -1) (undo-tree-id4680 . -1) (undo-tree-id4681 . -1) (undo-tree-id4682 . -1) (undo-tree-id4683 . -1) (undo-tree-id4684 . -1) (undo-tree-id4685 . -1) (undo-tree-id4686 . -1) (undo-tree-id4687 . -1) (undo-tree-id4688 . -1) (undo-tree-id4689 . -1) (undo-tree-id4690 . -1) (undo-tree-id4691 . -1) (undo-tree-id4692 . -1) (undo-tree-id4693 . -1) (undo-tree-id4694 . -1) (undo-tree-id4695 . -1) (undo-tree-id4696 . -1) (undo-tree-id4697 . -1) (undo-tree-id4698 . -1) (undo-tree-id4699 . -1) (undo-tree-id4700 . -1) (undo-tree-id4701 . -1) (undo-tree-id4702 . -1) (undo-tree-id4703 . -1) (undo-tree-id4704 . -1) (undo-tree-id4705 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -400) (undo-tree-id4706 . -1) (undo-tree-id4707 . -1) (undo-tree-id4708 . -1) (undo-tree-id4709 . -1) (undo-tree-id4710 . -1) (undo-tree-id4711 . -1) (undo-tree-id4712 . -1) (undo-tree-id4713 . -1) (undo-tree-id4714 . -1) (undo-tree-id4715 . -1) (undo-tree-id4716 . -1) (undo-tree-id4717 . -1) (undo-tree-id4718 . -1) (undo-tree-id4719 . -1) (undo-tree-id4720 . -1) (undo-tree-id4721 . -1) (undo-tree-id4722 . -1) (undo-tree-id4723 . -1) (undo-tree-id4724 . -1) (undo-tree-id4725 . -1) (undo-tree-id4726 . -1) (undo-tree-id4727 . -1) (undo-tree-id4728 . -1) (undo-tree-id4729 . -1) (undo-tree-id4730 . -1) (undo-tree-id4731 . -1) (undo-tree-id4732 . -1) (undo-tree-id4733 . -1) (undo-tree-id4734 . -1) (undo-tree-id4735 . -1) (#("." 0 1 (fontified t)) . -401) (undo-tree-id4736 . -1) (undo-tree-id4737 . -1) (undo-tree-id4738 . -1) (undo-tree-id4739 . -1) (undo-tree-id4740 . -1) (undo-tree-id4741 . -1) (undo-tree-id4742 . -1) (undo-tree-id4743 . -1) (undo-tree-id4744 . -1) (undo-tree-id4745 . -1) (undo-tree-id4746 . -1) (undo-tree-id4747 . -1) (undo-tree-id4748 . -1) (undo-tree-id4749 . -1) (undo-tree-id4750 . -1) (undo-tree-id4751 . -1) (undo-tree-id4752 . -1) (undo-tree-id4753 . -1) (undo-tree-id4754 . -1) (undo-tree-id4755 . -1) (undo-tree-id4756 . -1) (undo-tree-id4757 . -1) (#("t" 0 1 (fontified t)) . -402) (undo-tree-id4758 . -1) (undo-tree-id4759 . -1) (undo-tree-id4760 . -1) (undo-tree-id4761 . -1) (undo-tree-id4762 . -1) (undo-tree-id4763 . -1) (undo-tree-id4764 . -1) (undo-tree-id4765 . -1) (undo-tree-id4766 . -1) (undo-tree-id4767 . -1) (undo-tree-id4768 . -1) (undo-tree-id4769 . -1) (undo-tree-id4770 . -1) (undo-tree-id4771 . -1) (undo-tree-id4772 . -1) (#("o" 0 1 (fontified t)) . -403) (undo-tree-id4773 . -1) (undo-tree-id4774 . -1) (undo-tree-id4775 . -1) (undo-tree-id4776 . -1) (undo-tree-id4777 . -1) (undo-tree-id4778 . -1) (undo-tree-id4779 . -1) (undo-tree-id4780 . -1) (undo-tree-id4781 . -1) (undo-tree-id4782 . -1) 404) nil (26116 18743 54806 934000) 0 nil])
([nil nil ((396 . 397)) nil (26116 18743 53898 105000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -395) (undo-tree-id4486 . -1) (undo-tree-id4487 . -1) (undo-tree-id4488 . -1) (undo-tree-id4489 . -1) (undo-tree-id4490 . -1) (undo-tree-id4491 . -1) (undo-tree-id4492 . -1) (undo-tree-id4493 . -1) (undo-tree-id4494 . -1) (undo-tree-id4495 . -1) (undo-tree-id4496 . -1) (undo-tree-id4497 . -1) (undo-tree-id4498 . -1) (undo-tree-id4499 . -1) (undo-tree-id4500 . -1) (undo-tree-id4501 . -1) (undo-tree-id4502 . -1) (undo-tree-id4503 . -1) (undo-tree-id4504 . -1) (undo-tree-id4505 . -1) (undo-tree-id4506 . -1) (undo-tree-id4507 . -1) (undo-tree-id4508 . -1) (undo-tree-id4509 . -1) (undo-tree-id4510 . -1) (undo-tree-id4511 . -1) (undo-tree-id4512 . -1) (undo-tree-id4513 . -1) (undo-tree-id4514 . -1) (undo-tree-id4515 . -1) (undo-tree-id4516 . -1) (undo-tree-id4517 . -1) (undo-tree-id4518 . -1) (undo-tree-id4519 . -1) (undo-tree-id4520 . -1) (undo-tree-id4521 . -1) (undo-tree-id4522 . -1) (undo-tree-id4523 . -1) (undo-tree-id4524 . -1) (undo-tree-id4525 . -1) (undo-tree-id4526 . -1) (undo-tree-id4527 . -1) (undo-tree-id4528 . -1) (undo-tree-id4529 . -1) (undo-tree-id4530 . -1) (undo-tree-id4531 . -1) (undo-tree-id4532 . -1) (undo-tree-id4533 . -1) (undo-tree-id4534 . -1) (undo-tree-id4535 . -1) (undo-tree-id4536 . -1) (undo-tree-id4537 . -1) (undo-tree-id4538 . -1) (undo-tree-id4539 . -1) (undo-tree-id4540 . -1) (undo-tree-id4541 . -1) (undo-tree-id4542 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -396) (undo-tree-id4543 . -1) (undo-tree-id4544 . -1) (undo-tree-id4545 . -1) 397) nil (26116 18743 53895 391000) 0 nil])
([nil nil ((395 . 405)) nil (26116 18743 53855 21000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -403) (undo-tree-id4470 . -1) (undo-tree-id4471 . -1) (undo-tree-id4472 . -1) (undo-tree-id4473 . -1) (undo-tree-id4474 . -1) (undo-tree-id4475 . -1) (undo-tree-id4476 . -1) (undo-tree-id4477 . -1) (undo-tree-id4478 . -1) (undo-tree-id4479 . -1) (undo-tree-id4480 . -1) (#(":" 0 1 (fontified t)) . -404) (undo-tree-id4481 . -1) (undo-tree-id4482 . -1) (undo-tree-id4483 . -1) (undo-tree-id4484 . -1) (undo-tree-id4485 . -1) 405) nil (26116 18743 53853 528000) 0 nil])
([nil nil ((403 . 406)) nil (26116 18743 53841 631000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -405) (undo-tree-id4463 . -1) (undo-tree-id4464 . -1) (undo-tree-id4465 . -1) (undo-tree-id4466 . -1) (undo-tree-id4467 . -1) (undo-tree-id4468 . -1) (undo-tree-id4469 . -1) 406) nil (26116 18743 53839 948000) 0 nil])
([nil nil ((#("std::str::" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t) 5 8 (face font-lock-type-face fontified t) 8 10 (fontified t)) . 395) (undo-tree-id4408 . -8) (undo-tree-id4409 . -1) (undo-tree-id4410 . -1) (undo-tree-id4411 . -2) (undo-tree-id4412 . -2) (undo-tree-id4413 . -3) (undo-tree-id4414 . -3) (undo-tree-id4415 . -4) (undo-tree-id4416 . -4) (undo-tree-id4417 . -4) (undo-tree-id4418 . -5) (undo-tree-id4419 . -5) (undo-tree-id4420 . -6) (undo-tree-id4421 . -6) (undo-tree-id4422 . -7) (undo-tree-id4423 . -7) (undo-tree-id4424 . -8) (undo-tree-id4425 . -8) (undo-tree-id4426 . -8) (undo-tree-id4427 . -8) (undo-tree-id4428 . -8) (undo-tree-id4429 . -8) (undo-tree-id4430 . -8) (undo-tree-id4431 . -8) (undo-tree-id4432 . -8) (undo-tree-id4433 . -8) (undo-tree-id4434 . -8) (undo-tree-id4435 . -8) (undo-tree-id4436 . -8) (undo-tree-id4437 . -8) (undo-tree-id4438 . -8) (undo-tree-id4439 . -8) (undo-tree-id4440 . -8) (undo-tree-id4441 . -8) (undo-tree-id4442 . -8) (undo-tree-id4443 . -8) (undo-tree-id4444 . -8) (undo-tree-id4445 . -8) (undo-tree-id4446 . -8) (undo-tree-id4447 . -8) (undo-tree-id4448 . -8) (undo-tree-id4449 . -9) (undo-tree-id4450 . -9) (undo-tree-id4451 . -10) (undo-tree-id4452 . -10) (undo-tree-id4453 . -10) (undo-tree-id4454 . -10) (undo-tree-id4455 . -10) (undo-tree-id4456 . -10) (undo-tree-id4457 . -10) (undo-tree-id4458 . -10) (undo-tree-id4459 . -10) (undo-tree-id4460 . -10) (undo-tree-id4461 . -10) (undo-tree-id4462 . -10)) nil (26116 18743 53829 617000) 0 nil])
([nil nil ((#("0x7ffe791b245c" 0 13 (fontified t) 13 14 (fontified t rear-nonsticky t)) . -316) (undo-tree-id4852 . -14) (undo-tree-id4853 . -14) (undo-tree-id4854 . -7) (undo-tree-id4855 . -7) (undo-tree-id4856 . -7) (undo-tree-id4857 . -7) (undo-tree-id4858 . -7) (undo-tree-id4859 . -14) (undo-tree-id4860 . -14) (undo-tree-id4861 . -14) (undo-tree-id4862 . -14) (undo-tree-id4863 . -14) (undo-tree-id4864 . -14) (undo-tree-id4865 . -14) (undo-tree-id4866 . -14) 330 (t 26116 18743 68563 333000)) nil (26116 18831 489171 510000) 0 nil])
([nil nil ((nil rear-nonsticky nil 329 . 330) (nil fontified nil 316 . 330) (316 . 330)) nil (26116 18831 489161 423000) 0 nil])
([nil nil ((#("0x7ffe791b2460" 0 13 (fontified t) 13 14 (fontified t rear-nonsticky t)) . -349) (undo-tree-id4837 . -14) (undo-tree-id4838 . -14) (undo-tree-id4839 . -7) (undo-tree-id4840 . -7) (undo-tree-id4841 . -7) (undo-tree-id4842 . -7) (undo-tree-id4843 . -7) (undo-tree-id4844 . -14) (undo-tree-id4845 . -14) (undo-tree-id4846 . -14) (undo-tree-id4847 . -14) (undo-tree-id4848 . -14) (undo-tree-id4849 . -14) (undo-tree-id4850 . -14) (undo-tree-id4851 . -14) 363) nil (26116 18831 489160 66000) 0 nil])
([nil nil ((nil rear-nonsticky nil 362 . 363) (nil fontified nil 349 . 363) (349 . 363)) nil (26116 18831 489150 99000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -390) (undo-tree-id4829 . -1) (undo-tree-id4830 . -1) (undo-tree-id4831 . -1) (undo-tree-id4832 . -1) (undo-tree-id4833 . -1) (undo-tree-id4834 . -1) (undo-tree-id4835 . -1) (undo-tree-id4836 . -1) 391) nil (26116 18831 489148 184000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -438) (undo-tree-id4783 . -1) (undo-tree-id4784 . -1) (undo-tree-id4785 . -1) (undo-tree-id4786 . -1) (undo-tree-id4787 . -1) (undo-tree-id4788 . -1) (undo-tree-id4789 . -1) (undo-tree-id4790 . -1) (undo-tree-id4791 . -1) (undo-tree-id4792 . -1) (undo-tree-id4793 . -1) (undo-tree-id4794 . -1) (undo-tree-id4795 . -1) (undo-tree-id4796 . -1) (undo-tree-id4797 . -1) (undo-tree-id4798 . -1) (#("2" 0 1 (fontified t)) . -439) (undo-tree-id4799 . -1) (undo-tree-id4800 . -1) (undo-tree-id4801 . -1) (undo-tree-id4802 . -1) (undo-tree-id4803 . -1) (undo-tree-id4804 . -1) (undo-tree-id4805 . -1) (undo-tree-id4806 . -1) (undo-tree-id4807 . -1) (undo-tree-id4808 . -1) (undo-tree-id4809 . -1) (undo-tree-id4810 . -1) (undo-tree-id4811 . -1) (#("." 0 1 (fontified t)) . -440) (undo-tree-id4812 . -1) (undo-tree-id4813 . -1) (undo-tree-id4814 . -1) (undo-tree-id4815 . -1) (undo-tree-id4816 . -1) (undo-tree-id4817 . -1) (undo-tree-id4818 . -1) (undo-tree-id4819 . -1) (undo-tree-id4820 . -1) (#("." 0 1 (fontified t)) . -441) (undo-tree-id4821 . -1) (undo-tree-id4822 . -1) (undo-tree-id4823 . -1) (undo-tree-id4824 . -1) (undo-tree-id4825 . -1) (undo-tree-id4826 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -442) (undo-tree-id4827 . -1) (undo-tree-id4828 . -1) 443) nil (26116 18831 489136 960000) 0 nil])
([nil nil ((#("b)" 0 1 (fontified t) 1 2 (face (rainbow-delimiters-depth-3-face) fontified t)) . -437) (undo-tree-id5049 . -1) (undo-tree-id5050 . -1) (undo-tree-id5051 . -2) (undo-tree-id5052 . -1) (undo-tree-id5053 . -1) (undo-tree-id5054 . -1) (undo-tree-id5055 . -1) (undo-tree-id5056 . -1) (undo-tree-id5057 . -1) (undo-tree-id5058 . -1) (undo-tree-id5059 . -1) (undo-tree-id5060 . -1) (undo-tree-id5061 . -1) (undo-tree-id5062 . -1) (undo-tree-id5063 . -1) (undo-tree-id5064 . -1) (undo-tree-id5065 . -1) (undo-tree-id5066 . -1) (undo-tree-id5067 . -1) (undo-tree-id5068 . -1) (undo-tree-id5069 . -1) (undo-tree-id5070 . -1) (undo-tree-id5071 . -1) (undo-tree-id5072 . -1) (undo-tree-id5073 . -1) (undo-tree-id5074 . -1) (undo-tree-id5075 . -1) (undo-tree-id5076 . -1) (undo-tree-id5077 . -1) (undo-tree-id5078 . -1) (undo-tree-id5079 . -1) (undo-tree-id5080 . -1) (undo-tree-id5081 . -1) (undo-tree-id5082 . -1) (undo-tree-id5083 . -1) (undo-tree-id5084 . -1) (undo-tree-id5085 . -1) (undo-tree-id5086 . -1) (undo-tree-id5087 . -2) 439 (t 26116 18831 828568 782000)) nil (26116 18841 417450 317000) 0 nil])
([nil nil ((#("utf8(&" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-3-face) fontified t) 5 6 (fontified t)) . -431) (undo-tree-id5007 . -6) (undo-tree-id5008 . -5) (undo-tree-id5009 . -6) (undo-tree-id5010 . -6) (undo-tree-id5011 . -6) (undo-tree-id5012 . -6) (undo-tree-id5013 . -6) (undo-tree-id5014 . -6) (undo-tree-id5015 . -6) (undo-tree-id5016 . -6) (undo-tree-id5017 . -6) (undo-tree-id5018 . -6) (undo-tree-id5019 . -6) (undo-tree-id5020 . -6) (undo-tree-id5021 . -6) (undo-tree-id5022 . -6) (undo-tree-id5023 . -6) (undo-tree-id5024 . -6) (undo-tree-id5025 . -6) (undo-tree-id5026 . -6) (undo-tree-id5027 . -6) (undo-tree-id5028 . -6) (undo-tree-id5029 . -6) (undo-tree-id5030 . -6) (undo-tree-id5031 . -6) (undo-tree-id5032 . -6) (undo-tree-id5033 . -6) (undo-tree-id5034 . -6) (undo-tree-id5035 . -6) (undo-tree-id5036 . -6) (undo-tree-id5037 . -6) (undo-tree-id5038 . -6) (undo-tree-id5039 . -6) (undo-tree-id5040 . -6) (undo-tree-id5041 . -6) (undo-tree-id5042 . -6) (undo-tree-id5043 . -6) (undo-tree-id5044 . -6) (undo-tree-id5045 . -6) (undo-tree-id5046 . -6) (undo-tree-id5047 . -6) (undo-tree-id5048 . -6) 437) nil (26116 18841 417329 229000) 0 nil])
([nil nil ((#("from_" 0 5 (fontified t)) . -426) (undo-tree-id4963 . -5) (undo-tree-id4964 . -5) (undo-tree-id4965 . -5) (undo-tree-id4966 . -5) (undo-tree-id4967 . -5) (undo-tree-id4968 . -5) (undo-tree-id4969 . -5) (undo-tree-id4970 . -5) (undo-tree-id4971 . -5) (undo-tree-id4972 . -5) (undo-tree-id4973 . -5) (undo-tree-id4974 . -5) (undo-tree-id4975 . -5) (undo-tree-id4976 . -5) (undo-tree-id4977 . -5) (undo-tree-id4978 . -5) (undo-tree-id4979 . -5) (undo-tree-id4980 . -5) (undo-tree-id4981 . -5) (undo-tree-id4982 . -5) (undo-tree-id4983 . -5) (undo-tree-id4984 . -5) (undo-tree-id4985 . -5) (undo-tree-id4986 . -5) (undo-tree-id4987 . -5) (undo-tree-id4988 . -5) (undo-tree-id4989 . -5) (undo-tree-id4990 . -5) (undo-tree-id4991 . -5) (undo-tree-id4992 . -5) (undo-tree-id4993 . -5) (undo-tree-id4994 . -5) (undo-tree-id4995 . -5) (undo-tree-id4996 . -5) (undo-tree-id4997 . -5) (undo-tree-id4998 . -5) (undo-tree-id4999 . -5) (undo-tree-id5000 . -5) (undo-tree-id5001 . -5) (undo-tree-id5002 . -5) (undo-tree-id5003 . -5) (undo-tree-id5004 . -5) (undo-tree-id5005 . -5) (undo-tree-id5006 . -5) 431) nil (26116 18841 417301 63000) 0 nil])
([nil nil ((#("str::" 0 3 (face font-lock-type-face fontified t) 3 5 (fontified t)) . -421) (undo-tree-id4917 . -5) (undo-tree-id4918 . -5) (undo-tree-id4919 . -5) (undo-tree-id4920 . -5) (undo-tree-id4921 . -5) (undo-tree-id4922 . -5) (undo-tree-id4923 . -5) (undo-tree-id4924 . -5) (undo-tree-id4925 . -5) (undo-tree-id4926 . -5) (undo-tree-id4927 . -5) (undo-tree-id4928 . -5) (undo-tree-id4929 . -5) (undo-tree-id4930 . -5) (undo-tree-id4931 . -5) (undo-tree-id4932 . -5) (undo-tree-id4933 . -5) (undo-tree-id4934 . -5) (undo-tree-id4935 . -5) (undo-tree-id4936 . -5) (undo-tree-id4937 . -5) (undo-tree-id4938 . -5) (undo-tree-id4939 . -5) (undo-tree-id4940 . -5) (undo-tree-id4941 . -5) (undo-tree-id4942 . -5) (undo-tree-id4943 . -5) (undo-tree-id4944 . -5) (undo-tree-id4945 . -5) (undo-tree-id4946 . -5) (undo-tree-id4947 . -5) (undo-tree-id4948 . -5) (undo-tree-id4949 . -5) (undo-tree-id4950 . -5) (undo-tree-id4951 . -5) (undo-tree-id4952 . -5) (undo-tree-id4953 . -5) (undo-tree-id4954 . -5) (undo-tree-id4955 . -5) (undo-tree-id4956 . -5) (undo-tree-id4957 . -5) (undo-tree-id4958 . -5) (undo-tree-id4959 . -5) (undo-tree-id4960 . -5) (undo-tree-id4961 . -5) (undo-tree-id4962 . -5) 426) nil (26116 18841 417269 577000) 0 nil])
([nil nil ((#("std::" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t)) . -416) (undo-tree-id4867 . -5) (undo-tree-id4868 . -5) (undo-tree-id4869 . -5) (undo-tree-id4870 . -5) (undo-tree-id4871 . -5) (undo-tree-id4872 . -5) (undo-tree-id4873 . -5) (undo-tree-id4874 . -5) (undo-tree-id4875 . -5) (undo-tree-id4876 . -5) (undo-tree-id4877 . -5) (undo-tree-id4878 . -5) (undo-tree-id4879 . -5) (undo-tree-id4880 . -5) (undo-tree-id4881 . -5) (undo-tree-id4882 . -5) (undo-tree-id4883 . -5) (undo-tree-id4884 . -5) (undo-tree-id4885 . -5) (undo-tree-id4886 . -5) (undo-tree-id4887 . -5) (undo-tree-id4888 . -5) (undo-tree-id4889 . -5) (undo-tree-id4890 . -5) (undo-tree-id4891 . -5) (undo-tree-id4892 . -5) (undo-tree-id4893 . -5) (undo-tree-id4894 . -5) (undo-tree-id4895 . -5) (undo-tree-id4896 . -5) (undo-tree-id4897 . -5) (undo-tree-id4898 . -5) (undo-tree-id4899 . -5) (undo-tree-id4900 . -5) (undo-tree-id4901 . -5) (undo-tree-id4902 . -5) (undo-tree-id4903 . -5) (undo-tree-id4904 . -5) (undo-tree-id4905 . -5) (undo-tree-id4906 . -5) (undo-tree-id4907 . -5) (undo-tree-id4908 . -5) (undo-tree-id4909 . -5) (undo-tree-id4910 . -5) (undo-tree-id4911 . -5) (undo-tree-id4912 . -5) (undo-tree-id4913 . -5) (undo-tree-id4914 . -5) (undo-tree-id4915 . -5) (undo-tree-id4916 . -5) 421) nil (26116 18841 417086 866000) 0 nil])
([nil nil ((416 . 417)) nil (26116 18841 417042 749000) 0 nil])
([nil nil ((#("0x7ffcb89271f4" 0 13 (fontified t) 13 14 (rear-nonsticky t fontified t)) . -316) (undo-tree-id5103 . -14) (undo-tree-id5104 . -14) (undo-tree-id5105 . -7) (undo-tree-id5106 . -7) (undo-tree-id5107 . -7) (undo-tree-id5108 . -7) (undo-tree-id5109 . -7) (undo-tree-id5110 . -14) (undo-tree-id5111 . -14) (undo-tree-id5112 . -14) (undo-tree-id5113 . -14) (undo-tree-id5114 . -14) (undo-tree-id5115 . -14) (undo-tree-id5116 . -14) (undo-tree-id5117 . -14) 330 (t 26116 18841 425236 38000)) nil (26116 19087 159308 455000) 0 nil])
([nil nil ((nil rear-nonsticky nil 329 . 330) (nil fontified nil 316 . 330) (316 . 330)) nil (26116 19087 159298 484000) 0 nil])
([nil nil ((#("0x7ffcb89271f8" 0 13 (fontified t) 13 14 (fontified t rear-nonsticky t)) . -349) (undo-tree-id5088 . -14) (undo-tree-id5089 . -14) (undo-tree-id5090 . -10) (undo-tree-id5091 . -10) (undo-tree-id5092 . -10) (undo-tree-id5093 . -10) (undo-tree-id5094 . -10) (undo-tree-id5095 . -14) (undo-tree-id5096 . -14) (undo-tree-id5097 . -14) (undo-tree-id5098 . -14) (undo-tree-id5099 . -14) (undo-tree-id5100 . -14) (undo-tree-id5101 . -14) (undo-tree-id5102 . -14) 363) nil (26116 19087 159296 194000) 0 nil])
([nil nil ((nil rear-nonsticky nil 362 . 363) (nil fontified nil 349 . 363) (349 . 363)) nil (26116 19087 159276 701000) 0 nil])
([nil nil ((#("32]" 0 2 (fontified t) 2 3 (face (rainbow-delimiters-depth-2-face) fontified t)) . -91) (undo-tree-id5241 . -3) (undo-tree-id5242 . -3) (undo-tree-id5243 . -3) (undo-tree-id5244 . -3) (undo-tree-id5245 . -3) (undo-tree-id5246 . -3) (undo-tree-id5247 . -3) (undo-tree-id5248 . -3) (undo-tree-id5249 . -3) (undo-tree-id5250 . -3) (undo-tree-id5251 . -3) (undo-tree-id5252 . -3) (undo-tree-id5253 . -3) (undo-tree-id5254 . -3) (undo-tree-id5255 . -3) (undo-tree-id5256 . -3) (undo-tree-id5257 . -3) 94 (t 26116 19087 178584 456000)) nil (26116 19221 270731 592000) 0 nil])
([nil nil ((#("u8;" 0 2 (face font-lock-type-face fontified t) 2 3 (fontified t)) . -88) (undo-tree-id5216 . -3) (undo-tree-id5217 . -3) (undo-tree-id5218 . -3) (undo-tree-id5219 . -3) (undo-tree-id5220 . -3) (undo-tree-id5221 . -3) (undo-tree-id5222 . -3) (undo-tree-id5223 . -3) (undo-tree-id5224 . -3) (undo-tree-id5225 . -3) (undo-tree-id5226 . -3) (undo-tree-id5227 . -3) (undo-tree-id5228 . -3) (undo-tree-id5229 . -3) (undo-tree-id5230 . -3) (undo-tree-id5231 . -3) (undo-tree-id5232 . -3) (undo-tree-id5233 . -3) (undo-tree-id5234 . -3) (undo-tree-id5235 . -3) (undo-tree-id5236 . -3) (undo-tree-id5237 . -3) (undo-tree-id5238 . -3) (undo-tree-id5239 . -3) (undo-tree-id5240 . -3) 91) nil (26116 19221 270720 937000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -87) (undo-tree-id5183 . -1) (undo-tree-id5184 . -1) (undo-tree-id5185 . -1) (undo-tree-id5186 . -1) (undo-tree-id5187 . -1) (undo-tree-id5188 . -1) (undo-tree-id5189 . -1) (undo-tree-id5190 . -1) (undo-tree-id5191 . -1) (undo-tree-id5192 . -1) (undo-tree-id5193 . -1) (undo-tree-id5194 . -1) (undo-tree-id5195 . -1) (undo-tree-id5196 . -1) (undo-tree-id5197 . -1) (undo-tree-id5198 . -1) (undo-tree-id5199 . -1) (undo-tree-id5200 . -1) (undo-tree-id5201 . -1) (undo-tree-id5202 . -1) (undo-tree-id5203 . -1) (undo-tree-id5204 . -1) (undo-tree-id5205 . -1) (undo-tree-id5206 . -1) (undo-tree-id5207 . -1) (undo-tree-id5208 . -1) (undo-tree-id5209 . -1) (undo-tree-id5210 . -1) (undo-tree-id5211 . -1) (undo-tree-id5212 . -1) (undo-tree-id5213 . -1) (undo-tree-id5214 . -1) (undo-tree-id5215 . -1) 88) nil (26116 19221 270704 69000) 0 nil])
([nil nil ((87 . 90)) nil (26116 19221 270683 1000) 0 nil])
([nil nil ((87 . 93) (#("Str" 0 3 (fontified nil)) . 87) (87 . 90) (#("String" 0 6 (fontified nil)) . -87) (87 . 93) (#("Str" 0 3 (face font-lock-type-face fontified t)) . -87) (undo-tree-id5172 . -3) (undo-tree-id5173 . -1) (undo-tree-id5174 . -1) (undo-tree-id5175 . -2) (undo-tree-id5176 . -2) (undo-tree-id5177 . -2) (undo-tree-id5178 . -3) (undo-tree-id5179 . -3) (undo-tree-id5180 . -3) (undo-tree-id5181 . -3) (undo-tree-id5182 . -3) 90) nil (26116 19221 270681 602000) 0 nil])
([nil nil ((#("32]" 0 2 (fontified t) 2 3 (face (rainbow-delimiters-depth-1-face) fontified t)) . -103) (undo-tree-id5168 . -3) (undo-tree-id5169 . -1) (undo-tree-id5170 . -2) (undo-tree-id5171 . -3) 106) nil (26116 19221 270671 850000) 0 nil])
([nil nil ((#("u8;" 0 2 (face font-lock-type-face fontified t) 2 3 (fontified t)) . -100) (undo-tree-id5152 . -2) (undo-tree-id5153 . -3) (undo-tree-id5154 . -2) (undo-tree-id5155 . -2) (undo-tree-id5156 . -2) (undo-tree-id5157 . -2) (undo-tree-id5158 . -2) (undo-tree-id5159 . -2) (undo-tree-id5160 . -2) (undo-tree-id5161 . -2) (undo-tree-id5162 . -3) (undo-tree-id5163 . -3) (undo-tree-id5164 . -3) (undo-tree-id5165 . -3) (undo-tree-id5166 . -3) (undo-tree-id5167 . -3) 103) nil (26116 19221 269952 581000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -99) (undo-tree-id5129 . -1) (undo-tree-id5130 . -1) (undo-tree-id5131 . -1) (undo-tree-id5132 . -1) (undo-tree-id5133 . -1) (undo-tree-id5134 . -1) (undo-tree-id5135 . -1) (undo-tree-id5136 . -1) (undo-tree-id5137 . -1) (undo-tree-id5138 . -1) (undo-tree-id5139 . -1) (undo-tree-id5140 . -1) (undo-tree-id5141 . -1) (undo-tree-id5142 . -1) (undo-tree-id5143 . -1) (undo-tree-id5144 . -1) (undo-tree-id5145 . -1) (undo-tree-id5146 . -1) (undo-tree-id5147 . -1) (undo-tree-id5148 . -1) (undo-tree-id5149 . -1) (undo-tree-id5150 . -1) (undo-tree-id5151 . -1) 100) nil (26116 19221 269941 415000) 0 nil])
([nil nil ((99 . 100)) nil (26116 19221 269924 928000) 0 nil])
([nil nil ((99 . 102)) nil (26116 19221 269923 810000) 0 nil])
([nil nil ((99 . 105) (#("Str" 0 3 (fontified nil)) . 99) (99 . 102) (#("String" 0 6 (fontified nil)) . -99) (99 . 105) (#("Str" 0 3 (face font-lock-type-face fontified t)) . -99) (undo-tree-id5118 . -3) (undo-tree-id5119 . -1) (undo-tree-id5120 . -1) (undo-tree-id5121 . -1) (undo-tree-id5122 . -2) (undo-tree-id5123 . -2) (undo-tree-id5124 . -2) (undo-tree-id5125 . -3) (undo-tree-id5126 . -3) (undo-tree-id5127 . -3) (undo-tree-id5128 . -3) 102) nil (26116 19221 269919 603000) 0 nil])
([nil nil ((#("impl Readable<u32> for u32{
    
}

impl Readable<String> for String {
    
}
" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 13 (face font-lock-type-face fontified t) 13 14 (face (rainbow-delimiters-depth-1-face) fontified t) 14 17 (face font-lock-type-face fontified t) 17 18 (face (rainbow-delimiters-depth-1-face) fontified t) 18 19 (fontified t) 19 22 (face font-lock-keyword-face fontified t) 22 23 (fontified t) 23 26 (face font-lock-type-face fontified t) 26 27 (face (rainbow-delimiters-depth-1-face) fontified t) 27 28 (fontified t) 28 33 (fontified t) 33 34 (face (rainbow-delimiters-depth-1-face) fontified t) 34 35 (fontified t) 35 36 (fontified t) 36 40 (face font-lock-keyword-face fontified t) 40 41 (fontified t) 41 49 (face font-lock-type-face fontified t) 49 50 (face (rainbow-delimiters-depth-1-face) fontified t) 50 56 (face font-lock-type-face fontified t) 56 57 (face (rainbow-delimiters-depth-1-face) fontified t) 57 58 (fontified t) 58 61 (face font-lock-keyword-face fontified t) 61 62 (fontified t) 62 68 (face font-lock-type-face fontified t) 68 69 (fontified t) 69 70 (face (rainbow-delimiters-depth-1-face) fontified t) 70 71 (fontified t) 71 76 (fontified t) 76 77 (face (rainbow-delimiters-depth-1-face) fontified t) 77 78 (fontified t)) . 37) (undo-tree-id5271 . -78) (undo-tree-id5272 . -77) (undo-tree-id5273 . -78) (undo-tree-id5274 . -78) (t 26116 19221 281926 21000)) nil (26116 19339 714101 686000) 0 nil])
([nil nil ((258 . 259)) nil (26116 19339 714098 29000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -258) (undo-tree-id5258 . -1) (undo-tree-id5259 . -1) (undo-tree-id5260 . -1) (undo-tree-id5261 . -1) (undo-tree-id5262 . -1) (undo-tree-id5263 . -1) (undo-tree-id5264 . -1) (undo-tree-id5265 . -1) (undo-tree-id5266 . -1) (undo-tree-id5267 . -1) (undo-tree-id5268 . -1) (undo-tree-id5269 . -1) (undo-tree-id5270 . -1) 259) nil (26116 19339 714096 85000) 0 nil])
([nil nil ((258 . 260)) nil (26116 19339 714079 327000) 0 nil])
([nil nil ((199 . 201)) nil (26116 19339 714075 42000) 0 nil])
([nil nil ((324 . 326) (t 26116 19339 731933 293000)) nil (26116 19341 609807 364000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -199) (undo-tree-id5306 . -1) (undo-tree-id5307 . -1) (undo-tree-id5308 . -1) (undo-tree-id5309 . -1) (undo-tree-id5310 . -1) (undo-tree-id5311 . -1) (undo-tree-id5312 . -1) (undo-tree-id5313 . -1) (undo-tree-id5314 . -1) (undo-tree-id5315 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -200) (undo-tree-id5316 . -1) (undo-tree-id5317 . -1) (undo-tree-id5318 . -1) (undo-tree-id5319 . -1) (undo-tree-id5320 . -1) (undo-tree-id5321 . -1) (undo-tree-id5322 . -1) (undo-tree-id5323 . -1) 201 (t 26116 19341 628600 76000)) nil (26116 19617 685196 958000) 0 nil])
([nil nil ((#("32]" 0 2 (fontified t) 2 3 (face (rainbow-delimiters-depth-2-face) fontified t)) . -214) (undo-tree-id5303 . -3) (undo-tree-id5304 . -2) (undo-tree-id5305 . -3) 217) nil (26116 19617 685184 229000) 0 nil])
([nil nil ((#("0;" 0 2 (fontified t)) . -212) (undo-tree-id5297 . -2) (undo-tree-id5298 . -1) (undo-tree-id5299 . -2) (undo-tree-id5300 . -2) (undo-tree-id5301 . -2) (undo-tree-id5302 . -2) 214) nil (26116 19617 685181 365000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -211) (undo-tree-id5289 . -1) (undo-tree-id5290 . -1) (undo-tree-id5291 . -1) (undo-tree-id5292 . -1) (undo-tree-id5293 . -1) (undo-tree-id5294 . -1) (undo-tree-id5295 . -1) (undo-tree-id5296 . -1) 212) nil (26116 19617 685175 999000) 0 nil])
([nil nil ((211 . 213)) nil (26116 19617 685169 629000) 0 nil])
([nil nil ((211 . 217) (#("St" 0 2 (fontified nil)) . 211) (211 . 213) (#("String" 0 6 (fontified nil)) . -211) (211 . 217) (#("St" 0 2 (face font-lock-type-face fontified t)) . -211) (undo-tree-id5282 . -2) (undo-tree-id5283 . -1) (undo-tree-id5284 . -1) (undo-tree-id5285 . -2) (undo-tree-id5286 . -2) (undo-tree-id5287 . -2) (undo-tree-id5288 . -2) 213) nil (26116 19617 685168 385000) 0 nil])
([nil nil ((217 . 220)) nil (26116 19617 685162 531000) 0 nil])
([nil nil ((apply yas--snippet-revive 219 224 #s(yas--snippet nil nil #s(yas--exit 224 nil) 81 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 224 nil) 81 nil nil nil nil)) (219 . 224) (#("new()$0" 0 7 (fontified nil)) . 219) (219 . 226) (#("n" 0 1 (fontified nil)) . 219) (219 . 220) (#("new()" 0 5 (fontified nil)) . -219) (219 . 224) (#("n" 0 1 (fontified t)) . -219) (undo-tree-id5279 . -1) (undo-tree-id5280 . -1) (undo-tree-id5281 . -1) 220) nil (26116 19617 685161 10000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . 265) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 265)) nil (26116 19617 685156 162000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . 327) (undo-tree-id5275 . -1) (undo-tree-id5276 . -1) (undo-tree-id5277 . -1) (undo-tree-id5278 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 327)) nil (26116 19617 685152 124000) 0 nil])
([nil nil ((#("0x7fff5be9aca4" 0 13 (fontified t) 13 14 (fontified t rear-nonsticky t)) . -244) (undo-tree-id5340 . -14) (undo-tree-id5341 . -14) (undo-tree-id5342 . -5) (undo-tree-id5343 . -5) (undo-tree-id5344 . -5) (undo-tree-id5345 . -5) (undo-tree-id5346 . -5) (undo-tree-id5347 . -14) (undo-tree-id5348 . -14) (undo-tree-id5349 . -14) (undo-tree-id5350 . -14) (undo-tree-id5351 . -14) (undo-tree-id5352 . -14) (undo-tree-id5353 . -14) (undo-tree-id5354 . -14) 258 (t 26116 19617 701950 356000)) nil (26116 19762 363799 36000) 0 nil])
([nil nil ((nil rear-nonsticky nil 257 . 258) (nil fontified nil 244 . 258) (244 . 258)) nil (26116 19762 363787 940000) 0 nil])
([nil nil ((#("0x7fff5be9aca8" 0 13 (fontified t) 13 14 (fontified t rear-nonsticky t)) . -277) (undo-tree-id5324 . -14) (undo-tree-id5325 . -14) (undo-tree-id5326 . -13) (undo-tree-id5327 . -11) (undo-tree-id5328 . -11) (undo-tree-id5329 . -11) (undo-tree-id5330 . -11) (undo-tree-id5331 . -11) (undo-tree-id5332 . -14) (undo-tree-id5333 . -14) (undo-tree-id5334 . -14) (undo-tree-id5335 . -14) (undo-tree-id5336 . -14) (undo-tree-id5337 . -14) (undo-tree-id5338 . -14) (undo-tree-id5339 . -14) 291) nil (26116 19762 363785 414000) 0 nil])
([nil nil ((nil rear-nonsticky nil 290 . 291) (nil fontified nil 277 . 291) (277 . 291)) nil (26116 19762 363764 57000) 0 nil])
([nil nil ((#("0x7ffe99c9e834" 0 13 (fontified t) 13 14 (rear-nonsticky t fontified t)) . -244) (undo-tree-id5375 . -14) (undo-tree-id5376 . -14) (undo-tree-id5377 . -7) (undo-tree-id5378 . -7) (undo-tree-id5379 . -7) (undo-tree-id5380 . -7) (undo-tree-id5381 . -7) (undo-tree-id5382 . -7) (undo-tree-id5383 . -14) (undo-tree-id5384 . -14) (undo-tree-id5385 . -14) (undo-tree-id5386 . -14) (undo-tree-id5387 . -14) (undo-tree-id5388 . -14) (undo-tree-id5389 . -14) (undo-tree-id5390 . -14) (undo-tree-id5391 . -14) 258 (t 26116 19762 381959 238000)) nil (26116 19969 89943 374000) 0 nil])
([nil nil ((nil rear-nonsticky nil 257 . 258) (nil fontified nil 244 . 258) (244 . 258)) nil (26116 19969 89932 584000) 0 nil])
([nil nil ((#("0x7ffe99c9e838" 0 13 (fontified t) 13 14 (fontified t rear-nonsticky t)) . -277) (undo-tree-id5355 . -14) (undo-tree-id5356 . -14) (undo-tree-id5357 . -14) (undo-tree-id5358 . -14) (undo-tree-id5359 . -14) (undo-tree-id5360 . -14) (undo-tree-id5361 . -6) (undo-tree-id5362 . -6) (undo-tree-id5363 . -6) (undo-tree-id5364 . -6) (undo-tree-id5365 . -6) (undo-tree-id5366 . -6) (undo-tree-id5367 . -14) (undo-tree-id5368 . -14) (undo-tree-id5369 . -14) (undo-tree-id5370 . -14) (undo-tree-id5371 . -14) (undo-tree-id5372 . -14) (undo-tree-id5373 . -14) (undo-tree-id5374 . -14) 291) nil (26116 19969 89929 891000) 0 nil])
([nil nil ((nil rear-nonsticky nil 290 . 291) (nil fontified nil 277 . 291) (277 . 291)) nil (26116 19969 89908 54000) 0 nil])
([nil nil ((#("0x7fffa5d012b0" 0 13 (fontified t) 13 14 (rear-nonsticky t fontified t)) . -244) (undo-tree-id5412 . -14) (undo-tree-id5413 . -14) (undo-tree-id5414 . -9) (undo-tree-id5415 . -9) (undo-tree-id5416 . -9) (undo-tree-id5417 . -9) (undo-tree-id5418 . -9) (undo-tree-id5419 . -9) (undo-tree-id5420 . -14) (undo-tree-id5421 . -14) (undo-tree-id5422 . -14) (undo-tree-id5423 . -14) (undo-tree-id5424 . -14) (undo-tree-id5425 . -14) (undo-tree-id5426 . -14) (undo-tree-id5427 . -14) (undo-tree-id5428 . -14) 258 (t 26116 19969 105305 260000)) nil (26116 20160 577759 770000) 0 nil])
([nil nil ((nil rear-nonsticky nil 257 . 258) (nil fontified nil 244 . 258) (244 . 258)) nil (26116 20160 577741 768000) 0 nil])
([nil nil ((#("0x7fffa5d012b4" 0 13 (fontified t) 13 14 (fontified t rear-nonsticky t)) . -277) (undo-tree-id5392 . -6) (undo-tree-id5393 . -6) (undo-tree-id5394 . -14) (undo-tree-id5395 . -14) (undo-tree-id5396 . -6) (undo-tree-id5397 . -6) (undo-tree-id5398 . -5) (undo-tree-id5399 . -5) (undo-tree-id5400 . -5) (undo-tree-id5401 . -5) (undo-tree-id5402 . -5) (undo-tree-id5403 . -5) (undo-tree-id5404 . -14) (undo-tree-id5405 . -14) (undo-tree-id5406 . -14) (undo-tree-id5407 . -14) (undo-tree-id5408 . -14) (undo-tree-id5409 . -14) (undo-tree-id5410 . -14) (undo-tree-id5411 . -14) 291) nil (26116 20160 577738 486000) 0 nil])
([nil nil ((nil rear-nonsticky nil 290 . 291) (nil fontified nil 277 . 291) (277 . 291)) nil (26116 20160 577705 456000) 0 nil])
([nil nil ((13 . 18) (t 26116 20160 591983 682000)) nil (26116 20671 831847 760000) 0 nil])
([nil nil ((#("p" 0 1 (face font-lock-constant-face fontified t)) . -17) (undo-tree-id5442 . -1) (undo-tree-id5443 . -1) (undo-tree-id5444 . -1) 18) nil (26116 20671 831846 716000) 0 nil])
([nil nil ((17 . 19)) nil (26116 20671 831843 603000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-constant-face fontified t)) . -17) (undo-tree-id5434 . -1) (undo-tree-id5435 . -1) (undo-tree-id5436 . -1) (undo-tree-id5437 . -1) (undo-tree-id5438 . -1) (#("o" 0 1 (face font-lock-constant-face fontified t)) . -18) (undo-tree-id5439 . -1) (undo-tree-id5440 . -1) (undo-tree-id5441 . -1) 19) nil (26116 20671 831841 891000) 0 nil])
([nil nil ((17 . 18)) nil (26116 20671 831834 544000) 0 nil])
([nil nil ((17 . 25) (#("o" 0 1 (fontified nil)) . 17) (17 . 18) (#("offsets;" 0 8 (fontified nil)) . -17) (17 . 25) (#("o" 0 1 (face font-lock-constant-face fontified t)) . -17) (undo-tree-id5429 . -1) (undo-tree-id5430 . -1) (undo-tree-id5431 . -1) (undo-tree-id5432 . -1) (undo-tree-id5433 . -1) 18) nil (26116 20671 831830 431000) 0 nil])
([nil nil ((#("let mut buf: u32 = 1;" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 11 (face font-lock-variable-name-face fontified t) 11 13 (fontified t) 13 16 (face font-lock-type-face fontified t) 16 21 (fontified t)) . 185) (undo-tree-id5457 . -21) (undo-tree-id5458 . -21) (undo-tree-id5459 . -21) (undo-tree-id5460 . -21) (undo-tree-id5461 . -21) (undo-tree-id5462 . -21) (undo-tree-id5463 . -21) (undo-tree-id5464 . -21) (undo-tree-id5465 . -21) (undo-tree-id5466 . -21) (undo-tree-id5467 . -21) (undo-tree-id5468 . -21) (undo-tree-id5469 . -21) (undo-tree-id5470 . -21) (undo-tree-id5471 . -21) (undo-tree-id5472 . -21) (undo-tree-id5473 . -21) (undo-tree-id5474 . -21) (undo-tree-id5475 . -21) (undo-tree-id5476 . -21) (t 26116 20671 852015 67000)) nil (26116 20762 785736 541000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 185) (undo-tree-id5456 . -1)) nil (26116 20762 785722 364000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -185)) nil (26116 20762 785720 867000) 0 nil])
([nil nil ((#("test" 0 4 (face font-lock-string-face fontified t)) . -125) (undo-tree-id5454 . -4) (undo-tree-id5455 . -4) 129) nil (26116 20762 785719 992000) 0 nil])
([nil nil ((125 . 127)) nil (26116 20762 785717 703000) 0 nil])
([nil nil ((#("o" 0 1 (face font-lock-string-face fontified t)) . -126) (undo-tree-id5448 . -1) (undo-tree-id5449 . -1) (undo-tree-id5450 . -1) (undo-tree-id5451 . -1) (undo-tree-id5452 . -1) (undo-tree-id5453 . -1) 127) nil (26116 20762 785716 705000) 0 nil])
([nil nil ((126 . 132)) nil (26116 20762 785711 262000) 0 nil])
([nil nil ((132 . 133)) nil (26116 20762 785710 515000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-string-face fontified t)) . -132) (undo-tree-id5445 . -1) (undo-tree-id5446 . -1) (undo-tree-id5447 . -1) 133) nil (26116 20762 785708 291000) 0 nil])
([nil nil ((132 . 135)) nil (26116 20762 785693 644000) 0 nil])
([nil nil ((#("buf.read(pid, 0x7ffeee21499c);" 0 4 (fontified t) 4 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t) 9 14 (fontified t) 14 27 (fontified t) 27 28 (fontified t rear-nonsticky t) 28 29 (face (rainbow-delimiters-depth-2-face) fontified t) 29 30 (fontified t)) . 222) (undo-tree-id5517 . -14) (undo-tree-id5518 . -14) (undo-tree-id5519 . -14) (undo-tree-id5520 . -14) (undo-tree-id5521 . -30) (undo-tree-id5522 . -30) (undo-tree-id5523 . -30) (undo-tree-id5524 . -30) (undo-tree-id5525 . -30) (undo-tree-id5526 . -30) (undo-tree-id5527 . -30) (undo-tree-id5528 . -30) (undo-tree-id5529 . -30) (undo-tree-id5530 . -30) (t 26116 20762 802020 651000)) nil (26116 20795 784008 421000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 222) (undo-tree-id5516 . -1)) nil (26116 20795 783998 159000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -222)) nil (26116 20795 783996 732000) 0 nil])
([nil nil ((#("0x7ffeee2149a3" 0 13 (fontified t) 13 14 (fontified t rear-nonsticky t)) . -234) (undo-tree-id5512 . -14) (undo-tree-id5513 . -14) (undo-tree-id5514 . -14) (undo-tree-id5515 . -14) 248) nil (26116 20795 783995 801000) 0 nil])
([nil nil ((234 . 237)) nil (26116 20795 783992 520000) 0 nil])
([nil nil ((47 . 80) (234 . 234) (234 . 244) (#("OFF" 0 3 (fontified nil)) . 234) (234 . 237) (#("OFF_REGION (use crate::offsets::OFF_REGION)" 0 43 (fontified nil)) . -234) (234 . 277) (#("OFF" 0 3 (face font-lock-type-face fontified t)) . -234) (undo-tree-id5494 . -3) (undo-tree-id5495 . -3) (undo-tree-id5496 . -1) (undo-tree-id5497 . -1) (undo-tree-id5498 . -1) (undo-tree-id5499 . -2) (undo-tree-id5500 . -2) (undo-tree-id5501 . -2) (undo-tree-id5502 . -2) (undo-tree-id5503 . -3) (undo-tree-id5504 . -3) (undo-tree-id5505 . -3) (undo-tree-id5506 . -3) (undo-tree-id5507 . -3) (undo-tree-id5508 . -3) (undo-tree-id5509 . -3) (undo-tree-id5510 . -3) (undo-tree-id5511 . -3) 237) nil (26116 20795 783990 657000) 0 nil])
([nil nil ((277 . 278)) nil (26116 20795 783977 418000) 0 nil])
([nil nil ((278 . 281)) nil (26116 20795 783976 145000) 0 nil])
([nil nil ((#("::offsets" 0 2 (fontified t) 2 9 (face font-lock-constant-face fontified t)) . -58) (undo-tree-id5477 . -9) 67 (69 . 79) (79 . 91) (278 . 278) (278 . 287) (#("OFF" 0 3 (fontified nil)) . 278) (278 . 281) (#("OFF_LEVEL (use crate::offsets::OFF_LEVEL)" 0 41 (fontified nil)) . -278) (278 . 319) (#("OFF" 0 3 (face font-lock-type-face fontified t)) . -278) (undo-tree-id5478 . -3) (undo-tree-id5479 . -3) (undo-tree-id5480 . -1) (undo-tree-id5481 . -1) (undo-tree-id5482 . -1) (undo-tree-id5483 . -2) (undo-tree-id5484 . -2) (undo-tree-id5485 . -3) (undo-tree-id5486 . -3) (undo-tree-id5487 . -3) (undo-tree-id5488 . -3) (undo-tree-id5489 . -3) (undo-tree-id5490 . -3) (undo-tree-id5491 . -3) (undo-tree-id5492 . -3) (undo-tree-id5493 . -3) 281) nil (26116 20795 783971 57000) 0 nil])
([nil nil ((#("LEVEL}" 0 5 (face font-lock-type-face fontified t) 5 6 (face (rainbow-delimiters-depth-1-face) fontified t)) . -86) (undo-tree-id5559 . -6) (undo-tree-id5560 . -6) 92 (t 26116 20795 802022 676000)) nil (26116 20803 389327 991000) 0 nil])
([nil nil ((#("OFF_" 0 4 (face font-lock-type-face fontified t)) . -82) (undo-tree-id5554 . -4) (undo-tree-id5555 . -3) (undo-tree-id5556 . -4) (undo-tree-id5557 . -4) (undo-tree-id5558 . -4) 86) nil (26116 20803 389325 402000) 0 nil])
([nil nil ((#("REGION, " 0 6 (face font-lock-type-face fontified t) 6 8 (fontified t)) . -74) (undo-tree-id5548 . -8) (undo-tree-id5549 . -8) (undo-tree-id5550 . -8) (undo-tree-id5551 . -8) (undo-tree-id5552 . -8) (undo-tree-id5553 . -8) 82) nil (26116 20803 389321 346000) 0 nil])
([nil nil ((#("OFF_" 0 4 (face font-lock-type-face fontified t)) . -70) (undo-tree-id5541 . -4) (undo-tree-id5542 . -4) (undo-tree-id5543 . -4) (undo-tree-id5544 . -4) (undo-tree-id5545 . -4) (undo-tree-id5546 . -4) (undo-tree-id5547 . -4) 74) nil (26116 20803 389316 389000) 0 nil])
([nil nil ((#("{" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -69) (undo-tree-id5531 . -1) (undo-tree-id5532 . -1) (undo-tree-id5533 . -1) (undo-tree-id5534 . -1) (undo-tree-id5535 . -1) (undo-tree-id5536 . -1) (undo-tree-id5537 . -1) (undo-tree-id5538 . -1) (undo-tree-id5539 . -1) (undo-tree-id5540 . -1) 70) nil (26116 20803 389308 947000) 0 nil])
([nil nil ((69 . 70)) nil (26116 20803 389291 773000) 0 nil])
([nil nil ((#("println!(\"{}\", buf);    " 0 8 (face rust-builtin-formatting-macro fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t) 9 10 (face font-lock-string-face fontified t) 10 12 (face rust-string-interpolation fontified t) 12 13 (face font-lock-string-face fontified t) 13 15 (fontified t) 15 18 (fontified t) 18 19 (face (rainbow-delimiters-depth-2-face) fontified t) 19 20 (fontified t) 20 24 (fontified t)) . 285) (undo-tree-id5563 . -10) (undo-tree-id5564 . -20) (undo-tree-id5565 . -22) (undo-tree-id5566 . -24) (undo-tree-id5567 . -24) (undo-tree-id5568 . -24) (undo-tree-id5569 . -24) (undo-tree-id5570 . -24) (undo-tree-id5571 . -24) (undo-tree-id5572 . -24) (undo-tree-id5573 . -21) (undo-tree-id5574 . -21) (undo-tree-id5575 . -21) (undo-tree-id5576 . -21) (undo-tree-id5577 . -21) (undo-tree-id5578 . -21) (undo-tree-id5579 . -24) (t 26116 20803 405356 478000)) nil (26116 20838 319731 337000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 285) (undo-tree-id5562 . -1)) nil (26116 20838 319717 977000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -285) (undo-tree-id5561 . -4)) nil (26116 20838 319712 926000) 0 nil])
([nil nil ((47 . 48) (t 26116 20838 335358 622000)) nil (26116 21373 113208 400000) 0 nil])
([nil nil ((25 . 26)) nil (26116 21373 113207 103000) 0 nil])
([nil nil ((26 . 30)) nil (26116 21373 113205 862000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -29) (undo-tree-id5590 . -1) (undo-tree-id5591 . -1) (undo-tree-id5592 . -1) (undo-tree-id5593 . -1) (undo-tree-id5594 . -1) (undo-tree-id5595 . -1) 30) nil (26116 21373 113203 833000) 0 nil])
([nil nil ((29 . 30)) nil (26116 21373 113195 722000) 0 nil])
([nil nil ((30 . 34) (#(" " 0 1 (fontified nil)) . 29) (undo-tree-id5583 . -1) (undo-tree-id5584 . -1) (undo-tree-id5585 . -1) (undo-tree-id5586 . -1) (undo-tree-id5587 . -1) (undo-tree-id5588 . -1) (undo-tree-id5589 . -1) (30 . 31)) nil (26116 21373 113194 451000) 0 nil])
([nil nil ((29 . 30)) nil (26116 21373 113187 471000) 0 nil])
([nil nil ((30 . 31)) nil (26116 21373 113186 4000) 0 nil])
([nil nil ((30 . 36) (#("l" 0 1 (fontified nil)) . 30) (30 . 31) (#("level;" 0 6 (fontified nil)) . -30) (30 . 36) (#("l" 0 1 (face font-lock-constant-face fontified t)) . -30) (undo-tree-id5580 . -1) (undo-tree-id5581 . -1) (undo-tree-id5582 . -1) 31) nil (26116 21373 113181 536000) 0 nil])
([nil nil ((#("pid, " 0 5 (fontified t)) . -270) (undo-tree-id5596 . -5) (undo-tree-id5597 . -5) (undo-tree-id5598 . -5) (undo-tree-id5599 . -5) (undo-tree-id5600 . -5) (undo-tree-id5601 . -5) (undo-tree-id5602 . -5) (undo-tree-id5603 . -5) (undo-tree-id5604 . -5) (undo-tree-id5605 . -5) (undo-tree-id5606 . -5) (undo-tree-id5607 . -5) (undo-tree-id5608 . -5) (undo-tree-id5609 . -5) (undo-tree-id5610 . -5) 275 (t 26116 21373 128724 601000)) nil (26116 22021 89669 34000) 0 nil])
([nil nil ((36 . 37) (t 26116 22021 92097 41000)) nil (26116 22437 601399 182000) 0 nil])
([nil nil ((37 . 43)) nil (26116 22437 601398 284000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -41) (undo-tree-id5614 . -1) (undo-tree-id5615 . -1) (undo-tree-id5616 . -1) (undo-tree-id5617 . -1) (undo-tree-id5618 . -1) (undo-tree-id5619 . -1) (undo-tree-id5620 . -1) (#("p" 0 1 (fontified t)) . -42) (undo-tree-id5621 . -1) (undo-tree-id5622 . -1) (undo-tree-id5623 . -1) 43) nil (26116 22437 601396 813000) 0 nil])
([nil nil ((41 . 42)) nil (26116 22437 601388 507000) 0 nil])
([nil current ((41 . 49) (#("p" 0 1 (fontified nil)) . 41) (41 . 42) (#("players;" 0 8 (fontified nil)) . -41) (41 . 49) (#("p" 0 1 (face font-lock-constant-face fontified t)) . -41) (undo-tree-id5611 . -1) (undo-tree-id5612 . -1) (undo-tree-id5613 . -1) 42) nil (26116 22437 601384 393000) 0 nil])
nil
