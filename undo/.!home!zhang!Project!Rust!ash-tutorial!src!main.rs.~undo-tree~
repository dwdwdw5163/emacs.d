(undo-tree-save-format-version . 1)
"eab3d810922abcfc88aeb3105a482025a6b1df47"
[nil nil nil nil (26049 48654 453920 315000) 0 nil]
([nil nil ((1 . 3) (t 26049 48435 812102 564000)) nil (26049 48654 453919 422000) 0 nil])
([nil nil ((1 . 2)) nil (26049 48654 453918 631000) 0 nil])
([nil nil ((2 . 7)) nil (26049 48654 453917 840000) 0 nil])
([nil nil ((apply yas--snippet-revive 2 9 #s(yas--snippet nil nil #s(yas--exit 9 nil) 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 9 nil) 0 nil nil nil nil)) (2 . 9) (#("struct $0" 0 9 (fontified nil)) . 2) (2 . 11) (#("struc" 0 5 (fontified nil)) . 2) (2 . 7) (#("struct" 0 6 (fontified nil)) . -2) (2 . 8) (#("struc" 0 5 (fontified t)) . -2) (undo-tree-id151 . -5) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -2) (undo-tree-id155 . -2) (undo-tree-id156 . -3) (undo-tree-id157 . -3) (undo-tree-id158 . -4) (undo-tree-id159 . -4) (undo-tree-id160 . -5) (undo-tree-id161 . -5) 7) nil (26049 48654 453916 330000) 0 nil])
([nil nil ((9 . 21)) nil (26049 48654 453907 778000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -19) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (#("}" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -20) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) 21) nil (26049 48654 453906 10000) 0 nil])
([nil nil ((19 . 21)) nil (26049 48654 453754 424000) 0 nil])
([nil nil ((21 . 23)) nil (26049 48654 453753 430000) 0 nil])
([nil nil ((23 . 25)) nil (26049 48654 453752 863000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -23) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (#(" " 0 1 (fontified t)) . -24) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) 25) nil (26049 48654 453751 209000) 0 nil])
([nil nil ((23 . 25)) nil (26049 48654 453735 209000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -23) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (#("m" 0 1 (fontified t)) . -24) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) 25) nil (26049 48654 453733 646000) 0 nil])
([nil nil ((23 . 25)) nil (26049 48654 453552 729000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 28 37 nil nil nil t #s(yas--exit 44 nil))) #s(yas--exit 44 nil) 1 nil #s(yas--field 1 28 37 nil nil nil t #s(yas--exit 44 nil)) nil nil)) (23 . 37) (#("impl $1 {
    $0
}" 0 18 (fontified nil)) . 23) (23 . 41) (#("im" 0 1 (fontified nil) 1 2 (fontified nil)) . 23) (undo-tree-id75 . -2) (undo-tree-id76 . -2) (undo-tree-id77 . -2) (undo-tree-id78 . -2) (undo-tree-id79 . 1) (23 . 24) (#("impl" 0 4 (fontified nil)) . -23) (23 . 27) (#("i" 0 1 (fontified t)) . -23) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) 24) nil (26049 48654 453551 168000) 0 nil])
([nil nil ((28 . 29)) nil (26049 48654 453543 355000) 0 nil])
([nil nil ((28 . 37) (#("V" 0 1 (fontified nil)) . 28) (undo-tree-id66 . -1) (28 . 29) (#("VulkanApp" 0 9 (fontified nil)) . -28) (undo-tree-id67 . -9) (28 . 37) (#("V" 0 1 (face font-lock-type-face fontified t)) . -28) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) 29) nil (26049 48654 453541 674000) 0 nil])
([nil nil ((apply yas--snippet-revive 23 46 #s(yas--snippet nil (#s(yas--field 1 28 37 nil nil nil t #s(yas--exit 44 nil))) #s(yas--exit 44 nil) 1 nil #s(yas--field 1 28 37 nil nil nil t #s(yas--exit 44 nil)) nil nil))) nil (26049 48654 453473 920000) 0 nil])
([nil nil ((42 . 46) (#("    " 0 4 (fontified nil)) . 41) (undo-tree-id27 . -4) (undo-tree-id28 . -4) (undo-tree-id29 . -4) (undo-tree-id30 . -4) (undo-tree-id31 . -4) (undo-tree-id32 . -4) (undo-tree-id33 . -4) (undo-tree-id34 . -4) (undo-tree-id35 . -4) (41 . 46) (#("    " 0 4 (fontified nil)) . 40) (undo-tree-id36 . -4) (undo-tree-id37 . -4) (undo-tree-id38 . -4) (undo-tree-id39 . -4) (undo-tree-id40 . -4) (undo-tree-id41 . -4) (undo-tree-id42 . -4) (undo-tree-id43 . -4) (undo-tree-id44 . -4) (undo-tree-id45 . -4) (undo-tree-id46 . -4) (undo-tree-id47 . -4) (undo-tree-id48 . -4) (undo-tree-id49 . -4) (undo-tree-id50 . -4) (undo-tree-id51 . -4) (undo-tree-id52 . -4) (undo-tree-id53 . -4) (undo-tree-id54 . -4) (undo-tree-id55 . -4) (undo-tree-id56 . -4) (undo-tree-id57 . -4) (undo-tree-id58 . -4) (undo-tree-id59 . -4) (undo-tree-id60 . -4) (undo-tree-id61 . -4) (undo-tree-id62 . -4) (undo-tree-id63 . -4) (undo-tree-id64 . -4) (undo-tree-id65 . -4) (44 . 45)) nil (26049 48654 453471 495000) 0 nil])
([nil nil ((40 . 44)) nil (26049 48654 453445 204000) 0 nil])
([nil nil ((44 . 51)) nil (26049 48654 453444 504000) 0 nil])
([nil nil ((#("m" 0 1 (face font-lock-function-name-face fontified t)) . -48) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (#("i" 0 1 (face font-lock-function-name-face fontified t)) . -49) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (#("t" 0 1 (face font-lock-function-name-face fontified t)) . -50) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) 51) nil (26049 48654 453442 917000) 0 nil])
([nil nil ((48 . 51)) nil (26049 48654 453429 649000) 0 nil])
([nil nil ((51 . 55)) nil (26049 48654 453428 926000) 0 nil])
([nil nil ((#("k" 0 1 (face font-lock-function-name-face fontified t)) . -54) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) 55) nil (26049 48654 453428 61000) 0 nil])
([nil nil ((54 . 57)) nil (26049 48654 453425 191000) 0 nil])
([nil nil ((57 . 59)) nil (26049 48654 453424 501000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . -58) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) 59) nil (26049 48654 453422 867000) 0 nil])
([nil nil ((58 . 62)) nil (26049 48654 453402 591000) 0 nil])
([nil nil ((51 . 52)) nil (26049 48654 453398 759000) 0 nil])
([nil nil ((#("V" 0 1 (face font-lock-function-name-face fontified t)) . -52) (undo-tree-id162 . -1) (undo-tree-id163 . 1) (undo-tree-id164 . -1) 53 (t 26049 48654 462115 833000)) nil (26049 48657 506717 397000) 0 nil])
([nil nil ((52 . 53)) nil (26049 48657 506703 934000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . 21) (21 . 25) (20 . 22) (t 26049 48657 515449 351000)) nil (26049 48703 905204 370000) 0 nil])
([nil nil ((21 . 25)) nil (26049 48703 905203 333000) 0 nil])
([nil nil ((25 . 30)) nil (26049 48703 905202 715000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -29) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) 30) nil (26049 48703 905201 681000) 0 nil])
([nil nil ((29 . 32)) nil (26049 48703 905194 159000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -30) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (#("w" 0 1 (fontified t)) . -31) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) 32) nil (26049 48703 905193 78000) 0 nil])
([nil nil ((30 . 35)) nil (26049 48703 905185 957000) 0 nil])
([nil nil ((33 . 38) (#("wi" 0 2 (fontified nil)) . 33) (33 . 35) (#("winit" 0 5 (fontified nil)) . -33) (33 . 38) (#("wi" 0 2 (fontified t)) . -33) (undo-tree-id186 . -2) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -2) (undo-tree-id191 . -2) (undo-tree-id192 . -2) (undo-tree-id193 . -2) (undo-tree-id194 . -2) 35) nil (26049 48703 905184 658000) 0 nil])
([nil nil ((38 . 41)) nil (26049 48703 905177 477000) 0 nil])
([nil nil ((40 . 46) (#("W" 0 1 (fontified nil)) . 40) (40 . 41) (#("window" 0 6 (fontified nil)) . -40) (40 . 46) (#("W" 0 1 (face font-lock-type-face fontified t)) . -40) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) 41) nil (26049 48703 905176 178000) 0 nil])
([nil nil ((46 . 49)) nil (26049 48703 905169 921000) 0 nil])
([nil nil ((48 . 54) (#("W" 0 1 (fontified nil)) . 48) (48 . 49) (#("Window" 0 6 (fontified nil)) . -48) (48 . 54) (#("W" 0 1 (face font-lock-type-face fontified t)) . -48) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) 49) nil (26049 48703 905168 241000) 0 nil])
([nil nil ((54 . 55)) nil (26049 48703 904929 376000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -54) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) 55) nil (26049 48703 904926 714000) 0 nil])
([nil nil ((54 . 55)) nil (26049 48703 904909 8000) 0 nil])
([nil nil ((97 . 99) (t 26049 48703 915452 158000)) nil (26049 48762 949685 998000) 0 nil])
([nil nil ((99 . 101)) nil (26049 48762 949685 225000) 0 nil])
([nil nil ((100 . 104) (#("S" 0 1 (fontified nil)) . 100) (100 . 101) (#("Self" 0 4 (fontified nil)) . -100) (100 . 104) (#("S" 0 1 (face font-lock-type-face fontified t)) . -100) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) 101) nil (26049 48762 949684 193000) 0 nil])
([nil nil ((104 . 105)) nil (26049 48762 949678 661000) 0 nil])
([nil nil ((108 . 112) (#("        " 0 8 (fontified nil)) . 107) (107 . 115) (#("    " 0 4 (fontified nil)) . 107) (undo-tree-id356 . -4) (undo-tree-id357 . -4) (undo-tree-id358 . -4) (undo-tree-id359 . -4) (106 . 112)) nil (26049 48762 949677 696000) 0 nil])
([nil nil ((107 . 115)) nil (26049 48762 949673 915000) 0 nil])
([nil nil ((115 . 118)) nil (26049 48762 949673 315000) 0 nil])
([nil nil ((115 . 120) (#("win" 0 3 (fontified nil)) . 115) (115 . 118) (#("winit" 0 5 (fontified nil)) . -115) (115 . 120) (#("win" 0 3 (fontified t)) . -115) (undo-tree-id347 . -3) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -2) (undo-tree-id351 . -2) (undo-tree-id352 . -2) (undo-tree-id353 . -3) (undo-tree-id354 . -3) (undo-tree-id355 . -3) 118) nil (26049 48762 949672 132000) 0 nil])
([nil nil ((120 . 123)) nil (26049 48762 949664 753000) 0 nil])
([nil nil ((#("W" 0 1 (face font-lock-type-face fontified t)) . -122) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) 123) nil (26049 48762 949663 732000) 0 nil])
([nil nil ((122 . 123)) nil (26049 48762 949659 267000) 0 nil])
([nil nil ((122 . 128) (#("w" 0 1 (fontified nil)) . 122) (122 . 123) (#("window" 0 6 (fontified nil)) . -122) (122 . 128) (#("w" 0 1 (fontified t)) . -122) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) 123) nil (26049 48762 949658 101000) 0 nil])
([nil nil ((128 . 131)) nil (26049 48762 949654 821000) 0 nil])
([nil nil ((130 . 136) (#("W" 0 1 (fontified nil)) . 130) (130 . 131) (#("Window" 0 6 (fontified nil)) . -130) (130 . 136) (#("W" 0 1 (face font-lock-type-face fontified t)) . -130) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) 131) nil (26049 48762 949653 568000) 0 nil])
([nil nil ((136 . 139)) nil (26049 48762 949648 912000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -138) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) 139) nil (26049 48762 949647 229000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -136) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (#(":" 0 1 (fontified t)) . -137) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) 138) nil (26049 48762 949441 831000) 0 nil])
([nil nil ((136 . 137)) nil (26049 48762 949414 623000) 0 nil])
([nil nil ((130 . 143) (#("WindowB" 0 7 (fontified nil)) . 130) (130 . 137) (#("WindowBuilder" 0 13 (fontified nil)) . -130) (130 . 143) (#("WindowB" 0 7 (face font-lock-type-face fontified t)) . -130) (undo-tree-id248 . -7) (undo-tree-id249 . -6) (undo-tree-id250 . -6) (undo-tree-id251 . -6) (undo-tree-id252 . -6) (undo-tree-id253 . -6) (undo-tree-id254 . -6) (undo-tree-id255 . -6) (undo-tree-id256 . -6) (undo-tree-id257 . -6) (undo-tree-id258 . -6) (undo-tree-id259 . -6) (undo-tree-id260 . -6) (undo-tree-id261 . -6) (undo-tree-id262 . -6) (undo-tree-id263 . -6) (undo-tree-id264 . -6) (undo-tree-id265 . -6) (undo-tree-id266 . -6) (undo-tree-id267 . -6) (undo-tree-id268 . -6) (undo-tree-id269 . -6) (undo-tree-id270 . -6) (undo-tree-id271 . -6) (undo-tree-id272 . -6) (undo-tree-id273 . -6) (undo-tree-id274 . -6) (undo-tree-id275 . -6) (undo-tree-id276 . -6) (undo-tree-id277 . -7) (undo-tree-id278 . -7) (undo-tree-id279 . -7) (undo-tree-id280 . -7) 137) nil (26049 48762 949412 417000) 0 nil])
([nil nil ((143 . 146)) nil (26049 48762 949390 451000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -145) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) 146) nil (26049 48762 949389 633000) 0 nil])
([nil nil ((145 . 146)) nil (26049 48762 949385 145000) 0 nil])
([nil nil ((apply yas--snippet-revive 145 150 #s(yas--snippet nil nil #s(yas--exit 150 nil) 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 150 nil) 2 nil nil nil nil)) (145 . 150) (#("new()$0" 0 7 (fontified nil)) . 145) (145 . 152) (#("n" 0 1 (fontified nil)) . 145) (145 . 146) (#("new()" 0 5 (fontified nil)) . -145) (145 . 150) (#("n" 0 1 (fontified t)) . -145) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) 146) nil (26049 48762 949383 727000) 0 nil])
([nil nil ((150 . 158)) nil (26049 48762 949377 533000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 162 167 nil nil nil nil #s(yas--exit 168 nil))) #s(yas--exit 168 nil) 3 nil #s(yas--field 1 162 167 nil nil nil nil #s(yas--exit 168 nil)) nil nil)) (151 . 168) (#("with_title(${1:title})$0" 0 24 (fontified nil)) . 151) (151 . 175) (#("with_ti" 0 7 (fontified nil)) . 151) (151 . 158) (#("with_title(…)" 0 13 (fontified nil)) . -151) (151 . 164) (#("with_ti" 0 7 (fontified t)) . -151) (undo-tree-id215 . -7) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -2) (undo-tree-id219 . -2) (undo-tree-id220 . -2) (undo-tree-id221 . -3) (undo-tree-id222 . -3) (undo-tree-id223 . -3) (undo-tree-id224 . -4) (undo-tree-id225 . -4) (undo-tree-id226 . -4) (undo-tree-id227 . -4) (undo-tree-id228 . -5) (undo-tree-id229 . -5) (undo-tree-id230 . -6) (undo-tree-id231 . -6) (undo-tree-id232 . -7) (undo-tree-id233 . -7) (undo-tree-id234 . -7) (undo-tree-id235 . -7) 158) nil (26049 48762 949374 973000) 0 nil])
([nil nil ((apply yas--snippet-revive 151 168 #s(yas--snippet nil (#s(yas--field 1 162 167 nil nil nil nil #s(yas--exit 168 nil))) #s(yas--exit 168 nil) 3 nil #s(yas--field 1 162 167 nil nil nil nil #s(yas--exit 168 nil)) nil nil))) nil (26049 48762 949352 807000) 0 nil])
([nil nil ((1 . 3)) nil (26049 48762 949351 399000) 0 nil])
([nil nil ((nil rear-nonsticky nil 127 . 128) (nil fontified nil 2 . 128) (2 . 128)) nil (26049 48762 949347 95000) 0 nil])
([nil nil ((#("Code" 0 4 (face font-lock-string-face fontified t)) . -59) (undo-tree-id468 . -4) (undo-tree-id469 . -4) (undo-tree-id470 . -4) (undo-tree-id471 . -4) (undo-tree-id472 . -4) (undo-tree-id473 . -4) (undo-tree-id474 . -4) 63 (t 26049 48762 982122 395000)) nil (26049 48774 761977 693000) 0 nil])
([nil nil ((#("Base " 0 5 (face font-lock-string-face fontified t)) . -54) (undo-tree-id453 . -5) (undo-tree-id454 . -2) (undo-tree-id455 . -2) (undo-tree-id456 . -2) (undo-tree-id457 . -2) (undo-tree-id458 . -2) (undo-tree-id459 . -2) (undo-tree-id460 . -5) (undo-tree-id461 . -5) (undo-tree-id462 . -5) (undo-tree-id463 . -5) (undo-tree-id464 . -5) (undo-tree-id465 . -5) (undo-tree-id466 . -5) (undo-tree-id467 . -5) 59) nil (26049 48774 761971 789000) 0 nil])
([nil nil ((#("0" 0 1 (face font-lock-string-face fontified t)) . -51) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (#("0" 0 1 (face font-lock-string-face fontified t)) . -52) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (#("." 0 1 (face font-lock-string-face fontified t)) . -53) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) 54) nil (26049 48774 761959 628000) 0 nil])
([nil nil ((51 . 53)) nil (26049 48774 761923 63000) 0 nil])
([nil nil ((#("V" 0 1 (face font-lock-string-face fontified t)) . -51) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (#("y" 0 1 (face font-lock-string-face fontified t)) . -52) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) 53) nil (26049 48774 761921 838000) 0 nil])
([nil nil ((51 . 52)) nil (26049 48774 761914 241000) 0 nil])
([nil nil ((#("S" 0 1 (face font-lock-string-face fontified t)) . -51) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) 52) nil (26049 48774 761912 916000) 0 nil])
([nil nil ((51 . 56)) nil (26049 48774 761904 798000) 0 nil])
([nil nil ((56 . 59)) nil (26049 48774 761904 19000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-string-face fontified t)) . -57) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -58) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) 59) nil (26049 48774 761901 442000) 0 nil])
([nil nil ((57 . 63)) nil (26049 48774 761883 758000) 0 nil])
([nil nil ((#("title" 0 5 (fontified t)) . -290) (undo-tree-id618 . -5) (undo-tree-id619 . -5) (undo-tree-id620 . -5) (undo-tree-id621 . -5) (undo-tree-id622 . -5) (undo-tree-id623 . -5) 295 (t 26049 48774 772123 108000)) nil (26049 48852 597597 793000) 0 nil])
([nil nil ((290 . 291)) nil (26049 48852 597593 623000) 0 nil])
([nil nil ((290 . 302) (#("W" 0 1 (fontified nil)) . 290) (290 . 291) (#("WINDOW_TITLE" 0 12 (fontified nil)) . -290) (290 . 302) (#("W" 0 1 (face font-lock-type-face fontified t)) . -290) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) 291) nil (26049 48852 597592 493000) 0 nil])
([nil nil ((303 . 305)) nil (26049 48852 597587 277000) 0 nil])
([nil nil ((305 . 309)) nil (26049 48852 597586 698000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -308) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) 309) nil (26049 48852 597585 842000) 0 nil])
([nil nil ((308 . 312)) nil (26049 48852 597583 47000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 320 377 nil nil nil t #s(yas--exit 378 nil))) #s(yas--exit 378 nil) 4 nil #s(yas--field 1 320 377 nil nil nil t #s(yas--exit 378 nil)) nil nil)) (304 . 325) (#("with_inner_size(${1:size})$0" 0 28 (fontified nil)) . 304) (304 . 332) (#("with_inn" 0 8 (fontified nil)) . 304) (304 . 312) (#("with_inner_size(…)" 0 18 (fontified nil)) . -304) (304 . 322) (#("with_inn" 0 8 (fontified t)) . -304) (undo-tree-id571 . -8) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -2) (undo-tree-id582 . -2) (undo-tree-id583 . -2) (undo-tree-id584 . -3) (undo-tree-id585 . -3) (undo-tree-id586 . -4) (undo-tree-id587 . -4) (undo-tree-id588 . -4) (undo-tree-id589 . -4) (undo-tree-id590 . -4) (undo-tree-id591 . -4) (undo-tree-id592 . -4) (undo-tree-id593 . -4) (undo-tree-id594 . -4) (undo-tree-id595 . -5) (undo-tree-id596 . -5) (undo-tree-id597 . -5) (undo-tree-id598 . -6) (undo-tree-id599 . -6) (undo-tree-id600 . -6) (undo-tree-id601 . -7) (undo-tree-id602 . -7) (undo-tree-id603 . -8) (undo-tree-id604 . -8) (undo-tree-id605 . -8) (undo-tree-id606 . -8) 312) nil (26049 48852 597580 954000) 0 nil])
([nil nil ((321 . 324) (#("size" 0 4 (fontified nil)) . 321) (undo-tree-id570 . -4) (320 . 321)) nil (26049 48852 597556 984000) 0 nil])
([nil nil ((320 . 325) (#("wini" 0 4 (fontified nil)) . 320) (undo-tree-id554 . -4) (320 . 324) (#("winit" 0 5 (fontified nil)) . -320) (undo-tree-id555 . -5) (320 . 325) (#("wini" 0 4 (fontified t)) . -320) (undo-tree-id556 . -4) (undo-tree-id557 . -4) (undo-tree-id558 . -4) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -2) (undo-tree-id564 . -2) (undo-tree-id565 . -2) (undo-tree-id566 . -3) (undo-tree-id567 . -3) (undo-tree-id568 . -4) (undo-tree-id569 . -4) 324) nil (26049 48852 597554 578000) 0 nil])
([nil nil ((325 . 328)) nil (26049 48852 597506 912000) 0 nil])
([nil nil ((327 . 330) (#("d" 0 1 (fontified nil)) . 327) (undo-tree-id546 . -1) (327 . 328) (#("dpi" 0 3 (fontified nil)) . -327) (undo-tree-id547 . -3) (327 . 330) (#("d" 0 1 (fontified t)) . -327) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) 328) nil (26049 48852 597505 814000) 0 nil])
([nil nil ((330 . 332)) nil (26049 48852 597500 61000) 0 nil])
([nil nil ((332 . 343) (#("LogicalSize" 0 11 (fontified nil)) . -332) (undo-tree-id545 . -11) (332 . 343)) nil (26049 48852 597499 404000) 0 nil])
([nil nil ((343 . 346)) nil (26049 48852 597498 132000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 349 361 nil nil nil t #s(yas--field 2 363 369 nil nil nil nil #s(yas--exit 370 nil))) #s(yas--field 2 363 369 nil nil nil nil #s(yas--exit 370 nil))) #s(yas--exit 370 nil) 5 nil #s(yas--field 1 349 361 nil nil nil t #s(yas--field 2 363 369 nil nil nil nil #s(yas--exit 370 nil))) #s(yas--field 1 320 377 nil nil nil t #s(yas--exit 378 nil)) nil)) (345 . 363) (#("new(${1:width}, ${2:height})$0" 0 30 (fontified nil)) . 345) (undo-tree-id534 . -30) (345 . 375) (#("n" 0 1 (fontified nil)) . 345) (undo-tree-id535 . -1) (345 . 346) (#("new(…)" 0 6 (fontified nil)) . -345) (undo-tree-id536 . -6) (345 . 351) (#("n" 0 1 (fontified t)) . -345) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) 346) nil (26049 48852 597496 629000) 0 nil])
([nil nil ((#("width" 0 5 (fontified nil)) . 350) (undo-tree-id533 . -5) (349 . 350)) nil (26049 48852 597488 831000) 0 nil])
([nil nil ((349 . 361) (#("W" 0 1 (fontified nil)) . 349) (undo-tree-id522 . -1) (349 . 350) (#("WINDOW_WIDTH" 0 12 (fontified nil)) . -349) (undo-tree-id523 . -12) (349 . 361) (#("W" 0 1 (face font-lock-type-face fontified t)) . -349) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) 350) nil (26049 48852 597486 718000) 0 nil])
([nil nil ((apply yas--snippet-revive 345 370 #s(yas--snippet nil (#s(yas--field 1 349 361 nil nil nil t #s(yas--field 2 363 369 nil nil nil nil #s(yas--exit 370 nil))) #s(yas--field 2 363 369 nil nil nil nil #s(yas--exit 370 nil))) #s(yas--exit 370 nil) 5 nil #s(yas--field 1 349 361 nil nil nil t #s(yas--field 2 363 369 nil nil nil nil #s(yas--exit 370 nil))) #s(yas--field 1 320 377 nil nil nil t #s(yas--exit 378 nil)) nil))) nil (26049 48852 597479 627000) 0 nil])
([nil nil ((#("height" 0 6 (fontified t)) . -363) (undo-tree-id517 . -6) (undo-tree-id518 . -6) (undo-tree-id519 . -6) (undo-tree-id520 . -6) (undo-tree-id521 . -6) 369) nil (26049 48852 597478 806000) 0 nil])
([nil nil ((363 . 364)) nil (26049 48852 597475 469000) 0 nil])
([nil nil ((363 . 376) (#("H" 0 1 (fontified nil)) . 363) (363 . 364) (#("WINDOW_HEIGHT" 0 13 (fontified nil)) . -363) (363 . 376) (#("H" 0 1 (face font-lock-type-face fontified t)) . -363) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) 364) nil (26049 48852 597474 368000) 0 nil])
([nil nil ((apply yas--snippet-revive 304 378 #s(yas--snippet nil (#s(yas--field 1 320 377 nil nil nil t #s(yas--exit 378 nil))) #s(yas--exit 378 nil) 4 nil #s(yas--field 1 320 377 nil nil nil t #s(yas--exit 378 nil)) nil nil))) nil (26049 48852 597469 948000) 0 nil])
([nil nil ((378 . 380)) nil (26049 48852 597469 317000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 385 398 nil nil nil nil #s(yas--exit 399 nil))) #s(yas--exit 399 nil) 6 nil #s(yas--field 1 385 398 nil nil nil nil #s(yas--exit 399 nil)) nil nil)) (379 . 399) (#("build(${1:window_target})$0" 0 27 (fontified nil)) . 379) (379 . 406) (#("b" 0 1 (fontified nil)) . 379) (379 . 380) (#("build(…)" 0 8 (fontified nil)) . -379) (379 . 387) (#("b" 0 1 (fontified t)) . -379) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) 380) nil (26049 48852 597468 77000) 0 nil])
([nil nil ((apply yas--snippet-revive 379 399 #s(yas--snippet nil (#s(yas--field 1 385 398 nil nil nil nil #s(yas--exit 399 nil))) #s(yas--exit 399 nil) 6 nil #s(yas--field 1 385 398 nil nil nil nil #s(yas--exit 399 nil)) nil nil))) nil (26049 48852 597463 144000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1) (undo-tree-id504 . -1) (278 . 291) (303 . 316) (378 . 391) (#("

    " 0 1 (fontified t) 1 6 (fontified t)) . 405) 267) nil (26049 48852 597461 815000) 0 nil])
([nil nil ((222 . 223)) nil (26049 48852 597459 988000) 0 nil])
([nil nil ((223 . 234)) nil (26049 48852 597459 349000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -233) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) 234) nil (26049 48852 597458 358000) 0 nil])
([nil nil ((233 . 235)) nil (26049 48852 597450 990000) 0 nil])
([nil nil ((234 . 239) (#("w" 0 1 (fontified nil)) . 234) (234 . 235) (#("winit" 0 5 (fontified nil)) . -234) (234 . 239) (#("w" 0 1 (fontified t)) . -234) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) 235) nil (26049 48852 597449 848000) 0 nil])
([nil nil ((239 . 242)) nil (26049 48852 597444 779000) 0 nil])
([nil nil ((241 . 251) (#("e" 0 1 (fontified nil)) . 241) (241 . 242) (#("event_loop" 0 10 (fontified nil)) . -241) (241 . 251) (#("e" 0 1 (fontified t)) . -241) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) 242) nil (26049 48852 597443 595000) 0 nil])
([nil nil ((251 . 254)) nil (26049 48852 597439 270000) 0 nil])
([nil nil ((apply yas--snippet-revive 253 264 #s(yas--snippet nil nil #s(yas--exit 263 nil) 7 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 263 nil) 7 nil nil nil nil)) (253 . 264) (#("EventLoop<$0>" 0 13 (fontified nil)) . 253) (253 . 266) (#("E" 0 1 (fontified nil)) . 253) (253 . 254) (#("EventLoop<…>" 0 12 (fontified nil)) . -253) (253 . 265) (#("E" 0 1 (face font-lock-type-face fontified t)) . -253) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) 254) nil (26049 48852 597437 303000) 0 nil])
([nil nil ((263 . 265)) nil (26049 48852 597425 453000) 0 nil])
([nil nil ((234 . 235)) nil (26049 48852 597420 844000) 0 nil])
([nil nil ((#("target" 0 6 (fontified t)) . -475) (undo-tree-id682 . -6) 481 (t 26049 48852 608794 481000)) nil (26049 48868 344125 359000) 0 nil])
([nil nil ((#("window_" 0 7 (fontified t)) . -468) (undo-tree-id672 . -7) (undo-tree-id673 . -7) (undo-tree-id674 . -7) (undo-tree-id675 . -7) (undo-tree-id676 . -7) (undo-tree-id677 . -7) (undo-tree-id678 . -7) (undo-tree-id679 . -7) (undo-tree-id680 . -7) (undo-tree-id681 . -7) 475) nil (26049 48868 344123 410000) 0 nil])
([nil nil ((468 . 469)) nil (26049 48868 344116 589000) 0 nil])
([nil nil ((468 . 478) (#("e" 0 1 (fontified nil)) . 468) (468 . 469) (#("event_loop" 0 10 (fontified nil)) . -468) (468 . 478) (#("e" 0 1 (fontified t)) . -468) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) 469) nil (26049 48868 344115 298000) 0 nil])
([nil nil ((479 . 480)) nil (26049 48868 344110 371000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -479) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) 480) nil (26049 48868 344109 295000) 0 nil])
([nil nil ((479 . 481)) nil (26049 48868 344102 291000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -480) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) 481) nil (26049 48868 344101 348000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -479) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) 480) nil (26049 48868 344096 52000) 0 nil])
([nil nil ((479 . 480)) nil (26049 48868 344084 766000) 0 nil])
([nil nil ((#(">" 0 1 (syntax-table (1) fontified t)) . -479) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) 480) nil (26049 48868 344082 442000) 0 nil])
([nil nil ((479 . 481)) nil (26049 48868 344065 417000) 0 nil])
([nil nil ((1 . 3) (t 26049 48868 355462 96000)) nil (26049 48903 992341 171000) 0 nil])
([nil nil ((1 . 8)) nil (26049 48903 992340 491000) 0 nil])
([nil nil ((5 . 11) (#("any" 0 3 (fontified nil)) . 5) (5 . 8) (#("anyhow" 0 6 (fontified nil)) . -5) (5 . 11) (#("any" 0 3 (face font-lock-constant-face fontified t)) . -5) (undo-tree-id718 . -3) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -2) (undo-tree-id723 . -2) (undo-tree-id724 . -2) (undo-tree-id725 . -2) (undo-tree-id726 . -2) (undo-tree-id727 . -3) (undo-tree-id728 . -3) (undo-tree-id729 . -3) (undo-tree-id730 . -3) (undo-tree-id731 . -3) 8) nil (26049 48903 992338 862000) 0 nil])
([nil nil ((11 . 15)) nil (26049 48903 992329 288000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -12) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -13) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -14) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) 15) nil (26049 48903 992326 541000) 0 nil])
([nil nil ((12 . 18)) nil (26049 48903 992297 697000) 0 nil])
([nil nil ((18 . 19)) nil (26049 48903 992293 635000) 0 nil])
([nil nil ((#("Self" 0 4 (face font-lock-type-face fontified t)) . -292) (undo-tree-id772 . -4) (undo-tree-id773 . -4) (undo-tree-id774 . -4) (undo-tree-id775 . -4) (undo-tree-id776 . -4) (undo-tree-id777 . -4) (undo-tree-id778 . -4) (undo-tree-id779 . -4) (undo-tree-id780 . -4) (undo-tree-id781 . -4) 296 (t 26049 48904 5464 268000)) nil (26049 48946 709846 154000) 0 nil])
([nil nil ((292 . 298)) nil (26049 48946 709838 829000) 0 nil])
([nil nil ((#("Result" 0 6 (face font-lock-type-face fontified t)) . -292) (undo-tree-id753 . -6) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -2) (undo-tree-id759 . -2) (undo-tree-id760 . -2) (undo-tree-id761 . -2) (undo-tree-id762 . -3) (undo-tree-id763 . -3) (undo-tree-id764 . -4) (undo-tree-id765 . -4) (undo-tree-id766 . -5) (undo-tree-id767 . -5) (undo-tree-id768 . -6) (undo-tree-id769 . -6) (undo-tree-id770 . -6) (undo-tree-id771 . -6) 298) nil (26049 48946 709837 113000) 0 nil])
([nil nil ((292 . 293)) nil (26049 48946 709823 264000) 0 nil])
([nil nil ((apply yas--snippet-revive 292 300 #s(yas--snippet nil nil #s(yas--exit 299 nil) 8 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 299 nil) 8 nil nil nil nil)) (292 . 300) (#("Result<$0>" 0 10 (fontified nil)) . 292) (292 . 302) (#("R" 0 1 (fontified nil)) . 292) (292 . 293) (#("Result<…>" 0 9 (fontified nil)) . -292) (292 . 301) (#("R" 0 1 (face font-lock-type-face fontified t)) . -292) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) 293) nil (26049 48946 709821 735000) 0 nil])
([nil nil ((299 . 300)) nil (26049 48946 709815 240000) 0 nil])
([nil nil ((299 . 303) (#("S" 0 1 (fontified nil)) . 299) (299 . 300) (#("Self" 0 4 (fontified nil)) . -299) (299 . 303) (#("S" 0 1 (face font-lock-type-face fontified t)) . -299) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) 300) nil (26049 48946 709813 553000) 0 nil])
([nil nil ((303 . 306)) nil (26049 48946 709805 877000) 0 nil])
([nil nil ((305 . 310) (#("E" 0 1 (fontified nil)) . 305) (305 . 306) (#("Error" 0 5 (fontified nil)) . -305) (305 . 310) (#("E" 0 1 (face font-lock-type-face fontified t)) . -305) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) 306) nil (26049 48946 709800 643000) 0 nil])
([nil nil ((518 . 526) (#("        " 0 8 (fontified nil)) . 517) (undo-tree-id914 . -8) (undo-tree-id915 . -8) (undo-tree-id916 . -8) (undo-tree-id917 . -8) (516 . 526) (t 26049 48946 752133 538000)) nil (26049 48980 403278 407000) 0 nil])
([nil nil ((526 . 527)) nil (26049 48980 403274 359000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 529 553 nil nil nil t #s(yas--exit 554 nil))) #s(yas--exit 554 nil) 9 nil #s(yas--field 1 529 553 nil nil nil t #s(yas--exit 554 nil)) nil nil)) (526 . 532) (#("Ok(${1:()})$0" 0 13 (fontified nil)) . 526) (526 . 539) (#("O" 0 1 (fontified nil)) . 526) (526 . 527) (#("Ok(…)" 0 5 (fontified nil)) . -526) (526 . 531) (#("O" 0 1 (face font-lock-type-face fontified t)) . -526) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) 527) nil (26049 48980 403273 13000) 0 nil])
([nil nil ((#("()" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 530) (undo-tree-id908 . -2) (529 . 530)) nil (26049 48980 403267 408000) 0 nil])
([nil nil ((#("S" 0 1 (face font-lock-type-face fontified t)) . -529) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) 530) nil (26049 48980 403265 548000) 0 nil])
([nil nil ((529 . 530)) nil (26049 48980 403260 426000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 549 551 nil nil nil nil #s(yas--exit 553 nil))) #s(yas--exit 553 nil) 10 nil #s(yas--field 1 549 551 nil nil nil nil #s(yas--exit 553 nil)) #s(yas--field 1 529 553 nil nil nil t #s(yas--exit 554 nil)) nil)) (529 . 553) (#("VulkanApp { window: ${1:()} }$0" 0 31 (fontified nil)) . 529) (undo-tree-id891 . -31) (529 . 560) (#("V" 0 1 (fontified nil)) . 529) (undo-tree-id892 . -1) (529 . 530) (#("VulkanApp {…}" 0 13 (fontified nil)) . -529) (undo-tree-id893 . -13) (529 . 542) (#("V" 0 1 (face font-lock-type-face fontified t)) . -529) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) 530) nil (26049 48980 403258 632000) 0 nil])
([nil nil ((apply yas--snippet-revive 526 554 #s(yas--snippet nil (#s(yas--field 1 529 553 nil nil nil t #s(yas--exit 554 nil))) #s(yas--exit 554 nil) 9 nil #s(yas--field 1 529 553 nil nil nil t #s(yas--exit 554 nil)) nil nil)) (apply yas--snippet-revive 529 553 #s(yas--snippet nil (#s(yas--field 1 549 551 nil nil nil nil #s(yas--exit 553 nil))) #s(yas--exit 553 nil) 10 nil #s(yas--field 1 549 551 nil nil nil nil #s(yas--exit 553 nil)) #s(yas--field 1 529 553 nil nil nil t #s(yas--exit 554 nil)) nil))) nil (26049 48980 402619 639000) 0 nil])
([nil nil ((322 . 325)) nil (26049 48980 402618 940000) 0 nil])
([nil nil ((#("k" 0 1 (face font-lock-constant-face fontified t)) . -322) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (#("l" 0 1 (face font-lock-constant-face fontified t)) . -323) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (#("e" 0 1 (face font-lock-constant-face fontified t)) . -324) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) 325) nil (26049 48980 402617 295000) 0 nil])
([nil nil ((322 . 326)) nil (26049 48980 402602 922000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -322) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (#("l" 0 1 (face font-lock-constant-face fontified t)) . -323) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (#(";" 0 1 (fontified t)) . -324) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (#("e" 0 1 (face font-lock-constant-face fontified t)) . -325) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) 326) nil (26049 48980 402600 630000) 0 nil])
([nil nil ((322 . 335)) nil (26049 48980 402578 228000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -560) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (#(" " 0 1 (fontified t)) . -561) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -562) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -563) (undo-tree-id832 . -1) (undo-tree-id833 . -1) 564) nil (26049 48980 402572 836000) 0 nil])
([nil nil ((571 . 575) (#("    " 0 4 (fontified nil)) . 570) (undo-tree-id954 . -4) (undo-tree-id955 . -4) (undo-tree-id956 . -4) (undo-tree-id957 . -4) (569 . 575) (t 26049 48980 415468 918000)) nil (26049 49033 296357 438000) 0 nil])
([nil nil ((575 . 583)) nil (26049 49033 296353 588000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -582) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) 583) nil (26049 49033 296352 427000) 0 nil])
([nil nil ((582 . 587)) nil (26049 49033 296345 185000) 0 nil])
([nil nil ((587 . 589)) nil (26049 49033 296344 642000) 0 nil])
([nil nil ((588 . 590)) nil (26049 49033 296344 83000) 0 nil])
([nil nil ((588 . 633) (#("ev" 0 2 (fontified nil)) . 588) (588 . 590) (#("event_loop: &winit::event_loop::EventLoop<()>" 0 45 (fontified nil)) . -588) (588 . 633) (#("ev" 0 2 (fontified t)) . -588) (undo-tree-id931 . -2) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -2) (undo-tree-id936 . -2) (undo-tree-id937 . -2) (undo-tree-id938 . -2) (undo-tree-id939 . -2) (undo-tree-id940 . -2) (undo-tree-id941 . -2) (undo-tree-id942 . -2) (undo-tree-id943 . -2) 590) nil (26049 49033 296342 524000) 0 nil])
([nil nil ((634 . 637)) nil (26049 49033 296332 65000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -635) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (#("-" 0 1 (fontified t)) . -636) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) 637) nil (26049 49033 296330 535000) 0 nil])
([nil nil ((635 . 637)) nil (26049 49033 296322 804000) 0 nil])
([nil nil ((638 . 642) (#("        " 0 8 (fontified nil)) . 637) (637 . 645) (#("    " 0 4 (fontified nil)) . 637) (undo-tree-id918 . -4) (undo-tree-id919 . -4) (undo-tree-id920 . -4) (undo-tree-id921 . -4) (636 . 642)) nil (26049 49033 296320 560000) 0 nil])
([nil nil ((637 . 645)) nil (26049 49033 296307 697000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2255 . 2256) (nil fontified nil 645 . 2256) (645 . 2256) (t 26049 49033 298805 474000)) nil (26049 49093 580838 730000) 0 nil])
([nil nil ((2541 . 2549) (2527 . 2539) (#("    " 0 4 (fontified t)) . 2527) (2503 . 2519) (#("        " 0 8 (fontified t)) . 2503) (2484 . 2500) (#("        " 0 8 (fontified t)) . 2484) (2399 . 2419) (#("            " 0 12 (fontified t)) . 2399) (2306 . 2326) (#("            " 0 12 (fontified t)) . 2306) (2205 . 2225) (#("            " 0 12 (fontified t)) . 2205) (2182 . 2202) (#("            " 0 12 (fontified t)) . 2182) (undo-tree-id958 . -9) (2135 . 2155) (#("            " 0 12 (fontified t)) . 2135) (2112 . 2128) (#("        " 0 8 (fontified t)) . 2112) (undo-tree-id959 . -8) (undo-tree-id960 . -8) (undo-tree-id961 . -8) (undo-tree-id962 . -8) (undo-tree-id963 . -8) (undo-tree-id964 . -8) (undo-tree-id965 . -8) (2089 . 2109) (#("            " 0 12 (fontified t)) . 2089) (2032 . 2052) (#("            " 0 12 (fontified t)) . 2032) (1995 . 2011) (#("        " 0 8 (fontified t)) . 1995) (1976 . 1992) (#("        " 0 8 (fontified t)) . 1976) (1931 . 1951) (#("            " 0 12 (fontified t)) . 1931) (1883 . 1903) (#("            " 0 12 (fontified t)) . 1883) (1780 . 1800) (#("            " 0 12 (fontified t)) . 1780) (1682 . 1702) (#("            " 0 12 (fontified t)) . 1682) (1659 . 1679) (#("            " 0 12 (fontified t)) . 1659) (1605 . 1625) (#("            " 0 12 (fontified t)) . 1605) (1556 . 1576) (#("            " 0 12 (fontified t)) . 1556) (1516 . 1532) (#("        " 0 8 (fontified t)) . 1516) (1497 . 1513) (#("        " 0 8 (fontified t)) . 1497) (1464 . 1484) (#("            " 0 12 (fontified t)) . 1464) (1392 . 1412) (#("            " 0 12 (fontified t)) . 1392) (1369 . 1385) (#("        " 0 8 (fontified t)) . 1369) (1346 . 1366) (#("            " 0 12 (fontified t)) . 1346) (1290 . 1310) (#("            " 0 12 (fontified t)) . 1290) (1253 . 1269) (#("        " 0 8 (fontified t)) . 1253) (1227 . 1239) (#("    " 0 4 (fontified t)) . 1227) (1183 . 1191) (1126 . 1134) (1041 . 1049) (953 . 961) (863 . 871) (806 . 814) (722 . 730) 2264) nil (26049 49093 580830 659000) 0 nil])
([nil nil ((#("// ControlFlow::Wait pauses the event loop if no events are available to process." 0 3 (face font-lock-comment-delimiter-face fontified t) 3 81 (face font-lock-comment-face fontified t)) . 871) (undo-tree-id973 . -81) (t 26049 49093 592142 467000)) nil (26049 49103 178478 228000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 871) (undo-tree-id972 . -1)) nil (26049 49103 178476 603000) 0 nil])
([nil nil ((#("        // This is ideal for non-game applications that only update in response to user" 0 8 (fontified t) 8 11 (face font-lock-comment-delimiter-face fontified t) 11 87 (face font-lock-comment-face fontified t)) . 871) (undo-tree-id971 . -87)) nil (26049 49103 178474 994000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 871) (undo-tree-id970 . -1)) nil (26049 49103 178473 416000) 0 nil])
([nil nil ((#("        // input, and uses significantly less power/CPU time than ControlFlow::Poll." 0 8 (fontified t) 8 11 (face font-lock-comment-delimiter-face fontified t) 11 84 (face font-lock-comment-face fontified t)) . 871) (undo-tree-id969 . -84)) nil (26049 49103 178471 935000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 871) (undo-tree-id968 . -1)) nil (26049 49103 178470 318000) 0 nil])
([nil nil ((#("        event_loop.set_control_flow(ControlFlow::Wait);" 0 8 (fontified t) 8 35 (fontified t) 35 36 (face (rainbow-delimiters-depth-3-face) fontified t) 36 47 (face font-lock-type-face fontified t) 47 49 (fontified t) 49 53 (face font-lock-type-face fontified t) 53 54 (face (rainbow-delimiters-depth-3-face) fontified t) 54 55 (fontified t)) . 871) (undo-tree-id967 . -55)) nil (26049 49103 178467 906000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 871) (undo-tree-id966 . -1)) nil (26049 49103 178461 984000) 0 nil])
([nil nil ((842 . 843) (t 26049 49103 218809 729000)) nil (26049 49119 631952 670000) 0 nil])
([nil nil ((842 . 843)) nil (26049 49119 631952 12000) 0 nil])
([nil nil ((842 . 847) (#("w" 0 1 (fontified nil)) . 842) (842 . 843) (#("winit" 0 5 (fontified nil)) . -842) (842 . 847) (#("w" 0 1 (fontified t)) . -842) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) 843) nil (26049 49119 631950 872000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -847) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) 848) nil (26049 49119 631945 743000) 0 nil])
([nil nil ((847 . 850)) nil (26049 49119 631942 13000) 0 nil])
([nil nil ((849 . 850)) nil (26049 49119 631941 395000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t)) . -849) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) 850) nil (26049 49119 631940 471000) 0 nil])
([nil nil ((849 . 850)) nil (26049 49119 631936 543000) 0 nil])
([nil nil ((849 . 859) (#("e" 0 1 (fontified nil)) . 849) (849 . 850) (#("event_loop" 0 10 (fontified nil)) . -849) (849 . 859) (#("e" 0 1 (fontified t)) . -849) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) 850) nil (26049 49119 631935 80000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -859) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) 860) nil (26049 49119 631928 128000) 0 nil])
([nil nil ((859 . 861)) nil (26049 49119 631910 532000) 0 nil])
([nil nil ((19 . 20) (t 26049 49119 645477 388000)) nil (26049 49132 251022 626000) 0 nil])
([nil nil ((nil rear-nonsticky nil 136 . 137) (nil fontified nil 20 . 137) (20 . 137)) nil (26049 49132 251018 238000) 0 nil])
([nil nil ((#("loop::" 0 4 (face font-lock-constant-face fontified t) 4 6 (fontified t)) . -973) (undo-tree-id1032 . -6) (undo-tree-id1033 . -6) (undo-tree-id1034 . -6) (undo-tree-id1035 . -6) (undo-tree-id1036 . -6) (undo-tree-id1037 . -6) (undo-tree-id1038 . -6) (undo-tree-id1039 . -6) (undo-tree-id1040 . -6) (undo-tree-id1041 . -6) 979 (t 26049 49132 262144 825000)) nil (26049 49137 181606 881000) 0 nil])
([nil nil ((#("event_" 0 6 (fontified t)) . -967) (undo-tree-id1020 . -6) (undo-tree-id1021 . -6) (undo-tree-id1022 . -6) (undo-tree-id1023 . -6) (undo-tree-id1024 . -6) (undo-tree-id1025 . -6) (undo-tree-id1026 . -6) (undo-tree-id1027 . -6) (undo-tree-id1028 . -6) (undo-tree-id1029 . -6) (undo-tree-id1030 . -6) (undo-tree-id1031 . -6) 973) nil (26049 49137 181598 839000) 0 nil])
([nil nil ((#("winit::" 0 5 (face font-lock-constant-face fontified t) 5 7 (fontified t)) . -960) (undo-tree-id1006 . -7) (undo-tree-id1007 . -7) (undo-tree-id1008 . -7) (undo-tree-id1009 . -7) (undo-tree-id1010 . -7) (undo-tree-id1011 . -7) (undo-tree-id1012 . -7) (undo-tree-id1013 . -7) (undo-tree-id1014 . -7) (undo-tree-id1015 . -7) (undo-tree-id1016 . -7) (undo-tree-id1017 . -7) (undo-tree-id1018 . -7) (undo-tree-id1019 . -7) 967) nil (26049 49137 181586 854000) 0 nil])
([nil nil ((#("loop::" 0 4 (face font-lock-constant-face fontified t) 4 6 (fontified t)) . -386) (undo-tree-id1078 . -6) (undo-tree-id1079 . -6) (undo-tree-id1080 . -6) (undo-tree-id1081 . -6) (undo-tree-id1082 . -6) (undo-tree-id1083 . -6) (undo-tree-id1084 . -6) (undo-tree-id1085 . -6) (undo-tree-id1086 . -6) (undo-tree-id1087 . -6) (undo-tree-id1088 . -6) (undo-tree-id1089 . -6) (undo-tree-id1090 . -6) (undo-tree-id1091 . -6) (undo-tree-id1092 . -6) 392 (t 26049 49137 225478 462000)) nil (26049 49146 926758 860000) 0 nil])
([nil nil ((#("event_" 0 6 (fontified t)) . -380) (undo-tree-id1061 . -6) (undo-tree-id1062 . -6) (undo-tree-id1063 . -6) (undo-tree-id1064 . -6) (undo-tree-id1065 . -6) (undo-tree-id1066 . -6) (undo-tree-id1067 . -6) (undo-tree-id1068 . -6) (undo-tree-id1069 . -6) (undo-tree-id1070 . -6) (undo-tree-id1071 . -6) (undo-tree-id1072 . -6) (undo-tree-id1073 . -6) (undo-tree-id1074 . -6) (undo-tree-id1075 . -6) (undo-tree-id1076 . -6) (undo-tree-id1077 . -6) 386) nil (26049 49146 926746 407000) 0 nil])
([nil nil ((#("winit::" 0 5 (face font-lock-constant-face fontified t) 5 7 (fontified t)) . -373) (undo-tree-id1042 . -7) (undo-tree-id1043 . -7) (undo-tree-id1044 . -7) (undo-tree-id1045 . -7) (undo-tree-id1046 . -7) (undo-tree-id1047 . -7) (undo-tree-id1048 . -7) (undo-tree-id1049 . -7) (undo-tree-id1050 . -7) (undo-tree-id1051 . -7) (undo-tree-id1052 . -7) (undo-tree-id1053 . -7) (undo-tree-id1054 . -7) (undo-tree-id1055 . -7) (undo-tree-id1056 . -7) (undo-tree-id1057 . -7) (undo-tree-id1058 . -7) (undo-tree-id1059 . -7) (undo-tree-id1060 . -7) 380) nil (26049 49146 926729 289000) 0 nil])
([nil nil ((#("window::" 0 6 (face font-lock-constant-face fontified t) 6 8 (fontified t)) . -441) (undo-tree-id1109 . -8) (undo-tree-id1110 . -8) (undo-tree-id1111 . -8) (undo-tree-id1112 . -8) (undo-tree-id1113 . -8) (undo-tree-id1114 . -8) (undo-tree-id1115 . -8) (undo-tree-id1116 . -8) (undo-tree-id1117 . -8) (undo-tree-id1118 . -8) (undo-tree-id1119 . -8) (undo-tree-id1120 . -8) (undo-tree-id1121 . -8) (undo-tree-id1122 . -8) 449 (t 26049 49146 938812 387000)) nil (26049 49151 722194 327000) 0 nil])
([nil nil ((#("winit::" 0 5 (face font-lock-constant-face fontified t) 5 7 (fontified t)) . -434) (undo-tree-id1093 . -7) (undo-tree-id1094 . -7) (undo-tree-id1095 . -7) (undo-tree-id1096 . -7) (undo-tree-id1097 . -7) (undo-tree-id1098 . -7) (undo-tree-id1099 . -7) (undo-tree-id1100 . -7) (undo-tree-id1101 . -7) (undo-tree-id1102 . -7) (undo-tree-id1103 . -7) (undo-tree-id1104 . -7) (undo-tree-id1105 . -7) (undo-tree-id1106 . -7) (undo-tree-id1107 . -7) (undo-tree-id1108 . -7) 441) nil (26049 49151 722181 368000) 0 nil])
([nil nil ((672 . 677) (t 26049 49151 722146 10000)) nil (26049 49184 578190 429000) 0 nil])
([nil nil ((677 . 679)) nil (26049 49186 73671 268000) 0 nil] [nil nil ((672 . 677) (#("&selfevent_loop: &winit::event_loop::EventLoop<()>" 0 1 (face rust-ampersand-face fontified nil) 1 5 (fontified nil) 5 15 (face font-lock-variable-name-face fontified nil) 15 17 (fontified nil) 17 18 (face rust-ampersand-face fontified nil) 18 23 (face font-lock-constant-face fontified nil) 23 25 (fontified nil) 25 35 (face font-lock-constant-face fontified nil) 35 37 (fontified nil) 37 46 (face font-lock-type-face fontified nil) 46 47 (face (rainbow-delimiters-depth-3-face) fontified nil) 47 48 (face (rainbow-delimiters-depth-4-face) fontified nil) 48 49 (face (rainbow-delimiters-depth-4-face) fontified nil) 49 50 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 672) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . 45) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (673 . 677) (#("&self" 0 5 (fontified nil)) . -673) (673 . 678) (#("self" 0 4 (face font-lock-variable-name-face fontified t)) . -673) (undo-tree-id1147 . -4) (undo-tree-id1148 . -1) (undo-tree-id1149 . -2) (undo-tree-id1150 . -2) (undo-tree-id1151 . -3) (undo-tree-id1152 . -3) (undo-tree-id1153 . -4) (undo-tree-id1154 . -4) (undo-tree-id1155 . -4) (undo-tree-id1156 . -4) (undo-tree-id1157 . -4) (undo-tree-id1158 . -4) (undo-tree-id1159 . -4) (undo-tree-id1160 . -4) (undo-tree-id1161 . -4) (undo-tree-id1162 . -4) (undo-tree-id1163 . -4) (undo-tree-id1164 . -4) (undo-tree-id1165 . -4) (undo-tree-id1166 . -4) (undo-tree-id1167 . -4) (undo-tree-id1168 . -4) 677) ((673 . 677) (#("&self" 0 5 (fontified nil)) . 673) (673 . 678) (#("self" 0 4 (fontified nil)) . 673) (672 . 722) (#("&self" 0 1 (face rust-ampersand-face fontified t) 1 5 (face font-lock-keyword-face fontified t)) . 672) (undo-tree-id1169 . -5)) (26049 49184 576826 449000) 0 nil])
([nil nil ((1731 . 1732) (t 26049 49186 85481 416000)) nil (26049 49192 314752 45000) 0 nil])
nil
([nil nil ((1731 . 1735) (#("swindow" 0 1 (fontified nil) 1 7 (fontified nil)) . 1731) (undo-tree-id1181 . 6) (1731 . 1732) (#("self" 0 4 (fontified nil)) . -1731) (1731 . 1735) (#("s" 0 1 (fontified t)) . -1731) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) 1732) nil (26049 49192 314750 619000) 0 nil])
([nil nil ((1735 . 1737)) nil (26049 49192 314744 470000) 0 nil])
([nil nil ((1736 . 1737)) nil (26049 49192 314743 568000) 0 nil])
([nil nil ((1736 . 1742) (#("w" 0 1 (fontified nil)) . 1736) (1736 . 1737) (#("window" 0 6 (fontified nil)) . -1736) (1736 . 1742) (#("w" 0 1 (fontified t)) . -1736) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) 1737) nil (26049 49192 314741 166000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1742) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) 1743) nil (26049 49192 314565 227000) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . -691) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) 692 (t 26049 49192 325481 797000)) nil (26049 49215 351224 472000) 0 nil])
([nil nil ((970 . 978) (t 26049 49215 365483 192000)) nil (26049 49237 224876 735000) 0 nil])
([nil nil ((2367 . 2371) (#("    " 0 4 (fontified nil)) . 2366) (undo-tree-id1216 . -4) (undo-tree-id1217 . -4) (undo-tree-id1218 . -4) (undo-tree-id1219 . -4) (undo-tree-id1220 . -4) (undo-tree-id1221 . -4) (2370 . 2371) (t 26049 49237 238817 850000)) nil (26049 49279 586631 916000) 0 nil])
([nil nil ((2366 . 2370)) nil (26049 49280 143208 326000) 0 nil])
([nil nil ((2370 . 2371)) nil (26049 49314 965308 945000) 0 nil] [nil nil ((#("
" 0 1 (fontified t)) . 2370) (undo-tree-id1214 . 1) (undo-tree-id1215 . -1)) ((2370 . 2371)) (26049 49279 587240 300000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t)) . -2370) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) 2371) nil (26049 49314 965307 928000) 0 nil])
([nil nil ((#("    println!(\"Hello, world!\");" 0 4 (fontified t) 4 12 (face rust-builtin-formatting-macro fontified t) 12 13 (face (rainbow-delimiters-depth-2-face) fontified t) 13 28 (face font-lock-string-face fontified t) 28 29 (face (rainbow-delimiters-depth-2-face) fontified t) 29 30 (fontified t)) . 2370) (undo-tree-id1194 . -30) (undo-tree-id1195 . -30) (undo-tree-id1196 . -30) (undo-tree-id1197 . -30) (undo-tree-id1198 . -30) (undo-tree-id1199 . -30) (undo-tree-id1200 . -30) (undo-tree-id1201 . -30) (undo-tree-id1202 . -30) (undo-tree-id1203 . -30) (undo-tree-id1204 . -30) (undo-tree-id1205 . -30) (undo-tree-id1206 . -30) (undo-tree-id1207 . -30) (undo-tree-id1208 . -30) (undo-tree-id1209 . -30) (undo-tree-id1210 . 30) (undo-tree-id1211 . -4) (undo-tree-id1212 . -4) (undo-tree-id1213 . -30)) ((2370 . 2400)) (26049 49279 586619 96000) 0 nil])
([nil nil ((2370 . 2381)) nil (26049 49314 965301 863000) 0 nil])
nil
([nil nil ((2380 . 2389) (#("V" 0 1 (fontified nil)) . 2380) (2380 . 2381) (#("VulkanApp" 0 9 (fontified nil)) . -2380) (2380 . 2389) (#("V" 0 1 (face font-lock-type-face fontified t)) . -2380) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) 2381) nil (26049 49314 965300 652000) 0 nil])
([nil nil ((2389 . 2391)) nil (26049 49314 965295 987000) 0 nil])
([nil nil ((2391 . 2392)) nil (26049 49314 965295 370000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2403 2413 nil nil nil nil #s(yas--exit 2414 nil))) #s(yas--exit 2414 nil) 11 nil #s(yas--field 1 2403 2413 nil nil nil nil #s(yas--exit 2414 nil)) nil nil)) (2391 . 2414) (#("init_vulkan(${1:event_loop})$0" 0 30 (fontified nil)) . 2391) (2391 . 2421) (#("n" 0 1 (fontified nil)) . 2391) (2391 . 2392) (#("init_vulkan(…)" 0 14 (fontified nil)) . -2391) (2391 . 2405) (#("n" 0 1 (fontified t)) . -2391) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) 2392) nil (26049 49314 965293 956000) 0 nil])
([nil nil ((apply yas--snippet-revive 2391 2414 #s(yas--snippet nil (#s(yas--field 1 2403 2413 nil nil nil nil #s(yas--exit 2414 nil))) #s(yas--exit 2414 nil) 11 nil #s(yas--field 1 2403 2413 nil nil nil nil #s(yas--exit 2414 nil)) nil nil))) nil (26049 49314 965288 175000) 0 nil])
([nil nil ((2365 . 2370)) nil (26049 49314 965287 304000) 0 nil])
([nil nil ((2370 . 2376)) nil (26049 49314 965286 664000) 0 nil])
([nil nil ((#("b" 0 1 (face font-lock-variable-name-face fontified t)) . -2375) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) 2376) nil (26049 49314 965285 694000) 0 nil])
([nil nil ((2375 . 2376)) nil (26049 49314 965280 804000) 0 nil])
([nil nil ((2376 . 2387)) nil (26049 49314 965280 227000) 0 nil])
([nil nil ((2387 . 2388)) nil (26049 49314 965279 202000) 0 nil])
([nil nil ((2388 . 2389)) nil (26049 49314 965278 532000) 0 nil])
([nil nil ((2387 . 2396) (#("Ev" 0 2 (fontified nil)) . 2387) (2387 . 2389) (#("EventLoop" 0 9 (fontified nil)) . -2387) (2387 . 2396) (#("Ev" 0 2 (face font-lock-type-face fontified t)) . -2387) (undo-tree-id1239 . -2) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -2) (undo-tree-id1244 . -2) (undo-tree-id1245 . -2) (undo-tree-id1246 . -2) (undo-tree-id1247 . -2) (undo-tree-id1248 . -2) 2389) nil (26049 49314 965277 32000) 0 nil])
([nil nil ((2396 . 2399)) nil (26049 49314 965268 369000) 0 nil])
([nil nil ((apply yas--snippet-revive 2398 2403 #s(yas--snippet nil nil #s(yas--exit 2403 nil) 12 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2403 nil) 12 nil nil nil nil)) (2398 . 2403) (#("new()$0" 0 7 (fontified nil)) . 2398) (2398 . 2405) (#("n" 0 1 (fontified nil)) . 2398) (2398 . 2399) (#("new()" 0 5 (fontified nil)) . -2398) (2398 . 2403) (#("n" 0 1 (fontified t)) . -2398) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) 2399) nil (26049 49314 965266 879000) 0 nil])
([nil nil ((2403 . 2405)) nil (26049 49314 965260 677000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -2404) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) 2405) nil (26049 49314 965259 554000) 0 nil])
([nil nil ((2404 . 2405)) nil (26049 49314 965254 127000) 0 nil])
([nil nil ((apply yas--snippet-revive 2404 2412 #s(yas--snippet nil nil #s(yas--exit 2412 nil) 13 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2412 nil) 13 nil nil nil nil)) (2404 . 2412) (#("unwrap()$0" 0 10 (fontified nil)) . 2404) (2404 . 2414) (#("u" 0 1 (fontified nil)) . 2404) (2404 . 2405) (#("unwrap()" 0 8 (fontified nil)) . -2404) (2404 . 2412) (#("u" 0 1 (fontified t)) . -2404) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) 2405) nil (26049 49314 965251 321000) 0 nil])
([nil nil ((2412 . 2413)) nil (26049 49314 965237 168000) 0 nil])
([nil nil ((2462 . 2463) (t 26049 49314 978822 560000)) nil (26049 49321 46821 930000) 0 nil])
([nil nil ((#(">" 0 1 (syntax-table (1) fontified t)) . -2462) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) 2463) nil (26049 49321 46820 658000) 0 nil])
([nil nil ((2462 . 2464)) nil (26049 49321 46814 378000) 0 nil])
([nil nil ((apply yas--snippet-revive 2463 2471 #s(yas--snippet nil nil #s(yas--exit 2471 nil) 14 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2471 nil) 14 nil nil nil nil)) (2463 . 2471) (#("unwrap()$0" 0 10 (fontified nil)) . 2463) (2463 . 2473) (#("u" 0 1 (fontified nil)) . 2463) (2463 . 2464) (#("unwrap()" 0 8 (fontified nil)) . -2463) (2463 . 2471) (#("u" 0 1 (fontified t)) . -2463) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) 2464) nil (26049 49321 46811 592000) 0 nil])
([nil nil ((2471 . 2472)) nil (26049 49321 46796 544000) 0 nil])
([nil nil ((2451 . 2452) (t 26049 49321 58822 928000)) nil (26049 49325 509082 771000) 0 nil])
([nil nil ((2473 . 2478) (t 26049 49325 522156 529000)) nil (26049 49334 482454 630000) 0 nil])
([nil nil ((2478 . 2479)) nil (26049 49334 482453 876000) 0 nil])
([nil nil ((2478 . 2481) (#("a" 0 1 (fontified nil)) . 2478) (2478 . 2479) (#("app" 0 3 (fontified nil)) . -2478) (2478 . 2481) (#("a" 0 1 (fontified t)) . -2478) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) 2479) nil (26049 49334 482452 407000) 0 nil])
([nil nil ((2481 . 2482)) nil (26049 49334 482441 998000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2492 2502 nil nil nil nil #s(yas--exit 2503 nil))) #s(yas--exit 2503 nil) 15 nil #s(yas--field 1 2492 2502 nil nil nil nil #s(yas--exit 2503 nil)) nil nil)) (2482 . 2503) (#("main_loop(${1:event_loop})$0" 0 28 (fontified nil)) . 2482) (2482 . 2510) (#("main_loop(…)" 0 12 (fontified nil)) . -2482) (2482 . 2494)) nil (26049 49334 482440 290000) 0 nil])
([nil nil ((apply yas--snippet-revive 2482 2503 #s(yas--snippet nil (#s(yas--field 1 2492 2502 nil nil nil nil #s(yas--exit 2503 nil))) #s(yas--exit 2503 nil) 15 nil #s(yas--field 1 2492 2502 nil nil nil nil #s(yas--exit 2503 nil)) nil nil))) nil (26049 49334 482438 127000) 0 nil])
([nil nil ((2503 . 2504)) nil (26049 49334 482433 776000) 0 nil])
([nil nil ((2509 . 2510) (t 26049 49334 492157 73000)) nil (26049 49343 853694 211000) 0 nil])
([nil nil ((#("println!(\"Hello, world!\");" 0 8 (face rust-builtin-formatting-macro fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t) 9 24 (face font-lock-string-face fontified t) 24 25 (face (rainbow-delimiters-depth-2-face) fontified t) 25 26 (fontified t)) . 2510) (undo-tree-id1292 . -26) (undo-tree-id1293 . -26) (undo-tree-id1294 . -26) (undo-tree-id1295 . -26) (undo-tree-id1296 . -26) (undo-tree-id1297 . -26) (undo-tree-id1298 . -26)) nil (26049 49343 853692 118000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2510) (undo-tree-id1291 . -1)) nil (26049 49343 853681 887000) 0 nil])
([nil nil ((342 . 346) (#("    " 0 4 (fontified nil)) . 341) (undo-tree-id1699 . -4) (undo-tree-id1700 . -4) (undo-tree-id1701 . -4) (undo-tree-id1702 . -4) (340 . 346) (t 26049 49343 858824 309000)) nil (26049 49600 760548 91000) 0 nil])
([nil nil ((341 . 345)) nil (26049 49600 760544 876000) 0 nil])
([nil nil ((345 . 354)) nil (26049 49600 760544 251000) 0 nil])
([nil nil ((354 . 358)) nil (26049 49600 760543 725000) 0 nil])
([nil nil ((357 . 361) (#("S" 0 1 (fontified nil)) . 357) (357 . 358) (#("Self" 0 4 (fontified nil)) . -357) (357 . 361) (#("S" 0 1 (face font-lock-type-face fontified t)) . -357) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) 358) nil (26049 49600 760542 555000) 0 nil])
([nil nil ((361 . 364)) nil (26049 49600 760537 914000) 0 nil])
([nil nil ((365 . 369) (#("        " 0 8 (fontified nil)) . 364) (364 . 372) (#("    " 0 4 (fontified nil)) . 364) (undo-tree-id1689 . -4) (undo-tree-id1690 . -4) (undo-tree-id1691 . -4) (undo-tree-id1692 . -4) (363 . 369)) nil (26049 49600 760536 975000) 0 nil])
([nil nil ((364 . 372)) nil (26049 49600 760533 444000) 0 nil])
([nil nil ((320 . 325)) nil (26049 49600 760532 982000) 0 nil])
([nil nil ((325 . 334)) nil (26049 49600 760532 345000) 0 nil])
([nil nil ((334 . 335)) nil (26049 49600 760531 829000) 0 nil])
([nil nil ((335 . 336)) nil (26049 49600 760531 251000) 0 nil])
([nil nil ((#("V" 0 1 (face font-lock-type-face fontified t)) . -335) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) 336) nil (26049 49600 760530 397000) 0 nil])
([nil nil ((335 . 336)) nil (26049 49600 760526 768000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -335) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) 336) nil (26049 49600 760525 916000) 0 nil])
([nil nil ((335 . 337)) nil (26049 49600 760521 879000) 0 nil])
([nil nil ((335 . 338) (#("as" 0 2 (fontified nil)) . 335) (335 . 337) (#("ash" 0 3 (fontified nil)) . -335) (335 . 338) (#("as" 0 2 (face font-lock-keyword-face fontified t)) . -335) (undo-tree-id1671 . -2) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (undo-tree-id1675 . -2) (undo-tree-id1676 . -2) (undo-tree-id1677 . -2) (undo-tree-id1678 . -2) 337) nil (26049 49600 760520 517000) 0 nil])
([nil nil ((338 . 341)) nil (26049 49600 760514 240000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -335) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (#("s" 0 1 (face font-lock-keyword-face fontified t)) . -336) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (#("h" 0 1 (fontified t)) . -337) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (#(":" 0 1 (fontified t)) . -338) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (#(":" 0 1 (fontified t)) . -339) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (#("V" 0 1 (face font-lock-type-face fontified t)) . -340) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) 341) nil (26049 49600 760509 864000) 0 nil])
([nil nil ((335 . 338)) nil (26049 49600 760435 833000) 0 nil])
([nil nil ((#("I" 0 1 (face font-lock-type-face fontified t)) . -335) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -336) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -337) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) 338) nil (26049 49600 760433 916000) 0 nil])
([nil nil ((335 . 337)) nil (26049 49600 760414 857000) 0 nil])
([nil nil ((#("B" 0 1 (face font-lock-type-face fontified t)) . -336) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) 337) nil (26049 49600 760414 141000) 0 nil])
([nil nil ((336 . 337)) nil (26049 49600 760411 709000) 0 nil])
([nil nil ((#("K" 0 1 (face font-lock-type-face fontified t)) . -336) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) 337) nil (26049 49600 760410 657000) 0 nil])
([nil nil ((336 . 346)) nil (26049 49600 760403 620000) 0 nil])
([nil nil ((#("Vkinstancew" 0 11 (face font-lock-type-face fontified t)) . -335) (undo-tree-id1475 . -11) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -2) (undo-tree-id1492 . -2) (undo-tree-id1493 . -2) (undo-tree-id1494 . -2) (undo-tree-id1495 . -3) (undo-tree-id1496 . -3) (undo-tree-id1497 . -4) (undo-tree-id1498 . -4) (undo-tree-id1499 . -4) (undo-tree-id1500 . -5) (undo-tree-id1501 . -5) (undo-tree-id1502 . -5) (undo-tree-id1503 . -5) (undo-tree-id1504 . -6) (undo-tree-id1505 . -6) (undo-tree-id1506 . -7) (undo-tree-id1507 . -7) (undo-tree-id1508 . -8) (undo-tree-id1509 . -8) (undo-tree-id1510 . -9) (undo-tree-id1511 . -9) (undo-tree-id1512 . -11) (undo-tree-id1513 . -11) (undo-tree-id1514 . -11) (undo-tree-id1515 . -11) (undo-tree-id1516 . -11) (undo-tree-id1517 . -11) (undo-tree-id1518 . -11) (undo-tree-id1519 . -11) (undo-tree-id1520 . -11) 346) nil (26049 49600 760892 375000) 0 nil])
([nil nil ((335 . 342)) nil (26049 49611 598398 888000) 0 nil] [nil nil ((#("instance: " 0 8 (face font-lock-variable-name-face fontified t) 8 10 (fontified t)) . -325) (undo-tree-id1299 . -10) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -2) (undo-tree-id1303 . -2) (undo-tree-id1304 . -3) (undo-tree-id1305 . -3) (undo-tree-id1306 . -3) (undo-tree-id1307 . -3) (undo-tree-id1308 . -3) (undo-tree-id1309 . -3) (undo-tree-id1310 . -3) (undo-tree-id1311 . -3) (undo-tree-id1312 . -3) (undo-tree-id1313 . -4) (undo-tree-id1314 . -4) (undo-tree-id1315 . -5) (undo-tree-id1316 . -5) (undo-tree-id1317 . -6) (undo-tree-id1318 . -6) (undo-tree-id1319 . -7) (undo-tree-id1320 . -7) (undo-tree-id1321 . -8) (undo-tree-id1322 . -8) (undo-tree-id1323 . -8) (undo-tree-id1324 . -8) (undo-tree-id1325 . -8) (undo-tree-id1326 . -8) (undo-tree-id1327 . -8) (undo-tree-id1328 . -8) (undo-tree-id1329 . -8) (undo-tree-id1330 . -9) (undo-tree-id1331 . -9) (undo-tree-id1332 . -9) (undo-tree-id1333 . -9) (undo-tree-id1334 . -9) (undo-tree-id1335 . -9) (undo-tree-id1336 . -9) (undo-tree-id1337 . -10) (undo-tree-id1338 . -10) (undo-tree-id1339 . -10) (undo-tree-id1340 . -10) (undo-tree-id1341 . -10) (undo-tree-id1342 . -10) (undo-tree-id1343 . -10) (undo-tree-id1344 . -10) (undo-tree-id1345 . -10) (undo-tree-id1346 . -10) (undo-tree-id1347 . -10) (undo-tree-id1348 . -10) (undo-tree-id1349 . -10) (undo-tree-id1350 . -10) (undo-tree-id1351 . -10) (undo-tree-id1352 . -10) (undo-tree-id1353 . -10) (undo-tree-id1354 . -10) (undo-tree-id1355 . -10) (undo-tree-id1356 . -10) (undo-tree-id1357 . -10) (undo-tree-id1358 . -10) (undo-tree-id1359 . -10) (undo-tree-id1360 . -10) (undo-tree-id1361 . -10) (undo-tree-id1362 . -10) (undo-tree-id1363 . -10) (undo-tree-id1364 . -10) (undo-tree-id1365 . -10) (undo-tree-id1366 . -10) (undo-tree-id1367 . -10) (undo-tree-id1368 . -10) (undo-tree-id1369 . -10) (undo-tree-id1370 . -10) (undo-tree-id1371 . -10) (undo-tree-id1372 . -10) (undo-tree-id1373 . -10) (undo-tree-id1374 . -10) (undo-tree-id1375 . -10) (undo-tree-id1376 . -10) (undo-tree-id1377 . -10) (undo-tree-id1378 . -10) (undo-tree-id1379 . -10) (undo-tree-id1380 . -10) (undo-tree-id1381 . -10) (undo-tree-id1382 . -10) (undo-tree-id1383 . -10) (undo-tree-id1384 . -10) (undo-tree-id1385 . -10) (undo-tree-id1386 . -10) (undo-tree-id1387 . -10) (undo-tree-id1388 . -10) (undo-tree-id1389 . -10) (undo-tree-id1390 . -10) (undo-tree-id1391 . -10) (undo-tree-id1392 . -10) (undo-tree-id1393 . -10) (undo-tree-id1394 . -10) (undo-tree-id1395 . -10) (undo-tree-id1396 . -10) (undo-tree-id1397 . -10) (undo-tree-id1398 . -10) (undo-tree-id1399 . -10) (undo-tree-id1400 . -10) (undo-tree-id1401 . -10) (undo-tree-id1402 . -10) (undo-tree-id1403 . -10) (undo-tree-id1404 . -10) (undo-tree-id1405 . -10) (undo-tree-id1406 . -10) (undo-tree-id1407 . -10) (undo-tree-id1408 . -10) (undo-tree-id1409 . -10) (undo-tree-id1410 . -10) (undo-tree-id1411 . -10) (undo-tree-id1412 . -10) (undo-tree-id1413 . -10) (undo-tree-id1414 . -10) (undo-tree-id1415 . -10) (undo-tree-id1416 . -10) (undo-tree-id1417 . -10) (undo-tree-id1418 . -10) (undo-tree-id1419 . -10) (undo-tree-id1420 . -10) (undo-tree-id1421 . -10) (undo-tree-id1422 . -10) (undo-tree-id1423 . -10) (undo-tree-id1424 . -10) (undo-tree-id1425 . -10) (undo-tree-id1426 . -10) (undo-tree-id1427 . -10) (undo-tree-id1428 . -10) (undo-tree-id1429 . -10) (undo-tree-id1430 . -10) (undo-tree-id1431 . -10) (undo-tree-id1432 . -10) (undo-tree-id1433 . -10) (undo-tree-id1434 . -10) (undo-tree-id1435 . -10) (undo-tree-id1436 . -10) (undo-tree-id1437 . -10) (undo-tree-id1438 . -10) (undo-tree-id1439 . -10) (undo-tree-id1440 . -10) (undo-tree-id1441 . -10) (undo-tree-id1442 . -10) (undo-tree-id1443 . -10) (undo-tree-id1444 . -10) (undo-tree-id1445 . -10) (undo-tree-id1446 . -10) (undo-tree-id1447 . -10) (undo-tree-id1448 . -10) (undo-tree-id1449 . -10) (undo-tree-id1450 . -10) (undo-tree-id1451 . -10) (undo-tree-id1452 . -10) (undo-tree-id1453 . -10) (undo-tree-id1454 . -10) (undo-tree-id1455 . -10) (undo-tree-id1456 . -10) (undo-tree-id1457 . -10) (undo-tree-id1458 . -10) (undo-tree-id1459 . -10) (undo-tree-id1460 . -10) (undo-tree-id1461 . -10) (undo-tree-id1462 . -10) (undo-tree-id1463 . -10) (undo-tree-id1464 . -10) (undo-tree-id1465 . -10) (undo-tree-id1466 . -10) (undo-tree-id1467 . -10) (undo-tree-id1468 . -10) (undo-tree-id1469 . -10) (undo-tree-id1470 . -10) (undo-tree-id1471 . -10) (undo-tree-id1472 . -10) (undo-tree-id1473 . -10) (undo-tree-id1474 . -10) 335) ((325 . 335)) (26049 49600 760364 242000) 0 nil])
([nil nil ((340 . 348) (#("In" 0 2 (fontified nil)) . 340) (340 . 342) (#("Instance" 0 8 (fontified nil)) . -340) (340 . 348) (#("In" 0 2 (face font-lock-type-face fontified t)) . -340) (undo-tree-id1703 . -2) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -2) (undo-tree-id1707 . -2) 342) nil (26049 49611 598396 151000) 0 nil])
nil
([nil nil ((348 . 349)) nil (26049 49611 598380 103000) 0 nil])
([nil nil ((#("    fn new() -> Self {
        
    }" 0 4 (fontified t) 4 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 10 (face font-lock-function-name-face fontified t) 10 11 (face (rainbow-delimiters-depth-2-face) fontified t) 11 12 (face (rainbow-delimiters-depth-2-face) fontified t) 12 14 (fontified t) 14 15 (fontified t syntax-table (1)) 15 16 (fontified t) 16 20 (face font-lock-type-face fontified t) 20 21 (fontified t) 21 22 (face (rainbow-delimiters-depth-2-face) fontified t) 22 23 (fontified t) 23 31 (fontified t) 31 32 (fontified t) 32 36 (fontified t) 36 37 (face (rainbow-delimiters-depth-2-face) fontified t)) . 370) (undo-tree-id1748 . -37) (undo-tree-id1749 . -22) (undo-tree-id1750 . -31) (undo-tree-id1751 . -31) (undo-tree-id1752 . -31) (undo-tree-id1753 . -31) (undo-tree-id1754 . -31) (undo-tree-id1755 . -37) (undo-tree-id1756 . -37) (undo-tree-id1757 . -37) (undo-tree-id1758 . -37) (undo-tree-id1759 . -37) (undo-tree-id1760 . -31) (undo-tree-id1761 . -31) (undo-tree-id1762 . -31) (undo-tree-id1763 . -31) (undo-tree-id1764 . -31) (undo-tree-id1765 . -37) (undo-tree-id1766 . -37) (undo-tree-id1767 . -37) (undo-tree-id1768 . -37) (undo-tree-id1769 . -37) (undo-tree-id1770 . -37) (undo-tree-id1771 . -37) (undo-tree-id1772 . -37) (undo-tree-id1773 . -30) (undo-tree-id1774 . -29) (undo-tree-id1775 . -28) (undo-tree-id1776 . -27) (undo-tree-id1777 . -26) (undo-tree-id1778 . -24) (undo-tree-id1779 . -23) (undo-tree-id1780 . -37) (t 26049 49611 612173 902000)) nil (26049 49635 805127 988000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -370) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (#(" " 0 1 (fontified t)) . -371) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (#(" " 0 1 (fontified t)) . -372) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (#(" " 0 1 (fontified t)) . -373) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (#(" " 0 1 (fontified t)) . -374) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (#("
" 0 1 (fontified t)) . -375) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) 376) nil (26049 49635 805099 719000) 0 nil])
([nil nil ((644 . 652) (#("        " 0 8 (fontified nil)) . 643) (undo-tree-id1966 . -8) (undo-tree-id1967 . -8) (undo-tree-id1968 . -8) (undo-tree-id1969 . -8) (undo-tree-id1970 . -8) (undo-tree-id1971 . -8) (undo-tree-id1972 . -8) (642 . 652) (t 26049 49635 818842 34000)) nil (26049 49912 198511 216000) 0 nil])
([nil nil ((652 . 667)) nil (26049 49912 198506 277000) 0 nil])
([nil nil ((#("let instance = " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 12 (face font-lock-variable-name-face fontified t) 12 15 (fontified t)) . 652) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -2) (undo-tree-id1913 . -2) (undo-tree-id1914 . -3) (undo-tree-id1915 . -3) (undo-tree-id1916 . -3) (undo-tree-id1917 . -4) (undo-tree-id1918 . -4) (undo-tree-id1919 . -4) (undo-tree-id1920 . -4) (undo-tree-id1921 . -4) (undo-tree-id1922 . -4) (undo-tree-id1923 . -4) (undo-tree-id1924 . -4) (undo-tree-id1925 . -4) (undo-tree-id1926 . -4) (undo-tree-id1927 . -5) (undo-tree-id1928 . -5) (undo-tree-id1929 . -5) (undo-tree-id1930 . -6) (undo-tree-id1931 . -6) (undo-tree-id1932 . -7) (undo-tree-id1933 . -7) (undo-tree-id1934 . -8) (undo-tree-id1935 . -8) (undo-tree-id1936 . -9) (undo-tree-id1937 . -9) (undo-tree-id1938 . -10) (undo-tree-id1939 . -10) (undo-tree-id1940 . -11) (undo-tree-id1941 . -11) (undo-tree-id1942 . -12) (undo-tree-id1943 . -12) (undo-tree-id1944 . -13) (undo-tree-id1945 . -13) (undo-tree-id1946 . -13) (undo-tree-id1947 . -14) (undo-tree-id1948 . -14) (undo-tree-id1949 . -15) (undo-tree-id1950 . -15) (undo-tree-id1951 . -15) (undo-tree-id1952 . -15) (undo-tree-id1953 . -15) (undo-tree-id1954 . -15) (undo-tree-id1955 . -15) (undo-tree-id1956 . -15) (undo-tree-id1957 . -15) (undo-tree-id1958 . -15) (undo-tree-id1959 . -15) (undo-tree-id1960 . -15) (undo-tree-id1961 . -15) (undo-tree-id1962 . -15) (undo-tree-id1963 . -15) (undo-tree-id1964 . -15) (undo-tree-id1965 . -15)) nil (26049 49912 198503 933000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 652) (undo-tree-id1907 . 1) (undo-tree-id1908 . -1)) nil (26049 49912 198469 797000) 0 nil])
([nil nil ((693 . 697) (#("    " 0 4 (fontified nil)) . 692) (undo-tree-id1903 . -4) (undo-tree-id1904 . -4) (undo-tree-id1905 . -4) (undo-tree-id1906 . -4) (691 . 697)) nil (26049 49912 198467 583000) 0 nil])
([nil nil ((697 . 701)) nil (26049 49912 198464 467000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -699) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (#(" " 0 1 (fontified t)) . -700) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) 701) nil (26049 49912 198463 343000) 0 nil])
([nil nil ((699 . 707)) nil (26049 49912 198455 525000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -706) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) 707) nil (26049 49912 198454 801000) 0 nil])
([nil nil ((706 . 721)) nil (26049 49912 198452 535000) 0 nil])
([nil nil ((721 . 728)) nil (26049 49912 198452 21000) 0 nil])
([nil nil ((#("Instace" 0 7 (face font-lock-type-face fontified t)) . -721) (undo-tree-id1873 . -7) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -2) (undo-tree-id1877 . -2) (undo-tree-id1878 . -3) (undo-tree-id1879 . -3) (undo-tree-id1880 . -4) (undo-tree-id1881 . -4) (undo-tree-id1882 . -5) (undo-tree-id1883 . -5) (undo-tree-id1884 . -6) (undo-tree-id1885 . -6) (undo-tree-id1886 . -7) (undo-tree-id1887 . -7) 728) nil (26049 49912 198450 926000) 0 nil])
([nil nil ((721 . 723)) nil (26049 49912 198441 233000) 0 nil])
([nil nil ((721 . 724) (#("as" 0 2 (fontified nil)) . 721) (721 . 723) (#("ash" 0 3 (fontified nil)) . -721) (721 . 724) (#("as" 0 2 (face font-lock-keyword-face fontified t)) . -721) (undo-tree-id1868 . -2) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -2) (undo-tree-id1872 . -2) 723) nil (26049 49912 198439 927000) 0 nil])
([nil nil ((724 . 727)) nil (26049 49912 198435 641000) 0 nil])
([nil nil ((#("L" 0 1 (face font-lock-type-face fontified t)) . -725) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (#(":" 0 1 (fontified t)) . -726) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) 727) nil (26049 49912 198434 455000) 0 nil])
([nil nil ((725 . 728)) nil (26049 49912 198427 972000) 0 nil])
([nil nil ((726 . 734) (#("In" 0 2 (fontified nil)) . 726) (726 . 728) (#("Instance" 0 8 (fontified nil)) . -726) (726 . 734) (#("In" 0 2 (face font-lock-type-face fontified t)) . -726) (undo-tree-id1854 . -2) (undo-tree-id1855 . -1) (undo-tree-id1856 . -2) (undo-tree-id1857 . -2) 728) nil (26049 49912 198426 733000) 0 nil])
([nil nil ((734 . 737)) nil (26049 49912 198422 925000) 0 nil])
([nil nil ((738 . 742) (#("        " 0 8 (fontified nil)) . 737) (737 . 745) (#("    " 0 4 (fontified nil)) . 737) (undo-tree-id1850 . -4) (undo-tree-id1851 . -4) (undo-tree-id1852 . -4) (undo-tree-id1853 . -4) (736 . 742)) nil (26049 49912 198421 716000) 0 nil])
([nil nil ((737 . 745)) nil (26049 49912 198417 501000) 0 nil])
([nil nil ((371 . 375) (#("    " 0 4 (fontified nil)) . 370) (undo-tree-id1846 . -4) (undo-tree-id1847 . -4) (undo-tree-id1848 . -4) (undo-tree-id1849 . -4) (369 . 375)) nil (26049 49912 198416 693000) 0 nil])
([nil nil ((370 . 374)) nil (26049 49912 198413 661000) 0 nil])
([nil nil ((374 . 387)) nil (26049 49912 198413 103000) 0 nil])
([nil nil ((386 . 390) (#("S" 0 1 (fontified nil)) . 386) (386 . 387) (#("Self" 0 4 (fontified nil)) . -386) (386 . 390) (#("S" 0 1 (face font-lock-type-face fontified t)) . -386) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) 387) nil (26049 49912 198411 989000) 0 nil])
([nil nil ((390 . 393)) nil (26049 49912 198407 902000) 0 nil])
([nil nil ((394 . 398) (#("        " 0 8 (fontified nil)) . 393) (393 . 401) (#("    " 0 4 (fontified nil)) . 393) (undo-tree-id1837 . -4) (undo-tree-id1838 . -4) (undo-tree-id1839 . -4) (undo-tree-id1840 . -4) (392 . 398)) nil (26049 49912 198406 926000) 0 nil])
([nil nil ((393 . 401)) nil (26049 49912 198403 560000) 0 nil])
([nil nil ((#("Self" 0 4 (face font-lock-type-face fontified t)) . -470) (undo-tree-id1827 . -4) (undo-tree-id1828 . -4) (undo-tree-id1829 . -4) (undo-tree-id1830 . -4) (undo-tree-id1831 . -4) (undo-tree-id1832 . -4) (undo-tree-id1833 . -4) (undo-tree-id1834 . -4) (undo-tree-id1835 . -4) (undo-tree-id1836 . -4) 474) nil (26049 49912 198402 618000) 0 nil])
([nil nil ((470 . 471)) nil (26049 49912 198396 61000) 0 nil])
([nil nil ((#("W" 0 1 (face font-lock-type-face fontified t)) . -470) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) 471) nil (26049 49912 198395 134000) 0 nil])
([nil nil ((470 . 473)) nil (26049 49912 198391 507000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t)) . -470) (undo-tree-id1797 . -1) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (#("i" 0 1 (fontified t)) . -471) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (#("n" 0 1 (fontified t)) . -472) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) 473) nil (26049 49912 198389 623000) 0 nil])
([nil nil ((470 . 476)) nil (26049 49912 198373 213000) 0 nil])
([nil nil ((120 . 121) (133 . 142) (470 . 470) (470 . 476) (#("Window" 0 6 (fontified nil)) . 470) (470 . 476) (#("Window (use winit::window::Window)" 0 34 (fontified nil)) . -470) (470 . 504) (#("Window" 0 6 (face font-lock-type-face fontified t)) . -470) (undo-tree-id1781 . -6) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (undo-tree-id1784 . -2) (undo-tree-id1785 . -2) (undo-tree-id1786 . -2) (undo-tree-id1787 . -3) (undo-tree-id1788 . -3) (undo-tree-id1789 . -4) (undo-tree-id1790 . -4) (undo-tree-id1791 . -5) (undo-tree-id1792 . -5) (undo-tree-id1793 . -6) (undo-tree-id1794 . -6) (undo-tree-id1795 . -6) (undo-tree-id1796 . -6) 476) nil (26049 49912 198368 665000) 0 nil])
([nil nil ((#("window }" 0 6 (fontified t) 6 7 (fontified t) 7 8 (face (rainbow-delimiters-depth-4-face) fontified t)) . -731) (undo-tree-id1983 . -8) (undo-tree-id1984 . -8) 739 (t 26049 49912 212192 104000)) nil (26049 49915 970018 21000) 0 nil])
([nil nil ((#("VulkanApp { " 0 9 (face font-lock-type-face fontified t) 9 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-4-face) fontified t) 11 12 (fontified t)) . -719) (undo-tree-id1979 . -12) (undo-tree-id1980 . -12) (undo-tree-id1981 . -12) (undo-tree-id1982 . -12) 731) nil (26049 49915 970015 365000) 0 nil])
([nil nil ((719 . 720)) nil (26049 49915 970011 137000) 0 nil])
([nil nil ((719 . 725) (#("w" 0 1 (fontified nil)) . 719) (719 . 720) (#("window" 0 6 (fontified nil)) . -719) (719 . 725) (#("w" 0 1 (fontified t)) . -719) (undo-tree-id1973 . -1) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) (undo-tree-id1976 . -1) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) 720) nil (26049 49915 970007 332000) 0 nil])
([nil nil ((#("    let app = VulkanApp::init_vulkan(&event_loop).unwrap();
    app.main_loop(event_loop);" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 11 (face font-lock-variable-name-face fontified t) 11 14 (fontified t) 14 23 (face font-lock-type-face fontified t) 23 25 (fontified t) 25 36 (fontified t) 36 37 (face (rainbow-delimiters-depth-2-face) fontified t) 37 38 (face rust-ampersand-face fontified t) 38 48 (fontified t) 48 49 (face (rainbow-delimiters-depth-2-face) fontified t) 49 50 (fontified t) 50 56 (fontified t) 56 57 (face (rainbow-delimiters-depth-2-face) fontified t) 57 58 (face (rainbow-delimiters-depth-2-face) fontified t) 58 60 (fontified t) 60 64 (fontified t) 64 68 (fontified t) 68 77 (fontified t) 77 78 (face (rainbow-delimiters-depth-2-face) fontified t) 78 88 (fontified t) 88 89 (face (rainbow-delimiters-depth-2-face) fontified t) 89 90 (fontified t)) . 2553) (undo-tree-id1985 . -90) (undo-tree-id1986 . -78) (undo-tree-id1987 . -90) (undo-tree-id1988 . -90) (undo-tree-id1989 . -90) (undo-tree-id1990 . -89) (undo-tree-id1991 . -87) (undo-tree-id1992 . -85) (undo-tree-id1993 . -84) (undo-tree-id1994 . -82) (undo-tree-id1995 . -81) (undo-tree-id1996 . -79) (undo-tree-id1997 . -78) (undo-tree-id1998 . -16) (undo-tree-id1999 . -15) (undo-tree-id2000 . -13) (undo-tree-id2001 . -12) (undo-tree-id2002 . -10) (undo-tree-id2003 . -8) (undo-tree-id2004 . -6) (undo-tree-id2005 . -5) (undo-tree-id2006 . -4) (undo-tree-id2007 . -3) (undo-tree-id2008 . -2) (undo-tree-id2009 . -1) (undo-tree-id2010 . -90) (t 26049 49915 982192 328000)) nil (26049 49929 674854 986000) 0 nil])
([nil nil ((#("vulkan" 0 6 (face font-lock-function-name-face fontified t)) . -435) (undo-tree-id2011 . -6) (undo-tree-id2012 . -6) (undo-tree-id2013 . -6) (undo-tree-id2014 . -6) (undo-tree-id2015 . -6) (undo-tree-id2016 . -6) (undo-tree-id2017 . -6) (undo-tree-id2018 . -6) (undo-tree-id2019 . -6) (undo-tree-id2020 . -6) (undo-tree-id2021 . -6) (undo-tree-id2022 . -6) 441 (t 26049 49929 688859 834000)) nil (26049 49938 813143 960000) 0 nil])
([nil nil ((435 . 441)) nil (26049 49938 813126 158000) 0 nil])
([nil nil ((#("init" 0 4 (face font-lock-function-name-face fontified t)) . -430) (undo-tree-id2023 . -4) (undo-tree-id2024 . -4) (undo-tree-id2025 . -4) (undo-tree-id2026 . -4) (undo-tree-id2027 . -4) (undo-tree-id2028 . -4) (undo-tree-id2029 . -4) (undo-tree-id2030 . -4) (undo-tree-id2031 . -4) (undo-tree-id2032 . -4) (undo-tree-id2033 . -4) (undo-tree-id2034 . -4) 434 (t 26049 49938 825527 61000)) nil (26049 49949 501404 214000) 0 nil])
([nil nil ((430 . 436)) nil (26049 49949 501385 136000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 700) (undo-tree-id2046 . -1) (t 26049 49949 545527 719000)) nil (26049 49955 832320 875000) 0 nil])
([nil nil ((#("        
" 0 8 (fontified t) 8 9 (fontified t)) . 700) (undo-tree-id2035 . -8) (undo-tree-id2036 . -8) (undo-tree-id2037 . -8) (undo-tree-id2038 . -8) (undo-tree-id2039 . -8) (undo-tree-id2040 . -8) (undo-tree-id2041 . -8) (undo-tree-id2042 . -8) (undo-tree-id2043 . -8) (undo-tree-id2044 . -8) (undo-tree-id2045 . -9)) nil (26049 49955 832318 148000) 0 nil])
([nil nil ((#("        " 0 8 (fontified nil)) . 700) (700 . 708) (700 . 701)) nil (26049 49955 832299 141000) 0 nil])
([nil nil ((779 . 787) (t 26049 49955 875528 106000)) nil (26049 50227 356177 727000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -786) (undo-tree-id2160 . -1) 787) nil (26049 50227 356176 248000) 0 nil])
([nil nil ((786 . 793)) nil (26049 50227 356173 941000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -791) (undo-tree-id2158 . -1) (#("-" 0 1 (fontified t)) . -792) (undo-tree-id2159 . -1) 793) nil (26049 50227 356172 644000) 0 nil])
([nil nil ((791 . 796)) nil (26049 50227 356169 107000) 0 nil])
([nil nil ((794 . 797) (#("as" 0 2 (fontified nil)) . 794) (794 . 796) (#("ash" 0 3 (fontified nil)) . -794) (794 . 797) (#("as" 0 2 (face font-lock-keyword-face fontified t)) . -794) (undo-tree-id2157 . -2) 796) nil (26049 50227 356167 527000) 0 nil])
([nil nil ((797 . 800)) nil (26049 50227 356164 322000) 0 nil])
([nil nil ((#("V" 0 1 (face font-lock-type-face fontified t)) . -799) (undo-tree-id2156 . -1) 800) nil (26049 50227 356163 243000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -794) (undo-tree-id2146 . -1) (undo-tree-id2147 . -1) (#("s" 0 1 (face font-lock-keyword-face fontified t)) . -795) (undo-tree-id2148 . -1) (undo-tree-id2149 . -1) (#("h" 0 1 (fontified t)) . -796) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (#(":" 0 1 (fontified t)) . -797) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (#(":" 0 1 (fontified t)) . -798) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) 799) nil (26049 50227 356159 850000) 0 nil])
([nil nil ((794 . 796)) nil (26049 50227 356147 771000) 0 nil])
([nil nil ((20 . 33) (794 . 794) (794 . 796) (#("vk" 0 2 (fontified nil)) . 794) (794 . 796) (#("vk (use ash::vk)" 0 16 (fontified nil)) . -794) (794 . 810) (#("vk" 0 2 (fontified t)) . -794) (undo-tree-id2145 . -2) 796) nil (26049 50227 356146 125000) 0 nil])
([nil nil ((809 . 815)) nil (26049 50227 356142 526000) 0 nil])
([nil nil ((#("A" 0 1 (face font-lock-type-face fontified t)) . -811) (undo-tree-id2141 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -812) (undo-tree-id2142 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -813) (undo-tree-id2143 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -814) (undo-tree-id2144 . -1) 815) nil (26049 50227 356140 933000) 0 nil])
([nil nil ((811 . 814)) nil (26049 50227 356135 222000) 0 nil])
([nil nil ((811 . 826) (#("APP" 0 3 (fontified nil)) . 811) (811 . 814) (#("ApplicationInfo" 0 15 (fontified nil)) . -811) (811 . 826) (#("APP" 0 3 (face font-lock-type-face fontified t)) . -811) (undo-tree-id2140 . -3) 814) nil (26049 50227 356133 670000) 0 nil])
([nil nil ((826 . 829)) nil (26049 50227 356130 440000) 0 nil])
([nil nil ((830 . 838) (#("            " 0 12 (fontified nil)) . 829) (undo-tree-id2139 . -8) (837 . 841) (828 . 838)) nil (26049 50227 356129 141000) 0 nil])
([nil nil ((829 . 841)) nil (26049 50227 356126 491000) 0 nil])
([nil nil ((#("{
            
        }" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 2 (fontified t) 2 14 (fontified t) 14 15 (fontified t) 15 23 (fontified t) 23 24 (face (rainbow-delimiters-depth-3-face) fontified t)) . -827) (undo-tree-id2138 . -24) 851) nil (26049 50227 356125 324000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -826) (undo-tree-id2136 . -1) (undo-tree-id2137 . -1) 827) nil (26049 50227 356122 796000) 0 nil])
([nil nil ((826 . 829)) nil (26049 50227 356119 671000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -828) (undo-tree-id2135 . -1) 829) nil (26049 50227 356118 511000) 0 nil])
([nil nil ((apply yas--snippet-revive 828 837 #s(yas--snippet nil nil #s(yas--exit 837 nil) 16 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 837 nil) 16 nil nil nil nil)) (828 . 837) (#("builder()$0" 0 11 (fontified nil)) . 828) (828 . 839) (#("builder()" 0 9 (fontified nil)) . -828) (828 . 837)) nil (26049 50227 356115 804000) 0 nil])
([nil nil ((837 . 838)) nil (26049 50227 356113 627000) 0 nil])
([nil nil ((#("builder()." 0 7 (fontified t) 7 8 (face (rainbow-delimiters-depth-3-face) fontified t) 8 9 (face (rainbow-delimiters-depth-3-face) fontified t) 9 10 (fontified t)) . -828) (undo-tree-id2133 . -10) (undo-tree-id2134 . -10) 838) nil (26049 50227 356112 488000) 0 nil])
([nil nil ((#("ApplicationInfo::" 0 15 (face font-lock-type-face fontified t) 15 17 (fontified t)) . -811) (undo-tree-id2130 . -15) (undo-tree-id2131 . -17) (undo-tree-id2132 . -17) 828) nil (26049 50227 356109 72000) 0 nil])
([nil nil ((811 . 815)) nil (26049 50227 356104 724000) 0 nil])
([nil nil ((811 . 833) (#("APPl" 0 4 (fontified nil)) . 811) (811 . 815) (#("ApplicationInfoBuilder" 0 22 (fontified nil)) . -811) (811 . 833) (#("APPl" 0 4 (face font-lock-type-face fontified t)) . -811) (undo-tree-id2129 . -4) 815) nil (26049 50227 356103 123000) 0 nil])
([nil nil ((833 . 838)) nil (26049 50227 356099 896000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -835) (undo-tree-id2126 . -1) (#("e" 0 1 (fontified t)) . -836) (undo-tree-id2127 . -1) (#("w" 0 1 (fontified t)) . -837) (undo-tree-id2128 . -1) 838) nil (26049 50227 356098 391000) 0 nil])
([nil nil ((835 . 836)) nil (26049 50227 356093 930000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -833) (undo-tree-id2123 . -1) (#(":" 0 1 (fontified t)) . -834) (undo-tree-id2124 . -1) (#("," 0 1 (fontified t)) . -835) (undo-tree-id2125 . -1) 836) nil (26049 50227 356092 516000) 0 nil])
([nil nil ((833 . 836)) nil (26049 50227 356087 928000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -835) (undo-tree-id2121 . -1) (undo-tree-id2122 . -1) 836) nil (26049 50227 356086 723000) 0 nil])
([nil nil ((835 . 836)) nil (26049 50227 356083 478000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -835) (undo-tree-id2120 . -1) 836) nil (26049 50227 356082 368000) 0 nil])
([nil nil ((835 . 836)) nil (26049 50227 356080 88000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -835) (undo-tree-id2119 . -1) 836) nil (26049 50227 356078 909000) 0 nil])
([nil nil ((835 . 836)) nil (26049 50227 356076 108000) 0 nil])
([nil nil ((#("D" 0 1 (face font-lock-type-face fontified t)) . -835) (undo-tree-id2118 . -1) 836) nil (26049 50227 356074 869000) 0 nil])
([nil nil ((835 . 837)) nil (26049 50227 356072 702000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -835) (undo-tree-id2116 . -1) (#("e" 0 1 (fontified t)) . -836) (undo-tree-id2117 . -1) 837) nil (26049 50227 356071 382000) 0 nil])
([nil nil ((835 . 837)) nil (26049 50227 356068 85000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -835) (undo-tree-id2114 . -1) (#("e" 0 1 (fontified t)) . -836) (undo-tree-id2115 . -1) 837) nil (26049 50227 356066 841000) 0 nil])
([nil nil ((#("B" 0 1 (face font-lock-type-face fontified t)) . -826) (undo-tree-id2099 . -1) (undo-tree-id2100 . -1) (undo-tree-id2101 . -1) (undo-tree-id2102 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -827) (undo-tree-id2103 . -1) (undo-tree-id2104 . -1) (undo-tree-id2105 . -1) (undo-tree-id2106 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -828) (undo-tree-id2107 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -829) (undo-tree-id2108 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -830) (undo-tree-id2109 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -831) (undo-tree-id2110 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -832) (undo-tree-id2111 . -1) (#(":" 0 1 (fontified t)) . -833) (undo-tree-id2112 . -1) (#(":" 0 1 (fontified t)) . -834) (undo-tree-id2113 . -1) 835) nil (26049 50227 356061 442000) 0 nil])
([nil nil ((826 . 830)) nil (26049 50227 356043 54000) 0 nil])
([nil nil ((apply yas--snippet-revive 828 837 #s(yas--snippet nil nil #s(yas--exit 837 nil) 17 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 837 nil) 17 nil nil nil nil)) (828 . 837) (#("default()$0" 0 11 (fontified nil)) . 828) (828 . 839) (#("de" 0 2 (fontified nil)) . 828) (828 . 830) (#("default() (as Default)" 0 22 (fontified nil)) . -828) (828 . 850) (#("de" 0 2 (fontified t)) . -828) (undo-tree-id2098 . -2) 830) nil (26049 50227 356041 172000) 0 nil])
([nil nil ((837 . 838)) nil (26049 50227 356037 65000) 0 nil])
([nil nil ((838 . 839)) nil (26049 50227 356036 148000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -838) (undo-tree-id2097 . -1) 839) nil (26049 50227 356034 990000) 0 nil])
([nil nil ((838 . 839)) nil (26049 50227 356032 710000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -838) (undo-tree-id2096 . -1) 839) nil (26049 50227 356031 496000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -837) (undo-tree-id2094 . -1) (undo-tree-id2095 . -1) 838) nil (26049 50227 356028 998000) 0 nil])
([nil nil ((#("default()" 0 7 (fontified t) 7 8 (face (rainbow-delimiters-depth-3-face) fontified t) 8 9 (face (rainbow-delimiters-depth-3-face) fontified t)) . -828) (undo-tree-id2088 . -5) (undo-tree-id2089 . -5) (undo-tree-id2090 . -4) (undo-tree-id2091 . -5) (undo-tree-id2092 . -5) (undo-tree-id2093 . -9) 837) nil (26049 50227 356025 335000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -826) (undo-tree-id2076 . -1) (undo-tree-id2077 . -1) (undo-tree-id2078 . -1) (undo-tree-id2079 . -1) (undo-tree-id2080 . -1) (undo-tree-id2081 . -1) (#(":" 0 1 (fontified t)) . -827) (undo-tree-id2082 . -1) (undo-tree-id2083 . -1) (undo-tree-id2084 . -1) (undo-tree-id2085 . -1) (undo-tree-id2086 . -1) (undo-tree-id2087 . -1) 828) nil (26049 50227 356016 973000) 0 nil])
([nil nil ((826 . 827)) nil (26049 50227 356002 404000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -826) (undo-tree-id2075 . -1) 827) nil (26049 50227 356001 215000) 0 nil])
([nil nil ((826 . 827)) nil (26049 50227 355998 968000) 0 nil])
([nil nil ((811 . 833) (#("ApplicationInfoB" 0 16 (fontified nil)) . 811) (811 . 827) (#("ApplicationInfoBuilder" 0 22 (fontified nil)) . -811) (811 . 833) (#("ApplicationInfoB" 0 16 (face font-lock-type-face fontified t)) . -811) (undo-tree-id2068 . -15) (undo-tree-id2069 . -15) (undo-tree-id2070 . -15) (undo-tree-id2071 . -15) (undo-tree-id2072 . -15) (undo-tree-id2073 . -15) (undo-tree-id2074 . -16) 827) nil (26049 50227 355996 995000) 0 nil])
([nil nil ((833 . 834)) nil (26049 50227 355986 537000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -833) (undo-tree-id2067 . -1) 834) nil (26049 50227 355985 344000) 0 nil])
([nil nil ((833 . 834)) nil (26049 50227 355983 129000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -833) (undo-tree-id2066 . -1) 834) nil (26049 50227 355981 671000) 0 nil])
([nil nil ((833 . 835)) nil (26049 50227 355979 328000) 0 nil])
([nil nil ((835 . 838)) nil (26049 50227 355978 366000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -835) (undo-tree-id2063 . -1) (#("e" 0 1 (fontified t)) . -836) (undo-tree-id2064 . -1) (#("w" 0 1 (fontified t)) . -837) (undo-tree-id2065 . -1) 838) nil (26049 50227 355976 599000) 0 nil])
([nil nil ((835 . 837)) nil (26049 50227 355971 743000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -833) (undo-tree-id2059 . -1) (#(":" 0 1 (fontified t)) . -834) (undo-tree-id2060 . -1) (#("d" 0 1 (fontified t)) . -835) (undo-tree-id2061 . -1) (#("e" 0 1 (fontified t)) . -836) (undo-tree-id2062 . -1) 837) nil (26049 50227 355969 901000) 0 nil])
([nil nil ((#("ApplicationInfoBuilder" 0 22 (face font-lock-type-face fontified t)) . -811) (undo-tree-id2058 . -22) 833) nil (26049 50227 355963 472000) 0 nil])
([nil nil ((811 . 812)) nil (26049 50227 355961 485000) 0 nil])
([nil nil ((812 . 814)) nil (26049 50227 355960 684000) 0 nil])
([nil nil ((#("P" 0 1 (face font-lock-type-face fontified t)) . -812) (undo-tree-id2056 . -1) (#("P" 0 1 (face font-lock-type-face fontified t)) . -813) (undo-tree-id2057 . -1) 814) nil (26049 50227 355959 97000) 0 nil])
([nil nil ((812 . 814)) nil (26049 50227 355955 674000) 0 nil])
([nil nil ((811 . 826) (#("App" 0 3 (fontified nil)) . 811) (811 . 814) (#("ApplicationInfo" 0 15 (fontified nil)) . -811) (811 . 826) (#("App" 0 3 (face font-lock-type-face fontified t)) . -811) (undo-tree-id2047 . -3) (undo-tree-id2048 . -1) (undo-tree-id2049 . -2) (undo-tree-id2050 . -2) (undo-tree-id2051 . -3) (undo-tree-id2052 . -3) (undo-tree-id2053 . -3) (undo-tree-id2054 . -3) (undo-tree-id2055 . -3) 814) nil (26049 50227 356399 465000) 0 nil])
([nil nil ((826 . 830)) nil (26049 50265 254354 172000) 0 nil] [nil nil ((826 . 839)) ((#("
            " 0 13 (fontified t)) . 826) (undo-tree-id2161 . -13) (undo-tree-id2162 . -1)) (26049 50227 355929 563000) 0 nil])
([nil nil ((#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -829) (undo-tree-id2290 . -1) (undo-tree-id2291 . -1) (undo-tree-id2292 . -1) (undo-tree-id2293 . -1) (undo-tree-id2294 . -1) (undo-tree-id2295 . -1) 830) nil (26049 50265 254353 364000) 0 nil])
nil
([nil nil ((830 . 838) (#("            " 0 12 (fontified nil)) . 829) (undo-tree-id2286 . -8) (undo-tree-id2287 . -8) (undo-tree-id2288 . -8) (undo-tree-id2289 . -8) (837 . 841) (828 . 838)) nil (26049 50265 254348 677000) 0 nil])
([nil nil ((829 . 841)) nil (26049 50265 254345 502000) 0 nil])
([nil nil ((841 . 842)) nil (26049 50265 254345 26000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -841) (undo-tree-id2281 . -1) (undo-tree-id2282 . -1) (undo-tree-id2283 . -1) (undo-tree-id2284 . -1) (undo-tree-id2285 . -1) 842) nil (26049 50265 254344 114000) 0 nil])
([nil nil ((841 . 842)) nil (26049 50265 254340 376000) 0 nil])
([nil nil ((841 . 847) (#("s" 0 1 (fontified nil)) . 841) (841 . 842) (#("s_type" 0 6 (fontified nil)) . -841) (841 . 847) (#("s" 0 1 (fontified t)) . -841) (undo-tree-id2273 . -1) (undo-tree-id2274 . -1) (undo-tree-id2275 . -1) (undo-tree-id2276 . -1) (undo-tree-id2277 . -1) (undo-tree-id2278 . -1) (undo-tree-id2279 . -1) (undo-tree-id2280 . -1) 842) nil (26049 50265 254339 1000) 0 nil])
([nil nil ((847 . 849)) nil (26049 50265 254332 87000) 0 nil])
([nil nil ((#("        let app_info = vk::ApplicationInfo {
            s_type: 
        }" 0 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 20 (face font-lock-variable-name-face fontified t) 20 23 (fontified t) 23 25 (face font-lock-constant-face fontified t) 25 27 (fontified t) 27 42 (face font-lock-type-face fontified t) 42 43 (fontified t) 43 44 (face (rainbow-delimiters-depth-3-face) fontified t) 44 45 (fontified t) 45 57 (fontified t) 57 63 (face font-lock-variable-name-face fontified t) 63 65 (fontified t) 65 66 (fontified t) 66 74 (fontified t) 74 75 (face (rainbow-delimiters-depth-3-face) fontified t)) . 784) (undo-tree-id2163 . -75) (undo-tree-id2164 . -27) (undo-tree-id2165 . -27) (undo-tree-id2166 . -27) (undo-tree-id2167 . -27) (undo-tree-id2168 . -27) (undo-tree-id2169 . -27) (undo-tree-id2170 . -27) (undo-tree-id2171 . -27) (undo-tree-id2172 . -27) (undo-tree-id2173 . -27) (undo-tree-id2174 . -27) (undo-tree-id2175 . -27) (undo-tree-id2176 . -27) (undo-tree-id2177 . -27) (undo-tree-id2178 . -42) (undo-tree-id2179 . -42) (undo-tree-id2180 . -42) (undo-tree-id2181 . -42) (undo-tree-id2182 . -42) (undo-tree-id2183 . -43) (undo-tree-id2184 . -43) (undo-tree-id2185 . -44) (undo-tree-id2186 . -75) (undo-tree-id2187 . -75) (undo-tree-id2188 . -75) (undo-tree-id2189 . -75) (undo-tree-id2190 . -75) (undo-tree-id2191 . -75) (undo-tree-id2192 . -75) (undo-tree-id2193 . -75) (undo-tree-id2194 . -75) (undo-tree-id2195 . -75) (undo-tree-id2196 . -75) (undo-tree-id2197 . -75) (undo-tree-id2198 . -75) (undo-tree-id2199 . -75) (undo-tree-id2200 . -75) (undo-tree-id2201 . -44) (undo-tree-id2202 . -44) (undo-tree-id2203 . 31) (undo-tree-id2204 . -45) (undo-tree-id2205 . -45) (undo-tree-id2206 . -45) (undo-tree-id2207 . 10) (undo-tree-id2208 . -74) (undo-tree-id2209 . -74) (undo-tree-id2210 . -74) (undo-tree-id2211 . -74) (undo-tree-id2212 . -74) (undo-tree-id2213 . -74) (undo-tree-id2214 . -74) (undo-tree-id2215 . -74) (undo-tree-id2216 . -45) (undo-tree-id2217 . -57) (undo-tree-id2218 . -57) (undo-tree-id2219 . -57) (undo-tree-id2220 . -57) (undo-tree-id2221 . -57) (undo-tree-id2222 . -57) (undo-tree-id2223 . -57) (undo-tree-id2224 . -57) (undo-tree-id2225 . -57) (undo-tree-id2226 . -57) (undo-tree-id2227 . -57) (undo-tree-id2228 . -57) (undo-tree-id2229 . -57) (undo-tree-id2230 . -57) (undo-tree-id2231 . -57) (undo-tree-id2232 . -57) (undo-tree-id2233 . -57) (undo-tree-id2234 . -57) (undo-tree-id2235 . -57) (undo-tree-id2236 . -63) (undo-tree-id2237 . -63) (undo-tree-id2238 . -63) (undo-tree-id2239 . -63) (undo-tree-id2240 . -63) (undo-tree-id2241 . -63) (undo-tree-id2242 . -63) (undo-tree-id2243 . -63) (undo-tree-id2244 . -63) (undo-tree-id2245 . -63) (undo-tree-id2246 . -64) (undo-tree-id2247 . -64) (undo-tree-id2248 . 10) (undo-tree-id2249 . -65) (undo-tree-id2250 . -65) (undo-tree-id2251 . -65) (undo-tree-id2252 . -65) (undo-tree-id2253 . -65) (undo-tree-id2254 . -65) (undo-tree-id2255 . -65) (undo-tree-id2256 . -65) (undo-tree-id2257 . -65) (undo-tree-id2258 . -65) (undo-tree-id2259 . -65) (undo-tree-id2260 . -75) (undo-tree-id2261 . -75) (undo-tree-id2262 . -75) (undo-tree-id2263 . -53) (undo-tree-id2264 . -51) (undo-tree-id2265 . -50) (undo-tree-id2266 . -4) (undo-tree-id2267 . -3) (undo-tree-id2268 . -2) (undo-tree-id2269 . -1) (undo-tree-id2270 . -75) (undo-tree-id2271 . -27) (undo-tree-id2272 . -75)) nil (26049 50265 254326 430000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1290 . 1291) (nil fontified nil 784 . 1291) (784 . 1291)) nil (26049 50265 254001 974000) 0 nil])
([nil nil ((#("       let app_name = CString::new(WINDOW_TITLE).unwrap();
        let engine_name = CString::new(\"Vulkan Engine\").unwrap();
        let app_info = vk::ApplicationInfo {
            s_type: vk::StructureType::APPLICATION_INFO,
            p_next: ptr::null(),
            p_application_name: app_name.as_ptr(),
            application_version: APPLICATION_VERSION,
            p_engine_name: engine_name.as_ptr(),
            engine_version: ENGINE_VERSION,
            api_version: API_VERSION,
        };" 0 7 (fontified t) 7 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 19 (face font-lock-variable-name-face fontified t) 19 22 (fontified t) 22 29 (face font-lock-type-face fontified t) 29 34 (fontified t) 34 35 (face (rainbow-delimiters-depth-3-face) fontified t) 35 47 (face font-lock-type-face fontified t) 47 48 (face (rainbow-delimiters-depth-3-face) fontified t) 48 55 (fontified t) 55 56 (face (rainbow-delimiters-depth-3-face) fontified t) 56 57 (face (rainbow-delimiters-depth-3-face) fontified t) 57 67 (fontified t) 67 70 (face font-lock-keyword-face fontified t) 70 71 (fontified t) 71 82 (face font-lock-variable-name-face fontified t) 82 85 (fontified t) 85 92 (face font-lock-type-face fontified t) 92 97 (fontified t) 97 98 (face (rainbow-delimiters-depth-3-face) fontified t) 98 113 (face font-lock-string-face fontified t) 113 114 (face (rainbow-delimiters-depth-3-face) fontified t) 114 121 (fontified t) 121 122 (face (rainbow-delimiters-depth-3-face) fontified t) 122 123 (face (rainbow-delimiters-depth-3-face) fontified t) 123 133 (fontified t) 133 136 (face font-lock-keyword-face fontified t) 136 137 (fontified t) 137 145 (face font-lock-variable-name-face fontified t) 145 148 (fontified t) 148 150 (face font-lock-constant-face fontified t) 150 152 (fontified t) 152 167 (face font-lock-type-face fontified t) 167 168 (fontified t) 168 169 (face (rainbow-delimiters-depth-3-face) fontified t) 169 182 (fontified t) 182 188 (face font-lock-variable-name-face fontified t) 188 190 (fontified t) 190 192 (face font-lock-constant-face fontified t) 192 194 (fontified t) 194 207 (face font-lock-type-face fontified t) 207 209 (fontified t) 209 225 (face font-lock-type-face fontified t) 225 239 (fontified t) 239 245 (face font-lock-variable-name-face fontified t) 245 247 (fontified t) 247 250 (face font-lock-constant-face fontified t) 250 256 (fontified t) 256 257 (face (rainbow-delimiters-depth-4-face) fontified t) 257 258 (face (rainbow-delimiters-depth-4-face) fontified t) 258 272 (fontified t) 272 290 (face font-lock-variable-name-face fontified t) 290 307 (fontified t) 307 308 (face (rainbow-delimiters-depth-4-face) fontified t) 308 309 (face (rainbow-delimiters-depth-4-face) fontified t) 309 323 (fontified t) 323 342 (face font-lock-variable-name-face fontified t) 342 344 (fontified t) 344 363 (face font-lock-type-face fontified t) 363 377 (fontified t) 377 390 (face font-lock-variable-name-face fontified t) 390 410 (fontified t) 410 411 (face (rainbow-delimiters-depth-4-face) fontified t) 411 412 (face (rainbow-delimiters-depth-4-face) fontified t) 412 426 (fontified t) 426 440 (face font-lock-variable-name-face fontified t) 440 442 (fontified t) 442 456 (face font-lock-type-face fontified t) 456 470 (fontified t) 470 481 (face font-lock-variable-name-face fontified t) 481 483 (fontified t) 483 494 (face font-lock-type-face fontified t) 494 504 (fontified t) 504 505 (face (rainbow-delimiters-depth-3-face) fontified t) 505 506 (rear-nonsticky t fontified t)) . 785) (undo-tree-id2346 . -506) (undo-tree-id2347 . -506) (undo-tree-id2348 . -506) (undo-tree-id2349 . -506) (undo-tree-id2350 . -506) (undo-tree-id2351 . -506) (undo-tree-id2352 . -506) (undo-tree-id2353 . -506) (undo-tree-id2354 . -506) (undo-tree-id2355 . -506) (undo-tree-id2356 . -506) (undo-tree-id2357 . -506) (undo-tree-id2358 . -506) (undo-tree-id2359 . -506) (undo-tree-id2360 . -506) (undo-tree-id2361 . -506) (undo-tree-id2362 . -506) (undo-tree-id2363 . -506) (undo-tree-id2364 . -506) (undo-tree-id2365 . -506) (undo-tree-id2366 . -506) (undo-tree-id2367 . -506) (undo-tree-id2368 . -506) (undo-tree-id2369 . -506) (undo-tree-id2370 . -506) (undo-tree-id2371 . -506) (undo-tree-id2372 . -506) (undo-tree-id2373 . -472) (undo-tree-id2374 . -471) (undo-tree-id2375 . -426) (undo-tree-id2376 . -425) (undo-tree-id2377 . -375) (undo-tree-id2378 . -374) (undo-tree-id2379 . -319) (undo-tree-id2380 . -318) (undo-tree-id2381 . -266) (undo-tree-id2382 . -232) (undo-tree-id2383 . -231) (undo-tree-id2384 . -230) (undo-tree-id2385 . -172) (undo-tree-id2386 . -171) (undo-tree-id2387 . -125) (undo-tree-id2388 . -506) (undo-tree-id2389 . -506) (t 26049 50265 302213 539000)) nil (26049 50274 854734 122000) 0 nil])
([nil nil ((784 . 792) (#(" " 0 1 (fontified t)) . 784) (undo-tree-id2296 . -1) (undo-tree-id2297 . -1) (undo-tree-id2298 . -1) (undo-tree-id2299 . -1) (undo-tree-id2300 . -1) (undo-tree-id2301 . -1) (undo-tree-id2302 . -1) (undo-tree-id2303 . -1) (undo-tree-id2304 . -1) (undo-tree-id2305 . -1) (undo-tree-id2306 . -1) (undo-tree-id2307 . -1) (undo-tree-id2308 . -1) (undo-tree-id2309 . -1) (undo-tree-id2310 . -1) (undo-tree-id2311 . -1) (undo-tree-id2312 . -1) (undo-tree-id2313 . -1) (undo-tree-id2314 . -1) (undo-tree-id2315 . -1) (undo-tree-id2316 . -1) (undo-tree-id2317 . -1) (undo-tree-id2318 . -1) (undo-tree-id2319 . -1) (undo-tree-id2320 . -1) (undo-tree-id2321 . -1) (undo-tree-id2322 . -1) (undo-tree-id2323 . -1) (undo-tree-id2324 . -1) (undo-tree-id2325 . -1) (undo-tree-id2326 . -1) (undo-tree-id2327 . -1) (undo-tree-id2328 . -1) (undo-tree-id2329 . -1) (undo-tree-id2330 . -1) (undo-tree-id2331 . -1) (undo-tree-id2332 . -1) (undo-tree-id2333 . -1) (undo-tree-id2334 . -1) (undo-tree-id2335 . -1) (undo-tree-id2336 . -1) (undo-tree-id2337 . -1) (undo-tree-id2338 . -1) (undo-tree-id2339 . -1) (undo-tree-id2340 . -1) (undo-tree-id2341 . -1) (undo-tree-id2342 . -1) (undo-tree-id2343 . -1) (undo-tree-id2344 . -1) (undo-tree-id2345 . -1) 785) nil (26049 50274 854405 72000) 0 nil])
([nil nil ((792 . 793) (t 26049 50274 868880 792000)) nil (26049 50589 974612 633000) 0 nil])
([nil nil ((793 . 807)) nil (26049 50589 974611 914000) 0 nil])
([nil nil ((807 . 812)) nil (26049 50589 974611 356000) 0 nil])
([nil nil ((812 . 814)) nil (26049 50589 974610 793000) 0 nil])
([nil nil ((811 . 826) (#("App" 0 3 (fontified nil)) . 811) (811 . 814) (#("ApplicationInfo" 0 15 (fontified nil)) . -811) (811 . 826) (#("App" 0 3 (face font-lock-type-face fontified t)) . -811) (undo-tree-id2465 . -3) 814) nil (26049 50589 974609 820000) 0 nil])
([nil nil ((826 . 829)) nil (26049 50589 974607 810000) 0 nil])
([nil nil ((830 . 838) (#("            " 0 12 (fontified nil)) . 829) (undo-tree-id2464 . -8) (837 . 841) (828 . 838)) nil (26049 50589 974607 7000) 0 nil])
([nil nil ((829 . 841)) nil (26049 50589 974605 326000) 0 nil])
([nil nil ((841 . 842)) nil (26049 50589 974604 802000) 0 nil])
([nil nil ((841 . 847) (#("s" 0 1 (fontified nil)) . 841) (841 . 842) (#("s_type" 0 6 (fontified nil)) . -841) (841 . 847) (#("s" 0 1 (fontified t)) . -841) (undo-tree-id2463 . -1) 842) nil (26049 50589 974603 795000) 0 nil])
([nil nil ((847 . 850)) nil (26049 50589 974601 920000) 0 nil])
([nil nil ((#("V" 0 1 (face font-lock-type-face fontified t)) . -849) (undo-tree-id2462 . -1) 850) nil (26049 50589 974601 257000) 0 nil])
([nil nil ((849 . 851)) nil (26049 50589 974600 66000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -850) (undo-tree-id2461 . -1) 851) nil (26049 50589 974599 405000) 0 nil])
([nil nil ((850 . 852)) nil (26049 50589 974598 28000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -851) (undo-tree-id2460 . -1) 852) nil (26049 50589 974597 227000) 0 nil])
([nil nil ((851 . 855)) nil (26049 50589 974595 932000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-type-face fontified t)) . -854) (undo-tree-id2459 . -1) 855) nil (26049 50589 974595 176000) 0 nil])
([nil nil ((854 . 857)) nil (26049 50589 974593 896000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t)) . -850) (undo-tree-id2452 . -1) (#(":" 0 1 (fontified t)) . -851) (undo-tree-id2453 . -1) (#(":" 0 1 (fontified t)) . -852) (undo-tree-id2454 . -1) (#("S" 0 1 (face font-lock-type-face fontified t)) . -853) (undo-tree-id2455 . -1) (#("T" 0 1 (face font-lock-type-face fontified t)) . -854) (undo-tree-id2456 . -1) (#("R" 0 1 (face font-lock-type-face fontified t)) . -855) (undo-tree-id2457 . -1) (#("U" 0 1 (face font-lock-type-face fontified t)) . -856) (undo-tree-id2458 . -1) 857) nil (26049 50589 974592 297000) 0 nil])
([nil nil ((850 . 851)) nil (26049 50589 974586 845000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t)) . -849) (undo-tree-id2450 . -1) (#("S" 0 1 (fontified t)) . -850) (undo-tree-id2451 . -1) 851) nil (26049 50589 974586 11000) 0 nil])
([nil nil ((849 . 858)) nil (26049 50589 974584 8000) 0 nil])
([nil nil ((#("STRUCTURE" 0 9 (face font-lock-type-face fontified t)) . -849) (undo-tree-id2449 . -9) 858) nil (26049 50589 974583 308000) 0 nil])
([nil nil ((849 . 850)) nil (26049 50589 974582 7000) 0 nil])
([nil nil ((#("B" 0 1 (face font-lock-type-face fontified t)) . -849) (undo-tree-id2448 . -1) 850) nil (26049 50589 974581 311000) 0 nil])
([nil nil ((849 . 851)) nil (26049 50589 974580 57000) 0 nil])
([nil nil ((#("V" 0 1 (face font-lock-type-face fontified t)) . -849) (undo-tree-id2446 . -1) (#(";" 0 1 (fontified t)) . -850) (undo-tree-id2447 . -1) 851) nil (26049 50589 974579 141000) 0 nil])
([nil nil ((849 . 851)) nil (26049 50589 974577 120000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -849) (undo-tree-id2444 . -1) (#("v" 0 1 (fontified t)) . -850) (undo-tree-id2445 . -1) 851) nil (26049 50589 974576 265000) 0 nil])
([nil nil ((849 . 862)) nil (26049 50589 974574 203000) 0 nil])
([nil nil ((862 . 866)) nil (26049 50589 974573 652000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -865) (undo-tree-id2443 . -1) 866) nil (26049 50589 974572 924000) 0 nil])
([nil nil ((865 . 866)) nil (26049 50589 974571 706000) 0 nil])
([nil nil ((#("structuretype" 0 13 (fontified t)) . -853) (undo-tree-id2442 . -13) 866) nil (26049 50589 974570 916000) 0 nil])
([nil nil ((853 . 864)) nil (26049 50589 974569 585000) 0 nil])
([nil nil ((864 . 866)) nil (26049 50589 974569 67000) 0 nil])
([nil nil ((853 . 866) (#("structuretype" 0 13 (fontified nil)) . 853) (853 . 866) (#("StructureType" 0 13 (fontified nil)) . -853) (853 . 866) (#("structuretype" 0 13 (fontified t)) . -853) (undo-tree-id2441 . -13) 866) nil (26049 50589 974567 971000) 0 nil])
([nil nil ((866 . 871)) nil (26049 50589 974566 12000) 0 nil])
([nil nil ((868 . 884) (#("APP" 0 3 (fontified nil)) . 868) (868 . 871) (#("APPLICATION_INFO" 0 16 (fontified nil)) . -868) (868 . 884) (#("APP" 0 3 (face font-lock-type-face fontified t)) . -868) (undo-tree-id2440 . -3) 871) nil (26049 50589 974565 52000) 0 nil])
([nil nil ((884 . 885)) nil (26049 50589 974563 179000) 0 nil])
([nil nil ((885 . 898)) nil (26049 50589 974562 620000) 0 nil])
([nil nil ((898 . 899)) nil (26049 50589 974562 86000) 0 nil])
([nil nil ((898 . 916) (#("p" 0 1 (fontified nil)) . 898) (898 . 899) (#("p_application_name" 0 18 (fontified nil)) . -898) (898 . 916) (#("p" 0 1 (fontified t)) . -898) (undo-tree-id2438 . -1) (undo-tree-id2439 . -1) 899) nil (26049 50589 974561 10000) 0 nil])
([nil nil ((916 . 918)) nil (26049 50589 974558 498000) 0 nil])
([nil nil ((783 . 792)) nil (26049 50589 974557 990000) 0 nil])
([nil nil ((792 . 811)) nil (26049 50589 974557 456000) 0 nil])
([nil nil ((1 . 25) (807 . 807) (807 . 814) (#("CStr" 0 4 (fontified nil)) . 807) (807 . 811) (#("CString (use std::ffi::CString)" 0 31 (fontified nil)) . -807) (807 . 838) (#("CStr" 0 4 (face font-lock-type-face fontified t)) . -807) (undo-tree-id2437 . -4) 811) nil (26049 50589 974556 447000) 0 nil])
([nil nil ((838 . 840)) nil (26049 50589 974554 250000) 0 nil])
([nil nil ((840 . 841)) nil (26049 50589 974553 686000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 844 855 nil nil nil t #s(yas--exit 856 nil))) #s(yas--exit 856 nil) 18 nil #s(yas--field 1 844 855 nil nil nil t #s(yas--exit 856 nil)) nil nil)) (840 . 846) (#("new(${1:t})$0" 0 13 (fontified nil)) . 840) (840 . 853) (#("n" 0 1 (fontified nil)) . 840) (840 . 841) (#("new(…)" 0 6 (fontified nil)) . -840) (840 . 846) (#("n" 0 1 (fontified t)) . -840) (undo-tree-id2436 . -1) 841) nil (26049 50589 974552 543000) 0 nil])
([nil nil ((845 . 846) (#("t" 0 1 (fontified nil)) . 845) (844 . 845)) nil (26049 50589 974550 176000) 0 nil])
([nil nil ((845 . 846)) nil (26049 50589 974549 298000) 0 nil])
([nil nil ((#("H" 0 1 (face font-lock-string-face fontified t)) . -845) (undo-tree-id2435 . -1) 846) nil (26049 50589 974548 583000) 0 nil])
([nil nil ((845 . 846)) nil (26049 50589 974547 375000) 0 nil])
([nil nil ((846 . 853)) nil (26049 50589 974546 796000) 0 nil])
([nil nil ((#("a" 0 1 (face font-lock-string-face fontified t)) . -852) (undo-tree-id2434 . -1) 853) nil (26049 50589 974546 89000) 0 nil])
([nil nil ((852 . 853)) nil (26049 50589 974544 767000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t)) . -851) (undo-tree-id2432 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -852) (undo-tree-id2433 . -1) 853) nil (26049 50589 974543 929000) 0 nil])
([nil nil ((851 . 854)) nil (26049 50589 974541 420000) 0 nil])
([nil nil ((apply yas--snippet-revive 840 856 #s(yas--snippet nil (#s(yas--field 1 844 855 nil nil nil t #s(yas--exit 856 nil))) #s(yas--exit 856 nil) 18 nil #s(yas--field 1 844 855 nil nil nil t #s(yas--exit 856 nil)) nil nil))) nil (26049 50589 974540 915000) 0 nil])
([nil nil ((856 . 858)) nil (26049 50589 974540 414000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -856) (undo-tree-id2430 . -1) (#("." 0 1 (fontified t)) . -857) (undo-tree-id2431 . -1) 858) nil (26049 50589 974539 552000) 0 nil])
([nil nil ((856 . 858)) nil (26049 50589 974537 540000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -857) (undo-tree-id2429 . -1) 858) nil (26049 50589 974536 813000) 0 nil])
([nil nil ((857 . 858)) nil (26049 50589 974535 350000) 0 nil])
([nil nil ((apply yas--snippet-revive 857 865 #s(yas--snippet nil nil #s(yas--exit 865 nil) 19 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 865 nil) 19 nil nil nil nil)) (857 . 865) (#("unwrap()$0" 0 10 (fontified nil)) . 857) (857 . 867) (#("u" 0 1 (fontified nil)) . 857) (857 . 858) (#("unwrap()" 0 8 (fontified nil)) . -857) (857 . 865) (#("u" 0 1 (fontified t)) . -857) (undo-tree-id2428 . -1) 858) nil (26049 50589 974534 156000) 0 nil])
([nil nil ((865 . 866)) nil (26049 50589 974531 841000) 0 nil])
([nil nil ((1001 . 1002)) nil (26049 50589 974531 320000) 0 nil])
([nil nil ((1001 . 1009) (#("a" 0 1 (fontified nil)) . 1001) (1001 . 1002) (#("app_name" 0 8 (fontified nil)) . -1001) (1001 . 1009) (#("a" 0 1 (fontified t)) . -1001) (undo-tree-id2427 . -1) 1002) nil (26049 50589 974530 269000) 0 nil])
([nil nil ((1009 . 1012)) nil (26049 50589 974528 443000) 0 nil])
([nil nil ((apply yas--snippet-revive 1010 1018 #s(yas--snippet nil nil #s(yas--exit 1018 nil) 20 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1018 nil) 20 nil nil nil nil)) (1010 . 1018) (#("as_ptr()$0" 0 10 (fontified nil)) . 1010) (1010 . 1020) (#("as" 0 2 (fontified nil)) . 1010) (1010 . 1012) (#("as_ptr()" 0 8 (fontified nil)) . -1010) (1010 . 1018) (#("as" 0 2 (face font-lock-keyword-face fontified t)) . -1010) (undo-tree-id2426 . -2) 1012) nil (26049 50589 974526 743000) 0 nil])
([nil nil ((1018 . 1019)) nil (26049 50589 974524 339000) 0 nil])
([nil nil ((1019 . 1032)) nil (26049 50589 974523 808000) 0 nil])
([nil nil ((1032 . 1035)) nil (26049 50589 974523 255000) 0 nil])
([nil nil ((1032 . 1051) (#("aoo" 0 3 (fontified nil)) . 1032) (1032 . 1035) (#("application_version" 0 19 (fontified nil)) . -1032) (1032 . 1051) (#("aoo" 0 3 (fontified t)) . -1032) (undo-tree-id2424 . -3) (undo-tree-id2425 . -3) 1035) nil (26049 50589 974522 212000) 0 nil])
([nil nil ((1051 . 1052)) nil (26049 50589 974519 609000) 0 nil])
([nil nil ((1052 . 1054)) nil (26049 50589 974519 64000) 0 nil])
([nil nil ((#("V" 0 1 (face font-lock-type-face fontified t)) . -1053) (undo-tree-id2422 . -1) (undo-tree-id2423 . -1) 1054) nil (26049 50589 974518 373000) 0 nil])
([nil nil ((1053 . 1058)) nil (26049 50589 974516 578000) 0 nil])
([nil nil ((#("M" 0 1 (face font-lock-type-face fontified t)) . -1057) (undo-tree-id2420 . -1) (undo-tree-id2421 . -1) 1058) nil (26049 50589 974515 886000) 0 nil])
([nil nil ((1057 . 1061)) nil (26049 50589 974513 964000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1070 1071 nil nil nil t #s(yas--field 2 1073 1078 nil nil nil nil #s(yas--field 3 1080 1085 nil nil nil nil #s(yas--exit 1086 nil)))) #s(yas--field 2 1073 1078 nil nil nil nil #s(yas--field 3 1080 1085 nil nil nil nil #s(yas--exit 1086 nil))) #s(yas--field 3 1080 1085 nil nil nil nil #s(yas--exit 1086 nil))) #s(yas--exit 1086 nil) 21 nil #s(yas--field 1 1070 1071 nil nil nil t #s(yas--field 2 1073 1078 nil nil nil nil #s(yas--field 3 1080 1085 nil nil nil nil #s(yas--exit 1086 nil)))) nil nil)) (1057 . 1090) (#("make_version(${1:major}, ${2:minor}, ${3:patch})$0" 0 50 (fontified nil)) . 1057) (1057 . 1107) (#("make" 0 4 (fontified nil)) . 1057) (1057 . 1061) (#("make_version(…)" 0 15 (fontified nil)) . -1057) (1057 . 1072) (#("make" 0 4 (fontified t)) . -1057) (undo-tree-id2418 . -4) (undo-tree-id2419 . -4) 1061) nil (26049 50589 974512 589000) 0 nil])
([nil nil ((#("major" 0 5 (fontified nil)) . 1071) (1070 . 1071)) nil (26049 50589 974509 674000) 0 nil])
([nil nil ((apply yas--snippet-revive 1057 1086 #s(yas--snippet nil (#s(yas--field 1 1070 1071 nil nil nil t #s(yas--field 2 1073 1078 nil nil nil nil #s(yas--field 3 1080 1085 nil nil nil nil #s(yas--exit 1086 nil)))) #s(yas--field 2 1073 1078 nil nil nil nil #s(yas--field 3 1080 1085 nil nil nil nil #s(yas--exit 1086 nil))) #s(yas--field 3 1080 1085 nil nil nil nil #s(yas--exit 1086 nil))) #s(yas--exit 1086 nil) 21 nil #s(yas--field 1 1070 1071 nil nil nil t #s(yas--field 2 1073 1078 nil nil nil nil #s(yas--field 3 1080 1085 nil nil nil nil #s(yas--exit 1086 nil)))) nil nil))) nil (26049 50589 974508 959000) 0 nil])
([nil nil ((#("minor" 0 5 (fontified t)) . -1073) (undo-tree-id2416 . -5) (undo-tree-id2417 . -5) 1078) nil (26049 50589 974508 215000) 0 nil])
([nil nil ((1073 . 1074)) nil (26049 50589 974506 261000) 0 nil])
([nil nil ((#("patch" 0 5 (fontified t)) . -1076) (undo-tree-id2414 . -5) (undo-tree-id2415 . -5) 1081) nil (26049 50589 974505 470000) 0 nil])
([nil nil ((1076 . 1077)) nil (26049 50589 974503 585000) 0 nil])
([nil nil ((1078 . 1079)) nil (26049 50589 974503 60000) 0 nil])
([nil nil ((1079 . 1092)) nil (26049 50589 974502 522000) 0 nil])
([nil nil ((1092 . 1094)) nil (26049 50589 974501 889000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -1092) (undo-tree-id2410 . -1) (undo-tree-id2411 . -1) (#("n" 0 1 (fontified t)) . -1093) (undo-tree-id2412 . -1) (undo-tree-id2413 . -1) 1094) nil (26049 50589 974500 895000) 0 nil])
([nil nil ((1092 . 1093)) nil (26049 50589 974497 468000) 0 nil])
([nil nil ((1092 . 1105) (#("p" 0 1 (fontified nil)) . 1092) (1092 . 1093) (#("p_engine_name" 0 13 (fontified nil)) . -1092) (1092 . 1105) (#("p" 0 1 (fontified t)) . -1092) (undo-tree-id2408 . -1) (undo-tree-id2409 . -1) 1093) nil (26049 50589 974496 278000) 0 nil])
([nil nil ((1105 . 1106)) nil (26049 50589 974493 555000) 0 nil])
([nil nil ((1106 . 1107)) nil (26049 50589 974493 3000) 0 nil])
([nil nil ((866 . 875)) nil (26049 50589 974492 473000) 0 nil])
([nil nil ((nil rear-nonsticky nil 940 . 941) (nil fontified nil 875 . 941) (875 . 941)) nil (26049 50589 974491 771000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -875) 867) nil (26049 50589 974490 715000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . -932) (undo-tree-id2407 . -1) 933) nil (26049 50589 974489 889000) 0 nil])
([nil nil ((1173 . 1174)) nil (26049 50589 974488 273000) 0 nil])
([nil nil ((1173 . 1184) (#("e" 0 1 (fontified nil)) . 1173) (1173 . 1174) (#("engine_name" 0 11 (fontified nil)) . -1173) (1173 . 1184) (#("e" 0 1 (fontified t)) . -1173) (undo-tree-id2406 . -1) 1174) nil (26049 50589 974487 293000) 0 nil])
([nil nil ((1184 . 1187)) nil (26049 50589 974485 344000) 0 nil])
([nil nil ((apply yas--snippet-revive 1185 1193 #s(yas--snippet nil nil #s(yas--exit 1193 nil) 22 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1193 nil) 22 nil nil nil nil)) (1185 . 1193) (#("as_ptr()$0" 0 10 (fontified nil)) . 1185) (1185 . 1195) (#("as" 0 2 (fontified nil)) . 1185) (1185 . 1187) (#("as_ptr()" 0 8 (fontified nil)) . -1185) (1185 . 1193) (#("as" 0 2 (face font-lock-keyword-face fontified t)) . -1185) (undo-tree-id2405 . -2) 1187) nil (26049 50589 974484 59000) 0 nil])
([nil nil ((1193 . 1194)) nil (26049 50589 974481 284000) 0 nil])
([nil nil ((1194 . 1207)) nil (26049 50589 974480 687000) 0 nil])
([nil nil ((1207 . 1208)) nil (26049 50589 974480 127000) 0 nil])
([nil nil ((1207 . 1221) (#("e" 0 1 (fontified nil)) . 1207) (1207 . 1208) (#("engine_version" 0 14 (fontified nil)) . -1207) (1207 . 1221) (#("e" 0 1 (fontified t)) . -1207) (undo-tree-id2403 . -1) (undo-tree-id2404 . -1) 1208) nil (26049 50589 974478 896000) 0 nil])
([nil nil ((1221 . 1223)) nil (26049 50589 974475 920000) 0 nil])
([nil nil ((1223 . 1227)) nil (26049 50589 974475 195000) 0 nil])
([nil nil ((#("L" 0 1 (fontified t)) . -1225) (undo-tree-id2399 . -1) (undo-tree-id2400 . -1) (#("L" 0 1 (fontified t)) . -1226) (undo-tree-id2401 . -1) (undo-tree-id2402 . -1) 1227) nil (26049 50589 974473 937000) 0 nil])
([nil nil ((1225 . 1229)) nil (26049 50589 976126 814000) 0 nil])
([nil nil ((1229 . 1231)) nil (26049 50642 272704 192000) 0 nil] [nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1244 1251 nil nil nil nil #s(yas--field 2 1253 1258 nil nil nil nil #s(yas--field 3 1260 1265 nil nil nil nil #s(yas--field 4 1267 1272 nil nil nil nil #s(yas--exit 1273 nil))))) #s(yas--field 2 1253 1258 nil nil nil nil #s(yas--field 3 1260 1265 nil nil nil nil #s(yas--field 4 1267 1272 nil nil nil nil #s(yas--exit 1273 nil)))) #s(yas--field 3 1260 1265 nil nil nil nil #s(yas--field 4 1267 1272 nil nil nil nil #s(yas--exit 1273 nil))) #s(yas--field 4 1267 1272 nil nil nil nil #s(yas--exit 1273 nil))) #s(yas--exit 1273 nil) 23 nil #s(yas--field 1 1244 1251 nil nil nil nil #s(yas--field 2 1253 1258 nil nil nil nil #s(yas--field 3 1260 1265 nil nil nil nil #s(yas--field 4 1267 1272 nil nil nil nil #s(yas--exit 1273 nil))))) nil nil)) (1227 . 1273) (#("make_api_version(${1:variant}, ${2:major}, ${3:minor}, ${4:patch})$0" 0 68 (fontified nil)) . 1227) (1227 . 1295) (#("ma" 0 2 (fontified nil)) . 1227) (1227 . 1229) (#("make_api_version(…)" 0 19 (fontified nil)) . -1227) (1227 . 1246) (#("ma" 0 2 (fontified t)) . -1227) (undo-tree-id2390 . -2) (undo-tree-id2391 . -2) (undo-tree-id2392 . -1) (undo-tree-id2393 . -2) (undo-tree-id2394 . -2) (undo-tree-id2395 . -2) (undo-tree-id2396 . -2) (undo-tree-id2397 . -2) (undo-tree-id2398 . -2) 1229) ((1227 . 1229) (#("make_api_version(…)" 0 19 (fontified nil)) . 1227) (1227 . 1246) (#("ma" 0 2 (fontified nil)) . 1227) (1227 . 1229) (#("make_api_version(${1:variant}, ${2:major}, ${3:minor}, ${4:patch})$0" 0 68 (fontified nil)) . 1227) (1227 . 1295) (#("make_api_version(variant, major, minor, patch)" 0 16 (fontified t) 16 17 (face (rainbow-delimiters-depth-4-face) fontified t) 17 45 (fontified t) 45 46 (face (rainbow-delimiters-depth-4-face) fontified t)) . 1227) (undo-tree-id2466 . -17) (undo-tree-id2467 . -17) (apply yas--snippet-revive 1227 1273 #s(yas--snippet nil (#s(yas--field 1 1244 1251 nil nil nil nil #s(yas--field 2 1253 1258 nil nil nil nil #s(yas--field 3 1260 1265 nil nil nil nil #s(yas--field 4 1267 1272 nil nil nil nil #s(yas--exit 1273 nil))))) #s(yas--field 2 1253 1258 nil nil nil nil #s(yas--field 3 1260 1265 nil nil nil nil #s(yas--field 4 1267 1272 nil nil nil nil #s(yas--exit 1273 nil)))) #s(yas--field 3 1260 1265 nil nil nil nil #s(yas--field 4 1267 1272 nil nil nil nil #s(yas--exit 1273 nil))) #s(yas--field 4 1267 1272 nil nil nil nil #s(yas--exit 1273 nil))) #s(yas--exit 1273 nil) 23 nil #s(yas--field 1 1244 1251 nil nil nil nil #s(yas--field 2 1253 1258 nil nil nil nil #s(yas--field 3 1260 1265 nil nil nil nil #s(yas--field 4 1267 1272 nil nil nil nil #s(yas--exit 1273 nil))))) nil nil))) (26049 50589 974464 444000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1240 1245 nil nil nil nil #s(yas--field 2 1247 1252 nil nil nil nil #s(yas--field 3 1254 1259 nil nil nil nil #s(yas--exit 1260 nil)))) #s(yas--field 2 1247 1252 nil nil nil nil #s(yas--field 3 1254 1259 nil nil nil nil #s(yas--exit 1260 nil))) #s(yas--field 3 1254 1259 nil nil nil nil #s(yas--exit 1260 nil))) #s(yas--exit 1260 nil) 24 nil #s(yas--field 1 1240 1245 nil nil nil nil #s(yas--field 2 1247 1252 nil nil nil nil #s(yas--field 3 1254 1259 nil nil nil nil #s(yas--exit 1260 nil)))) nil nil)) (1227 . 1260) (#("make_version(${1:major}, ${2:minor}, ${3:patch})$0" 0 50 (fontified nil)) . 1227) (1227 . 1277) (#("make" 0 4 (fontified nil)) . 1227) (1227 . 1231) (#("make_version(…)" 0 15 (fontified nil)) . -1227) (1227 . 1242) (#("make" 0 4 (fontified t)) . -1227) (undo-tree-id2507 . -4) (undo-tree-id2508 . -4) 1231) nil (26049 50642 272702 966000) 0 nil])
nil
([nil nil ((apply yas--snippet-revive 1227 1260 #s(yas--snippet nil (#s(yas--field 1 1240 1245 nil nil nil nil #s(yas--field 2 1247 1252 nil nil nil nil #s(yas--field 3 1254 1259 nil nil nil nil #s(yas--exit 1260 nil)))) #s(yas--field 2 1247 1252 nil nil nil nil #s(yas--field 3 1254 1259 nil nil nil nil #s(yas--exit 1260 nil))) #s(yas--field 3 1254 1259 nil nil nil nil #s(yas--exit 1260 nil))) #s(yas--exit 1260 nil) 24 nil #s(yas--field 1 1240 1245 nil nil nil nil #s(yas--field 2 1247 1252 nil nil nil nil #s(yas--field 3 1254 1259 nil nil nil nil #s(yas--exit 1260 nil)))) nil nil))) nil (26049 50642 272700 111000) 0 nil])
([nil nil ((#("major" 0 5 (fontified t)) . -1240) (undo-tree-id2506 . -5) 1245) nil (26049 50642 272699 474000) 0 nil])
([nil nil ((1240 . 1241)) nil (26049 50642 272698 317000) 0 nil])
([nil nil ((#("minor" 0 5 (fontified t)) . -1243) (undo-tree-id2505 . -5) 1248) nil (26049 50642 272697 591000) 0 nil])
([nil nil ((1243 . 1244)) nil (26049 50642 272696 299000) 0 nil])
([nil nil ((#("patch" 0 5 (fontified t)) . -1246) (undo-tree-id2504 . -5) 1251) nil (26049 50642 272695 609000) 0 nil])
([nil nil ((1246 . 1247)) nil (26049 50642 272694 459000) 0 nil])
([nil nil ((1248 . 1249)) nil (26049 50642 272693 956000) 0 nil])
([nil nil ((1249 . 1262)) nil (26049 50642 272693 414000) 0 nil])
([nil nil ((1262 . 1263)) nil (26049 50642 272692 860000) 0 nil])
([nil nil ((1262 . 1273) (#("a" 0 1 (fontified nil)) . 1262) (1262 . 1263) (#("api_version" 0 11 (fontified nil)) . -1262) (1262 . 1273) (#("a" 0 1 (fontified t)) . -1262) (undo-tree-id2502 . -1) (undo-tree-id2503 . -1) 1263) nil (26049 50642 272691 552000) 0 nil])
([nil nil ((1273 . 1276)) nil (26049 50642 272689 314000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -1274) (undo-tree-id2498 . -1) (undo-tree-id2499 . -1) (#(" " 0 1 (fontified t)) . -1275) (undo-tree-id2500 . -1) (undo-tree-id2501 . -1) 1276) nil (26049 50642 272688 158000) 0 nil])
([nil nil ((1274 . 1279)) nil (26049 50642 272684 918000) 0 nil])
([nil nil ((#("L" 0 1 (fontified t)) . -1277) (undo-tree-id2494 . -1) (undo-tree-id2495 . -1) (#("L" 0 1 (fontified t)) . -1278) (undo-tree-id2496 . -1) (undo-tree-id2497 . -1) 1279) nil (26049 50642 272683 634000) 0 nil])
([nil nil ((1277 . 1279)) nil (26049 50642 272680 634000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1296 1303 nil nil nil nil #s(yas--field 2 1305 1310 nil nil nil nil #s(yas--field 3 1312 1317 nil nil nil nil #s(yas--field 4 1319 1324 nil nil nil nil #s(yas--exit 1325 nil))))) #s(yas--field 2 1305 1310 nil nil nil nil #s(yas--field 3 1312 1317 nil nil nil nil #s(yas--field 4 1319 1324 nil nil nil nil #s(yas--exit 1325 nil)))) #s(yas--field 3 1312 1317 nil nil nil nil #s(yas--field 4 1319 1324 nil nil nil nil #s(yas--exit 1325 nil))) #s(yas--field 4 1319 1324 nil nil nil nil #s(yas--exit 1325 nil))) #s(yas--exit 1325 nil) 25 nil #s(yas--field 1 1296 1303 nil nil nil nil #s(yas--field 2 1305 1310 nil nil nil nil #s(yas--field 3 1312 1317 nil nil nil nil #s(yas--field 4 1319 1324 nil nil nil nil #s(yas--exit 1325 nil))))) nil nil)) (1279 . 1325) (#("make_api_version(${1:variant}, ${2:major}, ${3:minor}, ${4:patch})$0" 0 68 (fontified nil)) . 1279) (1279 . 1347) (#("make_api_version(…)" 0 19 (fontified nil)) . -1279) (1279 . 1298)) nil (26049 50642 272679 866000) 0 nil])
([nil nil ((apply yas--snippet-revive 1279 1325 #s(yas--snippet nil (#s(yas--field 1 1296 1303 nil nil nil nil #s(yas--field 2 1305 1310 nil nil nil nil #s(yas--field 3 1312 1317 nil nil nil nil #s(yas--field 4 1319 1324 nil nil nil nil #s(yas--exit 1325 nil))))) #s(yas--field 2 1305 1310 nil nil nil nil #s(yas--field 3 1312 1317 nil nil nil nil #s(yas--field 4 1319 1324 nil nil nil nil #s(yas--exit 1325 nil)))) #s(yas--field 3 1312 1317 nil nil nil nil #s(yas--field 4 1319 1324 nil nil nil nil #s(yas--exit 1325 nil))) #s(yas--field 4 1319 1324 nil nil nil nil #s(yas--exit 1325 nil))) #s(yas--exit 1325 nil) 25 nil #s(yas--field 1 1296 1303 nil nil nil nil #s(yas--field 2 1305 1310 nil nil nil nil #s(yas--field 3 1312 1317 nil nil nil nil #s(yas--field 4 1319 1324 nil nil nil nil #s(yas--exit 1325 nil))))) nil nil))) nil (26049 50642 272678 494000) 0 nil])
([nil nil ((#("patch)" 0 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-4-face) fontified t)) . -1319) (undo-tree-id2492 . -6) (undo-tree-id2493 . -6) 1325) nil (26049 50642 272677 836000) 0 nil])
([nil nil ((#("minor, " 0 7 (fontified t)) . -1312) (undo-tree-id2490 . -7) (undo-tree-id2491 . -7) 1319) nil (26049 50642 272676 1000) 0 nil])
([nil nil ((#("major, " 0 7 (fontified t)) . -1305) (undo-tree-id2488 . -7) (undo-tree-id2489 . -7) 1312) nil (26049 50642 272674 74000) 0 nil])
([nil nil ((#("variant, " 0 9 (fontified t)) . -1296) (undo-tree-id2486 . -9) (undo-tree-id2487 . -9) 1305) nil (26049 50642 272672 57000) 0 nil])
([nil nil ((#("version(" 0 7 (fontified t) 7 8 (face (rainbow-delimiters-depth-4-face) fontified t)) . -1288) (undo-tree-id2484 . -8) (undo-tree-id2485 . -8) 1296) nil (26049 50642 272669 850000) 0 nil])
([nil nil ((#("api_" 0 4 (fontified t)) . -1284) (undo-tree-id2482 . -4) (undo-tree-id2483 . -4) 1288) nil (26049 50642 272668 21000) 0 nil])
([nil nil ((#("make_" 0 5 (fontified t)) . -1279) (undo-tree-id2480 . -5) (undo-tree-id2481 . -5) 1284) nil (26049 50642 272665 774000) 0 nil])
([nil nil ((1279 . 1281)) nil (26049 50642 272663 834000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -1279) (undo-tree-id2475 . -1) (undo-tree-id2476 . -1) (undo-tree-id2477 . -1) (#("o" 0 1 (fontified t)) . -1280) (undo-tree-id2478 . -1) (undo-tree-id2479 . -1) 1281) nil (26049 50642 272662 878000) 0 nil])
([nil nil ((1279 . 1280)) nil (26049 50642 272658 368000) 0 nil])
([nil nil ((1279 . 1294) (#("A" 0 1 (fontified nil)) . 1279) (1279 . 1280) (#("API_VERSION_1_0" 0 15 (fontified nil)) . -1279) (1279 . 1294) (#("A" 0 1 (face font-lock-type-face fontified t)) . -1279) (undo-tree-id2468 . -1) (undo-tree-id2469 . -1) (undo-tree-id2470 . -1) (undo-tree-id2471 . -1) (undo-tree-id2472 . -1) (undo-tree-id2473 . -1) (undo-tree-id2474 . -1) 1280) nil (26049 50642 272656 144000) 0 nil])
([nil nil ((1294 . 1295)) nil (26049 50642 272642 303000) 0 nil])
([nil nil ((1034 . 1047) (t 26049 50642 295569 882000)) nil (26049 50670 479602 174000) 0 nil])
([nil nil ((1047 . 1048)) nil (26049 50670 479601 393000) 0 nil])
([nil nil ((1047 . 1053) (#("p" 0 1 (fontified nil)) . 1047) (1047 . 1048) (#("p_next" 0 6 (fontified nil)) . -1047) (1047 . 1053) (#("p" 0 1 (fontified t)) . -1047) (undo-tree-id2543 . -1) (undo-tree-id2544 . -1) 1048) nil (26049 50670 479600 266000) 0 nil])
([nil nil ((1053 . 1058)) nil (26049 50670 479597 813000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -1055) (undo-tree-id2515 . -1) (undo-tree-id2516 . -1) (undo-tree-id2517 . -1) (undo-tree-id2518 . -1) (undo-tree-id2519 . -1) (undo-tree-id2520 . -1) (undo-tree-id2521 . -1) (undo-tree-id2522 . -1) (undo-tree-id2523 . -1) (undo-tree-id2524 . -1) (undo-tree-id2525 . -1) (undo-tree-id2526 . -1) (undo-tree-id2527 . -1) (#("t" 0 1 (fontified t)) . -1056) (undo-tree-id2528 . -1) (undo-tree-id2529 . -1) (undo-tree-id2530 . -1) (undo-tree-id2531 . -1) (undo-tree-id2532 . -1) (undo-tree-id2533 . -1) (undo-tree-id2534 . -1) (undo-tree-id2535 . -1) (undo-tree-id2536 . -1) (undo-tree-id2537 . -1) (#("r" 0 1 (fontified t)) . -1057) (undo-tree-id2538 . -1) (undo-tree-id2539 . -1) (undo-tree-id2540 . -1) (undo-tree-id2541 . -1) (undo-tree-id2542 . -1) 1058) nil (26049 50670 479595 500000) 0 nil])
([nil nil ((1055 . 1066)) nil (26049 50670 479576 586000) 0 nil])
([nil nil ((apply yas--snippet-revive 1065 1071 #s(yas--snippet nil nil #s(yas--exit 1071 nil) 26 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1071 nil) 26 nil nil nil nil)) (1065 . 1071) (#("null()$0" 0 8 (fontified nil)) . 1065) (1065 . 1073) (#("n" 0 1 (fontified nil)) . 1065) (1065 . 1066) (#("null()" 0 6 (fontified nil)) . -1065) (1065 . 1071) (#("n" 0 1 (fontified t)) . -1065) (undo-tree-id2509 . -1) (undo-tree-id2510 . -1) (undo-tree-id2511 . -1) (undo-tree-id2512 . -1) (undo-tree-id2513 . -1) (undo-tree-id2514 . -1) 1066) nil (26049 50670 479573 934000) 0 nil])
([nil nil ((1071 . 1072)) nil (26049 50670 479559 725000) 0 nil])
([nil nil ((1345 . 1353) (#("        " 0 8 (fontified nil)) . 1344) (undo-tree-id2626 . -8) (1343 . 1353) (t 26049 50670 505571 591000)) nil (26049 50700 452091 747000) 0 nil])
([nil nil ((#("0)" 0 1 (fontified t) 1 2 (face (rainbow-delimiters-depth-4-face) fontified t)) . -1180) (undo-tree-id2622 . -2) (undo-tree-id2623 . -2) (undo-tree-id2624 . -2) (undo-tree-id2625 . -2) 1182) nil (26049 50700 452089 621000) 0 nil])
([nil nil ((#("0, " 0 3 (fontified t)) . -1177) (undo-tree-id2618 . -3) (undo-tree-id2619 . -3) (undo-tree-id2620 . -3) (undo-tree-id2621 . -3) 1180) nil (26049 50700 451946 424000) 0 nil])
([nil nil ((#("1, " 0 1 (fontified t) 1 3 (fontified t)) . -1174) (undo-tree-id2614 . -3) (undo-tree-id2615 . -3) (undo-tree-id2616 . -3) (undo-tree-id2617 . -3) 1177) nil (26049 50700 451943 76000) 0 nil])
([nil nil ((#("version(" 0 7 (fontified t) 7 8 (face (rainbow-delimiters-depth-4-face) fontified t)) . -1166) (undo-tree-id2610 . -8) (undo-tree-id2611 . -8) (undo-tree-id2612 . -8) (undo-tree-id2613 . -8) 1174) nil (26049 50700 451939 573000) 0 nil])
([nil nil ((#("make_" 0 5 (fontified t)) . -1161) (undo-tree-id2606 . -5) (undo-tree-id2607 . -5) (undo-tree-id2608 . -5) (undo-tree-id2609 . -5) 1166) nil (26049 50700 451936 294000) 0 nil])
([nil nil ((1161 . 1162)) nil (26049 50700 451932 930000) 0 nil])
([nil nil ((#("A" 0 1 (face font-lock-type-face fontified t)) . -1161) (undo-tree-id2605 . -1) 1162) nil (26049 50700 451932 108000) 0 nil])
([nil nil ((1161 . 1164)) nil (26049 50700 451930 600000) 0 nil])
([nil nil ((1161 . 1176) (#("VER" 0 3 (fontified nil)) . 1161) (1161 . 1164) (#("API_VERSION_1_0" 0 15 (fontified nil)) . -1161) (1161 . 1176) (#("VER" 0 3 (face font-lock-type-face fontified t)) . -1161) (undo-tree-id2601 . -3) (undo-tree-id2602 . -3) (undo-tree-id2603 . -3) (undo-tree-id2604 . -3) 1164) nil (26049 50700 451929 467000) 0 nil])
([nil nil ((#("0)" 0 1 (fontified t) 1 2 (face (rainbow-delimiters-depth-4-face) fontified t)) . -1278) (undo-tree-id2594 . -2) (undo-tree-id2595 . -1) (undo-tree-id2596 . -1) (undo-tree-id2597 . -1) (undo-tree-id2598 . -1) (undo-tree-id2599 . -1) (undo-tree-id2600 . -2) 1280) nil (26049 50700 451925 58000) 0 nil])
([nil nil ((#("0, " 0 3 (fontified t)) . -1275) (undo-tree-id2586 . -3) (undo-tree-id2587 . -3) (undo-tree-id2588 . -3) (undo-tree-id2589 . -3) (undo-tree-id2590 . -3) (undo-tree-id2591 . -3) (undo-tree-id2592 . -3) (undo-tree-id2593 . -3) 1278) nil (26049 50700 451919 924000) 0 nil])
([nil nil ((#("1, " 0 1 (fontified t) 1 3 (fontified t)) . -1272) (undo-tree-id2577 . -3) (undo-tree-id2578 . -3) (undo-tree-id2579 . -3) (undo-tree-id2580 . -3) (undo-tree-id2581 . -3) (undo-tree-id2582 . -3) (undo-tree-id2583 . -3) (undo-tree-id2584 . -3) (undo-tree-id2585 . -3) 1275) nil (26049 50700 451914 289000) 0 nil])
([nil nil ((#("version(" 0 7 (fontified t) 7 8 (face (rainbow-delimiters-depth-4-face) fontified t)) . -1264) (undo-tree-id2565 . -1) (undo-tree-id2566 . -1) (undo-tree-id2567 . -8) (undo-tree-id2568 . -8) (undo-tree-id2569 . -8) (undo-tree-id2570 . -8) (undo-tree-id2571 . -8) (undo-tree-id2572 . -8) (undo-tree-id2573 . -8) (undo-tree-id2574 . -8) (undo-tree-id2575 . -8) (undo-tree-id2576 . -8) 1272) nil (26049 50700 451907 196000) 0 nil])
([nil nil ((#("make_" 0 5 (fontified t)) . -1259) (undo-tree-id2550 . -5) (undo-tree-id2551 . -5) (undo-tree-id2552 . -5) (undo-tree-id2553 . -5) (undo-tree-id2554 . -5) (undo-tree-id2555 . -5) (undo-tree-id2556 . -5) (undo-tree-id2557 . -5) (undo-tree-id2558 . -5) (undo-tree-id2559 . -5) (undo-tree-id2560 . -5) (undo-tree-id2561 . -5) (undo-tree-id2562 . -5) (undo-tree-id2563 . -5) (undo-tree-id2564 . -5) 1264) nil (26049 50700 451897 830000) 0 nil])
([nil nil ((1259 . 1260)) nil (26049 50700 451885 629000) 0 nil])
([nil nil ((1259 . 1274) (#("A" 0 1 (fontified nil)) . 1259) (1259 . 1260) (#("API_VERSION_1_0" 0 15 (fontified nil)) . -1259) (1259 . 1274) (#("A" 0 1 (face font-lock-type-face fontified t)) . -1259) (undo-tree-id2545 . -1) (undo-tree-id2546 . -1) (undo-tree-id2547 . -1) (undo-tree-id2548 . -1) (undo-tree-id2549 . -1) 1260) nil (26049 50700 451881 908000) 0 nil])
([nil nil ((1332 . 1340) (t 26049 50700 475573 428000)) nil (26049 50768 864588 239000) 0 nil])
([nil nil ((1340 . 1344)) nil (26049 50768 864587 401000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -1340) (undo-tree-id2637 . -1) (#("r" 0 1 (fontified t)) . -1341) (undo-tree-id2638 . -1) (#("e" 0 1 (fontified t)) . -1342) (undo-tree-id2639 . -1) (#("a" 0 1 (fontified t)) . -1343) (undo-tree-id2640 . -1) 1344) nil (26049 50768 864586 214000) 0 nil])
([nil nil ((1333 . 1341) (#("        " 0 8 (fontified nil)) . 1332) (undo-tree-id2636 . -8) (1340 . 1341)) nil (26049 50768 864581 792000) 0 nil])
([nil nil ((1341 . 1362)) nil (26049 50768 864580 144000) 0 nil])
([nil nil ((1362 . 1364)) nil (26049 50768 864579 553000) 0 nil])
([nil nil ((1364 . 1371)) nil (26049 50768 864578 924000) 0 nil])
([nil nil ((1363 . 1381) (#("Instance" 0 8 (fontified nil)) . 1363) (1363 . 1371) (#("InstanceCreateInfo" 0 18 (fontified nil)) . -1363) (1363 . 1381) (#("Instance" 0 8 (face font-lock-type-face fontified t)) . -1363) (undo-tree-id2630 . -8) (undo-tree-id2631 . -7) (undo-tree-id2632 . -8) (undo-tree-id2633 . -8) (undo-tree-id2634 . -8) (undo-tree-id2635 . -8) 1371) nil (26049 50768 864577 439000) 0 nil])
([nil nil ((1381 . 1384)) nil (26049 50768 864571 468000) 0 nil])
([nil nil ((1385 . 1393) (#("            " 0 12 (fontified nil)) . 1384) (undo-tree-id2627 . -8) (undo-tree-id2628 . -8) (undo-tree-id2629 . -8) (1392 . 1396) (1383 . 1393)) nil (26049 50768 864570 287000) 0 nil])
([nil nil ((1384 . 1396)) nil (26049 50768 864561 490000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1802 . 1803) (nil fontified nil 1396 . 1803) (1396 . 1803)) nil (26049 50768 864560 537000) 0 nil])
([nil nil ((#("            " 0 12 (fontified t)) . -1396) 1338) nil (26049 50768 864558 928000) 0 nil])
([nil nil ((1331 . 1332)) nil (26049 50768 864557 11000) 0 nil])
([nil nil ((1802 . 1803)) nil (26049 50768 864552 832000) 0 nil])
([nil nil ((1466 . 1467) (t 26049 50768 892244 290000)) nil (26049 50779 715199 279000) 0 nil])
([nil nil ((1467 . 1471)) nil (26049 50779 715198 480000) 0 nil])
([nil nil ((1616 . 1617)) nil (26049 50779 715197 366000) 0 nil])
([nil nil ((1617 . 1621)) nil (26049 50779 715193 749000) 0 nil])
([nil nil ((1334 . 1342) (#("        " 0 8 (fontified nil)) . 1333) (undo-tree-id2942 . -8) (1332 . 1342) (t 26049 50779 738911 621000)) nil (26049 51192 623122 628000) 0 nil])
([nil nil ((1342 . 1346)) nil (26049 51192 623120 853000) 0 nil])
([nil nil ((1346 . 1361)) nil (26049 51192 623120 189000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1357) (undo-tree-id2938 . -1) (#("a" 0 1 (fontified t)) . -1358) (undo-tree-id2939 . -1) (#("m" 0 1 (fontified t)) . -1359) (undo-tree-id2940 . -1) (#("e" 0 1 (fontified t)) . -1360) (undo-tree-id2941 . -1) 1361) nil (26049 51192 623119 28000) 0 nil])
([nil nil ((1357 . 1365)) nil (26049 51192 623115 131000) 0 nil])
([nil nil ((#("E" 0 1 (face font-lock-type-face fontified t)) . -1364) (undo-tree-id2937 . -1) 1365) nil (26049 51192 623114 344000) 0 nil])
([nil nil ((1364 . 1370)) nil (26049 51192 623112 950000) 0 nil])
([nil nil ((#("E" 0 1 (face font-lock-type-face fontified t)) . -1369) (undo-tree-id2936 . -1) 1370) nil (26049 51192 623112 131000) 0 nil])
([nil nil ((1369 . 1371)) nil (26049 51192 623110 686000) 0 nil])
([nil nil ((1369 . 1379) (#("ex" 0 2 (fontified nil)) . 1369) (1369 . 1371) (#("extensions" 0 10 (fontified nil)) . -1369) (1369 . 1379) (#("ex" 0 2 (fontified t)) . -1369) (undo-tree-id2935 . -2) 1371) nil (26049 51192 623109 581000) 0 nil])
([nil nil ((1379 . 1381)) nil (26049 51192 623107 194000) 0 nil])
([nil nil ((1381 . 1384) (#("khr" 0 3 (fontified nil)) . -1381) (1381 . 1384)) nil (26049 51192 623106 406000) 0 nil])
([nil nil ((1384 . 1387)) nil (26049 51192 623105 476000) 0 nil])
([nil nil ((1386 . 1393) (#("S" 0 1 (fontified nil)) . 1386) (1386 . 1387) (#("Surface" 0 7 (fontified nil)) . -1386) (1386 . 1393) (#("S" 0 1 (face font-lock-type-face fontified t)) . -1386) (undo-tree-id2934 . -1) 1387) nil (26049 51192 623104 344000) 0 nil])
([nil nil ((#("Surface" 0 7 (face font-lock-type-face fontified t)) . -1386) (undo-tree-id2933 . -7) 1393) nil (26049 51192 623101 954000) 0 nil])
([nil nil ((#("khr::" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t)) . -1381) (undo-tree-id2932 . -5) 1386) nil (26049 51192 623100 362000) 0 nil])
([nil nil ((#("extensions::" 0 10 (face font-lock-constant-face fontified t) 10 12 (fontified t)) . -1369) (undo-tree-id2931 . -12) 1381) nil (26049 51192 623098 189000) 0 nil])
([nil nil ((#("ash::" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t)) . -1364) (undo-tree-id2930 . -5) 1369) nil (26049 51192 623096 624000) 0 nil])
([nil nil ((1 . 3)) nil (26049 51192 623095 146000) 0 nil])
([nil nil ((1 . 4)) nil (26049 51192 623094 448000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -2) (undo-tree-id2928 . -1) (#("s" 0 1 (fontified t)) . -3) (undo-tree-id2929 . -1) 4) nil (26049 51192 623093 568000) 0 nil])
([nil nil ((2 . 7)) nil (26049 51192 623091 267000) 0 nil])
([nil nil ((5 . 8) (#("as" 0 2 (fontified nil)) . 5) (5 . 7) (#("ash" 0 3 (fontified nil)) . -5) (5 . 8) (#("as" 0 2 (face font-lock-keyword-face fontified t)) . -5) (undo-tree-id2927 . -2) 7) nil (26049 51192 623090 123000) 0 nil])
([nil nil ((#("ash" 0 3 (face font-lock-constant-face fontified t)) . -5) (undo-tree-id2926 . -3) 8) nil (26049 51192 623087 830000) 0 nil])
([nil nil ((5 . 6)) nil (26049 51192 623086 248000) 0 nil])
([nil nil ((5 . 12) (#("c" 0 1 (fontified nil)) . 5) (5 . 6) (#("crate::" 0 7 (fontified nil)) . -5) (5 . 12) (#("c" 0 1 (face font-lock-constant-face fontified t)) . -5) (undo-tree-id2925 . -1) 6) nil (26049 51192 623085 71000) 0 nil])
([nil nil ((12 . 13)) nil (26049 51192 623082 916000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -12) (undo-tree-id2924 . -1) 13) nil (26049 51192 623082 166000) 0 nil])
([nil nil ((12 . 13)) nil (26049 51192 623080 681000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -12) (undo-tree-id2923 . -1) 13) nil (26049 51192 623079 922000) 0 nil])
([nil nil ((12 . 13)) nil (26049 51192 623078 471000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -12) (undo-tree-id2922 . -1) 13) nil (26049 51192 623077 633000) 0 nil])
([nil nil ((#("crate::" 0 5 (face font-lock-keyword-face fontified t) 5 7 (fontified t)) . -5) (undo-tree-id2921 . -7) 12) nil (26049 51192 623075 864000) 0 nil])
([nil nil ((5 . 8)) nil (26049 51192 623074 241000) 0 nil])
([nil nil ((#("uti" 0 3 (face font-lock-constant-face fontified t)) . -5) (undo-tree-id2920 . -3) 8) nil (26049 51192 623073 336000) 0 nil])
([nil nil ((5 . 8)) nil (26049 51192 623071 578000) 0 nil])
([nil nil ((#("u" 0 1 (face font-lock-constant-face fontified t)) . -5) (undo-tree-id2878 . -1) (undo-tree-id2879 . -1) (undo-tree-id2880 . -1) (undo-tree-id2881 . -1) (undo-tree-id2882 . -1) (undo-tree-id2883 . -1) (undo-tree-id2884 . -1) (undo-tree-id2885 . -1) (undo-tree-id2886 . -1) (undo-tree-id2887 . -1) (undo-tree-id2888 . -1) (undo-tree-id2889 . -1) (undo-tree-id2890 . -1) (undo-tree-id2891 . -1) (undo-tree-id2892 . -1) (undo-tree-id2893 . -1) (undo-tree-id2894 . -1) (undo-tree-id2895 . -1) (#("t" 0 1 (face font-lock-constant-face fontified t)) . -6) (undo-tree-id2896 . -1) (undo-tree-id2897 . -1) (undo-tree-id2898 . -1) (undo-tree-id2899 . -1) (undo-tree-id2900 . -1) (undo-tree-id2901 . -1) (undo-tree-id2902 . -1) (undo-tree-id2903 . -1) (undo-tree-id2904 . -1) (undo-tree-id2905 . -1) (undo-tree-id2906 . -1) (undo-tree-id2907 . -1) (undo-tree-id2908 . -1) (undo-tree-id2909 . -1) (#("i" 0 1 (face font-lock-constant-face fontified t)) . -7) (undo-tree-id2910 . -1) (undo-tree-id2911 . -1) (undo-tree-id2912 . -1) (undo-tree-id2913 . -1) (undo-tree-id2914 . -1) (undo-tree-id2915 . -1) (undo-tree-id2916 . -1) (undo-tree-id2917 . -1) (undo-tree-id2918 . -1) (undo-tree-id2919 . -1) 8) nil (26049 51192 623068 642000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -1) (undo-tree-id2694 . -1) (undo-tree-id2695 . -1) (undo-tree-id2696 . -1) (undo-tree-id2697 . -1) (undo-tree-id2698 . -1) (undo-tree-id2699 . -1) (undo-tree-id2700 . -1) (undo-tree-id2701 . -1) (undo-tree-id2702 . -1) (undo-tree-id2703 . -1) (undo-tree-id2704 . -1) (undo-tree-id2705 . -1) (undo-tree-id2706 . -1) (undo-tree-id2707 . -1) (undo-tree-id2708 . -1) (undo-tree-id2709 . -1) (undo-tree-id2710 . -1) (undo-tree-id2711 . -1) (undo-tree-id2712 . -1) (undo-tree-id2713 . -1) (undo-tree-id2714 . -1) (undo-tree-id2715 . -1) (undo-tree-id2716 . -1) (undo-tree-id2717 . -1) (undo-tree-id2718 . -1) (undo-tree-id2719 . -1) (undo-tree-id2720 . -1) (undo-tree-id2721 . -1) (undo-tree-id2722 . -1) (undo-tree-id2723 . -1) (undo-tree-id2724 . -1) (undo-tree-id2725 . -1) (undo-tree-id2726 . -1) (undo-tree-id2727 . -1) (undo-tree-id2728 . -1) (undo-tree-id2729 . -1) (undo-tree-id2730 . -1) (undo-tree-id2731 . -1) (undo-tree-id2732 . -1) (undo-tree-id2733 . -1) (undo-tree-id2734 . -1) (undo-tree-id2735 . -1) (undo-tree-id2736 . -1) (undo-tree-id2737 . -1) (undo-tree-id2738 . -1) (undo-tree-id2739 . -1) (undo-tree-id2740 . -1) (undo-tree-id2741 . -1) (undo-tree-id2742 . -1) (#("s" 0 1 (fontified t)) . -2) (undo-tree-id2743 . -1) (undo-tree-id2744 . -1) (undo-tree-id2745 . -1) (undo-tree-id2746 . -1) (undo-tree-id2747 . -1) (undo-tree-id2748 . -1) (undo-tree-id2749 . -1) (undo-tree-id2750 . -1) (undo-tree-id2751 . -1) (undo-tree-id2752 . -1) (undo-tree-id2753 . -1) (undo-tree-id2754 . -1) (undo-tree-id2755 . -1) (undo-tree-id2756 . -1) (undo-tree-id2757 . -1) (undo-tree-id2758 . -1) (undo-tree-id2759 . -1) (undo-tree-id2760 . -1) (undo-tree-id2761 . -1) (undo-tree-id2762 . -1) (undo-tree-id2763 . -1) (undo-tree-id2764 . -1) (undo-tree-id2765 . -1) (undo-tree-id2766 . -1) (undo-tree-id2767 . -1) (undo-tree-id2768 . -1) (undo-tree-id2769 . -1) (undo-tree-id2770 . -1) (undo-tree-id2771 . -1) (undo-tree-id2772 . -1) (undo-tree-id2773 . -1) (undo-tree-id2774 . -1) (undo-tree-id2775 . -1) (undo-tree-id2776 . -1) (undo-tree-id2777 . -1) (undo-tree-id2778 . -1) (undo-tree-id2779 . -1) (undo-tree-id2780 . -1) (undo-tree-id2781 . -1) (undo-tree-id2782 . -1) (undo-tree-id2783 . -1) (undo-tree-id2784 . -1) (undo-tree-id2785 . -1) (undo-tree-id2786 . -1) (undo-tree-id2787 . -1) (undo-tree-id2788 . -1) (undo-tree-id2789 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -3) (undo-tree-id2790 . -1) (undo-tree-id2791 . -1) (undo-tree-id2792 . -1) (undo-tree-id2793 . -1) (undo-tree-id2794 . -1) (undo-tree-id2795 . -1) (undo-tree-id2796 . -1) (undo-tree-id2797 . -1) (undo-tree-id2798 . -1) (undo-tree-id2799 . -1) (undo-tree-id2800 . -1) (undo-tree-id2801 . -1) (undo-tree-id2802 . -1) (undo-tree-id2803 . -1) (undo-tree-id2804 . -1) (undo-tree-id2805 . -1) (undo-tree-id2806 . -1) (undo-tree-id2807 . -1) (undo-tree-id2808 . -1) (undo-tree-id2809 . -1) (undo-tree-id2810 . -1) (undo-tree-id2811 . -1) (undo-tree-id2812 . -1) (undo-tree-id2813 . -1) (undo-tree-id2814 . -1) (undo-tree-id2815 . -1) (undo-tree-id2816 . -1) (undo-tree-id2817 . -1) (undo-tree-id2818 . -1) (undo-tree-id2819 . -1) (undo-tree-id2820 . -1) (undo-tree-id2821 . -1) (undo-tree-id2822 . -1) (undo-tree-id2823 . -1) (undo-tree-id2824 . -1) (undo-tree-id2825 . -1) (undo-tree-id2826 . -1) (undo-tree-id2827 . -1) (undo-tree-id2828 . -1) (undo-tree-id2829 . -1) (undo-tree-id2830 . -1) (undo-tree-id2831 . -1) (undo-tree-id2832 . -1) (undo-tree-id2833 . -1) (undo-tree-id2834 . -1) (#(" " 0 1 (fontified t)) . -4) (undo-tree-id2835 . -1) (undo-tree-id2836 . -1) (undo-tree-id2837 . -1) (undo-tree-id2838 . -1) (undo-tree-id2839 . -1) (undo-tree-id2840 . -1) (undo-tree-id2841 . -1) (undo-tree-id2842 . -1) (undo-tree-id2843 . -1) (undo-tree-id2844 . -1) (undo-tree-id2845 . -1) (undo-tree-id2846 . -1) (undo-tree-id2847 . -1) (undo-tree-id2848 . -1) (undo-tree-id2849 . -1) (undo-tree-id2850 . -1) (undo-tree-id2851 . -1) (undo-tree-id2852 . -1) (undo-tree-id2853 . -1) (undo-tree-id2854 . -1) (undo-tree-id2855 . -1) (undo-tree-id2856 . -1) (undo-tree-id2857 . -1) (undo-tree-id2858 . -1) (undo-tree-id2859 . -1) (undo-tree-id2860 . -1) (undo-tree-id2861 . -1) (undo-tree-id2862 . -1) (undo-tree-id2863 . -1) (undo-tree-id2864 . -1) (undo-tree-id2865 . -1) (undo-tree-id2866 . -1) (undo-tree-id2867 . -1) (undo-tree-id2868 . -1) (undo-tree-id2869 . -1) (undo-tree-id2870 . -1) (undo-tree-id2871 . -1) (undo-tree-id2872 . -1) (undo-tree-id2873 . -1) (undo-tree-id2874 . -1) (undo-tree-id2875 . -1) (undo-tree-id2876 . -1) (undo-tree-id2877 . -1) 5) nil (26049 51192 622764 425000) 0 nil])
([nil nil ((1 . 7)) nil (26049 51192 622161 883000) 0 nil])
([nil nil ((#("u" 0 1 (face font-lock-constant-face fontified t)) . -5) (undo-tree-id2675 . -1) (undo-tree-id2676 . -1) (undo-tree-id2677 . -1) (undo-tree-id2678 . -1) (undo-tree-id2679 . -1) (undo-tree-id2680 . -1) (undo-tree-id2681 . -1) (undo-tree-id2682 . -1) (undo-tree-id2683 . -1) (undo-tree-id2684 . -1) (undo-tree-id2685 . -1) (undo-tree-id2686 . -1) (undo-tree-id2687 . -1) (#("t" 0 1 (face font-lock-constant-face fontified t)) . -6) (undo-tree-id2688 . -1) (undo-tree-id2689 . -1) (undo-tree-id2690 . -1) (undo-tree-id2691 . -1) (undo-tree-id2692 . -1) (undo-tree-id2693 . -1) 7) nil (26049 51192 622159 844000) 0 nil])
([nil nil ((5 . 6)) nil (26049 51192 622145 173000) 0 nil])
([nil nil ((#("mod c" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 5 (face font-lock-constant-face fontified t)) . 1) (undo-tree-id2643 . -1) (undo-tree-id2644 . -1) (undo-tree-id2645 . -2) (undo-tree-id2646 . -2) (undo-tree-id2647 . -3) (undo-tree-id2648 . -3) (undo-tree-id2649 . -3) (undo-tree-id2650 . -3) (undo-tree-id2651 . -3) (undo-tree-id2652 . -4) (undo-tree-id2653 . -4) (undo-tree-id2654 . -4) (undo-tree-id2655 . -4) (undo-tree-id2656 . -4) (undo-tree-id2657 . -4) (undo-tree-id2658 . -4) (undo-tree-id2659 . -4) (undo-tree-id2660 . -4) (undo-tree-id2661 . -4) (undo-tree-id2662 . -4) (undo-tree-id2663 . -4) (undo-tree-id2664 . -4) (undo-tree-id2665 . -4) (undo-tree-id2666 . -4) (undo-tree-id2667 . -4) (undo-tree-id2668 . -4) (undo-tree-id2669 . -5) (undo-tree-id2670 . -5) (undo-tree-id2671 . -5) (undo-tree-id2672 . -5) (undo-tree-id2673 . -5) (undo-tree-id2674 . -5)) nil (26049 51192 622142 423000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1) (undo-tree-id2641 . 1) (undo-tree-id2642 . -1)) nil (26049 51192 622114 173000) 0 nil])
([nil nil ((1 . 5) (t 26049 51192 685603 520000)) nil (26049 51255 382563 322000) 0 nil])
([nil nil ((5 . 9)) nil (26049 51255 382562 428000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -8) (undo-tree-id2982 . -1) (undo-tree-id2983 . -1) (undo-tree-id2984 . -1) (undo-tree-id2985 . -1) (undo-tree-id2986 . -1) (undo-tree-id2987 . -1) (undo-tree-id2988 . -1) (undo-tree-id2989 . -1) (undo-tree-id2990 . -1) (undo-tree-id2991 . -1) (undo-tree-id2992 . -1) 9) nil (26049 51255 382561 122000) 0 nil])
([nil nil ((8 . 15)) nil (26049 51255 382552 272000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -11) (undo-tree-id2943 . -1) (undo-tree-id2944 . -1) (undo-tree-id2945 . -1) (undo-tree-id2946 . -1) (undo-tree-id2947 . -1) (undo-tree-id2948 . -1) (undo-tree-id2949 . -1) (undo-tree-id2950 . -1) (undo-tree-id2951 . -1) (undo-tree-id2952 . -1) (undo-tree-id2953 . -1) (undo-tree-id2954 . -1) (undo-tree-id2955 . -1) (undo-tree-id2956 . -1) (undo-tree-id2957 . -1) (undo-tree-id2958 . -1) (undo-tree-id2959 . -1) (undo-tree-id2960 . -1) (#("o" 0 1 (fontified t)) . -12) (undo-tree-id2961 . -1) (undo-tree-id2962 . -1) (undo-tree-id2963 . -1) (undo-tree-id2964 . -1) (undo-tree-id2965 . -1) (undo-tree-id2966 . -1) (undo-tree-id2967 . -1) (undo-tree-id2968 . -1) (undo-tree-id2969 . -1) (undo-tree-id2970 . -1) (undo-tree-id2971 . -1) (#("t" 0 1 (fontified t)) . -13) (undo-tree-id2972 . -1) (undo-tree-id2973 . -1) (undo-tree-id2974 . -1) (undo-tree-id2975 . -1) (undo-tree-id2976 . -1) (undo-tree-id2977 . -1) (undo-tree-id2978 . -1) (#("i" 0 1 (fontified t)) . -14) (undo-tree-id2979 . -1) (undo-tree-id2980 . -1) (undo-tree-id2981 . -1) 15) nil (26049 51255 382548 162000) 0 nil])
([nil nil ((11 . 27)) nil (26049 51255 382510 877000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -8) (undo-tree-id2993 . -1) (undo-tree-id2994 . -1) (undo-tree-id2995 . -1) (undo-tree-id2996 . -1) (undo-tree-id2997 . -1) (undo-tree-id2998 . -1) (undo-tree-id2999 . -1) (undo-tree-id3000 . -1) (undo-tree-id3001 . -1) (undo-tree-id3002 . -1) (undo-tree-id3003 . -1) (undo-tree-id3004 . -1) (undo-tree-id3005 . -1) (undo-tree-id3006 . -1) (undo-tree-id3007 . -1) (undo-tree-id3008 . -1) 9 (t 26049 51255 408940 705000)) nil (26049 51261 451150 154000) 0 nil])
([nil nil ((8 . 9)) nil (26049 51261 451128 547000) 0 nil])
([nil nil ((#("utility;" 0 8 (fontified t)) . -19) (undo-tree-id3551 . -8) (undo-tree-id3552 . -8) (undo-tree-id3553 . -6) (undo-tree-id3554 . -6) (undo-tree-id3555 . -6) (undo-tree-id3556 . -6) (undo-tree-id3557 . -6) (undo-tree-id3558 . -6) (undo-tree-id3559 . -6) (undo-tree-id3560 . -6) (undo-tree-id3561 . -6) (undo-tree-id3562 . -6) (undo-tree-id3563 . -8) (undo-tree-id3564 . -8) (undo-tree-id3565 . -8) (undo-tree-id3566 . -8) (undo-tree-id3567 . -8) (undo-tree-id3568 . -8) (undo-tree-id3569 . -8) (undo-tree-id3570 . -8) (undo-tree-id3571 . -8) (undo-tree-id3572 . -8) 27 (t 26049 51261 518941 80000)) nil (26049 51344 761024 599000) 0 nil])
([nil nil ((#("tutorial::" 0 8 (face font-lock-constant-face fontified t) 8 10 (fontified t)) . -9) (undo-tree-id3526 . 10) (undo-tree-id3527 . -10) (undo-tree-id3528 . -10) (undo-tree-id3529 . -10) (undo-tree-id3530 . -10) (undo-tree-id3531 . -10) (undo-tree-id3532 . -10) (undo-tree-id3533 . -10) (undo-tree-id3534 . -10) (undo-tree-id3535 . -10) (undo-tree-id3536 . -10) (undo-tree-id3537 . -10) (undo-tree-id3538 . -10) (undo-tree-id3539 . -10) (undo-tree-id3540 . -10) (undo-tree-id3541 . -10) (undo-tree-id3542 . -10) (undo-tree-id3543 . -10) (undo-tree-id3544 . -10) (undo-tree-id3545 . -10) (undo-tree-id3546 . -10) (undo-tree-id3547 . -10) (undo-tree-id3548 . -10) (undo-tree-id3549 . -10) (undo-tree-id3550 . -10) 19) nil (26049 51344 761003 516000) 0 nil])
([nil nil ((#("ash_" 0 4 (face font-lock-constant-face fontified t)) . -5) (undo-tree-id3493 . -4) (undo-tree-id3494 . -3) (undo-tree-id3495 . -4) (undo-tree-id3496 . -4) (undo-tree-id3497 . -4) (undo-tree-id3498 . -4) (undo-tree-id3499 . -4) (undo-tree-id3500 . -4) (undo-tree-id3501 . -4) (undo-tree-id3502 . -4) (undo-tree-id3503 . -4) (undo-tree-id3504 . -4) (undo-tree-id3505 . -4) (undo-tree-id3506 . -4) (undo-tree-id3507 . -4) (undo-tree-id3508 . -4) (undo-tree-id3509 . -4) (undo-tree-id3510 . -4) (undo-tree-id3511 . -4) (undo-tree-id3512 . -4) (undo-tree-id3513 . -4) (undo-tree-id3514 . -4) (undo-tree-id3515 . -4) (undo-tree-id3516 . -4) (undo-tree-id3517 . -4) (undo-tree-id3518 . -4) (undo-tree-id3519 . -4) (undo-tree-id3520 . -4) (undo-tree-id3521 . -4) (undo-tree-id3522 . -4) (undo-tree-id3523 . -4) (undo-tree-id3524 . -4) (undo-tree-id3525 . -4) 9) nil (26049 51344 760985 758000) 0 nil])
([nil nil ((5 . 6)) nil (26049 51344 760965 68000) 0 nil])
([nil nil ((5 . 11) (#("s" 0 1 (fontified nil)) . 5) (5 . 6) (#("self::" 0 6 (fontified nil)) . -5) (5 . 11) (#("s" 0 1 (face font-lock-constant-face fontified t)) . -5) (undo-tree-id3487 . -1) (undo-tree-id3488 . -1) (undo-tree-id3489 . -1) (undo-tree-id3490 . -1) (undo-tree-id3491 . -1) (undo-tree-id3492 . -1) 6) nil (26049 51344 760963 863000) 0 nil])
([nil nil ((11 . 12)) nil (26049 51344 760958 998000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -11) (undo-tree-id3482 . -1) (undo-tree-id3483 . -1) (undo-tree-id3484 . -1) (undo-tree-id3485 . -1) (undo-tree-id3486 . -1) 12) nil (26049 51344 760958 152000) 0 nil])
([nil nil ((11 . 13)) nil (26049 51344 760954 724000) 0 nil])
([nil nil ((#("ut" 0 2 (fontified t)) . -11) (undo-tree-id3472 . -2) (undo-tree-id3473 . -1) (undo-tree-id3474 . -1) (undo-tree-id3475 . -2) (undo-tree-id3476 . -2) (undo-tree-id3477 . -2) (undo-tree-id3478 . -2) (undo-tree-id3479 . -2) (undo-tree-id3480 . -2) (undo-tree-id3481 . -2) 13) nil (26049 51344 760953 758000) 0 nil])
([nil nil ((#("self::" 0 4 (face font-lock-keyword-face fontified t) 4 6 (fontified t)) . -5) (undo-tree-id3443 . -6) (undo-tree-id3444 . -6) (undo-tree-id3445 . -6) (undo-tree-id3446 . -6) (undo-tree-id3447 . -6) (undo-tree-id3448 . -6) (undo-tree-id3449 . -6) (undo-tree-id3450 . -6) (undo-tree-id3451 . -6) (undo-tree-id3452 . -6) (undo-tree-id3453 . -6) (undo-tree-id3454 . -6) (undo-tree-id3455 . -6) (undo-tree-id3456 . -6) (undo-tree-id3457 . -6) (undo-tree-id3458 . -6) (undo-tree-id3459 . -6) (undo-tree-id3460 . -6) (undo-tree-id3461 . -6) (undo-tree-id3462 . -6) (undo-tree-id3463 . -6) (undo-tree-id3464 . -6) (undo-tree-id3465 . -6) (undo-tree-id3466 . -6) (undo-tree-id3467 . -6) (undo-tree-id3468 . -6) (undo-tree-id3469 . -6) (undo-tree-id3470 . -6) (undo-tree-id3471 . -6) 11) nil (26049 51344 760945 456000) 0 nil])
([nil nil ((5 . 6)) nil (26049 51344 760927 203000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-constant-face fontified t)) . -5) (undo-tree-id3438 . -1) (undo-tree-id3439 . -1) (undo-tree-id3440 . -1) (undo-tree-id3441 . -1) (undo-tree-id3442 . -1) 6) nil (26049 51344 760926 353000) 0 nil])
([nil nil ((5 . 6)) nil (26049 51344 760922 647000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-constant-face fontified t)) . -5) (undo-tree-id3433 . -1) (undo-tree-id3434 . -1) (undo-tree-id3435 . -1) (undo-tree-id3436 . -1) (undo-tree-id3437 . -1) 6) nil (26049 51344 760921 793000) 0 nil])
([nil nil ((5 . 6)) nil (26049 51344 760918 138000) 0 nil])
([nil nil ((#("v" 0 1 (face font-lock-constant-face fontified t)) . -5) (undo-tree-id3428 . -1) (undo-tree-id3429 . -1) (undo-tree-id3430 . -1) (undo-tree-id3431 . -1) (undo-tree-id3432 . -1) 6) nil (26049 51344 760917 382000) 0 nil])
([nil nil ((5 . 6)) nil (26049 51344 760913 239000) 0 nil])
([nil nil ((6 . 7)) nil (26049 51344 760912 648000) 0 nil])
([nil nil ((5 . 8) (#("as" 0 2 (fontified nil)) . 5) (5 . 7) (#("ash" 0 3 (fontified nil)) . -5) (5 . 8) (#("as" 0 2 (face font-lock-keyword-face fontified t)) . -5) (undo-tree-id3420 . -2) (undo-tree-id3421 . -1) (undo-tree-id3422 . -1) (undo-tree-id3423 . -1) (undo-tree-id3424 . -1) (undo-tree-id3425 . -2) (undo-tree-id3426 . -2) (undo-tree-id3427 . -2) 7) nil (26049 51344 760911 363000) 0 nil])
([nil nil ((#("ash" 0 3 (face font-lock-constant-face fontified t)) . -5) (undo-tree-id3409 . -3) (undo-tree-id3410 . -3) (undo-tree-id3411 . -3) (undo-tree-id3412 . -3) (undo-tree-id3413 . -3) (undo-tree-id3414 . -3) (undo-tree-id3415 . -3) (undo-tree-id3416 . -3) (undo-tree-id3417 . -3) (undo-tree-id3418 . -3) (undo-tree-id3419 . -3) 8) nil (26049 51344 760905 177000) 0 nil])
([nil nil ((5 . 6)) nil (26049 51344 760889 37000) 0 nil])
([nil nil ((5 . 11) (#("s" 0 1 (fontified nil)) . 5) (5 . 6) (#("self::" 0 6 (fontified nil)) . -5) (5 . 11) (#("s" 0 1 (face font-lock-constant-face fontified t)) . -5) (undo-tree-id3404 . -1) (undo-tree-id3405 . -1) (undo-tree-id3406 . -1) (undo-tree-id3407 . -1) (undo-tree-id3408 . -1) 6) nil (26049 51344 760887 844000) 0 nil])
([nil nil ((11 . 12)) nil (26049 51344 760883 287000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -10) (undo-tree-id3381 . -1) (undo-tree-id3382 . -1) (undo-tree-id3383 . -1) (undo-tree-id3384 . -1) (undo-tree-id3385 . -1) (undo-tree-id3386 . -1) (undo-tree-id3387 . -1) (undo-tree-id3388 . -1) (undo-tree-id3389 . -1) (undo-tree-id3390 . -1) (undo-tree-id3391 . -1) (undo-tree-id3392 . -1) (undo-tree-id3393 . -1) (undo-tree-id3394 . -1) (undo-tree-id3395 . -1) (undo-tree-id3396 . -1) (undo-tree-id3397 . -1) (#("u" 0 1 (fontified t)) . -11) (undo-tree-id3398 . -1) (undo-tree-id3399 . -1) (undo-tree-id3400 . -1) (undo-tree-id3401 . -1) (undo-tree-id3402 . -1) (undo-tree-id3403 . -1) 12) nil (26049 51344 760879 981000) 0 nil])
([nil nil ((#("self:" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t)) . -5) (undo-tree-id3361 . -5) (undo-tree-id3362 . -5) (undo-tree-id3363 . -5) (undo-tree-id3364 . -5) (undo-tree-id3365 . -5) (undo-tree-id3366 . -5) (undo-tree-id3367 . -5) (undo-tree-id3368 . -5) (undo-tree-id3369 . -5) (undo-tree-id3370 . -5) (undo-tree-id3371 . -5) (undo-tree-id3372 . -5) (undo-tree-id3373 . -5) (undo-tree-id3374 . -5) (undo-tree-id3375 . -5) (undo-tree-id3376 . -5) (undo-tree-id3377 . -5) (undo-tree-id3378 . -5) (undo-tree-id3379 . -5) (undo-tree-id3380 . -5) 10) nil (26049 51344 759122 772000) 0 nil])
([nil nil ((5 . 6)) nil (26049 51344 759109 702000) 0 nil])
([nil nil ((#("o" 0 1 (face font-lock-constant-face fontified t)) . -5) (undo-tree-id3358 . -1) (undo-tree-id3359 . -1) (undo-tree-id3360 . -1) 6) nil (26049 51344 759108 841000) 0 nil])
([nil nil ((5 . 6)) nil (26049 51344 759106 349000) 0 nil])
([nil nil ((#("o" 0 1 (face font-lock-constant-face fontified t)) . -5) (undo-tree-id3355 . -1) (undo-tree-id3356 . -1) (undo-tree-id3357 . -1) 6) nil (26049 51344 759105 519000) 0 nil])
([nil nil ((5 . 8)) nil (26049 51344 759103 60000) 0 nil])
([nil nil ((#("pla" 0 3 (face font-lock-constant-face fontified t)) . -5) (undo-tree-id3345 . -3) (undo-tree-id3346 . -1) (undo-tree-id3347 . -1) (undo-tree-id3348 . -2) (undo-tree-id3349 . -2) (undo-tree-id3350 . -3) (undo-tree-id3351 . -3) (undo-tree-id3352 . -3) (undo-tree-id3353 . -3) (undo-tree-id3354 . -3) 8) nil (26049 51344 759102 102000) 0 nil])
([nil nil ((5 . 6)) nil (26049 51344 759095 343000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-constant-face fontified t)) . -5) (undo-tree-id3339 . -1) (undo-tree-id3340 . -1) (undo-tree-id3341 . -1) (undo-tree-id3342 . -1) (undo-tree-id3343 . -1) (undo-tree-id3344 . -1) 6) nil (26049 51344 759094 469000) 0 nil])
([nil nil ((5 . 6)) nil (26049 51344 759090 436000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-constant-face fontified t)) . -5) (undo-tree-id3336 . -1) (undo-tree-id3337 . -1) (undo-tree-id3338 . -1) 6) nil (26049 51344 759089 552000) 0 nil])
([nil nil ((5 . 6)) nil (26049 51344 759087 145000) 0 nil])
([nil nil ((5 . 12) (#("c" 0 1 (fontified nil)) . 5) (5 . 6) (#("crate::" 0 7 (fontified nil)) . -5) (5 . 12) (#("c" 0 1 (face font-lock-constant-face fontified t)) . -5) (undo-tree-id3329 . -1) (undo-tree-id3330 . -1) (undo-tree-id3331 . -1) (undo-tree-id3332 . -1) (undo-tree-id3333 . -1) (undo-tree-id3334 . -1) (undo-tree-id3335 . -1) 6) nil (26049 51344 759085 322000) 0 nil])
([nil nil ((12 . 13)) nil (26049 51344 759080 97000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -12) (undo-tree-id3319 . -1) (undo-tree-id3320 . -1) (undo-tree-id3321 . -1) (undo-tree-id3322 . -1) (undo-tree-id3323 . -1) (undo-tree-id3324 . -1) (undo-tree-id3325 . -1) (undo-tree-id3326 . -1) (undo-tree-id3327 . -1) (undo-tree-id3328 . -1) 13) nil (26049 51344 759079 81000) 0 nil])
([nil nil ((12 . 13)) nil (26049 51344 759071 400000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -12) (undo-tree-id3313 . -1) (undo-tree-id3314 . -1) (undo-tree-id3315 . -1) (undo-tree-id3316 . -1) (undo-tree-id3317 . -1) (undo-tree-id3318 . -1) 13) nil (26049 51344 759070 142000) 0 nil])
([nil nil ((12 . 13)) nil (26049 51344 759065 775000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -12) (undo-tree-id3309 . -1) (undo-tree-id3310 . -1) (undo-tree-id3311 . -1) (undo-tree-id3312 . -1) 13) nil (26049 51344 759063 943000) 0 nil])
([nil nil ((#("use crate::" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 9 (face font-lock-keyword-face fontified t) 9 11 (fontified t)) . 1) (undo-tree-id3009 . -4) (undo-tree-id3010 . -4) (undo-tree-id3011 . -4) (undo-tree-id3012 . -4) (undo-tree-id3013 . -4) (undo-tree-id3014 . -4) (undo-tree-id3015 . -4) (undo-tree-id3016 . -4) (undo-tree-id3017 . -4) (undo-tree-id3018 . -4) (undo-tree-id3019 . -4) (undo-tree-id3020 . -4) (undo-tree-id3021 . -4) (undo-tree-id3022 . -4) (undo-tree-id3023 . -4) (undo-tree-id3024 . -4) (undo-tree-id3025 . -4) (undo-tree-id3026 . -4) (undo-tree-id3027 . -4) (undo-tree-id3028 . -4) (undo-tree-id3029 . -4) (undo-tree-id3030 . -4) (undo-tree-id3031 . -4) (undo-tree-id3032 . -4) (undo-tree-id3033 . -4) (undo-tree-id3034 . -4) (undo-tree-id3035 . -4) (undo-tree-id3036 . -4) (undo-tree-id3037 . -4) (undo-tree-id3038 . -4) (undo-tree-id3039 . -4) (undo-tree-id3040 . -4) (undo-tree-id3041 . -4) (undo-tree-id3042 . -4) (undo-tree-id3043 . -4) (undo-tree-id3044 . -4) (undo-tree-id3045 . -4) (undo-tree-id3046 . -4) (undo-tree-id3047 . -4) (undo-tree-id3048 . -4) (undo-tree-id3049 . -4) (undo-tree-id3050 . -4) (undo-tree-id3051 . -4) (undo-tree-id3052 . -4) (undo-tree-id3053 . -4) (undo-tree-id3054 . -4) (undo-tree-id3055 . -4) (undo-tree-id3056 . -4) (undo-tree-id3057 . -4) (undo-tree-id3058 . -4) (undo-tree-id3059 . -4) (undo-tree-id3060 . -4) (undo-tree-id3061 . -4) (undo-tree-id3062 . -4) (undo-tree-id3063 . -4) (undo-tree-id3064 . -4) (undo-tree-id3065 . -4) (undo-tree-id3066 . -4) (undo-tree-id3067 . -4) (undo-tree-id3068 . -4) (undo-tree-id3069 . -4) (undo-tree-id3070 . -4) (undo-tree-id3071 . -4) (undo-tree-id3072 . -4) (undo-tree-id3073 . -4) (undo-tree-id3074 . -4) (undo-tree-id3075 . -4) (undo-tree-id3076 . -4) (undo-tree-id3077 . -4) (undo-tree-id3078 . -4) (undo-tree-id3079 . -4) (undo-tree-id3080 . -4) (undo-tree-id3081 . -4) (undo-tree-id3082 . -4) (undo-tree-id3083 . -4) (undo-tree-id3084 . -4) (undo-tree-id3085 . -4) (undo-tree-id3086 . -4) (undo-tree-id3087 . -4) (undo-tree-id3088 . -4) (undo-tree-id3089 . -4) (undo-tree-id3090 . -4) (undo-tree-id3091 . -4) (undo-tree-id3092 . -4) (undo-tree-id3093 . -4) (undo-tree-id3094 . -4) (undo-tree-id3095 . -4) (undo-tree-id3096 . -4) (undo-tree-id3097 . -4) (undo-tree-id3098 . -4) (undo-tree-id3099 . -4) (undo-tree-id3100 . -4) (undo-tree-id3101 . -4) (undo-tree-id3102 . -4) (undo-tree-id3103 . -4) (undo-tree-id3104 . -4) (undo-tree-id3105 . -4) (undo-tree-id3106 . -4) (undo-tree-id3107 . -4) (undo-tree-id3108 . -4) (undo-tree-id3109 . -4) (undo-tree-id3110 . -4) (undo-tree-id3111 . -4) (undo-tree-id3112 . -4) (undo-tree-id3113 . -4) (undo-tree-id3114 . -4) (undo-tree-id3115 . -4) (undo-tree-id3116 . -4) (undo-tree-id3117 . -4) (undo-tree-id3118 . -4) (undo-tree-id3119 . -4) (undo-tree-id3120 . -4) (undo-tree-id3121 . -4) (undo-tree-id3122 . -4) (undo-tree-id3123 . -4) (undo-tree-id3124 . -4) (undo-tree-id3125 . -4) (undo-tree-id3126 . -4) (undo-tree-id3127 . -4) (undo-tree-id3128 . -4) (undo-tree-id3129 . -4) (undo-tree-id3130 . -4) (undo-tree-id3131 . -4) (undo-tree-id3132 . -4) (undo-tree-id3133 . -4) (undo-tree-id3134 . -4) (undo-tree-id3135 . -4) (undo-tree-id3136 . -4) (undo-tree-id3137 . -4) (undo-tree-id3138 . -4) (undo-tree-id3139 . -4) (undo-tree-id3140 . -4) (undo-tree-id3141 . -4) (undo-tree-id3142 . -4) (undo-tree-id3143 . -4) (undo-tree-id3144 . -4) (undo-tree-id3145 . -4) (undo-tree-id3146 . -4) (undo-tree-id3147 . -4) (undo-tree-id3148 . -4) (undo-tree-id3149 . -4) (undo-tree-id3150 . -4) (undo-tree-id3151 . -4) (undo-tree-id3152 . -4) (undo-tree-id3153 . -4) (undo-tree-id3154 . -4) (undo-tree-id3155 . -4) (undo-tree-id3156 . -4) (undo-tree-id3157 . -4) (undo-tree-id3158 . -4) (undo-tree-id3159 . -4) (undo-tree-id3160 . -4) (undo-tree-id3161 . -4) (undo-tree-id3162 . -4) (undo-tree-id3163 . -4) (undo-tree-id3164 . -4) (undo-tree-id3165 . -4) (undo-tree-id3166 . -4) (undo-tree-id3167 . -4) (undo-tree-id3168 . -4) (undo-tree-id3169 . -4) (undo-tree-id3170 . -4) (undo-tree-id3171 . -4) (undo-tree-id3172 . -4) (undo-tree-id3173 . -4) (undo-tree-id3174 . -4) (undo-tree-id3175 . -4) (undo-tree-id3176 . -4) (undo-tree-id3177 . -4) (undo-tree-id3178 . -4) (undo-tree-id3179 . -4) (undo-tree-id3180 . -4) (undo-tree-id3181 . -4) (undo-tree-id3182 . -4) (undo-tree-id3183 . -4) (undo-tree-id3184 . -4) (undo-tree-id3185 . -4) (undo-tree-id3186 . -4) (undo-tree-id3187 . -4) (undo-tree-id3188 . -4) (undo-tree-id3189 . -4) (undo-tree-id3190 . -4) (undo-tree-id3191 . -4) (undo-tree-id3192 . -4) (undo-tree-id3193 . -4) (undo-tree-id3194 . -4) (undo-tree-id3195 . -4) (undo-tree-id3196 . -4) (undo-tree-id3197 . -4) (undo-tree-id3198 . -4) (undo-tree-id3199 . -4) (undo-tree-id3200 . -4) (undo-tree-id3201 . -4) (undo-tree-id3202 . -4) (undo-tree-id3203 . -4) (undo-tree-id3204 . -4) (undo-tree-id3205 . -4) (undo-tree-id3206 . -4) (undo-tree-id3207 . -4) (undo-tree-id3208 . -4) (undo-tree-id3209 . -4) (undo-tree-id3210 . -4) (undo-tree-id3211 . -4) (undo-tree-id3212 . -4) (undo-tree-id3213 . -4) (undo-tree-id3214 . -4) (undo-tree-id3215 . -4) (undo-tree-id3216 . -4) (undo-tree-id3217 . -4) (undo-tree-id3218 . -4) (undo-tree-id3219 . -4) (undo-tree-id3220 . -4) (undo-tree-id3221 . -4) (undo-tree-id3222 . -4) (undo-tree-id3223 . -4) (undo-tree-id3224 . -4) (undo-tree-id3225 . -4) (undo-tree-id3226 . -4) (undo-tree-id3227 . -4) (undo-tree-id3228 . -4) (undo-tree-id3229 . -4) (undo-tree-id3230 . -4) (undo-tree-id3231 . -4) (undo-tree-id3232 . -4) (undo-tree-id3233 . -4) (undo-tree-id3234 . -4) (undo-tree-id3235 . -4) (undo-tree-id3236 . -4) (undo-tree-id3237 . -4) (undo-tree-id3238 . -4) (undo-tree-id3239 . -4) (undo-tree-id3240 . -4) (undo-tree-id3241 . -4) (undo-tree-id3242 . -4) (undo-tree-id3243 . -4) (undo-tree-id3244 . -4) (undo-tree-id3245 . -4) (undo-tree-id3246 . -4) (undo-tree-id3247 . -4) (undo-tree-id3248 . -4) (undo-tree-id3249 . -4) (undo-tree-id3250 . -4) (undo-tree-id3251 . -4) (undo-tree-id3252 . -4) (undo-tree-id3253 . -4) (undo-tree-id3254 . -4) (undo-tree-id3255 . -4) (undo-tree-id3256 . -4) (undo-tree-id3257 . -4) (undo-tree-id3258 . -4) (undo-tree-id3259 . -4) (undo-tree-id3260 . -4) (undo-tree-id3261 . -4) (undo-tree-id3262 . -4) (undo-tree-id3263 . -4) (undo-tree-id3264 . -4) (undo-tree-id3265 . -4) (undo-tree-id3266 . -4) (undo-tree-id3267 . -4) (undo-tree-id3268 . -4) (undo-tree-id3269 . -4) (undo-tree-id3270 . -4) (undo-tree-id3271 . -4) (undo-tree-id3272 . -4) (undo-tree-id3273 . -4) (undo-tree-id3274 . -4) (undo-tree-id3275 . -4) (undo-tree-id3276 . -4) (undo-tree-id3277 . -11) (undo-tree-id3278 . -11) (undo-tree-id3279 . -11) (undo-tree-id3280 . -11) (undo-tree-id3281 . -11) (undo-tree-id3282 . -11) (undo-tree-id3283 . -11) (undo-tree-id3284 . -11) (undo-tree-id3285 . -11) (undo-tree-id3286 . -11) (undo-tree-id3287 . -11) (undo-tree-id3288 . -11) (undo-tree-id3289 . -11) (undo-tree-id3290 . -11) (undo-tree-id3291 . -11) (undo-tree-id3292 . -11) (undo-tree-id3293 . -11) (undo-tree-id3294 . -11) (undo-tree-id3295 . -11) (undo-tree-id3296 . -11) (undo-tree-id3297 . -11) (undo-tree-id3298 . -11) (undo-tree-id3299 . -11) (undo-tree-id3300 . -11) (undo-tree-id3301 . -11) (undo-tree-id3302 . -11) (undo-tree-id3303 . -11) (undo-tree-id3304 . -11) (undo-tree-id3305 . -11) (undo-tree-id3306 . -11) (undo-tree-id3307 . -11) (undo-tree-id3308 . -11)) nil (26049 51344 759047 790000) 0 nil])
([nil nil ((1 . 3) (t 26049 51344 818946 173000)) nil (26049 51438 107369 447000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -1) (undo-tree-id3599 . -1) (undo-tree-id3600 . -1) (undo-tree-id3601 . -1) (undo-tree-id3602 . -1) (undo-tree-id3603 . -1) (undo-tree-id3604 . -1) (undo-tree-id3605 . -1) (#("m" 0 1 (fontified t)) . -2) (undo-tree-id3606 . -1) (undo-tree-id3607 . -1) (undo-tree-id3608 . -1) (undo-tree-id3609 . -1) 3) nil (26049 51438 107368 135000) 0 nil])
([nil nil ((1 . 6)) nil (26049 51438 107360 585000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-constant-face fontified t)) . -5) (undo-tree-id3589 . -1) (undo-tree-id3590 . -1) (undo-tree-id3591 . -1) (undo-tree-id3592 . -1) (undo-tree-id3593 . -1) (undo-tree-id3594 . -1) (undo-tree-id3595 . -1) (undo-tree-id3596 . -1) (undo-tree-id3597 . -1) (undo-tree-id3598 . -1) 6) nil (26049 51438 107359 421000) 0 nil])
([nil nil ((5 . 6)) nil (26049 51438 107351 984000) 0 nil])
([nil nil ((#("y" 0 1 (face font-lock-constant-face fontified t)) . -5) (undo-tree-id3586 . -1) (undo-tree-id3587 . -1) (undo-tree-id3588 . -1) 6) nil (26049 51438 107350 923000) 0 nil])
([nil nil ((5 . 7)) nil (26049 51438 107348 172000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-constant-face fontified t)) . -5) (undo-tree-id3578 . -1) (undo-tree-id3579 . -1) (undo-tree-id3580 . -1) (undo-tree-id3581 . -1) (undo-tree-id3582 . -1) (#("u" 0 1 (face font-lock-constant-face fontified t)) . -6) (undo-tree-id3583 . -1) (undo-tree-id3584 . -1) (undo-tree-id3585 . -1) 7) nil (26049 51438 107346 850000) 0 nil])
([nil nil ((5 . 6)) nil (26049 51438 107339 108000) 0 nil])
([nil nil ((5 . 13) (#("u" 0 1 (fontified nil)) . 5) (5 . 6) (#("utility;" 0 8 (fontified nil)) . -5) (5 . 13) (#("u" 0 1 (face font-lock-constant-face fontified t)) . -5) (undo-tree-id3573 . -1) (undo-tree-id3574 . -1) (undo-tree-id3575 . -1) (undo-tree-id3576 . -1) (undo-tree-id3577 . -1) 6) nil (26049 51438 107335 168000) 0 nil])
([nil nil ((13 . 14) (t 26049 51438 175618 571000)) nil (26049 51455 322002 810000) 0 nil])
([nil nil ((1378 . 1379) (t 26049 51455 348952 955000)) nil (26049 51483 316809 751000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t)) . -1378) (undo-tree-id3667 . -1) (undo-tree-id3668 . -1) 1379) nil (26049 51483 316808 708000) 0 nil])
([nil nil ((1378 . 1379)) nil (26049 51483 316806 727000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -1378) (undo-tree-id3663 . -1) (undo-tree-id3664 . -1) (undo-tree-id3665 . -1) (undo-tree-id3666 . -1) 1379) nil (26049 51483 316805 968000) 0 nil])
([nil nil ((1378 . 1381)) nil (26049 51483 316802 772000) 0 nil])
([nil nil ((1381 . 1382)) nil (26049 51483 316802 159000) 0 nil])
([nil nil ((71 . 95) (1378 . 1378) (1378 . 1387) (#("plat" 0 4 (fontified nil)) . 1378) (1378 . 1382) (#("platforms (use utility::platforms)" 0 34 (fontified nil)) . -1378) (1378 . 1412) (#("plat" 0 4 (fontified t)) . -1378) (undo-tree-id3651 . -4) (undo-tree-id3652 . -1) (undo-tree-id3653 . -2) (undo-tree-id3654 . -2) (undo-tree-id3655 . -2) (undo-tree-id3656 . -2) (undo-tree-id3657 . -3) (undo-tree-id3658 . -3) (undo-tree-id3659 . -4) (undo-tree-id3660 . -4) (undo-tree-id3661 . -4) (undo-tree-id3662 . -4) 1382) nil (26049 51483 316800 640000) 0 nil])
([nil nil ((#("platforms" 0 9 (fontified t)) . -1402) (undo-tree-id3628 . -9) (undo-tree-id3629 . -9) (undo-tree-id3630 . -9) (undo-tree-id3631 . -9) (undo-tree-id3632 . -9) (undo-tree-id3633 . -9) (undo-tree-id3634 . -9) (undo-tree-id3635 . -9) (undo-tree-id3636 . -9) (undo-tree-id3637 . -9) (undo-tree-id3638 . -9) (undo-tree-id3639 . -9) (undo-tree-id3640 . -9) (undo-tree-id3641 . -9) (undo-tree-id3642 . -9) (undo-tree-id3643 . -9) (undo-tree-id3644 . -9) (undo-tree-id3645 . -9) (undo-tree-id3646 . -9) (undo-tree-id3647 . -9) (undo-tree-id3648 . -9) (undo-tree-id3649 . -9) (undo-tree-id3650 . -9) 1411) nil (26049 51483 316790 507000) 0 nil])
([nil nil ((1402 . 1404)) nil (26049 51483 316775 423000) 0 nil])
([nil nil ((1402 . 1409) (#("ut" 0 2 (fontified nil)) . 1402) (1402 . 1404) (#("utility" 0 7 (fontified nil)) . -1402) (1402 . 1409) (#("ut" 0 2 (fontified t)) . -1402) (undo-tree-id3622 . -2) (undo-tree-id3623 . -1) (undo-tree-id3624 . -2) (undo-tree-id3625 . -2) (undo-tree-id3626 . -2) (undo-tree-id3627 . -2) 1404) nil (26049 51483 316774 48000) 0 nil])
([nil nil ((1409 . 1412)) nil (26049 51483 316768 643000) 0 nil])
([nil nil ((1411 . 1420) (#("p" 0 1 (fontified nil)) . 1411) (1411 . 1412) (#("platforms" 0 9 (fontified nil)) . -1411) (1411 . 1420) (#("p" 0 1 (fontified t)) . -1411) (undo-tree-id3619 . -1) (undo-tree-id3620 . -1) (undo-tree-id3621 . -1) 1412) nil (26049 51483 316767 268000) 0 nil])
([nil nil ((1420 . 1424)) nil (26049 51483 316763 759000) 0 nil])
([nil nil ((apply yas--snippet-revive 1422 1448 #s(yas--snippet nil nil #s(yas--exit 1448 nil) 27 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1448 nil) 27 nil nil nil nil)) (1422 . 1448) (#("required_extension_names()$0" 0 28 (fontified nil)) . 1422) (1422 . 1450) (#("re" 0 2 (fontified nil)) . 1422) (1422 . 1424) (#("required_extension_names()" 0 26 (fontified nil)) . -1422) (1422 . 1448) (#("re" 0 2 (fontified t)) . -1422) (undo-tree-id3612 . -2) (undo-tree-id3613 . -1) (undo-tree-id3614 . -1) (undo-tree-id3615 . -2) (undo-tree-id3616 . -2) (undo-tree-id3617 . -2) (undo-tree-id3618 . -2) 1424) nil (26049 51483 316762 106000) 0 nil])
([nil nil ((1448 . 1450)) nil (26049 51483 316753 766000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t)) . -1449) (undo-tree-id3610 . -1) (undo-tree-id3611 . -1) 1450) nil (26049 51483 316750 489000) 0 nil])
([nil nil ((1932 . 1940) (#("        " 0 8 (fontified nil)) . 1931) (undo-tree-id3923 . -8) (1930 . 1940) (t 26049 51483 342288 1000)) nil (26049 51595 382828 663000) 0 nil])
([nil nil ((1940 . 1944)) nil (26049 51595 382827 17000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -1941) (undo-tree-id3920 . -1) (#("e" 0 1 (fontified t)) . -1942) (undo-tree-id3921 . -1) (#("t" 0 1 (fontified t)) . -1943) (undo-tree-id3922 . -1) 1944) nil (26049 51595 382825 823000) 0 nil])
([nil nil ((1941 . 1962)) nil (26049 51595 382060 374000) 0 nil])
([nil nil ((1960 . 1968) (#("In" 0 2 (fontified nil)) . 1960) (1960 . 1962) (#("Instance" 0 8 (fontified nil)) . -1960) (1960 . 1968) (#("In" 0 2 (face font-lock-type-face fontified t)) . -1960) (undo-tree-id3919 . -2) 1962) nil (26049 51595 382059 170000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1952) (undo-tree-id3916 . -1) (#("=" 0 1 (fontified t)) . -1953) (undo-tree-id3917 . -1) (#(" " 0 1 (fontified t)) . -1954) (undo-tree-id3918 . -1) 1955) nil (26049 51595 382056 803000) 0 nil])
([nil nil ((1952 . 1954)) nil (26049 51595 382054 187000) 0 nil])
([nil nil ((1967 . 1970)) nil (26049 51595 382053 579000) 0 nil])
([nil nil ((1970 . 1974)) nil (26049 51595 382052 950000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -1971) (undo-tree-id3913 . -1) (#(":" 0 1 (fontified t)) . -1972) (undo-tree-id3914 . -1) (#(":" 0 1 (fontified t)) . -1973) (undo-tree-id3915 . -1) 1974) nil (26049 51595 382051 905000) 0 nil])
([nil nil ((1971 . 1975)) nil (26049 51595 382049 251000) 0 nil])
([nil nil ((#("C" 0 1 (face font-lock-type-face fontified t)) . -1974) (undo-tree-id3912 . -1) 1975) nil (26049 51595 382048 647000) 0 nil])
([nil nil ((1974 . 1984)) nil (26049 51595 382047 432000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -1976) (undo-tree-id3904 . -1) (#("a" 0 1 (fontified t)) . -1977) (undo-tree-id3905 . -1) (#("t" 0 1 (fontified t)) . -1978) (undo-tree-id3906 . -1) (#("e" 0 1 (fontified t)) . -1979) (undo-tree-id3907 . -1) (#("_" 0 1 (fontified t)) . -1980) (undo-tree-id3908 . -1) (#("i" 0 1 (fontified t)) . -1981) (undo-tree-id3909 . -1) (#("n" 0 1 (fontified t)) . -1982) (undo-tree-id3910 . -1) (#("s" 0 1 (fontified t)) . -1983) (undo-tree-id3911 . -1) 1984) nil (26049 51595 382045 906000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -1974) (undo-tree-id3902 . -1) (#("r" 0 1 (fontified t)) . -1975) (undo-tree-id3903 . -1) 1976) nil (26049 51595 382039 575000) 0 nil])
([nil nil ((1974 . 1980)) nil (26049 51595 382037 619000) 0 nil])
([nil nil ((#("create" 0 6 (fontified t)) . -1974) (undo-tree-id3901 . -6) 1980) nil (26049 51595 382036 927000) 0 nil])
([nil nil ((1974 . 1977)) nil (26049 51595 382035 608000) 0 nil])
([nil nil ((#("Ins" 0 3 (face font-lock-type-face fontified t)) . -1974) (undo-tree-id3900 . -3) 1977) nil (26049 51595 382034 921000) 0 nil])
([nil nil ((#("vk::" 0 2 (face font-lock-constant-face fontified t) 2 4 (fontified t)) . -1970) (undo-tree-id3896 . -4) (undo-tree-id3897 . -4) (undo-tree-id3898 . -4) (undo-tree-id3899 . -4) 1974) nil (26049 51595 382033 392000) 0 nil])
([nil nil ((1970 . 1976)) nil (26049 51595 382030 302000) 0 nil])
([nil nil ((67 . 68) (69 . 80) (1970 . 1970) (1970 . 1978) (#("Instac" 0 6 (fontified nil)) . 1970) (1970 . 1976) (#("Instance (use ash::Instance)" 0 28 (fontified nil)) . -1970) (1970 . 1998) (#("Instac" 0 6 (face font-lock-type-face fontified t)) . -1970) (undo-tree-id3874 . -6) (undo-tree-id3875 . -1) (undo-tree-id3876 . -1) (undo-tree-id3877 . -1) (undo-tree-id3878 . -1) (undo-tree-id3879 . -2) (undo-tree-id3880 . -2) (undo-tree-id3881 . -2) (undo-tree-id3882 . -3) (undo-tree-id3883 . -3) (undo-tree-id3884 . -3) (undo-tree-id3885 . -3) (undo-tree-id3886 . -4) (undo-tree-id3887 . -4) (undo-tree-id3888 . -4) (undo-tree-id3889 . -5) (undo-tree-id3890 . -5) (undo-tree-id3891 . -6) (undo-tree-id3892 . -6) (undo-tree-id3893 . -6) (undo-tree-id3894 . -6) (undo-tree-id3895 . -6) 1976) nil (26049 51595 382028 583000) 0 nil])
([nil nil ((1990 . 1995)) nil (26049 51595 382014 147000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -1992) (undo-tree-id3845 . -1) (undo-tree-id3846 . -1) (undo-tree-id3847 . -1) (undo-tree-id3848 . -1) (undo-tree-id3849 . -1) (undo-tree-id3850 . -1) (undo-tree-id3851 . -1) (undo-tree-id3852 . -1) (undo-tree-id3853 . -1) (undo-tree-id3854 . -1) (undo-tree-id3855 . -1) (undo-tree-id3856 . -1) (undo-tree-id3857 . -1) (undo-tree-id3858 . -1) (undo-tree-id3859 . -1) (#("e" 0 1 (fontified t)) . -1993) (undo-tree-id3860 . -1) (undo-tree-id3861 . -1) (undo-tree-id3862 . -1) (undo-tree-id3863 . -1) (undo-tree-id3864 . -1) (undo-tree-id3865 . -1) (undo-tree-id3866 . -1) (undo-tree-id3867 . -1) (undo-tree-id3868 . -1) (#("w" 0 1 (fontified t)) . -1994) (undo-tree-id3869 . -1) (undo-tree-id3870 . -1) (undo-tree-id3871 . -1) (undo-tree-id3872 . -1) (undo-tree-id3873 . -1) 1995) nil (26049 51595 382012 435000) 0 nil])
([nil nil ((1992 . 1994)) nil (26049 51595 381994 566000) 0 nil])
([nil nil ((#("cr" 0 2 (fontified t)) . -1992) (undo-tree-id3835 . -2) (undo-tree-id3836 . -1) (undo-tree-id3837 . -1) (undo-tree-id3838 . -1) (undo-tree-id3839 . -1) (undo-tree-id3840 . -2) (undo-tree-id3841 . -2) (undo-tree-id3842 . -2) (undo-tree-id3843 . -2) (undo-tree-id3844 . -2) 1994) nil (26049 51595 381993 623000) 0 nil])
([nil nil ((#("Instance::" 0 8 (face font-lock-type-face fontified t) 8 10 (fontified t)) . -1982) (undo-tree-id3800 . -10) (undo-tree-id3801 . -8) (undo-tree-id3802 . -8) (undo-tree-id3803 . -8) (undo-tree-id3804 . -9) (undo-tree-id3805 . -10) (undo-tree-id3806 . -10) (undo-tree-id3807 . -10) (undo-tree-id3808 . -10) (undo-tree-id3809 . -10) (undo-tree-id3810 . -10) (undo-tree-id3811 . -10) (undo-tree-id3812 . -10) (undo-tree-id3813 . -10) (undo-tree-id3814 . -10) (undo-tree-id3815 . -10) (undo-tree-id3816 . -10) (undo-tree-id3817 . -10) (undo-tree-id3818 . -10) (undo-tree-id3819 . -10) (undo-tree-id3820 . -10) (undo-tree-id3821 . -10) (undo-tree-id3822 . -10) (undo-tree-id3823 . -10) (undo-tree-id3824 . -10) (undo-tree-id3825 . -10) (undo-tree-id3826 . -10) (undo-tree-id3827 . -10) (undo-tree-id3828 . -10) (undo-tree-id3829 . -10) (undo-tree-id3830 . -10) (undo-tree-id3831 . -10) (undo-tree-id3832 . -10) (undo-tree-id3833 . -10) (undo-tree-id3834 . -10) 1992) nil (26049 51595 381985 713000) 0 nil])
([nil nil ((#("let instance: ash::Instance = " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 12 (face font-lock-variable-name-face fontified t) 12 14 (fontified t) 14 17 (face font-lock-constant-face fontified t) 17 19 (fontified t) 19 27 (face font-lock-type-face fontified t) 27 30 (fontified t)) . -1952) (undo-tree-id3680 . -27) (undo-tree-id3681 . -30) (undo-tree-id3682 . -30) (undo-tree-id3683 . -30) (undo-tree-id3684 . -30) (undo-tree-id3685 . -30) (undo-tree-id3686 . -30) (undo-tree-id3687 . -30) (undo-tree-id3688 . -30) (undo-tree-id3689 . -30) (undo-tree-id3690 . -30) (undo-tree-id3691 . -30) (undo-tree-id3692 . -30) (undo-tree-id3693 . -30) (undo-tree-id3694 . -30) (undo-tree-id3695 . -30) (undo-tree-id3696 . -30) (undo-tree-id3697 . -30) (undo-tree-id3698 . -30) (undo-tree-id3699 . -30) (undo-tree-id3700 . -30) (undo-tree-id3701 . -30) (undo-tree-id3702 . -30) (undo-tree-id3703 . -30) (undo-tree-id3704 . -30) (undo-tree-id3705 . -30) (undo-tree-id3706 . -30) (undo-tree-id3707 . -30) (undo-tree-id3708 . -30) (undo-tree-id3709 . -30) (undo-tree-id3710 . -30) (undo-tree-id3711 . -30) (undo-tree-id3712 . -30) (undo-tree-id3713 . -30) (undo-tree-id3714 . -30) (undo-tree-id3715 . -30) (undo-tree-id3716 . -30) (undo-tree-id3717 . -30) (undo-tree-id3718 . -30) (undo-tree-id3719 . -30) (undo-tree-id3720 . -30) (undo-tree-id3721 . -30) (undo-tree-id3722 . -30) (undo-tree-id3723 . -30) (undo-tree-id3724 . -30) (undo-tree-id3725 . -30) (undo-tree-id3726 . -30) (undo-tree-id3727 . -30) (undo-tree-id3728 . -30) (undo-tree-id3729 . -30) (undo-tree-id3730 . -30) (undo-tree-id3731 . -30) (undo-tree-id3732 . -30) (undo-tree-id3733 . -30) (undo-tree-id3734 . -30) (undo-tree-id3735 . -30) (undo-tree-id3736 . -30) (undo-tree-id3737 . -30) (undo-tree-id3738 . -30) (undo-tree-id3739 . -30) (undo-tree-id3740 . -30) (undo-tree-id3741 . -30) (undo-tree-id3742 . -30) (undo-tree-id3743 . -30) (undo-tree-id3744 . -30) (undo-tree-id3745 . -30) (undo-tree-id3746 . -30) (undo-tree-id3747 . -30) (undo-tree-id3748 . -30) (undo-tree-id3749 . -30) (undo-tree-id3750 . -30) (undo-tree-id3751 . -30) (undo-tree-id3752 . -30) (undo-tree-id3753 . -30) (undo-tree-id3754 . -30) (undo-tree-id3755 . -30) (undo-tree-id3756 . -30) (undo-tree-id3757 . -30) (undo-tree-id3758 . -30) (undo-tree-id3759 . -30) (undo-tree-id3760 . -30) (undo-tree-id3761 . -30) (undo-tree-id3762 . -29) (undo-tree-id3763 . -28) (undo-tree-id3764 . -27) (undo-tree-id3765 . -30) (undo-tree-id3766 . -27) (undo-tree-id3767 . -27) (undo-tree-id3768 . -27) (undo-tree-id3769 . -27) (undo-tree-id3770 . -1) (undo-tree-id3771 . -3) (undo-tree-id3772 . -4) (undo-tree-id3773 . -5) (undo-tree-id3774 . -7) (undo-tree-id3775 . -8) (undo-tree-id3776 . -9) (undo-tree-id3777 . -11) (undo-tree-id3778 . -12) (undo-tree-id3779 . -13) (undo-tree-id3780 . -15) (undo-tree-id3781 . -16) (undo-tree-id3782 . -18) (undo-tree-id3783 . -19) (undo-tree-id3784 . -20) (undo-tree-id3785 . -22) (undo-tree-id3786 . -23) (undo-tree-id3787 . -24) (undo-tree-id3788 . -25) (undo-tree-id3789 . -27) (undo-tree-id3790 . -28) (undo-tree-id3791 . -29) (undo-tree-id3792 . -30) (undo-tree-id3793 . -30) (undo-tree-id3794 . -30) (undo-tree-id3795 . -30) (undo-tree-id3796 . -30) (undo-tree-id3797 . -30) (undo-tree-id3798 . -30) (undo-tree-id3799 . -30) 1982) nil (26049 51595 381960 180000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2133 . 2134) (nil fontified nil 1952 . 2134) (1952 . 2134)) nil (26049 51595 381848 707000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -1952) 1943) nil (26049 51595 381847 171000) 0 nil])
([nil nil ((2126 . 2135)) nil (26049 51595 381845 772000) 0 nil])
([nil nil ((2144 . 2147)) nil (26049 51595 381844 158000) 0 nil])
([nil nil ((2144 . 2152) (#("ins" 0 3 (fontified nil)) . 2144) (2144 . 2147) (#("instance" 0 8 (fontified nil)) . -2144) (2144 . 2152) (#("ins" 0 3 (fontified t)) . -2144) (undo-tree-id3669 . -3) (undo-tree-id3670 . -1) (undo-tree-id3671 . -2) (undo-tree-id3672 . -2) (undo-tree-id3673 . -2) (undo-tree-id3674 . -2) (undo-tree-id3675 . -3) (undo-tree-id3676 . -3) (undo-tree-id3677 . -3) (undo-tree-id3678 . -3) (undo-tree-id3679 . -3) 2147) nil (26049 51595 381838 742000) 0 nil])
([nil nil ((nil rear-nonsticky nil 854 . 855) (nil fontified nil 837 . 855) (837 . 855) (t 26049 51595 405628 215000)) nil (26049 51602 789209 933000) 0 nil])
([nil nil ((nil rear-nonsticky nil 632 . 633) (nil fontified nil 498 . 633) (498 . 633) (t 26049 51602 812295 332000)) nil (26049 51662 28355 223000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -498) 521) nil (26049 51662 28354 75000) 0 nil])
([nil nil ((417 . 422)) nil (26049 51662 28353 260000) 0 nil])
([nil nil ((422 . 431)) nil (26049 51662 28352 665000) 0 nil])
([nil nil ((430 . 435) (#("a" 0 1 (fontified nil)) . 430) (430 . 431) (#("alloc" 0 5 (fontified nil)) . -430) (430 . 435) (#("a" 0 1 (fontified t)) . -430) (undo-tree-id3968 . -1) (undo-tree-id3969 . -1) (undo-tree-id3970 . -1) 431) nil (26049 51662 28351 393000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -431) (undo-tree-id3928 . -1) (undo-tree-id3929 . -1) (undo-tree-id3930 . -1) (undo-tree-id3931 . -1) (undo-tree-id3932 . -1) (undo-tree-id3933 . -1) (undo-tree-id3934 . -1) (undo-tree-id3935 . -1) (undo-tree-id3936 . -1) (undo-tree-id3937 . -1) (undo-tree-id3938 . -1) (undo-tree-id3939 . -1) (undo-tree-id3940 . -1) (#("l" 0 1 (fontified t)) . -432) (undo-tree-id3941 . -1) (undo-tree-id3942 . -1) (undo-tree-id3943 . -1) (undo-tree-id3944 . -1) (undo-tree-id3945 . -1) (undo-tree-id3946 . -1) (undo-tree-id3947 . -1) (undo-tree-id3948 . -1) (undo-tree-id3949 . -1) (undo-tree-id3950 . -1) (undo-tree-id3951 . -1) (#("o" 0 1 (fontified t)) . -433) (undo-tree-id3952 . -1) (undo-tree-id3953 . -1) (undo-tree-id3954 . -1) (undo-tree-id3955 . -1) (undo-tree-id3956 . -1) (undo-tree-id3957 . -1) (undo-tree-id3958 . -1) (undo-tree-id3959 . -1) (undo-tree-id3960 . -1) (#("c" 0 1 (fontified t)) . -434) (undo-tree-id3961 . -1) (undo-tree-id3962 . -1) (undo-tree-id3963 . -1) (undo-tree-id3964 . -1) (undo-tree-id3965 . -1) (undo-tree-id3966 . -1) (undo-tree-id3967 . -1) 435) nil (26049 51662 28345 890000) 0 nil])
([nil nil ((431 . 433)) nil (26049 51662 28317 567000) 0 nil])
([nil nil ((433 . 436)) nil (26049 51662 28316 763000) 0 nil])
([nil nil ((435 . 440) (#("E" 0 1 (fontified nil)) . 435) (435 . 436) (#("Entry" 0 5 (fontified nil)) . -435) (435 . 440) (#("E" 0 1 (face font-lock-type-face fontified t)) . -435) (undo-tree-id3924 . -1) (undo-tree-id3925 . -1) (undo-tree-id3926 . -1) (undo-tree-id3927 . -1) 436) nil (26049 51662 28314 191000) 0 nil])
([nil nil ((440 . 441)) nil (26049 51662 28300 823000) 0 nil])
([nil nil ((651 . 659) (#("        " 0 8 (fontified nil)) . 650) (undo-tree-id4391 . -8) (undo-tree-id4392 . -8) (undo-tree-id4393 . -8) (undo-tree-id4394 . -8) (649 . 659) (t 26049 51662 52298 969000)) nil (26049 51714 517937 386000) 0 nil])
([nil nil ((659 . 660)) nil (26049 51714 517923 842000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 679 681 nil nil nil nil #s(yas--field 2 691 693 nil nil nil nil #s(yas--field 3 705 707 nil nil nil nil #s(yas--exit 709 nil)))) #s(yas--field 2 691 693 nil nil nil nil #s(yas--field 3 705 707 nil nil nil nil #s(yas--exit 709 nil))) #s(yas--field 3 705 707 nil nil nil nil #s(yas--exit 709 nil))) #s(yas--exit 709 nil) 28 nil #s(yas--field 1 679 681 nil nil nil nil #s(yas--field 2 691 693 nil nil nil nil #s(yas--field 3 705 707 nil nil nil nil #s(yas--exit 709 nil)))) nil nil)) (659 . 709) (#("VulkanApp { window: ${1:()}, _entry: ${2:()}, instance: ${3:()} }$0" 0 67 (fontified nil)) . 659) (659 . 726) (#("V" 0 1 (fontified nil)) . 659) (659 . 660) (#("VulkanApp {…}" 0 13 (fontified nil)) . -659) (659 . 672) (#("V" 0 1 (face font-lock-type-face fontified t)) . -659) (undo-tree-id4386 . -1) (undo-tree-id4387 . -1) (undo-tree-id4388 . -1) (undo-tree-id4389 . -1) (undo-tree-id4390 . -1) 660) nil (26049 51714 517922 550000) 0 nil])
([nil nil ((apply yas--snippet-revive 659 709 #s(yas--snippet nil (#s(yas--field 1 679 681 nil nil nil nil #s(yas--field 2 691 693 nil nil nil nil #s(yas--field 3 705 707 nil nil nil nil #s(yas--exit 709 nil)))) #s(yas--field 2 691 693 nil nil nil nil #s(yas--field 3 705 707 nil nil nil nil #s(yas--exit 709 nil))) #s(yas--field 3 705 707 nil nil nil nil #s(yas--exit 709 nil))) #s(yas--exit 709 nil) 28 nil #s(yas--field 1 679 681 nil nil nil nil #s(yas--field 2 691 693 nil nil nil nil #s(yas--field 3 705 707 nil nil nil nil #s(yas--exit 709 nil)))) nil nil))) nil (26049 51714 517917 807000) 0 nil])
([nil nil ((650 . 658)) nil (26049 51714 517917 223000) 0 nil])
([nil nil ((658 . 661)) nil (26049 51714 517916 593000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t)) . -659) (undo-tree-id4376 . -1) (undo-tree-id4377 . -1) (undo-tree-id4378 . -1) (undo-tree-id4379 . -1) (undo-tree-id4380 . -1) (undo-tree-id4381 . -1) (undo-tree-id4382 . -1) (#("e" 0 1 (fontified t)) . -660) (undo-tree-id4383 . -1) (undo-tree-id4384 . -1) (undo-tree-id4385 . -1) 661) nil (26049 51714 517915 521000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -658) (undo-tree-id4365 . -1) (undo-tree-id4366 . -1) (undo-tree-id4367 . -1) (undo-tree-id4368 . -1) (undo-tree-id4369 . -1) (undo-tree-id4370 . -1) (undo-tree-id4371 . -1) (undo-tree-id4372 . -1) (undo-tree-id4373 . -1) (undo-tree-id4374 . -1) (undo-tree-id4375 . -1) 659) nil (26049 51714 517907 960000) 0 nil])
([nil nil ((515 . 523) (#("        " 0 8 (fontified nil)) . 514) (undo-tree-id4361 . -8) (undo-tree-id4362 . -8) (undo-tree-id4363 . -8) (undo-tree-id4364 . -8) (513 . 523)) nil (26049 51714 517900 431000) 0 nil])
([nil nil ((514 . 522)) nil (26049 51714 517896 812000) 0 nil])
([nil nil ((522 . 541)) nil (26049 51714 517896 166000) 0 nil])
([nil nil ((#("create" 0 6 (fontified t)) . -535) (undo-tree-id4343 . -6) (undo-tree-id4344 . -1) (undo-tree-id4345 . -1) (undo-tree-id4346 . -2) (undo-tree-id4347 . -2) (undo-tree-id4348 . -2) (undo-tree-id4349 . -3) (undo-tree-id4350 . -3) (undo-tree-id4351 . -3) (undo-tree-id4352 . -4) (undo-tree-id4353 . -4) (undo-tree-id4354 . -4) (undo-tree-id4355 . -5) (undo-tree-id4356 . -5) (undo-tree-id4357 . -6) (undo-tree-id4358 . -6) (undo-tree-id4359 . -6) (undo-tree-id4360 . -6) 541) nil (26049 51714 517894 921000) 0 nil])
([nil nil ((535 . 537)) nil (26049 51714 517883 186000) 0 nil])
([nil nil ((535 . 541) (#("se" 0 2 (fontified nil)) . 535) (535 . 537) (#("self::" 0 6 (fontified nil)) . -535) (535 . 541) (#("se" 0 2 (fontified t)) . -535) (undo-tree-id4334 . -2) (undo-tree-id4335 . -1) (undo-tree-id4336 . -1) (undo-tree-id4337 . -1) (undo-tree-id4338 . -2) (undo-tree-id4339 . -2) (undo-tree-id4340 . -2) (undo-tree-id4341 . -2) (undo-tree-id4342 . -2) 537) nil (26049 51714 517881 421000) 0 nil])
([nil nil ((541 . 547)) nil (26049 51714 517262 686000) 0 nil])
([nil nil ((#("create" 0 6 (fontified t)) . -541) (undo-tree-id4309 . -6) (undo-tree-id4310 . -1) (undo-tree-id4311 . -1) (undo-tree-id4312 . -1) (undo-tree-id4313 . -2) (undo-tree-id4314 . -2) (undo-tree-id4315 . -2) (undo-tree-id4316 . -2) (undo-tree-id4317 . -2) (undo-tree-id4318 . -3) (undo-tree-id4319 . -3) (undo-tree-id4320 . -3) (undo-tree-id4321 . -3) (undo-tree-id4322 . -4) (undo-tree-id4323 . -4) (undo-tree-id4324 . -4) (undo-tree-id4325 . -4) (undo-tree-id4326 . -4) (undo-tree-id4327 . -5) (undo-tree-id4328 . -5) (undo-tree-id4329 . -6) (undo-tree-id4330 . -6) (undo-tree-id4331 . -6) (undo-tree-id4332 . -6) (undo-tree-id4333 . -6) 547) nil (26049 51714 517259 981000) 0 nil])
([nil nil ((#("self::" 0 4 (face font-lock-keyword-face fontified t) 4 6 (fontified t)) . -535) (undo-tree-id4275 . -6) (undo-tree-id4276 . -6) (undo-tree-id4277 . -6) (undo-tree-id4278 . -6) (undo-tree-id4279 . -6) (undo-tree-id4280 . -6) (undo-tree-id4281 . -6) (undo-tree-id4282 . -6) (undo-tree-id4283 . -6) (undo-tree-id4284 . -6) (undo-tree-id4285 . -6) (undo-tree-id4286 . -6) (undo-tree-id4287 . -6) (undo-tree-id4288 . -6) (undo-tree-id4289 . -6) (undo-tree-id4290 . -6) (undo-tree-id4291 . -6) (undo-tree-id4292 . -6) (undo-tree-id4293 . -6) (undo-tree-id4294 . -6) (undo-tree-id4295 . -6) (undo-tree-id4296 . -6) (undo-tree-id4297 . -6) (undo-tree-id4298 . -6) (undo-tree-id4299 . -6) (undo-tree-id4300 . -6) (undo-tree-id4301 . -6) (undo-tree-id4302 . -6) (undo-tree-id4303 . -6) (undo-tree-id4304 . -6) (undo-tree-id4305 . -6) (undo-tree-id4306 . -6) (undo-tree-id4307 . -6) (undo-tree-id4308 . -6) 541) nil (26049 51714 516501 397000) 0 nil])
([nil nil ((535 . 536)) nil (26049 51714 516479 282000) 0 nil])
([nil nil ((535 . 544) (#("V" 0 1 (fontified nil)) . 535) (535 . 536) (#("VulkanApp" 0 9 (fontified nil)) . -535) (535 . 544) (#("V" 0 1 (face font-lock-type-face fontified t)) . -535) (undo-tree-id4269 . -1) (undo-tree-id4270 . -1) (undo-tree-id4271 . -1) (undo-tree-id4272 . -1) (undo-tree-id4273 . -1) (undo-tree-id4274 . -1) 536) nil (26049 51714 516478 28000) 0 nil])
([nil nil ((544 . 547)) nil (26049 51714 516473 111000) 0 nil])
([nil nil ((#("C" 0 1 (face font-lock-type-face fontified t)) . -546) (undo-tree-id4263 . -1) (undo-tree-id4264 . -1) (undo-tree-id4265 . -1) (undo-tree-id4266 . -1) (undo-tree-id4267 . -1) (undo-tree-id4268 . -1) 547) nil (26049 51714 516472 180000) 0 nil])
([nil nil ((546 . 547)) nil (26049 51714 516467 869000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 560 570 nil nil nil nil #s(yas--exit 571 nil))) #s(yas--exit 571 nil) 29 nil #s(yas--field 1 560 570 nil nil nil nil #s(yas--exit 571 nil)) nil nil)) (546 . 571) (#("create_window(${1:event_loop})$0" 0 32 (fontified nil)) . 546) (546 . 578) (#("c" 0 1 (fontified nil)) . 546) (546 . 547) (#("create_window(…)" 0 16 (fontified nil)) . -546) (546 . 562) (#("c" 0 1 (fontified t)) . -546) (undo-tree-id4257 . -1) (undo-tree-id4258 . -1) (undo-tree-id4259 . -1) (undo-tree-id4260 . -1) (undo-tree-id4261 . -1) (undo-tree-id4262 . -1) 547) nil (26049 51714 516466 402000) 0 nil])
([nil nil ((apply yas--snippet-revive 546 571 #s(yas--snippet nil (#s(yas--field 1 560 570 nil nil nil nil #s(yas--exit 571 nil))) #s(yas--exit 571 nil) 29 nil #s(yas--field 1 560 570 nil nil nil nil #s(yas--exit 571 nil)) nil nil))) nil (26049 51714 516460 537000) 0 nil])
([nil nil ((#("let window = VulkanApp::create_window(event_loop)" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 10 (face font-lock-variable-name-face fontified t) 10 13 (fontified t) 13 22 (face font-lock-type-face fontified t) 22 24 (fontified t) 24 37 (fontified t) 37 38 (face (rainbow-delimiters-depth-3-face) fontified t) 38 48 (fontified t) 48 49 (face (rainbow-delimiters-depth-3-face) fontified t)) . 522) (undo-tree-id4116 . -38) (undo-tree-id4117 . -1) (undo-tree-id4118 . -1) (undo-tree-id4119 . -2) (undo-tree-id4120 . -2) (undo-tree-id4121 . -2) (undo-tree-id4122 . -3) (undo-tree-id4123 . -3) (undo-tree-id4124 . -4) (undo-tree-id4125 . -4) (undo-tree-id4126 . -4) (undo-tree-id4127 . -5) (undo-tree-id4128 . -5) (undo-tree-id4129 . -6) (undo-tree-id4130 . -6) (undo-tree-id4131 . -7) (undo-tree-id4132 . -7) (undo-tree-id4133 . -8) (undo-tree-id4134 . -8) (undo-tree-id4135 . -9) (undo-tree-id4136 . -9) (undo-tree-id4137 . -10) (undo-tree-id4138 . -10) (undo-tree-id4139 . -11) (undo-tree-id4140 . -11) (undo-tree-id4141 . -11) (undo-tree-id4142 . -12) (undo-tree-id4143 . -12) (undo-tree-id4144 . -13) (undo-tree-id4145 . -13) (undo-tree-id4146 . -13) (undo-tree-id4147 . -13) (undo-tree-id4148 . -13) (undo-tree-id4149 . -13) (undo-tree-id4150 . -13) (undo-tree-id4151 . -13) (undo-tree-id4152 . -13) (undo-tree-id4153 . -13) (undo-tree-id4154 . -13) (undo-tree-id4155 . -13) (undo-tree-id4156 . -13) (undo-tree-id4157 . -13) (undo-tree-id4158 . -13) (undo-tree-id4159 . -13) (undo-tree-id4160 . -13) (undo-tree-id4161 . -13) (undo-tree-id4162 . -13) (undo-tree-id4163 . -13) (undo-tree-id4164 . -13) (undo-tree-id4165 . -13) (undo-tree-id4166 . -13) (undo-tree-id4167 . -13) (undo-tree-id4168 . -13) (undo-tree-id4169 . -13) (undo-tree-id4170 . -13) (undo-tree-id4171 . -13) (undo-tree-id4172 . -13) (undo-tree-id4173 . -13) (undo-tree-id4174 . -13) (undo-tree-id4175 . -13) (undo-tree-id4176 . -13) (undo-tree-id4177 . -13) (undo-tree-id4178 . -13) (undo-tree-id4179 . -13) (undo-tree-id4180 . -13) (undo-tree-id4181 . -13) (undo-tree-id4182 . -13) (undo-tree-id4183 . -13) (undo-tree-id4184 . -13) (undo-tree-id4185 . -13) (undo-tree-id4186 . -13) (undo-tree-id4187 . -13) (undo-tree-id4188 . -13) (undo-tree-id4189 . -13) (undo-tree-id4190 . -13) (undo-tree-id4191 . -13) (undo-tree-id4192 . -13) (undo-tree-id4193 . -13) (undo-tree-id4194 . -13) (undo-tree-id4195 . -13) (undo-tree-id4196 . -13) (undo-tree-id4197 . -13) (undo-tree-id4198 . -13) (undo-tree-id4199 . -13) (undo-tree-id4200 . -13) (undo-tree-id4201 . -13) (undo-tree-id4202 . -13) (undo-tree-id4203 . -13) (undo-tree-id4204 . -13) (undo-tree-id4205 . -13) (undo-tree-id4206 . -13) (undo-tree-id4207 . -13) (undo-tree-id4208 . -13) (undo-tree-id4209 . -13) (undo-tree-id4210 . -13) (undo-tree-id4211 . -13) (undo-tree-id4212 . -13) (undo-tree-id4213 . -13) (undo-tree-id4214 . -13) (undo-tree-id4215 . -13) (undo-tree-id4216 . -13) (undo-tree-id4217 . -13) (undo-tree-id4218 . -13) (undo-tree-id4219 . -13) (undo-tree-id4220 . -13) (undo-tree-id4221 . -22) (undo-tree-id4222 . -22) (undo-tree-id4223 . -22) (undo-tree-id4224 . -23) (undo-tree-id4225 . -23) (undo-tree-id4226 . -24) (undo-tree-id4227 . -24) (undo-tree-id4228 . -24) (undo-tree-id4229 . -24) (undo-tree-id4230 . -24) (undo-tree-id4231 . -24) (undo-tree-id4232 . -24) (undo-tree-id4233 . -24) (undo-tree-id4234 . -24) (undo-tree-id4235 . -24) (undo-tree-id4236 . -24) (undo-tree-id4237 . -24) (undo-tree-id4238 . -24) (undo-tree-id4239 . -24) (undo-tree-id4240 . -24) (undo-tree-id4241 . -49) (undo-tree-id4242 . -49) (undo-tree-id4243 . -38) (undo-tree-id4244 . -38) (undo-tree-id4245 . -38) (undo-tree-id4246 . -38) (undo-tree-id4247 . -38) (undo-tree-id4248 . -38) (undo-tree-id4249 . -38) (undo-tree-id4250 . -38) (undo-tree-id4251 . -38) (undo-tree-id4252 . -38) (undo-tree-id4253 . -38) (undo-tree-id4254 . -38) (undo-tree-id4255 . -38) (undo-tree-id4256 . -49)) nil (26049 51714 516455 448000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 522) (undo-tree-id4114 . 1) (undo-tree-id4115 . -1)) nil (26049 51714 516281 196000) 0 nil])
([nil nil ((#("        
" 0 8 (fontified t) 8 9 (fontified t)) . 522) (undo-tree-id4108 . 9) (undo-tree-id4109 . -8) (undo-tree-id4110 . -8) (undo-tree-id4111 . -8) (undo-tree-id4112 . -8) (undo-tree-id4113 . -9)) nil (26049 51714 516279 138000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -522) (undo-tree-id4099 . -8) (undo-tree-id4100 . -8) (undo-tree-id4101 . -8) (undo-tree-id4102 . -8) (undo-tree-id4103 . -8) (undo-tree-id4104 . -8) (undo-tree-id4105 . -8) (undo-tree-id4106 . -8) (undo-tree-id4107 . 8)) nil (26049 51714 516274 362000) 0 nil])
([nil nil ((#("window: winit::window::Window," 0 6 (face font-lock-variable-name-face fontified t) 6 8 (fontified t) 8 13 (face font-lock-constant-face fontified t) 13 15 (fontified t) 15 21 (face font-lock-constant-face fontified t) 21 23 (fontified t) 23 29 (face font-lock-type-face fontified t) 29 30 (fontified t)) . 387) (undo-tree-id4097 . -30) (undo-tree-id4098 . -30)) nil (26049 51714 516267 486000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 387) (undo-tree-id4096 . -1)) nil (26049 51714 516265 450000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -387)) nil (26049 51714 516264 9000) 0 nil])
([nil nil ((#("    VulkanApp { window: (), _entry: (), instance: () }" 0 4 (fontified t) 4 13 (face font-lock-type-face fontified t) 13 14 (fontified t) 14 15 (face (rainbow-delimiters-depth-3-face) fontified t) 15 16 (fontified t) 16 22 (face font-lock-variable-name-face fontified t) 22 24 (fontified t) 24 25 (face (rainbow-delimiters-depth-4-face) fontified t) 25 26 (face (rainbow-delimiters-depth-4-face) fontified t) 26 28 (fontified t) 28 34 (face font-lock-variable-name-face fontified t) 34 36 (fontified t) 36 37 (face (rainbow-delimiters-depth-4-face) fontified t) 37 38 (face (rainbow-delimiters-depth-4-face) fontified t) 38 40 (fontified t) 40 48 (face font-lock-variable-name-face fontified t) 48 50 (fontified t) 50 51 (face (rainbow-delimiters-depth-4-face) fontified t) 51 52 (face (rainbow-delimiters-depth-4-face) fontified t) 52 53 (fontified t) 53 54 (face (rainbow-delimiters-depth-3-face) fontified t)) . 628) (undo-tree-id4076 . -4) (undo-tree-id4077 . -4) (undo-tree-id4078 . -4) (undo-tree-id4079 . -4) (undo-tree-id4080 . -4) (undo-tree-id4081 . -4) (undo-tree-id4082 . -4) (undo-tree-id4083 . -4) (undo-tree-id4084 . -54) (undo-tree-id4085 . -54) (undo-tree-id4086 . -24) (undo-tree-id4087 . -24) (undo-tree-id4088 . -24) (undo-tree-id4089 . -24) (undo-tree-id4090 . -24) (undo-tree-id4091 . -24) (undo-tree-id4092 . -24) (undo-tree-id4093 . -24) (undo-tree-id4094 . -24) (undo-tree-id4095 . -54)) nil (26049 51714 516262 784000) 0 nil])
([nil nil ((624 . 632) (#("    " 0 4 (fontified t)) . 624) (undo-tree-id4050 . -4) (undo-tree-id4051 . -4) (undo-tree-id4052 . -4) (undo-tree-id4053 . -4) (undo-tree-id4054 . -4) (undo-tree-id4055 . -4) (undo-tree-id4056 . -4) (undo-tree-id4057 . -4) (undo-tree-id4058 . -4) (undo-tree-id4059 . -4) (undo-tree-id4060 . -4) (undo-tree-id4061 . -4) (undo-tree-id4062 . -4) (undo-tree-id4063 . -4) (undo-tree-id4064 . -4) (undo-tree-id4065 . -4) (undo-tree-id4066 . -4) (undo-tree-id4067 . -4) (undo-tree-id4068 . -4) (undo-tree-id4069 . -4) (undo-tree-id4070 . -4) (undo-tree-id4071 . -4) (undo-tree-id4072 . -4) (undo-tree-id4073 . -4) (undo-tree-id4074 . -4) (undo-tree-id4075 . -4) 628) nil (26049 51714 516247 843000) 0 nil])
([nil nil ((632 . 633)) nil (26049 51714 516113 602000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t)) . -632) (undo-tree-id4045 . -1) (undo-tree-id4046 . -1) (undo-tree-id4047 . -1) (undo-tree-id4048 . -1) (undo-tree-id4049 . -1) 633) nil (26049 51714 516112 417000) 0 nil])
([nil nil ((632 . 633)) nil (26049 51714 516108 732000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 651 656 nil nil nil t #s(yas--field 2 668 670 nil nil nil nil #s(yas--exit 672 nil))) #s(yas--field 2 668 670 nil nil nil nil #s(yas--exit 672 nil))) #s(yas--exit 672 nil) 30 nil #s(yas--field 1 651 656 nil nil nil t #s(yas--field 2 668 670 nil nil nil nil #s(yas--exit 672 nil))) nil nil)) (632 . 670) (#("VulkanApp { _entry: ${1:()}, instance: ${2:()} }$0" 0 50 (fontified nil)) . 632) (632 . 682) (#("V" 0 1 (fontified nil)) . 632) (632 . 633) (#("VulkanApp {…}" 0 13 (fontified nil)) . -632) (632 . 645) (#("V" 0 1 (face font-lock-type-face fontified t)) . -632) (undo-tree-id4040 . -1) (undo-tree-id4041 . -1) (undo-tree-id4042 . -1) (undo-tree-id4043 . -1) (undo-tree-id4044 . -1) 633) nil (26049 51714 516107 159000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -651) (undo-tree-id4010 . -1) (undo-tree-id4011 . -1) (undo-tree-id4012 . -1) (undo-tree-id4013 . -1) (undo-tree-id4014 . -1) (undo-tree-id4015 . -1) (undo-tree-id4016 . -1) (undo-tree-id4017 . -1) (undo-tree-id4018 . -1) (undo-tree-id4019 . -1) (undo-tree-id4020 . -1) (undo-tree-id4021 . -1) (undo-tree-id4022 . -1) (undo-tree-id4023 . -1) (undo-tree-id4024 . -1) (undo-tree-id4025 . -1) (undo-tree-id4026 . -1) (undo-tree-id4027 . -1) (undo-tree-id4028 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -652) (undo-tree-id4029 . -1) (undo-tree-id4030 . -1) (undo-tree-id4031 . -1) (undo-tree-id4032 . -1) (undo-tree-id4033 . -1) (undo-tree-id4034 . -1) (undo-tree-id4035 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -653) (undo-tree-id4036 . -1) (undo-tree-id4037 . -1) (undo-tree-id4038 . -1) (undo-tree-id4039 . -1) 654) nil (26049 51714 516100 322000) 0 nil])
([nil nil ((651 . 652)) nil (26049 51714 516079 175000) 0 nil])
([nil nil ((651 . 656) (#("e" 0 1 (fontified nil)) . 651) (undo-tree-id4001 . -1) (651 . 652) (#("entry" 0 5 (fontified nil)) . -651) (undo-tree-id4002 . -5) (651 . 656) (#("e" 0 1 (fontified t)) . -651) (undo-tree-id4003 . -1) (undo-tree-id4004 . -1) (undo-tree-id4005 . -1) (undo-tree-id4006 . -1) (undo-tree-id4007 . -1) (undo-tree-id4008 . -1) (undo-tree-id4009 . -1) 652) nil (26049 51714 516077 568000) 0 nil])
([nil nil ((apply yas--snippet-revive 632 672 #s(yas--snippet nil (#s(yas--field 1 651 656 nil nil nil t #s(yas--field 2 668 670 nil nil nil nil #s(yas--exit 672 nil))) #s(yas--field 2 668 670 nil nil nil nil #s(yas--exit 672 nil))) #s(yas--exit 672 nil) 30 nil #s(yas--field 1 651 656 nil nil nil t #s(yas--field 2 668 670 nil nil nil nil #s(yas--exit 672 nil))) nil nil))) nil (26049 51714 516069 196000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -666) (undo-tree-id3971 . -1) (undo-tree-id3972 . -1) (undo-tree-id3973 . -1) (undo-tree-id3974 . -1) (undo-tree-id3975 . -1) (undo-tree-id3976 . -1) (undo-tree-id3977 . -1) (undo-tree-id3978 . -1) (undo-tree-id3979 . -1) (undo-tree-id3980 . -1) (#(" " 0 1 (fontified t)) . -667) (undo-tree-id3981 . -1) (undo-tree-id3982 . -1) (undo-tree-id3983 . -1) (undo-tree-id3984 . -1) (undo-tree-id3985 . -1) (undo-tree-id3986 . -1) (undo-tree-id3987 . -1) (undo-tree-id3988 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -668) (undo-tree-id3989 . -1) (undo-tree-id3990 . -1) (undo-tree-id3991 . -1) (undo-tree-id3992 . -1) (undo-tree-id3993 . -1) (undo-tree-id3994 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -669) (undo-tree-id3995 . -1) (undo-tree-id3996 . -1) (undo-tree-id3997 . -1) (undo-tree-id3998 . -1) (#(" " 0 1 (fontified t)) . -670) (undo-tree-id3999 . -1) (undo-tree-id4000 . -1) 671) nil (26049 51714 516064 34000) 0 nil])
([nil nil ((#("Builder" 0 7 (face font-lock-type-face fontified t)) . -214) (229 . 236) (#("        " 0 8 (fontified t)) . -615) (undo-tree-id4395 . -8) (undo-tree-id4396 . -8) (undo-tree-id4397 . -8) (undo-tree-id4398 . -8) (undo-tree-id4399 . -8) (undo-tree-id4400 . -8) (undo-tree-id4401 . -8) (undo-tree-id4402 . -8) (undo-tree-id4403 . -8) (undo-tree-id4404 . -8) (undo-tree-id4405 . -8) (undo-tree-id4406 . -8) (undo-tree-id4407 . -8) (643 . 655) (651 . 652) (657 . 669) (666 . 667) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . 666) (668 . 671) 666 (672 . 673) (678 . 680) ("        " . 2314) ("        
" . 2645) ("," . 2993) ("," . 3477) ("," . 3985) (4010 . 4011) (#("

    " 0 1 (fontified t) 1 2 (fontified t) 2 6 (fontified t)) . 4105) (undo-tree-id4408 . -1) 623 (t 26049 51714 542302 192000)) nil (26049 51719 807335 781000) 0 nil])
([nil nil ((4109 . 4114) (t 26049 51719 832302 517000)) nil (26049 51739 387337 484000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4291 . 4292) (nil fontified nil 4114 . 4292) (4114 . 4292)) nil (26049 51739 387336 507000) 0 nil])
([nil nil ((#("let event_loop = EventLoop::new().unwrap();" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 14 (face font-lock-variable-name-face fontified t) 14 17 (fontified t) 17 26 (face font-lock-type-face fontified t) 26 28 (fontified t) 28 31 (fontified t) 31 32 (face (rainbow-delimiters-depth-2-face) fontified t) 32 33 (face (rainbow-delimiters-depth-2-face) fontified t) 33 34 (fontified t) 34 40 (fontified t) 40 41 (face (rainbow-delimiters-depth-2-face) fontified t) 41 42 (face (rainbow-delimiters-depth-2-face) fontified t) 42 43 (fontified t)) . 4066) (undo-tree-id4416 . -43) (undo-tree-id4417 . -40) (undo-tree-id4418 . -43) (undo-tree-id4419 . -43) (undo-tree-id4420 . -43) (undo-tree-id4421 . -43) (undo-tree-id4422 . -43) (undo-tree-id4423 . -43) (undo-tree-id4424 . -43) (undo-tree-id4425 . -43) (undo-tree-id4426 . -43) (undo-tree-id4427 . -40) (undo-tree-id4428 . -40) (undo-tree-id4429 . -40) (undo-tree-id4430 . -40) (undo-tree-id4431 . -40) (undo-tree-id4432 . -40) (undo-tree-id4433 . -40) (undo-tree-id4434 . -40) (undo-tree-id4435 . -43)) nil (26049 51739 387334 520000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 4066) (undo-tree-id4414 . 1) (undo-tree-id4415 . -1)) nil (26049 51739 387317 842000) 0 nil])
([nil nil ((#("        " 0 4 (fontified t) 4 8 (fontified t)) . -4066) (undo-tree-id4409 . -4) (undo-tree-id4410 . 8) (undo-tree-id4411 . -4) (undo-tree-id4412 . -4) (undo-tree-id4413 . -4)) nil (26049 51739 387312 349000) 0 nil])
([nil nil ((382 . 387) (t 26049 51739 412303 719000)) nil (26049 51769 126398 63000) 0 nil])
([nil nil ((387 . 390)) nil (26049 51769 126397 378000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -388) (undo-tree-id4446 . -1) (undo-tree-id4447 . -1) (undo-tree-id4448 . -1) (undo-tree-id4449 . -1) (undo-tree-id4450 . -1) (undo-tree-id4451 . -1) (undo-tree-id4452 . -1) (#("n" 0 1 (fontified t)) . -389) (undo-tree-id4453 . -1) (undo-tree-id4454 . -1) (undo-tree-id4455 . -1) 390) nil (26049 51769 126396 250000) 0 nil])
([nil nil ((388 . 395)) nil (26049 51769 126388 823000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -394) (undo-tree-id4441 . -1) (undo-tree-id4442 . -1) (undo-tree-id4443 . -1) (undo-tree-id4444 . -1) (undo-tree-id4445 . -1) 395) nil (26049 51769 126387 618000) 0 nil])
([nil nil ((394 . 396)) nil (26049 51769 125839 377000) 0 nil])
([nil nil ((395 . 401) (#("W" 0 1 (fontified nil)) . 395) (395 . 396) (#("Window" 0 6 (fontified nil)) . -395) (395 . 401) (#("W" 0 1 (face font-lock-type-face fontified t)) . -395) (undo-tree-id4436 . -1) (undo-tree-id4437 . -1) (undo-tree-id4438 . -1) (undo-tree-id4439 . -1) (undo-tree-id4440 . -1) 396) nil (26049 51769 125837 212000) 0 nil])
([nil nil ((401 . 402)) nil (26049 51769 125825 545000) 0 nil])
([nil nil ((487 . 489) (t 26049 51769 192305 534000)) nil (26049 51809 659695 751000) 0 nil])
([nil nil ((487 . 513) (#("ev" 0 2 (fontified nil)) . 487) (487 . 489) (#("event_loop: &EventLoop<()>" 0 26 (fontified nil)) . -487) (487 . 513) (#("ev" 0 2 (fontified t)) . -487) (undo-tree-id4497 . -2) (undo-tree-id4498 . -1) (undo-tree-id4499 . -1) (undo-tree-id4500 . -2) (undo-tree-id4501 . -2) (undo-tree-id4502 . -2) (undo-tree-id4503 . -2) (undo-tree-id4504 . -2) (undo-tree-id4505 . -2) (undo-tree-id4506 . -2) (undo-tree-id4507 . -2) (undo-tree-id4508 . -2) 489) nil (26049 51809 659693 218000) 0 nil])
([nil nil ((524 . 533)) nil (26049 51809 659676 219000) 0 nil])
([nil nil ((533 . 534)) nil (26049 51809 659675 303000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -533) (undo-tree-id4492 . -1) (undo-tree-id4493 . -1) (undo-tree-id4494 . -1) (undo-tree-id4495 . -1) (undo-tree-id4496 . -1) 534) nil (26049 51809 659673 774000) 0 nil])
([nil nil ((533 . 534)) nil (26049 51809 659666 398000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t)) . -533) (undo-tree-id4489 . -1) (undo-tree-id4490 . -1) (undo-tree-id4491 . -1) 534) nil (26049 51809 659665 66000) 0 nil])
([nil nil ((533 . 547)) nil (26049 51809 659661 351000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -546) (undo-tree-id4486 . -1) (undo-tree-id4487 . -1) (undo-tree-id4488 . -1) 547) nil (26049 51809 659660 202000) 0 nil])
([nil nil ((546 . 547)) nil (26049 51809 659656 210000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t)) . -546) (undo-tree-id4481 . -1) (undo-tree-id4482 . -1) (undo-tree-id4483 . -1) (undo-tree-id4484 . -1) (undo-tree-id4485 . -1) 547) nil (26049 51809 659655 17000) 0 nil])
([nil nil ((546 . 547)) nil (26049 51809 659648 921000) 0 nil])
([nil nil ((546 . 555) (#("V" 0 1 (fontified nil)) . 546) (546 . 547) (#("VulkanApp" 0 9 (fontified nil)) . -546) (546 . 555) (#("V" 0 1 (face font-lock-type-face fontified t)) . -546) (undo-tree-id4474 . -1) (undo-tree-id4475 . -1) (undo-tree-id4476 . -1) (undo-tree-id4477 . -1) (undo-tree-id4478 . -1) (undo-tree-id4479 . -1) (undo-tree-id4480 . -1) 547) nil (26049 51809 659647 207000) 0 nil])
([nil nil ((555 . 558)) nil (26049 51809 659638 208000) 0 nil])
([nil nil ((#("C" 0 1 (face font-lock-type-face fontified t)) . -557) (undo-tree-id4468 . -1) (undo-tree-id4469 . -1) (undo-tree-id4470 . -1) (undo-tree-id4471 . -1) (undo-tree-id4472 . -1) (undo-tree-id4473 . -1) 558) nil (26049 51809 659636 908000) 0 nil])
([nil nil ((557 . 558)) nil (26049 51809 659629 725000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 571 581 nil nil nil nil #s(yas--exit 582 nil))) #s(yas--exit 582 nil) 31 nil #s(yas--field 1 571 581 nil nil nil nil #s(yas--exit 582 nil)) nil nil)) (557 . 582) (#("create_window(${1:event_loop})$0" 0 32 (fontified nil)) . 557) (557 . 589) (#("c" 0 1 (fontified nil)) . 557) (557 . 558) (#("create_window(…)" 0 16 (fontified nil)) . -557) (557 . 573) (#("c" 0 1 (fontified t)) . -557) (undo-tree-id4462 . -1) (undo-tree-id4463 . -1) (undo-tree-id4464 . -1) (undo-tree-id4465 . -1) (undo-tree-id4466 . -1) (undo-tree-id4467 . -1) 558) nil (26049 51809 659628 274000) 0 nil])
([nil nil ((apply yas--snippet-revive 557 582 #s(yas--snippet nil (#s(yas--field 1 571 581 nil nil nil nil #s(yas--exit 582 nil))) #s(yas--exit 582 nil) 31 nil #s(yas--field 1 571 581 nil nil nil nil #s(yas--exit 582 nil)) nil nil))) nil (26049 51809 659621 862000) 0 nil])
([nil nil ((582 . 584)) nil (26049 51809 659621 35000) 0 nil])
([nil nil ((apply yas--snippet-revive 583 591 #s(yas--snippet nil nil #s(yas--exit 591 nil) 32 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 591 nil) 32 nil nil nil nil)) (583 . 591) (#("unwrap()$0" 0 10 (fontified nil)) . 583) (583 . 593) (#("u" 0 1 (fontified nil)) . 583) (583 . 584) (#("unwrap()" 0 8 (fontified nil)) . -583) (583 . 591) (#("u" 0 1 (fontified t)) . -583) (undo-tree-id4456 . -1) (undo-tree-id4457 . -1) (undo-tree-id4458 . -1) (undo-tree-id4459 . -1) (undo-tree-id4460 . -1) (undo-tree-id4461 . -1) 584) nil (26049 51809 659618 154000) 0 nil])
([nil nil ((591 . 592)) nil (26049 51809 659603 310000) 0 nil])
([nil nil ((749 . 762) (t 26049 51809 725641 358000)) nil (26049 51812 409376 402000) 0 nil])
([nil nil ((762 . 763)) nil (26049 51812 409375 390000) 0 nil])
([nil nil ((762 . 768) (#("w" 0 1 (fontified nil)) . 762) (762 . 763) (#("window" 0 6 (fontified nil)) . -762) (762 . 768) (#("w" 0 1 (fontified t)) . -762) (undo-tree-id4509 . -1) (undo-tree-id4510 . -1) (undo-tree-id4511 . -1) 763) nil (26049 51812 409373 55000) 0 nil])
([nil nil ((768 . 769)) nil (26049 51812 409358 562000) 0 nil])
([nil nil ((#("window" 0 6 (fontified t)) . -4366) (undo-tree-id4521 . -6) (undo-tree-id4522 . -4) (undo-tree-id4523 . -6) 4372 (t 26049 51812 435641 525000)) nil (26049 51819 629234 8000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -4364) (undo-tree-id4512 . -1) (undo-tree-id4513 . -1) (undo-tree-id4514 . -1) (undo-tree-id4515 . -1) (undo-tree-id4516 . -1) (#(" " 0 1 (fontified t)) . -4365) (undo-tree-id4517 . -1) (undo-tree-id4518 . -1) (undo-tree-id4519 . -1) (undo-tree-id4520 . -1) 4366) nil (26049 51819 629227 737000) 0 nil])
([nil nil ((#("let window = VulkanApp::init_window(&event_loop);" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 10 (face font-lock-variable-name-face fontified t) 10 13 (fontified t) 13 22 (face font-lock-type-face fontified t) 22 35 (fontified t) 35 36 (face (rainbow-delimiters-depth-2-face) fontified t) 36 37 (face rust-ampersand-face fontified t) 37 47 (fontified t) 47 48 (face (rainbow-delimiters-depth-2-face) fontified t) 48 49 (fontified t)) . 4239) (undo-tree-id4526 . -31) (undo-tree-id4527 . -31) (undo-tree-id4528 . -31) (undo-tree-id4529 . -31) (undo-tree-id4530 . -31) (undo-tree-id4531 . -31) (undo-tree-id4532 . -31) (undo-tree-id4533 . -31) (undo-tree-id4534 . -31) (undo-tree-id4535 . -49) (t 26049 51819 685641 968000)) nil (26049 51824 686157 537000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 4239) (undo-tree-id4524 . -1) (undo-tree-id4525 . -1)) nil (26049 51824 686145 964000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 4239) (undo-tree-id4536 . -1) (t 26049 51824 742308 947000)) nil (26049 51829 144924 500000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -4239) 4273) nil (26049 51829 144915 376000) 0 nil])
([nil nil ((4271 . 4272) (t 26049 51829 195642 553000)) nil (26049 51832 43053 131000) 0 nil])
([nil nil ((4271 . 4281) (#("e" 0 1 (fontified nil)) . 4271) (4271 . 4272) (#("event_loop" 0 10 (fontified nil)) . -4271) (4271 . 4281) (#("e" 0 1 (fontified t)) . -4271) (undo-tree-id4537 . -1) (undo-tree-id4538 . -1) (undo-tree-id4539 . -1) (undo-tree-id4540 . -1) (undo-tree-id4541 . -1) 4272) nil (26049 51832 43049 248000) 0 nil])
([nil nil ((4183 . 4185) (t 26049 51832 52309 396000)) nil (26049 51849 471899 630000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4318 . 4319) (nil fontified nil 4184 . 4319) (4184 . 4319)) nil (26049 51849 471895 391000) 0 nil])
([nil nil ((4370 . 4371) (t 26049 51849 495643 802000)) nil (26049 52405 179867 885000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -4370) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) 4371) nil (26049 52405 179866 469000) 0 nil])
([nil nil ((4370 . 4372)) nil (26049 52405 179861 685000) 0 nil])
([nil nil ((apply yas--snippet-revive 4371 4379 #s(yas--snippet nil nil #s(yas--exit 4379 nil) 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4379 nil) 0 nil nil nil nil)) (4371 . 4379) (#("unwrap()$0" 0 10 (fontified nil)) . 4371) (4371 . 4381) (#("u" 0 1 (fontified nil)) . 4371) (4371 . 4372) (#("unwrap()" 0 8 (fontified nil)) . -4371) (4371 . 4379) (#("u" 0 1 (fontified t)) . -4371) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) 4372) nil (26049 52405 179857 14000) 0 nil])
([nil nil ((4417 . 4418) (t 26049 52405 209011 218000)) nil (26049 52411 949357 53000) 0 nil])
([nil nil ((#("ash::Entry::new().unwrap();" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t) 5 10 (face font-lock-type-face fontified t) 10 15 (fontified t) 15 16 (face (rainbow-delimiters-depth-3-face) fontified t) 16 17 (face (rainbow-delimiters-depth-3-face) fontified t) 17 24 (fontified t) 24 25 (face (rainbow-delimiters-depth-3-face) fontified t) 25 26 (face (rainbow-delimiters-depth-3-face) fontified t) 26 27 (fontified t)) . 642) (undo-tree-id123 . -8) (undo-tree-id124 . -11) (undo-tree-id125 . -11) (undo-tree-id126 . -11) (undo-tree-id127 . -11) (undo-tree-id128 . -11) (undo-tree-id129 . -11) (undo-tree-id130 . -11) (undo-tree-id131 . -11) (undo-tree-id132 . -11) (undo-tree-id133 . -11) (undo-tree-id134 . -11) (undo-tree-id135 . -11) (undo-tree-id136 . -11) (undo-tree-id137 . -11) (undo-tree-id138 . -11) (undo-tree-id139 . -11) (undo-tree-id140 . -8) (undo-tree-id141 . -8) (undo-tree-id142 . -8) (undo-tree-id143 . -8) (undo-tree-id144 . -8) (undo-tree-id145 . -8) (undo-tree-id146 . -8) (undo-tree-id147 . -8) (undo-tree-id148 . -8) (undo-tree-id149 . -8) (undo-tree-id150 . -8) (undo-tree-id151 . -8) (undo-tree-id152 . -8) (undo-tree-id153 . -8) (undo-tree-id154 . -8) (undo-tree-id155 . -8) (undo-tree-id156 . -8) (undo-tree-id157 . -8) (undo-tree-id158 . -8) (undo-tree-id159 . -8) (undo-tree-id160 . -8) (undo-tree-id161 . -8) (undo-tree-id162 . -8) (undo-tree-id163 . -8) (undo-tree-id164 . -8) (undo-tree-id165 . -8) (undo-tree-id166 . -8) (undo-tree-id167 . -8) (undo-tree-id168 . -27) (t 26049 52411 999011 635000)) nil (26049 52516 519846 528000) 0 nil])
([nil nil ((642 . 646)) nil (26049 52516 519504 517000) 0 nil])
([nil nil ((apply yas--snippet-revive 642 674 #s(yas--snippet nil nil #s(yas--exit 663 nil) 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 663 nil) 1 nil nil nil nil)) (642 . 674) (#("unsafe {
            $0
        };" 0 34 (fontified nil)) . 642) (666 . 674) (651 . 663) (#("    " 0 4 (fontified nil)) . 651) (642 . 660) (#("unsa" 0 4 (fontified nil)) . 642) (642 . 646) (#("unsafe" 0 6 (fontified nil)) . -642) (642 . 648) (#("unsa" 0 4 (fontified t)) . -642) (undo-tree-id108 . -4) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -2) (undo-tree-id113 . -2) (undo-tree-id114 . -2) (undo-tree-id115 . -3) (undo-tree-id116 . -3) (undo-tree-id117 . -3) (undo-tree-id118 . -4) (undo-tree-id119 . -4) (undo-tree-id120 . -4) (undo-tree-id121 . -4) (undo-tree-id122 . -4) 646) nil (26049 52516 519502 181000) 0 nil])
([nil nil ((663 . 666)) nil (26049 52516 519489 900000) 0 nil])
([nil nil ((#("E" 0 1 (face font-lock-type-face fontified t)) . -663) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -664) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -665) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) 666) nil (26049 52516 519487 73000) 0 nil])
([nil nil ((663 . 664)) nil (26049 52516 518480 623000) 0 nil])
([nil nil ((664 . 665)) nil (26049 52516 518480 69000) 0 nil])
([nil nil ((663 . 666) (#("as" 0 2 (fontified nil)) . 663) (663 . 665) (#("ash" 0 3 (fontified nil)) . -663) (663 . 666) (#("as" 0 2 (face font-lock-keyword-face fontified t)) . -663) (undo-tree-id67 . -2) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -2) (undo-tree-id73 . -2) (undo-tree-id74 . -2) (undo-tree-id75 . -2) 665) nil (26049 52516 518478 599000) 0 nil])
([nil nil ((666 . 669)) nil (26049 52516 518469 609000) 0 nil])
([nil nil ((668 . 673) (#("E" 0 1 (fontified nil)) . 668) (668 . 669) (#("Entry" 0 5 (fontified nil)) . -668) (668 . 673) (#("E" 0 1 (face font-lock-type-face fontified t)) . -668) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) 669) nil (26049 52516 518468 458000) 0 nil])
([nil nil ((673 . 676)) nil (26049 52516 518464 206000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -673) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (#("l" 0 1 (fontified t)) . -674) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (#("o" 0 1 (fontified t)) . -675) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) 676) nil (26049 52516 518462 118000) 0 nil])
([nil nil ((673 . 677)) nil (26049 52516 518438 906000) 0 nil])
([nil nil ((apply yas--snippet-revive 675 681 #s(yas--snippet nil nil #s(yas--exit 681 nil) 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 681 nil) 2 nil nil nil nil)) (675 . 681) (#("load()$0" 0 8 (fontified nil)) . 675) (675 . 683) (#("lo" 0 2 (fontified nil)) . 675) (675 . 677) (#("load()" 0 6 (fontified nil)) . -675) (675 . 681) (#("lo" 0 2 (fontified t)) . -675) (undo-tree-id20 . -2) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -2) (undo-tree-id25 . -2) (undo-tree-id26 . -2) (undo-tree-id27 . -2) (undo-tree-id28 . -2) 677) nil (26049 52516 518437 327000) 0 nil])
([nil nil ((681 . 682)) nil (26049 52516 518429 67000) 0 nil])
([nil nil ((#(">" 0 1 (syntax-table (1) fontified t)) . -681) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) 682) nil (26049 52516 518426 658000) 0 nil])
([nil nil ((681 . 682)) nil (26049 52516 518409 446000) 0 nil])
([nil nil ((#("?" 0 1 (face rust-question-mark fontified t)) . -681) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) 682 (t 26049 52516 539018 47000)) nil (26049 52521 1278 893000) 0 nil])
([nil nil ((681 . 683)) nil (26049 52521 1268 452000) 0 nil])
([nil nil ((apply yas--snippet-revive 682 690 #s(yas--snippet nil nil #s(yas--exit 690 nil) 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 690 nil) 3 nil nil nil nil)) (682 . 690) (#("unwrap()$0" 0 10 (fontified nil)) . 682) (682 . 692) (#("u" 0 1 (fontified nil)) . 682) (682 . 683) (#("unwrap()" 0 8 (fontified nil)) . -682) (682 . 690) (#("u" 0 1 (fontified t)) . -682) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) 683) nil (26049 52521 1264 368000) 0 nil])
([nil nil ((621 . 630) (t 26049 52521 19018 323000)) nil (26049 52753 690861 743000) 0 nil])
([nil nil ((nil rear-nonsticky nil 847 . 848) (nil fontified nil 630 . 848) (630 . 848)) nil (26049 52753 690860 721000) 0 nil])
([nil nil ((apply -3 622 881 undo--wrap-and-run-primitive-undo 622 881 ((630 . 633)))) nil (26049 52753 690859 500000) 0 nil])
([nil nil ((703 . 711) (#(" " 0 1 (face font-lock-comment-face fontified nil)) . 702) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (703 . 704)) nil (26049 52753 690858 31000) 0 nil])
([nil nil ((711 . 713)) nil (26049 52753 690847 401000) 0 nil])
([nil nil ((779 . 787) (#(" " 0 1 (face font-lock-comment-face fontified nil)) . 778) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (779 . 780)) nil (26049 52753 690846 149000) 0 nil])
([nil nil ((787 . 789)) nil (26049 52753 690837 277000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -631) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) 632) nil (26049 52753 690836 279000) 0 nil])
([nil nil ((631 . 632)) nil (26049 52753 690831 753000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-comment-face fontified t)) . -711) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (#("/" 0 1 (face font-lock-comment-face fontified t)) . -712) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) 713) nil (26049 52753 690830 531000) 0 nil])
([nil nil ((711 . 712)) nil (26049 52753 690821 771000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-comment-face fontified t)) . -786) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (#("/" 0 1 (face font-lock-comment-face fontified t)) . -787) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) 788) nil (26049 52753 690819 990000) 0 nil])
([nil nil ((786 . 787)) nil (26049 52753 690760 432000) 0 nil])
([nil nil ((869 . 870)) nil (26049 52753 690759 807000) 0 nil])
([nil nil ((869 . 870)) nil (26049 52753 690759 157000) 0 nil])
([nil nil ((712 . 713)) nil (26049 52753 690758 487000) 0 nil])
([nil nil ((713 . 714)) nil (26049 52753 690757 873000) 0 nil])
([nil nil ((789 . 791)) nil (26049 52753 690757 183000) 0 nil])
([nil nil ((711 . 712)) nil (26049 52753 690756 445000) 0 nil])
([nil nil ((789 . 790)) nil (26049 52753 690755 812000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-comment-face fontified t)) . 714) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1)) nil (26049 52753 690754 775000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-comment-face fontified t)) . 791) (undo-tree-id191 . -1)) nil (26049 52753 690749 980000) 0 nil])
([nil nil ((873 . 883)) nil (26049 52753 690748 73000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-comment-face fontified t)) . -882) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) 883) nil (26049 52753 690745 896000) 0 nil])
([nil nil ((882 . 883)) nil (26049 52753 690733 955000) 0 nil])
([nil nil ((632 . 633) (t 26049 52753 709032 600000)) nil (26049 52816 704950 956000) 0 nil])
([nil nil ((885 . 886)) nil (26049 52816 704950 118000) 0 nil])
([nil nil ((715 . 716)) nil (26049 52816 704949 454000) 0 nil])
([nil nil ((634 . 642) (#(" " 0 1 (face font-lock-doc-face fontified nil)) . 633) (undo-tree-id263 . -1) (634 . 635)) nil (26049 52816 704948 339000) 0 nil])
([nil nil ((642 . 643)) nil (26049 52816 704946 124000) 0 nil])
([nil nil ((642 . 643) 643) nil (26049 52816 704945 126000) 0 nil])
([nil nil ((644 . 645)) nil (26049 52816 704943 437000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-doc-face fontified t)) . 726) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1)) nil (26049 52816 704939 316000) 0 nil])
([nil nil ((621 . 630) (t 26049 52816 722369 796000)) nil (26049 52842 313802 351000) 0 nil])
([nil nil ((630 . 633)) nil (26049 52842 313801 561000) 0 nil])
([nil nil ((632 . 633)) nil (26049 52842 313800 895000) 0 nil])
([nil nil ((#("lint" 0 4 (face font-lock-preprocessor-face fontified t)) . 638) (undo-tree-id318 . -4) (apply yas--snippet-revive 632 643 #s(yas--snippet nil (#s(yas--field 0 638 642 nil nil nil nil nil)) nil 4 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 0 638 642 nil nil nil nil nil)) nil 4 nil nil nil nil)) (632 . 643) (#("allow(${0:lint})" 0 16 (fontified nil)) . 632) (632 . 648) (#("a" 0 1 (fontified nil)) . 632) (632 . 633) (#("allow(…)" 0 8 (fontified nil)) . -632) (632 . 640) (#("a" 0 1 (face font-lock-preprocessor-face fontified t)) . -632) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) 633) nil (26049 52842 313799 400000) 0 nil])
([nil nil ((638 . 641)) nil (26049 52842 313792 703000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-preprocessor-face fontified t)) . -640) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) 641) nil (26049 52842 313791 429000) 0 nil])
([nil nil ((640 . 644)) nil (26049 52842 313784 844000) 0 nil])
([nil nil ((644 . 646)) nil (26049 52842 313783 600000) 0 nil])
([nil nil ((638 . 657) (#("unused_d" 0 8 (fontified nil)) . 638) (638 . 646) (#("unused_doc_comments" 0 19 (fontified nil)) . -638) (638 . 657) (#("unused_d" 0 8 (face font-lock-preprocessor-face fontified t)) . -638) (undo-tree-id264 . -8) (undo-tree-id265 . -8) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -2) (undo-tree-id269 . -2) (undo-tree-id270 . -2) (undo-tree-id271 . -2) (undo-tree-id272 . -2) (undo-tree-id273 . -2) (undo-tree-id274 . -2) (undo-tree-id275 . -2) (undo-tree-id276 . -2) (undo-tree-id277 . -2) (undo-tree-id278 . -2) (undo-tree-id279 . -2) (undo-tree-id280 . -2) (undo-tree-id281 . -2) (undo-tree-id282 . -3) (undo-tree-id283 . -3) (undo-tree-id284 . -4) (undo-tree-id285 . -4) (undo-tree-id286 . -4) (undo-tree-id287 . -4) (undo-tree-id288 . -5) (undo-tree-id289 . -5) (undo-tree-id290 . -5) (undo-tree-id291 . -6) (undo-tree-id292 . -6) (undo-tree-id293 . -6) (undo-tree-id294 . -6) (undo-tree-id295 . -6) (undo-tree-id296 . -6) (undo-tree-id297 . -6) (undo-tree-id298 . -6) (undo-tree-id299 . -7) (undo-tree-id300 . -7) (undo-tree-id301 . -7) (undo-tree-id302 . -8) (undo-tree-id303 . -8) (undo-tree-id304 . -8) (undo-tree-id305 . -8) (undo-tree-id306 . -8) (undo-tree-id307 . -8) (undo-tree-id308 . -8) (undo-tree-id309 . -8) 646) nil (26049 52842 313777 970000) 0 nil])
([nil nil ((#("       #[allow(unused_doc_comments)]
        /**
         * Load the Vulkan library linked at compile time using Entry::linked(),
         * or load it at runtime using Entry::load(), which uses libloading.
         * If you want to perform entry point loading yourself, call Entry::from_static_fn().
         **/" 0 7 (fontified t) 7 8 (face font-lock-preprocessor-face fontified t) 8 9 (face (rainbow-delimiters-depth-3-face font-lock-preprocessor-face) fontified t) 9 14 (face font-lock-preprocessor-face fontified t) 14 15 (face (rainbow-delimiters-depth-4-face font-lock-preprocessor-face) fontified t) 15 34 (face font-lock-preprocessor-face fontified t) 34 35 (face (rainbow-delimiters-depth-4-face font-lock-preprocessor-face) fontified t) 35 36 (face (rainbow-delimiters-depth-3-face font-lock-preprocessor-face) fontified t) 36 37 (fontified t) 37 45 (fontified t) 45 49 (face font-lock-doc-face fontified t) 49 60 (face font-lock-doc-face fontified t) 60 64 (face font-lock-doc-face fontified t) 64 69 (face font-lock-doc-face fontified t) 69 75 (face font-lock-doc-face fontified t) 75 113 (face font-lock-doc-face fontified t) 113 118 (face font-lock-doc-face fontified t) 118 126 (face font-lock-doc-face fontified t) 126 127 (face font-lock-doc-face fontified t) 127 128 (face font-lock-doc-face fontified t) 128 130 (face font-lock-doc-face fontified t) 130 141 (face font-lock-doc-face fontified t) 141 169 (face font-lock-doc-face fontified t) 169 174 (face font-lock-doc-face fontified t) 174 180 (face font-lock-doc-face fontified t) 180 181 (face font-lock-doc-face fontified t) 181 182 (face font-lock-doc-face fontified t) 182 207 (face font-lock-doc-face fontified t) 207 218 (face font-lock-doc-face fontified t) 218 220 (face font-lock-doc-face fontified t) 220 276 (face font-lock-doc-face fontified t) 276 281 (face font-lock-doc-face fontified t) 281 297 (face font-lock-doc-face fontified t) 297 298 (face font-lock-doc-face fontified t) 298 299 (face font-lock-doc-face fontified t) 299 300 (face font-lock-doc-face fontified t rear-nonsticky t) 300 301 (face font-lock-doc-face fontified t) 301 310 (face font-lock-doc-face fontified t) 310 312 (face font-lock-doc-face fontified t) 312 313 (face font-lock-doc-face fontified t)) . 623) (undo-tree-id575 . -313) (undo-tree-id576 . -45) (undo-tree-id577 . -300) (undo-tree-id578 . -41) (undo-tree-id579 . -37) (undo-tree-id580 . -37) (undo-tree-id581 . -37) (undo-tree-id582 . -206) (undo-tree-id583 . -9) (undo-tree-id584 . -9) (undo-tree-id585 . -9) (undo-tree-id586 . -9) (undo-tree-id587 . -9) (undo-tree-id588 . -15) (undo-tree-id589 . -15) (undo-tree-id590 . -15) (undo-tree-id591 . -15) (undo-tree-id592 . -15) (undo-tree-id593 . -15) (undo-tree-id594 . -15) (undo-tree-id595 . -15) (undo-tree-id596 . -15) (undo-tree-id597 . -15) (undo-tree-id598 . -15) (undo-tree-id599 . -15) (undo-tree-id600 . -15) (undo-tree-id601 . -15) (undo-tree-id602 . -15) (undo-tree-id603 . -15) (undo-tree-id604 . -15) (undo-tree-id605 . -15) (undo-tree-id606 . -15) (undo-tree-id607 . -15) (undo-tree-id608 . -15) (undo-tree-id609 . -15) (undo-tree-id610 . -15) (undo-tree-id611 . -15) (undo-tree-id612 . -15) (undo-tree-id613 . -15) (undo-tree-id614 . -15) (undo-tree-id615 . -15) (undo-tree-id616 . -15) (undo-tree-id617 . -15) (undo-tree-id618 . -15) (undo-tree-id619 . -15) (undo-tree-id620 . -15) (undo-tree-id621 . -15) (undo-tree-id622 . -15) (undo-tree-id623 . -15) (undo-tree-id624 . -15) (undo-tree-id625 . -15) (undo-tree-id626 . -15) (undo-tree-id627 . -15) (undo-tree-id628 . -15) (undo-tree-id629 . -15) (undo-tree-id630 . -15) (undo-tree-id631 . -15) (undo-tree-id632 . -34) (undo-tree-id633 . -34) (undo-tree-id634 . -34) (undo-tree-id635 . -34) (undo-tree-id636 . -34) (undo-tree-id637 . -34) (undo-tree-id638 . -34) (undo-tree-id639 . -34) (undo-tree-id640 . -34) (undo-tree-id641 . -34) (undo-tree-id642 . -34) (undo-tree-id643 . -34) (undo-tree-id644 . -48) (undo-tree-id645 . -34) (undo-tree-id646 . -34) (undo-tree-id647 . -34) (undo-tree-id648 . -34) (undo-tree-id649 . -34) (undo-tree-id650 . -34) (undo-tree-id651 . -34) (undo-tree-id652 . -48) (undo-tree-id653 . -84) (undo-tree-id654 . -313) (undo-tree-id655 . -313) (undo-tree-id656 . -313) (undo-tree-id657 . -313) (undo-tree-id658 . -313) (undo-tree-id659 . -313) (undo-tree-id660 . -313) (undo-tree-id661 . -313) (undo-tree-id662 . -313) (undo-tree-id663 . -313) (undo-tree-id664 . -313) (undo-tree-id665 . -313) (undo-tree-id666 . -313) (undo-tree-id667 . -313) (undo-tree-id668 . -313) (undo-tree-id669 . -313) (undo-tree-id670 . -313) (undo-tree-id671 . -313) (undo-tree-id672 . -313) (undo-tree-id673 . -313) (undo-tree-id674 . -313) (undo-tree-id675 . -313) (undo-tree-id676 . -313) (undo-tree-id677 . -313) (undo-tree-id678 . -313) (undo-tree-id679 . -313) (undo-tree-id680 . -313) (undo-tree-id681 . -313) (undo-tree-id682 . -313) (undo-tree-id683 . -313) (undo-tree-id684 . -313) (undo-tree-id685 . -313) (undo-tree-id686 . -313) (undo-tree-id687 . -313) (undo-tree-id688 . -15) (undo-tree-id689 . -313) (undo-tree-id690 . -313) (undo-tree-id691 . -313) (undo-tree-id692 . -312) (undo-tree-id693 . -311) (undo-tree-id694 . -310) (undo-tree-id695 . -214) (undo-tree-id696 . -212) (undo-tree-id697 . -211) (undo-tree-id698 . -210) (undo-tree-id699 . -132) (undo-tree-id700 . -131) (undo-tree-id701 . -130) (undo-tree-id702 . -313) (t 26049 52842 332371 370000)) nil (26049 52947 757523 48000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -622) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) 623) nil (26049 52947 757443 300000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 623)) nil (26049 52947 756612 908000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -622) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) 623) nil (26049 52952 546262 121000) 0 nil])
([nil nil ((760 . 763) (t 26049 52953 379044 851000)) nil (26049 54706 670383 16000) 0 nil] [nil nil ((#("       let entry = unsafe {" 0 7 (fontified t) 7 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 16 (face font-lock-variable-name-face fontified t) 16 19 (fontified t) 19 25 (face rust-unsafe fontified t) 25 26 (fontified t) 26 27 (face (rainbow-delimiters-depth-3-face) fontified t)) . 622) (undo-tree-id425 . -19) (undo-tree-id426 . -11) (undo-tree-id427 . -27) (undo-tree-id428 . -27) (undo-tree-id429 . -27)) ((622 . 649)) (26049 52952 177551 664000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -759) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (#("V" 0 1 (face font-lock-type-face fontified t)) . -760) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (#("A" 0 1 (face font-lock-type-face fontified t)) . -761) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (#("L" 0 1 (face font-lock-type-face fontified t)) . -762) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) 763) nil (26049 54706 670378 81000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 622) (undo-tree-id424 . -1)) ((622 . 623)) (26049 52951 697299 719000) 0 nil])
([nil nil ((759 . 768)) nil (26049 54706 670301 805000) 0 nil])
([nil nil ((#("            ash::Entry::load().unwrap()" 0 12 (fontified t) 12 15 (face font-lock-constant-face fontified t) 15 17 (fontified t) 17 22 (face font-lock-type-face fontified t) 22 24 (fontified t) 24 28 (fontified t) 28 29 (face (rainbow-delimiters-depth-3-face) fontified t) 29 30 (face (rainbow-delimiters-depth-3-face) fontified t) 30 31 (fontified t) 31 37 (fontified t) 37 38 (face (rainbow-delimiters-depth-3-face) fontified t) 38 39 (face (rainbow-delimiters-depth-3-face) fontified t)) . 622) (undo-tree-id396 . -35) (undo-tree-id397 . -35) (undo-tree-id398 . -18) (undo-tree-id399 . -18) (undo-tree-id400 . -18) (undo-tree-id401 . -18) (undo-tree-id402 . -18) (undo-tree-id403 . -18) (undo-tree-id404 . -18) (undo-tree-id405 . -18) (undo-tree-id406 . -18) (undo-tree-id407 . -18) (undo-tree-id408 . -18) (undo-tree-id409 . -18) (undo-tree-id410 . -18) (undo-tree-id411 . -18) (undo-tree-id412 . -18) (undo-tree-id413 . -18) (undo-tree-id414 . -18) (undo-tree-id415 . -18) (undo-tree-id416 . -18) (undo-tree-id417 . -18) (undo-tree-id418 . -18) (undo-tree-id419 . -18) (undo-tree-id420 . -18) (undo-tree-id421 . -18) (undo-tree-id422 . -18) (undo-tree-id423 . -39)) ((622 . 661)) (26049 52951 339755 315000) 0 nil])
([nil nil ((768 . 772) (t 26049 54706 689152 421000)) nil (26049 54722 178580 827000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 622) (undo-tree-id395 . -1)) ((622 . 623)) (26049 52950 987796 278000) 0 nil])
([nil nil ((#("VALI" 0 4 (face font-lock-type-face fontified t)) . -768) (undo-tree-id1030 . -4) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -2) (undo-tree-id1034 . -2) (undo-tree-id1035 . -2) (undo-tree-id1036 . -3) (undo-tree-id1037 . -3) (undo-tree-id1038 . -4) (undo-tree-id1039 . -4) (undo-tree-id1040 . -4) (undo-tree-id1041 . -4) 772) nil (26049 54722 178578 701000) 0 nil])
([nil nil ((#("        };" 0 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t) 9 10 (fontified t)) . 622) (undo-tree-id388 . -10) (undo-tree-id389 . -10) (undo-tree-id390 . -10) (undo-tree-id391 . -10) (undo-tree-id392 . -10) (undo-tree-id393 . -10) (undo-tree-id394 . -10)) ((622 . 632)) (26049 52950 639231 565000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -767) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) 768) nil (26049 54722 178567 1000) 0 nil])
([nil nil ((622 . 630)) ((#("        " 0 8 (fontified t)) . 622) (undo-tree-id874 . -8) (undo-tree-id875 . -8) (undo-tree-id876 . -8) (undo-tree-id877 . -8) (undo-tree-id878 . -8) (undo-tree-id879 . -8) (undo-tree-id880 . -8) (undo-tree-id881 . -8) (undo-tree-id882 . -8) (undo-tree-id883 . -8) (undo-tree-id884 . -8) (undo-tree-id885 . -8) (undo-tree-id886 . -8) (undo-tree-id887 . -8) (undo-tree-id888 . -8) (undo-tree-id889 . -8) (undo-tree-id890 . -8) (undo-tree-id891 . -8) (undo-tree-id892 . -8) (undo-tree-id893 . -8) (undo-tree-id894 . -8) (undo-tree-id895 . -8) (undo-tree-id896 . -8) (undo-tree-id897 . -8) (undo-tree-id898 . -8) (undo-tree-id899 . -8) (undo-tree-id900 . -8) (undo-tree-id901 . -8) (undo-tree-id902 . -8) (undo-tree-id903 . -8) (undo-tree-id904 . -8) (undo-tree-id905 . -8) (undo-tree-id906 . -8) (undo-tree-id907 . -8) (undo-tree-id908 . -8) (undo-tree-id909 . -8) (undo-tree-id910 . -8) (undo-tree-id911 . -8) (undo-tree-id912 . -8) (undo-tree-id913 . -8) (undo-tree-id914 . -8) (undo-tree-id915 . -8) (undo-tree-id916 . -8) (undo-tree-id917 . -8) (undo-tree-id918 . -8) (undo-tree-id919 . -8) (undo-tree-id920 . -8) (undo-tree-id921 . -8) (undo-tree-id922 . -8) (undo-tree-id923 . -8) (undo-tree-id924 . -8)) (26049 52950 314677 880000) 0 nil])
([nil nil ((2535 . 2539) (#("    " 0 4 (fontified nil)) . 2534) (undo-tree-id1042 . -4) (undo-tree-id1043 . -4) (undo-tree-id1044 . -4) (2534 . 2539) (#("    " 0 4 (fontified nil)) . 2533) (2533 . 2537) (2533 . 2534) (t 26049 54722 195820 38000)) nil (26049 61774 106085 499000) 0 nil])
([nil nil ((630 . 635)) ((#("l;et " 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . 630) (undo-tree-id824 . -1) (undo-tree-id825 . -5) (undo-tree-id826 . -2) (undo-tree-id827 . -2) (undo-tree-id828 . -3) (undo-tree-id829 . -4) (undo-tree-id830 . -4) (undo-tree-id831 . -5) (undo-tree-id832 . -5) (undo-tree-id833 . -4) (undo-tree-id834 . -3) (undo-tree-id835 . -2) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -5)) (26049 52949 984639 27000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3771 . 3772) (nil fontified nil 2534 . 3772) (2534 . 3772)) nil (26049 61774 106071 930000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -631) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (#("e" 0 1 (fontified t)) . -632) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (#("t" 0 1 (fontified t)) . -633) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (#(" " 0 1 (fontified t)) . -634) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) 635) ((631 . 635)) (26049 52949 756531 658000) 0 nil])
([nil nil ((1241 . 1249) (#("        " 0 8 (fontified nil)) . 1240) (undo-tree-id1070 . -8) (undo-tree-id1071 . -8) (undo-tree-id1072 . -8) (1239 . 1249) (t 26049 61774 129586 222000)) nil (26049 61821 889861 31000) 0 nil])
([nil nil ((631 . 642)) ((#("et entry = " 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t) 3 8 (face font-lock-variable-name-face fontified t) 8 11 (fontified t)) . 631) (undo-tree-id786 . -11) (undo-tree-id787 . -11) (undo-tree-id788 . -11) (undo-tree-id789 . -11) (undo-tree-id790 . -11) (undo-tree-id791 . -11) (undo-tree-id792 . -11) (undo-tree-id793 . -11) (undo-tree-id794 . -11) (undo-tree-id795 . -11) (undo-tree-id796 . -11) (undo-tree-id797 . -11) (undo-tree-id798 . -11) (undo-tree-id799 . -11) (undo-tree-id800 . -11) (undo-tree-id801 . -11) (undo-tree-id802 . -11) (undo-tree-id803 . -11) (undo-tree-id804 . -11) (undo-tree-id805 . -11) (undo-tree-id806 . -11) (undo-tree-id807 . -11) (undo-tree-id808 . -11) (undo-tree-id809 . -11) (undo-tree-id810 . -11) (undo-tree-id811 . -11) (undo-tree-id812 . -11) (undo-tree-id813 . -11) (undo-tree-id814 . -11) (undo-tree-id815 . -11) (undo-tree-id816 . -11) (undo-tree-id817 . -11) (undo-tree-id818 . -11) (undo-tree-id819 . -11) (undo-tree-id820 . -11) (undo-tree-id821 . -11) (undo-tree-id822 . -11) (undo-tree-id823 . -11)) (26049 52949 544225 981000) 0 nil])
([nil nil ((1240 . 1248)) nil (26049 61821 889858 148000) 0 nil])
([nil nil ((642 . 643)) ((#("E" 0 1 (face font-lock-type-face fontified t)) . 642) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1)) (26049 52949 341949 473000) 0 nil])
([nil nil ((1248 . 1252)) nil (26049 61821 889857 538000) 0 nil])
([nil nil ((#("E" 0 1 (face font-lock-type-face fontified t)) . -642) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) 643) ((642 . 643)) (26049 52949 167299 572000) 0 nil])
([nil nil ((#("V" 0 1 (face font-lock-type-face fontified t)) . -1251) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) 1252) nil (26049 61821 889856 508000) 0 nil])
([nil nil ((642 . 643)) ((#("s" 0 1 (fontified t)) . 642) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1)) (26049 52949 854 212000) 0 nil])
([nil nil ((1251 . 1252)) nil (26049 61821 889853 434000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -642) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) 643) ((642 . 643)) (26049 52948 802071 85000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -1251) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) 1252) nil (26049 61821 889852 631000) 0 nil])
([nil nil ((642 . 644)) ((#("as" 0 2 (face font-lock-keyword-face fontified t)) . 642) (undo-tree-id766 . -2) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -2) (undo-tree-id772 . -2) (undo-tree-id773 . -2) (undo-tree-id774 . -2) (undo-tree-id775 . -2) (undo-tree-id776 . -2)) (26049 52948 571907 877000) 0 nil])
([nil nil ((1251 . 1253)) nil (26049 61821 889849 349000) 0 nil])
([nil nil ((642 . 645) (#("as" 0 2 (fontified nil)) . 642) (642 . 644) (#("ash" 0 3 (fontified nil)) . -642) (642 . 645) (#("as" 0 2 (face font-lock-keyword-face fontified t)) . -642) (undo-tree-id343 . -2) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -2) (undo-tree-id349 . -2) (undo-tree-id350 . -2) (undo-tree-id351 . -2) (undo-tree-id352 . -2) 644) ((642 . 644) (#("ash" 0 3 (fontified nil)) . 642) (642 . 645) (#("as" 0 2 (fontified nil)) . 642) (642 . 644) (#("ash" 0 3 (fontified t)) . 642) (undo-tree-id748 . -3) (undo-tree-id749 . -3) (undo-tree-id750 . -3) (undo-tree-id751 . -3) (undo-tree-id752 . -3) (undo-tree-id753 . -3) (undo-tree-id754 . -3) (undo-tree-id755 . -3) (undo-tree-id756 . -3) (undo-tree-id757 . -3) (undo-tree-id758 . -3) (undo-tree-id759 . -3) (undo-tree-id760 . -3) (undo-tree-id761 . -3) (undo-tree-id762 . -3) (undo-tree-id763 . -3) (undo-tree-id764 . -3) (undo-tree-id765 . -3)) (26049 52948 358187 385000) 0 nil])
([nil nil ((#("V" 0 1 (face font-lock-type-face fontified t)) . -1251) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (#("A" 0 1 (face font-lock-type-face fontified t)) . -1252) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) 1253) nil (26049 61821 889847 269000) 0 nil])
([nil nil ((645 . 648)) ((#("::E" 0 2 (fontified t) 2 3 (face font-lock-type-face fontified t)) . 645) (undo-tree-id731 . -2) (undo-tree-id732 . -3) (undo-tree-id733 . -3) (undo-tree-id734 . -3) (undo-tree-id735 . -2) (undo-tree-id736 . -2) (undo-tree-id737 . -2) (undo-tree-id738 . -2) (undo-tree-id739 . -2) (undo-tree-id740 . -2) (undo-tree-id741 . -2) (undo-tree-id742 . -2) (undo-tree-id743 . -2) (undo-tree-id744 . -2) (undo-tree-id745 . -2) (undo-tree-id746 . -2) (undo-tree-id747 . -3)) (26049 52948 196665 481000) 0 nil])
([nil nil ((363 . 365)) nil (26049 61821 889829 995000) 0 nil])
([nil nil ((647 . 652) (#("E" 0 1 (fontified nil)) . 647) (647 . 648) (#("Entry" 0 5 (fontified nil)) . -647) (647 . 652) (#("E" 0 1 (face font-lock-type-face fontified t)) . -647) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) 648) ((647 . 648) (#("Entry" 0 5 (fontified nil)) . 647) (647 . 652) (#("E" 0 1 (fontified nil)) . 647) (647 . 648) (#("Entry" 0 5 (face font-lock-type-face fontified t)) . 647) (undo-tree-id717 . -5) (undo-tree-id718 . -5) (undo-tree-id719 . -5) (undo-tree-id720 . -5) (undo-tree-id721 . -5) (undo-tree-id722 . -5) (undo-tree-id723 . -5) (undo-tree-id724 . -5) (undo-tree-id725 . -5) (undo-tree-id726 . -5) (undo-tree-id727 . -5) (undo-tree-id728 . -5) (undo-tree-id729 . -5) (undo-tree-id730 . -5)) (26049 52948 26159 607000) 0 nil])
([nil nil ((nil rear-nonsticky nil 503 . 504) (nil fontified nil 364 . 504) (364 . 504)) nil (26049 61821 889825 911000) 0 nil])
([nil nil ((652 . 657)) ((#("::lin" 0 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . 652) (undo-tree-id704 . -3) (undo-tree-id705 . -5) (undo-tree-id706 . -4) (undo-tree-id707 . -4) (undo-tree-id708 . -5) (undo-tree-id709 . -5) (undo-tree-id710 . -5) (undo-tree-id711 . -5) (undo-tree-id712 . -4) (undo-tree-id713 . -4) (undo-tree-id714 . -4) (undo-tree-id715 . -3) (undo-tree-id716 . -5)) (26049 52947 845559 520000) 0 nil])
([nil nil ((#("const VALIDATION: ValidationInfo = ValidationInfo {
    is_enable: true,
    required_validation_layers: [\"VK_LAYER_KHRONOS_validation\"],
};
" 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 16 (face font-lock-variable-name-face fontified t) 16 18 (fontified t) 18 32 (face font-lock-type-face fontified t) 32 35 (fontified t) 35 49 (face font-lock-type-face fontified t) 49 50 (fontified t) 50 51 (face (rainbow-delimiters-depth-1-face) fontified t) 51 56 (fontified t) 56 65 (face font-lock-variable-name-face fontified t) 65 67 (fontified t) 67 71 (face font-lock-keyword-face fontified t) 71 77 (fontified t) 77 103 (face font-lock-variable-name-face fontified t) 103 105 (fontified t) 105 106 (face (rainbow-delimiters-depth-2-face) fontified t) 106 135 (face font-lock-string-face fontified t) 135 136 (face (rainbow-delimiters-depth-2-face) fontified t) 136 138 (fontified t) 138 139 (face (rainbow-delimiters-depth-1-face) fontified t) 139 140 (rear-nonsticky t fontified t) 140 141 (fontified t)) . 364) (undo-tree-id1073 . -141) (undo-tree-id1074 . -140) (undo-tree-id1075 . -140) (undo-tree-id1076 . -140) (undo-tree-id1077 . -140) (undo-tree-id1078 . -140) (undo-tree-id1079 . -140) (undo-tree-id1080 . -140) (undo-tree-id1081 . -140) (undo-tree-id1082 . -140) (undo-tree-id1083 . -140) (undo-tree-id1084 . -140) (undo-tree-id1085 . -140) (undo-tree-id1086 . -140) (undo-tree-id1087 . -140) (undo-tree-id1088 . -140) (undo-tree-id1089 . -141) (undo-tree-id1090 . -141) (undo-tree-id1091 . -141) (undo-tree-id1092 . -140) (undo-tree-id1093 . -76) (undo-tree-id1094 . -54) (undo-tree-id1095 . -1) (undo-tree-id1096 . -141) (t 26049 61821 912922 488000)) nil (26049 61848 364219 34000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -655) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (#("n" 0 1 (fontified t)) . -656) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) 657) ((655 . 657)) (26049 52947 757823 631000) 0 nil])
([nil nil ((nil rear-nonsticky nil 692 . 693) (nil fontified nil 692 . 693) (nil fontified nil 691 . 692) (nil fontified nil 690 . 691) (nil fontified nil 689 . 690) (nil fontified nil 688 . 689) (nil fontified nil 687 . 688) (nil fontified nil 659 . 687) (nil fontified nil 658 . 659) (nil fontified nil 654 . 658) (nil fontified nil 651 . 654) (nil fontified nil 650 . 651) (nil fontified nil 647 . 650) (nil fontified nil 646 . 647) (nil fontified nil 640 . 646) (nil fontified nil 639 . 640) (nil fontified nil 638 . 639) (nil fontified nil 637 . 638) (nil fontified nil 634 . 637) (nil fontified nil 632 . 634) (nil fontified nil 616 . 632) (nil fontified nil 615 . 616) (nil fontified nil 612 . 615) (nil fontified nil 611 . 612) (nil fontified nil 605 . 611) (nil fontified nil 604 . 605) (nil fontified nil 601 . 604) (nil fontified nil 597 . 601) (nil fontified nil 596 . 597) (nil fontified nil 595 . 596) (nil fontified nil 594 . 595) (nil fontified nil 582 . 594) (nil fontified nil 581 . 582) (nil fontified nil 580 . 581) (nil fontified nil 579 . 580) (nil fontified nil 574 . 579) (nil fontified nil 571 . 574) (nil fontified nil 567 . 571) (nil fontified nil 565 . 567) (nil fontified nil 543 . 565) (nil fontified nil 542 . 543) (nil fontified nil 537 . 542) (nil fontified nil 536 . 537) (nil fontified nil 533 . 536) (nil fontified nil 532 . 533) (nil fontified nil 531 . 532) (nil fontified nil 530 . 531) (nil fontified nil 508 . 530) (nil fontified nil 507 . 508) (nil fontified nil 502 . 507) (nil fontified nil 501 . 502) (nil fontified nil 500 . 501) (nil fontified nil 499 . 500) (nil fontified nil 498 . 499) (nil fontified nil 497 . 498) (nil fontified nil 496 . 497) (nil fontified nil 480 . 496) (nil fontified nil 479 . 480) (nil fontified nil 476 . 479) (nil fontified nil 475 . 476) (nil fontified nil 472 . 475) (nil fontified nil 471 . 472) (nil fontified nil 470 . 471) (nil fontified nil 469 . 470) (nil fontified nil 467 . 469) (nil fontified nil 463 . 467) (nil fontified nil 460 . 463) (nil fontified nil 456 . 460) (nil fontified nil 454 . 456) (nil fontified nil 432 . 454) (nil fontified nil 431 . 432) (nil fontified nil 426 . 431) (nil fontified nil 425 . 426) (nil fontified nil 422 . 425) (nil fontified nil 421 . 422) (nil fontified nil 420 . 421) (nil fontified nil 419 . 420) (nil fontified nil 397 . 419) (nil fontified nil 396 . 397) (nil fontified nil 391 . 396) (nil fontified nil 390 . 391) (nil fontified nil 389 . 390) (nil fontified nil 388 . 389) (nil fontified nil 387 . 388) (nil fontified nil 386 . 387) (nil fontified nil 370 . 386) (nil fontified nil 369 . 370) (nil fontified nil 366 . 369) (nil fontified nil 365 . 366) (nil fontified nil 364 . 365) (364 . 693)) nil (26049 61848 364190 954000) 0 nil])
([nil nil ((655 . 660)) ((#("inked" 0 5 (fontified t)) . 655) (undo-tree-id703 . -5)) (26049 52947 756510 891000) 0 nil])
([nil nil ((38 . 42) (t 26049 61848 382924 113000)) nil (26049 61862 700444 583000) 0 nil])
nil
([nil nil ((#("y" 0 1 (fontified t)) . -38) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (#("s" 0 1 (fontified t)) . -39) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (#("e" 0 1 (fontified t)) . -40) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (#(" " 0 1 (fontified t)) . -41) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) 42) nil (26049 61862 700441 942000) 0 nil])
([nil nil ((38 . 43)) nil (26049 61862 700413 822000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -42) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) 43) nil (26049 61862 700412 950000) 0 nil])
([nil nil ((42 . 44)) nil (26049 61862 700409 697000) 0 nil])
([nil nil ((42 . 53) (#("la" 0 2 (fontified nil)) . 42) (42 . 44) (#("lazy_static" 0 11 (fontified nil)) . -42) (42 . 53) (#("la" 0 2 (face font-lock-constant-face fontified t)) . -42) (undo-tree-id1106 . -2) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -2) 44) nil (26049 61862 700408 387000) 0 nil])
([nil nil ((53 . 55)) nil (26049 61862 700404 42000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -54) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) 55) nil (26049 61862 700403 114000) 0 nil])
([nil nil ((54 . 56)) nil (26049 61862 700399 758000) 0 nil])
([nil nil ((55 . 66) (#("l" 0 1 (fontified nil)) . 55) (55 . 56) (#("lazy_static" 0 11 (fontified nil)) . -55) (55 . 66) (#("l" 0 1 (fontified t)) . -55) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) 56) nil (26049 61862 700396 983000) 0 nil])
([nil nil ((66 . 67)) nil (26049 61862 700381 655000) 0 nil])
([nil nil ((722 . 723) (t 26049 61862 722924 993000)) nil (26049 61867 347454 176000) 0 nil])
([nil nil ((1611 . 1612) (t 26049 61867 356258 611000)) nil (26049 61913 729839 514000) 0 nil])
([nil nil ((1611 . 1633) (#("E" 0 1 (fontified nil)) . 1611) (1611 . 1612) (#("EnableValidationLayers" 0 22 (fontified nil)) . -1611) (1611 . 1633) (#("E" 0 1 (face font-lock-type-face fontified t)) . -1611) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) 1612) nil (26049 61913 729836 977000) 0 nil])
([nil nil ((1633 . 1637)) nil (26049 61913 729830 171000) 0 nil])
([nil nil ((1637 . 1638)) nil (26049 61913 729828 921000) 0 nil])
([nil nil ((1637 . 1646) (#("V" 0 1 (fontified nil)) . 1637) (1637 . 1638) (#("VulkanApp" 0 9 (fontified nil)) . -1637) (1637 . 1646) (#("V" 0 1 (face font-lock-type-face fontified t)) . -1637) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) 1638) nil (26049 61913 729826 930000) 0 nil])
([nil nil ((1646 . 1649)) nil (26049 61913 729817 102000) 0 nil])
([nil nil ((#("C" 0 1 (face font-lock-type-face fontified t)) . -1648) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) 1649) nil (26049 61913 729815 535000) 0 nil])
([nil nil ((1648 . 1649)) nil (26049 61913 729806 654000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1679 1684 nil nil nil nil #s(yas--exit 1685 nil))) #s(yas--exit 1685 nil) 12 nil #s(yas--field 1 1679 1684 nil nil nil nil #s(yas--exit 1685 nil)) nil nil)) (1648 . 1685) (#("check_validation_layer_support(${1:entry})$0" 0 44 (fontified nil)) . 1648) (1648 . 1692) (#("c" 0 1 (fontified nil)) . 1648) (1648 . 1649) (#("check_validation_layer_support(…)" 0 33 (fontified nil)) . -1648) (1648 . 1681) (#("c" 0 1 (fontified t)) . -1648) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) 1649) nil (26049 61913 729804 595000) 0 nil])
([nil nil ((apply yas--snippet-revive 1648 1685 #s(yas--snippet nil (#s(yas--field 1 1679 1684 nil nil nil nil #s(yas--exit 1685 nil))) #s(yas--exit 1685 nil) 12 nil #s(yas--field 1 1679 1684 nil nil nil nil #s(yas--exit 1685 nil)) nil nil))) nil (26049 61913 729796 591000) 0 nil])
([nil nil ((1685 . 1692)) nil (26049 61913 729795 675000) 0 nil])
([nil nil ((apply yas--snippet-revive 1689 1694 #s(yas--snippet nil nil nil 13 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 13 nil nil nil nil)) (1689 . 1694) (#("false" 0 5 (fontified nil)) . 1689) (1689 . 1694) (#("fal" 0 3 (fontified nil)) . 1689) (1689 . 1692) (#("false" 0 5 (fontified nil)) . -1689) (1689 . 1694) (#("fal" 0 3 (fontified t)) . -1689) (undo-tree-id1212 . -3) (undo-tree-id1213 . -1) (undo-tree-id1214 . -2) (undo-tree-id1215 . -2) (undo-tree-id1216 . -3) (undo-tree-id1217 . -3) (undo-tree-id1218 . -3) (undo-tree-id1219 . -3) 1692) nil (26049 61913 729793 329000) 0 nil])
([nil nil ((1694 . 1697)) nil (26049 61913 729781 94000) 0 nil])
([nil nil ((1698 . 1706) (#("            " 0 12 (fontified nil)) . 1697) (undo-tree-id1209 . -8) (undo-tree-id1210 . -8) (undo-tree-id1211 . -8) (1705 . 1709) (1696 . 1706)) nil (26049 61913 729779 526000) 0 nil])
([nil nil ((1697 . 1709)) nil (26049 61913 729774 530000) 0 nil])
([nil nil ((1709 . 1713)) nil (26049 61913 729773 55000) 0 nil])
([nil nil ((apply yas--snippet-revive 1709 1717 #s(yas--snippet nil nil #s(yas--exit 1716 nil) 14 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1716 nil) 14 nil nil nil nil)) (1709 . 1717) (#("panic!($0)" 0 10 (fontified nil)) . 1709) (1709 . 1719) (#("pani" 0 4 (fontified nil)) . 1709) (1709 . 1713) (#("panic!(…)" 0 9 (fontified nil)) . -1709) (1709 . 1718) (#("pani" 0 4 (fontified t)) . -1709) (undo-tree-id1199 . -4) (undo-tree-id1200 . -1) (undo-tree-id1201 . -2) (undo-tree-id1202 . -2) (undo-tree-id1203 . -3) (undo-tree-id1204 . -3) (undo-tree-id1205 . -4) (undo-tree-id1206 . -4) (undo-tree-id1207 . -4) (undo-tree-id1208 . -4) 1713) nil (26049 61913 729770 358000) 0 nil])
([nil nil ((#("            panic!()
" 0 12 (fontified t) 12 18 (face font-lock-preprocessor-face fontified t) 18 19 (face (rainbow-delimiters-depth-4-face) fontified t) 19 20 (face (rainbow-delimiters-depth-4-face) fontified t) 20 21 (fontified t)) . -1697) (undo-tree-id1155 . -21) (undo-tree-id1156 . -21) (undo-tree-id1157 . 1) (undo-tree-id1158 . -12) (undo-tree-id1159 . -12) (undo-tree-id1160 . -12) (undo-tree-id1161 . -12) (undo-tree-id1162 . -12) (undo-tree-id1163 . -12) (undo-tree-id1164 . -12) (undo-tree-id1165 . -12) (undo-tree-id1166 . -12) (undo-tree-id1167 . -12) (undo-tree-id1168 . -19) (undo-tree-id1169 . -19) (undo-tree-id1170 . -19) (undo-tree-id1171 . -19) (undo-tree-id1172 . -19) (undo-tree-id1173 . -19) (undo-tree-id1174 . -19) (undo-tree-id1175 . -19) (undo-tree-id1176 . -19) (undo-tree-id1177 . -19) (undo-tree-id1178 . -19) (undo-tree-id1179 . -19) (undo-tree-id1180 . -19) (undo-tree-id1181 . -19) (undo-tree-id1182 . -19) (undo-tree-id1183 . -18) (undo-tree-id1184 . -20) (undo-tree-id1185 . -20) (undo-tree-id1186 . -18) (undo-tree-id1187 . -20) (undo-tree-id1188 . -20) (undo-tree-id1189 . -21) (undo-tree-id1190 . -21) (undo-tree-id1191 . -18) (undo-tree-id1192 . -21) (undo-tree-id1193 . -21) (undo-tree-id1194 . -21) (undo-tree-id1195 . -21) (undo-tree-id1196 . -21) (undo-tree-id1197 . -21) (undo-tree-id1198 . -21) 1718) nil (26049 61913 729752 653000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1767 . 1768) (nil fontified nil 1697 . 1768) (1697 . 1768)) nil (26049 61913 729690 720000) 0 nil])
([nil nil ((#("VALIDATION" 0 10 (face font-lock-type-face fontified t)) . -3791) (undo-tree-id1246 . -10) (undo-tree-id1247 . -10) (undo-tree-id1248 . -10) (undo-tree-id1249 . -10) (undo-tree-id1250 . -10) (undo-tree-id1251 . -10) (undo-tree-id1252 . -10) (undo-tree-id1253 . -10) (undo-tree-id1254 . -10) (undo-tree-id1255 . -10) (undo-tree-id1256 . -10) (undo-tree-id1257 . -10) (undo-tree-id1258 . -10) (undo-tree-id1259 . -10) (undo-tree-id1260 . -10) 3801 (t 26049 61913 749594 792000)) nil (26049 61933 327159 432000) 0 nil])
([nil nil ((3791 . 3792)) nil (26049 61933 326731 375000) 0 nil])
([nil nil ((3791 . 3807) (#("V" 0 1 (fontified nil)) . 3791) (3791 . 3792) (#("VALIDATIONLAYERS" 0 16 (fontified nil)) . -3791) (3791 . 3807) (#("V" 0 1 (face font-lock-type-face fontified t)) . -3791) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) 3792) nil (26049 61933 326726 912000) 0 nil])
([nil nil ((#("layers" 0 6 (fontified t)) . -3828) (undo-tree-id1292 . -6) (undo-tree-id1293 . -6) (undo-tree-id1294 . -6) (undo-tree-id1295 . -6) (undo-tree-id1296 . -6) (undo-tree-id1297 . -6) 3834 (t 26049 61933 346262 662000)) nil (26049 61942 475123 532000) 0 nil])
([nil nil ((#("validation_" 0 11 (fontified t)) . -3817) (undo-tree-id1284 . -11) (undo-tree-id1285 . -10) (undo-tree-id1286 . -11) (undo-tree-id1287 . -11) (undo-tree-id1288 . -11) (undo-tree-id1289 . -11) (undo-tree-id1290 . -11) (undo-tree-id1291 . -11) 3828) nil (26049 61942 475115 230000) 0 nil])
([nil nil ((#("required_" 0 9 (fontified t)) . -3808) (undo-tree-id1274 . -9) (undo-tree-id1275 . -8) (undo-tree-id1276 . -9) (undo-tree-id1277 . -9) (undo-tree-id1278 . -9) (undo-tree-id1279 . -9) (undo-tree-id1280 . -9) (undo-tree-id1281 . -9) (undo-tree-id1282 . -9) (undo-tree-id1283 . -9) 3817) nil (26049 61942 475103 760000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -3807) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) 3808) nil (26049 61942 475086 142000) 0 nil])
([nil nil ((#("#[cfg(debug_assertions)]
#[allow(non_upper_case_globals)]
pub const EnableValidationLayers: bool = true;

#[cfg(not(debug_assertions))]
#[allow(non_upper_case_globals)]
pub const EnableValidationLayers: bool = false;

lazy_static! {
    pub static ref VALIDATIONLAYERS: Vec<&'static str> = vec![\"VK_LAYER_KHRONOS_validation\",];
}" 0 1 (face font-lock-preprocessor-face fontified t) 1 2 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t) 2 5 (face font-lock-preprocessor-face fontified t) 5 6 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 6 22 (face font-lock-preprocessor-face fontified t) 22 23 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 23 24 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t) 24 25 (fontified t) 25 26 (face font-lock-preprocessor-face fontified t) 26 27 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t) 27 32 (face font-lock-preprocessor-face fontified t) 32 33 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 33 55 (face font-lock-preprocessor-face fontified t) 55 56 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 56 57 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t) 57 58 (fontified t rear-nonsticky t) 58 61 (face font-lock-keyword-face fontified t) 61 62 (fontified t) 62 67 (face font-lock-keyword-face fontified t) 67 68 (fontified t) 68 90 (face font-lock-variable-name-face fontified t) 90 92 (fontified t) 92 96 (face font-lock-type-face fontified t) 96 99 (fontified t) 99 103 (face font-lock-keyword-face fontified t) 103 105 (fontified t) 105 106 (fontified t) 106 107 (face font-lock-preprocessor-face fontified t) 107 108 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t) 108 111 (face font-lock-preprocessor-face fontified t) 111 112 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 112 115 (face font-lock-preprocessor-face fontified t) 115 116 (face (rainbow-delimiters-depth-3-face font-lock-preprocessor-face) fontified t) 116 132 (face font-lock-preprocessor-face fontified t) 132 133 (face (rainbow-delimiters-depth-3-face font-lock-preprocessor-face) fontified t) 133 134 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 134 135 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t) 135 136 (fontified t) 136 137 (face font-lock-preprocessor-face fontified t) 137 138 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t) 138 143 (face font-lock-preprocessor-face fontified t) 143 144 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 144 166 (face font-lock-preprocessor-face fontified t) 166 167 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 167 168 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t) 168 169 (fontified t rear-nonsticky t) 169 172 (face font-lock-keyword-face fontified t) 172 173 (fontified t) 173 178 (face font-lock-keyword-face fontified t) 178 179 (fontified t) 179 201 (face font-lock-variable-name-face fontified t) 201 203 (fontified t) 203 207 (face font-lock-type-face fontified t) 207 210 (fontified t) 210 215 (face font-lock-keyword-face fontified t) 215 216 (fontified t) 216 217 (fontified t) 217 218 (fontified t) 218 230 (face font-lock-preprocessor-face fontified t) 230 231 (fontified t) 231 232 (face (rainbow-delimiters-depth-1-face) fontified t) 232 233 (fontified t) 233 237 (fontified t) 237 240 (face font-lock-keyword-face fontified t) 240 241 (fontified t) 241 247 (face font-lock-keyword-face fontified t) 247 248 (fontified t) 248 251 (face font-lock-keyword-face fontified t) 251 252 (fontified t) 252 268 (face font-lock-variable-name-face fontified t) 268 270 (fontified t) 270 273 (face font-lock-type-face fontified t) 273 274 (fontified t syntax-table (1)) 274 275 (face rust-ampersand-face fontified t) 275 276 (fontified t) 276 282 (face font-lock-keyword-face fontified t) 282 283 (fontified t) 283 286 (face font-lock-type-face fontified t) 286 287 (fontified t syntax-table (1)) 287 290 (fontified t) 290 294 (face font-lock-preprocessor-face fontified t) 294 295 (face (rainbow-delimiters-depth-2-face) fontified t) 295 323 (face font-lock-string-face fontified t) 323 324 (face font-lock-string-face fontified t rear-nonsticky t) 324 325 (fontified t) 325 326 (face (rainbow-delimiters-depth-2-face) fontified t) 326 327 (fontified t) 327 328 (fontified t) 328 329 (face (rainbow-delimiters-depth-1-face) fontified t rear-nonsticky t)) . 393) (undo-tree-id1298 . -329) (undo-tree-id1299 . -329) (undo-tree-id1300 . -329) (undo-tree-id1301 . -329) (undo-tree-id1302 . -237) (undo-tree-id1303 . -221) (undo-tree-id1304 . -217) (undo-tree-id1305 . -171) (undo-tree-id1306 . -170) (undo-tree-id1307 . -106) (undo-tree-id1308 . -329) (t 26049 61942 496263 223000)) nil (26050 3781 404820 421000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -392) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) 393 (t 26050 3781 420049 44000)) nil (26050 3783 277548 846000) 0 nil])
([nil nil ((#("   fn check_validation_layer_support(entry: &ash::Entry) -> bool {
        // if support validation layer, then return true

        let layer_properties = entry
            .enumerate_instance_layer_properties()
            .expect(\"Failed to enumerate Instance Layers Properties!\");

        if layer_properties.len() <= 0 {
            eprintln!(\"No available layers.\");
            return false;
        } else {
            println!(\"Instance Available Layers: \");
            for layer in layer_properties.iter() {
                let layer_name = utility::tools::vk_to_string(&layer.layer_name);
                println!(\"\\t{}\", layer_name);
            }
        }

        for required_layer_name in VALIDATIONLAYERS.iter() {
            let mut is_layer_found = false;

            for layer_property in layer_properties.iter() {
                let test_layer_name = utility::tools::vk_to_string(&layer_property.layer_name);
                if (*required_layer_name) == test_layer_name {
                    is_layer_found = true;
                    break;
                }
            }

            if is_layer_found == false {
                return false;
            }
        }

        true
    }" 0 3 (fontified t) 3 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 36 (face font-lock-function-name-face fontified t) 36 37 (face (rainbow-delimiters-depth-2-face) fontified t) 37 42 (face font-lock-variable-name-face fontified t) 42 44 (fontified t) 44 45 (face rust-ampersand-face fontified t) 45 48 (face font-lock-constant-face fontified t) 48 50 (fontified t) 50 55 (face font-lock-type-face fontified t) 55 56 (face (rainbow-delimiters-depth-2-face) fontified t) 56 58 (fontified t) 58 59 (fontified t syntax-table (1)) 59 60 (fontified t) 60 64 (face font-lock-type-face fontified t) 64 65 (fontified t) 65 66 (face (rainbow-delimiters-depth-2-face) fontified t) 66 75 (fontified t) 75 78 (face font-lock-comment-delimiter-face fontified t) 78 124 (face font-lock-comment-face fontified t) 124 133 (fontified t) 133 136 (face font-lock-keyword-face fontified t) 136 137 (fontified t) 137 153 (face font-lock-variable-name-face fontified t) 153 183 (fontified t) 183 186 (fontified t) 186 196 (fontified t) 196 210 (fontified t) 210 211 (face (rainbow-delimiters-depth-3-face) fontified t) 211 212 (face (rainbow-delimiters-depth-3-face) fontified t) 212 213 (fontified t) 213 232 (fontified t) 232 233 (face (rainbow-delimiters-depth-3-face) fontified t) 233 282 (face font-lock-string-face fontified t) 282 283 (face (rainbow-delimiters-depth-3-face) fontified t) 283 294 (fontified t) 294 296 (face font-lock-keyword-face fontified t) 296 317 (fontified t) 317 318 (face (rainbow-delimiters-depth-3-face) fontified t) 318 319 (face (rainbow-delimiters-depth-3-face) fontified t) 319 320 (fontified t) 320 321 (fontified t syntax-table (1)) 321 325 (fontified t) 325 326 (face (rainbow-delimiters-depth-3-face) fontified t) 326 339 (fontified t) 339 348 (face rust-builtin-formatting-macro fontified t) 348 349 (face (rainbow-delimiters-depth-4-face) fontified t) 349 371 (face font-lock-string-face fontified t) 371 372 (face (rainbow-delimiters-depth-4-face) fontified t) 372 386 (fontified t) 386 392 (face font-lock-keyword-face fontified t) 392 393 (fontified t) 393 398 (face font-lock-keyword-face fontified t) 398 408 (fontified t) 408 409 (face (rainbow-delimiters-depth-3-face) fontified t) 409 410 (fontified t) 410 414 (face font-lock-keyword-face fontified t) 414 415 (fontified t) 415 416 (face (rainbow-delimiters-depth-3-face) fontified t) 416 429 (fontified t) 429 437 (face rust-builtin-formatting-macro fontified t) 437 438 (face (rainbow-delimiters-depth-4-face) fontified t) 438 467 (face font-lock-string-face fontified t) 467 468 (face (rainbow-delimiters-depth-4-face) fontified t) 468 482 (fontified t) 482 485 (face font-lock-keyword-face fontified t) 485 486 (fontified t) 486 491 (face font-lock-variable-name-face fontified t) 491 492 (fontified t) 492 494 (face font-lock-keyword-face fontified t) 494 516 (fontified t) 516 517 (face (rainbow-delimiters-depth-4-face) fontified t) 517 518 (face (rainbow-delimiters-depth-4-face) fontified t) 518 519 (fontified t) 519 520 (face (rainbow-delimiters-depth-4-face) fontified t) 520 537 (fontified t) 537 540 (face font-lock-keyword-face fontified t) 540 541 (fontified t) 541 551 (face font-lock-variable-name-face fontified t) 551 554 (fontified t) 554 561 (face font-lock-constant-face fontified t) 561 563 (fontified t) 563 568 (face font-lock-constant-face fontified t) 568 582 (fontified t) 582 583 (face (rainbow-delimiters-depth-5-face) fontified t) 583 584 (face rust-ampersand-face fontified t) 584 600 (fontified t) 600 601 (face (rainbow-delimiters-depth-5-face) fontified t) 601 619 (fontified t) 619 627 (face rust-builtin-formatting-macro fontified t) 627 628 (face (rainbow-delimiters-depth-5-face) fontified t) 628 631 (face font-lock-string-face fontified t) 631 633 (face rust-string-interpolation fontified t) 633 634 (face font-lock-string-face fontified t) 634 646 (fontified t) 646 647 (face (rainbow-delimiters-depth-5-face) fontified t) 647 661 (fontified t) 661 662 (face (rainbow-delimiters-depth-4-face) fontified t) 662 671 (fontified t) 671 672 (face (rainbow-delimiters-depth-3-face) fontified t) 672 673 (fontified t) 673 674 (fontified t) 674 682 (fontified t) 682 685 (face font-lock-keyword-face fontified t) 685 686 (fontified t) 686 705 (face font-lock-variable-name-face fontified t) 705 706 (fontified t) 706 708 (face font-lock-keyword-face fontified t) 708 709 (fontified t) 709 725 (face font-lock-type-face fontified t) 725 730 (fontified t) 730 731 (face (rainbow-delimiters-depth-3-face) fontified t) 731 732 (face (rainbow-delimiters-depth-3-face) fontified t) 732 733 (fontified t) 733 734 (face (rainbow-delimiters-depth-3-face) fontified t) 734 735 (fontified t) 735 747 (fontified t) 747 750 (face font-lock-keyword-face fontified t) 750 751 (fontified t) 751 754 (face font-lock-keyword-face fontified t) 754 755 (fontified t) 755 769 (face font-lock-variable-name-face fontified t) 769 772 (fontified t) 772 777 (face font-lock-keyword-face fontified t) 777 792 (fontified t) 792 795 (face font-lock-keyword-face fontified t) 795 796 (fontified t) 796 810 (face font-lock-variable-name-face fontified t) 810 811 (fontified t) 811 813 (face font-lock-keyword-face fontified t) 813 835 (fontified t) 835 836 (face (rainbow-delimiters-depth-4-face) fontified t) 836 837 (face (rainbow-delimiters-depth-4-face) fontified t) 837 838 (fontified t) 838 839 (face (rainbow-delimiters-depth-4-face) fontified t) 839 856 (fontified t) 856 859 (face font-lock-keyword-face fontified t) 859 860 (fontified t) 860 875 (face font-lock-variable-name-face fontified t) 875 878 (fontified t) 878 885 (face font-lock-constant-face fontified t) 885 887 (fontified t) 887 892 (face font-lock-constant-face fontified t) 892 906 (fontified t) 906 907 (face (rainbow-delimiters-depth-5-face) fontified t) 907 908 (face rust-ampersand-face fontified t) 908 933 (fontified t) 933 934 (face (rainbow-delimiters-depth-5-face) fontified t) 934 952 (fontified t) 952 954 (face font-lock-keyword-face fontified t) 954 955 (fontified t) 955 956 (face (rainbow-delimiters-depth-5-face) fontified t) 956 976 (fontified t) 976 977 (face (rainbow-delimiters-depth-5-face) fontified t) 977 997 (fontified t) 997 998 (face (rainbow-delimiters-depth-5-face) fontified t) 998 1036 (fontified t) 1036 1040 (face font-lock-keyword-face fontified t) 1040 1062 (fontified t) 1062 1067 (face font-lock-keyword-face fontified t) 1067 1085 (fontified t) 1085 1086 (face (rainbow-delimiters-depth-5-face) fontified t) 1086 1099 (fontified t) 1099 1100 (face (rainbow-delimiters-depth-4-face) fontified t) 1100 1114 (fontified t) 1114 1116 (face font-lock-keyword-face fontified t) 1116 1135 (fontified t) 1135 1140 (face font-lock-keyword-face fontified t) 1140 1141 (fontified t) 1141 1142 (face (rainbow-delimiters-depth-4-face) fontified t) 1142 1159 (fontified t) 1159 1165 (face font-lock-keyword-face fontified t) 1165 1166 (fontified t) 1166 1171 (face font-lock-keyword-face fontified t) 1171 1185 (fontified t) 1185 1186 (face (rainbow-delimiters-depth-4-face) fontified t) 1186 1195 (fontified t) 1195 1196 (face (rainbow-delimiters-depth-3-face) fontified t) 1196 1206 (fontified t) 1206 1210 (face font-lock-keyword-face fontified t) 1210 1215 (fontified t) 1215 1216 (face (rainbow-delimiters-depth-2-face) fontified t rear-nonsticky t)) . -2752) (undo-tree-id1338 . -1216) (undo-tree-id1339 . -1216) (undo-tree-id1340 . -213) (undo-tree-id1341 . -1216) (undo-tree-id1342 . -1) (undo-tree-id1343 . -2) (undo-tree-id1344 . -3) (undo-tree-id1345 . -72) (undo-tree-id1346 . -73) (undo-tree-id1347 . -74) (undo-tree-id1348 . -76) (undo-tree-id1349 . -77) (undo-tree-id1350 . -79) (undo-tree-id1351 . -124) (undo-tree-id1352 . -144) (undo-tree-id1353 . -146) (undo-tree-id1354 . -148) (undo-tree-id1355 . -149) (undo-tree-id1356 . -187) (undo-tree-id1357 . -189) (undo-tree-id1358 . -190) (undo-tree-id1359 . -191) (undo-tree-id1360 . -192) (undo-tree-id1361 . -244) (undo-tree-id1362 . -245) (undo-tree-id1363 . -246) (undo-tree-id1364 . -247) (undo-tree-id1365 . -285) (undo-tree-id1366 . -322) (undo-tree-id1367 . -323) (undo-tree-id1368 . -365) (undo-tree-id1369 . -399) (undo-tree-id1370 . -416) (undo-tree-id1371 . -457) (undo-tree-id1372 . -458) (undo-tree-id1373 . -563) (undo-tree-id1374 . -662) (undo-tree-id1375 . -672) (undo-tree-id1376 . -662) (undo-tree-id1377 . -644) (undo-tree-id1378 . -643) (undo-tree-id1379 . -560) (undo-tree-id1380 . -508) (undo-tree-id1381 . -454) (undo-tree-id1382 . -454) (undo-tree-id1383 . -454) (undo-tree-id1384 . -454) (undo-tree-id1385 . -454) (undo-tree-id1386 . -454) (undo-tree-id1387 . -454) (undo-tree-id1388 . -454) (undo-tree-id1389 . -454) (undo-tree-id1390 . -454) (undo-tree-id1391 . -454) (undo-tree-id1392 . -454) (undo-tree-id1393 . -454) (undo-tree-id1394 . -454) (undo-tree-id1395 . -454) (undo-tree-id1396 . -454) (undo-tree-id1397 . -1211) (undo-tree-id1398 . -1216) (undo-tree-id1399 . -1216) (undo-tree-id1400 . -1216) (undo-tree-id1401 . -1216) (undo-tree-id1402 . -1216) (undo-tree-id1403 . -1216) (undo-tree-id1404 . -1216) 3968 (t 26050 3783 293382 493000)) nil (26050 3800 233924 858000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2749) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (#("
" 0 1 (fontified t)) . -2750) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (#(" " 0 1 (fontified t)) . -2751) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) 2752 (t 26050 3800 250050 200000)) nil (26050 3802 5333 895000) 0 nil])
([nil nil ((1281 . 1282) (t 26050 3802 20050 309000)) nil (26050 3814 187816 109000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1281) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) 1282) nil (26050 3822 370789 640000) 0 nil] [nil nil ((#(" " 0 1 (fontified t)) . -1281) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) 1282) ((1281 . 1282)) (26050 3813 778740 663000) 0 nil])
([nil nil ((1281 . 1283)) nil (26050 3822 370785 815000) 0 nil])
([nil nil ((1281 . 1283)) ((#("ut" 0 2 (fontified t)) . 1281) (undo-tree-id1669 . -2) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (undo-tree-id1674 . -2) (undo-tree-id1675 . -2) (undo-tree-id1676 . -2) (undo-tree-id1677 . -2) (undo-tree-id1678 . -2) (undo-tree-id1679 . -2)) (26050 3813 429125 337000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -1282) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) 1283) nil (26050 3822 370785 133000) 0 nil])
([nil nil ((1281 . 1288) (#("utEnableValidationLayers" 0 2 (fontified nil) 2 24 (fontified nil)) . 1281) (undo-tree-id1638 . -3) (undo-tree-id1639 . -3) (undo-tree-id1640 . -3) (undo-tree-id1641 . -3) (undo-tree-id1642 . -3) (undo-tree-id1643 . -3) (undo-tree-id1644 . -3) (undo-tree-id1645 . -3) (undo-tree-id1646 . -3) (undo-tree-id1647 . -3) (undo-tree-id1648 . -3) (undo-tree-id1649 . -3) (undo-tree-id1650 . -3) (undo-tree-id1651 . 22) (1281 . 1283) (#("utility" 0 7 (fontified nil)) . -1281) (1281 . 1288) (#("ut" 0 2 (fontified t)) . -1281) (undo-tree-id1652 . -2) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -2) (undo-tree-id1658 . -2) (undo-tree-id1659 . -2) (undo-tree-id1660 . -2) (undo-tree-id1661 . -2) 1283) ((1281 . 1283) (#("utility" 0 7 (fontified nil)) . 1281) (1281 . 1288) (#("ut" 0 2 (fontified nil)) . 1281) (1281 . 1305) (#("utility" 0 7 (fontified t)) . 1281) (undo-tree-id1666 . -7) (undo-tree-id1667 . -7) (undo-tree-id1668 . -7)) (26050 3813 103048 444000) 0 nil])
([nil nil ((1282 . 1283)) nil (26050 3822 370782 184000) 0 nil])
([nil nil ((1288 . 1290)) ((#("::" 0 2 (fontified t)) . 1288) (undo-tree-id1665 . -2)) (26050 3813 102841 415000) 0 nil])
([nil nil ((1281 . 1283)) nil (26050 3822 370781 560000) 0 nil])
nil
([nil nil ((1281 . 1288) (#("ut" 0 2 (fontified nil)) . 1281) (1281 . 1283) (#("utility" 0 7 (fontified nil)) . -1281) (1281 . 1288) (#("ut" 0 2 (face font-lock-constant-face fontified t)) . -1281) (undo-tree-id1686 . -2) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (undo-tree-id1691 . -2) (undo-tree-id1692 . -2) (undo-tree-id1693 . -2) 1283) nil (26050 3822 370780 250000) 0 nil])
([nil nil ((1288 . 1291)) nil (26050 3822 370773 954000) 0 nil])
([nil nil ((1290 . 1300) (#("v" 0 1 (fontified nil)) . 1290) (1290 . 1291) (#("validation" 0 10 (fontified nil)) . -1290) (1290 . 1300) (#("v" 0 1 (face font-lock-constant-face fontified t)) . -1290) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) 1291) nil (26050 3822 370769 875000) 0 nil])
([nil nil ((#("VulkanApp" 0 9 (face font-lock-type-face fontified t)) . -1328) (undo-tree-id1720 . -9) (undo-tree-id1721 . -9) (undo-tree-id1722 . -9) (undo-tree-id1723 . -9) (undo-tree-id1724 . -9) (undo-tree-id1725 . -9) (undo-tree-id1726 . -9) (undo-tree-id1727 . -9) (undo-tree-id1728 . -9) (undo-tree-id1729 . -9) (undo-tree-id1730 . -9) 1337 (t 26050 3822 386718 225000)) nil (26050 3830 402238 200000) 0 nil])
([nil nil ((1328 . 1330)) nil (26050 3830 402230 713000) 0 nil])
([nil nil ((1328 . 1335) (#("ut" 0 2 (fontified nil)) . 1328) (1328 . 1330) (#("utility" 0 7 (fontified nil)) . -1328) (1328 . 1335) (#("ut" 0 2 (face font-lock-constant-face fontified t)) . -1328) (undo-tree-id1710 . -2) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -2) (undo-tree-id1718 . -2) (undo-tree-id1719 . -2) 1330) nil (26050 3830 402229 188000) 0 nil])
([nil nil ((1335 . 1338)) nil (26050 3830 402220 558000) 0 nil])
([nil nil ((1337 . 1347) (#("v" 0 1 (fontified nil)) . 1337) (1337 . 1338) (#("validation" 0 10 (fontified nil)) . -1337) (1337 . 1347) (#("v" 0 1 (face font-lock-constant-face fontified t)) . -1337) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) 1338) nil (26050 3830 402216 215000) 0 nil])
([nil nil ((2783 . 2787) (#("    " 0 4 (fontified nil)) . 2782) (undo-tree-id1731 . -4) (undo-tree-id1732 . -4) (undo-tree-id1733 . -4) (2782 . 2787) (#("    " 0 4 (fontified nil)) . 2781) (undo-tree-id1734 . -4) (undo-tree-id1735 . -4) (undo-tree-id1736 . -4) (undo-tree-id1737 . -4) (undo-tree-id1738 . -4) (undo-tree-id1739 . -4) (undo-tree-id1740 . -4) (undo-tree-id1741 . -4) (undo-tree-id1742 . -4) (undo-tree-id1743 . -4) (undo-tree-id1744 . -4) (undo-tree-id1745 . -4) (undo-tree-id1746 . -4) (2785 . 2786) (t 26050 3830 450052 54000)) nil (26050 5035 657196 228000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3522 . 3523) (nil fontified nil 2782 . 3523) (2782 . 3523)) nil (26050 5035 657173 291000) 0 nil])
([nil nil ((#("VALIDATION" 0 10 (face font-lock-type-face fontified t)) . -3045) (undo-tree-id1750 . -10) (undo-tree-id1751 . -10) (undo-tree-id1752 . -10) (undo-tree-id1753 . -10) (undo-tree-id1754 . -10) (undo-tree-id1755 . -10) (undo-tree-id1756 . -10) (undo-tree-id1757 . -10) (undo-tree-id1758 . -10) (undo-tree-id1759 . -10) (undo-tree-id1760 . -10) (undo-tree-id1761 . -10) (undo-tree-id1762 . -10) (undo-tree-id1763 . -10) (undo-tree-id1764 . -10) 3055 (t 26050 5035 676791 211000)) nil (26050 5049 571664 932000) 0 nil])
([nil nil ((3045 . 3046)) nil (26050 5049 571863 372000) 0 nil])
([nil nil ((#("enable" 0 6 (fontified t)) . -3050) (undo-tree-id1824 . -6) (undo-tree-id1825 . -6) 3056) nil (26050 5064 609879 671000) 0 nil] [nil nil ((#("false" 0 5 (face font-lock-keyword-face fontified t)) . -3060) (undo-tree-id1747 . -5) (undo-tree-id1748 . -5) (undo-tree-id1749 . -5) 3065) ((3060 . 3065)) (26050 5049 571649 491000) 0 nil])
([nil nil ((#("is_" 0 3 (fontified t)) . -3047) (undo-tree-id1821 . -3) (undo-tree-id1822 . -3) (undo-tree-id1823 . -3) 3050) nil (26050 5064 609877 927000) 0 nil])
nil
([nil nil ((#("E" 0 1 (face font-lock-type-face fontified t)) . -3045) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (#("." 0 1 (fontified t)) . -3046) (undo-tree-id1810 . -1) (undo-tree-id1811 . 1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) 3047) nil (26050 5064 609875 103000) 0 nil])
([nil nil ((3045 . 3046)) nil (26050 5064 609862 831000) 0 nil])
([nil nil ((#("E" 0 1 (face font-lock-type-face fontified t)) . -3045) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (undo-tree-id1798 . -1) 3046) nil (26050 5064 609862 100000) 0 nil])
([nil nil ((3045 . 3049)) nil (26050 5064 609858 796000) 0 nil])
([nil nil ((#("vali" 0 4 (fontified t)) . -3045) (undo-tree-id1777 . -4) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -2) (undo-tree-id1781 . -2) (undo-tree-id1782 . -2) (undo-tree-id1783 . -2) (undo-tree-id1784 . -2) (undo-tree-id1785 . -2) (undo-tree-id1786 . -2) (undo-tree-id1787 . -3) (undo-tree-id1788 . -3) (undo-tree-id1789 . -3) (undo-tree-id1790 . -4) (undo-tree-id1791 . -4) (undo-tree-id1792 . -4) (undo-tree-id1793 . -4) 3049) nil (26050 5064 609857 653000) 0 nil])
([nil nil ((3045 . 3047)) nil (26050 5064 609848 461000) 0 nil])
([nil nil ((3045 . 3052) (#("ut" 0 2 (fontified nil)) . 3045) (3045 . 3047) (#("utility" 0 7 (fontified nil)) . -3045) (3045 . 3052) (#("ut" 0 2 (fontified t)) . -3045) (undo-tree-id1769 . -2) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (undo-tree-id1774 . -2) (undo-tree-id1775 . -2) (undo-tree-id1776 . -2) 3047) nil (26050 5064 609847 334000) 0 nil])
([nil nil ((3052 . 3055)) nil (26050 5064 609841 791000) 0 nil])
([nil nil ((3054 . 3064) (#("v" 0 1 (fontified nil)) . 3054) (3054 . 3055) (#("validation" 0 10 (fontified nil)) . -3054) (3054 . 3064) (#("v" 0 1 (fontified t)) . -3054) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) 3055) nil (26050 5064 609840 352000) 0 nil])
([nil nil ((3064 . 3066)) nil (26050 5064 609832 383000) 0 nil])
([nil nil ((3066 . 3088) (#("EnableValidationLayers" 0 22 (fontified nil)) . -3066) (3066 . 3088)) nil (26050 5064 609828 415000) 0 nil])
([nil nil ((3222 . 3223) (t 26050 5064 616792 959000)) nil (26050 5072 171051 860000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -3222) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) 3223) nil (26050 5072 171050 534000) 0 nil])
([nil nil ((3222 . 3224)) nil (26050 5072 172087 47000) 0 nil])
([nil nil ((3224 . 3226)) nil (26050 5078 486869 450000) 0 nil] [nil nil ((3222 . 3229) (#("utpopulate_debug_messenger_create_info" 0 2 (fontified nil) 2 38 (fontified nil)) . 3222) (undo-tree-id1826 . 36) (3222 . 3224) (#("utility" 0 7 (fontified nil)) . -3222) (3222 . 3229) (#("ut" 0 2 (fontified t)) . -3222) (undo-tree-id1827 . -2) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -2) (undo-tree-id1831 . -2) (undo-tree-id1832 . -2) (undo-tree-id1833 . -2) 3224) ((3222 . 3224) (#("utility" 0 7 (fontified nil)) . 3222) (3222 . 3229) (#("ut" 0 2 (fontified nil)) . 3222) (3222 . 3260) (#("utility" 0 7 (fontified t)) . 3222) (undo-tree-id1842 . -7) (undo-tree-id1843 . -7)) (26050 5072 171038 809000) 0 nil])
([nil nil ((3224 . 3225)) nil (26050 5078 486868 812000) 0 nil])
nil
([nil nil ((#("t" 0 1 (face font-lock-constant-face fontified t)) . -3224) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) 3225) nil (26050 5078 486867 628000) 0 nil])
([nil nil ((3224 . 3225)) nil (26050 5078 486865 51000) 0 nil])
([nil nil ((3222 . 3229) (#("uti" 0 3 (fontified nil)) . 3222) (3222 . 3225) (#("utility" 0 7 (fontified nil)) . -3222) (3222 . 3229) (#("uti" 0 3 (face font-lock-constant-face fontified t)) . -3222) (undo-tree-id1854 . -3) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -2) (undo-tree-id1858 . -2) (undo-tree-id1859 . -2) (undo-tree-id1860 . -2) (undo-tree-id1861 . -2) (undo-tree-id1862 . -2) (undo-tree-id1863 . -2) (undo-tree-id1864 . -2) (undo-tree-id1865 . -2) (undo-tree-id1866 . -2) (undo-tree-id1867 . -2) (undo-tree-id1868 . -2) (undo-tree-id1869 . -2) (undo-tree-id1870 . -2) (undo-tree-id1871 . -2) (undo-tree-id1872 . -3) (undo-tree-id1873 . -3) 3225) nil (26050 5078 486863 214000) 0 nil])
([nil nil ((3229 . 3230)) nil (26050 5078 486848 690000) 0 nil])
([nil nil ((#("v" 0 1 (face font-lock-constant-face fontified t)) . -3229) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) 3230) nil (26050 5078 486847 651000) 0 nil])
([nil nil ((3229 . 3232)) nil (26050 5078 486843 168000) 0 nil])
([nil nil ((3231 . 3241) (#("v" 0 1 (fontified nil)) . 3231) (3231 . 3232) (#("validation" 0 10 (fontified nil)) . -3231) (3231 . 3241) (#("v" 0 1 (face font-lock-constant-face fontified t)) . -3231) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) 3232) nil (26050 5078 486839 178000) 0 nil])
([nil nil ((485 . 490) (t 26050 5078 503460 471000)) nil (26050 5248 816095 935000) 0 nil])
([nil nil ((490 . 495)) nil (26050 5248 816094 917000) 0 nil])
([nil nil ((495 . 498)) nil (26050 5248 816094 155000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -496) (undo-tree-id1900 . -1) (#("i" 0 1 (fontified t)) . -497) (undo-tree-id1901 . -1) 498) nil (26050 5248 816093 28000) 0 nil])
([nil nil ((496 . 498)) nil (26050 5248 816089 844000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -497) (undo-tree-id1899 . -1) 498) nil (26050 5248 816088 868000) 0 nil])
([nil nil ((497 . 501)) nil (26050 5248 816086 591000) 0 nil])
([nil nil ((501 . 505)) nil (26050 5248 816085 714000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -503) (undo-tree-id1897 . -1) (#("k" 0 1 (fontified t)) . -504) (undo-tree-id1898 . -1) 505) nil (26050 5248 816084 375000) 0 nil])
([nil nil ((503 . 505)) nil (26050 5248 816081 1000) 0 nil])
([nil nil ((503 . 506) (#("as" 0 2 (fontified nil)) . 503) (503 . 505) (#("ash" 0 3 (fontified nil)) . -503) (503 . 506) (#("as" 0 2 (face font-lock-keyword-face fontified t)) . -503) (undo-tree-id1896 . -2) 505) nil (26050 5248 816079 545000) 0 nil])
([nil nil ((506 . 509)) nil (26050 5248 816076 389000) 0 nil])
([nil nil ((#("E" 0 1 (face font-lock-type-face fontified t)) . -508) (undo-tree-id1895 . -1) 509) nil (26050 5248 816075 225000) 0 nil])
([nil nil ((508 . 509)) nil (26050 5248 816072 775000) 0 nil])
([nil nil ((508 . 518) (#("e" 0 1 (fontified nil)) . 508) (508 . 509) (#("extensions" 0 10 (fontified nil)) . -508) (508 . 518) (#("e" 0 1 (fontified t)) . -508) (undo-tree-id1894 . -1) 509) nil (26050 5248 816071 210000) 0 nil])
([nil nil ((518 . 521)) nil (26050 5248 816068 136000) 0 nil])
([nil nil ((#("D" 0 1 (face font-lock-type-face fontified t)) . -520) (undo-tree-id1893 . -1) 521) nil (26050 5248 816067 76000) 0 nil])
([nil nil ((520 . 521)) nil (26050 5248 816064 833000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -520) (undo-tree-id1892 . -1) 521) nil (26050 5248 816063 736000) 0 nil])
([nil nil ((520 . 521)) nil (26050 5248 816061 583000) 0 nil])
([nil nil ((520 . 523) (#("e" 0 1 (fontified nil)) . 520) (520 . 521) (#("ext" 0 3 (fontified nil)) . -520) (520 . 523) (#("e" 0 1 (fontified t)) . -520) (undo-tree-id1891 . -1) 521) nil (26050 5248 816060 108000) 0 nil])
([nil nil ((523 . 526)) nil (26050 5248 816056 771000) 0 nil])
([nil nil ((525 . 535) (#("D" 0 1 (fontified nil)) . 525) (525 . 526) (#("DebugUtils" 0 10 (fontified nil)) . -525) (525 . 535) (#("D" 0 1 (face font-lock-type-face fontified t)) . -525) (undo-tree-id1890 . -1) 526) nil (26050 5248 816055 90000) 0 nil])
([nil nil ((535 . 536)) nil (26050 5248 816051 611000) 0 nil])
([nil nil ((536 . 541)) nil (26050 5248 816050 834000) 0 nil])
([nil nil ((541 . 549)) nil (26050 5248 816049 954000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -547) (undo-tree-id1888 . -1) (#("e" 0 1 (fontified t)) . -548) (undo-tree-id1889 . -1) 549) nil (26050 5248 816048 537000) 0 nil])
([nil nil ((547 . 557)) nil (26050 5248 816044 800000) 0 nil])
([nil nil ((557 . 562)) nil (26050 5248 816043 818000) 0 nil])
([nil nil ((#("D" 0 1 (face font-lock-type-face fontified t)) . -561) (undo-tree-id1887 . -1) 562) nil (26050 5248 816042 971000) 0 nil])
([nil nil ((561 . 567)) nil (26050 5248 816041 547000) 0 nil])
([nil nil ((#("u" 0 1 (face font-lock-type-face fontified t)) . -566) (undo-tree-id1886 . -1) 567) nil (26050 5248 816040 744000) 0 nil])
([nil nil ((566 . 567)) nil (26050 5248 816039 267000) 0 nil])
([nil nil ((#("I" 0 1 (face font-lock-type-face fontified t)) . -566) (undo-tree-id1885 . -1) 567) nil (26050 5248 816038 443000) 0 nil])
([nil nil ((566 . 571)) nil (26050 5248 816036 913000) 0 nil])
([nil nil ((571 . 572)) nil (26050 5248 816036 173000) 0 nil])
([nil nil ((561 . 583) (#("DebugUtilsM" 0 11 (fontified nil)) . 561) (561 . 572) (#("DebugUtilsMessengerEXT" 0 22 (fontified nil)) . -561) (561 . 583) (#("DebugUtilsM" 0 11 (face font-lock-type-face fontified t)) . -561) (undo-tree-id1877 . -11) (undo-tree-id1878 . -10) (undo-tree-id1879 . -10) (undo-tree-id1880 . -10) (undo-tree-id1881 . -11) (undo-tree-id1882 . -11) (undo-tree-id1883 . -11) (undo-tree-id1884 . -11) 572) nil (26050 5248 816033 396000) 0 nil])
([nil nil ((583 . 584)) nil (26050 5248 816012 328000) 0 nil])
([nil nil ((nil rear-nonsticky nil 996 . 997) (nil fontified nil 896 . 997) (896 . 997) (t 26050 5248 833470 753000)) nil (26050 5273 649318 693000) 0 nil])
([nil nil ((#("       " 0 7 (fontified t)) . -897) 920) nil (26050 5273 649317 638000) 0 nil])
([nil nil ((1079 . 1092)) nil (26050 5273 649316 924000) 0 nil])
([nil nil ((1092 . 1093)) nil (26050 5273 649316 300000) 0 nil])
([nil nil ((1092 . 1103) (#("d" 0 1 (fontified nil)) . 1092) (1092 . 1093) (#("debug_utils" 0 11 (fontified nil)) . -1092) (1092 . 1103) (#("d" 0 1 (fontified t)) . -1092) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) 1093) nil (26050 5273 649314 794000) 0 nil])
([nil nil ((#("loader" 0 6 (fontified t)) . -914) (undo-tree-id1914 . -6) (undo-tree-id1915 . -6) (undo-tree-id1916 . -6) (undo-tree-id1917 . -6) (undo-tree-id1918 . -6) (undo-tree-id1919 . -6) (undo-tree-id1920 . -6) (undo-tree-id1921 . -6) 920) nil (26050 5273 649310 310000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -913) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) 914) nil (26050 5273 649304 660000) 0 nil])
([nil nil ((1096 . 1097)) nil (26050 5273 649297 771000) 0 nil])
([nil nil ((1097 . 1110)) nil (26050 5273 649297 183000) 0 nil])
([nil nil ((1110 . 1111)) nil (26050 5273 649296 558000) 0 nil])
([nil nil ((1110 . 1124) (#("d" 0 1 (fontified nil)) . 1110) (1110 . 1111) (#("debug_messager" 0 14 (fontified nil)) . -1110) (1110 . 1124) (#("d" 0 1 (fontified t)) . -1110) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) 1111) nil (26050 5273 649294 279000) 0 nil])
([nil nil ((1124 . 1125)) nil (26050 5273 649281 98000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -923) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) 924 (t 26050 5273 666805 610000)) nil (26050 5293 441842 482000) 0 nil])
([nil nil ((2252 . 2260) (#("        " 0 8 (fontified nil)) . 2251) (2251 . 2259) (2251 . 2252) (t 26050 5293 490140 155000)) nil (26050 5329 780398 87000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2433 . 2434) (nil fontified nil 2260 . 2434) (2260 . 2434)) nil (26050 5337 685901 994000) 0 nil] [nil nil ((nil rear-nonsticky nil 6015 . 6016) (nil fontified nil 2260 . 6016) (2260 . 6016)) ((#("use vulkan_tutorial_rust::{utility, utility::constants::*, utility::debug::ValidationInfo};

use ash::version::EntryV1_0;
use ash::version::InstanceV1_0;
use ash::vk;
use std::ffi::{CStr, CString};
use std::os::raw::c_void;
use std::ptr;

use winit::event::{Event, VirtualKeyCode, ElementState, KeyboardInput, WindowEvent};
use winit::event_loop::{EventLoop, ControlFlow};
use winit::window::{Window, WindowBuilder};

// Constants
const WINDOW_TITLE: &'static str = \"02.Validation Layers\";
const VALIDATION: ValidationInfo = ValidationInfo {
    is_enable: true,
    required_validation_layers: [\"VK_LAYER_KHRONOS_validation\"],
};

/// the callback function used in Debug Utils.
unsafe extern \"system\" fn vulkan_debug_utils_callback(
    message_severity: vk::DebugUtilsMessageSeverityFlagsEXT,
    message_type: vk::DebugUtilsMessageTypeFlagsEXT,
    p_callback_data: *const vk::DebugUtilsMessengerCallbackDataEXT,
    _p_user_data: *mut c_void,
) -> vk::Bool32 {
    let severity = match message_severity {
        vk::DebugUtilsMessageSeverityFlagsEXT::VERBOSE => \"[Verbose]\",
        vk::DebugUtilsMessageSeverityFlagsEXT::WARNING => \"[Warning]\",
        vk::DebugUtilsMessageSeverityFlagsEXT::ERROR => \"[Error]\",
        vk::DebugUtilsMessageSeverityFlagsEXT::INFO => \"[Info]\",
        _ => \"[Unknown]\",
    };
    let types = match message_type {
        vk::DebugUtilsMessageTypeFlagsEXT::GENERAL => \"[General]\",
        vk::DebugUtilsMessageTypeFlagsEXT::PERFORMANCE => \"[Performance]\",
        vk::DebugUtilsMessageTypeFlagsEXT::VALIDATION => \"[Validation]\",
        _ => \"[Unknown]\",
    };
    let message = CStr::from_ptr((*p_callback_data).p_message);
    println!(\"[Debug]{}{}{:?}\", severity, types, message);

    vk::FALSE
}

struct VulkanApp {

    _entry: ash::Entry,
    instance: ash::Instance,
    debug_utils_loader: ash::extensions::ext::DebugUtils,
    debug_merssager: vk::DebugUtilsMessengerEXT,
}

impl VulkanApp {
    pub fn new() -> VulkanApp {

        // init vulkan stuff
        let entry = ash::Entry::new().unwrap();
        let instance = VulkanApp::create_instance(&entry);
        let (debug_utils_loader, debug_merssager) = VulkanApp::setup_debug_utils(&entry, &instance);

        // cleanup(); the 'drop' function will take care of it.
        VulkanApp {

            _entry: entry,
            instance,
            debug_utils_loader,
            debug_merssager,
        }
    }

    fn init_window(event_loop: &EventLoop<()>) -> Window {
        WindowBuilder::new()
            .with_title(WINDOW_TITLE)
            .with_inner_size(winit::dpi::LogicalSize::new(WINDOW_WIDTH, WINDOW_HEIGHT))
            .build(event_loop)
            .expect(\"Failed to create window.\")
    }

    fn create_instance(entry: &ash::Entry) -> ash::Instance {
        if VALIDATION.is_enable && VulkanApp::check_validation_layer_support(entry) == false {
            panic!(\"Validation layers requested, but not available!\");
        }

        let app_name = CString::new(WINDOW_TITLE).unwrap();
        let engine_name = CString::new(\"Vulkan Engine\").unwrap();
        let app_info = vk::ApplicationInfo {
            p_application_name: app_name.as_ptr(),
            s_type: vk::StructureType::APPLICATION_INFO,
            p_next: ptr::null(),
            application_version: APPLICATION_VERSION,
            p_engine_name: engine_name.as_ptr(),
            engine_version: ENGINE_VERSION,
            api_version: API_VERSION, // set api_version to vk_make_version!(2, 0, 92) to test if the p_next field in vk::InstanceCreateInfo works.
        };

        // This create info used to debug issues in vk::createInstance and vk::destroyInstance.
        let debug_utils_create_info = populate_debug_messenger_create_info();" 0 3 (face font-lock-keyword-face fontified nil) 3 4 (fontified nil) 4 24 (face font-lock-constant-face fontified nil) 24 26 (fontified nil) 26 27 (face (rainbow-delimiters-depth-3-face) fontified nil) 27 36 (fontified nil) 36 43 (face font-lock-constant-face fontified nil) 43 45 (fontified nil) 45 54 (face font-lock-constant-face fontified nil) 54 59 (fontified nil) 59 66 (face font-lock-constant-face fontified nil) 66 68 (fontified nil) 68 73 (face font-lock-constant-face fontified nil) 73 75 (fontified nil) 75 89 (face font-lock-type-face fontified nil) 89 90 (face (rainbow-delimiters-depth-3-face) fontified nil) 90 93 (fontified nil) 93 96 (face font-lock-keyword-face fontified nil) 96 97 (fontified nil) 97 100 (face font-lock-constant-face fontified nil) 100 102 (fontified nil) 102 109 (face font-lock-constant-face fontified nil) 109 111 (fontified nil) 111 120 (face font-lock-type-face fontified nil) 120 122 (fontified nil) 122 125 (face font-lock-keyword-face fontified nil) 125 126 (fontified nil) 126 129 (face font-lock-constant-face fontified nil) 129 131 (fontified nil) 131 138 (face font-lock-constant-face fontified nil) 138 140 (fontified nil) 140 152 (face font-lock-type-face fontified nil) 152 154 (fontified nil) 154 157 (face font-lock-keyword-face fontified nil) 157 158 (fontified nil) 158 161 (face font-lock-constant-face fontified nil) 161 167 (fontified nil) 167 170 (face font-lock-keyword-face fontified nil) 170 171 (fontified nil) 171 174 (face font-lock-constant-face fontified nil) 174 176 (fontified nil) 176 179 (face font-lock-constant-face fontified nil) 179 181 (fontified nil) 181 182 (face (rainbow-delimiters-depth-3-face) fontified nil) 182 186 (face font-lock-type-face fontified nil) 186 188 (fontified nil) 188 195 (face font-lock-type-face fontified nil) 195 196 (face (rainbow-delimiters-depth-3-face) fontified nil) 196 198 (fontified nil) 198 201 (face font-lock-keyword-face fontified nil) 201 202 (fontified nil) 202 205 (face font-lock-constant-face fontified nil) 205 207 (fontified nil) 207 209 (face font-lock-constant-face fontified nil) 209 211 (fontified nil) 211 214 (face font-lock-constant-face fontified nil) 214 224 (fontified nil) 224 227 (face font-lock-keyword-face fontified nil) 227 228 (fontified nil) 228 231 (face font-lock-constant-face fontified nil) 231 239 (fontified nil) 239 242 (face font-lock-keyword-face fontified nil) 242 243 (fontified nil) 243 248 (face font-lock-constant-face fontified nil) 248 250 (fontified nil) 250 255 (face font-lock-constant-face fontified nil) 255 257 (fontified nil) 257 258 (face (rainbow-delimiters-depth-3-face) fontified nil) 258 263 (face font-lock-type-face fontified nil) 263 265 (fontified nil) 265 279 (face font-lock-type-face fontified nil) 279 281 (fontified nil) 281 293 (face font-lock-type-face fontified nil) 293 295 (fontified nil) 295 308 (face font-lock-type-face fontified nil) 308 310 (fontified nil) 310 321 (face font-lock-type-face fontified nil) 321 322 (face (rainbow-delimiters-depth-3-face) fontified nil) 322 324 (fontified nil) 324 327 (face font-lock-keyword-face fontified nil) 327 328 (fontified nil) 328 333 (face font-lock-constant-face fontified nil) 333 335 (fontified nil) 335 345 (face font-lock-constant-face fontified nil) 345 347 (fontified nil) 347 348 (face (rainbow-delimiters-depth-3-face) fontified nil) 348 357 (face font-lock-type-face fontified nil) 357 359 (fontified nil) 359 370 (face font-lock-type-face fontified nil) 370 371 (face (rainbow-delimiters-depth-3-face) fontified nil) 371 373 (fontified nil) 373 376 (face font-lock-keyword-face fontified nil) 376 377 (fontified nil) 377 382 (face font-lock-constant-face fontified nil) 382 384 (fontified nil) 384 390 (face font-lock-constant-face fontified nil) 390 392 (fontified nil) 392 393 (face (rainbow-delimiters-depth-3-face) fontified nil) 393 399 (face font-lock-type-face fontified nil) 399 401 (fontified nil) 401 414 (face font-lock-type-face fontified nil) 414 415 (face (rainbow-delimiters-depth-3-face) fontified nil) 415 418 (fontified nil) 418 421 (face font-lock-comment-delimiter-face fontified nil) 421 431 (face font-lock-comment-face fontified nil) 431 436 (face font-lock-keyword-face fontified nil) 436 437 (fontified nil) 437 449 (face font-lock-variable-name-face fontified nil) 449 451 (fontified nil) 451 452 (face rust-ampersand-face fontified nil) 452 453 (fontified nil) 453 459 (face font-lock-keyword-face fontified nil) 459 460 (fontified nil) 460 463 (face font-lock-type-face fontified nil) 463 466 (fontified nil) 466 488 (face font-lock-string-face fontified nil) 488 490 (fontified nil) 490 495 (face font-lock-keyword-face fontified nil) 495 496 (fontified nil) 496 506 (face font-lock-variable-name-face fontified nil) 506 508 (fontified nil) 508 522 (face font-lock-type-face fontified nil) 522 525 (fontified nil) 525 539 (face font-lock-type-face fontified nil) 539 540 (fontified nil) 540 541 (face (rainbow-delimiters-depth-3-face) fontified nil) 541 546 (fontified nil) 546 555 (face font-lock-variable-name-face fontified nil) 555 557 (fontified nil) 557 561 (face font-lock-keyword-face fontified nil) 561 567 (fontified nil) 567 593 (face font-lock-variable-name-face fontified nil) 593 595 (fontified nil) 595 596 (face (rainbow-delimiters-depth-4-face) fontified nil) 596 625 (face font-lock-string-face fontified nil) 625 626 (face (rainbow-delimiters-depth-4-face) fontified nil) 626 628 (fontified nil) 628 629 (face (rainbow-delimiters-depth-3-face) fontified nil) 629 632 (fontified nil) 632 679 (face font-lock-doc-face fontified nil) 679 685 (face rust-unsafe fontified nil) 685 686 (fontified nil) 686 692 (face font-lock-keyword-face fontified nil) 692 693 (fontified nil) 693 701 (face font-lock-string-face fontified nil) 701 702 (fontified nil) 702 704 (face font-lock-keyword-face fontified nil) 704 705 (fontified nil) 705 732 (face font-lock-function-name-face fontified nil) 732 733 (face (rainbow-delimiters-depth-3-face) fontified nil) 733 738 (fontified nil) 738 754 (face font-lock-variable-name-face fontified nil) 754 756 (fontified nil) 756 758 (face font-lock-constant-face fontified nil) 758 760 (fontified nil) 760 793 (face font-lock-type-face fontified nil) 793 799 (fontified nil) 799 811 (face font-lock-variable-name-face fontified nil) 811 813 (fontified nil) 813 815 (face font-lock-constant-face fontified nil) 815 817 (fontified nil) 817 846 (face font-lock-type-face fontified nil) 846 852 (fontified nil) 852 867 (face font-lock-variable-name-face fontified nil) 867 870 (fontified nil) 870 875 (face font-lock-keyword-face fontified nil) 875 876 (fontified nil) 876 878 (face font-lock-constant-face fontified nil) 878 880 (fontified nil) 880 914 (face font-lock-type-face fontified nil) 914 920 (fontified nil) 920 932 (face font-lock-variable-name-face fontified nil) 932 935 (fontified nil) 935 938 (face font-lock-keyword-face fontified nil) 938 947 (fontified nil) 947 948 (face (rainbow-delimiters-depth-3-face) fontified nil) 948 950 (fontified nil) 950 951 (syntax-table (1) fontified nil) 951 952 (fontified nil) 952 954 (face font-lock-constant-face fontified nil) 954 956 (fontified nil) 956 962 (face font-lock-type-face fontified nil) 962 963 (fontified nil) 963 964 (face (rainbow-delimiters-depth-3-face) fontified nil) 964 969 (fontified nil) 969 972 (face font-lock-keyword-face fontified nil) 972 973 (fontified nil) 973 981 (face font-lock-variable-name-face fontified nil) 981 984 (fontified nil) 984 989 (face font-lock-keyword-face fontified nil) 989 1007 (fontified nil) 1007 1008 (face (rainbow-delimiters-depth-4-face) fontified nil) 1008 1017 (fontified nil) 1017 1019 (face font-lock-constant-face fontified nil) 1019 1021 (fontified nil) 1021 1054 (face font-lock-type-face fontified nil) 1054 1056 (fontified nil) 1056 1063 (face font-lock-type-face fontified nil) 1063 1065 (fontified nil) 1065 1066 (syntax-table (1) fontified nil) 1066 1067 (fontified nil) 1067 1078 (face font-lock-string-face fontified nil) 1078 1088 (fontified nil) 1088 1090 (face font-lock-constant-face fontified nil) 1090 1092 (fontified nil) 1092 1125 (face font-lock-type-face fontified nil) 1125 1127 (fontified nil) 1127 1134 (face font-lock-type-face fontified nil) 1134 1136 (fontified nil) 1136 1137 (syntax-table (1) fontified nil) 1137 1138 (fontified nil) 1138 1149 (face font-lock-string-face fontified nil) 1149 1159 (fontified nil) 1159 1161 (face font-lock-constant-face fontified nil) 1161 1163 (fontified nil) 1163 1196 (face font-lock-type-face fontified nil) 1196 1198 (fontified nil) 1198 1203 (face font-lock-type-face fontified nil) 1203 1205 (fontified nil) 1205 1206 (syntax-table (1) fontified nil) 1206 1207 (fontified nil) 1207 1216 (face font-lock-string-face fontified nil) 1216 1226 (fontified nil) 1226 1228 (face font-lock-constant-face fontified nil) 1228 1230 (fontified nil) 1230 1263 (face font-lock-type-face fontified nil) 1263 1265 (fontified nil) 1265 1269 (face font-lock-type-face fontified nil) 1269 1271 (fontified nil) 1271 1272 (syntax-table (1) fontified nil) 1272 1273 (fontified nil) 1273 1281 (face font-lock-string-face fontified nil) 1281 1294 (fontified nil) 1294 1295 (syntax-table (1) fontified nil) 1295 1296 (fontified nil) 1296 1307 (face font-lock-string-face fontified nil) 1307 1313 (fontified nil) 1313 1314 (face (rainbow-delimiters-depth-4-face) fontified nil) 1314 1320 (fontified nil) 1320 1323 (face font-lock-keyword-face fontified nil) 1323 1324 (fontified nil) 1324 1329 (face font-lock-variable-name-face fontified nil) 1329 1332 (fontified nil) 1332 1337 (face font-lock-keyword-face fontified nil) 1337 1351 (fontified nil) 1351 1352 (face (rainbow-delimiters-depth-4-face) fontified nil) 1352 1361 (fontified nil) 1361 1363 (face font-lock-constant-face fontified nil) 1363 1365 (fontified nil) 1365 1394 (face font-lock-type-face fontified nil) 1394 1396 (fontified nil) 1396 1403 (face font-lock-type-face fontified nil) 1403 1405 (fontified nil) 1405 1406 (syntax-table (1) fontified nil) 1406 1407 (fontified nil) 1407 1418 (face font-lock-string-face fontified nil) 1418 1428 (fontified nil) 1428 1430 (face font-lock-constant-face fontified nil) 1430 1432 (fontified nil) 1432 1461 (face font-lock-type-face fontified nil) 1461 1463 (fontified nil) 1463 1474 (face font-lock-type-face fontified nil) 1474 1476 (fontified nil) 1476 1477 (syntax-table (1) fontified nil) 1477 1478 (fontified nil) 1478 1492 (face font-lock-string-face fontified nil) 1492 1493 (face font-lock-string-face fontified nil) 1493 1495 (fontified nil) 1495 1550 (fontified nil) 1550 1551 (fontified nil syntax-table (1)) 1551 1579 (fontified nil) 1579 1580 (fontified nil syntax-table (1)) 1580 1960 (fontified nil) 1960 1961 (fontified nil syntax-table (1)) 1961 2473 (fontified nil) 2473 2474 (fontified nil syntax-table (1)) 2474 2769 (fontified nil) 2769 2770 (fontified nil syntax-table (1)) 2770 2882 (fontified nil) 2882 2894 (fontified nil) 2894 2900 (face font-lock-preprocessor-face fontified nil) 2900 2901 (face (rainbow-delimiters-depth-6-face) fontified nil) 2901 2950 (face font-lock-string-face fontified nil) 2950 2951 (face (rainbow-delimiters-depth-6-face) fontified nil) 2951 2961 (fontified nil) 2961 2962 (face (rainbow-delimiters-depth-5-face) fontified nil) 2962 2972 (fontified nil) 2972 2975 (face font-lock-keyword-face fontified nil) 2975 2976 (fontified nil) 2976 2984 (face font-lock-variable-name-face fontified nil) 2984 2987 (fontified nil) 2987 2994 (face font-lock-type-face fontified nil) 2994 2999 (fontified nil) 2999 3000 (face (rainbow-delimiters-depth-5-face) fontified nil) 3000 3012 (face font-lock-type-face fontified nil) 3012 3013 (face (rainbow-delimiters-depth-5-face) fontified nil) 3013 3020 (fontified nil) 3020 3021 (face (rainbow-delimiters-depth-5-face) fontified nil) 3021 3022 (face (rainbow-delimiters-depth-5-face) fontified nil) 3022 3032 (fontified nil) 3032 3035 (face font-lock-keyword-face fontified nil) 3035 3036 (fontified nil) 3036 3047 (face font-lock-variable-name-face fontified nil) 3047 3050 (fontified nil) 3050 3057 (face font-lock-type-face fontified nil) 3057 3062 (fontified nil) 3062 3063 (face (rainbow-delimiters-depth-5-face) fontified nil) 3063 3078 (face font-lock-string-face fontified nil) 3078 3079 (face (rainbow-delimiters-depth-5-face) fontified nil) 3079 3086 (fontified nil) 3086 3087 (face (rainbow-delimiters-depth-5-face) fontified nil) 3087 3088 (face (rainbow-delimiters-depth-5-face) fontified nil) 3088 3098 (fontified nil) 3098 3101 (face font-lock-keyword-face fontified nil) 3101 3102 (fontified nil) 3102 3110 (face font-lock-variable-name-face fontified nil) 3110 3113 (fontified nil) 3113 3115 (face font-lock-constant-face fontified nil) 3115 3117 (fontified nil) 3117 3132 (face font-lock-type-face fontified nil) 3132 3133 (fontified nil) 3133 3134 (face (rainbow-delimiters-depth-5-face) fontified nil) 3134 3147 (fontified nil) 3147 3165 (face font-lock-variable-name-face fontified nil) 3165 3182 (fontified nil) 3182 3183 (face (rainbow-delimiters-depth-6-face) fontified nil) 3183 3184 (face (rainbow-delimiters-depth-6-face) fontified nil) 3184 3198 (fontified nil) 3198 3204 (face font-lock-variable-name-face fontified nil) 3204 3206 (fontified nil) 3206 3208 (face font-lock-constant-face fontified nil) 3208 3210 (fontified nil) 3210 3223 (face font-lock-type-face fontified nil) 3223 3225 (fontified nil) 3225 3241 (face font-lock-type-face fontified nil) 3241 3255 (fontified nil) 3255 3261 (face font-lock-variable-name-face fontified nil) 3261 3263 (fontified nil) 3263 3266 (face font-lock-constant-face fontified nil) 3266 3272 (fontified nil) 3272 3273 (face (rainbow-delimiters-depth-6-face) fontified nil) 3273 3274 (face (rainbow-delimiters-depth-6-face) fontified nil) 3274 3288 (fontified nil) 3288 3307 (face font-lock-variable-name-face fontified nil) 3307 3309 (fontified nil) 3309 3328 (face font-lock-type-face fontified nil) 3328 3342 (fontified nil) 3342 3355 (face font-lock-variable-name-face fontified nil) 3355 3375 (fontified nil) 3375 3376 (face (rainbow-delimiters-depth-6-face) fontified nil) 3376 3377 (face (rainbow-delimiters-depth-6-face) fontified nil) 3377 3391 (fontified nil) 3391 3405 (face font-lock-variable-name-face fontified nil) 3405 3407 (fontified nil) 3407 3421 (face font-lock-type-face fontified nil) 3421 3435 (fontified nil) 3435 3446 (face font-lock-variable-name-face fontified nil) 3446 3448 (fontified nil) 3448 3459 (face font-lock-type-face fontified nil) 3459 3461 (fontified nil) 3461 3464 (face font-lock-comment-delimiter-face fontified nil) 3464 3571 (face font-lock-comment-face fontified nil) 3571 3579 (fontified nil) 3579 3580 (face (rainbow-delimiters-depth-5-face) fontified nil) 3580 3591 (fontified nil) 3591 3594 (face font-lock-comment-delimiter-face fontified nil) 3594 3679 (face font-lock-comment-face fontified nil) 3679 3687 (fontified nil) 3687 3690 (face font-lock-keyword-face fontified nil) 3690 3691 (fontified nil) 3691 3714 (face font-lock-variable-name-face fontified nil) 3714 3753 (fontified nil) 3753 3754 (face (rainbow-delimiters-depth-5-face) fontified nil) 3754 3755 (face (rainbow-delimiters-depth-5-face) fontified nil) 3755 3756 (fontified nil rear-nonsticky nil)) . 2260) (undo-tree-id1943 . -3570) (undo-tree-id1944 . -2882) (undo-tree-id1945 . -3581) (undo-tree-id1946 . -3756) (undo-tree-id1947 . -3756) (undo-tree-id1948 . -3756) (undo-tree-id1949 . -3756) (undo-tree-id1950 . -3756) (undo-tree-id1951 . -3756) (undo-tree-id1952 . -3756) (undo-tree-id1953 . -3591) (undo-tree-id1954 . -3591) (undo-tree-id1955 . -3591) (undo-tree-id1956 . -3591) (undo-tree-id1957 . -3570) (undo-tree-id1958 . -3570) (undo-tree-id1959 . -3570) (undo-tree-id1960 . -3491) (undo-tree-id1961 . -3570) (undo-tree-id1962 . -3491) (undo-tree-id1963 . -3491) (undo-tree-id1964 . -3581) (undo-tree-id1965 . -3581) (undo-tree-id1966 . -3581) (undo-tree-id1967 . -3581) (undo-tree-id1968 . -3581) (undo-tree-id1969 . -3581) (undo-tree-id1970 . -3581) (undo-tree-id1971 . -3581) (undo-tree-id1972 . -3581) (undo-tree-id1973 . -3581) (undo-tree-id1974 . -3581) (undo-tree-id1975 . -3581) (undo-tree-id1976 . -3581) (undo-tree-id1977 . -3581) (undo-tree-id1978 . -3679) (undo-tree-id1979 . -3756) (undo-tree-id1980 . -3756) (undo-tree-id1981 . -3756) (undo-tree-id1982 . -3756) (undo-tree-id1983 . -3756) (undo-tree-id1984 . -3756) (undo-tree-id1985 . -3756) (nil fontified t 5854 . 5939) (nil fontified t 5851 . 5854) (nil fontified t 5840 . 5851) (nil fontified t 5839 . 5840) (nil fontified t 5831 . 5839) (nil fontified t 5724 . 5831) (nil fontified t 5721 . 5724) (nil fontified t 5719 . 5721) (nil fontified t 5708 . 5719) (nil fontified t 5706 . 5708) (nil fontified t 5695 . 5706) (nil fontified t 5681 . 5695) (nil fontified t 5667 . 5681) (nil fontified t 5665 . 5667) (nil fontified t 5651 . 5665) (nil fontified t 5637 . 5651) (nil fontified t 5636 . 5637) (nil fontified t 5635 . 5636) (nil fontified t 5615 . 5635) (nil fontified t 5602 . 5615) (nil fontified t 5588 . 5602) (nil fontified t 5569 . 5588) (nil fontified t 5567 . 5569) (nil fontified t 5548 . 5567) (nil fontified t 5534 . 5548) (nil fontified t 5533 . 5534) (nil fontified t 5532 . 5533) (nil fontified t 5526 . 5532) (nil fontified t 5523 . 5526) (nil fontified t 5521 . 5523) (nil fontified t 5515 . 5521) (nil fontified t 5501 . 5515) (nil fontified t 5485 . 5501) (nil fontified t 5483 . 5485) (nil fontified t 5470 . 5483) (nil fontified t 5468 . 5470) (nil fontified t 5466 . 5468) (nil fontified t 5464 . 5466) (nil fontified t 5458 . 5464) (nil fontified t 5444 . 5458) (nil fontified t 5443 . 5444) (nil fontified t 5442 . 5443) (nil fontified t 5425 . 5442) (nil fontified t 5407 . 5425) (nil fontified t 5394 . 5407) (nil fontified t 5393 . 5394) (nil fontified t 5392 . 5393) (nil fontified t 5377 . 5392) (nil fontified t 5375 . 5377) (nil fontified t 5373 . 5375) (nil fontified t 5370 . 5373) (nil fontified t 5362 . 5370) (nil fontified t 5361 . 5362) (nil fontified t 5358 . 5361) (nil fontified t 5348 . 5358) (nil fontified t 5347 . 5348) (nil fontified t 5346 . 5347) (nil fontified t 5339 . 5346) (nil fontified t 5338 . 5339) (nil fontified t 5323 . 5338) (nil fontified t 5322 . 5323) (nil fontified t 5317 . 5322) (nil fontified t 5310 . 5317) (nil fontified t 5307 . 5310) (nil fontified t 5296 . 5307) (nil fontified t 5295 . 5296) (nil fontified t 5292 . 5295) (nil fontified t 5282 . 5292) (nil fontified t 5281 . 5282) (nil fontified t 5280 . 5281) (nil fontified t 5273 . 5280) (nil fontified t 5272 . 5273) (nil fontified t 5260 . 5272) (nil fontified t 5259 . 5260) (nil fontified t 5254 . 5259) (nil fontified t 5247 . 5254) (nil fontified t 5244 . 5247) (nil fontified t 5236 . 5244) (nil fontified t 5235 . 5236) (nil fontified t 5232 . 5235) (nil fontified t 5222 . 5232) (nil fontified t 5221 . 5222) (nil fontified t 5211 . 5221) (nil fontified t 5210 . 5211) (nil fontified t 5161 . 5210) (nil fontified t 5160 . 5161) (nil fontified t 5154 . 5160) (nil fontified t 5142 . 5154) (nil fontified nil 5030 . 5142) (nil fontified nil 5029 . 5030) (nil fontified nil 4734 . 5029) (nil fontified nil 4733 . 4734) (nil fontified nil 4221 . 4733) (nil fontified nil 4220 . 4221) (nil fontified nil 3840 . 4220) (nil fontified nil 3839 . 3840) (nil fontified nil 3811 . 3839) (nil fontified nil 3810 . 3811) (nil fontified nil 3755 . 3810) (nil fontified t 3753 . 3755) (nil fontified t 3752 . 3753) (nil fontified t 3738 . 3752) (nil fontified t 3737 . 3738) (nil fontified t 3736 . 3737) (nil fontified t 3734 . 3736) (nil fontified t 3723 . 3734) (nil fontified t 3721 . 3723) (nil fontified t 3692 . 3721) (nil fontified t 3690 . 3692) (nil fontified t 3688 . 3690) (nil fontified t 3678 . 3688) (nil fontified t 3667 . 3678) (nil fontified t 3666 . 3667) (nil fontified t 3665 . 3666) (nil fontified t 3663 . 3665) (nil fontified t 3656 . 3663) (nil fontified t 3654 . 3656) (nil fontified t 3625 . 3654) (nil fontified t 3623 . 3625) (nil fontified t 3621 . 3623) (nil fontified t 3612 . 3621) (nil fontified t 3611 . 3612) (nil fontified t 3597 . 3611) (nil fontified t 3592 . 3597) (nil fontified t 3589 . 3592) (nil fontified t 3584 . 3589) (nil fontified t 3583 . 3584) (nil fontified t 3580 . 3583) (nil fontified t 3574 . 3580) (nil fontified t 3573 . 3574) (nil fontified t 3567 . 3573) (nil fontified t 3556 . 3567) (nil fontified t 3555 . 3556) (nil fontified t 3554 . 3555) (nil fontified t 3541 . 3554) (nil fontified t 3533 . 3541) (nil fontified t 3532 . 3533) (nil fontified t 3531 . 3532) (nil fontified t 3529 . 3531) (nil fontified t 3525 . 3529) (nil fontified t 3523 . 3525) (nil fontified t 3490 . 3523) (nil fontified t 3488 . 3490) (nil fontified t 3486 . 3488) (nil fontified t 3476 . 3486) (nil fontified t 3467 . 3476) (nil fontified t 3466 . 3467) (nil fontified t 3465 . 3466) (nil fontified t 3463 . 3465) (nil fontified t 3458 . 3463) (nil fontified t 3456 . 3458) (nil fontified t 3423 . 3456) (nil fontified t 3421 . 3423) (nil fontified t 3419 . 3421) (nil fontified t 3409 . 3419) (nil fontified t 3398 . 3409) (nil fontified t 3397 . 3398) (nil fontified t 3396 . 3397) (nil fontified t 3394 . 3396) (nil fontified t 3387 . 3394) (nil fontified t 3385 . 3387) (nil fontified t 3352 . 3385) (nil fontified t 3350 . 3352) (nil fontified t 3348 . 3350) (nil fontified t 3338 . 3348) (nil fontified t 3327 . 3338) (nil fontified t 3326 . 3327) (nil fontified t 3325 . 3326) (nil fontified t 3323 . 3325) (nil fontified t 3316 . 3323) (nil fontified t 3314 . 3316) (nil fontified t 3281 . 3314) (nil fontified t 3279 . 3281) (nil fontified t 3277 . 3279) (nil fontified t 3268 . 3277) (nil fontified t 3267 . 3268) (nil fontified t 3249 . 3267) (nil fontified t 3244 . 3249) (nil fontified t 3241 . 3244) (nil fontified t 3233 . 3241) (nil fontified t 3232 . 3233) (nil fontified t 3229 . 3232) (nil fontified t 3224 . 3229) (nil fontified t 3223 . 3224) (nil fontified t 3222 . 3223) (nil fontified t 3216 . 3222) (nil fontified t 3214 . 3216) (nil fontified t 3212 . 3214) (nil fontified t 3211 . 3212) (nil fontified t 3210 . 3211) (nil fontified t 3208 . 3210) (nil fontified t 3207 . 3208) (nil fontified t 3198 . 3207) (nil fontified t 3195 . 3198) (nil fontified t 3192 . 3195) (nil fontified t 3180 . 3192) (nil fontified t 3174 . 3180) (nil fontified t 3140 . 3174) (nil fontified t 3138 . 3140) (nil fontified t 3136 . 3138) (nil fontified t 3135 . 3136) (nil fontified t 3130 . 3135) (nil fontified t 3127 . 3130) (nil fontified t 3112 . 3127) (nil fontified t 3106 . 3112) (nil fontified t 3077 . 3106) (nil fontified t 3075 . 3077) (nil fontified t 3073 . 3075) (nil fontified t 3071 . 3073) (nil fontified t 3059 . 3071) (nil fontified t 3053 . 3059) (nil fontified t 3020 . 3053) (nil fontified t 3018 . 3020) (nil fontified t 3016 . 3018) (nil fontified t 3014 . 3016) (nil fontified t 2998 . 3014) (nil fontified t 2993 . 2998) (nil fontified t 2992 . 2993) (nil fontified t 2965 . 2992) (nil fontified t 2964 . 2965) (nil fontified t 2962 . 2964) (nil fontified t 2961 . 2962) (nil fontified t 2953 . 2961) (nil fontified t 2952 . 2953) (nil fontified t 2946 . 2952) (nil fontified t 2945 . 2946) (nil fontified t 2939 . 2945) (nil fontified t 2892 . 2939) (nil fontified t 2889 . 2892) (nil fontified t 2888 . 2889) (nil fontified t 2886 . 2888) (nil fontified t 2885 . 2886) (nil fontified t 2856 . 2885) (nil fontified t 2855 . 2856) (nil fontified t 2853 . 2855) (nil fontified t 2827 . 2853) (nil fontified t 2821 . 2827) (nil fontified t 2817 . 2821) (nil fontified t 2815 . 2817) (nil fontified t 2806 . 2815) (nil fontified t 2801 . 2806) (nil fontified t 2800 . 2801) (nil fontified t 2799 . 2800) (nil fontified t 2785 . 2799) (nil fontified t 2782 . 2785) (nil fontified t 2768 . 2782) (nil fontified t 2766 . 2768) (nil fontified t 2756 . 2766) (nil fontified t 2755 . 2756) (nil fontified t 2750 . 2755) (nil fontified t 2748 . 2750) (nil fontified t 2726 . 2748) (nil fontified t 2723 . 2726) (nil fontified t 2720 . 2723) (nil fontified t 2719 . 2720) (nil fontified t 2713 . 2719) (nil fontified t 2712 . 2713) (nil fontified t 2711 . 2712) (nil fontified t 2709 . 2711) (nil fontified t 2697 . 2709) (nil fontified t 2696 . 2697) (nil fontified t 2691 . 2696) (nil fontified t 2681 . 2691) (nil fontified t 2678 . 2681) (nil fontified t 2675 . 2678) (nil fontified t 2674 . 2675) (nil fontified t 2661 . 2674) (nil fontified t 2659 . 2661) (nil fontified t 2653 . 2659) (nil fontified t 2652 . 2653) (nil fontified t 2650 . 2652) (nil fontified t 2644 . 2650) (nil fontified t 2642 . 2644) (nil fontified t 2637 . 2642) (nil fontified t 2636 . 2637) (nil fontified t 2633 . 2636) (nil fontified t 2631 . 2633) (nil fontified t 2630 . 2631) (nil fontified t 2619 . 2630) (nil fontified t 2617 . 2619) (nil fontified t 2608 . 2617) (nil fontified t 2607 . 2608) (nil fontified t 2605 . 2607) (nil fontified t 2595 . 2605) (nil fontified t 2593 . 2595) (nil fontified t 2588 . 2593) (nil fontified t 2587 . 2588) (nil fontified t 2584 . 2587) (nil fontified t 2582 . 2584) (nil fontified t 2581 . 2582) (nil fontified t 2570 . 2581) (nil fontified t 2568 . 2570) (nil fontified t 2555 . 2568) (nil fontified t 2553 . 2555) (nil fontified t 2541 . 2553) (nil fontified t 2539 . 2541) (nil fontified t 2525 . 2539) (nil fontified t 2523 . 2525) (nil fontified t 2518 . 2523) (nil fontified t 2517 . 2518) (nil fontified t 2515 . 2517) (nil fontified t 2510 . 2515) (nil fontified t 2508 . 2510) (nil fontified t 2503 . 2508) (nil fontified t 2502 . 2503) (nil fontified t 2499 . 2502) (nil fontified t 2491 . 2499) (nil fontified t 2488 . 2491) (nil fontified t 2487 . 2488) (nil fontified t 2484 . 2487) (nil fontified t 2474 . 2484) (nil fontified t 2471 . 2474) (nil fontified t 2469 . 2471) (nil fontified t 2467 . 2469) (nil fontified t 2465 . 2467) (nil fontified t 2462 . 2465) (nil fontified t 2461 . 2462) (nil fontified t 2458 . 2461) (nil fontified t 2456 . 2458) (nil fontified t 2455 . 2456) (nil fontified t 2448 . 2455) (nil fontified t 2446 . 2448) (nil fontified t 2442 . 2446) (nil fontified t 2441 . 2442) (nil fontified t 2439 . 2441) (nil fontified t 2436 . 2439) (nil fontified t 2434 . 2436) (nil fontified t 2431 . 2434) (nil fontified t 2430 . 2431) (nil fontified t 2427 . 2430) (nil fontified t 2421 . 2427) (nil fontified t 2418 . 2421) (nil fontified t 2417 . 2418) (nil fontified t 2414 . 2417) (nil fontified t 2412 . 2414) (nil fontified t 2400 . 2412) (nil fontified t 2398 . 2400) (nil fontified t 2391 . 2398) (nil fontified t 2389 . 2391) (nil fontified t 2386 . 2389) (nil fontified t 2385 . 2386) (nil fontified t 2382 . 2385) (nil fontified t 2380 . 2382) (nil fontified t 2371 . 2380) (nil fontified t 2369 . 2371) (nil fontified t 2362 . 2369) (nil fontified t 2360 . 2362) (nil fontified t 2357 . 2360) (nil fontified t 2356 . 2357) (nil fontified t 2353 . 2356) (nil fontified t 2350 . 2353) (nil fontified t 2349 . 2350) (nil fontified t 2335 . 2349) (nil fontified t 2333 . 2335) (nil fontified t 2328 . 2333) (nil fontified t 2326 . 2328) (nil fontified t 2319 . 2326) (nil fontified t 2314 . 2319) (nil fontified t 2305 . 2314) (nil fontified t 2303 . 2305) (nil fontified t 2296 . 2303) (nil fontified t 2287 . 2296) (nil fontified t 2286 . 2287) (nil fontified t 2284 . 2286) (nil fontified t 2264 . 2284) (nil fontified t 2263 . 2264) (nil fontified t 2260 . 2263) (nil rear-nonsticky t 6015 . 6016)) (26050 5328 770419 453000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -2260) 2281) nil (26050 5337 685897 81000) 0 nil])
([nil nil ((6016 . 6025)) ((#("
        " 0 9 (fontified t)) . 6016) (undo-tree-id1937 . -9) (undo-tree-id1938 . -9) (undo-tree-id1939 . -9) (undo-tree-id1940 . -9) (undo-tree-id1941 . -9) (undo-tree-id1942 . -9) (t 26050 5320 826808 468000)) (26050 5320 807045 198000) 0 nil])
([nil nil ((2386 . 2387) (t 26050 5337 703476 159000)) nil (26050 5348 572349 692000) 0 nil])
nil
([nil nil ((2386 . 2387)) nil (26050 5348 572348 839000) 0 nil])
([nil nil ((2387 . 2388)) nil (26050 5348 572348 108000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -2387) (undo-tree-id2008 . -1) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) 2388) nil (26050 5348 572346 964000) 0 nil])
([nil nil ((2387 . 2388)) nil (26050 5348 572343 964000) 0 nil])
([nil nil ((2386 . 2393) (#("ut" 0 2 (fontified nil)) . 2386) (2386 . 2388) (#("utility" 0 7 (fontified nil)) . -2386) (2386 . 2393) (#("ut" 0 2 (fontified t)) . -2386) (undo-tree-id1993 . -2) (undo-tree-id1994 . -1) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) (undo-tree-id1997 . -1) (undo-tree-id1998 . -1) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (undo-tree-id2005 . -1) (undo-tree-id2006 . -2) (undo-tree-id2007 . -2) 2388) nil (26050 5348 572342 152000) 0 nil])
([nil nil ((2393 . 2395)) nil (26050 5348 572330 62000) 0 nil])
([nil nil ((2395 . 2405) (#("validation" 0 10 (fontified nil)) . -2395) (2395 . 2405)) nil (26050 5348 572328 996000) 0 nil])
([nil nil ((2405 . 2407)) nil (26050 5348 572327 304000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2407) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) (undo-tree-id1988 . 1) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) 2408) nil (26050 5348 572323 538000) 0 nil])
([nil nil ((2527 . 2535) (#("        " 0 8 (fontified nil)) . 2526) (undo-tree-id2012 . -8) (undo-tree-id2013 . -8) (undo-tree-id2014 . -8) (2525 . 2535) (t 26050 5348 593476 819000)) nil (26050 5398 53462 208000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2936 . 2937) (nil fontified nil 2535 . 2937) (2535 . 2937)) nil (26050 5398 53457 693000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -2535) (undo-tree-id2011 . -1) 2532) nil (26050 5398 53453 275000) 0 nil])
([nil nil ((#("layers" 0 6 (fontified t)) . -2634) (undo-tree-id2084 . -6) (undo-tree-id2085 . -6) (undo-tree-id2086 . -6) (undo-tree-id2087 . -6) (undo-tree-id2088 . -6) (undo-tree-id2089 . -6) (undo-tree-id2090 . -6) 2640 (t 26050 5398 60146 481000)) nil (26050 5414 970115 870000) 0 nil])
([nil nil ((#("validation_" 0 11 (fontified t)) . -2623) (undo-tree-id2076 . -11) (undo-tree-id2077 . -11) (undo-tree-id2078 . -11) (undo-tree-id2079 . -11) (undo-tree-id2080 . -11) (undo-tree-id2081 . -11) (undo-tree-id2082 . -11) (undo-tree-id2083 . -11) 2634) nil (26050 5414 969862 224000) 0 nil])
([nil nil ((#("required_" 0 9 (fontified t)) . -2614) (undo-tree-id2067 . -9) (undo-tree-id2068 . -9) (undo-tree-id2069 . -9) (undo-tree-id2070 . -9) (undo-tree-id2071 . -9) (undo-tree-id2072 . -9) (undo-tree-id2073 . -9) (undo-tree-id2074 . -9) (undo-tree-id2075 . -9) 2623) nil (26050 5414 969856 504000) 0 nil])
([nil nil ((#("VALIDATION
            ." 0 10 (face font-lock-type-face fontified t) 10 11 (fontified t) 11 24 (fontified t)) . -2590) (undo-tree-id2042 . -10) (undo-tree-id2043 . -24) (undo-tree-id2044 . -10) (undo-tree-id2045 . -10) (undo-tree-id2046 . -10) (undo-tree-id2047 . -10) (undo-tree-id2048 . -10) (undo-tree-id2049 . -10) (undo-tree-id2050 . -10) (undo-tree-id2051 . -10) (undo-tree-id2052 . -10) (undo-tree-id2053 . -10) (undo-tree-id2054 . -10) (undo-tree-id2055 . -10) (undo-tree-id2056 . -24) (undo-tree-id2057 . -24) (undo-tree-id2058 . -24) (undo-tree-id2059 . -24) (undo-tree-id2060 . -24) (undo-tree-id2061 . -10) (undo-tree-id2062 . -24) (undo-tree-id2063 . -24) (undo-tree-id2064 . -24) (undo-tree-id2065 . -11) (undo-tree-id2066 . -24) 2614) nil (26050 5414 969849 709000) 0 nil])
([nil nil ((2590 . 2591)) nil (26050 5414 969834 30000) 0 nil])
([nil nil ((#("V" 0 1 (face font-lock-type-face fontified t)) . -2590) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) 2591) nil (26050 5414 969833 149000) 0 nil])
([nil nil ((2590 . 2592)) nil (26050 5414 969829 426000) 0 nil])
([nil nil ((2590 . 2597) (#("ut" 0 2 (fontified nil)) . 2590) (2590 . 2592) (#("utility" 0 7 (fontified nil)) . -2590) (2590 . 2597) (#("ut" 0 2 (fontified t)) . -2590) (undo-tree-id2027 . -2) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (undo-tree-id2032 . -2) (undo-tree-id2033 . -2) (undo-tree-id2034 . -2) (undo-tree-id2035 . -2) (undo-tree-id2036 . -2) 2592) nil (26050 5414 969828 260000) 0 nil])
([nil nil ((2597 . 2600)) nil (26050 5414 969820 579000) 0 nil])
([nil nil ((2599 . 2609) (#("v" 0 1 (fontified nil)) . 2599) (2599 . 2600) (#("validation" 0 10 (fontified nil)) . -2599) (2599 . 2609) (#("v" 0 1 (fontified t)) . -2599) (undo-tree-id2021 . -1) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) 2600) nil (26050 5414 969819 216000) 0 nil])
([nil nil ((2609 . 2612)) nil (26050 5414 969813 54000) 0 nil])
([nil nil ((2611 . 2627) (#("V" 0 1 (fontified nil)) . 2611) (2611 . 2612) (#("VALIDATIONLAYERS" 0 16 (fontified nil)) . -2611) (2611 . 2627) (#("V" 0 1 (face font-lock-type-face fontified t)) . -2611) (undo-tree-id2015 . -1) (undo-tree-id2016 . -1) (undo-tree-id2017 . -1) (undo-tree-id2018 . -1) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) 2612) nil (26050 5414 969809 7000) 0 nil])
([nil nil ((#("        let create_info = vk::InstanceCreateInfo {
            s_type: vk::StructureType::INSTANCE_CREATE_INFO,
            p_next: std::ptr::null(),
            flags: vk::InstanceCreateFlags::empty(),
            p_application_info: &app_info,
            pp_enabled_layer_names: std::ptr::null(),
            enabled_layer_count: 0,
            pp_enabled_extension_names: extension_names.as_ptr(),
            enabled_extension_count: extension_names.len() as u32,
        };" 0 6 (fontified t) 6 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 23 (face font-lock-variable-name-face fontified t) 23 26 (fontified t) 26 28 (face font-lock-constant-face fontified t) 28 30 (fontified t) 30 48 (face font-lock-type-face fontified t) 48 49 (fontified t) 49 50 (face (rainbow-delimiters-depth-3-face) fontified t) 50 51 (fontified t) 51 63 (fontified t) 63 69 (face font-lock-variable-name-face fontified t) 69 71 (fontified t) 71 73 (face font-lock-constant-face fontified t) 73 75 (fontified t) 75 88 (face font-lock-type-face fontified t) 88 90 (fontified t) 90 96 (face font-lock-type-face fontified t) 96 98 (face font-lock-type-face fontified t) 98 100 (face font-lock-type-face fontified t) 100 110 (face font-lock-type-face fontified t) 110 112 (fontified t) 112 114 (fontified t) 114 124 (fontified t) 124 130 (face font-lock-variable-name-face fontified t) 130 132 (fontified t) 132 135 (face font-lock-constant-face fontified t) 135 137 (fontified t) 137 140 (face font-lock-constant-face fontified t) 140 146 (fontified t) 146 147 (face (rainbow-delimiters-depth-4-face) fontified t) 147 148 (face (rainbow-delimiters-depth-4-face) fontified t) 148 150 (fontified t) 150 151 (fontified t) 151 162 (fontified t) 162 167 (face font-lock-variable-name-face fontified t) 167 169 (fontified t) 169 171 (face font-lock-constant-face fontified t) 171 173 (fontified t) 173 176 (face font-lock-type-face fontified t) 176 186 (face font-lock-type-face fontified t) 186 187 (face font-lock-type-face fontified t) 187 189 (face font-lock-type-face fontified t) 189 190 (face font-lock-type-face fontified t) 190 192 (face font-lock-type-face fontified t) 192 199 (fontified t) 199 200 (face (rainbow-delimiters-depth-4-face) fontified t) 200 201 (face (rainbow-delimiters-depth-4-face) fontified t) 201 203 (fontified t) 203 205 (fontified t) 205 215 (fontified t) 215 233 (face font-lock-variable-name-face fontified t) 233 235 (fontified t) 235 236 (face rust-ampersand-face fontified t) 236 246 (fontified t) 246 258 (fontified t) 258 259 (face font-lock-variable-name-face fontified t) 259 270 (face font-lock-variable-name-face fontified t) 270 280 (face font-lock-variable-name-face fontified t) 280 282 (fontified t) 282 283 (face font-lock-constant-face fontified t) 283 285 (face font-lock-constant-face fontified t) 285 287 (fontified t) 287 290 (face font-lock-constant-face fontified t) 290 294 (fontified t) 294 296 (fontified t) 296 297 (face (rainbow-delimiters-depth-4-face) fontified t) 297 298 (face (rainbow-delimiters-depth-4-face) fontified t) 298 300 (fontified t) 300 312 (fontified t) 312 331 (face font-lock-variable-name-face fontified t) 331 336 (fontified t) 336 348 (fontified t) 348 351 (face font-lock-variable-name-face fontified t) 351 352 (face font-lock-variable-name-face fontified t) 352 363 (face font-lock-variable-name-face fontified t) 363 374 (face font-lock-variable-name-face fontified t) 374 398 (fontified t) 398 399 (face (rainbow-delimiters-depth-4-face) fontified t) 399 400 (face (rainbow-delimiters-depth-4-face) fontified t) 400 402 (fontified t) 402 414 (fontified t) 414 423 (face font-lock-variable-name-face fontified t) 423 437 (face font-lock-variable-name-face fontified t) 437 458 (fontified t) 458 459 (face (rainbow-delimiters-depth-4-face) fontified t) 459 460 (face (rainbow-delimiters-depth-4-face) fontified t) 460 461 (fontified t) 461 463 (face font-lock-keyword-face fontified t) 463 464 (fontified t) 464 467 (face font-lock-type-face fontified t) 467 469 (fontified t) 469 477 (fontified t) 477 478 (face (rainbow-delimiters-depth-3-face) fontified t) 478 479 (fontified t)) . 2918) (undo-tree-id2091 . -479) (undo-tree-id2092 . -479) (undo-tree-id2093 . -479) (undo-tree-id2094 . -479) (undo-tree-id2095 . -414) (undo-tree-id2096 . -413) (undo-tree-id2097 . -412) (undo-tree-id2098 . -345) (undo-tree-id2099 . -308) (undo-tree-id2100 . -253) (undo-tree-id2101 . -209) (undo-tree-id2102 . -155) (undo-tree-id2103 . -116) (undo-tree-id2104 . -3) (undo-tree-id2105 . -2) (undo-tree-id2106 . -1) (undo-tree-id2107 . -479) (t 26050 5414 986814 187000)) nil (26050 5433 638568 439000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3835 . 3836) (nil fontified nil 2918 . 3836) (2918 . 3836)) nil (26050 5433 638548 11000) 0 nil])
([nil nil ((19 . 25) (#("std" 0 3 (face font-lock-constant-face fontified t)) . 19) (24 . 38) (#("ffi" 0 3 (face font-lock-constant-face fontified t)) . 24) (29 . 37) (#("CS" 0 2 (face font-lock-type-face fontified t)) . 29) (32 . 33) (#("ri" 0 2 (face font-lock-type-face fontified t)) . 32) (35 . 38) (#("g" 0 1 (face font-lock-type-face fontified t)) . 35) (72 . 75) (#("anyhow" 0 6 (face font-lock-constant-face fontified t)) . 72) (80 . 83) (#("Error;
use ash" 0 5 (face font-lock-type-face fontified t) 5 7 (fontified t) 7 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 14 (face font-lock-constant-face fontified t)) . 80) (96 . 98) (#("{vk, Ins" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 5 (fontified t) 5 8 (face font-lock-type-face fontified t)) . 96) (105 . 107) (#("a" 0 1 (face font-lock-type-face fontified t)) . 105) (107 . 108) (#("ce}" 0 2 (face font-lock-type-face fontified t) 2 3 (face (rainbow-delimiters-depth-1-face) fontified t)) . -107) (undo-tree-id2108 . -3) 110 (#("
" 0 1 (fontified t)) . -393) (751 . 752) (#("
           " 0 1 (fontified t) 1 12 (fontified t)) . -778) (#("
       " 0 1 (fontified t) 1 8 (fontified t)) . -818) (1562 . 1574) (1633 . 1641) (#("        " 0 8 (fontified t)) . -1717) (2589 . 2601) (2640 . 2644) (2648 . 2652) (2726 . 2730) (#("
" 0 1 (fontified t)) . -2918) (#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 4832) 3531 (t 26050 5433 656815 334000)) nil (26050 5438 675651 684000) 0 nil])
([nil nil ((#("enable" 0 6 (fontified t)) . -3083) (undo-tree-id2216 . -6) (undo-tree-id2217 . -6) (undo-tree-id2218 . -6) (undo-tree-id2219 . -6) (undo-tree-id2220 . -6) (undo-tree-id2221 . -6) (undo-tree-id2222 . -6) (undo-tree-id2223 . -6) (undo-tree-id2224 . -6) (undo-tree-id2225 . -6) (undo-tree-id2226 . -6) (undo-tree-id2227 . -6) 3089 (t 26050 5438 696815 643000)) nil (26050 5455 243959 284000) 0 nil])
([nil nil ((#("is_" 0 3 (fontified t)) . -3080) (undo-tree-id2203 . -3) (undo-tree-id2204 . -3) (undo-tree-id2205 . -3) (undo-tree-id2206 . -3) (undo-tree-id2207 . -3) (undo-tree-id2208 . -3) (undo-tree-id2209 . -3) (undo-tree-id2210 . -3) (undo-tree-id2211 . -3) (undo-tree-id2212 . -3) (undo-tree-id2213 . -3) (undo-tree-id2214 . -3) (undo-tree-id2215 . -3) 3083) nil (26050 5455 243950 161000) 0 nil])
([nil nil ((#("VALIDATION." 0 10 (face font-lock-type-face fontified t) 10 11 (fontified t)) . -3069) (undo-tree-id2189 . -11) (undo-tree-id2190 . -11) (undo-tree-id2191 . -11) (undo-tree-id2192 . -11) (undo-tree-id2193 . -11) (undo-tree-id2194 . -11) (undo-tree-id2195 . -11) (undo-tree-id2196 . -11) (undo-tree-id2197 . -11) (undo-tree-id2198 . -11) (undo-tree-id2199 . -11) (undo-tree-id2200 . -11) (undo-tree-id2201 . -11) (undo-tree-id2202 . -11) 3080) nil (26050 5455 243941 186000) 0 nil])
([nil nil ((3069 . 3072)) nil (26050 5455 243931 900000) 0 nil])
([nil nil ((#("E" 0 1 (face font-lock-type-face fontified t)) . -3069) (undo-tree-id2142 . -1) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (undo-tree-id2145 . -1) (undo-tree-id2146 . -1) (undo-tree-id2147 . -1) (undo-tree-id2148 . -1) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1) (undo-tree-id2164 . -1) (undo-tree-id2165 . -1) (#("N" 0 1 (face font-lock-type-face fontified t)) . -3070) (undo-tree-id2166 . -1) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) (undo-tree-id2173 . -1) (undo-tree-id2174 . -1) (undo-tree-id2175 . -1) (undo-tree-id2176 . -1) (undo-tree-id2177 . -1) (undo-tree-id2178 . -1) (undo-tree-id2179 . -1) (undo-tree-id2180 . -1) (undo-tree-id2181 . -1) (undo-tree-id2182 . -1) (#("A" 0 1 (face font-lock-type-face fontified t)) . -3071) (undo-tree-id2183 . -1) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1) (undo-tree-id2186 . -1) (undo-tree-id2187 . -1) (undo-tree-id2188 . -1) 3072) nil (26050 5455 243929 445000) 0 nil])
([nil nil ((3069 . 3070)) nil (26050 5455 243899 280000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -3069) (undo-tree-id2139 . -1) (undo-tree-id2140 . -1) (undo-tree-id2141 . -1) 3070) nil (26050 5455 243898 483000) 0 nil])
([nil nil ((3069 . 3071)) nil (26050 5455 243895 862000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -3070) (undo-tree-id2135 . -1) (undo-tree-id2136 . -1) (undo-tree-id2137 . -1) (undo-tree-id2138 . -1) 3071) nil (26050 5455 243895 35000) 0 nil])
([nil nil ((3070 . 3071)) nil (26050 5455 243891 544000) 0 nil])
([nil nil ((3069 . 3076) (#("ut" 0 2 (fontified nil)) . 3069) (3069 . 3071) (#("utility" 0 7 (fontified nil)) . -3069) (3069 . 3076) (#("ut" 0 2 (fontified t)) . -3069) (undo-tree-id2123 . -2) (undo-tree-id2124 . -1) (undo-tree-id2125 . -1) (undo-tree-id2126 . -1) (undo-tree-id2127 . -1) (undo-tree-id2128 . -1) (undo-tree-id2129 . -1) (undo-tree-id2130 . -1) (undo-tree-id2131 . -2) (undo-tree-id2132 . -2) (undo-tree-id2133 . -2) (undo-tree-id2134 . -2) 3071) nil (26050 5455 243890 113000) 0 nil])
([nil nil ((3076 . 3079)) nil (26050 5455 243880 793000) 0 nil])
([nil nil ((3078 . 3088) (#("V" 0 1 (fontified nil)) . 3078) (3078 . 3079) (#("validation" 0 10 (fontified nil)) . -3078) (3078 . 3088) (#("V" 0 1 (face font-lock-type-face fontified t)) . -3078) (undo-tree-id2115 . -1) (undo-tree-id2116 . -1) (undo-tree-id2117 . -1) (undo-tree-id2118 . -1) (undo-tree-id2119 . -1) (undo-tree-id2120 . -1) (undo-tree-id2121 . -1) (undo-tree-id2122 . -1) 3079) nil (26050 5455 243879 355000) 0 nil])
([nil nil ((3088 . 3089)) nil (26050 5455 243872 156000) 0 nil])
([nil nil ((3089 . 3091)) nil (26050 5455 243870 957000) 0 nil])
([nil nil ((3090 . 3112) (#("E" 0 1 (fontified nil)) . 3090) (3090 . 3091) (#("EnableValidationLayers" 0 22 (fontified nil)) . -3090) (3090 . 3112) (#("E" 0 1 (face font-lock-type-face fontified t)) . -3090) (undo-tree-id2109 . -1) (undo-tree-id2110 . -1) (undo-tree-id2111 . -1) (undo-tree-id2112 . -1) (undo-tree-id2113 . -1) (undo-tree-id2114 . -1) 3091) nil (26050 5455 243866 826000) 0 nil])
([nil nil ((#("void" 0 4 (fontified t)) . -3235) (undo-tree-id2276 . -4) (undo-tree-id2277 . -4) (undo-tree-id2278 . -4) (undo-tree-id2279 . -4) (undo-tree-id2280 . -4) (undo-tree-id2281 . -4) (undo-tree-id2282 . -4) (undo-tree-id2283 . -4) (undo-tree-id2284 . -4) (undo-tree-id2285 . -4) 3239 (t 26050 5455 263483 326000)) nil (26050 5468 789362 1000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -3233) (undo-tree-id2249 . -1) (undo-tree-id2250 . -1) (undo-tree-id2251 . -1) (undo-tree-id2252 . -1) (undo-tree-id2253 . -1) (undo-tree-id2254 . -1) (undo-tree-id2255 . -1) (undo-tree-id2256 . -1) (undo-tree-id2257 . -1) (undo-tree-id2258 . -1) (undo-tree-id2259 . -1) (undo-tree-id2260 . -1) (undo-tree-id2261 . -1) (undo-tree-id2262 . -1) (#("_" 0 1 (fontified t)) . -3234) (undo-tree-id2263 . -1) (undo-tree-id2264 . -1) (undo-tree-id2265 . -1) (undo-tree-id2266 . -1) (undo-tree-id2267 . -1) (undo-tree-id2268 . -1) (undo-tree-id2269 . -1) (undo-tree-id2270 . -1) (undo-tree-id2271 . -1) (undo-tree-id2272 . -1) (undo-tree-id2273 . -1) (undo-tree-id2274 . -1) (undo-tree-id2275 . -1) 3235) nil (26050 5468 789352 706000) 0 nil])
([nil nil ((3233 . 3234)) nil (26050 5468 789334 802000) 0 nil])
([nil nil ((3234 . 3235)) nil (26050 5468 789334 135000) 0 nil])
([nil nil ((#("+" 0 1 (fontified t)) . -3234) (undo-tree-id2246 . -1) (undo-tree-id2247 . -1) (undo-tree-id2248 . -1) 3235) nil (26050 5468 789329 165000) 0 nil])
([nil nil ((3234 . 3236)) nil (26050 5468 789325 843000) 0 nil])
([nil nil (("::ffi" . -96) (undo-tree-id2228 . -5) 101 (103 . 109) (110 . 119) (3233 . 3233) (3233 . 3239) (#("c_v" 0 3 (fontified nil)) . 3233) (3233 . 3236) (#("c_void (use std::ffi::c_void)" 0 29 (fontified nil)) . -3233) (3233 . 3262) (#("c_v" 0 3 (fontified t)) . -3233) (undo-tree-id2229 . -3) (undo-tree-id2230 . -1) (undo-tree-id2231 . -1) (undo-tree-id2232 . -1) (undo-tree-id2233 . -1) (undo-tree-id2234 . -1) (undo-tree-id2235 . -1) (undo-tree-id2236 . -1) (undo-tree-id2237 . -2) (undo-tree-id2238 . -2) (undo-tree-id2239 . -2) (undo-tree-id2240 . -2) (undo-tree-id2241 . -3) (undo-tree-id2242 . -3) (undo-tree-id2243 . -3) (undo-tree-id2244 . -3) (undo-tree-id2245 . -3) 3236) nil (26050 5468 789321 253000) 0 nil])
([nil nil ((3287 . 3288) (t 26050 5468 806817 475000)) nil (26050 5513 215256 465000) 0 nil])
([nil nil ((3288 . 3292)) nil (26050 5513 215251 588000) 0 nil])
([nil nil ((#("enable" 0 6 (fontified t)) . -3468) (undo-tree-id2343 . -6) (undo-tree-id2344 . -6) (undo-tree-id2345 . -5) (undo-tree-id2346 . -5) (undo-tree-id2347 . -5) (undo-tree-id2348 . -5) (undo-tree-id2349 . -5) (undo-tree-id2350 . -6) (undo-tree-id2351 . -6) (undo-tree-id2352 . -6) (undo-tree-id2353 . -6) (undo-tree-id2354 . -6) (undo-tree-id2355 . -6) (undo-tree-id2356 . -6) (undo-tree-id2357 . -6) (undo-tree-id2358 . -6) (undo-tree-id2359 . -6) (undo-tree-id2360 . -6) (undo-tree-id2361 . -6) 3474 (t 26050 5513 263486 829000)) nil (26050 5532 431124 850000) 0 nil])
([nil nil ((#("is_" 0 3 (fontified t)) . -3465) (undo-tree-id2323 . -3) (undo-tree-id2324 . -3) (undo-tree-id2325 . -3) (undo-tree-id2326 . -3) (undo-tree-id2327 . -3) (undo-tree-id2328 . -3) (undo-tree-id2329 . -3) (undo-tree-id2330 . -3) (undo-tree-id2331 . -3) (undo-tree-id2332 . -3) (undo-tree-id2333 . -3) (undo-tree-id2334 . -3) (undo-tree-id2335 . -3) (undo-tree-id2336 . -3) (undo-tree-id2337 . -3) (undo-tree-id2338 . -3) (undo-tree-id2339 . -3) (undo-tree-id2340 . -3) (undo-tree-id2341 . -3) (undo-tree-id2342 . -3) 3468) nil (26050 5532 431112 163000) 0 nil])
([nil nil ((#("VALIDATION." 0 10 (face font-lock-type-face fontified t) 10 11 (fontified t)) . -3454) (undo-tree-id2302 . -11) (undo-tree-id2303 . -11) (undo-tree-id2304 . -11) (undo-tree-id2305 . -11) (undo-tree-id2306 . -11) (undo-tree-id2307 . -11) (undo-tree-id2308 . -11) (undo-tree-id2309 . -11) (undo-tree-id2310 . -11) (undo-tree-id2311 . -11) (undo-tree-id2312 . -11) (undo-tree-id2313 . -11) (undo-tree-id2314 . -11) (undo-tree-id2315 . -11) (undo-tree-id2316 . -11) (undo-tree-id2317 . -11) (undo-tree-id2318 . -11) (undo-tree-id2319 . -11) (undo-tree-id2320 . -11) (undo-tree-id2321 . -11) (undo-tree-id2322 . -11) 3465) nil (26050 5532 431099 513000) 0 nil])
([nil nil ((3454 . 3457)) nil (26050 5532 431085 229000) 0 nil])
([nil nil ((3454 . 3461) (#("uti" 0 3 (fontified nil)) . 3454) (3454 . 3457) (#("utility" 0 7 (fontified nil)) . -3454) (3454 . 3461) (#("uti" 0 3 (fontified t)) . -3454) (undo-tree-id2292 . -3) (undo-tree-id2293 . -1) (undo-tree-id2294 . -1) (undo-tree-id2295 . -1) (undo-tree-id2296 . -1) (undo-tree-id2297 . -2) (undo-tree-id2298 . -2) (undo-tree-id2299 . -2) (undo-tree-id2300 . -3) (undo-tree-id2301 . -3) 3457) nil (26050 5532 431083 868000) 0 nil])
([nil nil ((3461 . 3463)) nil (26050 5532 431075 679000) 0 nil])
([nil nil ((3463 . 3473) (#("validation" 0 10 (fontified nil)) . -3463) (3463 . 3473)) nil (26050 5532 431074 513000) 0 nil])
([nil nil ((3473 . 3476)) nil (26050 5532 431073 51000) 0 nil])
([nil nil ((3475 . 3497) (#("E" 0 1 (fontified nil)) . 3475) (3475 . 3476) (#("EnableValidationLayers" 0 22 (fontified nil)) . -3475) (3475 . 3497) (#("E" 0 1 (face font-lock-type-face fontified t)) . -3475) (undo-tree-id2286 . -1) (undo-tree-id2287 . -1) (undo-tree-id2288 . -1) (undo-tree-id2289 . -1) (undo-tree-id2290 . -1) (undo-tree-id2291 . -1) 3476) nil (26050 5532 431069 107000) 0 nil])
([nil nil ((3581 . 3586) (t 26050 5532 480154 651000)) nil (26050 5543 993255 701000) 0 nil])
([nil nil ((#("enable" 0 6 (fontified t)) . -3663) (undo-tree-id2412 . -6) (undo-tree-id2413 . -6) (undo-tree-id2414 . -6) (undo-tree-id2415 . -6) (undo-tree-id2416 . -6) (undo-tree-id2417 . -6) (undo-tree-id2418 . -6) (undo-tree-id2419 . -6) (undo-tree-id2420 . -6) (undo-tree-id2421 . -6) 3669 (t 26050 5544 13488 688000)) nil (26050 5554 155422 615000) 0 nil])
([nil nil ((#("is_" 0 3 (fontified t)) . -3660) (undo-tree-id2401 . -3) (undo-tree-id2402 . -3) (undo-tree-id2403 . -3) (undo-tree-id2404 . -3) (undo-tree-id2405 . -3) (undo-tree-id2406 . -3) (undo-tree-id2407 . -3) (undo-tree-id2408 . -3) (undo-tree-id2409 . -3) (undo-tree-id2410 . -3) (undo-tree-id2411 . -3) 3663) nil (26050 5554 155415 736000) 0 nil])
([nil nil ((#("VALIDATION." 0 10 (face font-lock-type-face fontified t) 10 11 (fontified t)) . -3649) (undo-tree-id2382 . -11) (undo-tree-id2383 . -11) (undo-tree-id2384 . -10) (undo-tree-id2385 . -10) (undo-tree-id2386 . -10) (undo-tree-id2387 . -10) (undo-tree-id2388 . -10) (undo-tree-id2389 . -10) (undo-tree-id2390 . -10) (undo-tree-id2391 . -11) (undo-tree-id2392 . -11) (undo-tree-id2393 . -11) (undo-tree-id2394 . -11) (undo-tree-id2395 . -11) (undo-tree-id2396 . -11) (undo-tree-id2397 . -11) (undo-tree-id2398 . -11) (undo-tree-id2399 . -11) (undo-tree-id2400 . -11) 3660) nil (26050 5554 155407 999000) 0 nil])
([nil nil ((3649 . 3651)) nil (26050 5554 155395 640000) 0 nil])
([nil nil ((3649 . 3656) (#("ut" 0 2 (fontified nil)) . 3649) (3649 . 3651) (#("utility" 0 7 (fontified nil)) . -3649) (3649 . 3656) (#("ut" 0 2 (fontified t)) . -3649) (undo-tree-id2372 . -2) (undo-tree-id2373 . -1) (undo-tree-id2374 . -1) (undo-tree-id2375 . -1) (undo-tree-id2376 . -1) (undo-tree-id2377 . -2) (undo-tree-id2378 . -2) (undo-tree-id2379 . -2) (undo-tree-id2380 . -2) (undo-tree-id2381 . -2) 3651) nil (26050 5554 155394 382000) 0 nil])
([nil nil ((3656 . 3659)) nil (26050 5554 155386 500000) 0 nil])
([nil nil ((3658 . 3668) (#("v" 0 1 (fontified nil)) . 3658) (3658 . 3659) (#("validation" 0 10 (fontified nil)) . -3658) (3658 . 3668) (#("v" 0 1 (fontified t)) . -3658) (undo-tree-id2368 . -1) (undo-tree-id2369 . -1) (undo-tree-id2370 . -1) (undo-tree-id2371 . -1) 3659) nil (26050 5554 155385 273000) 0 nil])
([nil nil ((3668 . 3671)) nil (26050 5554 155379 867000) 0 nil])
([nil nil ((3670 . 3692) (#("E" 0 1 (fontified nil)) . 3670) (3670 . 3671) (#("EnableValidationLayers" 0 22 (fontified nil)) . -3670) (3670 . 3692) (#("E" 0 1 (face font-lock-type-face fontified t)) . -3670) (undo-tree-id2362 . -1) (undo-tree-id2363 . -1) (undo-tree-id2364 . -1) (undo-tree-id2365 . -1) (undo-tree-id2366 . -1) (undo-tree-id2367 . -1) 3671) nil (26050 5554 155375 879000) 0 nil])
([nil nil ((6691 . 6704) (t 26050 5554 173489 312000)) nil (26050 5616 826215 997000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6874 . 6875) (nil fontified nil 6704 . 6875) (6704 . 6875)) nil (26050 5616 826215 330000) 0 nil])
([nil nil ((#("            " 0 12 (fontified t)) . -6704) 6678) nil (26050 5616 826214 174000) 0 nil])
([nil nil ((#("enable" 0 6 (fontified t)) . -6721) (undo-tree-id2468 . -6) (undo-tree-id2469 . -6) (undo-tree-id2470 . -6) (undo-tree-id2471 . -6) (undo-tree-id2472 . -6) (undo-tree-id2473 . -6) (undo-tree-id2474 . -6) (undo-tree-id2475 . -6) (undo-tree-id2476 . -6) (undo-tree-id2477 . -6) 6727) nil (26050 5616 826213 118000) 0 nil])
([nil nil ((#("is_" 0 3 (fontified t)) . -6718) (undo-tree-id2457 . -3) (undo-tree-id2458 . -3) (undo-tree-id2459 . -3) (undo-tree-id2460 . -3) (undo-tree-id2461 . -3) (undo-tree-id2462 . -3) (undo-tree-id2463 . -3) (undo-tree-id2464 . -3) (undo-tree-id2465 . -3) (undo-tree-id2466 . -3) (undo-tree-id2467 . -3) 6721) nil (26050 5616 826207 79000) 0 nil])
([nil nil ((#("VALIDATION." 0 10 (face font-lock-type-face fontified t) 10 11 (fontified t)) . -6707) (undo-tree-id2445 . -11) (undo-tree-id2446 . -11) (undo-tree-id2447 . -11) (undo-tree-id2448 . -11) (undo-tree-id2449 . -11) (undo-tree-id2450 . -11) (undo-tree-id2451 . -11) (undo-tree-id2452 . -11) (undo-tree-id2453 . -11) (undo-tree-id2454 . -11) (undo-tree-id2455 . -11) (undo-tree-id2456 . -11) 6718) nil (26050 5616 826200 685000) 0 nil])
([nil nil ((6707 . 6708)) nil (26050 5616 826193 618000) 0 nil])
([nil nil ((#("U" 0 1 (face font-lock-type-face fontified t)) . -6707) (undo-tree-id2432 . -1) (undo-tree-id2433 . -1) (undo-tree-id2434 . -1) (undo-tree-id2435 . -1) (undo-tree-id2436 . -1) (undo-tree-id2437 . -1) (undo-tree-id2438 . -1) (undo-tree-id2439 . -1) (undo-tree-id2440 . -1) (undo-tree-id2441 . -1) (undo-tree-id2442 . -1) (undo-tree-id2443 . -1) (undo-tree-id2444 . -1) 6708) nil (26050 5616 826192 733000) 0 nil])
([nil nil ((6707 . 6710)) nil (26050 5616 826185 317000) 0 nil])
([nil nil ((6707 . 6714) (#("uti" 0 3 (fontified nil)) . 6707) (6707 . 6710) (#("utility" 0 7 (fontified nil)) . -6707) (6707 . 6714) (#("uti" 0 3 (fontified t)) . -6707) (undo-tree-id2426 . -3) (undo-tree-id2427 . -1) (undo-tree-id2428 . -2) (undo-tree-id2429 . -2) (undo-tree-id2430 . -3) (undo-tree-id2431 . -3) 6710) nil (26050 5616 826184 316000) 0 nil])
([nil nil ((6714 . 6717)) nil (26050 5616 826179 373000) 0 nil])
([nil nil ((6716 . 6726) (#("v" 0 1 (fontified nil)) . 6716) (6716 . 6717) (#("validation" 0 10 (fontified nil)) . -6716) (6716 . 6726) (#("v" 0 1 (fontified t)) . -6716) (undo-tree-id2422 . -1) (undo-tree-id2423 . -1) (undo-tree-id2424 . -1) (undo-tree-id2425 . -1) 6717) nil (26050 5616 826178 193000) 0 nil])
([nil nil ((6726 . 6728)) nil (26050 5616 826168 574000) 0 nil])
([nil nil ((6728 . 6750) (#("EnableValidationLayers" 0 22 (fontified nil)) . -6728) (6728 . 6750)) nil (26050 5616 826164 341000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -6785) (undo-tree-id2478 . -1) (undo-tree-id2479 . -1) (undo-tree-id2480 . -1) (undo-tree-id2481 . -1) (undo-tree-id2482 . -1) (undo-tree-id2483 . -1) (undo-tree-id2484 . -1) (undo-tree-id2485 . -1) (undo-tree-id2486 . -1) (undo-tree-id2487 . -1) (undo-tree-id2488 . -1) (undo-tree-id2489 . -1) (undo-tree-id2490 . -1) (undo-tree-id2491 . -1) (undo-tree-id2492 . -1) (undo-tree-id2493 . -1) (undo-tree-id2494 . -1) (undo-tree-id2495 . -1) (undo-tree-id2496 . -1) (undo-tree-id2497 . -1) (#("l" 0 1 (fontified t)) . -6786) (undo-tree-id2498 . -1) (undo-tree-id2499 . -1) (undo-tree-id2500 . -1) (undo-tree-id2501 . -1) (undo-tree-id2502 . -1) (undo-tree-id2503 . -1) (undo-tree-id2504 . -1) (undo-tree-id2505 . -1) (undo-tree-id2506 . -1) (undo-tree-id2507 . -1) (undo-tree-id2508 . -1) (undo-tree-id2509 . -1) (undo-tree-id2510 . -1) (undo-tree-id2511 . -1) (undo-tree-id2512 . -1) (undo-tree-id2513 . -1) (undo-tree-id2514 . -1) (undo-tree-id2515 . -1) (undo-tree-id2516 . -1) (#("o" 0 1 (fontified t)) . -6787) (undo-tree-id2517 . -1) (undo-tree-id2518 . -1) (undo-tree-id2519 . -1) (undo-tree-id2520 . -1) (undo-tree-id2521 . -1) (undo-tree-id2522 . -1) (undo-tree-id2523 . -1) (undo-tree-id2524 . -1) (undo-tree-id2525 . -1) (undo-tree-id2526 . -1) (undo-tree-id2527 . -1) (undo-tree-id2528 . -1) (undo-tree-id2529 . -1) (undo-tree-id2530 . -1) (undo-tree-id2531 . -1) (undo-tree-id2532 . -1) (undo-tree-id2533 . -1) (undo-tree-id2534 . -1) (#("a" 0 1 (fontified t)) . -6788) (undo-tree-id2535 . -1) (undo-tree-id2536 . -1) (undo-tree-id2537 . -1) (undo-tree-id2538 . -1) (undo-tree-id2539 . -1) (undo-tree-id2540 . -1) (undo-tree-id2541 . -1) (undo-tree-id2542 . -1) (undo-tree-id2543 . -1) (undo-tree-id2544 . -1) (undo-tree-id2545 . -1) (undo-tree-id2546 . -1) (undo-tree-id2547 . -1) (undo-tree-id2548 . -1) (undo-tree-id2549 . -1) (undo-tree-id2550 . -1) (undo-tree-id2551 . -1) (#("d" 0 1 (fontified t)) . -6789) (undo-tree-id2552 . -1) (undo-tree-id2553 . -1) (undo-tree-id2554 . -1) (undo-tree-id2555 . -1) (undo-tree-id2556 . -1) (undo-tree-id2557 . -1) (undo-tree-id2558 . -1) (undo-tree-id2559 . -1) (undo-tree-id2560 . -1) (undo-tree-id2561 . -1) (undo-tree-id2562 . -1) (undo-tree-id2563 . -1) (undo-tree-id2564 . -1) (undo-tree-id2565 . -1) (undo-tree-id2566 . -1) (undo-tree-id2567 . -1) (#("e" 0 1 (fontified t)) . -6790) (undo-tree-id2568 . -1) (undo-tree-id2569 . -1) (undo-tree-id2570 . -1) (undo-tree-id2571 . -1) (undo-tree-id2572 . -1) (undo-tree-id2573 . -1) (undo-tree-id2574 . -1) (undo-tree-id2575 . -1) (undo-tree-id2576 . -1) (undo-tree-id2577 . -1) (undo-tree-id2578 . -1) (undo-tree-id2579 . -1) (undo-tree-id2580 . -1) (undo-tree-id2581 . -1) (undo-tree-id2582 . -1) (#("r" 0 1 (fontified t)) . -6791) (undo-tree-id2583 . -1) (undo-tree-id2584 . -1) (undo-tree-id2585 . -1) (undo-tree-id2586 . -1) (undo-tree-id2587 . -1) (undo-tree-id2588 . -1) (undo-tree-id2589 . -1) (undo-tree-id2590 . -1) (undo-tree-id2591 . -1) (undo-tree-id2592 . -1) (undo-tree-id2593 . -1) (undo-tree-id2594 . -1) (undo-tree-id2595 . -1) (undo-tree-id2596 . -1) 6792 (t 26050 5616 843493 158000)) nil (26050 5621 698073 623000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -6850) (undo-tree-id2597 . -1) (undo-tree-id2598 . -1) (undo-tree-id2599 . -1) (undo-tree-id2600 . -1) (undo-tree-id2601 . -1) (undo-tree-id2602 . -1) (undo-tree-id2603 . -1) (undo-tree-id2604 . -1) (undo-tree-id2605 . -1) (undo-tree-id2606 . -1) (undo-tree-id2607 . -1) (undo-tree-id2608 . -1) (undo-tree-id2609 . -1) (undo-tree-id2610 . -1) 6851 (t 26050 5621 716826 789000)) nil (26050 5624 701781 53000) 0 nil])
([nil nil ((5573 . 5590) (t 26050 5624 753493 638000)) nil (26050 5779 932257 395000) 0 nil])
([nil nil ((5590 . 5591)) nil (26050 5779 932256 644000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5620 5620 nil nil nil nil #s(yas--field 2 5627 5627 nil nil nil nil #s(yas--exit 5629 nil))) #s(yas--field 2 5627 5627 nil nil nil nil #s(yas--exit 5629 nil))) #s(yas--exit 5629 nil) 15 nil #s(yas--field 1 5620 5620 nil nil nil nil #s(yas--field 2 5627 5627 nil nil nil nil #s(yas--exit 5629 nil))) nil nil)) (5590 . 5629) (#("Event::WindowEvent { window_id$1, event$2 }$0" 0 45 (fontified nil)) . 5590) (5590 . 5635) (#("E" 0 1 (fontified nil)) . 5590) (5590 . 5591) (#("Event::WindowEvent {…}" 0 22 (fontified nil)) . -5590) (5590 . 5612) (#("E" 0 1 (face font-lock-type-face fontified t)) . -5590) (undo-tree-id2789 . -1) (undo-tree-id2790 . -1) (undo-tree-id2791 . -1) (undo-tree-id2792 . -1) (undo-tree-id2793 . -1) (undo-tree-id2794 . -1) (undo-tree-id2795 . -1) 5591) nil (26050 5779 932255 345000) 0 nil])
([nil nil ((apply yas--snippet-revive 5590 5629 #s(yas--snippet nil (#s(yas--field 1 5620 5620 nil nil nil nil #s(yas--field 2 5627 5627 nil nil nil nil #s(yas--exit 5629 nil))) #s(yas--field 2 5627 5627 nil nil nil nil #s(yas--exit 5629 nil))) #s(yas--exit 5629 nil) 15 nil #s(yas--field 1 5620 5620 nil nil nil nil #s(yas--field 2 5627 5627 nil nil nil nil #s(yas--exit 5629 nil))) nil nil))) nil (26050 5779 932248 677000) 0 nil])
([nil nil ((#("event" 0 5 (fontified t)) . -5622) (undo-tree-id2783 . -5) (undo-tree-id2784 . -1) (undo-tree-id2785 . -2) (undo-tree-id2786 . -3) (undo-tree-id2787 . -4) (undo-tree-id2788 . -5) 5627) nil (26050 5779 932247 787000) 0 nil])
([nil nil ((#("id, " 0 4 (fontified t)) . -5618) (undo-tree-id2766 . -2) (undo-tree-id2767 . -4) (undo-tree-id2768 . -2) (undo-tree-id2769 . -2) (undo-tree-id2770 . -2) (undo-tree-id2771 . -2) (undo-tree-id2772 . -2) (undo-tree-id2773 . -2) (undo-tree-id2774 . -2) (undo-tree-id2775 . -3) (undo-tree-id2776 . -4) (undo-tree-id2777 . -4) (undo-tree-id2778 . -4) (undo-tree-id2779 . -4) (undo-tree-id2780 . -4) (undo-tree-id2781 . -4) (undo-tree-id2782 . -4) 5622) nil (26050 5779 932242 413000) 0 nil])
([nil nil ((#("window_" 0 7 (fontified t)) . -5611) (undo-tree-id2748 . -7) (undo-tree-id2749 . -7) (undo-tree-id2750 . -7) (undo-tree-id2751 . -7) (undo-tree-id2752 . -7) (undo-tree-id2753 . -7) (undo-tree-id2754 . -7) (undo-tree-id2755 . -7) (undo-tree-id2756 . -7) (undo-tree-id2757 . -7) (undo-tree-id2758 . -7) (undo-tree-id2759 . -7) (undo-tree-id2760 . -7) (undo-tree-id2761 . -7) (undo-tree-id2762 . -7) (undo-tree-id2763 . -7) (undo-tree-id2764 . -7) (undo-tree-id2765 . -7) 5618) nil (26050 5779 932231 393000) 0 nil])
([nil nil ((5611 . 5612)) nil (26050 5779 932219 384000) 0 nil])
([nil nil ((5611 . 5616) (#("e" 0 1 (fontified nil)) . 5611) (5611 . 5612) (#("event" 0 5 (fontified nil)) . -5611) (5611 . 5616) (#("e" 0 1 (fontified t)) . -5611) (undo-tree-id2738 . -1) (undo-tree-id2739 . -1) (undo-tree-id2740 . -1) (undo-tree-id2741 . -1) (undo-tree-id2742 . -1) (undo-tree-id2743 . -1) (undo-tree-id2744 . -1) (undo-tree-id2745 . -1) (undo-tree-id2746 . -1) (undo-tree-id2747 . -1) 5612) nil (26050 5779 932202 827000) 0 nil])
([nil nil ((5616 . 5619)) nil (26050 5779 932195 102000) 0 nil])
([nil nil ((5619 . 5624)) nil (26050 5779 932194 477000) 0 nil])
([nil nil ((#("w" 0 1 (face font-lock-type-face fontified t)) . -5622) (undo-tree-id2725 . -1) (undo-tree-id2726 . -1) (undo-tree-id2727 . -1) (undo-tree-id2728 . -1) (undo-tree-id2729 . -1) (undo-tree-id2730 . -1) (undo-tree-id2731 . -1) (undo-tree-id2732 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -5623) (undo-tree-id2733 . -1) (undo-tree-id2734 . -1) (undo-tree-id2735 . -1) (undo-tree-id2736 . -1) (undo-tree-id2737 . -1) 5624) nil (26050 5779 932193 366000) 0 nil])
([nil nil ((5622 . 5626)) nil (26050 5779 932184 777000) 0 nil])
([nil nil ((#("v" 0 1 (face font-lock-type-face fontified t)) . -5625) (undo-tree-id2718 . -1) (undo-tree-id2719 . -1) (undo-tree-id2720 . -1) (undo-tree-id2721 . -1) (undo-tree-id2722 . -1) (undo-tree-id2723 . -1) (undo-tree-id2724 . -1) 5626) nil (26050 5779 932183 843000) 0 nil])
([nil nil ((5625 . 5626)) nil (26050 5779 932178 592000) 0 nil])
([nil nil ((#("b" 0 1 (face font-lock-type-face fontified t)) . -5625) (undo-tree-id2716 . -1) (undo-tree-id2717 . -1) 5626) nil (26050 5779 932177 812000) 0 nil])
([nil nil ((5625 . 5631)) nil (26050 5779 932175 853000) 0 nil])
([nil nil ((5631 . 5632)) nil (26050 5779 932175 245000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -5631) (undo-tree-id2710 . -1) (undo-tree-id2711 . -1) (undo-tree-id2712 . -1) (undo-tree-id2713 . -1) (undo-tree-id2714 . -1) (undo-tree-id2715 . -1) 5632) nil (26050 5779 932174 387000) 0 nil])
([nil nil ((5631 . 5632)) nil (26050 5779 932169 608000) 0 nil])
([nil nil ((#("P" 0 1 (face font-lock-type-face fontified t)) . -5631) (undo-tree-id2704 . -1) (undo-tree-id2705 . -1) (undo-tree-id2706 . -1) (undo-tree-id2707 . -1) (undo-tree-id2708 . -1) (undo-tree-id2709 . -1) 5632) nil (26050 5779 932168 802000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5656 5656 nil nil nil nil #s(yas--field 2 5663 5663 nil nil nil nil #s(yas--field 3 5677 5677 nil nil nil nil #s(yas--exit 5679 nil)))) #s(yas--field 2 5663 5663 nil nil nil nil #s(yas--field 3 5677 5677 nil nil nil nil #s(yas--exit 5679 nil))) #s(yas--field 3 5677 5677 nil nil nil nil #s(yas--exit 5679 nil))) #s(yas--exit 5679 nil) 16 nil #s(yas--field 1 5656 5656 nil nil nil nil #s(yas--field 2 5663 5663 nil nil nil nil #s(yas--field 3 5677 5677 nil nil nil nil #s(yas--exit 5679 nil)))) nil nil)) (5631 . 5679) (#("KeyboardInput { device_id$1, event$2, is_synthetic$3 }$0" 0 56 (fontified nil)) . 5631) (5631 . 5687) (#("KeyboardInput {…}" 0 17 (fontified nil)) . -5631) (5631 . 5648)) nil (26050 5779 932164 203000) 0 nil])
([nil nil ((apply yas--snippet-revive 5631 5679 #s(yas--snippet nil (#s(yas--field 1 5656 5656 nil nil nil nil #s(yas--field 2 5663 5663 nil nil nil nil #s(yas--field 3 5677 5677 nil nil nil nil #s(yas--exit 5679 nil)))) #s(yas--field 2 5663 5663 nil nil nil nil #s(yas--field 3 5677 5677 nil nil nil nil #s(yas--exit 5679 nil))) #s(yas--field 3 5677 5677 nil nil nil nil #s(yas--exit 5679 nil))) #s(yas--exit 5679 nil) 16 nil #s(yas--field 1 5656 5656 nil nil nil nil #s(yas--field 2 5663 5663 nil nil nil nil #s(yas--field 3 5677 5677 nil nil nil nil #s(yas--exit 5679 nil)))) nil nil))) nil (26050 5779 932162 941000) 0 nil])
([nil nil ((5679 . 5683)) nil (26050 5779 932162 194000) 0 nil])
([nil nil ((5685 . 5691)) nil (26050 5779 932161 458000) 0 nil])
([nil nil ((5692 . 5708) (#("                    " 0 20 (fontified nil)) . 5691) (undo-tree-id2701 . -16) (undo-tree-id2702 . -16) (undo-tree-id2703 . -16) (5707 . 5711) (5690 . 5708)) nil (26050 5779 932160 492000) 0 nil])
([nil nil ((5691 . 5711)) nil (26050 5779 932157 694000) 0 nil])
([nil nil ((#("id" 0 2 (fontified t)) . -5654) (undo-tree-id2680 . -2) (undo-tree-id2681 . -2) (undo-tree-id2682 . -2) (undo-tree-id2683 . -2) (undo-tree-id2684 . -2) (undo-tree-id2685 . -2) (undo-tree-id2686 . -2) (undo-tree-id2687 . -2) (undo-tree-id2688 . -2) (undo-tree-id2689 . -2) (undo-tree-id2690 . -2) (undo-tree-id2691 . -2) (undo-tree-id2692 . -2) (undo-tree-id2693 . -2) (undo-tree-id2694 . -2) (undo-tree-id2695 . -2) (undo-tree-id2696 . -2) (undo-tree-id2697 . -2) (undo-tree-id2698 . -2) (undo-tree-id2699 . -2) (undo-tree-id2700 . -2) 5656) nil (26050 5779 932156 360000) 0 nil])
([nil nil ((#("synthetic" 0 9 (fontified t)) . -5666) (undo-tree-id2674 . -9) (undo-tree-id2675 . -9) (undo-tree-id2676 . -9) (undo-tree-id2677 . -9) (undo-tree-id2678 . -9) (undo-tree-id2679 . -9) 5675) nil (26050 5779 932143 167000) 0 nil])
([nil nil ((#("is_" 0 3 (fontified t)) . -5663) (undo-tree-id2666 . -3) (undo-tree-id2667 . -2) (undo-tree-id2668 . -3) (undo-tree-id2669 . -3) (undo-tree-id2670 . -3) (undo-tree-id2671 . -3) (undo-tree-id2672 . -3) (undo-tree-id2673 . -3) 5666) nil (26050 5779 932138 442000) 0 nil])
([nil nil ((#("event, " 0 7 (fontified t)) . -5656) (undo-tree-id2656 . -7) (undo-tree-id2657 . -5) (undo-tree-id2658 . -7) (undo-tree-id2659 . -7) (undo-tree-id2660 . -7) (undo-tree-id2661 . -7) (undo-tree-id2662 . -7) (undo-tree-id2663 . -7) (undo-tree-id2664 . -7) (undo-tree-id2665 . -7) 5663) nil (26050 5779 932132 637000) 0 nil])
([nil nil ((#("device_, " 0 9 (fontified t)) . -5647) (undo-tree-id2616 . -7) (undo-tree-id2617 . -9) (undo-tree-id2618 . -7) (undo-tree-id2619 . -7) (undo-tree-id2620 . -7) (undo-tree-id2621 . -7) (undo-tree-id2622 . -7) (undo-tree-id2623 . -7) (undo-tree-id2624 . -7) (undo-tree-id2625 . -8) (undo-tree-id2626 . -7) (undo-tree-id2627 . -7) (undo-tree-id2628 . -7) (undo-tree-id2629 . -7) (undo-tree-id2630 . -7) (undo-tree-id2631 . -7) (undo-tree-id2632 . -7) (undo-tree-id2633 . -7) (undo-tree-id2634 . -7) (undo-tree-id2635 . -7) (undo-tree-id2636 . -7) (undo-tree-id2637 . -7) (undo-tree-id2638 . -7) (undo-tree-id2639 . -7) (undo-tree-id2640 . -7) (undo-tree-id2641 . -7) (undo-tree-id2642 . -7) (undo-tree-id2643 . -7) (undo-tree-id2644 . -7) (undo-tree-id2645 . -8) (undo-tree-id2646 . -9) (undo-tree-id2647 . -9) (undo-tree-id2648 . -9) (undo-tree-id2649 . -9) (undo-tree-id2650 . -9) (undo-tree-id2651 . -9) (undo-tree-id2652 . -9) (undo-tree-id2653 . -9) (undo-tree-id2654 . -9) (undo-tree-id2655 . -9) 5656) nil (26050 5779 932123 850000) 0 nil])
([nil nil ((5647 . 5648)) nil (26050 5779 932097 54000) 0 nil])
([nil nil ((5647 . 5652) (#("e" 0 1 (fontified nil)) . 5647) (5647 . 5648) (#("event" 0 5 (fontified nil)) . -5647) (5647 . 5652) (#("e" 0 1 (fontified t)) . -5647) (undo-tree-id2611 . -1) (undo-tree-id2612 . -1) (undo-tree-id2613 . -1) (undo-tree-id2614 . -1) (undo-tree-id2615 . -1) 5648) nil (26050 5779 932094 643000) 0 nil])
([nil nil ((5652 . 5656)) nil (26050 5779 932080 347000) 0 nil])
([nil nil ((104 . 112) (#(", c_void" 0 8 (fontified t)) . -111) 119 (5610 . 5630) (5659 . 5660) (#(".." 0 2 (fontified t)) . 5660) (#("}" 0 1 (face (rainbow-delimiters-depth-6-face) fontified t)) . 5663) (#("=>" 0 1 (fontified t) 1 2 (syntax-table (1) fontified t)) . 5665) (#("{
" 0 1 (face (rainbow-delimiters-depth-6-face) fontified t) 1 2 (fontified t)) . -5668) 5670 (5686 . 5689) (#("
" 0 1 (fontified t)) . 5690) (5703 . 5704) (#("  " 0 2 (fontified t)) . 5703) (5706 . 5708) (5707 . 5708) 5703 (t 26050 5779 953503 155000)) nil (26050 5910 57758 923000) 0 nil])
([nil nil ((5727 . 5743) (#("                    " 0 20 (fontified nil)) . 5726) (undo-tree-id2836 . -16) (5742 . 5746) (5725 . 5743)) nil (26050 5910 57755 774000) 0 nil])
([nil nil ((5726 . 5746)) nil (26050 5910 57754 220000) 0 nil])
([nil nil ((5746 . 5747)) nil (26050 5910 57753 684000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -5746) (undo-tree-id2834 . -1) (undo-tree-id2835 . -1) 5747) nil (26050 5910 57752 900000) 0 nil])
([nil nil ((5746 . 5754)) nil (26050 5910 57750 873000) 0 nil])
([nil nil ((5752 . 5757) (#("ev" 0 2 (fontified nil)) . 5752) (5752 . 5754) (#("event" 0 5 (fontified nil)) . -5752) (5752 . 5757) (#("ev" 0 2 (fontified t)) . -5752) (undo-tree-id2833 . -2) 5754) nil (26050 5910 57749 798000) 0 nil])
([nil nil ((5757 . 5760)) nil (26050 5910 57747 969000) 0 nil])
([nil nil ((5761 . 5781) (#("                        " 0 24 (fontified nil)) . 5760) (5760 . 5784) (#("                    " 0 20 (fontified nil)) . 5760) (undo-tree-id2832 . -20) (5759 . 5781)) nil (26050 5910 57747 129000) 0 nil])
([nil nil ((5760 . 5784)) nil (26050 5910 57745 470000) 0 nil])
([nil nil ((5784 . 5787)) nil (26050 5910 57744 892000) 0 nil])
([nil nil ((189 . 199) (5784 . 5784) (5784 . 5792) (#("Key" 0 3 (fontified nil)) . 5784) (5784 . 5787) (#("KeyEvent (use winit::event::KeyEvent)" 0 37 (fontified nil)) . -5784) (5784 . 5821) (#("Key" 0 3 (face font-lock-type-face fontified t)) . -5784) (undo-tree-id2831 . -3) 5787) nil (26050 5910 57743 893000) 0 nil])
([nil nil ((5802 . 5805)) nil (26050 5910 57741 824000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -5802) (undo-tree-id2828 . -1) (#(":" 0 1 (fontified t)) . -5803) (undo-tree-id2829 . -1) (#("K" 0 1 (face font-lock-type-face fontified t)) . -5804) (undo-tree-id2830 . -1) 5805) nil (26050 5910 57740 817000) 0 nil])
([nil nil ((#("KeyEvent" 0 8 (face font-lock-type-face fontified t)) . -5794) (undo-tree-id2823 . -5) (undo-tree-id2824 . -8) (undo-tree-id2825 . -8) (undo-tree-id2826 . -6) (undo-tree-id2827 . -5) 5802) nil (26050 5910 57737 429000) 0 nil])
([nil nil ((5794 . 5795)) nil (26050 5910 57733 778000) 0 nil])
([nil nil ((5794 . 5802) (#("K" 0 1 (fontified nil)) . 5794) (5794 . 5795) (#("KeyEvent" 0 8 (fontified nil)) . -5794) (5794 . 5802) (#("K" 0 1 (face font-lock-type-face fontified t)) . -5794) (undo-tree-id2821 . -1) (undo-tree-id2822 . -1) 5795) nil (26050 5910 57732 757000) 0 nil])
([nil nil ((5802 . 5804)) nil (26050 5910 57730 196000) 0 nil])
([nil nil ((#("KeyEvent::" 0 8 (face font-lock-type-face fontified t) 8 10 (fontified t)) . -5794) (undo-tree-id2819 . -8) (undo-tree-id2820 . -10) 5804) nil (26050 5910 57729 493000) 0 nil])
([nil nil ((5794 . 5795)) nil (26050 5910 57727 445000) 0 nil])
([nil nil ((5794 . 5802) (#("K" 0 1 (fontified nil)) . 5794) (5794 . 5795) (#("KeyEvent" 0 8 (fontified nil)) . -5794) (5794 . 5802) (#("K" 0 1 (face font-lock-type-face fontified t)) . -5794) (undo-tree-id2818 . -1) 5795) nil (26050 5910 57726 428000) 0 nil])
([nil nil ((#("KeyEvent" 0 8 (face font-lock-type-face fontified t)) . -5794) (undo-tree-id2815 . -3) (undo-tree-id2816 . -3) (undo-tree-id2817 . -8) 5802) nil (26050 5910 57724 229000) 0 nil])
([nil nil ((5794 . 5795)) nil (26050 5910 57721 624000) 0 nil])
([nil nil ((apply yas--snippet-revive 5794 5800 #s(yas--snippet nil nil #s(yas--exit 5799 nil) 17 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 5799 nil) 17 nil nil nil nil)) (5794 . 5800) (#("env!($0)" 0 8 (fontified nil)) . 5794) (5794 . 5802) (#("e" 0 1 (fontified nil)) . 5794) (5794 . 5795) (#("env!(…)" 0 7 (fontified nil)) . -5794) (5794 . 5801) (#("e" 0 1 (fontified t)) . -5794) (undo-tree-id2814 . -1) 5795) nil (26050 5910 57720 447000) 0 nil])
([nil nil ((5799 . 5800)) nil (26050 5910 57717 853000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -5799) (undo-tree-id2813 . -1) 5800) nil (26050 5910 57716 967000) 0 nil])
([nil nil ((#("env!()" 0 4 (face font-lock-preprocessor-face fontified t) 4 5 (face (rainbow-delimiters-depth-8-face) fontified t) 5 6 (face (rainbow-delimiters-depth-8-face) fontified t)) . 5794)) nil (26050 5910 57715 568000) 0 nil])
([nil nil ((5794 . 5799)) nil (26050 5910 57714 865000) 0 nil])
([nil nil ((#("event" 0 5 (fontified t)) . -5794) (undo-tree-id2812 . -5) 5799) nil (26050 5910 57714 236000) 0 nil])
([nil nil ((5794 . 5803)) nil (26050 5910 57712 879000) 0 nil])
([nil nil ((5803 . 5805)) nil (26050 5910 57712 217000) 0 nil])
([nil nil ((280 . 303) (5794 . 5794) (5794 . 5805) (#("PhysicalKey" 0 11 (fontified nil)) . 5794) (5794 . 5805) (#("PhysicalKey (use winit::keyboard::PhysicalKey)" 0 46 (fontified nil)) . -5794) (5794 . 5840) (#("PhysicalKey" 0 11 (face font-lock-type-face fontified t)) . -5794) (undo-tree-id2796 . -11) (undo-tree-id2797 . -7) (undo-tree-id2798 . -8) (undo-tree-id2799 . -8) (undo-tree-id2800 . -8) (undo-tree-id2801 . -8) (undo-tree-id2802 . -9) (undo-tree-id2803 . -9) (undo-tree-id2804 . -9) (undo-tree-id2805 . -10) (undo-tree-id2806 . -10) (undo-tree-id2807 . -11) (undo-tree-id2808 . -11) (undo-tree-id2809 . -11) (undo-tree-id2810 . -11) (undo-tree-id2811 . -11) 5805) nil (26050 5910 57710 393000) 0 nil])
([nil nil ((5828 . 5830)) nil (26050 5910 57694 533000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 5835 5835 nil nil nil nil #s(yas--exit 5836 nil))) #s(yas--exit 5836 nil) 18 nil #s(yas--field 1 5835 5835 nil nil nil nil #s(yas--exit 5836 nil)) nil nil)) (5830 . 5836) (#("Code($1)$0" 0 10 (fontified nil)) . 5830) (5830 . 5840) (#("Code(…)" 0 7 (fontified nil)) . -5830) (5830 . 5837)) nil (26050 5910 57693 405000) 0 nil])
([nil nil ((apply yas--snippet-revive 5830 5836 #s(yas--snippet nil (#s(yas--field 1 5835 5835 nil nil nil nil #s(yas--exit 5836 nil))) #s(yas--exit 5836 nil) 18 nil #s(yas--field 1 5835 5835 nil nil nil nil #s(yas--exit 5836 nil)) nil nil))) nil (26050 5910 57692 65000) 0 nil])
([nil nil ((5790 . 5791)) nil (26050 5910 57690 847000) 0 nil])
([nil nil ((5791 . 5803) (#("physical_key" 0 12 (fontified nil)) . -5791) (5791 . 5803)) nil (26050 5910 57686 105000) 0 nil])
([nil nil ((5849 . 5878) (t 26050 5910 66844 463000)) nil (26050 5947 732409 309000) 0 nil])
([nil nil ((5878 . 5879)) nil (26050 5947 732408 498000) 0 nil])
([nil nil ((#("+" 0 1 (fontified t)) . -5878) (undo-tree-id2973 . -1) (undo-tree-id2974 . -1) (undo-tree-id2975 . -1) (undo-tree-id2976 . -1) (undo-tree-id2977 . -1) (undo-tree-id2978 . -1) (undo-tree-id2979 . -1) (undo-tree-id2980 . -1) 5879) nil (26050 5947 732407 502000) 0 nil])
([nil nil ((5878 . 5880)) nil (26050 5947 732401 687000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -5877) (undo-tree-id2940 . -1) (undo-tree-id2941 . -1) (undo-tree-id2942 . -1) (undo-tree-id2943 . -1) (undo-tree-id2944 . -1) (undo-tree-id2945 . -1) (undo-tree-id2946 . -1) (undo-tree-id2947 . -1) (undo-tree-id2948 . -1) (undo-tree-id2949 . -1) (undo-tree-id2950 . -1) (undo-tree-id2951 . -1) (undo-tree-id2952 . -1) (undo-tree-id2953 . -1) (undo-tree-id2954 . -1) (undo-tree-id2955 . -1) (undo-tree-id2956 . -1) (undo-tree-id2957 . -1) (undo-tree-id2958 . -1) (undo-tree-id2959 . -1) (#("=" 0 1 (fontified t)) . -5878) (undo-tree-id2960 . -1) (undo-tree-id2961 . -1) (undo-tree-id2962 . -1) (undo-tree-id2963 . -1) (undo-tree-id2964 . -1) (undo-tree-id2965 . -1) (undo-tree-id2966 . -1) (undo-tree-id2967 . -1) (#("?" 0 1 (face rust-question-mark fontified t)) . -5879) (undo-tree-id2968 . -1) (undo-tree-id2969 . -1) (undo-tree-id2970 . -1) (undo-tree-id2971 . -1) (undo-tree-id2972 . -1) 5880) nil (26050 5947 732399 736000) 0 nil])
([nil nil ((5877 . 5880)) nil (26050 5947 732379 404000) 0 nil])
([nil nil ((#("+" 0 1 (fontified t)) . -5879) (undo-tree-id2938 . -1) (undo-tree-id2939 . -1) 5880) nil (26050 5947 732378 674000) 0 nil])
([nil nil ((5877 . 5878) (5879 . 5884)) nil (26050 5947 732376 717000) 0 nil])
([nil nil ((5848 . 5849)) nil (26050 5947 732375 976000) 0 nil])
([nil nil ((#("K" 0 1 (face font-lock-type-face fontified t)) . -5848) (undo-tree-id2935 . -1) (undo-tree-id2936 . -1) (undo-tree-id2937 . -1) 5849) nil (26050 5947 732375 166000) 0 nil])
([nil nil ((5844 . 5845)) nil (26050 5947 732372 564000) 0 nil])
([nil nil ((#("K" 0 1 (face font-lock-type-face fontified t)) . -5844) (undo-tree-id2931 . -1) (undo-tree-id2932 . -1) (undo-tree-id2933 . -1) (undo-tree-id2934 . -1) 5845) nil (26050 5947 732371 766000) 0 nil])
([nil nil ((5848 . 5852)) nil (26050 5947 732368 527000) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-type-face fontified t)) . -5851) (undo-tree-id2924 . -1) (undo-tree-id2925 . -1) (undo-tree-id2926 . -1) (undo-tree-id2927 . -1) (undo-tree-id2928 . -1) (undo-tree-id2929 . -1) (undo-tree-id2930 . -1) 5852) nil (26050 5947 732367 595000) 0 nil])
([nil nil ((5851 . 5855)) nil (26050 5947 732362 852000) 0 nil])
([nil nil ((291 . 292) (299 . 304) (302 . 307) (5848 . 5848) (5848 . 5855) (#("KeyCode" 0 7 (fontified nil)) . 5848) (5848 . 5855) (#("KeyCode (use winit::keyboard::KeyCode)" 0 38 (fontified nil)) . -5848) (5848 . 5886) (#("KeyCode" 0 7 (face font-lock-type-face fontified t)) . -5848) (undo-tree-id2881 . -7) (undo-tree-id2882 . -7) (undo-tree-id2883 . -1) (undo-tree-id2884 . -1) (undo-tree-id2885 . -1) (undo-tree-id2886 . -1) (undo-tree-id2887 . -1) (undo-tree-id2888 . -1) (undo-tree-id2889 . -1) (undo-tree-id2890 . -1) (undo-tree-id2891 . -2) (undo-tree-id2892 . -2) (undo-tree-id2893 . -2) (undo-tree-id2894 . -3) (undo-tree-id2895 . -3) (undo-tree-id2896 . -3) (undo-tree-id2897 . -3) (undo-tree-id2898 . -3) (undo-tree-id2899 . -3) (undo-tree-id2900 . -3) (undo-tree-id2901 . -3) (undo-tree-id2902 . -3) (undo-tree-id2903 . -3) (undo-tree-id2904 . -3) (undo-tree-id2905 . -3) (undo-tree-id2906 . -3) (undo-tree-id2907 . -4) (undo-tree-id2908 . -4) (undo-tree-id2909 . -4) (undo-tree-id2910 . -4) (undo-tree-id2911 . -5) (undo-tree-id2912 . -5) (undo-tree-id2913 . -5) (undo-tree-id2914 . -6) (undo-tree-id2915 . -6) (undo-tree-id2916 . -7) (undo-tree-id2917 . -7) (undo-tree-id2918 . -7) (undo-tree-id2919 . -7) (undo-tree-id2920 . -7) (undo-tree-id2921 . -7) (undo-tree-id2922 . -7) (undo-tree-id2923 . -7) 5855) nil (26050 5947 732360 337000) 0 nil])
([nil nil ((5866 . 5868)) nil (26050 5947 732331 494000) 0 nil])
([nil nil ((5868 . 5869)) nil (26050 5947 732330 764000) 0 nil])
([nil nil ((#("Q" 0 1 (face font-lock-type-face fontified t)) . -5868) (undo-tree-id2877 . -1) (undo-tree-id2878 . -1) (undo-tree-id2879 . -1) (undo-tree-id2880 . -1) 5869) nil (26050 5947 732329 879000) 0 nil])
([nil nil ((5868 . 5869)) nil (26050 5947 732326 254000) 0 nil])
([nil nil ((apply yas--snippet-revive 5868 5874 #s(yas--snippet nil nil #s(yas--exit 5874 nil) 19 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 5874 nil) 19 nil nil nil nil)) (5868 . 5874) (#("Escape$0" 0 8 (fontified nil)) . 5868) (5868 . 5876) (#("E" 0 1 (fontified nil)) . 5868) (5868 . 5869) (#("Escape" 0 6 (fontified nil)) . -5868) (5868 . 5874) (#("E" 0 1 (face font-lock-type-face fontified t)) . -5868) (undo-tree-id2871 . -1) (undo-tree-id2872 . -1) (undo-tree-id2873 . -1) (undo-tree-id2874 . -1) (undo-tree-id2875 . -1) (undo-tree-id2876 . -1) 5869) nil (26050 5947 732324 682000) 0 nil])
([nil nil ((5875 . 5882)) nil (26050 5947 732318 795000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -5881) (undo-tree-id2864 . -1) (undo-tree-id2865 . -1) (undo-tree-id2866 . -1) (undo-tree-id2867 . -1) (undo-tree-id2868 . -1) (undo-tree-id2869 . -1) (undo-tree-id2870 . -1) 5882) nil (26050 5947 732317 717000) 0 nil])
([nil nil ((5882 . 5906) (#("                            " 0 28 (fontified nil)) . 5881) (undo-tree-id2861 . -24) (undo-tree-id2862 . -24) (undo-tree-id2863 . -24) (5905 . 5909) (5880 . 5906)) nil (26050 5947 732311 873000) 0 nil])
([nil nil ((5881 . 5909)) nil (26050 5947 732308 52000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -5960) (undo-tree-id2837 . -3) (undo-tree-id2838 . -3) (undo-tree-id2839 . -3) (undo-tree-id2840 . -3) (undo-tree-id2841 . -3) (undo-tree-id2842 . -3) (undo-tree-id2843 . -3) (undo-tree-id2844 . -3) (undo-tree-id2845 . -3) (undo-tree-id2846 . -3) (undo-tree-id2847 . -3) (undo-tree-id2848 . -3) (undo-tree-id2849 . -3) (undo-tree-id2850 . -3) (undo-tree-id2851 . -3) (undo-tree-id2852 . -3) (undo-tree-id2853 . -3) (undo-tree-id2854 . -3) (undo-tree-id2855 . -3) (undo-tree-id2856 . -3) (undo-tree-id2857 . -3) (undo-tree-id2858 . -3) (undo-tree-id2859 . -4) (undo-tree-id2860 . -4) 5964) nil (26050 5947 732303 288000) 0 nil])
([nil nil ((5909 . 5911) (t 26050 5947 783513 444000)) nil (26050 5956 204438 521000) 0 nil])
([nil nil ((5909 . 5913) (#("el" 0 2 (fontified nil)) . 5909) (5909 . 5911) (#("elwt" 0 4 (fontified nil)) . -5909) (5909 . 5913) (#("el" 0 2 (fontified t)) . -5909) (undo-tree-id2987 . -2) (undo-tree-id2988 . -1) (undo-tree-id2989 . -1) (undo-tree-id2990 . -1) (undo-tree-id2991 . -2) (undo-tree-id2992 . -2) (undo-tree-id2993 . -2) (undo-tree-id2994 . -2) 5911) nil (26050 5956 204436 162000) 0 nil])
([nil nil ((5913 . 5915)) nil (26050 5956 204423 540000) 0 nil])
([nil nil ((apply yas--snippet-revive 5914 5920 #s(yas--snippet nil nil #s(yas--exit 5920 nil) 20 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 5920 nil) 20 nil nil nil nil)) (5914 . 5920) (#("exit()$0" 0 8 (fontified nil)) . 5914) (5914 . 5922) (#("e" 0 1 (fontified nil)) . 5914) (5914 . 5915) (#("exit()" 0 6 (fontified nil)) . -5914) (5914 . 5920) (#("e" 0 1 (fontified t)) . -5914) (undo-tree-id2981 . -1) (undo-tree-id2982 . -1) (undo-tree-id2983 . -1) (undo-tree-id2984 . -1) (undo-tree-id2985 . -1) (undo-tree-id2986 . -1) 5915) nil (26050 5956 204417 665000) 0 nil])
([nil nil ((5920 . 5921) (t 26050 5956 223513 959000)) nil (26050 5957 561718 282000) 0 nil])
([nil nil ((5880 . 5909) (t 26050 5957 580180 709000)) nil (26050 5971 676881 437000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5959 . 5960) (nil fontified nil 5909 . 5960) (5909 . 5960)) nil (26050 5981 246275 788000) 0 nil] [nil nil ((nil rear-nonsticky nil 5936 . 5937) (nil fontified nil 5928 . 5937) (nil fontified nil 5925 . 5928) (nil fontified nil 5918 . 5925) (nil fontified nil 5909 . 5918) (5909 . 5937)) ((#("device_, event, is_synthetic" 0 9 (fontified nil) 9 16 (fontified nil) 16 19 (fontified nil) 19 27 (fontified nil) 27 28 (rear-nonsticky nil fontified nil)) . 5909) (undo-tree-id2995 . -28) (nil rear-nonsticky t 5936 . 5937)) (26050 5971 676561 690000) 0 nil])
([nil nil ((#("button" 0 6 (face font-lock-string-face fontified t)) . -5929) (undo-tree-id2996 . -6) (undo-tree-id2997 . -6) 5935) nil (26050 5981 246273 506000) 0 nil])
nil
([nil nil ((5929 . 5932)) nil (26050 6010 352064 858000) 0 nil])
([nil nil ((7292 . 7294) (t 26050 6011 46850 655000)) nil (26050 6079 640501 496000) 0 nil] [nil nil ((7292 . 7294)) ((#("//" 0 2 (face font-lock-comment-delimiter-face fontified t)) . 7292)) (26050 6010 33132 618000) 0 nil] [nil nil ((7292 . 7294) (t 26050 5981 266848 828000)) ((#("//" 0 2 (face font-lock-comment-delimiter-face fontified t)) . 7292) (undo-tree-id2998 . -2) (undo-tree-id2999 . -2) (undo-tree-id3000 . -2) (undo-tree-id3001 . -2) (undo-tree-id3002 . -2) (undo-tree-id3003 . -2) (undo-tree-id3004 . -2) (undo-tree-id3005 . -2) (undo-tree-id3006 . -2) (undo-tree-id3007 . -2) (undo-tree-id3008 . -2) (t 26050 5997 800183 176000)) (26050 5997 780077 450000) 0 nil])
([nil nil ((7329 . 7331)) nil (26050 6079 640497 323000) 0 nil])
([nil nil ((7329 . 7331)) ((#("//" 0 2 (face font-lock-comment-delimiter-face fontified t)) . 7329) (undo-tree-id3009 . -2) (undo-tree-id3010 . -2) (undo-tree-id3011 . -2) (undo-tree-id3012 . -2) (undo-tree-id3013 . -2) (undo-tree-id3014 . -2) (undo-tree-id3015 . -2) (undo-tree-id3016 . -2) (undo-tree-id3017 . -2) (undo-tree-id3018 . -2) (undo-tree-id3019 . -2) (undo-tree-id3020 . -2) (undo-tree-id3021 . -2) (undo-tree-id3022 . -2) (undo-tree-id3023 . -2) (undo-tree-id3024 . -2) (undo-tree-id3025 . -2) (undo-tree-id3026 . -2) (undo-tree-id3027 . -2) (undo-tree-id3028 . -2) (undo-tree-id3029 . -2) (undo-tree-id3030 . -2) (undo-tree-id3031 . -2) (undo-tree-id3032 . -2) (t 26050 6003 330183 515000)) (26050 6003 309358 761000) 0 nil])
nil
([nil nil ((#("/" 0 1 (fontified t)) . -7329) (undo-tree-id3040 . -1) (undo-tree-id3041 . -1) (undo-tree-id3042 . -1) (undo-tree-id3043 . -1) (undo-tree-id3044 . -1) (undo-tree-id3045 . -1) (undo-tree-id3046 . -1) (undo-tree-id3047 . -1) (undo-tree-id3048 . -1) (undo-tree-id3049 . -1) (undo-tree-id3050 . -1) (undo-tree-id3051 . -1) (undo-tree-id3052 . -1) (undo-tree-id3053 . -1) (undo-tree-id3054 . -1) (undo-tree-id3055 . -1) (undo-tree-id3056 . -1) (undo-tree-id3057 . -1) (undo-tree-id3058 . -1) (undo-tree-id3059 . -1) (undo-tree-id3060 . -1) (undo-tree-id3061 . -1) (undo-tree-id3062 . -1) (undo-tree-id3063 . -1) (undo-tree-id3064 . -1) (undo-tree-id3065 . -1) (undo-tree-id3066 . -1) (undo-tree-id3067 . -1) (undo-tree-id3068 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -7330) (undo-tree-id3069 . -1) (undo-tree-id3070 . -1) (undo-tree-id3071 . -1) (undo-tree-id3072 . -1) (undo-tree-id3073 . -1) (undo-tree-id3074 . -1) (undo-tree-id3075 . -1) (undo-tree-id3076 . -1) (undo-tree-id3077 . -1) (undo-tree-id3078 . -1) (undo-tree-id3079 . -1) (undo-tree-id3080 . -1) (undo-tree-id3081 . -1) (undo-tree-id3082 . -1) (undo-tree-id3083 . -1) (undo-tree-id3084 . -1) (undo-tree-id3085 . -1) (undo-tree-id3086 . -1) (undo-tree-id3087 . -1) (undo-tree-id3088 . -1) (undo-tree-id3089 . -1) (undo-tree-id3090 . -1) (undo-tree-id3091 . -1) (undo-tree-id3092 . -1) (undo-tree-id3093 . -1) (undo-tree-id3094 . -1) (undo-tree-id3095 . -1) (undo-tree-id3096 . -1) 7331 (t 26050 6079 660188 202000)) nil (26050 6121 28815 531000) 0 nil])
nil
([nil nil ((#("/" 0 1 (fontified t)) . -7292) (undo-tree-id3033 . -1) (undo-tree-id3034 . -1) (undo-tree-id3035 . -1) (undo-tree-id3036 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -7293) (undo-tree-id3037 . -1) (undo-tree-id3038 . -1) (undo-tree-id3039 . -1) 7294) nil (26050 6121 28761 50000) 0 nil])
([nil nil ((4981 . 4985) (#("    " 0 4 (fontified nil)) . 4980) (undo-tree-id3205 . -4) (undo-tree-id3206 . -4) (undo-tree-id3207 . -4) (4980 . 4985) (#("    " 0 4 (fontified nil)) . 4979) (4979 . 4983) (4979 . 4980) (t 26050 6121 36857 405000)) nil (26050 7004 646507 463000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5057 . 5058) (nil fontified nil 4980 . 5058) (4980 . 5058)) nil (26050 7004 646504 226000) 0 nil])
([nil nil ((5057 . 5058)) nil (26050 7004 646503 371000) 0 nil])
([nil nil ((5059 . 5063) (#("        " 0 8 (fontified nil)) . 5058) (5058 . 5066) (#("    " 0 4 (fontified nil)) . 5058) (undo-tree-id3202 . -4) (undo-tree-id3203 . -4) (undo-tree-id3204 . -4) (5057 . 5063)) nil (26050 7004 646502 440000) 0 nil])
([nil nil ((5058 . 5066)) nil (26050 7004 646499 416000) 0 nil])
([nil nil ((5066 . 5068)) nil (26050 7004 646498 768000) 0 nil])
([nil nil ((5066 . 5074) (#("in" 0 2 (fontified nil)) . 5066) (5066 . 5068) (#("instance" 0 8 (fontified nil)) . -5066) (5066 . 5074) (#("in" 0 2 (face font-lock-keyword-face fontified t)) . -5066) (undo-tree-id3196 . -2) (undo-tree-id3197 . -1) (undo-tree-id3198 . -2) (undo-tree-id3199 . -2) (undo-tree-id3200 . -2) (undo-tree-id3201 . -2) 5068) nil (26050 7004 646497 370000) 0 nil])
([nil nil ((5074 . 5078)) nil (26050 7004 646491 748000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -5077) (undo-tree-id3193 . -1) (undo-tree-id3194 . -1) (undo-tree-id3195 . -1) 5078) nil (26050 7004 646490 874000) 0 nil])
([nil nil ((#("em" 0 2 (fontified t)) . -5075) (undo-tree-id3181 . -2) (undo-tree-id3182 . -1) (undo-tree-id3183 . -1) (undo-tree-id3184 . -1) (undo-tree-id3185 . -2) (undo-tree-id3186 . -2) (undo-tree-id3187 . -2) (undo-tree-id3188 . -2) (undo-tree-id3189 . -2) (undo-tree-id3190 . -2) (undo-tree-id3191 . -2) (undo-tree-id3192 . -2) 5077) nil (26050 7004 646487 798000) 0 nil])
([nil nil ((#("instance." 0 9 (fontified t)) . -5066) (undo-tree-id3162 . -9) (undo-tree-id3163 . -8) (undo-tree-id3164 . -8) (undo-tree-id3165 . -9) (undo-tree-id3166 . -9) (undo-tree-id3167 . -9) (undo-tree-id3168 . -9) (undo-tree-id3169 . -9) (undo-tree-id3170 . -9) (undo-tree-id3171 . -9) (undo-tree-id3172 . -9) (undo-tree-id3173 . -9) (undo-tree-id3174 . -9) (undo-tree-id3175 . -9) (undo-tree-id3176 . -9) (undo-tree-id3177 . -9) (undo-tree-id3178 . -9) (undo-tree-id3179 . -9) (undo-tree-id3180 . -9) 5075) nil (26050 7004 646478 566000) 0 nil])
([nil nil ((5066 . 5069)) nil (26050 7004 646465 304000) 0 nil])
([nil nil ((apply yas--snippet-revive 5066 5072 #s(yas--snippet nil nil nil 21 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 21 nil nil nil nil)) (5066 . 5072) (#("unsafe" 0 6 (fontified nil)) . 5066) (5066 . 5072) (#("uns" 0 3 (fontified nil)) . 5066) (5066 . 5069) (#("unsafe" 0 6 (fontified nil)) . -5066) (5066 . 5072) (#("uns" 0 3 (fontified t)) . -5066) (undo-tree-id3154 . -3) (undo-tree-id3155 . -1) (undo-tree-id3156 . -2) (undo-tree-id3157 . -2) (undo-tree-id3158 . -3) (undo-tree-id3159 . -3) (undo-tree-id3160 . -3) (undo-tree-id3161 . -3) 5069) nil (26050 7004 646463 896000) 0 nil])
([nil nil ((5072 . 5075)) nil (26050 7004 646456 906000) 0 nil])
([nil nil ((5076 . 5084) (#("            " 0 12 (fontified nil)) . 5075) (undo-tree-id3151 . -8) (undo-tree-id3152 . -8) (undo-tree-id3153 . -8) (5083 . 5087) (5074 . 5084)) nil (26050 7004 646456 36000) 0 nil])
([nil nil ((5075 . 5087)) nil (26050 7004 646452 960000) 0 nil])
([nil nil ((5087 . 5090)) nil (26050 7004 646452 361000) 0 nil])
([nil nil ((5087 . 5095) (#("ins" 0 3 (fontified nil)) . 5087) (5087 . 5090) (#("instance" 0 8 (fontified nil)) . -5087) (5087 . 5095) (#("ins" 0 3 (fontified t)) . -5087) (undo-tree-id3145 . -3) (undo-tree-id3146 . -1) (undo-tree-id3147 . -2) (undo-tree-id3148 . -2) (undo-tree-id3149 . -3) (undo-tree-id3150 . -3) 5090) nil (26050 7004 646451 42000) 0 nil])
([nil nil ((5095 . 5097)) nil (26050 7004 646399 242000) 0 nil])
([nil nil ((apply yas--snippet-revive 5096 5124 #s(yas--snippet nil nil #s(yas--exit 5124 nil) 22 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 5124 nil) 22 nil nil nil nil)) (5096 . 5124) (#("enumerate_physical_devices()$0" 0 30 (fontified nil)) . 5096) (5096 . 5126) (#("e" 0 1 (fontified nil)) . 5096) (5096 . 5097) (#("enumerate_physical_devices()" 0 28 (fontified nil)) . -5096) (5096 . 5124) (#("e" 0 1 (fontified t)) . -5096) (undo-tree-id3140 . -1) (undo-tree-id3141 . -1) (undo-tree-id3142 . -1) (undo-tree-id3143 . -1) (undo-tree-id3144 . -1) 5097) nil (26050 7004 646397 571000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5188 . 5189) (nil fontified nil 5124 . 5189) (5124 . 5189)) nil (26050 7004 647468 895000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -5124) (undo-tree-id3208 . -1) (undo-tree-id3209 . -1) (undo-tree-id3210 . -1) (undo-tree-id3211 . -1) (undo-tree-id3212 . -1) (undo-tree-id3213 . -1) (undo-tree-id3214 . -1) (undo-tree-id3215 . -1) (undo-tree-id3216 . -1) (undo-tree-id3217 . -1) (undo-tree-id3218 . -1) (undo-tree-id3219 . -1) (undo-tree-id3220 . -1) (undo-tree-id3221 . -1) (undo-tree-id3222 . -1) (undo-tree-id3223 . -1) (undo-tree-id3224 . -1) (undo-tree-id3225 . -1) (undo-tree-id3226 . -1) (undo-tree-id3227 . -1) (undo-tree-id3228 . -1) (undo-tree-id3229 . -1) (undo-tree-id3230 . -1) (undo-tree-id3231 . -1) (undo-tree-id3232 . -1) (undo-tree-id3233 . -1) (undo-tree-id3234 . -1) (undo-tree-id3235 . -1) (undo-tree-id3236 . -1) (undo-tree-id3237 . -1) (undo-tree-id3238 . -1) (#(" " 0 1 (fontified t)) . -5125) (undo-tree-id3239 . -1) (undo-tree-id3240 . -1) (undo-tree-id3241 . -1) (undo-tree-id3242 . -1) (undo-tree-id3243 . -1) (undo-tree-id3244 . -1) (undo-tree-id3245 . -1) (undo-tree-id3246 . -1) (undo-tree-id3247 . -1) (undo-tree-id3248 . -1) (undo-tree-id3249 . -1) (undo-tree-id3250 . -1) (undo-tree-id3251 . -1) (undo-tree-id3252 . -1) (undo-tree-id3253 . -1) (undo-tree-id3254 . -1) (undo-tree-id3255 . -1) (undo-tree-id3256 . -1) (undo-tree-id3257 . -1) (undo-tree-id3258 . -1) (undo-tree-id3259 . -1) (undo-tree-id3260 . -1) (undo-tree-id3261 . -1) (undo-tree-id3262 . -1) (undo-tree-id3263 . -1) (undo-tree-id3264 . -1) (undo-tree-id3265 . -1) (undo-tree-id3266 . -1) (undo-tree-id3267 . -1) (undo-tree-id3268 . -1) (#(" " 0 1 (fontified t)) . -5126) (undo-tree-id3269 . -1) (undo-tree-id3270 . -1) (undo-tree-id3271 . -1) (undo-tree-id3272 . -1) (undo-tree-id3273 . -1) (undo-tree-id3274 . -1) (undo-tree-id3275 . -1) (undo-tree-id3276 . -1) (undo-tree-id3277 . -1) (undo-tree-id3278 . -1) (undo-tree-id3279 . -1) (undo-tree-id3280 . -1) (undo-tree-id3281 . -1) (undo-tree-id3282 . -1) (undo-tree-id3283 . -1) (undo-tree-id3284 . -1) (undo-tree-id3285 . -1) (undo-tree-id3286 . -1) (undo-tree-id3287 . -1) (undo-tree-id3288 . -1) (undo-tree-id3289 . -1) (undo-tree-id3290 . -1) (undo-tree-id3291 . -1) (undo-tree-id3292 . -1) (undo-tree-id3293 . -1) (undo-tree-id3294 . -1) (undo-tree-id3295 . -1) (undo-tree-id3296 . -1) (undo-tree-id3297 . -1) (#(" " 0 1 (fontified t)) . -5127) (undo-tree-id3298 . -1) (undo-tree-id3299 . -1) (undo-tree-id3300 . -1) (undo-tree-id3301 . -1) (undo-tree-id3302 . -1) (undo-tree-id3303 . -1) (undo-tree-id3304 . -1) (undo-tree-id3305 . -1) (undo-tree-id3306 . -1) (undo-tree-id3307 . -1) (undo-tree-id3308 . -1) (undo-tree-id3309 . -1) (undo-tree-id3310 . -1) (undo-tree-id3311 . -1) (undo-tree-id3312 . -1) (undo-tree-id3313 . -1) (undo-tree-id3314 . -1) (undo-tree-id3315 . -1) (undo-tree-id3316 . -1) (undo-tree-id3317 . -1) (undo-tree-id3318 . -1) (undo-tree-id3319 . -1) (undo-tree-id3320 . -1) (undo-tree-id3321 . -1) (undo-tree-id3322 . -1) (undo-tree-id3323 . -1) (undo-tree-id3324 . -1) (undo-tree-id3325 . -1) (#(" " 0 1 (fontified t)) . -5128) (undo-tree-id3326 . -1) (undo-tree-id3327 . -1) (undo-tree-id3328 . -1) (undo-tree-id3329 . -1) (undo-tree-id3330 . -1) (undo-tree-id3331 . -1) (undo-tree-id3332 . -1) (undo-tree-id3333 . -1) (undo-tree-id3334 . -1) (undo-tree-id3335 . -1) (undo-tree-id3336 . -1) (undo-tree-id3337 . -1) (undo-tree-id3338 . -1) (undo-tree-id3339 . -1) (undo-tree-id3340 . -1) (undo-tree-id3341 . -1) (undo-tree-id3342 . -1) (undo-tree-id3343 . -1) (undo-tree-id3344 . -1) (undo-tree-id3345 . -1) (undo-tree-id3346 . -1) (undo-tree-id3347 . -1) (undo-tree-id3348 . -1) (undo-tree-id3349 . -1) (undo-tree-id3350 . -1) (undo-tree-id3351 . -1) (undo-tree-id3352 . -1) (#(" " 0 1 (fontified t)) . -5129) (undo-tree-id3353 . -1) (undo-tree-id3354 . -1) (undo-tree-id3355 . -1) (undo-tree-id3356 . -1) (undo-tree-id3357 . -1) (undo-tree-id3358 . -1) (undo-tree-id3359 . -1) (undo-tree-id3360 . -1) (undo-tree-id3361 . -1) (undo-tree-id3362 . -1) (undo-tree-id3363 . -1) (undo-tree-id3364 . -1) (undo-tree-id3365 . -1) (undo-tree-id3366 . -1) (undo-tree-id3367 . -1) (undo-tree-id3368 . -1) (undo-tree-id3369 . -1) (undo-tree-id3370 . -1) (undo-tree-id3371 . -1) (undo-tree-id3372 . -1) (undo-tree-id3373 . -1) (undo-tree-id3374 . -1) (undo-tree-id3375 . -1) (undo-tree-id3376 . -1) (undo-tree-id3377 . -1) (undo-tree-id3378 . -1) (#(" " 0 1 (fontified t)) . -5130) (undo-tree-id3379 . -1) (undo-tree-id3380 . -1) (undo-tree-id3381 . -1) (undo-tree-id3382 . -1) (undo-tree-id3383 . -1) (undo-tree-id3384 . -1) (undo-tree-id3385 . -1) (undo-tree-id3386 . -1) (undo-tree-id3387 . -1) (undo-tree-id3388 . -1) (undo-tree-id3389 . -1) (undo-tree-id3390 . -1) (undo-tree-id3391 . -1) (undo-tree-id3392 . -1) (undo-tree-id3393 . -1) (undo-tree-id3394 . -1) (undo-tree-id3395 . -1) (undo-tree-id3396 . -1) (undo-tree-id3397 . -1) (undo-tree-id3398 . -1) (undo-tree-id3399 . -1) (undo-tree-id3400 . -1) (undo-tree-id3401 . -1) (undo-tree-id3402 . -1) (undo-tree-id3403 . -1) (#(" " 0 1 (fontified t)) . -5131) (undo-tree-id3404 . -1) (undo-tree-id3405 . -1) (undo-tree-id3406 . -1) (undo-tree-id3407 . -1) (undo-tree-id3408 . -1) (undo-tree-id3409 . -1) (undo-tree-id3410 . -1) (undo-tree-id3411 . -1) (undo-tree-id3412 . -1) (undo-tree-id3413 . -1) (undo-tree-id3414 . -1) (undo-tree-id3415 . -1) (undo-tree-id3416 . -1) (undo-tree-id3417 . -1) (undo-tree-id3418 . -1) (undo-tree-id3419 . -1) (undo-tree-id3420 . -1) (undo-tree-id3421 . -1) (undo-tree-id3422 . -1) (undo-tree-id3423 . -1) (undo-tree-id3424 . -1) (undo-tree-id3425 . -1) (undo-tree-id3426 . -1) (undo-tree-id3427 . -1) (#(" " 0 1 (fontified t)) . -5132) (undo-tree-id3428 . -1) (undo-tree-id3429 . -1) (undo-tree-id3430 . -1) (undo-tree-id3431 . -1) (undo-tree-id3432 . -1) (undo-tree-id3433 . -1) (undo-tree-id3434 . -1) (undo-tree-id3435 . -1) (undo-tree-id3436 . -1) (undo-tree-id3437 . -1) (undo-tree-id3438 . -1) (undo-tree-id3439 . -1) (undo-tree-id3440 . -1) (undo-tree-id3441 . -1) (undo-tree-id3442 . -1) (undo-tree-id3443 . -1) (undo-tree-id3444 . -1) (undo-tree-id3445 . -1) (undo-tree-id3446 . -1) (undo-tree-id3447 . -1) (undo-tree-id3448 . -1) (undo-tree-id3449 . -1) (undo-tree-id3450 . -1) (#(" " 0 1 (fontified t)) . -5133) (undo-tree-id3451 . -1) (undo-tree-id3452 . -1) (undo-tree-id3453 . -1) (undo-tree-id3454 . -1) (undo-tree-id3455 . -1) (undo-tree-id3456 . -1) (undo-tree-id3457 . -1) (undo-tree-id3458 . -1) (undo-tree-id3459 . -1) (undo-tree-id3460 . -1) (undo-tree-id3461 . -1) (undo-tree-id3462 . -1) (undo-tree-id3463 . -1) (undo-tree-id3464 . -1) (undo-tree-id3465 . -1) (undo-tree-id3466 . -1) (undo-tree-id3467 . -1) (undo-tree-id3468 . -1) (undo-tree-id3469 . -1) (undo-tree-id3470 . -1) (undo-tree-id3471 . -1) (undo-tree-id3472 . -1) (#(" " 0 1 (fontified t)) . -5134) (undo-tree-id3473 . -1) (undo-tree-id3474 . -1) (undo-tree-id3475 . -1) (undo-tree-id3476 . -1) (undo-tree-id3477 . -1) (undo-tree-id3478 . -1) (undo-tree-id3479 . -1) (undo-tree-id3480 . -1) (undo-tree-id3481 . -1) (undo-tree-id3482 . -1) (undo-tree-id3483 . -1) (undo-tree-id3484 . -1) (undo-tree-id3485 . -1) (undo-tree-id3486 . -1) (undo-tree-id3487 . -1) (undo-tree-id3488 . -1) (undo-tree-id3489 . -1) (undo-tree-id3490 . -1) (undo-tree-id3491 . -1) (undo-tree-id3492 . -1) (undo-tree-id3493 . -1) (#(" " 0 1 (fontified t)) . -5135) (undo-tree-id3494 . -1) (undo-tree-id3495 . -1) (undo-tree-id3496 . -1) (undo-tree-id3497 . -1) (undo-tree-id3498 . -1) (undo-tree-id3499 . -1) (undo-tree-id3500 . -1) (undo-tree-id3501 . -1) (undo-tree-id3502 . -1) (undo-tree-id3503 . -1) (undo-tree-id3504 . -1) (undo-tree-id3505 . -1) (undo-tree-id3506 . -1) (undo-tree-id3507 . -1) (undo-tree-id3508 . -1) (undo-tree-id3509 . -1) (undo-tree-id3510 . -1) (undo-tree-id3511 . -1) (undo-tree-id3512 . -1) (undo-tree-id3513 . -1) (#(" " 0 1 (fontified t)) . -5136) (undo-tree-id3514 . -1) (undo-tree-id3515 . -1) (undo-tree-id3516 . -1) (undo-tree-id3517 . -1) (undo-tree-id3518 . -1) (undo-tree-id3519 . -1) (undo-tree-id3520 . -1) (undo-tree-id3521 . -1) (undo-tree-id3522 . -1) (undo-tree-id3523 . -1) (undo-tree-id3524 . -1) (undo-tree-id3525 . -1) (undo-tree-id3526 . -1) (undo-tree-id3527 . -1) (undo-tree-id3528 . -1) (undo-tree-id3529 . -1) (undo-tree-id3530 . -1) (undo-tree-id3531 . -1) (undo-tree-id3532 . -1) (#(" " 0 1 (fontified t)) . -5137) (undo-tree-id3533 . -1) (undo-tree-id3534 . -1) (undo-tree-id3535 . -1) (undo-tree-id3536 . -1) (undo-tree-id3537 . -1) (undo-tree-id3538 . -1) (undo-tree-id3539 . -1) (undo-tree-id3540 . -1) (undo-tree-id3541 . -1) (undo-tree-id3542 . -1) (undo-tree-id3543 . -1) (undo-tree-id3544 . -1) (undo-tree-id3545 . -1) (undo-tree-id3546 . -1) (undo-tree-id3547 . -1) (undo-tree-id3548 . -1) (undo-tree-id3549 . -1) (undo-tree-id3550 . -1) (#(" " 0 1 (fontified t)) . -5138) (undo-tree-id3551 . -1) (undo-tree-id3552 . -1) (undo-tree-id3553 . -1) (undo-tree-id3554 . -1) (undo-tree-id3555 . -1) (undo-tree-id3556 . -1) (undo-tree-id3557 . -1) (undo-tree-id3558 . -1) (undo-tree-id3559 . -1) (undo-tree-id3560 . -1) (undo-tree-id3561 . -1) (undo-tree-id3562 . -1) (undo-tree-id3563 . -1) (undo-tree-id3564 . -1) (undo-tree-id3565 . -1) (undo-tree-id3566 . -1) (undo-tree-id3567 . -1) (#(" " 0 1 (fontified t)) . -5139) (undo-tree-id3568 . -1) (undo-tree-id3569 . -1) (undo-tree-id3570 . -1) (undo-tree-id3571 . -1) (undo-tree-id3572 . -1) (undo-tree-id3573 . -1) (undo-tree-id3574 . -1) (undo-tree-id3575 . -1) (undo-tree-id3576 . -1) 5140) nil (26050 7007 149601 156000) 0 nil] [nil nil ((#("devices()                " 0 7 (fontified t) 7 8 (face (rainbow-delimiters-depth-4-face) fontified t) 8 9 (face (rainbow-delimiters-depth-4-face) fontified t) 9 25 (fontified t)) . -5115) (undo-tree-id3097 . -9) (undo-tree-id3098 . -25) (undo-tree-id3099 . -25) (undo-tree-id3100 . -9) (undo-tree-id3101 . -9) (undo-tree-id3102 . -9) (undo-tree-id3103 . -9) (undo-tree-id3104 . -9) (undo-tree-id3105 . -9) (undo-tree-id3106 . -9) (undo-tree-id3107 . -9) (undo-tree-id3108 . -9) (undo-tree-id3109 . -9) (undo-tree-id3110 . -9) (undo-tree-id3111 . -9) (undo-tree-id3112 . -9) (undo-tree-id3113 . -9) (undo-tree-id3114 . -9) (undo-tree-id3115 . -9) (undo-tree-id3116 . -9) (undo-tree-id3117 . -9) (undo-tree-id3118 . -9) (undo-tree-id3119 . -9) (undo-tree-id3120 . -9) (undo-tree-id3121 . -9) (undo-tree-id3122 . -9) (undo-tree-id3123 . -9) (undo-tree-id3124 . -9) (undo-tree-id3125 . -9) (undo-tree-id3126 . -9) (undo-tree-id3127 . -9) (undo-tree-id3128 . -9) (undo-tree-id3129 . -24) (undo-tree-id3130 . -24) (undo-tree-id3131 . -24) (undo-tree-id3132 . -24) (undo-tree-id3133 . -24) (undo-tree-id3134 . -25) (undo-tree-id3135 . -25) (undo-tree-id3136 . -25) (undo-tree-id3137 . -25) (undo-tree-id3138 . -25) (undo-tree-id3139 . -25) 5140) ((5115 . 5140)) (26050 7004 646385 563000) 0 nil])
([nil nil ((178 . 181) (#("Window" 0 6 (face font-lock-type-face fontified t)) . -178) (undo-tree-id3587 . -6) 184 (191 . 197) (#("Key" 0 3 (face font-lock-type-face fontified t)) . -191) (undo-tree-id3588 . -3) 194 (248 . 286) (#("r}, keyboa" 0 1 (face font-lock-type-face fontified t) 1 2 (face (rainbow-delimiters-depth-2-face) fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 10 (face font-lock-constant-face fontified t)) . 277) (#("d::{PhysicalKey, KeyCode" 0 1 (face font-lock-constant-face fontified t) 1 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-2-face) fontified t) 4 12 (face font-lock-type-face fontified t) 12 15 (face font-lock-type-face fontified t) 15 17 (fontified t) 17 20 (face font-lock-type-face fontified t) 20 24 (face font-lock-type-face fontified t)) . -288) (undo-tree-id3589 . -24) 312 (5095 . 5112) (5124 . 5141) (#("
" 0 1 (fontified t)) . 5173) (#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 5191) (undo-tree-id3590 . -5) (#(" {
                   " 0 1 (fontified t) 1 2 (face (rainbow-delimiters-depth-6-face) fontified t) 2 3 (fontified t) 3 22 (fontified t)) . 5983) (#("    " 0 4 (fontified t)) . 6053) (undo-tree-id3591 . -4) (undo-tree-id3592 . -4) (undo-tree-id3593 . -4) (undo-tree-id3594 . -4) (undo-tree-id3595 . -4) (#("    " 0 4 (fontified t)) . 6121) (undo-tree-id3596 . -4) (undo-tree-id3597 . -4) (undo-tree-id3598 . -4) (#("    " 0 4 (fontified t)) . 6198) (#("    " 0 4 (fontified t)) . 6235) (#("   " 0 3 (fontified t)) . 6241) 6235 (#(" " 0 1 (fontified t)) . 6264) (#("    }
                " 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-7-face) fontified t) 5 6 (fontified t) 6 22 (fontified t)) . 6289) (6312 . 6313) 5134 (t 26050 7007 170245 43000)) nil (26050 7029 732346 666000) 0 nil])
nil
([nil nil ((5070 . 5075)) nil (26050 7029 732333 913000) 0 nil])
([nil nil ((#("h" 0 1 (face font-lock-variable-name-face fontified t)) . -5074) (undo-tree-id3584 . -1) (undo-tree-id3585 . -1) (undo-tree-id3586 . -1) 5075) nil (26050 7029 732332 989000) 0 nil])
([nil nil ((5074 . 5075)) nil (26050 7029 732330 305000) 0 nil])
([nil nil ((5075 . 5077)) nil (26050 7029 732329 625000) 0 nil])
([nil nil ((#("y" 0 1 (face font-lock-variable-name-face fontified t)) . -5076) (undo-tree-id3577 . -1) (undo-tree-id3578 . -1) (undo-tree-id3579 . -1) (undo-tree-id3580 . -1) (undo-tree-id3581 . -1) (undo-tree-id3582 . -1) (undo-tree-id3583 . -1) 5077) nil (26050 7029 732327 532000) 0 nil])
([nil nil ((5092 . 5093) (5242 . 5243) (5076 . 5076) (5076 . 5092)) nil (26050 7029 732314 46000) 0 nil])
([nil nil ((5246 . 5254) (#("        " 0 8 (fontified nil)) . 5245) (undo-tree-id3602 . -8) (undo-tree-id3603 . -8) (undo-tree-id3604 . -8) (5244 . 5254) (t 26050 7029 753579 760000)) nil (26050 7062 80719 37000) 0 nil])
([nil nil ((5262 . 5266) (#("    " 0 4 (fontified nil)) . 5261) (undo-tree-id3599 . -4) (undo-tree-id3600 . -4) (undo-tree-id3601 . -4) (5260 . 5266)) nil (26050 7062 80715 29000) 0 nil])
([nil nil ((5266 . 5269)) nil (26050 7062 80707 791000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5330 . 5331) (nil fontified nil 5269 . 5331) (5269 . 5331)) nil (26050 7062 80706 803000) 0 nil])
([nil nil ((5334 . 5338) (5313 . 5321) (#("    " 0 4 (fontified t)) . 5313) 5266) nil (26050 7062 80704 313000) 0 nil])
([nil nil ((5311 . 5319)) nil (26050 7068 839646 985000) 0 nil])
([nil nil ((#("VkPhysicalDevice " 0 16 (face font-lock-type-face fontified t) 16 17 (fontified t)) . -5286) (undo-tree-id3634 . -17) (undo-tree-id3635 . -17) 5303 (t 26050 7062 103581 745000)) nil (26050 7083 888804 278000) 0 nil] [nil nil ((#("device" 0 6 (fontified t)) . -5303) (undo-tree-id3608 . -6) (undo-tree-id3609 . -6) 5309 (t 26050 7062 103581 745000)) ((5303 . 5309)) (26050 7068 766799 382000) 0 nil])
([nil nil ((5292 . 5295)) nil (26050 7083 888802 4000) 0 nil])
([nil nil ((#("VkPhysicalDevice " 0 16 (face font-lock-type-face fontified t) 16 17 (fontified t)) . -5286) (undo-tree-id3605 . -17) (undo-tree-id3606 . -17) (undo-tree-id3607 . -17) 5303) ((5286 . 5303)) (26050 7068 766571 910000) 0 nil])
([nil nil ((#("V" 0 1 (face font-lock-type-face fontified t)) . -5294) (undo-tree-id3633 . -1) 5295) nil (26050 7083 888801 102000) 0 nil])
nil
([nil nil ((5294 . 5296)) nil (26050 7083 888799 670000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -5295) (undo-tree-id3632 . -1) 5296) nil (26050 7083 888798 966000) 0 nil])
([nil nil ((5295 . 5298)) nil (26050 7083 888797 387000) 0 nil])
([nil nil ((#("L" 0 1 (fontified t)) . -5296) (undo-tree-id3629 . -1) (undo-tree-id3630 . -1) (#("L" 0 1 (fontified t)) . -5297) (undo-tree-id3631 . -1) 5298) nil (26050 7083 888796 512000) 0 nil])
([nil nil ((5296 . 5299)) nil (26050 7083 888793 497000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -5298) (undo-tree-id3628 . -1) 5299) nil (26050 7083 888792 251000) 0 nil])
([nil nil ((5298 . 5301)) nil (26050 7083 888790 827000) 0 nil])
([nil nil ((#("j" 0 1 (face font-lock-type-face fontified t)) . -5300) (undo-tree-id3623 . -1) (undo-tree-id3624 . -1) (undo-tree-id3625 . -1) (undo-tree-id3626 . -1) (undo-tree-id3627 . -1) 5301) nil (26050 7083 888789 718000) 0 nil])
([nil nil ((5300 . 5301)) nil (26050 7083 888785 483000) 0 nil])
([nil nil ((5298 . 5312) (#("Phy" 0 3 (fontified nil)) . 5298) (5298 . 5301) (#("PhysicalDevice" 0 14 (fontified nil)) . -5298) (5298 . 5312) (#("Phy" 0 3 (face font-lock-type-face fontified t)) . -5298) (undo-tree-id3610 . -3) (undo-tree-id3611 . -1) (undo-tree-id3612 . -2) (undo-tree-id3613 . -2) (undo-tree-id3614 . -2) (undo-tree-id3615 . -2) (undo-tree-id3616 . -2) (undo-tree-id3617 . -2) (undo-tree-id3618 . -2) (undo-tree-id3619 . -3) (undo-tree-id3620 . -3) (undo-tree-id3621 . -3) (undo-tree-id3622 . -3) 5301) nil (26050 7083 888782 521000) 0 nil])
([nil nil ((5294 . 5295)) nil (26050 7083 888763 41000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5366 . 5367) (nil fontified nil 5245 . 5367) (5245 . 5367) (t 26050 7083 910249 749000)) nil (26050 7113 906568 74000) 0 nil])
([nil nil ((5367 . 5376) (t 26050 7113 916918 260000)) nil (26050 7147 561473 929000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5677 . 5678) (nil fontified nil 5376 . 5678) (5376 . 5678)) nil (26050 7147 561473 128000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -5376) 5372) nil (26050 7147 561471 911000) 0 nil])
([nil nil ((5711 . 5712)) nil (26050 7147 561470 845000) 0 nil])
([nil nil ((5711 . 5719)) nil (26050 7147 561469 536000) 0 nil])
([nil nil ((5711 . 5736) (#("instance" 0 8 (fontified nil)) . 5711) (5711 . 5719) (#("instance: &ash::Instance," 0 25 (fontified nil)) . -5711) (5711 . 5736) (#("instance" 0 8 (fontified t)) . -5711) (undo-tree-id3636 . -8) (undo-tree-id3637 . -8) (undo-tree-id3638 . -1) (undo-tree-id3639 . -1) (undo-tree-id3640 . -3) (undo-tree-id3641 . -3) (undo-tree-id3642 . -4) (undo-tree-id3643 . -4) (undo-tree-id3644 . -5) (undo-tree-id3645 . -5) (undo-tree-id3646 . -6) (undo-tree-id3647 . -6) (undo-tree-id3648 . -7) (undo-tree-id3649 . -7) (undo-tree-id3650 . -8) (undo-tree-id3651 . -8) (undo-tree-id3652 . -8) (undo-tree-id3653 . -8) (undo-tree-id3654 . -8) (undo-tree-id3655 . -8) (undo-tree-id3656 . -8) (undo-tree-id3657 . -8) 5719) nil (26050 7147 561465 13000) 0 nil])
([nil nil ((#("        
" 0 8 (fontified t) 8 9 (fontified t)) . -5671) 5713 (t 26050 7147 583586 995000)) nil (26050 7167 261603 965000) 0 nil])
([nil nil ((#("isDeviceSuitable" 0 16 (face font-lock-function-name-face fontified t)) . -5685) (undo-tree-id3658 . -16) (undo-tree-id3659 . -16) (undo-tree-id3660 . -1) (undo-tree-id3661 . -2) (undo-tree-id3662 . -3) (undo-tree-id3663 . -4) (undo-tree-id3664 . -5) (undo-tree-id3665 . -6) (undo-tree-id3666 . -7) (undo-tree-id3667 . -8) (undo-tree-id3668 . -9) (undo-tree-id3669 . -10) (undo-tree-id3670 . -11) (undo-tree-id3671 . -12) (undo-tree-id3672 . -13) (undo-tree-id3673 . -14) (undo-tree-id3674 . -15) (undo-tree-id3675 . -16) (undo-tree-id3676 . -16) (undo-tree-id3677 . -16) (undo-tree-id3678 . -16) (undo-tree-id3679 . -16) (undo-tree-id3680 . -16) (undo-tree-id3681 . -16) (undo-tree-id3682 . -16) 5701) nil (26050 7167 261600 956000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5711 . 5712) (nil fontified nil 5685 . 5712) (5685 . 5712)) nil (26050 7167 261574 816000) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . -5747) (undo-tree-id3683 . -1) (undo-tree-id3684 . -1) (undo-tree-id3685 . -1) (undo-tree-id3686 . -1) (undo-tree-id3687 . -1) (undo-tree-id3688 . -1) (undo-tree-id3689 . -1) (undo-tree-id3690 . -1) (undo-tree-id3691 . -1) (undo-tree-id3692 . -1) 5748 (t 26050 7167 283588 203000)) nil (26050 7183 252003 366000) 0 nil])
([nil nil ((5670 . 5679) (t 26050 7183 273589 183000)) nil (26050 7201 810437 182000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5826 . 5827) (nil fontified nil 5679 . 5827) (5679 . 5827)) nil (26050 7201 810435 636000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -5679) 5676) nil (26050 7201 810430 696000) 0 nil])
([nil nil ((5925 . 5934) (t 26050 7201 830256 987000)) nil (26050 7378 364516 90000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6130 . 6131) (nil fontified nil 5934 . 6131) (5934 . 6131)) nil (26050 7378 364514 274000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -5934) 6022) nil (26050 7378 364509 45000) 0 nil])
([nil nil ((#("device" 0 6 (face font-lock-variable-name-face fontified t)) . -5888) (undo-tree-id3701 . -6) (undo-tree-id3702 . -6) (undo-tree-id3703 . -6) (undo-tree-id3704 . -6) (undo-tree-id3705 . -6) (undo-tree-id3706 . -6) (undo-tree-id3707 . -6) (undo-tree-id3708 . -6) (undo-tree-id3709 . -6) (undo-tree-id3710 . -6) (undo-tree-id3711 . -6) (undo-tree-id3712 . -6) (undo-tree-id3713 . -6) (undo-tree-id3714 . -6) (undo-tree-id3715 . -6) (undo-tree-id3716 . -6) (undo-tree-id3717 . -6) (undo-tree-id3718 . -6) 5894 (t 26050 7378 386934 484000)) nil (26050 7395 914318 364000) 0 nil])
([nil nil ((5888 . 5904)) nil (26050 7395 914304 852000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-variable-name-face fontified t)) . -5903) (undo-tree-id3693 . -1) (undo-tree-id3694 . -1) (undo-tree-id3695 . -1) (undo-tree-id3696 . -1) (undo-tree-id3697 . -1) (undo-tree-id3698 . -1) (undo-tree-id3699 . -1) (undo-tree-id3700 . -1) 5904) nil (26050 7395 914300 835000) 0 nil])
([nil nil ((6161 . 6165) (#("    " 0 4 (fontified nil)) . 6160) (undo-tree-id3755 . -4) (undo-tree-id3756 . -4) (undo-tree-id3757 . -4) (6159 . 6165) (t 26050 7395 936935 559000)) nil (26050 7861 922894 152000) 0 nil])
([nil nil ((6165 . 6184)) nil (26050 7861 922891 400000) 0 nil])
([nil nil ((6184 . 6189)) nil (26050 7861 922890 805000) 0 nil])
([nil nil ((6188 . 6191)) nil (26050 7861 922890 294000) 0 nil])
([nil nil ((6188 . 6212) (#("ins" 0 3 (fontified nil)) . 6188) (6188 . 6191) (#("instance: &ash::Instance" 0 24 (fontified nil)) . -6188) (6188 . 6212) (#("ins" 0 3 (fontified t)) . -6188) (undo-tree-id3741 . -3) (undo-tree-id3742 . -3) (undo-tree-id3743 . -1) (undo-tree-id3744 . -1) (undo-tree-id3745 . -2) (undo-tree-id3746 . -3) (undo-tree-id3747 . -3) (undo-tree-id3748 . -3) (undo-tree-id3749 . -3) (undo-tree-id3750 . -3) (undo-tree-id3751 . -3) (undo-tree-id3752 . -3) (undo-tree-id3753 . -3) (undo-tree-id3754 . -3) 6191) nil (26050 7861 922888 974000) 0 nil])
([nil nil ((6212 . 6215)) nil (26050 7861 922879 684000) 0 nil])
([nil nil ((6214 . 6249) (#("p" 0 1 (fontified nil)) . 6214) (6214 . 6215) (#("physical_device: vk::PhysicalDevice" 0 35 (fontified nil)) . -6214) (6214 . 6249) (#("p" 0 1 (fontified t)) . -6214) (undo-tree-id3730 . -1) (undo-tree-id3731 . -1) (undo-tree-id3732 . -1) (undo-tree-id3733 . -1) (undo-tree-id3734 . -1) (undo-tree-id3735 . -1) (undo-tree-id3736 . -1) (undo-tree-id3737 . -1) (undo-tree-id3738 . -1) (undo-tree-id3739 . -1) (undo-tree-id3740 . -1) 6215) nil (26050 7861 922878 452000) 0 nil])
([nil nil ((6249 . 6250)) nil (26050 7861 922870 659000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -6249) (undo-tree-id3722 . -1) (undo-tree-id3723 . -1) (undo-tree-id3724 . -1) (undo-tree-id3725 . -1) (undo-tree-id3726 . -1) (undo-tree-id3727 . -1) (undo-tree-id3728 . -1) (undo-tree-id3729 . -1) 6250) nil (26050 7861 922869 534000) 0 nil])
([nil nil ((6250 . 6257)) nil (26050 7861 922863 781000) 0 nil])
([nil nil ((6257 . 6260)) nil (26050 7861 922863 130000) 0 nil])
([nil nil ((6261 . 6265) (#("        " 0 8 (fontified nil)) . 6260) (6260 . 6268) (#("    " 0 4 (fontified nil)) . 6260) (undo-tree-id3719 . -4) (undo-tree-id3720 . -4) (undo-tree-id3721 . -4) (6259 . 6265)) nil (26050 7861 922861 521000) 0 nil])
([nil nil ((6260 . 6268)) nil (26050 7861 922852 277000) 0 nil])
([nil nil ((449 . 451)) nil (26050 7861 922851 36000) 0 nil])
([nil nil ((nil rear-nonsticky nil 627 . 628) (nil fontified nil 451 . 628) (451 . 628)) nil (26050 7861 922846 902000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6674 . 6675) (nil fontified nil 6447 . 6675) (6447 . 6675) (t 26050 7861 946964 157000)) nil (26050 7912 104072 388000) 0 nil])
([nil nil ((#("       " 0 7 (fontified t)) . -6447) 6343) nil (26050 7912 104070 156000) 0 nil])
([nil nil ((6668 . 6677)) nil (26050 7912 104065 140000) 0 nil])
([nil nil ((6670 . 6678) (#("        " 0 8 (fontified nil)) . 6669) (undo-tree-id3870 . -8) (6677 . 6678) (t 26050 7912 156967 235000)) nil (26050 8166 620930 256000) 0 nil])
([nil nil ((6678 . 6680)) nil (26050 8166 620928 532000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -6678) (undo-tree-id3868 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -6679) (undo-tree-id3869 . -1) 6680) nil (26050 8166 620927 695000) 0 nil])
([nil nil ((6678 . 6684)) nil (26050 8166 620925 558000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-variable-name-face fontified t)) . -6682) (undo-tree-id3866 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -6683) (undo-tree-id3867 . -1) 6684) nil (26050 8166 620924 678000) 0 nil])
([nil nil ((6682 . 6696)) nil (26050 8166 620922 388000) 0 nil])
([nil nil ((6696 . 6705)) nil (26050 8166 620921 829000) 0 nil])
([nil nil ((6705 . 6725)) nil (26050 8166 620921 246000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -6723) (undo-tree-id3864 . -1) (#("n" 0 1 (fontified t)) . -6724) (undo-tree-id3865 . -1) 6725) nil (26050 8166 620920 328000) 0 nil])
([nil nil ((6723 . 6726)) nil (26050 8166 620918 176000) 0 nil])
([nil nil ((6725 . 6739) (#("q" 0 1 (fontified nil)) . 6725) (6725 . 6726) (#("queue_families" 0 14 (fontified nil)) . -6725) (6725 . 6739) (#("q" 0 1 (fontified t)) . -6725) (undo-tree-id3863 . -1) 6726) nil (26050 8166 620917 134000) 0 nil])
([nil nil ((6739 . 6742)) nil (26050 8166 620915 101000) 0 nil])
([nil nil ((6743 . 6751) (#("            " 0 12 (fontified nil)) . 6742) (undo-tree-id3862 . -8) (6750 . 6754) (6741 . 6751)) nil (26050 8166 620914 285000) 0 nil])
([nil nil ((6742 . 6754)) nil (26050 8166 620912 620000) 0 nil])
([nil nil ((6754 . 6757)) nil (26050 8166 620912 19000) 0 nil])
([nil nil ((6757 . 6758)) nil (26050 8166 620911 406000) 0 nil])
([nil nil ((6757 . 6769) (#("q" 0 1 (fontified nil)) . 6757) (6757 . 6758) (#("queue_family" 0 12 (fontified nil)) . -6757) (6757 . 6769) (#("q" 0 1 (fontified t)) . -6757) (undo-tree-id3861 . -1) 6758) nil (26050 8166 620910 232000) 0 nil])
([nil nil ((6769 . 6770)) nil (26050 8166 620908 294000) 0 nil])
([nil nil ((6770 . 6781) (#("queue_count" 0 11 (fontified nil)) . -6770) (6770 . 6781)) nil (26050 8166 620907 593000) 0 nil])
([nil nil ((6781 . 6782)) nil (26050 8166 620906 676000) 0 nil])
([nil nil ((#(">" 0 1 (syntax-table (1) fontified t)) . -6781) (undo-tree-id3860 . -1) 6782) nil (26050 8166 620905 933000) 0 nil])
([nil nil ((6781 . 6789)) nil (26050 8166 620904 580000) 0 nil])
([nil nil ((6789 . 6790)) nil (26050 8166 620903 983000) 0 nil])
([nil nil ((6789 . 6801) (#("q" 0 1 (fontified nil)) . 6789) (6789 . 6790) (#("queue_family" 0 12 (fontified nil)) . -6789) (6789 . 6801) (#("q" 0 1 (fontified t)) . -6789) (undo-tree-id3859 . -1) 6790) nil (26050 8166 620902 910000) 0 nil])
([nil nil ((6801 . 6803)) nil (26050 8166 620900 904000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -6802) (undo-tree-id3858 . -1) 6803) nil (26050 8166 620900 111000) 0 nil])
([nil nil ((6802 . 6804)) nil (26050 8166 620898 836000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -6802) (undo-tree-id3856 . -1) (#("b" 0 1 (fontified t)) . -6803) (undo-tree-id3857 . -1) 6804) nil (26050 8166 620897 821000) 0 nil])
([nil nil ((6802 . 6804)) nil (26050 8166 620895 625000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -6802) (undo-tree-id3854 . -1) (#("i" 0 1 (fontified t)) . -6803) (undo-tree-id3855 . -1) 6804) nil (26050 8166 620894 789000) 0 nil])
([nil nil ((6802 . 6803)) nil (26050 8166 620892 581000) 0 nil])
([nil nil ((6802 . 6813) (#("q" 0 1 (fontified nil)) . 6802) (6802 . 6803) (#("queue_flags" 0 11 (fontified nil)) . -6802) (6802 . 6813) (#("q" 0 1 (fontified t)) . -6802) (undo-tree-id3853 . -1) 6803) nil (26050 8166 620891 418000) 0 nil])
([nil nil ((6813 . 6815)) nil (26050 8166 620889 525000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6823 6847 nil nil nil t #s(yas--exit 6848 nil))) #s(yas--exit 6848 nil) 23 nil #s(yas--field 1 6823 6847 nil nil nil t #s(yas--exit 6848 nil)) nil nil)) (6814 . 6829) (#("contains(${1:other})$0" 0 22 (fontified nil)) . 6814) (6814 . 6836) (#("c" 0 1 (fontified nil)) . 6814) (6814 . 6815) (#("contains(…)" 0 11 (fontified nil)) . -6814) (6814 . 6825) (#("c" 0 1 (fontified t)) . -6814) (undo-tree-id3852 . -1) 6815) nil (26050 8166 620888 471000) 0 nil])
([nil nil ((#("other" 0 5 (fontified nil)) . 6824) (undo-tree-id3851 . -5) (6823 . 6824)) nil (26050 8166 620885 213000) 0 nil])
([nil nil ((6824 . 6828)) nil (26050 8166 620883 899000) 0 nil])
([nil nil ((6828 . 6837)) nil (26050 8166 620883 374000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-type-face fontified t)) . -6836) (undo-tree-id3848 . -1) (undo-tree-id3849 . -1) (undo-tree-id3850 . -1) 6837) nil (26050 8166 620882 571000) 0 nil])
([nil nil ((6836 . 6837)) nil (26050 8166 620879 871000) 0 nil])
([nil nil ((6827 . 6837) (#("QueueFlags" 0 10 (fontified nil)) . 6827) (undo-tree-id3832 . -10) (6827 . 6837) (#("QueueFlags" 0 10 (face font-lock-type-face fontified t)) . -6827) (undo-tree-id3833 . -10) (undo-tree-id3834 . -10) (undo-tree-id3835 . -10) (undo-tree-id3836 . -9) (undo-tree-id3837 . -9) (undo-tree-id3838 . -9) (undo-tree-id3839 . -9) (undo-tree-id3840 . -10) (undo-tree-id3841 . -10) (undo-tree-id3842 . -10) (undo-tree-id3843 . -10) (undo-tree-id3844 . -10) (undo-tree-id3845 . -10) (undo-tree-id3846 . -10) (undo-tree-id3847 . -10) 6837) nil (26050 8166 620878 536000) 0 nil])
([nil nil ((6837 . 6840)) nil (26050 8166 620866 770000) 0 nil])
([nil nil ((6839 . 6847) (#("G" 0 1 (fontified nil)) . 6839) (undo-tree-id3819 . -1) (6839 . 6840) (#("GRAPHICS" 0 8 (fontified nil)) . -6839) (undo-tree-id3820 . -8) (6839 . 6847) (#("G" 0 1 (face font-lock-type-face fontified t)) . -6839) (undo-tree-id3821 . -1) (undo-tree-id3822 . -1) (undo-tree-id3823 . -1) (undo-tree-id3824 . -1) (undo-tree-id3825 . -1) (undo-tree-id3826 . -1) (undo-tree-id3827 . -1) (undo-tree-id3828 . -1) (undo-tree-id3829 . -1) (undo-tree-id3830 . -1) (undo-tree-id3831 . -1) 6840) nil (26050 8166 620865 344000) 0 nil])
([nil nil ((apply yas--snippet-revive 6814 6848 #s(yas--snippet nil (#s(yas--field 1 6823 6847 nil nil nil t #s(yas--exit 6848 nil))) #s(yas--exit 6848 nil) 23 nil #s(yas--field 1 6823 6847 nil nil nil t #s(yas--exit 6848 nil)) nil nil))) nil (26050 8166 620855 484000) 0 nil])
([nil nil ((6848 . 6851)) nil (26050 8166 620854 833000) 0 nil])
([nil nil ((6852 . 6864) (#("                " 0 16 (fontified nil)) . 6851) (6851 . 6867) (#("            " 0 12 (fontified nil)) . 6851) (undo-tree-id3816 . -12) (undo-tree-id3817 . -12) (undo-tree-id3818 . -12) (6850 . 6864)) nil (26050 8166 620853 803000) 0 nil])
([nil nil ((6851 . 6867)) nil (26050 8166 620850 741000) 0 nil])
([nil nil ((6867 . 6869)) nil (26050 8166 620850 139000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -6867) (undo-tree-id3802 . -1) (undo-tree-id3803 . -1) (undo-tree-id3804 . -1) (undo-tree-id3805 . -1) (undo-tree-id3806 . -1) (undo-tree-id3807 . -1) (undo-tree-id3808 . -1) (undo-tree-id3809 . -1) (undo-tree-id3810 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -6868) (undo-tree-id3811 . -1) (undo-tree-id3812 . -1) (undo-tree-id3813 . -1) (undo-tree-id3814 . -1) (undo-tree-id3815 . -1) 6869) nil (26050 8166 620848 953000) 0 nil])
([nil nil ((6867 . 6870)) nil (26050 8166 620839 423000) 0 nil])
([nil nil ((6870 . 6871)) nil (26050 8166 620838 816000) 0 nil])
([nil nil ((6867 . 6887) (#("queu" 0 4 (fontified nil)) . 6867) (6867 . 6871) (#("queue_family_indices" 0 20 (fontified nil)) . -6867) (6867 . 6887) (#("queu" 0 4 (fontified t)) . -6867) (undo-tree-id3785 . -4) (undo-tree-id3786 . -1) (undo-tree-id3787 . -2) (undo-tree-id3788 . -2) (undo-tree-id3789 . -3) (undo-tree-id3790 . -3) (undo-tree-id3791 . -3) (undo-tree-id3792 . -3) (undo-tree-id3793 . -3) (undo-tree-id3794 . -3) (undo-tree-id3795 . -3) (undo-tree-id3796 . -3) (undo-tree-id3797 . -3) (undo-tree-id3798 . -3) (undo-tree-id3799 . -4) (undo-tree-id3800 . -4) (undo-tree-id3801 . -4) 6871) nil (26050 8166 620837 207000) 0 nil])
([nil nil ((6887 . 6888)) nil (26050 8166 620824 914000) 0 nil])
([nil nil ((6888 . 6903) (#("graphics_family" 0 15 (fontified nil)) . -6888) (6888 . 6903)) nil (26050 8166 620824 116000) 0 nil])
([nil nil ((6903 . 6907)) nil (26050 8166 620823 187000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 6911 6916 nil nil nil t #s(yas--exit 6917 nil))) #s(yas--exit 6917 nil) 24 nil #s(yas--field 1 6911 6916 nil nil nil t #s(yas--exit 6917 nil)) nil nil)) (6906 . 6914) (#("Some(${1:()})$0" 0 15 (fontified nil)) . 6906) (6906 . 6921) (#("S" 0 1 (fontified nil)) . 6906) (6906 . 6907) (#("Some(…)" 0 7 (fontified nil)) . -6906) (6906 . 6913) (#("S" 0 1 (face font-lock-type-face fontified t)) . -6906) (undo-tree-id3780 . -1) (undo-tree-id3781 . -1) (undo-tree-id3782 . -1) (undo-tree-id3783 . -1) (undo-tree-id3784 . -1) 6907) nil (26050 8166 620821 658000) 0 nil])
([nil nil ((6912 . 6913) (#("()" 0 1 (face (rainbow-delimiters-depth-6-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-6-face) fontified nil)) . 6912) (undo-tree-id3779 . -2) (6911 . 6912)) nil (26050 8166 620816 428000) 0 nil])
([nil nil ((6911 . 6916) (#("in" 0 2 (fontified nil)) . 6911) (undo-tree-id3766 . -2) (6911 . 6913) (#("index" 0 5 (fontified nil)) . -6911) (undo-tree-id3767 . -5) (6911 . 6916) (#("in" 0 2 (face font-lock-keyword-face fontified t)) . -6911) (undo-tree-id3768 . -2) (undo-tree-id3769 . -2) (undo-tree-id3770 . -2) (undo-tree-id3771 . -1) (undo-tree-id3772 . -2) (undo-tree-id3773 . -2) (undo-tree-id3774 . -2) (undo-tree-id3775 . -2) (undo-tree-id3776 . -2) (undo-tree-id3777 . -2) (undo-tree-id3778 . -2) 6913) nil (26050 8166 620813 629000) 0 nil])
([nil nil ((apply yas--snippet-revive 6906 6917 #s(yas--snippet nil (#s(yas--field 1 6911 6916 nil nil nil t #s(yas--exit 6917 nil))) #s(yas--exit 6917 nil) 24 nil #s(yas--field 1 6911 6916 nil nil nil t #s(yas--exit 6917 nil)) nil nil))) nil (26050 8166 620802 728000) 0 nil])
([nil nil ((6933 . 6945) (#("            " 0 12 (fontified nil)) . 6932) (undo-tree-id3763 . -12) (undo-tree-id3764 . -12) (undo-tree-id3765 . -12) (6931 . 6945)) nil (26050 8166 620801 760000) 0 nil])
([nil nil ((6945 . 6947)) nil (26050 8166 620798 294000) 0 nil])
([nil nil ((6945 . 6950) (#("in" 0 2 (fontified nil)) . 6945) (6945 . 6947) (#("index" 0 5 (fontified nil)) . -6945) (6945 . 6950) (#("in" 0 2 (face font-lock-keyword-face fontified t)) . -6945) (undo-tree-id3758 . -2) (undo-tree-id3759 . -1) (undo-tree-id3760 . -2) (undo-tree-id3761 . -2) (undo-tree-id3762 . -2) 6947) nil (26050 8166 620795 678000) 0 nil])
([nil nil ((6950 . 6956)) nil (26050 8166 620781 841000) 0 nil])
([nil nil ((6933 . 6945) (#("            " 0 12 (fontified nil)) . 6932) (undo-tree-id3903 . -12) (undo-tree-id3904 . -12) (undo-tree-id3905 . -12) (undo-tree-id3906 . -12) (undo-tree-id3907 . -12) (6931 . 6945) (t 26050 8166 643649 510000)) nil (26050 8183 111085 136000) 0 nil])
([nil nil ((6945 . 6948)) nil (26050 8183 111080 959000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -6946) (undo-tree-id3896 . -1) (undo-tree-id3897 . -1) (undo-tree-id3898 . -1) (undo-tree-id3899 . -1) (undo-tree-id3900 . -1) (#("f" 0 1 (fontified t)) . -6947) (undo-tree-id3901 . -1) (undo-tree-id3902 . -1) 6948) nil (26050 8183 111079 772000) 0 nil])
([nil nil ((6946 . 6948)) nil (26050 8183 111073 736000) 0 nil])
([nil nil ((6948 . 6949)) nil (26050 8183 111073 101000) 0 nil])
([nil nil ((6948 . 6968) (#("q" 0 1 (fontified nil)) . 6948) (6948 . 6949) (#("queue_family_indices" 0 20 (fontified nil)) . -6948) (6948 . 6968) (#("q" 0 1 (fontified t)) . -6948) (undo-tree-id3890 . -1) (undo-tree-id3891 . -1) (undo-tree-id3892 . -1) (undo-tree-id3893 . -1) (undo-tree-id3894 . -1) (undo-tree-id3895 . -1) 6949) nil (26050 8183 111071 844000) 0 nil])
([nil nil ((6968 . 6971)) nil (26050 8183 111065 719000) 0 nil])
([nil nil ((apply yas--snippet-revive 6969 6982 #s(yas--snippet nil nil #s(yas--exit 6982 nil) 25 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 6982 nil) 25 nil nil nil nil)) (6969 . 6982) (#("is_complete()$0" 0 15 (fontified nil)) . 6969) (6969 . 6984) (#("is" 0 2 (fontified nil)) . 6969) (6969 . 6971) (#("is_complete()" 0 13 (fontified nil)) . -6969) (6969 . 6982) (#("is" 0 2 (fontified t)) . -6969) (undo-tree-id3884 . -2) (undo-tree-id3885 . -1) (undo-tree-id3886 . -1) (undo-tree-id3887 . -2) (undo-tree-id3888 . -2) (undo-tree-id3889 . -2) 6971) nil (26050 8183 111064 109000) 0 nil])
([nil nil ((6982 . 6985)) nil (26050 8183 110992 6000) 0 nil])
([nil nil ((6986 . 6998) (#("                " 0 16 (fontified nil)) . 6985) (6985 . 7001) (#("            " 0 12 (fontified nil)) . 6985) (undo-tree-id3881 . -12) (undo-tree-id3882 . -12) (undo-tree-id3883 . -12) (6984 . 6998)) nil (26050 8183 110990 968000) 0 nil])
([nil nil ((6985 . 7001)) nil (26050 8183 110987 860000) 0 nil])
([nil nil ((7001 . 7002)) nil (26050 8183 110987 219000) 0 nil])
([nil nil ((apply yas--snippet-revive 7001 7007 #s(yas--snippet nil nil nil 26 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 26 nil nil nil nil)) (7001 . 7007) (#("break;" 0 6 (fontified nil)) . 7001) (7001 . 7007) (#("b" 0 1 (fontified nil)) . 7001) (7001 . 7002) (#("break" 0 5 (fontified nil)) . -7001) (7001 . 7006) (#("b" 0 1 (fontified t)) . -7001) (undo-tree-id3875 . -1) (undo-tree-id3876 . -1) (undo-tree-id3877 . -1) (undo-tree-id3878 . -1) (undo-tree-id3879 . -1) (undo-tree-id3880 . -1) 7002) nil (26050 8183 110985 472000) 0 nil])
([nil nil ((7007 . 7008)) nil (26050 8183 110978 266000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -7007) (undo-tree-id3871 . -1) (undo-tree-id3872 . -1) (undo-tree-id3873 . -1) (undo-tree-id3874 . -1) 7008) nil (26050 8183 110973 838000) 0 nil])
([nil nil ((6041 . 6050) (6066 . 6074) (6102 . 6108) (6785 . 6801) (6848 . 6860) 6777 (t 26050 8183 163650 526000)) nil (26050 8186 236250 389000) 0 nil])
([nil nil ((7109 . 7117) (#("        " 0 8 (fontified nil)) . 7108) (undo-tree-id3912 . -8) (undo-tree-id3913 . -8) (undo-tree-id3914 . -8) (7107 . 7117) (t 26050 8186 256984 49000)) nil (26050 8198 94609 962000) 0 nil])
([nil nil ((7117 . 7118)) nil (26050 8198 94605 731000) 0 nil])
([nil nil ((7117 . 7137) (#("q" 0 1 (fontified nil)) . 7117) (7117 . 7118) (#("queue_family_indices" 0 20 (fontified nil)) . -7117) (7117 . 7137) (#("q" 0 1 (fontified t)) . -7117) (undo-tree-id3908 . -1) (undo-tree-id3909 . -1) (undo-tree-id3910 . -1) (undo-tree-id3911 . -1) 7118) nil (26050 8198 94601 723000) 0 nil])
([nil nil ((#("u32" 0 3 (face font-lock-type-face fontified t)) . -6456) (undo-tree-id3921 . -3) (undo-tree-id3922 . -3) (undo-tree-id3923 . -2) (undo-tree-id3924 . -2) (undo-tree-id3925 . -2) (undo-tree-id3926 . -2) (undo-tree-id3927 . -2) (undo-tree-id3928 . -3) (undo-tree-id3929 . -3) (undo-tree-id3930 . -3) (undo-tree-id3931 . -3) (undo-tree-id3932 . -3) (undo-tree-id3933 . -3) (undo-tree-id3934 . -3) (undo-tree-id3935 . -3) 6459 (t 26050 8198 123651 442000)) nil (26050 8207 500281 766000) 0 nil])
([nil nil ((6456 . 6457)) nil (26050 8207 500268 789000) 0 nil])
([nil nil ((6456 . 6474) (#("Q" 0 1 (fontified nil)) . 6456) (6456 . 6457) (#("QueueFamilyIndices" 0 18 (fontified nil)) . -6456) (6456 . 6474) (#("Q" 0 1 (face font-lock-type-face fontified t)) . -6456) (undo-tree-id3915 . -1) (undo-tree-id3916 . -1) (undo-tree-id3917 . -1) (undo-tree-id3918 . -1) (undo-tree-id3919 . -1) (undo-tree-id3920 . -1) 6457) nil (26050 8207 500264 606000) 0 nil])
([nil nil ((6336 . 6344) (#("        " 0 8 (fontified nil)) . 6335) (undo-tree-id3939 . -8) (undo-tree-id3940 . -8) (undo-tree-id3941 . -8) (6334 . 6344) (t 26050 8207 520318 686000)) nil (26050 8320 170201 46000) 0 nil])
([nil nil ((nil rear-nonsticky nil 9077 . 9078) (nil fontified nil 6344 . 9078) (6344 . 9078)) nil (26050 8320 170197 669000) 0 nil])
([nil nil ((#("return true;" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t)) . 9087) (undo-tree-id3937 . -12) (undo-tree-id3938 . -12)) nil (26050 8320 170195 871000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 9087) (undo-tree-id3936 . -1)) nil (26050 8320 170189 775000) 0 nil])
([nil nil ((#("        " 0 4 (fontified t) 4 8 (fontified t)) . -9083) (undo-tree-id3942 . -4) (undo-tree-id3943 . -4) (undo-tree-id3944 . -4) (undo-tree-id3945 . -4) (undo-tree-id3946 . -4) (undo-tree-id3947 . -4) (undo-tree-id3948 . -4) 9087 (t 26050 8320 193658 934000)) nil (26050 8321 81153 526000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-function-name-face fontified t)) . -9110) (undo-tree-id3965 . -1) (undo-tree-id3966 . -1) (undo-tree-id3967 . -1) (undo-tree-id3968 . -1) (undo-tree-id3969 . -1) (undo-tree-id3970 . -1) (undo-tree-id3971 . -1) (undo-tree-id3972 . -1) (undo-tree-id3973 . -1) (undo-tree-id3974 . -1) (undo-tree-id3975 . -1) (#("s" 0 1 (face font-lock-function-name-face fontified t)) . -9111) (undo-tree-id3976 . -1) (undo-tree-id3977 . -1) (undo-tree-id3978 . -1) (undo-tree-id3979 . -1) (undo-tree-id3980 . -1) (undo-tree-id3981 . -1) (undo-tree-id3982 . -1) (undo-tree-id3983 . -1) (undo-tree-id3984 . -1) (undo-tree-id3985 . -1) 9112 (t 26050 8321 90325 655000)) nil (26050 8330 157132 34000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-function-name-face fontified t)) . -9109) (undo-tree-id3949 . -1) (undo-tree-id3950 . -1) (undo-tree-id3951 . -1) (undo-tree-id3952 . -1) (undo-tree-id3953 . -1) (undo-tree-id3954 . -1) (undo-tree-id3955 . -1) (undo-tree-id3956 . -1) (undo-tree-id3957 . -1) (undo-tree-id3958 . -1) (undo-tree-id3959 . -1) (undo-tree-id3960 . -1) (undo-tree-id3961 . -1) (undo-tree-id3962 . -1) (undo-tree-id3963 . -1) (undo-tree-id3964 . -1) 9110) nil (26050 8330 157115 878000) 0 nil])
([nil nil ((9109 . 9110)) nil (26050 8330 157095 918000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -6344) 6366 (t 26050 8330 180326 212000)) nil (26050 8341 164551 336000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6463 . 6464) (nil fontified nil 6335 . 6464) (6335 . 6464) (t 26050 8341 186993 554000)) nil (26050 8367 942567 576000) 0 nil])
([nil nil ((6464 . 6473)) nil (26050 8379 2730 530000) 0 nil])
([nil nil ((7152 . 7153) (t 26050 8367 963661 862000)) nil (26050 8403 394514 329000) 0 nil] [nil nil ((#("major" 0 5 (face font-lock-preprocessor-face fontified t)) . -7163) (undo-tree-id4021 . -5) (undo-tree-id4022 . -5) (undo-tree-id4023 . -5) (undo-tree-id4024 . -5) (undo-tree-id4025 . -5) (undo-tree-id4026 . -5) (undo-tree-id4027 . -5) (undo-tree-id4028 . -5) (undo-tree-id4029 . -5) (undo-tree-id4030 . -5) 7168 (t 26050 8367 963661 862000)) ((7163 . 7168)) (26050 8378 438084 776000) 0 nil])
([nil nil ((7153 . 7157)) nil (26050 8403 394509 241000) 0 nil])
([nil nil ((#("version_" 0 8 (face font-lock-preprocessor-face fontified t)) . -7155) (undo-tree-id4010 . -8) (undo-tree-id4011 . -8) (undo-tree-id4012 . -8) (undo-tree-id4013 . -8) (undo-tree-id4014 . -8) (undo-tree-id4015 . -8) (undo-tree-id4016 . -8) (undo-tree-id4017 . -8) (undo-tree-id4018 . -8) (undo-tree-id4019 . -8) (undo-tree-id4020 . -8) 7163) ((7155 . 7163)) (26050 8378 57748 265000) 0 nil])
([nil nil ((#("k" 0 1 (face font-lock-preprocessor-face fontified t)) . -7158) (undo-tree-id4046 . -1) (undo-tree-id4047 . -1) (undo-tree-id4048 . -1) (undo-tree-id4049 . -1) (#("_" 0 1 (face font-lock-preprocessor-face fontified t)) . -7159) (undo-tree-id4050 . -1) (undo-tree-id4051 . -1) 7160 (t 26050 8403 416997 371000)) nil (26050 8439 706086 476000) 0 nil])
([nil nil ((#("vk_" 0 3 (face font-lock-preprocessor-face fontified t)) . -7152) (undo-tree-id3998 . -3) (undo-tree-id3999 . -3) (undo-tree-id4000 . -3) (undo-tree-id4001 . -3) (undo-tree-id4002 . -3) (undo-tree-id4003 . -3) (undo-tree-id4004 . -3) (undo-tree-id4005 . -3) (undo-tree-id4006 . -3) (undo-tree-id4007 . -3) (undo-tree-id4008 . -3) (undo-tree-id4009 . -3) 7155) ((7152 . 7155)) (26050 8377 749943 822000) 0 nil])
([nil nil ((7158 . 7161)) nil (26050 8439 706071 366000) 0 nil])
([nil nil ((7152 . 7156)) ((#("vk_m" 0 3 (face font-lock-preprocessor-face fontified t) 3 4 (face font-lock-preprocessor-face fontified t)) . 7152) (undo-tree-id4032 . -4) (undo-tree-id4033 . -4) (undo-tree-id4034 . -4) (undo-tree-id4035 . -4) (undo-tree-id4036 . -4) (undo-tree-id4037 . -4) (undo-tree-id4038 . -4) (undo-tree-id4039 . -4) (undo-tree-id4040 . -4) (undo-tree-id4041 . -4) (undo-tree-id4042 . -4) (undo-tree-id4043 . -4) (undo-tree-id4044 . -3) (undo-tree-id4045 . -4)) (26050 8377 406764 57000) 0 nil])
([nil nil ((#("!" 0 1 (face font-lock-preprocessor-face fontified t)) . -7174) (undo-tree-id4052 . -1) (undo-tree-id4053 . -1) (undo-tree-id4054 . -1) 7175 (t 26050 8439 726999 599000)) nil (26050 8448 260057 615000) 0 nil])
([nil nil ((#("m" 0 1 (face font-lock-preprocessor-face fontified t)) . -7155) (undo-tree-id3986 . -1) (undo-tree-id3987 . -1) (undo-tree-id3988 . -1) (undo-tree-id3989 . -1) (undo-tree-id3990 . -1) (undo-tree-id3991 . -1) (undo-tree-id3992 . -1) (undo-tree-id3993 . -1) (undo-tree-id3994 . -1) (undo-tree-id3995 . -1) (undo-tree-id3996 . -1) (undo-tree-id3997 . -1) 7156) ((7155 . 7156)) (26050 8377 58653 247000) 0 nil])
([nil nil ((#("major" 0 5 (fontified t)) . -7169) (undo-tree-id4115 . -5) (undo-tree-id4116 . -5) (undo-tree-id4117 . -5) (undo-tree-id4118 . -5) (undo-tree-id4119 . -5) (undo-tree-id4120 . -5) (undo-tree-id4121 . -5) (undo-tree-id4122 . -5) (undo-tree-id4123 . -5) (undo-tree-id4124 . -5) (undo-tree-id4125 . -3) (undo-tree-id4126 . -3) (undo-tree-id4127 . -3) (undo-tree-id4128 . -3) (undo-tree-id4129 . -3) (undo-tree-id4130 . -3) (undo-tree-id4131 . -3) (undo-tree-id4132 . -3) (undo-tree-id4133 . -3) (undo-tree-id4134 . -3) (undo-tree-id4135 . -3) (undo-tree-id4136 . -3) (undo-tree-id4137 . -3) (undo-tree-id4138 . -3) (undo-tree-id4139 . -3) (undo-tree-id4140 . -3) (undo-tree-id4141 . -3) (undo-tree-id4142 . -3) (undo-tree-id4143 . -3) (undo-tree-id4144 . -3) (undo-tree-id4145 . -3) (undo-tree-id4146 . -5) (undo-tree-id4147 . -5) (undo-tree-id4148 . -5) (undo-tree-id4149 . -5) (undo-tree-id4150 . -5) (undo-tree-id4151 . -5) (undo-tree-id4152 . -5) (undo-tree-id4153 . -5) (undo-tree-id4154 . -5) (undo-tree-id4155 . -5) (undo-tree-id4156 . -5) (undo-tree-id4157 . -5) (undo-tree-id4158 . -5) (undo-tree-id4159 . -5) (undo-tree-id4160 . -5) (undo-tree-id4161 . -5) 7174 (t 26050 8448 313666 794000)) nil (26050 8458 886104 630000) 0 nil])
([nil nil ((7155 . 7162)) ((#("version" 0 7 (face font-lock-preprocessor-face fontified t)) . 7155) (undo-tree-id4031 . -7)) (26050 8377 58401 595000) 0 nil])
([nil nil ((#("version_" 0 8 (fontified t)) . -7161) (undo-tree-id4065 . -8) (undo-tree-id4066 . -8) (undo-tree-id4067 . -2) (undo-tree-id4068 . 8) (undo-tree-id4069 . -8) (undo-tree-id4070 . -8) (undo-tree-id4071 . -8) (undo-tree-id4072 . -8) (undo-tree-id4073 . -8) (undo-tree-id4074 . -8) (undo-tree-id4075 . -8) (undo-tree-id4076 . -8) (undo-tree-id4077 . -8) (undo-tree-id4078 . -8) (undo-tree-id4079 . -8) (undo-tree-id4080 . -8) (undo-tree-id4081 . -8) (undo-tree-id4082 . -8) (undo-tree-id4083 . -8) (undo-tree-id4084 . -8) (undo-tree-id4085 . -8) (undo-tree-id4086 . -8) (undo-tree-id4087 . -8) (undo-tree-id4088 . -8) (undo-tree-id4089 . -8) (undo-tree-id4090 . -8) (undo-tree-id4091 . -8) (undo-tree-id4092 . -8) (undo-tree-id4093 . -8) (undo-tree-id4094 . -8) (undo-tree-id4095 . -8) (undo-tree-id4096 . -8) (undo-tree-id4097 . -8) (undo-tree-id4098 . -8) (undo-tree-id4099 . -8) (undo-tree-id4100 . -8) (undo-tree-id4101 . -8) (undo-tree-id4102 . -8) (undo-tree-id4103 . -8) (undo-tree-id4104 . -8) (undo-tree-id4105 . -8) (undo-tree-id4106 . -8) (undo-tree-id4107 . -8) (undo-tree-id4108 . -8) (undo-tree-id4109 . -8) (undo-tree-id4110 . -8) (undo-tree-id4111 . -8) (undo-tree-id4112 . -8) (undo-tree-id4113 . -8) (undo-tree-id4114 . -8) 7169) nil (26050 8458 886070 266000) 0 nil])
nil
([nil nil ((7161 . 7162)) nil (26050 8458 886034 430000) 0 nil])
([nil nil ((7161 . 7178) (#("a" 0 1 (fontified nil)) . 7161) (7161 . 7162) (#("api_version_major" 0 17 (fontified nil)) . -7161) (7161 . 7178) (#("a" 0 1 (fontified t)) . -7161) (undo-tree-id4055 . -1) (undo-tree-id4056 . -1) (undo-tree-id4057 . -1) (undo-tree-id4058 . -1) (undo-tree-id4059 . -1) (undo-tree-id4060 . -1) (undo-tree-id4061 . -1) (undo-tree-id4062 . -1) (undo-tree-id4063 . -1) (undo-tree-id4064 . -1) 7162) nil (26050 8458 886030 154000) 0 nil])
([nil nil ((#("vk_version_minor!" 0 17 (face font-lock-preprocessor-face fontified t)) . 7239) (undo-tree-id4198 . -17) (undo-tree-id4199 . -17) (undo-tree-id4200 . -16) (undo-tree-id4201 . -17) (undo-tree-id4202 . -17) (undo-tree-id4203 . -17) (undo-tree-id4204 . -17) (undo-tree-id4205 . -17) (undo-tree-id4206 . -2) (undo-tree-id4207 . -10) (undo-tree-id4208 . -16) (undo-tree-id4209 . -16) (undo-tree-id4210 . -16) (undo-tree-id4211 . -16) (undo-tree-id4212 . -16) (undo-tree-id4213 . -11) (undo-tree-id4214 . -3) (undo-tree-id4215 . -3) (undo-tree-id4216 . -3) (undo-tree-id4217 . -3) (undo-tree-id4218 . -3) (undo-tree-id4219 . -10) (undo-tree-id4220 . -16) (undo-tree-id4221 . -11) (undo-tree-id4222 . -16) (undo-tree-id4223 . -16) (undo-tree-id4224 . -16) (undo-tree-id4225 . -16) (undo-tree-id4226 . -16) (undo-tree-id4227 . -17) (undo-tree-id4228 . -17) (undo-tree-id4229 . -17) (undo-tree-id4230 . -17) (undo-tree-id4231 . -17) (undo-tree-id4232 . -17) (undo-tree-id4233 . -17) (undo-tree-id4234 . -17) (undo-tree-id4235 . -17) (undo-tree-id4236 . -17) (undo-tree-id4237 . -17) (undo-tree-id4238 . -17) (undo-tree-id4239 . -11) (undo-tree-id4240 . -3) 7242 (t 26050 8458 910334 112000)) nil (26050 8491 563566 110000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7259 . 7260) (nil fontified nil 7248 . 7260) (nil fontified nil 7246 . 7248) (nil fontified nil 7244 . 7246) (nil fontified nil 7242 . 7244) (nil fontified nil 7239 . 7242) (7239 . 7260)) nil (26050 8491 563536 646000) 0 nil])
([nil nil ((7260 . 7261)) nil (26050 8491 563535 327000) 0 nil])
([nil nil ((7248 . 7265) (#("api_version_m" 0 13 (fontified nil)) . 7248) (7248 . 7261) (#("api_version_minor" 0 17 (fontified nil)) . -7248) (7248 . 7265) (#("api_version_m" 0 11 (fontified t) 11 12 (rear-nonsticky t fontified t) 12 13 (fontified t)) . -7248) (undo-tree-id4183 . -13) (undo-tree-id4184 . -12) (undo-tree-id4185 . -12) (undo-tree-id4186 . -12) (undo-tree-id4187 . -12) (undo-tree-id4188 . -12) (undo-tree-id4189 . -12) (undo-tree-id4190 . -12) (undo-tree-id4191 . -12) (undo-tree-id4192 . -12) (undo-tree-id4193 . -13) (undo-tree-id4194 . -13) (undo-tree-id4195 . -13) (undo-tree-id4196 . -13) (undo-tree-id4197 . -13) 7261) nil (26050 8491 563533 676000) 0 nil])
([nil nil ((#("vk_version_patch!" 0 17 (face font-lock-preprocessor-face fontified t)) . 7326) (undo-tree-id4170 . -17) (undo-tree-id4171 . -17) (undo-tree-id4172 . -17) (undo-tree-id4173 . -17) (undo-tree-id4174 . -17) (undo-tree-id4175 . -17) (undo-tree-id4176 . -17) (undo-tree-id4177 . -17) (undo-tree-id4178 . -17) (undo-tree-id4179 . -17) (undo-tree-id4180 . -17) (undo-tree-id4181 . -11) (undo-tree-id4182 . -3) 7329) nil (26050 8491 563521 945000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7346 . 7347) (nil fontified nil 7335 . 7347) (nil fontified nil 7333 . 7335) (nil fontified nil 7331 . 7333) (nil fontified nil 7329 . 7331) (nil fontified nil 7326 . 7329) (7326 . 7347)) nil (26050 8491 563512 260000) 0 nil])
([nil nil ((7347 . 7348)) nil (26050 8491 563510 209000) 0 nil])
([nil nil ((7335 . 7352) (#("api_version_p" 0 13 (fontified nil)) . 7335) (7335 . 7348) (#("api_version_patch" 0 17 (fontified nil)) . -7335) (7335 . 7352) (#("api_version_p" 0 11 (fontified t) 11 12 (rear-nonsticky t fontified t) 12 13 (fontified t)) . -7335) (undo-tree-id4162 . -13) (undo-tree-id4163 . -12) (undo-tree-id4164 . -12) (undo-tree-id4165 . -12) (undo-tree-id4166 . -12) (undo-tree-id4167 . -13) (undo-tree-id4168 . -13) (undo-tree-id4169 . -13) 7348) nil (26050 8491 563506 70000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -6465) (9268 . 9277) (9293 . 9301) (9329 . 9335) 9294 (t 26050 8491 587002 782000)) nil (26050 8579 954456 748000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1272 . 1273) (nil fontified nil 1199 . 1273) (1199 . 1273) (t 26050 8579 980341 539000)) nil (26050 8648 76689 500000) 0 nil])
([nil nil ((820 . 825)) nil (26050 8648 76688 420000) 0 nil])
([nil nil ((825 . 826)) nil (26050 8648 76687 778000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -825) (undo-tree-id4255 . -1) 826) nil (26050 8648 76687 103000) 0 nil])
([nil nil ((825 . 846)) nil (26050 8648 76685 711000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -844) (undo-tree-id4253 . -1) (#("k" 0 1 (fontified t)) . -845) (undo-tree-id4254 . -1) 846) nil (26050 8648 76684 783000) 0 nil])
([nil nil ((844 . 845)) nil (26050 8648 76682 657000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -844) (undo-tree-id4252 . -1) 845) nil (26050 8648 76681 909000) 0 nil])
([nil nil ((844 . 848)) nil (26050 8648 76680 533000) 0 nil])
([nil nil ((#("L" 0 1 (face font-lock-type-face fontified t)) . -846) (undo-tree-id4250 . -1) (#("P" 0 1 (face font-lock-type-face fontified t)) . -847) (undo-tree-id4251 . -1) 848) nil (26050 8648 76679 572000) 0 nil])
([nil nil ((846 . 847)) nil (26050 8648 76677 408000) 0 nil])
([nil nil ((#("L" 0 1 (face font-lock-type-face fontified t)) . -846) (undo-tree-id4249 . -1) 847) nil (26050 8648 76676 465000) 0 nil])
([nil nil ((846 . 848)) nil (26050 8648 76674 885000) 0 nil])
([nil nil ((#("{" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -847) (undo-tree-id4248 . -1) 848) nil (26050 8648 76673 998000) 0 nil])
([nil nil ((847 . 850)) nil (26050 8648 76672 379000) 0 nil])
([nil nil ((847 . 861) (#("Phy" 0 3 (fontified nil)) . 847) (847 . 850) (#("PhysicalDevice" 0 14 (fontified nil)) . -847) (847 . 861) (#("Phy" 0 3 (face font-lock-type-face fontified t)) . -847) (undo-tree-id4241 . -3) (undo-tree-id4242 . -2) (undo-tree-id4243 . -2) (undo-tree-id4244 . -3) (undo-tree-id4245 . -3) (undo-tree-id4246 . -3) (undo-tree-id4247 . -3) 850) nil (26050 8648 76670 3000) 0 nil])
([nil nil ((861 . 862)) nil (26050 8648 76655 897000) 0 nil])
([nil nil ((1457 . 1470) (t 26050 8648 100345 717000)) nil (26050 8653 143817 448000) 0 nil])
([nil nil ((1470 . 1471)) nil (26050 8653 143815 850000) 0 nil])
([nil nil ((1470 . 1486) (#("p" 0 1 (fontified nil)) . 1470) (1470 . 1471) (#("_physical_device" 0 16 (fontified nil)) . -1470) (1470 . 1486) (#("p" 0 1 (fontified t)) . -1470) (undo-tree-id4256 . -1) (undo-tree-id4257 . -1) (undo-tree-id4258 . -1) (undo-tree-id4259 . -1) (undo-tree-id4260 . -1) 1471) nil (26050 8653 143811 155000) 0 nil])
([nil nil ((1486 . 1487) (t 26050 8653 170346 29000)) nil (26050 8655 225148 489000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -1470) (undo-tree-id4360 . -1) (undo-tree-id4361 . -1) (undo-tree-id4362 . -1) (undo-tree-id4363 . -1) (undo-tree-id4364 . -1) 1471 (t 26050 8655 247012 823000)) nil (26050 8671 308106 945000) 0 nil])
([nil nil ((1485 . 1487)) nil (26050 8671 308101 233000) 0 nil])
([nil nil ((1470 . 1471)) nil (26050 8671 308100 578000) 0 nil])
([nil nil ((1488 . 1489)) nil (26050 8671 308099 832000) 0 nil])
([nil nil ((1488 . 1503) (#("p" 0 1 (fontified nil)) . 1488) (1488 . 1489) (#("physical_device" 0 15 (fontified nil)) . -1488) (1488 . 1503) (#("p" 0 1 (fontified t)) . -1488) (undo-tree-id4354 . -1) (undo-tree-id4355 . -1) (undo-tree-id4356 . -1) (undo-tree-id4357 . -1) (undo-tree-id4358 . -1) (undo-tree-id4359 . -1) 1489) nil (26050 8671 308098 515000) 0 nil])
([nil nil ((#("device: " 0 6 (face font-lock-variable-name-face fontified t) 6 8 (fontified t)) . -1480) (undo-tree-id4333 . -8) (undo-tree-id4334 . -6) (undo-tree-id4335 . -7) (undo-tree-id4336 . -7) (undo-tree-id4337 . -8) (undo-tree-id4338 . -8) (undo-tree-id4339 . -8) (undo-tree-id4340 . -8) (undo-tree-id4341 . -8) (undo-tree-id4342 . -6) (undo-tree-id4343 . -8) (undo-tree-id4344 . -8) (undo-tree-id4345 . -8) (undo-tree-id4346 . -8) (undo-tree-id4347 . -8) (undo-tree-id4348 . -8) (undo-tree-id4349 . -8) (undo-tree-id4350 . -8) (undo-tree-id4351 . -8) (undo-tree-id4352 . -8) (undo-tree-id4353 . -8) 1488) nil (26050 8671 308091 170000) 0 nil])
([nil nil ((#("physical_" 0 9 (fontified t)) . -1471) (undo-tree-id4302 . -9) (undo-tree-id4303 . -9) (undo-tree-id4304 . -8) (undo-tree-id4305 . -8) (undo-tree-id4306 . -8) (undo-tree-id4307 . -9) (undo-tree-id4308 . -9) (undo-tree-id4309 . -9) (undo-tree-id4310 . -9) (undo-tree-id4311 . -9) (undo-tree-id4312 . -9) (undo-tree-id4313 . -9) (undo-tree-id4314 . -9) (undo-tree-id4315 . -9) (undo-tree-id4316 . -8) (undo-tree-id4317 . -8) (undo-tree-id4318 . -8) (undo-tree-id4319 . -9) (undo-tree-id4320 . -9) (undo-tree-id4321 . -9) (undo-tree-id4322 . -9) (undo-tree-id4323 . -9) (undo-tree-id4324 . -9) (undo-tree-id4325 . -9) (undo-tree-id4326 . -9) (undo-tree-id4327 . -9) (undo-tree-id4328 . -9) (undo-tree-id4329 . -9) (undo-tree-id4330 . -9) (undo-tree-id4331 . -9) (undo-tree-id4332 . -9) 1480) nil (26050 8671 307745 871000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -1470) (undo-tree-id4263 . -1) (undo-tree-id4264 . -1) (undo-tree-id4265 . -1) (undo-tree-id4266 . -1) (undo-tree-id4267 . -1) (undo-tree-id4268 . -1) (undo-tree-id4269 . -1) (undo-tree-id4270 . -1) (undo-tree-id4271 . -1) (undo-tree-id4272 . -1) (undo-tree-id4273 . -1) (undo-tree-id4274 . -1) (undo-tree-id4275 . -1) (undo-tree-id4276 . -1) (undo-tree-id4277 . -1) (undo-tree-id4278 . -1) (undo-tree-id4279 . -1) (undo-tree-id4280 . -1) (undo-tree-id4281 . -1) (undo-tree-id4282 . -1) (undo-tree-id4283 . -1) (undo-tree-id4284 . -1) (undo-tree-id4285 . -1) (undo-tree-id4286 . -1) (undo-tree-id4287 . -1) (undo-tree-id4288 . -1) (undo-tree-id4289 . -1) (undo-tree-id4290 . -1) (undo-tree-id4291 . -1) (undo-tree-id4292 . -1) (undo-tree-id4293 . -1) (undo-tree-id4294 . -1) (undo-tree-id4295 . -1) (undo-tree-id4296 . -1) (undo-tree-id4297 . -1) (undo-tree-id4298 . -1) (undo-tree-id4299 . -1) (undo-tree-id4300 . -1) (undo-tree-id4301 . -1) 1471) nil (26050 8671 307722 359000) 0 nil])
([nil nil ((#("_" 0 1 (face font-lock-variable-name-face fontified t)) . -825) (undo-tree-id4261 . -1) (undo-tree-id4262 . -1) 826) nil (26050 9050 593505 189000) 0 nil])
([nil nil ((861 . 866) (t 26050 9051 280370 454000)) nil (26050 9711 828776 601000) 0 nil] [nil nil ((8766 . 8768) (t 26050 8671 330347 144000)) ((#("\\t" 0 2 (face font-lock-string-face fontified t)) . 8766)) (26050 9050 179746 483000) 0 nil])
([nil nil ((nil rear-nonsticky nil 939 . 940) (nil fontified nil 866 . 940) (866 . 940)) nil (26050 9711 829015 149000) 0 nil])
([nil nil ((8773 . 8775)) ((#("\\t" 0 2 (face font-lock-string-face fontified t)) . 8773)) (26050 9049 592100 913000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -866) 893) nil (26050 9714 867719 936000) 0 nil] [nil nil ((#("
" 0 1 (fontified t)) . 940)) ((940 . 941)) (26050 9711 828769 170000) 0 nil])
([nil nil ((8780 . 8782)) ((#("\\t" 0 2 (face font-lock-string-face fontified t)) . 8780)) (26050 9048 634847 946000) 0 nil])
([nil nil ((#("_" 0 1 (face font-lock-variable-name-face fontified t)) . 909)) nil (26050 9714 867715 397000) 0 nil])
nil
([nil nil ((7768 . 7770) (t 26050 8993 390366 902000)) ((#("\\t" 0 2 (face font-lock-string-face fontified t)) . 7768)) (26050 9047 648766 752000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1520 . 1521) (nil fontified nil 1388 . 1521) (1388 . 1521) (t 26050 9714 893744 508000)) nil (26050 9735 307516 155000) 0 nil])
([nil nil ((7779 . 7781)) ((#("\\r" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t)) . 7779) (undo-tree-id4391 . -2) (undo-tree-id4392 . -2) (undo-tree-id4393 . -2) (undo-tree-id4394 . -1) (undo-tree-id4395 . -2) (undo-tree-id4396 . -2) (undo-tree-id4397 . -2)) (26050 9047 48892 531000) 0 nil])
([nil nil ((6357 . 6361) (#("    " 0 4 (fontified nil)) . 6356) (undo-tree-id4398 . -4) (undo-tree-id4399 . -4) (undo-tree-id4400 . -4) (6355 . 6361) (t 26050 9738 273745 944000)) nil (26050 9769 479672 350000) 0 nil] [nil nil ((#("
" 0 1 (fontified t)) . 1521)) ((1521 . 1522)) (26050 9735 307289 415000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-string-face fontified t)) . -7780) (undo-tree-id4365 . -1) (undo-tree-id4366 . -1) (undo-tree-id4367 . -1) 7781) ((7780 . 7781)) (26050 9046 815621 62000) 0 nil])
([nil nil ((nil rear-nonsticky nil 8767 . 8768) (nil fontified nil 6361 . 8768) (6361 . 8768)) nil (26050 9769 479660 975000) 0 nil])
nil
([nil nil ((7780 . 7781)) ((#("t" 0 1 (face font-lock-string-face fontified t)) . 7780)) (26050 9046 591673 163000) 0 nil])
([nil nil ((6810 . 6815) (t 26050 9769 503747 859000)) nil (26050 9780 841186 255000) 0 nil])
([nil nil ((7791 . 7793)) ((#("\\t" 0 2 (face font-lock-string-face fontified t)) . 7791) (undo-tree-id4368 . -2) (undo-tree-id4369 . -2) (undo-tree-id4370 . -2) (undo-tree-id4371 . -2) (undo-tree-id4372 . -2) (undo-tree-id4373 . -2) (undo-tree-id4374 . -2) (undo-tree-id4375 . -2) (undo-tree-id4376 . -2) (undo-tree-id4377 . -2) (undo-tree-id4378 . -2) (undo-tree-id4379 . -2) (undo-tree-id4380 . -2) (undo-tree-id4381 . -2) (undo-tree-id4382 . -2) (undo-tree-id4383 . -2) (undo-tree-id4384 . -2) (undo-tree-id4385 . -2) (undo-tree-id4386 . -2) (undo-tree-id4387 . -2) (undo-tree-id4388 . -2) (undo-tree-id4389 . -2) (undo-tree-id4390 . -2) (t 26050 9026 633702 274000)) (26050 9026 579576 612000) 0 nil])
([nil nil ((#("feature." 0 8 (face font-lock-comment-face fontified t)) . -7204) (undo-tree-id4533 . -8) (undo-tree-id4534 . -8) (undo-tree-id4535 . -8) (undo-tree-id4536 . -8) (undo-tree-id4537 . -8) (undo-tree-id4538 . -8) (undo-tree-id4539 . -8) (undo-tree-id4540 . -8) (undo-tree-id4541 . -8) (undo-tree-id4542 . -8) (undo-tree-id4543 . -8) (undo-tree-id4544 . -8) 7212 (t 26050 9780 897081 893000)) nil (26050 9882 676007 241000) 0 nil])
nil
([nil nil ((#("no " 0 3 (face font-lock-comment-face fontified t)) . -7201) (undo-tree-id4520 . -3) (undo-tree-id4521 . -3) (undo-tree-id4522 . -3) (undo-tree-id4523 . -3) (undo-tree-id4524 . -3) (undo-tree-id4525 . -3) (undo-tree-id4526 . -3) (undo-tree-id4527 . -3) (undo-tree-id4528 . -3) (undo-tree-id4529 . -3) (undo-tree-id4530 . -3) (undo-tree-id4531 . -3) (undo-tree-id4532 . -3) 7204) nil (26050 9882 675997 910000) 0 nil])
([nil nil ((#("enable " 0 7 (face font-lock-comment-face fontified t)) . -7194) (undo-tree-id4506 . -7) (undo-tree-id4507 . -7) (undo-tree-id4508 . -7) (undo-tree-id4509 . -7) (undo-tree-id4510 . -7) (undo-tree-id4511 . -7) (undo-tree-id4512 . -7) (undo-tree-id4513 . -7) (undo-tree-id4514 . -7) (undo-tree-id4515 . -7) (undo-tree-id4516 . -7) (undo-tree-id4517 . -7) (undo-tree-id4518 . -7) (undo-tree-id4519 . -7) 7201) nil (26050 9882 675988 924000) 0 nil])
([nil nil ((#("just " 0 5 (face font-lock-comment-face fontified t)) . -7189) (undo-tree-id4491 . -5) (undo-tree-id4492 . -5) (undo-tree-id4493 . -5) (undo-tree-id4494 . -5) (undo-tree-id4495 . -5) (undo-tree-id4496 . -5) (undo-tree-id4497 . -5) (undo-tree-id4498 . -5) (undo-tree-id4499 . -5) (undo-tree-id4500 . -5) (undo-tree-id4501 . -5) (undo-tree-id4502 . -5) (undo-tree-id4503 . -5) (undo-tree-id4504 . -5) (undo-tree-id4505 . -5) 7194) nil (26050 9882 675977 327000) 0 nil])
([nil nil ((#("default " 0 8 (face font-lock-comment-face fontified t)) . -7181) (undo-tree-id4475 . -8) (undo-tree-id4476 . -8) (undo-tree-id4477 . -8) (undo-tree-id4478 . -8) (undo-tree-id4479 . -8) (undo-tree-id4480 . -8) (undo-tree-id4481 . -8) (undo-tree-id4482 . -8) (undo-tree-id4483 . -8) (undo-tree-id4484 . -8) (undo-tree-id4485 . -8) (undo-tree-id4486 . -8) (undo-tree-id4487 . -8) (undo-tree-id4488 . -8) (undo-tree-id4489 . -8) (undo-tree-id4490 . -8) 7189) nil (26050 9882 675964 933000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -7177) (undo-tree-id4401 . -1) (undo-tree-id4402 . -1) (undo-tree-id4403 . -1) (undo-tree-id4404 . -1) (undo-tree-id4405 . -1) (undo-tree-id4406 . -1) (undo-tree-id4407 . -1) (undo-tree-id4408 . -1) (undo-tree-id4409 . -1) (undo-tree-id4410 . -1) (undo-tree-id4411 . -1) (undo-tree-id4412 . -1) (undo-tree-id4413 . -1) (undo-tree-id4414 . -1) (undo-tree-id4415 . -1) (undo-tree-id4416 . -1) (undo-tree-id4417 . -1) (undo-tree-id4418 . -1) (undo-tree-id4419 . -1) (undo-tree-id4420 . -1) (#("/" 0 1 (fontified t)) . -7178) (undo-tree-id4421 . -1) (undo-tree-id4422 . -1) (undo-tree-id4423 . -1) (undo-tree-id4424 . -1) (undo-tree-id4425 . -1) (undo-tree-id4426 . -1) (undo-tree-id4427 . -1) (undo-tree-id4428 . -1) (undo-tree-id4429 . -1) (undo-tree-id4430 . -1) (undo-tree-id4431 . -1) (undo-tree-id4432 . -1) (undo-tree-id4433 . -1) (undo-tree-id4434 . -1) (undo-tree-id4435 . -1) (undo-tree-id4436 . -1) (undo-tree-id4437 . -1) (undo-tree-id4438 . -1) (undo-tree-id4439 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -7179) (undo-tree-id4440 . -1) (undo-tree-id4441 . -1) (undo-tree-id4442 . -1) (undo-tree-id4443 . -1) (undo-tree-id4444 . -1) (undo-tree-id4445 . -1) (undo-tree-id4446 . -1) (undo-tree-id4447 . -1) (undo-tree-id4448 . -1) (undo-tree-id4449 . -1) (undo-tree-id4450 . -1) (undo-tree-id4451 . -1) (undo-tree-id4452 . -1) (undo-tree-id4453 . -1) (undo-tree-id4454 . -1) (undo-tree-id4455 . -1) (undo-tree-id4456 . -1) (undo-tree-id4457 . -1) (#(" " 0 1 (face font-lock-comment-delimiter-face fontified t)) . -7180) (undo-tree-id4458 . -1) (undo-tree-id4459 . -1) (undo-tree-id4460 . -1) (undo-tree-id4461 . -1) (undo-tree-id4462 . -1) (undo-tree-id4463 . -1) (undo-tree-id4464 . -1) (undo-tree-id4465 . -1) (undo-tree-id4466 . -1) (undo-tree-id4467 . -1) (undo-tree-id4468 . -1) (undo-tree-id4469 . -1) (undo-tree-id4470 . -1) (undo-tree-id4471 . -1) (undo-tree-id4472 . -1) (undo-tree-id4473 . -1) (undo-tree-id4474 . -1) 7181) nil (26050 9882 675280 355000) 0 nil])
([nil nil ((#("char" 0 4 (fontified t)) . -7459) (undo-tree-id4602 . -4) (undo-tree-id4603 . -4) (undo-tree-id4604 . -4) (undo-tree-id4605 . -4) (undo-tree-id4606 . -4) (undo-tree-id4607 . -4) (undo-tree-id4608 . -4) (undo-tree-id4609 . -4) (undo-tree-id4610 . -4) 7463 (t 26050 9882 697088 140000)) nil (26050 9892 733223 466000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -7457) (undo-tree-id4576 . -1) (undo-tree-id4577 . -1) (undo-tree-id4578 . -1) (undo-tree-id4579 . -1) (undo-tree-id4580 . -1) (undo-tree-id4581 . -1) (undo-tree-id4582 . -1) (undo-tree-id4583 . -1) (undo-tree-id4584 . -1) (undo-tree-id4585 . -1) (undo-tree-id4586 . -1) (undo-tree-id4587 . -1) (undo-tree-id4588 . -1) (undo-tree-id4589 . -1) (#("_" 0 1 (fontified t)) . -7458) (undo-tree-id4590 . -1) (undo-tree-id4591 . -1) (undo-tree-id4592 . -1) (undo-tree-id4593 . -1) (undo-tree-id4594 . -1) (undo-tree-id4595 . -1) (undo-tree-id4596 . -1) (undo-tree-id4597 . -1) (undo-tree-id4598 . -1) (undo-tree-id4599 . -1) (undo-tree-id4600 . -1) (undo-tree-id4601 . -1) 7459) nil (26050 9892 733215 872000) 0 nil])
([nil nil ((7457 . 7461)) nil (26050 9892 733198 305000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -7460) (undo-tree-id4569 . -1) (undo-tree-id4570 . -1) (undo-tree-id4571 . -1) (undo-tree-id4572 . -1) (undo-tree-id4573 . -1) (undo-tree-id4574 . -1) (undo-tree-id4575 . -1) 7461) nil (26050 9892 733196 869000) 0 nil])
([nil nil ((7460 . 7463)) nil (26050 9892 733191 75000) 0 nil])
([nil nil ((119 . 127) (7457 . 7457) (7457 . 7463) (#("c_char" 0 6 (fontified nil)) . 7457) (7457 . 7463) (#("c_char (use std::ffi::c_char)" 0 29 (fontified nil)) . -7457) (7457 . 7486) (#("c_char" 0 6 (fontified t)) . -7457) (undo-tree-id4545 . -6) (undo-tree-id4546 . -1) (undo-tree-id4547 . -1) (undo-tree-id4548 . -1) (undo-tree-id4549 . -1) (undo-tree-id4550 . -2) (undo-tree-id4551 . -2) (undo-tree-id4552 . -2) (undo-tree-id4553 . -3) (undo-tree-id4554 . -3) (undo-tree-id4555 . -3) (undo-tree-id4556 . -3) (undo-tree-id4557 . -3) (undo-tree-id4558 . -3) (undo-tree-id4559 . -3) (undo-tree-id4560 . -3) (undo-tree-id4561 . -3) (undo-tree-id4562 . -4) (undo-tree-id4563 . -5) (undo-tree-id4564 . -5) (undo-tree-id4565 . -6) (undo-tree-id4566 . -6) (undo-tree-id4567 . -6) (undo-tree-id4568 . -6) 7463) nil (26050 9892 733186 289000) 0 nil])
([nil nil ((#("ValidationInfo" 0 14 (face font-lock-type-face fontified t)) . -6499) (undo-tree-id4672 . -14) (undo-tree-id4673 . -14) (undo-tree-id4674 . -9) (undo-tree-id4675 . -9) (undo-tree-id4676 . -9) (undo-tree-id4677 . -9) (undo-tree-id4678 . -9) (undo-tree-id4679 . -9) (undo-tree-id4680 . -9) (undo-tree-id4681 . -9) (undo-tree-id4682 . -9) (undo-tree-id4683 . -9) (undo-tree-id4684 . -9) (undo-tree-id4685 . -9) (undo-tree-id4686 . -9) (undo-tree-id4687 . -9) (undo-tree-id4688 . -9) (undo-tree-id4689 . -9) (undo-tree-id4690 . -9) (undo-tree-id4691 . -9) (undo-tree-id4692 . -9) (undo-tree-id4693 . -9) (undo-tree-id4694 . -9) (undo-tree-id4695 . -9) (undo-tree-id4696 . -9) (undo-tree-id4697 . -14) (undo-tree-id4698 . -14) (undo-tree-id4699 . -14) (undo-tree-id4700 . -14) (undo-tree-id4701 . -14) (undo-tree-id4702 . -14) (undo-tree-id4703 . -14) (undo-tree-id4704 . -14) (undo-tree-id4705 . -14) (undo-tree-id4706 . -14) (undo-tree-id4707 . -14) (undo-tree-id4708 . -14) (undo-tree-id4709 . -14) (undo-tree-id4710 . -14) (undo-tree-id4711 . -14) (undo-tree-id4712 . -14) (undo-tree-id4713 . -14) (undo-tree-id4714 . -14) (undo-tree-id4715 . -14) (undo-tree-id4716 . -14) (undo-tree-id4717 . -14) (undo-tree-id4718 . -14) (undo-tree-id4719 . -14) (undo-tree-id4720 . -14) 6513 (t 26050 9892 757088 758000)) nil (26050 9916 405705 131000) 0 nil])
([nil nil ((#("&" 0 1 (fontified t)) . -6498) (undo-tree-id4616 . -1) (undo-tree-id4617 . -1) (undo-tree-id4618 . -1) (undo-tree-id4619 . -1) (undo-tree-id4620 . -1) (undo-tree-id4621 . -1) (undo-tree-id4622 . -1) (undo-tree-id4623 . -1) (undo-tree-id4624 . -1) (undo-tree-id4625 . -1) (undo-tree-id4626 . -1) (undo-tree-id4627 . -1) (undo-tree-id4628 . -1) (undo-tree-id4629 . -1) (undo-tree-id4630 . -1) (undo-tree-id4631 . -1) (undo-tree-id4632 . -1) (undo-tree-id4633 . -1) (undo-tree-id4634 . -1) (undo-tree-id4635 . -1) (undo-tree-id4636 . -1) (undo-tree-id4637 . -1) (undo-tree-id4638 . -1) (undo-tree-id4639 . -1) (undo-tree-id4640 . -1) (undo-tree-id4641 . -1) (undo-tree-id4642 . -1) (undo-tree-id4643 . -1) (undo-tree-id4644 . -1) (undo-tree-id4645 . -1) (undo-tree-id4646 . -1) (undo-tree-id4647 . -1) (undo-tree-id4648 . -1) (undo-tree-id4649 . -1) (undo-tree-id4650 . -1) (undo-tree-id4651 . -1) (undo-tree-id4652 . -1) (undo-tree-id4653 . -1) (undo-tree-id4654 . -1) (undo-tree-id4655 . -1) (undo-tree-id4656 . -1) (undo-tree-id4657 . -1) (undo-tree-id4658 . -1) (undo-tree-id4659 . -1) (undo-tree-id4660 . -1) (undo-tree-id4661 . -1) (undo-tree-id4662 . -1) (undo-tree-id4663 . -1) (undo-tree-id4664 . -1) (undo-tree-id4665 . -1) (undo-tree-id4666 . -1) (undo-tree-id4667 . -1) (undo-tree-id4668 . -1) (undo-tree-id4669 . -1) (undo-tree-id4670 . -1) (undo-tree-id4671 . -1) 6499) nil (26050 9916 405670 508000) 0 nil])
([nil nil ((6498 . 6499)) nil (26050 9916 405075 293000) 0 nil])
([nil nil ((apply yas--snippet-revive 6498 6503 #s(yas--snippet nil nil #s(yas--exit 6502 nil) 27 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 6502 nil) 27 nil nil nil nil)) (6498 . 6503) (#("Vec<$0>" 0 7 (fontified nil)) . 6498) (6498 . 6505) (#("V" 0 1 (fontified nil)) . 6498) (6498 . 6499) (#("Vec<…>" 0 6 (fontified nil)) . -6498) (6498 . 6504) (#("V" 0 1 (face font-lock-type-face fontified t)) . -6498) (undo-tree-id4611 . -1) (undo-tree-id4612 . -1) (undo-tree-id4613 . -1) (undo-tree-id4614 . -1) (undo-tree-id4615 . -1) 6499) nil (26050 9916 405072 787000) 0 nil])
([nil nil ((6502 . 6506)) nil (26050 9922 241338 357000) 0 nil])
([nil nil ((#("layers" 0 6 (fontified t)) . -7299) (undo-tree-id4790 . -6) (undo-tree-id4791 . -6) (undo-tree-id4792 . -6) (undo-tree-id4793 . -6) (undo-tree-id4794 . -6) (undo-tree-id4795 . -6) (undo-tree-id4796 . -6) (undo-tree-id4797 . -6) (undo-tree-id4798 . -6) (undo-tree-id4799 . -6) 7305 (t 26050 9916 427090 210000)) nil (26050 9930 29863 898000) 0 nil] [nil nil ((#("validation" 0 10 (fontified t)) . -7255) (undo-tree-id4721 . -10) (undo-tree-id4722 . -10) (undo-tree-id4723 . -10) (undo-tree-id4724 . -10) (undo-tree-id4725 . -10) (undo-tree-id4726 . -10) (undo-tree-id4727 . -10) (undo-tree-id4728 . -10) (undo-tree-id4729 . -10) (undo-tree-id4730 . -10) (undo-tree-id4731 . -10) (undo-tree-id4732 . -10) (undo-tree-id4733 . -10) 7265 (t 26050 9916 427090 210000)) ((7255 . 7265)) (26050 9922 240667 960000) 0 nil])
([nil nil ((#("validation_" 0 11 (fontified t)) . -7288) (undo-tree-id4779 . -11) (undo-tree-id4780 . -11) (undo-tree-id4781 . -11) (undo-tree-id4782 . -11) (undo-tree-id4783 . -11) (undo-tree-id4784 . -11) (undo-tree-id4785 . -11) (undo-tree-id4786 . -11) (undo-tree-id4787 . -11) (undo-tree-id4788 . -11) (undo-tree-id4789 . -11) 7299) nil (26050 9930 29856 398000) 0 nil])
nil
([nil nil ((#("required_" 0 9 (fontified t)) . -7279) (undo-tree-id4767 . -9) (undo-tree-id4768 . -9) (undo-tree-id4769 . -9) (undo-tree-id4770 . -9) (undo-tree-id4771 . -9) (undo-tree-id4772 . -9) (undo-tree-id4773 . -9) (undo-tree-id4774 . -9) (undo-tree-id4775 . -9) (undo-tree-id4776 . -9) (undo-tree-id4777 . -9) (undo-tree-id4778 . -9) 7288) nil (26050 9930 29847 286000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -7278) (undo-tree-id4754 . -1) (undo-tree-id4755 . -1) (undo-tree-id4756 . -1) (undo-tree-id4757 . -1) (undo-tree-id4758 . -1) (undo-tree-id4759 . -1) (undo-tree-id4760 . -1) (undo-tree-id4761 . -1) (undo-tree-id4762 . -1) (undo-tree-id4763 . -1) (undo-tree-id4764 . -1) (undo-tree-id4765 . -1) (undo-tree-id4766 . -1) 7279) nil (26050 9930 29838 332000) 0 nil])
([nil nil ((7266 . 7282) (#("            " 0 12 (fontified t)) . 7266) (undo-tree-id4738 . -12) (undo-tree-id4739 . -12) (undo-tree-id4740 . -12) (undo-tree-id4741 . -12) (undo-tree-id4742 . -12) (undo-tree-id4743 . -12) (undo-tree-id4744 . -12) (undo-tree-id4745 . -12) (undo-tree-id4746 . -12) (undo-tree-id4747 . -12) (undo-tree-id4748 . -12) (undo-tree-id4749 . -12) (undo-tree-id4750 . -12) (undo-tree-id4751 . -12) (undo-tree-id4752 . -12) (undo-tree-id4753 . -12) 7278) nil (26050 9930 29823 414000) 0 nil])
([nil nil ((#("                
" 0 16 (fontified t) 16 17 (fontified t)) . 7266) (undo-tree-id4734 . -16) (undo-tree-id4735 . -16) (undo-tree-id4736 . -16) (undo-tree-id4737 . -17)) nil (26050 9930 29800 222000) 0 nil])
([nil nil ((7695 . 7696) (t 26050 9930 83757 715000)) nil (26050 9937 775507 978000) 0 nil])
([nil nil ((7696 . 7697)) nil (26050 9937 775505 665000) 0 nil])
([nil nil ((7697 . 7700)) nil (26050 9937 775500 235000) 0 nil])
([nil nil ((#("enable" 0 6 (fontified t)) . -7908) (undo-tree-id4851 . -6) (undo-tree-id4852 . -6) (undo-tree-id4853 . -6) (undo-tree-id4854 . -6) (undo-tree-id4855 . -6) (undo-tree-id4856 . -5) (undo-tree-id4857 . -6) (undo-tree-id4858 . -6) (undo-tree-id4859 . -6) (undo-tree-id4860 . -6) (undo-tree-id4861 . -6) 7914 (t 26050 9937 797091 521000)) nil (26050 9949 966029 975000) 0 nil])
([nil nil ((#("is_" 0 3 (fontified t)) . -7905) (undo-tree-id4839 . -3) (undo-tree-id4840 . -3) (undo-tree-id4841 . -3) (undo-tree-id4842 . -3) (undo-tree-id4843 . -3) (undo-tree-id4844 . -3) (undo-tree-id4845 . -3) (undo-tree-id4846 . -3) (undo-tree-id4847 . -3) (undo-tree-id4848 . -3) (undo-tree-id4849 . -3) (undo-tree-id4850 . -3) 7908) nil (26050 9949 966022 239000) 0 nil])
([nil nil ((#("validation." 0 11 (fontified t)) . -7894) (undo-tree-id4826 . -11) (undo-tree-id4827 . -11) (undo-tree-id4828 . -11) (undo-tree-id4829 . -11) (undo-tree-id4830 . -11) (undo-tree-id4831 . -11) (undo-tree-id4832 . -11) (undo-tree-id4833 . -11) (undo-tree-id4834 . -11) (undo-tree-id4835 . -11) (undo-tree-id4836 . -11) (undo-tree-id4837 . -11) (undo-tree-id4838 . -11) 7905) nil (26050 9949 966014 230000) 0 nil])
([nil nil ((7894 . 7896)) nil (26050 9949 966005 268000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -7894) (undo-tree-id4817 . -1) (undo-tree-id4818 . -1) (undo-tree-id4819 . -1) (undo-tree-id4820 . -1) (undo-tree-id4821 . -1) (undo-tree-id4822 . -1) (#("u" 0 1 (fontified t)) . -7895) (undo-tree-id4823 . -1) (undo-tree-id4824 . -1) (undo-tree-id4825 . -1) 7896) nil (26050 9949 966004 226000) 0 nil])
([nil nil ((7894 . 7896)) nil (26050 9949 965997 819000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -7894) (undo-tree-id4810 . -1) (undo-tree-id4811 . -1) (undo-tree-id4812 . -1) (undo-tree-id4813 . -1) (undo-tree-id4814 . -1) (#("t" 0 1 (fontified t)) . -7895) (undo-tree-id4815 . -1) (undo-tree-id4816 . -1) 7896) nil (26050 9949 965996 728000) 0 nil])
([nil nil ((7894 . 7896)) nil (26050 9949 965991 41000) 0 nil])
([nil nil ((7894 . 7901) (#("ut" 0 2 (fontified nil)) . 7894) (7894 . 7896) (#("utility" 0 7 (fontified nil)) . -7894) (7894 . 7901) (#("ut" 0 2 (fontified t)) . -7894) (undo-tree-id4804 . -2) (undo-tree-id4805 . -1) (undo-tree-id4806 . -1) (undo-tree-id4807 . -2) (undo-tree-id4808 . -2) (undo-tree-id4809 . -2) 7896) nil (26050 9949 965989 878000) 0 nil])
([nil nil ((7901 . 7904)) nil (26050 9949 965984 492000) 0 nil])
([nil nil ((7903 . 7913) (#("v" 0 1 (fontified nil)) . 7903) (7903 . 7904) (#("validation" 0 10 (fontified nil)) . -7903) (7903 . 7913) (#("v" 0 1 (fontified t)) . -7903) (undo-tree-id4800 . -1) (undo-tree-id4801 . -1) (undo-tree-id4802 . -1) (undo-tree-id4803 . -1) 7904) nil (26050 9949 965982 783000) 0 nil])
([nil nil ((7913 . 7915)) nil (26050 9949 965974 177000) 0 nil])
([nil nil ((7915 . 7937) (#("EnableValidationLayers" 0 22 (fontified nil)) . -7915) (7915 . 7937)) nil (26050 9949 965969 900000) 0 nil])
([nil nil ((#("validation.is_enable" 0 20 (fontified t)) . -8081) (undo-tree-id4862 . -20) (undo-tree-id4863 . -20) (undo-tree-id4864 . -1) (undo-tree-id4865 . -2) (undo-tree-id4866 . -3) (undo-tree-id4867 . -4) (undo-tree-id4868 . -5) (undo-tree-id4869 . -6) (undo-tree-id4870 . -7) (undo-tree-id4871 . -8) (undo-tree-id4872 . -9) (undo-tree-id4873 . -10) (undo-tree-id4874 . -11) (undo-tree-id4875 . -12) (undo-tree-id4876 . -13) (undo-tree-id4877 . -14) (undo-tree-id4878 . -15) (undo-tree-id4879 . -16) (undo-tree-id4880 . -17) (undo-tree-id4881 . -18) (undo-tree-id4882 . -19) (undo-tree-id4883 . -20) (undo-tree-id4884 . -20) (undo-tree-id4885 . -20) (undo-tree-id4886 . -20) (undo-tree-id4887 . -20) (undo-tree-id4888 . -20) (undo-tree-id4889 . -20) (undo-tree-id4890 . -20) (undo-tree-id4891 . -20) 8101 (t 26050 9950 20425 606000)) nil (26050 9963 697282 351000) 0 nil])
([nil nil ((nil rear-nonsticky nil 8123 . 8124) (nil fontified nil 8102 . 8124) (nil fontified nil 8100 . 8102) (nil fontified nil 8090 . 8100) (nil fontified nil 8088 . 8090) (nil fontified nil 8081 . 8088) (8081 . 8124)) nil (26050 9963 697248 314000) 0 nil])
([nil nil ((8208 . 8209) (t 26050 9963 720426 448000)) nil (26050 9968 845653 486000) 0 nil])
([nil nil ((8209 . 8213)) nil (26050 9968 845648 782000) 0 nil])
([nil nil ((8320 . 8321) (t 26050 9968 900426 766000)) nil (26050 9977 375178 812000) 0 nil])
([nil nil ((8321 . 8325)) nil (26050 9977 375174 409000) 0 nil])
([nil nil ((7857 . 7870) (t 26050 9977 397093 953000)) nil (26050 10033 853587 838000) 0 nil])
([nil nil ((7870 . 7872)) nil (26050 10033 853587 139000) 0 nil])
([nil nil ((7870 . 7871)) nil (26050 10033 853586 599000) 0 nil])
([nil nil ((7872 . 7874)) nil (26050 10033 853586 20000) 0 nil])
([nil nil ((#("a" 0 1 (face font-lock-preprocessor-face fontified t)) . -7873) (undo-tree-id4934 . -1) (undo-tree-id4935 . -1) (undo-tree-id4936 . -1) (undo-tree-id4937 . -1) (undo-tree-id4938 . -1) (undo-tree-id4939 . -1) (undo-tree-id4940 . -1) 7874) nil (26050 10033 853585 14000) 0 nil])
([nil nil ((7873 . 7874)) nil (26050 10033 853580 9000) 0 nil])
([nil nil ((#("lint" 0 4 (face font-lock-preprocessor-face fontified t)) . 7878) (undo-tree-id4910 . -4) (apply yas--snippet-revive 7872 7883 #s(yas--snippet nil (#s(yas--field 0 7878 7882 nil nil nil nil nil)) nil 28 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 0 7878 7882 nil nil nil nil nil)) nil 28 nil nil nil nil)) (7872 . 7883) (#("allow(${0:lint})" 0 16 (fontified nil)) . 7872) (7872 . 7888) (#("al" 0 2 (fontified nil)) . 7872) (7872 . 7874) (#("allow(…)" 0 8 (fontified nil)) . -7872) (7872 . 7880) (#("al" 0 2 (face font-lock-preprocessor-face fontified t)) . -7872) (undo-tree-id4911 . -2) (undo-tree-id4912 . -2) (undo-tree-id4913 . -1) (undo-tree-id4914 . -1) (undo-tree-id4915 . -1) (undo-tree-id4916 . -1) (undo-tree-id4917 . -1) (undo-tree-id4918 . -1) (undo-tree-id4919 . -1) (undo-tree-id4920 . -1) (undo-tree-id4921 . -1) (undo-tree-id4922 . -1) (undo-tree-id4923 . -1) (undo-tree-id4924 . -1) (undo-tree-id4925 . -2) (undo-tree-id4926 . -2) (undo-tree-id4927 . -2) (undo-tree-id4928 . -2) (undo-tree-id4929 . -2) (undo-tree-id4930 . -2) (undo-tree-id4931 . -2) (undo-tree-id4932 . -2) (undo-tree-id4933 . -2) 7874) nil (26050 10033 853577 988000) 0 nil])
([nil nil ((7878 . 7880)) nil (26050 10033 853561 327000) 0 nil])
([nil nil ((7878 . 7888) (#("de" 0 2 (fontified nil)) . 7878) (7878 . 7880) (#("deprecated" 0 10 (fontified nil)) . -7878) (7878 . 7888) (#("de" 0 2 (face font-lock-preprocessor-face fontified t)) . -7878) (undo-tree-id4892 . -2) (undo-tree-id4893 . -2) (undo-tree-id4894 . -1) (undo-tree-id4895 . -1) (undo-tree-id4896 . -1) (undo-tree-id4897 . -1) (undo-tree-id4898 . -1) (undo-tree-id4899 . -1) (undo-tree-id4900 . -1) (undo-tree-id4901 . -1) (undo-tree-id4902 . -2) (undo-tree-id4903 . -2) (undo-tree-id4904 . -2) (undo-tree-id4905 . -2) (undo-tree-id4906 . -2) (undo-tree-id4907 . -2) (undo-tree-id4908 . -2) (undo-tree-id4909 . -2) 7880) nil (26050 10033 853559 99000) 0 nil])
([nil nil ((8074 . 8087)) nil (26050 10033 853541 241000) 0 nil])
([nil nil ((nil rear-nonsticky nil 8106 . 8107) (nil fontified nil 8106 . 8107) (nil fontified nil 8105 . 8106) (nil fontified nil 8095 . 8105) (nil fontified nil 8094 . 8095) (nil fontified nil 8089 . 8094) (nil fontified nil 8088 . 8089) (nil fontified nil 8087 . 8088) (8087 . 8107)) nil (26050 10095 954555 401000) 0 nil])
([nil nil ((#("deprecated" 0 10 (face font-lock-preprocessor-face fontified t)) . -7878) (undo-tree-id5091 . -10) (undo-tree-id5092 . -10) (undo-tree-id5093 . -9) (undo-tree-id5094 . -9) (undo-tree-id5095 . -9) (undo-tree-id5096 . -9) (undo-tree-id5097 . -9) (undo-tree-id5098 . -9) (undo-tree-id5099 . -9) (undo-tree-id5100 . -9) (undo-tree-id5101 . -9) (undo-tree-id5102 . -9) (undo-tree-id5103 . -9) (undo-tree-id5104 . -9) (undo-tree-id5105 . -9) (undo-tree-id5106 . -9) (undo-tree-id5107 . -9) (undo-tree-id5108 . -6) (undo-tree-id5109 . -6) (undo-tree-id5110 . -6) (undo-tree-id5111 . -6) (undo-tree-id5112 . -6) (undo-tree-id5113 . -6) (undo-tree-id5114 . -6) (undo-tree-id5115 . -6) (undo-tree-id5116 . -6) (undo-tree-id5117 . -6) (undo-tree-id5118 . -6) (undo-tree-id5119 . -6) (undo-tree-id5120 . -6) (undo-tree-id5121 . -6) (undo-tree-id5122 . -6) (undo-tree-id5123 . -6) (undo-tree-id5124 . -6) (undo-tree-id5125 . -2) (undo-tree-id5126 . -2) (undo-tree-id5127 . -2) (undo-tree-id5128 . -2) (undo-tree-id5129 . -2) (undo-tree-id5130 . -2) (undo-tree-id5131 . -2) (undo-tree-id5132 . -2) (undo-tree-id5133 . -2) (undo-tree-id5134 . -2) (undo-tree-id5135 . -2) (undo-tree-id5136 . -10) (undo-tree-id5137 . -10) (undo-tree-id5138 . -10) (undo-tree-id5139 . -10) (undo-tree-id5140 . -10) (undo-tree-id5141 . -10) (undo-tree-id5142 . -10) (undo-tree-id5143 . -10) (undo-tree-id5144 . -10) (undo-tree-id5145 . -10) (undo-tree-id5146 . -10) (undo-tree-id5147 . -10) (undo-tree-id5148 . -10) (undo-tree-id5149 . -10) 7888 (t 26050 10033 877097 418000)) nil (26050 10111 856680 939000) 0 nil] [nil nil ((#("#[allow(deprecated)]" 0 1 (face font-lock-preprocessor-face fontified t) 1 2 (face (rainbow-delimiters-depth-4-face font-lock-preprocessor-face) fontified t) 2 7 (face font-lock-preprocessor-face fontified t) 7 8 (face (rainbow-delimiters-depth-5-face font-lock-preprocessor-face) fontified t) 8 18 (face font-lock-preprocessor-face fontified t) 18 19 (face (rainbow-delimiters-depth-5-face font-lock-preprocessor-face) fontified t) 19 20 (face (rainbow-delimiters-depth-4-face font-lock-preprocessor-face) fontified t)) . 7870) (undo-tree-id4959 . -2) (undo-tree-id4960 . -2) (undo-tree-id4961 . -2) (undo-tree-id4962 . -2) (undo-tree-id4963 . -2) (undo-tree-id4964 . -2) (undo-tree-id4965 . -2) (undo-tree-id4966 . -2) (undo-tree-id4967 . -2) (undo-tree-id4968 . -2) (undo-tree-id4969 . -2) (undo-tree-id4970 . -2) (undo-tree-id4971 . -2) (undo-tree-id4972 . -2) (undo-tree-id4973 . -2) (undo-tree-id4974 . -2) (undo-tree-id4975 . -2) (undo-tree-id4976 . -2) (undo-tree-id4977 . -2) (undo-tree-id4978 . -2) (undo-tree-id4979 . -2) (undo-tree-id4980 . -8) (undo-tree-id4981 . -8) (undo-tree-id4982 . -8) (undo-tree-id4983 . -8) (undo-tree-id4984 . -8) (undo-tree-id4985 . -8) (undo-tree-id4986 . -8) (undo-tree-id4987 . -8) (undo-tree-id4988 . -8) (undo-tree-id4989 . -8) (undo-tree-id4990 . -8) (undo-tree-id4991 . -8) (undo-tree-id4992 . -8) (undo-tree-id4993 . -8) (undo-tree-id4994 . -8) (undo-tree-id4995 . -8) (undo-tree-id4996 . -8) (undo-tree-id4997 . -8) (undo-tree-id4998 . -20) (undo-tree-id4999 . -20) (undo-tree-id5000 . -20) (undo-tree-id5001 . -20) (undo-tree-id5002 . -20) (undo-tree-id5003 . -20) (undo-tree-id5004 . -20) (undo-tree-id5005 . -20) (undo-tree-id5006 . -20) (undo-tree-id5007 . -20) (undo-tree-id5008 . -17) (undo-tree-id5009 . -17) (undo-tree-id5010 . -17) (undo-tree-id5011 . -17) (undo-tree-id5012 . -17) (undo-tree-id5013 . -17) (undo-tree-id5014 . -17) (undo-tree-id5015 . -17) (undo-tree-id5016 . -17) (undo-tree-id5017 . -17) (undo-tree-id5018 . -17) (undo-tree-id5019 . -17) (undo-tree-id5020 . -17) (undo-tree-id5021 . -17) (undo-tree-id5022 . -17) (undo-tree-id5023 . -14) (undo-tree-id5024 . -14) (undo-tree-id5025 . -14) (undo-tree-id5026 . -14) (undo-tree-id5027 . -14) (undo-tree-id5028 . -14) (undo-tree-id5029 . -14) (undo-tree-id5030 . -14) (undo-tree-id5031 . -14) (undo-tree-id5032 . -14) (undo-tree-id5033 . -14) (undo-tree-id5034 . -14) (undo-tree-id5035 . -14) (undo-tree-id5036 . -14) (undo-tree-id5037 . -14) (undo-tree-id5038 . -14) (undo-tree-id5039 . -14) (undo-tree-id5040 . -20) (undo-tree-id5041 . -20) (undo-tree-id5042 . -20) (undo-tree-id5043 . -20) (undo-tree-id5044 . -20) (undo-tree-id5045 . -20) (undo-tree-id5046 . -20) (undo-tree-id5047 . -20) (undo-tree-id5048 . -20) (undo-tree-id5049 . -20) (undo-tree-id5050 . -20) (t 26050 10033 877097 418000)) ((7870 . 7890)) (26050 10095 511850 416000) 0 nil])
([nil nil ((7878 . 7879)) nil (26050 10111 856640 742000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 7870) (undo-tree-id4958 . -1)) ((7870 . 7871)) (26050 10095 234995 303000) 0 nil])
([nil nil ((7879 . 7883)) nil (26050 10111 856639 658000) 0 nil])
([nil nil ((#("            " 0 12 (fontified t)) . -7870)) ((7870 . 7882)) (26050 10094 908091 347000) 0 nil])
([nil nil ((7878 . 7888) (#("depre" 0 5 (fontified nil)) . 7878) (7878 . 7883) (#("deprecated" 0 10 (fontified nil)) . -7878) (7878 . 7888) (#("depre" 0 5 (face font-lock-preprocessor-face fontified t)) . -7878) (undo-tree-id5062 . -2) (undo-tree-id5063 . -5) (undo-tree-id5064 . -1) (undo-tree-id5065 . -1) (undo-tree-id5066 . -1) (undo-tree-id5067 . -1) (undo-tree-id5068 . -1) (undo-tree-id5069 . -1) (undo-tree-id5070 . -1) (undo-tree-id5071 . -1) (undo-tree-id5072 . -1) (undo-tree-id5073 . -2) (undo-tree-id5074 . -2) (undo-tree-id5075 . -2) (undo-tree-id5076 . -2) (undo-tree-id5077 . -2) (undo-tree-id5078 . -2) (undo-tree-id5079 . -2) (undo-tree-id5080 . -2) (undo-tree-id5081 . -3) (undo-tree-id5082 . -3) (undo-tree-id5083 . -4) (undo-tree-id5084 . -4) (undo-tree-id5085 . -5) (undo-tree-id5086 . -5) (undo-tree-id5087 . -5) (undo-tree-id5088 . -5) (undo-tree-id5089 . -5) (undo-tree-id5090 . -5) 7883) nil (26050 10111 856634 763000) 0 nil])
([nil nil ((#("#[allow(deprecated)]" 0 1 (face font-lock-preprocessor-face fontified t) 1 2 (face (rainbow-delimiters-depth-4-face font-lock-preprocessor-face) fontified t) 2 7 (face font-lock-preprocessor-face fontified t) 7 8 (face (rainbow-delimiters-depth-5-face font-lock-preprocessor-face) fontified t) 8 18 (face font-lock-preprocessor-face fontified t) 18 19 (face (rainbow-delimiters-depth-5-face font-lock-preprocessor-face) fontified t) 19 20 (face (rainbow-delimiters-depth-4-face font-lock-preprocessor-face) fontified t rear-nonsticky t)) . 8054) (undo-tree-id4947 . -20) (undo-tree-id4948 . -20) (undo-tree-id4949 . -20) (undo-tree-id4950 . -20) (undo-tree-id4951 . -20) (undo-tree-id4952 . -20) (undo-tree-id4953 . -20) (undo-tree-id4954 . -20) (undo-tree-id4955 . -20) (undo-tree-id4956 . -20) (undo-tree-id4957 . -20)) ((8054 . 8074)) (26050 10094 520356 457000) 0 nil])
([nil nil ((7564 . 7576) (#("            " 0 12 (fontified nil)) . 7563) (undo-tree-id5155 . -12) (undo-tree-id5156 . -12) (undo-tree-id5157 . -12) (7563 . 7576) (7535 . 7551) (#("            " 0 12 (fontified nil)) . 7535) (7558 . 7559) (t 26050 10111 880435 539000)) nil (26050 10152 270675 979000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 8054) (undo-tree-id4946 . -1)) ((8054 . 8055)) (26050 10093 882650 950000) 0 nil])
([nil nil ((7484 . 7500) (#("            " 0 12 (fontified t)) . 7484) 7500) nil (26050 10152 270672 288000) 0 nil])
([nil nil ((#("            " 0 12 (fontified t)) . -8054)) ((8054 . 8066)) (26050 10093 399094 372000) 0 nil])
([nil nil ((7464 . 7480) (#("            " 0 12 (fontified t)) . 7464) 7483) nil (26050 10152 270671 331000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7579 . 7580) (nil fontified nil 7579 . 7580) (nil fontified nil 7578 . 7579) (nil fontified nil 7577 . 7578) (nil fontified nil 7567 . 7577) (nil fontified nil 7566 . 7567) (nil fontified nil 7561 . 7566) (nil fontified nil 7560 . 7561) (nil fontified nil 7559 . 7560) (7559 . 7580)) ((#("#[allow(deprecated)]
" 0 1 (face font-lock-preprocessor-face fontified nil) 1 2 (face (rainbow-delimiters-depth-3-face font-lock-preprocessor-face) fontified nil) 2 7 (face font-lock-preprocessor-face fontified nil) 7 8 (face (rainbow-delimiters-depth-4-face font-lock-preprocessor-face) fontified nil) 8 18 (face font-lock-preprocessor-face fontified nil) 18 19 (face (rainbow-delimiters-depth-4-face font-lock-preprocessor-face) fontified nil) 19 20 (face (rainbow-delimiters-depth-3-face font-lock-preprocessor-face) fontified nil rear-nonsticky t) 20 21 (rear-nonsticky nil fontified nil)) . 7559) (undo-tree-id5058 . -16) (undo-tree-id5059 . -21) (undo-tree-id5060 . -21) (undo-tree-id5061 . -21) (nil rear-nonsticky t 7579 . 7580)) (26050 10092 994958 430000) 0 nil])
([nil nil ((7384 . 7388) 7399) nil (26050 10152 270670 67000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -7580) (undo-tree-id4944 . -1) (undo-tree-id4945 . -1) 7581) ((7580 . 7581)) (26050 10092 165103 251000) 0 nil])
([nil nil ((7352 . 7368) (#("            " 0 12 (fontified t)) . 7352) 7375) nil (26050 10152 270668 373000) 0 nil])
([nil nil ((7588 . 7592) 7580) ((#("    " 0 4 (fontified t)) . 7588)) (26050 10091 689723 257000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -7564) (undo-tree-id5150 . -4) (undo-tree-id5151 . -4) (undo-tree-id5152 . -4) (#("    " 0 4 (fontified t)) . -7543) (undo-tree-id5153 . -4) (undo-tree-id5154 . -4) (#("    " 0 4 (fontified t)) . -7492) (#("    " 0 4 (fontified t)) . -7472) (#("    " 0 4 (fontified t)) . -7380) (#("    " 0 4 (fontified t)) . -7360) (#("    " 0 4 (fontified t)) . -6369) 8862) nil (26050 10152 270663 600000) 0 nil])
([nil nil ((7559 . 7571) 7575) ((#("            " 0 12 (fontified t)) . 7559)) (26050 10091 509907 964000) 0 nil])
([nil nil ((7555 . 7563) (t 26050 10152 293771 353000)) nil (26050 10165 962566 740000) 0 nil])
([nil nil ((7564 . 7576) (#("            " 0 12 (fontified nil)) . 7563) (undo-tree-id4941 . -12) (undo-tree-id4942 . -12) (undo-tree-id4943 . -12) (7563 . 7576) (7535 . 7551) (#("            " 0 12 (fontified nil)) . 7535) (7558 . 7559)) ((#("
" 0 1 (fontified nil)) . 7558) (undo-tree-id5051 . -1) (undo-tree-id5052 . -1) (undo-tree-id5053 . -1) (undo-tree-id5054 . -1) (7535 . 7547) (#("                " 0 16 (fontified t)) . 7535) (#("            
" 0 12 (fontified nil) 12 13 (fontified nil)) . 7563) (undo-tree-id5055 . -12) (undo-tree-id5056 . -12) (undo-tree-id5057 . -12) (7563 . 7575) (#("            " 0 12 (fontified t)) . 7564)) (26050 10091 508763 559000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7582 . 7583) (nil fontified nil 7573 . 7583) (7573 . 7583)) nil (26050 10165 962565 823000) 0 nil])
nil
([nil nil ((7573 . 7581) 7583) nil (26050 10165 962564 803000) 0 nil])
([nil nil ((#("deprecated" 0 9 (fontified t) 9 10 (rear-nonsticky t fontified t)) . 7581) (undo-tree-id5171 . -10) (undo-tree-id5172 . -10) (undo-tree-id5173 . -10) (undo-tree-id5174 . -10) (undo-tree-id5175 . -10)) nil (26050 10165 962563 722000) 0 nil])
([nil nil ((7581 . 7584)) nil (26050 10165 962559 173000) 0 nil])
([nil nil ((7583 . 7584)) nil (26050 10165 962558 483000) 0 nil])
([nil nil ((#("lint" 0 4 (face font-lock-preprocessor-face fontified t)) . 7589) (undo-tree-id5165 . -4) (apply yas--snippet-revive 7583 7594 #s(yas--snippet nil (#s(yas--field 0 7589 7593 nil nil nil nil nil)) nil 29 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 0 7589 7593 nil nil nil nil nil)) nil 29 nil nil nil nil)) (7583 . 7594) (#("allow(${0:lint})" 0 16 (fontified nil)) . 7583) (7583 . 7599) (#("a" 0 1 (fontified nil)) . 7583) (7583 . 7584) (#("allow(…)" 0 8 (fontified nil)) . -7583) (7583 . 7591) (#("a" 0 1 (face font-lock-preprocessor-face fontified t)) . -7583) (undo-tree-id5166 . -1) (undo-tree-id5167 . -1) (undo-tree-id5168 . -1) (undo-tree-id5169 . -1) (undo-tree-id5170 . -1) 7584) nil (26050 10165 962556 586000) 0 nil])
([nil nil ((7589 . 7591)) nil (26050 10165 962548 225000) 0 nil])
([nil nil ((7589 . 7599) (#("de" 0 2 (fontified nil)) . 7589) (7589 . 7591) (#("deprecated" 0 10 (fontified nil)) . -7589) (7589 . 7599) (#("de" 0 2 (face font-lock-preprocessor-face fontified t)) . -7589) (undo-tree-id5158 . -2) (undo-tree-id5159 . -1) (undo-tree-id5160 . -1) (undo-tree-id5161 . -2) (undo-tree-id5162 . -2) (undo-tree-id5163 . -2) (undo-tree-id5164 . -2) 7591) nil (26050 10165 962543 991000) 0 nil])
([nil nil ((#("#[allow(deprecated)]" 0 1 (face font-lock-preprocessor-face fontified t) 1 2 (face (rainbow-delimiters-depth-4-face font-lock-preprocessor-face) fontified t) 2 7 (face font-lock-preprocessor-face fontified t) 7 8 (face (rainbow-delimiters-depth-5-face font-lock-preprocessor-face) fontified t) 8 18 (face font-lock-preprocessor-face fontified t) 18 19 (face (rainbow-delimiters-depth-5-face font-lock-preprocessor-face) fontified t) 19 20 (face (rainbow-delimiters-depth-4-face font-lock-preprocessor-face) fontified t)) . 7912) (undo-tree-id5179 . -8) (undo-tree-id5180 . -8) (undo-tree-id5181 . -20) (undo-tree-id5182 . -19) (undo-tree-id5183 . -19) (undo-tree-id5184 . -19) (undo-tree-id5185 . -19) (undo-tree-id5186 . -19) (undo-tree-id5187 . -19) (undo-tree-id5188 . -19) (undo-tree-id5189 . -19) (undo-tree-id5190 . -19) (undo-tree-id5191 . -20) (undo-tree-id5192 . -20) (undo-tree-id5193 . -20) (undo-tree-id5194 . -20) (undo-tree-id5195 . -20) (undo-tree-id5196 . -20) (undo-tree-id5197 . -20) (undo-tree-id5198 . -20) (undo-tree-id5199 . -20) (undo-tree-id5200 . -20) (undo-tree-id5201 . -20) (t 26050 10165 987105 525000)) nil (26050 10174 45850 101000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 7912) (undo-tree-id5178 . -1)) nil (26050 10174 45834 541000) 0 nil])
([nil nil ((#("            " 0 12 (fontified t)) . -7912)) nil (26050 10174 45833 77000) 0 nil])
([nil nil ((#("#[allow(deprecated)]" 0 1 (face font-lock-preprocessor-face fontified t) 1 2 (face (rainbow-delimiters-depth-4-face font-lock-preprocessor-face) fontified t) 2 7 (face font-lock-preprocessor-face fontified t) 7 8 (face (rainbow-delimiters-depth-5-face font-lock-preprocessor-face) fontified t) 8 18 (face font-lock-preprocessor-face fontified t) 18 19 (face (rainbow-delimiters-depth-5-face font-lock-preprocessor-face) fontified t) 19 20 (face (rainbow-delimiters-depth-4-face font-lock-preprocessor-face) fontified t rear-nonsticky t)) . 8096) (undo-tree-id5177 . -20)) nil (26050 10174 45832 230000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 8096) (undo-tree-id5176 . -1)) nil (26050 10174 45829 696000) 0 nil])
([nil nil ((#("            " 0 12 (fontified t)) . -8096)) nil (26050 10174 45820 916000) 0 nil])
([nil nil ((15023 . 15036) (t 26050 10174 100439 358000)) nil (26050 10196 140373 22000) 0 nil])
([nil nil ((nil rear-nonsticky nil 15081 . 15082) (nil fontified nil 15036 . 15082) (15036 . 15082)) nil (26050 10196 140371 388000) 0 nil])
([nil nil ((#("            " 0 12 (fontified t)) . -15036) 15024) nil (26050 10196 140366 154000) 0 nil])
([nil nil ((1700 . 1713) (t 26050 10196 153774 45000)) nil (26050 10236 418647 980000) 0 nil])
([nil nil ((1713 . 1714)) nil (26050 10236 418647 56000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -1713) (undo-tree-id5219 . -1) (undo-tree-id5220 . -1) (undo-tree-id5221 . -1) (undo-tree-id5222 . -1) (undo-tree-id5223 . -1) (undo-tree-id5224 . -1) (undo-tree-id5225 . -1) (undo-tree-id5226 . -1) (undo-tree-id5227 . -1) (undo-tree-id5228 . -1) 1714) nil (26050 10236 418645 931000) 0 nil])
([nil nil ((1713 . 1714)) nil (26050 10236 418638 207000) 0 nil])
([nil nil ((1713 . 1719) (#("d" 0 1 (fontified nil)) . 1713) (1713 . 1714) (#("device" 0 6 (fontified nil)) . -1713) (1713 . 1719) (#("d" 0 1 (fontified t)) . -1713) (undo-tree-id5213 . -1) (undo-tree-id5214 . -1) (undo-tree-id5215 . -1) (undo-tree-id5216 . -1) (undo-tree-id5217 . -1) (undo-tree-id5218 . -1) 1714) nil (26050 10236 418637 29000) 0 nil])
([nil nil ((1719 . 1722)) nil (26050 10236 418631 253000) 0 nil])
([nil nil ((1721 . 1735) (#("l" 0 1 (fontified nil)) . 1721) (1721 . 1722) (#("logical_device" 0 14 (fontified nil)) . -1721) (1721 . 1735) (#("l" 0 1 (fontified t)) . -1721) (undo-tree-id5208 . -1) (undo-tree-id5209 . -1) (undo-tree-id5210 . -1) (undo-tree-id5211 . -1) (undo-tree-id5212 . -1) 1722) nil (26050 10236 418630 3000) 0 nil])
([nil nil ((1735 . 1736)) nil (26050 10236 418624 90000) 0 nil])
([nil nil ((1736 . 1749)) nil (26050 10236 418623 475000) 0 nil])
([nil nil ((1749 . 1750)) nil (26050 10236 418622 239000) 0 nil])
([nil nil ((1749 . 1763) (#("q" 0 1 (fontified nil)) . 1749) (1749 . 1750) (#("graphics_queue" 0 14 (fontified nil)) . -1749) (1749 . 1763) (#("q" 0 1 (fontified t)) . -1749) (undo-tree-id5202 . -1) (undo-tree-id5203 . -1) (undo-tree-id5204 . -1) (undo-tree-id5205 . -1) (undo-tree-id5206 . -1) (undo-tree-id5207 . -1) 1750) nil (26050 10236 418618 14000) 0 nil])
([nil nil ((#("VALIDATION" 0 10 (face font-lock-type-face fontified t)) . -1517) (undo-tree-id5241 . -10) (undo-tree-id5242 . -10) (undo-tree-id5243 . -10) (undo-tree-id5244 . -10) (undo-tree-id5245 . -10) (undo-tree-id5246 . -10) (undo-tree-id5247 . -10) (undo-tree-id5248 . -10) (undo-tree-id5249 . -10) (undo-tree-id5250 . -10) (undo-tree-id5251 . -10) (undo-tree-id5252 . -10) (undo-tree-id5253 . -10) (undo-tree-id5254 . -10) (undo-tree-id5255 . -10) (undo-tree-id5256 . -10) (undo-tree-id5257 . -10) 1527 (t 26050 10236 443776 515000)) nil (26050 10253 466943 988000) 0 nil])
([nil nil ((1517 . 1519)) nil (26050 10253 466554 471000) 0 nil])
([nil nil ((1517 . 1524) (#("ut" 0 2 (fontified nil)) . 1517) (1517 . 1519) (#("utility" 0 7 (fontified nil)) . -1517) (1517 . 1524) (#("ut" 0 2 (fontified t)) . -1517) (undo-tree-id5229 . -2) (undo-tree-id5230 . -2) (undo-tree-id5231 . -1) (undo-tree-id5232 . -1) (undo-tree-id5233 . -1) (undo-tree-id5234 . -1) (undo-tree-id5235 . -1) (undo-tree-id5236 . -2) (undo-tree-id5237 . -2) (undo-tree-id5238 . -2) (undo-tree-id5239 . -2) (undo-tree-id5240 . -2) 1519) nil (26050 10253 466552 910000) 0 nil])
([nil nil ((1524 . 1526)) nil (26050 10253 466532 608000) 0 nil])
([nil nil ((1526 . 1536) (#("validation" 0 10 (fontified nil)) . -1526) (1526 . 1536)) nil (26050 10253 466531 609000) 0 nil])
([nil nil ((1536 . 1538)) nil (26050 10253 466530 13000) 0 nil])
([nil nil ((1538 . 1554) (#("VALIDATIONLAYERS" 0 16 (fontified nil)) . -1538) (1538 . 1554)) nil (26050 10253 466525 647000) 0 nil])
([nil nil ((1554 . 1557) (t 26050 10253 520444 228000)) nil (26050 10323 692008 353000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1554) (undo-tree-id5258 . -1) (undo-tree-id5259 . -1) (undo-tree-id5260 . -1) (undo-tree-id5261 . -1) (undo-tree-id5262 . -1) (undo-tree-id5263 . -1) (undo-tree-id5264 . -1) (undo-tree-id5265 . -1) (undo-tree-id5266 . -1) (undo-tree-id5267 . -1) (undo-tree-id5268 . -1) (undo-tree-id5269 . -1) (undo-tree-id5270 . -1) (undo-tree-id5271 . -1) (undo-tree-id5272 . -1) (undo-tree-id5273 . -1) (undo-tree-id5274 . -1) (undo-tree-id5275 . -1) (undo-tree-id5276 . -1) (#("t" 0 1 (fontified t)) . -1555) (undo-tree-id5277 . -1) (undo-tree-id5278 . -1) (undo-tree-id5279 . -1) (undo-tree-id5280 . -1) (undo-tree-id5281 . -1) (undo-tree-id5282 . -1) (undo-tree-id5283 . -1) (undo-tree-id5284 . -1) (undo-tree-id5285 . -1) (undo-tree-id5286 . -1) (undo-tree-id5287 . -1) (undo-tree-id5288 . -1) (undo-tree-id5289 . -1) (#("o" 0 1 (fontified t)) . -1556) (undo-tree-id5290 . -1) (undo-tree-id5291 . -1) (undo-tree-id5292 . -1) (undo-tree-id5293 . -1) (undo-tree-id5294 . -1) (undo-tree-id5295 . -1) (undo-tree-id5296 . -1) 1557) nil (26050 10323 692004 590000) 0 nil])
([nil current ((6584 . 6585)) nil (26050 10323 691966 826000) 0 nil])
nil
