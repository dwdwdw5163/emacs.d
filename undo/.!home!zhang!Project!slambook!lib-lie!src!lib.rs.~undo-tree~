(undo-tree-save-format-version . 1)
"ed8b6f7935e09541eaf756de63e7145136b3a965"
[nil nil nil nil (26039 43681 153032 102000) 0 nil]
([nil nil ((#("pub fn add(left: usize, right: usize) -> usize {
    left + right
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn it_works() {
        let result = add(2, 2);
        assert_eq!(result, 4);
    }
}
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 10 (face font-lock-function-name-face fontified t) 10 11 (face (rainbow-delimiters-depth-1-face) fontified t) 11 15 (face font-lock-variable-name-face fontified t) 15 17 (fontified t) 17 22 (face font-lock-type-face fontified t) 22 24 (fontified t) 24 29 (face font-lock-variable-name-face fontified t) 29 31 (fontified t) 31 36 (face font-lock-type-face fontified t) 36 37 (face (rainbow-delimiters-depth-1-face) fontified t) 37 39 (fontified t) 39 40 (syntax-table (1) fontified t) 40 41 (fontified t) 41 46 (face font-lock-type-face fontified t) 46 47 (fontified t) 47 48 (face (rainbow-delimiters-depth-1-face) fontified t) 48 66 (fontified t) 66 67 (face (rainbow-delimiters-depth-1-face) fontified t) 67 69 (fontified t) 69 70 (face font-lock-preprocessor-face fontified t) 70 71 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t) 71 74 (face font-lock-preprocessor-face fontified t) 74 75 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 75 79 (face font-lock-preprocessor-face fontified t) 79 80 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 80 81 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t) 81 82 (fontified t) 82 85 (face font-lock-keyword-face fontified t) 85 86 (fontified t) 86 91 (face font-lock-constant-face fontified t) 91 92 (fontified t) 92 93 (face (rainbow-delimiters-depth-1-face) fontified t) 93 98 (fontified t) 98 101 (face font-lock-keyword-face fontified t) 101 102 (fontified t) 102 107 (face font-lock-keyword-face fontified t) 107 117 (fontified t) 117 118 (face font-lock-preprocessor-face fontified t) 118 119 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 119 123 (face font-lock-preprocessor-face fontified t) 123 124 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 124 129 (fontified t) 129 131 (face font-lock-keyword-face fontified t) 131 132 (fontified t) 132 140 (face font-lock-function-name-face fontified t) 140 141 (face (rainbow-delimiters-depth-2-face) fontified t) 141 142 (face (rainbow-delimiters-depth-2-face) fontified t) 142 143 (fontified t) 143 144 (face (rainbow-delimiters-depth-2-face) fontified t) 144 153 (fontified t) 153 156 (face font-lock-keyword-face fontified t) 156 157 (fontified t) 157 163 (face font-lock-variable-name-face fontified t) 163 169 (fontified t) 169 170 (face (rainbow-delimiters-depth-3-face) fontified t) 170 174 (fontified t) 174 175 (face (rainbow-delimiters-depth-3-face) fontified t) 175 185 (fontified t) 185 195 (face font-lock-preprocessor-face fontified t) 195 196 (face (rainbow-delimiters-depth-3-face) fontified t) 196 205 (fontified t) 205 206 (face (rainbow-delimiters-depth-3-face) fontified t) 206 212 (fontified t) 212 213 (face (rainbow-delimiters-depth-2-face) fontified t) 213 214 (fontified t) 214 215 (face (rainbow-delimiters-depth-1-face) fontified t) 215 216 (fontified t)) . 1) (undo-tree-id107 . -216) (undo-tree-id108 . -216) (undo-tree-id109 . -216) (t 26039 43245 112826 146000)) nil (26039 43681 153030 981000) 0 nil])
([nil nil ((1 . 6)) nil (26039 43681 153028 373000) 0 nil])
([nil nil ((#("a" 0 1 (face font-lock-constant-face fontified t)) . -5) (undo-tree-id106 . -1) 6) nil (26039 43681 153027 617000) 0 nil])
([nil nil ((5 . 7)) nil (26039 43681 153026 342000) 0 nil])
([nil nil ((5 . 13) (#("na" 0 2 (fontified nil)) . 5) (5 . 7) (#("nalgebra" 0 8 (fontified nil)) . -5) (5 . 13) (#("na" 0 2 (face font-lock-constant-face fontified t)) . -5) (undo-tree-id105 . -2) 7) nil (26039 43681 153025 334000) 0 nil])
([nil nil ((13 . 17)) nil (26039 43681 153023 415000) 0 nil])
([nil nil ((#("R" 0 1 (face font-lock-type-face fontified t)) . -15) (undo-tree-id103 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -16) (undo-tree-id104 . -1) 17) nil (26039 43681 153022 468000) 0 nil])
([nil nil ((15 . 17)) nil (26039 43681 153020 330000) 0 nil])
([nil nil ((#("q" 0 1 (fontified t)) . -15) (undo-tree-id101 . -1) (#("u" 0 1 (fontified t)) . -16) (undo-tree-id102 . -1) 17) nil (26039 43681 153019 378000) 0 nil])
([nil nil ((15 . 17)) nil (26039 43681 153017 396000) 0 nil])
([nil nil ((15 . 25) (#("Qu" 0 2 (fontified nil)) . 15) (15 . 17) (#("Quaternion" 0 10 (fontified nil)) . -15) (15 . 25) (#("Qu" 0 2 (face font-lock-type-face fontified t)) . -15) (undo-tree-id100 . -2) 17) nil (26039 43681 153016 100000) 0 nil])
([nil nil ((25 . 26)) nil (26039 43681 153014 263000) 0 nil])
([nil nil ((26 . 28)) nil (26039 43681 153013 769000) 0 nil])
([nil nil ((28 . 35)) nil (26039 43681 153013 291000) 0 nil])
([nil nil ((apply yas--snippet-revive 32 39 #s(yas--snippet nil nil #s(yas--exit 39 nil) 4 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 39 nil) 4 nil nil nil nil)) (32 . 39) (#("struct $0" 0 9 (fontified nil)) . 32) (32 . 41) (#("str" 0 3 (fontified nil)) . 32) (32 . 35) (#("struct" 0 6 (fontified nil)) . -32) (32 . 38) (#("str" 0 3 (face font-lock-type-face fontified t)) . -32) (undo-tree-id98 . -3) (undo-tree-id99 . -3) 35) nil (26039 43681 153012 179000) 0 nil])
([nil nil ((39 . 45)) nil (26039 43681 153008 510000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . 45) (45 . 49) (44 . 46)) nil (26039 43681 153007 693000) 0 nil])
([nil nil ((45 . 49)) nil (26039 43681 153006 707000) 0 nil])
([nil nil ((49 . 50)) nil (26039 43681 153006 225000) 0 nil])
([nil nil ((#("Q" 0 1 (face font-lock-type-face fontified t)) . -49) (undo-tree-id97 . -1) 50) nil (26039 43681 153005 359000) 0 nil])
([nil nil ((27 . 28)) nil (26039 43681 152780 386000) 0 nil])
([nil nil ((27 . 28)) nil (26039 43681 152779 844000) 0 nil])
([nil nil ((27 . 32)) nil (26039 43681 152779 155000) 0 nil])
([nil nil ((31 . 39) (#("n" 0 1 (fontified nil)) . 31) (31 . 32) (#("nalgebra" 0 8 (fontified nil)) . -31) (31 . 39) (#("n" 0 1 (face font-lock-constant-face fontified t)) . -31) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) 32) nil (26039 43681 152778 51000) 0 nil])
([nil nil ((39 . 45)) nil (26039 43681 152774 848000) 0 nil])
([nil nil ((41 . 50) (#("Rota" 0 4 (fontified nil)) . 41) (41 . 45) (#("Rotation3" 0 9 (fontified nil)) . -41) (41 . 50) (#("Rota" 0 4 (face font-lock-type-face fontified t)) . -41) (undo-tree-id82 . -4) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -2) (undo-tree-id86 . -2) (undo-tree-id87 . -3) (undo-tree-id88 . -3) (undo-tree-id89 . -4) (undo-tree-id90 . -4) (undo-tree-id91 . -4) (undo-tree-id92 . -4) (undo-tree-id93 . -4) 45) nil (26039 43681 152773 306000) 0 nil])
([nil nil ((50 . 51)) nil (26039 43681 152763 907000) 0 nil])
([nil nil ((#("use nalgebra::Rotation3;" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 12 (face font-lock-constant-face fontified t) 12 14 (fontified t) 14 23 (face font-lock-type-face fontified t) 23 24 (fontified t)) . 27) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -2) (undo-tree-id22 . -2) (undo-tree-id23 . -3) (undo-tree-id24 . -3) (undo-tree-id25 . -4) (undo-tree-id26 . -4) (undo-tree-id27 . -4) (undo-tree-id28 . -4) (undo-tree-id29 . -4) (undo-tree-id30 . -12) (undo-tree-id31 . -12) (undo-tree-id32 . -12) (undo-tree-id33 . -13) (undo-tree-id34 . -13) (undo-tree-id35 . -14) (undo-tree-id36 . -14) (undo-tree-id37 . -14) (undo-tree-id38 . -14) (undo-tree-id39 . -14) (undo-tree-id40 . -14) (undo-tree-id41 . -14) (undo-tree-id42 . -14) (undo-tree-id43 . -14) (undo-tree-id44 . -14) (undo-tree-id45 . -14) (undo-tree-id46 . -14) (undo-tree-id47 . -14) (undo-tree-id48 . -23) (undo-tree-id49 . -23) (undo-tree-id50 . -23) (undo-tree-id51 . -24) (undo-tree-id52 . -24) (undo-tree-id53 . -24) (undo-tree-id54 . -24) (undo-tree-id55 . -24) (undo-tree-id56 . -24) (undo-tree-id57 . -24) (undo-tree-id58 . -24) (undo-tree-id59 . -24) (undo-tree-id60 . -24) (undo-tree-id61 . -24) (undo-tree-id62 . -24) (undo-tree-id63 . -24) (undo-tree-id64 . -24) (undo-tree-id65 . -24) (undo-tree-id66 . -24) (undo-tree-id67 . -24) (undo-tree-id68 . -24) (undo-tree-id69 . -24) (undo-tree-id70 . -24) (undo-tree-id71 . -24) (undo-tree-id72 . -24) (undo-tree-id73 . -24) (undo-tree-id74 . -24) (undo-tree-id75 . -24) (undo-tree-id76 . -24) (undo-tree-id77 . -24) (undo-tree-id78 . -24) (undo-tree-id79 . -24) (undo-tree-id80 . -24) (undo-tree-id81 . -24)) nil (26039 43681 152760 600000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 27) (undo-tree-id14 . 1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1)) nil (26039 43681 152476 159000) 0 nil])
([nil nil ((27 . 28)) nil (26039 43681 152471 924000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 28) (undo-tree-id3 . 1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . 1) (undo-tree-id13 . -1)) nil (26039 43681 152470 732000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 28) (undo-tree-id0 . 1) (undo-tree-id1 . 1) (undo-tree-id2 . -1)) nil (26039 43681 152461 670000) 0 nil])
([nil nil ((51 . 52) 28) nil (26039 43681 152439 304000) 0 nil])
([nil nil ((49 . 50) (t 26039 43681 196134 161000)) nil (26039 43969 492497 379000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -49) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) 50) nil (26039 43969 492496 405000) 0 nil])
([nil nil ((49 . 53)) nil (26039 43969 492492 712000) 0 nil])
([nil nil ((apply yas--snippet-revive 52 64 #s(yas--snippet nil nil #s(yas--exit 63 nil) 6 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 63 nil) 6 nil nil nil nil)) (52 . 64) (#("Quaternion<$0>" 0 14 (fontified nil)) . 52) (52 . 66) (#("Q" 0 1 (fontified nil)) . 52) (52 . 53) (#("Quaternion<…>" 0 13 (fontified nil)) . -52) (52 . 65) (#("Q" 0 1 (face font-lock-type-face fontified t)) . -52) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) 53) nil (26039 43969 492490 945000) 0 nil])
([nil nil ((63 . 64)) nil (26039 43969 492485 251000) 0 nil])
([nil nil ((#("F" 0 1 (face font-lock-type-face fontified t)) . -63) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) 64) nil (26039 43969 492484 259000) 0 nil])
([nil nil ((63 . 64)) nil (26039 43969 492479 252000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -63) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) 64) nil (26039 43969 492477 761000) 0 nil])
([nil nil ((63 . 64)) nil (26039 43969 492464 358000) 0 nil])
([nil nil ((42 . 44)) nil (26039 43969 492463 641000) 0 nil])
([nil nil ((43 . 44)) nil (26039 43969 492462 435000) 0 nil])
([nil nil ((68 . 69)) nil (26039 43969 492458 328000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-variable-name-face fontified t)) . -52) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) 53 (t 26039 43969 502784 58000)) nil (26039 44008 629917 626000) 0 nil])
([nil nil ((52 . 53)) nil (26039 44008 629912 869000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -52) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) 53) nil (26039 44008 629911 677000) 0 nil])
([nil nil ((52 . 60)) nil (26039 44008 630246 269000) 0 nil])
([nil nil ((79 . 80) (t 26039 44013 959448 130000)) nil (26039 44251 447924 595000) 0 nil] [nil nil ((#("use nalgebra::Quaternion;

pub struct SO3<T> {
    rotation: Quaternion<T>," 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 12 (face font-lock-constant-face fontified t) 12 14 (fontified t) 14 24 (face font-lock-type-face fontified t) 24 26 (fontified t) 26 27 (fontified t) 27 30 (face font-lock-keyword-face fontified t) 30 31 (fontified t) 31 37 (face font-lock-keyword-face fontified t) 37 38 (fontified t) 38 41 (face font-lock-type-face fontified t) 41 42 (face (rainbow-delimiters-depth-1-face) fontified t) 42 43 (face font-lock-type-face fontified t) 43 44 (face (rainbow-delimiters-depth-1-face) fontified t) 44 45 (fontified t) 45 46 (face (rainbow-delimiters-depth-1-face) fontified t) 46 47 (fontified t) 47 51 (fontified t) 51 59 (face font-lock-variable-name-face fontified t) 59 61 (fontified t) 61 71 (face font-lock-type-face fontified t) 71 72 (face (rainbow-delimiters-depth-2-face) fontified t) 72 73 (face font-lock-type-face fontified t) 73 74 (face (rainbow-delimiters-depth-2-face) fontified t) 74 75 (fontified t)) . 1) (undo-tree-id135 . -27) (undo-tree-id136 . -75) (undo-tree-id137 . -75) (undo-tree-id138 . -51) (undo-tree-id139 . -51) (undo-tree-id140 . -51) (undo-tree-id141 . -51) (undo-tree-id142 . -61) (undo-tree-id143 . -61) (undo-tree-id144 . -61) (undo-tree-id145 . -61) (undo-tree-id146 . -61) (undo-tree-id147 . -72) (undo-tree-id148 . -72) (undo-tree-id149 . -72) (undo-tree-id150 . -72) (undo-tree-id151 . -72) (undo-tree-id152 . -72) (undo-tree-id153 . -72) (undo-tree-id154 . -72) (undo-tree-id155 . -72) (undo-tree-id156 . -72) (undo-tree-id157 . -72) (undo-tree-id158 . -75) (undo-tree-id159 . -75) (undo-tree-id160 . -75) (undo-tree-id161 . -75) (undo-tree-id162 . -75) (undo-tree-id163 . -75) (undo-tree-id164 . -75) (undo-tree-id165 . -75) (undo-tree-id166 . -75) (undo-tree-id167 . -75) (undo-tree-id168 . -75) (undo-tree-id169 . -75) (undo-tree-id170 . -75) (undo-tree-id171 . -75) (undo-tree-id172 . -46) (undo-tree-id173 . -46) (undo-tree-id174 . -46) (undo-tree-id175 . -46) (undo-tree-id176 . -46) (undo-tree-id177 . -75) (undo-tree-id178 . -75) (undo-tree-id179 . -75) (undo-tree-id180 . -75) (undo-tree-id181 . -75) (undo-tree-id182 . -75) (undo-tree-id183 . -75) (undo-tree-id184 . -75) (undo-tree-id185 . -75) (undo-tree-id186 . -75) (undo-tree-id187 . -75) (undo-tree-id188 . -75) (undo-tree-id189 . -75) (undo-tree-id190 . -75) (undo-tree-id191 . -75) (undo-tree-id192 . -75) (undo-tree-id193 . -75) (undo-tree-id194 . -75) (undo-tree-id195 . -75) (undo-tree-id196 . -75) (undo-tree-id197 . -75) (undo-tree-id198 . -75) (undo-tree-id199 . -72) (undo-tree-id200 . -61) (undo-tree-id201 . -51) (undo-tree-id202 . -51) (undo-tree-id203 . -51) (undo-tree-id204 . -51) (undo-tree-id205 . -51) (undo-tree-id206 . -51) (undo-tree-id207 . -51) (undo-tree-id208 . -51) (undo-tree-id209 . -51) (undo-tree-id210 . -51) (undo-tree-id211 . -51) (undo-tree-id212 . -51) (undo-tree-id213 . -51) (undo-tree-id214 . -51) (undo-tree-id215 . -51) (undo-tree-id216 . -51) (undo-tree-id217 . -51) (undo-tree-id218 . -51) (undo-tree-id219 . -51) (undo-tree-id220 . -51) (undo-tree-id221 . -51) (undo-tree-id222 . -51) (undo-tree-id223 . -51) (undo-tree-id224 . -51) (undo-tree-id225 . -52) (undo-tree-id226 . -52) (undo-tree-id227 . -52) (undo-tree-id228 . -47) (undo-tree-id229 . -53) (undo-tree-id230 . -53) (undo-tree-id231 . -53) (undo-tree-id232 . -53) (undo-tree-id233 . -54) (undo-tree-id234 . -54) (undo-tree-id235 . -55) (undo-tree-id236 . -55) (undo-tree-id237 . -56) (undo-tree-id238 . -56) (undo-tree-id239 . -57) (undo-tree-id240 . -57) (undo-tree-id241 . -58) (undo-tree-id242 . -58) (undo-tree-id243 . -59) (undo-tree-id244 . -59) (undo-tree-id245 . 16) (undo-tree-id246 . -59) (undo-tree-id247 . -59) (undo-tree-id248 . -59) (undo-tree-id249 . -59) (undo-tree-id250 . -59) (undo-tree-id251 . -59) (undo-tree-id252 . -59) (undo-tree-id253 . -47) (undo-tree-id254 . -75) (undo-tree-id255 . -75) 76) ((1 . 76)) (26039 44008 629899 247000) 0 nil])
([nil nil ((#("<" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -42) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (#("T" 0 1 (face font-lock-type-face fontified t)) . -43) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (#(">" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -44) (undo-tree-id285 . -1) (undo-tree-id286 . -1) 45) nil (26039 44251 447923 380000) 0 nil])
nil
([nil nil ((#("T" 0 1 (face font-lock-type-face fontified t)) . -70) (undo-tree-id279 . -1) (undo-tree-id280 . -1) 71) nil (26039 44251 447918 688000) 0 nil])
([nil nil ((70 . 74)) nil (26039 44251 447916 796000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -71) (undo-tree-id276 . -1) (#("3" 0 1 (fontified t)) . -72) (undo-tree-id277 . -1) (#("2" 0 1 (fontified t)) . -73) (undo-tree-id278 . -1) 74) nil (26039 44251 447915 887000) 0 nil])
([nil nil ((71 . 72)) nil (26039 44251 447913 134000) 0 nil])
([nil nil ((70 . 73) (#("f3" 0 2 (fontified nil)) . 70) (70 . 72) (#("f32" 0 3 (fontified nil)) . -70) (70 . 73) (#("f3" 0 2 (fontified t)) . -70) (undo-tree-id275 . -2) 72) nil (26039 44251 447912 275000) 0 nil])
([nil nil ((78 . 79)) nil (26039 44251 447910 489000) 0 nil])
([nil nil ((79 . 83)) nil (26039 44251 447910 21000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 84 87 nil nil nil t #s(yas--exit 94 nil))) #s(yas--exit 94 nil) 7 nil #s(yas--field 1 84 87 nil nil nil t #s(yas--exit 94 nil)) nil nil)) (79 . 93) (#("impl $1 {
    $0
}" 0 18 (fontified nil)) . 79) (79 . 97) (#("impl" 0 4 (fontified nil)) . 79) (79 . 83) (#("impl" 0 4 (face font-lock-keyword-face fontified t)) . -79) (undo-tree-id274 . -4) 83) nil (26039 44251 447909 119000) 0 nil])
([nil nil ((84 . 85)) nil (26039 44251 447907 81000) 0 nil])
([nil nil ((84 . 87) (#("S" 0 1 (fontified nil)) . 84) (84 . 85) (#("SO3" 0 3 (fontified nil)) . -84) (84 . 87) (#("S" 0 1 (face font-lock-type-face fontified t)) . -84) (undo-tree-id273 . -1) 85) nil (26039 44251 447906 90000) 0 nil])
([nil nil ((apply yas--snippet-revive 79 96 #s(yas--snippet nil (#s(yas--field 1 84 87 nil nil nil t #s(yas--exit 94 nil))) #s(yas--exit 94 nil) 7 nil #s(yas--field 1 84 87 nil nil nil t #s(yas--exit 94 nil)) nil nil))) nil (26039 44251 447904 242000) 0 nil])
([nil nil ((94 . 104)) nil (26039 44251 447903 650000) 0 nil])
([nil nil ((104 . 106)) nil (26039 44251 447902 956000) 0 nil])
([nil nil ((106 . 109)) nil (26039 44251 447902 445000) 0 nil])
([nil nil ((109 . 111)) nil (26039 44251 447902 6000) 0 nil])
([nil nil ((110 . 113) (#("S" 0 1 (fontified nil)) . 110) (110 . 111) (#("SO3" 0 3 (fontified nil)) . -110) (110 . 113) (#("S" 0 1 (face font-lock-type-face fontified t)) . -110) (undo-tree-id272 . -1) 111) nil (26039 44251 447901 196000) 0 nil])
([nil nil ((113 . 116)) nil (26039 44251 447899 345000) 0 nil])
([nil nil ((117 . 121) (#("        " 0 8 (fontified nil)) . 116) (116 . 124) (#("    " 0 4 (fontified nil)) . 116) (undo-tree-id271 . -4) (115 . 121)) nil (26039 44251 447898 589000) 0 nil])
([nil nil ((116 . 124)) nil (26039 44251 447896 813000) 0 nil])
([nil nil ((124 . 125)) nil (26039 44251 447896 262000) 0 nil])
([nil nil ((124 . 134) (#("Q" 0 1 (fontified nil)) . 124) (124 . 125) (#("Quaternion" 0 10 (fontified nil)) . -124) (124 . 134) (#("Q" 0 1 (face font-lock-type-face fontified t)) . -124) (undo-tree-id270 . -1) 125) nil (26039 44251 447895 118000) 0 nil])
([nil nil ((134 . 137)) nil (26039 44251 447893 122000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 140 141 nil nil nil nil #s(yas--field 2 143 144 nil nil nil nil #s(yas--field 3 146 147 nil nil nil nil #s(yas--field 4 149 150 nil nil nil nil #s(yas--exit 151 nil))))) #s(yas--field 2 143 144 nil nil nil nil #s(yas--field 3 146 147 nil nil nil nil #s(yas--field 4 149 150 nil nil nil nil #s(yas--exit 151 nil)))) #s(yas--field 3 146 147 nil nil nil nil #s(yas--field 4 149 150 nil nil nil nil #s(yas--exit 151 nil))) #s(yas--field 4 149 150 nil nil nil nil #s(yas--exit 151 nil))) #s(yas--exit 151 nil) 8 nil #s(yas--field 1 140 141 nil nil nil nil #s(yas--field 2 143 144 nil nil nil nil #s(yas--field 3 146 147 nil nil nil nil #s(yas--field 4 149 150 nil nil nil nil #s(yas--exit 151 nil))))) nil nil)) (136 . 151) (#("new(${1:w}, ${2:i}, ${3:j}, ${4:k})$0" 0 37 (fontified nil)) . 136) (136 . 173) (#("n" 0 1 (fontified nil)) . 136) (136 . 137) (#("new(…)" 0 6 (fontified nil)) . -136) (136 . 142) (#("n" 0 1 (fontified t)) . -136) (undo-tree-id269 . -1) 137) nil (26039 44251 447892 54000) 0 nil])
([nil nil ((apply yas--snippet-revive 136 151 #s(yas--snippet nil (#s(yas--field 1 140 141 nil nil nil nil #s(yas--field 2 143 144 nil nil nil nil #s(yas--field 3 146 147 nil nil nil nil #s(yas--field 4 149 150 nil nil nil nil #s(yas--exit 151 nil))))) #s(yas--field 2 143 144 nil nil nil nil #s(yas--field 3 146 147 nil nil nil nil #s(yas--field 4 149 150 nil nil nil nil #s(yas--exit 151 nil)))) #s(yas--field 3 146 147 nil nil nil nil #s(yas--field 4 149 150 nil nil nil nil #s(yas--exit 151 nil))) #s(yas--field 4 149 150 nil nil nil nil #s(yas--exit 151 nil))) #s(yas--exit 151 nil) 8 nil #s(yas--field 1 140 141 nil nil nil nil #s(yas--field 2 143 144 nil nil nil nil #s(yas--field 3 146 147 nil nil nil nil #s(yas--field 4 149 150 nil nil nil nil #s(yas--exit 151 nil))))) nil nil))) nil (26039 44251 447889 813000) 0 nil])
([nil nil ((42 . 44)) nil (26039 44251 447889 279000) 0 nil])
([nil nil ((43 . 44)) nil (26039 44251 447888 694000) 0 nil])
([nil nil ((#("f32" 0 3 (face font-lock-type-face fontified t)) . -73) (undo-tree-id267 . -3) (undo-tree-id268 . -3) 76) nil (26039 44251 447887 668000) 0 nil])
([nil nil ((73 . 74)) nil (26039 44251 447885 488000) 0 nil])
([nil nil ((84 . 86)) nil (26039 44251 447884 947000) 0 nil])
([nil nil ((85 . 86)) nil (26039 44251 447884 458000) 0 nil])
([nil nil ((91 . 93)) nil (26039 44251 447883 940000) 0 nil])
([nil nil ((92 . 93)) nil (26039 44251 447883 343000) 0 nil])
([nil nil ((92 . 93) (#("T" 0 1 (fontified nil)) . 92) (92 . 93) (#("T" 0 1 (face font-lock-type-face fontified t)) . -92) (undo-tree-id265 . -1) (undo-tree-id266 . -1) 93) nil (26039 44251 447881 643000) 0 nil])
([nil nil ((nil rear-nonsticky nil 133 . 134) (nil fontified nil 133 . 134) (nil fontified nil 131 . 133) (nil fontified nil 130 . 131) (nil fontified nil 128 . 130) (nil fontified nil 127 . 128) (nil fontified nil 125 . 127) (nil fontified nil 124 . 125) (nil fontified nil 122 . 124) (nil fontified nil 121 . 122) (nil fontified nil 119 . 121) (nil fontified nil 118 . 119) (nil fontified nil 116 . 118) (nil fontified nil 115 . 116) (nil fontified nil 113 . 115) (nil fontified nil 112 . 113) (112 . 134)) nil (26039 44251 447871 903000) 0 nil])
([nil nil ((180 . 181)) nil (26039 44251 447866 658000) 0 nil])
([nil nil ((153 . 154) (t 26039 44251 456100 979000)) nil (26039 44276 725342 458000) 0 nil])
([nil nil ((#("S" 0 1 (face font-lock-type-face fontified t)) . -153) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) 154) nil (26039 44276 725341 483000) 0 nil])
([nil nil ((146 . 154) (#("        " 0 8 (fontified nil)) . 145) (undo-tree-id527 . -8) (undo-tree-id528 . -8) (undo-tree-id529 . -8) (undo-tree-id530 . -8) (undo-tree-id531 . -8) (undo-tree-id532 . -8) (undo-tree-id533 . -8) (undo-tree-id534 . -8) (undo-tree-id535 . -8) (undo-tree-id536 . -8) (undo-tree-id537 . -8) (undo-tree-id538 . -8) (undo-tree-id539 . -8) (undo-tree-id540 . -8) (undo-tree-id541 . -8) (undo-tree-id542 . -8) (undo-tree-id543 . -8) (undo-tree-id544 . -8) (153 . 154)) nil (26039 44276 725336 206000) 0 nil])
([nil nil ((145 . 146)) nil (26039 44276 725324 410000) 0 nil])
([nil nil ((145 . 148) (#("S" 0 1 (fontified nil)) . 145) (145 . 146) (#("SO3" 0 3 (fontified nil)) . -145) (145 . 148) (#("S" 0 1 (face font-lock-type-face fontified t)) . -145) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) 146) nil (26039 44276 725323 327000) 0 nil])
([nil nil ((145 . 153) (148 . 150)) nil (26039 44276 725318 922000) 0 nil])
([nil nil ((159 . 167) (#("            " 0 12 (fontified nil)) . 158) (undo-tree-id513 . -8) (undo-tree-id514 . -8) (undo-tree-id515 . -8) (undo-tree-id516 . -8) (undo-tree-id517 . -8) (undo-tree-id518 . -8) (undo-tree-id519 . -8) (undo-tree-id520 . -8) (undo-tree-id521 . -8) (166 . 170) (157 . 167)) nil (26039 44276 725317 672000) 0 nil])
([nil nil ((#("        Quaternion::new(w, i, j, k);" 0 8 (fontified t) 8 18 (face font-lock-type-face fontified t) 18 20 (fontified t) 20 23 (fontified t) 23 24 (face (rainbow-delimiters-depth-3-face) fontified t) 24 34 (fontified t) 34 35 (face (rainbow-delimiters-depth-3-face) fontified t) 35 36 (fontified t)) . 169) (undo-tree-id485 . -22) (undo-tree-id486 . -21) (undo-tree-id487 . -22) (undo-tree-id488 . -36) (undo-tree-id489 . -36) (undo-tree-id490 . -36) (undo-tree-id491 . -36) (undo-tree-id492 . -36) (undo-tree-id493 . -36) (undo-tree-id494 . -36) (undo-tree-id495 . -36) (undo-tree-id496 . -36) (undo-tree-id497 . -36) (undo-tree-id498 . -36) (undo-tree-id499 . -36) (undo-tree-id500 . -36) (undo-tree-id501 . -36) (undo-tree-id502 . -36) (undo-tree-id503 . -36) (undo-tree-id504 . -33) (undo-tree-id505 . -30) (undo-tree-id506 . -27) (undo-tree-id507 . -24) (undo-tree-id508 . -20) (undo-tree-id509 . -8) (undo-tree-id510 . -8) (undo-tree-id511 . -8) (undo-tree-id512 . -36)) nil (26039 44276 725310 151000) 0 nil])
([nil nil ((169 . 171)) nil (26039 44276 725292 75000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -169) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (#("p" 0 1 (fontified t)) . -170) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) 171) nil (26039 44276 725290 996000) 0 nil])
([nil nil ((158 . 170)) nil (26039 44276 725283 776000) 0 nil])
([nil nil ((170 . 171)) nil (26039 44276 725283 153000) 0 nil])
([nil nil ((170 . 178) (#("r" 0 1 (fontified nil)) . 170) (170 . 171) (#("rotation" 0 8 (fontified nil)) . -170) (170 . 178) (#("r" 0 1 (fontified t)) . -170) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) 171) nil (26039 44276 725282 85000) 0 nil])
([nil nil ((178 . 180)) nil (26039 44276 725278 665000) 0 nil])
([nil nil ((nil rear-nonsticky nil 215 . 216) (nil fontified nil 215 . 216) (nil fontified nil 214 . 215) (nil fontified nil 204 . 214) (nil fontified nil 203 . 204) (nil fontified nil 200 . 203) (nil fontified nil 198 . 200) (nil fontified nil 188 . 198) (nil fontified nil 180 . 188) (180 . 216)) nil (26039 44276 725277 657000) 0 nil])
([nil nil ((#(";" 0 1 (rear-nonsticky t fontified t)) . -215) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) 216) nil (26039 44276 725274 873000) 0 nil])
([nil nil ((215 . 216)) nil (26039 44276 724969 63000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -179) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (#(" " 0 1 (fontified t)) . -180) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (#(" " 0 1 (fontified t)) . -181) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (#(" " 0 1 (fontified t)) . -182) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (#(" " 0 1 (fontified t)) . -183) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (#(" " 0 1 (fontified t)) . -184) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (#(" " 0 1 (fontified t)) . -185) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (#(" " 0 1 (fontified t)) . -186) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (#(" " 0 1 (fontified t)) . -187) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) 188) nil (26039 44276 724960 240000) 0 nil])
([nil nil ((179 . 180)) nil (26039 44276 724659 150000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -218) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) 219 (t 26039 44276 736099 509000)) nil (26039 44279 985802 928000) 0 nil])
([nil nil ((156 . 157) 82 (t 26039 44280 29432 651000)) nil (26039 44286 65693 935000) 0 nil])
([nil nil ((142 . 144) (t 26039 44286 76098 968000)) nil (26039 44298 580666 419000) 0 nil])
([nil nil ((#(">" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -143) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) 144) nil (26039 44298 580665 272000) 0 nil])
([nil nil ((#("SO3<" 0 3 (face font-lock-type-face fontified t) 3 4 (face (rainbow-delimiters-depth-2-face) fontified t)) . -139) (undo-tree-id595 . -4) (undo-tree-id596 . -4) (undo-tree-id597 . -2) (undo-tree-id598 . -2) (undo-tree-id599 . -2) (undo-tree-id600 . -2) (undo-tree-id601 . -2) (undo-tree-id602 . -2) (undo-tree-id603 . -2) (undo-tree-id604 . -2) (undo-tree-id605 . -2) (undo-tree-id606 . -2) (undo-tree-id607 . -2) (undo-tree-id608 . -2) (undo-tree-id609 . -2) (undo-tree-id610 . -2) (undo-tree-id611 . -3) (undo-tree-id612 . -3) (undo-tree-id613 . -3) (undo-tree-id614 . -3) (undo-tree-id615 . -3) (undo-tree-id616 . -3) (undo-tree-id617 . -3) (undo-tree-id618 . -4) (undo-tree-id619 . -4) (undo-tree-id620 . -4) (undo-tree-id621 . -4) (undo-tree-id622 . -4) (undo-tree-id623 . -4) (undo-tree-id624 . -4) (undo-tree-id625 . -4) (undo-tree-id626 . -4) (undo-tree-id627 . -4) (undo-tree-id628 . -4) (undo-tree-id629 . -4) 143) nil (26039 44298 580658 756000) 0 nil])
([nil nil ((139 . 140)) nil (26039 44298 580635 1000) 0 nil])
([nil nil ((139 . 143) (#("S" 0 1 (fontified nil)) . 139) (139 . 140) (#("Self" 0 4 (fontified nil)) . -139) (139 . 143) (#("S" 0 1 (face font-lock-type-face fontified t)) . -139) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) 140) nil (26039 44298 580631 146000) 0 nil])
([nil nil ((228 . 232) (#("    " 0 4 (fontified nil)) . 227) (undo-tree-id1059 . -4) (undo-tree-id1060 . -4) (undo-tree-id1061 . -4) (undo-tree-id1062 . -4) (undo-tree-id1063 . -4) (226 . 232) (t 26039 44298 579431 571000)) nil (26039 44415 703375 246000) 0 nil])
([nil nil ((232 . 242)) nil (26039 44415 703370 609000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-function-name-face fontified t)) . -239) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (#("o" 0 1 (face font-lock-function-name-face fontified t)) . -240) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (#("m" 0 1 (face font-lock-function-name-face fontified t)) . -241) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) 242) nil (26039 44415 703368 779000) 0 nil])
([nil nil ((239 . 244)) nil (26039 44415 703354 239000) 0 nil])
([nil nil ((244 . 252)) nil (26039 44415 703353 434000) 0 nil])
([nil nil ((251 . 252)) nil (26039 44415 703352 625000) 0 nil])
([nil nil ((#("V" 0 1 (face font-lock-type-face fontified t)) . -251) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) 252) nil (26039 44415 703351 103000) 0 nil])
([nil nil ((251 . 266)) nil (26039 44415 703332 214000) 0 nil])
([nil nil ((15 . 16) (25 . 35) (apply yas--snippet-revive 259 268 #s(yas--snippet nil nil #s(yas--exit 267 nil) 9 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 267 nil) 9 nil nil nil nil)) (259 . 268) (#("Vector4<$0>" 0 11 (fontified nil)) . 259) (259 . 270) (#("Vector4" 0 7 (fontified nil)) . 259) (259 . 266) (#("Vector4<…> (use nalgebra::Vector4)" 0 34 (fontified nil)) . -259) (259 . 293) (#("Vector4" 0 7 (face font-lock-type-face fontified t)) . -259) (undo-tree-id995 . -7) (undo-tree-id996 . -7) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -2) (undo-tree-id1001 . -2) (undo-tree-id1002 . -3) (undo-tree-id1003 . -3) (undo-tree-id1004 . -3) (undo-tree-id1005 . -3) (undo-tree-id1006 . -3) (undo-tree-id1007 . -3) (undo-tree-id1008 . -3) (undo-tree-id1009 . -3) (undo-tree-id1010 . -4) (undo-tree-id1011 . -4) (undo-tree-id1012 . -4) (undo-tree-id1013 . -5) (undo-tree-id1014 . -5) (undo-tree-id1015 . -6) (undo-tree-id1016 . -6) (undo-tree-id1017 . -6) (undo-tree-id1018 . -7) (undo-tree-id1019 . -7) (undo-tree-id1020 . -7) (undo-tree-id1021 . -7) (undo-tree-id1022 . -7) (undo-tree-id1023 . -7) (undo-tree-id1024 . -7) (undo-tree-id1025 . -7) (undo-tree-id1026 . -7) 266) nil (26039 44415 703329 846000) 0 nil])
([nil nil ((278 . 279)) nil (26039 44415 703306 65000) 0 nil])
([nil nil ((281 . 283)) nil (26039 44415 703305 481000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -282) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) 283) nil (26039 44415 703304 223000) 0 nil])
([nil nil ((282 . 284)) nil (26039 44415 703301 110000) 0 nil])
([nil nil ((#("<" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -283) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) 284) nil (26039 44415 703299 986000) 0 nil])
([nil nil ((283 . 286)) nil (26039 44415 703295 186000) 0 nil])
([nil nil ((285 . 289) (#("S" 0 1 (fontified nil)) . 285) (285 . 286) (#("Self" 0 4 (fontified nil)) . -285) (285 . 289) (#("S" 0 1 (face font-lock-type-face fontified t)) . -285) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) 286) nil (26039 44415 703293 851000) 0 nil])
([nil nil ((289 . 292)) nil (26039 44415 703287 685000) 0 nil])
([nil nil ((293 . 297) (#("        " 0 8 (fontified nil)) . 292) (292 . 300) (#("    " 0 4 (fontified nil)) . 292) (undo-tree-id975 . -4) (undo-tree-id976 . -4) (undo-tree-id977 . -4) (undo-tree-id978 . -4) (291 . 297)) nil (26039 44415 703286 319000) 0 nil])
([nil nil ((292 . 300)) nil (26039 44415 703282 755000) 0 nil])
([nil nil ((300 . 301)) nil (26039 44415 703281 991000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 316 347 nil nil nil t #s(yas--exit 349 nil))) #s(yas--exit 349 nil) 10 nil #s(yas--field 1 316 347 nil nil nil t #s(yas--exit 349 nil)) nil nil)) (300 . 320) (#("SO3 { rotation: ${1:()} }$0" 0 27 (fontified nil)) . 300) (300 . 327) (#("S" 0 1 (fontified nil)) . 300) (300 . 301) (#("SO3 {…}" 0 7 (fontified nil)) . -300) (300 . 307) (#("S" 0 1 (face font-lock-type-face fontified t)) . -300) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) 301) nil (26039 44415 703280 350000) 0 nil])
([nil nil ((#("()" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 317) (undo-tree-id969 . -2) (316 . 317)) nil (26039 44415 703274 818000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 337 339 nil nil nil nil #s(yas--exit 341 nil))) #s(yas--exit 341 nil) 11 nil #s(yas--field 1 337 339 nil nil nil nil #s(yas--exit 341 nil)) #s(yas--field 1 316 347 nil nil nil t #s(yas--exit 349 nil)) nil)) (316 . 341) (#("Quaternion { coords: ${1:()} }$0" 0 32 (fontified nil)) . 316) (undo-tree-id959 . -32) (316 . 348) (#("Q" 0 1 (fontified nil)) . 316) (undo-tree-id960 . -1) (316 . 317) (#("Quaternion {…}" 0 14 (fontified nil)) . -316) (undo-tree-id961 . -14) (316 . 330) (#("Q" 0 1 (face font-lock-type-face fontified t)) . -316) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) 317) nil (26039 44415 703272 381000) 0 nil])
([nil nil ((apply yas--snippet-revive 316 341 #s(yas--snippet nil (#s(yas--field 1 337 339 nil nil nil nil #s(yas--exit 341 nil))) #s(yas--exit 341 nil) 11 nil #s(yas--field 1 337 339 nil nil nil nil #s(yas--exit 341 nil)) #s(yas--field 1 316 347 nil nil nil t #s(yas--exit 349 nil)) nil))) nil (26039 44415 703264 455000) 0 nil])
([nil nil ((#("coords: () }" 0 6 (face font-lock-variable-name-face fontified t) 6 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-5-face) fontified t) 9 10 (face (rainbow-delimiters-depth-5-face) fontified t) 10 11 (fontified t) 11 12 (face (rainbow-delimiters-depth-4-face) fontified t)) . -329) (undo-tree-id936 . -12) (undo-tree-id937 . -12) (undo-tree-id938 . -12) (undo-tree-id939 . -12) (undo-tree-id940 . -12) (undo-tree-id941 . -8) (undo-tree-id942 . -8) (undo-tree-id943 . -8) (undo-tree-id944 . -8) (undo-tree-id945 . -8) (undo-tree-id946 . -8) (undo-tree-id947 . -8) (undo-tree-id948 . -8) (undo-tree-id949 . -9) (undo-tree-id950 . -9) (undo-tree-id951 . -9) (undo-tree-id952 . -10) (undo-tree-id953 . -10) (undo-tree-id954 . -10) (undo-tree-id955 . -11) (undo-tree-id956 . -12) (undo-tree-id957 . -12) (undo-tree-id958 . -12) 341) nil (26039 44415 703263 29000) 0 nil])
([nil nil ((#("Quaternion { " 0 10 (face font-lock-type-face fontified t) 10 11 (fontified t) 11 12 (face (rainbow-delimiters-depth-4-face) fontified t) 12 13 (fontified t)) . -316) (undo-tree-id909 . -13) (undo-tree-id910 . -13) (undo-tree-id911 . -13) (undo-tree-id912 . -13) (undo-tree-id913 . -13) (undo-tree-id914 . -13) (undo-tree-id915 . -13) (undo-tree-id916 . -13) (undo-tree-id917 . -13) (undo-tree-id918 . -13) (undo-tree-id919 . -13) (undo-tree-id920 . -13) (undo-tree-id921 . -13) (undo-tree-id922 . -13) (undo-tree-id923 . -13) (undo-tree-id924 . -13) (undo-tree-id925 . -13) (undo-tree-id926 . -13) (undo-tree-id927 . -13) (undo-tree-id928 . -13) (undo-tree-id929 . -13) (undo-tree-id930 . -13) (undo-tree-id931 . -13) (undo-tree-id932 . -13) (undo-tree-id933 . -13) (undo-tree-id934 . -13) (undo-tree-id935 . -13) 329) nil (26039 44415 703246 357000) 0 nil])
([nil nil ((316 . 318)) nil (26039 44415 703227 792000) 0 nil])
([nil nil ((316 . 326) (#("Qu" 0 2 (fontified nil)) . 316) (undo-tree-id896 . -2) (316 . 318) (#("Quaternion" 0 10 (fontified nil)) . -316) (undo-tree-id897 . -10) (316 . 326) (#("Qu" 0 2 (face font-lock-type-face fontified t)) . -316) (undo-tree-id898 . -2) (undo-tree-id899 . -2) (undo-tree-id900 . -2) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -2) (undo-tree-id905 . -2) (undo-tree-id906 . -2) (undo-tree-id907 . -2) (undo-tree-id908 . -2) 318) nil (26039 44415 703226 369000) 0 nil])
([nil nil ((326 . 329)) nil (26039 44415 703216 817000) 0 nil])
([nil nil ((#("L" 0 1 (face font-lock-type-face fontified t)) . -328) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) 329) nil (26039 44415 703215 767000) 0 nil])
([nil nil ((328 . 329)) nil (26039 44415 703211 942000) 0 nil])
([nil nil ((#("F" 0 1 (face font-lock-type-face fontified t)) . -328) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) 329) nil (26039 44415 703210 916000) 0 nil])
([nil nil ((328 . 329)) nil (26039 44415 703206 437000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 340 346 nil nil nil t #s(yas--exit 347 nil))) #s(yas--exit 347 nil) 12 nil #s(yas--field 1 340 346 nil nil nil t #s(yas--exit 347 nil)) #s(yas--field 1 316 347 nil nil nil t #s(yas--exit 349 nil)) nil)) (328 . 347) (#("from_vector(${1:vector})$0" 0 26 (fontified nil)) . 328) (undo-tree-id876 . -26) (328 . 354) (#("f" 0 1 (fontified nil)) . 328) (undo-tree-id877 . -1) (328 . 329) (#("from_vector(…)" 0 14 (fontified nil)) . -328) (undo-tree-id878 . -14) (328 . 342) (#("f" 0 1 (fontified t)) . -328) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) 329) nil (26039 44415 703204 746000) 0 nil])
([nil nil ((#("vector" 0 6 (fontified nil)) . 341) (undo-tree-id875 . -6) (340 . 341)) nil (26039 44415 703195 965000) 0 nil])
([nil nil ((340 . 347) (#("V" 0 1 (fontified nil)) . 340) (undo-tree-id861 . -1) (340 . 341) (#("Vector4" 0 7 (fontified nil)) . -340) (undo-tree-id862 . -7) (340 . 347) (#("V" 0 1 (face font-lock-type-face fontified t)) . -340) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) 341) nil (26039 44415 703192 871000) 0 nil])
([nil nil ((347 . 352)) nil (26039 44415 702319 831000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 353 354 nil nil nil nil #s(yas--field 2 356 357 nil nil nil nil #s(yas--field 3 359 360 nil nil nil nil #s(yas--field 4 362 363 nil nil nil nil #s(yas--exit 364 nil))))) #s(yas--field 2 356 357 nil nil nil nil #s(yas--field 3 359 360 nil nil nil nil #s(yas--field 4 362 363 nil nil nil nil #s(yas--exit 364 nil)))) #s(yas--field 3 359 360 nil nil nil nil #s(yas--field 4 362 363 nil nil nil nil #s(yas--exit 364 nil))) #s(yas--field 4 362 363 nil nil nil nil #s(yas--exit 364 nil))) #s(yas--exit 364 nil) 13 nil #s(yas--field 1 353 354 nil nil nil nil #s(yas--field 2 356 357 nil nil nil nil #s(yas--field 3 359 360 nil nil nil nil #s(yas--field 4 362 363 nil nil nil nil #s(yas--exit 364 nil))))) #s(yas--field 1 340 346 nil nil nil t #s(yas--exit 347 nil)) nil)) (349 . 364) (#("new(${1:x}, ${2:y}, ${3:z}, ${4:w})$0" 0 37 (fontified nil)) . 349) (undo-tree-id840 . -37) (349 . 386) (#("new" 0 3 (fontified nil)) . 349) (undo-tree-id841 . -3) (349 . 352) (#("new(…)" 0 6 (fontified nil)) . -349) (undo-tree-id842 . -6) (349 . 355) (#("new" 0 3 (fontified t)) . -349) (undo-tree-id843 . -3) (undo-tree-id844 . -3) (undo-tree-id845 . -3) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -2) (undo-tree-id851 . -2) (undo-tree-id852 . -3) (undo-tree-id853 . -3) (undo-tree-id854 . -3) (undo-tree-id855 . -3) (undo-tree-id856 . -3) (undo-tree-id857 . -3) (undo-tree-id858 . -3) (undo-tree-id859 . -3) (undo-tree-id860 . -3) 352) nil (26039 44415 702317 647000) 0 nil])
([nil nil ((apply yas--snippet-revive 349 364 #s(yas--snippet nil (#s(yas--field 1 353 354 nil nil nil nil #s(yas--field 2 356 357 nil nil nil nil #s(yas--field 3 359 360 nil nil nil nil #s(yas--field 4 362 363 nil nil nil nil #s(yas--exit 364 nil))))) #s(yas--field 2 356 357 nil nil nil nil #s(yas--field 3 359 360 nil nil nil nil #s(yas--field 4 362 363 nil nil nil nil #s(yas--exit 364 nil)))) #s(yas--field 3 359 360 nil nil nil nil #s(yas--field 4 362 363 nil nil nil nil #s(yas--exit 364 nil))) #s(yas--field 4 362 363 nil nil nil nil #s(yas--exit 364 nil))) #s(yas--exit 364 nil) 13 nil #s(yas--field 1 353 354 nil nil nil nil #s(yas--field 2 356 357 nil nil nil nil #s(yas--field 3 359 360 nil nil nil nil #s(yas--field 4 362 363 nil nil nil nil #s(yas--exit 364 nil))))) #s(yas--field 1 340 346 nil nil nil t #s(yas--exit 347 nil)) nil))) nil (26039 44415 702302 86000) 0 nil])
([nil nil ((#("w)" 0 1 (fontified t) 1 2 (face (rainbow-delimiters-depth-5-face) fontified t)) . -362) (undo-tree-id825 . -2) (undo-tree-id826 . -2) (undo-tree-id827 . -2) (undo-tree-id828 . -2) (undo-tree-id829 . -2) (undo-tree-id830 . -1) (undo-tree-id831 . -2) (undo-tree-id832 . -2) (undo-tree-id833 . -2) (undo-tree-id834 . -2) (undo-tree-id835 . -2) (undo-tree-id836 . -2) (undo-tree-id837 . -2) (undo-tree-id838 . -2) (undo-tree-id839 . -2) 364) nil (26039 44415 702300 817000) 0 nil])
([nil nil ((#("z, " 0 3 (fontified t)) . -359) (undo-tree-id805 . -3) (undo-tree-id806 . -3) (undo-tree-id807 . -3) (undo-tree-id808 . -3) (undo-tree-id809 . -3) (undo-tree-id810 . -1) (undo-tree-id811 . -3) (undo-tree-id812 . -3) (undo-tree-id813 . -3) (undo-tree-id814 . -3) (undo-tree-id815 . -3) (undo-tree-id816 . -3) (undo-tree-id817 . -3) (undo-tree-id818 . -3) (undo-tree-id819 . -3) (undo-tree-id820 . -3) (undo-tree-id821 . -3) (undo-tree-id822 . -3) (undo-tree-id823 . -3) (undo-tree-id824 . -3) 362) nil (26039 44415 702197 755000) 0 nil])
([nil nil ((#("y, " 0 3 (fontified t)) . -356) (undo-tree-id782 . -3) (undo-tree-id783 . -3) (undo-tree-id784 . -3) (undo-tree-id785 . -3) (undo-tree-id786 . -3) (undo-tree-id787 . -1) (undo-tree-id788 . -3) (undo-tree-id789 . -3) (undo-tree-id790 . -3) (undo-tree-id791 . -3) (undo-tree-id792 . -3) (undo-tree-id793 . -3) (undo-tree-id794 . -3) (undo-tree-id795 . -3) (undo-tree-id796 . -3) (undo-tree-id797 . -3) (undo-tree-id798 . -3) (undo-tree-id799 . -3) (undo-tree-id800 . -3) (undo-tree-id801 . -3) (undo-tree-id802 . -3) (undo-tree-id803 . -3) (undo-tree-id804 . -3) 359) nil (26039 44415 702184 155000) 0 nil])
([nil nil ((#("x, " 0 3 (fontified t)) . -353) (undo-tree-id756 . -3) (undo-tree-id757 . -3) (undo-tree-id758 . -3) (undo-tree-id759 . -3) (undo-tree-id760 . -3) (undo-tree-id761 . -1) (undo-tree-id762 . -3) (undo-tree-id763 . -3) (undo-tree-id764 . -3) (undo-tree-id765 . -3) (undo-tree-id766 . -3) (undo-tree-id767 . -3) (undo-tree-id768 . -3) (undo-tree-id769 . -3) (undo-tree-id770 . -3) (undo-tree-id771 . -3) (undo-tree-id772 . -3) (undo-tree-id773 . -3) (undo-tree-id774 . -3) (undo-tree-id775 . -3) (undo-tree-id776 . -3) (undo-tree-id777 . -3) (undo-tree-id778 . -3) (undo-tree-id779 . -3) (undo-tree-id780 . -3) (undo-tree-id781 . -3) 356) nil (26039 44415 702168 72000) 0 nil])
([nil nil ((#("new(" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-5-face) fontified t)) . -349) (undo-tree-id720 . -4) (undo-tree-id721 . -4) (undo-tree-id722 . -4) (undo-tree-id723 . -4) (undo-tree-id724 . -4) (undo-tree-id725 . -4) (undo-tree-id726 . -4) (undo-tree-id727 . -4) (undo-tree-id728 . -4) (undo-tree-id729 . -4) (undo-tree-id730 . -4) (undo-tree-id731 . -4) (undo-tree-id732 . -4) (undo-tree-id733 . -4) (undo-tree-id734 . -4) (undo-tree-id735 . -4) (undo-tree-id736 . -4) (undo-tree-id737 . -4) (undo-tree-id738 . -4) (undo-tree-id739 . -4) (undo-tree-id740 . -4) (undo-tree-id741 . -4) (undo-tree-id742 . -4) (undo-tree-id743 . -4) (undo-tree-id744 . -4) (undo-tree-id745 . -4) (undo-tree-id746 . -4) (undo-tree-id747 . -4) (undo-tree-id748 . -4) (undo-tree-id749 . -4) (undo-tree-id750 . -4) (undo-tree-id751 . -4) (undo-tree-id752 . -4) (undo-tree-id753 . -4) (undo-tree-id754 . -4) (undo-tree-id755 . -4) 353) nil (26039 44415 702150 352000) 0 nil])
([nil nil ((#("Vector4::" 0 7 (face font-lock-type-face fontified t) 7 9 (fontified t)) . -340) (undo-tree-id645 . -9) (undo-tree-id646 . -9) (undo-tree-id647 . -9) (undo-tree-id648 . -7) (undo-tree-id649 . -7) (undo-tree-id650 . -7) (undo-tree-id651 . -7) (undo-tree-id652 . -7) (undo-tree-id653 . -7) (undo-tree-id654 . -7) (undo-tree-id655 . -7) (undo-tree-id656 . -7) (undo-tree-id657 . -7) (undo-tree-id658 . -7) (undo-tree-id659 . -7) (undo-tree-id660 . -7) (undo-tree-id661 . -7) (undo-tree-id662 . -7) (undo-tree-id663 . -7) (undo-tree-id664 . -8) (undo-tree-id665 . -8) (undo-tree-id666 . -9) (undo-tree-id667 . -9) (undo-tree-id668 . -9) (undo-tree-id669 . -9) (undo-tree-id670 . -9) (undo-tree-id671 . -9) (undo-tree-id672 . -9) (undo-tree-id673 . -9) (undo-tree-id674 . -9) (undo-tree-id675 . -9) (undo-tree-id676 . -9) (undo-tree-id677 . -9) (undo-tree-id678 . -9) (undo-tree-id679 . -9) (undo-tree-id680 . -9) (undo-tree-id681 . -9) (undo-tree-id682 . -9) (undo-tree-id683 . -9) (undo-tree-id684 . -9) (undo-tree-id685 . -9) (undo-tree-id686 . -9) (undo-tree-id687 . -9) (undo-tree-id688 . -9) (undo-tree-id689 . -9) (undo-tree-id690 . -9) (undo-tree-id691 . -9) (undo-tree-id692 . -9) (undo-tree-id693 . -9) (undo-tree-id694 . -9) (undo-tree-id695 . -9) (undo-tree-id696 . -9) (undo-tree-id697 . -9) (undo-tree-id698 . -9) (undo-tree-id699 . -9) (undo-tree-id700 . -9) (undo-tree-id701 . -9) (undo-tree-id702 . -9) (undo-tree-id703 . -9) (undo-tree-id704 . -9) (undo-tree-id705 . -9) (undo-tree-id706 . -9) (undo-tree-id707 . -9) (undo-tree-id708 . -9) (undo-tree-id709 . -9) (undo-tree-id710 . -9) (undo-tree-id711 . -9) (undo-tree-id712 . -9) (undo-tree-id713 . -9) (undo-tree-id714 . -9) (undo-tree-id715 . -9) (undo-tree-id716 . -9) (undo-tree-id717 . -9) (undo-tree-id718 . -9) (undo-tree-id719 . -9) 349) nil (26039 44415 702124 745000) 0 nil])
([nil nil ((340 . 342)) nil (26039 44415 702069 513000) 0 nil])
([nil nil ((340 . 346) (#("ve" 0 2 (fontified nil)) . 340) (undo-tree-id636 . -2) (340 . 342) (#("vector" 0 6 (fontified nil)) . -340) (undo-tree-id637 . -6) (340 . 346) (#("ve" 0 2 (fontified t)) . -340) (undo-tree-id638 . -2) (undo-tree-id639 . -2) (undo-tree-id640 . -2) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -2) (undo-tree-id644 . -2) 342) nil (26039 44415 702066 962000) 0 nil])
([nil nil ((apply yas--snippet-revive 300 349 #s(yas--snippet nil (#s(yas--field 1 316 347 nil nil nil t #s(yas--exit 349 nil))) #s(yas--exit 349 nil) 10 nil #s(yas--field 1 316 347 nil nil nil t #s(yas--exit 349 nil)) nil nil)) (apply yas--snippet-revive 328 347 #s(yas--snippet nil (#s(yas--field 1 340 346 nil nil nil t #s(yas--exit 347 nil))) #s(yas--exit 347 nil) 12 nil #s(yas--field 1 340 346 nil nil nil t #s(yas--exit 347 nil)) #s(yas--field 1 316 347 nil nil nil t #s(yas--exit 349 nil)) nil))) nil (26039 44415 702054 25000) 0 nil])
([nil nil ((305 . 317) (347 . 356) 299) nil (26039 44415 702049 915000) 0 nil])
([nil nil ((#("        SO3 {
            rotation: Quaternion::new(w, i, j, k),
        }" 0 8 (fontified t) 8 11 (face font-lock-type-face fontified t) 11 12 (fontified t) 12 13 (face (rainbow-delimiters-depth-3-face) fontified t) 13 14 (fontified t) 14 26 (fontified t) 26 34 (face font-lock-variable-name-face fontified t) 34 36 (fontified t) 36 46 (face font-lock-type-face fontified t) 46 48 (fontified t) 48 51 (fontified t) 51 52 (face (rainbow-delimiters-depth-4-face) fontified t) 52 62 (fontified t) 62 63 (face (rainbow-delimiters-depth-4-face) fontified t) 63 64 (fontified t) 64 65 (fontified t) 65 73 (fontified t) 73 74 (face (rainbow-delimiters-depth-3-face) fontified t)) . 157) (undo-tree-id1242 . -49) (undo-tree-id1243 . -74) (undo-tree-id1244 . -74) (undo-tree-id1245 . -74) (undo-tree-id1246 . -35) (undo-tree-id1247 . -26) (undo-tree-id1248 . -49) (undo-tree-id1249 . -64) (undo-tree-id1250 . -64) (undo-tree-id1251 . -64) (undo-tree-id1252 . -64) (undo-tree-id1253 . -64) (undo-tree-id1254 . -64) (undo-tree-id1255 . -64) (undo-tree-id1256 . -64) (undo-tree-id1257 . -64) (undo-tree-id1258 . -64) (undo-tree-id1259 . -63) (undo-tree-id1260 . -63) (undo-tree-id1261 . -63) (undo-tree-id1262 . -63) (undo-tree-id1263 . -63) (undo-tree-id1264 . -63) (undo-tree-id1265 . -63) (undo-tree-id1266 . -63) (undo-tree-id1267 . -74) (undo-tree-id1268 . -22) (undo-tree-id1269 . -21) (undo-tree-id1270 . -20) (undo-tree-id1271 . -19) (undo-tree-id1272 . -18) (undo-tree-id1273 . -17) (undo-tree-id1274 . -17) (undo-tree-id1275 . -17) (undo-tree-id1276 . -74) (undo-tree-id1277 . -74) (undo-tree-id1278 . -74) (undo-tree-id1279 . -74) (undo-tree-id1280 . -74) (undo-tree-id1281 . -74) (undo-tree-id1282 . -74) (undo-tree-id1283 . -74) (undo-tree-id1284 . -21) (undo-tree-id1285 . -20) (undo-tree-id1286 . -19) (undo-tree-id1287 . -18) (undo-tree-id1288 . -3) (undo-tree-id1289 . -2) (undo-tree-id1290 . -1) (undo-tree-id1291 . -74) (undo-tree-id1292 . -74) (undo-tree-id1293 . -74) (undo-tree-id1294 . -74) (undo-tree-id1295 . -73) (undo-tree-id1296 . -21) (undo-tree-id1297 . -20) (undo-tree-id1298 . -19) (undo-tree-id1299 . -18) (undo-tree-id1300 . -17) (undo-tree-id1301 . -16) (undo-tree-id1302 . -15) (undo-tree-id1303 . -74) (undo-tree-id1304 . -74) (undo-tree-id1305 . -74) (t 26039 44415 716091 401000)) nil (26039 44437 220163 516000) 0 nil])
([nil nil ((157 . 165)) nil (26039 44437 219897 649000) 0 nil])
([nil nil ((165 . 167)) nil (26039 44437 219897 82000) 0 nil])
([nil nil ((#("D" 0 1 (face font-lock-type-face fontified t)) . -166) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) 167) nil (26039 44437 219896 208000) 0 nil])
([nil nil ((166 . 167)) nil (26039 44437 219892 111000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 172 174 nil nil nil nil #s(yas--exit 176 nil))) #s(yas--exit 176 nil) 14 nil #s(yas--field 1 172 174 nil nil nil nil #s(yas--exit 176 nil)) nil nil)) (165 . 186) (#("Self { rotation: ${1:()} }$0" 0 28 (fontified nil)) . 165) (165 . 193) (#("Se" 0 2 (fontified nil)) . 165) (165 . 167) (#("Self {…}" 0 8 (fontified nil)) . -165) (165 . 173) (#("Se" 0 2 (face font-lock-type-face fontified t)) . -165) (undo-tree-id1222 . -2) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -2) (undo-tree-id1233 . -2) (undo-tree-id1234 . -2) (undo-tree-id1235 . -2) 167) nil (26039 44437 219890 639000) 0 nil])
([nil nil ((#("rotation: " 0 8 (face font-lock-variable-name-face fontified t) 8 10 (fontified t)) . -172) (undo-tree-id1210 . -10) (undo-tree-id1211 . -10) (undo-tree-id1212 . -10) (undo-tree-id1213 . -10) (undo-tree-id1214 . -10) (undo-tree-id1215 . -10) (undo-tree-id1216 . -10) (undo-tree-id1217 . -10) (undo-tree-id1218 . -10) (undo-tree-id1219 . -10) (undo-tree-id1220 . -10) (undo-tree-id1221 . -10) 182) nil (26039 44437 219879 864000) 0 nil])
([nil nil ((apply yas--snippet-revive 165 176 #s(yas--snippet nil (#s(yas--field 1 172 174 nil nil nil nil #s(yas--exit 176 nil))) #s(yas--exit 176 nil) 14 nil #s(yas--field 1 172 174 nil nil nil nil #s(yas--exit 176 nil)) nil nil))) nil (26039 44437 219871 947000) 0 nil])
([nil nil ((#("Self { () }" 0 4 (face font-lock-type-face fontified t) 4 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-3-face) fontified t) 6 7 (fontified t) 7 8 (face (rainbow-delimiters-depth-4-face) fontified t) 8 9 (face (rainbow-delimiters-depth-4-face) fontified t) 9 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-3-face) fontified t)) . -165) (undo-tree-id1187 . -11) (undo-tree-id1188 . -11) (undo-tree-id1189 . -11) (undo-tree-id1190 . -11) (undo-tree-id1191 . -7) (undo-tree-id1192 . -7) (undo-tree-id1193 . -7) (undo-tree-id1194 . -7) (undo-tree-id1195 . -7) (undo-tree-id1196 . -7) (undo-tree-id1197 . -7) (undo-tree-id1198 . -7) (undo-tree-id1199 . -7) (undo-tree-id1200 . -7) (undo-tree-id1201 . -7) (undo-tree-id1202 . -8) (undo-tree-id1203 . -8) (undo-tree-id1204 . -8) (undo-tree-id1205 . -9) (undo-tree-id1206 . -10) (undo-tree-id1207 . -11) (undo-tree-id1208 . -11) (undo-tree-id1209 . -11) 176) nil (26039 44437 220465 203000) 0 nil])
([nil nil ((165 . 169)) nil (26039 44463 484634 303000) 0 nil] [nil nil ((#("Self {
        " 0 4 (face font-lock-type-face fontified t) 4 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-2-face) fontified t) 6 7 (fontified t) 7 15 (fontified t)) . -150) (undo-tree-id1064 . -7) (undo-tree-id1065 . -7) (undo-tree-id1066 . -7) (undo-tree-id1067 . -7) (undo-tree-id1068 . -7) (undo-tree-id1069 . -7) (undo-tree-id1070 . -15) (undo-tree-id1071 . -15) (undo-tree-id1072 . -7) (undo-tree-id1073 . -7) (undo-tree-id1074 . -7) (undo-tree-id1075 . -7) (undo-tree-id1076 . -7) (undo-tree-id1077 . -7) (undo-tree-id1078 . -7) (undo-tree-id1079 . -7) (undo-tree-id1080 . -7) (undo-tree-id1081 . -7) (undo-tree-id1082 . -7) (undo-tree-id1083 . -7) (undo-tree-id1084 . -7) (undo-tree-id1085 . -7) (undo-tree-id1086 . -7) (undo-tree-id1087 . -7) (undo-tree-id1088 . -7) (undo-tree-id1089 . -7) (undo-tree-id1090 . -7) (undo-tree-id1091 . -7) (undo-tree-id1092 . -7) (undo-tree-id1093 . -7) (undo-tree-id1094 . -7) (undo-tree-id1095 . -7) (undo-tree-id1096 . -7) (undo-tree-id1097 . -7) (undo-tree-id1098 . -7) (undo-tree-id1099 . -7) (undo-tree-id1100 . -7) (undo-tree-id1101 . -7) (undo-tree-id1102 . -7) (undo-tree-id1103 . -7) (undo-tree-id1104 . -7) (undo-tree-id1105 . -7) (undo-tree-id1106 . -7) (undo-tree-id1107 . -7) (undo-tree-id1108 . -7) (undo-tree-id1109 . -7) (undo-tree-id1110 . -7) (undo-tree-id1111 . -7) (undo-tree-id1112 . -7) (undo-tree-id1113 . -7) (undo-tree-id1114 . -7) (undo-tree-id1115 . -7) (undo-tree-id1116 . -7) (undo-tree-id1117 . -7) (undo-tree-id1118 . -7) (undo-tree-id1119 . -7) (undo-tree-id1120 . -7) (undo-tree-id1121 . -7) (undo-tree-id1122 . -7) (undo-tree-id1123 . -7) (undo-tree-id1124 . -7) (undo-tree-id1125 . -7) (undo-tree-id1126 . -7) (undo-tree-id1127 . -7) (undo-tree-id1128 . -7) (undo-tree-id1129 . -7) (undo-tree-id1130 . -7) (undo-tree-id1131 . -7) (undo-tree-id1132 . -7) (undo-tree-id1133 . -7) (undo-tree-id1134 . -7) (undo-tree-id1135 . -7) (undo-tree-id1136 . -7) (undo-tree-id1137 . -7) (undo-tree-id1138 . -7) (undo-tree-id1139 . -7) (undo-tree-id1140 . -7) (undo-tree-id1141 . -7) (undo-tree-id1142 . -7) (undo-tree-id1143 . -7) (undo-tree-id1144 . -7) (undo-tree-id1145 . -15) (undo-tree-id1146 . -15) (undo-tree-id1147 . -15) (undo-tree-id1148 . -15) (undo-tree-id1149 . -15) (undo-tree-id1150 . -15) (undo-tree-id1151 . -15) (undo-tree-id1152 . -15) (undo-tree-id1153 . -15) (undo-tree-id1154 . -15) (undo-tree-id1155 . -15) (undo-tree-id1156 . -15) (undo-tree-id1157 . -15) (undo-tree-id1158 . -15) (undo-tree-id1159 . -15) (undo-tree-id1160 . -15) (undo-tree-id1161 . -15) (undo-tree-id1162 . -15) (undo-tree-id1163 . -15) (undo-tree-id1164 . -15) (undo-tree-id1165 . -15) (undo-tree-id1166 . -15) (undo-tree-id1167 . -15) (undo-tree-id1168 . -15) (undo-tree-id1169 . -15) (undo-tree-id1170 . -15) (undo-tree-id1171 . -15) (undo-tree-id1172 . -15) (undo-tree-id1173 . -15) (undo-tree-id1174 . -15) (undo-tree-id1175 . -15) (undo-tree-id1176 . -15) (undo-tree-id1177 . -15) (undo-tree-id1178 . -15) (undo-tree-id1179 . -15) (undo-tree-id1180 . -15) (undo-tree-id1181 . -15) (undo-tree-id1182 . -15) (undo-tree-id1183 . -15) (undo-tree-id1184 . -7) (undo-tree-id1185 . -15) (undo-tree-id1186 . -15) 165) ((150 . 165)) (26039 44437 219591 248000) 0 nil])
([nil nil ((169 . 171)) nil (26039 44463 484633 395000) 0 nil])
nil
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 183 207 nil nil nil t #s(yas--exit 208 nil))) #s(yas--exit 208 nil) 15 nil #s(yas--field 1 183 207 nil nil nil t #s(yas--exit 208 nil)) nil nil)) (171 . 190) (#("from_vector(${1:vector})$0" 0 26 (fontified nil)) . 171) (171 . 197) (#("from_vector(…)" 0 14 (fontified nil)) . -171) (171 . 185)) nil (26039 44463 484632 397000) 0 nil])
([nil nil ((#("vector" 0 6 (fontified nil)) . 184) (undo-tree-id1398 . -6) (undo-tree-id1399 . -4) (undo-tree-id1400 . -5) (undo-tree-id1401 . -4) (undo-tree-id1402 . -5) (183 . 184)) nil (26039 44463 484630 692000) 0 nil])
([nil nil ((183 . 190) (#("V" 0 1 (fontified nil)) . 183) (undo-tree-id1389 . -1) (183 . 184) (#("Vector4" 0 7 (fontified nil)) . -183) (undo-tree-id1390 . -7) (183 . 190) (#("V" 0 1 (face font-lock-type-face fontified t)) . -183) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) 184) nil (26039 44463 484626 20000) 0 nil])
([nil nil ((190 . 195)) nil (26039 44463 484618 413000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t)) . -193) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (#("e" 0 1 (fontified t)) . -194) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) 195) nil (26039 44463 484616 811000) 0 nil])
([nil nil ((193 . 195)) nil (26039 44463 484602 849000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 196 197 nil nil nil t #s(yas--field 2 199 200 nil nil nil nil #s(yas--field 3 202 203 nil nil nil nil #s(yas--field 4 205 206 nil nil nil nil #s(yas--exit 207 nil))))) #s(yas--field 2 199 200 nil nil nil nil #s(yas--field 3 202 203 nil nil nil nil #s(yas--field 4 205 206 nil nil nil nil #s(yas--exit 207 nil)))) #s(yas--field 3 202 203 nil nil nil nil #s(yas--field 4 205 206 nil nil nil nil #s(yas--exit 207 nil))) #s(yas--field 4 205 206 nil nil nil nil #s(yas--exit 207 nil))) #s(yas--exit 207 nil) 16 nil #s(yas--field 1 196 197 nil nil nil t #s(yas--field 2 199 200 nil nil nil nil #s(yas--field 3 202 203 nil nil nil nil #s(yas--field 4 205 206 nil nil nil nil #s(yas--exit 207 nil))))) #s(yas--field 1 183 207 nil nil nil t #s(yas--exit 208 nil)) nil)) (192 . 207) (#("new(${1:x}, ${2:y}, ${3:z}, ${4:w})$0" 0 37 (fontified nil)) . 192) (undo-tree-id1337 . -37) (192 . 229) (#("new" 0 3 (fontified nil)) . 192) (undo-tree-id1338 . -3) (192 . 195) (#("new(…)" 0 6 (fontified nil)) . -192) (undo-tree-id1339 . -6) (192 . 198) (#("new" 0 3 (fontified t)) . -192) (undo-tree-id1340 . -3) (undo-tree-id1341 . -3) (undo-tree-id1342 . -3) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -2) (undo-tree-id1358 . -2) (undo-tree-id1359 . -2) (undo-tree-id1360 . -3) (undo-tree-id1361 . -3) (undo-tree-id1362 . -3) (undo-tree-id1363 . -3) (undo-tree-id1364 . -3) (undo-tree-id1365 . -3) (undo-tree-id1366 . -3) (undo-tree-id1367 . -3) (undo-tree-id1368 . -3) 195) nil (26039 44463 484600 621000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -196) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) 197) nil (26039 44463 484576 784000) 0 nil])
([nil nil ((196 . 197)) nil (26039 44463 484570 804000) 0 nil])
([nil nil ((apply yas--snippet-revive 192 207 #s(yas--snippet nil (#s(yas--field 1 196 197 nil nil nil t #s(yas--field 2 199 200 nil nil nil nil #s(yas--field 3 202 203 nil nil nil nil #s(yas--field 4 205 206 nil nil nil nil #s(yas--exit 207 nil))))) #s(yas--field 2 199 200 nil nil nil nil #s(yas--field 3 202 203 nil nil nil nil #s(yas--field 4 205 206 nil nil nil nil #s(yas--exit 207 nil)))) #s(yas--field 3 202 203 nil nil nil nil #s(yas--field 4 205 206 nil nil nil nil #s(yas--exit 207 nil))) #s(yas--field 4 205 206 nil nil nil nil #s(yas--exit 207 nil))) #s(yas--exit 207 nil) 16 nil #s(yas--field 1 196 197 nil nil nil t #s(yas--field 2 199 200 nil nil nil nil #s(yas--field 3 202 203 nil nil nil nil #s(yas--field 4 205 206 nil nil nil nil #s(yas--exit 207 nil))))) #s(yas--field 1 183 207 nil nil nil t #s(yas--exit 208 nil)) nil))) nil (26039 44463 484570 195000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -199) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) 200) nil (26039 44463 484569 437000) 0 nil])
([nil nil ((199 . 200)) nil (26039 44463 484566 750000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -199) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) 200) nil (26039 44463 484565 864000) 0 nil])
([nil nil ((199 . 200)) nil (26039 44463 484560 992000) 0 nil])
([nil nil ((#("z" 0 1 (fontified t)) . -202) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) 203) nil (26039 44463 484559 910000) 0 nil])
([nil nil ((202 . 203)) nil (26039 44463 484551 151000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t)) . -205) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) 206) nil (26039 44463 484549 608000) 0 nil])
([nil nil ((205 . 206)) nil (26039 44463 484541 322000) 0 nil])
([nil nil ((apply yas--snippet-revive 171 208 #s(yas--snippet nil (#s(yas--field 1 183 207 nil nil nil t #s(yas--exit 208 nil))) #s(yas--exit 208 nil) 15 nil #s(yas--field 1 183 207 nil nil nil t #s(yas--exit 208 nil)) nil nil))) nil (26039 44463 484537 405000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t)) . -196) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (#("," 0 1 (fontified t)) . -197) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (#(" " 0 1 (fontified t)) . -198) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) 199 (t 26039 44463 486088 627000)) nil (26039 44502 210028 685000) 0 nil])
([nil nil ((203 . 206)) nil (26039 44502 209857 7000) 0 nil])
([nil nil ((205 . 206) (#("w" 0 1 (fontified nil)) . 205) (205 . 206) (#("w" 0 1 (fontified t)) . -205) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) 206) nil (26039 44502 209852 179000) 0 nil])
([nil nil ((355 . 359) (#("    " 0 4 (fontified nil)) . 354) (undo-tree-id1504 . -4) (353 . 359) (t 26039 44502 222753 47000)) nil (26039 44622 342940 557000) 0 nil])
([nil nil ((359 . 372)) nil (26039 44622 342939 67000) 0 nil])
([nil nil ((#("R" 0 1 (face font-lock-function-name-face fontified t)) . -371) (undo-tree-id1503 . -1) 372) nil (26039 44622 342938 394000) 0 nil])
([nil nil ((371 . 373)) nil (26039 44622 342937 223000) 0 nil])
([nil nil ((373 . 375)) nil (26039 44622 342936 544000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-function-name-face fontified t)) . -371) (undo-tree-id1499 . -1) (#("o" 0 1 (face font-lock-function-name-face fontified t)) . -372) (undo-tree-id1500 . -1) (#("t" 0 1 (face font-lock-function-name-face fontified t)) . -373) (undo-tree-id1501 . -1) (#("a" 0 1 (face font-lock-function-name-face fontified t)) . -374) (undo-tree-id1502 . -1) 375) nil (26039 44622 342935 371000) 0 nil])
([nil nil ((371 . 383)) nil (26039 44622 342931 957000) 0 nil])
([nil nil ((382 . 386)) nil (26039 44622 342931 432000) 0 nil])
([nil nil ((apply yas--snippet-revive 385 397 #s(yas--snippet nil nil #s(yas--exit 396 nil) 17 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 396 nil) 17 nil nil nil nil)) (385 . 397) (#("Quaternion<$0>" 0 14 (fontified nil)) . 385) (385 . 399) (#("Q" 0 1 (fontified nil)) . 385) (385 . 386) (#("Quaternion<…>" 0 13 (fontified nil)) . -385) (385 . 398) (#("Q" 0 1 (face font-lock-type-face fontified t)) . -385) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) 386) nil (26039 44622 342930 317000) 0 nil])
([nil nil ((396 . 397)) nil (26039 44622 342927 421000) 0 nil])
([nil nil ((399 . 404)) nil (26039 44622 342926 886000) 0 nil])
([nil nil ((403 . 407) (#("S" 0 1 (fontified nil)) . 403) (403 . 404) (#("Self" 0 4 (fontified nil)) . -403) (403 . 407) (#("S" 0 1 (face font-lock-type-face fontified t)) . -403) (undo-tree-id1496 . -1) 404) nil (26039 44622 342925 968000) 0 nil])
([nil nil ((407 . 410)) nil (26039 44622 342923 764000) 0 nil])
([nil nil ((411 . 415) (#("        " 0 8 (fontified nil)) . 410) (410 . 418) (#("    " 0 4 (fontified nil)) . 410) (undo-tree-id1495 . -4) (409 . 415)) nil (26039 44622 342922 959000) 0 nil])
([nil nil ((410 . 418)) nil (26039 44622 342878 442000) 0 nil])
([nil nil ((418 . 419)) nil (26039 44622 342877 836000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 434 435 nil nil nil t #s(yas--exit 437 nil))) #s(yas--exit 437 nil) 18 nil #s(yas--field 1 434 435 nil nil nil t #s(yas--exit 437 nil)) nil nil)) (418 . 438) (#("SO3 { rotation: ${1:()} }$0" 0 27 (fontified nil)) . 418) (418 . 445) (#("S" 0 1 (fontified nil)) . 418) (418 . 419) (#("SO3 {…}" 0 7 (fontified nil)) . -418) (418 . 425) (#("S" 0 1 (face font-lock-type-face fontified t)) . -418) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) 419) nil (26039 44622 342876 741000) 0 nil])
([nil nil ((#("()" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 435) (undo-tree-id1491 . -2) (434 . 435)) nil (26039 44622 342873 196000) 0 nil])
([nil nil ((apply yas--snippet-revive 418 437 #s(yas--snippet nil (#s(yas--field 1 434 435 nil nil nil t #s(yas--exit 437 nil))) #s(yas--exit 437 nil) 18 nil #s(yas--field 1 434 435 nil nil nil t #s(yas--exit 437 nil)) nil nil))) nil (26039 44622 342871 771000) 0 nil])
([nil nil ((435 . 436)) nil (26039 44622 342871 185000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 435) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) 363) nil (26039 44622 342870 384000) 0 nil])
([nil nil ((424 . 436) (#(" " 0 1 (fontified nil)) . 423) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (424 . 425)) nil (26039 44622 342863 698000) 0 nil])
([nil nil ((448 . 456) (#(" " 0 1 (fontified nil)) . 447) (undo-tree-id1464 . -1) (undo-tree-id1465 . 1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (448 . 449)) nil (26039 44622 342854 804000) 0 nil])
([nil nil ((447 . 448)) nil (26039 44622 342850 642000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -447) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) 448) nil (26039 44622 342849 686000) 0 nil])
([nil nil ((447 . 449)) nil (26039 44622 342845 791000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -447) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (#("," 0 1 (fontified t)) . -448) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) 449) nil (26039 44622 342843 417000) 0 nil])
([nil nil ((447 . 448)) nil (26039 44622 342822 189000) 0 nil])
([nil nil ((466 . 470) (#("    " 0 4 (fontified nil)) . 465) (undo-tree-id1810 . -4) (undo-tree-id1811 . -4) (undo-tree-id1812 . -4) (undo-tree-id1813 . -4) (464 . 470) (t 26039 44622 356079 378000)) nil (26039 44760 985429 432000) 0 nil])
([nil nil ((470 . 477)) nil (26039 45264 710009 44000) 0 nil] [nil nil ((470 . 474)) ((#("pub " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . 470)) (26039 44760 736889 562000) 0 nil])
([nil nil ((477 . 482)) nil (26039 45264 710008 558000) 0 nil])
([nil nil ((#("    pub fn from_vector(vector: Vector4<T>) -> Self {
        SO3 {
            rotation: Quaternion::from_vector(vector),
        }
    }

    pub fn from_quaternion(q: Quaternion<T>) -> Self {
        SO3 {
            rotation: q,
        }
    }" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 22 (face font-lock-function-name-face fontified t) 22 23 (face (rainbow-delimiters-depth-2-face) fontified t) 23 29 (face font-lock-variable-name-face fontified t) 29 31 (fontified t) 31 38 (face font-lock-type-face fontified t) 38 39 (face (rainbow-delimiters-depth-3-face) fontified t) 39 40 (face font-lock-type-face fontified t) 40 41 (face (rainbow-delimiters-depth-3-face) fontified t) 41 42 (face (rainbow-delimiters-depth-2-face) fontified t) 42 44 (fontified t) 44 45 (fontified t syntax-table (1)) 45 46 (fontified t) 46 50 (face font-lock-type-face fontified t) 50 51 (fontified t) 51 52 (face (rainbow-delimiters-depth-2-face) fontified t) 52 53 (fontified t) 53 61 (fontified t) 61 64 (face font-lock-type-face fontified t) 64 65 (fontified t) 65 66 (face (rainbow-delimiters-depth-3-face) fontified t) 66 78 (fontified t) 78 79 (fontified t) 79 87 (face font-lock-variable-name-face fontified t) 87 89 (fontified t) 89 99 (face font-lock-type-face fontified t) 99 101 (fontified t) 101 112 (fontified t) 112 113 (face (rainbow-delimiters-depth-4-face) fontified t) 113 119 (fontified t) 119 120 (face (rainbow-delimiters-depth-4-face) fontified t) 120 122 (fontified t) 122 129 (fontified t) 129 130 (fontified t) 130 131 (face (rainbow-delimiters-depth-3-face) fontified t) 131 132 (fontified t) 132 136 (fontified t) 136 137 (face (rainbow-delimiters-depth-2-face) fontified t) 137 138 (fontified t) 138 139 (fontified t) 139 143 (fontified t) 143 146 (face font-lock-keyword-face fontified t) 146 147 (fontified t) 147 149 (face font-lock-keyword-face fontified t) 149 150 (fontified t) 150 165 (face font-lock-function-name-face fontified t) 165 166 (face (rainbow-delimiters-depth-2-face) fontified t) 166 167 (face font-lock-variable-name-face fontified t) 167 169 (fontified t) 169 179 (face font-lock-type-face fontified t) 179 180 (face (rainbow-delimiters-depth-3-face) fontified t) 180 181 (face font-lock-type-face fontified t) 181 182 (face (rainbow-delimiters-depth-3-face) fontified t) 182 183 (face (rainbow-delimiters-depth-2-face) fontified t) 183 185 (fontified t) 185 186 (syntax-table (1) fontified t) 186 187 (fontified t) 187 191 (face font-lock-type-face fontified t) 191 192 (fontified t) 192 193 (face (rainbow-delimiters-depth-2-face) fontified t) 193 194 (fontified t) 194 202 (fontified t) 202 205 (face font-lock-type-face fontified t) 205 206 (fontified t) 206 207 (face (rainbow-delimiters-depth-3-face) fontified t) 207 208 (fontified t) 208 220 (fontified t) 220 228 (face font-lock-variable-name-face fontified t) 228 232 (fontified t) 232 233 (fontified t) 233 241 (fontified t) 241 242 (face (rainbow-delimiters-depth-3-face) fontified t) 242 243 (fontified t) 243 247 (fontified t) 247 248 (face (rainbow-delimiters-depth-2-face) fontified t)) . 216) (undo-tree-id1547 . -106) (undo-tree-id1548 . -248) (undo-tree-id1549 . -104) (undo-tree-id1550 . -96) (undo-tree-id1551 . -202) (undo-tree-id1552 . -202) (undo-tree-id1553 . -106) (undo-tree-id1554 . -231) (undo-tree-id1555 . -231) (undo-tree-id1556 . -231) (undo-tree-id1557 . -231) (undo-tree-id1558 . -231) (undo-tree-id1559 . -231) (undo-tree-id1560 . -231) (undo-tree-id1561 . -231) (undo-tree-id1562 . -231) (undo-tree-id1563 . -207) (undo-tree-id1564 . -207) (undo-tree-id1565 . -207) (undo-tree-id1566 . -207) (undo-tree-id1567 . -207) (undo-tree-id1568 . -207) (undo-tree-id1569 . -207) (undo-tree-id1570 . -207) (undo-tree-id1571 . -207) (undo-tree-id1572 . -207) (undo-tree-id1573 . -231) (undo-tree-id1574 . -231) (undo-tree-id1575 . -231) (undo-tree-id1576 . -231) (undo-tree-id1577 . -231) (undo-tree-id1578 . -231) (undo-tree-id1579 . -231) (undo-tree-id1580 . -231) (undo-tree-id1581 . -231) (undo-tree-id1582 . -231) (undo-tree-id1583 . -231) (undo-tree-id1584 . -231) (undo-tree-id1585 . -231) (undo-tree-id1586 . -231) (undo-tree-id1587 . -231) (undo-tree-id1588 . -231) (undo-tree-id1589 . -232) (undo-tree-id1590 . -232) (undo-tree-id1591 . -232) (undo-tree-id1592 . -232) (undo-tree-id1593 . -232) (undo-tree-id1594 . -232) (undo-tree-id1595 . -232) (undo-tree-id1596 . -232) (undo-tree-id1597 . -232) (undo-tree-id1598 . -232) (undo-tree-id1599 . -232) (undo-tree-id1600 . -232) (undo-tree-id1601 . -232) (undo-tree-id1602 . -207) (undo-tree-id1603 . -163) (undo-tree-id1604 . -163) (undo-tree-id1605 . -163) (undo-tree-id1606 . -138) (undo-tree-id1607 . -137) (undo-tree-id1608 . -137) (undo-tree-id1609 . -137) (undo-tree-id1610 . -131) (undo-tree-id1611 . -91) (undo-tree-id1612 . -91) (undo-tree-id1613 . -91) (undo-tree-id1614 . -91) (undo-tree-id1615 . -91) (undo-tree-id1616 . -91) (undo-tree-id1617 . -91) (undo-tree-id1618 . -91) (undo-tree-id1619 . -91) (undo-tree-id1620 . -91) (undo-tree-id1621 . -91) (undo-tree-id1622 . -91) (undo-tree-id1623 . -91) (undo-tree-id1624 . -91) (undo-tree-id1625 . -91) (undo-tree-id1626 . -91) (undo-tree-id1627 . -91) (undo-tree-id1628 . -91) (undo-tree-id1629 . -91) (undo-tree-id1630 . -91) (undo-tree-id1631 . -91) (undo-tree-id1632 . -248) (undo-tree-id1633 . -105) (undo-tree-id1634 . -105) (undo-tree-id1635 . -105) (undo-tree-id1636 . -105) (undo-tree-id1637 . -105) (undo-tree-id1638 . -105) (undo-tree-id1639 . -105) (undo-tree-id1640 . -105) (undo-tree-id1641 . -105) (undo-tree-id1642 . -105) (undo-tree-id1643 . -105) (undo-tree-id1644 . -105) (undo-tree-id1645 . -105) (undo-tree-id1646 . -105) (undo-tree-id1647 . -105) (undo-tree-id1648 . -105) (undo-tree-id1649 . -105) (undo-tree-id1650 . -105) (undo-tree-id1651 . -105) (undo-tree-id1652 . -105) (undo-tree-id1653 . -105) (undo-tree-id1654 . -105) (undo-tree-id1655 . -105) (undo-tree-id1656 . -105) (undo-tree-id1657 . -105) (undo-tree-id1658 . -105) (undo-tree-id1659 . -105) (undo-tree-id1660 . -105) (undo-tree-id1661 . -105) (undo-tree-id1662 . -105) (undo-tree-id1663 . -105) (undo-tree-id1664 . -105) (undo-tree-id1665 . -105) (undo-tree-id1666 . -105) (undo-tree-id1667 . -105) (undo-tree-id1668 . -105) (undo-tree-id1669 . -105) (undo-tree-id1670 . -105) (undo-tree-id1671 . -105) (undo-tree-id1672 . -105) (undo-tree-id1673 . -105) (undo-tree-id1674 . -105) (undo-tree-id1675 . -105) (undo-tree-id1676 . -105) (undo-tree-id1677 . -105) (undo-tree-id1678 . -105) (undo-tree-id1679 . -105) (undo-tree-id1680 . -105) (undo-tree-id1681 . -105) (undo-tree-id1682 . -105) (undo-tree-id1683 . -105) (undo-tree-id1684 . -105) (undo-tree-id1685 . -105) (undo-tree-id1686 . -66) (undo-tree-id1687 . -105) (undo-tree-id1688 . -105) (undo-tree-id1689 . -105) (undo-tree-id1690 . -105) (undo-tree-id1691 . -105) (undo-tree-id1692 . -66) (undo-tree-id1693 . -38) (undo-tree-id1694 . -38) (undo-tree-id1695 . -66) (undo-tree-id1696 . -105) (undo-tree-id1697 . -105) (undo-tree-id1698 . -105) (undo-tree-id1699 . -105) (undo-tree-id1700 . -105) (undo-tree-id1701 . -112) (undo-tree-id1702 . -119) (undo-tree-id1703 . -119) (undo-tree-id1704 . -119) (undo-tree-id1705 . -119) (undo-tree-id1706 . -119) (undo-tree-id1707 . -119) (undo-tree-id1708 . -119) (undo-tree-id1709 . -120) (undo-tree-id1710 . -120) (undo-tree-id1711 . -120) (undo-tree-id1712 . -120) (undo-tree-id1713 . -120) (undo-tree-id1714 . -66) (undo-tree-id1715 . -52) (undo-tree-id1716 . -52) (undo-tree-id1717 . -66) (undo-tree-id1718 . -120) (undo-tree-id1719 . -120) (undo-tree-id1720 . -120) (undo-tree-id1721 . -120) (undo-tree-id1722 . -120) (undo-tree-id1723 . -120) (undo-tree-id1724 . -120) (undo-tree-id1725 . -120) (undo-tree-id1726 . -120) (undo-tree-id1727 . -120) (undo-tree-id1728 . -120) (undo-tree-id1729 . -120) (undo-tree-id1730 . -120) (undo-tree-id1731 . -120) (undo-tree-id1732 . -120) (undo-tree-id1733 . -105) (undo-tree-id1734 . -106) (undo-tree-id1735 . -106) (undo-tree-id1736 . -106) (undo-tree-id1737 . -106) (undo-tree-id1738 . -106) (undo-tree-id1739 . -106) (undo-tree-id1740 . -106) (undo-tree-id1741 . -106) (undo-tree-id1742 . -106) (undo-tree-id1743 . -106) (undo-tree-id1744 . -106) (undo-tree-id1745 . -106) (undo-tree-id1746 . -106) (undo-tree-id1747 . -106) (undo-tree-id1748 . -106) (undo-tree-id1749 . -106) (undo-tree-id1750 . -106) (undo-tree-id1751 . -106) (undo-tree-id1752 . -106) (undo-tree-id1753 . -106) (undo-tree-id1754 . -106) (undo-tree-id1755 . -106) (undo-tree-id1756 . -106) (undo-tree-id1757 . -106) (undo-tree-id1758 . -106) (undo-tree-id1759 . -106) (undo-tree-id1760 . -106) (undo-tree-id1761 . -106) (undo-tree-id1762 . -106) (undo-tree-id1763 . -106) (undo-tree-id1764 . -106) (undo-tree-id1765 . -106) (undo-tree-id1766 . -106) (undo-tree-id1767 . -106) (undo-tree-id1768 . -106) (undo-tree-id1769 . -106) (undo-tree-id1770 . -106) (undo-tree-id1771 . -106) (undo-tree-id1772 . -106) (undo-tree-id1773 . -106) (undo-tree-id1774 . -106) (undo-tree-id1775 . -131) (undo-tree-id1776 . -137) (undo-tree-id1777 . -138) (undo-tree-id1778 . -178) (undo-tree-id1779 . -207) (undo-tree-id1780 . -232) (undo-tree-id1781 . -242) (undo-tree-id1782 . -242) (undo-tree-id1783 . -242) (undo-tree-id1784 . -242) (undo-tree-id1785 . -242) (undo-tree-id1786 . -248) (undo-tree-id1787 . -248) (undo-tree-id1788 . -248) (undo-tree-id1789 . -248) (undo-tree-id1790 . -248) (undo-tree-id1791 . -248) (undo-tree-id1792 . -248) (undo-tree-id1793 . -248) (undo-tree-id1794 . -248) (undo-tree-id1795 . -248) (undo-tree-id1796 . -248) (undo-tree-id1797 . -248) (undo-tree-id1798 . -241) (undo-tree-id1799 . -240) (undo-tree-id1800 . -214) (undo-tree-id1801 . -144) (undo-tree-id1802 . -138) (undo-tree-id1803 . -137) (undo-tree-id1804 . -57) (undo-tree-id1805 . -56) (undo-tree-id1806 . -2) (undo-tree-id1807 . -1) (undo-tree-id1808 . -106) (undo-tree-id1809 . -248)) ((216 . 464)) (26039 44760 528010 2000) 0 nil])
([nil nil ((481 . 486)) nil (26039 45264 710008 31000) 0 nil])
([nil nil ((#("T" 0 1 (face font-lock-type-face fontified t rear-nonsticky t)) . -144) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) 145) ((144 . 145)) (26039 44760 302835 660000) 0 nil])
([nil nil ((487 . 491)) nil (26039 45264 710007 464000) 0 nil])
([nil nil ((#("k: " 0 1 (face font-lock-variable-name-face fontified t) 1 3 (fontified t)) . -141) (undo-tree-id1521 . -3) (undo-tree-id1522 . -3) (undo-tree-id1523 . -3) (undo-tree-id1524 . -3) (undo-tree-id1525 . -3) (undo-tree-id1526 . -3) (undo-tree-id1527 . -3) (undo-tree-id1528 . -3) (undo-tree-id1529 . -3) (undo-tree-id1530 . -3) (undo-tree-id1531 . -3) (undo-tree-id1532 . -3) (undo-tree-id1533 . -3) (undo-tree-id1534 . -3) 144) ((141 . 144)) (26039 44760 144442 224000) 0 nil])
([nil nil ((491 . 497)) nil (26039 45264 710006 878000) 0 nil])
([nil nil ((#("T, " 0 1 (face font-lock-type-face fontified t) 1 3 (fontified t)) . -138) (undo-tree-id1505 . -3) (undo-tree-id1506 . -3) (undo-tree-id1507 . -3) (undo-tree-id1508 . -3) (undo-tree-id1509 . -3) (undo-tree-id1510 . -3) (undo-tree-id1511 . -3) (undo-tree-id1512 . -3) (undo-tree-id1513 . -3) (undo-tree-id1514 . -3) (undo-tree-id1515 . -3) (undo-tree-id1516 . -3) (undo-tree-id1517 . -3) (undo-tree-id1518 . -3) (undo-tree-id1519 . -3) (undo-tree-id1520 . -3) 141) ((138 . 141)) (26039 44760 143468 226000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-type-face fontified t)) . -495) (undo-tree-id1863 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -496) (undo-tree-id1864 . -1) 497) nil (26039 45264 710006 78000) 0 nil])
nil
([nil nil ((495 . 498)) nil (26039 45264 710004 100000) 0 nil])
([nil nil ((35 . 44) (apply yas--snippet-revive 491 500 #s(yas--snippet nil nil #s(yas--exit 499 nil) 19 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 499 nil) 19 nil nil nil nil)) (491 . 500) (#("Vector3<$0>" 0 11 (fontified nil)) . 491) (491 . 502) (#("Vector3" 0 7 (fontified nil)) . 491) (491 . 498) (#("Vector3<…> (use nalgebra::Vector3)" 0 34 (fontified nil)) . -491) (491 . 525) (#("Vector3" 0 7 (face font-lock-type-face fontified t)) . -491) (undo-tree-id1862 . -7) 498) nil (26039 45264 710002 934000) 0 nil])
([nil nil ((508 . 509)) nil (26039 45264 710000 575000) 0 nil])
([nil nil ((510 . 513)) nil (26039 45264 709999 770000) 0 nil])
([nil nil ((514 . 518) (#("        " 0 8 (fontified nil)) . 513) (513 . 521) (#("    " 0 4 (fontified nil)) . 513) (undo-tree-id1861 . -4) (512 . 518)) nil (26039 45264 709998 868000) 0 nil])
([nil nil ((513 . 521)) nil (26039 45264 709997 141000) 0 nil])
([nil nil ((521 . 523)) nil (26039 45264 709996 567000) 0 nil])
([nil nil ((521 . 525) (#("se" 0 2 (fontified nil)) . 521) (521 . 523) (#("self" 0 4 (fontified nil)) . -521) (521 . 525) (#("se" 0 2 (fontified t)) . -521) (undo-tree-id1860 . -2) 523) nil (26039 45264 709995 591000) 0 nil])
([nil nil ((525 . 526)) nil (26039 45264 709993 739000) 0 nil])
([nil nil ((526 . 534) (#("rotation" 0 8 (fontified nil)) . -526) (526 . 534)) nil (26039 45264 709993 23000) 0 nil])
([nil nil ((534 . 535)) nil (26039 45264 709991 981000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -534) (undo-tree-id1859 . -1) 535) nil (26039 45264 709991 290000) 0 nil])
([nil nil ((534 . 535)) nil (26039 45264 709990 11000) 0 nil])
([nil nil ((535 . 536)) nil (26039 45264 709989 422000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t)) . -535) (undo-tree-id1858 . -1) 536) nil (26039 45264 709988 778000) 0 nil])
([nil nil ((535 . 536)) nil (26039 45264 709987 544000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -535) (undo-tree-id1857 . -1) 536) nil (26039 45264 709986 905000) 0 nil])
([nil nil ((535 . 537)) nil (26039 45264 709985 675000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -535) (undo-tree-id1855 . -1) (#("o" 0 1 (fontified t)) . -536) (undo-tree-id1856 . -1) 537) nil (26039 45264 709984 797000) 0 nil])
([nil nil ((535 . 539)) nil (26039 45264 709982 757000) 0 nil])
([nil nil ((#("scal" 0 4 (fontified t)) . -535) (undo-tree-id1853 . -4) (undo-tree-id1854 . -4) 539) nil (26039 45264 709982 91000) 0 nil])
([nil nil ((535 . 537)) nil (26039 45264 709980 220000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -535) (undo-tree-id1851 . -1) (#("c" 0 1 (fontified t)) . -536) (undo-tree-id1852 . -1) 537) nil (26039 45264 709979 429000) 0 nil])
([nil nil ((#("rotation." 0 9 (fontified t)) . -526) (undo-tree-id1849 . -9) (undo-tree-id1850 . -9) 535) nil (26039 45264 709977 173000) 0 nil])
([nil nil ((#("self." 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t)) . -521) (undo-tree-id1847 . -5) (undo-tree-id1848 . -5) 526) nil (26039 45264 709974 543000) 0 nil])
([nil nil ((521 . 523)) nil (26039 45264 709972 551000) 0 nil])
([nil nil ((521 . 529) (#("na" 0 2 (fontified nil)) . 521) (521 . 523) (#("nalgebra" 0 8 (fontified nil)) . -521) (521 . 529) (#("na" 0 2 (fontified t)) . -521) (undo-tree-id1846 . -2) 523) nil (26039 45264 709971 691000) 0 nil])
([nil nil ((529 . 532)) nil (26039 45264 709969 703000) 0 nil])
([nil nil ((531 . 539) (#("g" 0 1 (fontified nil)) . 531) (531 . 532) (#("geometry" 0 8 (fontified nil)) . -531) (531 . 539) (#("g" 0 1 (fontified t)) . -531) (undo-tree-id1845 . -1) 532) nil (26039 45264 709968 766000) 0 nil])
([nil nil ((539 . 542)) nil (26039 45264 709966 857000) 0 nil])
([nil nil ((541 . 551) (#("Q" 0 1 (fontified nil)) . 541) (541 . 542) (#("Quaternion" 0 10 (fontified nil)) . -541) (541 . 551) (#("Q" 0 1 (face font-lock-type-face fontified t)) . -541) (undo-tree-id1844 . -1) 542) nil (26039 45264 709965 907000) 0 nil])
([nil nil ((551 . 555)) nil (26039 45264 709963 709000) 0 nil])
([nil nil ((#("sc" 0 2 (fontified t)) . -553) (undo-tree-id1843 . -2) 555) nil (26039 45264 709962 993000) 0 nil])
([nil nil ((#("Quaternion::" 0 10 (face font-lock-type-face fontified t) 10 12 (fontified t)) . -541) (undo-tree-id1842 . -12) 553) nil (26039 45264 709961 515000) 0 nil])
([nil nil ((#("geometry::" 0 8 (face font-lock-constant-face fontified t) 8 10 (fontified t)) . -531) (undo-tree-id1841 . -10) 541) nil (26039 45264 709960 97000) 0 nil])
([nil nil ((#("nalgebra::" 0 8 (face font-lock-constant-face fontified t) 8 10 (fontified t)) . -521) (undo-tree-id1840 . -10) 531) nil (26039 45264 709958 669000) 0 nil])
([nil nil ((#("Quaternion" 0 10 (face font-lock-type-face fontified t)) . -16) (undo-tree-id1836 . -10) (undo-tree-id1837 . -10) (undo-tree-id1838 . -10) (undo-tree-id1839 . -10) 26) nil (26039 45264 709957 190000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -16) (undo-tree-id1835 . -1) 17) nil (26039 45264 709953 714000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -16) (undo-tree-id1834 . -1) 17) nil (26039 45264 709952 1000) 0 nil])
([nil nil ((34 . 35)) nil (26039 45264 709950 679000) 0 nil])
([nil nil ((35 . 40)) nil (26039 45264 709950 94000) 0 nil])
([nil nil ((39 . 47) (#("n" 0 1 (fontified nil)) . 39) (39 . 40) (#("nalgebra" 0 8 (fontified nil)) . -39) (39 . 47) (#("n" 0 1 (face font-lock-constant-face fontified t)) . -39) (undo-tree-id1833 . -1) 40) nil (26039 45264 709949 138000) 0 nil])
([nil nil ((47 . 50)) nil (26039 45264 709947 145000) 0 nil])
([nil nil ((#("L" 0 1 (face font-lock-type-face fontified t)) . -48) (undo-tree-id1831 . -1) (#(":" 0 1 (fontified t)) . -49) (undo-tree-id1832 . -1) 50) nil (26039 45264 709946 289000) 0 nil])
([nil nil ((48 . 50)) nil (26039 45264 709944 86000) 0 nil])
([nil nil ((50 . 51)) nil (26039 45264 709943 471000) 0 nil])
([nil nil ((49 . 57) (#("ge" 0 2 (fontified nil)) . 49) (49 . 51) (#("geometry" 0 8 (fontified nil)) . -49) (49 . 57) (#("ge" 0 2 (fontified t)) . -49) (undo-tree-id1818 . -1) (undo-tree-id1819 . -2) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -2) (undo-tree-id1827 . -2) (undo-tree-id1828 . -2) (undo-tree-id1829 . -2) (undo-tree-id1830 . -2) 51) nil (26039 45264 709941 846000) 0 nil])
([nil nil ((57 . 60)) nil (26039 45264 709931 670000) 0 nil])
([nil nil ((59 . 69) (#("Q" 0 1 (fontified nil)) . 59) (59 . 60) (#("Quaternion" 0 10 (fontified nil)) . -59) (59 . 69) (#("Q" 0 1 (face font-lock-type-face fontified t)) . -59) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) 60) nil (26039 45264 709929 157000) 0 nil])
([nil nil ((69 . 70)) nil (26039 45264 709915 130000) 0 nil])
([nil nil ((545 . 546) (t 26039 45264 756041 962000)) nil (26039 45284 742826 259000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -545) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) 546) nil (26039 45284 742825 308000) 0 nil])
([nil nil ((545 . 546)) nil (26039 45284 742822 811000) 0 nil])
([nil nil ((545 . 549) (#("s" 0 1 (fontified nil)) . 545) (545 . 546) (#("self" 0 4 (fontified nil)) . -545) (545 . 549) (#("s" 0 1 (fontified t)) . -545) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) 546) nil (26039 45284 742821 800000) 0 nil])
([nil nil ((549 . 550)) nil (26039 45284 742818 392000) 0 nil])
([nil nil ((550 . 558) (#("rotation" 0 8 (fontified nil)) . -550) (550 . 558)) nil (26039 45284 742817 457000) 0 nil])
([nil nil ((558 . 559)) nil (26039 45284 742816 410000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -558) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) 559) nil (26039 45284 742815 593000) 0 nil])
([nil nil ((558 . 561)) nil (26039 45284 742812 917000) 0 nil])
([nil nil ((#("sc" 0 2 (fontified t)) . -559) (undo-tree-id1923 . -2) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (undo-tree-id1928 . -2) (undo-tree-id1929 . -2) (undo-tree-id1930 . -2) (undo-tree-id1931 . -2) (undo-tree-id1932 . -2) (undo-tree-id1933 . -2) (undo-tree-id1934 . -2) (undo-tree-id1935 . -2) (undo-tree-id1936 . -2) (undo-tree-id1937 . -2) (undo-tree-id1938 . -2) 561) nil (26039 45284 742811 679000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -558) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) 559) nil (26039 45284 742799 104000) 0 nil])
([nil nil ((558 . 561)) nil (26039 45284 742781 402000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -559) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (#("o" 0 1 (fontified t)) . -560) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) 561) nil (26039 45284 742779 981000) 0 nil])
([nil nil ((559 . 563)) nil (26039 45284 742769 88000) 0 nil])
([nil nil ((#("clon" 0 4 (fontified t)) . -559) (undo-tree-id1865 . -4) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -2) (undo-tree-id1872 . -2) (undo-tree-id1873 . -2) (undo-tree-id1874 . -2) (undo-tree-id1875 . -3) (undo-tree-id1876 . -3) (undo-tree-id1877 . -3) (undo-tree-id1878 . -3) (undo-tree-id1879 . -4) (undo-tree-id1880 . -4) 563) nil (26039 45284 742765 185000) 0 nil])
([nil nil ((#("rotation." 0 9 (fontified t)) . -550) (undo-tree-id2248 . -9) (undo-tree-id2249 . -8) (undo-tree-id2250 . -8) (undo-tree-id2251 . -8) (undo-tree-id2252 . -8) (undo-tree-id2253 . -8) (undo-tree-id2254 . -8) (undo-tree-id2255 . -8) (undo-tree-id2256 . -8) (undo-tree-id2257 . -8) (undo-tree-id2258 . -8) (undo-tree-id2259 . -8) (undo-tree-id2260 . -8) (undo-tree-id2261 . -8) (undo-tree-id2262 . -8) (undo-tree-id2263 . -8) (undo-tree-id2264 . -8) (undo-tree-id2265 . -8) (undo-tree-id2266 . -8) (undo-tree-id2267 . -8) (undo-tree-id2268 . -8) (undo-tree-id2269 . -8) (undo-tree-id2270 . -8) (undo-tree-id2271 . -8) (undo-tree-id2272 . -8) (undo-tree-id2273 . -8) (undo-tree-id2274 . -8) (undo-tree-id2275 . -8) (undo-tree-id2276 . -8) (undo-tree-id2277 . -8) (undo-tree-id2278 . -9) (undo-tree-id2279 . -9) (undo-tree-id2280 . -9) (undo-tree-id2281 . -9) (undo-tree-id2282 . -9) (undo-tree-id2283 . -9) (undo-tree-id2284 . -9) (undo-tree-id2285 . -9) (undo-tree-id2286 . -9) (undo-tree-id2287 . -9) (undo-tree-id2288 . -9) (undo-tree-id2289 . -9) (undo-tree-id2290 . -9) (undo-tree-id2291 . -9) (undo-tree-id2292 . -9) (undo-tree-id2293 . -9) (undo-tree-id2294 . -9) (undo-tree-id2295 . -9) (undo-tree-id2296 . -9) (undo-tree-id2297 . -9) (undo-tree-id2298 . -9) (undo-tree-id2299 . -9) (undo-tree-id2300 . -9) (undo-tree-id2301 . -9) (undo-tree-id2302 . -9) (undo-tree-id2303 . -9) (undo-tree-id2304 . -9) (undo-tree-id2305 . -9) (undo-tree-id2306 . -9) (undo-tree-id2307 . -9) (undo-tree-id2308 . -9) (undo-tree-id2309 . -9) (undo-tree-id2310 . -9) (undo-tree-id2311 . -9) (undo-tree-id2312 . -9) 559 (t 26039 45284 756040 808000)) nil (26039 45368 76347 256000) 0 nil])
([nil nil ((550 . 551)) nil (26039 45368 76026 419000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -550) (undo-tree-id2244 . -1) (undo-tree-id2245 . -1) (undo-tree-id2246 . -1) (undo-tree-id2247 . -1) 551) nil (26039 45368 76025 479000) 0 nil])
([nil nil ((550 . 551)) nil (26039 45368 76021 767000) 0 nil])
([nil nil ((#("q" 0 1 (fontified t)) . -550) (undo-tree-id2239 . -1) (undo-tree-id2240 . -1) (undo-tree-id2241 . -1) (undo-tree-id2242 . -1) (undo-tree-id2243 . -1) 551) nil (26039 45368 76020 673000) 0 nil])
([nil nil ((550 . 551)) nil (26039 45368 75688 913000) 0 nil])
([nil nil ((550 . 558) (#("r" 0 1 (fontified nil)) . 550) (550 . 551) (#("rotation" 0 8 (fontified nil)) . -550) (550 . 558) (#("r" 0 1 (fontified t)) . -550) (undo-tree-id2233 . -1) (undo-tree-id2234 . -1) (undo-tree-id2235 . -1) (undo-tree-id2236 . -1) (undo-tree-id2237 . -1) (undo-tree-id2238 . -1) 551) nil (26039 45368 75687 766000) 0 nil])
([nil nil ((558 . 560)) nil (26039 45368 75682 919000) 0 nil])
([nil nil ((559 . 565) (#("s" 0 1 (fontified nil)) . 559) (559 . 560) (#("coords" 0 6 (fontified nil)) . -559) (559 . 565) (#("s" 0 1 (fontified t)) . -559) (undo-tree-id2226 . -1) (undo-tree-id2227 . -1) (undo-tree-id2228 . -1) (undo-tree-id2229 . -1) (undo-tree-id2230 . -1) (undo-tree-id2231 . -1) (undo-tree-id2232 . -1) 560) nil (26039 45368 75681 629000) 0 nil])
([nil nil ((565 . 567)) nil (26039 45368 75675 840000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -566) (undo-tree-id2220 . -1) (undo-tree-id2221 . -1) (undo-tree-id2222 . -1) (undo-tree-id2223 . -1) (undo-tree-id2224 . -1) (undo-tree-id2225 . -1) 567) nil (26039 45368 75674 813000) 0 nil])
([nil nil ((566 . 569)) nil (26039 45368 75670 277000) 0 nil])
([nil nil ((#("sca" 0 3 (fontified t)) . -566) (undo-tree-id2211 . -3) (undo-tree-id2212 . -1) (undo-tree-id2213 . -1) (undo-tree-id2214 . -2) (undo-tree-id2215 . -2) (undo-tree-id2216 . -3) (undo-tree-id2217 . -3) (undo-tree-id2218 . -3) (undo-tree-id2219 . -3) 569) nil (26039 45368 75669 338000) 0 nil])
([nil nil ((#("coords." 0 7 (fontified t)) . -559) (undo-tree-id2183 . -7) (undo-tree-id2184 . -6) (undo-tree-id2185 . -6) (undo-tree-id2186 . -6) (undo-tree-id2187 . -7) (undo-tree-id2188 . -7) (undo-tree-id2189 . -7) (undo-tree-id2190 . -7) (undo-tree-id2191 . -7) (undo-tree-id2192 . -7) (undo-tree-id2193 . -7) (undo-tree-id2194 . -7) (undo-tree-id2195 . -7) (undo-tree-id2196 . -7) (undo-tree-id2197 . -7) (undo-tree-id2198 . -7) (undo-tree-id2199 . -7) (undo-tree-id2200 . -7) (undo-tree-id2201 . -7) (undo-tree-id2202 . -7) (undo-tree-id2203 . -7) (undo-tree-id2204 . -7) (undo-tree-id2205 . -7) (undo-tree-id2206 . -7) (undo-tree-id2207 . -7) (undo-tree-id2208 . -7) (undo-tree-id2209 . -7) (undo-tree-id2210 . -7) 566) nil (26039 45368 75662 164000) 0 nil])
([nil nil ((#("self.rotation." 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 14 (fontified t)) . 545) (undo-tree-id1979 . -8) (undo-tree-id1980 . -14) (undo-tree-id1981 . -5) (undo-tree-id1982 . -5) (undo-tree-id1983 . -5) (undo-tree-id1984 . -5) (undo-tree-id1985 . -5) (undo-tree-id1986 . -5) (undo-tree-id1987 . -5) (undo-tree-id1988 . -5) (undo-tree-id1989 . -5) (undo-tree-id1990 . -5) (undo-tree-id1991 . -5) (undo-tree-id1992 . -5) (undo-tree-id1993 . -5) (undo-tree-id1994 . -5) (undo-tree-id1995 . -5) (undo-tree-id1996 . -5) (undo-tree-id1997 . -5) (undo-tree-id1998 . -5) (undo-tree-id1999 . -5) (undo-tree-id2000 . -5) (undo-tree-id2001 . -5) (undo-tree-id2002 . -5) (undo-tree-id2003 . -5) (undo-tree-id2004 . -5) (undo-tree-id2005 . -5) (undo-tree-id2006 . -5) (undo-tree-id2007 . -5) (undo-tree-id2008 . -5) (undo-tree-id2009 . -5) (undo-tree-id2010 . -5) (undo-tree-id2011 . -5) (undo-tree-id2012 . -5) (undo-tree-id2013 . -5) (undo-tree-id2014 . -5) (undo-tree-id2015 . -5) (undo-tree-id2016 . -5) (undo-tree-id2017 . -5) (undo-tree-id2018 . -5) (undo-tree-id2019 . -5) (undo-tree-id2020 . -5) (undo-tree-id2021 . -5) (undo-tree-id2022 . -5) (undo-tree-id2023 . -5) (undo-tree-id2024 . -5) (undo-tree-id2025 . -5) (undo-tree-id2026 . -5) (undo-tree-id2027 . -5) (undo-tree-id2028 . -5) (undo-tree-id2029 . -5) (undo-tree-id2030 . -5) (undo-tree-id2031 . -5) (undo-tree-id2032 . -5) (undo-tree-id2033 . -5) (undo-tree-id2034 . -5) (undo-tree-id2035 . -5) (undo-tree-id2036 . -5) (undo-tree-id2037 . -5) (undo-tree-id2038 . -5) (undo-tree-id2039 . -5) (undo-tree-id2040 . -5) (undo-tree-id2041 . -5) (undo-tree-id2042 . -5) (undo-tree-id2043 . -5) (undo-tree-id2044 . -5) (undo-tree-id2045 . -5) (undo-tree-id2046 . -5) (undo-tree-id2047 . -5) (undo-tree-id2048 . -5) (undo-tree-id2049 . -5) (undo-tree-id2050 . -5) (undo-tree-id2051 . -5) (undo-tree-id2052 . -5) (undo-tree-id2053 . -5) (undo-tree-id2054 . -5) (undo-tree-id2055 . -5) (undo-tree-id2056 . -5) (undo-tree-id2057 . -5) (undo-tree-id2058 . -5) (undo-tree-id2059 . -5) (undo-tree-id2060 . -5) (undo-tree-id2061 . -5) (undo-tree-id2062 . -5) (undo-tree-id2063 . -5) (undo-tree-id2064 . -5) (undo-tree-id2065 . -5) (undo-tree-id2066 . -5) (undo-tree-id2067 . -5) (undo-tree-id2068 . -5) (undo-tree-id2069 . -5) (undo-tree-id2070 . -5) (undo-tree-id2071 . -5) (undo-tree-id2072 . -5) (undo-tree-id2073 . -5) (undo-tree-id2074 . -5) (undo-tree-id2075 . -5) (undo-tree-id2076 . -5) (undo-tree-id2077 . -5) (undo-tree-id2078 . -5) (undo-tree-id2079 . -5) (undo-tree-id2080 . -5) (undo-tree-id2081 . -5) (undo-tree-id2082 . -5) (undo-tree-id2083 . -5) (undo-tree-id2084 . -13) (undo-tree-id2085 . -13) (undo-tree-id2086 . -13) (undo-tree-id2087 . -13) (undo-tree-id2088 . -13) (undo-tree-id2089 . -13) (undo-tree-id2090 . -8) (undo-tree-id2091 . -8) (undo-tree-id2092 . -13) (undo-tree-id2093 . -13) (undo-tree-id2094 . -13) (undo-tree-id2095 . -13) (undo-tree-id2096 . -13) (undo-tree-id2097 . -13) (undo-tree-id2098 . -13) (undo-tree-id2099 . -13) (undo-tree-id2100 . -13) (undo-tree-id2101 . -13) (undo-tree-id2102 . -13) (undo-tree-id2103 . -13) (undo-tree-id2104 . -14) (undo-tree-id2105 . -14) (undo-tree-id2106 . -14) (undo-tree-id2107 . -14) (undo-tree-id2108 . -14) (undo-tree-id2109 . -14) (undo-tree-id2110 . -14) (undo-tree-id2111 . -14) (undo-tree-id2112 . -14) (undo-tree-id2113 . -14) (undo-tree-id2114 . -14) (undo-tree-id2115 . -14) (undo-tree-id2116 . -14) (undo-tree-id2117 . -14) (undo-tree-id2118 . -14) (undo-tree-id2119 . -14) (undo-tree-id2120 . -14) (undo-tree-id2121 . -14) (undo-tree-id2122 . -14) (undo-tree-id2123 . -14) (undo-tree-id2124 . -14) (undo-tree-id2125 . -14) (undo-tree-id2126 . -14) (undo-tree-id2127 . -14) (undo-tree-id2128 . -14) (undo-tree-id2129 . -14) (undo-tree-id2130 . -14) (undo-tree-id2131 . -14) (undo-tree-id2132 . -14) (undo-tree-id2133 . -14) (undo-tree-id2134 . -14) (undo-tree-id2135 . -14) (undo-tree-id2136 . -14) (undo-tree-id2137 . -14) (undo-tree-id2138 . -14) (undo-tree-id2139 . -14) (undo-tree-id2140 . -14) (undo-tree-id2141 . -14) (undo-tree-id2142 . -14) (undo-tree-id2143 . -14) (undo-tree-id2144 . -14) (undo-tree-id2145 . -14) (undo-tree-id2146 . -14) (undo-tree-id2147 . -14) (undo-tree-id2148 . -14) (undo-tree-id2149 . -14) (undo-tree-id2150 . -14) (undo-tree-id2151 . -14) (undo-tree-id2152 . -14) (undo-tree-id2153 . -14) (undo-tree-id2154 . -14) (undo-tree-id2155 . -14) (undo-tree-id2156 . -14) (undo-tree-id2157 . -14) (undo-tree-id2158 . -14) (undo-tree-id2159 . -14) (undo-tree-id2160 . -14) (undo-tree-id2161 . -14) (undo-tree-id2162 . -14) (undo-tree-id2163 . -14) (undo-tree-id2164 . -14) (undo-tree-id2165 . -14) (undo-tree-id2166 . -14) (undo-tree-id2167 . -14) (undo-tree-id2168 . -14) (undo-tree-id2169 . -14) (undo-tree-id2170 . -14) (undo-tree-id2171 . -14) (undo-tree-id2172 . -14) (undo-tree-id2173 . -14) (undo-tree-id2174 . -14) (undo-tree-id2175 . -14) (undo-tree-id2176 . -14) (undo-tree-id2177 . -14) (undo-tree-id2178 . -14) (undo-tree-id2179 . -14) (undo-tree-id2180 . -14) (undo-tree-id2181 . -14) (undo-tree-id2182 . -14)) nil (26039 45368 75638 259000) 0 nil])
([nil nil ((nil rear-nonsticky nil 558 . 559) (nil fontified nil 550 . 559) (nil fontified nil 549 . 550) (nil fontified nil 545 . 549) (545 . 559)) nil (26039 45368 75275 801000) 0 nil])
([nil nil ((#("rotation." 0 8 (fontified t) 8 9 (rear-nonsticky t fontified t)) . -550) (undo-tree-id1969 . -9) (undo-tree-id1970 . -9) (undo-tree-id1971 . -9) (undo-tree-id1972 . -9) (undo-tree-id1973 . -9) (undo-tree-id1974 . -9) (undo-tree-id1975 . -9) (undo-tree-id1976 . -9) (undo-tree-id1977 . -9) (undo-tree-id1978 . -9) 559) nil (26039 45368 75273 942000) 0 nil])
([nil nil ((#("self." 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t)) . -545) (undo-tree-id1957 . -5) (undo-tree-id1958 . -5) (undo-tree-id1959 . -5) (undo-tree-id1960 . -5) (undo-tree-id1961 . -5) (undo-tree-id1962 . -5) (undo-tree-id1963 . -5) (undo-tree-id1964 . -5) (undo-tree-id1965 . -5) (undo-tree-id1966 . -5) (undo-tree-id1967 . -5) (undo-tree-id1968 . -5) 550) nil (26039 45368 75265 670000) 0 nil])
([nil nil ((nil rear-nonsticky nil 589 . 590) (nil fontified nil 545 . 590) (545 . 590)) nil (26039 45368 75256 506000) 0 nil])
([nil nil ((590 . 598)) nil (26039 45368 75255 341000) 0 nil])
([nil nil ((598 . 602)) nil (26039 45368 75254 161000) 0 nil])
([nil nil ((apply yas--snippet-revive 600 608 #s(yas--snippet nil nil #s(yas--exit 608 nil) 20 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 608 nil) 20 nil nil nil nil)) (600 . 608) (#("scalar()$0" 0 10 (fontified nil)) . 600) (600 . 610) (#("sc" 0 2 (fontified nil)) . 600) (600 . 602) (#("scalar()" 0 8 (fontified nil)) . -600) (600 . 608) (#("sc" 0 2 (fontified t)) . -600) (undo-tree-id1948 . -2) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -2) (undo-tree-id1953 . -2) (undo-tree-id1954 . -2) (undo-tree-id1955 . -2) (undo-tree-id1956 . -2) 602) nil (26039 45368 75249 802000) 0 nil])
([nil nil ((#("q.scalar()" 0 2 (fontified t) 2 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-3-face) fontified t) 9 10 (face (rainbow-delimiters-depth-3-face) fontified t)) . 598) (undo-tree-id2533 . -5) (undo-tree-id2534 . -5) (undo-tree-id2535 . -2) (undo-tree-id2536 . -2) (undo-tree-id2537 . -2) (undo-tree-id2538 . -2) (undo-tree-id2539 . -2) (undo-tree-id2540 . -2) (undo-tree-id2541 . -2) (undo-tree-id2542 . -2) (undo-tree-id2543 . -5) (undo-tree-id2544 . -5) (undo-tree-id2545 . -5) (undo-tree-id2546 . -5) (undo-tree-id2547 . -5) (undo-tree-id2548 . -5) (undo-tree-id2549 . -5) (undo-tree-id2550 . -5) (undo-tree-id2551 . -5) (undo-tree-id2552 . -5) (undo-tree-id2553 . -5) (undo-tree-id2554 . -5) (undo-tree-id2555 . -5) (undo-tree-id2556 . -5) (undo-tree-id2557 . -5) (undo-tree-id2558 . -5) (undo-tree-id2559 . -10) (t 26039 45368 89369 295000)) nil (26039 45402 851099 789000) 0 nil])
([nil nil ((#("let q = Quaternion::new(1.0, 2.0, 3.0, 4.0);" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 5 (face font-lock-variable-name-face fontified t) 5 8 (fontified t) 8 18 (face font-lock-type-face fontified t) 18 23 (fontified t) 23 24 (face (rainbow-delimiters-depth-3-face) fontified t) 24 42 (fontified t) 42 43 (face (rainbow-delimiters-depth-3-face) fontified t) 43 44 (fontified t)) . 545) (undo-tree-id2531 . -5) (undo-tree-id2532 . -44)) nil (26039 45402 851082 885000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . 545) (undo-tree-id2530 . -1)) nil (26039 45402 851080 857000) 0 nil])
([nil nil ((545 . 546)) nil (26039 45402 851079 399000) 0 nil])
([nil nil ((546 . 548)) nil (26039 45402 851078 758000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -545) (undo-tree-id2480 . -1) (undo-tree-id2481 . -1) (undo-tree-id2482 . -1) (undo-tree-id2483 . -1) (undo-tree-id2484 . -1) (undo-tree-id2485 . -1) (undo-tree-id2486 . -1) (undo-tree-id2487 . -1) (undo-tree-id2488 . -1) (undo-tree-id2489 . -1) (undo-tree-id2490 . -1) (undo-tree-id2491 . -1) (undo-tree-id2492 . -1) (undo-tree-id2493 . -1) (undo-tree-id2494 . -1) (undo-tree-id2495 . -1) (undo-tree-id2496 . -1) (undo-tree-id2497 . -1) (undo-tree-id2498 . -1) (undo-tree-id2499 . -1) (undo-tree-id2500 . -1) (undo-tree-id2501 . -1) (undo-tree-id2502 . -1) (undo-tree-id2503 . -1) (undo-tree-id2504 . -1) (#("e" 0 1 (fontified t)) . -546) (undo-tree-id2505 . -1) (undo-tree-id2506 . -1) (undo-tree-id2507 . -1) (undo-tree-id2508 . -1) (undo-tree-id2509 . -1) (undo-tree-id2510 . -1) (undo-tree-id2511 . -1) (undo-tree-id2512 . -1) (undo-tree-id2513 . -1) (undo-tree-id2514 . -1) (undo-tree-id2515 . -1) (undo-tree-id2516 . -1) (undo-tree-id2517 . -1) (undo-tree-id2518 . -1) (undo-tree-id2519 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -547) (undo-tree-id2520 . -1) (undo-tree-id2521 . -1) (undo-tree-id2522 . -1) (undo-tree-id2523 . -1) (undo-tree-id2524 . -1) (undo-tree-id2525 . -1) (undo-tree-id2526 . -1) (undo-tree-id2527 . -1) (undo-tree-id2528 . -1) (undo-tree-id2529 . -1) 548) nil (26039 45402 851075 798000) 0 nil])
([nil nil ((545 . 546)) nil (26039 45402 850853 436000) 0 nil])
([nil nil ((545 . 549) (#("s" 0 1 (fontified nil)) . 545) (545 . 546) (#("self" 0 4 (fontified nil)) . -545) (545 . 549) (#("s" 0 1 (fontified t)) . -545) (undo-tree-id2475 . -1) (undo-tree-id2476 . -1) (undo-tree-id2477 . -1) (undo-tree-id2478 . -1) (undo-tree-id2479 . -1) 546) nil (26039 45402 850852 345000) 0 nil])
([nil nil ((549 . 551)) nil (26039 45402 850847 780000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -550) (undo-tree-id2469 . -1) (undo-tree-id2470 . -1) (undo-tree-id2471 . -1) (undo-tree-id2472 . -1) (undo-tree-id2473 . -1) (undo-tree-id2474 . -1) 551) nil (26039 45402 850846 947000) 0 nil])
([nil nil ((550 . 551)) nil (26039 45402 850842 822000) 0 nil])
([nil nil ((550 . 558) (#("r" 0 1 (fontified nil)) . 550) (550 . 551) (#("rotation" 0 8 (fontified nil)) . -550) (550 . 558) (#("r" 0 1 (fontified t)) . -550) (undo-tree-id2463 . -1) (undo-tree-id2464 . -1) (undo-tree-id2465 . -1) (undo-tree-id2466 . -1) (undo-tree-id2467 . -1) (undo-tree-id2468 . -1) 551) nil (26039 45402 850841 680000) 0 nil])
([nil nil ((558 . 560)) nil (26039 45402 850836 463000) 0 nil])
([nil nil ((560 . 565)) nil (26039 45402 850835 870000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -560) (undo-tree-id2408 . -1) (undo-tree-id2409 . -1) (undo-tree-id2410 . -1) (undo-tree-id2411 . -1) (undo-tree-id2412 . -1) (undo-tree-id2413 . -1) (undo-tree-id2414 . -1) (undo-tree-id2415 . -1) (undo-tree-id2416 . -1) (undo-tree-id2417 . -1) (undo-tree-id2418 . -1) (undo-tree-id2419 . -1) (undo-tree-id2420 . -1) (undo-tree-id2421 . -1) (undo-tree-id2422 . -1) (undo-tree-id2423 . -1) (undo-tree-id2424 . -1) (#("c" 0 1 (fontified t)) . -561) (undo-tree-id2425 . -1) (undo-tree-id2426 . -1) (undo-tree-id2427 . -1) (undo-tree-id2428 . -1) (undo-tree-id2429 . -1) (undo-tree-id2430 . -1) (undo-tree-id2431 . -1) (undo-tree-id2432 . -1) (undo-tree-id2433 . -1) (undo-tree-id2434 . -1) (undo-tree-id2435 . -1) (undo-tree-id2436 . -1) (undo-tree-id2437 . -1) (undo-tree-id2438 . -1) (undo-tree-id2439 . -1) (#("a" 0 1 (fontified t)) . -562) (undo-tree-id2440 . -1) (undo-tree-id2441 . -1) (undo-tree-id2442 . -1) (undo-tree-id2443 . -1) (undo-tree-id2444 . -1) (undo-tree-id2445 . -1) (undo-tree-id2446 . -1) (undo-tree-id2447 . -1) (undo-tree-id2448 . -1) (undo-tree-id2449 . -1) (undo-tree-id2450 . -1) (undo-tree-id2451 . -1) (undo-tree-id2452 . -1) (#("e" 0 1 (fontified t)) . -563) (undo-tree-id2453 . -1) (undo-tree-id2454 . -1) (undo-tree-id2455 . -1) (undo-tree-id2456 . -1) (undo-tree-id2457 . -1) (undo-tree-id2458 . -1) (undo-tree-id2459 . -1) (#("r" 0 1 (fontified t)) . -564) (undo-tree-id2460 . -1) (undo-tree-id2461 . -1) (undo-tree-id2462 . -1) 565) nil (26039 45402 850833 174000) 0 nil])
([nil nil ((560 . 564)) nil (26039 45402 850798 805000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -560) (undo-tree-id2316 . -1) (undo-tree-id2317 . -1) (undo-tree-id2318 . -1) (undo-tree-id2319 . -1) (undo-tree-id2320 . -1) (undo-tree-id2321 . -1) (undo-tree-id2322 . -1) (undo-tree-id2323 . -1) (undo-tree-id2324 . -1) (undo-tree-id2325 . -1) (undo-tree-id2326 . -1) (undo-tree-id2327 . -1) (undo-tree-id2328 . -1) (undo-tree-id2329 . -1) (undo-tree-id2330 . -1) (undo-tree-id2331 . -1) (undo-tree-id2332 . -1) (undo-tree-id2333 . -1) (undo-tree-id2334 . -1) (undo-tree-id2335 . -1) (undo-tree-id2336 . -1) (undo-tree-id2337 . -1) (undo-tree-id2338 . -1) (undo-tree-id2339 . -1) (undo-tree-id2340 . -1) (undo-tree-id2341 . -1) (undo-tree-id2342 . -1) (undo-tree-id2343 . -1) (undo-tree-id2344 . -1) (undo-tree-id2345 . -1) (#("l" 0 1 (fontified t)) . -561) (undo-tree-id2346 . -1) (undo-tree-id2347 . -1) (undo-tree-id2348 . -1) (undo-tree-id2349 . -1) (undo-tree-id2350 . -1) (undo-tree-id2351 . -1) (undo-tree-id2352 . -1) (undo-tree-id2353 . -1) (undo-tree-id2354 . -1) (undo-tree-id2355 . -1) (undo-tree-id2356 . -1) (undo-tree-id2357 . -1) (undo-tree-id2358 . -1) (undo-tree-id2359 . -1) (undo-tree-id2360 . -1) (undo-tree-id2361 . -1) (undo-tree-id2362 . -1) (undo-tree-id2363 . -1) (undo-tree-id2364 . -1) (undo-tree-id2365 . -1) (undo-tree-id2366 . -1) (undo-tree-id2367 . -1) (undo-tree-id2368 . -1) (undo-tree-id2369 . -1) (undo-tree-id2370 . -1) (undo-tree-id2371 . -1) (#("e" 0 1 (fontified t)) . -562) (undo-tree-id2372 . -1) (undo-tree-id2373 . -1) (undo-tree-id2374 . -1) (undo-tree-id2375 . -1) (undo-tree-id2376 . -1) (undo-tree-id2377 . -1) (undo-tree-id2378 . -1) (undo-tree-id2379 . -1) (undo-tree-id2380 . -1) (undo-tree-id2381 . -1) (undo-tree-id2382 . -1) (undo-tree-id2383 . -1) (undo-tree-id2384 . -1) (undo-tree-id2385 . -1) (undo-tree-id2386 . -1) (undo-tree-id2387 . -1) (undo-tree-id2388 . -1) (undo-tree-id2389 . -1) (undo-tree-id2390 . -1) (undo-tree-id2391 . -1) (#("r" 0 1 (fontified t)) . -563) (undo-tree-id2392 . -1) (undo-tree-id2393 . -1) (undo-tree-id2394 . -1) (undo-tree-id2395 . -1) (undo-tree-id2396 . -1) (undo-tree-id2397 . -1) (undo-tree-id2398 . -1) (undo-tree-id2399 . -1) (undo-tree-id2400 . -1) (undo-tree-id2401 . -1) (undo-tree-id2402 . -1) (undo-tree-id2403 . -1) (undo-tree-id2404 . -1) (undo-tree-id2405 . -1) (undo-tree-id2406 . -1) (undo-tree-id2407 . -1) 564) nil (26039 45402 850794 843000) 0 nil])
([nil nil ((560 . 561)) nil (26039 45402 850736 969000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -560) (undo-tree-id2313 . -1) (undo-tree-id2314 . -1) (undo-tree-id2315 . -1) 561) nil (26039 45402 850734 758000) 0 nil])
([nil nil ((560 . 568)) nil (26039 45402 850722 553000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -567) (undo-tree-id2560 . -1) (undo-tree-id2561 . -1) (undo-tree-id2562 . -1) (undo-tree-id2563 . -1) (undo-tree-id2564 . -1) (undo-tree-id2565 . -1) (undo-tree-id2566 . -1) (undo-tree-id2567 . -1) 568 (t 26039 45402 896033 950000)) nil (26039 45403 702319 877000) 0 nil])
([nil nil ((#("scaler()" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-3-face) fontified t) 7 8 (face (rainbow-delimiters-depth-3-face) fontified t)) . -559) (undo-tree-id2621 . -8) (undo-tree-id2622 . -8) (undo-tree-id2623 . -8) (undo-tree-id2624 . -8) (undo-tree-id2625 . -8) (undo-tree-id2626 . -8) (undo-tree-id2627 . -8) (undo-tree-id2628 . -8) (undo-tree-id2629 . -8) (undo-tree-id2630 . -8) (undo-tree-id2631 . -8) (undo-tree-id2632 . -8) (undo-tree-id2633 . -8) (undo-tree-id2634 . -8) (undo-tree-id2635 . -8) (undo-tree-id2636 . -8) (undo-tree-id2637 . -8) (undo-tree-id2638 . -8) (undo-tree-id2639 . -3) (undo-tree-id2640 . -3) (undo-tree-id2641 . -3) (undo-tree-id2642 . -3) (undo-tree-id2643 . -3) (undo-tree-id2644 . -3) (undo-tree-id2645 . -3) (undo-tree-id2646 . -3) (undo-tree-id2647 . -3) (undo-tree-id2648 . -8) (undo-tree-id2649 . -8) (undo-tree-id2650 . -8) (undo-tree-id2651 . -8) (undo-tree-id2652 . -8) (undo-tree-id2653 . -8) (undo-tree-id2654 . -8) (undo-tree-id2655 . -8) (undo-tree-id2656 . -8) (undo-tree-id2657 . -8) 567 (t 26039 45403 716033 903000)) nil (26039 45660 694701 926000) 0 nil])
([nil nil ((559 . 560)) nil (26039 45660 694677 292000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -559) (undo-tree-id2616 . -1) (undo-tree-id2617 . -1) (undo-tree-id2618 . -1) (undo-tree-id2619 . -1) (undo-tree-id2620 . -1) 560) nil (26039 45660 694676 266000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -558) (undo-tree-id2568 . -1) (undo-tree-id2569 . -1) (undo-tree-id2570 . -1) (undo-tree-id2571 . -1) (undo-tree-id2572 . -1) (undo-tree-id2573 . -1) (undo-tree-id2574 . -1) (undo-tree-id2575 . -1) (undo-tree-id2576 . -1) (undo-tree-id2577 . -1) (undo-tree-id2578 . -1) (undo-tree-id2579 . -1) (undo-tree-id2580 . -1) (undo-tree-id2581 . -1) (undo-tree-id2582 . -1) (undo-tree-id2583 . -1) (undo-tree-id2584 . -1) (undo-tree-id2585 . -1) (undo-tree-id2586 . -1) (undo-tree-id2587 . -1) (undo-tree-id2588 . -1) (undo-tree-id2589 . -1) (undo-tree-id2590 . -1) (undo-tree-id2591 . -1) (undo-tree-id2592 . -1) (undo-tree-id2593 . -1) (undo-tree-id2594 . -1) (undo-tree-id2595 . -1) (undo-tree-id2596 . -1) (undo-tree-id2597 . -1) (undo-tree-id2598 . -1) (undo-tree-id2599 . -1) (undo-tree-id2600 . -1) (undo-tree-id2601 . -1) (undo-tree-id2602 . -1) (undo-tree-id2603 . -1) (undo-tree-id2604 . -1) (undo-tree-id2605 . -1) (undo-tree-id2606 . -1) (undo-tree-id2607 . -1) (undo-tree-id2608 . -1) (undo-tree-id2609 . -1) (undo-tree-id2610 . -1) (undo-tree-id2611 . -1) (undo-tree-id2612 . -1) (undo-tree-id2613 . -1) (undo-tree-id2614 . -1) (undo-tree-id2615 . -1) 559) nil (26039 45660 694670 127000) 0 nil])
([nil nil ((558 . 559)) nil (26039 45660 694630 349000) 0 nil])
([nil nil ((nil rear-nonsticky nil 575 . 576) (nil fontified nil 559 . 576) (559 . 576)) nil (26039 45737 123562 840000) 0 nil])
([nil nil ((#("clone()" 0 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-3-face) fontified t) 6 7 (face (rainbow-delimiters-depth-3-face) fontified t rear-nonsticky t)) . -569) (undo-tree-id3271 . -7) (undo-tree-id3272 . -7) (undo-tree-id3273 . -7) (undo-tree-id3274 . -7) (undo-tree-id3275 . -7) (undo-tree-id3276 . -7) (undo-tree-id3277 . -7) (undo-tree-id3278 . -7) 576 (t 26039 45738 139347 806000)) nil (26039 45812 964870 209000) 0 nil] [nil nil ((130 . 137) (t 26039 45660 709352 302000)) ((#(": clone" 0 2 (fontified t) 2 7 (fontified t)) . 130) (undo-tree-id2989 . -7) (undo-tree-id2990 . -2) (undo-tree-id2991 . -2) (undo-tree-id2992 . -2) (undo-tree-id2993 . -2) (undo-tree-id2994 . -2) (undo-tree-id2995 . -2) (undo-tree-id2996 . -7) (undo-tree-id2997 . -7) (undo-tree-id2998 . -7) (undo-tree-id2999 . -7)) (26039 45735 904311 960000) 0 nil])
([nil nil ((#("3]." 0 1 (fontified t) 1 2 (face (rainbow-delimiters-depth-3-face) fontified t) 2 3 (fontified t)) . -566) (undo-tree-id3252 . -3) (undo-tree-id3253 . -3) (undo-tree-id3254 . -3) (undo-tree-id3255 . -3) (undo-tree-id3256 . -3) (undo-tree-id3257 . -3) (undo-tree-id3258 . -3) (undo-tree-id3259 . -3) (undo-tree-id3260 . -3) (undo-tree-id3261 . -3) (undo-tree-id3262 . -3) (undo-tree-id3263 . -3) (undo-tree-id3264 . -3) (undo-tree-id3265 . -3) (undo-tree-id3266 . -3) (undo-tree-id3267 . -3) (undo-tree-id3268 . -3) (undo-tree-id3269 . -3) (undo-tree-id3270 . -3) 569) nil (26039 45812 964863 365000) 0 nil])
([nil nil ((1 . 18) (132 . 132) (132 . 137) (#("clone" 0 5 (fontified nil)) . 132) (132 . 137) (#("clone (use std::clone)" 0 22 (fontified nil)) . -132) (132 . 154) (#("clone" 0 5 (fontified t)) . -132) (undo-tree-id2658 . -5) (undo-tree-id2660 . -1) (undo-tree-id2662 . -1) (undo-tree-id2664 . -2) (undo-tree-id2666 . -2) (undo-tree-id2668 . -3) (undo-tree-id2670 . -4) (undo-tree-id2672 . -5) (undo-tree-id2674 . -5) 137) ((132 . 137) (#("clone (use std::clone)" 0 22 (fontified nil)) . 132) (132 . 154) (#("clone" 0 5 (fontified nil)) . 132) (132 . 137) (#("clone" 0 5 (fontified t)) . 132) (undo-tree-id2986 . -5) (undo-tree-id2987 . -5) (undo-tree-id2988 . -5) (#("use std::clone;

" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 7 (face font-lock-constant-face fontified t) 7 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t)) . 1)) (26039 45735 657989 11000) 0 nil])
([nil nil ((#("coords[" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-3-face) fontified t)) . -559) (undo-tree-id3229 . -7) (undo-tree-id3230 . -7) (undo-tree-id3231 . -7) (undo-tree-id3232 . -7) (undo-tree-id3233 . -7) (undo-tree-id3234 . -7) (undo-tree-id3235 . -7) (undo-tree-id3236 . -7) (undo-tree-id3237 . -7) (undo-tree-id3238 . -7) (undo-tree-id3239 . -7) (undo-tree-id3240 . -7) (undo-tree-id3241 . -7) (undo-tree-id3242 . -7) (undo-tree-id3243 . -7) (undo-tree-id3244 . -7) (undo-tree-id3245 . -7) (undo-tree-id3246 . -7) (undo-tree-id3247 . -7) (undo-tree-id3248 . -7) (undo-tree-id3249 . -7) (undo-tree-id3250 . -7) (undo-tree-id3251 . -7) 566) nil (26039 45812 964849 972000) 0 nil])
([nil nil ((#("clone" 0 5 (fontified t)) . -149) (undo-tree-id2692 . -5) (undo-tree-id2693 . -5) (undo-tree-id2695 . -5) (undo-tree-id2697 . -5) (undo-tree-id2699 . -5) (undo-tree-id2701 . -5) (undo-tree-id2703 . -5) 154 (t 26039 45678 729351 259000)) ((149 . 154)) (26039 45735 422157 310000) 0 nil])
([nil nil ((559 . 560)) nil (26039 45812 964834 500000) 0 nil])
([nil nil ((149 . 150)) ((#("C" 0 1 (face font-lock-type-face fontified t)) . 149) (undo-tree-id2983 . -1) (undo-tree-id2984 . -1) (undo-tree-id2985 . -1)) (26039 45735 209282 351000) 0 nil])
([nil nil ((#("<" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -86) (undo-tree-id3169 . -1) (undo-tree-id3170 . -1) (undo-tree-id3171 . -1) (undo-tree-id3172 . -1) (undo-tree-id3173 . -1) (undo-tree-id3174 . -1) (undo-tree-id3175 . -1) (undo-tree-id3176 . -1) (undo-tree-id3177 . -1) (undo-tree-id3178 . -1) (undo-tree-id3179 . -1) (undo-tree-id3180 . -1) (undo-tree-id3181 . -1) (undo-tree-id3182 . -1) (undo-tree-id3183 . -1) (undo-tree-id3184 . -1) (undo-tree-id3185 . -1) (undo-tree-id3186 . -1) (undo-tree-id3187 . -1) (undo-tree-id3188 . -1) (undo-tree-id3189 . -1) (undo-tree-id3190 . -1) (undo-tree-id3191 . -1) (undo-tree-id3192 . -1) (undo-tree-id3193 . -1) (undo-tree-id3194 . -1) (undo-tree-id3195 . -1) (#("T" 0 1 (face font-lock-type-face fontified t)) . -87) (undo-tree-id3196 . -1) (undo-tree-id3197 . -1) (undo-tree-id3198 . -1) (undo-tree-id3199 . -1) (undo-tree-id3200 . -1) (undo-tree-id3201 . -1) (undo-tree-id3202 . -1) (undo-tree-id3203 . -1) (undo-tree-id3204 . -1) (undo-tree-id3205 . -1) (undo-tree-id3206 . -1) (undo-tree-id3207 . -1) (undo-tree-id3208 . -1) (undo-tree-id3209 . -1) (undo-tree-id3210 . -1) (undo-tree-id3211 . -1) (undo-tree-id3212 . -1) (undo-tree-id3213 . -1) (undo-tree-id3214 . -1) (undo-tree-id3215 . -1) (#(">" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -88) (undo-tree-id3216 . -1) (undo-tree-id3217 . -1) (undo-tree-id3218 . -1) (undo-tree-id3219 . -1) (undo-tree-id3220 . -1) (undo-tree-id3221 . -1) (undo-tree-id3222 . -1) (undo-tree-id3223 . -1) (undo-tree-id3224 . -1) (undo-tree-id3225 . -1) (undo-tree-id3226 . -1) (undo-tree-id3227 . -1) (undo-tree-id3228 . -1) 89) nil (26039 45812 964831 397000) 0 nil])
([nil nil ((149 . 154) (#("C" 0 1 (fontified nil)) . 149) (149 . 150) (#("Clone" 0 5 (fontified nil)) . -149) (149 . 154) (#("C" 0 1 (face font-lock-type-face fontified t)) . -149) (undo-tree-id2681 . -1) (undo-tree-id2682 . -1) (undo-tree-id2684 . -1) (undo-tree-id2686 . -1) (undo-tree-id2688 . -1) (undo-tree-id2690 . -1) 150) ((149 . 150) (#("Clone" 0 5 (fontified nil)) . 149) (149 . 154) (#("C" 0 1 (fontified nil)) . 149) (149 . 150) (#("Clone" 0 5 (face font-lock-type-face fontified t)) . 149)) (26039 45734 962356 965000) 0 nil])
([nil nil ((#("T" 0 1 (face font-lock-type-face fontified t)) . -114) (undo-tree-id3155 . -1) (undo-tree-id3156 . -1) (undo-tree-id3157 . -1) (undo-tree-id3158 . -1) (undo-tree-id3159 . -1) (undo-tree-id3160 . -1) (undo-tree-id3161 . -1) (undo-tree-id3162 . -1) (undo-tree-id3163 . -1) (undo-tree-id3164 . -1) (undo-tree-id3165 . -1) (undo-tree-id3166 . -1) (undo-tree-id3167 . -1) (undo-tree-id3168 . -1) 115) nil (26039 45812 964423 80000) 0 nil])
([nil nil ((#("use std::clone;" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 7 (face font-lock-constant-face fontified t) 7 15 (fontified t)) . 1) (undo-tree-id2680 . -15)) ((1 . 16)) (26039 45734 547468 777000) 0 nil])
([nil nil ((114 . 116)) nil (26039 45812 964413 583000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1) (undo-tree-id2678 . -1)) ((1 . 2)) (26039 45733 764549 900000) 0 nil])
([nil nil ((#("5" 0 1 (fontified t)) . -115) (undo-tree-id3145 . -1) (undo-tree-id3146 . -1) (undo-tree-id3147 . -1) (undo-tree-id3148 . -1) (undo-tree-id3149 . -1) (undo-tree-id3150 . -1) (undo-tree-id3151 . -1) (undo-tree-id3152 . -1) (undo-tree-id3153 . -1) (undo-tree-id3154 . -1) 116) nil (26039 45812 964412 502000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1)) ((1 . 2)) (26039 45733 319334 323000) 0 nil])
([nil nil ((115 . 116)) nil (26039 45812 964405 870000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -583) (undo-tree-id2887 . -1) (undo-tree-id2888 . -1) (undo-tree-id2889 . -1) (undo-tree-id2891 . -1) (undo-tree-id2892 . -1) (undo-tree-id2894 . -1) (undo-tree-id2896 . -1) (undo-tree-id2898 . -1) (undo-tree-id2900 . -1) (undo-tree-id2902 . -1) (undo-tree-id2904 . -1) (#(" " 0 1 (fontified t)) . -584) (undo-tree-id2905 . -1) (undo-tree-id2906 . -1) (undo-tree-id2907 . -1) (undo-tree-id2909 . -1) (undo-tree-id2910 . -1) (undo-tree-id2912 . -1) (undo-tree-id2914 . -1) (undo-tree-id2916 . -1) (undo-tree-id2918 . -1) (undo-tree-id2920 . -1) (#(" " 0 1 (fontified t)) . -585) (undo-tree-id2921 . -1) (undo-tree-id2922 . -1) (undo-tree-id2923 . -1) (undo-tree-id2925 . -1) (undo-tree-id2926 . -1) (undo-tree-id2928 . -1) (undo-tree-id2930 . -1) (undo-tree-id2932 . -1) (undo-tree-id2934 . -1) 586 (t 26039 45684 772684 241000)) ((583 . 586)) (26039 45732 998813 144000) 0 nil])
([nil nil ((#("3" 0 1 (fontified t)) . -115) (undo-tree-id3140 . -1) (undo-tree-id3141 . -1) (undo-tree-id3142 . -1) (undo-tree-id3143 . -1) (undo-tree-id3144 . -1) 116) nil (26039 45812 964404 951000) 0 nil])
([nil nil ((#("clone()" 0 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-3-face) fontified t) 6 7 (face (rainbow-delimiters-depth-3-face) fontified t rear-nonsticky t)) . -576) (undo-tree-id2849 . -7) (undo-tree-id2850 . -7) (undo-tree-id2851 . -7) (undo-tree-id2853 . -7) (undo-tree-id2854 . -7) (undo-tree-id2856 . -7) (undo-tree-id2858 . -7) (undo-tree-id2860 . -7) (undo-tree-id2862 . -7) (undo-tree-id2864 . -7) (undo-tree-id2866 . -7) (undo-tree-id2868 . -7) (undo-tree-id2870 . -7) (undo-tree-id2872 . -7) (undo-tree-id2874 . -7) (undo-tree-id2876 . -7) (undo-tree-id2878 . -7) (undo-tree-id2880 . -7) (undo-tree-id2882 . -7) (undo-tree-id2884 . -7) (undo-tree-id2886 . -7) 583) ((576 . 583)) (26039 45732 758414 420000) 0 nil])
([nil nil ((115 . 116)) nil (26039 45812 964400 897000) 0 nil])
([nil nil ((#("3]." 0 1 (fontified t) 1 2 (face (rainbow-delimiters-depth-3-face) fontified t) 2 3 (fontified t)) . -573) (undo-tree-id2809 . -3) (undo-tree-id2810 . -3) (undo-tree-id2811 . -3) (undo-tree-id2813 . -3) (undo-tree-id2814 . -3) (undo-tree-id2816 . -3) (undo-tree-id2818 . -3) (undo-tree-id2820 . -3) (undo-tree-id2822 . -3) (undo-tree-id2824 . -3) (undo-tree-id2826 . -3) (undo-tree-id2828 . -3) (undo-tree-id2830 . -3) (undo-tree-id2832 . -3) (undo-tree-id2834 . -3) (undo-tree-id2836 . -3) (undo-tree-id2838 . -3) (undo-tree-id2840 . -3) (undo-tree-id2842 . -3) (undo-tree-id2844 . -3) (undo-tree-id2846 . -3) (undo-tree-id2848 . -3) 576) ((573 . 576)) (26039 45732 423738 818000) 0 nil])
([nil nil ((114 . 117) (#("f6" 0 2 (fontified nil)) . 114) (114 . 116) (#("f64" 0 3 (fontified nil)) . -114) (114 . 117) (#("f6" 0 2 (fontified t)) . -114) (undo-tree-id3113 . -2) (undo-tree-id3114 . -1) (undo-tree-id3115 . -1) (undo-tree-id3116 . -1) (undo-tree-id3117 . -1) (undo-tree-id3118 . -1) (undo-tree-id3119 . -1) (undo-tree-id3120 . -1) (undo-tree-id3121 . -1) (undo-tree-id3122 . -1) (undo-tree-id3123 . -1) (undo-tree-id3124 . -1) (undo-tree-id3125 . -1) (undo-tree-id3126 . -1) (undo-tree-id3127 . -1) (undo-tree-id3128 . -1) (undo-tree-id3129 . -1) (undo-tree-id3130 . -1) (undo-tree-id3131 . -1) (undo-tree-id3132 . -1) (undo-tree-id3133 . -1) (undo-tree-id3134 . -1) (undo-tree-id3135 . -1) (undo-tree-id3136 . -2) (undo-tree-id3137 . -2) (undo-tree-id3138 . -2) (undo-tree-id3139 . -2) 116) nil (26039 45812 964398 801000) 0 nil])
([nil nil ((#("coords[" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-3-face) fontified t)) . -566) (undo-tree-id2767 . -7) (undo-tree-id2768 . -7) (undo-tree-id2769 . -7) (undo-tree-id2771 . -7) (undo-tree-id2772 . -7) (undo-tree-id2774 . -7) (undo-tree-id2776 . -7) (undo-tree-id2778 . -7) (undo-tree-id2780 . -7) (undo-tree-id2782 . -7) (undo-tree-id2784 . -7) (undo-tree-id2786 . -7) (undo-tree-id2788 . -7) (undo-tree-id2790 . -7) (undo-tree-id2792 . -7) (undo-tree-id2794 . -7) (undo-tree-id2796 . -7) (undo-tree-id2798 . -7) (undo-tree-id2800 . -7) (undo-tree-id2802 . -7) (undo-tree-id2804 . -7) (undo-tree-id2806 . -7) (undo-tree-id2808 . -7) 573) ((566 . 573)) (26039 45732 129165 909000) 0 nil])
([nil nil ((#("<" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -134) (undo-tree-id3089 . -1) (undo-tree-id3090 . -1) (undo-tree-id3091 . -1) (undo-tree-id3092 . -1) (undo-tree-id3093 . -1) (undo-tree-id3094 . -1) (undo-tree-id3095 . -1) (undo-tree-id3096 . -1) (undo-tree-id3097 . -1) (undo-tree-id3098 . -1) (undo-tree-id3099 . -1) (undo-tree-id3100 . -1) (undo-tree-id3101 . -1) (#("T" 0 1 (face font-lock-type-face fontified t)) . -135) (undo-tree-id3102 . -1) (undo-tree-id3103 . -1) (undo-tree-id3104 . -1) (undo-tree-id3105 . -1) (undo-tree-id3106 . -1) (undo-tree-id3107 . -1) (undo-tree-id3108 . -1) (undo-tree-id3109 . -1) (#(">" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -136) (undo-tree-id3110 . -1) (undo-tree-id3111 . -1) (undo-tree-id3112 . -1) 137) nil (26039 45812 964378 859000) 0 nil])
([nil nil ((#("rotation." 0 9 (fontified t)) . -557) (undo-tree-id2722 . -9) (undo-tree-id2723 . -9) (undo-tree-id2724 . -9) (undo-tree-id2725 . -9) (undo-tree-id2727 . -9) (undo-tree-id2728 . -9) (undo-tree-id2730 . -9) (undo-tree-id2732 . -9) (undo-tree-id2734 . -9) (undo-tree-id2736 . -9) (undo-tree-id2738 . -9) (undo-tree-id2740 . -9) (undo-tree-id2742 . -9) (undo-tree-id2744 . -9) (undo-tree-id2746 . -9) (undo-tree-id2748 . -9) (undo-tree-id2750 . -9) (undo-tree-id2752 . -9) (undo-tree-id2754 . -9) (undo-tree-id2756 . -9) (undo-tree-id2758 . -9) (undo-tree-id2760 . -9) (undo-tree-id2762 . -9) (undo-tree-id2764 . -9) (undo-tree-id2766 . -9) 566) ((557 . 566)) (26039 45731 853397 760000) 0 nil])
([nil nil ((#("<" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -127) (undo-tree-id3000 . -1) (undo-tree-id3001 . -1) (undo-tree-id3002 . -1) (undo-tree-id3003 . -1) (undo-tree-id3004 . -1) (undo-tree-id3005 . -1) (undo-tree-id3006 . -1) (undo-tree-id3007 . -1) (undo-tree-id3008 . -1) (undo-tree-id3009 . -1) (undo-tree-id3010 . -1) (undo-tree-id3011 . -1) (undo-tree-id3012 . -1) (undo-tree-id3013 . -1) (undo-tree-id3014 . -1) (undo-tree-id3015 . -1) (undo-tree-id3016 . -1) (undo-tree-id3017 . -1) (undo-tree-id3018 . -1) (undo-tree-id3019 . -1) (undo-tree-id3020 . -1) (undo-tree-id3021 . -1) (undo-tree-id3022 . -1) (undo-tree-id3023 . -1) (undo-tree-id3024 . -1) (undo-tree-id3025 . -1) (undo-tree-id3026 . -1) (undo-tree-id3027 . -1) (undo-tree-id3028 . -1) (undo-tree-id3029 . -1) (undo-tree-id3030 . -1) (undo-tree-id3031 . -1) (undo-tree-id3032 . -1) (undo-tree-id3033 . -1) (undo-tree-id3034 . -1) (undo-tree-id3035 . -1) (undo-tree-id3036 . -1) (undo-tree-id3037 . -1) (undo-tree-id3038 . -1) (undo-tree-id3039 . -1) (undo-tree-id3040 . -1) (undo-tree-id3041 . -1) (#("T" 0 1 (face font-lock-type-face fontified t)) . -128) (undo-tree-id3042 . -1) (undo-tree-id3043 . -1) (undo-tree-id3044 . -1) (undo-tree-id3045 . -1) (undo-tree-id3046 . -1) (undo-tree-id3047 . -1) (undo-tree-id3048 . -1) (undo-tree-id3049 . -1) (undo-tree-id3050 . -1) (undo-tree-id3051 . -1) (undo-tree-id3052 . -1) (undo-tree-id3053 . -1) (undo-tree-id3054 . -1) (undo-tree-id3055 . -1) (undo-tree-id3056 . -1) (undo-tree-id3057 . -1) (undo-tree-id3058 . -1) (undo-tree-id3059 . -1) (undo-tree-id3060 . -1) (undo-tree-id3061 . -1) (undo-tree-id3062 . -1) (undo-tree-id3063 . -1) (undo-tree-id3064 . -1) (undo-tree-id3065 . -1) (undo-tree-id3066 . -1) (undo-tree-id3067 . -1) (undo-tree-id3068 . -1) (undo-tree-id3069 . -1) (undo-tree-id3070 . -1) (undo-tree-id3071 . -1) (undo-tree-id3072 . -1) (undo-tree-id3073 . -1) (undo-tree-id3074 . -1) (undo-tree-id3075 . -1) (undo-tree-id3076 . -1) (undo-tree-id3077 . -1) (undo-tree-id3078 . -1) (undo-tree-id3079 . -1) (undo-tree-id3080 . -1) (undo-tree-id3081 . -1) (#(">" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -129) (undo-tree-id3082 . -1) (undo-tree-id3083 . -1) (undo-tree-id3084 . -1) (undo-tree-id3085 . -1) (undo-tree-id3086 . -1) (undo-tree-id3087 . -1) (undo-tree-id3088 . -1) 130) nil (26039 45812 964356 219000) 0 nil])
([nil nil ((#("<" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -86) (undo-tree-id2935 . -1) (undo-tree-id2936 . -1) (undo-tree-id2937 . -1) (undo-tree-id2938 . -1) (undo-tree-id2939 . -1) (undo-tree-id2940 . -1) (undo-tree-id2941 . -1) (undo-tree-id2942 . -1) (undo-tree-id2943 . -1) (undo-tree-id2944 . -1) (undo-tree-id2945 . -1) (undo-tree-id2946 . -1) (undo-tree-id2947 . -1) (undo-tree-id2948 . -1) (undo-tree-id2949 . -1) (undo-tree-id2950 . -1) (undo-tree-id2951 . -1) (undo-tree-id2952 . -1) (undo-tree-id2953 . -1) (undo-tree-id2954 . -1) (undo-tree-id2955 . -1) (#("T" 0 1 (face font-lock-type-face fontified t)) . -87) (undo-tree-id2956 . -1) (undo-tree-id2957 . -1) (undo-tree-id2958 . -1) (undo-tree-id2959 . -1) (undo-tree-id2960 . -1) (undo-tree-id2961 . -1) (undo-tree-id2962 . -1) (undo-tree-id2963 . -1) (undo-tree-id2964 . -1) (undo-tree-id2965 . -1) (undo-tree-id2966 . -1) (undo-tree-id2967 . -1) (undo-tree-id2968 . -1) (undo-tree-id2969 . -1) (undo-tree-id2970 . -1) (undo-tree-id2971 . -1) (#(">" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -88) (undo-tree-id2972 . -1) (undo-tree-id2973 . -1) (undo-tree-id2974 . -1) (undo-tree-id2975 . -1) (undo-tree-id2976 . -1) (undo-tree-id2977 . -1) (undo-tree-id2978 . -1) (undo-tree-id2979 . -1) (undo-tree-id2980 . -1) (undo-tree-id2981 . -1) (undo-tree-id2982 . -1) 89) ((86 . 89) (t 26039 45727 942681 733000)) (26039 45727 941386 932000) 0 nil] [nil nil ((#("<" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -86) (undo-tree-id2705 . -1) (undo-tree-id2706 . -1) (undo-tree-id2707 . -1) (undo-tree-id2708 . -1) (undo-tree-id2709 . -1) (undo-tree-id2710 . -1) (undo-tree-id2711 . -1) (undo-tree-id2712 . -1) (undo-tree-id2713 . -1) (#("T" 0 1 (face font-lock-type-face fontified t)) . -87) (undo-tree-id2714 . -1) (undo-tree-id2715 . -1) (undo-tree-id2716 . -1) (undo-tree-id2717 . -1) (undo-tree-id2718 . -1) (undo-tree-id2719 . -1) (#(">" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -88) (undo-tree-id2720 . -1) (undo-tree-id2721 . -1) 89) ((86 . 89)) (26039 45724 630871 563000) 0 nil])
([nil nil ((#("T" 0 1 (face font-lock-type-face fontified t)) . -525) (undo-tree-id3375 . -1) (undo-tree-id3376 . -1) 526 (t 26039 45812 979343 465000)) nil (26039 45853 403314 318000) 0 nil])
nil
nil
([nil nil ((525 . 526)) nil (26039 45853 403312 21000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -525) (undo-tree-id3371 . -1) (undo-tree-id3372 . -1) (undo-tree-id3373 . -1) (undo-tree-id3374 . -1) 526) nil (26039 45853 403311 134000) 0 nil])
([nil nil ((525 . 526)) nil (26039 45853 403307 469000) 0 nil])
([nil nil ((525 . 528) (#("f" 0 1 (fontified nil)) . 525) (525 . 526) (#("f64" 0 3 (fontified nil)) . -525) (525 . 528) (#("f" 0 1 (fontified t)) . -525) (undo-tree-id3364 . -1) (undo-tree-id3365 . -1) (undo-tree-id3366 . -1) (undo-tree-id3367 . -1) (undo-tree-id3368 . -1) (undo-tree-id3369 . -1) (undo-tree-id3370 . -1) 526) nil (26039 45853 403306 254000) 0 nil])
([nil nil ((#("T" 0 1 (face font-lock-type-face fontified t)) . -422) (undo-tree-id3362 . -1) (undo-tree-id3363 . -1) 423) nil (26039 45853 403299 726000) 0 nil])
([nil nil ((422 . 424)) nil (26039 45853 403297 669000) 0 nil])
([nil nil ((422 . 423)) nil (26039 45853 403297 22000) 0 nil])
([nil nil ((422 . 425) (#("f64" 0 1 (fontified nil) 1 3 (face font-lock-type-face fontified nil)) . 422) (undo-tree-id3343 . -2) (undo-tree-id3344 . -2) (undo-tree-id3345 . -3) (undo-tree-id3346 . -3) (undo-tree-id3347 . -3) (undo-tree-id3348 . -3) (undo-tree-id3349 . -3) (undo-tree-id3350 . -3) (undo-tree-id3351 . -3) (undo-tree-id3352 . -2) (undo-tree-id3353 . 2) (422 . 423) (#("f64" 0 3 (fontified nil)) . -422) (422 . 425) (#("f" 0 1 (face font-lock-type-face fontified t)) . -422) (undo-tree-id3354 . -1) (undo-tree-id3355 . -1) (undo-tree-id3356 . -1) (undo-tree-id3357 . -1) (undo-tree-id3358 . -1) (undo-tree-id3359 . -1) (undo-tree-id3360 . -1) (undo-tree-id3361 . -1) 423) nil (26039 45853 403295 473000) 0 nil])
([nil nil ((#("T" 0 1 (face font-lock-type-face fontified t)) . -281) (undo-tree-id3328 . -1) (undo-tree-id3329 . -1) (undo-tree-id3330 . -1) (undo-tree-id3331 . -1) (undo-tree-id3332 . -1) (undo-tree-id3333 . -1) (undo-tree-id3334 . -1) (undo-tree-id3335 . -1) (undo-tree-id3336 . -1) (undo-tree-id3337 . -1) (undo-tree-id3338 . -1) (undo-tree-id3339 . -1) (undo-tree-id3340 . -1) (undo-tree-id3341 . -1) (undo-tree-id3342 . -1) 282) nil (26039 45853 403281 323000) 0 nil])
([nil nil ((281 . 283)) nil (26039 45853 403269 846000) 0 nil])
([nil nil ((281 . 284) (#("f6" 0 2 (fontified nil)) . 281) (281 . 283) (#("f64" 0 3 (fontified nil)) . -281) (281 . 284) (#("f6" 0 2 (fontified t)) . -281) (undo-tree-id3319 . -2) (undo-tree-id3320 . -1) (undo-tree-id3321 . -1) (undo-tree-id3322 . -1) (undo-tree-id3323 . -2) (undo-tree-id3324 . -2) (undo-tree-id3325 . -2) (undo-tree-id3326 . -2) (undo-tree-id3327 . -2) 283) nil (26039 45853 403268 605000) 0 nil])
([nil nil ((#("T" 0 1 (face font-lock-type-face fontified t rear-nonsticky t)) . -170) (undo-tree-id3316 . -1) (undo-tree-id3317 . -1) (undo-tree-id3318 . -1) 171) nil (26039 45853 403260 956000) 0 nil])
([nil nil ((170 . 172)) nil (26039 45853 403258 371000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -171) (undo-tree-id3312 . -1) (undo-tree-id3313 . -1) (undo-tree-id3314 . -1) (undo-tree-id3315 . -1) 172) nil (26039 45853 403257 567000) 0 nil])
([nil nil ((170 . 173) (#("f" 0 1 (fontified nil)) . 170) (170 . 171) (#("f64" 0 3 (fontified nil)) . -170) (170 . 173) (#("f" 0 1 (fontified t)) . -170) (undo-tree-id3301 . -1) (undo-tree-id3302 . -1) (undo-tree-id3303 . -1) (undo-tree-id3304 . -1) (undo-tree-id3305 . -1) (undo-tree-id3306 . -1) (undo-tree-id3307 . -1) (undo-tree-id3308 . -1) (undo-tree-id3309 . -1) (undo-tree-id3310 . -1) (undo-tree-id3311 . -1) 171) nil (26039 45853 403253 759000) 0 nil])
([nil nil ((#("T" 0 1 (face font-lock-type-face fontified t)) . -164) (undo-tree-id3299 . -1) (undo-tree-id3300 . -1) 165) nil (26039 45853 403245 163000) 0 nil])
([nil nil ((164 . 165)) nil (26039 45853 403243 131000) 0 nil])
([nil nil ((164 . 167) (#("f" 0 1 (fontified nil)) . 164) (164 . 165) (#("f64" 0 3 (fontified nil)) . -164) (164 . 167) (#("f" 0 1 (fontified t)) . -164) (undo-tree-id3293 . -1) (undo-tree-id3294 . -1) (undo-tree-id3295 . -1) (undo-tree-id3296 . -1) (undo-tree-id3297 . -1) (undo-tree-id3298 . -1) 165) nil (26039 45853 403241 895000) 0 nil])
([nil nil ((#("T" 0 1 (face font-lock-type-face fontified t)) . -158) (undo-tree-id3291 . -1) (undo-tree-id3292 . -1) 159) nil (26039 45853 403236 271000) 0 nil])
([nil nil ((158 . 159)) nil (26039 45853 403234 198000) 0 nil])
([nil nil ((158 . 161) (#("f" 0 1 (fontified nil)) . 158) (158 . 159) (#("f64" 0 3 (fontified nil)) . -158) (158 . 161) (#("f" 0 1 (fontified t)) . -158) (undo-tree-id3285 . -1) (undo-tree-id3286 . -1) (undo-tree-id3287 . -1) (undo-tree-id3288 . -1) (undo-tree-id3289 . -1) (undo-tree-id3290 . -1) 159) nil (26039 45853 403232 900000) 0 nil])
([nil nil ((#("T" 0 1 (face font-lock-type-face fontified t)) . -152) (undo-tree-id3283 . -1) (undo-tree-id3284 . -1) 153) nil (26039 45853 403226 387000) 0 nil])
([nil nil ((152 . 153)) nil (26039 45853 403223 214000) 0 nil])
([nil nil ((152 . 155) (#("f" 0 1 (fontified nil)) . 152) (152 . 153) (#("f64" 0 3 (fontified nil)) . -152) (152 . 155) (#("f" 0 1 (fontified t)) . -152) (undo-tree-id3279 . -1) (undo-tree-id3280 . -1) (undo-tree-id3281 . -1) (undo-tree-id3282 . -1) 153) nil (26039 45853 403218 859000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -565) (undo-tree-id3389 . -1) (undo-tree-id3390 . -1) (undo-tree-id3391 . -1) (undo-tree-id3392 . -1) (undo-tree-id3393 . -1) (undo-tree-id3394 . -1) (#("s" 0 1 (fontified t)) . -566) (undo-tree-id3395 . -1) (undo-tree-id3396 . -1) (undo-tree-id3397 . -1) 567 (t 26039 45853 416007 777000)) nil (26039 45864 193584 979000) 0 nil])
([nil nil ((565 . 568)) nil (26039 45864 193576 349000) 0 nil])
([nil nil ((apply yas--snippet-revive 566 574 #s(yas--snippet nil nil #s(yas--exit 574 nil) 24 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 574 nil) 24 nil nil nil nil)) (566 . 574) (#("scalar()$0" 0 10 (fontified nil)) . 566) (566 . 576) (#("sc" 0 2 (fontified nil)) . 566) (566 . 568) (#("scalar()" 0 8 (fontified nil)) . -566) (566 . 574) (#("sc" 0 2 (fontified t)) . -566) (undo-tree-id3382 . -2) (undo-tree-id3383 . -1) (undo-tree-id3384 . -1) (undo-tree-id3385 . -2) (undo-tree-id3386 . -2) (undo-tree-id3387 . -2) (undo-tree-id3388 . -2) 568) nil (26039 45864 193574 422000) 0 nil])
([nil nil ((574 . 575)) nil (26039 45864 193565 999000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -574) (undo-tree-id3377 . -1) (undo-tree-id3378 . -1) (undo-tree-id3379 . -1) (undo-tree-id3380 . -1) (undo-tree-id3381 . -1) 575) nil (26039 45864 193561 546000) 0 nil])
([nil nil ((574 . 575) (t 26039 45864 206007 143000)) nil (26039 45890 100228 489000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . -574) (undo-tree-id3416 . -1) (undo-tree-id3417 . -1) (undo-tree-id3418 . -1) (undo-tree-id3419 . -1) (undo-tree-id3420 . -1) (undo-tree-id3421 . -1) (undo-tree-id3422 . -1) (undo-tree-id3423 . -1) (undo-tree-id3424 . -1) (undo-tree-id3425 . -1) 575) nil (26039 45890 100227 276000) 0 nil])
([nil nil ((574 . 576)) nil (26039 45890 100220 11000) 0 nil])
([nil nil ((575 . 579) (#("s" 0 1 (fontified nil)) . 575) (575 . 576) (#("self" 0 4 (fontified nil)) . -575) (575 . 579) (#("s" 0 1 (fontified t)) . -575) (undo-tree-id3410 . -1) (undo-tree-id3411 . -1) (undo-tree-id3412 . -1) (undo-tree-id3413 . -1) (undo-tree-id3414 . -1) (undo-tree-id3415 . -1) 576) nil (26039 45890 100218 980000) 0 nil])
([nil nil ((579 . 581)) nil (26039 45890 100213 770000) 0 nil])
([nil nil ((580 . 588) (#("r" 0 1 (fontified nil)) . 580) (580 . 581) (#("rotation" 0 8 (fontified nil)) . -580) (580 . 588) (#("r" 0 1 (fontified t)) . -580) (undo-tree-id3404 . -1) (undo-tree-id3405 . -1) (undo-tree-id3406 . -1) (undo-tree-id3407 . -1) (undo-tree-id3408 . -1) (undo-tree-id3409 . -1) 581) nil (26039 45890 100212 325000) 0 nil])
([nil nil ((588 . 590)) nil (26039 45890 100206 206000) 0 nil])
([nil nil ((apply yas--snippet-revive 589 597 #s(yas--snippet nil nil #s(yas--exit 597 nil) 25 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 597 nil) 25 nil nil nil nil)) (589 . 597) (#("vector()$0" 0 10 (fontified nil)) . 589) (589 . 599) (#("v" 0 1 (fontified nil)) . 589) (589 . 590) (#("vector()" 0 8 (fontified nil)) . -589) (589 . 597) (#("v" 0 1 (fontified t)) . -589) (undo-tree-id3398 . -1) (undo-tree-id3399 . -1) (undo-tree-id3400 . -1) (undo-tree-id3401 . -1) (undo-tree-id3402 . -1) (undo-tree-id3403 . -1) 590) nil (26039 45890 100202 27000) 0 nil])
([nil nil ((15 . 16) (#("{V" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 2 (face font-lock-type-face fontified t)) . 15) (#("ct" 0 2 (face font-lock-type-face fontified t)) . 18) (21 . 22) (#("r4, V" 0 2 (face font-lock-type-face fontified t) 2 4 (fontified t) 4 5 (face font-lock-type-face fontified t)) . 21) (#("c" 0 1 (face font-lock-type-face fontified t)) . 27) (#("o" 0 1 (face font-lock-type-face fontified t)) . 29) (31 . 44) (#("3}" 0 1 (face font-lock-type-face fontified t) 1 2 (face (rainbow-delimiters-depth-1-face) fontified t)) . 31) (49 . 51) (#("geom" 0 4 (face font-lock-constant-face fontified t)) . 49) (54 . 55) (55 . 56) (56 . 60) (#("y::Quat" 0 1 (face font-lock-constant-face fontified t) 1 3 (fontified t) 3 7 (face font-lock-type-face fontified t)) . 56) (64 . 66) (#("rni" 0 3 (face font-lock-type-face fontified t)) . 64) (68 . 71) (#("n" 0 1 (face font-lock-type-face fontified t)) . -68) (undo-tree-id3435 . -1) 69 (#("
           " 0 1 (fontified t) 1 12 (fontified t)) . -461) (#(",
       " 0 1 (fontified t) 1 2 (fontified t) 2 9 (fontified t)) . -485) (574 . 575) (575 . 576) (#("        " 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 8 (fontified t)) . 597) (undo-tree-id3436 . -8) (undo-tree-id3437 . -3) 575 (t 26039 45890 112672 287000)) nil (26039 45914 574821 98000) 0 nil])
([nil nil ((578 . 581)) nil (26039 45914 574814 522000) 0 nil])
([nil nil ((apply yas--snippet-revive 579 590 #s(yas--snippet nil nil #s(yas--exit 590 nil) 26 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 590 nil) 26 nil nil nil nil)) (579 . 590) (#("normalize()$0" 0 13 (fontified nil)) . 579) (579 . 592) (#("no" 0 2 (fontified nil)) . 579) (579 . 581) (#("normalize()" 0 11 (fontified nil)) . -579) (579 . 590) (#("no" 0 2 (fontified t)) . -579) (undo-tree-id3426 . -2) (undo-tree-id3427 . -1) (undo-tree-id3428 . -1) (undo-tree-id3429 . -1) (undo-tree-id3430 . -1) (undo-tree-id3431 . -2) (undo-tree-id3432 . -2) (undo-tree-id3433 . -2) (undo-tree-id3434 . -2) 581) nil (26039 45914 574810 340000) 0 nil])
([nil nil ((598 . 602) (#("    " 0 4 (fontified nil)) . 597) (undo-tree-id3564 . -4) (596 . 602) (t 26039 45914 589337 539000)) nil (26039 48432 763001 904000) 0 nil])
([nil nil ((602 . 609)) nil (26039 48432 763000 306000) 0 nil])
([nil nil ((609 . 614)) nil (26039 48432 762999 685000) 0 nil])
([nil nil ((613 . 614)) nil (26039 48432 762998 953000) 0 nil])
([nil nil ((614 . 615)) nil (26039 48432 762998 276000) 0 nil])
([nil nil ((613 . 618) (#("&s" 0 1 (face rust-ampersand-face fontified nil) 1 2 (fontified nil)) . 613) (undo-tree-id3560 . -1) (undo-tree-id3561 . -1) (614 . 615) (#("&self" 0 5 (fontified nil)) . -614) (614 . 619) (#("s" 0 1 (fontified t)) . -614) (undo-tree-id3562 . -1) (undo-tree-id3563 . -1) 615) nil (26039 48432 762997 271000) 0 nil])
([nil nil ((619 . 622)) nil (26039 48432 762993 422000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -620) (undo-tree-id3558 . -1) (#("-" 0 1 (fontified t)) . -621) (undo-tree-id3559 . -1) 622) nil (26039 48432 762992 574000) 0 nil])
([nil nil ((620 . 623)) nil (26039 48432 762990 484000) 0 nil])
([nil nil ((623 . 630)) nil (26039 48432 762989 846000) 0 nil])
([nil nil ((68 . 77) (apply yas--snippet-revive 623 632 #s(yas--snippet nil nil #s(yas--exit 631 nil) 27 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 631 nil) 27 nil nil nil nil)) (623 . 632) (#("Matrix3<$0>" 0 11 (fontified nil)) . 623) (623 . 634) (#("Matrix3" 0 7 (fontified nil)) . 623) (623 . 630) (#("Matrix3<…> (use nalgebra::Matrix3)" 0 34 (fontified nil)) . -623) (623 . 657) (#("Matrix3" 0 7 (face font-lock-type-face fontified t)) . -623) (undo-tree-id3557 . -7) 630) nil (26039 48432 762988 639000) 0 nil])
([nil nil ((640 . 641)) nil (26039 48432 762985 744000) 0 nil])
([nil nil ((640 . 643) (#("f" 0 1 (fontified nil)) . 640) (640 . 641) (#("f64" 0 3 (fontified nil)) . -640) (640 . 643) (#("f" 0 1 (fontified t)) . -640) (undo-tree-id3556 . -1) 641) nil (26039 48432 762984 633000) 0 nil])
([nil nil ((644 . 647)) nil (26039 48432 762982 706000) 0 nil])
([nil nil ((648 . 652) (#("        " 0 8 (fontified nil)) . 647) (647 . 655) (#("    " 0 4 (fontified nil)) . 647) (undo-tree-id3555 . -4) (646 . 652)) nil (26039 48432 762981 813000) 0 nil])
([nil nil ((647 . 655)) nil (26039 48432 762979 962000) 0 nil])
([nil nil ((655 . 656)) nil (26039 48432 762979 314000) 0 nil])
([nil nil ((655 . 659) (#("s" 0 1 (fontified nil)) . 655) (655 . 656) (#("self" 0 4 (fontified nil)) . -655) (655 . 659) (#("s" 0 1 (fontified t)) . -655) (undo-tree-id3554 . -1) 656) nil (26039 48432 762977 959000) 0 nil])
([nil nil ((659 . 661)) nil (26039 48432 762975 732000) 0 nil])
([nil nil ((660 . 668) (#("r" 0 1 (fontified nil)) . 660) (660 . 661) (#("rotation" 0 8 (fontified nil)) . -660) (660 . 668) (#("r" 0 1 (fontified t)) . -660) (undo-tree-id3553 . -1) 661) nil (26039 48432 762974 546000) 0 nil])
([nil nil ((668 . 669)) nil (26039 48432 762972 434000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -668) (undo-tree-id3552 . -1) 669) nil (26039 48432 762971 723000) 0 nil])
([nil nil ((668 . 671)) nil (26039 48432 762969 636000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -670) (undo-tree-id3551 . -1) 671) nil (26039 48432 762968 750000) 0 nil])
([nil nil ((670 . 671)) nil (26039 48432 762870 750000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -669) (undo-tree-id3549 . -1) (#("m" 0 1 (fontified t)) . -670) (undo-tree-id3550 . -1) 671) nil (26039 48432 762869 894000) 0 nil])
([nil nil ((669 . 673)) nil (26039 48432 762867 819000) 0 nil])
([nil nil ((#("matr" 0 4 (fontified t)) . -669) (undo-tree-id3548 . -4) 673) nil (26039 48432 762867 113000) 0 nil])
([nil nil ((#("rotation." 0 9 (fontified t)) . -660) (undo-tree-id3547 . -9) 669) nil (26039 48432 762865 747000) 0 nil])
([nil nil ((#("self." 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t)) . -655) (undo-tree-id3546 . -5) 660) nil (26039 48432 762864 206000) 0 nil])
([nil nil ((655 . 656)) nil (26039 48432 762862 856000) 0 nil])
([nil nil ((655 . 662) (#("M" 0 1 (fontified nil)) . 655) (655 . 656) (#("Matrix3" 0 7 (fontified nil)) . -655) (655 . 662) (#("M" 0 1 (face font-lock-type-face fontified t)) . -655) (undo-tree-id3545 . -1) 656) nil (26039 48432 762861 854000) 0 nil])
([nil nil ((662 . 668)) nil (26039 48432 762859 756000) 0 nil])
([nil nil ((668 . 670)) nil (26039 48432 762859 193000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -668) (undo-tree-id3543 . -1) (#("q" 0 1 (fontified t)) . -669) (undo-tree-id3544 . -1) 670) nil (26039 48432 762858 299000) 0 nil])
([nil nil ((668 . 669)) nil (26039 48432 762856 167000) 0 nil])
([nil nil ((#("from_" 0 5 (fontified t)) . -664) (undo-tree-id3542 . -5) 669) nil (26039 48432 762855 476000) 0 nil])
([nil nil ((#("Matrix3::" 0 7 (face font-lock-type-face fontified t) 7 9 (fontified t)) . -655) (undo-tree-id3541 . -9) 664) nil (26039 48432 762853 967000) 0 nil])
([nil nil ((655 . 656)) nil (26039 48432 762852 594000) 0 nil])
([nil nil ((655 . 659) (#("s" 0 1 (fontified nil)) . 655) (655 . 656) (#("self" 0 4 (fontified nil)) . -655) (655 . 659) (#("s" 0 1 (fontified t)) . -655) (undo-tree-id3540 . -1) 656) nil (26039 48432 762851 600000) 0 nil])
([nil nil ((659 . 661)) nil (26039 48432 762849 640000) 0 nil])
([nil nil ((660 . 668) (#("r" 0 1 (fontified nil)) . 660) (660 . 661) (#("rotation" 0 8 (fontified nil)) . -660) (660 . 668) (#("r" 0 1 (fontified t)) . -660) (undo-tree-id3539 . -1) 661) nil (26039 48432 762848 700000) 0 nil])
([nil nil ((668 . 671)) nil (26039 48432 762846 732000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -669) (undo-tree-id3537 . -1) (#("a" 0 1 (fontified t)) . -670) (undo-tree-id3538 . -1) 671) nil (26039 48432 762845 873000) 0 nil])
([nil nil ((669 . 671)) nil (26039 48432 762843 725000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -669) (undo-tree-id3535 . -1) (#("o" 0 1 (fontified t)) . -670) (undo-tree-id3536 . -1) 671) nil (26039 48432 762842 897000) 0 nil])
([nil nil ((627 . 632)) nil (26039 48432 762840 763000) 0 nil])
([nil nil ((#("R" 0 1 (face font-lock-type-face fontified t)) . -629) (undo-tree-id3529 . -1) (undo-tree-id3530 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -630) (undo-tree-id3531 . -1) (undo-tree-id3532 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -631) (undo-tree-id3533 . -1) (undo-tree-id3534 . -1) 632) nil (26039 48432 762839 537000) 0 nil])
([nil nil ((629 . 638)) nil (26039 48432 762834 294000) 0 nil])
([nil nil ((#("5" 0 1 (fontified t)) . -637) (undo-tree-id3527 . -1) (undo-tree-id3528 . -1) 638) nil (26039 48432 762833 447000) 0 nil])
([nil nil ((637 . 638)) nil (26039 48432 762831 544000) 0 nil])
([nil nil ((636 . 639) (#("f6" 0 2 (fontified nil)) . 636) (636 . 638) (#("f64" 0 3 (fontified nil)) . -636) (636 . 639) (#("f6" 0 2 (fontified t)) . -636) (undo-tree-id3525 . -1) (undo-tree-id3526 . -2) 638) nil (26039 48432 762830 453000) 0 nil])
([nil nil ((#("rotation." 0 9 (fontified t)) . -672) (undo-tree-id3524 . -9) 681) nil (26039 48432 762827 659000) 0 nil])
([nil nil ((#("self." 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t)) . -667) (undo-tree-id3523 . -5) 672) nil (26039 48432 762826 131000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -666) (undo-tree-id3522 . -1) 667) nil (26039 48432 762824 658000) 0 nil])
([nil nil ((659 . 667) (#("       " 0 7 (fontified t)) . 659) (undo-tree-id3521 . -7) 666) nil (26039 48432 762823 50000) 0 nil])
([nil nil ((667 . 676)) nil (26039 48432 762821 553000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -673) (undo-tree-id3518 . -1) (#("=" 0 1 (fontified t)) . -674) (undo-tree-id3519 . -1) (#("-" 0 1 (fontified t)) . -675) (undo-tree-id3520 . -1) 676) nil (26039 48432 762820 521000) 0 nil])
([nil nil ((673 . 675)) nil (26039 48432 762817 641000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -673) (undo-tree-id3516 . -1) (#(" " 0 1 (fontified t)) . -674) (undo-tree-id3517 . -1) 675) nil (26039 48432 762816 820000) 0 nil])
([nil nil ((673 . 679)) nil (26039 48432 762814 788000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -678) (undo-tree-id3515 . -1) 679) nil (26039 48432 762814 54000) 0 nil])
([nil nil ((678 . 681)) nil (26039 48432 762812 667000) 0 nil])
([nil nil ((680 . 688) (#("r" 0 1 (fontified nil)) . 680) (680 . 681) (#("rotation" 0 8 (fontified nil)) . -680) (680 . 688) (#("r" 0 1 (fontified t)) . -680) (undo-tree-id3513 . -1) (undo-tree-id3514 . -1) 681) nil (26039 48432 762811 535000) 0 nil])
([nil nil ((688 . 690)) nil (26039 48432 762808 884000) 0 nil])
([nil nil ((apply yas--snippet-revive 689 697 #s(yas--snippet nil nil #s(yas--exit 697 nil) 28 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 697 nil) 28 nil nil nil nil)) (689 . 697) (#("vector()$0" 0 10 (fontified nil)) . 689) (689 . 699) (#("v" 0 1 (fontified nil)) . 689) (689 . 690) (#("vector()" 0 8 (fontified nil)) . -689) (689 . 697) (#("v" 0 1 (fontified t)) . -689) (undo-tree-id3512 . -1) 690) nil (26039 48432 762807 744000) 0 nil])
([nil nil ((697 . 700)) nil (26039 48432 762805 344000) 0 nil])
([nil nil ((apply yas--snippet-revive 698 709 #s(yas--snippet nil nil #s(yas--exit 709 nil) 29 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 709 nil) 29 nil nil nil nil)) (698 . 709) (#("normalize()$0" 0 13 (fontified nil)) . 698) (698 . 711) (#("no" 0 2 (fontified nil)) . 698) (698 . 700) (#("normalize()" 0 11 (fontified nil)) . -698) (698 . 709) (#("no" 0 2 (fontified t)) . -698) (undo-tree-id3511 . -2) 700) nil (26039 48432 762804 84000) 0 nil])
([nil nil ((709 . 710)) nil (26039 48432 762801 560000) 0 nil])
([nil nil ((710 . 719)) nil (26039 48432 762801 20000) 0 nil])
([nil nil ((493 . 497) (#("    " 0 4 (fontified nil)) . 492) (undo-tree-id3510 . -4) (492 . 497) (#("    " 0 4 (fontified nil)) . 491) (491 . 495) (491 . 492)) nil (26039 48432 762800 6000) 0 nil])
([nil nil ((492 . 496)) nil (26039 48432 762796 957000) 0 nil])
([nil nil ((496 . 501)) nil (26039 48432 762796 294000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -498) (undo-tree-id3507 . -1) (#("b" 0 1 (fontified t)) . -499) (undo-tree-id3508 . -1) (#(" " 0 1 (fontified t)) . -500) (undo-tree-id3509 . -1) 501) nil (26039 48432 762795 380000) 0 nil])
([nil nil ((498 . 505)) nil (26039 48432 762792 340000) 0 nil])
([nil nil ((#("n" 0 1 (face font-lock-function-name-face fontified t)) . -503) (undo-tree-id3505 . -1) (#("a" 0 1 (face font-lock-function-name-face fontified t)) . -504) (undo-tree-id3506 . -1) 505) nil (26039 48432 762791 508000) 0 nil])
([nil nil ((503 . 507)) nil (26039 48432 762789 119000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -506) (undo-tree-id3504 . -1) 507) nil (26039 48432 762788 401000) 0 nil])
([nil nil ((506 . 508)) nil (26039 48432 762787 69000) 0 nil])
([nil nil ((507 . 508)) nil (26039 48432 762786 492000) 0 nil])
([nil nil ((#("V" 0 1 (face font-lock-type-face fontified t)) . -507) (undo-tree-id3502 . -1) (undo-tree-id3503 . -1) 508) nil (26039 48432 762785 778000) 0 nil])
([nil nil ((507 . 516)) nil (26039 48432 762783 818000) 0 nil])
([nil nil ((apply yas--snippet-revive 515 524 #s(yas--snippet nil nil #s(yas--exit 523 nil) 30 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 523 nil) 30 nil nil nil nil)) (515 . 524) (#("Vector3<$0>" 0 11 (fontified nil)) . 515) (515 . 526) (#("V" 0 1 (fontified nil)) . 515) (515 . 516) (#("Vector3<…>" 0 10 (fontified nil)) . -515) (515 . 525) (#("V" 0 1 (face font-lock-type-face fontified t)) . -515) (undo-tree-id3501 . -1) 516) nil (26039 48432 762782 401000) 0 nil])
([nil nil ((523 . 524)) nil (26039 48432 762779 859000) 0 nil])
([nil nil ((523 . 526) (#("f" 0 1 (fontified nil)) . 523) (523 . 524) (#("f32" 0 3 (fontified nil)) . -523) (523 . 526) (#("f" 0 1 (fontified t)) . -523) (undo-tree-id3499 . -1) (undo-tree-id3500 . -1) 524) nil (26039 48432 762778 875000) 0 nil])
([nil nil ((528 . 530)) nil (26039 48432 762776 97000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -529) (undo-tree-id3498 . -1) 530) nil (26039 48432 762775 408000) 0 nil])
([nil nil ((529 . 531)) nil (26039 48432 762773 883000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -530) (undo-tree-id3497 . -1) 531) nil (26039 48432 762773 179000) 0 nil])
([nil nil ((530 . 532)) nil (26039 48432 762771 694000) 0 nil])
([nil nil ((532 . 533)) nil (26039 48432 762771 136000) 0 nil])
([nil nil ((apply yas--snippet-revive 532 541 #s(yas--snippet nil nil #s(yas--exit 540 nil) 31 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 540 nil) 31 nil nil nil nil)) (532 . 541) (#("Matrix3<$0>" 0 11 (fontified nil)) . 532) (532 . 543) (#("M" 0 1 (fontified nil)) . 532) (532 . 533) (#("Matrix3<…>" 0 10 (fontified nil)) . -532) (532 . 542) (#("M" 0 1 (face font-lock-type-face fontified t)) . -532) (undo-tree-id3496 . -1) 533) nil (26039 48432 762769 832000) 0 nil])
([nil nil ((540 . 541)) nil (26039 48432 762767 421000) 0 nil])
([nil nil ((540 . 543) (#("f" 0 1 (fontified nil)) . 540) (540 . 541) (#("f64" 0 3 (fontified nil)) . -540) (540 . 543) (#("f" 0 1 (fontified t)) . -540) (undo-tree-id3494 . -1) (undo-tree-id3495 . -1) 541) nil (26039 48432 762766 449000) 0 nil])
([nil nil ((544 . 547)) nil (26039 48432 762763 609000) 0 nil])
([nil nil ((548 . 552) (#("        " 0 8 (fontified nil)) . 547) (547 . 555) (#("    " 0 4 (fontified nil)) . 547) (undo-tree-id3493 . -4) (546 . 552)) nil (26039 48432 762762 766000) 0 nil])
([nil nil ((547 . 555)) nil (26039 48432 762760 959000) 0 nil])
([nil nil ((#("omega" 0 5 (face font-lock-variable-name-face fontified t)) . -704) (undo-tree-id3489 . -5) (undo-tree-id3490 . -5) (undo-tree-id3491 . -5) (undo-tree-id3492 . -5) 709) nil (26039 48432 762760 158000) 0 nil])
([nil nil ((704 . 709)) nil (26039 48432 762756 682000) 0 nil])
([nil nil ((555 . 556)) nil (26039 48432 762756 122000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -555) (undo-tree-id3488 . -1) 556) nil (26039 48432 762755 394000) 0 nil])
([nil nil ((555 . 556)) nil (26039 48432 762754 34000) 0 nil])
([nil nil ((555 . 562) (#("M" 0 1 (fontified nil)) . 555) (555 . 556) (#("Matrix3" 0 7 (fontified nil)) . -555) (555 . 562) (#("M" 0 1 (face font-lock-type-face fontified t)) . -555) (undo-tree-id3487 . -1) 556) nil (26039 48432 762753 100000) 0 nil])
([nil nil ((562 . 568)) nil (26039 48432 762751 12000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -564) (undo-tree-id3480 . -1) (undo-tree-id3481 . -1) (undo-tree-id3482 . -1) (undo-tree-id3483 . -1) (#("r" 0 1 (fontified t)) . -565) (undo-tree-id3484 . -1) (#("o" 0 1 (fontified t)) . -566) (undo-tree-id3485 . -1) (#("m" 0 1 (fontified t)) . -567) (undo-tree-id3486 . -1) 568) nil (26039 48432 762749 975000) 0 nil])
([nil nil ((564 . 567)) nil (26039 48432 762744 562000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 568 571 nil nil nil nil #s(yas--field 2 573 576 nil nil nil nil #s(yas--field 3 578 581 nil nil nil nil #s(yas--field 4 583 586 nil nil nil nil #s(yas--field 5 588 591 nil nil nil nil #s(yas--field 6 593 596 nil nil nil nil #s(yas--field 7 598 601 nil nil nil nil #s(yas--field 8 603 606 nil nil nil nil #s(yas--field 9 608 611 nil nil nil nil #s(yas--exit 612 nil)))))))))) #s(yas--field 2 573 576 nil nil nil nil #s(yas--field 3 578 581 nil nil nil nil #s(yas--field 4 583 586 nil nil nil nil #s(yas--field 5 588 591 nil nil nil nil #s(yas--field 6 593 596 nil nil nil nil #s(yas--field 7 598 601 nil nil nil nil #s(yas--field 8 603 606 nil nil nil nil #s(yas--field 9 608 611 nil nil nil nil #s(yas--exit 612 nil))))))))) #s(yas--field 3 578 581 nil nil nil nil #s(yas--field 4 583 586 nil nil nil nil #s(yas--field 5 588 591 nil nil nil nil #s(yas--field 6 593 596 nil nil nil nil #s(yas--field 7 598 601 nil nil nil nil #s(yas--field 8 603 606 nil nil nil nil #s(yas--field 9 608 611 nil nil nil nil #s(yas--exit 612 nil)))))))) #s(yas--field 4 583 586 nil nil nil nil #s(yas--field 5 588 591 nil nil nil nil #s(yas--field 6 593 596 nil nil nil nil #s(yas--field 7 598 601 nil nil nil nil #s(yas--field 8 603 606 nil nil nil nil #s(yas--field 9 608 611 nil nil nil nil #s(yas--exit 612 nil))))))) #s(yas--field 5 588 591 nil nil nil nil #s(yas--field 6 593 596 nil nil nil nil #s(yas--field 7 598 601 nil nil nil nil #s(yas--field 8 603 606 nil nil nil nil #s(yas--field 9 608 611 nil nil nil nil #s(yas--exit 612 nil)))))) #s(yas--field 6 593 596 nil nil nil nil #s(yas--field 7 598 601 nil nil nil nil #s(yas--field 8 603 606 nil nil nil nil #s(yas--field 9 608 611 nil nil nil nil #s(yas--exit 612 nil))))) #s(yas--field 7 598 601 nil nil nil nil #s(yas--field 8 603 606 nil nil nil nil #s(yas--field 9 608 611 nil nil nil nil #s(yas--exit 612 nil)))) #s(yas--field 8 603 606 nil nil nil nil #s(yas--field 9 608 611 nil nil nil nil #s(yas--exit 612 nil))) #s(yas--field 9 608 611 nil nil nil nil #s(yas--exit 612 nil))) #s(yas--exit 612 nil) 32 nil #s(yas--field 1 568 571 nil nil nil nil #s(yas--field 2 573 576 nil nil nil nil #s(yas--field 3 578 581 nil nil nil nil #s(yas--field 4 583 586 nil nil nil nil #s(yas--field 5 588 591 nil nil nil nil #s(yas--field 6 593 596 nil nil nil nil #s(yas--field 7 598 601 nil nil nil nil #s(yas--field 8 603 606 nil nil nil nil #s(yas--field 9 608 611 nil nil nil nil #s(yas--exit 612 nil)))))))))) nil nil)) (564 . 612) (#("new(${1:m11}, ${2:m12}, ${3:m13}, ${4:m21}, ${5:m22}, ${6:m23}, ${7:m31}, ${8:m32}, ${9:m33})$0" 0 95 (fontified nil)) . 564) (564 . 659) (#("new" 0 3 (fontified nil)) . 564) (564 . 567) (#("new(…)" 0 6 (fontified nil)) . -564) (564 . 570) (#("new" 0 3 (fontified t)) . -564) (undo-tree-id3469 . -3) (undo-tree-id3470 . -1) (undo-tree-id3471 . -1) (undo-tree-id3472 . -1) (undo-tree-id3473 . -1) (undo-tree-id3474 . -2) (undo-tree-id3475 . -2) (undo-tree-id3476 . -3) (undo-tree-id3477 . -3) (undo-tree-id3478 . -3) (undo-tree-id3479 . -3) 567) nil (26039 48432 762743 195000) 0 nil])
([nil nil ((apply yas--snippet-revive 564 612 #s(yas--snippet nil (#s(yas--field 1 568 571 nil nil nil nil #s(yas--field 2 573 576 nil nil nil nil #s(yas--field 3 578 581 nil nil nil nil #s(yas--field 4 583 586 nil nil nil nil #s(yas--field 5 588 591 nil nil nil nil #s(yas--field 6 593 596 nil nil nil nil #s(yas--field 7 598 601 nil nil nil nil #s(yas--field 8 603 606 nil nil nil nil #s(yas--field 9 608 611 nil nil nil nil #s(yas--exit 612 nil)))))))))) #s(yas--field 2 573 576 nil nil nil nil #s(yas--field 3 578 581 nil nil nil nil #s(yas--field 4 583 586 nil nil nil nil #s(yas--field 5 588 591 nil nil nil nil #s(yas--field 6 593 596 nil nil nil nil #s(yas--field 7 598 601 nil nil nil nil #s(yas--field 8 603 606 nil nil nil nil #s(yas--field 9 608 611 nil nil nil nil #s(yas--exit 612 nil))))))))) #s(yas--field 3 578 581 nil nil nil nil #s(yas--field 4 583 586 nil nil nil nil #s(yas--field 5 588 591 nil nil nil nil #s(yas--field 6 593 596 nil nil nil nil #s(yas--field 7 598 601 nil nil nil nil #s(yas--field 8 603 606 nil nil nil nil #s(yas--field 9 608 611 nil nil nil nil #s(yas--exit 612 nil)))))))) #s(yas--field 4 583 586 nil nil nil nil #s(yas--field 5 588 591 nil nil nil nil #s(yas--field 6 593 596 nil nil nil nil #s(yas--field 7 598 601 nil nil nil nil #s(yas--field 8 603 606 nil nil nil nil #s(yas--field 9 608 611 nil nil nil nil #s(yas--exit 612 nil))))))) #s(yas--field 5 588 591 nil nil nil nil #s(yas--field 6 593 596 nil nil nil nil #s(yas--field 7 598 601 nil nil nil nil #s(yas--field 8 603 606 nil nil nil nil #s(yas--field 9 608 611 nil nil nil nil #s(yas--exit 612 nil)))))) #s(yas--field 6 593 596 nil nil nil nil #s(yas--field 7 598 601 nil nil nil nil #s(yas--field 8 603 606 nil nil nil nil #s(yas--field 9 608 611 nil nil nil nil #s(yas--exit 612 nil))))) #s(yas--field 7 598 601 nil nil nil nil #s(yas--field 8 603 606 nil nil nil nil #s(yas--field 9 608 611 nil nil nil nil #s(yas--exit 612 nil)))) #s(yas--field 8 603 606 nil nil nil nil #s(yas--field 9 608 611 nil nil nil nil #s(yas--exit 612 nil))) #s(yas--field 9 608 611 nil nil nil nil #s(yas--exit 612 nil))) #s(yas--exit 612 nil) 32 nil #s(yas--field 1 568 571 nil nil nil nil #s(yas--field 2 573 576 nil nil nil nil #s(yas--field 3 578 581 nil nil nil nil #s(yas--field 4 583 586 nil nil nil nil #s(yas--field 5 588 591 nil nil nil nil #s(yas--field 6 593 596 nil nil nil nil #s(yas--field 7 598 601 nil nil nil nil #s(yas--field 8 603 606 nil nil nil nil #s(yas--field 9 608 611 nil nil nil nil #s(yas--exit 612 nil)))))))))) nil nil))) nil (26039 48432 762733 467000) 0 nil])
([nil nil ((546 . 555)) nil (26039 48432 762732 768000) 0 nil])
([nil nil ((555 . 558)) nil (26039 48432 762732 138000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -556) (undo-tree-id3446 . -1) (undo-tree-id3447 . -1) (undo-tree-id3448 . -1) (undo-tree-id3449 . -1) (undo-tree-id3450 . -1) (undo-tree-id3451 . -1) (undo-tree-id3452 . -1) (undo-tree-id3453 . -1) (undo-tree-id3454 . -1) (undo-tree-id3455 . -1) (undo-tree-id3456 . -1) (undo-tree-id3457 . -1) (undo-tree-id3458 . -1) (undo-tree-id3459 . -1) (undo-tree-id3460 . -1) (undo-tree-id3461 . -1) (undo-tree-id3462 . -1) (undo-tree-id3463 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -557) (undo-tree-id3464 . -1) (undo-tree-id3465 . -1) (undo-tree-id3466 . -1) (undo-tree-id3467 . -1) (undo-tree-id3468 . -1) 558) nil (26039 48432 762730 381000) 0 nil])
([nil nil ((556 . 558)) nil (26039 48432 762713 938000) 0 nil])
([nil nil ((557 . 567)) nil (26039 48432 762713 328000) 0 nil])
([nil nil ((567 . 570)) nil (26039 48432 762712 682000) 0 nil])
([nil nil ((#("l" 0 1 (face font-lock-preprocessor-face fontified t)) . -569) (undo-tree-id3443 . -1) (undo-tree-id3444 . -1) (undo-tree-id3445 . -1) 570) nil (26039 48432 762711 547000) 0 nil])
([nil nil ((569 . 571)) nil (26039 48432 762707 403000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-4-face font-lock-preprocessor-face) fontified t)) . -570) (undo-tree-id3438 . -1) (undo-tree-id3439 . -1) (undo-tree-id3440 . -1) (undo-tree-id3441 . -1) (undo-tree-id3442 . -1) 571) nil (26039 48432 762703 202000) 0 nil])
([nil nil ((593 . 606) (t 26039 48432 809191 672000)) nil (26039 48611 747373 374000) 0 nil])
([nil nil ((621 . 633) (#(" " 0 1 (fontified nil)) . 620) (undo-tree-id4032 . -1) (undo-tree-id4033 . -1) (621 . 622)) nil (26039 48611 747372 445000) 0 nil])
([nil nil ((648 . 660) (#(" " 0 1 (fontified nil)) . 647) (undo-tree-id4030 . -1) (undo-tree-id4031 . -1) (648 . 649)) nil (26039 48611 747370 254000) 0 nil])
([nil nil ((673 . 682)) nil (26039 48611 747368 158000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -606) (undo-tree-id3989 . -1) (undo-tree-id3990 . -1) (undo-tree-id3991 . -1) (undo-tree-id3992 . -1) (undo-tree-id3993 . -1) (undo-tree-id3994 . -1) (undo-tree-id3995 . -1) (undo-tree-id3996 . -1) (undo-tree-id3997 . -1) (undo-tree-id3998 . -1) (undo-tree-id3999 . -1) (undo-tree-id4000 . -1) (undo-tree-id4001 . -1) (undo-tree-id4002 . -1) (undo-tree-id4003 . -1) (undo-tree-id4004 . -1) (undo-tree-id4005 . -1) (undo-tree-id4006 . -1) (#("1" 0 1 (fontified t)) . -607) (undo-tree-id4007 . -1) (undo-tree-id4008 . -1) (undo-tree-id4009 . -1) (undo-tree-id4010 . -1) (undo-tree-id4011 . -1) (undo-tree-id4012 . -1) (undo-tree-id4013 . -1) (undo-tree-id4014 . -1) (undo-tree-id4015 . -1) (undo-tree-id4016 . -1) (undo-tree-id4017 . -1) (undo-tree-id4018 . -1) (undo-tree-id4019 . -1) (undo-tree-id4020 . -1) (undo-tree-id4021 . -1) (undo-tree-id4022 . -1) (#("1" 0 1 (fontified t)) . -608) (undo-tree-id4023 . -1) (undo-tree-id4024 . -1) (undo-tree-id4025 . -1) (undo-tree-id4026 . -1) (undo-tree-id4027 . -1) (undo-tree-id4028 . -1) (undo-tree-id4029 . -1) 609) nil (26039 48611 747365 712000) 0 nil])
([nil nil ((606 . 607)) nil (26039 48611 747340 76000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -635) (undo-tree-id3962 . -1) (undo-tree-id3963 . -1) (undo-tree-id3964 . -1) (undo-tree-id3965 . -1) (undo-tree-id3966 . -1) (undo-tree-id3967 . -1) (undo-tree-id3968 . -1) (undo-tree-id3969 . -1) (undo-tree-id3970 . -1) (undo-tree-id3971 . -1) (#("m" 0 1 (fontified t)) . -636) (undo-tree-id3972 . -1) (undo-tree-id3973 . -1) (undo-tree-id3974 . -1) (undo-tree-id3975 . -1) (undo-tree-id3976 . -1) (undo-tree-id3977 . -1) (undo-tree-id3978 . -1) (undo-tree-id3979 . -1) (#("2" 0 1 (fontified t)) . -637) (undo-tree-id3980 . -1) (undo-tree-id3981 . -1) (undo-tree-id3982 . -1) (undo-tree-id3983 . -1) (undo-tree-id3984 . -1) (undo-tree-id3985 . -1) (#("2" 0 1 (fontified t)) . -638) (undo-tree-id3986 . -1) (undo-tree-id3987 . -1) (undo-tree-id3988 . -1) 639) nil (26039 48611 747338 316000) 0 nil])
([nil nil ((635 . 637)) nil (26039 48611 747320 579000) 0 nil])
([nil nil ((662 . 663)) nil (26039 48611 747319 984000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -662) (undo-tree-id3959 . -1) (undo-tree-id3960 . -1) (undo-tree-id3961 . -1) 663) nil (26039 48611 747318 927000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -666) (undo-tree-id3941 . -1) (undo-tree-id3942 . -1) (undo-tree-id3943 . -1) (undo-tree-id3944 . -1) (undo-tree-id3945 . -1) (undo-tree-id3946 . -1) (undo-tree-id3947 . -1) (undo-tree-id3948 . -1) (undo-tree-id3949 . -1) (#("3" 0 1 (fontified t)) . -667) (undo-tree-id3950 . -1) (undo-tree-id3951 . -1) (undo-tree-id3952 . -1) (undo-tree-id3953 . -1) (undo-tree-id3954 . -1) (undo-tree-id3955 . -1) (#("3" 0 1 (fontified t)) . -668) (undo-tree-id3956 . -1) (undo-tree-id3957 . -1) (undo-tree-id3958 . -1) 669) nil (26039 48611 747315 596000) 0 nil])
([nil nil ((666 . 668)) nil (26039 48611 747304 35000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -667) (undo-tree-id3938 . -1) (undo-tree-id3939 . -1) (undo-tree-id3940 . -1) 668) nil (26039 48611 747303 8000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -609) (undo-tree-id3890 . -1) (undo-tree-id3891 . -1) (undo-tree-id3892 . -1) (undo-tree-id3893 . -1) (undo-tree-id3894 . -1) (undo-tree-id3895 . -1) (undo-tree-id3896 . -1) (undo-tree-id3897 . -1) (undo-tree-id3898 . -1) (undo-tree-id3899 . -1) (undo-tree-id3900 . -1) (undo-tree-id3901 . -1) (undo-tree-id3902 . -1) (undo-tree-id3903 . -1) (undo-tree-id3904 . -1) (undo-tree-id3905 . -1) (undo-tree-id3906 . -1) (undo-tree-id3907 . -1) (undo-tree-id3908 . -1) (#("1" 0 1 (fontified t)) . -610) (undo-tree-id3909 . -1) (undo-tree-id3910 . -1) (undo-tree-id3911 . -1) (undo-tree-id3912 . -1) (undo-tree-id3913 . -1) (undo-tree-id3914 . -1) (undo-tree-id3915 . -1) (undo-tree-id3916 . -1) (undo-tree-id3917 . -1) (undo-tree-id3918 . -1) (undo-tree-id3919 . -1) (undo-tree-id3920 . -1) (undo-tree-id3921 . -1) (undo-tree-id3922 . -1) (undo-tree-id3923 . -1) (undo-tree-id3924 . -1) (#("2" 0 1 (fontified t)) . -611) (undo-tree-id3925 . -1) (undo-tree-id3926 . -1) (undo-tree-id3927 . -1) (undo-tree-id3928 . -1) (undo-tree-id3929 . -1) (undo-tree-id3930 . -1) (undo-tree-id3931 . -1) (undo-tree-id3932 . -1) (undo-tree-id3933 . -1) (undo-tree-id3934 . -1) (undo-tree-id3935 . -1) (undo-tree-id3936 . -1) (undo-tree-id3937 . -1) 612) nil (26039 48611 747298 757000) 0 nil])
([nil nil ((609 . 610)) nil (26039 48611 747269 595000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -609) (undo-tree-id3887 . -1) (undo-tree-id3888 . -1) (undo-tree-id3889 . -1) 610) nil (26039 48611 747268 879000) 0 nil])
([nil nil ((609 . 611)) nil (26039 48611 747266 497000) 0 nil])
([nil nil ((610 . 616) (#("v" 0 1 (fontified nil)) . 610) (610 . 611) (#("vector" 0 6 (fontified nil)) . -610) (610 . 616) (#("v" 0 1 (fontified t)) . -610) (undo-tree-id3881 . -1) (undo-tree-id3882 . -1) (undo-tree-id3883 . -1) (undo-tree-id3884 . -1) (undo-tree-id3885 . -1) (undo-tree-id3886 . -1) 611) nil (26039 48611 747265 212000) 0 nil])
([nil nil ((616 . 617)) nil (26039 48611 747259 926000) 0 nil])
([nil nil ((617 . 618)) nil (26039 48611 747259 338000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -616) (undo-tree-id3862 . -1) (undo-tree-id3863 . -1) (undo-tree-id3864 . -1) (undo-tree-id3865 . -1) (undo-tree-id3866 . -1) (undo-tree-id3867 . -1) (undo-tree-id3868 . -1) (undo-tree-id3869 . -1) (undo-tree-id3870 . -1) (undo-tree-id3871 . -1) (undo-tree-id3872 . -1) (undo-tree-id3873 . -1) (undo-tree-id3874 . -1) (undo-tree-id3875 . -1) (#("g" 0 1 (fontified t)) . -617) (undo-tree-id3876 . -1) (undo-tree-id3877 . -1) (undo-tree-id3878 . -1) (undo-tree-id3879 . -1) (undo-tree-id3880 . -1) 618) nil (26039 48611 747258 16000) 0 nil])
([nil nil ((616 . 618)) nil (26039 48611 747245 158000) 0 nil])
([nil nil ((617 . 618)) nil (26039 48611 747244 625000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -621) (undo-tree-id3820 . -1) (undo-tree-id3821 . -1) (undo-tree-id3822 . -1) (undo-tree-id3823 . -1) (undo-tree-id3824 . -1) (undo-tree-id3825 . -1) (undo-tree-id3826 . -1) (undo-tree-id3827 . -1) (undo-tree-id3828 . -1) (undo-tree-id3829 . -1) (undo-tree-id3830 . -1) (undo-tree-id3831 . -1) (undo-tree-id3832 . -1) (undo-tree-id3833 . -1) (undo-tree-id3834 . -1) (undo-tree-id3835 . -1) (undo-tree-id3836 . -1) (undo-tree-id3837 . -1) (#("1" 0 1 (fontified t)) . -622) (undo-tree-id3838 . -1) (undo-tree-id3839 . -1) (undo-tree-id3840 . -1) (undo-tree-id3841 . -1) (undo-tree-id3842 . -1) (undo-tree-id3843 . -1) (undo-tree-id3844 . -1) (undo-tree-id3845 . -1) (undo-tree-id3846 . -1) (undo-tree-id3847 . -1) (undo-tree-id3848 . -1) (undo-tree-id3849 . -1) (undo-tree-id3850 . -1) (undo-tree-id3851 . -1) (#("3" 0 1 (fontified t)) . -623) (undo-tree-id3852 . -1) (undo-tree-id3853 . -1) (undo-tree-id3854 . -1) (undo-tree-id3855 . -1) (undo-tree-id3856 . -1) (undo-tree-id3857 . -1) (undo-tree-id3858 . -1) (undo-tree-id3859 . -1) (undo-tree-id3860 . -1) (undo-tree-id3861 . -1) 624) nil (26039 48611 747242 278000) 0 nil])
([nil nil ((621 . 622)) nil (26039 48611 746776 624000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -621) (undo-tree-id3817 . -1) (undo-tree-id3818 . -1) (undo-tree-id3819 . -1) 622) nil (26039 48611 746775 816000) 0 nil])
([nil nil ((621 . 623)) nil (26039 48611 746773 210000) 0 nil])
([nil nil ((621 . 627) (#("ve" 0 2 (fontified nil)) . 621) (621 . 623) (#("vector" 0 6 (fontified nil)) . -621) (621 . 627) (#("ve" 0 2 (fontified t)) . -621) (undo-tree-id3810 . -2) (undo-tree-id3811 . -1) (undo-tree-id3812 . -1) (undo-tree-id3813 . -2) (undo-tree-id3814 . -2) (undo-tree-id3815 . -2) (undo-tree-id3816 . -2) 623) nil (26039 48611 746771 910000) 0 nil])
([nil nil ((627 . 629)) nil (26039 48611 746765 899000) 0 nil])
([nil nil ((628 . 629)) nil (26039 48611 746765 321000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -644) (undo-tree-id3795 . -1) (undo-tree-id3796 . -1) (undo-tree-id3797 . -1) (undo-tree-id3798 . -1) (undo-tree-id3799 . -1) (undo-tree-id3800 . -1) (undo-tree-id3801 . -1) (#("2" 0 1 (fontified t)) . -645) (undo-tree-id3802 . -1) (undo-tree-id3803 . -1) (undo-tree-id3804 . -1) (undo-tree-id3805 . -1) (undo-tree-id3806 . -1) (#("1" 0 1 (fontified t)) . -646) (undo-tree-id3807 . -1) (undo-tree-id3808 . -1) (undo-tree-id3809 . -1) 647) nil (26039 48611 746763 39000) 0 nil])
([nil nil ((644 . 646)) nil (26039 48611 745858 986000) 0 nil])
([nil nil ((644 . 650) (#("ve" 0 2 (fontified nil)) . 644) (644 . 646) (#("vector" 0 6 (fontified nil)) . -644) (644 . 650) (#("ve" 0 2 (fontified t)) . -644) (undo-tree-id3788 . -2) (undo-tree-id3789 . -1) (undo-tree-id3790 . -1) (undo-tree-id3791 . -2) (undo-tree-id3792 . -2) (undo-tree-id3793 . -2) (undo-tree-id3794 . -2) 646) nil (26039 48611 745857 747000) 0 nil])
([nil nil ((650 . 652)) nil (26039 48611 745852 172000) 0 nil])
([nil nil ((651 . 652)) nil (26039 48611 745851 606000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -658) (undo-tree-id3713 . -1) (undo-tree-id3714 . -1) (undo-tree-id3715 . -1) (undo-tree-id3716 . -1) (undo-tree-id3717 . -1) (undo-tree-id3718 . -1) (undo-tree-id3719 . -1) (undo-tree-id3720 . -1) (undo-tree-id3721 . -1) (undo-tree-id3722 . -1) (undo-tree-id3723 . -1) (undo-tree-id3724 . -1) (undo-tree-id3725 . -1) (undo-tree-id3726 . -1) (undo-tree-id3727 . -1) (undo-tree-id3728 . -1) (undo-tree-id3729 . -1) (undo-tree-id3730 . -1) (undo-tree-id3731 . -1) (undo-tree-id3732 . -1) (undo-tree-id3733 . -1) (undo-tree-id3734 . -1) (undo-tree-id3735 . -1) (undo-tree-id3736 . -1) (undo-tree-id3737 . -1) (undo-tree-id3738 . -1) (undo-tree-id3739 . -1) (#("2" 0 1 (fontified t)) . -659) (undo-tree-id3740 . -1) (undo-tree-id3741 . -1) (undo-tree-id3742 . -1) (undo-tree-id3743 . -1) (undo-tree-id3744 . -1) (undo-tree-id3745 . -1) (undo-tree-id3746 . -1) (undo-tree-id3747 . -1) (undo-tree-id3748 . -1) (undo-tree-id3749 . -1) (undo-tree-id3750 . -1) (undo-tree-id3751 . -1) (undo-tree-id3752 . -1) (undo-tree-id3753 . -1) (undo-tree-id3754 . -1) (undo-tree-id3755 . -1) (undo-tree-id3756 . -1) (undo-tree-id3757 . -1) (undo-tree-id3758 . -1) (undo-tree-id3759 . -1) (undo-tree-id3760 . -1) (undo-tree-id3761 . -1) (undo-tree-id3762 . -1) (undo-tree-id3763 . -1) (undo-tree-id3764 . -1) (#("3" 0 1 (fontified t)) . -660) (undo-tree-id3765 . -1) (undo-tree-id3766 . -1) (undo-tree-id3767 . -1) (undo-tree-id3768 . -1) (undo-tree-id3769 . -1) (undo-tree-id3770 . -1) (undo-tree-id3771 . -1) (undo-tree-id3772 . -1) (undo-tree-id3773 . -1) (undo-tree-id3774 . -1) (undo-tree-id3775 . -1) (undo-tree-id3776 . -1) (undo-tree-id3777 . -1) (undo-tree-id3778 . -1) (undo-tree-id3779 . -1) (undo-tree-id3780 . -1) (undo-tree-id3781 . -1) (undo-tree-id3782 . -1) (undo-tree-id3783 . -1) (undo-tree-id3784 . -1) (undo-tree-id3785 . -1) (undo-tree-id3786 . -1) (undo-tree-id3787 . -1) 661) nil (26039 48611 745848 546000) 0 nil])
([nil nil ((658 . 659)) nil (26039 48611 745803 414000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -658) (undo-tree-id3710 . -1) (undo-tree-id3711 . -1) (undo-tree-id3712 . -1) 659) nil (26039 48611 745802 537000) 0 nil])
([nil nil ((658 . 661)) nil (26039 48611 745799 389000) 0 nil])
([nil nil ((659 . 665) (#("ve" 0 2 (fontified nil)) . 659) (659 . 661) (#("vector" 0 6 (fontified nil)) . -659) (659 . 665) (#("ve" 0 2 (fontified t)) . -659) (undo-tree-id3705 . -2) (undo-tree-id3706 . -1) (undo-tree-id3707 . -1) (undo-tree-id3708 . -2) (undo-tree-id3709 . -2) 661) nil (26039 48611 745798 370000) 0 nil])
([nil nil ((665 . 667)) nil (26039 48611 745794 133000) 0 nil])
([nil nil ((666 . 667)) nil (26039 48611 745793 544000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -682) (undo-tree-id3644 . -1) (undo-tree-id3645 . -1) (undo-tree-id3646 . -1) (undo-tree-id3647 . -1) (undo-tree-id3648 . -1) (undo-tree-id3649 . -1) (undo-tree-id3650 . -1) (undo-tree-id3651 . -1) (undo-tree-id3652 . -1) (undo-tree-id3653 . -1) (undo-tree-id3654 . -1) (undo-tree-id3655 . -1) (undo-tree-id3656 . -1) (undo-tree-id3657 . -1) (undo-tree-id3658 . -1) (undo-tree-id3659 . -1) (undo-tree-id3660 . -1) (undo-tree-id3661 . -1) (undo-tree-id3662 . -1) (undo-tree-id3663 . -1) (undo-tree-id3664 . -1) (undo-tree-id3665 . -1) (undo-tree-id3666 . -1) (#("3" 0 1 (fontified t)) . -683) (undo-tree-id3667 . -1) (undo-tree-id3668 . -1) (undo-tree-id3669 . -1) (undo-tree-id3670 . -1) (undo-tree-id3671 . -1) (undo-tree-id3672 . -1) (undo-tree-id3673 . -1) (undo-tree-id3674 . -1) (undo-tree-id3675 . -1) (undo-tree-id3676 . -1) (undo-tree-id3677 . -1) (undo-tree-id3678 . -1) (undo-tree-id3679 . -1) (undo-tree-id3680 . -1) (undo-tree-id3681 . -1) (undo-tree-id3682 . -1) (undo-tree-id3683 . -1) (undo-tree-id3684 . -1) (undo-tree-id3685 . -1) (undo-tree-id3686 . -1) (#("1" 0 1 (fontified t)) . -684) (undo-tree-id3687 . -1) (undo-tree-id3688 . -1) (undo-tree-id3689 . -1) (undo-tree-id3690 . -1) (undo-tree-id3691 . -1) (undo-tree-id3692 . -1) (undo-tree-id3693 . -1) (undo-tree-id3694 . -1) (undo-tree-id3695 . -1) (undo-tree-id3696 . -1) (undo-tree-id3697 . -1) (undo-tree-id3698 . -1) (undo-tree-id3699 . -1) (undo-tree-id3700 . -1) (undo-tree-id3701 . -1) (undo-tree-id3702 . -1) (undo-tree-id3703 . -1) (undo-tree-id3704 . -1) 685) nil (26039 48611 745790 884000) 0 nil])
([nil nil ((682 . 685)) nil (26039 48611 745750 881000) 0 nil])
([nil nil ((683 . 689) (#("ve" 0 2 (fontified nil)) . 683) (683 . 685) (#("vector" 0 6 (fontified nil)) . -683) (683 . 689) (#("ve" 0 2 (fontified t)) . -683) (undo-tree-id3636 . -2) (undo-tree-id3637 . -1) (undo-tree-id3638 . -1) (undo-tree-id3639 . -1) (undo-tree-id3640 . -2) (undo-tree-id3641 . -2) (undo-tree-id3642 . -2) (undo-tree-id3643 . -2) 685) nil (26039 48611 745749 542000) 0 nil])
([nil nil ((689 . 691)) nil (26039 48611 745742 606000) 0 nil])
([nil nil ((690 . 691)) nil (26039 48611 745742 51000) 0 nil])
([nil nil ((#("m32" 0 3 (fontified t)) . -694) (undo-tree-id3620 . -3) (undo-tree-id3621 . -3) (undo-tree-id3622 . -1) (undo-tree-id3623 . -1) (undo-tree-id3624 . -1) (undo-tree-id3625 . -1) (undo-tree-id3626 . -1) (undo-tree-id3627 . -1) (undo-tree-id3628 . -1) (undo-tree-id3629 . -2) (undo-tree-id3630 . -3) (undo-tree-id3631 . -3) (undo-tree-id3632 . -3) (undo-tree-id3633 . -3) (undo-tree-id3634 . -3) (undo-tree-id3635 . -3) 697) nil (26039 48611 745741 14000) 0 nil])
([nil nil ((694 . 696)) nil (26039 48611 745729 969000) 0 nil])
([nil nil ((694 . 700) (#("ve" 0 2 (fontified nil)) . 694) (694 . 696) (#("vector" 0 6 (fontified nil)) . -694) (694 . 700) (#("ve" 0 2 (fontified t)) . -694) (undo-tree-id3612 . -2) (undo-tree-id3613 . -1) (undo-tree-id3614 . -1) (undo-tree-id3615 . -1) (undo-tree-id3616 . -2) (undo-tree-id3617 . -2) (undo-tree-id3618 . -2) (undo-tree-id3619 . -2) 696) nil (26039 48611 745728 694000) 0 nil])
([nil nil ((700 . 702)) nil (26039 48611 745721 606000) 0 nil])
([nil nil ((701 . 702)) nil (26039 48611 745720 876000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . -701) (undo-tree-id3602 . -1) (undo-tree-id3603 . -1) (undo-tree-id3604 . -1) (undo-tree-id3605 . -1) (undo-tree-id3606 . -1) (undo-tree-id3607 . -1) (undo-tree-id3608 . -1) (undo-tree-id3609 . -1) (undo-tree-id3610 . -1) (undo-tree-id3611 . -1) 702) nil (26039 48611 745719 615000) 0 nil])
([nil nil ((701 . 702)) nil (26039 48611 744859 875000) 0 nil])
([nil nil ((607 . 615)) nil (26039 48611 744859 294000) 0 nil])
([nil nil ((615 . 616)) nil (26039 48611 744858 781000) 0 nil])
([nil nil ((662 . 663)) nil (26039 48611 744858 315000) 0 nil])
([nil nil ((628 . 631)) nil (26039 48611 744857 733000) 0 nil])
([nil nil ((669 . 678)) nil (26039 48611 744857 130000) 0 nil])
([nil nil ((678 . 679)) nil (26039 48611 744856 593000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -678) (undo-tree-id3597 . -1) (undo-tree-id3598 . -1) (undo-tree-id3599 . -1) (undo-tree-id3600 . -1) (undo-tree-id3601 . -1) 679) nil (26039 48611 744855 785000) 0 nil])
([nil nil ((725 . 726)) nil (26039 48611 744852 192000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -725) (undo-tree-id3588 . -1) (undo-tree-id3589 . -1) (undo-tree-id3590 . -1) (undo-tree-id3591 . -1) (undo-tree-id3592 . -1) (undo-tree-id3593 . -1) (undo-tree-id3594 . -1) (undo-tree-id3595 . -1) (undo-tree-id3596 . -1) 726) nil (26039 48611 744851 201000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -677) (undo-tree-id3574 . -1) (undo-tree-id3575 . -1) (undo-tree-id3576 . -1) (undo-tree-id3577 . -1) (undo-tree-id3578 . -1) (undo-tree-id3579 . -1) (undo-tree-id3580 . -1) (undo-tree-id3581 . -1) (undo-tree-id3582 . -1) (undo-tree-id3583 . -1) (undo-tree-id3584 . -1) (undo-tree-id3585 . -1) (undo-tree-id3586 . -1) (undo-tree-id3587 . -1) 678) nil (26039 48611 744844 30000) 0 nil])
([nil nil ((677 . 678)) nil (26039 48611 744833 196000) 0 nil])
([nil nil ((725 . 726)) nil (26039 48611 744832 87000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 628) (undo-tree-id3565 . -1) (undo-tree-id3566 . -1) (undo-tree-id3567 . -1) (undo-tree-id3568 . -1) (undo-tree-id3569 . -1) (#(" " 0 1 (fontified t)) . 628) (undo-tree-id3570 . -1) (undo-tree-id3571 . -1) (#(" " 0 1 (fontified t)) . 628) (undo-tree-id3572 . -1) (undo-tree-id3573 . -1)) nil (26039 48611 744828 199000) 0 nil])
([nil nil ((#("3" 0 1 (fontified t)) . -524) (undo-tree-id4034 . -1) (undo-tree-id4035 . -1) (undo-tree-id4036 . -1) (undo-tree-id4037 . -1) (#("2" 0 1 (face font-lock-type-face fontified t)) . -525) (undo-tree-id4038 . -1) (undo-tree-id4039 . -1) 526 (t 26039 48611 792514 643000)) nil (26039 48618 837809 292000) 0 nil])
([nil nil ((524 . 526)) nil (26039 48618 837794 118000) 0 nil])
([nil nil ((726 . 728) (t 26039 48618 852514 235000)) nil (26039 48633 778643 488000) 0 nil])
([nil nil ((666 . 668)) nil (26039 48633 778641 843000) 0 nil])
([nil nil ((607 . 609)) nil (26039 48633 778637 350000) 0 nil])
([nil nil ((#("#[rustfmt::skip]" 0 1 (face font-lock-preprocessor-face fontified t) 1 2 (face (rainbow-delimiters-depth-3-face font-lock-preprocessor-face) fontified t) 2 15 (face font-lock-preprocessor-face fontified t) 15 16 (face (rainbow-delimiters-depth-3-face font-lock-preprocessor-face) fontified t)) . 555) (undo-tree-id4041 . -6) (undo-tree-id4042 . -7) (undo-tree-id4043 . -7) (undo-tree-id4044 . -7) (undo-tree-id4045 . -7) (undo-tree-id4046 . -7) (undo-tree-id4047 . -7) (undo-tree-id4048 . -16) (t 26039 48633 825846 707000)) nil (26039 48644 252220 173000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 555) (undo-tree-id4040 . -1)) nil (26039 48644 252212 329000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -555)) nil (26039 48644 252201 311000) 0 nil])
([nil nil ((725 . 729) (#("    " 0 4 (fontified nil)) . 724) (undo-tree-id4147 . -4) (undo-tree-id4148 . -4) (undo-tree-id4149 . -4) (undo-tree-id4150 . -4) (723 . 729) (t 26039 48644 255846 108000)) nil (26039 48761 98335 323000) 0 nil])
([nil nil ((729 . 733)) nil (26039 48761 98331 698000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -731) (undo-tree-id4136 . -1) (undo-tree-id4137 . -1) (undo-tree-id4138 . -1) (undo-tree-id4139 . -1) (undo-tree-id4140 . -1) (undo-tree-id4141 . -1) (undo-tree-id4142 . -1) (undo-tree-id4143 . -1) (#(" " 0 1 (fontified t)) . -732) (undo-tree-id4144 . -1) (undo-tree-id4145 . -1) (undo-tree-id4146 . -1) 733) nil (26039 48761 98330 553000) 0 nil])
([nil nil ((731 . 736)) nil (26039 48761 98322 410000) 0 nil])
([nil nil ((736 . 741)) nil (26039 48761 98321 851000) 0 nil])
([nil nil ((740 . 749)) nil (26039 48761 98321 257000) 0 nil])
([nil nil ((748 . 749)) nil (26039 48761 98320 306000) 0 nil])
([nil nil ((748 . 751) (#("f" 0 1 (fontified nil)) . 748) (748 . 749) (#("f64" 0 3 (fontified nil)) . -748) (748 . 751) (#("f" 0 1 (fontified t)) . -748) (undo-tree-id4129 . -1) (undo-tree-id4130 . -1) (undo-tree-id4131 . -1) (undo-tree-id4132 . -1) (undo-tree-id4133 . -1) (undo-tree-id4134 . -1) (undo-tree-id4135 . -1) 749) nil (26039 48761 98318 470000) 0 nil])
([nil nil ((753 . 756)) nil (26039 48761 98304 96000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -755) (undo-tree-id4126 . -1) (undo-tree-id4127 . -1) (undo-tree-id4128 . -1) 756) nil (26039 48761 98303 268000) 0 nil])
([nil nil ((755 . 757)) nil (26039 48761 98300 335000) 0 nil])
([nil nil ((757 . 760)) nil (26039 48761 98299 809000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-type-face fontified t)) . -759) (undo-tree-id4121 . -1) (undo-tree-id4122 . -1) (undo-tree-id4123 . -1) (undo-tree-id4124 . -1) (undo-tree-id4125 . -1) 760) nil (26039 48761 98298 972000) 0 nil])
([nil nil ((apply yas--snippet-revive 757 766 #s(yas--snippet nil nil #s(yas--exit 765 nil) 33 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 765 nil) 33 nil nil nil nil)) (757 . 766) (#("Vector3<$0>" 0 11 (fontified nil)) . 757) (757 . 768) (#("Ve" 0 2 (fontified nil)) . 757) (757 . 759) (#("Vector3<…>" 0 10 (fontified nil)) . -757) (757 . 767) (#("Ve" 0 2 (face font-lock-type-face fontified t)) . -757) (undo-tree-id4108 . -2) (undo-tree-id4109 . -2) (undo-tree-id4110 . -2) (undo-tree-id4111 . -2) (undo-tree-id4112 . -2) (undo-tree-id4113 . -2) (undo-tree-id4114 . -2) (undo-tree-id4115 . -2) (undo-tree-id4116 . -2) (undo-tree-id4117 . -2) (undo-tree-id4118 . -2) (undo-tree-id4119 . -2) (undo-tree-id4120 . -2) 759) nil (26039 48761 98293 762000) 0 nil])
([nil nil ((765 . 766)) nil (26039 48761 98282 373000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -765) (undo-tree-id4099 . -1) (undo-tree-id4100 . -1) (undo-tree-id4101 . -1) (undo-tree-id4102 . -1) (undo-tree-id4103 . -1) (undo-tree-id4104 . -1) (undo-tree-id4105 . -1) (undo-tree-id4106 . -1) (undo-tree-id4107 . -1) 766) nil (26039 48761 98281 413000) 0 nil])
([nil nil ((765 . 767)) nil (26039 48761 98274 854000) 0 nil])
([nil nil ((765 . 768) (#("f4" 0 2 (fontified nil)) . 765) (765 . 767) (#("f64" 0 3 (fontified nil)) . -765) (765 . 768) (#("f4" 0 2 (fontified t)) . -765) (undo-tree-id4086 . -2) (undo-tree-id4087 . -2) (undo-tree-id4088 . -1) (undo-tree-id4089 . -1) (undo-tree-id4090 . -1) (undo-tree-id4091 . -1) (undo-tree-id4092 . -1) (undo-tree-id4093 . -1) (undo-tree-id4094 . -1) (undo-tree-id4095 . -2) (undo-tree-id4096 . -2) (undo-tree-id4097 . -2) (undo-tree-id4098 . -2) 767) nil (26039 48761 98273 457000) 0 nil])
([nil nil ((769 . 772)) nil (26039 48761 98263 924000) 0 nil])
([nil nil ((773 . 777) (#("        " 0 8 (fontified nil)) . 772) (772 . 780) (#("    " 0 4 (fontified nil)) . 772) (undo-tree-id4082 . -4) (undo-tree-id4083 . -4) (undo-tree-id4084 . -4) (undo-tree-id4085 . -4) (771 . 777)) nil (26039 48761 98262 524000) 0 nil])
([nil nil ((740 . 741)) nil (26039 48761 98258 835000) 0 nil])
([nil nil ((740 . 746)) nil (26039 48761 98258 270000) 0 nil])
([nil nil ((779 . 787)) nil (26039 48761 98257 635000) 0 nil])
([nil nil ((787 . 788)) nil (26039 48761 98257 111000) 0 nil])
([nil nil ((787 . 794) (#("V" 0 1 (fontified nil)) . 787) (787 . 788) (#("Vector3" 0 7 (fontified nil)) . -787) (787 . 794) (#("V" 0 1 (face font-lock-type-face fontified t)) . -787) (undo-tree-id4077 . -1) (undo-tree-id4078 . -1) (undo-tree-id4079 . -1) (undo-tree-id4080 . -1) (undo-tree-id4081 . -1) 788) nil (26039 48761 98255 889000) 0 nil])
([nil nil ((794 . 799)) nil (26039 48761 98250 751000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 800 806 nil nil nil t #s(yas--field 2 808 809 nil nil nil nil #s(yas--field 3 811 812 nil nil nil nil #s(yas--exit 813 nil)))) #s(yas--field 2 808 809 nil nil nil nil #s(yas--field 3 811 812 nil nil nil nil #s(yas--exit 813 nil))) #s(yas--field 3 811 812 nil nil nil nil #s(yas--exit 813 nil))) #s(yas--exit 813 nil) 34 nil #s(yas--field 1 800 806 nil nil nil t #s(yas--field 2 808 809 nil nil nil nil #s(yas--field 3 811 812 nil nil nil nil #s(yas--exit 813 nil)))) nil nil)) (796 . 808) (#("new(${1:x}, ${2:y}, ${3:z})$0" 0 29 (fontified nil)) . 796) (796 . 825) (#("new" 0 3 (fontified nil)) . 796) (796 . 799) (#("new(…)" 0 6 (fontified nil)) . -796) (796 . 802) (#("new" 0 3 (fontified t)) . -796) (undo-tree-id4069 . -3) (undo-tree-id4070 . -1) (undo-tree-id4071 . -1) (undo-tree-id4072 . -1) (undo-tree-id4073 . -2) (undo-tree-id4074 . -3) (undo-tree-id4075 . -3) (undo-tree-id4076 . -3) 799) nil (26039 48761 98249 317000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -800) (undo-tree-id4065 . -1) (undo-tree-id4066 . -1) (undo-tree-id4067 . -1) (undo-tree-id4068 . -1) 801) nil (26039 48761 98241 184000) 0 nil])
([nil nil ((800 . 801)) nil (26039 48761 98237 568000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -800) (undo-tree-id4058 . -1) (undo-tree-id4059 . -1) (undo-tree-id4060 . -1) (undo-tree-id4061 . -1) (undo-tree-id4062 . -1) (undo-tree-id4063 . -1) (undo-tree-id4064 . -1) 801) nil (26039 48761 98236 555000) 0 nil])
([nil nil ((800 . 801)) nil (26039 48761 98230 805000) 0 nil])
([nil nil ((800 . 805) (#("a" 0 1 (fontified nil)) . 800) (undo-tree-id4049 . -1) (800 . 801) (#("a_hat" 0 5 (fontified nil)) . -800) (undo-tree-id4050 . -5) (800 . 805) (#("a" 0 1 (fontified t)) . -800) (undo-tree-id4051 . -1) (undo-tree-id4052 . -1) (undo-tree-id4053 . -1) (undo-tree-id4054 . -1) (undo-tree-id4055 . -1) (undo-tree-id4056 . -1) (undo-tree-id4057 . -1) 801) nil (26039 48761 98228 943000) 0 nil])
([nil nil ((805 . 806)) nil (26039 48761 98216 215000) 0 nil])
([nil nil ((apply yas--snippet-revive 796 813 #s(yas--snippet nil (#s(yas--field 1 800 806 nil nil nil t #s(yas--field 2 808 809 nil nil nil nil #s(yas--field 3 811 812 nil nil nil nil #s(yas--exit 813 nil)))) #s(yas--field 2 808 809 nil nil nil nil #s(yas--field 3 811 812 nil nil nil nil #s(yas--exit 813 nil))) #s(yas--field 3 811 812 nil nil nil nil #s(yas--exit 813 nil))) #s(yas--exit 813 nil) 34 nil #s(yas--field 1 800 806 nil nil nil t #s(yas--field 2 808 809 nil nil nil nil #s(yas--field 3 811 812 nil nil nil nil #s(yas--exit 813 nil)))) nil nil))) nil (26039 48761 98215 622000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1130 . 1131) (nil fontified nil 724 . 1131) (724 . 1131)) nil (26039 48761 98214 740000) 0 nil])
([nil nil ((1152 . 1154) (1116 . 1118) (1080 . 1082) (1044 . 1046) (1036 . 1038) (969 . 971) (961 . 963) (899 . 901) (891 . 893) (831 . 833) (755 . 757) (747 . 749) (726 . 728) 724) nil (26039 48761 98189 424000) 0 nil])
([nil nil ((723 . 728)) nil (26039 48761 98183 144000) 0 nil])
([nil nil ((1244 . 1245) (t 26039 48761 145839 353000)) nil (26039 48789 311943 97000) 0 nil])
([nil nil ((1244 . 1247) (#("m" 0 1 (fontified nil)) . 1244) (1244 . 1245) (#("m32" 0 3 (fontified nil)) . -1244) (1244 . 1247) (#("m" 0 1 (fontified t)) . -1244) (undo-tree-id4206 . -1) (undo-tree-id4207 . -1) (undo-tree-id4208 . -1) (undo-tree-id4209 . -1) (undo-tree-id4210 . -1) (undo-tree-id4211 . -1) 1245) nil (26039 48789 311941 600000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -1249) (undo-tree-id4190 . -1) (undo-tree-id4191 . -1) (undo-tree-id4192 . -1) (undo-tree-id4193 . -1) (undo-tree-id4194 . -1) (undo-tree-id4195 . -1) (undo-tree-id4196 . -1) (undo-tree-id4197 . -1) (undo-tree-id4198 . -1) (undo-tree-id4199 . -1) (undo-tree-id4200 . -1) (undo-tree-id4201 . -1) (undo-tree-id4202 . -1) (undo-tree-id4203 . -1) (undo-tree-id4204 . -1) (undo-tree-id4205 . -1) 1250) nil (26039 48789 311934 608000) 0 nil])
([nil nil ((1249 . 1250)) nil (26039 48789 311621 886000) 0 nil])
([nil nil ((1249 . 1254) (#("a" 0 1 (fontified nil)) . 1249) (1249 . 1250) (#("a_hat" 0 5 (fontified nil)) . -1249) (1249 . 1254) (#("a" 0 1 (fontified t)) . -1249) (undo-tree-id4185 . -1) (undo-tree-id4186 . -1) (undo-tree-id4187 . -1) (undo-tree-id4188 . -1) (undo-tree-id4189 . -1) 1250) nil (26039 48789 311620 70000) 0 nil])
([nil nil ((1254 . 1255)) nil (26039 48789 311611 658000) 0 nil])
([nil nil ((1255 . 1256)) nil (26039 48789 311610 816000) 0 nil])
([nil nil ((1255 . 1258) (#("m" 0 1 (fontified nil)) . 1255) (1255 . 1256) (#("m13" 0 3 (fontified nil)) . -1255) (1255 . 1258) (#("m" 0 1 (fontified t)) . -1255) (undo-tree-id4179 . -1) (undo-tree-id4180 . -1) (undo-tree-id4181 . -1) (undo-tree-id4182 . -1) (undo-tree-id4183 . -1) (undo-tree-id4184 . -1) 1256) nil (26039 48789 311609 86000) 0 nil])
([nil nil ((#("z" 0 1 (fontified t)) . -1260) (undo-tree-id4177 . -1) (undo-tree-id4178 . -1) 1261) nil (26039 48789 311599 781000) 0 nil])
([nil nil ((1260 . 1261)) nil (26039 48789 311596 348000) 0 nil])
([nil nil ((1260 . 1265) (#("a" 0 1 (fontified nil)) . 1260) (1260 . 1261) (#("a_hat" 0 5 (fontified nil)) . -1260) (1260 . 1265) (#("a" 0 1 (fontified t)) . -1260) (undo-tree-id4171 . -1) (undo-tree-id4172 . -1) (undo-tree-id4173 . -1) (undo-tree-id4174 . -1) (undo-tree-id4175 . -1) (undo-tree-id4176 . -1) 1261) nil (26039 48789 311594 440000) 0 nil])
([nil nil ((1265 . 1266)) nil (26039 48789 311586 5000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -1265) (undo-tree-id4151 . -1) (undo-tree-id4152 . -1) (undo-tree-id4153 . -1) (undo-tree-id4154 . -1) (undo-tree-id4155 . -1) (undo-tree-id4156 . -1) (undo-tree-id4157 . -1) (undo-tree-id4158 . -1) (undo-tree-id4159 . -1) (undo-tree-id4160 . -1) (undo-tree-id4161 . -1) (undo-tree-id4162 . -1) (undo-tree-id4163 . -1) (undo-tree-id4164 . -1) (undo-tree-id4165 . -1) (undo-tree-id4166 . -1) (undo-tree-id4167 . -1) (undo-tree-id4168 . -1) (undo-tree-id4169 . -1) (undo-tree-id4170 . -1) 1266) nil (26039 48789 311582 734000) 0 nil])
([nil nil ((1265 . 1269)) nil (26039 48789 311555 363000) 0 nil])
([nil nil ((#("O" 0 1 (face font-lock-doc-face fontified t)) . -996) (undo-tree-id4212 . -1) (undo-tree-id4213 . -1) (undo-tree-id4214 . -1) (undo-tree-id4215 . -1) (undo-tree-id4216 . -1) (undo-tree-id4217 . -1) (#("m" 0 1 (face font-lock-doc-face fontified t)) . -997) (undo-tree-id4218 . -1) (undo-tree-id4219 . -1) (undo-tree-id4220 . -1) (undo-tree-id4221 . -1) (undo-tree-id4222 . -1) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -998) (undo-tree-id4223 . -1) (undo-tree-id4224 . -1) (undo-tree-id4225 . -1) (undo-tree-id4226 . -1) (#("g" 0 1 (face font-lock-doc-face fontified t)) . -999) (undo-tree-id4227 . -1) (undo-tree-id4228 . -1) (undo-tree-id4229 . -1) (#("a" 0 1 (face font-lock-doc-face fontified t)) . -1000) (undo-tree-id4230 . -1) (undo-tree-id4231 . -1) 1001 (t 26039 48789 329171 68000)) nil (26039 48799 714411 528000) 0 nil])
([nil nil ((996 . 1001)) nil (26039 48799 714140 714000) 0 nil])
([nil nil ((#("Omega" 0 5 (face font-lock-doc-face fontified t)) . -807) (undo-tree-id4234 . -5) (undo-tree-id4235 . -5) (undo-tree-id4236 . -5) (undo-tree-id4237 . -5) (undo-tree-id4238 . -5) (undo-tree-id4239 . -5) (undo-tree-id4240 . -5) 812 (t 26039 48799 729170 470000)) nil (26039 48807 158947 770000) 0 nil])
([nil nil ((807 . 810)) nil (26039 48807 158940 516000) 0 nil])
([nil nil ((#("H" 0 1 (face font-lock-doc-face fontified t)) . -809) (undo-tree-id4232 . -1) (undo-tree-id4233 . -1) 810) nil (26039 48807 158938 307000) 0 nil])
([nil nil ((809 . 812)) nil (26039 48807 158925 143000) 0 nil])
([nil nil ((#("f64" 0 3 (face font-lock-type-face fontified t)) . -1426) (undo-tree-id4569 . -3) (undo-tree-id4570 . -3) (undo-tree-id4571 . -3) (undo-tree-id4572 . -3) (undo-tree-id4573 . -3) (undo-tree-id4574 . -3) (undo-tree-id4575 . -3) (undo-tree-id4576 . -3) (undo-tree-id4577 . -3) 1429 (t 26039 48807 175836 708000)) nil (26039 49157 893861 56000) 0 nil])
([nil nil ((#("theta: " 0 5 (face font-lock-variable-name-face fontified t) 5 7 (fontified t)) . -1419) (undo-tree-id4558 . -7) (undo-tree-id4559 . -7) (undo-tree-id4560 . -5) (undo-tree-id4561 . -7) (undo-tree-id4562 . -7) (undo-tree-id4563 . -7) (undo-tree-id4564 . -7) (undo-tree-id4565 . -7) (undo-tree-id4566 . -7) (undo-tree-id4567 . -7) (undo-tree-id4568 . -7) 1426) nil (26039 49157 893853 416000) 0 nil])
([nil nil ((#("self, " 0 4 (face font-lock-keyword-face fontified t) 4 6 (fontified t)) . -1413) (undo-tree-id4488 . -6) (undo-tree-id4489 . -6) (undo-tree-id4490 . -5) (undo-tree-id4491 . -5) (undo-tree-id4492 . -5) (undo-tree-id4493 . -5) (undo-tree-id4494 . -5) (undo-tree-id4495 . -5) (undo-tree-id4496 . -5) (undo-tree-id4497 . -5) (undo-tree-id4498 . -5) (undo-tree-id4499 . -5) (undo-tree-id4500 . -5) (undo-tree-id4501 . -6) (undo-tree-id4502 . -6) (undo-tree-id4503 . -6) (undo-tree-id4504 . -6) (undo-tree-id4505 . -6) (undo-tree-id4506 . -6) (undo-tree-id4507 . -6) (undo-tree-id4508 . -6) (undo-tree-id4509 . -6) (undo-tree-id4510 . -6) (undo-tree-id4511 . -6) (undo-tree-id4512 . -6) (undo-tree-id4513 . -6) (undo-tree-id4514 . -6) (undo-tree-id4515 . -6) (undo-tree-id4516 . -6) (undo-tree-id4517 . -6) (undo-tree-id4518 . -6) (undo-tree-id4519 . -6) (undo-tree-id4520 . -6) (undo-tree-id4521 . -6) (undo-tree-id4522 . -6) (undo-tree-id4523 . -6) (undo-tree-id4524 . -6) (undo-tree-id4525 . -6) (undo-tree-id4526 . -6) (undo-tree-id4527 . -6) (undo-tree-id4528 . -6) (undo-tree-id4529 . -6) (undo-tree-id4530 . -6) (undo-tree-id4531 . -6) (undo-tree-id4532 . -6) (undo-tree-id4533 . -6) (undo-tree-id4534 . -6) (undo-tree-id4535 . -6) (undo-tree-id4536 . -6) (undo-tree-id4537 . -6) (undo-tree-id4538 . -6) (undo-tree-id4539 . -6) (undo-tree-id4540 . -6) (undo-tree-id4541 . -6) (undo-tree-id4542 . -6) (undo-tree-id4543 . -6) (undo-tree-id4544 . -6) (undo-tree-id4545 . -6) (undo-tree-id4546 . -6) (undo-tree-id4547 . -6) (undo-tree-id4548 . -6) (undo-tree-id4549 . -6) (undo-tree-id4550 . -6) (undo-tree-id4551 . -6) (undo-tree-id4552 . -6) (undo-tree-id4553 . -6) (undo-tree-id4554 . -6) (undo-tree-id4555 . -6) (undo-tree-id4556 . -6) (undo-tree-id4557 . -6) 1419) nil (26039 49157 893843 309000) 0 nil])
([nil nil ((#("&" 0 1 (fontified t)) . -1412) (undo-tree-id4415 . -1) (undo-tree-id4416 . -1) (undo-tree-id4417 . -1) (undo-tree-id4418 . -1) (undo-tree-id4419 . -1) (undo-tree-id4420 . -1) (undo-tree-id4421 . -1) (undo-tree-id4422 . -1) (undo-tree-id4423 . -1) (undo-tree-id4424 . -1) (undo-tree-id4425 . -1) (undo-tree-id4426 . -1) (undo-tree-id4427 . -1) (undo-tree-id4428 . -1) (undo-tree-id4429 . -1) (undo-tree-id4430 . -1) (undo-tree-id4431 . -1) (undo-tree-id4432 . -1) (undo-tree-id4433 . -1) (undo-tree-id4434 . -1) (undo-tree-id4435 . -1) (undo-tree-id4436 . -1) (undo-tree-id4437 . -1) (undo-tree-id4438 . -1) (undo-tree-id4439 . -1) (undo-tree-id4440 . -1) (undo-tree-id4441 . -1) (undo-tree-id4442 . -1) (undo-tree-id4443 . -1) (undo-tree-id4444 . -1) (undo-tree-id4445 . -1) (undo-tree-id4446 . -1) (undo-tree-id4447 . -1) (undo-tree-id4448 . -1) (undo-tree-id4449 . -1) (undo-tree-id4450 . -1) (undo-tree-id4451 . -1) (undo-tree-id4452 . -1) (undo-tree-id4453 . -1) (undo-tree-id4454 . -1) (undo-tree-id4455 . -1) (undo-tree-id4456 . -1) (undo-tree-id4457 . -1) (undo-tree-id4458 . -1) (undo-tree-id4459 . -1) (undo-tree-id4460 . -1) (undo-tree-id4461 . -1) (undo-tree-id4462 . -1) (undo-tree-id4463 . -1) (undo-tree-id4464 . -1) (undo-tree-id4465 . -1) (undo-tree-id4466 . -1) (undo-tree-id4467 . -1) (undo-tree-id4468 . -1) (undo-tree-id4469 . -1) (undo-tree-id4470 . -1) (undo-tree-id4471 . -1) (undo-tree-id4472 . -1) (undo-tree-id4473 . -1) (undo-tree-id4474 . -1) (undo-tree-id4475 . -1) (undo-tree-id4476 . -1) (undo-tree-id4477 . -1) (undo-tree-id4478 . -1) (undo-tree-id4479 . -1) (undo-tree-id4480 . -1) (undo-tree-id4481 . -1) (undo-tree-id4482 . -1) (undo-tree-id4483 . -1) (undo-tree-id4484 . -1) (undo-tree-id4485 . -1) (undo-tree-id4486 . -1) (undo-tree-id4487 . -1) 1413) nil (26039 49157 893793 414000) 0 nil])
([nil nil ((1412 . 1415)) nil (26039 49157 893046 426000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1411) (undo-tree-id4263 . -1) (undo-tree-id4264 . -1) (undo-tree-id4265 . -1) (undo-tree-id4266 . -1) (undo-tree-id4267 . -1) (undo-tree-id4268 . -1) (undo-tree-id4269 . -1) (undo-tree-id4270 . -1) (undo-tree-id4271 . -1) (undo-tree-id4272 . -1) (undo-tree-id4273 . -1) (undo-tree-id4274 . -1) (undo-tree-id4275 . -1) (undo-tree-id4276 . -1) (undo-tree-id4277 . -1) (undo-tree-id4278 . -1) (undo-tree-id4279 . -1) (undo-tree-id4280 . -1) (undo-tree-id4281 . -1) (undo-tree-id4282 . -1) (undo-tree-id4283 . -1) (undo-tree-id4284 . -1) (undo-tree-id4285 . -1) (undo-tree-id4286 . -1) (undo-tree-id4287 . -1) (undo-tree-id4288 . -1) (undo-tree-id4289 . -1) (undo-tree-id4290 . -1) (undo-tree-id4291 . -1) (undo-tree-id4292 . -1) (undo-tree-id4293 . -1) (undo-tree-id4294 . -1) (undo-tree-id4295 . -1) (undo-tree-id4296 . -1) (undo-tree-id4297 . -1) (undo-tree-id4298 . -1) (undo-tree-id4299 . -1) (undo-tree-id4300 . -1) (undo-tree-id4301 . -1) (undo-tree-id4302 . -1) (undo-tree-id4303 . -1) (undo-tree-id4304 . -1) (undo-tree-id4305 . -1) (undo-tree-id4306 . -1) (undo-tree-id4307 . -1) (undo-tree-id4308 . -1) (undo-tree-id4309 . -1) (undo-tree-id4310 . -1) (undo-tree-id4311 . -1) (undo-tree-id4312 . -1) (undo-tree-id4313 . -1) (undo-tree-id4314 . -1) (undo-tree-id4315 . -1) (undo-tree-id4316 . -1) (undo-tree-id4317 . -1) (undo-tree-id4318 . -1) (undo-tree-id4319 . -1) (undo-tree-id4320 . -1) (undo-tree-id4321 . -1) (undo-tree-id4322 . -1) (undo-tree-id4323 . -1) (undo-tree-id4324 . -1) (undo-tree-id4325 . -1) (undo-tree-id4326 . -1) (undo-tree-id4327 . -1) (undo-tree-id4328 . -1) (undo-tree-id4329 . -1) (undo-tree-id4330 . -1) (undo-tree-id4331 . -1) (undo-tree-id4332 . -1) (undo-tree-id4333 . -1) (undo-tree-id4334 . -1) (undo-tree-id4335 . -1) (undo-tree-id4336 . -1) (undo-tree-id4337 . -1) (undo-tree-id4338 . -1) (undo-tree-id4339 . -1) (undo-tree-id4340 . -1) (undo-tree-id4341 . -1) (undo-tree-id4342 . -1) (undo-tree-id4343 . -1) (undo-tree-id4344 . -1) (undo-tree-id4345 . -1) (undo-tree-id4346 . -1) (undo-tree-id4347 . -1) (undo-tree-id4348 . -1) (undo-tree-id4349 . -1) (undo-tree-id4350 . -1) (undo-tree-id4351 . -1) (undo-tree-id4352 . -1) (undo-tree-id4353 . -1) (undo-tree-id4354 . -1) (undo-tree-id4355 . -1) (undo-tree-id4356 . -1) (undo-tree-id4357 . -1) (undo-tree-id4358 . -1) (undo-tree-id4359 . -1) (undo-tree-id4360 . -1) (undo-tree-id4361 . -1) (undo-tree-id4362 . -1) (undo-tree-id4363 . -1) (undo-tree-id4364 . -1) (undo-tree-id4365 . -1) (undo-tree-id4366 . -1) (undo-tree-id4367 . -1) (undo-tree-id4368 . -1) (undo-tree-id4369 . -1) (undo-tree-id4370 . -1) (undo-tree-id4371 . -1) (undo-tree-id4372 . -1) (undo-tree-id4373 . -1) (undo-tree-id4374 . -1) (#("V" 0 1 (face font-lock-type-face fontified t)) . -1412) (undo-tree-id4375 . -1) (undo-tree-id4376 . -1) (undo-tree-id4377 . -1) (undo-tree-id4378 . -1) (undo-tree-id4379 . -1) (undo-tree-id4380 . -1) (undo-tree-id4381 . -1) (undo-tree-id4382 . -1) (undo-tree-id4383 . -1) (undo-tree-id4384 . -1) (undo-tree-id4385 . -1) (undo-tree-id4386 . -1) (undo-tree-id4387 . -1) (undo-tree-id4388 . -1) (undo-tree-id4389 . -1) (undo-tree-id4390 . -1) (undo-tree-id4391 . -1) (undo-tree-id4392 . -1) (undo-tree-id4393 . -1) (undo-tree-id4394 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -1413) (undo-tree-id4395 . -1) (undo-tree-id4396 . -1) (undo-tree-id4397 . -1) (undo-tree-id4398 . -1) (undo-tree-id4399 . -1) (undo-tree-id4400 . -1) (undo-tree-id4401 . -1) (undo-tree-id4402 . -1) (undo-tree-id4403 . -1) (undo-tree-id4404 . -1) (undo-tree-id4405 . -1) (undo-tree-id4406 . -1) (undo-tree-id4407 . -1) (undo-tree-id4408 . -1) (undo-tree-id4409 . -1) (undo-tree-id4410 . -1) (#("c" 0 1 (face font-lock-type-face fontified t)) . -1414) (undo-tree-id4411 . -1) (undo-tree-id4412 . -1) (undo-tree-id4413 . -1) (undo-tree-id4414 . -1) 1415) nil (26039 49157 893040 511000) 0 nil])
([nil nil ((1411 . 1413)) nil (26039 49157 892938 909000) 0 nil])
([nil nil ((#("v" 0 1 (face font-lock-function-name-face fontified t)) . -1411) (undo-tree-id4257 . -1) (undo-tree-id4258 . -1) (undo-tree-id4259 . -1) (undo-tree-id4260 . -1) (#("e" 0 1 (face font-lock-function-name-face fontified t)) . -1412) (undo-tree-id4261 . -1) (undo-tree-id4262 . -1) 1413) nil (26039 49157 892937 796000) 0 nil])
([nil nil ((1411 . 1421)) nil (26039 49157 892933 59000) 0 nil])
([nil nil ((apply yas--snippet-revive 1420 1429 #s(yas--snippet nil nil #s(yas--exit 1428 nil) 35 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1428 nil) 35 nil nil nil nil)) (1420 . 1429) (#("Vector3<$0>" 0 11 (fontified nil)) . 1420) (1420 . 1431) (#("V" 0 1 (fontified nil)) . 1420) (1420 . 1421) (#("Vector3<…>" 0 10 (fontified nil)) . -1420) (1420 . 1430) (#("V" 0 1 (face font-lock-type-face fontified t)) . -1420) (undo-tree-id4251 . -1) (undo-tree-id4252 . -1) (undo-tree-id4253 . -1) (undo-tree-id4254 . -1) (undo-tree-id4255 . -1) (undo-tree-id4256 . -1) 1421) nil (26039 49157 892931 350000) 0 nil])
([nil nil ((1428 . 1430)) nil (26039 49157 892924 159000) 0 nil])
([nil nil ((1428 . 1431) (#("f6" 0 2 (fontified nil)) . 1428) (1428 . 1430) (#("f64" 0 3 (fontified nil)) . -1428) (1428 . 1431) (#("f6" 0 2 (fontified t)) . -1428) (undo-tree-id4241 . -2) (undo-tree-id4242 . -2) (undo-tree-id4243 . -1) (undo-tree-id4244 . -1) (undo-tree-id4245 . -1) (undo-tree-id4246 . -1) (undo-tree-id4247 . -2) (undo-tree-id4248 . -2) (undo-tree-id4249 . -2) (undo-tree-id4250 . -2) 1430) nil (26039 49157 892919 720000) 0 nil])
([nil nil ((#("let n = self.rotation.vector().normalize();" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 5 (face font-lock-variable-name-face fontified t) 5 8 (fontified t) 8 12 (face font-lock-keyword-face fontified t) 12 13 (fontified t) 13 22 (fontified t) 22 28 (fontified t) 28 29 (face (rainbow-delimiters-depth-3-face) fontified t) 29 30 (face (rainbow-delimiters-depth-3-face) fontified t) 30 31 (fontified t) 31 40 (fontified t) 40 41 (face (rainbow-delimiters-depth-3-face) fontified t) 41 42 (face (rainbow-delimiters-depth-3-face) fontified t) 42 43 (fontified t)) . 1460) (undo-tree-id5008 . -26) (undo-tree-id5009 . -26) (undo-tree-id5010 . -26) (undo-tree-id5011 . -26) (undo-tree-id5012 . -26) (undo-tree-id5013 . -26) (undo-tree-id5014 . -26) (undo-tree-id5015 . -26) (undo-tree-id5016 . -26) (undo-tree-id5017 . -26) (undo-tree-id5018 . -43) (t 26039 49157 909149 717000)) nil (26039 49381 334832 367000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1458) (undo-tree-id4969 . -1) (undo-tree-id4970 . -1) (undo-tree-id4971 . -1) (undo-tree-id4972 . -1) (undo-tree-id4973 . -1) (undo-tree-id4974 . -1) (undo-tree-id4975 . -1) (undo-tree-id4976 . -1) (undo-tree-id4977 . -1) (undo-tree-id4978 . -1) (undo-tree-id4979 . -1) (undo-tree-id4980 . -1) (undo-tree-id4981 . -1) (undo-tree-id4982 . -1) (undo-tree-id4983 . -1) (undo-tree-id4984 . -1) (undo-tree-id4985 . -1) (undo-tree-id4986 . -1) (undo-tree-id4987 . -1) (undo-tree-id4988 . -1) (#(" " 0 1 (fontified t)) . -1459) (undo-tree-id4989 . -1) (undo-tree-id4990 . -1) (undo-tree-id4991 . -1) (undo-tree-id4992 . -1) (undo-tree-id4993 . -1) (undo-tree-id4994 . -1) (undo-tree-id4995 . -1) (undo-tree-id4996 . -1) (undo-tree-id4997 . -1) (undo-tree-id4998 . -1) (undo-tree-id4999 . -1) (undo-tree-id5000 . -1) (undo-tree-id5001 . -1) (undo-tree-id5002 . -1) (undo-tree-id5003 . -1) (undo-tree-id5004 . -1) (undo-tree-id5005 . -1) (undo-tree-id5006 . -1) (undo-tree-id5007 . -1) 1460) nil (26039 49381 334823 435000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1458) (undo-tree-id4968 . -1)) nil (26039 49381 334796 632000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -1460) (undo-tree-id4949 . -6) (undo-tree-id4950 . -6) (undo-tree-id4951 . -6) (undo-tree-id4952 . -6) (undo-tree-id4953 . -6) (undo-tree-id4954 . -6) (undo-tree-id4955 . -6) (undo-tree-id4956 . -6) (undo-tree-id4957 . -6) (undo-tree-id4958 . -6) (undo-tree-id4959 . -6) (undo-tree-id4960 . -6) (undo-tree-id4961 . -6) (undo-tree-id4962 . -6) (undo-tree-id4963 . -6) (undo-tree-id4964 . -6) (undo-tree-id4965 . -6) (undo-tree-id4966 . -6) (undo-tree-id4967 . -6) 1466) nil (26039 49381 334186 159000) 0 nil])
([nil nil ((1460 . 1465)) nil (26039 49381 334173 781000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -1460) (undo-tree-id4883 . -1) (undo-tree-id4884 . -1) (undo-tree-id4885 . -1) (undo-tree-id4886 . -1) (undo-tree-id4887 . -1) (undo-tree-id4888 . -1) (undo-tree-id4889 . -1) (undo-tree-id4890 . -1) (undo-tree-id4891 . -1) (undo-tree-id4892 . -1) (undo-tree-id4893 . -1) (undo-tree-id4894 . -1) (undo-tree-id4895 . -1) (undo-tree-id4896 . -1) (undo-tree-id4897 . -1) (undo-tree-id4898 . -1) (undo-tree-id4899 . -1) (undo-tree-id4900 . -1) (undo-tree-id4901 . -1) (#("e" 0 1 (fontified t)) . -1461) (undo-tree-id4902 . -1) (undo-tree-id4903 . -1) (undo-tree-id4904 . -1) (undo-tree-id4905 . -1) (undo-tree-id4906 . -1) (undo-tree-id4907 . -1) (undo-tree-id4908 . -1) (undo-tree-id4909 . -1) (undo-tree-id4910 . -1) (undo-tree-id4911 . -1) (undo-tree-id4912 . -1) (undo-tree-id4913 . -1) (undo-tree-id4914 . -1) (undo-tree-id4915 . -1) (undo-tree-id4916 . -1) (undo-tree-id4917 . -1) (undo-tree-id4918 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -1462) (undo-tree-id4919 . -1) (undo-tree-id4920 . -1) (undo-tree-id4921 . -1) (undo-tree-id4922 . -1) (undo-tree-id4923 . -1) (undo-tree-id4924 . -1) (undo-tree-id4925 . -1) (undo-tree-id4926 . -1) (undo-tree-id4927 . -1) (undo-tree-id4928 . -1) (undo-tree-id4929 . -1) (undo-tree-id4930 . -1) (undo-tree-id4931 . -1) (undo-tree-id4932 . -1) (#(" " 0 1 (fontified t)) . -1463) (undo-tree-id4933 . -1) (undo-tree-id4934 . -1) (undo-tree-id4935 . -1) (undo-tree-id4936 . -1) (undo-tree-id4937 . -1) (undo-tree-id4938 . -1) (undo-tree-id4939 . -1) (undo-tree-id4940 . -1) (undo-tree-id4941 . -1) (undo-tree-id4942 . -1) (undo-tree-id4943 . -1) (#("q" 0 1 (face font-lock-variable-name-face fontified t)) . -1464) (undo-tree-id4944 . -1) (undo-tree-id4945 . -1) (undo-tree-id4946 . -1) (undo-tree-id4947 . -1) (undo-tree-id4948 . -1) 1465) nil (26039 49381 334170 684000) 0 nil])
([nil nil ((1460 . 1461)) nil (26039 49381 334128 563000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -1460) (undo-tree-id4880 . -1) (undo-tree-id4881 . -1) (undo-tree-id4882 . -1) 1461) nil (26039 49381 334127 723000) 0 nil])
([nil nil ((1460 . 1461)) nil (26039 49381 334124 952000) 0 nil])
([nil nil ((1460 . 1467) (#("M" 0 1 (fontified nil)) . 1460) (1460 . 1461) (#("Matrix3" 0 7 (fontified nil)) . -1460) (1460 . 1467) (#("M" 0 1 (face font-lock-type-face fontified t)) . -1460) (undo-tree-id4875 . -1) (undo-tree-id4876 . -1) (undo-tree-id4877 . -1) (undo-tree-id4878 . -1) (undo-tree-id4879 . -1) 1461) nil (26039 49381 334123 753000) 0 nil])
([nil nil ((1467 . 1470)) nil (26039 49381 334119 166000) 0 nil])
([nil nil ((#("L" 0 1 (face font-lock-type-face fontified t)) . -1468) (undo-tree-id4869 . -1) (undo-tree-id4870 . -1) (undo-tree-id4871 . -1) (undo-tree-id4872 . -1) (#(":" 0 1 (fontified t)) . -1469) (undo-tree-id4873 . -1) (undo-tree-id4874 . -1) 1470) nil (26039 49381 334117 899000) 0 nil])
([nil nil ((1468 . 1469)) nil (26039 49381 333516 942000) 0 nil])
([nil nil ((1469 . 1470)) nil (26039 49381 333516 387000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -1469) (undo-tree-id4863 . -1) (undo-tree-id4864 . -1) (undo-tree-id4865 . -1) (undo-tree-id4866 . -1) (undo-tree-id4867 . -1) (undo-tree-id4868 . -1) 1470) nil (26039 49381 333515 502000) 0 nil])
([nil nil ((1469 . 1473)) nil (26039 49381 333510 825000) 0 nil])
([nil nil ((#("from" 0 4 (fontified t)) . -1469) (undo-tree-id4851 . -4) (undo-tree-id4852 . -1) (undo-tree-id4853 . -1) (undo-tree-id4854 . -2) (undo-tree-id4855 . -2) (undo-tree-id4856 . -3) (undo-tree-id4857 . -3) (undo-tree-id4858 . -4) (undo-tree-id4859 . -4) (undo-tree-id4860 . -4) (undo-tree-id4861 . -4) (undo-tree-id4862 . -4) 1473) nil (26039 49381 333509 888000) 0 nil])
([nil nil ((#("Matrix3::" 0 7 (face font-lock-type-face fontified t) 7 9 (fontified t)) . -1460) (undo-tree-id4814 . -9) (undo-tree-id4815 . -7) (undo-tree-id4816 . -7) (undo-tree-id4817 . -8) (undo-tree-id4818 . -8) (undo-tree-id4819 . -8) (undo-tree-id4820 . -8) (undo-tree-id4821 . -9) (undo-tree-id4822 . -9) (undo-tree-id4823 . -9) (undo-tree-id4824 . -9) (undo-tree-id4825 . -9) (undo-tree-id4826 . -9) (undo-tree-id4827 . -9) (undo-tree-id4828 . -9) (undo-tree-id4829 . -9) (undo-tree-id4830 . -9) (undo-tree-id4831 . -9) (undo-tree-id4832 . -9) (undo-tree-id4833 . -9) (undo-tree-id4834 . -9) (undo-tree-id4835 . -9) (undo-tree-id4836 . -9) (undo-tree-id4837 . -9) (undo-tree-id4838 . -9) (undo-tree-id4839 . -9) (undo-tree-id4840 . -9) (undo-tree-id4841 . -9) (undo-tree-id4842 . -9) (undo-tree-id4843 . -9) (undo-tree-id4844 . -9) (undo-tree-id4845 . -9) (undo-tree-id4846 . -9) (undo-tree-id4847 . -9) (undo-tree-id4848 . -9) (undo-tree-id4849 . -9) (undo-tree-id4850 . -9) 1469) nil (26039 49381 333500 869000) 0 nil])
([nil nil ((1460 . 1468)) nil (26039 49381 333476 592000) 0 nil])
([nil nil ((77 . 88) (1460 . 1460) (1460 . 1469) (#("Rotation" 0 8 (fontified nil)) . 1460) (1460 . 1468) (#("Rotation3 (use nalgebra::Rotation3)" 0 35 (fontified nil)) . -1460) (1460 . 1495) (#("Rotation" 0 8 (face font-lock-type-face fontified t)) . -1460) (undo-tree-id4791 . -8) (undo-tree-id4792 . -1) (undo-tree-id4793 . -1) (undo-tree-id4794 . -1) (undo-tree-id4795 . -1) (undo-tree-id4796 . -2) (undo-tree-id4797 . -2) (undo-tree-id4798 . -2) (undo-tree-id4799 . -3) (undo-tree-id4800 . -3) (undo-tree-id4801 . -4) (undo-tree-id4802 . -4) (undo-tree-id4803 . -5) (undo-tree-id4804 . -5) (undo-tree-id4805 . -6) (undo-tree-id4806 . -6) (undo-tree-id4807 . -7) (undo-tree-id4808 . -7) (undo-tree-id4809 . -8) (undo-tree-id4810 . -8) (undo-tree-id4811 . -8) (undo-tree-id4812 . -8) (undo-tree-id4813 . -8) 1468) nil (26039 49381 333474 628000) 0 nil])
([nil nil ((1480 . 1486)) nil (26039 49381 333379 369000) 0 nil])
([nil nil ((1486 . 1488)) nil (26039 49381 333378 764000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1500 1504 nil nil nil nil #s(yas--field 2 1506 1511 nil nil nil nil #s(yas--field 3 1513 1516 nil nil nil nil #s(yas--exit 1517 nil)))) #s(yas--field 2 1506 1511 nil nil nil nil #s(yas--field 3 1513 1516 nil nil nil nil #s(yas--exit 1517 nil))) #s(yas--field 3 1513 1516 nil nil nil nil #s(yas--exit 1517 nil))) #s(yas--exit 1517 nil) 36 nil #s(yas--field 1 1500 1504 nil nil nil nil #s(yas--field 2 1506 1511 nil nil nil nil #s(yas--field 3 1513 1516 nil nil nil nil #s(yas--exit 1517 nil)))) nil nil)) (1482 . 1517) (#("from_euler_angles(${1:roll}, ${2:pitch}, ${3:yaw})$0" 0 52 (fontified nil)) . 1482) (1482 . 1534) (#("from_e" 0 6 (fontified nil)) . 1482) (1482 . 1488) (#("from_euler_angles(…)" 0 20 (fontified nil)) . -1482) (1482 . 1502) (#("from_e" 0 6 (fontified t)) . -1482) (undo-tree-id4771 . -6) (undo-tree-id4772 . -1) (undo-tree-id4773 . -1) (undo-tree-id4774 . -1) (undo-tree-id4775 . -2) (undo-tree-id4776 . -2) (undo-tree-id4777 . -3) (undo-tree-id4778 . -3) (undo-tree-id4779 . -4) (undo-tree-id4780 . -4) (undo-tree-id4781 . -4) (undo-tree-id4782 . -4) (undo-tree-id4783 . -4) (undo-tree-id4784 . -5) (undo-tree-id4785 . -5) (undo-tree-id4786 . -6) (undo-tree-id4787 . -6) (undo-tree-id4788 . -6) (undo-tree-id4789 . -6) (undo-tree-id4790 . -6) 1488) nil (26039 49381 333376 928000) 0 nil])
([nil nil ((apply yas--snippet-revive 1482 1517 #s(yas--snippet nil (#s(yas--field 1 1500 1504 nil nil nil nil #s(yas--field 2 1506 1511 nil nil nil nil #s(yas--field 3 1513 1516 nil nil nil nil #s(yas--exit 1517 nil)))) #s(yas--field 2 1506 1511 nil nil nil nil #s(yas--field 3 1513 1516 nil nil nil nil #s(yas--exit 1517 nil))) #s(yas--field 3 1513 1516 nil nil nil nil #s(yas--exit 1517 nil))) #s(yas--exit 1517 nil) 36 nil #s(yas--field 1 1500 1504 nil nil nil nil #s(yas--field 2 1506 1511 nil nil nil nil #s(yas--field 3 1513 1516 nil nil nil nil #s(yas--exit 1517 nil)))) nil nil))) nil (26039 49381 333362 348000) 0 nil])
([nil nil ((#("yaw)" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-3-face) fontified t)) . -1513) (undo-tree-id4766 . -4) (undo-tree-id4767 . -4) (undo-tree-id4768 . -4) (undo-tree-id4769 . -3) (undo-tree-id4770 . -4) 1517) nil (26039 49381 333361 261000) 0 nil])
([nil nil ((#("pitch, " 0 7 (fontified t)) . -1506) (undo-tree-id4759 . -7) (undo-tree-id4760 . -7) (undo-tree-id4761 . -7) (undo-tree-id4762 . -5) (undo-tree-id4763 . -7) (undo-tree-id4764 . -7) (undo-tree-id4765 . -7) 1513) nil (26039 49381 333357 260000) 0 nil])
([nil nil ((#("roll, " 0 6 (fontified t)) . -1500) (undo-tree-id4750 . -6) (undo-tree-id4751 . -6) (undo-tree-id4752 . -6) (undo-tree-id4753 . -4) (undo-tree-id4754 . -6) (undo-tree-id4755 . -6) (undo-tree-id4756 . -6) (undo-tree-id4757 . -6) (undo-tree-id4758 . -6) 1506) nil (26039 49381 333351 890000) 0 nil])
([nil nil ((#("angles(" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-3-face) fontified t)) . -1493) (undo-tree-id4719 . -7) (undo-tree-id4720 . -7) (undo-tree-id4721 . -7) (undo-tree-id4722 . -7) (undo-tree-id4723 . -7) (undo-tree-id4724 . -7) (undo-tree-id4725 . -7) (undo-tree-id4726 . -7) (undo-tree-id4727 . -7) (undo-tree-id4728 . -7) (undo-tree-id4729 . -7) (undo-tree-id4730 . -7) (undo-tree-id4731 . -7) (undo-tree-id4732 . -7) (undo-tree-id4733 . -7) (undo-tree-id4734 . -7) (undo-tree-id4735 . -7) (undo-tree-id4736 . -7) (undo-tree-id4737 . -7) (undo-tree-id4738 . -7) (undo-tree-id4739 . -7) (undo-tree-id4740 . -7) (undo-tree-id4741 . -7) (undo-tree-id4742 . -7) (undo-tree-id4743 . -7) (undo-tree-id4744 . -7) (undo-tree-id4745 . -7) (undo-tree-id4746 . -7) (undo-tree-id4747 . -7) (undo-tree-id4748 . -7) (undo-tree-id4749 . -7) 1500) nil (26039 49381 333344 623000) 0 nil])
([nil nil ((#("euler_" 0 6 (fontified t)) . -1487) (undo-tree-id4687 . -6) (undo-tree-id4688 . -6) (undo-tree-id4689 . -6) (undo-tree-id4690 . -6) (undo-tree-id4691 . -6) (undo-tree-id4692 . -6) (undo-tree-id4693 . -6) (undo-tree-id4694 . -6) (undo-tree-id4695 . -6) (undo-tree-id4696 . -6) (undo-tree-id4697 . -6) (undo-tree-id4698 . -6) (undo-tree-id4699 . -6) (undo-tree-id4700 . -6) (undo-tree-id4701 . -6) (undo-tree-id4702 . -6) (undo-tree-id4703 . -6) (undo-tree-id4704 . -6) (undo-tree-id4705 . -6) (undo-tree-id4706 . -6) (undo-tree-id4707 . -6) (undo-tree-id4708 . -6) (undo-tree-id4709 . -6) (undo-tree-id4710 . -6) (undo-tree-id4711 . -6) (undo-tree-id4712 . -6) (undo-tree-id4713 . -6) (undo-tree-id4714 . -6) (undo-tree-id4715 . -6) (undo-tree-id4716 . -6) (undo-tree-id4717 . -6) (undo-tree-id4718 . -6) 1493) nil (26039 49381 333324 320000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -1486) (undo-tree-id4652 . -1) (undo-tree-id4653 . -1) (undo-tree-id4654 . -1) (undo-tree-id4655 . -1) (undo-tree-id4656 . -1) (undo-tree-id4657 . -1) (undo-tree-id4658 . -1) (undo-tree-id4659 . -1) (undo-tree-id4660 . -1) (undo-tree-id4661 . -1) (undo-tree-id4662 . -1) (undo-tree-id4663 . -1) (undo-tree-id4664 . -1) (undo-tree-id4665 . -1) (undo-tree-id4666 . -1) (undo-tree-id4667 . -1) (undo-tree-id4668 . -1) (undo-tree-id4669 . -1) (undo-tree-id4670 . -1) (undo-tree-id4671 . -1) (undo-tree-id4672 . -1) (undo-tree-id4673 . -1) (undo-tree-id4674 . -1) (undo-tree-id4675 . -1) (undo-tree-id4676 . -1) (undo-tree-id4677 . -1) (undo-tree-id4678 . -1) (undo-tree-id4679 . -1) (undo-tree-id4680 . -1) (undo-tree-id4681 . -1) (undo-tree-id4682 . -1) (undo-tree-id4683 . -1) (undo-tree-id4684 . -1) (undo-tree-id4685 . -1) (undo-tree-id4686 . -1) 1487) nil (26039 49381 333302 423000) 0 nil])
([nil nil ((1486 . 1488)) nil (26039 49381 333279 110000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1499 1505 nil nil nil t #s(yas--exit 1506 nil))) #s(yas--exit 1506 nil) 37 nil #s(yas--field 1 1499 1505 nil nil nil t #s(yas--exit 1506 nil)) nil nil)) (1482 . 1509) (#("from_scaled_axis(${1:axisangle})$0" 0 34 (fontified nil)) . 1482) (1482 . 1516) (#("from_s" 0 6 (fontified nil)) . 1482) (1482 . 1488) (#("from_scaled_axis(…)" 0 19 (fontified nil)) . -1482) (1482 . 1501) (#("from_s" 0 6 (fontified t)) . -1482) (undo-tree-id4590 . -6) (undo-tree-id4591 . -4) (undo-tree-id4592 . -4) (undo-tree-id4593 . -4) (undo-tree-id4594 . -4) (undo-tree-id4595 . -4) (undo-tree-id4596 . -4) (undo-tree-id4597 . -4) (undo-tree-id4598 . -4) (undo-tree-id4599 . -4) (undo-tree-id4600 . -4) (undo-tree-id4601 . -4) (undo-tree-id4602 . -4) (undo-tree-id4603 . -4) (undo-tree-id4604 . -4) (undo-tree-id4605 . -4) (undo-tree-id4606 . -4) (undo-tree-id4607 . -4) (undo-tree-id4608 . -4) (undo-tree-id4609 . -4) (undo-tree-id4610 . -4) (undo-tree-id4611 . -4) (undo-tree-id4612 . -4) (undo-tree-id4613 . -4) (undo-tree-id4614 . -4) (undo-tree-id4615 . -4) (undo-tree-id4616 . -4) (undo-tree-id4617 . -4) (undo-tree-id4618 . -4) (undo-tree-id4619 . -4) (undo-tree-id4620 . -4) (undo-tree-id4621 . -4) (undo-tree-id4622 . -4) (undo-tree-id4623 . -4) (undo-tree-id4624 . -4) (undo-tree-id4625 . -4) (undo-tree-id4626 . -4) (undo-tree-id4627 . -4) (undo-tree-id4628 . -4) (undo-tree-id4629 . -4) (undo-tree-id4630 . -4) (undo-tree-id4631 . -4) (undo-tree-id4632 . -4) (undo-tree-id4633 . -4) (undo-tree-id4634 . -4) (undo-tree-id4635 . -4) (undo-tree-id4636 . -4) (undo-tree-id4637 . -4) (undo-tree-id4638 . -4) (undo-tree-id4639 . -4) (undo-tree-id4640 . -4) (undo-tree-id4641 . -4) (undo-tree-id4642 . -4) (undo-tree-id4643 . -4) (undo-tree-id4644 . -4) (undo-tree-id4645 . -5) (undo-tree-id4646 . -5) (undo-tree-id4647 . -6) (undo-tree-id4648 . -6) (undo-tree-id4649 . -6) (undo-tree-id4650 . -6) (undo-tree-id4651 . -6) 1488) nil (26039 49381 333275 74000) 0 nil])
([nil nil ((#("axisangle" 0 9 (fontified nil)) . 1500) (undo-tree-id4589 . -9) (1499 . 1500)) nil (26039 49381 333208 415000) 0 nil])
([nil nil ((1499 . 1505) (#("v" 0 1 (fontified nil)) . 1499) (undo-tree-id4578 . -1) (1499 . 1500) (#("vector" 0 6 (fontified nil)) . -1499) (undo-tree-id4579 . -6) (1499 . 1505) (#("v" 0 1 (fontified t)) . -1499) (undo-tree-id4580 . -1) (undo-tree-id4581 . -1) (undo-tree-id4582 . -1) (undo-tree-id4583 . -1) (undo-tree-id4584 . -1) (undo-tree-id4585 . -1) (undo-tree-id4586 . -1) (undo-tree-id4587 . -1) (undo-tree-id4588 . -1) 1500) nil (26039 49381 333204 847000) 0 nil])
([nil nil ((apply yas--snippet-revive 1482 1506 #s(yas--snippet nil (#s(yas--field 1 1499 1505 nil nil nil t #s(yas--exit 1506 nil))) #s(yas--exit 1506 nil) 37 nil #s(yas--field 1 1499 1505 nil nil nil t #s(yas--exit 1506 nil)) nil nil))) nil (26039 49381 333188 214000) 0 nil])
([nil nil ((1506 . 1509) (t 26039 49381 349136 791000)) nil (26039 49386 710001 775000) 0 nil])
([nil nil ((apply yas--snippet-revive 1507 1513 #s(yas--snippet nil nil #s(yas--exit 1513 nil) 38 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1513 nil) 38 nil nil nil nil)) (1507 . 1513) (#("into()$0" 0 8 (fontified nil)) . 1507) (1507 . 1515) (#("in" 0 2 (fontified nil)) . 1507) (1507 . 1509) (#("into() (as Into)" 0 16 (fontified nil)) . -1507) (1507 . 1523) (#("in" 0 2 (face font-lock-keyword-face fontified t)) . -1507) (undo-tree-id5019 . -2) (undo-tree-id5020 . -1) (undo-tree-id5021 . -1) (undo-tree-id5022 . -1) (undo-tree-id5023 . -2) (undo-tree-id5024 . -2) (undo-tree-id5025 . -2) (undo-tree-id5026 . -2) 1509) nil (26039 49386 709996 948000) 0 nil])
([nil nil ((504 . 508) (#("    " 0 4 (fontified nil)) . 503) (undo-tree-id5067 . -4) (undo-tree-id5068 . -4) (undo-tree-id5069 . -4) (undo-tree-id5070 . -4) (503 . 508) (#("    " 0 4 (fontified nil)) . 502) (502 . 506) (502 . 503) (t 26039 49386 725803 143000)) nil (26039 50066 620225 76000) 0 nil])
([nil nil ((503 . 507)) nil (26039 50066 620217 536000) 0 nil])
([nil nil ((507 . 509)) nil (26039 50066 620216 5000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -507) (undo-tree-id5053 . -1) (undo-tree-id5054 . -1) (undo-tree-id5055 . -1) (undo-tree-id5056 . -1) (undo-tree-id5057 . -1) (undo-tree-id5058 . -1) (undo-tree-id5059 . -1) (undo-tree-id5060 . -1) (undo-tree-id5061 . -1) (#("p" 0 1 (fontified t)) . -508) (undo-tree-id5062 . -1) (undo-tree-id5063 . -1) (undo-tree-id5064 . -1) (undo-tree-id5065 . -1) (undo-tree-id5066 . -1) 509) nil (26039 50066 620213 867000) 0 nil])
([nil nil ((507 . 519)) nil (26039 50066 620195 949000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -518) (undo-tree-id5050 . -1) (undo-tree-id5051 . -1) (undo-tree-id5052 . -1) 519) nil (26039 50066 620194 813000) 0 nil])
([nil nil ((518 . 521)) nil (26039 50066 620190 10000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-function-name-face fontified t)) . -519) (undo-tree-id5040 . -1) (undo-tree-id5041 . -1) (undo-tree-id5042 . -1) (undo-tree-id5043 . -1) (undo-tree-id5044 . -1) (undo-tree-id5045 . -1) (undo-tree-id5046 . -1) (#("r" 0 1 (face font-lock-function-name-face fontified t)) . -520) (undo-tree-id5047 . -1) (undo-tree-id5048 . -1) (undo-tree-id5049 . -1) 521) nil (26039 50066 620188 58000) 0 nil])
([nil nil ((519 . 529)) nil (26039 50066 620173 922000) 0 nil])
([nil nil ((528 . 542)) nil (26039 50066 620172 916000) 0 nil])
([nil nil ((apply yas--snippet-revive 538 549 #s(yas--snippet nil nil #s(yas--exit 548 nil) 55 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 548 nil) 55 nil nil nil nil)) (538 . 549) (#("Rotation3<$0>" 0 13 (fontified nil)) . 538) (538 . 551) (#("Rota" 0 4 (fontified nil)) . 538) (538 . 542) (#("Rotation3<…>" 0 12 (fontified nil)) . -538) (538 . 550) (#("Rota" 0 4 (face font-lock-type-face fontified t)) . -538) (undo-tree-id5027 . -4) (undo-tree-id5028 . -1) (undo-tree-id5029 . -1) (undo-tree-id5030 . -1) (undo-tree-id5031 . -2) (undo-tree-id5032 . -2) (undo-tree-id5033 . -2) (undo-tree-id5034 . -3) (undo-tree-id5035 . -3) (undo-tree-id5036 . -4) (undo-tree-id5037 . -4) (undo-tree-id5038 . -4) (undo-tree-id5039 . -4) 542) nil (26039 50066 620169 498000) 0 nil])
([nil nil ((548 . 550)) nil (26039 50066 621461 430000) 0 nil])
([nil nil ((#("5" 0 1 (fontified t)) . -549) (undo-tree-id5303 . -1) (undo-tree-id5304 . -1) (undo-tree-id5305 . -1) (undo-tree-id5306 . -1) (undo-tree-id5307 . -1) (undo-tree-id5308 . -1) (undo-tree-id5309 . -1) (undo-tree-id5310 . -1) (undo-tree-id5311 . -1) 550) nil (26039 50159 771932 178000) 0 nil] [nil nil ((550 . 596)) ((#("
                                             " 0 46 (fontified t)) . 550) (undo-tree-id5071 . -46) (undo-tree-id5072 . -1) (undo-tree-id5073 . -46)) (26039 50066 620145 326000) 0 nil])
([nil nil ((549 . 550)) nil (26039 50159 771925 455000) 0 nil])
nil
([nil nil ((548 . 551) (#("f6" 0 2 (fontified nil)) . 548) (548 . 550) (#("f64" 0 3 (fontified nil)) . -548) (548 . 551) (#("f6" 0 2 (fontified t)) . -548) (undo-tree-id5285 . -2) (undo-tree-id5286 . -1) (undo-tree-id5287 . -1) (undo-tree-id5288 . -1) (undo-tree-id5289 . -1) (undo-tree-id5290 . -1) (undo-tree-id5291 . -1) (undo-tree-id5292 . -1) (undo-tree-id5293 . -1) (undo-tree-id5294 . -1) (undo-tree-id5295 . -2) (undo-tree-id5296 . -2) (undo-tree-id5297 . -2) (undo-tree-id5298 . -2) (undo-tree-id5299 . -2) (undo-tree-id5300 . -2) (undo-tree-id5301 . -2) (undo-tree-id5302 . -2) 550) nil (26039 50159 771923 876000) 0 nil])
([nil nil ((553 . 559)) nil (26039 50159 771910 399000) 0 nil])
([nil nil ((557 . 561) (#("Se" 0 2 (fontified nil)) . 557) (557 . 559) (#("Self" 0 4 (fontified nil)) . -557) (557 . 561) (#("Se" 0 2 (face font-lock-type-face fontified t)) . -557) (undo-tree-id5276 . -2) (undo-tree-id5277 . -1) (undo-tree-id5278 . -1) (undo-tree-id5279 . -1) (undo-tree-id5280 . -1) (undo-tree-id5281 . -1) (undo-tree-id5282 . -2) (undo-tree-id5283 . -2) (undo-tree-id5284 . -2) 559) nil (26039 50159 771909 116000) 0 nil])
([nil nil ((561 . 564)) nil (26039 50159 771901 546000) 0 nil])
([nil nil ((565 . 569) (#("        " 0 8 (fontified nil)) . 564) (564 . 572) (#("    " 0 4 (fontified nil)) . 564) (undo-tree-id5272 . -4) (undo-tree-id5273 . -4) (undo-tree-id5274 . -4) (undo-tree-id5275 . -4) (563 . 569)) nil (26039 50159 771900 397000) 0 nil])
([nil nil ((564 . 572)) nil (26039 50159 771896 233000) 0 nil])
([nil nil ((572 . 573)) nil (26039 50159 771895 607000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -572) (undo-tree-id5267 . -1) (undo-tree-id5268 . -1) (undo-tree-id5269 . -1) (undo-tree-id5270 . -1) (undo-tree-id5271 . -1) 573) nil (26039 50159 771894 412000) 0 nil])
([nil nil ((572 . 573)) nil (26039 50159 771028 845000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 588 588 nil nil nil t #s(yas--exit 590 nil))) #s(yas--exit 590 nil) 56 nil #s(yas--field 1 588 588 nil nil nil t #s(yas--exit 590 nil)) nil nil)) (572 . 592) (#("SO3 { rotation: ${1:()} }$0" 0 27 (fontified nil)) . 572) (572 . 599) (#("S" 0 1 (fontified nil)) . 572) (572 . 573) (#("SO3 {…}" 0 7 (fontified nil)) . -572) (572 . 579) (#("S" 0 1 (face font-lock-type-face fontified t)) . -572) (undo-tree-id5262 . -1) (undo-tree-id5263 . -1) (undo-tree-id5264 . -1) (undo-tree-id5265 . -1) (undo-tree-id5266 . -1) 573) nil (26039 50159 771027 397000) 0 nil])
([nil nil ((#("()" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 589) (undo-tree-id5261 . -2) (588 . 589)) nil (26039 50159 771021 893000) 0 nil])
([nil nil ((#("R" 0 1 (face font-lock-type-face fontified t)) . -588) (undo-tree-id5254 . -1) (undo-tree-id5255 . -1) (undo-tree-id5256 . -1) (undo-tree-id5257 . -1) (undo-tree-id5258 . -1) (undo-tree-id5259 . -1) (undo-tree-id5260 . -1) 589) nil (26039 50159 771019 866000) 0 nil])
([nil nil ((588 . 591)) nil (26039 50159 771014 709000) 0 nil])
([nil nil ((588 . 596) (#("rot" 0 3 (fontified nil)) . 588) (undo-tree-id5243 . -3) (588 . 591) (#("rotation" 0 8 (fontified nil)) . -588) (undo-tree-id5244 . -8) (588 . 596) (#("rot" 0 3 (fontified t)) . -588) (undo-tree-id5245 . -3) (undo-tree-id5246 . -3) (undo-tree-id5247 . -1) (undo-tree-id5248 . -1) (undo-tree-id5249 . -2) (undo-tree-id5250 . -2) (undo-tree-id5251 . -3) (undo-tree-id5252 . -3) (undo-tree-id5253 . -3) 591) nil (26039 50159 771013 249000) 0 nil])
([nil nil ((596 . 599)) nil (26039 50159 771004 94000) 0 nil])
([nil nil ((#("to" 0 2 (fontified t)) . -597) (undo-tree-id5225 . -2) (undo-tree-id5226 . -2) (undo-tree-id5227 . -1) (undo-tree-id5228 . -1) (undo-tree-id5229 . -2) (undo-tree-id5230 . -2) (undo-tree-id5231 . -2) (undo-tree-id5232 . -2) (undo-tree-id5233 . -2) (undo-tree-id5234 . -2) (undo-tree-id5235 . -2) (undo-tree-id5236 . -2) (undo-tree-id5237 . -2) (undo-tree-id5238 . -2) (undo-tree-id5239 . -2) (undo-tree-id5240 . -2) (undo-tree-id5241 . -2) (undo-tree-id5242 . -2) 599) nil (26039 50159 771002 851000) 0 nil])
([nil nil ((#("rotation." 0 9 (fontified t)) . -588) (undo-tree-id5200 . -9) (undo-tree-id5201 . -9) (undo-tree-id5202 . -8) (undo-tree-id5203 . -8) (undo-tree-id5204 . -8) (undo-tree-id5205 . -9) (undo-tree-id5206 . -9) (undo-tree-id5207 . -9) (undo-tree-id5208 . -9) (undo-tree-id5209 . -9) (undo-tree-id5210 . -9) (undo-tree-id5211 . -9) (undo-tree-id5212 . -9) (undo-tree-id5213 . -9) (undo-tree-id5214 . -9) (undo-tree-id5215 . -9) (undo-tree-id5216 . -9) (undo-tree-id5217 . -9) (undo-tree-id5218 . -9) (undo-tree-id5219 . -9) (undo-tree-id5220 . -9) (undo-tree-id5221 . -9) (undo-tree-id5222 . -9) (undo-tree-id5223 . -9) (undo-tree-id5224 . -9) 597) nil (26039 50159 770989 858000) 0 nil])
([nil nil ((apply yas--snippet-revive 572 590 #s(yas--snippet nil (#s(yas--field 1 588 588 nil nil nil t #s(yas--exit 590 nil))) #s(yas--exit 590 nil) 56 nil #s(yas--field 1 588 588 nil nil nil t #s(yas--exit 590 nil)) nil nil))) nil (26039 50159 770972 865000) 0 nil])
([nil nil ((#("SO3 { rotation:  }" 0 3 (face font-lock-type-face fontified t) 3 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-3-face) fontified t) 5 6 (fontified t) 6 14 (face font-lock-variable-name-face fontified t) 14 16 (fontified t) 16 17 (fontified t) 17 18 (face (rainbow-delimiters-depth-3-face) fontified t)) . 572) (undo-tree-id5146 . -18) (undo-tree-id5147 . -18) (undo-tree-id5148 . -16) (undo-tree-id5149 . -16) (undo-tree-id5150 . -16) (undo-tree-id5151 . -16) (undo-tree-id5152 . -16) (undo-tree-id5153 . -16) (undo-tree-id5154 . -16) (undo-tree-id5155 . -16) (undo-tree-id5156 . -16) (undo-tree-id5157 . -16) (undo-tree-id5158 . -16) (undo-tree-id5159 . -16) (undo-tree-id5160 . -16) (undo-tree-id5161 . -16) (undo-tree-id5162 . -16) (undo-tree-id5163 . -16) (undo-tree-id5164 . -16) (undo-tree-id5165 . -16) (undo-tree-id5166 . -16) (undo-tree-id5167 . -16) (undo-tree-id5168 . -16) (undo-tree-id5169 . -16) (undo-tree-id5170 . -16) (undo-tree-id5171 . -16) (undo-tree-id5172 . -16) (undo-tree-id5173 . -16) (undo-tree-id5174 . -16) (undo-tree-id5175 . -16) (undo-tree-id5176 . -16) (undo-tree-id5177 . -16) (undo-tree-id5178 . -16) (undo-tree-id5179 . -16) (undo-tree-id5180 . -16) (undo-tree-id5181 . -16) (undo-tree-id5182 . -16) (undo-tree-id5183 . -16) (undo-tree-id5184 . -16) (undo-tree-id5185 . -16) (undo-tree-id5186 . -16) (undo-tree-id5187 . -16) (undo-tree-id5188 . -16) (undo-tree-id5189 . -16) (undo-tree-id5190 . -16) (undo-tree-id5191 . -16) (undo-tree-id5192 . 2) (undo-tree-id5193 . -16) (undo-tree-id5194 . -16) (undo-tree-id5195 . -16) (undo-tree-id5196 . -16) (undo-tree-id5197 . -16) (undo-tree-id5198 . -16) (undo-tree-id5199 . -18)) nil (26039 50159 770970 376000) 0 nil])
([nil nil ((572 . 576)) nil (26039 50159 770934 240000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -572) (undo-tree-id5103 . -1) (undo-tree-id5104 . -1) (undo-tree-id5105 . -1) (undo-tree-id5106 . -1) (undo-tree-id5107 . -1) (undo-tree-id5108 . -1) (undo-tree-id5109 . -1) (undo-tree-id5110 . -1) (undo-tree-id5111 . -1) (undo-tree-id5112 . -1) (undo-tree-id5113 . -1) (undo-tree-id5114 . -1) (undo-tree-id5115 . -1) (undo-tree-id5116 . -1) (undo-tree-id5117 . -1) (undo-tree-id5118 . -1) (undo-tree-id5119 . -1) (#("e" 0 1 (fontified t)) . -573) (undo-tree-id5120 . -1) (undo-tree-id5121 . -1) (undo-tree-id5122 . -1) (undo-tree-id5123 . -1) (undo-tree-id5124 . -1) (undo-tree-id5125 . -1) (undo-tree-id5126 . -1) (undo-tree-id5127 . -1) (undo-tree-id5128 . -1) (undo-tree-id5129 . -1) (undo-tree-id5130 . -1) (undo-tree-id5131 . -1) (undo-tree-id5132 . -1) (#("t" 0 1 (fontified t)) . -574) (undo-tree-id5133 . -1) (undo-tree-id5134 . -1) (undo-tree-id5135 . -1) (undo-tree-id5136 . -1) (undo-tree-id5137 . -1) (undo-tree-id5138 . -1) (undo-tree-id5139 . -1) (undo-tree-id5140 . -1) (undo-tree-id5141 . -1) (#(" " 0 1 (fontified t)) . -575) (undo-tree-id5142 . -1) (undo-tree-id5143 . -1) (undo-tree-id5144 . -1) (undo-tree-id5145 . -1) 576) nil (26039 50159 770931 610000) 0 nil])
([nil nil ((572 . 581)) nil (26039 50159 770901 322000) 0 nil])
([nil nil ((580 . 590) (#("Q" 0 1 (fontified nil)) . 580) (580 . 581) (#("Quaternion" 0 10 (fontified nil)) . -580) (580 . 590) (#("Q" 0 1 (face font-lock-type-face fontified t)) . -580) (undo-tree-id5097 . -1) (undo-tree-id5098 . -1) (undo-tree-id5099 . -1) (undo-tree-id5100 . -1) (undo-tree-id5101 . -1) (undo-tree-id5102 . -1) 581) nil (26039 50159 770899 920000) 0 nil])
([nil nil ((590 . 596)) nil (26039 50159 770893 883000) 0 nil])
([nil nil ((592 . 596) (#("from" 0 4 (fontified nil)) . 592) (592 . 596) (#("from (as From)" 0 14 (fontified nil)) . -592) (592 . 606) (#("from" 0 4 (fontified t)) . -592) (undo-tree-id5083 . -4) (undo-tree-id5084 . -1) (undo-tree-id5085 . -1) (undo-tree-id5086 . -2) (undo-tree-id5087 . -2) (undo-tree-id5088 . -2) (undo-tree-id5089 . -3) (undo-tree-id5090 . -3) (undo-tree-id5091 . -3) (undo-tree-id5092 . -4) (undo-tree-id5093 . -4) (undo-tree-id5094 . -4) (undo-tree-id5095 . -4) (undo-tree-id5096 . -4) 596) nil (26039 50159 770892 293000) 0 nil])
([nil nil ((596 . 598)) nil (26039 50159 770880 687000) 0 nil])
([nil nil ((597 . 598)) nil (26039 50159 770880 87000) 0 nil])
([nil nil ((#("R" 0 1 (face font-lock-type-face fontified t)) . -597) (undo-tree-id5079 . -1) (undo-tree-id5080 . -1) (undo-tree-id5081 . -1) (undo-tree-id5082 . -1) 598) nil (26039 50159 770879 87000) 0 nil])
([nil nil ((597 . 598)) nil (26039 50159 770874 379000) 0 nil])
([nil nil ((597 . 605) (#("r" 0 1 (fontified nil)) . 597) (597 . 598) (#("rotation" 0 8 (fontified nil)) . -597) (597 . 605) (#("r" 0 1 (fontified t)) . -597) (undo-tree-id5074 . -1) (undo-tree-id5075 . -1) (undo-tree-id5076 . -1) (undo-tree-id5077 . -1) (undo-tree-id5078 . -1) 598) nil (26039 50159 770870 933000) 0 nil])
([nil nil ((606 . 607)) nil (26039 50159 770721 893000) 0 nil])
([nil nil ((607 . 616) (t 26039 50159 789091 892000)) nil (26039 50178 444731 772000) 0 nil])
([nil nil ((616 . 617)) nil (26039 50178 444730 789000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 632 633 nil nil nil t #s(yas--exit 635 nil))) #s(yas--exit 635 nil) 57 nil #s(yas--field 1 632 633 nil nil nil t #s(yas--exit 635 nil)) nil nil)) (616 . 636) (#("SO3 { rotation: ${1:()} }$0" 0 27 (fontified nil)) . 616) (616 . 643) (#("S" 0 1 (fontified nil)) . 616) (616 . 617) (#("SO3 {…}" 0 7 (fontified nil)) . -616) (616 . 623) (#("S" 0 1 (face font-lock-type-face fontified t)) . -616) (undo-tree-id5313 . -1) (undo-tree-id5314 . -1) (undo-tree-id5315 . -1) (undo-tree-id5316 . -1) (undo-tree-id5317 . -1) 617) nil (26039 50178 444729 14000) 0 nil])
([nil nil ((#("()" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 633) (undo-tree-id5312 . -2) (632 . 633)) nil (26039 50178 444721 461000) 0 nil])
([nil nil ((apply yas--snippet-revive 616 635 #s(yas--snippet nil (#s(yas--field 1 632 633 nil nil nil t #s(yas--exit 635 nil))) #s(yas--exit 635 nil) 57 nil #s(yas--field 1 632 633 nil nil nil t #s(yas--exit 635 nil)) nil nil))) nil (26039 50178 444709 814000) 0 nil])
([nil nil ((577 . 580) (t 26039 50178 492424 137000)) nil (26039 50185 649775 64000) 0 nil])
([nil nil ((579 . 594) (#("Q" 0 1 (fontified nil)) . 579) (579 . 580) (#("Quaternion<f64>" 0 15 (fontified nil)) . -579) (579 . 594) (#("Q" 0 1 (face font-lock-type-face fontified t)) . -579) (undo-tree-id5318 . -1) (undo-tree-id5319 . -1) (undo-tree-id5320 . -1) (undo-tree-id5321 . -1) (undo-tree-id5322 . -1) (undo-tree-id5323 . -1) 580) nil (26039 50185 649771 3000) 0 nil])
([nil nil ((#("f64>" 0 3 (face font-lock-type-face fontified t) 3 4 (face (rainbow-delimiters-depth-3-face) fontified t)) . -590) (undo-tree-id5407 . -4) (undo-tree-id5408 . -4) (undo-tree-id5409 . -4) (undo-tree-id5410 . -4) (undo-tree-id5411 . -4) (undo-tree-id5412 . -4) (undo-tree-id5413 . -4) (undo-tree-id5414 . -4) (undo-tree-id5415 . -4) (undo-tree-id5416 . -4) (undo-tree-id5417 . -4) (undo-tree-id5418 . -4) (undo-tree-id5419 . -3) (undo-tree-id5420 . -4) 594 (t 26039 50185 665757 58000)) nil (26039 50194 505799 545000) 0 nil])
([nil nil ((#("Quaternion<" 0 10 (face font-lock-type-face fontified t) 10 11 (face (rainbow-delimiters-depth-3-face) fontified t)) . -579) (undo-tree-id5390 . -11) (undo-tree-id5391 . -11) (undo-tree-id5392 . -11) (undo-tree-id5393 . -11) (undo-tree-id5394 . -11) (undo-tree-id5395 . -11) (undo-tree-id5396 . -11) (undo-tree-id5397 . -11) (undo-tree-id5398 . -11) (undo-tree-id5399 . -11) (undo-tree-id5400 . -11) (undo-tree-id5401 . -11) (undo-tree-id5402 . -11) (undo-tree-id5403 . -11) (undo-tree-id5404 . -11) (undo-tree-id5405 . -11) (undo-tree-id5406 . -11) 590) nil (26039 50194 505788 872000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -577) (undo-tree-id5324 . -1) (undo-tree-id5325 . -1) (undo-tree-id5326 . -1) (undo-tree-id5327 . -1) (undo-tree-id5328 . -1) (undo-tree-id5329 . -1) (undo-tree-id5330 . -1) (undo-tree-id5331 . -1) (undo-tree-id5332 . -1) (undo-tree-id5333 . -1) (undo-tree-id5334 . -1) (undo-tree-id5335 . -1) (undo-tree-id5336 . -1) (undo-tree-id5337 . -1) (undo-tree-id5338 . -1) (undo-tree-id5339 . -1) (undo-tree-id5340 . -1) (undo-tree-id5341 . -1) (undo-tree-id5342 . -1) (undo-tree-id5343 . -1) (undo-tree-id5344 . -1) (undo-tree-id5345 . -1) (undo-tree-id5346 . -1) (undo-tree-id5347 . -1) (undo-tree-id5348 . -1) (undo-tree-id5349 . -1) (undo-tree-id5350 . -1) (undo-tree-id5351 . -1) (undo-tree-id5352 . -1) (undo-tree-id5353 . -1) (undo-tree-id5354 . -1) (undo-tree-id5355 . -1) (undo-tree-id5356 . -1) (undo-tree-id5357 . -1) (#(" " 0 1 (fontified t)) . -578) (undo-tree-id5358 . -1) (undo-tree-id5359 . -1) (undo-tree-id5360 . -1) (undo-tree-id5361 . -1) (undo-tree-id5362 . -1) (undo-tree-id5363 . -1) (undo-tree-id5364 . -1) (undo-tree-id5365 . -1) (undo-tree-id5366 . -1) (undo-tree-id5367 . -1) (undo-tree-id5368 . -1) (undo-tree-id5369 . -1) (undo-tree-id5370 . -1) (undo-tree-id5371 . -1) (undo-tree-id5372 . -1) (undo-tree-id5373 . -1) (undo-tree-id5374 . -1) (undo-tree-id5375 . -1) (undo-tree-id5376 . -1) (undo-tree-id5377 . -1) (undo-tree-id5378 . -1) (undo-tree-id5379 . -1) (undo-tree-id5380 . -1) (undo-tree-id5381 . -1) (undo-tree-id5382 . -1) (undo-tree-id5383 . -1) (undo-tree-id5384 . -1) (undo-tree-id5385 . -1) (undo-tree-id5386 . -1) (undo-tree-id5387 . -1) (undo-tree-id5388 . -1) (undo-tree-id5389 . -1) 579) nil (26039 50194 505771 327000) 0 nil])
([nil nil ((#("rotation);" 0 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-3-face) fontified t) 9 10 (fontified t)) . -597) (undo-tree-id5701 . -10) (undo-tree-id5702 . -10) (undo-tree-id5703 . -10) (undo-tree-id5704 . -10) (undo-tree-id5705 . -10) (undo-tree-id5706 . -10) (undo-tree-id5707 . -10) 607 (t 26039 50194 552423 216000)) nil (26039 50316 41393 109000) 0 nil])
([nil nil ((#("from(" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-3-face) fontified t)) . -592) (undo-tree-id5692 . -5) (undo-tree-id5693 . -5) (undo-tree-id5694 . -5) (undo-tree-id5695 . -5) (undo-tree-id5696 . -5) (undo-tree-id5697 . -5) (undo-tree-id5698 . -5) (undo-tree-id5699 . -5) (undo-tree-id5700 . -5) 597) nil (26039 50316 41387 130000) 0 nil])
([nil nil ((592 . 596)) nil (26039 50316 41380 364000) 0 nil])
([nil nil ((#("from" 0 4 (fontified t)) . -592) (undo-tree-id5677 . -4) (undo-tree-id5678 . -1) (undo-tree-id5679 . -1) (undo-tree-id5680 . -1) (undo-tree-id5681 . -2) (undo-tree-id5682 . -2) (undo-tree-id5683 . -2) (undo-tree-id5684 . -3) (undo-tree-id5685 . -3) (undo-tree-id5686 . -3) (undo-tree-id5687 . -4) (undo-tree-id5688 . -4) (undo-tree-id5689 . -4) (undo-tree-id5690 . -4) (undo-tree-id5691 . -4) 596) nil (26039 50316 41378 914000) 0 nil])
([nil nil ((#("Quaternion::" 0 10 (face font-lock-type-face fontified t) 10 12 (fontified t)) . -580) (undo-tree-id5647 . -12) (undo-tree-id5648 . -12) (undo-tree-id5649 . -12) (undo-tree-id5650 . -12) (undo-tree-id5651 . -12) (undo-tree-id5652 . -12) (undo-tree-id5653 . -12) (undo-tree-id5654 . -12) (undo-tree-id5655 . -12) (undo-tree-id5656 . -12) (undo-tree-id5657 . -12) (undo-tree-id5658 . -12) (undo-tree-id5659 . -12) (undo-tree-id5660 . -12) (undo-tree-id5661 . -12) (undo-tree-id5662 . -12) (undo-tree-id5663 . -12) (undo-tree-id5664 . -12) (undo-tree-id5665 . -12) (undo-tree-id5666 . -12) (undo-tree-id5667 . -12) (undo-tree-id5668 . -12) (undo-tree-id5669 . -12) (undo-tree-id5670 . -12) (undo-tree-id5671 . -12) (undo-tree-id5672 . -12) (undo-tree-id5673 . -12) (undo-tree-id5674 . -12) (undo-tree-id5675 . -12) (undo-tree-id5676 . -12) 592) nil (26039 50316 41366 572000) 0 nil])
([nil nil ((#("q = " 0 1 (face font-lock-variable-name-face fontified t) 1 4 (fontified t)) . -576) (undo-tree-id5571 . -4) (undo-tree-id5572 . -1) (undo-tree-id5573 . -1) (undo-tree-id5574 . -1) (undo-tree-id5575 . -1) (undo-tree-id5576 . -1) (undo-tree-id5577 . -1) (undo-tree-id5578 . -1) (undo-tree-id5579 . -1) (undo-tree-id5580 . -1) (undo-tree-id5581 . -1) (undo-tree-id5582 . -1) (undo-tree-id5583 . -1) (undo-tree-id5584 . -1) (undo-tree-id5585 . -1) (undo-tree-id5586 . -1) (undo-tree-id5587 . -1) (undo-tree-id5588 . -1) (undo-tree-id5589 . -1) (undo-tree-id5590 . -1) (undo-tree-id5591 . -1) (undo-tree-id5592 . -1) (undo-tree-id5593 . -1) (undo-tree-id5594 . -1) (undo-tree-id5595 . -1) (undo-tree-id5596 . -1) (undo-tree-id5597 . -1) (undo-tree-id5598 . -1) (undo-tree-id5599 . -1) (undo-tree-id5600 . -1) (undo-tree-id5601 . -1) (undo-tree-id5602 . -1) (undo-tree-id5603 . -1) (undo-tree-id5604 . -1) (undo-tree-id5605 . -1) (undo-tree-id5606 . -1) (undo-tree-id5607 . -1) (undo-tree-id5608 . -1) (undo-tree-id5609 . -1) (undo-tree-id5610 . -1) (undo-tree-id5611 . -1) (undo-tree-id5612 . -1) (undo-tree-id5613 . -1) (undo-tree-id5614 . -1) (undo-tree-id5615 . -4) (undo-tree-id5616 . -4) (undo-tree-id5617 . -4) (undo-tree-id5618 . -4) (undo-tree-id5619 . -4) (undo-tree-id5620 . -4) (undo-tree-id5621 . -4) (undo-tree-id5622 . -4) (undo-tree-id5623 . -4) (undo-tree-id5624 . -4) (undo-tree-id5625 . -4) (undo-tree-id5626 . -4) (undo-tree-id5627 . -4) (undo-tree-id5628 . -4) (undo-tree-id5629 . -4) (undo-tree-id5630 . -4) (undo-tree-id5631 . -4) (undo-tree-id5632 . -4) (undo-tree-id5633 . -4) (undo-tree-id5634 . -4) (undo-tree-id5635 . -4) (undo-tree-id5636 . -4) (undo-tree-id5637 . -4) (undo-tree-id5638 . -4) (undo-tree-id5639 . -4) (undo-tree-id5640 . -4) (undo-tree-id5641 . -4) (undo-tree-id5642 . -4) (undo-tree-id5643 . -4) (undo-tree-id5644 . -4) (undo-tree-id5645 . -4) (undo-tree-id5646 . -4) 580) nil (26039 50316 41310 117000) 0 nil])
([nil nil ((#("let " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . 572) (undo-tree-id5490 . -4) (undo-tree-id5491 . -4) (undo-tree-id5492 . -4) (undo-tree-id5493 . -4) (undo-tree-id5494 . -4) (undo-tree-id5495 . -4) (undo-tree-id5496 . -4) (undo-tree-id5497 . -4) (undo-tree-id5498 . -4) (undo-tree-id5499 . -4) (undo-tree-id5500 . -4) (undo-tree-id5501 . -4) (undo-tree-id5502 . -4) (undo-tree-id5503 . -4) (undo-tree-id5504 . -4) (undo-tree-id5505 . -4) (undo-tree-id5506 . -4) (undo-tree-id5507 . -4) (undo-tree-id5508 . -4) (undo-tree-id5509 . -4) (undo-tree-id5510 . -4) (undo-tree-id5511 . -4) (undo-tree-id5512 . -4) (undo-tree-id5513 . -4) (undo-tree-id5514 . -4) (undo-tree-id5515 . -4) (undo-tree-id5516 . -4) (undo-tree-id5517 . -4) (undo-tree-id5518 . -4) (undo-tree-id5519 . -4) (undo-tree-id5520 . -4) (undo-tree-id5521 . -4) (undo-tree-id5522 . -4) (undo-tree-id5523 . -4) (undo-tree-id5524 . -4) (undo-tree-id5525 . -4) (undo-tree-id5526 . -4) (undo-tree-id5527 . -4) (undo-tree-id5528 . -4) (undo-tree-id5529 . -4) (undo-tree-id5530 . -4) (undo-tree-id5531 . -4) (undo-tree-id5532 . -4) (undo-tree-id5533 . -4) (undo-tree-id5534 . -4) (undo-tree-id5535 . -4) (undo-tree-id5536 . -4) (undo-tree-id5537 . -4) (undo-tree-id5538 . -4) (undo-tree-id5539 . -4) (undo-tree-id5540 . -4) (undo-tree-id5541 . -4) (undo-tree-id5542 . -4) (undo-tree-id5543 . -4) (undo-tree-id5544 . -4) (undo-tree-id5545 . -4) (undo-tree-id5546 . -4) (undo-tree-id5547 . -4) (undo-tree-id5548 . -4) (undo-tree-id5549 . -4) (undo-tree-id5550 . -4) (undo-tree-id5551 . -4) (undo-tree-id5552 . -4) (undo-tree-id5553 . -4) (undo-tree-id5554 . -4) (undo-tree-id5555 . -4) (undo-tree-id5556 . -4) (undo-tree-id5557 . -4) (undo-tree-id5558 . -4) (undo-tree-id5559 . -4) (undo-tree-id5560 . -4) (undo-tree-id5561 . -4) (undo-tree-id5562 . -4) (undo-tree-id5563 . -4) (undo-tree-id5564 . -4) (undo-tree-id5565 . -4) (undo-tree-id5566 . -4) (undo-tree-id5567 . -4) (undo-tree-id5568 . -4) (undo-tree-id5569 . -4) (undo-tree-id5570 . -4)) nil (26039 50462 979886 892000) 0 nil])
([nil nil ((113 . 117) (t 26039 50464 162407 689000)) nil (26039 50726 8403 652000) 0 nil] [nil nil ((#("Quaternion" 0 10 (face font-lock-type-face fontified t)) . -123) (undo-tree-id5770 . -2) (undo-tree-id5771 . -10) (undo-tree-id5772 . -10) (undo-tree-id5773 . -10) (undo-tree-id5775 . -10) (undo-tree-id5776 . -10) (undo-tree-id5778 . -10) (undo-tree-id5780 . -10) (undo-tree-id5782 . -10) (undo-tree-id5784 . -10) (undo-tree-id5786 . -10) (undo-tree-id5788 . -10) (undo-tree-id5790 . -10) (undo-tree-id5792 . -10) 133 (t 26039 50318 239082 751000)) ((123 . 133)) (26039 50462 573979 60000) 0 nil] [nil nil ((#("scalar() * self.rotation.vector().normalize()" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-3-face) fontified t) 7 8 (face (rainbow-delimiters-depth-3-face) fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 15 (face font-lock-keyword-face fontified t) 15 16 (fontified t) 16 25 (fontified t) 25 31 (fontified t) 31 32 (face (rainbow-delimiters-depth-3-face) fontified t) 32 33 (face (rainbow-delimiters-depth-3-face) fontified t) 33 34 (fontified t) 34 43 (fontified t) 43 44 (face (rainbow-delimiters-depth-3-face) fontified t) 44 45 (face (rainbow-delimiters-depth-3-face) fontified t)) . 1464) (undo-tree-id5487 . -33) (undo-tree-id5488 . -6) (undo-tree-id5489 . -45)) ((1464 . 1509)) (26039 50316 905276 123000) 0 nil])
([nil nil ((#("   pub fn from_rotation(rotation: Rotation3<f64>) -> Self {
        
        SO3 { rotation: q }
    }
    " 0 3 (fontified t) 3 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 9 (face font-lock-keyword-face fontified t) 9 10 (fontified t) 10 23 (face font-lock-function-name-face fontified t) 23 24 (face (rainbow-delimiters-depth-2-face) fontified t) 24 32 (face font-lock-variable-name-face fontified t) 32 34 (fontified t) 34 43 (face font-lock-type-face fontified t) 43 44 (face (rainbow-delimiters-depth-3-face) fontified t) 44 47 (face font-lock-type-face fontified t) 47 48 (face (rainbow-delimiters-depth-3-face) fontified t) 48 49 (face (rainbow-delimiters-depth-2-face) fontified t) 49 51 (fontified t) 51 52 (syntax-table (1) fontified t) 52 53 (fontified t) 53 57 (face font-lock-type-face fontified t) 57 58 (fontified t) 58 59 (face (rainbow-delimiters-depth-2-face) fontified t) 59 60 (fontified t) 60 68 (fontified t) 68 69 (fontified t) 69 77 (fontified t) 77 80 (face font-lock-type-face fontified t) 80 81 (fontified t) 81 82 (face (rainbow-delimiters-depth-3-face) fontified t) 82 83 (fontified t) 83 91 (face font-lock-variable-name-face fontified t) 91 94 (fontified t) 94 95 (fontified t) 95 96 (face (rainbow-delimiters-depth-3-face) fontified t) 96 97 (fontified t) 97 101 (fontified t) 101 102 (face (rainbow-delimiters-depth-2-face) fontified t) 102 103 (fontified t) 103 107 (fontified t)) . 508) (undo-tree-id5881 . -107) (undo-tree-id5882 . -93) (undo-tree-id5883 . -107) (undo-tree-id5884 . -107) (undo-tree-id5885 . -107) (undo-tree-id5886 . -102) (undo-tree-id5887 . -101) (undo-tree-id5888 . -72) (undo-tree-id5889 . -71) (undo-tree-id5890 . -70) (undo-tree-id5891 . -60) (undo-tree-id5892 . -107) (t 26039 50726 25725 922000)) nil (26039 50730 296311 729000) 0 nil])
([nil nil ((123 . 127)) ((#("Unit" 0 4 (face font-lock-type-face fontified t)) . 123) (undo-tree-id5835 . -4) (undo-tree-id5836 . -4) (undo-tree-id5837 . -4) (undo-tree-id5838 . -4) (undo-tree-id5839 . -4)) (26039 50462 24040 46000) 0 nil])
([nil nil ((1464 . 1465)) ((#("s" 0 1 (fontified t)) . 1464) (undo-tree-id5737 . -1) (undo-tree-id5738 . -1) (undo-tree-id5739 . -1) (undo-tree-id5740 . -1) (undo-tree-id5741 . -1) (undo-tree-id5742 . -1) (undo-tree-id5743 . -1) (undo-tree-id5744 . -1) (undo-tree-id5745 . -1) (undo-tree-id5746 . -1) (undo-tree-id5747 . -1) (undo-tree-id5748 . -1)) (26039 50316 605467 741000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -506) (undo-tree-id5840 . -1) (undo-tree-id5841 . -1) (undo-tree-id5842 . -1) (undo-tree-id5843 . -1) (undo-tree-id5844 . -1) (undo-tree-id5845 . -1) (undo-tree-id5846 . -1) (undo-tree-id5847 . -1) (undo-tree-id5848 . -1) (undo-tree-id5849 . -1) (undo-tree-id5850 . -1) (undo-tree-id5851 . -1) (undo-tree-id5852 . -1) (undo-tree-id5853 . -1) (undo-tree-id5854 . -1) (undo-tree-id5855 . -1) (undo-tree-id5856 . -1) (undo-tree-id5857 . -1) (undo-tree-id5858 . -1) (undo-tree-id5859 . -1) (undo-tree-id5860 . -1) (undo-tree-id5861 . -1) (#(" " 0 1 (fontified t)) . -507) (undo-tree-id5862 . -1) (undo-tree-id5863 . -1) (undo-tree-id5864 . -1) (undo-tree-id5865 . -1) (undo-tree-id5866 . -1) (undo-tree-id5867 . -1) (undo-tree-id5868 . -1) (undo-tree-id5869 . -1) (undo-tree-id5870 . -1) (undo-tree-id5871 . -1) (undo-tree-id5872 . -1) (undo-tree-id5873 . -1) (undo-tree-id5874 . -1) (undo-tree-id5875 . -1) (undo-tree-id5876 . -1) (undo-tree-id5877 . -1) (undo-tree-id5878 . -1) (undo-tree-id5879 . -1) (undo-tree-id5880 . -1) 508) nil (26039 50730 296298 383000) 0 nil])
([nil nil ((88 . 104) (123 . 123) (123 . 137) (#("Unit" 0 4 (fontified nil)) . 123) (123 . 127) (#("UnitQuaternion (use nalgebra::UnitQuaternion)" 0 45 (fontified nil)) . -123) (123 . 168) (#("Unit" 0 4 (face font-lock-type-face fontified t)) . -123) (undo-tree-id5749 . -4) (undo-tree-id5751 . -1) (undo-tree-id5753 . -1) (undo-tree-id5755 . -1) (undo-tree-id5757 . -1) (undo-tree-id5759 . -2) (undo-tree-id5761 . -3) (undo-tree-id5762 . -4) (undo-tree-id5764 . -4) (undo-tree-id5766 . -4) (undo-tree-id5768 . -4) 127) ((123 . 127) (#("UnitQuaternion (use nalgebra::UnitQuaternion)" 0 45 (fontified nil)) . 123) (123 . 168) (#("Unit" 0 4 (fontified nil)) . 123) (123 . 127) (#("UnitQuaternion" 0 14 (face font-lock-type-face fontified t)) . 123) (#(", UnitQuaternion" 0 2 (fontified t) 2 16 (face font-lock-type-face fontified t)) . 88)) (26039 50461 700380 383000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -1464) (undo-tree-id5477 . -1) (undo-tree-id5478 . -1) (undo-tree-id5479 . -1) (undo-tree-id5480 . -1) (undo-tree-id5481 . -1) (undo-tree-id5482 . -1) (undo-tree-id5483 . -1) (undo-tree-id5484 . -1) (undo-tree-id5485 . -1) (undo-tree-id5486 . -1) 1465) ((1464 . 1465)) (26039 50316 285531 52000) 0 nil])
([nil nil ((127 . 128) (t 26039 50730 345725 674000)) nil (26039 51327 668423 740000) 0 nil])
([nil nil ((#("Quaternion" 0 10 (face font-lock-type-face fontified t)) . -381) (undo-tree-id5801 . -10) (undo-tree-id5802 . -6) (undo-tree-id5803 . -6) (undo-tree-id5804 . -6) (undo-tree-id5805 . -6) (undo-tree-id5806 . -6) (undo-tree-id5807 . -6) (undo-tree-id5808 . -6) (undo-tree-id5809 . -6) (undo-tree-id5810 . -10) 391 (t 26039 50447 942408 620000)) ((381 . 391)) (26039 50461 367738 35000) 0 nil])
([nil nil ((1464 . 1467)) ((#("sca" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 1464) (undo-tree-id5708 . -3) (undo-tree-id5709 . -1) (undo-tree-id5710 . -1) (undo-tree-id5711 . -1) (undo-tree-id5712 . -2) (undo-tree-id5713 . -2) (undo-tree-id5714 . -2) (undo-tree-id5715 . -2) (undo-tree-id5716 . -2) (undo-tree-id5717 . -2) (undo-tree-id5718 . -2) (undo-tree-id5719 . -2) (undo-tree-id5720 . -3) (undo-tree-id5721 . -3) (undo-tree-id5722 . -3) (undo-tree-id5723 . -3) (undo-tree-id5724 . -3) (undo-tree-id5725 . -3) (undo-tree-id5726 . -3) (undo-tree-id5727 . -3) (undo-tree-id5728 . -2) (undo-tree-id5729 . -2) (undo-tree-id5730 . -2) (undo-tree-id5731 . -1) (undo-tree-id5732 . -1) (undo-tree-id5733 . -2) (undo-tree-id5734 . -3) (undo-tree-id5735 . -3) (undo-tree-id5736 . -3)) (26039 50316 42266 522000) 0 nil])
([nil nil ((88 . 104) (127 . 127) (127 . 141) (#("UQuaternion" 0 1 (fontified nil) 1 11 (face font-lock-type-face fontified nil)) . 127) (undo-tree-id5893 . -3) (undo-tree-id5894 . 10) (127 . 128) (#("UnitQuaternion (use nalgebra::UnitQuaternion)" 0 45 (fontified nil)) . -127) (127 . 172) (#("U" 0 1 (face font-lock-type-face fontified t)) . -127) (undo-tree-id5895 . -1) (undo-tree-id5896 . -1) (undo-tree-id5897 . -1) (undo-tree-id5898 . -1) (undo-tree-id5899 . -1) (undo-tree-id5900 . -1) (undo-tree-id5901 . -1) (undo-tree-id5902 . -1) (undo-tree-id5903 . -1) (undo-tree-id5904 . -1) (undo-tree-id5905 . -1) (undo-tree-id5906 . -1) (undo-tree-id5907 . -1) (undo-tree-id5908 . -1) 128) nil (26039 51327 668419 201000) 0 nil])
([nil nil ((381 . 382)) ((#("U" 0 1 (face font-lock-type-face fontified t)) . 381) (undo-tree-id5825 . -1) (undo-tree-id5826 . -1) (undo-tree-id5827 . -1) (undo-tree-id5828 . -1) (undo-tree-id5829 . -1) (undo-tree-id5830 . -1) (undo-tree-id5831 . -1) (undo-tree-id5832 . -1) (undo-tree-id5833 . -1) (undo-tree-id5834 . -1)) (26039 50461 673 490000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -1464) (undo-tree-id5421 . -1) (undo-tree-id5422 . -1) (undo-tree-id5423 . -1) (undo-tree-id5424 . -1) (undo-tree-id5425 . -1) (undo-tree-id5426 . -1) (undo-tree-id5427 . -1) (undo-tree-id5428 . -1) (undo-tree-id5429 . -1) (undo-tree-id5430 . -1) (undo-tree-id5431 . -1) (undo-tree-id5432 . -1) (undo-tree-id5433 . -1) (undo-tree-id5434 . -1) (undo-tree-id5435 . -1) (undo-tree-id5436 . -1) (undo-tree-id5437 . -1) (undo-tree-id5438 . -1) (undo-tree-id5439 . -1) (undo-tree-id5440 . -1) (undo-tree-id5441 . -1) (undo-tree-id5442 . -1) (undo-tree-id5443 . -1) (undo-tree-id5444 . -1) (undo-tree-id5445 . -1) (undo-tree-id5446 . -1) (#("c" 0 1 (fontified t)) . -1465) (undo-tree-id5447 . -1) (undo-tree-id5448 . -1) (undo-tree-id5449 . -1) (undo-tree-id5450 . -1) (undo-tree-id5451 . -1) (undo-tree-id5452 . -1) (undo-tree-id5453 . -1) (undo-tree-id5454 . -1) (undo-tree-id5455 . -1) (undo-tree-id5456 . -1) (undo-tree-id5457 . -1) (undo-tree-id5458 . -1) (undo-tree-id5459 . -1) (undo-tree-id5460 . -1) (undo-tree-id5461 . -1) (undo-tree-id5462 . -1) (undo-tree-id5463 . -1) (undo-tree-id5464 . -1) (undo-tree-id5465 . -1) (undo-tree-id5466 . -1) (undo-tree-id5467 . -1) (#("a" 0 1 (fontified t)) . -1466) (undo-tree-id5468 . -1) (undo-tree-id5469 . -1) (undo-tree-id5470 . -1) (undo-tree-id5471 . -1) (undo-tree-id5472 . -1) (undo-tree-id5473 . -1) (undo-tree-id5474 . -1) (undo-tree-id5475 . -1) (undo-tree-id5476 . -1) 1467) ((1464 . 1467)) (26039 50316 40664 74000) 0 nil])
([nil nil ((385 . 386) (t 26039 51327 715691 272000)) nil (26039 51346 698907 247000) 0 nil])
([nil nil ((381 . 395) (#("U" 0 1 (fontified nil)) . 381) (381 . 382) (#("UnitQuaternion" 0 14 (fontified nil)) . -381) (381 . 395) (#("U" 0 1 (face font-lock-type-face fontified t)) . -381) (undo-tree-id5793 . -1) (undo-tree-id5794 . -1) (undo-tree-id5795 . -1) (undo-tree-id5796 . -1) (undo-tree-id5797 . -1) (undo-tree-id5798 . -1) (undo-tree-id5799 . -1) (undo-tree-id5800 . -1) 382) ((381 . 382) (#("UnitQuaternion" 0 14 (fontified nil)) . 381) (381 . 395) (#("U" 0 1 (fontified nil)) . 381) (381 . 382) (#("UnitQuaternion" 0 14 (face font-lock-type-face fontified t)) . 381) (undo-tree-id5811 . -14) (undo-tree-id5812 . -14) (undo-tree-id5813 . -14) (undo-tree-id5814 . -14) (undo-tree-id5815 . -14) (undo-tree-id5816 . -14) (undo-tree-id5817 . -14) (undo-tree-id5818 . -14) (undo-tree-id5819 . -14) (undo-tree-id5820 . -14) (undo-tree-id5821 . -14) (undo-tree-id5822 . -14) (undo-tree-id5823 . -14) (undo-tree-id5824 . -14) (t 26039 50453 582408 297000)) (26039 50453 565788 448000) 0 nil])
nil
([nil nil ((#("U" 0 1 (face font-lock-type-face fontified t)) . -385) (undo-tree-id5976 . -1) (undo-tree-id5977 . -1) (undo-tree-id5978 . -1) (undo-tree-id5979 . -1) (undo-tree-id5980 . -1) (undo-tree-id5981 . -1) (undo-tree-id5982 . -1) (undo-tree-id5983 . -1) (undo-tree-id5984 . -1) (undo-tree-id5985 . -1) (undo-tree-id5986 . -1) (undo-tree-id5987 . -1) (undo-tree-id5988 . -1) (undo-tree-id5989 . -1) (undo-tree-id5990 . -1) 386) nil (26039 51361 722209 436000) 0 nil] [nil nil ((385 . 399) (#("UQuaternion" 0 1 (fontified nil) 1 11 (face font-lock-type-face fontified nil)) . 385) (undo-tree-id5909 . -11) (undo-tree-id5910 . -11) (undo-tree-id5911 . -11) (undo-tree-id5912 . -11) (undo-tree-id5913 . -11) (undo-tree-id5914 . -11) (undo-tree-id5915 . 10) (385 . 386) (#("UnitQuaternion" 0 14 (fontified nil)) . -385) (385 . 399) (#("U" 0 1 (face font-lock-type-face fontified t)) . -385) (undo-tree-id5916 . -1) (undo-tree-id5917 . -1) (undo-tree-id5918 . -1) (undo-tree-id5919 . -1) (undo-tree-id5920 . -1) (undo-tree-id5921 . -1) (undo-tree-id5922 . -1) (undo-tree-id5923 . -1) 386) ((385 . 386) (#("UnitQuaternion" 0 14 (fontified nil)) . 385) (385 . 399) (#("U" 0 1 (fontified nil)) . 385) (385 . 396) (#("UnitQuaternion" 0 14 (face font-lock-type-face fontified t)) . 385) (undo-tree-id5924 . -14) (undo-tree-id5925 . -14) (undo-tree-id5926 . -14) (undo-tree-id5927 . -14) (undo-tree-id5928 . -14) (undo-tree-id5929 . -14) (undo-tree-id5930 . -14) (undo-tree-id5931 . -14) (undo-tree-id5932 . -14) (undo-tree-id5933 . -14) (undo-tree-id5934 . -14) (undo-tree-id5935 . -14) (undo-tree-id5936 . -14) (undo-tree-id5937 . -14) (t 26039 51335 299024 165000)) (26039 51335 281170 883000) 0 nil])
nil
([nil nil ((385 . 386)) nil (26039 51361 722199 188000) 0 nil])
nil
([nil nil ((385 . 386)) nil (26039 51361 722198 530000) 0 nil])
([nil nil ((385 . 399) (#("U" 0 1 (fontified nil)) . 385) (385 . 386) (#("UnitQuaternion" 0 14 (fontified nil)) . -385) (385 . 399) (#("U" 0 1 (face font-lock-type-face fontified t)) . -385) (undo-tree-id5968 . -1) (undo-tree-id5969 . -1) (undo-tree-id5970 . -1) (undo-tree-id5971 . -1) (undo-tree-id5972 . -1) (undo-tree-id5973 . -1) (undo-tree-id5974 . -1) (undo-tree-id5975 . -1) 386) nil (26039 51361 722197 347000) 0 nil])
([nil nil ((399 . 405)) nil (26039 51361 722190 462000) 0 nil])
([nil nil ((401 . 416) (#("from" 0 4 (fontified nil)) . 401) (401 . 405) (#("from_quaternion" 0 15 (fontified nil)) . -401) (401 . 416) (#("from" 0 4 (fontified t)) . -401) (undo-tree-id5954 . -4) (undo-tree-id5955 . -1) (undo-tree-id5956 . -1) (undo-tree-id5957 . -1) (undo-tree-id5958 . -2) (undo-tree-id5959 . -2) (undo-tree-id5960 . -3) (undo-tree-id5961 . -3) (undo-tree-id5962 . -3) (undo-tree-id5963 . -4) (undo-tree-id5964 . -4) (undo-tree-id5965 . -4) (undo-tree-id5966 . -4) (undo-tree-id5967 . -4) 405) nil (26039 51361 722188 735000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -416) (undo-tree-id5938 . -1) (undo-tree-id5939 . -1) (undo-tree-id5940 . -1) (undo-tree-id5941 . -1) (undo-tree-id5942 . -1) (undo-tree-id5943 . -1) (undo-tree-id5944 . -1) (undo-tree-id5945 . -1) (undo-tree-id5946 . -1) (undo-tree-id5947 . -1) (undo-tree-id5948 . -1) (undo-tree-id5949 . -1) (undo-tree-id5950 . -1) (undo-tree-id5951 . -1) (undo-tree-id5952 . -1) (undo-tree-id5953 . -1) 417) nil (26039 51361 722176 617000) 0 nil])
([nil nil ((416 . 417)) nil (26039 51361 722157 255000) 0 nil])
([nil nil ((448 . 449)) nil (26039 51361 722153 323000) 0 nil])
([nil nil ((#("Vector3, Vector4, " 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face fontified t) 4 5 (face font-lock-type-face fontified t) 5 6 (face font-lock-type-face fontified t) 6 7 (face font-lock-type-face fontified t) 7 9 (fontified t) 9 10 (face font-lock-type-face fontified t) 10 11 (face font-lock-type-face fontified t) 11 13 (face font-lock-type-face fontified t) 13 14 (face font-lock-type-face fontified t) 14 16 (face font-lock-type-face fontified t) 16 18 (fontified t)) . -52) (104 . 122) (#("         " 0 9 (fontified t)) . 652) (#("
           " 0 1 (fontified t) 1 12 (fontified t)) . 685) (#(" " 0 1 (fontified t)) . 707) (#("         " 0 9 (fontified t)) . 713) (#("
           " 0 1 (fontified t) 1 12 (fontified t)) . 735) (#(" " 0 1 (fontified t)) . 769) (775 . 776) (#("    " 0 4 (fontified t)) . 792) (#("    " 0 4 (fontified t)) . 1345) 381 (t 26039 51361 769022 643000)) nil (26039 51387 142260 903000) 0 nil])
([nil nil ((#("q" 0 1 (fontified t)) . -549) (undo-tree-id6020 . -1) (undo-tree-id6021 . -1) (undo-tree-id6022 . -1) (undo-tree-id6023 . -1) (undo-tree-id6024 . -1) (undo-tree-id6025 . -1) (undo-tree-id6026 . -1) (undo-tree-id6027 . -1) (undo-tree-id6028 . -1) (undo-tree-id6029 . -1) (undo-tree-id6030 . -1) (undo-tree-id6031 . -1) (undo-tree-id6032 . -1) (undo-tree-id6033 . -1) (undo-tree-id6034 . -1) (undo-tree-id6035 . -1) (undo-tree-id6036 . -1) (undo-tree-id6037 . -1) (undo-tree-id6038 . -1) (undo-tree-id6039 . -1) (undo-tree-id6040 . -1) (undo-tree-id6041 . -1) (undo-tree-id6042 . -1) (undo-tree-id6043 . -1) 550) nil (26039 51387 142258 48000) 0 nil])
([nil nil ((549 . 550)) nil (26039 51387 142241 51000) 0 nil])
([nil nil ((549 . 563) (#("U" 0 1 (fontified nil)) . 549) (549 . 550) (#("UnitQuaternion" 0 14 (fontified nil)) . -549) (549 . 563) (#("U" 0 1 (face font-lock-type-face fontified t)) . -549) (undo-tree-id6014 . -1) (undo-tree-id6015 . -1) (undo-tree-id6016 . -1) (undo-tree-id6017 . -1) (undo-tree-id6018 . -1) (undo-tree-id6019 . -1) 550) nil (26039 51387 142240 16000) 0 nil])
([nil nil ((563 . 565)) nil (26039 51387 142234 870000) 0 nil])
([nil nil ((#("L" 0 1 (face font-lock-type-face fontified t)) . -564) (undo-tree-id6005 . -1) (undo-tree-id6006 . -1) (undo-tree-id6007 . -1) (undo-tree-id6008 . -1) (undo-tree-id6009 . -1) (undo-tree-id6010 . -1) (undo-tree-id6011 . -1) (undo-tree-id6012 . -1) (undo-tree-id6013 . -1) 565) nil (26039 51387 142233 791000) 0 nil])
([nil nil ((564 . 566)) nil (26039 51387 142227 94000) 0 nil])
([nil nil ((#("L" 0 1 (face font-lock-type-face fontified t)) . -565) (undo-tree-id6000 . -1) (undo-tree-id6001 . -1) (undo-tree-id6002 . -1) (undo-tree-id6003 . -1) (undo-tree-id6004 . -1) 566) nil (26039 51387 142226 70000) 0 nil])
([nil nil ((565 . 567)) nil (26039 51387 142221 513000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 581 582 nil nil nil t #s(yas--exit 583 nil))) #s(yas--exit 583 nil) 72 nil #s(yas--field 1 581 582 nil nil nil t #s(yas--exit 583 nil)) nil nil)) (565 . 583) (#("from_quaternion(${1:q})$0" 0 25 (fontified nil)) . 565) (565 . 590) (#("fr" 0 2 (fontified nil)) . 565) (565 . 567) (#("from_quaternion(…)" 0 18 (fontified nil)) . -565) (565 . 583) (#("fr" 0 2 (fontified t)) . -565) (undo-tree-id5992 . -2) (undo-tree-id5993 . -1) (undo-tree-id5994 . -1) (undo-tree-id5995 . -2) (undo-tree-id5996 . -2) (undo-tree-id5997 . -2) (undo-tree-id5998 . -2) (undo-tree-id5999 . -2) 567) nil (26039 51387 142219 102000) 0 nil])
([nil nil ((#("q" 0 1 (fontified nil)) . 582) (undo-tree-id5991 . -1) (581 . 582)) nil (26039 51387 142208 201000) 0 nil])
([nil nil ((apply yas--snippet-revive 565 583 #s(yas--snippet nil (#s(yas--field 1 581 582 nil nil nil t #s(yas--exit 583 nil))) #s(yas--exit 583 nil) 72 nil #s(yas--field 1 581 582 nil nil nil t #s(yas--exit 583 nil)) nil nil))) nil (26039 51471 634902 45000) 0 nil])
([nil nil ((1560 . 1564) (#("    " 0 4 (fontified nil)) . 1559) (undo-tree-id6172 . -4) (undo-tree-id6173 . -4) (undo-tree-id6174 . -4) (1558 . 1564) (t 26039 51387 189021 183000)) nil (26039 51471 634901 269000) 0 nil])
([nil nil ((1564 . 1566)) nil (26039 51471 634898 63000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1563) (undo-tree-id6145 . -1) (undo-tree-id6146 . -1) (undo-tree-id6147 . -1) (undo-tree-id6148 . -1) (undo-tree-id6149 . -1) (undo-tree-id6150 . -1) (undo-tree-id6151 . -1) (undo-tree-id6152 . -1) (undo-tree-id6153 . -1) (undo-tree-id6154 . -1) (undo-tree-id6155 . -1) (undo-tree-id6156 . -1) (undo-tree-id6157 . -1) (#("p" 0 1 (fontified t)) . -1564) (undo-tree-id6158 . -1) (undo-tree-id6159 . -1) (undo-tree-id6160 . -1) (undo-tree-id6161 . -1) (undo-tree-id6162 . -1) (undo-tree-id6163 . -1) (undo-tree-id6164 . -1) (undo-tree-id6165 . -1) (undo-tree-id6166 . -1) (#("u" 0 1 (fontified t)) . -1565) (undo-tree-id6167 . -1) (undo-tree-id6168 . -1) (undo-tree-id6169 . -1) (undo-tree-id6170 . -1) (undo-tree-id6171 . -1) 1566) nil (26039 51471 634896 342000) 0 nil])
([nil nil ((1563 . 1564)) nil (26039 51471 634877 819000) 0 nil])
([nil nil ((1564 . 1580)) nil (26039 51471 634877 229000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -1579) (undo-tree-id6141 . -1) (undo-tree-id6142 . -1) (undo-tree-id6143 . -1) (undo-tree-id6144 . -1) 1580) nil (26039 51471 634876 379000) 0 nil])
([nil nil ((1579 . 1586)) nil (26039 51471 634873 54000) 0 nil])
([nil nil ((1586 . 1588)) nil (26039 51471 634872 481000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -1586) (undo-tree-id6125 . -1) (undo-tree-id6126 . -1) (undo-tree-id6127 . -1) (undo-tree-id6128 . -1) (undo-tree-id6129 . -1) (undo-tree-id6130 . -1) (undo-tree-id6131 . -1) (undo-tree-id6132 . -1) (undo-tree-id6133 . -1) (undo-tree-id6134 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -1587) (undo-tree-id6135 . -1) (undo-tree-id6136 . -1) (undo-tree-id6137 . -1) (undo-tree-id6138 . -1) (undo-tree-id6139 . -1) (undo-tree-id6140 . -1) 1588) nil (26039 51471 634871 145000) 0 nil])
([nil nil ((1586 . 1588)) nil (26039 51471 634859 793000) 0 nil])
([nil nil ((1587 . 1593)) nil (26039 51471 634858 982000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1592) (undo-tree-id6120 . -1) (undo-tree-id6121 . -1) (undo-tree-id6122 . -1) (undo-tree-id6123 . -1) (undo-tree-id6124 . -1) 1593) nil (26039 51471 634858 145000) 0 nil])
([nil nil ((1592 . 1593)) nil (26039 51471 634854 328000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1592) (undo-tree-id6109 . -1) (undo-tree-id6110 . -1) (undo-tree-id6111 . -1) (undo-tree-id6112 . -1) (undo-tree-id6113 . -1) (undo-tree-id6114 . -1) (undo-tree-id6115 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1593) (undo-tree-id6116 . -1) (undo-tree-id6117 . -1) (undo-tree-id6118 . 1) (undo-tree-id6119 . -1) 1594) nil (26039 51471 634853 118000) 0 nil])
([nil nil ((1592 . 1598)) nil (26039 51471 634845 171000) 0 nil])
([nil nil ((apply yas--snippet-revive 1597 1606 #s(yas--snippet nil nil #s(yas--exit 1605 nil) 73 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1605 nil) 73 nil nil nil nil)) (1597 . 1606) (#("Matrix3<$0>" 0 11 (fontified nil)) . 1597) (1597 . 1608) (#("M" 0 1 (fontified nil)) . 1597) (1597 . 1598) (#("Matrix3<…>" 0 10 (fontified nil)) . -1597) (1597 . 1607) (#("M" 0 1 (face font-lock-type-face fontified t)) . -1597) (undo-tree-id6104 . -1) (undo-tree-id6105 . -1) (undo-tree-id6106 . -1) (undo-tree-id6107 . -1) (undo-tree-id6108 . -1) 1598) nil (26039 51471 634843 769000) 0 nil])
([nil nil ((1605 . 1606)) nil (26039 51471 634837 959000) 0 nil])
([nil nil ((1605 . 1608) (#("f" 0 1 (fontified nil)) . 1605) (1605 . 1606) (#("f64" 0 3 (fontified nil)) . -1605) (1605 . 1608) (#("f" 0 1 (fontified t)) . -1605) (undo-tree-id6095 . -1) (undo-tree-id6096 . -1) (undo-tree-id6097 . -1) (undo-tree-id6098 . -1) (undo-tree-id6099 . -1) (undo-tree-id6100 . -1) (undo-tree-id6101 . -1) (undo-tree-id6102 . -1) (undo-tree-id6103 . -1) 1606) nil (26039 51471 634836 658000) 0 nil])
([nil nil ((1609 . 1612)) nil (26039 51471 634829 301000) 0 nil])
([nil nil ((1613 . 1617) (#("        " 0 8 (fontified nil)) . 1612) (1612 . 1620) (#("    " 0 4 (fontified nil)) . 1612) (undo-tree-id6092 . -4) (undo-tree-id6093 . -4) (undo-tree-id6094 . -4) (1611 . 1617)) nil (26039 51471 634828 311000) 0 nil])
([nil nil ((1612 . 1620)) nil (26039 51471 634825 216000) 0 nil])
([nil nil ((1620 . 1621)) nil (26039 51471 634824 639000) 0 nil])
([nil nil ((1620 . 1624) (#("s" 0 1 (fontified nil)) . 1620) (1620 . 1621) (#("self" 0 4 (fontified nil)) . -1620) (1620 . 1624) (#("s" 0 1 (fontified t)) . -1620) (undo-tree-id6090 . -1) (undo-tree-id6091 . -1) 1621) nil (26039 51471 634823 550000) 0 nil])
([nil nil ((1624 . 1625)) nil (26039 51471 634820 841000) 0 nil])
([nil nil ((1625 . 1633) (#("rotation" 0 8 (fontified nil)) . -1625) (1625 . 1633)) nil (26039 51471 634819 943000) 0 nil])
([nil nil ((1633 . 1638)) nil (26039 51471 634819 20000) 0 nil])
([nil nil ((#("rota" 0 4 (fontified t)) . -1634) (undo-tree-id6078 . -4) (undo-tree-id6079 . -1) (undo-tree-id6080 . -1) (undo-tree-id6081 . -1) (undo-tree-id6082 . -2) (undo-tree-id6083 . -2) (undo-tree-id6084 . -3) (undo-tree-id6085 . -3) (undo-tree-id6086 . -4) (undo-tree-id6087 . -4) (undo-tree-id6088 . -4) (undo-tree-id6089 . -4) 1638) nil (26039 51471 634817 993000) 0 nil])
([nil nil ((1634 . 1635)) nil (26039 51471 634809 210000) 0 nil])
([nil nil ((apply yas--snippet-revive 1634 1641 #s(yas--snippet nil nil #s(yas--exit 1641 nil) 74 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1641 nil) 74 nil nil nil nil)) (1634 . 1641) (#("clone()$0" 0 9 (fontified nil)) . 1634) (1634 . 1643) (#("c" 0 1 (fontified nil)) . 1634) (1634 . 1635) (#("clone() (as Clone)" 0 18 (fontified nil)) . -1634) (1634 . 1652) (#("c" 0 1 (fontified t)) . -1634) (undo-tree-id6073 . -1) (undo-tree-id6074 . -1) (undo-tree-id6075 . -1) (undo-tree-id6076 . -1) (undo-tree-id6077 . -1) 1635) nil (26039 51471 634807 847000) 0 nil])
([nil nil ((1641 . 1646)) nil (26039 51471 634802 55000) 0 nil])
([nil nil ((apply yas--snippet-revive 1642 1662 #s(yas--snippet nil nil #s(yas--exit 1662 nil) 75 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1662 nil) 75 nil nil nil nil)) (1642 . 1662) (#("to_rotation_matrix()$0" 0 22 (fontified nil)) . 1642) (1642 . 1664) (#("rota" 0 4 (fontified nil)) . 1642) (1642 . 1646) (#("to_rotation_matrix()" 0 20 (fontified nil)) . -1642) (1642 . 1662) (#("rota" 0 4 (fontified t)) . -1642) (undo-tree-id6057 . -4) (undo-tree-id6058 . -1) (undo-tree-id6059 . -1) (undo-tree-id6060 . -1) (undo-tree-id6061 . -1) (undo-tree-id6062 . -1) (undo-tree-id6063 . -2) (undo-tree-id6064 . -2) (undo-tree-id6065 . -2) (undo-tree-id6066 . -2) (undo-tree-id6067 . -3) (undo-tree-id6068 . -3) (undo-tree-id6069 . -4) (undo-tree-id6070 . -4) (undo-tree-id6071 . -4) (undo-tree-id6072 . -4) 1646) nil (26039 51471 634800 362000) 0 nil])
([nil nil ((1662 . 1663)) nil (26039 51471 634786 863000) 0 nil])
([nil nil ((1663 . 1664)) nil (26039 51471 634786 129000) 0 nil])
([nil nil ((apply yas--snippet-revive 1663 1669 #s(yas--snippet nil nil #s(yas--exit 1669 nil) 76 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1669 nil) 76 nil nil nil nil)) (1663 . 1669) (#("into()$0" 0 8 (fontified nil)) . 1663) (1663 . 1671) (#("i" 0 1 (fontified nil)) . 1663) (1663 . 1664) (#("into() (as Into)" 0 16 (fontified nil)) . -1663) (1663 . 1679) (#("i" 0 1 (fontified t)) . -1663) (undo-tree-id6052 . -1) (undo-tree-id6053 . -1) (undo-tree-id6054 . -1) (undo-tree-id6055 . -1) (undo-tree-id6056 . -1) 1664) nil (26039 51471 634784 486000) 0 nil])
([nil nil ((1669 . 1670)) nil (26039 51471 634777 164000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -1669) (undo-tree-id6044 . -1) (undo-tree-id6045 . -1) (undo-tree-id6046 . -1) (undo-tree-id6047 . -1) (undo-tree-id6048 . -1) (undo-tree-id6049 . -1) (undo-tree-id6050 . -1) (undo-tree-id6051 . -1) 1670) nil (26039 51471 634772 838000) 0 nil])
([nil nil ((#("into()" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-3-face) fontified t) 5 6 (face (rainbow-delimiters-depth-3-face) fontified t)) . -1663) (undo-tree-id6242 . -6) (undo-tree-id6243 . -6) (undo-tree-id6244 . -6) (undo-tree-id6245 . -6) (undo-tree-id6246 . -6) (undo-tree-id6247 . -6) (undo-tree-id6248 . -6) (undo-tree-id6249 . -6) (undo-tree-id6250 . -6) (undo-tree-id6251 . -6) (undo-tree-id6252 . -6) (undo-tree-id6253 . -6) (undo-tree-id6254 . -6) (undo-tree-id6255 . -6) (undo-tree-id6256 . -6) (undo-tree-id6257 . -6) (undo-tree-id6258 . -6) (undo-tree-id6259 . -6) (undo-tree-id6260 . -6) (undo-tree-id6261 . -6) (undo-tree-id6262 . -6) (undo-tree-id6263 . -6) (undo-tree-id6264 . -6) (undo-tree-id6265 . -6) (undo-tree-id6266 . -6) (undo-tree-id6267 . -6) (undo-tree-id6268 . -6) (undo-tree-id6269 . -6) 1669 (t 26039 51471 652349 653000)) nil (26039 51480 601773 820000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1662) (undo-tree-id6209 . -1) (undo-tree-id6210 . -1) (undo-tree-id6211 . -1) (undo-tree-id6212 . -1) (undo-tree-id6213 . -1) (undo-tree-id6214 . -1) (undo-tree-id6215 . -1) (undo-tree-id6216 . -1) (undo-tree-id6217 . -1) (undo-tree-id6218 . -1) (undo-tree-id6219 . -1) (undo-tree-id6220 . -1) (undo-tree-id6221 . -1) (undo-tree-id6222 . -1) (undo-tree-id6223 . -1) (undo-tree-id6224 . -1) (undo-tree-id6225 . -1) (undo-tree-id6226 . -1) (undo-tree-id6227 . -1) (undo-tree-id6228 . -1) (undo-tree-id6229 . -1) (undo-tree-id6230 . -1) (undo-tree-id6231 . -1) (undo-tree-id6232 . -1) (undo-tree-id6233 . -1) (undo-tree-id6234 . -1) (undo-tree-id6235 . -1) (undo-tree-id6236 . -1) (undo-tree-id6237 . -1) (undo-tree-id6238 . -1) (undo-tree-id6239 . -1) (undo-tree-id6240 . -1) (undo-tree-id6241 . -1) 1663) nil (26039 51480 601754 771000) 0 nil])
([nil nil ((#("f64>" 0 3 (face font-lock-type-face fontified t) 3 4 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1605) (undo-tree-id6203 . -4) (undo-tree-id6204 . -4) (undo-tree-id6205 . -4) (undo-tree-id6206 . -4) (undo-tree-id6207 . -4) (undo-tree-id6208 . -4) 1609) nil (26039 51480 601731 944000) 0 nil])
([nil nil ((#("Matrix3<" 0 7 (face font-lock-type-face fontified t) 7 8 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1597) (undo-tree-id6188 . -8) (undo-tree-id6189 . -8) (undo-tree-id6190 . -8) (undo-tree-id6191 . -8) (undo-tree-id6192 . -8) (undo-tree-id6193 . -8) (undo-tree-id6194 . -8) (undo-tree-id6195 . -8) (undo-tree-id6196 . -8) (undo-tree-id6197 . -8) (undo-tree-id6198 . -8) (undo-tree-id6199 . -8) (undo-tree-id6200 . -8) (undo-tree-id6201 . -8) (undo-tree-id6202 . -8) 1605) nil (26039 51480 601726 444000) 0 nil])
([nil nil ((1597 . 1598)) nil (26039 51480 601716 190000) 0 nil])
([nil nil ((apply yas--snippet-revive 1597 1608 #s(yas--snippet nil nil #s(yas--exit 1607 nil) 77 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1607 nil) 77 nil nil nil nil)) (1597 . 1608) (#("Rotation3<$0>" 0 13 (fontified nil)) . 1597) (1597 . 1610) (#("R" 0 1 (fontified nil)) . 1597) (1597 . 1598) (#("Rotation3<…>" 0 12 (fontified nil)) . -1597) (1597 . 1609) (#("R" 0 1 (face font-lock-type-face fontified t)) . -1597) (undo-tree-id6184 . -1) (undo-tree-id6185 . -1) (undo-tree-id6186 . -1) (undo-tree-id6187 . -1) 1598) nil (26039 51480 601714 744000) 0 nil])
([nil nil ((1607 . 1608)) nil (26039 51480 601709 469000) 0 nil])
([nil nil ((1607 . 1610) (#("f" 0 1 (fontified nil)) . 1607) (1607 . 1608) (#("f64" 0 3 (fontified nil)) . -1607) (1607 . 1610) (#("f" 0 1 (fontified t)) . -1607) (undo-tree-id6175 . -1) (undo-tree-id6176 . -1) (undo-tree-id6177 . -1) (undo-tree-id6178 . -1) (undo-tree-id6179 . -1) (undo-tree-id6180 . -1) (undo-tree-id6181 . -1) (undo-tree-id6182 . -1) (undo-tree-id6183 . -1) 1608) nil (26039 51480 601705 931000) 0 nil])
([nil nil ((593 . 597) (#("    " 0 4 (fontified nil)) . 592) (undo-tree-id6479 . -4) (undo-tree-id6480 . -4) (undo-tree-id6481 . -4) (undo-tree-id6482 . -4) (591 . 597) (t 26039 51480 609015 805000)) nil (26039 51539 851931 830000) 0 nil])
([nil nil ((597 . 609)) nil (26039 51539 851927 778000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -608) (undo-tree-id6473 . -1) (undo-tree-id6474 . -1) (undo-tree-id6475 . -1) (undo-tree-id6476 . -1) (undo-tree-id6477 . -1) (undo-tree-id6478 . -1) 609) nil (26039 51539 851926 906000) 0 nil])
([nil nil ((608 . 617)) nil (26039 51539 851922 285000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -615) (undo-tree-id6463 . -1) (undo-tree-id6464 . -1) (undo-tree-id6465 . -1) (undo-tree-id6466 . -1) (undo-tree-id6467 . -1) (undo-tree-id6468 . -1) (undo-tree-id6469 . -1) (#("a" 0 1 (fontified t)) . -616) (undo-tree-id6470 . -1) (undo-tree-id6471 . -1) (undo-tree-id6472 . -1) 617) nil (26039 51539 851920 991000) 0 nil])
([nil nil ((615 . 622)) nil (26039 51539 851913 224000) 0 nil])
([nil nil ((621 . 622)) nil (26039 51539 851912 667000) 0 nil])
([nil nil ((622 . 623)) nil (26039 51539 851912 83000) 0 nil])
([nil nil ((apply yas--snippet-revive 621 627 #s(yas--snippet nil nil #s(yas--exit 626 nil) 78 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 626 nil) 78 nil nil nil nil)) (621 . 627) (#("vec![$0]" 0 8 (fontified nil)) . 621) (621 . 629) (#("ve" 0 2 (fontified nil)) . 621) (621 . 623) (#("vec![…]" 0 7 (fontified nil)) . -621) (621 . 628) (#("ve" 0 2 (fontified t)) . -621) (undo-tree-id6457 . -2) (undo-tree-id6458 . -1) (undo-tree-id6459 . -1) (undo-tree-id6460 . -1) (undo-tree-id6461 . -2) (undo-tree-id6462 . -2) 623) nil (26039 51539 851910 619000) 0 nil])
([nil nil ((#("!" 0 1 (fontified t)) . -624) (undo-tree-id6441 . -1) (undo-tree-id6442 . -1) (undo-tree-id6443 . -1) (undo-tree-id6444 . -1) (undo-tree-id6445 . -1) (undo-tree-id6446 . -1) (undo-tree-id6447 . -1) (undo-tree-id6448 . -1) (undo-tree-id6449 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -625) (undo-tree-id6450 . -1) (undo-tree-id6451 . -1) (undo-tree-id6452 . -1) (undo-tree-id6453 . -1) (undo-tree-id6454 . -1) (undo-tree-id6455 . -1) (undo-tree-id6456 . -1) 626) nil (26039 51539 851903 193000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t)) . -621) (undo-tree-id6383 . -1) (undo-tree-id6384 . -1) (undo-tree-id6385 . -1) (undo-tree-id6386 . -1) (undo-tree-id6387 . -1) (undo-tree-id6388 . -1) (undo-tree-id6389 . -1) (undo-tree-id6390 . -1) (undo-tree-id6391 . -1) (undo-tree-id6392 . -1) (undo-tree-id6393 . -1) (undo-tree-id6394 . -1) (undo-tree-id6395 . -1) (undo-tree-id6396 . -1) (undo-tree-id6397 . -1) (undo-tree-id6398 . -1) (undo-tree-id6399 . -1) (undo-tree-id6400 . -1) (undo-tree-id6401 . -1) (undo-tree-id6402 . -1) (#("e" 0 1 (fontified t)) . -622) (undo-tree-id6403 . -1) (undo-tree-id6404 . -1) (undo-tree-id6405 . -1) (undo-tree-id6406 . -1) (undo-tree-id6407 . -1) (undo-tree-id6408 . -1) (undo-tree-id6409 . -1) (undo-tree-id6410 . -1) (undo-tree-id6411 . -1) (undo-tree-id6412 . -1) (undo-tree-id6413 . -1) (undo-tree-id6414 . -1) (undo-tree-id6415 . -1) (undo-tree-id6416 . -1) (undo-tree-id6417 . -1) (undo-tree-id6418 . -1) (undo-tree-id6419 . -1) (undo-tree-id6420 . -1) (#("c" 0 1 (fontified t)) . -623) (undo-tree-id6421 . -1) (undo-tree-id6422 . -1) (undo-tree-id6423 . -1) (undo-tree-id6424 . -1) (undo-tree-id6425 . -1) (undo-tree-id6426 . -1) (undo-tree-id6427 . -1) (undo-tree-id6428 . -1) (undo-tree-id6429 . -1) (undo-tree-id6430 . -1) (undo-tree-id6431 . -1) (undo-tree-id6432 . -1) (undo-tree-id6433 . -1) (undo-tree-id6434 . -1) (undo-tree-id6435 . -1) (undo-tree-id6436 . -1) (#("]" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -624) (undo-tree-id6437 . -1) (undo-tree-id6438 . -1) (undo-tree-id6439 . -1) (undo-tree-id6440 . -1) 625) nil (26039 51539 851889 324000) 0 nil])
([nil nil ((621 . 627)) nil (26039 51539 851849 9000) 0 nil])
([nil nil ((621 . 641) (#("vector" 0 6 (fontified nil)) . 621) (621 . 627) (#("vector: Vector3<f64>" 0 20 (fontified nil)) . -621) (621 . 641) (#("vector" 0 6 (fontified t)) . -621) (undo-tree-id6362 . -6) (undo-tree-id6363 . -6) (undo-tree-id6364 . -1) (undo-tree-id6365 . -1) (undo-tree-id6366 . -2) (undo-tree-id6367 . -2) (undo-tree-id6368 . -2) (undo-tree-id6369 . -3) (undo-tree-id6370 . -3) (undo-tree-id6371 . -4) (undo-tree-id6372 . -4) (undo-tree-id6373 . -5) (undo-tree-id6374 . -5) (undo-tree-id6375 . -6) (undo-tree-id6376 . -6) (undo-tree-id6377 . -6) (undo-tree-id6378 . -6) (undo-tree-id6379 . -6) (undo-tree-id6380 . -6) (undo-tree-id6381 . -6) (undo-tree-id6382 . -6) 627) nil (26039 51539 851847 211000) 0 nil])
([nil nil ((642 . 645)) nil (26039 51539 851830 971000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -644) (undo-tree-id6352 . -1) (undo-tree-id6353 . -1) (undo-tree-id6354 . -1) (undo-tree-id6355 . -1) (undo-tree-id6356 . -1) (undo-tree-id6357 . -1) (undo-tree-id6358 . -1) (undo-tree-id6359 . -1) (undo-tree-id6360 . -1) (undo-tree-id6361 . -1) 645) nil (26039 51539 851829 768000) 0 nil])
([nil nil ((644 . 646)) nil (26039 51539 851821 435000) 0 nil])
([nil nil ((645 . 649) (#("S" 0 1 (fontified nil)) . 645) (645 . 646) (#("Self" 0 4 (fontified nil)) . -645) (645 . 649) (#("S" 0 1 (face font-lock-type-face fontified t)) . -645) (undo-tree-id6345 . -1) (undo-tree-id6346 . -1) (undo-tree-id6347 . -1) (undo-tree-id6348 . -1) (undo-tree-id6349 . -1) (undo-tree-id6350 . -1) (undo-tree-id6351 . -1) 646) nil (26039 51539 851820 68000) 0 nil])
([nil nil ((649 . 652)) nil (26039 51539 851813 563000) 0 nil])
([nil nil ((653 . 657) (#("        " 0 8 (fontified nil)) . 652) (652 . 660) (#("    " 0 4 (fontified nil)) . 652) (undo-tree-id6341 . -4) (undo-tree-id6342 . -4) (undo-tree-id6343 . -4) (undo-tree-id6344 . -4) (651 . 657)) nil (26039 51539 851812 412000) 0 nil])
([nil nil ((652 . 660)) nil (26039 51539 851808 412000) 0 nil])
([nil nil ((660 . 661)) nil (26039 51539 851807 744000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 676 716 nil nil nil t #s(yas--exit 718 nil))) #s(yas--exit 718 nil) 79 nil #s(yas--field 1 676 716 nil nil nil t #s(yas--exit 718 nil)) nil nil)) (660 . 680) (#("SO3 { rotation: ${1:()} }$0" 0 27 (fontified nil)) . 660) (660 . 687) (#("S" 0 1 (fontified nil)) . 660) (660 . 661) (#("SO3 {…}" 0 7 (fontified nil)) . -660) (660 . 667) (#("S" 0 1 (face font-lock-type-face fontified t)) . -660) (undo-tree-id6336 . -1) (undo-tree-id6337 . -1) (undo-tree-id6338 . -1) (undo-tree-id6339 . -1) (undo-tree-id6340 . -1) 661) nil (26039 51539 851806 361000) 0 nil])
([nil nil ((677 . 679) (#("()" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 677) (undo-tree-id6335 . -2) (676 . 677)) nil (26039 51539 851799 840000) 0 nil])
([nil nil ((#("U" 0 1 (face font-lock-type-face fontified t)) . -676) (undo-tree-id6305 . -1) (undo-tree-id6306 . -1) (undo-tree-id6307 . -1) (undo-tree-id6308 . -1) (undo-tree-id6309 . -1) (undo-tree-id6310 . -1) (undo-tree-id6311 . -1) (undo-tree-id6312 . -1) (undo-tree-id6313 . -1) (undo-tree-id6314 . -1) (undo-tree-id6315 . -1) (undo-tree-id6316 . -1) (#("I" 0 1 (face font-lock-type-face fontified t)) . -677) (undo-tree-id6317 . -1) (undo-tree-id6318 . -1) (undo-tree-id6319 . -1) (undo-tree-id6320 . -1) (undo-tree-id6321 . -1) (undo-tree-id6322 . -1) (undo-tree-id6323 . -1) (undo-tree-id6324 . -1) (undo-tree-id6325 . -1) (undo-tree-id6326 . -1) (#("U" 0 1 (face font-lock-type-face fontified t)) . -678) (undo-tree-id6327 . -1) (undo-tree-id6328 . -1) (undo-tree-id6329 . -1) (undo-tree-id6330 . -1) (undo-tree-id6331 . -1) (undo-tree-id6332 . -1) (undo-tree-id6333 . -1) (undo-tree-id6334 . -1) 679) nil (26039 51539 851796 542000) 0 nil])
([nil nil ((676 . 677)) nil (26039 51539 851775 329000) 0 nil])
([nil nil ((676 . 690) (#("U" 0 1 (fontified nil)) . 676) (undo-tree-id6295 . -1) (676 . 677) (#("UnitQuaternion" 0 14 (fontified nil)) . -676) (undo-tree-id6296 . -14) (676 . 690) (#("U" 0 1 (face font-lock-type-face fontified t)) . -676) (undo-tree-id6297 . -1) (undo-tree-id6298 . -1) (undo-tree-id6299 . -1) (undo-tree-id6300 . -1) (undo-tree-id6301 . -1) (undo-tree-id6302 . -1) (undo-tree-id6303 . -1) (undo-tree-id6304 . -1) 677) nil (26039 51539 851773 896000) 0 nil])
([nil nil ((690 . 696)) nil (26039 51539 851765 236000) 0 nil])
([nil nil ((692 . 708) (#("from" 0 4 (fontified nil)) . 692) (undo-tree-id6278 . -4) (692 . 696) (#("from_scaled_axis" 0 16 (fontified nil)) . -692) (undo-tree-id6279 . -16) (692 . 708) (#("from" 0 4 (fontified t)) . -692) (undo-tree-id6280 . -4) (undo-tree-id6281 . -4) (undo-tree-id6282 . -4) (undo-tree-id6283 . -1) (undo-tree-id6284 . -1) (undo-tree-id6285 . -1) (undo-tree-id6286 . -1) (undo-tree-id6287 . -2) (undo-tree-id6288 . -2) (undo-tree-id6289 . -3) (undo-tree-id6290 . -3) (undo-tree-id6291 . -4) (undo-tree-id6292 . -4) (undo-tree-id6293 . -4) (undo-tree-id6294 . -4) 696) nil (26039 51539 851763 150000) 0 nil])
([nil nil ((708 . 710)) nil (26039 51539 851748 194000) 0 nil])
([nil nil ((709 . 710)) nil (26039 51539 851746 807000) 0 nil])
([nil nil ((709 . 715) (#("v" 0 1 (fontified nil)) . 709) (709 . 710) (#("vector" 0 6 (fontified nil)) . -709) (709 . 715) (#("v" 0 1 (fontified t)) . -709) (undo-tree-id6270 . -1) (undo-tree-id6271 . -1) (undo-tree-id6272 . -1) (undo-tree-id6273 . -1) (undo-tree-id6274 . -1) (undo-tree-id6275 . -1) (undo-tree-id6276 . -1) (undo-tree-id6277 . -1) 710) nil (26039 51539 851741 847000) 0 nil])
([nil nil ((apply yas--snippet-revive 660 718 #s(yas--snippet nil (#s(yas--field 1 676 716 nil nil nil t #s(yas--exit 718 nil))) #s(yas--exit 718 nil) 79 nil #s(yas--field 1 676 716 nil nil nil t #s(yas--exit 718 nil)) nil nil))) nil (26039 51816 566041 961000) 0 nil])
([nil nil ((#("normalize()" 0 9 (fontified t) 9 10 (face (rainbow-delimiters-depth-3-face) fontified t) 10 11 (face (rainbow-delimiters-depth-3-face) fontified t)) . -1561) (undo-tree-id6560 . -11) (undo-tree-id6561 . -11) (undo-tree-id6562 . -11) (undo-tree-id6563 . -11) (undo-tree-id6564 . -11) (undo-tree-id6565 . -11) (undo-tree-id6566 . -11) (undo-tree-id6567 . -11) (undo-tree-id6568 . -11) (undo-tree-id6569 . -11) (undo-tree-id6570 . -11) (undo-tree-id6571 . -11) 1572 (t 26039 51817 78996 459000)) nil (26039 52098 553102 118000) 0 nil] [nil nil ((apply -24 179 491 undo--wrap-and-run-primitive-undo 179 491 ((" " . 179) (487 . 490) (474 . 477) (383 . 386) (366 . 369) (308 . 311) (298 . 301) (243 . 246) (183 . 186) (179 . 180)))) ((apply 24 179 467 undo--wrap-and-run-primitive-undo 179 467 ((" " . 179) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 183) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 243) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 298) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 308) (#<marker at 416 in lib.rs> . -1) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 366) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 383) (#<marker at 416 in lib.rs> . -3) (#<marker at 416 in lib.rs> . -2) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 474) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 487) (179 . 180) 178))) (26039 51784 241298 331000) 0 nil])
([nil nil ((#("vector()." 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-3-face) fontified t) 7 8 (face (rainbow-delimiters-depth-3-face) fontified t) 8 9 (fontified t)) . -1552) (undo-tree-id6546 . -8) (undo-tree-id6547 . -9) (undo-tree-id6548 . -9) (undo-tree-id6549 . -9) (undo-tree-id6550 . -9) (undo-tree-id6551 . -9) (undo-tree-id6552 . -9) (undo-tree-id6553 . -9) (undo-tree-id6554 . -9) (undo-tree-id6555 . -9) (undo-tree-id6556 . -9) (undo-tree-id6557 . -9) (undo-tree-id6558 . -9) (undo-tree-id6559 . -9) 1561) nil (26039 52098 553092 500000) 0 nil])
nil
([nil nil ((#("rotation." 0 9 (fontified t)) . -1543) (undo-tree-id6531 . -9) (undo-tree-id6532 . -9) (undo-tree-id6533 . -9) (undo-tree-id6534 . -9) (undo-tree-id6535 . -9) (undo-tree-id6536 . -9) (undo-tree-id6537 . -9) (undo-tree-id6538 . -9) (undo-tree-id6539 . -9) (undo-tree-id6540 . -9) (undo-tree-id6541 . -9) (undo-tree-id6542 . -9) (undo-tree-id6543 . -9) (undo-tree-id6544 . -9) (undo-tree-id6545 . -9) 1552) nil (26039 52098 553081 389000) 0 nil])
([nil nil ((#("self." 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t)) . -1538) (undo-tree-id6515 . -5) (undo-tree-id6516 . -5) (undo-tree-id6517 . -5) (undo-tree-id6518 . -5) (undo-tree-id6519 . -5) (undo-tree-id6520 . -5) (undo-tree-id6521 . -5) (undo-tree-id6522 . -5) (undo-tree-id6523 . -5) (undo-tree-id6524 . -5) (undo-tree-id6525 . -5) (undo-tree-id6526 . -5) (undo-tree-id6527 . -5) (undo-tree-id6528 . -5) (undo-tree-id6529 . -5) (undo-tree-id6530 . -5) 1543) nil (26039 52098 553068 801000) 0 nil])
([nil nil ((#("scalar() * " 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-3-face) fontified t) 7 8 (face (rainbow-delimiters-depth-3-face) fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t)) . -1527) (undo-tree-id6498 . -11) (undo-tree-id6499 . -11) (undo-tree-id6500 . -11) (undo-tree-id6501 . -11) (undo-tree-id6502 . -11) (undo-tree-id6503 . -11) (undo-tree-id6504 . -11) (undo-tree-id6505 . -11) (undo-tree-id6506 . -11) (undo-tree-id6507 . -11) (undo-tree-id6508 . -11) (undo-tree-id6509 . -11) (undo-tree-id6510 . -11) (undo-tree-id6511 . -11) (undo-tree-id6512 . -11) (undo-tree-id6513 . -11) (undo-tree-id6514 . -11) 1538) nil (26039 52098 553046 273000) 0 nil])
([nil nil ((1527 . 1528)) nil (26039 52098 553025 587000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -1527) (undo-tree-id6495 . -1) (undo-tree-id6496 . -1) (undo-tree-id6497 . -1) 1528) nil (26039 52098 553024 375000) 0 nil])
([nil nil ((1527 . 1528)) nil (26039 52098 553019 618000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -1527) (undo-tree-id6492 . -1) (undo-tree-id6493 . -1) (undo-tree-id6494 . -1) 1528) nil (26039 52098 553017 873000) 0 nil])
([nil nil ((1527 . 1530)) nil (26039 52098 553012 106000) 0 nil])
([nil nil ((apply yas--snippet-revive 1527 1540 #s(yas--snippet nil nil #s(yas--exit 1540 nil) 84 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1540 nil) 84 nil nil nil nil)) (1527 . 1540) (#("scaled_axis()$0" 0 15 (fontified nil)) . 1527) (1527 . 1542) (#("sca" 0 3 (fontified nil)) . 1527) (1527 . 1530) (#("scaled_axis()" 0 13 (fontified nil)) . -1527) (1527 . 1540) (#("sca" 0 3 (fontified t)) . -1527) (undo-tree-id6483 . -3) (undo-tree-id6484 . -1) (undo-tree-id6485 . -1) (undo-tree-id6486 . -2) (undo-tree-id6487 . -2) (undo-tree-id6488 . -3) (undo-tree-id6489 . -3) (undo-tree-id6490 . -3) (undo-tree-id6491 . -3) 1530) nil (26039 52098 553007 304000) 0 nil])
([nil nil ((#("    pub fn from_quaternion(q: Quaternion<f64>) -> Self {
        SO3 { rotation: UnitQuaternion::from_quaternion(q) }
    }" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 26 (face font-lock-function-name-face fontified t) 26 27 (face (rainbow-delimiters-depth-2-face) fontified t) 27 28 (face font-lock-variable-name-face fontified t) 28 30 (fontified t) 30 40 (face font-lock-type-face fontified t) 40 41 (face (rainbow-delimiters-depth-3-face) fontified t) 41 44 (face font-lock-type-face fontified t) 44 45 (face (rainbow-delimiters-depth-3-face) fontified t) 45 46 (face (rainbow-delimiters-depth-2-face) fontified t) 46 48 (fontified t) 48 49 (fontified t syntax-table (1)) 49 50 (fontified t) 50 54 (face font-lock-type-face fontified t) 54 55 (fontified t) 55 56 (face (rainbow-delimiters-depth-2-face) fontified t) 56 57 (fontified t) 57 65 (fontified t) 65 68 (face font-lock-type-face fontified t) 68 69 (fontified t) 69 70 (face (rainbow-delimiters-depth-3-face) fontified t) 70 71 (fontified t) 71 79 (face font-lock-variable-name-face fontified t) 79 81 (fontified t) 81 95 (face font-lock-type-face fontified t) 95 97 (fontified t) 97 112 (fontified t) 112 113 (face (rainbow-delimiters-depth-4-face) fontified t) 113 114 (fontified t) 114 115 (face (rainbow-delimiters-depth-4-face) fontified t) 115 116 (fontified t) 116 117 (face (rainbow-delimiters-depth-3-face) fontified t) 117 118 (fontified t) 118 122 (fontified t) 122 123 (face (rainbow-delimiters-depth-2-face) fontified t)) . 468) (undo-tree-id6760 . -123) (undo-tree-id6761 . -123) (undo-tree-id6762 . -123) (undo-tree-id6763 . -123) (undo-tree-id6764 . -123) (undo-tree-id6765 . -123) (undo-tree-id6766 . -123) (undo-tree-id6767 . -123) (undo-tree-id6768 . -123) (undo-tree-id6769 . -123) (undo-tree-id6770 . -123) (undo-tree-id6771 . -123) (undo-tree-id6772 . -123) (undo-tree-id6773 . -123) (undo-tree-id6774 . -61) (undo-tree-id6775 . -60) (undo-tree-id6776 . -59) (undo-tree-id6777 . -58) (undo-tree-id6778 . -57) (undo-tree-id6779 . -123) (t 26039 52098 572313 625000)) nil (26039 52174 309506 810000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -467) (undo-tree-id6717 . -1) (undo-tree-id6718 . -1) (undo-tree-id6719 . -1) (undo-tree-id6720 . -1) (undo-tree-id6721 . -1) (undo-tree-id6722 . -1) (undo-tree-id6723 . -1) (undo-tree-id6724 . -1) (undo-tree-id6725 . -1) (undo-tree-id6726 . -1) (undo-tree-id6727 . -1) (undo-tree-id6728 . -1) (undo-tree-id6729 . -1) (undo-tree-id6730 . -1) (undo-tree-id6731 . -1) (undo-tree-id6732 . -1) (undo-tree-id6733 . -1) (undo-tree-id6734 . -1) (undo-tree-id6735 . -1) (undo-tree-id6736 . -1) (undo-tree-id6737 . -1) (undo-tree-id6738 . -1) (undo-tree-id6739 . -1) (undo-tree-id6740 . -1) (undo-tree-id6741 . -1) (undo-tree-id6742 . -1) (undo-tree-id6743 . -1) (undo-tree-id6744 . -1) (undo-tree-id6745 . -1) (undo-tree-id6746 . -1) (undo-tree-id6747 . -1) (undo-tree-id6748 . -1) (undo-tree-id6749 . -1) (undo-tree-id6750 . -1) (undo-tree-id6751 . -1) (undo-tree-id6752 . -1) (undo-tree-id6753 . -1) (undo-tree-id6754 . -1) (undo-tree-id6755 . -1) (undo-tree-id6756 . -1) (undo-tree-id6757 . -1) (undo-tree-id6758 . -1) (undo-tree-id6759 . -1) 468) nil (26039 52174 309489 927000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -467) (undo-tree-id6715 . -1) (undo-tree-id6716 . -1) 468) nil (26039 52174 308856 335000) 0 nil])
([nil nil ((#("    pub fn from_vector(vector: Vector4<f64>) -> Self {
        SO3 {
            rotation: UnitQuaternion::from_quaternion(Quaternion::from_vector(vector)),
        }
    }" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 22 (face font-lock-function-name-face fontified t) 22 23 (face (rainbow-delimiters-depth-2-face) fontified t) 23 29 (face font-lock-variable-name-face fontified t) 29 31 (fontified t) 31 38 (face font-lock-type-face fontified t) 38 39 (face (rainbow-delimiters-depth-3-face) fontified t) 39 42 (face font-lock-type-face fontified t) 42 43 (face (rainbow-delimiters-depth-3-face) fontified t) 43 44 (face (rainbow-delimiters-depth-2-face) fontified t) 44 46 (fontified t) 46 47 (syntax-table (1) fontified t) 47 48 (fontified t) 48 52 (face font-lock-type-face fontified t) 52 53 (fontified t) 53 54 (face (rainbow-delimiters-depth-2-face) fontified t) 54 55 (fontified t) 55 59 (fontified t) 59 63 (fontified t) 63 66 (face font-lock-type-face fontified t) 66 67 (fontified t) 67 68 (face (rainbow-delimiters-depth-3-face) fontified t) 68 69 (fontified t) 69 73 (fontified t) 73 80 (fontified t) 80 81 (fontified t) 81 89 (face font-lock-variable-name-face fontified t) 89 91 (fontified t) 91 105 (face font-lock-type-face fontified t) 105 107 (fontified t) 107 122 (fontified t) 122 123 (face (rainbow-delimiters-depth-4-face) fontified t) 123 133 (face font-lock-type-face fontified t) 133 135 (fontified t) 135 146 (fontified t) 146 147 (face (rainbow-delimiters-depth-5-face) fontified t) 147 153 (fontified t) 153 154 (face (rainbow-delimiters-depth-5-face) fontified t) 154 155 (face (rainbow-delimiters-depth-4-face) fontified t) 155 157 (fontified t) 157 161 (fontified t) 161 164 (fontified t) 164 165 (fontified t) 165 166 (face (rainbow-delimiters-depth-3-face) fontified t) 166 167 (fontified t) 167 171 (fontified t) 171 172 (face (rainbow-delimiters-depth-2-face) fontified t)) . 294) (undo-tree-id6701 . -172) (undo-tree-id6702 . -166) (undo-tree-id6703 . -73) (undo-tree-id6704 . -73) (undo-tree-id6705 . -4) (undo-tree-id6706 . -172) (undo-tree-id6707 . -172) (undo-tree-id6708 . -172) (undo-tree-id6709 . -172) (undo-tree-id6710 . -171) (undo-tree-id6711 . -159) (undo-tree-id6712 . -158) (undo-tree-id6713 . -157) (undo-tree-id6714 . -172)) nil (26039 52174 308853 23000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -293) (undo-tree-id6572 . -1) (undo-tree-id6573 . -1) (undo-tree-id6574 . -1) (undo-tree-id6575 . -1) (undo-tree-id6576 . -1) (undo-tree-id6577 . -1) (undo-tree-id6578 . -1) (undo-tree-id6579 . -1) (undo-tree-id6580 . -1) (undo-tree-id6581 . -1) (undo-tree-id6582 . -1) (undo-tree-id6583 . -1) (undo-tree-id6584 . -1) (undo-tree-id6585 . -1) (undo-tree-id6586 . -1) (undo-tree-id6587 . -1) (undo-tree-id6588 . -1) (undo-tree-id6589 . -1) (undo-tree-id6590 . -1) (undo-tree-id6591 . -1) (undo-tree-id6592 . -1) (undo-tree-id6593 . -1) (undo-tree-id6594 . -1) (undo-tree-id6595 . -1) (undo-tree-id6596 . -1) (undo-tree-id6597 . -1) (undo-tree-id6598 . -1) (undo-tree-id6599 . -1) (undo-tree-id6600 . -1) (undo-tree-id6601 . -1) (undo-tree-id6602 . -1) (undo-tree-id6603 . -1) (undo-tree-id6604 . -1) (undo-tree-id6605 . -1) (undo-tree-id6606 . -1) (undo-tree-id6607 . -1) (undo-tree-id6608 . -1) (undo-tree-id6609 . -1) (undo-tree-id6610 . -1) (undo-tree-id6611 . -1) (undo-tree-id6612 . -1) (undo-tree-id6613 . -1) (undo-tree-id6614 . -1) (undo-tree-id6615 . -1) (undo-tree-id6616 . -1) (undo-tree-id6617 . -1) (undo-tree-id6618 . -1) (undo-tree-id6619 . -1) (undo-tree-id6620 . -1) (undo-tree-id6621 . -1) (undo-tree-id6622 . -1) (undo-tree-id6623 . -1) (undo-tree-id6624 . -1) (undo-tree-id6625 . -1) (undo-tree-id6626 . -1) (undo-tree-id6627 . -1) (undo-tree-id6628 . -1) (undo-tree-id6629 . -1) (undo-tree-id6630 . -1) (undo-tree-id6631 . -1) (undo-tree-id6632 . -1) (undo-tree-id6633 . -1) (undo-tree-id6634 . -1) (undo-tree-id6635 . -1) (undo-tree-id6636 . -1) (undo-tree-id6637 . -1) (undo-tree-id6638 . -1) (undo-tree-id6639 . -1) (undo-tree-id6640 . -1) (undo-tree-id6641 . -1) (undo-tree-id6642 . -1) (undo-tree-id6643 . -1) (undo-tree-id6644 . -1) (undo-tree-id6645 . -1) (undo-tree-id6646 . -1) (undo-tree-id6647 . -1) (undo-tree-id6648 . -1) (undo-tree-id6649 . -1) (#("
" 0 1 (fontified t)) . -294) (undo-tree-id6650 . -1) (undo-tree-id6651 . -1) (undo-tree-id6652 . -1) (undo-tree-id6653 . -1) (undo-tree-id6654 . -1) (undo-tree-id6655 . -1) (undo-tree-id6656 . -1) (undo-tree-id6657 . -1) (undo-tree-id6658 . -1) (undo-tree-id6659 . -1) (undo-tree-id6660 . -1) (undo-tree-id6661 . -1) (undo-tree-id6662 . -1) (undo-tree-id6663 . -1) (undo-tree-id6664 . -1) (undo-tree-id6665 . -1) (undo-tree-id6666 . -1) (undo-tree-id6667 . -1) (undo-tree-id6668 . -1) (undo-tree-id6669 . -1) (undo-tree-id6670 . -1) (undo-tree-id6671 . -1) (undo-tree-id6672 . -1) (undo-tree-id6673 . -1) (undo-tree-id6674 . -1) (undo-tree-id6675 . -1) (undo-tree-id6676 . -1) (undo-tree-id6677 . -1) (undo-tree-id6678 . -1) (undo-tree-id6679 . -1) (undo-tree-id6680 . -1) (undo-tree-id6681 . -1) (undo-tree-id6682 . -1) (undo-tree-id6683 . -1) (undo-tree-id6684 . -1) (undo-tree-id6685 . -1) (undo-tree-id6686 . -1) (undo-tree-id6687 . -1) (undo-tree-id6688 . -1) (undo-tree-id6689 . -1) (undo-tree-id6690 . -1) (undo-tree-id6691 . -1) (undo-tree-id6692 . -1) (undo-tree-id6693 . -1) (undo-tree-id6694 . -1) (undo-tree-id6695 . -1) (undo-tree-id6696 . -1) (undo-tree-id6697 . -1) (undo-tree-id6698 . -1) (undo-tree-id6699 . -1) (undo-tree-id6700 . -1) 295) nil (26039 52174 308836 237000) 0 nil])
([nil nil ((#("f64" 0 3 (face font-lock-type-face fontified t)) . -220) (undo-tree-id6952 . -3) (undo-tree-id6953 . -3) (undo-tree-id6954 . -3) (undo-tree-id6955 . -3) 223 (t 26039 52174 358975 935000)) nil (26039 52269 651398 70000) 0 nil])
([nil nil ((#("k: " 0 1 (face font-lock-variable-name-face fontified t) 1 3 (fontified t)) . -217) (undo-tree-id6948 . -3) (undo-tree-id6949 . -3) (undo-tree-id6950 . -3) (undo-tree-id6951 . -3) 220) nil (26039 52269 651394 599000) 0 nil])
([nil nil ((#("f64, " 0 3 (face font-lock-type-face fontified t) 3 5 (fontified t)) . -212) (undo-tree-id6944 . -5) (undo-tree-id6945 . -5) (undo-tree-id6946 . -5) (undo-tree-id6947 . -5) 217) nil (26039 52269 651390 728000) 0 nil])
([nil nil ((#("j: " 0 1 (face font-lock-variable-name-face fontified t) 1 3 (fontified t)) . -209) (undo-tree-id6940 . -3) (undo-tree-id6941 . -3) (undo-tree-id6942 . -3) (undo-tree-id6943 . -3) 212) nil (26039 52269 651387 279000) 0 nil])
([nil nil ((#("f64, " 0 3 (face font-lock-type-face fontified t) 3 5 (fontified t)) . -204) (undo-tree-id6936 . -5) (undo-tree-id6937 . -5) (undo-tree-id6938 . -5) (undo-tree-id6939 . -5) 209) nil (26039 52269 651383 692000) 0 nil])
([nil nil ((#("i: " 0 1 (face font-lock-variable-name-face fontified t) 1 3 (fontified t)) . -201) (undo-tree-id6932 . -3) (undo-tree-id6933 . -3) (undo-tree-id6934 . -3) (undo-tree-id6935 . -3) 204) nil (26039 52269 651380 308000) 0 nil])
([nil nil ((#("f64, " 0 3 (face font-lock-type-face fontified t) 3 5 (fontified t)) . -196) (undo-tree-id6928 . -5) (undo-tree-id6929 . -5) (undo-tree-id6930 . -5) (undo-tree-id6931 . -5) 201) nil (26039 52269 651376 864000) 0 nil])
([nil nil ((#("w: " 0 1 (face font-lock-variable-name-face fontified t) 1 3 (fontified t)) . -193) (undo-tree-id6924 . -3) (undo-tree-id6925 . -3) (undo-tree-id6926 . -3) (undo-tree-id6927 . -3) 196) nil (26039 52269 651373 11000) 0 nil])
([nil nil ((193 . 201)) nil (26039 52269 651369 753000) 0 nil])
([nil nil ((#("I" 0 1 (face font-lock-type-face fontified t)) . -200) (undo-tree-id6923 . -1) 201) nil (26039 52269 651368 963000) 0 nil])
([nil nil ((#("U" 0 1 (face font-lock-type-face fontified t)) . -199) (undo-tree-id6922 . -1) 200) nil (26039 52269 651367 501000) 0 nil])
([nil nil ((199 . 200)) nil (26039 52269 651366 226000) 0 nil])
([nil nil ((apply yas--snippet-revive 199 208 #s(yas--snippet nil nil #s(yas--exit 207 nil) 85 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 207 nil) 85 nil nil nil nil)) (199 . 208) (#("Vector3<$0>" 0 11 (fontified nil)) . 199) (199 . 210) (#("V" 0 1 (fontified nil)) . 199) (199 . 200) (#("Vector3<…>" 0 10 (fontified nil)) . -199) (199 . 209) (#("V" 0 1 (face font-lock-type-face fontified t)) . -199) (undo-tree-id6921 . -1) 200) nil (26039 52269 651365 104000) 0 nil])
([nil nil ((207 . 208)) nil (26039 52269 651362 769000) 0 nil])
([nil nil ((207 . 210) (#("f" 0 1 (fontified nil)) . 207) (207 . 208) (#("f64" 0 3 (fontified nil)) . -207) (207 . 210) (#("f" 0 1 (fontified t)) . -207) (undo-tree-id6919 . -1) (undo-tree-id6920 . -1) 208) nil (26039 52269 651361 477000) 0 nil])
([nil nil ((211 . 221)) nil (26039 52269 651358 914000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -220) (undo-tree-id6917 . -1) (undo-tree-id6918 . -1) 221) nil (26039 52269 651358 119000) 0 nil])
([nil nil ((220 . 221)) nil (26039 52269 651356 196000) 0 nil])
([nil nil ((220 . 223) (#("f" 0 1 (fontified nil)) . 220) (220 . 221) (#("f64" 0 3 (fontified nil)) . -220) (220 . 223) (#("f" 0 1 (fontified t)) . -220) (undo-tree-id6916 . -1) 221) nil (26039 52269 651355 244000) 0 nil])
([nil nil ((#("Self::from_vector(Vector4::new(i, j, k, w))" 0 4 (face font-lock-type-face fontified t) 4 6 (fontified t) 6 17 (fontified t) 17 18 (face (rainbow-delimiters-depth-3-face) fontified t) 18 25 (face font-lock-type-face fontified t) 25 27 (fontified t) 27 30 (fontified t) 30 31 (face (rainbow-delimiters-depth-4-face) fontified t) 31 40 (fontified t) 40 41 (fontified t) 41 42 (face (rainbow-delimiters-depth-4-face) fontified t) 42 43 (face (rainbow-delimiters-depth-3-face) fontified t)) . 243) (undo-tree-id6913 . -29) (undo-tree-id6914 . -13) (undo-tree-id6915 . -13)) nil (26039 52269 651353 174000) 0 nil])
([nil nil ((243 . 244)) nil (26039 52269 651350 784000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 258 268 nil nil nil t #s(yas--exit 269 nil))) #s(yas--exit 269 nil) 86 nil #s(yas--field 1 258 268 nil nil nil t #s(yas--exit 269 nil)) nil nil)) (243 . 263) (#("SO3 { rotation: ${1:()} }$0" 0 27 (fontified nil)) . 243) (243 . 270) (#("S" 0 1 (fontified nil)) . 243) (243 . 244) (#("SO3 {…}" 0 7 (fontified nil)) . -243) (243 . 250) (#("S" 0 1 (face font-lock-type-face fontified t)) . -243) (undo-tree-id6911 . -1) (undo-tree-id6912 . -1) 244) nil (26039 52269 651349 655000) 0 nil])
([nil nil ((260 . 268) (#("              " 0 14 (fontified nil)) . 259) (undo-tree-id6907 . -8) (undo-tree-id6908 . -8) (267 . 273) (259 . 268) (#(" " 0 1 (fontified nil)) . 259) (#(" " 0 1 (fontified nil)) . 258) (undo-tree-id6909 . -1) (undo-tree-id6910 . -1) (#("()" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 260) (259 . 260)) nil (26039 52269 651345 807000) 0 nil])
([nil nil ((apply yas--snippet-revive 243 269 #s(yas--snippet nil (#s(yas--field 1 258 268 nil nil nil t #s(yas--exit 269 nil))) #s(yas--exit 269 nil) 86 nil #s(yas--field 1 258 268 nil nil nil t #s(yas--exit 269 nil)) nil nil))) nil (26039 52269 651341 595000) 0 nil])
([nil nil ((249 . 261) (#(" " 0 1 (fontified nil)) . 248) (undo-tree-id6906 . -1) (249 . 250)) nil (26039 52269 651340 875000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -270) (undo-tree-id6905 . -1) 271) nil (26039 52269 651339 324000) 0 nil])
([nil nil ((270 . 271)) nil (26039 52269 651337 761000) 0 nil])
([nil nil ((271 . 272)) nil (26039 52269 651337 210000) 0 nil])
([nil nil ((271 . 285) (#("U" 0 1 (fontified nil)) . 271) (271 . 272) (#("UnitQuaternion" 0 14 (fontified nil)) . -271) (271 . 285) (#("U" 0 1 (face font-lock-type-face fontified t)) . -271) (undo-tree-id6904 . -1) 272) nil (26039 52269 651336 282000) 0 nil])
([nil nil ((285 . 287)) nil (26039 52269 651334 293000) 0 nil])
([nil nil ((287 . 291)) nil (26039 52269 651333 639000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -288) (undo-tree-id6901 . -1) (#("o" 0 1 (fontified t)) . -289) (undo-tree-id6902 . -1) (#("r" 0 1 (fontified t)) . -290) (undo-tree-id6903 . -1) 291) nil (26039 52269 651332 783000) 0 nil])
([nil nil ((288 . 291)) nil (26039 52269 651329 749000) 0 nil])
([nil nil ((287 . 302) (#("from" 0 4 (fontified nil)) . 287) (287 . 291) (#("from_axis_angle" 0 15 (fontified nil)) . -287) (287 . 302) (#("from" 0 4 (fontified t)) . -287) (undo-tree-id6900 . -4) 291) nil (26039 52269 651328 719000) 0 nil])
([nil nil ((302 . 304)) nil (26039 52269 651326 802000) 0 nil])
([nil nil ((303 . 311)) nil (26039 52269 651326 270000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -310) (undo-tree-id6898 . -1) (undo-tree-id6899 . -1) 311) nil (26039 52269 651325 521000) 0 nil])
([nil nil ((310 . 314)) nil (26039 52269 651323 687000) 0 nil])
([nil nil ((#("from" 0 4 (fontified t)) . -310) (undo-tree-id6896 . -4) (undo-tree-id6897 . -4) 314) nil (26039 52269 651322 947000) 0 nil])
([nil nil ((#("Unit::" 0 4 (face font-lock-type-face fontified t) 4 6 (fontified t)) . -304) (undo-tree-id6894 . -6) (undo-tree-id6895 . -6) 310) nil (26039 52269 651320 914000) 0 nil])
([nil nil ((304 . 305)) nil (26039 52269 651318 957000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -304) (undo-tree-id6892 . -1) (undo-tree-id6893 . -1) 305) nil (26039 52269 651318 227000) 0 nil])
([nil nil ((304 . 308)) nil (26039 52269 651316 158000) 0 nil])
([nil nil ((104 . 110) (304 . 304) (304 . 308) (#("Unit" 0 4 (fontified nil)) . 304) (304 . 308) (#("Unit (use nalgebra::Unit)" 0 25 (fontified nil)) . -304) (304 . 329) (#("Unit" 0 4 (face font-lock-type-face fontified t)) . -304) (undo-tree-id6890 . -4) (undo-tree-id6891 . -4) 308) nil (26039 52269 651314 736000) 0 nil])
([nil nil ((314 . 320)) nil (26039 52269 651311 936000) 0 nil])
([nil nil ((320 . 324)) nil (26039 52269 651311 332000) 0 nil])
([nil nil ((#("nor" 0 3 (fontified t)) . -321) (undo-tree-id6870 . -3) (undo-tree-id6871 . -3) (undo-tree-id6872 . -1) (undo-tree-id6873 . -1) (undo-tree-id6874 . -1) (undo-tree-id6875 . -2) (undo-tree-id6876 . -2) (undo-tree-id6877 . -3) (undo-tree-id6878 . -3) (undo-tree-id6879 . -3) (undo-tree-id6880 . -3) (undo-tree-id6881 . -3) (undo-tree-id6882 . -3) (undo-tree-id6883 . -3) (undo-tree-id6884 . -3) (undo-tree-id6885 . -3) (undo-tree-id6886 . -3) (undo-tree-id6887 . -3) (undo-tree-id6888 . -3) (undo-tree-id6889 . -3) 324) nil (26039 52269 651310 6000) 0 nil])
([nil nil ((#("from_" 0 5 (fontified t)) . -316) (undo-tree-id6842 . -5) (undo-tree-id6843 . -5) (undo-tree-id6844 . -4) (undo-tree-id6845 . -4) (undo-tree-id6846 . -4) (undo-tree-id6847 . -4) (undo-tree-id6848 . -4) (undo-tree-id6849 . -5) (undo-tree-id6850 . -5) (undo-tree-id6851 . -5) (undo-tree-id6852 . -5) (undo-tree-id6853 . -5) (undo-tree-id6854 . -5) (undo-tree-id6855 . -5) (undo-tree-id6856 . -5) (undo-tree-id6857 . -5) (undo-tree-id6858 . -5) (undo-tree-id6859 . -5) (undo-tree-id6860 . -5) (undo-tree-id6861 . -5) (undo-tree-id6862 . -5) (undo-tree-id6863 . -5) (undo-tree-id6864 . -5) (undo-tree-id6865 . -5) (undo-tree-id6866 . -5) (undo-tree-id6867 . -5) (undo-tree-id6868 . -5) (undo-tree-id6869 . -5) 321) nil (26039 52269 651291 101000) 0 nil])
([nil nil ((316 . 319)) nil (26039 52269 651129 835000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 330 334 nil nil nil t #s(yas--exit 335 nil))) #s(yas--exit 335 nil) 87 nil #s(yas--field 1 330 334 nil nil nil t #s(yas--exit 335 nil)) nil nil)) (316 . 336) (#("new_normalize(${1:value})$0" 0 27 (fontified nil)) . 316) (316 . 343) (#("new" 0 3 (fontified nil)) . 316) (316 . 319) (#("new_normalize(…)" 0 16 (fontified nil)) . -316) (316 . 332) (#("new" 0 3 (fontified t)) . -316) (undo-tree-id6828 . -3) (undo-tree-id6829 . -3) (undo-tree-id6830 . -1) (undo-tree-id6831 . -1) (undo-tree-id6832 . -1) (undo-tree-id6833 . -2) (undo-tree-id6834 . -3) (undo-tree-id6835 . -3) (undo-tree-id6836 . -3) (undo-tree-id6837 . -3) (undo-tree-id6838 . -3) (undo-tree-id6839 . -3) (undo-tree-id6840 . -3) (undo-tree-id6841 . -3) 319) nil (26039 52269 651128 35000) 0 nil])
([nil nil ((#("value" 0 5 (fontified nil)) . 331) (undo-tree-id6827 . -5) (330 . 331)) nil (26039 52269 651116 858000) 0 nil])
([nil nil ((#("V" 0 1 (face font-lock-type-face fontified t)) . -330) (undo-tree-id6819 . -1) (undo-tree-id6820 . -1) (undo-tree-id6821 . -1) (undo-tree-id6822 . -1) (undo-tree-id6823 . -1) (undo-tree-id6824 . -1) (undo-tree-id6825 . -1) (undo-tree-id6826 . -1) 331) nil (26039 52269 651114 912000) 0 nil])
([nil nil ((330 . 332)) nil (26039 52269 651108 97000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t)) . -330) (undo-tree-id6800 . -1) (undo-tree-id6801 . -1) (undo-tree-id6802 . -1) (undo-tree-id6803 . -1) (undo-tree-id6804 . -1) (undo-tree-id6805 . -1) (undo-tree-id6806 . -1) (undo-tree-id6807 . -1) (undo-tree-id6808 . -1) (undo-tree-id6809 . -1) (undo-tree-id6810 . -1) (undo-tree-id6811 . -1) (#("e" 0 1 (fontified t)) . -331) (undo-tree-id6812 . -1) (undo-tree-id6813 . -1) (undo-tree-id6814 . -1) (undo-tree-id6815 . -1) (undo-tree-id6816 . -1) (undo-tree-id6817 . -1) (undo-tree-id6818 . -1) 332) nil (26039 52269 651106 626000) 0 nil])
([nil nil ((330 . 332)) nil (26039 52269 651093 494000) 0 nil])
([nil nil ((330 . 334) (#("ax" 0 2 (fontified nil)) . 330) (undo-tree-id6788 . -2) (330 . 332) (#("axis" 0 4 (fontified nil)) . -330) (undo-tree-id6789 . -4) (330 . 334) (#("ax" 0 2 (fontified t)) . -330) (undo-tree-id6790 . -2) (undo-tree-id6791 . -2) (undo-tree-id6792 . -2) (undo-tree-id6793 . -1) (undo-tree-id6794 . -1) (undo-tree-id6795 . -2) (undo-tree-id6796 . -2) (undo-tree-id6797 . -2) (undo-tree-id6798 . -2) (undo-tree-id6799 . -2) 332) nil (26039 52269 651091 819000) 0 nil])
([nil nil ((apply yas--snippet-revive 316 335 #s(yas--snippet nil (#s(yas--field 1 330 334 nil nil nil t #s(yas--exit 335 nil))) #s(yas--exit 335 nil) 87 nil #s(yas--field 1 330 334 nil nil nil t #s(yas--exit 335 nil)) nil nil))) nil (26039 52269 651082 99000) 0 nil])
([nil nil ((335 . 338)) nil (26039 52269 651080 994000) 0 nil])
([nil nil ((337 . 342) (#("a" 0 1 (fontified nil)) . 337) (337 . 338) (#("angle" 0 5 (fontified nil)) . -337) (337 . 342) (#("a" 0 1 (fontified t)) . -337) (undo-tree-id6780 . -1) (undo-tree-id6781 . -1) (undo-tree-id6782 . -1) (undo-tree-id6783 . -1) (undo-tree-id6784 . -1) (undo-tree-id6785 . -1) (undo-tree-id6786 . -1) (undo-tree-id6787 . -1) 338) nil (26039 52269 651076 658000) 0 nil])
([nil nil ((495 . 499) (#("    " 0 4 (fontified nil)) . 494) (undo-tree-id7204 . -4) (undo-tree-id7205 . -4) (undo-tree-id7206 . -4) (undo-tree-id7207 . -4) (494 . 499) (#("    " 0 4 (fontified nil)) . 493) (493 . 497) (493 . 494) (t 26039 52269 668970 460000)) nil (26039 52894 362962 28000) 0 nil])
([nil nil ((494 . 498)) nil (26039 52894 362537 505000) 0 nil])
([nil nil ((498 . 511)) nil (26039 52894 362536 945000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -510) (undo-tree-id7201 . -1) (undo-tree-id7202 . -1) (undo-tree-id7203 . -1) 511) nil (26039 52894 362536 65000) 0 nil])
([nil nil ((510 . 513)) nil (26039 52894 362533 282000) 0 nil])
([nil nil ((#("a" 0 1 (face font-lock-function-name-face fontified t)) . -512) (undo-tree-id7196 . -1) (undo-tree-id7197 . -1) (undo-tree-id7198 . -1) (undo-tree-id7199 . -1) (undo-tree-id7200 . -1) 513) nil (26039 52894 362532 369000) 0 nil])
([nil nil ((512 . 525)) nil (26039 52894 362469 211000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-function-name-face fontified t)) . -522) (undo-tree-id7169 . -1) (undo-tree-id7170 . -1) (undo-tree-id7171 . -1) (undo-tree-id7172 . -1) (undo-tree-id7173 . -1) (undo-tree-id7174 . -1) (undo-tree-id7175 . -1) (undo-tree-id7176 . -1) (undo-tree-id7177 . -1) (undo-tree-id7178 . -1) (undo-tree-id7179 . -1) (undo-tree-id7180 . -1) (#("r" 0 1 (face font-lock-function-name-face fontified t)) . -523) (undo-tree-id7181 . -1) (undo-tree-id7182 . -1) (undo-tree-id7183 . -1) (undo-tree-id7184 . -1) (undo-tree-id7185 . -1) (undo-tree-id7186 . -1) (undo-tree-id7187 . -1) (undo-tree-id7188 . -1) (undo-tree-id7189 . -1) (#("x" 0 1 (face font-lock-function-name-face fontified t)) . -524) (undo-tree-id7190 . -1) (undo-tree-id7191 . -1) (undo-tree-id7192 . -1) (undo-tree-id7193 . -1) (undo-tree-id7194 . -1) (undo-tree-id7195 . -1) 525) nil (26039 52894 362467 208000) 0 nil])
([nil nil ((522 . 527)) nil (26039 52894 362103 591000) 0 nil])
([nil nil ((526 . 527)) nil (26039 52894 362103 3000) 0 nil])
([nil nil ((#("R" 0 1 (face font-lock-type-face fontified t)) . -526) (undo-tree-id7156 . -1) (undo-tree-id7157 . -1) (undo-tree-id7158 . -1) (undo-tree-id7159 . -1) (undo-tree-id7160 . -1) (undo-tree-id7161 . -1) (undo-tree-id7162 . -1) (undo-tree-id7163 . -1) (undo-tree-id7164 . -1) (undo-tree-id7165 . -1) (undo-tree-id7166 . -1) (undo-tree-id7167 . -1) (undo-tree-id7168 . -1) 527) nil (26039 52894 362101 832000) 0 nil])
([nil nil ((526 . 533)) nil (26039 52894 362092 471000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -528) (undo-tree-id7042 . -1) (undo-tree-id7043 . -1) (undo-tree-id7044 . -1) (undo-tree-id7045 . -1) (undo-tree-id7046 . -1) (undo-tree-id7047 . -1) (undo-tree-id7048 . -1) (undo-tree-id7049 . -1) (undo-tree-id7050 . -1) (undo-tree-id7051 . -1) (undo-tree-id7052 . -1) (undo-tree-id7053 . -1) (undo-tree-id7054 . -1) (undo-tree-id7055 . -1) (undo-tree-id7056 . -1) (undo-tree-id7057 . -1) (undo-tree-id7058 . -1) (undo-tree-id7059 . -1) (undo-tree-id7060 . -1) (undo-tree-id7061 . -1) (undo-tree-id7062 . -1) (undo-tree-id7063 . -1) (undo-tree-id7064 . -1) (undo-tree-id7065 . -1) (undo-tree-id7066 . -1) (undo-tree-id7067 . -1) (undo-tree-id7068 . -1) (undo-tree-id7069 . -1) (undo-tree-id7070 . -1) (undo-tree-id7071 . -1) (undo-tree-id7072 . -1) (undo-tree-id7073 . -1) (undo-tree-id7074 . -1) (undo-tree-id7075 . -1) (#("t" 0 1 (fontified t)) . -529) (undo-tree-id7076 . -1) (undo-tree-id7077 . -1) (undo-tree-id7078 . -1) (undo-tree-id7079 . -1) (undo-tree-id7080 . -1) (undo-tree-id7081 . -1) (undo-tree-id7082 . -1) (undo-tree-id7083 . -1) (undo-tree-id7084 . -1) (undo-tree-id7085 . -1) (undo-tree-id7086 . -1) (undo-tree-id7087 . -1) (undo-tree-id7088 . -1) (undo-tree-id7089 . -1) (undo-tree-id7090 . -1) (undo-tree-id7091 . -1) (undo-tree-id7092 . -1) (undo-tree-id7093 . -1) (undo-tree-id7094 . -1) (undo-tree-id7095 . -1) (undo-tree-id7096 . -1) (undo-tree-id7097 . -1) (undo-tree-id7098 . -1) (undo-tree-id7099 . -1) (undo-tree-id7100 . -1) (undo-tree-id7101 . -1) (undo-tree-id7102 . -1) (undo-tree-id7103 . -1) (undo-tree-id7104 . -1) (#("i" 0 1 (fontified t)) . -530) (undo-tree-id7105 . -1) (undo-tree-id7106 . -1) (undo-tree-id7107 . -1) (undo-tree-id7108 . -1) (undo-tree-id7109 . -1) (undo-tree-id7110 . -1) (undo-tree-id7111 . -1) (undo-tree-id7112 . -1) (undo-tree-id7113 . -1) (undo-tree-id7114 . -1) (undo-tree-id7115 . -1) (undo-tree-id7116 . -1) (undo-tree-id7117 . -1) (undo-tree-id7118 . -1) (undo-tree-id7119 . -1) (undo-tree-id7120 . -1) (undo-tree-id7121 . -1) (undo-tree-id7122 . -1) (undo-tree-id7123 . -1) (undo-tree-id7124 . -1) (undo-tree-id7125 . -1) (undo-tree-id7126 . -1) (undo-tree-id7127 . -1) (#("o" 0 1 (fontified t)) . -531) (undo-tree-id7128 . -1) (undo-tree-id7129 . -1) (undo-tree-id7130 . -1) (undo-tree-id7131 . -1) (undo-tree-id7132 . -1) (undo-tree-id7133 . -1) (undo-tree-id7134 . -1) (undo-tree-id7135 . -1) (undo-tree-id7136 . -1) (undo-tree-id7137 . -1) (undo-tree-id7138 . -1) (undo-tree-id7139 . -1) (undo-tree-id7140 . -1) (undo-tree-id7141 . -1) (undo-tree-id7142 . -1) (undo-tree-id7143 . -1) (undo-tree-id7144 . -1) (#("n" 0 1 (fontified t)) . -532) (undo-tree-id7145 . -1) (undo-tree-id7146 . -1) (undo-tree-id7147 . -1) (undo-tree-id7148 . -1) (undo-tree-id7149 . -1) (undo-tree-id7150 . -1) (undo-tree-id7151 . -1) (undo-tree-id7152 . -1) (undo-tree-id7153 . -1) (undo-tree-id7154 . -1) (undo-tree-id7155 . -1) 533) nil (26039 52894 362087 539000) 0 nil])
([nil nil ((528 . 537)) nil (26039 52894 362008 58000) 0 nil])
([nil nil ((#("M" 0 1 (face font-lock-type-face fontified t)) . -536) (undo-tree-id7037 . -1) (undo-tree-id7038 . -1) (undo-tree-id7039 . -1) (undo-tree-id7040 . -1) (undo-tree-id7041 . -1) 537) nil (26039 52894 362007 116000) 0 nil])
([nil nil ((536 . 538)) nil (26039 52894 362003 234000) 0 nil])
([nil nil ((apply yas--snippet-revive 536 547 #s(yas--snippet nil nil #s(yas--exit 546 nil) 94 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 546 nil) 94 nil nil nil nil)) (536 . 547) (#("Rotation3<$0>" 0 13 (fontified nil)) . 536) (536 . 549) (#("Ro" 0 2 (fontified nil)) . 536) (536 . 538) (#("Rotation3<…>" 0 12 (fontified nil)) . -536) (536 . 548) (#("Ro" 0 2 (face font-lock-type-face fontified t)) . -536) (undo-tree-id7028 . -2) (undo-tree-id7029 . -1) (undo-tree-id7030 . -1) (undo-tree-id7031 . -1) (undo-tree-id7032 . -2) (undo-tree-id7033 . -2) (undo-tree-id7034 . -2) (undo-tree-id7035 . -2) (undo-tree-id7036 . -2) 538) nil (26039 52894 362001 749000) 0 nil])
([nil nil ((546 . 547)) nil (26039 52894 361994 210000) 0 nil])
([nil nil ((546 . 549) (#("f" 0 1 (fontified nil)) . 546) (546 . 547) (#("f64" 0 3 (fontified nil)) . -546) (546 . 549) (#("f" 0 1 (fontified t)) . -546) (undo-tree-id7018 . -1) (undo-tree-id7019 . -1) (undo-tree-id7020 . -1) (undo-tree-id7021 . -1) (undo-tree-id7022 . -1) (undo-tree-id7023 . -1) (undo-tree-id7024 . -1) (undo-tree-id7025 . -1) (undo-tree-id7026 . -1) (undo-tree-id7027 . -1) 547) nil (26039 52894 361992 808000) 0 nil])
([nil nil ((551 . 555)) nil (26039 52894 361983 531000) 0 nil])
([nil nil ((#("C" 0 1 (face font-lock-type-face fontified t)) . -554) (undo-tree-id7015 . -1) (undo-tree-id7016 . -1) (undo-tree-id7017 . -1) 555) nil (26039 52894 361982 751000) 0 nil])
([nil nil ((554 . 557)) nil (26039 52894 361980 18000) 0 nil])
([nil nil ((555 . 559) (#("Se" 0 2 (fontified nil)) . 555) (555 . 557) (#("Self" 0 4 (fontified nil)) . -555) (555 . 559) (#("Se" 0 2 (face font-lock-type-face fontified t)) . -555) (undo-tree-id7006 . -2) (undo-tree-id7007 . -1) (undo-tree-id7008 . -1) (undo-tree-id7009 . -1) (undo-tree-id7010 . -1) (undo-tree-id7011 . -1) (undo-tree-id7012 . -2) (undo-tree-id7013 . -2) (undo-tree-id7014 . -2) 557) nil (26039 52894 361978 647000) 0 nil])
([nil nil ((559 . 562)) nil (26039 52894 361971 139000) 0 nil])
([nil nil ((563 . 567) (#("        " 0 8 (fontified nil)) . 562) (562 . 570) (#("    " 0 4 (fontified nil)) . 562) (undo-tree-id7002 . -4) (undo-tree-id7003 . -4) (undo-tree-id7004 . -4) (undo-tree-id7005 . -4) (561 . 567)) nil (26039 52894 361970 9000) 0 nil])
([nil nil ((562 . 570)) nil (26039 52894 361966 126000) 0 nil])
([nil nil ((570 . 571)) nil (26039 52894 361965 492000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 586 633 nil nil nil t #s(yas--exit 635 nil))) #s(yas--exit 635 nil) 95 nil #s(yas--field 1 586 633 nil nil nil t #s(yas--exit 635 nil)) nil nil)) (570 . 590) (#("SO3 { rotation: ${1:()} }$0" 0 27 (fontified nil)) . 570) (570 . 597) (#("S" 0 1 (fontified nil)) . 570) (570 . 571) (#("SO3 {…}" 0 7 (fontified nil)) . -570) (570 . 577) (#("S" 0 1 (face font-lock-type-face fontified t)) . -570) (undo-tree-id6997 . -1) (undo-tree-id6998 . -1) (undo-tree-id6999 . -1) (undo-tree-id7000 . -1) (undo-tree-id7001 . -1) 571) nil (26039 52894 361964 62000) 0 nil])
([nil nil ((#("()" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 587) (undo-tree-id6996 . -2) (586 . 587)) nil (26039 52894 361958 598000) 0 nil])
([nil nil ((586 . 600) (#("U" 0 1 (fontified nil)) . 586) (undo-tree-id6987 . -1) (586 . 587) (#("UnitQuaternion" 0 14 (fontified nil)) . -586) (undo-tree-id6988 . -14) (586 . 600) (#("U" 0 1 (face font-lock-type-face fontified t)) . -586) (undo-tree-id6989 . -1) (undo-tree-id6990 . -1) (undo-tree-id6991 . -1) (undo-tree-id6992 . -1) (undo-tree-id6993 . -1) (undo-tree-id6994 . -1) (undo-tree-id6995 . -1) 587) nil (26039 52894 361956 313000) 0 nil])
([nil nil ((600 . 606)) nil (26039 52894 361948 606000) 0 nil])
([nil nil ((602 . 622) (#("from" 0 4 (fontified nil)) . 602) (undo-tree-id6968 . -4) (602 . 606) (#("from_rotation_matrix" 0 20 (fontified nil)) . -602) (undo-tree-id6969 . -20) (602 . 622) (#("from" 0 4 (fontified t)) . -602) (undo-tree-id6970 . -4) (undo-tree-id6971 . -4) (undo-tree-id6972 . -1) (undo-tree-id6973 . -1) (undo-tree-id6974 . -1) (undo-tree-id6975 . -2) (undo-tree-id6976 . -2) (undo-tree-id6977 . -2) (undo-tree-id6978 . -3) (undo-tree-id6979 . -3) (undo-tree-id6980 . -3) (undo-tree-id6981 . -4) (undo-tree-id6982 . -4) (undo-tree-id6983 . -4) (undo-tree-id6984 . -4) (undo-tree-id6985 . -4) (undo-tree-id6986 . -4) 606) nil (26039 52894 361946 668000) 0 nil])
([nil nil ((622 . 624)) nil (26039 52894 361931 331000) 0 nil])
([nil nil ((623 . 624)) nil (26039 52894 361930 53000) 0 nil])
([nil nil ((623 . 624) (623 . 631) (#("r" 0 1 (fontified nil)) . 623) (623 . 624) (#("&rotation" 0 9 (fontified nil)) . -623) (623 . 632) (#("r" 0 1 (fontified t)) . -623) (undo-tree-id6956 . -1) (undo-tree-id6957 . -1) (undo-tree-id6958 . -1) (undo-tree-id6959 . -1) (undo-tree-id6960 . -1) (undo-tree-id6961 . -1) (undo-tree-id6962 . -1) (undo-tree-id6963 . -1) (undo-tree-id6964 . -1) (undo-tree-id6965 . -1) (undo-tree-id6966 . -1) (undo-tree-id6967 . -1) 624) nil (26039 52894 361926 87000) 0 nil])
([nil nil ((apply yas--snippet-revive 570 635 #s(yas--snippet nil (#s(yas--field 1 586 633 nil nil nil t #s(yas--exit 635 nil))) #s(yas--exit 635 nil) 95 nil #s(yas--field 1 586 633 nil nil nil t #s(yas--exit 635 nil)) nil nil))) nil (26039 52901 474498 842000) 0 nil])
([nil nil ((#("use nalgebra::geometry::Quaternion;" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 12 (face font-lock-constant-face fontified t) 12 14 (fontified t) 14 15 (face font-lock-constant-face fontified t) 15 17 (face font-lock-constant-face fontified t) 17 18 (face font-lock-constant-face fontified t) 18 21 (face font-lock-constant-face fontified t) 21 22 (face font-lock-constant-face fontified t) 22 24 (fontified t) 24 34 (face font-lock-type-face fontified t) 34 35 (fontified t)) . 1) (undo-tree-id7209 . -35) (undo-tree-id7210 . -35) (undo-tree-id7211 . -35) (undo-tree-id7212 . -35) (undo-tree-id7213 . -35) (undo-tree-id7214 . -35) (undo-tree-id7215 . -35) (undo-tree-id7216 . -35) (undo-tree-id7217 . -35) (undo-tree-id7218 . -35) (undo-tree-id7219 . -35) (undo-tree-id7220 . -35) (undo-tree-id7221 . -35) (t 26039 52894 412267 897000)) nil (26039 52901 474496 757000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1) (undo-tree-id7208 . -1)) nil (26039 52901 474457 704000) 0 nil])
([nil nil ((#("Vector4," 0 7 (face font-lock-type-face fontified t) 7 8 (fontified t)) . -61) (undo-tree-id7222 . -8) (undo-tree-id7223 . -8) (undo-tree-id7224 . -8) (undo-tree-id7225 . -8) (undo-tree-id7226 . -8) (undo-tree-id7227 . -8) (undo-tree-id7228 . -8) (undo-tree-id7229 . -8) (undo-tree-id7230 . -8) (undo-tree-id7231 . -8) 69 (t 26039 52901 482267 490000)) nil (26039 52905 475884 347000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -60) (undo-tree-id7232 . -1) (undo-tree-id7233 . -1) (undo-tree-id7234 . -1) (undo-tree-id7235 . -1) (undo-tree-id7236 . -1) (undo-tree-id7237 . -1) (undo-tree-id7238 . -1) (undo-tree-id7239 . -1) (undo-tree-id7240 . -1) (undo-tree-id7241 . -1) (undo-tree-id7242 . -1) (undo-tree-id7243 . -1) (undo-tree-id7244 . -1) (undo-tree-id7245 . -1) (undo-tree-id7246 . -1) (undo-tree-id7247 . -1) (undo-tree-id7248 . -1) (undo-tree-id7249 . -1) (undo-tree-id7250 . -1) (undo-tree-id7251 . -1) (undo-tree-id7252 . -1) 61 (t 26039 52905 525600 592000)) nil (26039 52906 286308 106000) 0 nil])
([nil nil ((314 . 319) (t 26039 52906 292267 215000)) nil (26039 52973 345967 357000) 0 nil])
([nil nil ((316 . 320) (#("    " 0 4 (fontified nil)) . 315) (undo-tree-id7319 . -4) (undo-tree-id7320 . -4) (undo-tree-id7321 . -4) (undo-tree-id7322 . -4) (undo-tree-id7323 . -4) (319 . 320)) nil (26039 52973 345966 134000) 0 nil])
([nil nil ((320 . 333)) nil (26039 52973 345961 84000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -331) (undo-tree-id7310 . -1) (undo-tree-id7311 . -1) (undo-tree-id7312 . -1) (undo-tree-id7313 . -1) (undo-tree-id7314 . -1) (undo-tree-id7315 . -1) (#("_" 0 1 (fontified t)) . -332) (undo-tree-id7316 . -1) (undo-tree-id7317 . -1) (undo-tree-id7318 . -1) 333) nil (26039 52973 345959 832000) 0 nil])
([nil nil ((331 . 334)) nil (26039 52973 345952 972000) 0 nil])
([nil nil ((334 . 342)) nil (26039 52973 345952 384000) 0 nil])
([nil nil ((342 . 344)) nil (26039 52973 345951 633000) 0 nil])
([nil nil ((343 . 348)) nil (26039 52973 345950 809000) 0 nil])
([nil nil ((apply yas--snippet-revive 346 362 #s(yas--snippet nil nil #s(yas--exit 361 nil) 96 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 361 nil) 96 nil nil nil nil)) (346 . 362) (#("UnitQuaternion<$0>" 0 18 (fontified nil)) . 346) (346 . 364) (#("Un" 0 2 (fontified nil)) . 346) (346 . 348) (#("UnitQuaternion<…>" 0 17 (fontified nil)) . -346) (346 . 363) (#("Un" 0 2 (face font-lock-type-face fontified t)) . -346) (undo-tree-id7301 . -2) (undo-tree-id7302 . -1) (undo-tree-id7303 . -1) (undo-tree-id7304 . -1) (undo-tree-id7305 . -2) (undo-tree-id7306 . -2) (undo-tree-id7307 . -2) (undo-tree-id7308 . -2) (undo-tree-id7309 . -2) 348) nil (26039 52973 345948 768000) 0 nil])
([nil nil ((361 . 362)) nil (26039 52973 345940 412000) 0 nil])
([nil nil ((361 . 364) (#("f" 0 1 (fontified nil)) . 361) (361 . 362) (#("f64" 0 3 (fontified nil)) . -361) (361 . 364) (#("f" 0 1 (fontified t)) . -361) (undo-tree-id7291 . -1) (undo-tree-id7292 . -1) (undo-tree-id7293 . -1) (undo-tree-id7294 . -1) (undo-tree-id7295 . -1) (undo-tree-id7296 . -1) (undo-tree-id7297 . -1) (undo-tree-id7298 . -1) (undo-tree-id7299 . -1) (undo-tree-id7300 . -1) 362) nil (26039 52973 345939 71000) 0 nil])
([nil nil ((364 . 365)) nil (26039 52973 345929 838000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -364) (undo-tree-id7280 . -1) (undo-tree-id7281 . -1) (undo-tree-id7282 . -1) (undo-tree-id7283 . -1) (undo-tree-id7284 . -1) (undo-tree-id7285 . -1) (undo-tree-id7286 . -1) (undo-tree-id7287 . -1) (undo-tree-id7288 . -1) (undo-tree-id7289 . -1) (undo-tree-id7290 . -1) 365) nil (26039 52973 345928 747000) 0 nil])
([nil nil ((366 . 372)) nil (26039 52973 345920 133000) 0 nil])
([nil nil ((#("{" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -370) (undo-tree-id7270 . -1) (undo-tree-id7271 . -1) (undo-tree-id7272 . -1) (undo-tree-id7273 . -1) (undo-tree-id7274 . -1) (undo-tree-id7275 . -1) (undo-tree-id7276 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -371) (undo-tree-id7277 . -1) (undo-tree-id7278 . -1) (undo-tree-id7279 . -1) 372) nil (26039 52973 345918 876000) 0 nil])
([nil nil ((370 . 371)) nil (26039 52973 345910 464000) 0 nil])
([nil nil ((370 . 374) (#("S" 0 1 (fontified nil)) . 370) (370 . 371) (#("Self" 0 4 (fontified nil)) . -370) (370 . 374) (#("S" 0 1 (face font-lock-type-face fontified t)) . -370) (undo-tree-id7263 . -1) (undo-tree-id7264 . -1) (undo-tree-id7265 . -1) (undo-tree-id7266 . -1) (undo-tree-id7267 . -1) (undo-tree-id7268 . -1) (undo-tree-id7269 . -1) 371) nil (26039 52973 345908 960000) 0 nil])
([nil nil ((374 . 377)) nil (26039 52973 345901 880000) 0 nil])
([nil nil ((378 . 382) (#("        " 0 8 (fontified nil)) . 377) (377 . 385) (#("    " 0 4 (fontified nil)) . 377) (undo-tree-id7259 . -4) (undo-tree-id7260 . -4) (undo-tree-id7261 . -4) (undo-tree-id7262 . -4) (376 . 382)) nil (26039 52973 345900 623000) 0 nil])
([nil nil ((377 . 385)) nil (26039 52973 345896 166000) 0 nil])
([nil nil ((385 . 386)) nil (26039 52973 345895 49000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 401 402 nil nil nil t #s(yas--exit 404 nil))) #s(yas--exit 404 nil) 97 nil #s(yas--field 1 401 402 nil nil nil t #s(yas--exit 404 nil)) nil nil)) (385 . 405) (#("SO3 { rotation: ${1:()} }$0" 0 27 (fontified nil)) . 385) (385 . 412) (#("S" 0 1 (fontified nil)) . 385) (385 . 386) (#("SO3 {…}" 0 7 (fontified nil)) . -385) (385 . 392) (#("S" 0 1 (face font-lock-type-face fontified t)) . -385) (undo-tree-id7254 . -1) (undo-tree-id7255 . -1) (undo-tree-id7256 . -1) (undo-tree-id7257 . -1) (undo-tree-id7258 . -1) 386) nil (26039 52973 345892 405000) 0 nil])
([nil nil ((#("()" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 402) (undo-tree-id7253 . -2) (401 . 402)) nil (26039 52973 345882 119000) 0 nil])
([nil nil ((apply yas--snippet-revive 385 404 #s(yas--snippet nil (#s(yas--field 1 401 402 nil nil nil t #s(yas--exit 404 nil))) #s(yas--exit 404 nil) 97 nil #s(yas--field 1 401 402 nil nil nil t #s(yas--exit 404 nil)) nil nil))) nil (26039 52980 116974 294000) 0 nil])
([nil nil ((332 . 336) (t 26039 52973 365596 696000)) nil (26039 52980 116972 488000) 0 nil])
([nil nil ((336 . 337)) nil (26039 52980 116968 233000) 0 nil])
([nil current ((1751 . 1753) (t 26039 52980 165596 306000)) nil (26039 54403 79926 789000) 0 nil])
nil
