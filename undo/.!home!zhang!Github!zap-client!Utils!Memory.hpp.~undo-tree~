(undo-tree-save-format-version . 1)
"389ac29ed74735f3ec7ea55ad8b43ce91c9a1f48"
[nil nil nil nil (26115 5526 984129 343000) 0 nil]
([nil nil ((#("/" 0 1 (fontified t)) . 3348) (#("/" 0 1 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t)) . 3348) (t 26114 62349 465839 782000)) nil (26115 5526 984127 172000) 0 nil])
([nil nil ((5627 . 5628) 3348) nil (26115 5526 984122 729000) 0 nil])
([nil nil ((3348 . 3350) (t 26115 5526 993688 35000)) nil (26115 5551 933368 716000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . 3459) (undo-tree-id53 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face c-is-sws t c-in-sws t fontified t)) . 3459) (undo-tree-id54 . -1)) nil (26115 5559 708360 116000) 0 nil] [nil nil ((apply -6 3447 3596 undo--wrap-and-run-primitive-undo 3447 3596 ((3505 . 3508) (3459 . 3462) 3589))) ((apply 6 3447 3590 undo--wrap-and-run-primitive-undo 3447 3590 ((#("// " 0 1 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 1 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . 3459) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . 3505) 3595))) (26115 5551 930949 901000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . -3585) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (#("/" 0 1 (fontified t)) . -3586) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) 3587) nil (26115 5559 708353 532000) 0 nil])
nil
([nil nil ((787 . 796) (t 26115 5559 717023 376000)) nil (26115 7422 355536 505000) 0 nil])
([nil nil ((796 . 797)) nil (26115 7422 355535 776000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -796) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) 797) nil (26115 7422 355534 906000) 0 nil])
([nil nil ((796 . 798)) nil (26115 7422 355528 384000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -796) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (#("t" 0 1 (fontified t)) . -797) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) 798) nil (26115 7422 355526 336000) 0 nil])
([nil nil ((796 . 800)) nil (26115 7422 355501 67000) 0 nil])
([nil nil ((796 . 805) (#("cout" 0 4 (fontified nil)) . 796) (796 . 800) (#("std::cout" 0 9 (fontified nil)) . -796) (796 . 805) (#("cout" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -796) (undo-tree-id194 . -4) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -2) (undo-tree-id207 . -2) (undo-tree-id208 . -2) (undo-tree-id209 . -2) (undo-tree-id210 . -2) (undo-tree-id211 . -2) (undo-tree-id212 . -2) (undo-tree-id213 . -3) (undo-tree-id214 . -3) (undo-tree-id215 . -3) (undo-tree-id216 . -3) (undo-tree-id217 . -3) (undo-tree-id218 . -3) (undo-tree-id219 . -3) (undo-tree-id220 . -3) (undo-tree-id221 . -3) (undo-tree-id222 . -4) (undo-tree-id223 . -4) (undo-tree-id224 . -4) (undo-tree-id225 . -4) (undo-tree-id226 . -4) (undo-tree-id227 . -4) (undo-tree-id228 . -4) (undo-tree-id229 . -4) (undo-tree-id230 . -4) (undo-tree-id231 . -4) (undo-tree-id232 . -4) (undo-tree-id233 . -4) (undo-tree-id234 . -4) 800) nil (26115 7422 355499 8000) 0 nil])
([nil nil ((805 . 806)) nil (26115 7422 355463 898000) 0 nil])
([nil nil ((806 . 808)) nil (26115 7422 355463 417000) 0 nil])
([nil nil ((808 . 811)) nil (26115 7422 355462 848000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . 810) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) 811) nil (26115 7422 355461 708000) 0 nil])
([nil nil ((810 . 812)) nil (26115 7422 355453 483000) 0 nil])
([nil nil ((811 . 813)) nil (26115 7422 355452 955000) 0 nil])
([nil nil ((813 . 814)) nil (26115 7422 355452 467000) 0 nil])
([nil nil ((814 . 815)) nil (26115 7422 355452 15000) 0 nil])
([nil nil ((816 . 817)) nil (26115 7422 355451 556000) 0 nil])
([nil nil ((#("<" 0 1 (fontified t)) . -816) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) 817) nil (26115 7422 355450 542000) 0 nil])
([nil nil ((816 . 817)) nil (26115 7422 355441 134000) 0 nil])
([nil nil ((817 . 819)) nil (26115 7422 355440 583000) 0 nil])
([nil nil ((819 . 821)) nil (26115 7422 355440 106000) 0 nil])
([nil nil ((820 . 823) (#("P" 0 1 (fontified nil)) . 820) (820 . 821) (#("PID" 0 3 (fontified nil)) . -820) (820 . 823) (#("P" 0 1 (fontified t)) . -820) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) 821) nil (26115 7422 355438 684000) 0 nil])
([nil nil ((823 . 824)) nil (26115 7422 355428 391000) 0 nil])
([nil nil ((824 . 826)) nil (26115 7422 355427 803000) 0 nil])
([nil nil ((826 . 830)) nil (26115 7422 355427 134000) 0 nil])
([nil nil ((apply yas--snippet-revive 847 857 #s(yas--snippet nil nil #s(yas--exit 856 nil) 0 nil nil nil nil)) (34 . 54) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 856 nil) 0 nil nil nil nil)) (827 . 837) (#("std::end($0)" 0 12 (fontified nil)) . 827) (827 . 839) (#("end" 0 3 (fontified nil)) . 827) (827 . 830) (#("std::end(â€¦)" 0 11 (fontified nil)) . -827) (827 . 838) (#("end" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -827) (undo-tree-id116 . -3) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -2) (undo-tree-id129 . -2) (undo-tree-id130 . -2) (undo-tree-id131 . -2) (undo-tree-id132 . -2) (undo-tree-id133 . -2) (undo-tree-id134 . -2) (undo-tree-id135 . -2) (undo-tree-id136 . -2) (undo-tree-id137 . -3) (undo-tree-id138 . -3) (undo-tree-id139 . -3) (undo-tree-id140 . -3) (undo-tree-id141 . -3) (undo-tree-id142 . -3) (undo-tree-id143 . -3) (undo-tree-id144 . -3) (undo-tree-id145 . -3) (undo-tree-id146 . -3) (undo-tree-id147 . -3) (undo-tree-id148 . -3) (undo-tree-id149 . -3) 830) nil (26115 7422 355423 950000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -854) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -855) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -856) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) 857) nil (26115 7422 355151 882000) 0 nil])
([nil nil ((854 . 856)) nil (26115 7422 354919 836000) 0 nil])
([nil nil ((856 . 857)) nil (26115 7422 354915 640000) 0 nil])
([nil current ((#("std::cout << \"PID: \" << PID << std::endl;" 0 3 (face font-lock-constant-face fontified t) 3 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (face font-lock-string-face fontified t) 14 15 (face font-lock-string-face fontified t) 15 16 (face font-lock-string-face fontified t) 16 17 (face font-lock-string-face fontified t) 17 18 (face font-lock-string-face fontified t) 18 19 (face font-lock-string-face fontified t) 19 20 (face font-lock-string-face fontified t) 20 21 (fontified t) 21 22 (fontified t) 22 23 (fontified t) 23 24 (fontified t) 24 27 (fontified t) 27 28 (fontified t) 28 29 (fontified t) 29 30 (fontified t) 30 31 (fontified t) 31 34 (face font-lock-constant-face fontified t) 34 38 (fontified t) 38 39 (fontified t) 39 40 (fontified t) 40 41 (fontified t)) . 816) (undo-tree-id289 . -14) (undo-tree-id290 . -14) (undo-tree-id291 . -14) (undo-tree-id292 . -14) (undo-tree-id293 . -14) (undo-tree-id294 . -14) (undo-tree-id295 . -14) (undo-tree-id296 . -14) (undo-tree-id297 . -14) (undo-tree-id298 . -14) (undo-tree-id299 . -14) (undo-tree-id300 . -14) (undo-tree-id301 . -20) (undo-tree-id302 . -20) (undo-tree-id303 . -20) (undo-tree-id304 . -20) (undo-tree-id305 . -20) (undo-tree-id306 . -20) (undo-tree-id307 . -20) (undo-tree-id308 . -20) (undo-tree-id309 . -20) (undo-tree-id310 . -20) (undo-tree-id311 . -20) (undo-tree-id312 . -20) (undo-tree-id313 . -20) (undo-tree-id314 . -20) (undo-tree-id315 . -24) (undo-tree-id316 . -24) (undo-tree-id317 . -24) (undo-tree-id318 . -24) (undo-tree-id319 . -24) (undo-tree-id320 . -24) (undo-tree-id321 . -24) (undo-tree-id322 . -24) (undo-tree-id323 . -24) (undo-tree-id324 . -24) (undo-tree-id325 . -24) (undo-tree-id326 . -24) (undo-tree-id327 . -24) (undo-tree-id328 . -24) (undo-tree-id329 . -24) (undo-tree-id330 . -31) (undo-tree-id331 . -31) (undo-tree-id332 . -31) (undo-tree-id333 . -31) (undo-tree-id334 . -31) (undo-tree-id335 . -31) (undo-tree-id336 . -31) (undo-tree-id337 . -31) (undo-tree-id338 . -31) (undo-tree-id339 . -31) (undo-tree-id340 . -31) (undo-tree-id341 . -31) (undo-tree-id342 . -31) (undo-tree-id343 . -31) (undo-tree-id344 . -31) (undo-tree-id345 . -31) (undo-tree-id346 . -31) (undo-tree-id347 . -31) (undo-tree-id348 . -31) (undo-tree-id349 . -31) (undo-tree-id350 . -31) (undo-tree-id351 . -31) (undo-tree-id352 . -31) (undo-tree-id353 . -31) (undo-tree-id354 . -31) (undo-tree-id355 . -31) (undo-tree-id356 . -31) (undo-tree-id357 . -31) (undo-tree-id358 . -31) (undo-tree-id359 . -31) (undo-tree-id360 . -31) (undo-tree-id361 . -31) (undo-tree-id362 . -31) (undo-tree-id363 . -38) (undo-tree-id364 . -38) (undo-tree-id365 . -38) (undo-tree-id366 . -38) (undo-tree-id367 . -38) (undo-tree-id368 . -38) (undo-tree-id369 . -38) (undo-tree-id370 . -38) (undo-tree-id371 . -38) (undo-tree-id372 . -38) (undo-tree-id373 . -38) (undo-tree-id374 . -38) (undo-tree-id375 . -38) (undo-tree-id376 . -38) (undo-tree-id377 . -38) (undo-tree-id378 . -38) (undo-tree-id379 . -38) (undo-tree-id380 . -38) (undo-tree-id381 . -38) (undo-tree-id382 . -38) (undo-tree-id383 . -38) (undo-tree-id384 . -38) (undo-tree-id385 . -38) (undo-tree-id386 . -38) (undo-tree-id387 . -38) (undo-tree-id388 . -38) (undo-tree-id389 . -38) (undo-tree-id390 . -38) (undo-tree-id391 . -38) (undo-tree-id392 . -38) (undo-tree-id393 . -38) (undo-tree-id394 . -38) (undo-tree-id395 . -38) (undo-tree-id396 . -38) (undo-tree-id397 . -38) (undo-tree-id398 . -38) (undo-tree-id399 . -38) (undo-tree-id400 . -38) (undo-tree-id401 . -38) (undo-tree-id402 . -38) (undo-tree-id403 . -38) (undo-tree-id404 . -38) (undo-tree-id405 . -38) (undo-tree-id406 . -38) (undo-tree-id407 . -38) (undo-tree-id408 . -38) (undo-tree-id409 . -38) (undo-tree-id410 . -38) (undo-tree-id411 . -38) (undo-tree-id412 . -38) (undo-tree-id413 . -41) (undo-tree-id414 . -41) (undo-tree-id415 . -41) (undo-tree-id416 . -41) (undo-tree-id417 . -41) (undo-tree-id418 . -41) (undo-tree-id419 . -41) (undo-tree-id420 . -41) (undo-tree-id421 . -41) (undo-tree-id422 . -41) (undo-tree-id423 . -41) (undo-tree-id424 . -41) (undo-tree-id425 . -41) (undo-tree-id426 . -41) (undo-tree-id427 . -41) (undo-tree-id428 . -41) (undo-tree-id429 . -41) (undo-tree-id430 . -41) (undo-tree-id431 . -41) (undo-tree-id432 . -41) (undo-tree-id433 . -41) (undo-tree-id434 . -41) (undo-tree-id435 . -41) (undo-tree-id436 . -41) (undo-tree-id437 . -41) (undo-tree-id438 . -41) (undo-tree-id439 . -41) (undo-tree-id440 . -41) (undo-tree-id441 . -41) (undo-tree-id442 . -41) (undo-tree-id443 . -41) (undo-tree-id444 . -41) (undo-tree-id445 . -41) (undo-tree-id446 . -41) (undo-tree-id447 . -41) (undo-tree-id448 . -41) (undo-tree-id449 . -41) (undo-tree-id450 . -41) (undo-tree-id451 . -41) (undo-tree-id452 . -41) (undo-tree-id453 . -41) (undo-tree-id454 . -41) (undo-tree-id455 . -41) (undo-tree-id456 . -14) (undo-tree-id457 . -12) (undo-tree-id458 . -12) (undo-tree-id459 . -12) (undo-tree-id460 . -12) (undo-tree-id461 . -12) (undo-tree-id462 . -12) (undo-tree-id463 . -41) (t 26115 7422 413804 382000)) nil (26115 7611 518639 791000) 0 nil])
nil
