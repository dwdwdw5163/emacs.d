(undo-tree-save-format-version . 1)
"55102e0da9cc9007d2f0523f09144e88fb4f0546"
[nil nil nil nil (26039 45499 48050 718000) 0 nil]
([nil nil ((1 . 6) (t 26039 45452 376031 68000)) nil (26039 45499 48049 596000) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-constant-face fontified t)) . -5) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) 6) nil (26039 45499 48048 547000) 0 nil])
([nil nil ((5 . 6)) nil (26039 45499 48045 186000) 0 nil])
([nil nil ((5 . 12) (#("l" 0 1 (fontified nil)) . 5) (5 . 6) (#("lib_lie" 0 7 (fontified nil)) . -5) (5 . 12) (#("l" 0 1 (face font-lock-constant-face fontified t)) . -5) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) 6) nil (26039 45499 48043 871000) 0 nil])
([nil nil ((12 . 14)) nil (26039 45499 48039 675000) 0 nil])
([nil nil ((14 . 17) (#("SO3" 0 3 (fontified nil)) . -14) (14 . 17)) nil (26039 45499 48038 767000) 0 nil])
([nil nil ((17 . 18)) nil (26039 45499 48037 867000) 0 nil])
([nil nil ((18 . 20)) nil (26039 45499 48037 340000) 0 nil])
([nil nil ((20 . 32)) nil (26039 45499 48036 768000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . 32) (32 . 36) (31 . 33)) nil (26039 45499 48036 37000) 0 nil])
([nil nil ((32 . 36)) nil (26039 45499 48035 83000) 0 nil])
([nil nil ((36 . 39)) nil (26039 45499 48034 476000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -36) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (#("i" 0 1 (fontified t)) . -37) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (#("s" 0 1 (fontified t)) . -38) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) 39) nil (26039 45499 48031 432000) 0 nil])
([nil nil ((36 . 47)) nil (26039 45499 47538 81000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -46) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) 47) nil (26039 45499 47537 200000) 0 nil])
([nil nil ((46 . 47)) nil (26039 45499 47532 458000) 0 nil])
([nil nil ((46 . 49) (#("S" 0 1 (fontified nil)) . 46) (46 . 47) (#("SO3" 0 3 (fontified nil)) . -46) (46 . 49) (#("S" 0 1 (face font-lock-type-face fontified t)) . -46) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) 47) nil (26039 45499 47531 92000) 0 nil])
([nil nil ((49 . 53)) nil (26039 45499 47524 433000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -51) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (#("n" 0 1 (fontified t)) . -52) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) 53) nil (26039 45499 47523 10000) 0 nil])
([nil nil ((51 . 52)) nil (26039 45499 47512 723000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 55 58 nil nil nil t #s(yas--field 2 60 61 nil nil nil nil #s(yas--field 3 63 64 nil nil nil nil #s(yas--field 4 66 67 nil nil nil nil #s(yas--exit 68 nil))))) #s(yas--field 2 60 61 nil nil nil nil #s(yas--field 3 63 64 nil nil nil nil #s(yas--field 4 66 67 nil nil nil nil #s(yas--exit 68 nil)))) #s(yas--field 3 63 64 nil nil nil nil #s(yas--field 4 66 67 nil nil nil nil #s(yas--exit 68 nil))) #s(yas--field 4 66 67 nil nil nil nil #s(yas--exit 68 nil))) #s(yas--exit 68 nil) 21 nil #s(yas--field 1 55 58 nil nil nil t #s(yas--field 2 60 61 nil nil nil nil #s(yas--field 3 63 64 nil nil nil nil #s(yas--field 4 66 67 nil nil nil nil #s(yas--exit 68 nil))))) nil nil)) (51 . 66) (#("new(${1:w}, ${2:i}, ${3:j}, ${4:k})$0" 0 37 (fontified nil)) . 51) (51 . 88) (#("n" 0 1 (fontified nil)) . 51) (51 . 52) (#("new(…)" 0 6 (fontified nil)) . -51) (51 . 57) (#("n" 0 1 (fontified t)) . -51) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) 52) nil (26039 45499 47511 184000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t)) . -55) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) 56) nil (26039 45499 47505 141000) 0 nil])
([nil nil ((55 . 58)) nil (26039 45499 47499 53000) 0 nil])
([nil nil ((apply yas--snippet-revive 51 68 #s(yas--snippet nil (#s(yas--field 1 55 58 nil nil nil t #s(yas--field 2 60 61 nil nil nil nil #s(yas--field 3 63 64 nil nil nil nil #s(yas--field 4 66 67 nil nil nil nil #s(yas--exit 68 nil))))) #s(yas--field 2 60 61 nil nil nil nil #s(yas--field 3 63 64 nil nil nil nil #s(yas--field 4 66 67 nil nil nil nil #s(yas--exit 68 nil)))) #s(yas--field 3 63 64 nil nil nil nil #s(yas--field 4 66 67 nil nil nil nil #s(yas--exit 68 nil))) #s(yas--field 4 66 67 nil nil nil nil #s(yas--exit 68 nil))) #s(yas--exit 68 nil) 21 nil #s(yas--field 1 55 58 nil nil nil t #s(yas--field 2 60 61 nil nil nil nil #s(yas--field 3 63 64 nil nil nil nil #s(yas--field 4 66 67 nil nil nil nil #s(yas--exit 68 nil))))) nil nil))) nil (26039 45499 47498 448000) 0 nil])
([nil nil ((56 . 57)) nil (26039 45499 47497 896000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -56) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) 57) nil (26039 45499 47496 734000) 0 nil])
([nil nil ((56 . 57)) nil (26039 45499 47488 108000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -58) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . 1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) 59) nil (26039 45499 47487 3000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -60) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) 61) nil (26039 45499 47479 495000) 0 nil])
([nil nil ((60 . 63)) nil (26039 45499 47476 798000) 0 nil])
([nil nil ((#("3" 0 1 (fontified t)) . -62) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) 63) nil (26039 45499 47475 775000) 0 nil])
([nil nil ((62 . 63)) nil (26039 45499 47470 954000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -65) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) 66) nil (26039 45499 47470 42000) 0 nil])
([nil nil ((65 . 67)) nil (26039 45499 47466 937000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -66) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) 67) nil (26039 45499 47465 799000) 0 nil])
([nil nil ((66 . 68)) nil (26039 45499 47459 481000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t)) . -70) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) 71) nil (26039 45499 47457 930000) 0 nil])
([nil nil ((70 . 73)) nil (26039 45499 47438 651000) 0 nil])
([nil nil ((74 . 75)) nil (26039 45499 47437 305000) 0 nil])
([nil nil ((77 . 78) 75) nil (26039 45499 47432 602000) 0 nil])
([nil nil ((75 . 80) (t 26039 45499 59361 675000)) nil (26039 45519 940200 129000) 0 nil])
([nil nil ((80 . 82)) nil (26039 45519 940199 215000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -80) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (#("p" 0 1 (fontified t)) . -81) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) 82) nil (26039 45519 940198 108000) 0 nil])
([nil nil ((80 . 85)) nil (26039 45519 940192 250000) 0 nil])
([nil nil ((apply yas--snippet-revive 80 90 #s(yas--snippet nil nil #s(yas--exit 89 nil) 22 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 89 nil) 22 nil nil nil nil)) (80 . 90) (#("println!($0)" 0 12 (fontified nil)) . 80) (80 . 92) (#("print" 0 5 (fontified nil)) . 80) (80 . 85) (#("println!(…)" 0 11 (fontified nil)) . -80) (80 . 91) (#("print" 0 5 (fontified t)) . -80) (undo-tree-id136 . -5) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -2) (undo-tree-id140 . -2) (undo-tree-id141 . -3) (undo-tree-id142 . -3) (undo-tree-id143 . -4) (undo-tree-id144 . -4) (undo-tree-id145 . -5) (undo-tree-id146 . -5) (undo-tree-id147 . -5) (undo-tree-id148 . -5) 85) nil (26039 45519 940190 715000) 0 nil])
([nil nil ((89 . 91)) nil (26039 45519 940181 280000) 0 nil])
([nil nil ((90 . 92)) nil (26039 45519 940180 757000) 0 nil])
([nil nil ((91 . 92)) nil (26039 45519 940180 157000) 0 nil])
([nil nil ((#("L" 0 1 (face rust-string-interpolation fontified t)) . -91) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) 92) nil (26039 45519 940179 213000) 0 nil])
([nil nil ((91 . 93)) nil (26039 45519 940175 645000) 0 nil])
([nil nil ((95 . 98)) nil (26039 45519 940175 87000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -97) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) 98) nil (26039 45519 940174 67000) 0 nil])
([nil nil ((97 . 98)) nil (26039 45519 940168 390000) 0 nil])
([nil nil ((97 . 100) (#("s" 0 1 (fontified nil)) . 97) (97 . 98) (#("so3" 0 3 (fontified nil)) . -97) (97 . 100) (#("s" 0 1 (fontified t)) . -97) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) 98) nil (26039 45519 940167 139000) 0 nil])
([nil nil ((100 . 102)) nil (26039 45519 940162 529000) 0 nil])
([nil nil ((apply yas--snippet-revive 101 106 #s(yas--snippet nil nil #s(yas--exit 106 nil) 23 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 106 nil) 23 nil nil nil nil)) (101 . 106) (#("log()$0" 0 7 (fontified nil)) . 101) (101 . 108) (#("l" 0 1 (fontified nil)) . 101) (101 . 102) (#("log()" 0 5 (fontified nil)) . -101) (101 . 106) (#("l" 0 1 (fontified t)) . -101) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) 102) nil (26039 45519 940160 70000) 0 nil])
([nil nil ((107 . 108)) nil (26039 45519 940144 938000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -57) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) 58 (t 26039 45519 949360 457000)) nil (26039 47368 565090 302000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . -55) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (#("." 0 1 (fontified t)) . -56) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) 57) nil (26039 47368 565070 781000) 0 nil])
([nil nil ((19 . 24)) nil (26039 47368 563492 649000) 0 nil])
([nil nil ((23 . 27) (#("c" 0 1 (fontified nil)) . 23) (23 . 24) (#("core" 0 4 (fontified nil)) . -23) (23 . 27) (#("c" 0 1 (face font-lock-constant-face fontified t)) . -23) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) 24) nil (26039 47368 563491 535000) 0 nil])
([nil nil ((27 . 30)) nil (26039 47368 563488 239000) 0 nil])
([nil nil ((29 . 32) (#("f" 0 1 (fontified nil)) . 29) (29 . 30) (#("f64" 0 3 (fontified nil)) . -29) (29 . 32) (#("f" 0 1 (fontified t)) . -29) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) 30) nil (26039 47368 563487 81000) 0 nil])
([nil nil ((32 . 35)) nil (26039 47368 563480 860000) 0 nil])
([nil nil ((34 . 40) (#("C" 0 1 (fontified nil)) . 34) (34 . 35) (#("consts" 0 6 (fontified nil)) . -34) (34 . 40) (#("C" 0 1 (face font-lock-type-face fontified t)) . -34) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) 35) nil (26039 47368 563479 590000) 0 nil])
([nil nil ((40 . 43)) nil (26039 47368 563472 702000) 0 nil])
([nil nil ((42 . 44) (#("P" 0 1 (fontified nil)) . 42) (42 . 43) (#("PI" 0 2 (fontified nil)) . -42) (42 . 44) (#("P" 0 1 (face font-lock-type-face fontified t)) . -42) (undo-tree-id214 . -1) (undo-tree-id215 . -1) 43) nil (26039 47368 563471 570000) 0 nil])
([nil nil ((44 . 45)) nil (26039 47368 563468 630000) 0 nil])
([nil nil ((81 . 82)) nil (26039 47368 563468 96000) 0 nil])
([nil nil ((81 . 83) (#("P" 0 1 (fontified nil)) . 81) (81 . 82) (#("PI" 0 2 (fontified nil)) . -81) (81 . 83) (#("P" 0 1 (face font-lock-type-face fontified t)) . -81) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) 82) nil (26039 47368 563466 853000) 0 nil])
([nil nil ((83 . 87)) nil (26039 47368 563461 476000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -85) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (#("0" 0 1 (fontified t)) . -86) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) 87) nil (26039 47368 563459 906000) 0 nil])
([nil nil ((85 . 87)) nil (26039 47368 563445 28000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . -89) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) 90) nil (26039 47368 563443 351000) 0 nil])
([nil nil ((89 . 90)) nil (26039 47368 563426 131000) 0 nil])
([nil nil ((#("3" 0 1 (fontified t)) . -94) (undo-tree-id160 . -1) (undo-tree-id161 . -1) 95) nil (26039 47368 563425 150000) 0 nil])
([nil nil ((94 . 95)) nil (26039 47368 563422 453000) 0 nil])
([nil nil ((#("4" 0 1 (fontified t)) . -99) (undo-tree-id158 . -1) (undo-tree-id159 . -1) 100) nil (26039 47368 563420 315000) 0 nil])
([nil nil ((99 . 100)) nil (26039 47368 563408 469000) 0 nil])
([nil nil ((119 . 121) (t 26039 47368 575919 931000)) nil (26039 49667 41782 489000) 0 nil])
([nil nil ((#(")" 0 1 (face font-lock-string-face fontified t)) . -120) (undo-tree-id406 . -1) 121) nil (26039 49667 41781 600000) 0 nil])
([nil nil ((120 . 123)) nil (26039 49667 41780 199000) 0 nil])
([nil nil ((141 . 146)) nil (26039 49667 41779 717000) 0 nil])
([nil nil ((139 . 144)) nil (26039 49667 41779 128000) 0 nil])
([nil nil ((apply yas--snippet-revive 140 151 #s(yas--snippet nil nil #s(yas--exit 151 nil) 39 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 151 nil) 39 nil nil nil nil)) (140 . 151) (#("transpose()$0" 0 13 (fontified nil)) . 140) (140 . 153) (#("tran" 0 4 (fontified nil)) . 140) (140 . 144) (#("transpose()" 0 11 (fontified nil)) . -140) (140 . 151) (#("tran" 0 4 (fontified t)) . -140) (undo-tree-id405 . -4) 144) nil (26039 49667 41777 922000) 0 nil])
([nil nil ((153 . 158)) nil (26039 49667 41775 428000) 0 nil])
([nil nil ((158 . 163)) nil (26039 49667 41774 822000) 0 nil])
([nil nil ((apply yas--snippet-revive 158 168 #s(yas--snippet nil nil #s(yas--exit 167 nil) 40 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 167 nil) 40 nil nil nil nil)) (158 . 168) (#("println!($0)" 0 12 (fontified nil)) . 158) (158 . 170) (#("print" 0 5 (fontified nil)) . 158) (158 . 163) (#("println!(…)" 0 11 (fontified nil)) . -158) (158 . 169) (#("print" 0 5 (fontified t)) . -158) (undo-tree-id404 . -5) 163) nil (26039 49667 41773 413000) 0 nil])
([nil nil ((167 . 169)) nil (26039 49667 41770 947000) 0 nil])
([nil nil ((168 . 171)) nil (26039 49667 41770 349000) 0 nil])
([nil nil ((#("#" 0 1 (face font-lock-string-face fontified t)) . -170) (undo-tree-id403 . -1) 171) nil (26039 49667 41769 596000) 0 nil])
([nil nil ((170 . 171)) nil (26039 49667 41768 315000) 0 nil])
([nil nil ((171 . 175)) nil (26039 49667 41767 733000) 0 nil])
([nil nil ((175 . 176)) nil (26039 49667 41767 130000) 0 nil])
([nil nil ((176 . 179)) nil (26039 49667 41766 577000) 0 nil])
([nil nil ((#("m" 0 1 (face font-lock-string-face fontified t)) . -178) (undo-tree-id402 . -1) 179) nil (26039 49667 41765 838000) 0 nil])
([nil nil ((178 . 181)) nil (26039 49667 41764 514000) 0 nil])
([nil nil ((180 . 182)) nil (26039 49667 41764 9000) 0 nil])
([nil nil ((#("L" 0 1 (face rust-string-interpolation fontified t)) . -181) (undo-tree-id401 . -1) 182) nil (26039 49667 41763 287000) 0 nil])
([nil nil ((181 . 182)) nil (26039 49667 41761 928000) 0 nil])
([nil nil ((184 . 187)) nil (26039 49667 41761 39000) 0 nil])
([nil nil ((186 . 189) (#("s" 0 1 (fontified nil)) . 186) (186 . 187) (#("so3" 0 3 (fontified nil)) . -186) (186 . 189) (#("s" 0 1 (fontified t)) . -186) (undo-tree-id399 . -1) (undo-tree-id400 . -1) 187) nil (26039 49667 41759 890000) 0 nil])
([nil nil ((189 . 190)) nil (26039 49667 41757 299000) 0 nil])
([nil nil ((190 . 191)) nil (26039 49667 41756 713000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -189) (undo-tree-id397 . -1) (#("h" 0 1 (fontified t)) . -190) (undo-tree-id398 . -1) 191) nil (26039 49667 41755 818000) 0 nil])
([nil nil ((189 . 192)) nil (26039 49667 41753 554000) 0 nil])
([nil nil ((#("H" 0 1 (face font-lock-type-face fontified t)) . -191) (undo-tree-id396 . -1) 192) nil (26039 49667 41752 757000) 0 nil])
([nil nil ((191 . 192)) nil (26039 49667 41751 408000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t)) . -191) (undo-tree-id395 . -1) 192) nil (26039 49667 41750 556000) 0 nil])
([nil nil ((#("so3::" 0 3 (face font-lock-constant-face fontified nil) 3 5 (fontified nil)) . -186) (undo-tree-id394 . -5) 191) nil (26039 49667 41749 4000) 0 nil])
([nil nil ((186 . 188)) nil (26039 49667 41747 639000) 0 nil])
([nil nil ((186 . 189) (#("SO" 0 2 (fontified nil)) . 186) (186 . 188) (#("SO3" 0 3 (fontified nil)) . -186) (186 . 189) (#("SO" 0 2 (face font-lock-type-face fontified t)) . -186) (undo-tree-id393 . -2) 188) nil (26039 49667 41746 545000) 0 nil])
([nil nil ((189 . 193)) nil (26039 49667 41744 452000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 195 204 nil nil nil t #s(yas--exit 205 nil))) #s(yas--exit 205 nil) 41 nil #s(yas--field 1 195 204 nil nil nil t #s(yas--exit 205 nil)) nil nil)) (191 . 202) (#("hat(${1:vector})$0" 0 18 (fontified nil)) . 191) (191 . 209) (#("ha" 0 2 (fontified nil)) . 191) (191 . 193) (#("hat(…)" 0 6 (fontified nil)) . -191) (191 . 197) (#("ha" 0 2 (fontified t)) . -191) (undo-tree-id392 . -2) 193) nil (26039 49667 41743 422000) 0 nil])
([nil nil ((#("vector" 0 6 (fontified nil)) . 196) (195 . 196)) nil (26039 49667 41740 750000) 0 nil])
([nil nil ((195 . 198) (#("s" 0 1 (fontified nil)) . 195) (195 . 196) (#("so3" 0 3 (fontified nil)) . -195) (195 . 198) (#("s" 0 1 (fontified t)) . -195) (undo-tree-id390 . -1) (undo-tree-id391 . -1) 196) nil (26039 49667 41739 271000) 0 nil])
([nil nil ((198 . 200)) nil (26039 49667 41736 377000) 0 nil])
([nil nil ((apply yas--snippet-revive 199 204 #s(yas--snippet nil nil #s(yas--exit 204 nil) 42 nil nil #s(yas--field 1 195 204 nil nil nil t #s(yas--exit 205 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 204 nil) 42 nil nil #s(yas--field 1 195 204 nil nil nil t #s(yas--exit 205 nil)) nil)) (199 . 204) (#("log()$0" 0 7 (fontified nil)) . 199) (199 . 206) (#("l" 0 1 (fontified nil)) . 199) (199 . 200) (#("log()" 0 5 (fontified nil)) . -199) (199 . 204) (#("l" 0 1 (fontified t)) . -199) (undo-tree-id388 . -1) (undo-tree-id389 . -1) 200) nil (26039 49667 41735 53000) 0 nil])
([nil nil ((apply yas--snippet-revive 191 205 #s(yas--snippet nil (#s(yas--field 1 195 204 nil nil nil t #s(yas--exit 205 nil))) #s(yas--exit 205 nil) 41 nil #s(yas--field 1 195 204 nil nil nil t #s(yas--exit 205 nil)) nil nil))) nil (26039 49667 41732 99000) 0 nil])
([nil nil ((205 . 210)) nil (26039 49667 41731 503000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -208) (undo-tree-id386 . -1) (#("n" 0 1 (fontified t)) . -209) (undo-tree-id387 . -1) 210) nil (26039 49667 41730 657000) 0 nil])
([nil nil ((208 . 210)) nil (26039 49667 41728 508000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -207) (undo-tree-id383 . -1) (#("n" 0 1 (fontified t)) . -208) (undo-tree-id384 . -1) (#("s" 0 1 (fontified t)) . -209) (undo-tree-id385 . -1) 210) nil (26039 49667 41727 599000) 0 nil])
([nil nil ((207 . 211)) nil (26039 49667 41724 797000) 0 nil])
([nil nil ((apply yas--snippet-revive 206 217 #s(yas--snippet nil nil #s(yas--exit 217 nil) 43 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 217 nil) 43 nil nil nil nil)) (206 . 217) (#("transpose()$0" 0 13 (fontified nil)) . 206) (206 . 219) (#("trans" 0 5 (fontified nil)) . 206) (206 . 211) (#("transpose()" 0 11 (fontified nil)) . -206) (206 . 217) (#("trans" 0 5 (fontified t)) . -206) (undo-tree-id377 . -5) (undo-tree-id378 . -4) (undo-tree-id379 . -5) (undo-tree-id380 . -5) (undo-tree-id381 . -5) (undo-tree-id382 . -5) 211) nil (26039 49667 41723 502000) 0 nil])
([nil nil ((218 . 219)) nil (26039 49667 41718 22000) 0 nil])
([nil nil ((219 . 224)) nil (26039 49667 41717 434000) 0 nil])
([nil nil ((224 . 225)) nil (26039 49667 41716 874000) 0 nil])
([nil nil ((apply yas--snippet-revive 224 234 #s(yas--snippet nil nil #s(yas--exit 233 nil) 44 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 233 nil) 44 nil nil nil nil)) (224 . 234) (#("println!($0)" 0 12 (fontified nil)) . 224) (224 . 236) (#("p" 0 1 (fontified nil)) . 224) (224 . 225) (#("println!(…)" 0 11 (fontified nil)) . -224) (224 . 235) (#("p" 0 1 (fontified t)) . -224) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) 225) nil (26039 49667 41715 586000) 0 nil])
([nil nil ((233 . 235)) nil (26039 49667 41710 189000) 0 nil])
([nil nil ((234 . 235)) nil (26039 49667 41709 571000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-string-face fontified t)) . -234) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) 235) nil (26039 49667 41708 661000) 0 nil])
([nil nil ((234 . 237)) nil (26039 49667 41705 544000) 0 nil])
([nil nil ((#("#" 0 1 (face font-lock-string-face fontified t)) . -236) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) 237) nil (26039 49667 41704 601000) 0 nil])
([nil nil ((236 . 245)) nil (26039 49667 41702 38000) 0 nil])
([nil nil ((245 . 246)) nil (26039 49667 41701 446000) 0 nil])
([nil nil ((246 . 249)) nil (26039 49667 41700 810000) 0 nil])
([nil nil ((248 . 249)) nil (26039 49667 41700 177000) 0 nil])
([nil nil ((#("L" 0 1 (face rust-string-interpolation fontified t)) . -248) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) 249) nil (26039 49667 41699 289000) 0 nil])
([nil nil ((248 . 250)) nil (26039 49667 41696 444000) 0 nil])
([nil nil ((#(">" 0 1 (face rust-string-interpolation syntax-table (1) fontified t)) . -249) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) 250) nil (26039 49667 41695 522000) 0 nil])
([nil nil ((249 . 250)) nil (26039 49667 41692 926000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t)) . -178) (undo-tree-id358 . -1) (undo-tree-id359 . -1) 179) nil (26039 49667 41692 185000) 0 nil])
([nil nil ((251 . 255)) nil (26039 49667 41690 76000) 0 nil])
([nil nil ((253 . 256) (#("SO" 0 2 (fontified nil)) . 253) (253 . 255) (#("SO3" 0 3 (fontified nil)) . -253) (253 . 256) (#("SO" 0 2 (face font-lock-type-face fontified t)) . -253) (undo-tree-id348 . -1) (undo-tree-id349 . -2) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -2) (undo-tree-id355 . -2) (undo-tree-id356 . -2) (undo-tree-id357 . -2) 255) nil (26039 49667 41688 669000) 0 nil])
([nil nil ((256 . 258)) nil (26039 49667 41679 959000) 0 nil])
([nil nil ((#("L" 0 1 (face font-lock-type-face fontified t)) . -257) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) 258) nil (26039 49667 41679 70000) 0 nil])
([nil nil ((257 . 259)) nil (26039 49667 41674 618000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 262 281 nil nil nil t #s(yas--exit 282 nil))) #s(yas--exit 282 nil) 45 nil #s(yas--field 1 262 281 nil nil nil t #s(yas--exit 282 nil)) nil nil)) (258 . 268) (#("vee(${1:a_hat})$0" 0 17 (fontified nil)) . 258) (258 . 275) (#("v" 0 1 (fontified nil)) . 258) (258 . 259) (#("vee(…)" 0 6 (fontified nil)) . -258) (258 . 264) (#("v" 0 1 (fontified t)) . -258) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) 259) nil (26039 49667 41673 191000) 0 nil])
([nil nil ((#("a_hat" 0 5 (fontified nil)) . 263) (undo-tree-id336 . -5) (262 . 263)) nil (26039 49667 41668 62000) 0 nil])
([nil nil ((262 . 265) (#("S" 0 1 (fontified nil)) . 262) (undo-tree-id325 . -1) (262 . 263) (#("SO3" 0 3 (fontified nil)) . -262) (undo-tree-id326 . -3) (262 . 265) (#("S" 0 1 (face font-lock-type-face fontified t)) . -262) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) 263) nil (26039 49667 41665 848000) 0 nil])
([nil nil ((265 . 268)) nil (26039 49667 41657 130000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 271 280 nil nil nil t #s(yas--exit 281 nil))) #s(yas--exit 281 nil) 46 nil #s(yas--field 1 271 280 nil nil nil t #s(yas--exit 281 nil)) #s(yas--field 1 262 281 nil nil nil t #s(yas--exit 282 nil)) nil)) (267 . 278) (#("hat(${1:vector})$0" 0 18 (fontified nil)) . 267) (undo-tree-id313 . -18) (267 . 285) (#("h" 0 1 (fontified nil)) . 267) (undo-tree-id314 . -1) (267 . 268) (#("hat(…)" 0 6 (fontified nil)) . -267) (undo-tree-id315 . -6) (267 . 273) (#("h" 0 1 (fontified t)) . -267) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) 268) nil (26039 49667 41655 545000) 0 nil])
([nil nil ((#("vector" 0 6 (fontified nil)) . 272) (undo-tree-id312 . -6) (271 . 272)) nil (26039 49667 41646 90000) 0 nil])
([nil nil ((271 . 274) (#("s" 0 1 (fontified nil)) . 271) (undo-tree-id305 . -1) (271 . 272) (#("so3" 0 3 (fontified nil)) . -271) (undo-tree-id306 . -3) (271 . 274) (#("s" 0 1 (fontified t)) . -271) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) 272) nil (26039 49667 41643 962000) 0 nil])
([nil nil ((274 . 276)) nil (26039 49667 41637 996000) 0 nil])
([nil nil ((apply yas--snippet-revive 275 280 #s(yas--snippet nil nil #s(yas--exit 280 nil) 47 nil nil #s(yas--field 1 271 280 nil nil nil t #s(yas--exit 281 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 280 nil) 47 nil nil #s(yas--field 1 271 280 nil nil nil t #s(yas--exit 281 nil)) nil)) (275 . 280) (#("log()$0" 0 7 (fontified nil)) . 275) (undo-tree-id297 . -7) (275 . 282) (#("l" 0 1 (fontified nil)) . 275) (undo-tree-id298 . -1) (275 . 276) (#("log()" 0 5 (fontified nil)) . -275) (undo-tree-id299 . -5) (275 . 280) (#("l" 0 1 (fontified t)) . -275) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) 276) nil (26039 49667 41636 412000) 0 nil])
([nil nil ((apply yas--snippet-revive 258 282 #s(yas--snippet nil (#s(yas--field 1 262 281 nil nil nil t #s(yas--exit 282 nil))) #s(yas--exit 282 nil) 45 nil #s(yas--field 1 262 281 nil nil nil t #s(yas--exit 282 nil)) nil nil)) (apply yas--snippet-revive 267 281 #s(yas--snippet nil (#s(yas--field 1 271 280 nil nil nil t #s(yas--exit 281 nil))) #s(yas--exit 281 nil) 46 nil #s(yas--field 1 271 280 nil nil nil t #s(yas--exit 281 nil)) #s(yas--field 1 262 281 nil nil nil t #s(yas--exit 282 nil)) nil))) nil (26039 49667 41628 751000) 0 nil])
([nil nil ((282 . 288)) nil (26039 49667 41627 693000) 0 nil])
([nil nil ((apply yas--snippet-revive 283 294 #s(yas--snippet nil nil #s(yas--exit 294 nil) 48 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 294 nil) 48 nil nil nil nil)) (283 . 294) (#("transpose()$0" 0 13 (fontified nil)) . 283) (283 . 296) (#("trans" 0 5 (fontified nil)) . 283) (283 . 288) (#("transpose()" 0 11 (fontified nil)) . -283) (283 . 294) (#("trans" 0 5 (fontified t)) . -283) (undo-tree-id284 . -5) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -2) (undo-tree-id288 . -2) (undo-tree-id289 . -3) (undo-tree-id290 . -3) (undo-tree-id291 . -4) (undo-tree-id292 . -4) (undo-tree-id293 . -5) (undo-tree-id294 . -5) (undo-tree-id295 . -5) (undo-tree-id296 . -5) 288) nil (26039 49667 41624 485000) 0 nil])
([nil nil ((295 . 296)) nil (26039 49667 41069 418000) 0 nil])
([nil nil ((296 . 301) (t 26039 49667 52453 641000)) nil (26039 49770 201430 236000) 0 nil])
([nil nil ((306 . 308)) nil (26039 49770 201429 357000) 0 nil])
([nil nil ((apply yas--snippet-revive 306 316 #s(yas--snippet nil nil #s(yas--exit 315 nil) 49 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 315 nil) 49 nil nil nil nil)) (306 . 316) (#("println!($0)" 0 12 (fontified nil)) . 306) (306 . 318) (#("pr" 0 2 (fontified nil)) . 306) (306 . 308) (#("println!(…)" 0 11 (fontified nil)) . -306) (306 . 317) (#("pr" 0 2 (fontified t)) . -306) (undo-tree-id622 . -2) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -2) (undo-tree-id626 . -2) (undo-tree-id627 . -2) (undo-tree-id628 . -2) 308) nil (26039 49770 201427 762000) 0 nil])
([nil nil ((315 . 317)) nil (26039 49770 201421 49000) 0 nil])
([nil nil ((316 . 326)) nil (26039 49770 201420 482000) 0 nil])
([nil nil ((326 . 328)) nil (26039 49770 201419 910000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-string-face fontified t)) . -326) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (#("d" 0 1 (face font-lock-string-face fontified t)) . -327) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) 328) nil (26039 49770 201418 635000) 0 nil])
([nil nil ((326 . 328)) nil (26039 49770 201407 206000) 0 nil])
([nil nil ((328 . 330)) nil (26039 49770 201406 640000) 0 nil])
([nil nil ((330 . 332)) nil (26039 49770 201406 54000) 0 nil])
([nil nil ((331 . 333)) nil (26039 49770 201405 320000) 0 nil])
([nil nil ((335 . 337)) nil (26039 49770 201404 769000) 0 nil])
([nil nil ((298 . 302) (#("    " 0 4 (fontified nil)) . 297) (undo-tree-id597 . -4) (undo-tree-id598 . -4) (undo-tree-id599 . -4) (undo-tree-id600 . -4) (undo-tree-id601 . -4) (undo-tree-id602 . -4) (undo-tree-id603 . -4) (undo-tree-id604 . -4) (undo-tree-id605 . -4) (301 . 302)) nil (26039 49770 201403 719000) 0 nil])
([nil nil ((nil rear-nonsticky nil 308 . 309) (nil fontified nil 297 . 309) (297 . 309)) nil (26039 49770 201396 33000) 0 nil])
([nil nil ((297 . 301) 309) nil (26039 49770 201395 11000) 0 nil])
([nil nil ((318 . 322)) nil (26039 49770 201394 194000) 0 nil])
([nil nil ((322 . 331)) nil (26039 49770 201393 565000) 0 nil])
([nil nil ((#("0" 0 1 (face font-lock-variable-name-face fontified t)) . -330) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) 331) nil (26039 49770 201392 371000) 0 nil])
([nil nil ((330 . 332)) nil (26039 49770 201385 628000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-variable-name-face fontified t)) . -331) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) 332) nil (26039 49770 201384 856000) 0 nil])
([nil nil ((331 . 332)) nil (26039 49770 201381 586000) 0 nil])
([nil nil ((332 . 333)) nil (26039 49770 201380 957000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -332) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) 333) nil (26039 49770 201380 205000) 0 nil])
([nil nil ((332 . 333)) nil (26039 49770 201377 582000) 0 nil])
([nil nil ((333 . 338)) nil (26039 49770 201376 949000) 0 nil])
([nil nil ((#("x" 0 1 (face font-lock-type-face fontified t)) . -337) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) 338) nil (26039 49770 201376 162000) 0 nil])
([nil nil ((337 . 343)) nil (26039 49770 201373 356000) 0 nil])
([nil nil ((#("2" 0 1 (face font-lock-type-face fontified t)) . -342) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) 343) nil (26039 49770 201372 319000) 0 nil])
([nil nil ((342 . 347)) nil (26039 49770 201366 679000) 0 nil])
([nil nil ((#("new" 0 3 (fontified t)) . -344) (undo-tree-id558 . -3) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -2) (undo-tree-id565 . -2) (undo-tree-id566 . -3) (undo-tree-id567 . -3) (undo-tree-id568 . -3) (undo-tree-id569 . -3) (undo-tree-id570 . -3) 347) nil (26039 49770 201364 647000) 0 nil])
([nil nil ((#("Vector3::" 0 7 (face font-lock-type-face fontified t) 7 9 (fontified t)) . -335) (undo-tree-id506 . -9) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -2) (undo-tree-id510 . -2) (undo-tree-id511 . -2) (undo-tree-id512 . -2) (undo-tree-id513 . -2) (undo-tree-id514 . -2) (undo-tree-id515 . -3) (undo-tree-id516 . -3) (undo-tree-id517 . -4) (undo-tree-id518 . -4) (undo-tree-id519 . -5) (undo-tree-id520 . -5) (undo-tree-id521 . -6) (undo-tree-id522 . -6) (undo-tree-id523 . -7) (undo-tree-id524 . -7) (undo-tree-id525 . -7) (undo-tree-id526 . -7) (undo-tree-id527 . -7) (undo-tree-id528 . -7) (undo-tree-id529 . -7) (undo-tree-id530 . -7) (undo-tree-id531 . -7) (undo-tree-id532 . -7) (undo-tree-id533 . -7) (undo-tree-id534 . -7) (undo-tree-id535 . -7) (undo-tree-id536 . -7) (undo-tree-id537 . -7) (undo-tree-id538 . -7) (undo-tree-id539 . -7) (undo-tree-id540 . -8) (undo-tree-id541 . -8) (undo-tree-id542 . -9) (undo-tree-id543 . -9) (undo-tree-id544 . -9) (undo-tree-id545 . -9) (undo-tree-id546 . -9) (undo-tree-id547 . -9) (undo-tree-id548 . -9) (undo-tree-id549 . -9) (undo-tree-id550 . -9) (undo-tree-id551 . -9) (undo-tree-id552 . -9) (undo-tree-id553 . -9) (undo-tree-id554 . -9) (undo-tree-id555 . -9) (undo-tree-id556 . -9) (undo-tree-id557 . -9) 344) nil (26039 49770 201735 745000) 0 nil])
([nil nil ((45 . 46)) nil (26039 49807 873051 819000) 0 nil] [nil nil ((#("so3 = " 0 3 (face font-lock-variable-name-face fontified t) 3 6 (fontified t)) . -329) (undo-tree-id407 . -6) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -2) (undo-tree-id429 . -2) (undo-tree-id430 . -2) (undo-tree-id431 . -2) (undo-tree-id432 . -2) (undo-tree-id433 . -3) (undo-tree-id434 . -3) (undo-tree-id435 . -3) (undo-tree-id436 . -3) (undo-tree-id437 . -3) (undo-tree-id438 . -3) (undo-tree-id439 . -3) (undo-tree-id440 . -3) (undo-tree-id441 . -3) (undo-tree-id442 . -3) (undo-tree-id443 . -3) (undo-tree-id444 . -4) (undo-tree-id445 . -4) (undo-tree-id446 . -5) (undo-tree-id447 . -5) (undo-tree-id448 . -6) (undo-tree-id449 . -6) (undo-tree-id450 . -6) (undo-tree-id451 . -6) (undo-tree-id452 . -6) (undo-tree-id453 . -6) (undo-tree-id454 . -6) (undo-tree-id455 . -6) (undo-tree-id456 . -6) (undo-tree-id457 . -6) (undo-tree-id458 . -6) (undo-tree-id459 . -6) (undo-tree-id460 . -6) (undo-tree-id461 . -6) (undo-tree-id462 . -6) (undo-tree-id463 . -6) (undo-tree-id464 . -6) (undo-tree-id465 . -6) (undo-tree-id466 . -6) (undo-tree-id467 . -6) (undo-tree-id468 . -6) (undo-tree-id469 . -6) (undo-tree-id470 . -6) (undo-tree-id471 . -6) (undo-tree-id472 . -6) (undo-tree-id473 . -6) (undo-tree-id474 . -6) (undo-tree-id475 . -6) (undo-tree-id476 . -6) (undo-tree-id477 . -6) (undo-tree-id478 . -6) (undo-tree-id479 . -6) (undo-tree-id480 . -6) (undo-tree-id481 . -6) (undo-tree-id482 . -6) (undo-tree-id483 . -6) (undo-tree-id484 . -6) (undo-tree-id485 . -6) (undo-tree-id486 . -6) (undo-tree-id487 . -6) (undo-tree-id488 . -6) (undo-tree-id489 . -6) (undo-tree-id490 . -6) (undo-tree-id491 . -6) (undo-tree-id492 . -6) (undo-tree-id493 . -6) (undo-tree-id494 . -6) (undo-tree-id495 . -6) (undo-tree-id496 . -6) (undo-tree-id497 . -6) (undo-tree-id498 . -6) (undo-tree-id499 . -6) (undo-tree-id500 . -6) (undo-tree-id501 . -6) (undo-tree-id502 . -6) (undo-tree-id503 . -6) (undo-tree-id504 . -6) (undo-tree-id505 . -6) 335) ((329 . 335)) (26039 49770 199971 657000) 0 nil])
([nil nil ((46 . 51)) nil (26039 49807 873051 168000) 0 nil])
nil
([nil nil ((#("a" 0 1 (face font-lock-constant-face fontified t)) . -50) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) 51) nil (26039 49807 873050 285000) 0 nil])
([nil nil ((50 . 51)) nil (26039 49807 873046 301000) 0 nil])
([nil nil ((50 . 58) (#("n" 0 1 (fontified nil)) . 50) (50 . 51) (#("nalgebra" 0 8 (fontified nil)) . -50) (50 . 58) (#("n" 0 1 (face font-lock-constant-face fontified t)) . -50) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) 51) nil (26039 49807 873045 140000) 0 nil])
([nil nil ((58 . 63)) nil (26039 49807 873040 742000) 0 nil])
([nil nil ((60 . 67) (#("Vec" 0 3 (fontified nil)) . 60) (60 . 63) (#("Vector3" 0 7 (fontified nil)) . -60) (60 . 67) (#("Vec" 0 3 (face font-lock-type-face fontified t)) . -60) (undo-tree-id699 . -3) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -2) (undo-tree-id706 . -2) (undo-tree-id707 . -2) (undo-tree-id708 . -3) (undo-tree-id709 . -3) (undo-tree-id710 . -3) (undo-tree-id711 . -3) (undo-tree-id712 . -3) 63) nil (26039 49807 873039 225000) 0 nil])
([nil nil ((67 . 68)) nil (26039 49807 873027 922000) 0 nil])
([nil nil ((358 . 359)) nil (26039 49807 873027 342000) 0 nil])
([nil nil ((358 . 361) (#("V" 0 1 (fontified nil)) . 358) (358 . 359) (#("Vec" 0 3 (fontified nil)) . -358) (358 . 361) (#("V" 0 1 (face font-lock-type-face fontified t)) . -358) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) 359) nil (26039 49807 873026 133000) 0 nil])
([nil nil ((#("V" 0 1 (face font-lock-type-face fontified t)) . -358) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -359) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (#("c" 0 1 (face font-lock-type-face fontified t)) . -360) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) 361) nil (26039 49807 873021 144000) 0 nil])
([nil nil ((358 . 363)) nil (26039 49807 872838 426000) 0 nil])
([nil nil ((358 . 365) (#("Vectr" 0 5 (fontified nil)) . 358) (358 . 363) (#("Vector3" 0 7 (fontified nil)) . -358) (358 . 365) (#("Vectr" 0 5 (face font-lock-type-face fontified t)) . -358) (undo-tree-id656 . -5) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -2) (undo-tree-id661 . -2) (undo-tree-id662 . -2) (undo-tree-id663 . -3) (undo-tree-id664 . -3) (undo-tree-id665 . -4) (undo-tree-id666 . -4) (undo-tree-id667 . -5) (undo-tree-id668 . -5) 363) nil (26039 49807 872836 948000) 0 nil])
([nil nil ((365 . 370)) nil (26039 49807 872826 882000) 0 nil])
([nil nil ((367 . 370) (#("new" 0 3 (fontified nil)) . 367) (367 . 370) (#("new" 0 3 (fontified t)) . -367) (undo-tree-id643 . -3) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -2) (undo-tree-id650 . -2) (undo-tree-id651 . -3) (undo-tree-id652 . -3) (undo-tree-id653 . -3) (undo-tree-id654 . -3) (undo-tree-id655 . -3) 370) nil (26039 49807 872825 448000) 0 nil])
([nil nil ((370 . 372)) nil (26039 49807 872815 215000) 0 nil])
([nil nil ((371 . 374)) nil (26039 49807 872814 621000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -373) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) 374) nil (26039 49807 872813 728000) 0 nil])
([nil nil ((373 . 377)) nil (26039 49807 872810 839000) 0 nil])
([nil nil ((377 . 379)) nil (26039 49807 872810 228000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -378) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) 379) nil (26039 49807 872809 218000) 0 nil])
([nil nil ((378 . 380)) nil (26039 49807 872805 448000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -379) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) 380) nil (26039 49807 872803 762000) 0 nil])
([nil nil ((379 . 381)) nil (26039 49807 872790 282000) 0 nil])
([nil nil ((382 . 383)) nil (26039 49807 872786 359000) 0 nil])
([nil nil ((381 . 383) (t 26039 49807 889112 176000)) nil (26039 49814 538083 492000) 0 nil])
([nil nil ((378 . 380)) nil (26039 49814 538078 856000) 0 nil])
([nil nil ((387 . 392) (t 26039 49814 552445 127000)) nil (26039 49928 387535 273000) 0 nil])
([nil nil ((392 . 401)) nil (26039 49928 387534 644000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -399) (undo-tree-id844 . -1) (#("_" 0 1 (fontified t)) . -400) (undo-tree-id845 . -1) 401) nil (26039 49928 387533 871000) 0 nil])
([nil nil ((399 . 408)) nil (26039 49928 387531 933000) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-variable-name-face fontified t)) . -407) (undo-tree-id843 . -1) 408) nil (26039 49928 387531 289000) 0 nil])
([nil nil ((407 . 408)) nil (26039 49928 387529 992000) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-variable-name-face fontified t)) . -407) (undo-tree-id842 . -1) 408) nil (26039 49928 387529 361000) 0 nil])
([nil nil ((407 . 408)) nil (26039 49928 387528 63000) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-variable-name-face fontified t)) . -407) (undo-tree-id841 . -1) 408) nil (26039 49928 387527 390000) 0 nil])
([nil nil ((407 . 409)) nil (26039 49928 387526 159000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -406) (undo-tree-id838 . -1) (#("d" 0 1 (face font-lock-variable-name-face fontified t)) . -407) (undo-tree-id839 . -1) (#(" " 0 1 (fontified t)) . -408) (undo-tree-id840 . -1) 409) nil (26039 49928 387525 243000) 0 nil])
([nil nil ((406 . 411)) nil (26039 49928 387522 469000) 0 nil])
([nil nil ((410 . 413) (#("S" 0 1 (fontified nil)) . 410) (410 . 411) (#("SO3" 0 3 (fontified nil)) . -410) (410 . 413) (#("S" 0 1 (face font-lock-type-face fontified t)) . -410) (undo-tree-id837 . -1) 411) nil (26039 49928 387521 605000) 0 nil])
([nil nil ((#("SO3" 0 3 (face font-lock-type-face fontified t)) . -410) (undo-tree-id836 . -3) 413) nil (26039 49928 387519 581000) 0 nil])
([nil nil ((410 . 411)) nil (26039 49928 387518 274000) 0 nil])
([nil nil ((410 . 413) (#("S" 0 1 (fontified nil)) . 410) (410 . 411) (#("SO3" 0 3 (fontified nil)) . -410) (410 . 413) (#("S" 0 1 (face font-lock-type-face fontified t)) . -410) (undo-tree-id835 . -1) 411) nil (26039 49928 387517 292000) 0 nil])
([nil nil ((413 . 415)) nil (26039 49928 387514 836000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 419 429 nil nil nil t #s(yas--exit 430 nil))) #s(yas--exit 430 nil) 50 nil #s(yas--field 1 419 429 nil nil nil t #s(yas--exit 430 nil)) nil nil)) (415 . 426) (#("exp(${1:vector})$0" 0 18 (fontified nil)) . 415) (415 . 433) (#("exp(…)" 0 6 (fontified nil)) . -415) (415 . 421)) nil (26039 49928 387514 39000) 0 nil])
([nil nil ((#("vector" 0 6 (fontified nil)) . 420) (419 . 420)) nil (26039 49928 387512 714000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -419) (undo-tree-id833 . -1) (undo-tree-id834 . -1) 420) nil (26039 49928 387511 833000) 0 nil])
([nil nil ((419 . 421)) nil (26039 49928 387509 952000) 0 nil])
([nil nil ((419 . 429) (#("up" 0 2 (fontified nil)) . 419) (419 . 421) (#("update_so3" 0 10 (fontified nil)) . -419) (419 . 429) (#("up" 0 2 (fontified t)) . -419) (undo-tree-id831 . -2) (undo-tree-id832 . -2) 421) nil (26039 49928 387508 979000) 0 nil])
([nil nil ((apply yas--snippet-revive 415 430 #s(yas--snippet nil (#s(yas--field 1 419 429 nil nil nil t #s(yas--exit 430 nil))) #s(yas--exit 430 nil) 50 nil #s(yas--field 1 419 429 nil nil nil t #s(yas--exit 430 nil)) nil nil))) nil (26039 49928 387506 394000) 0 nil])
([nil nil ((430 . 432)) nil (26039 49928 387505 835000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -431) (undo-tree-id830 . -1) 432) nil (26039 49928 387505 92000) 0 nil])
([nil nil ((431 . 434)) nil (26039 49928 387503 788000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 435 444 nil nil nil t #s(yas--exit 445 nil))) #s(yas--exit 445 nil) 51 nil #s(yas--field 1 435 444 nil nil nil t #s(yas--exit 445 nil)) nil nil)) (431 . 439) (#("dot(${1:rhs})$0" 0 15 (fontified nil)) . 431) (431 . 446) (#("dot" 0 3 (fontified nil)) . 431) (431 . 434) (#("dot(…)" 0 6 (fontified nil)) . -431) (431 . 437) (#("dot" 0 3 (fontified t)) . -431) (undo-tree-id829 . -3) 434) nil (26039 49928 387502 438000) 0 nil])
([nil nil ((#("rhs" 0 3 (fontified nil)) . 436) (435 . 436)) nil (26039 49928 387500 135000) 0 nil])
([nil nil ((435 . 438) (#("s" 0 1 (fontified nil)) . 435) (435 . 436) (#("so3" 0 3 (fontified nil)) . -435) (435 . 438) (#("s" 0 1 (fontified t)) . -435) (undo-tree-id827 . -1) (undo-tree-id828 . -1) 436) nil (26039 49928 387499 78000) 0 nil])
([nil nil ((438 . 439)) nil (26039 49928 387496 580000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -438) (undo-tree-id825 . -1) (undo-tree-id826 . -1) 439) nil (26039 49928 387495 958000) 0 nil])
([nil nil ((438 . 439)) nil (26039 49928 387493 901000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -438) (undo-tree-id823 . -1) (undo-tree-id824 . -1) 439) nil (26039 49928 387493 290000) 0 nil])
([nil nil ((438 . 440)) nil (26039 49928 387491 506000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -439) (undo-tree-id821 . -1) (undo-tree-id822 . -1) 440) nil (26039 49928 387490 854000) 0 nil])
([nil nil ((439 . 441)) nil (26039 49928 387489 78000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -439) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (#(";" 0 1 (fontified t)) . -440) (undo-tree-id819 . -1) (undo-tree-id820 . -1) 441) nil (26039 49928 387488 180000) 0 nil])
([nil nil ((439 . 440)) nil (26039 49928 387484 989000) 0 nil])
([nil nil ((apply yas--snippet-revive 439 444 #s(yas--snippet nil nil #s(yas--exit 444 nil) 52 nil nil #s(yas--field 1 435 444 nil nil nil t #s(yas--exit 445 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 444 nil) 52 nil nil #s(yas--field 1 435 444 nil nil nil t #s(yas--exit 445 nil)) nil)) (439 . 444) (#("log()$0" 0 7 (fontified nil)) . 439) (439 . 446) (#("l" 0 1 (fontified nil)) . 439) (439 . 440) (#("log()" 0 5 (fontified nil)) . -439) (439 . 444) (#("l" 0 1 (fontified t)) . -439) (undo-tree-id816 . -1) 440) nil (26039 49928 387483 866000) 0 nil])
([nil nil ((apply yas--snippet-revive 431 445 #s(yas--snippet nil (#s(yas--field 1 435 444 nil nil nil t #s(yas--exit 445 nil))) #s(yas--exit 445 nil) 51 nil #s(yas--field 1 435 444 nil nil nil t #s(yas--exit 445 nil)) nil nil))) nil (26039 49928 387481 450000) 0 nil])
([nil nil ((#("log()" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-3-face) fontified t) 4 5 (face (rainbow-delimiters-depth-3-face) fontified t)) . -439) (undo-tree-id814 . -5) (undo-tree-id815 . -5) 444) nil (26039 49928 387480 638000) 0 nil])
([nil nil ((#("so3." 0 4 (fontified t)) . -435) (undo-tree-id812 . -4) (undo-tree-id813 . -4) 439) nil (26039 49928 387478 259000) 0 nil])
([nil nil ((435 . 436)) nil (26039 49928 387476 287000) 0 nil])
([nil nil ((435 . 438) (#("S" 0 1 (fontified nil)) . 435) (435 . 436) (#("SO3" 0 3 (fontified nil)) . -435) (435 . 438) (#("S" 0 1 (face font-lock-type-face fontified t)) . -435) (undo-tree-id811 . -1) 436) nil (26039 49928 387475 390000) 0 nil])
([nil nil ((438 . 441)) nil (26039 49928 387473 397000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -438) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (#("e" 0 1 (fontified t)) . -439) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (#("x" 0 1 (fontified t)) . -440) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) 441) nil (26039 49928 387470 410000) 0 nil])
([nil nil ((438 . 440)) nil (26039 49928 387427 460000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 444 453 nil nil nil t #s(yas--exit 454 nil))) #s(yas--exit 454 nil) 53 nil #s(yas--field 1 444 453 nil nil nil t #s(yas--exit 454 nil)) nil nil)) (440 . 451) (#("exp(${1:vector})$0" 0 18 (fontified nil)) . 440) (440 . 458) (#("exp(…)" 0 6 (fontified nil)) . -440) (440 . 446)) nil (26039 49928 387426 584000) 0 nil])
([nil nil ((#("vector" 0 6 (fontified nil)) . 445) (undo-tree-id741 . -6) (444 . 445)) nil (26039 49928 387425 234000) 0 nil])
([nil nil ((444 . 447) (#("s" 0 1 (fontified nil)) . 444) (undo-tree-id731 . -1) (444 . 445) (#("so3" 0 3 (fontified nil)) . -444) (undo-tree-id732 . -3) (444 . 447) (#("s" 0 1 (fontified t)) . -444) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) 445) nil (26039 49928 387422 960000) 0 nil])
([nil nil ((447 . 449)) nil (26039 49928 387415 228000) 0 nil])
([nil nil ((apply yas--snippet-revive 448 453 #s(yas--snippet nil nil #s(yas--exit 453 nil) 54 nil nil #s(yas--field 1 444 453 nil nil nil t #s(yas--exit 454 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 453 nil) 54 nil nil #s(yas--field 1 444 453 nil nil nil t #s(yas--exit 454 nil)) nil)) (448 . 453) (#("log()$0" 0 7 (fontified nil)) . 448) (undo-tree-id722 . -7) (448 . 455) (#("l" 0 1 (fontified nil)) . 448) (undo-tree-id723 . -1) (448 . 449) (#("log()" 0 5 (fontified nil)) . -448) (undo-tree-id724 . -5) (448 . 453) (#("l" 0 1 (fontified t)) . -448) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) 449) nil (26039 49928 387412 528000) 0 nil])
([nil nil ((455 . 456) (apply yas--snippet-revive 440 454 #s(yas--snippet nil (#s(yas--field 1 444 453 nil nil nil t #s(yas--exit 454 nil))) #s(yas--exit 454 nil) 53 nil #s(yas--field 1 444 453 nil nil nil t #s(yas--exit 454 nil)) nil nil))) nil (26039 49928 387395 625000) 0 nil])
([nil nil ((435 . 436) (t 26039 49928 399105 226000)) nil (26039 49933 877032 209000) 0 nil])
([nil nil ((410 . 411) (t 26039 49933 889104 910000)) nil (26039 50553 867362 362000) 0 nil])
([nil nil ((410 . 411)) nil (26039 50553 867361 637000) 0 nil])
([nil nil ((410 . 413) (#("S" 0 1 (fontified nil)) . 410) (410 . 411) (#("SO3" 0 3 (fontified nil)) . -410) (410 . 413) (#("S" 0 1 (face font-lock-type-face fontified t)) . -410) (undo-tree-id855 . -1) (undo-tree-id856 . -1) 411) nil (26039 50553 867360 568000) 0 nil])
([nil nil ((413 . 415)) nil (26039 50553 867357 787000) 0 nil])
([nil nil ((415 . 416)) nil (26039 50553 867356 725000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -414) (undo-tree-id853 . -1) (#("l" 0 1 (fontified t)) . -415) (undo-tree-id854 . -1) 416) nil (26039 50553 867355 846000) 0 nil])
([nil nil ((#("SO3:" 0 3 (face font-lock-variable-name-face fontified t) 3 4 (fontified t)) . -410) (undo-tree-id852 . -4) 414) nil (26039 50553 867353 331000) 0 nil])
([nil nil ((494 . 495)) nil (26039 50553 867351 677000) 0 nil])
([nil nil ((494 . 505) (#("s" 0 1 (fontified nil)) . 494) (494 . 495) (#("so3_updated" 0 11 (fontified nil)) . -494) (494 . 505) (#("s" 0 1 (fontified t)) . -494) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) 495) nil (26039 50553 867348 802000) 0 nil])
([nil nil ((506 . 507)) nil (26039 50553 867332 120000) 0 nil])
([nil nil ((507 . 512) (t 26039 50553 882402 507000)) nil (26039 50812 738934 239000) 0 nil])
([nil nil ((nil rear-nonsticky nil 555 . 556) (nil fontified nil 555 . 556) (nil fontified nil 554 . 555) (nil fontified nil 543 . 554) (nil fontified nil 541 . 543) (nil fontified nil 540 . 541) (nil fontified nil 536 . 540) (nil fontified nil 521 . 536) (nil fontified nil 520 . 521) (nil fontified nil 512 . 520) (512 . 556)) nil (26039 50812 738933 98000) 0 nil])
([nil nil ((554 . 555)) nil (26039 50812 738931 4000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -554) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) 555) nil (26039 50812 738930 130000) 0 nil])
([nil nil ((#("updated" 0 7 (fontified t)) . -547) (undo-tree-id1188 . -7) (undo-tree-id1189 . -7) 554) nil (26039 50812 738927 926000) 0 nil])
([nil nil ((#("so3_" 0 4 (fontified t)) . -543) (undo-tree-id1186 . -4) (undo-tree-id1187 . -4) 547) nil (26039 50812 738925 776000) 0 nil])
([nil nil ((543 . 544)) nil (26039 50812 738923 673000) 0 nil])
([nil nil ((543 . 546) (#("S" 0 1 (fontified nil)) . 543) (543 . 544) (#("SO3" 0 3 (fontified nil)) . -543) (543 . 546) (#("S" 0 1 (face font-lock-type-face fontified t)) . -543) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) 544) nil (26039 50812 738922 566000) 0 nil])
([nil nil ((546 . 548)) nil (26039 50812 738919 720000) 0 nil])
([nil nil ((#("SO3::" 0 3 (face font-lock-type-face fontified t) 3 5 (fontified t)) . -543) (undo-tree-id1179 . -5) (undo-tree-id1180 . -5) (undo-tree-id1181 . -5) (undo-tree-id1182 . -5) (undo-tree-id1183 . -5) 548) nil (26039 50812 738918 888000) 0 nil])
([nil nil ((543 . 544)) nil (26039 50812 738914 527000) 0 nil])
([nil nil ((543 . 546) (#("s" 0 1 (fontified nil)) . 543) (543 . 544) (#("so3" 0 3 (fontified nil)) . -543) (543 . 546) (#("s" 0 1 (fontified t)) . -543) (undo-tree-id1178 . -1) 544) nil (26039 50812 738913 532000) 0 nil])
([nil nil ((546 . 547)) nil (26039 50812 738911 371000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -543) (undo-tree-id1174 . -1) (#("o" 0 1 (fontified t)) . -544) (undo-tree-id1175 . -1) (#("3" 0 1 (fontified t)) . -545) (undo-tree-id1176 . -1) (#("." 0 1 (fontified t)) . -546) (undo-tree-id1177 . -1) 547) nil (26039 50812 738910 59000) 0 nil])
([nil nil ((543 . 544)) nil (26039 50812 738906 337000) 0 nil])
([nil nil ((543 . 546) (#("s" 0 1 (fontified nil)) . 543) (543 . 544) (#("so3" 0 3 (fontified nil)) . -543) (543 . 546) (#("s" 0 1 (fontified t)) . -543) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) 544) nil (26039 50812 738905 72000) 0 nil])
([nil nil ((546 . 547)) nil (26039 50812 738900 78000) 0 nil])
([nil nil ((547 . 555) (#("rotation" 0 8 (fontified nil)) . -547) (547 . 555)) nil (26039 50812 738899 281000) 0 nil])
([nil nil ((555 . 557)) nil (26039 50812 738898 359000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -555) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (#("." 0 1 (fontified t)) . -556) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) 557) nil (26039 50812 738896 720000) 0 nil])
([nil nil ((555 . 560)) nil (26039 50812 738872 500000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -555) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (#("r" 0 1 (fontified t)) . -556) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (#("o" 0 1 (fontified t)) . -557) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (#("t" 0 1 (fontified t)) . -558) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (#("a" 0 1 (fontified t)) . -559) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) 560) nil (26039 50812 738868 256000) 0 nil])
([nil nil ((555 . 557)) nil (26039 50812 738804 345000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -555) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (#("m" 0 1 (fontified t)) . -556) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) 557) nil (26039 50812 738802 930000) 0 nil])
([nil nil ((543 . 544)) nil (26039 50812 738790 223000) 0 nil])
([nil nil ((543 . 544)) nil (26039 50812 738789 658000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -543) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) 544) nil (26039 50812 738788 631000) 0 nil])
([nil nil ((543 . 544)) nil (26039 50812 738783 128000) 0 nil])
([nil nil ((#("q" 0 1 (fontified t)) . -543) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) 544) nil (26039 50812 738781 973000) 0 nil])
([nil nil ((543 . 545)) nil (26039 50812 738774 514000) 0 nil])
([nil nil ((#("q" 0 1 (fontified t)) . -543) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (#("u" 0 1 (fontified t)) . -544) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) 545) nil (26039 50812 738772 191000) 0 nil])
([nil nil ((543 . 546)) nil (26039 50812 737633 674000) 0 nil])
([nil nil ((60 . 61) (67 . 80) (543 . 543) (543 . 553) (#("Qua" 0 3 (fontified nil)) . 543) (543 . 546) (#("Quaternion (use nalgebra::Quaternion)" 0 37 (fontified nil)) . -543) (543 . 580) (#("Qua" 0 3 (face font-lock-type-face fontified t)) . -543) (undo-tree-id966 . -3) (undo-tree-id967 . -3) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -2) (undo-tree-id972 . -2) (undo-tree-id973 . -2) (undo-tree-id974 . -2) (undo-tree-id975 . -2) (undo-tree-id976 . -2) (undo-tree-id977 . -2) (undo-tree-id978 . -2) (undo-tree-id979 . -2) (undo-tree-id980 . -3) (undo-tree-id981 . -3) (undo-tree-id982 . -3) (undo-tree-id983 . -3) (undo-tree-id984 . -3) (undo-tree-id985 . -3) (undo-tree-id986 . -3) (undo-tree-id987 . -3) 546) nil (26039 50812 737631 591000) 0 nil])
([nil nil ((567 . 570)) nil (26039 50812 737615 167000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -569) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) 570) nil (26039 50812 737614 221000) 0 nil])
([nil nil ((569 . 573)) nil (26039 50812 737610 253000) 0 nil])
([nil nil ((#("from" 0 4 (fontified t)) . -569) (undo-tree-id939 . -4) (undo-tree-id940 . -4) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -2) (undo-tree-id944 . -2) (undo-tree-id945 . -3) (undo-tree-id946 . -3) (undo-tree-id947 . -4) (undo-tree-id948 . -4) (undo-tree-id949 . -4) (undo-tree-id950 . -4) (undo-tree-id951 . -4) (undo-tree-id952 . -4) (undo-tree-id953 . -4) (undo-tree-id954 . -4) (undo-tree-id955 . -4) (undo-tree-id956 . -4) (undo-tree-id957 . -4) (undo-tree-id958 . -4) (undo-tree-id959 . -4) (undo-tree-id960 . -4) 573) nil (26039 50812 737608 762000) 0 nil])
([nil nil ((#("Quaternion::" 0 10 (face font-lock-type-face fontified t) 10 12 (fontified t)) . -557) (undo-tree-id901 . -12) (undo-tree-id902 . -12) (undo-tree-id903 . -10) (undo-tree-id904 . -10) (undo-tree-id905 . -10) (undo-tree-id906 . -10) (undo-tree-id907 . -11) (undo-tree-id908 . -11) (undo-tree-id909 . -12) (undo-tree-id910 . -12) (undo-tree-id911 . -12) (undo-tree-id912 . -12) (undo-tree-id913 . -12) (undo-tree-id914 . -12) (undo-tree-id915 . -12) (undo-tree-id916 . -12) (undo-tree-id917 . -12) (undo-tree-id918 . -12) (undo-tree-id919 . -12) (undo-tree-id920 . -12) (undo-tree-id921 . -12) (undo-tree-id922 . -12) (undo-tree-id923 . -12) (undo-tree-id924 . -12) (undo-tree-id925 . -12) (undo-tree-id926 . -12) (undo-tree-id927 . -12) (undo-tree-id928 . -12) (undo-tree-id929 . -12) (undo-tree-id930 . -12) (undo-tree-id931 . -12) (undo-tree-id932 . -12) (undo-tree-id933 . -12) (undo-tree-id934 . -12) (undo-tree-id935 . -12) (undo-tree-id936 . -12) (undo-tree-id937 . -12) (undo-tree-id938 . -12) 569) nil (26039 50812 737592 506000) 0 nil])
([nil nil ((557 . 561)) nil (26039 50812 737566 644000) 0 nil])
([nil nil ((80 . 96) (557 . 557) (557 . 571) (#("Unit" 0 4 (fontified nil)) . 557) (557 . 561) (#("UnitQuaternion (use nalgebra::UnitQuaternion)" 0 45 (fontified nil)) . -557) (557 . 602) (#("Unit" 0 4 (face font-lock-type-face fontified t)) . -557) (undo-tree-id884 . -4) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -2) (undo-tree-id891 . -2) (undo-tree-id892 . -2) (undo-tree-id893 . -2) (undo-tree-id894 . -2) (undo-tree-id895 . -3) (undo-tree-id896 . -3) (undo-tree-id897 . -4) (undo-tree-id898 . -4) (undo-tree-id899 . -4) (undo-tree-id900 . -4) 561) nil (26039 50812 737564 795000) 0 nil])
([nil nil ((587 . 591)) nil (26039 50812 737551 506000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 606 616 nil nil nil t #s(yas--exit 617 nil))) #s(yas--exit 617 nil) 58 nil #s(yas--field 1 606 616 nil nil nil t #s(yas--exit 617 nil)) nil nil)) (589 . 616) (#("from_scaled_axis(${1:axisangle})$0" 0 34 (fontified nil)) . 589) (589 . 623) (#("fr" 0 2 (fontified nil)) . 589) (589 . 591) (#("from_scaled_axis(…)" 0 19 (fontified nil)) . -589) (589 . 608) (#("fr" 0 2 (fontified t)) . -589) (undo-tree-id877 . -2) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -2) (undo-tree-id881 . -2) (undo-tree-id882 . -2) (undo-tree-id883 . -2) 591) nil (26039 50812 737549 428000) 0 nil])
([nil nil ((#("axisangle" 0 9 (fontified nil)) . 607) (undo-tree-id876 . -9) (606 . 607)) nil (26039 50812 737542 101000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -606) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) 607) nil (26039 50812 737539 419000) 0 nil])
([nil nil ((606 . 608)) nil (26039 50812 736539 822000) 0 nil])
([nil nil ((606 . 616) (#("up" 0 2 (fontified nil)) . 606) (undo-tree-id857 . -2) (606 . 608) (#("update_so3" 0 10 (fontified nil)) . -606) (undo-tree-id858 . -10) (606 . 616) (#("up" 0 2 (fontified t)) . -606) (undo-tree-id859 . -2) (undo-tree-id860 . -2) (undo-tree-id861 . -2) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -2) 608) nil (26039 50812 736537 409000) 0 nil])
([nil nil ((apply yas--snippet-revive 589 617 #s(yas--snippet nil (#s(yas--field 1 606 616 nil nil nil t #s(yas--exit 617 nil))) #s(yas--exit 617 nil) 58 nil #s(yas--field 1 606 616 nil nil nil t #s(yas--exit 617 nil)) nil nil))) nil (26039 50812 736519 597000) 0 nil])
([nil nil ((618 . 620)) nil (26039 50812 736515 227000) 0 nil])
([nil nil ((632 . 635) (t 26039 50812 752387 585000)) nil (26039 50822 243933 217000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -633) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (#("o" 0 1 (fontified t)) . -634) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) 635) nil (26039 50822 243930 880000) 0 nil])
([nil nil ((633 . 637)) nil (26039 50822 243800 433000) 0 nil])
([nil nil ((apply yas--snippet-revive 633 639 #s(yas--snippet nil nil #s(yas--exit 639 nil) 59 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 639 nil) 59 nil nil nil nil)) (633 . 639) (#("into()$0" 0 8 (fontified nil)) . 633) (633 . 641) (#("into" 0 4 (fontified nil)) . 633) (633 . 637) (#("into() (as Into)" 0 16 (fontified nil)) . -633) (633 . 649) (#("into" 0 4 (fontified t)) . -633) (undo-tree-id1192 . -4) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -2) (undo-tree-id1196 . -2) (undo-tree-id1197 . -3) (undo-tree-id1198 . -3) (undo-tree-id1199 . -4) (undo-tree-id1200 . -4) (undo-tree-id1201 . -4) (undo-tree-id1202 . -4) 637) nil (26039 50822 243795 682000) 0 nil])
([nil nil ((#("into()" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-3-face) fontified t) 5 6 (face (rainbow-delimiters-depth-3-face) fontified t)) . -633) (undo-tree-id1449 . -6) (undo-tree-id1450 . -6) (undo-tree-id1451 . -6) (undo-tree-id1452 . -6) (undo-tree-id1453 . -6) (undo-tree-id1454 . -6) (undo-tree-id1455 . -6) (undo-tree-id1456 . -6) (undo-tree-id1457 . -6) (undo-tree-id1458 . -6) (undo-tree-id1459 . -6) (undo-tree-id1460 . -6) (undo-tree-id1461 . -6) 639 (t 26039 50822 255720 368000)) nil (26039 50860 93416 21000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -632) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) 633) nil (26039 50860 92953 505000) 0 nil])
([nil nil ((620 . 621)) nil (26039 50860 92926 887000) 0 nil])
([nil nil ((620 . 624)) nil (26039 50860 92926 166000) 0 nil])
([nil nil ((96 . 102) (620 . 620) (620 . 624) (#("Unit" 0 4 (fontified nil)) . 620) (620 . 624) (#("Unit (use nalgebra::Unit)" 0 25 (fontified nil)) . -620) (620 . 645) (#("Unit" 0 4 (face font-lock-type-face fontified t)) . -620) (undo-tree-id1397 . -4) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -2) (undo-tree-id1402 . -2) (undo-tree-id1403 . -3) (undo-tree-id1404 . -3) (undo-tree-id1405 . -4) (undo-tree-id1406 . -4) (undo-tree-id1407 . -4) (undo-tree-id1408 . -4) (undo-tree-id1409 . -4) 624) nil (26039 50860 92924 506000) 0 nil])
([nil nil ((630 . 633)) nil (26039 50860 92914 363000) 0 nil])
([nil nil ((633 . 634)) nil (26039 50860 92913 728000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -632) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (#("r" 0 1 (fontified t)) . -633) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) 634) nil (26039 50860 92912 230000) 0 nil])
([nil nil ((632 . 633)) nil (26039 50860 92898 83000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 636 641 nil nil nil nil #s(yas--exit 642 nil))) #s(yas--exit 642 nil) 60 nil #s(yas--field 1 636 641 nil nil nil nil #s(yas--exit 642 nil)) nil nil)) (632 . 642) (#("new(${1:angle})$0" 0 17 (fontified nil)) . 632) (632 . 649) (#("n" 0 1 (fontified nil)) . 632) (632 . 633) (#("new(…)" 0 6 (fontified nil)) . -632) (632 . 638) (#("n" 0 1 (fontified t)) . -632) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) 633) nil (26039 50860 92896 734000) 0 nil])
([nil nil ((apply yas--snippet-revive 632 642 #s(yas--snippet nil (#s(yas--field 1 636 641 nil nil nil nil #s(yas--exit 642 nil))) #s(yas--exit 642 nil) 60 nil #s(yas--field 1 636 641 nil nil nil nil #s(yas--exit 642 nil)) nil nil))) nil (26039 50860 92890 781000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -640) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -641) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (#(" " 0 1 (fontified t)) . -642) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) 643) nil (26039 50860 92888 305000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -636) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (#("n" 0 1 (fontified t)) . -637) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (#("g" 0 1 (fontified t)) . -638) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (#("l" 0 1 (fontified t)) . -639) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) 640) nil (26039 50860 92856 809000) 0 nil])
([nil nil ((648 . 649)) nil (26039 50860 92676 879000) 0 nil])
([nil nil ((630 . 631) (t 26039 50860 109051 529000)) nil (26039 50888 899330 3000) 0 nil])
([nil nil ((#("Unit" 0 4 (face font-lock-type-face fontified t)) . -626) (undo-tree-id1835 . -4) (undo-tree-id1836 . -4) (undo-tree-id1837 . -4) (undo-tree-id1838 . -4) (undo-tree-id1839 . -4) (undo-tree-id1840 . -4) (undo-tree-id1841 . -4) (undo-tree-id1842 . -4) (undo-tree-id1843 . -4) (undo-tree-id1844 . -4) (undo-tree-id1845 . -4) (undo-tree-id1846 . -4) (undo-tree-id1847 . -4) (undo-tree-id1848 . -4) (undo-tree-id1849 . -4) (undo-tree-id1850 . -4) (undo-tree-id1851 . -4) (undo-tree-id1852 . -4) 630) nil (26039 50888 899328 530000) 0 nil])
([nil nil ((626 . 628)) nil (26039 50888 899315 609000) 0 nil])
([nil nil ((626 . 640) (#("Un" 0 2 (fontified nil)) . 626) (626 . 628) (#("UnitQuaternion" 0 14 (fontified nil)) . -626) (626 . 640) (#("Un" 0 2 (face font-lock-type-face fontified t)) . -626) (undo-tree-id1825 . -2) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (undo-tree-id1829 . -2) (undo-tree-id1830 . -2) (undo-tree-id1831 . -2) (undo-tree-id1832 . -2) (undo-tree-id1833 . -2) (undo-tree-id1834 . -2) 628) nil (26039 50888 899314 214000) 0 nil])
([nil nil ((640 . 643)) nil (26039 50888 899305 410000) 0 nil])
([nil nil ((642 . 657) (#("f" 0 1 (fontified nil)) . 642) (642 . 643) (#("from_quaternion" 0 15 (fontified nil)) . -642) (642 . 657) (#("f" 0 1 (fontified t)) . -642) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) 643) nil (26039 50888 899303 984000) 0 nil])
([nil nil ((#("new(" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-3-face) fontified t)) . -660) (undo-tree-id1758 . -4) (undo-tree-id1759 . -4) (undo-tree-id1760 . -4) (undo-tree-id1761 . -4) (undo-tree-id1762 . -4) (undo-tree-id1763 . -4) (undo-tree-id1764 . -4) (undo-tree-id1765 . -4) (undo-tree-id1766 . -4) (undo-tree-id1767 . -4) (undo-tree-id1768 . -4) (undo-tree-id1769 . -4) (undo-tree-id1770 . -4) (undo-tree-id1771 . -4) (undo-tree-id1772 . -4) (undo-tree-id1773 . -4) (undo-tree-id1774 . -4) (undo-tree-id1775 . -4) (undo-tree-id1776 . -4) (undo-tree-id1777 . -4) (undo-tree-id1778 . -4) (undo-tree-id1779 . -4) (undo-tree-id1780 . -4) (undo-tree-id1781 . -4) (undo-tree-id1782 . -4) (undo-tree-id1783 . -4) (undo-tree-id1784 . -4) (undo-tree-id1785 . -4) (undo-tree-id1786 . -4) (undo-tree-id1787 . -4) (undo-tree-id1788 . -4) (undo-tree-id1789 . -4) (undo-tree-id1790 . -4) (undo-tree-id1791 . -4) (undo-tree-id1792 . -4) (undo-tree-id1793 . -4) (undo-tree-id1794 . -4) (undo-tree-id1795 . -4) (undo-tree-id1796 . -4) (undo-tree-id1797 . -4) (undo-tree-id1798 . -4) (undo-tree-id1799 . -4) (undo-tree-id1800 . -4) (undo-tree-id1801 . -4) (undo-tree-id1802 . -4) (undo-tree-id1803 . -4) (undo-tree-id1804 . -4) (undo-tree-id1805 . -4) (undo-tree-id1806 . -4) (undo-tree-id1807 . -4) (undo-tree-id1808 . -4) (undo-tree-id1809 . -4) (undo-tree-id1810 . -4) (undo-tree-id1811 . -4) (undo-tree-id1812 . -4) (undo-tree-id1813 . -4) (undo-tree-id1814 . -1) (undo-tree-id1815 . -2) (undo-tree-id1816 . -3) (undo-tree-id1817 . -4) 664) nil (26039 50888 899296 58000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -657) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (#(":" 0 1 (fontified t)) . -658) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (#(":" 0 1 (fontified t)) . -659) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) 660) nil (26039 50888 899224 586000) 0 nil])
([nil nil ((657 . 658)) nil (26039 50888 898472 970000) 0 nil])
([nil nil ((579 . 580) (t 26039 50888 915716 541000)) nil (26039 50916 102786 822000) 0 nil])
([nil nil ((579 . 580)) nil (26039 50916 102785 977000) 0 nil])
([nil nil ((579 . 580)) nil (26039 50916 102785 187000) 0 nil])
([nil nil ((579 . 582) (#("S" 0 1 (fontified nil)) . 579) (579 . 580) (#("SO3" 0 3 (fontified nil)) . -579) (579 . 582) (#("S" 0 1 (face font-lock-type-face fontified t)) . -579) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (undo-tree-id1968 . -1) 580) nil (26039 50916 102783 936000) 0 nil])
([nil nil ((582 . 585)) nil (26039 50916 102778 51000) 0 nil])
([nil nil ((#("L" 0 1 (face font-lock-type-face fontified t)) . -583) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (#(":" 0 1 (fontified t)) . -584) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) 585) nil (26039 50916 102776 717000) 0 nil])
([nil nil ((583 . 585)) nil (26039 50916 102582 905000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -584) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) 585) nil (26039 50916 102581 860000) 0 nil])
([nil nil ((584 . 588)) nil (26039 50916 102576 659000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 600 601 nil nil nil nil #s(yas--exit 602 nil))) #s(yas--exit 602 nil) 61 nil #s(yas--field 1 600 601 nil nil nil nil #s(yas--exit 602 nil)) nil nil)) (584 . 602) (#("from_quaternion(${1:q})$0" 0 25 (fontified nil)) . 584) (584 . 609) (#("from" 0 4 (fontified nil)) . 584) (584 . 588) (#("from_quaternion(…)" 0 18 (fontified nil)) . -584) (584 . 602) (#("from" 0 4 (fontified t)) . -584) (undo-tree-id1929 . -4) (undo-tree-id1930 . -4) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -2) (undo-tree-id1934 . -2) (undo-tree-id1935 . -3) (undo-tree-id1936 . -3) (undo-tree-id1937 . -4) (undo-tree-id1938 . -4) (undo-tree-id1939 . -4) (undo-tree-id1940 . -4) (undo-tree-id1941 . -4) (undo-tree-id1942 . -4) (undo-tree-id1943 . -4) (undo-tree-id1944 . -4) (undo-tree-id1945 . -4) 588) nil (26039 50916 102574 785000) 0 nil])
([nil nil ((apply yas--snippet-revive 584 602 #s(yas--snippet nil (#s(yas--field 1 600 601 nil nil nil nil #s(yas--exit 602 nil))) #s(yas--exit 602 nil) 61 nil #s(yas--field 1 600 601 nil nil nil nil #s(yas--exit 602 nil)) nil nil))) nil (26039 50916 102561 442000) 0 nil])
([nil nil ((604 . 605)) nil (26039 50916 102560 645000) 0 nil])
([nil nil ((#("q" 0 1 (fontified t)) . -600) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -601) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (#(" " 0 1 (fontified t)) . -602) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (#(" " 0 1 (fontified t)) . -603) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (#("]" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -604) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) 605) nil (26039 50916 102555 644000) 0 nil])
([nil nil ((692 . 693)) nil (26039 50916 102491 567000) 0 nil])
([nil nil ((693 . 694) (t 26039 50916 115714 980000)) nil (26039 50920 708070 64000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -693) (undo-tree-id1969 . -1) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) (undo-tree-id1976 . -1) 694) nil (26039 50920 708068 362000) 0 nil])
([nil nil ((693 . 694)) nil (26039 50920 708055 24000) 0 nil])
([nil nil ((apply yas--snippet-revive 694 700 #s(yas--snippet nil nil #s(yas--exit 700 nil) 62 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 700 nil) 62 nil nil nil nil)) (694 . 700) (#("into()$0" 0 8 (fontified nil)) . 694) (694 . 702) (#("into() (as Into)" 0 16 (fontified nil)) . -694) (694 . 710)) nil (26039 50920 708050 252000) 0 nil])
([nil nil ((#("into()" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-3-face) fontified t) 5 6 (face (rainbow-delimiters-depth-3-face) fontified t)) . -694) (undo-tree-id1995 . -6) (undo-tree-id1996 . -6) (undo-tree-id1997 . -6) (undo-tree-id1998 . -6) (undo-tree-id1999 . -6) (undo-tree-id2000 . -6) (undo-tree-id2001 . -6) (undo-tree-id2002 . -6) (undo-tree-id2003 . -6) (undo-tree-id2004 . -6) (undo-tree-id2005 . -6) (undo-tree-id2006 . -6) 700 (t 26039 50920 755714 712000)) nil (26039 50988 734023 698000) 0 nil])
([nil nil ((#("rotation))." 0 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-4-face) fontified t) 9 10 (face (rainbow-delimiters-depth-3-face) fontified t) 10 11 (fontified t)) . -683) (undo-tree-id3087 . -10) (undo-tree-id3088 . -10) (undo-tree-id3089 . -10) (undo-tree-id3090 . -10) (undo-tree-id3091 . -10) (undo-tree-id3092 . -10) (undo-tree-id3093 . -8) (undo-tree-id3094 . -9) (undo-tree-id3095 . -9) (undo-tree-id3096 . -9) (undo-tree-id3097 . -9) (undo-tree-id3098 . -9) (undo-tree-id3099 . -9) (undo-tree-id3100 . -9) (undo-tree-id3101 . -9) (undo-tree-id3102 . -9) (undo-tree-id3103 . -9) (undo-tree-id3104 . 2) (undo-tree-id3105 . -9) (undo-tree-id3106 . -9) (undo-tree-id3107 . -9) (undo-tree-id3108 . -9) (undo-tree-id3109 . -9) (undo-tree-id3110 . -9) (undo-tree-id3111 . -9) (undo-tree-id3112 . -9) (undo-tree-id3113 . -9) (undo-tree-id3114 . -9) (undo-tree-id3115 . -9) (undo-tree-id3116 . -11) (undo-tree-id3117 . -9) (undo-tree-id3118 . -9) (undo-tree-id3119 . -9) (undo-tree-id3120 . -9) (undo-tree-id3121 . -9) (undo-tree-id3122 . -9) (undo-tree-id3123 . -9) (undo-tree-id3124 . -10) (undo-tree-id3125 . -10) (undo-tree-id3126 . -10) (undo-tree-id3127 . -10) (undo-tree-id3128 . -10) (undo-tree-id3129 . -11) (undo-tree-id3130 . -11) (undo-tree-id3131 . -11) (undo-tree-id3132 . -11) (undo-tree-id3133 . -11) (undo-tree-id3134 . -10) (undo-tree-id3135 . -11) 694) nil (26039 51050 227484 371000) 0 nil] [nil nil ((#("." 0 1 (fontified t)) . -693) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) (undo-tree-id1980 . -1) (undo-tree-id1982 . -1) (undo-tree-id1984 . -1) (undo-tree-id1986 . -1) (undo-tree-id1988 . -1) (undo-tree-id1990 . -1) (undo-tree-id1992 . -1) (undo-tree-id1994 . -1) 694) ((693 . 694) (t 26039 50923 715714 542000)) (26039 50988 543695 160000) 0 nil])
([nil nil ((#("so3." 0 4 (fontified t)) . -679) (undo-tree-id3037 . -4) (undo-tree-id3038 . -4) (undo-tree-id3039 . -4) (undo-tree-id3040 . -4) (undo-tree-id3041 . -4) (undo-tree-id3042 . -4) (undo-tree-id3043 . -4) (undo-tree-id3044 . -4) (undo-tree-id3045 . -4) (undo-tree-id3046 . -4) (undo-tree-id3047 . -4) (undo-tree-id3048 . -4) (undo-tree-id3049 . -4) (undo-tree-id3050 . -4) (undo-tree-id3051 . -4) (undo-tree-id3052 . -4) (undo-tree-id3053 . -4) (undo-tree-id3054 . -4) (undo-tree-id3055 . -4) (undo-tree-id3056 . -4) (undo-tree-id3057 . -4) (undo-tree-id3058 . -4) (undo-tree-id3059 . -4) (undo-tree-id3060 . -4) (undo-tree-id3061 . -4) (undo-tree-id3062 . -4) (undo-tree-id3063 . -4) (undo-tree-id3064 . -4) (undo-tree-id3065 . -4) (undo-tree-id3066 . -4) (undo-tree-id3067 . -4) (undo-tree-id3068 . -4) (undo-tree-id3069 . -4) (undo-tree-id3070 . -4) (undo-tree-id3071 . -4) (undo-tree-id3072 . -4) (undo-tree-id3073 . -4) (undo-tree-id3074 . -4) (undo-tree-id3075 . -4) (undo-tree-id3076 . -4) (undo-tree-id3077 . -4) (undo-tree-id3078 . -4) (undo-tree-id3079 . -4) (undo-tree-id3080 . -4) (undo-tree-id3081 . -4) (undo-tree-id3082 . -4) (undo-tree-id3083 . -4) (undo-tree-id3084 . -4) (undo-tree-id3085 . -4) (undo-tree-id3086 . -4) 683) nil (26039 51050 227450 24000) 0 nil])
([nil nil ((693 . 694) (t 26039 50923 715714 542000)) ((#("." 0 1 (fontified t)) . 693) (undo-tree-id2088 . -1) (undo-tree-id2089 . -1) (undo-tree-id2090 . -1) (undo-tree-id2091 . -1) (undo-tree-id2092 . -1) (undo-tree-id2093 . -1) (undo-tree-id2094 . -1) (undo-tree-id2095 . -1)) (26039 50988 374802 785000) 0 nil])
([nil nil ((#("quaternion(" 0 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-4-face) fontified t)) . -668) (undo-tree-id2985 . -11) (undo-tree-id2986 . -11) (undo-tree-id2987 . -11) (undo-tree-id2988 . -11) (undo-tree-id2989 . -11) (undo-tree-id2990 . -11) (undo-tree-id2991 . -11) (undo-tree-id2992 . -11) (undo-tree-id2993 . -11) (undo-tree-id2994 . -11) (undo-tree-id2995 . -11) (undo-tree-id2996 . -11) (undo-tree-id2997 . -11) (undo-tree-id2998 . -11) (undo-tree-id2999 . -11) (undo-tree-id3000 . -11) (undo-tree-id3001 . -11) (undo-tree-id3002 . -11) (undo-tree-id3003 . -11) (undo-tree-id3004 . -11) (undo-tree-id3005 . -11) (undo-tree-id3006 . -11) (undo-tree-id3007 . -11) (undo-tree-id3008 . -11) (undo-tree-id3009 . -11) (undo-tree-id3010 . -11) (undo-tree-id3011 . -11) (undo-tree-id3012 . -11) (undo-tree-id3013 . -11) (undo-tree-id3014 . -11) (undo-tree-id3015 . -11) (undo-tree-id3016 . -11) (undo-tree-id3017 . -11) (undo-tree-id3018 . -11) (undo-tree-id3019 . -11) (undo-tree-id3020 . -11) (undo-tree-id3021 . -11) (undo-tree-id3022 . -11) (undo-tree-id3023 . -11) (undo-tree-id3024 . -11) (undo-tree-id3025 . -11) (undo-tree-id3026 . -11) (undo-tree-id3027 . -11) (undo-tree-id3028 . -11) (undo-tree-id3029 . -11) (undo-tree-id3030 . -11) (undo-tree-id3031 . -11) (undo-tree-id3032 . -11) (undo-tree-id3033 . -11) (undo-tree-id3034 . -11) (undo-tree-id3035 . -11) (undo-tree-id3036 . -11) 679) nil (26039 51050 227415 78000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -693) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (undo-tree-id2060 . -1) 694) ((693 . 694)) (26039 50987 901049 911000) 0 nil])
([nil nil ((#("from_" 0 5 (fontified t)) . -663) (undo-tree-id2931 . -5) (undo-tree-id2932 . -5) (undo-tree-id2933 . -5) (undo-tree-id2934 . -5) (undo-tree-id2935 . -5) (undo-tree-id2936 . -5) (undo-tree-id2937 . -5) (undo-tree-id2938 . -5) (undo-tree-id2939 . -5) (undo-tree-id2940 . -5) (undo-tree-id2941 . -5) (undo-tree-id2942 . -5) (undo-tree-id2943 . -5) (undo-tree-id2944 . -5) (undo-tree-id2945 . -5) (undo-tree-id2946 . -5) (undo-tree-id2947 . -5) (undo-tree-id2948 . -5) (undo-tree-id2949 . -5) (undo-tree-id2950 . -5) (undo-tree-id2951 . -5) (undo-tree-id2952 . -5) (undo-tree-id2953 . -5) (undo-tree-id2954 . -5) (undo-tree-id2955 . -5) (undo-tree-id2956 . -5) (undo-tree-id2957 . -5) (undo-tree-id2958 . -5) (undo-tree-id2959 . -5) (undo-tree-id2960 . -5) (undo-tree-id2961 . -5) (undo-tree-id2962 . -5) (undo-tree-id2963 . -5) (undo-tree-id2964 . -5) (undo-tree-id2965 . -5) (undo-tree-id2966 . -5) (undo-tree-id2967 . -5) (undo-tree-id2968 . -5) (undo-tree-id2969 . -5) (undo-tree-id2970 . -5) (undo-tree-id2971 . -5) (undo-tree-id2972 . -5) (undo-tree-id2973 . -5) (undo-tree-id2974 . -5) (undo-tree-id2975 . -5) (undo-tree-id2976 . -5) (undo-tree-id2977 . -5) (undo-tree-id2978 . -5) (undo-tree-id2979 . -5) (undo-tree-id2980 . -5) (undo-tree-id2981 . -5) (undo-tree-id2982 . -5) (undo-tree-id2983 . -5) (undo-tree-id2984 . -5) 668) nil (26039 51050 227379 677000) 0 nil])
([nil nil ((692 . 695)) ((#(".in" 0 1 (fontified t) 1 2 (face font-lock-keyword-face fontified t) 2 3 (face font-lock-keyword-face fontified t)) . 692) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) (undo-tree-id2064 . -2) (undo-tree-id2065 . -2) (undo-tree-id2066 . -2) (undo-tree-id2067 . -3) (undo-tree-id2068 . -3) (undo-tree-id2069 . -3) (undo-tree-id2070 . -3) (undo-tree-id2071 . -3) (undo-tree-id2072 . -3) (undo-tree-id2073 . -3) (undo-tree-id2074 . -3) (undo-tree-id2075 . -3) (undo-tree-id2076 . -3) (undo-tree-id2077 . -2) (undo-tree-id2078 . -2) (undo-tree-id2079 . -1) (undo-tree-id2080 . -1) (undo-tree-id2081 . -3) (undo-tree-id2082 . -3) (undo-tree-id2083 . -3) (undo-tree-id2084 . -3) (undo-tree-id2085 . -3) (undo-tree-id2086 . -3) (undo-tree-id2087 . -3)) (26039 50987 168206 355000) 0 nil])
([nil nil ((#("UnitQuaternion::" 0 14 (face font-lock-type-face fontified t) 14 16 (fontified t)) . -647) (undo-tree-id2874 . -16) (undo-tree-id2875 . -16) (undo-tree-id2876 . -16) (undo-tree-id2877 . -16) (undo-tree-id2878 . -16) (undo-tree-id2879 . -16) (undo-tree-id2880 . -4) (undo-tree-id2881 . -16) (undo-tree-id2882 . -16) (undo-tree-id2883 . -16) (undo-tree-id2884 . -16) (undo-tree-id2885 . -16) (undo-tree-id2886 . -16) (undo-tree-id2887 . -16) (undo-tree-id2888 . -16) (undo-tree-id2889 . -16) (undo-tree-id2890 . -16) (undo-tree-id2891 . -16) (undo-tree-id2892 . -16) (undo-tree-id2893 . -16) (undo-tree-id2894 . -16) (undo-tree-id2895 . -16) (undo-tree-id2896 . -16) (undo-tree-id2897 . -16) (undo-tree-id2898 . -16) (undo-tree-id2899 . -16) (undo-tree-id2900 . -16) (undo-tree-id2901 . -16) (undo-tree-id2902 . -16) (undo-tree-id2903 . -16) (undo-tree-id2904 . -16) (undo-tree-id2905 . -16) (undo-tree-id2906 . -16) (undo-tree-id2907 . -16) (undo-tree-id2908 . -16) (undo-tree-id2909 . -16) (undo-tree-id2910 . -16) (undo-tree-id2911 . -16) (undo-tree-id2912 . -16) (undo-tree-id2913 . -16) (undo-tree-id2914 . -16) (undo-tree-id2915 . -16) (undo-tree-id2916 . -16) (undo-tree-id2917 . -16) (undo-tree-id2918 . -16) (undo-tree-id2919 . -16) (undo-tree-id2920 . -16) (undo-tree-id2921 . -16) (undo-tree-id2922 . -16) (undo-tree-id2923 . -16) (undo-tree-id2924 . -16) (undo-tree-id2925 . -16) (undo-tree-id2926 . -16) (undo-tree-id2927 . -16) (undo-tree-id2928 . -16) (undo-tree-id2929 . -16) (undo-tree-id2930 . -16) 663) nil (26039 51050 227342 442000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -692) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) (undo-tree-id2016 . -1) (undo-tree-id2017 . -1) (undo-tree-id2018 . -1) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (#("i" 0 1 (fontified t)) . -693) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -694) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) 695) ((692 . 695)) (26039 50987 166591 529000) 0 nil])
([nil nil ((#("so3) * " 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-4-face) fontified t) 4 7 (fontified t)) . -640) (undo-tree-id2812 . -7) (undo-tree-id2813 . -7) (undo-tree-id2814 . -7) (undo-tree-id2815 . -7) (undo-tree-id2816 . -7) (undo-tree-id2817 . -7) (undo-tree-id2818 . -7) (undo-tree-id2819 . -7) (undo-tree-id2820 . -7) (undo-tree-id2821 . -7) (undo-tree-id2822 . -7) (undo-tree-id2823 . -7) (undo-tree-id2824 . -7) (undo-tree-id2825 . -7) (undo-tree-id2826 . -7) (undo-tree-id2827 . -7) (undo-tree-id2828 . -7) (undo-tree-id2829 . -7) (undo-tree-id2830 . -7) (undo-tree-id2831 . -7) (undo-tree-id2832 . -7) (undo-tree-id2833 . -7) (undo-tree-id2834 . -7) (undo-tree-id2835 . -7) (undo-tree-id2836 . -7) (undo-tree-id2837 . -7) (undo-tree-id2838 . -7) (undo-tree-id2839 . -7) (undo-tree-id2840 . -7) (undo-tree-id2841 . -7) (undo-tree-id2842 . -7) (undo-tree-id2843 . -7) (undo-tree-id2844 . -7) (undo-tree-id2845 . -7) (undo-tree-id2846 . -7) (undo-tree-id2847 . -7) (undo-tree-id2848 . -7) (undo-tree-id2849 . -7) (undo-tree-id2850 . -7) (undo-tree-id2851 . -7) (undo-tree-id2852 . -7) (undo-tree-id2853 . -7) (undo-tree-id2854 . -7) (undo-tree-id2855 . -7) (undo-tree-id2856 . -7) (undo-tree-id2857 . -7) (undo-tree-id2858 . -7) (undo-tree-id2859 . -7) (undo-tree-id2860 . -7) (undo-tree-id2861 . -7) (undo-tree-id2862 . -7) (undo-tree-id2863 . -7) (undo-tree-id2864 . -7) (undo-tree-id2865 . -7) (undo-tree-id2866 . -7) (undo-tree-id2867 . -7) (undo-tree-id2868 . -7) (undo-tree-id2869 . -7) (undo-tree-id2870 . -7) (undo-tree-id2871 . -7) (undo-tree-id2872 . -7) (undo-tree-id2873 . -7) 647) nil (26039 51050 227303 328000) 0 nil])
nil
([nil nil ((#("update_" 0 7 (fontified t)) . -633) (undo-tree-id2748 . -7) (undo-tree-id2749 . -7) (undo-tree-id2750 . -7) (undo-tree-id2751 . -7) (undo-tree-id2752 . -7) (undo-tree-id2753 . -7) (undo-tree-id2754 . -7) (undo-tree-id2755 . -7) (undo-tree-id2756 . -7) (undo-tree-id2757 . -7) (undo-tree-id2758 . -7) (undo-tree-id2759 . -7) (undo-tree-id2760 . -7) (undo-tree-id2761 . -7) (undo-tree-id2762 . -7) (undo-tree-id2763 . -7) (undo-tree-id2764 . -7) (undo-tree-id2765 . -7) (undo-tree-id2766 . -7) (undo-tree-id2767 . -7) (undo-tree-id2768 . -7) (undo-tree-id2769 . -7) (undo-tree-id2770 . -7) (undo-tree-id2771 . -7) (undo-tree-id2772 . -7) (undo-tree-id2773 . -7) (undo-tree-id2774 . -7) (undo-tree-id2775 . -7) (undo-tree-id2776 . -7) (undo-tree-id2777 . -7) (undo-tree-id2778 . -7) (undo-tree-id2779 . -7) (undo-tree-id2780 . -7) (undo-tree-id2781 . -7) (undo-tree-id2782 . -7) (undo-tree-id2783 . -7) (undo-tree-id2784 . -7) (undo-tree-id2785 . -7) (undo-tree-id2786 . -7) (undo-tree-id2787 . -7) (undo-tree-id2788 . -7) (undo-tree-id2789 . -7) (undo-tree-id2790 . -7) (undo-tree-id2791 . -7) (undo-tree-id2792 . -7) (undo-tree-id2793 . -7) (undo-tree-id2794 . -7) (undo-tree-id2795 . -7) (undo-tree-id2796 . -7) (undo-tree-id2797 . -7) (undo-tree-id2798 . -7) (undo-tree-id2799 . -7) (undo-tree-id2800 . -7) (undo-tree-id2801 . -7) (undo-tree-id2802 . -7) (undo-tree-id2803 . -7) (undo-tree-id2804 . -7) (undo-tree-id2805 . -7) (undo-tree-id2806 . -7) (undo-tree-id2807 . -7) (undo-tree-id2808 . -7) (undo-tree-id2809 . -7) (undo-tree-id2810 . -7) (undo-tree-id2811 . -7) 640) nil (26039 51050 227237 68000) 0 nil])
([nil nil ((#("axis(" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t)) . -628) (undo-tree-id2679 . -5) (undo-tree-id2680 . -5) (undo-tree-id2681 . -5) (undo-tree-id2682 . -5) (undo-tree-id2683 . -5) (undo-tree-id2684 . -5) (undo-tree-id2685 . -5) (undo-tree-id2686 . -5) (undo-tree-id2687 . -5) (undo-tree-id2688 . -5) (undo-tree-id2689 . -5) (undo-tree-id2690 . -5) (undo-tree-id2691 . -5) (undo-tree-id2692 . -5) (undo-tree-id2693 . -5) (undo-tree-id2694 . -5) (undo-tree-id2695 . -5) (undo-tree-id2696 . -5) (undo-tree-id2697 . -5) (undo-tree-id2698 . -5) (undo-tree-id2699 . -5) (undo-tree-id2700 . -5) (undo-tree-id2701 . -5) (undo-tree-id2702 . -5) (undo-tree-id2703 . -5) (undo-tree-id2704 . -5) (undo-tree-id2705 . -5) (undo-tree-id2706 . -5) (undo-tree-id2707 . -5) (undo-tree-id2708 . -5) (undo-tree-id2709 . -5) (undo-tree-id2710 . -5) (undo-tree-id2711 . -5) (undo-tree-id2712 . -5) (undo-tree-id2713 . -5) (undo-tree-id2714 . -5) (undo-tree-id2715 . -5) (undo-tree-id2716 . -5) (undo-tree-id2717 . -5) (undo-tree-id2718 . -5) (undo-tree-id2719 . -5) (undo-tree-id2720 . -5) (undo-tree-id2721 . -5) (undo-tree-id2722 . -5) (undo-tree-id2723 . -5) (undo-tree-id2724 . -5) (undo-tree-id2725 . -5) (undo-tree-id2726 . -5) (undo-tree-id2727 . -5) (undo-tree-id2728 . -5) (undo-tree-id2729 . -5) (undo-tree-id2730 . -5) (undo-tree-id2731 . -5) (undo-tree-id2732 . -5) (undo-tree-id2733 . -5) (undo-tree-id2734 . -5) (undo-tree-id2735 . -5) (undo-tree-id2736 . -5) (undo-tree-id2737 . -5) (undo-tree-id2738 . -5) (undo-tree-id2739 . -5) (undo-tree-id2740 . -5) (undo-tree-id2741 . -5) (undo-tree-id2742 . -5) (undo-tree-id2743 . -5) (undo-tree-id2744 . -5) (undo-tree-id2745 . -5) (undo-tree-id2746 . -5) (undo-tree-id2747 . -5) 633) nil (26039 51050 227192 760000) 0 nil])
([nil nil ((#("scaled_" 0 7 (fontified t)) . -621) (undo-tree-id2608 . -7) (undo-tree-id2609 . -7) (undo-tree-id2610 . -7) (undo-tree-id2611 . -7) (undo-tree-id2612 . -7) (undo-tree-id2613 . -7) (undo-tree-id2614 . -7) (undo-tree-id2615 . -7) (undo-tree-id2616 . -7) (undo-tree-id2617 . -7) (undo-tree-id2618 . -7) (undo-tree-id2619 . -7) (undo-tree-id2620 . -7) (undo-tree-id2621 . -7) (undo-tree-id2622 . -7) (undo-tree-id2623 . -7) (undo-tree-id2624 . -7) (undo-tree-id2625 . -7) (undo-tree-id2626 . -7) (undo-tree-id2627 . -7) (undo-tree-id2628 . -7) (undo-tree-id2629 . -7) (undo-tree-id2630 . -7) (undo-tree-id2631 . -7) (undo-tree-id2632 . -7) (undo-tree-id2633 . -7) (undo-tree-id2634 . -7) (undo-tree-id2635 . -7) (undo-tree-id2636 . -7) (undo-tree-id2637 . -7) (undo-tree-id2638 . -7) (undo-tree-id2639 . -7) (undo-tree-id2640 . -7) (undo-tree-id2641 . -7) (undo-tree-id2642 . -7) (undo-tree-id2643 . -7) (undo-tree-id2644 . -7) (undo-tree-id2645 . -7) (undo-tree-id2646 . -7) (undo-tree-id2647 . -7) (undo-tree-id2648 . -7) (undo-tree-id2649 . -7) (undo-tree-id2650 . -7) (undo-tree-id2651 . -7) (undo-tree-id2652 . -7) (undo-tree-id2653 . -7) (undo-tree-id2654 . -7) (undo-tree-id2655 . -7) (undo-tree-id2656 . -7) (undo-tree-id2657 . -7) (undo-tree-id2658 . -7) (undo-tree-id2659 . -7) (undo-tree-id2660 . -7) (undo-tree-id2661 . -7) (undo-tree-id2662 . -7) (undo-tree-id2663 . -7) (undo-tree-id2664 . -7) (undo-tree-id2665 . -7) (undo-tree-id2666 . -7) (undo-tree-id2667 . -7) (undo-tree-id2668 . -7) (undo-tree-id2669 . -7) (undo-tree-id2670 . -7) (undo-tree-id2671 . -7) (undo-tree-id2672 . -7) (undo-tree-id2673 . -7) (undo-tree-id2674 . -7) (undo-tree-id2675 . -7) (undo-tree-id2676 . -7) (undo-tree-id2677 . -7) (undo-tree-id2678 . -7) 628) nil (26039 51050 227144 408000) 0 nil])
([nil nil ((#("from_" 0 5 (fontified t)) . -616) (undo-tree-id2535 . -5) (undo-tree-id2536 . -5) (undo-tree-id2537 . -5) (undo-tree-id2538 . -5) (undo-tree-id2539 . -5) (undo-tree-id2540 . -5) (undo-tree-id2541 . -5) (undo-tree-id2542 . -5) (undo-tree-id2543 . -5) (undo-tree-id2544 . -5) (undo-tree-id2545 . -5) (undo-tree-id2546 . -5) (undo-tree-id2547 . -5) (undo-tree-id2548 . -5) (undo-tree-id2549 . -5) (undo-tree-id2550 . -5) (undo-tree-id2551 . -5) (undo-tree-id2552 . -5) (undo-tree-id2553 . -5) (undo-tree-id2554 . -5) (undo-tree-id2555 . -5) (undo-tree-id2556 . -5) (undo-tree-id2557 . -5) (undo-tree-id2558 . -5) (undo-tree-id2559 . -5) (undo-tree-id2560 . -5) (undo-tree-id2561 . -5) (undo-tree-id2562 . -5) (undo-tree-id2563 . -5) (undo-tree-id2564 . -5) (undo-tree-id2565 . -5) (undo-tree-id2566 . -5) (undo-tree-id2567 . -5) (undo-tree-id2568 . -5) (undo-tree-id2569 . -5) (undo-tree-id2570 . -5) (undo-tree-id2571 . -5) (undo-tree-id2572 . -5) (undo-tree-id2573 . -5) (undo-tree-id2574 . -5) (undo-tree-id2575 . -5) (undo-tree-id2576 . -5) (undo-tree-id2577 . -5) (undo-tree-id2578 . -5) (undo-tree-id2579 . -5) (undo-tree-id2580 . -5) (undo-tree-id2581 . -5) (undo-tree-id2582 . -5) (undo-tree-id2583 . -5) (undo-tree-id2584 . -5) (undo-tree-id2585 . -5) (undo-tree-id2586 . -5) (undo-tree-id2587 . -5) (undo-tree-id2588 . -5) (undo-tree-id2589 . -5) (undo-tree-id2590 . -5) (undo-tree-id2591 . -5) (undo-tree-id2592 . -5) (undo-tree-id2593 . -5) (undo-tree-id2594 . -5) (undo-tree-id2595 . -5) (undo-tree-id2596 . -5) (undo-tree-id2597 . -5) (undo-tree-id2598 . -5) (undo-tree-id2599 . -5) (undo-tree-id2600 . -5) (undo-tree-id2601 . -5) (undo-tree-id2602 . -5) (undo-tree-id2603 . -5) (undo-tree-id2604 . -5) (undo-tree-id2605 . -5) (undo-tree-id2606 . -5) (undo-tree-id2607 . -5) 621) nil (26039 51050 227095 519000) 0 nil])
([nil nil ((#("UnitQuaternion::" 0 14 (face font-lock-type-face fontified t) 14 16 (fontified t)) . -600) (undo-tree-id2457 . -5) (undo-tree-id2458 . -5) (undo-tree-id2459 . -16) (undo-tree-id2460 . -16) (undo-tree-id2461 . -16) (undo-tree-id2462 . -16) (undo-tree-id2463 . -16) (undo-tree-id2464 . -16) (undo-tree-id2465 . -16) (undo-tree-id2466 . -16) (undo-tree-id2467 . -16) (undo-tree-id2468 . -16) (undo-tree-id2469 . -16) (undo-tree-id2470 . -16) (undo-tree-id2471 . -16) (undo-tree-id2472 . -16) (undo-tree-id2473 . -16) (undo-tree-id2474 . -16) (undo-tree-id2475 . -16) (undo-tree-id2476 . -16) (undo-tree-id2477 . -16) (undo-tree-id2478 . -16) (undo-tree-id2479 . -16) (undo-tree-id2480 . -16) (undo-tree-id2481 . -16) (undo-tree-id2482 . -16) (undo-tree-id2483 . -16) (undo-tree-id2484 . -16) (undo-tree-id2485 . -16) (undo-tree-id2486 . -16) (undo-tree-id2487 . -16) (undo-tree-id2488 . -16) (undo-tree-id2489 . -16) (undo-tree-id2490 . -5) (undo-tree-id2491 . -16) (undo-tree-id2492 . -16) (undo-tree-id2493 . -16) (undo-tree-id2494 . -16) (undo-tree-id2495 . -16) (undo-tree-id2496 . -16) (undo-tree-id2497 . -16) (undo-tree-id2498 . -16) (undo-tree-id2499 . -16) (undo-tree-id2500 . -16) (undo-tree-id2501 . -16) (undo-tree-id2502 . -16) (undo-tree-id2503 . -16) (undo-tree-id2504 . -16) (undo-tree-id2505 . -16) (undo-tree-id2506 . -16) (undo-tree-id2507 . -16) (undo-tree-id2508 . -16) (undo-tree-id2509 . -16) (undo-tree-id2510 . -16) (undo-tree-id2511 . -16) (undo-tree-id2512 . -16) (undo-tree-id2513 . -16) (undo-tree-id2514 . -16) (undo-tree-id2515 . -16) (undo-tree-id2516 . -16) (undo-tree-id2517 . -16) (undo-tree-id2518 . -16) (undo-tree-id2519 . -16) (undo-tree-id2520 . -16) (undo-tree-id2521 . -16) (undo-tree-id2522 . -16) (undo-tree-id2523 . -16) (undo-tree-id2524 . -16) (undo-tree-id2525 . -16) (undo-tree-id2526 . -16) (undo-tree-id2527 . -16) (undo-tree-id2528 . -16) (undo-tree-id2529 . -16) (undo-tree-id2530 . -16) (undo-tree-id2531 . -16) (undo-tree-id2532 . -16) (undo-tree-id2533 . -16) (undo-tree-id2534 . -16) 616) nil (26039 51050 227045 664000) 0 nil])
([nil nil ((#("quaternion(" 0 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-3-face) fontified t)) . -589) (undo-tree-id2377 . -11) (undo-tree-id2378 . -11) (undo-tree-id2379 . -11) (undo-tree-id2380 . -11) (undo-tree-id2381 . -11) (undo-tree-id2382 . -11) (undo-tree-id2383 . -11) (undo-tree-id2384 . -11) (undo-tree-id2385 . -11) (undo-tree-id2386 . -11) (undo-tree-id2387 . -11) (undo-tree-id2388 . -11) (undo-tree-id2389 . -11) (undo-tree-id2390 . -11) (undo-tree-id2391 . -11) (undo-tree-id2392 . -11) (undo-tree-id2393 . -11) (undo-tree-id2394 . -11) (undo-tree-id2395 . -11) (undo-tree-id2396 . -11) (undo-tree-id2397 . -11) (undo-tree-id2398 . -11) (undo-tree-id2399 . -11) (undo-tree-id2400 . -11) (undo-tree-id2401 . -11) (undo-tree-id2402 . -11) (undo-tree-id2403 . -11) (undo-tree-id2404 . -11) (undo-tree-id2405 . -11) (undo-tree-id2406 . -11) (undo-tree-id2407 . -11) (undo-tree-id2408 . -11) (undo-tree-id2409 . -11) (undo-tree-id2410 . -11) (undo-tree-id2411 . -11) (undo-tree-id2412 . -11) (undo-tree-id2413 . -11) (undo-tree-id2414 . -11) (undo-tree-id2415 . -11) (undo-tree-id2416 . -11) (undo-tree-id2417 . -11) (undo-tree-id2418 . -11) (undo-tree-id2419 . -11) (undo-tree-id2420 . -11) (undo-tree-id2421 . -11) (undo-tree-id2422 . -11) (undo-tree-id2423 . -11) (undo-tree-id2424 . -11) (undo-tree-id2425 . -11) (undo-tree-id2426 . -11) (undo-tree-id2427 . -11) (undo-tree-id2428 . -11) (undo-tree-id2429 . -11) (undo-tree-id2430 . -11) (undo-tree-id2431 . -11) (undo-tree-id2432 . -11) (undo-tree-id2433 . -11) (undo-tree-id2434 . -11) (undo-tree-id2435 . -11) (undo-tree-id2436 . -11) (undo-tree-id2437 . -11) (undo-tree-id2438 . -11) (undo-tree-id2439 . -11) (undo-tree-id2440 . -11) (undo-tree-id2441 . -11) (undo-tree-id2442 . -11) (undo-tree-id2443 . -11) (undo-tree-id2444 . -11) (undo-tree-id2445 . -11) (undo-tree-id2446 . -11) (undo-tree-id2447 . -11) (undo-tree-id2448 . -11) (undo-tree-id2449 . -11) (undo-tree-id2450 . -11) (undo-tree-id2451 . -11) (undo-tree-id2452 . -11) (undo-tree-id2453 . -11) (undo-tree-id2454 . -11) (undo-tree-id2455 . -11) (undo-tree-id2456 . -11) 600) nil (26039 51050 226062 839000) 0 nil])
([nil nil ((#("from_" 0 5 (fontified t)) . -584) (undo-tree-id2295 . -5) (undo-tree-id2296 . -5) (undo-tree-id2297 . -5) (undo-tree-id2298 . -5) (undo-tree-id2299 . -5) (undo-tree-id2300 . -5) (undo-tree-id2301 . -5) (undo-tree-id2302 . -5) (undo-tree-id2303 . -5) (undo-tree-id2304 . -5) (undo-tree-id2305 . -5) (undo-tree-id2306 . -5) (undo-tree-id2307 . -5) (undo-tree-id2308 . -5) (undo-tree-id2309 . -5) (undo-tree-id2310 . -5) (undo-tree-id2311 . -5) (undo-tree-id2312 . -5) (undo-tree-id2313 . -5) (undo-tree-id2314 . -5) (undo-tree-id2315 . -5) (undo-tree-id2316 . -5) (undo-tree-id2317 . -5) (undo-tree-id2318 . -5) (undo-tree-id2319 . -5) (undo-tree-id2320 . -5) (undo-tree-id2321 . -5) (undo-tree-id2322 . -5) (undo-tree-id2323 . -5) (undo-tree-id2324 . -5) (undo-tree-id2325 . -5) (undo-tree-id2326 . -5) (undo-tree-id2327 . -5) (undo-tree-id2328 . -5) (undo-tree-id2329 . -5) (undo-tree-id2330 . -5) (undo-tree-id2331 . -5) (undo-tree-id2332 . -5) (undo-tree-id2333 . -5) (undo-tree-id2334 . -5) (undo-tree-id2335 . -5) (undo-tree-id2336 . -5) (undo-tree-id2337 . -5) (undo-tree-id2338 . -5) (undo-tree-id2339 . -5) (undo-tree-id2340 . -5) (undo-tree-id2341 . -5) (undo-tree-id2342 . -5) (undo-tree-id2343 . -5) (undo-tree-id2344 . -5) (undo-tree-id2345 . -5) (undo-tree-id2346 . -5) (undo-tree-id2347 . -5) (undo-tree-id2348 . -5) (undo-tree-id2349 . -5) (undo-tree-id2350 . -5) (undo-tree-id2351 . -5) (undo-tree-id2352 . -5) (undo-tree-id2353 . -5) (undo-tree-id2354 . -5) (undo-tree-id2355 . -5) (undo-tree-id2356 . -5) (undo-tree-id2357 . -5) (undo-tree-id2358 . -5) (undo-tree-id2359 . -5) (undo-tree-id2360 . -5) (undo-tree-id2361 . -5) (undo-tree-id2362 . -5) (undo-tree-id2363 . -5) (undo-tree-id2364 . -5) (undo-tree-id2365 . -5) (undo-tree-id2366 . -5) (undo-tree-id2367 . -5) (undo-tree-id2368 . -5) (undo-tree-id2369 . -5) (undo-tree-id2370 . -5) (undo-tree-id2371 . -5) (undo-tree-id2372 . -5) (undo-tree-id2373 . -5) (undo-tree-id2374 . -5) (undo-tree-id2375 . -5) (undo-tree-id2376 . -5) 589) nil (26039 51050 226008 957000) 0 nil])
([nil nil ((#("SO3::" 0 3 (face font-lock-type-face fontified t) 3 5 (fontified t)) . -579) (undo-tree-id2208 . -5) (undo-tree-id2209 . -5) (undo-tree-id2210 . -5) (undo-tree-id2211 . -5) (undo-tree-id2212 . -5) (undo-tree-id2213 . -5) (undo-tree-id2214 . -5) (undo-tree-id2215 . -5) (undo-tree-id2216 . -5) (undo-tree-id2217 . -5) (undo-tree-id2218 . -5) (undo-tree-id2219 . -5) (undo-tree-id2220 . -5) (undo-tree-id2221 . -5) (undo-tree-id2222 . -5) (undo-tree-id2223 . -5) (undo-tree-id2224 . -5) (undo-tree-id2225 . -5) (undo-tree-id2226 . -5) (undo-tree-id2227 . -5) (undo-tree-id2228 . -5) (undo-tree-id2229 . -5) (undo-tree-id2230 . -5) (undo-tree-id2231 . -5) (undo-tree-id2232 . -5) (undo-tree-id2233 . -5) (undo-tree-id2234 . -5) (undo-tree-id2235 . -5) (undo-tree-id2236 . -5) (undo-tree-id2237 . -5) (undo-tree-id2238 . -5) (undo-tree-id2239 . -5) (undo-tree-id2240 . -5) (undo-tree-id2241 . -5) (undo-tree-id2242 . -5) (undo-tree-id2243 . -5) (undo-tree-id2244 . -5) (undo-tree-id2245 . -5) (undo-tree-id2246 . -5) (undo-tree-id2247 . -5) (undo-tree-id2248 . -5) (undo-tree-id2249 . -5) (undo-tree-id2250 . -5) (undo-tree-id2251 . -5) (undo-tree-id2252 . -5) (undo-tree-id2253 . -5) (undo-tree-id2254 . -5) (undo-tree-id2255 . -5) (undo-tree-id2256 . -5) (undo-tree-id2257 . -5) (undo-tree-id2258 . -5) (undo-tree-id2259 . -5) (undo-tree-id2260 . -5) (undo-tree-id2261 . -5) (undo-tree-id2262 . -5) (undo-tree-id2263 . -5) (undo-tree-id2264 . -5) (undo-tree-id2265 . -5) (undo-tree-id2266 . -5) (undo-tree-id2267 . -5) (undo-tree-id2268 . -5) (undo-tree-id2269 . -5) (undo-tree-id2270 . -5) (undo-tree-id2271 . -5) (undo-tree-id2272 . -5) (undo-tree-id2273 . -5) (undo-tree-id2274 . -5) (undo-tree-id2275 . -5) (undo-tree-id2276 . -5) (undo-tree-id2277 . -5) (undo-tree-id2278 . -5) (undo-tree-id2279 . -5) (undo-tree-id2280 . -5) (undo-tree-id2281 . -5) (undo-tree-id2282 . -5) (undo-tree-id2283 . -5) (undo-tree-id2284 . -5) (undo-tree-id2285 . -5) (undo-tree-id2286 . -5) (undo-tree-id2287 . -5) (undo-tree-id2288 . -5) (undo-tree-id2289 . -5) (undo-tree-id2290 . -5) (undo-tree-id2291 . -5) (undo-tree-id2292 . -5) (undo-tree-id2293 . -5) (undo-tree-id2294 . -5) 584) nil (26039 51050 225855 598000) 0 nil])
([nil nil ((545 . 549) (#("    " 0 4 (fontified nil)) . 544) (undo-tree-id2204 . -4) (undo-tree-id2205 . -4) (undo-tree-id2206 . -4) (undo-tree-id2207 . -4) (543 . 549)) nil (26039 51050 225795 695000) 0 nil])
([nil nil ((549 . 551)) nil (26039 51050 225792 269000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -550) (undo-tree-id2200 . -1) (undo-tree-id2201 . -1) (undo-tree-id2202 . -1) (undo-tree-id2203 . -1) 551) nil (26039 51050 225791 352000) 0 nil])
([nil nil ((550 . 551)) nil (26039 51050 225787 919000) 0 nil])
([nil nil ((551 . 559)) nil (26039 51050 225787 291000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -558) (undo-tree-id2195 . -1) (undo-tree-id2196 . -1) (undo-tree-id2197 . -1) (undo-tree-id2198 . -1) (undo-tree-id2199 . -1) 559) nil (26039 51050 225786 435000) 0 nil])
([nil nil ((558 . 560)) nil (26039 51050 225781 955000) 0 nil])
([nil nil ((558 . 572) (#("Un" 0 2 (fontified nil)) . 558) (558 . 560) (#("UnitQuaternion" 0 14 (fontified nil)) . -558) (558 . 572) (#("Un" 0 2 (face font-lock-type-face fontified t)) . -558) (undo-tree-id2187 . -2) (undo-tree-id2188 . -1) (undo-tree-id2189 . -1) (undo-tree-id2190 . -2) (undo-tree-id2191 . -2) (undo-tree-id2192 . -2) (undo-tree-id2193 . -2) (undo-tree-id2194 . -2) 560) nil (26039 51050 225780 674000) 0 nil])
([nil nil ((572 . 575)) nil (26039 51050 225774 10000) 0 nil])
([nil nil ((575 . 577)) nil (26039 51050 225773 330000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 591 601 nil nil nil t #s(yas--exit 602 nil))) #s(yas--exit 602 nil) 63 nil #s(yas--field 1 591 601 nil nil nil t #s(yas--exit 602 nil)) nil nil)) (574 . 601) (#("from_scaled_axis(${1:axisangle})$0" 0 34 (fontified nil)) . 574) (574 . 608) (#("frm" 0 3 (fontified nil)) . 574) (574 . 577) (#("from_scaled_axis(…)" 0 19 (fontified nil)) . -574) (574 . 593) (#("frm" 0 3 (fontified t)) . -574) (undo-tree-id2171 . -3) (undo-tree-id2172 . -1) (undo-tree-id2173 . -1) (undo-tree-id2174 . -1) (undo-tree-id2175 . -1) (undo-tree-id2176 . -1) (undo-tree-id2177 . -2) (undo-tree-id2178 . -2) (undo-tree-id2179 . -2) (undo-tree-id2180 . -2) (undo-tree-id2181 . -3) (undo-tree-id2182 . -3) (undo-tree-id2183 . -3) (undo-tree-id2184 . -3) (undo-tree-id2185 . -3) (undo-tree-id2186 . -3) 577) nil (26039 51050 225771 603000) 0 nil])
([nil nil ((#("axisangle" 0 9 (fontified nil)) . 592) (undo-tree-id2170 . -9) (591 . 592)) nil (26039 51050 225758 473000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -591) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1) (undo-tree-id2164 . -1) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) (undo-tree-id2169 . -1) 592) nil (26039 51050 225756 445000) 0 nil])
([nil nil ((591 . 592)) nil (26039 51050 225748 980000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -591) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) 592) nil (26039 51050 225747 830000) 0 nil])
([nil nil ((591 . 593)) nil (26039 51050 225739 814000) 0 nil])
([nil nil ((591 . 601) (#("up" 0 2 (fontified nil)) . 591) (undo-tree-id2134 . -2) (591 . 593) (#("update_so3" 0 10 (fontified nil)) . -591) (undo-tree-id2135 . -10) (591 . 601) (#("up" 0 2 (fontified t)) . -591) (undo-tree-id2136 . -2) (undo-tree-id2137 . -2) (undo-tree-id2138 . -2) (undo-tree-id2139 . -1) (undo-tree-id2140 . -1) (undo-tree-id2141 . -1) (undo-tree-id2142 . -1) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (undo-tree-id2145 . -2) (undo-tree-id2146 . -2) (undo-tree-id2147 . -2) (undo-tree-id2148 . -2) 593) nil (26039 51050 225738 188000) 0 nil])
([nil nil ((apply yas--snippet-revive 574 602 #s(yas--snippet nil (#s(yas--field 1 591 601 nil nil nil t #s(yas--exit 602 nil))) #s(yas--exit 602 nil) 63 nil #s(yas--field 1 591 601 nil nil nil t #s(yas--exit 602 nil)) nil nil))) nil (26039 51050 225727 69000) 0 nil])
([nil nil ((602 . 603)) nil (26039 51050 225726 429000) 0 nil])
([nil nil ((602 . 605)) nil (26039 51050 225725 806000) 0 nil])
([nil nil ((605 . 606)) nil (26039 51050 225725 162000) 0 nil])
([nil nil ((605 . 619) (#("U" 0 1 (fontified nil)) . 605) (605 . 606) (#("UnitQuaternion" 0 14 (fontified nil)) . -605) (605 . 619) (#("U" 0 1 (face font-lock-type-face fontified t)) . -605) (undo-tree-id2128 . -1) (undo-tree-id2129 . -1) (undo-tree-id2130 . -1) (undo-tree-id2131 . -1) (undo-tree-id2132 . -1) (undo-tree-id2133 . -1) 606) nil (26039 51050 225723 898000) 0 nil])
([nil nil ((619 . 625)) nil (26039 51050 225718 676000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 637 657 nil nil nil t #s(yas--exit 658 nil))) #s(yas--exit 658 nil) 64 nil #s(yas--field 1 637 657 nil nil nil t #s(yas--exit 658 nil)) nil nil)) (621 . 639) (#("from_quaternion(${1:q})$0" 0 25 (fontified nil)) . 621) (621 . 646) (#("from" 0 4 (fontified nil)) . 621) (621 . 625) (#("from_quaternion(…)" 0 18 (fontified nil)) . -621) (621 . 639) (#("from" 0 4 (fontified t)) . -621) (undo-tree-id2117 . -4) (undo-tree-id2118 . -1) (undo-tree-id2119 . -1) (undo-tree-id2120 . -2) (undo-tree-id2121 . -2) (undo-tree-id2122 . -3) (undo-tree-id2123 . -3) (undo-tree-id2124 . -4) (undo-tree-id2125 . -4) (undo-tree-id2126 . -4) (undo-tree-id2127 . -4) 625) nil (26039 51050 225716 983000) 0 nil])
([nil nil ((#("q" 0 1 (fontified nil)) . 638) (undo-tree-id2116 . -1) (637 . 638)) nil (26039 51050 225707 717000) 0 nil])
([nil nil ((637 . 640) (#("s" 0 1 (fontified nil)) . 637) (undo-tree-id2107 . -1) (637 . 638) (#("so3" 0 3 (fontified nil)) . -637) (undo-tree-id2108 . -3) (637 . 640) (#("s" 0 1 (fontified t)) . -637) (undo-tree-id2109 . -1) (undo-tree-id2110 . -1) (undo-tree-id2111 . -1) (undo-tree-id2112 . -1) (undo-tree-id2113 . -1) (undo-tree-id2114 . -1) (undo-tree-id2115 . -1) 638) nil (26039 51050 225705 417000) 0 nil])
([nil nil ((640 . 641)) nil (26039 51050 225697 239000) 0 nil])
([nil nil ((641 . 649) (#("rotation" 0 8 (fontified nil)) . -641) (undo-tree-id2106 . -8) (641 . 649)) nil (26039 51050 225696 328000) 0 nil])
([nil nil ((649 . 651)) nil (26039 51050 225694 194000) 0 nil])
([nil nil ((apply yas--snippet-revive 650 657 #s(yas--snippet nil nil #s(yas--exit 657 nil) 65 nil nil #s(yas--field 1 637 657 nil nil nil t #s(yas--exit 658 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 657 nil) 65 nil nil #s(yas--field 1 637 657 nil nil nil t #s(yas--exit 658 nil)) nil)) (650 . 657) (#("clone()$0" 0 9 (fontified nil)) . 650) (undo-tree-id2096 . -9) (650 . 659) (#("c" 0 1 (fontified nil)) . 650) (undo-tree-id2097 . -1) (650 . 651) (#("clone() (as Clone)" 0 18 (fontified nil)) . -650) (undo-tree-id2098 . -18) (650 . 668) (#("c" 0 1 (fontified t)) . -650) (undo-tree-id2099 . -1) (undo-tree-id2100 . -1) (undo-tree-id2101 . -1) (undo-tree-id2102 . -1) (undo-tree-id2103 . -1) (undo-tree-id2104 . -1) (undo-tree-id2105 . -1) 651) nil (26039 51050 225690 124000) 0 nil])
([nil nil ((apply yas--snippet-revive 621 658 #s(yas--snippet nil (#s(yas--field 1 637 657 nil nil nil t #s(yas--exit 658 nil))) #s(yas--exit 658 nil) 64 nil #s(yas--field 1 637 657 nil nil nil t #s(yas--exit 658 nil)) nil nil))) nil (26039 51050 225370 774000) 0 nil])
([nil nil ((659 . 664) (t 26039 51050 272373 922000)) nil (26039 51067 660470 815000) 0 nil])
([nil nil ((664 . 673)) nil (26039 51067 660470 4000) 0 nil])
([nil nil ((#("q" 0 1 (fontified t)) . -672) (undo-tree-id3149 . -1) (undo-tree-id3150 . -1) (undo-tree-id3151 . -1) (undo-tree-id3152 . -1) 673) nil (26039 51067 660469 47000) 0 nil])
([nil nil ((672 . 673)) nil (26039 51067 660465 198000) 0 nil])
([nil nil ((672 . 674) (#("u" 0 1 (fontified nil)) . 672) (672 . 673) (#("uq" 0 2 (fontified nil)) . -672) (672 . 674) (#("u" 0 1 (fontified t)) . -672) (undo-tree-id3142 . -1) (undo-tree-id3143 . -1) (undo-tree-id3144 . -1) (undo-tree-id3145 . -1) (undo-tree-id3146 . -1) (undo-tree-id3147 . -1) (undo-tree-id3148 . -1) 673) nil (26039 51067 660463 890000) 0 nil])
([nil nil ((674 . 676)) nil (26039 51067 660457 248000) 0 nil])
([nil nil ((apply yas--snippet-revive 675 687 #s(yas--snippet nil nil #s(yas--exit 687 nil) 66 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 687 nil) 66 nil nil nil nil)) (675 . 687) (#("quaternion()$0" 0 14 (fontified nil)) . 675) (675 . 689) (#("q" 0 1 (fontified nil)) . 675) (675 . 676) (#("quaternion()" 0 12 (fontified nil)) . -675) (675 . 687) (#("q" 0 1 (fontified t)) . -675) (undo-tree-id3136 . -1) (undo-tree-id3137 . -1) (undo-tree-id3138 . -1) (undo-tree-id3139 . -1) (undo-tree-id3140 . -1) (undo-tree-id3141 . -1) 676) nil (26039 51067 660454 327000) 0 nil])
([nil nil ((687 . 688)) nil (26039 51067 660437 173000) 0 nil])
([nil nil ((724 . 725) (t 26039 51067 675706 243000)) nil (26039 51079 916062 655000) 0 nil])
([nil nil ((724 . 727) (#("S" 0 1 (fontified nil)) . 724) (724 . 725) (#("SO3" 0 3 (fontified nil)) . -724) (724 . 727) (#("S" 0 1 (face font-lock-type-face fontified t)) . -724) (undo-tree-id3163 . -1) (undo-tree-id3164 . -1) (undo-tree-id3165 . -1) (undo-tree-id3166 . -1) (undo-tree-id3167 . -1) (undo-tree-id3168 . -1) 725) nil (26039 51079 916061 172000) 0 nil])
([nil nil ((727 . 729)) nil (26039 51079 916055 481000) 0 nil])
([nil nil ((729 . 731)) nil (26039 51079 916054 841000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 745 746 nil nil nil t #s(yas--exit 747 nil))) #s(yas--exit 747 nil) 67 nil #s(yas--field 1 745 746 nil nil nil t #s(yas--exit 747 nil)) nil nil)) (729 . 747) (#("from_quaternion(${1:q})$0" 0 25 (fontified nil)) . 729) (729 . 754) (#("fo" 0 2 (fontified nil)) . 729) (729 . 731) (#("from_quaternion(…)" 0 18 (fontified nil)) . -729) (729 . 747) (#("fo" 0 2 (fontified t)) . -729) (undo-tree-id3154 . -2) (undo-tree-id3155 . -1) (undo-tree-id3156 . -1) (undo-tree-id3157 . -1) (undo-tree-id3158 . -2) (undo-tree-id3159 . -2) (undo-tree-id3160 . -2) (undo-tree-id3161 . -2) (undo-tree-id3162 . -2) 731) nil (26039 51079 916053 4000) 0 nil])
([nil nil ((#("q" 0 1 (fontified nil)) . 746) (undo-tree-id3153 . -1) (745 . 746)) nil (26039 51079 916043 798000) 0 nil])
([nil nil ((apply yas--snippet-revive 729 747 #s(yas--snippet nil (#s(yas--field 1 745 746 nil nil nil t #s(yas--exit 747 nil))) #s(yas--exit 747 nil) 67 nil #s(yas--field 1 745 746 nil nil nil t #s(yas--exit 747 nil)) nil nil))) nil (26039 51079 916037 372000) 0 nil])
([nil nil ((747 . 748)) nil (26039 51079 916036 122000) 0 nil])
([nil nil ((apply yas--snippet-revive 748 753 #s(yas--snippet nil nil #s(yas--exit 753 nil) 68 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 753 nil) 68 nil nil nil nil)) (748 . 753) (#("log()$0" 0 7 (fontified nil)) . 748) (748 . 755) (#("log()" 0 5 (fontified nil)) . -748) (748 . 753)) nil (26039 51079 916030 898000) 0 nil])
([nil nil ((687 . 689) (t 26039 51079 932372 200000)) nil (26039 51088 125758 931000) 0 nil])
([nil nil ((apply yas--snippet-revive 688 698 #s(yas--snippet nil nil #s(yas--exit 698 nil) 69 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 698 nil) 69 nil nil nil nil)) (688 . 698) (#("to_owned()$0" 0 12 (fontified nil)) . 688) (688 . 700) (#("t" 0 1 (fontified nil)) . 688) (688 . 689) (#("to_owned() (as ToOwned)" 0 23 (fontified nil)) . -688) (688 . 711) (#("t" 0 1 (fontified t)) . -688) (undo-tree-id3169 . -1) (undo-tree-id3170 . -1) (undo-tree-id3171 . -1) (undo-tree-id3172 . -1) 689) nil (26039 51088 125754 431000) 0 nil])
([nil nil ((602 . 603) (t 26039 51088 142371 726000)) nil (26039 51277 569494 779000) 0 nil])
([nil nil ((602 . 605)) nil (26039 51277 569493 825000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -602) (undo-tree-id3698 . -1) (undo-tree-id3699 . -1) (undo-tree-id3700 . -1) (undo-tree-id3701 . -1) (undo-tree-id3702 . -1) (undo-tree-id3703 . -1) (undo-tree-id3704 . -1) (undo-tree-id3705 . -1) (undo-tree-id3706 . -1) (undo-tree-id3707 . -1) (undo-tree-id3708 . -1) (undo-tree-id3709 . -1) (undo-tree-id3710 . -1) (#("r" 0 1 (fontified t)) . -603) (undo-tree-id3711 . -1) (undo-tree-id3712 . -1) (undo-tree-id3713 . -1) (undo-tree-id3714 . -1) (undo-tree-id3715 . -1) (undo-tree-id3716 . -1) (undo-tree-id3717 . -1) (undo-tree-id3718 . -1) (undo-tree-id3719 . -1) (#("o" 0 1 (fontified t)) . -604) (undo-tree-id3720 . -1) (undo-tree-id3721 . -1) (undo-tree-id3722 . -1) (undo-tree-id3723 . -1) (undo-tree-id3724 . -1) 605) nil (26039 51277 569491 921000) 0 nil])
([nil nil ((#("so3)  * " 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-2-face) fontified t) 4 5 (fontified t) 5 8 (fontified t)) . -598) (undo-tree-id3644 . -7) (undo-tree-id3645 . -8) (undo-tree-id3646 . -3) (undo-tree-id3647 . -3) (undo-tree-id3648 . -3) (undo-tree-id3649 . -3) (undo-tree-id3650 . -3) (undo-tree-id3651 . -4) (undo-tree-id3652 . -4) (undo-tree-id3653 . -4) (undo-tree-id3654 . -4) (undo-tree-id3655 . -4) (undo-tree-id3656 . -4) (undo-tree-id3657 . -4) (undo-tree-id3658 . -5) (undo-tree-id3659 . -5) (undo-tree-id3660 . -4) (undo-tree-id3661 . -4) (undo-tree-id3662 . -4) (undo-tree-id3663 . -4) (undo-tree-id3664 . -4) (undo-tree-id3665 . -4) (undo-tree-id3666 . -4) (undo-tree-id3667 . -4) (undo-tree-id3668 . -4) (undo-tree-id3669 . -4) (undo-tree-id3670 . -4) (undo-tree-id3671 . -4) (undo-tree-id3672 . -4) (undo-tree-id3673 . -4) (undo-tree-id3674 . -4) (undo-tree-id3675 . 4) (undo-tree-id3676 . -4) (undo-tree-id3677 . -4) (undo-tree-id3678 . -4) (undo-tree-id3679 . -4) (undo-tree-id3680 . -4) (undo-tree-id3681 . -5) (undo-tree-id3682 . -6) (undo-tree-id3683 . -6) (undo-tree-id3684 . -6) (undo-tree-id3685 . -6) (undo-tree-id3686 . -6) (undo-tree-id3687 . -6) (undo-tree-id3688 . -6) (undo-tree-id3689 . -7) (undo-tree-id3690 . -7) (undo-tree-id3691 . -7) (undo-tree-id3692 . -7) (undo-tree-id3693 . -7) (undo-tree-id3694 . -7) (undo-tree-id3695 . -7) (undo-tree-id3696 . -7) (undo-tree-id3697 . -8) 606) nil (26039 51277 569471 335000) 0 nil])
([nil nil ((#("update_" 0 7 (fontified t)) . -591) (undo-tree-id3577 . -7) (undo-tree-id3578 . -7) (undo-tree-id3579 . -6) (undo-tree-id3580 . -6) (undo-tree-id3581 . -6) (undo-tree-id3582 . -6) (undo-tree-id3583 . -6) (undo-tree-id3584 . -7) (undo-tree-id3585 . -7) (undo-tree-id3586 . -7) (undo-tree-id3587 . -7) (undo-tree-id3588 . -7) (undo-tree-id3589 . -7) (undo-tree-id3590 . -7) (undo-tree-id3591 . -7) (undo-tree-id3592 . -7) (undo-tree-id3593 . -7) (undo-tree-id3594 . -7) (undo-tree-id3595 . -7) (undo-tree-id3596 . -7) (undo-tree-id3597 . -7) (undo-tree-id3598 . -7) (undo-tree-id3599 . -7) (undo-tree-id3600 . -7) (undo-tree-id3601 . -7) (undo-tree-id3602 . -7) (undo-tree-id3603 . -7) (undo-tree-id3604 . -7) (undo-tree-id3605 . -7) (undo-tree-id3606 . -7) (undo-tree-id3607 . -7) (undo-tree-id3608 . -7) (undo-tree-id3609 . -7) (undo-tree-id3610 . -7) (undo-tree-id3611 . -7) (undo-tree-id3612 . -7) (undo-tree-id3613 . -7) (undo-tree-id3614 . -7) (undo-tree-id3615 . -7) (undo-tree-id3616 . -7) (undo-tree-id3617 . -7) (undo-tree-id3618 . -7) (undo-tree-id3619 . -7) (undo-tree-id3620 . -7) (undo-tree-id3621 . -7) (undo-tree-id3622 . -7) (undo-tree-id3623 . -7) (undo-tree-id3624 . -7) (undo-tree-id3625 . -7) (undo-tree-id3626 . -7) (undo-tree-id3627 . -7) (undo-tree-id3628 . -7) (undo-tree-id3629 . -7) (undo-tree-id3630 . -7) (undo-tree-id3631 . -7) (undo-tree-id3632 . -7) (undo-tree-id3633 . -7) (undo-tree-id3634 . -7) (undo-tree-id3635 . -7) (undo-tree-id3636 . -7) (undo-tree-id3637 . -7) (undo-tree-id3638 . -7) (undo-tree-id3639 . -7) (undo-tree-id3640 . -7) (undo-tree-id3641 . -7) (undo-tree-id3642 . -7) (undo-tree-id3643 . -7) 598) nil (26039 51277 569432 956000) 0 nil])
([nil nil ((#("axis(" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-2-face) fontified t)) . -586) (undo-tree-id3501 . -5) (undo-tree-id3502 . -5) (undo-tree-id3503 . -5) (undo-tree-id3504 . -5) (undo-tree-id3505 . -5) (undo-tree-id3506 . -5) (undo-tree-id3507 . -5) (undo-tree-id3508 . -5) (undo-tree-id3509 . -5) (undo-tree-id3510 . -5) (undo-tree-id3511 . -5) (undo-tree-id3512 . -5) (undo-tree-id3513 . -5) (undo-tree-id3514 . -5) (undo-tree-id3515 . -5) (undo-tree-id3516 . -5) (undo-tree-id3517 . -5) (undo-tree-id3518 . -5) (undo-tree-id3519 . -5) (undo-tree-id3520 . -5) (undo-tree-id3521 . -5) (undo-tree-id3522 . -5) (undo-tree-id3523 . -5) (undo-tree-id3524 . -5) (undo-tree-id3525 . -5) (undo-tree-id3526 . -5) (undo-tree-id3527 . -5) (undo-tree-id3528 . -5) (undo-tree-id3529 . -5) (undo-tree-id3530 . -5) (undo-tree-id3531 . -5) (undo-tree-id3532 . -5) (undo-tree-id3533 . -5) (undo-tree-id3534 . -5) (undo-tree-id3535 . -5) (undo-tree-id3536 . -5) (undo-tree-id3537 . -5) (undo-tree-id3538 . -5) (undo-tree-id3539 . -5) (undo-tree-id3540 . -5) (undo-tree-id3541 . -5) (undo-tree-id3542 . -5) (undo-tree-id3543 . -5) (undo-tree-id3544 . -5) (undo-tree-id3545 . -5) (undo-tree-id3546 . -5) (undo-tree-id3547 . -5) (undo-tree-id3548 . -5) (undo-tree-id3549 . -5) (undo-tree-id3550 . -5) (undo-tree-id3551 . -5) (undo-tree-id3552 . -5) (undo-tree-id3553 . -5) (undo-tree-id3554 . -5) (undo-tree-id3555 . -5) (undo-tree-id3556 . -5) (undo-tree-id3557 . -5) (undo-tree-id3558 . -5) (undo-tree-id3559 . -5) (undo-tree-id3560 . -5) (undo-tree-id3561 . -5) (undo-tree-id3562 . -5) (undo-tree-id3563 . -5) (undo-tree-id3564 . -5) (undo-tree-id3565 . -5) (undo-tree-id3566 . -5) (undo-tree-id3567 . -5) (undo-tree-id3568 . -5) (undo-tree-id3569 . -5) (undo-tree-id3570 . -5) (undo-tree-id3571 . -5) (undo-tree-id3572 . -5) (undo-tree-id3573 . -5) (undo-tree-id3574 . -5) (undo-tree-id3575 . -5) (undo-tree-id3576 . -5) 591) nil (26039 51277 569385 789000) 0 nil])
([nil nil ((#("scaled_" 0 7 (fontified t)) . -579) (undo-tree-id3423 . -7) (undo-tree-id3424 . -7) (undo-tree-id3425 . -7) (undo-tree-id3426 . -7) (undo-tree-id3427 . -7) (undo-tree-id3428 . -7) (undo-tree-id3429 . -7) (undo-tree-id3430 . -7) (undo-tree-id3431 . -7) (undo-tree-id3432 . -7) (undo-tree-id3433 . -7) (undo-tree-id3434 . -7) (undo-tree-id3435 . -7) (undo-tree-id3436 . -7) (undo-tree-id3437 . -7) (undo-tree-id3438 . -7) (undo-tree-id3439 . -7) (undo-tree-id3440 . -7) (undo-tree-id3441 . -7) (undo-tree-id3442 . -7) (undo-tree-id3443 . -7) (undo-tree-id3444 . -7) (undo-tree-id3445 . -7) (undo-tree-id3446 . -7) (undo-tree-id3447 . -7) (undo-tree-id3448 . -7) (undo-tree-id3449 . -7) (undo-tree-id3450 . -7) (undo-tree-id3451 . -7) (undo-tree-id3452 . -7) (undo-tree-id3453 . -7) (undo-tree-id3454 . -7) (undo-tree-id3455 . -7) (undo-tree-id3456 . -7) (undo-tree-id3457 . -7) (undo-tree-id3458 . -7) (undo-tree-id3459 . -7) (undo-tree-id3460 . -7) (undo-tree-id3461 . -7) (undo-tree-id3462 . -7) (undo-tree-id3463 . -7) (undo-tree-id3464 . -7) (undo-tree-id3465 . -7) (undo-tree-id3466 . -7) (undo-tree-id3467 . -7) (undo-tree-id3468 . -7) (undo-tree-id3469 . -7) (undo-tree-id3470 . -7) (undo-tree-id3471 . -7) (undo-tree-id3472 . -7) (undo-tree-id3473 . -7) (undo-tree-id3474 . -7) (undo-tree-id3475 . -7) (undo-tree-id3476 . -7) (undo-tree-id3477 . -7) (undo-tree-id3478 . -7) (undo-tree-id3479 . -7) (undo-tree-id3480 . -7) (undo-tree-id3481 . -7) (undo-tree-id3482 . -7) (undo-tree-id3483 . -7) (undo-tree-id3484 . -7) (undo-tree-id3485 . -7) (undo-tree-id3486 . -7) (undo-tree-id3487 . -7) (undo-tree-id3488 . -7) (undo-tree-id3489 . -7) (undo-tree-id3490 . -7) (undo-tree-id3491 . -7) (undo-tree-id3492 . -7) (undo-tree-id3493 . -7) (undo-tree-id3494 . -7) (undo-tree-id3495 . -7) (undo-tree-id3496 . -7) (undo-tree-id3497 . -7) (undo-tree-id3498 . -7) (undo-tree-id3499 . -7) (undo-tree-id3500 . -7) 586) nil (26039 51277 569332 116000) 0 nil])
([nil nil ((#("from_" 0 5 (fontified t)) . -574) (undo-tree-id3343 . -5) (undo-tree-id3344 . -5) (undo-tree-id3345 . -5) (undo-tree-id3346 . -5) (undo-tree-id3347 . -5) (undo-tree-id3348 . -5) (undo-tree-id3349 . -5) (undo-tree-id3350 . -5) (undo-tree-id3351 . -5) (undo-tree-id3352 . -5) (undo-tree-id3353 . -5) (undo-tree-id3354 . -5) (undo-tree-id3355 . -5) (undo-tree-id3356 . -5) (undo-tree-id3357 . -5) (undo-tree-id3358 . -5) (undo-tree-id3359 . -5) (undo-tree-id3360 . -5) (undo-tree-id3361 . -5) (undo-tree-id3362 . -5) (undo-tree-id3363 . -5) (undo-tree-id3364 . -5) (undo-tree-id3365 . -5) (undo-tree-id3366 . -5) (undo-tree-id3367 . -5) (undo-tree-id3368 . -5) (undo-tree-id3369 . -5) (undo-tree-id3370 . -5) (undo-tree-id3371 . -5) (undo-tree-id3372 . -5) (undo-tree-id3373 . -5) (undo-tree-id3374 . -5) (undo-tree-id3375 . -5) (undo-tree-id3376 . -5) (undo-tree-id3377 . -5) (undo-tree-id3378 . -5) (undo-tree-id3379 . -5) (undo-tree-id3380 . -5) (undo-tree-id3381 . -5) (undo-tree-id3382 . -5) (undo-tree-id3383 . -5) (undo-tree-id3384 . -5) (undo-tree-id3385 . -5) (undo-tree-id3386 . -5) (undo-tree-id3387 . -5) (undo-tree-id3388 . -5) (undo-tree-id3389 . -5) (undo-tree-id3390 . -5) (undo-tree-id3391 . -5) (undo-tree-id3392 . -5) (undo-tree-id3393 . -5) (undo-tree-id3394 . -5) (undo-tree-id3395 . -5) (undo-tree-id3396 . -5) (undo-tree-id3397 . -5) (undo-tree-id3398 . -5) (undo-tree-id3399 . -5) (undo-tree-id3400 . -5) (undo-tree-id3401 . -5) (undo-tree-id3402 . -5) (undo-tree-id3403 . -5) (undo-tree-id3404 . -5) (undo-tree-id3405 . -5) (undo-tree-id3406 . -5) (undo-tree-id3407 . -5) (undo-tree-id3408 . -5) (undo-tree-id3409 . -5) (undo-tree-id3410 . -5) (undo-tree-id3411 . -5) (undo-tree-id3412 . -5) (undo-tree-id3413 . -5) (undo-tree-id3414 . -5) (undo-tree-id3415 . -5) (undo-tree-id3416 . -5) (undo-tree-id3417 . -5) (undo-tree-id3418 . -5) (undo-tree-id3419 . -5) (undo-tree-id3420 . -5) (undo-tree-id3421 . -5) (undo-tree-id3422 . -5) 579) nil (26039 51277 568939 981000) 0 nil])
([nil nil ((#("UnitQuaternion::" 0 14 (face font-lock-type-face fontified t) 14 16 (fontified t)) . -558) (undo-tree-id3261 . -16) (undo-tree-id3262 . -16) (undo-tree-id3263 . -16) (undo-tree-id3264 . -16) (undo-tree-id3265 . -16) (undo-tree-id3266 . -16) (undo-tree-id3267 . -16) (undo-tree-id3268 . -16) (undo-tree-id3269 . -16) (undo-tree-id3270 . -16) (undo-tree-id3271 . -16) (undo-tree-id3272 . -16) (undo-tree-id3273 . -16) (undo-tree-id3274 . -16) (undo-tree-id3275 . -16) (undo-tree-id3276 . -16) (undo-tree-id3277 . -16) (undo-tree-id3278 . -16) (undo-tree-id3279 . -16) (undo-tree-id3280 . -16) (undo-tree-id3281 . -16) (undo-tree-id3282 . -16) (undo-tree-id3283 . -16) (undo-tree-id3284 . -16) (undo-tree-id3285 . -16) (undo-tree-id3286 . -16) (undo-tree-id3287 . -16) (undo-tree-id3288 . -16) (undo-tree-id3289 . -16) (undo-tree-id3290 . -16) (undo-tree-id3291 . -16) (undo-tree-id3292 . -16) (undo-tree-id3293 . -16) (undo-tree-id3294 . -16) (undo-tree-id3295 . -16) (undo-tree-id3296 . -16) (undo-tree-id3297 . -16) (undo-tree-id3298 . -16) (undo-tree-id3299 . -16) (undo-tree-id3300 . -16) (undo-tree-id3301 . -16) (undo-tree-id3302 . -16) (undo-tree-id3303 . -16) (undo-tree-id3304 . -16) (undo-tree-id3305 . -16) (undo-tree-id3306 . -16) (undo-tree-id3307 . -16) (undo-tree-id3308 . -16) (undo-tree-id3309 . -16) (undo-tree-id3310 . -16) (undo-tree-id3311 . -16) (undo-tree-id3312 . -16) (undo-tree-id3313 . -16) (undo-tree-id3314 . -16) (undo-tree-id3315 . -16) (undo-tree-id3316 . -16) (undo-tree-id3317 . -16) (undo-tree-id3318 . -16) (undo-tree-id3319 . -16) (undo-tree-id3320 . -16) (undo-tree-id3321 . -16) (undo-tree-id3322 . -16) (undo-tree-id3323 . -16) (undo-tree-id3324 . -16) (undo-tree-id3325 . -16) (undo-tree-id3326 . -16) (undo-tree-id3327 . -16) (undo-tree-id3328 . -16) (undo-tree-id3329 . -16) (undo-tree-id3330 . -16) (undo-tree-id3331 . -16) (undo-tree-id3332 . -16) (undo-tree-id3333 . -16) (undo-tree-id3334 . -16) (undo-tree-id3335 . -16) (undo-tree-id3336 . -16) (undo-tree-id3337 . -16) (undo-tree-id3338 . -16) (undo-tree-id3339 . -16) (undo-tree-id3340 . -16) (undo-tree-id3341 . -16) (undo-tree-id3342 . -16) 574) nil (26039 51277 568409 598000) 0 nil])
([nil nil ((611 . 614)) nil (26039 51277 566997 777000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 624 669 nil nil nil t #s(yas--exit 670 nil))) #s(yas--exit 670 nil) 70 nil #s(yas--field 1 624 669 nil nil nil t #s(yas--exit 670 nil)) nil nil)) (612 . 630) (#("rotation_to(${1:other})$0" 0 25 (fontified nil)) . 612) (612 . 637) (#("ro" 0 2 (fontified nil)) . 612) (612 . 614) (#("rotation_to(…)" 0 14 (fontified nil)) . -612) (612 . 626) (#("ro" 0 2 (fontified t)) . -612) (undo-tree-id3251 . -2) (undo-tree-id3252 . -1) (undo-tree-id3253 . -1) (undo-tree-id3254 . -1) (undo-tree-id3255 . -1) (undo-tree-id3256 . -1) (undo-tree-id3257 . -2) (undo-tree-id3258 . -2) (undo-tree-id3259 . -2) (undo-tree-id3260 . -2) 614) nil (26039 51277 566996 200000) 0 nil])
([nil nil ((625 . 626) (#("other" 0 5 (fontified nil)) . 625) (undo-tree-id3250 . -5) (624 . 625)) nil (26039 51277 566987 506000) 0 nil])
([nil nil ((624 . 638) (#("Un" 0 2 (fontified nil)) . 624) (undo-tree-id3239 . -2) (624 . 626) (#("UnitQuaternion" 0 14 (fontified nil)) . -624) (undo-tree-id3240 . -14) (624 . 638) (#("Un" 0 2 (face font-lock-type-face fontified t)) . -624) (undo-tree-id3241 . -2) (undo-tree-id3242 . -2) (undo-tree-id3243 . -2) (undo-tree-id3244 . -1) (undo-tree-id3245 . -1) (undo-tree-id3246 . -2) (undo-tree-id3247 . -2) (undo-tree-id3248 . -2) (undo-tree-id3249 . -2) 626) nil (26039 51277 566985 280000) 0 nil])
([nil nil ((638 . 644)) nil (26039 51277 566975 853000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 657 667 nil nil nil t #s(yas--exit 668 nil))) #s(yas--exit 668 nil) 71 nil #s(yas--field 1 657 667 nil nil nil t #s(yas--exit 668 nil)) #s(yas--field 1 624 669 nil nil nil t #s(yas--exit 670 nil)) nil)) (640 . 667) (#("from_scaled_axis(${1:axisangle})$0" 0 34 (fontified nil)) . 640) (undo-tree-id3214 . -34) (640 . 674) (#("from" 0 4 (fontified nil)) . 640) (undo-tree-id3215 . -4) (640 . 644) (#("from_scaled_axis(…)" 0 19 (fontified nil)) . -640) (undo-tree-id3216 . -19) (640 . 659) (#("from" 0 4 (fontified t)) . -640) (undo-tree-id3217 . -4) (undo-tree-id3218 . -4) (undo-tree-id3219 . -4) (undo-tree-id3220 . -1) (undo-tree-id3221 . -1) (undo-tree-id3222 . -2) (undo-tree-id3223 . -2) (undo-tree-id3224 . -3) (undo-tree-id3225 . -3) (undo-tree-id3226 . -4) (undo-tree-id3227 . -4) (undo-tree-id3228 . -4) (undo-tree-id3229 . -4) (undo-tree-id3230 . -4) (undo-tree-id3231 . -4) (undo-tree-id3232 . -4) (undo-tree-id3233 . -4) (undo-tree-id3234 . -4) (undo-tree-id3235 . -4) (undo-tree-id3236 . -4) (undo-tree-id3237 . -4) (undo-tree-id3238 . -4) 644) nil (26039 51277 566973 688000) 0 nil])
([nil nil ((658 . 659) (#("axisangle" 0 9 (fontified nil)) . 658) (undo-tree-id3213 . -9) (657 . 658)) nil (26039 51277 566955 608000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -658) (undo-tree-id3201 . -1) (undo-tree-id3202 . -1) (undo-tree-id3203 . -1) (undo-tree-id3204 . -1) (undo-tree-id3205 . -1) (undo-tree-id3206 . -1) (undo-tree-id3207 . -1) (undo-tree-id3208 . -1) (undo-tree-id3209 . -1) (undo-tree-id3210 . -1) (undo-tree-id3211 . -1) (undo-tree-id3212 . -1) 659) nil (26039 51277 566953 445000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -657) (undo-tree-id3187 . -1) (undo-tree-id3188 . -1) (undo-tree-id3189 . -1) (undo-tree-id3190 . -1) (undo-tree-id3191 . -1) (undo-tree-id3192 . -1) (undo-tree-id3193 . -1) (undo-tree-id3194 . -1) (undo-tree-id3195 . -1) (undo-tree-id3196 . -1) (undo-tree-id3197 . -1) (undo-tree-id3198 . -1) (undo-tree-id3199 . -1) (undo-tree-id3200 . -1) 658) nil (26039 51277 566943 459000) 0 nil])
([nil nil ((657 . 659)) nil (26039 51277 566932 493000) 0 nil])
([nil nil ((657 . 667) (#("up" 0 2 (fontified nil)) . 657) (undo-tree-id3173 . -2) (657 . 659) (#("update_so3" 0 10 (fontified nil)) . -657) (undo-tree-id3174 . -10) (657 . 667) (#("up" 0 2 (fontified t)) . -657) (undo-tree-id3175 . -2) (undo-tree-id3176 . -2) (undo-tree-id3177 . -2) (undo-tree-id3178 . -1) (undo-tree-id3179 . -1) (undo-tree-id3180 . -1) (undo-tree-id3181 . -1) (undo-tree-id3182 . -1) (undo-tree-id3183 . -2) (undo-tree-id3184 . -2) (undo-tree-id3185 . -2) (undo-tree-id3186 . -2) 659) nil (26039 51277 566927 582000) 0 nil])
([nil nil ((apply yas--snippet-revive 640 668 #s(yas--snippet nil (#s(yas--field 1 657 667 nil nil nil t #s(yas--exit 668 nil))) #s(yas--exit 668 nil) 71 nil #s(yas--field 1 657 667 nil nil nil t #s(yas--exit 668 nil)) #s(yas--field 1 624 669 nil nil nil t #s(yas--exit 670 nil)) nil))) nil (26039 51282 323599 275000) 0 nil])
([nil nil ((624 . 625) (t 26039 51277 582360 825000)) nil (26039 51282 323595 351000) 0 nil])
([nil nil ((apply yas--snippet-revive 612 670 #s(yas--snippet nil (#s(yas--field 1 624 669 nil nil nil t #s(yas--exit 670 nil))) #s(yas--exit 670 nil) 70 nil #s(yas--field 1 624 669 nil nil nil t #s(yas--exit 670 nil)) nil nil))) nil (26039 51657 43410 417000) 0 nil])
([nil nil ((780 . 784) (#("    " 0 4 (fontified nil)) . 779) (undo-tree-id3793 . -4) (undo-tree-id3794 . -4) (undo-tree-id3795 . -4) (undo-tree-id3796 . -4) (778 . 784) (t 26039 51282 372360 549000)) nil (26039 51657 43409 422000) 0 nil])
([nil nil ((#("let uq = UnitQuaternion::from_quaternion(so3.rotation.clone()).rotation_to(&UnitQuaternion::from_scaled_axis(update_so3));" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 6 (face font-lock-variable-name-face fontified t) 6 9 (fontified t) 9 23 (face font-lock-type-face fontified t) 23 25 (fontified t) 25 40 (fontified t) 40 41 (face (rainbow-delimiters-depth-2-face) fontified t) 41 45 (fontified t) 45 54 (fontified t) 54 59 (fontified t) 59 60 (face (rainbow-delimiters-depth-3-face) fontified t) 60 61 (face (rainbow-delimiters-depth-3-face) fontified t) 61 62 (face (rainbow-delimiters-depth-2-face) fontified t) 62 63 (fontified t) 63 74 (fontified t) 74 75 (face (rainbow-delimiters-depth-2-face) fontified t) 75 76 (face rust-ampersand-face fontified t) 76 90 (face font-lock-type-face fontified t) 90 92 (fontified t) 92 108 (fontified t) 108 109 (face (rainbow-delimiters-depth-3-face) fontified t) 109 119 (fontified t) 119 120 (face (rainbow-delimiters-depth-3-face) fontified t) 120 121 (face (rainbow-delimiters-depth-2-face) fontified t) 121 122 (fontified t)) . 549) (undo-tree-id3750 . -120) (undo-tree-id3751 . -120) (undo-tree-id3752 . -120) (undo-tree-id3753 . -120) (undo-tree-id3754 . -120) (undo-tree-id3755 . -120) (undo-tree-id3756 . -120) (undo-tree-id3757 . -120) (undo-tree-id3758 . -120) (undo-tree-id3759 . -120) (undo-tree-id3760 . -120) (undo-tree-id3761 . -120) (undo-tree-id3762 . -120) (undo-tree-id3763 . -120) (undo-tree-id3764 . -120) (undo-tree-id3765 . -120) (undo-tree-id3766 . -120) (undo-tree-id3767 . -120) (undo-tree-id3768 . -120) (undo-tree-id3769 . -120) (undo-tree-id3770 . -120) (undo-tree-id3771 . -120) (undo-tree-id3772 . -120) (undo-tree-id3773 . -120) (undo-tree-id3774 . -120) (undo-tree-id3775 . -120) (undo-tree-id3776 . -120) (undo-tree-id3777 . -120) (undo-tree-id3778 . -120) (undo-tree-id3779 . -120) (undo-tree-id3780 . -120) (undo-tree-id3781 . -120) (undo-tree-id3782 . -120) (undo-tree-id3783 . -120) (undo-tree-id3784 . -120) (undo-tree-id3785 . -120) (undo-tree-id3786 . -120) (undo-tree-id3787 . -120) (undo-tree-id3788 . -120) (undo-tree-id3789 . -120) (undo-tree-id3790 . -120) (undo-tree-id3791 . -120) (undo-tree-id3792 . -122)) nil (26039 51657 43404 143000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 549) (undo-tree-id3749 . -1)) nil (26039 51657 43374 692000) 0 nil])
([nil nil ((#("    let q = uq.quaternion().to_owned();" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 9 (face font-lock-variable-name-face fontified t) 9 12 (fontified t) 12 15 (fontified t) 15 25 (fontified t) 25 26 (face (rainbow-delimiters-depth-2-face) fontified t) 26 27 (face (rainbow-delimiters-depth-2-face) fontified t) 27 28 (fontified t) 28 36 (fontified t) 36 37 (face (rainbow-delimiters-depth-2-face) fontified t) 37 38 (face (rainbow-delimiters-depth-2-face) fontified t) 38 39 (fontified t)) . 549) (undo-tree-id3748 . -39)) nil (26039 51657 43372 924000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 549) (undo-tree-id3747 . -1)) nil (26039 51657 43370 934000) 0 nil])
([nil nil ((#("    println!(\"SO3 updated = {:?}\", SO3::from_quaternion(q).log());" 0 4 (fontified t) 4 12 (face rust-builtin-formatting-macro fontified t) 12 13 (face (rainbow-delimiters-depth-2-face) fontified t) 13 28 (face font-lock-string-face fontified t) 28 32 (face rust-string-interpolation fontified t) 32 33 (face font-lock-string-face fontified t) 33 35 (fontified t) 35 38 (face font-lock-type-face fontified t) 38 40 (fontified t) 40 55 (fontified t) 55 56 (face (rainbow-delimiters-depth-3-face) fontified t) 56 57 (fontified t) 57 58 (face (rainbow-delimiters-depth-3-face) fontified t) 58 59 (fontified t) 59 62 (fontified t) 62 63 (face (rainbow-delimiters-depth-3-face) fontified t) 63 64 (face (rainbow-delimiters-depth-3-face) fontified t) 64 65 (face (rainbow-delimiters-depth-2-face) fontified t) 65 66 (fontified t rear-nonsticky t)) . 549) (undo-tree-id3725 . -35) (undo-tree-id3726 . -66) (undo-tree-id3727 . -35) (undo-tree-id3728 . -35) (undo-tree-id3729 . -35) (undo-tree-id3730 . -35) (undo-tree-id3731 . -35) (undo-tree-id3732 . -35) (undo-tree-id3733 . -4) (undo-tree-id3734 . -35) (undo-tree-id3735 . -66) (undo-tree-id3736 . -66) (undo-tree-id3737 . -66) (undo-tree-id3738 . -66) (undo-tree-id3739 . -66) (undo-tree-id3740 . -66) (undo-tree-id3741 . -66) (undo-tree-id3742 . -66) (undo-tree-id3743 . -66) (undo-tree-id3744 . -66) (undo-tree-id3745 . -4) (undo-tree-id3746 . -66)) nil (26039 51657 43366 48000) 0 nil])
([nil nil ((549 . 554) (t 26039 51657 59005 656000)) nil (26039 51716 819782 718000) 0 nil])
([nil nil ((554 . 566)) nil (26039 51716 819781 936000) 0 nil])
([nil nil ((#("Q" 0 1 (face font-lock-type-face fontified t)) . -565) (undo-tree-id4238 . -1) (undo-tree-id4239 . -1) (undo-tree-id4240 . -1) (undo-tree-id4241 . -1) 566) nil (26039 51716 819781 95000) 0 nil])
([nil nil ((565 . 566)) nil (26039 51716 819777 752000) 0 nil])
([nil nil ((565 . 579) (#("U" 0 1 (fontified nil)) . 565) (565 . 566) (#("UnitQuaternion" 0 14 (fontified nil)) . -565) (565 . 579) (#("U" 0 1 (face font-lock-type-face fontified t)) . -565) (undo-tree-id4231 . -1) (undo-tree-id4232 . -1) (undo-tree-id4233 . -1) (undo-tree-id4234 . -1) (undo-tree-id4235 . -1) (undo-tree-id4236 . -1) (undo-tree-id4237 . -1) 566) nil (26039 51716 819776 519000) 0 nil])
([nil nil ((579 . 582)) nil (26039 51716 819771 91000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -581) (undo-tree-id4225 . -1) (undo-tree-id4226 . -1) (undo-tree-id4227 . -1) (undo-tree-id4228 . -1) (undo-tree-id4229 . -1) (undo-tree-id4230 . -1) 582) nil (26039 51716 819770 232000) 0 nil])
([nil nil ((581 . 585)) nil (26039 51716 819765 236000) 0 nil])
([nil nil ((581 . 597) (#("from" 0 4 (fontified nil)) . 581) (581 . 585) (#("from_scaled_axis" 0 16 (fontified nil)) . -581) (581 . 597) (#("from" 0 4 (fontified t)) . -581) (undo-tree-id4213 . -4) (undo-tree-id4214 . -1) (undo-tree-id4215 . -1) (undo-tree-id4216 . -2) (undo-tree-id4217 . -2) (undo-tree-id4218 . -3) (undo-tree-id4219 . -3) (undo-tree-id4220 . -4) (undo-tree-id4221 . -4) (undo-tree-id4222 . -4) (undo-tree-id4223 . -4) (undo-tree-id4224 . -4) 585) nil (26039 51716 819763 829000) 0 nil])
([nil nil ((597 . 599)) nil (26039 51716 819754 958000) 0 nil])
([nil nil ((598 . 599)) nil (26039 51716 819754 323000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -598) (undo-tree-id4207 . -1) (undo-tree-id4208 . -1) (undo-tree-id4209 . -1) (undo-tree-id4210 . -1) (undo-tree-id4211 . -1) (undo-tree-id4212 . -1) 599) nil (26039 51716 819753 394000) 0 nil])
([nil nil ((598 . 599)) nil (26039 51716 819748 231000) 0 nil])
([nil nil ((598 . 608) (#("u" 0 1 (fontified nil)) . 598) (598 . 599) (#("update_so3" 0 10 (fontified nil)) . -598) (598 . 608) (#("u" 0 1 (fontified t)) . -598) (undo-tree-id4201 . -1) (undo-tree-id4202 . -1) (undo-tree-id4203 . -1) (undo-tree-id4204 . -1) (undo-tree-id4205 . -1) (undo-tree-id4206 . -1) 599) nil (26039 51716 819747 18000) 0 nil])
([nil nil ((609 . 610)) nil (26039 51716 819741 532000) 0 nil])
([nil nil ((610 . 615)) nil (26039 51716 819740 881000) 0 nil])
([nil nil ((615 . 625)) nil (26039 51716 819740 299000) 0 nil])
([nil nil ((624 . 638) (#("U" 0 1 (fontified nil)) . 624) (624 . 625) (#("UnitQuaternion" 0 14 (fontified nil)) . -624) (624 . 638) (#("U" 0 1 (face font-lock-type-face fontified t)) . -624) (undo-tree-id4194 . -1) (undo-tree-id4195 . -1) (undo-tree-id4196 . -1) (undo-tree-id4197 . -1) (undo-tree-id4198 . -1) (undo-tree-id4199 . -1) (undo-tree-id4200 . -1) 625) nil (26039 51716 819739 44000) 0 nil])
([nil nil ((638 . 644)) nil (26039 51716 819733 122000) 0 nil])
([nil nil ((640 . 655) (#("from" 0 4 (fontified nil)) . 640) (640 . 644) (#("from_quaternion" 0 15 (fontified nil)) . -640) (640 . 655) (#("from" 0 4 (fontified t)) . -640) (undo-tree-id4181 . -4) (undo-tree-id4182 . -1) (undo-tree-id4183 . -1) (undo-tree-id4184 . -1) (undo-tree-id4185 . -2) (undo-tree-id4186 . -2) (undo-tree-id4187 . -3) (undo-tree-id4188 . -3) (undo-tree-id4189 . -4) (undo-tree-id4190 . -4) (undo-tree-id4191 . -4) (undo-tree-id4192 . -4) (undo-tree-id4193 . -4) 644) nil (26039 51716 819731 589000) 0 nil])
([nil nil ((655 . 657)) nil (26039 51716 819721 698000) 0 nil])
([nil nil ((656 . 657)) nil (26039 51716 819721 99000) 0 nil])
([nil nil ((656 . 659) (#("s" 0 1 (fontified nil)) . 656) (656 . 657) (#("so3" 0 3 (fontified nil)) . -656) (656 . 659) (#("s" 0 1 (fontified t)) . -656) (undo-tree-id4170 . -1) (undo-tree-id4171 . -1) (undo-tree-id4172 . -1) (undo-tree-id4173 . -1) (undo-tree-id4174 . -1) (undo-tree-id4175 . -1) (undo-tree-id4176 . -1) (undo-tree-id4177 . -1) (undo-tree-id4178 . -1) (undo-tree-id4179 . -1) (undo-tree-id4180 . -1) 657) nil (26039 51716 819719 364000) 0 nil])
([nil nil ((659 . 660)) nil (26039 51716 819711 248000) 0 nil])
([nil nil ((660 . 668) (#("rotation" 0 8 (fontified nil)) . -660) (660 . 668)) nil (26039 51716 819710 472000) 0 nil])
([nil nil ((#("rotation)" 0 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t)) . -660) (undo-tree-id4154 . -9) (undo-tree-id4155 . -9) (undo-tree-id4156 . -9) (undo-tree-id4157 . -9) (undo-tree-id4158 . -9) (undo-tree-id4159 . -8) (undo-tree-id4160 . -8) (undo-tree-id4161 . -8) (undo-tree-id4162 . -9) (undo-tree-id4163 . -9) (undo-tree-id4164 . -9) (undo-tree-id4165 . -9) (undo-tree-id4166 . -9) (undo-tree-id4167 . -9) (undo-tree-id4168 . -9) (undo-tree-id4169 . -9) 669) nil (26039 51716 819709 25000) 0 nil])
([nil nil ((#("so3." 0 4 (fontified t)) . -656) (undo-tree-id4122 . -4) (undo-tree-id4123 . -4) (undo-tree-id4124 . -4) (undo-tree-id4125 . -4) (undo-tree-id4126 . -4) (undo-tree-id4127 . -4) (undo-tree-id4128 . -3) (undo-tree-id4129 . -3) (undo-tree-id4130 . -3) (undo-tree-id4131 . -4) (undo-tree-id4132 . -4) (undo-tree-id4133 . -4) (undo-tree-id4134 . -4) (undo-tree-id4135 . -4) (undo-tree-id4136 . -4) (undo-tree-id4137 . -4) (undo-tree-id4138 . -4) (undo-tree-id4139 . -4) (undo-tree-id4140 . -4) (undo-tree-id4141 . -4) (undo-tree-id4142 . -4) (undo-tree-id4143 . -4) (undo-tree-id4144 . -4) (undo-tree-id4145 . -4) (undo-tree-id4146 . -4) (undo-tree-id4147 . -4) (undo-tree-id4148 . -4) (undo-tree-id4149 . -4) (undo-tree-id4150 . -4) (undo-tree-id4151 . -4) (undo-tree-id4152 . -4) (undo-tree-id4153 . -4) 660) nil (26039 51716 819697 56000) 0 nil])
([nil nil ((#("quaternion(" 0 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-2-face) fontified t)) . -645) (undo-tree-id4054 . -11) (undo-tree-id4055 . -11) (undo-tree-id4056 . -10) (undo-tree-id4057 . -10) (undo-tree-id4058 . -10) (undo-tree-id4059 . -10) (undo-tree-id4060 . -10) (undo-tree-id4061 . -10) (undo-tree-id4062 . -10) (undo-tree-id4063 . -10) (undo-tree-id4064 . -10) (undo-tree-id4065 . -10) (undo-tree-id4066 . -11) (undo-tree-id4067 . -11) (undo-tree-id4068 . -11) (undo-tree-id4069 . -11) (undo-tree-id4070 . -11) (undo-tree-id4071 . -11) (undo-tree-id4072 . -11) (undo-tree-id4073 . -11) (undo-tree-id4074 . -11) (undo-tree-id4075 . -11) (undo-tree-id4076 . -11) (undo-tree-id4077 . -11) (undo-tree-id4078 . -11) (undo-tree-id4079 . -11) (undo-tree-id4080 . -11) (undo-tree-id4081 . -11) (undo-tree-id4082 . -11) (undo-tree-id4083 . -11) (undo-tree-id4084 . -11) (undo-tree-id4085 . -11) (undo-tree-id4086 . -11) (undo-tree-id4087 . -11) (undo-tree-id4088 . -11) (undo-tree-id4089 . -11) (undo-tree-id4090 . -11) (undo-tree-id4091 . -11) (undo-tree-id4092 . -11) (undo-tree-id4093 . -11) (undo-tree-id4094 . -11) (undo-tree-id4095 . -11) (undo-tree-id4096 . -11) (undo-tree-id4097 . -11) (undo-tree-id4098 . -11) (undo-tree-id4099 . -11) (undo-tree-id4100 . -11) (undo-tree-id4101 . -11) (undo-tree-id4102 . -11) (undo-tree-id4103 . -11) (undo-tree-id4104 . -11) (undo-tree-id4105 . -11) (undo-tree-id4106 . -11) (undo-tree-id4107 . -11) (undo-tree-id4108 . -11) (undo-tree-id4109 . -11) (undo-tree-id4110 . -11) (undo-tree-id4111 . -11) (undo-tree-id4112 . -11) (undo-tree-id4113 . -11) (undo-tree-id4114 . -11) (undo-tree-id4115 . -11) (undo-tree-id4116 . -11) (undo-tree-id4117 . -11) (undo-tree-id4118 . -11) (undo-tree-id4119 . -11) (undo-tree-id4120 . -11) (undo-tree-id4121 . -11) 656) nil (26039 51716 819672 197000) 0 nil])
([nil nil ((#("from_" 0 5 (fontified t)) . -640) (undo-tree-id3984 . -5) (undo-tree-id3985 . -5) (undo-tree-id3986 . -5) (undo-tree-id3987 . -5) (undo-tree-id3988 . -5) (undo-tree-id3989 . -5) (undo-tree-id3990 . -5) (undo-tree-id3991 . -5) (undo-tree-id3992 . -5) (undo-tree-id3993 . -5) (undo-tree-id3994 . -5) (undo-tree-id3995 . -5) (undo-tree-id3996 . -5) (undo-tree-id3997 . -5) (undo-tree-id3998 . -5) (undo-tree-id3999 . -5) (undo-tree-id4000 . -5) (undo-tree-id4001 . -5) (undo-tree-id4002 . -5) (undo-tree-id4003 . -5) (undo-tree-id4004 . -5) (undo-tree-id4005 . -5) (undo-tree-id4006 . -5) (undo-tree-id4007 . -5) (undo-tree-id4008 . -5) (undo-tree-id4009 . -5) (undo-tree-id4010 . -5) (undo-tree-id4011 . -5) (undo-tree-id4012 . -5) (undo-tree-id4013 . -5) (undo-tree-id4014 . -5) (undo-tree-id4015 . -5) (undo-tree-id4016 . -5) (undo-tree-id4017 . -5) (undo-tree-id4018 . -5) (undo-tree-id4019 . -5) (undo-tree-id4020 . -5) (undo-tree-id4021 . -5) (undo-tree-id4022 . -5) (undo-tree-id4023 . -5) (undo-tree-id4024 . -5) (undo-tree-id4025 . -5) (undo-tree-id4026 . -5) (undo-tree-id4027 . -5) (undo-tree-id4028 . -5) (undo-tree-id4029 . -5) (undo-tree-id4030 . -5) (undo-tree-id4031 . -5) (undo-tree-id4032 . -5) (undo-tree-id4033 . -5) (undo-tree-id4034 . -5) (undo-tree-id4035 . -5) (undo-tree-id4036 . -5) (undo-tree-id4037 . -5) (undo-tree-id4038 . -5) (undo-tree-id4039 . -5) (undo-tree-id4040 . -5) (undo-tree-id4041 . -5) (undo-tree-id4042 . -5) (undo-tree-id4043 . -5) (undo-tree-id4044 . -5) (undo-tree-id4045 . -5) (undo-tree-id4046 . -5) (undo-tree-id4047 . -5) (undo-tree-id4048 . -5) (undo-tree-id4049 . -5) (undo-tree-id4050 . -5) (undo-tree-id4051 . -5) (undo-tree-id4052 . -5) (undo-tree-id4053 . -5) 645) nil (26039 51716 819296 580000) 0 nil])
([nil nil ((#("UnitQuaternion::" 0 14 (face font-lock-type-face fontified t) 14 16 (fontified t)) . -624) (undo-tree-id3892 . -16) (undo-tree-id3893 . -16) (undo-tree-id3894 . -14) (undo-tree-id3895 . -14) (undo-tree-id3896 . -14) (undo-tree-id3897 . -15) (undo-tree-id3898 . -15) (undo-tree-id3899 . -16) (undo-tree-id3900 . -16) (undo-tree-id3901 . -16) (undo-tree-id3902 . -16) (undo-tree-id3903 . -16) (undo-tree-id3904 . -16) (undo-tree-id3905 . -16) (undo-tree-id3906 . -16) (undo-tree-id3907 . -16) (undo-tree-id3908 . -16) (undo-tree-id3909 . -16) (undo-tree-id3910 . -16) (undo-tree-id3911 . -16) (undo-tree-id3912 . -16) (undo-tree-id3913 . -16) (undo-tree-id3914 . -16) (undo-tree-id3915 . -16) (undo-tree-id3916 . -16) (undo-tree-id3917 . -16) (undo-tree-id3918 . -16) (undo-tree-id3919 . -16) (undo-tree-id3920 . -16) (undo-tree-id3921 . -16) (undo-tree-id3922 . -16) (undo-tree-id3923 . -16) (undo-tree-id3924 . -16) (undo-tree-id3925 . -16) (undo-tree-id3926 . -16) (undo-tree-id3927 . -16) (undo-tree-id3928 . -16) (undo-tree-id3929 . -16) (undo-tree-id3930 . -16) (undo-tree-id3931 . -16) (undo-tree-id3932 . -16) (undo-tree-id3933 . -16) (undo-tree-id3934 . -16) (undo-tree-id3935 . -16) (undo-tree-id3936 . -16) (undo-tree-id3937 . -16) (undo-tree-id3938 . -16) (undo-tree-id3939 . -16) (undo-tree-id3940 . -16) (undo-tree-id3941 . -16) (undo-tree-id3942 . -16) (undo-tree-id3943 . -16) (undo-tree-id3944 . -16) (undo-tree-id3945 . -16) (undo-tree-id3946 . -16) (undo-tree-id3947 . -16) (undo-tree-id3948 . -16) (undo-tree-id3949 . -16) (undo-tree-id3950 . -16) (undo-tree-id3951 . -16) (undo-tree-id3952 . -16) (undo-tree-id3953 . -16) (undo-tree-id3954 . -16) (undo-tree-id3955 . -16) (undo-tree-id3956 . -16) (undo-tree-id3957 . -16) (undo-tree-id3958 . -16) (undo-tree-id3959 . -16) (undo-tree-id3960 . -16) (undo-tree-id3961 . -16) (undo-tree-id3962 . -16) (undo-tree-id3963 . -16) (undo-tree-id3964 . -16) (undo-tree-id3965 . -16) (undo-tree-id3966 . -16) (undo-tree-id3967 . -16) (undo-tree-id3968 . -16) (undo-tree-id3969 . -16) (undo-tree-id3970 . -16) (undo-tree-id3971 . -16) (undo-tree-id3972 . -16) (undo-tree-id3973 . -16) (undo-tree-id3974 . -16) (undo-tree-id3975 . -16) (undo-tree-id3976 . -16) (undo-tree-id3977 . -16) (undo-tree-id3978 . -16) (undo-tree-id3979 . -16) (undo-tree-id3980 . -16) (undo-tree-id3981 . -16) (undo-tree-id3982 . -16) (undo-tree-id3983 . -16) 640) nil (26039 51716 818294 234000) 0 nil])
([nil nil ((624 . 625)) nil (26039 51716 818230 553000) 0 nil])
([nil nil ((624 . 627) (#("s" 0 1 (fontified nil)) . 624) (624 . 625) (#("so3" 0 3 (fontified nil)) . -624) (624 . 627) (#("s" 0 1 (fontified t)) . -624) (undo-tree-id3888 . -1) (undo-tree-id3889 . -1) (undo-tree-id3890 . -1) (undo-tree-id3891 . -1) 625) nil (26039 51716 818229 294000) 0 nil])
([nil nil ((627 . 628)) nil (26039 51716 818224 743000) 0 nil])
([nil nil ((628 . 636) (#("rotation" 0 8 (fontified nil)) . -628) (628 . 636)) nil (26039 51716 818223 980000) 0 nil])
([nil nil ((636 . 638)) nil (26039 51716 818223 57000) 0 nil])
([nil nil ((apply yas--snippet-revive 637 643 #s(yas--snippet nil nil #s(yas--exit 643 nil) 80 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 643 nil) 80 nil nil nil nil)) (637 . 643) (#("cast()$0" 0 8 (fontified nil)) . 637) (637 . 645) (#("c" 0 1 (fontified nil)) . 637) (637 . 638) (#("cast()" 0 6 (fontified nil)) . -637) (637 . 643) (#("c" 0 1 (fontified t)) . -637) (undo-tree-id3882 . -1) (undo-tree-id3883 . -1) (undo-tree-id3884 . -1) (undo-tree-id3885 . -1) (undo-tree-id3886 . -1) (undo-tree-id3887 . -1) 638) nil (26039 51716 818221 523000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -638) (undo-tree-id3842 . -1) (undo-tree-id3843 . -1) (undo-tree-id3844 . -1) (undo-tree-id3845 . -1) (undo-tree-id3846 . -1) (undo-tree-id3847 . -1) (undo-tree-id3848 . -1) (undo-tree-id3849 . -1) (undo-tree-id3850 . -1) (undo-tree-id3851 . -1) (undo-tree-id3852 . -1) (undo-tree-id3853 . -1) (#("s" 0 1 (fontified t)) . -639) (undo-tree-id3854 . -1) (undo-tree-id3855 . -1) (undo-tree-id3856 . -1) (undo-tree-id3857 . -1) (undo-tree-id3858 . -1) (undo-tree-id3859 . -1) (undo-tree-id3860 . -1) (undo-tree-id3861 . -1) (undo-tree-id3862 . -1) (undo-tree-id3863 . -1) (#("t" 0 1 (fontified t)) . -640) (undo-tree-id3864 . -1) (undo-tree-id3865 . -1) (undo-tree-id3866 . -1) (undo-tree-id3867 . -1) (undo-tree-id3868 . -1) (undo-tree-id3869 . -1) (undo-tree-id3870 . -1) (undo-tree-id3871 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -641) (undo-tree-id3872 . -1) (undo-tree-id3873 . -1) (undo-tree-id3874 . -1) (undo-tree-id3875 . -1) (undo-tree-id3876 . -1) (undo-tree-id3877 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -642) (undo-tree-id3878 . -1) (undo-tree-id3879 . -1) (undo-tree-id3880 . -1) (undo-tree-id3881 . -1) 643) nil (26039 51716 818213 443000) 0 nil])
([nil nil ((638 . 640)) nil (26039 51716 818183 972000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -638) (undo-tree-id3827 . -1) (undo-tree-id3828 . -1) (undo-tree-id3829 . -1) (undo-tree-id3830 . -1) (undo-tree-id3831 . -1) (undo-tree-id3832 . -1) (undo-tree-id3833 . -1) (undo-tree-id3834 . -1) (undo-tree-id3835 . -1) (undo-tree-id3836 . -1) (#("l" 0 1 (fontified t)) . -639) (undo-tree-id3837 . -1) (undo-tree-id3838 . -1) (undo-tree-id3839 . -1) (undo-tree-id3840 . -1) (undo-tree-id3841 . -1) 640) nil (26039 51716 818182 380000) 0 nil])
([nil nil ((638 . 639)) nil (26039 51716 818171 200000) 0 nil])
([nil nil ((apply yas--snippet-revive 637 644 #s(yas--snippet nil nil #s(yas--exit 644 nil) 81 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 644 nil) 81 nil nil nil nil)) (637 . 644) (#("clone()$0" 0 9 (fontified nil)) . 637) (637 . 646) (#("cl" 0 2 (fontified nil)) . 637) (637 . 639) (#("clone() (as Clone)" 0 18 (fontified nil)) . -637) (637 . 655) (#("cl" 0 2 (fontified t)) . -637) (undo-tree-id3797 . -2) (undo-tree-id3798 . -1) (undo-tree-id3799 . -1) (undo-tree-id3800 . -1) (undo-tree-id3801 . -1) (undo-tree-id3802 . -1) (undo-tree-id3803 . -1) (undo-tree-id3804 . -1) (undo-tree-id3805 . -1) (undo-tree-id3806 . -1) (undo-tree-id3807 . -1) (undo-tree-id3808 . -1) (undo-tree-id3809 . -1) (undo-tree-id3810 . -1) (undo-tree-id3811 . -1) (undo-tree-id3812 . -1) (undo-tree-id3813 . -1) (undo-tree-id3814 . -1) (undo-tree-id3815 . -1) (undo-tree-id3816 . -1) (undo-tree-id3817 . -1) (undo-tree-id3818 . -1) (undo-tree-id3819 . -1) (undo-tree-id3820 . -1) (undo-tree-id3821 . -1) (undo-tree-id3822 . -2) (undo-tree-id3823 . -2) (undo-tree-id3824 . -2) (undo-tree-id3825 . -2) (undo-tree-id3826 . -2) 639) nil (26039 51716 818167 95000) 0 nil])
([nil nil ((644 . 645)) nil (26039 51862 219752 418000) 0 nil])
([nil nil ((121 . 123) (t 26039 51863 65660 485000)) nil (26039 52009 352637 399000) 0 nil] [nil nil ((#("/" 0 1 (fontified t)) . -142) (undo-tree-id4242 . -1) (undo-tree-id4243 . -1) (undo-tree-id4244 . -1) (undo-tree-id4245 . -1) (undo-tree-id4246 . -1) (undo-tree-id4247 . -1) (undo-tree-id4248 . -1) (undo-tree-id4249 . -1) (undo-tree-id4250 . -1) (undo-tree-id4251 . -1) (undo-tree-id4252 . -1) (undo-tree-id4253 . -1) (undo-tree-id4254 . -1) (undo-tree-id4255 . -1) (undo-tree-id4256 . -1) (undo-tree-id4257 . -1) (undo-tree-id4258 . -1) (undo-tree-id4259 . -1) (undo-tree-id4260 . -1) (undo-tree-id4261 . -1) (#("2" 0 1 (fontified t)) . -143) (undo-tree-id4262 . -1) (undo-tree-id4263 . -1) (undo-tree-id4264 . -1) (undo-tree-id4265 . -1) (undo-tree-id4266 . -1) (undo-tree-id4267 . -1) (undo-tree-id4268 . -1) (undo-tree-id4269 . -1) (undo-tree-id4270 . -1) (undo-tree-id4271 . -1) (undo-tree-id4272 . -1) (undo-tree-id4273 . -1) (undo-tree-id4274 . -1) (undo-tree-id4275 . -1) (undo-tree-id4276 . -1) (undo-tree-id4277 . -1) (undo-tree-id4278 . -1) (undo-tree-id4279 . -1) (#("." 0 1 (fontified t)) . -144) (undo-tree-id4280 . -1) (undo-tree-id4281 . -1) (undo-tree-id4282 . -1) (undo-tree-id4283 . -1) (undo-tree-id4284 . -1) (undo-tree-id4285 . -1) (undo-tree-id4286 . -1) (undo-tree-id4287 . -1) (undo-tree-id4288 . -1) (undo-tree-id4289 . -1) (undo-tree-id4290 . -1) (undo-tree-id4291 . -1) (undo-tree-id4292 . -1) (undo-tree-id4293 . -1) (undo-tree-id4294 . -1) (undo-tree-id4295 . -1) (#("0" 0 1 (fontified t)) . -145) (undo-tree-id4296 . -1) (undo-tree-id4297 . -1) (undo-tree-id4298 . -1) (undo-tree-id4299 . -1) (undo-tree-id4300 . -1) (undo-tree-id4301 . -1) (undo-tree-id4302 . -1) (undo-tree-id4303 . -1) (undo-tree-id4304 . -1) (undo-tree-id4305 . -1) (undo-tree-id4306 . -1) (undo-tree-id4307 . -1) (undo-tree-id4308 . -1) (undo-tree-id4309 . -1) 146 (t 26039 51716 835668 888000)) ((142 . 146) (t 26039 51853 372327 707000)) (26039 51853 353564 36000) 0 nil])
([nil nil ((165 . 170)) nil (26039 52009 352636 300000) 0 nil])
nil
([nil nil ((170 . 181)) nil (26039 52009 352635 632000) 0 nil])
([nil nil ((180 . 183) (#("S" 0 1 (fontified nil)) . 180) (180 . 181) (#("SO3" 0 3 (fontified nil)) . -180) (180 . 183) (#("S" 0 1 (face font-lock-type-face fontified t)) . -180) (undo-tree-id4501 . -1) (undo-tree-id4502 . -1) (undo-tree-id4503 . -1) (undo-tree-id4504 . -1) (undo-tree-id4505 . -1) (undo-tree-id4506 . -1) 181) nil (26039 52009 352634 385000) 0 nil])
([nil nil ((183 . 186)) nil (26039 52009 352518 555000) 0 nil])
([nil nil ((185 . 186)) nil (26039 52009 352517 898000) 0 nil])
([nil nil ((185 . 193) (#("r" 0 1 (fontified nil)) . 185) (185 . 186) (#("rotation" 0 8 (fontified nil)) . -185) (185 . 193) (#("r" 0 1 (fontified t)) . -185) (undo-tree-id4495 . -1) (undo-tree-id4496 . -1) (undo-tree-id4497 . -1) (undo-tree-id4498 . -1) (undo-tree-id4499 . -1) (undo-tree-id4500 . -1) 186) nil (26039 52009 352516 669000) 0 nil])
([nil nil ((193 . 196)) nil (26039 52009 352511 327000) 0 nil])
([nil nil ((195 . 209) (#("U" 0 1 (fontified nil)) . 195) (195 . 196) (#("UnitQuaternion" 0 14 (fontified nil)) . -195) (195 . 209) (#("U" 0 1 (face font-lock-type-face fontified t)) . -195) (undo-tree-id4488 . -1) (undo-tree-id4489 . -1) (undo-tree-id4490 . -1) (undo-tree-id4491 . -1) (undo-tree-id4492 . -1) (undo-tree-id4493 . -1) (undo-tree-id4494 . -1) 196) nil (26039 52009 352510 5000) 0 nil])
([nil nil ((209 . 215)) nil (26039 52009 352504 39000) 0 nil])
([nil nil ((211 . 226) (#("from" 0 4 (fontified nil)) . 211) (211 . 215) (#("from_axis_angle" 0 15 (fontified nil)) . -211) (211 . 226) (#("from" 0 4 (fontified t)) . -211) (undo-tree-id4470 . -4) (undo-tree-id4471 . -4) (undo-tree-id4472 . -1) (undo-tree-id4473 . -1) (undo-tree-id4474 . -1) (undo-tree-id4475 . -2) (undo-tree-id4476 . -2) (undo-tree-id4477 . -3) (undo-tree-id4478 . -3) (undo-tree-id4479 . -4) (undo-tree-id4480 . -4) (undo-tree-id4481 . -4) (undo-tree-id4482 . -4) (undo-tree-id4483 . -4) (undo-tree-id4484 . -4) (undo-tree-id4485 . -4) (undo-tree-id4486 . -4) (undo-tree-id4487 . -4) 215) nil (26039 52009 352502 358000) 0 nil])
([nil nil ((226 . 228)) nil (26039 52009 352410 983000) 0 nil])
([nil nil ((227 . 228)) nil (26039 52009 352410 391000) 0 nil])
([nil nil ((227 . 234) (#("V" 0 1 (fontified nil)) . 227) (227 . 228) (#("Vector3" 0 7 (fontified nil)) . -227) (227 . 234) (#("V" 0 1 (face font-lock-type-face fontified t)) . -227) (undo-tree-id4455 . -1) (undo-tree-id4456 . -1) (undo-tree-id4457 . -1) (undo-tree-id4458 . -1) (undo-tree-id4459 . -1) (undo-tree-id4460 . -1) (undo-tree-id4461 . -1) (undo-tree-id4462 . -1) (undo-tree-id4463 . -1) (undo-tree-id4464 . -1) (undo-tree-id4465 . -1) (undo-tree-id4466 . -1) (undo-tree-id4467 . -1) (undo-tree-id4468 . -1) (undo-tree-id4469 . -1) 228) nil (26039 52009 352408 986000) 0 nil])
([nil nil ((234 . 239)) nil (26039 52009 352396 880000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -234) (undo-tree-id4389 . -1) (undo-tree-id4390 . -1) (undo-tree-id4391 . -1) (undo-tree-id4392 . -1) (undo-tree-id4393 . -1) (undo-tree-id4394 . -1) (undo-tree-id4395 . -1) (undo-tree-id4396 . -1) (undo-tree-id4397 . -1) (undo-tree-id4398 . -1) (undo-tree-id4399 . -1) (undo-tree-id4400 . -1) (undo-tree-id4401 . -1) (undo-tree-id4402 . -1) (undo-tree-id4403 . -1) (undo-tree-id4404 . -1) (undo-tree-id4405 . -1) (undo-tree-id4406 . -1) (undo-tree-id4407 . -1) (undo-tree-id4408 . -1) (undo-tree-id4409 . -1) (undo-tree-id4410 . -1) (undo-tree-id4411 . -1) (#(":" 0 1 (fontified t)) . -235) (undo-tree-id4412 . -1) (undo-tree-id4413 . -1) (undo-tree-id4414 . -1) (undo-tree-id4415 . -1) (undo-tree-id4416 . -1) (undo-tree-id4417 . -1) (undo-tree-id4418 . -1) (undo-tree-id4419 . -1) (undo-tree-id4420 . -1) (undo-tree-id4421 . -1) (undo-tree-id4422 . -1) (undo-tree-id4423 . -1) (undo-tree-id4424 . -1) (undo-tree-id4425 . -1) (undo-tree-id4426 . -1) (undo-tree-id4427 . -1) (undo-tree-id4428 . -1) (undo-tree-id4429 . -1) (undo-tree-id4430 . -1) (#("n" 0 1 (fontified t)) . -236) (undo-tree-id4431 . -1) (undo-tree-id4432 . -1) (undo-tree-id4433 . -1) (undo-tree-id4434 . -1) (undo-tree-id4435 . -1) (undo-tree-id4436 . -1) (undo-tree-id4437 . -1) (undo-tree-id4438 . -1) (undo-tree-id4439 . -1) (undo-tree-id4440 . -1) (undo-tree-id4441 . -1) (undo-tree-id4442 . -1) (#("e" 0 1 (fontified t)) . -237) (undo-tree-id4443 . -1) (undo-tree-id4444 . -1) (undo-tree-id4445 . -1) (undo-tree-id4446 . -1) (undo-tree-id4447 . -1) (undo-tree-id4448 . -1) (undo-tree-id4449 . -1) (undo-tree-id4450 . -1) (#("w" 0 1 (fontified t)) . -238) (undo-tree-id4451 . -1) (undo-tree-id4452 . -1) (undo-tree-id4453 . -1) (undo-tree-id4454 . -1) 239) nil (26039 52009 352393 540000) 0 nil])
([nil nil ((234 . 239)) nil (26039 52009 352347 370000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 240 243 nil nil nil t #s(yas--field 2 245 246 nil nil nil nil #s(yas--field 3 248 249 nil nil nil nil #s(yas--exit 250 nil)))) #s(yas--field 2 245 246 nil nil nil nil #s(yas--field 3 248 249 nil nil nil nil #s(yas--exit 250 nil))) #s(yas--field 3 248 249 nil nil nil nil #s(yas--exit 250 nil))) #s(yas--exit 250 nil) 82 nil #s(yas--field 1 240 243 nil nil nil t #s(yas--field 2 245 246 nil nil nil nil #s(yas--field 3 248 249 nil nil nil nil #s(yas--exit 250 nil)))) nil nil)) (236 . 248) (#("new(${1:x}, ${2:y}, ${3:z})$0" 0 29 (fontified nil)) . 236) (236 . 265) (#("new" 0 3 (fontified nil)) . 236) (236 . 239) (#("new(…)" 0 6 (fontified nil)) . -236) (236 . 242) (#("new" 0 3 (fontified t)) . -236) (undo-tree-id4377 . -3) (undo-tree-id4378 . -3) (undo-tree-id4379 . -1) (undo-tree-id4380 . -1) (undo-tree-id4381 . -2) (undo-tree-id4382 . -2) (undo-tree-id4383 . -3) (undo-tree-id4384 . -3) (undo-tree-id4385 . -3) (undo-tree-id4386 . -3) (undo-tree-id4387 . -3) (undo-tree-id4388 . -3) 239) nil (26039 52009 352345 840000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -240) (undo-tree-id4369 . -1) (undo-tree-id4370 . -1) (undo-tree-id4371 . -1) (undo-tree-id4372 . -1) (undo-tree-id4373 . -1) (undo-tree-id4374 . -1) (undo-tree-id4375 . -1) (undo-tree-id4376 . -1) 241) nil (26039 52009 352335 902000) 0 nil])
([nil nil ((240 . 243)) nil (26039 52009 352328 890000) 0 nil])
([nil nil ((apply yas--snippet-revive 236 250 #s(yas--snippet nil (#s(yas--field 1 240 243 nil nil nil t #s(yas--field 2 245 246 nil nil nil nil #s(yas--field 3 248 249 nil nil nil nil #s(yas--exit 250 nil)))) #s(yas--field 2 245 246 nil nil nil nil #s(yas--field 3 248 249 nil nil nil nil #s(yas--exit 250 nil))) #s(yas--field 3 248 249 nil nil nil nil #s(yas--exit 250 nil))) #s(yas--exit 250 nil) 82 nil #s(yas--field 1 240 243 nil nil nil t #s(yas--field 2 245 246 nil nil nil nil #s(yas--field 3 248 249 nil nil nil nil #s(yas--exit 250 nil)))) nil nil))) nil (26039 52009 352328 326000) 0 nil])
([nil nil ((246 . 247)) nil (26039 52009 352327 708000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -245) (undo-tree-id4358 . -1) (undo-tree-id4359 . -1) (undo-tree-id4360 . -1) (undo-tree-id4361 . -1) (undo-tree-id4362 . -1) (undo-tree-id4363 . -1) (undo-tree-id4364 . -1) (#("0" 0 1 (fontified t)) . -246) (undo-tree-id4365 . -1) (undo-tree-id4366 . -1) (undo-tree-id4367 . -1) (undo-tree-id4368 . -1) 247) nil (26039 52009 352326 488000) 0 nil])
([nil nil ((245 . 248)) nil (26039 52009 352318 407000) 0 nil])
([nil nil ((#("z" 0 1 (fontified t)) . -250) (undo-tree-id4355 . -1) (undo-tree-id4356 . -1) (undo-tree-id4357 . -1) 251) nil (26039 52009 352317 521000) 0 nil])
([nil nil ((250 . 253)) nil (26039 52009 352314 299000) 0 nil])
([nil nil ((254 . 255)) nil (26039 52009 352313 544000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -254) (undo-tree-id4348 . -1) (undo-tree-id4349 . -1) (undo-tree-id4350 . -1) (undo-tree-id4351 . -1) (undo-tree-id4352 . -1) (undo-tree-id4353 . -1) (undo-tree-id4354 . -1) 255) nil (26039 52009 352312 604000) 0 nil])
([nil nil ((254 . 256)) nil (26039 52009 352305 691000) 0 nil])
([nil nil ((256 . 257)) nil (26039 52009 352305 118000) 0 nil])
([nil nil ((#("O" 0 1 (face font-lock-type-face fontified t)) . -256) (undo-tree-id4338 . -1) (undo-tree-id4339 . -1) (undo-tree-id4340 . -1) (undo-tree-id4341 . -1) (undo-tree-id4342 . -1) (undo-tree-id4343 . -1) (undo-tree-id4344 . -1) (undo-tree-id4345 . -1) (undo-tree-id4346 . -1) (undo-tree-id4347 . -1) 257) nil (26039 52009 352304 37000) 0 nil])
([nil nil ((256 . 257)) nil (26039 52009 352296 188000) 0 nil])
([nil nil ((256 . 258) (#("P" 0 1 (fontified nil)) . 256) (256 . 257) (#("PI" 0 2 (fontified nil)) . -256) (256 . 258) (#("P" 0 1 (face font-lock-type-face fontified t)) . -256) (undo-tree-id4328 . -1) (undo-tree-id4329 . -1) (undo-tree-id4330 . -1) (undo-tree-id4331 . -1) (undo-tree-id4332 . -1) (undo-tree-id4333 . -1) (undo-tree-id4334 . -1) (undo-tree-id4335 . -1) (undo-tree-id4336 . -1) (undo-tree-id4337 . -1) 257) nil (26039 52009 352294 727000) 0 nil])
([nil nil ((258 . 262)) nil (26039 52009 352286 369000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -260) (undo-tree-id4310 . -1) (undo-tree-id4311 . -1) (undo-tree-id4312 . -1) (undo-tree-id4313 . -1) (undo-tree-id4314 . -1) (undo-tree-id4315 . -1) (undo-tree-id4316 . -1) (undo-tree-id4317 . -1) (undo-tree-id4318 . -1) (undo-tree-id4319 . -1) (undo-tree-id4320 . -1) (undo-tree-id4321 . -1) (#("." 0 1 (fontified t)) . -261) (undo-tree-id4322 . -1) (undo-tree-id4323 . -1) (undo-tree-id4324 . -1) (undo-tree-id4325 . -1) (undo-tree-id4326 . -1) (undo-tree-id4327 . -1) 262) nil (26039 52009 352284 93000) 0 nil])
([nil nil ((260 . 262)) nil (26039 52009 352263 668000) 0 nil])
([nil nil ((264 . 265)) nil (26039 52009 352259 114000) 0 nil])
([nil nil ((227 . 228) (t 26039 52009 398985 413000)) nil (26039 52046 107895 228000) 0 nil])
([nil nil ((227 . 228)) nil (26039 52046 107894 490000) 0 nil])
([nil nil ((227 . 231) (#("U" 0 1 (fontified nil)) . 227) (227 . 228) (#("Unit" 0 4 (fontified nil)) . -227) (227 . 231) (#("U" 0 1 (face font-lock-type-face fontified t)) . -227) (undo-tree-id4653 . -1) (undo-tree-id4654 . -1) (undo-tree-id4655 . -1) (undo-tree-id4656 . -1) (undo-tree-id4657 . -1) (undo-tree-id4658 . -1) (undo-tree-id4659 . -1) (undo-tree-id4660 . -1) 228) nil (26039 52046 107893 223000) 0 nil])
([nil nil ((231 . 236)) nil (26039 52046 107886 722000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 247 252 nil nil nil nil #s(yas--exit 253 nil))) #s(yas--exit 253 nil) 83 nil #s(yas--field 1 247 252 nil nil nil nil #s(yas--exit 253 nil)) nil nil)) (233 . 253) (#("new_normalize(${1:value})$0" 0 27 (fontified nil)) . 233) (233 . 260) (#("new" 0 3 (fontified nil)) . 233) (233 . 236) (#("new_normalize(…)" 0 16 (fontified nil)) . -233) (233 . 249) (#("new" 0 3 (fontified t)) . -233) (undo-tree-id4641 . -3) (undo-tree-id4642 . -1) (undo-tree-id4643 . -1) (undo-tree-id4644 . -1) (undo-tree-id4645 . -1) (undo-tree-id4646 . -2) (undo-tree-id4647 . -2) (undo-tree-id4648 . -3) (undo-tree-id4649 . -3) (undo-tree-id4650 . -3) (undo-tree-id4651 . -3) (undo-tree-id4652 . -3) 236) nil (26039 52046 107884 921000) 0 nil])
([nil nil ((apply yas--snippet-revive 233 253 #s(yas--snippet nil (#s(yas--field 1 247 252 nil nil nil nil #s(yas--exit 253 nil))) #s(yas--exit 253 nil) 83 nil #s(yas--field 1 247 252 nil nil nil nil #s(yas--exit 253 nil)) nil nil))) nil (26039 52046 107874 450000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t)) . -247) (undo-tree-id4507 . -1) (undo-tree-id4508 . -1) (undo-tree-id4509 . -1) (undo-tree-id4510 . -1) (undo-tree-id4511 . -1) (undo-tree-id4512 . -1) (undo-tree-id4513 . -1) (undo-tree-id4514 . -1) (undo-tree-id4515 . -1) (undo-tree-id4516 . -1) (undo-tree-id4517 . -1) (undo-tree-id4518 . -1) (undo-tree-id4519 . -1) (undo-tree-id4520 . -1) (undo-tree-id4521 . -1) (undo-tree-id4522 . -1) (undo-tree-id4523 . -1) (undo-tree-id4524 . -1) (undo-tree-id4525 . -1) (undo-tree-id4526 . -1) (undo-tree-id4527 . -1) (undo-tree-id4528 . -1) (undo-tree-id4529 . -1) (undo-tree-id4530 . -1) (undo-tree-id4531 . -1) (undo-tree-id4532 . -1) (undo-tree-id4533 . -1) (undo-tree-id4534 . -1) (undo-tree-id4535 . -1) (undo-tree-id4536 . -1) (undo-tree-id4537 . -1) (#("a" 0 1 (fontified t)) . -248) (undo-tree-id4538 . -1) (undo-tree-id4539 . -1) (undo-tree-id4540 . -1) (undo-tree-id4541 . -1) (undo-tree-id4542 . -1) (undo-tree-id4543 . -1) (undo-tree-id4544 . -1) (undo-tree-id4545 . -1) (undo-tree-id4546 . -1) (undo-tree-id4547 . -1) (undo-tree-id4548 . -1) (undo-tree-id4549 . -1) (undo-tree-id4550 . -1) (undo-tree-id4551 . -1) (undo-tree-id4552 . -1) (undo-tree-id4553 . -1) (undo-tree-id4554 . -1) (undo-tree-id4555 . -1) (undo-tree-id4556 . -1) (undo-tree-id4557 . -1) (undo-tree-id4558 . -1) (undo-tree-id4559 . -1) (undo-tree-id4560 . -1) (undo-tree-id4561 . -1) (undo-tree-id4562 . -1) (undo-tree-id4563 . -1) (#("l" 0 1 (fontified t)) . -249) (undo-tree-id4564 . -1) (undo-tree-id4565 . -1) (undo-tree-id4566 . -1) (undo-tree-id4567 . -1) (undo-tree-id4568 . -1) (undo-tree-id4569 . -1) (undo-tree-id4570 . -1) (undo-tree-id4571 . -1) (undo-tree-id4572 . -1) (undo-tree-id4573 . -1) (undo-tree-id4574 . -1) (undo-tree-id4575 . -1) (undo-tree-id4576 . -1) (undo-tree-id4577 . -1) (undo-tree-id4578 . -1) (undo-tree-id4579 . -1) (undo-tree-id4580 . -1) (undo-tree-id4581 . -1) (undo-tree-id4582 . -1) (undo-tree-id4583 . -1) (undo-tree-id4584 . -1) (undo-tree-id4585 . -1) (undo-tree-id4586 . -1) (#("u" 0 1 (fontified t)) . -250) (undo-tree-id4587 . -1) (undo-tree-id4588 . -1) (undo-tree-id4589 . -1) (undo-tree-id4590 . -1) (undo-tree-id4591 . -1) (undo-tree-id4592 . -1) (undo-tree-id4593 . -1) (undo-tree-id4594 . -1) (undo-tree-id4595 . -1) (undo-tree-id4596 . -1) (undo-tree-id4597 . -1) (undo-tree-id4598 . -1) (undo-tree-id4599 . -1) (undo-tree-id4600 . -1) (undo-tree-id4601 . -1) (undo-tree-id4602 . -1) (undo-tree-id4603 . -1) (undo-tree-id4604 . -1) (undo-tree-id4605 . -1) (undo-tree-id4606 . -1) (#("e" 0 1 (fontified t)) . -251) (undo-tree-id4607 . -1) (undo-tree-id4608 . -1) (undo-tree-id4609 . -1) (undo-tree-id4610 . -1) (undo-tree-id4611 . -1) (undo-tree-id4612 . -1) (undo-tree-id4613 . -1) (undo-tree-id4614 . -1) (undo-tree-id4615 . -1) (undo-tree-id4616 . -1) (undo-tree-id4617 . -1) (undo-tree-id4618 . -1) (undo-tree-id4619 . -1) (undo-tree-id4620 . -1) (undo-tree-id4621 . -1) (undo-tree-id4622 . -1) (undo-tree-id4623 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -252) (undo-tree-id4624 . -1) (undo-tree-id4625 . -1) (undo-tree-id4626 . -1) (undo-tree-id4627 . -1) (undo-tree-id4628 . -1) (undo-tree-id4629 . -1) (undo-tree-id4630 . -1) (undo-tree-id4631 . -1) (undo-tree-id4632 . -1) (undo-tree-id4633 . -1) (undo-tree-id4634 . -1) (undo-tree-id4635 . -1) (#(" " 0 1 (fontified t)) . -253) (undo-tree-id4636 . -1) (undo-tree-id4637 . -1) (undo-tree-id4638 . -1) (undo-tree-id4639 . -1) (undo-tree-id4640 . -1) 254) nil (26039 52046 107866 370000) 0 nil])
([nil nil ((274 . 275)) nil (26039 52046 107374 323000) 0 nil])
([nil nil ((227 . 228) (t 26039 52046 122316 637000)) nil (26039 52055 974340 203000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -280) (undo-tree-id4661 . -1) (undo-tree-id4662 . -1) (undo-tree-id4663 . -1) (undo-tree-id4664 . -1) (undo-tree-id4665 . -1) (undo-tree-id4666 . -1) (undo-tree-id4667 . -1) (undo-tree-id4668 . -1) (undo-tree-id4669 . -1) (undo-tree-id4670 . -1) (undo-tree-id4671 . -1) (#("2" 0 1 (fontified t)) . -281) (undo-tree-id4672 . -1) (undo-tree-id4673 . -1) (undo-tree-id4674 . -1) (undo-tree-id4675 . -1) (undo-tree-id4676 . -1) (undo-tree-id4677 . -1) (undo-tree-id4678 . -1) (undo-tree-id4679 . -1) (undo-tree-id4680 . -1) (#("." 0 1 (fontified t)) . -282) (undo-tree-id4681 . -1) (undo-tree-id4682 . -1) (undo-tree-id4683 . -1) (undo-tree-id4684 . -1) (undo-tree-id4685 . -1) (undo-tree-id4686 . -1) (#("0" 0 1 (fontified t)) . -283) (undo-tree-id4687 . -1) (undo-tree-id4688 . -1) (undo-tree-id4689 . -1) 284 (t 26039 52055 988982 736000)) nil (26039 52070 215662 689000) 0 nil])
([nil nil ((280 . 284) (t 26039 52070 265648 584000)) nil (26039 52125 734128 665000) 0 nil])
([nil nil ((170 . 172) (t 26039 52125 752312 62000)) nil (26039 52356 331727 477000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -121) (undo-tree-id4789 . -1) (undo-tree-id4790 . -1) (undo-tree-id4791 . -1) (undo-tree-id4792 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -122) (undo-tree-id4793 . -1) 123) nil (26039 52356 331726 250000) 0 nil])
([nil nil ((#("new(PI/2.0, 0.0, 0.0, 1.0);" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-2-face) fontified t) 4 6 (face font-lock-type-face fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 15 (fontified t) 15 20 (fontified t) 20 25 (fontified t) 25 26 (face (rainbow-delimiters-depth-2-face) fontified t) 26 27 (fontified t)) . 136) (undo-tree-id4785 . -4) (undo-tree-id4786 . -22) (undo-tree-id4787 . -10) (undo-tree-id4788 . -27)) nil (26039 52356 331721 830000) 0 nil])
([nil nil ((136 . 138)) nil (26039 52356 331718 737000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 136 136 nil nil nil t #s(yas--exit 137 nil))) #s(yas--exit 137 nil) 88 nil #s(yas--field 1 136 136 nil nil nil t #s(yas--exit 137 nil)) nil nil)) (136 . 147) (#("from(${1:value})$0" 0 18 (fontified nil)) . 136) (136 . 154) (#("fr" 0 2 (fontified nil)) . 136) (136 . 138) (#("from(…) (as From)" 0 17 (fontified nil)) . -136) (136 . 153) (#("fr" 0 2 (fontified t)) . -136) (undo-tree-id4780 . -2) (undo-tree-id4781 . -1) (undo-tree-id4782 . -1) (undo-tree-id4783 . -2) (undo-tree-id4784 . -2) 138) nil (26039 52356 331717 348000) 0 nil])
([nil nil ((#("from(" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-2-face) fontified t)) . -136) (undo-tree-id4768 . -5) (undo-tree-id4769 . -5) (undo-tree-id4770 . -5) (undo-tree-id4771 . -5) (undo-tree-id4772 . -5) (undo-tree-id4773 . -5) (undo-tree-id4774 . -5) (undo-tree-id4775 . -5) (undo-tree-id4776 . -5) (undo-tree-id4777 . -5) (undo-tree-id4778 . -5) (undo-tree-id4779 . -5) 141) nil (26039 52356 331711 608000) 0 nil])
([nil nil ((#("value" 0 5 (fontified t)) . -136) (undo-tree-id4765 . -5) (undo-tree-id4766 . -5) (undo-tree-id4767 . -5) 141) nil (26039 52356 331702 291000) 0 nil])
([nil nil ((apply yas--snippet-revive 136 137 #s(yas--snippet nil (#s(yas--field 1 136 136 nil nil nil t #s(yas--exit 137 nil))) #s(yas--exit 137 nil) 88 nil #s(yas--field 1 136 136 nil nil nil t #s(yas--exit 137 nil)) nil nil))) nil (26039 52356 331699 384000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -136) (undo-tree-id4759 . -1) (undo-tree-id4760 . -1) (undo-tree-id4761 . -1) (undo-tree-id4762 . -1) (undo-tree-id4763 . -1) (undo-tree-id4764 . -1) 137) nil (26039 52356 331698 311000) 0 nil])
([nil nil ((136 . 137)) nil (26039 52356 331595 951000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 153 183 nil nil nil t #s(yas--exit 184 nil))) #s(yas--exit 184 nil) 89 nil #s(yas--field 1 153 183 nil nil nil t #s(yas--exit 184 nil)) nil nil)) (136 . 160) (#("from_scaled_axis(${1:vector})$0" 0 31 (fontified nil)) . 136) (136 . 167) (#("f" 0 1 (fontified nil)) . 136) (136 . 137) (#("from_scaled_axis(…)" 0 19 (fontified nil)) . -136) (136 . 155) (#("f" 0 1 (fontified t)) . -136) (undo-tree-id4752 . -1) (undo-tree-id4753 . -1) (undo-tree-id4754 . -1) (undo-tree-id4755 . -1) (undo-tree-id4756 . -1) (undo-tree-id4757 . -1) (undo-tree-id4758 . -1) 137) nil (26039 52356 331594 505000) 0 nil])
([nil nil ((#("vector" 0 6 (fontified nil)) . 154) (undo-tree-id4751 . -6) (153 . 154)) nil (26039 52356 331588 248000) 0 nil])
([nil nil ((153 . 160) (#("V" 0 1 (fontified nil)) . 153) (undo-tree-id4739 . -1) (153 . 154) (#("Vector3" 0 7 (fontified nil)) . -153) (undo-tree-id4740 . -7) (153 . 160) (#("V" 0 1 (face font-lock-type-face fontified t)) . -153) (undo-tree-id4741 . -1) (undo-tree-id4742 . -1) (undo-tree-id4743 . -1) (undo-tree-id4744 . -1) (undo-tree-id4745 . -1) (undo-tree-id4746 . -1) (undo-tree-id4747 . -1) (undo-tree-id4748 . -1) (undo-tree-id4749 . -1) (undo-tree-id4750 . -1) 154) nil (26039 52356 331585 765000) 0 nil])
([nil nil ((160 . 165)) nil (26039 52356 331576 685000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 166 169 nil nil nil t #s(yas--field 2 171 172 nil nil nil nil #s(yas--field 3 174 175 nil nil nil nil #s(yas--exit 176 nil)))) #s(yas--field 2 171 172 nil nil nil nil #s(yas--field 3 174 175 nil nil nil nil #s(yas--exit 176 nil))) #s(yas--field 3 174 175 nil nil nil nil #s(yas--exit 176 nil))) #s(yas--exit 176 nil) 90 nil #s(yas--field 1 166 169 nil nil nil t #s(yas--field 2 171 172 nil nil nil nil #s(yas--field 3 174 175 nil nil nil nil #s(yas--exit 176 nil)))) #s(yas--field 1 153 183 nil nil nil t #s(yas--exit 184 nil)) nil)) (162 . 174) (#("new(${1:x}, ${2:y}, ${3:z})$0" 0 29 (fontified nil)) . 162) (undo-tree-id4716 . -29) (162 . 191) (#("new" 0 3 (fontified nil)) . 162) (undo-tree-id4717 . -3) (162 . 165) (#("new(…)" 0 6 (fontified nil)) . -162) (undo-tree-id4718 . -6) (162 . 168) (#("new" 0 3 (fontified t)) . -162) (undo-tree-id4719 . -3) (undo-tree-id4720 . -3) (undo-tree-id4721 . -3) (undo-tree-id4722 . -1) (undo-tree-id4723 . -1) (undo-tree-id4724 . -1) (undo-tree-id4725 . -1) (undo-tree-id4726 . -1) (undo-tree-id4727 . -2) (undo-tree-id4728 . -2) (undo-tree-id4729 . -3) (undo-tree-id4730 . -3) (undo-tree-id4731 . -3) (undo-tree-id4732 . -3) (undo-tree-id4733 . -3) (undo-tree-id4734 . -3) (undo-tree-id4735 . -3) (undo-tree-id4736 . -3) (undo-tree-id4737 . -3) (undo-tree-id4738 . -3) 165) nil (26039 52356 331574 820000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -166) (undo-tree-id4712 . -1) (undo-tree-id4713 . -1) (undo-tree-id4714 . -1) (undo-tree-id4715 . -1) 167) nil (26039 52356 331558 550000) 0 nil])
([nil nil ((166 . 169)) nil (26039 52356 331555 25000) 0 nil])
([nil nil ((apply yas--snippet-revive 162 176 #s(yas--snippet nil (#s(yas--field 1 166 169 nil nil nil t #s(yas--field 2 171 172 nil nil nil nil #s(yas--field 3 174 175 nil nil nil nil #s(yas--exit 176 nil)))) #s(yas--field 2 171 172 nil nil nil nil #s(yas--field 3 174 175 nil nil nil nil #s(yas--exit 176 nil))) #s(yas--field 3 174 175 nil nil nil nil #s(yas--exit 176 nil))) #s(yas--exit 176 nil) 90 nil #s(yas--field 1 166 169 nil nil nil t #s(yas--field 2 171 172 nil nil nil nil #s(yas--field 3 174 175 nil nil nil nil #s(yas--exit 176 nil)))) #s(yas--field 1 153 183 nil nil nil t #s(yas--exit 184 nil)) nil))) nil (26039 52356 331554 438000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -171) (undo-tree-id4709 . -1) (undo-tree-id4710 . -1) (undo-tree-id4711 . -1) 172) nil (26039 52356 331553 605000) 0 nil])
([nil nil ((171 . 174)) nil (26039 52356 331550 806000) 0 nil])
([nil nil ((#("z" 0 1 (fontified t)) . -176) (undo-tree-id4706 . -1) (undo-tree-id4707 . -1) (undo-tree-id4708 . -1) 177) nil (26039 52356 331549 849000) 0 nil])
([nil nil ((176 . 177)) nil (26039 52356 331546 701000) 0 nil])
([nil nil ((#("{" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -176) (undo-tree-id4700 . -1) (undo-tree-id4701 . -1) (undo-tree-id4702 . -1) (undo-tree-id4703 . -1) (undo-tree-id4704 . -1) (undo-tree-id4705 . -1) 177) nil (26039 52356 331545 819000) 0 nil])
([nil nil ((176 . 177)) nil (26039 52356 331541 255000) 0 nil])
([nil nil ((176 . 178) (#("P" 0 1 (fontified nil)) . 176) (176 . 177) (#("PI" 0 2 (fontified nil)) . -176) (176 . 178) (#("P" 0 1 (face font-lock-type-face fontified t)) . -176) (undo-tree-id4694 . -1) (undo-tree-id4695 . -1) (undo-tree-id4696 . -1) (undo-tree-id4697 . -1) (undo-tree-id4698 . -1) (undo-tree-id4699 . -1) 177) nil (26039 52356 331539 558000) 0 nil])
([nil nil ((178 . 182)) nil (26039 52356 331533 560000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -181) (undo-tree-id4690 . -1) (undo-tree-id4691 . -1) (undo-tree-id4692 . -1) (undo-tree-id4693 . -1) 182) nil (26039 52356 331532 9000) 0 nil])
([nil nil ((181 . 182)) nil (26039 52356 331521 81000) 0 nil])
([nil nil ((apply yas--snippet-revive 136 184 #s(yas--snippet nil (#s(yas--field 1 153 183 nil nil nil t #s(yas--exit 184 nil))) #s(yas--exit 184 nil) 89 nil #s(yas--field 1 153 183 nil nil nil t #s(yas--exit 184 nil)) nil nil))) nil (26039 52356 331519 726000) 0 nil])
([nil nil ((184 . 185)) nil (26039 52356 331515 392000) 0 nil])
([nil nil ((791 . 796) (t 26039 52356 382298 812000)) nil (26039 52439 923145 298000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -795) (undo-tree-id4952 . -1) (undo-tree-id4953 . -1) (undo-tree-id4954 . -1) (undo-tree-id4955 . -1) (undo-tree-id4956 . -1) (undo-tree-id4957 . -1) (undo-tree-id4958 . -1) (undo-tree-id4959 . -1) (#("
" 0 1 (fontified t)) . -796) (undo-tree-id4960 . -1) (undo-tree-id4961 . -1) (undo-tree-id4962 . -1) 797) nil (26039 52439 923143 851000) 0 nil])
([nil nil ((795 . 796)) nil (26039 52439 923135 457000) 0 nil])
([nil nil ((793 . 797) (#("    " 0 4 (fontified nil)) . 792) (undo-tree-id4934 . -4) (undo-tree-id4935 . -3) (undo-tree-id4936 . -3) (undo-tree-id4937 . -3) (undo-tree-id4938 . -3) (undo-tree-id4939 . -3) (undo-tree-id4940 . -3) (undo-tree-id4941 . -3) (undo-tree-id4942 . -3) (undo-tree-id4943 . -3) (undo-tree-id4944 . -3) (undo-tree-id4945 . -3) (undo-tree-id4946 . -3) (undo-tree-id4947 . -4) (undo-tree-id4948 . -4) (undo-tree-id4949 . -4) (undo-tree-id4950 . -4) (undo-tree-id4951 . -4) (796 . 797)) nil (26039 52439 923134 157000) 0 nil])
([nil nil ((797 . 802)) nil (26039 52439 923121 111000) 0 nil])
([nil nil ((#("y" 0 1 (face font-lock-variable-name-face fontified t)) . -801) (undo-tree-id4928 . -1) (undo-tree-id4929 . -1) (undo-tree-id4930 . -1) (undo-tree-id4931 . -1) (undo-tree-id4932 . -1) (undo-tree-id4933 . -1) 802) nil (26039 52439 923120 249000) 0 nil])
([nil nil ((801 . 802)) nil (26039 52439 923115 357000) 0 nil])
([nil nil ((802 . 813)) nil (26039 52439 923114 687000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -811) (undo-tree-id4915 . -1) (undo-tree-id4916 . -1) (undo-tree-id4917 . -1) (undo-tree-id4918 . -1) (undo-tree-id4919 . -1) (undo-tree-id4920 . -1) (undo-tree-id4921 . -1) (undo-tree-id4922 . -1) (undo-tree-id4923 . -1) (#("o" 0 1 (fontified t)) . -812) (undo-tree-id4924 . -1) (undo-tree-id4925 . -1) (undo-tree-id4926 . -1) (undo-tree-id4927 . -1) 813) nil (26039 52439 923113 160000) 0 nil])
([nil nil ((811 . 813)) nil (26039 52439 922831 971000) 0 nil])
([nil nil ((811 . 821) (#("up" 0 2 (fontified nil)) . 811) (811 . 813) (#("update_so3" 0 10 (fontified nil)) . -811) (811 . 821) (#("up" 0 2 (fontified t)) . -811) (undo-tree-id4907 . -2) (undo-tree-id4908 . -1) (undo-tree-id4909 . -1) (undo-tree-id4910 . -1) (undo-tree-id4911 . -2) (undo-tree-id4912 . -2) (undo-tree-id4913 . -2) (undo-tree-id4914 . -2) 813) nil (26039 52439 922830 679000) 0 nil])
([nil nil ((821 . 826)) nil (26039 52439 922824 274000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -824) (undo-tree-id4888 . -1) (undo-tree-id4889 . -1) (undo-tree-id4890 . -1) (undo-tree-id4891 . -1) (undo-tree-id4892 . -1) (undo-tree-id4893 . -1) (undo-tree-id4894 . -1) (undo-tree-id4895 . -1) (undo-tree-id4896 . -1) (undo-tree-id4897 . -1) (undo-tree-id4898 . -1) (undo-tree-id4899 . -1) (#("q" 0 1 (fontified t)) . -825) (undo-tree-id4900 . -1) (undo-tree-id4901 . -1) (undo-tree-id4902 . -1) (undo-tree-id4903 . -1) (undo-tree-id4904 . -1) (undo-tree-id4905 . -1) (undo-tree-id4906 . -1) 826) nil (26039 52439 922822 930000) 0 nil])
([nil nil ((824 . 826)) nil (26039 52439 922809 692000) 0 nil])
([nil nil ((824 . 826) (#("uq" 0 2 (fontified nil)) . 824) (824 . 826) (#("uq" 0 2 (fontified t)) . -824) (undo-tree-id4877 . -2) (undo-tree-id4878 . -1) (undo-tree-id4879 . -1) (undo-tree-id4880 . -1) (undo-tree-id4881 . -1) (undo-tree-id4882 . -1) (undo-tree-id4883 . -2) (undo-tree-id4884 . -2) (undo-tree-id4885 . -2) (undo-tree-id4886 . -2) (undo-tree-id4887 . -2) 826) nil (26039 52439 922808 564000) 0 nil])
([nil nil ((826 . 827)) nil (26039 52439 922800 429000) 0 nil])
([nil nil ((827 . 832)) nil (26039 52439 922799 851000) 0 nil])
([nil nil ((832 . 836)) nil (26039 52439 922799 320000) 0 nil])
([nil nil ((apply yas--snippet-revive 832 842 #s(yas--snippet nil nil #s(yas--exit 841 nil) 91 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 841 nil) 91 nil nil nil nil)) (832 . 842) (#("println!($0)" 0 12 (fontified nil)) . 832) (832 . 844) (#("prin" 0 4 (fontified nil)) . 832) (832 . 836) (#("println!(…)" 0 11 (fontified nil)) . -832) (832 . 843) (#("prin" 0 4 (fontified t)) . -832) (undo-tree-id4866 . -4) (undo-tree-id4867 . -1) (undo-tree-id4868 . -1) (undo-tree-id4869 . -2) (undo-tree-id4870 . -2) (undo-tree-id4871 . -3) (undo-tree-id4872 . -3) (undo-tree-id4873 . -4) (undo-tree-id4874 . -4) (undo-tree-id4875 . -4) (undo-tree-id4876 . -4) 836) nil (26039 52439 922797 697000) 0 nil])
([nil nil ((841 . 844)) nil (26039 52439 922787 672000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -841) (undo-tree-id4842 . -1) (undo-tree-id4843 . -1) (undo-tree-id4844 . -1) (undo-tree-id4845 . -1) (undo-tree-id4846 . -1) (undo-tree-id4847 . -1) (undo-tree-id4848 . -1) (undo-tree-id4849 . -1) (undo-tree-id4850 . -1) (undo-tree-id4851 . -1) (undo-tree-id4852 . -1) (undo-tree-id4853 . -1) (undo-tree-id4854 . -1) (undo-tree-id4855 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -842) (undo-tree-id4856 . -1) (undo-tree-id4857 . -1) (undo-tree-id4858 . -1) (undo-tree-id4859 . -1) (undo-tree-id4860 . -1) (undo-tree-id4861 . -1) (undo-tree-id4862 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -843) (undo-tree-id4863 . -1) (undo-tree-id4864 . -1) (undo-tree-id4865 . -1) 844) nil (26039 52439 922785 953000) 0 nil])
([nil nil ((841 . 843)) nil (26039 52439 922768 572000) 0 nil])
([nil nil ((842 . 845)) nil (26039 52439 922767 937000) 0 nil])
([nil nil ((#(")" 0 1 (face font-lock-string-face fontified t)) . -843) (undo-tree-id4832 . -1) (undo-tree-id4833 . -1) (undo-tree-id4834 . -1) (undo-tree-id4835 . -1) (undo-tree-id4836 . -1) (undo-tree-id4837 . -1) (undo-tree-id4838 . -1) (#("#" 0 1 (face font-lock-string-face fontified t)) . -844) (undo-tree-id4839 . -1) (undo-tree-id4840 . -1) (undo-tree-id4841 . -1) 845) nil (26039 52439 922766 651000) 0 nil])
([nil nil ((843 . 847)) nil (26039 52439 922759 312000) 0 nil])
([nil nil ((#("y" 0 1 (face font-lock-string-face fontified t)) . -846) (undo-tree-id4826 . -1) (undo-tree-id4827 . -1) (undo-tree-id4828 . -1) (undo-tree-id4829 . -1) (undo-tree-id4830 . -1) (undo-tree-id4831 . -1) 847) nil (26039 52439 922758 438000) 0 nil])
([nil nil ((846 . 858)) nil (26039 52439 922753 736000) 0 nil])
([nil nil ((857 . 859)) nil (26039 52439 922753 176000) 0 nil])
([nil nil ((861 . 863)) nil (26039 52439 922752 574000) 0 nil])
([nil nil ((863 . 864)) nil (26039 52439 922751 987000) 0 nil])
([nil nil ((863 . 866) (#("S" 0 1 (fontified nil)) . 863) (863 . 864) (#("SO3" 0 3 (fontified nil)) . -863) (863 . 866) (#("S" 0 1 (face font-lock-type-face fontified t)) . -863) (undo-tree-id4818 . -1) (undo-tree-id4819 . -1) (undo-tree-id4820 . -1) (undo-tree-id4821 . -1) (undo-tree-id4822 . -1) (undo-tree-id4823 . -1) (undo-tree-id4824 . -1) (undo-tree-id4825 . -1) 864) nil (26039 52439 922750 688000) 0 nil])
([nil nil ((866 . 868)) nil (26039 52439 922744 24000) 0 nil])
([nil nil ((867 . 868)) nil (26039 52439 922743 404000) 0 nil])
([nil nil ((#("q" 0 1 (fontified t)) . -867) (undo-tree-id4808 . -1) (undo-tree-id4809 . -1) (undo-tree-id4810 . -1) (undo-tree-id4811 . -1) (undo-tree-id4812 . -1) (undo-tree-id4813 . -1) (undo-tree-id4814 . -1) (undo-tree-id4815 . -1) (undo-tree-id4816 . -1) (undo-tree-id4817 . -1) 868) nil (26039 52439 922742 237000) 0 nil])
([nil nil ((867 . 868)) nil (26039 52439 922734 75000) 0 nil])
([nil nil ((867 . 875) (#("r" 0 1 (fontified nil)) . 867) (867 . 868) (#("rotation" 0 8 (fontified nil)) . -867) (867 . 875) (#("r" 0 1 (fontified t)) . -867) (undo-tree-id4804 . -1) (undo-tree-id4805 . -1) (undo-tree-id4806 . -1) (undo-tree-id4807 . -1) 868) nil (26039 52439 922733 31000) 0 nil])
([nil nil ((875 . 878)) nil (26039 52439 922728 524000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -877) (undo-tree-id4799 . -1) (undo-tree-id4800 . -1) (undo-tree-id4801 . -1) (undo-tree-id4802 . -1) (undo-tree-id4803 . -1) 878) nil (26039 52439 922727 564000) 0 nil])
([nil nil ((877 . 878)) nil (26039 52439 922723 184000) 0 nil])
([nil nil ((877 . 886) (#("u" 0 1 (fontified nil)) . 877) (877 . 878) (#("update_uq" 0 9 (fontified nil)) . -877) (877 . 886) (#("u" 0 1 (fontified t)) . -877) (undo-tree-id4794 . -1) (undo-tree-id4795 . -1) (undo-tree-id4796 . -1) (undo-tree-id4797 . -1) (undo-tree-id4798 . -1) 878) nil (26039 52439 922721 694000) 0 nil])
([nil nil ((887 . 888)) nil (26039 52439 922711 496000) 0 nil])
([nil nil ((apply yas--snippet-revive 888 893 #s(yas--snippet nil nil #s(yas--exit 893 nil) 92 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 893 nil) 92 nil nil nil nil)) (888 . 893) (#("log()$0" 0 7 (fontified nil)) . 888) (888 . 895) (#("log()" 0 5 (fontified nil)) . -888) (888 . 893)) nil (26039 52439 922709 323000) 0 nil])
([nil nil ((894 . 895)) nil (26039 52439 922704 21000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -819) (undo-tree-id4978 . -1) (undo-tree-id4979 . -1) (undo-tree-id4980 . -1) (undo-tree-id4981 . -1) (undo-tree-id4982 . -1) (undo-tree-id4983 . -1) (undo-tree-id4984 . -1) (undo-tree-id4985 . -1) (undo-tree-id4986 . -1) (undo-tree-id4987 . -1) (undo-tree-id4988 . -1) (#("3" 0 1 (fontified t)) . -820) (undo-tree-id4989 . -1) (undo-tree-id4990 . -1) (undo-tree-id4991 . -1) (undo-tree-id4992 . -1) (undo-tree-id4993 . -1) (undo-tree-id4994 . -1) (undo-tree-id4995 . -1) (undo-tree-id4996 . -1) (undo-tree-id4997 . -1) 821 (t 26039 52439 942294 13000)) nil (26039 52450 808024 616000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -818) (undo-tree-id4963 . -1) (undo-tree-id4964 . -1) (undo-tree-id4965 . -1) (undo-tree-id4966 . -1) (undo-tree-id4967 . -1) (undo-tree-id4968 . -1) (undo-tree-id4969 . -1) (undo-tree-id4970 . -1) (undo-tree-id4971 . -1) (undo-tree-id4972 . -1) (undo-tree-id4973 . -1) (undo-tree-id4974 . -1) (undo-tree-id4975 . -1) (undo-tree-id4976 . -1) (undo-tree-id4977 . -1) 819) nil (26039 52450 808007 339000) 0 nil])
([nil nil ((818 . 820)) nil (26039 52450 807986 452000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -882) (undo-tree-id5016 . -1) (undo-tree-id5017 . -1) (undo-tree-id5018 . -1) (undo-tree-id5019 . -1) (undo-tree-id5020 . -1) (undo-tree-id5021 . -1) (#("u" 0 1 (fontified t)) . -883) (undo-tree-id5022 . -1) (undo-tree-id5023 . -1) (undo-tree-id5024 . -1) (undo-tree-id5025 . -1) (#("q" 0 1 (fontified t)) . -884) (undo-tree-id5026 . -1) (undo-tree-id5027 . -1) 885 (t 26039 52450 825626 721000)) nil (26039 52457 229480 798000) 0 nil])
([nil nil ((882 . 883)) nil (26039 52457 229470 129000) 0 nil])
([nil nil ((876 . 883) (#("updated" 0 7 (fontified nil)) . 876) (876 . 883) (#("updated" 0 7 (fontified t)) . -876) (undo-tree-id4998 . -7) (undo-tree-id4999 . -7) (undo-tree-id5000 . -6) (undo-tree-id5001 . -6) (undo-tree-id5002 . -6) (undo-tree-id5003 . -6) (undo-tree-id5004 . -6) (undo-tree-id5005 . -6) (undo-tree-id5006 . -6) (undo-tree-id5007 . -6) (undo-tree-id5008 . -7) (undo-tree-id5009 . -7) (undo-tree-id5010 . -7) (undo-tree-id5011 . -7) (undo-tree-id5012 . -7) (undo-tree-id5013 . -7) (undo-tree-id5014 . -7) (undo-tree-id5015 . -7) 883) nil (26039 52457 229465 513000) 0 nil])
([nil nil ((894 . 898) (#("    " 0 4 (fontified nil)) . 893) (undo-tree-id5082 . -4) (undo-tree-id5083 . -4) (undo-tree-id5084 . -4) (undo-tree-id5085 . -4) (undo-tree-id5086 . -4) (undo-tree-id5087 . -4) (undo-tree-id5088 . -4) (undo-tree-id5089 . -4) (undo-tree-id5090 . -4) (undo-tree-id5091 . -4) (undo-tree-id5092 . -4) (undo-tree-id5093 . -4) (undo-tree-id5094 . -4) (undo-tree-id5095 . -4) (undo-tree-id5096 . -4) (undo-tree-id5097 . -4) (undo-tree-id5098 . -4) (undo-tree-id5099 . -4) (undo-tree-id5100 . -4) (undo-tree-id5101 . -4) (undo-tree-id5102 . -4) (897 . 898) (t 26039 52457 245626 352000)) nil (26039 53843 161585 262000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1250 . 1251) (nil fontified nil 1250 . 1251) (nil fontified nil 1249 . 1250) (nil fontified nil 1248 . 1249) (nil fontified nil 1236 . 1248) (nil fontified nil 1235 . 1236) (nil fontified nil 1234 . 1235) (nil fontified nil 1233 . 1234) (nil fontified nil 1232 . 1233) (nil fontified nil 1229 . 1232) (nil fontified nil 1223 . 1229) (nil fontified nil 1222 . 1223) (nil fontified nil 1221 . 1222) (nil fontified nil 1220 . 1221) (nil fontified nil 1217 . 1220) (nil fontified nil 1215 . 1217) (nil fontified nil 1212 . 1215) (nil fontified nil 1210 . 1212) (nil fontified nil 1207 . 1210) (nil fontified nil 1205 . 1207) (nil fontified nil 1204 . 1205) (nil fontified nil 1201 . 1204) (nil fontified nil 1199 . 1201) (nil fontified nil 1192 . 1199) (nil fontified nil 1191 . 1192) (nil fontified nil 1188 . 1191) (nil fontified nil 1185 . 1188) (nil fontified nil 1184 . 1185) (nil fontified nil 1181 . 1184) (nil fontified nil 1173 . 1181) (nil fontified nil 1172 . 1173) (nil fontified nil 1170 . 1172) (nil fontified nil 1169 . 1170) (nil fontified nil 1167 . 1169) (nil fontified nil 1166 . 1167) (nil fontified nil 1146 . 1166) (nil fontified nil 1144 . 1146) (nil fontified nil 1141 . 1144) (nil fontified nil 1138 . 1141) (nil fontified nil 1133 . 1138) (nil fontified nil 1132 . 1133) (nil fontified nil 1129 . 1132) (nil fontified nil 1121 . 1129) (nil fontified nil 1119 . 1121) (nil fontified nil 1118 . 1119) (nil fontified nil 1103 . 1118) (nil fontified nil 1102 . 1103) (nil fontified nil 1101 . 1102) (nil fontified nil 1081 . 1101) (nil fontified nil 1079 . 1081) (nil fontified nil 1065 . 1079) (nil fontified nil 1062 . 1065) (nil fontified nil 1060 . 1062) (nil fontified nil 1059 . 1060) (nil fontified nil 1056 . 1059) (nil fontified nil 1048 . 1056) (nil fontified nil 1046 . 1048) (nil fontified nil 1045 . 1046) (nil fontified nil 1030 . 1045) (nil fontified nil 1029 . 1030) (nil fontified nil 1009 . 1029) (nil fontified nil 1007 . 1009) (nil fontified nil 1004 . 1007) (nil fontified nil 1001 . 1004) (nil fontified nil 996 . 1001) (nil fontified nil 995 . 996) (nil fontified nil 992 . 995) (nil fontified nil 984 . 992) (nil fontified nil 982 . 984) (nil fontified nil 981 . 982) (nil fontified nil 977 . 981) (nil fontified nil 975 . 977) (nil fontified nil 973 . 975) (nil fontified nil 972 . 973) (nil fontified nil 971 . 972) (nil fontified nil 965 . 971) (nil fontified nil 963 . 965) (nil fontified nil 956 . 963) (nil fontified nil 955 . 956) (nil fontified nil 954 . 955) (nil fontified nil 939 . 954) (nil fontified nil 937 . 939) (nil fontified nil 928 . 937) (nil fontified nil 925 . 928) (nil fontified nil 910 . 925) (nil fontified nil 909 . 910) (nil fontified nil 906 . 909) (nil fontified nil 898 . 906) (898 . 1251)) nil (26039 53843 161566 662000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1157) (#("    " 0 4 (fontified t)) . -1109) (#("    " 0 4 (fontified t)) . -1040) (#("    " 0 4 (fontified t)) . -980) (#("        " 0 8 (fontified t)) . -898) (undo-tree-id5077 . -8) (undo-tree-id5078 . -8) (undo-tree-id5079 . -8) (undo-tree-id5080 . -8) (undo-tree-id5081 . -8) 906) nil (26039 53843 161552 951000) 0 nil])
([nil nil ((1227 . 1232)) nil (26039 53843 161548 528000) 0 nil])
([nil nil ((1232 . 1233)) nil (26039 53843 161547 903000) 0 nil])
([nil nil ((apply yas--snippet-revive 1232 1242 #s(yas--snippet nil nil #s(yas--exit 1241 nil) 108 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1241 nil) 108 nil nil nil nil)) (1232 . 1242) (#("println!($0)" 0 12 (fontified nil)) . 1232) (1232 . 1244) (#("p" 0 1 (fontified nil)) . 1232) (1232 . 1233) (#("println!(…)" 0 11 (fontified nil)) . -1232) (1232 . 1243) (#("p" 0 1 (fontified t)) . -1232) (undo-tree-id5072 . -1) (undo-tree-id5073 . -1) (undo-tree-id5074 . -1) (undo-tree-id5075 . -1) (undo-tree-id5076 . -1) 1233) nil (26039 53843 161546 495000) 0 nil])
([nil nil ((1241 . 1243)) nil (26039 53843 161540 891000) 0 nil])
([nil nil ((1242 . 1245)) nil (26039 53843 161540 218000) 0 nil])
([nil nil ((#("P" 0 1 (face font-lock-string-face fontified t)) . -1242) (undo-tree-id5051 . -1) (undo-tree-id5052 . -1) (undo-tree-id5053 . -1) (undo-tree-id5054 . -1) (undo-tree-id5055 . -1) (undo-tree-id5056 . -1) (undo-tree-id5057 . -1) (undo-tree-id5058 . -1) (undo-tree-id5059 . -1) (undo-tree-id5060 . -1) (undo-tree-id5061 . -1) (#("{" 0 1 (face font-lock-string-face fontified t)) . -1243) (undo-tree-id5062 . -1) (undo-tree-id5063 . -1) (undo-tree-id5064 . -1) (undo-tree-id5065 . -1) (undo-tree-id5066 . -1) (undo-tree-id5067 . -1) (undo-tree-id5068 . -1) (#("{" 0 1 (face font-lock-string-face fontified t)) . -1244) (undo-tree-id5069 . -1) (undo-tree-id5070 . -1) (undo-tree-id5071 . -1) 1245) nil (26039 53843 161538 615000) 0 nil])
([nil nil ((1242 . 1244)) nil (26039 53843 161522 368000) 0 nil])
([nil nil ((#("P" 0 1 (face font-lock-string-face fontified t)) . -1242) (undo-tree-id5045 . -1) (undo-tree-id5046 . -1) (undo-tree-id5047 . -1) (undo-tree-id5048 . -1) (undo-tree-id5049 . -1) (undo-tree-id5050 . -1) 1243) nil (26039 53843 161521 481000) 0 nil])
([nil nil ((#("{" 0 1 (face font-lock-string-face fontified t)) . -1242) (undo-tree-id5039 . -1) (undo-tree-id5040 . -1) (undo-tree-id5041 . -1) (undo-tree-id5042 . -1) (undo-tree-id5043 . -1) (undo-tree-id5044 . -1) 1243) nil (26039 53843 161516 240000) 0 nil])
([nil nil ((1242 . 1244)) nil (26039 53843 161510 920000) 0 nil])
([nil nil ((1243 . 1244)) nil (26039 53843 161510 206000) 0 nil])
([nil nil ((#(":" 0 1 (face rust-string-interpolation fontified t)) . -1243) (undo-tree-id5036 . -1) (undo-tree-id5037 . -1) (undo-tree-id5038 . -1) 1244) nil (26039 53843 161509 202000) 0 nil])
([nil nil ((1245 . 1248)) nil (26039 53843 161506 136000) 0 nil])
([nil nil ((1247 . 1250) (#("e" 0 1 (fontified nil)) . 1247) (1247 . 1248) (#("err" 0 3 (fontified nil)) . -1247) (1247 . 1250) (#("e" 0 1 (fontified t)) . -1247) (undo-tree-id5028 . -1) (undo-tree-id5029 . -1) (undo-tree-id5030 . -1) (undo-tree-id5031 . -1) (undo-tree-id5032 . -1) (undo-tree-id5033 . -1) (undo-tree-id5034 . -1) (undo-tree-id5035 . -1) 1248) nil (26039 53843 161503 491000) 0 nil])
([nil nil ((1251 . 1252)) nil (26039 53843 161487 145000) 0 nil])
([nil nil ((#("Rotation3" 0 9 (face font-lock-type-face fontified t)) . -920) (undo-tree-id5125 . -9) (undo-tree-id5126 . -9) (undo-tree-id5127 . -9) (undo-tree-id5128 . -9) (undo-tree-id5129 . -9) (undo-tree-id5130 . -9) (undo-tree-id5131 . -9) 929 (t 26039 53843 178880 49000)) nil (26039 53867 730221 697000) 0 nil])
([nil nil ((920 . 928)) nil (26039 53867 730215 191000) 0 nil])
([nil nil ((102 . 113) (920 . 920) (920 . 929) (#("Rotation" 0 8 (fontified nil)) . 920) (920 . 928) (#("Rotation3 (use nalgebra::Rotation3)" 0 35 (fontified nil)) . -920) (920 . 955) (#("Rotation" 0 8 (face font-lock-type-face fontified t)) . -920) (undo-tree-id5103 . -8) (undo-tree-id5104 . -1) (undo-tree-id5105 . -1) (undo-tree-id5106 . -1) (undo-tree-id5107 . -2) (undo-tree-id5108 . -2) (undo-tree-id5109 . -2) (undo-tree-id5110 . -3) (undo-tree-id5111 . -3) (undo-tree-id5112 . -4) (undo-tree-id5113 . -4) (undo-tree-id5114 . -5) (undo-tree-id5115 . -5) (undo-tree-id5116 . -6) (undo-tree-id5117 . -6) (undo-tree-id5118 . -7) (undo-tree-id5119 . -7) (undo-tree-id5120 . -8) (undo-tree-id5121 . -8) (undo-tree-id5122 . -8) (undo-tree-id5123 . -8) (undo-tree-id5124 . -8) 928) nil (26039 53867 730209 968000) 0 nil])
([nil current ((#("    let rotation_matrix = Rotation3::from_axis_angle(&Vector3::z_axis(), PI/2.0);
    let so3_r = SO3::from_rotation_matrix(rotation_matrix);
    let uq = UnitQuaternion::from_rotation_matrix(&rotation_matrix);
    let so3_q = SO3::from_unit_quaternion(uq);

    let err = (Vector3::new(0.0, 0.0, 1.5708)-so3_r.log()).norm_squared();
    println!(\"{}\", err);" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 23 (face font-lock-variable-name-face fontified t) 23 26 (fontified t) 26 35 (face font-lock-type-face fontified t) 35 37 (fontified t) 37 52 (fontified t) 52 53 (face (rainbow-delimiters-depth-2-face) fontified t) 53 54 (face rust-ampersand-face fontified t) 54 61 (face font-lock-type-face fontified t) 61 63 (fontified t) 63 69 (fontified t) 69 70 (face (rainbow-delimiters-depth-3-face) fontified t) 70 71 (face (rainbow-delimiters-depth-3-face) fontified t) 71 73 (fontified t) 73 75 (face font-lock-type-face fontified t) 75 79 (fontified t) 79 80 (face (rainbow-delimiters-depth-2-face) fontified t) 80 82 (fontified t) 82 86 (fontified t) 86 89 (face font-lock-keyword-face fontified t) 89 90 (fontified t) 90 95 (face font-lock-variable-name-face fontified t) 95 98 (fontified t) 98 101 (face font-lock-type-face fontified t) 101 103 (fontified t) 103 123 (fontified t) 123 124 (face (rainbow-delimiters-depth-2-face) fontified t) 124 139 (fontified t) 139 140 (face (rainbow-delimiters-depth-2-face) fontified t) 140 142 (fontified t) 142 146 (fontified t) 146 149 (face font-lock-keyword-face fontified t) 149 150 (fontified t) 150 152 (face font-lock-variable-name-face fontified t) 152 155 (fontified t) 155 169 (face font-lock-type-face fontified t) 169 171 (fontified t) 171 191 (fontified t) 191 192 (face (rainbow-delimiters-depth-2-face) fontified t) 192 193 (face rust-ampersand-face fontified t) 193 208 (fontified t) 208 209 (face (rainbow-delimiters-depth-2-face) fontified t) 209 211 (fontified t) 211 215 (fontified t) 215 218 (face font-lock-keyword-face fontified t) 218 219 (fontified t) 219 224 (face font-lock-variable-name-face fontified t) 224 227 (fontified t) 227 230 (face font-lock-type-face fontified t) 230 232 (fontified t) 232 252 (fontified t) 252 253 (face (rainbow-delimiters-depth-2-face) fontified t) 253 255 (fontified t) 255 256 (face (rainbow-delimiters-depth-2-face) fontified t) 256 258 (fontified t) 258 259 (fontified t) 259 263 (fontified t) 263 266 (face font-lock-keyword-face fontified t) 266 267 (fontified t) 267 270 (face font-lock-variable-name-face fontified t) 270 273 (fontified t) 273 274 (face (rainbow-delimiters-depth-2-face) fontified t) 274 281 (face font-lock-type-face fontified t) 281 283 (fontified t) 283 286 (fontified t) 286 287 (face (rainbow-delimiters-depth-3-face) fontified t) 287 289 (fontified t) 289 292 (fontified t) 292 294 (fontified t) 294 297 (fontified t) 297 299 (fontified t) 299 302 (fontified t) 302 303 (fontified t rear-nonsticky t) 303 304 (face (rainbow-delimiters-depth-3-face) fontified t) 304 305 (fontified t) 305 311 (fontified t) 311 314 (fontified t) 314 315 (face (rainbow-delimiters-depth-3-face) fontified t) 315 316 (face (rainbow-delimiters-depth-3-face) fontified t) 316 317 (face (rainbow-delimiters-depth-2-face) fontified t) 317 318 (fontified t) 318 330 (fontified t) 330 331 (face (rainbow-delimiters-depth-2-face) fontified t) 331 332 (face (rainbow-delimiters-depth-2-face) fontified t rear-nonsticky t) 332 333 (fontified t rear-nonsticky t) 333 334 (fontified t) 334 338 (fontified t) 338 346 (face rust-builtin-formatting-macro fontified t) 346 347 (face (rainbow-delimiters-depth-2-face) fontified t) 347 348 (face font-lock-string-face fontified t) 348 350 (face rust-string-interpolation fontified t) 350 351 (face font-lock-string-face fontified t) 351 353 (fontified t) 353 356 (fontified t) 356 357 (face (rainbow-delimiters-depth-2-face) fontified t) 357 358 (fontified t)) . 905) (undo-tree-id5132 . -358) (undo-tree-id5133 . -4) (undo-tree-id5134 . -333) (undo-tree-id5135 . -333) (undo-tree-id5136 . -352) (undo-tree-id5137 . -26) (undo-tree-id5138 . -26) (undo-tree-id5139 . -26) (undo-tree-id5140 . -26) (undo-tree-id5141 . -26) (undo-tree-id5142 . -26) (undo-tree-id5143 . -26) (undo-tree-id5144 . -26) (undo-tree-id5145 . -26) (undo-tree-id5146 . -26) (undo-tree-id5147 . -26) (undo-tree-id5148 . -26) (undo-tree-id5149 . -26) (undo-tree-id5150 . -26) (undo-tree-id5151 . -26) (undo-tree-id5152 . -26) (undo-tree-id5153 . -26) (undo-tree-id5154 . -26) (undo-tree-id5155 . -26) (undo-tree-id5156 . -26) (undo-tree-id5157 . -26) (undo-tree-id5158 . -26) (undo-tree-id5159 . -26) (undo-tree-id5160 . -26) (undo-tree-id5161 . -26) (undo-tree-id5162 . -26) (undo-tree-id5163 . -26) (undo-tree-id5164 . -35) (undo-tree-id5165 . -35) (undo-tree-id5166 . -35) (undo-tree-id5167 . -35) (undo-tree-id5168 . -35) (undo-tree-id5169 . -35) (undo-tree-id5170 . -35) (undo-tree-id5171 . -35) (undo-tree-id5172 . -35) (undo-tree-id5173 . -35) (undo-tree-id5174 . -35) (undo-tree-id5175 . -35) (undo-tree-id5176 . -35) (undo-tree-id5177 . -35) (undo-tree-id5178 . -35) (undo-tree-id5179 . -35) (undo-tree-id5180 . -35) (undo-tree-id5181 . -35) (undo-tree-id5182 . -35) (undo-tree-id5183 . -35) (undo-tree-id5184 . -35) (undo-tree-id5185 . -35) (undo-tree-id5186 . -35) (undo-tree-id5187 . -35) (undo-tree-id5188 . -35) (undo-tree-id5189 . -35) (undo-tree-id5190 . -35) (undo-tree-id5191 . -35) (undo-tree-id5192 . -35) (undo-tree-id5193 . -35) (undo-tree-id5194 . -35) (undo-tree-id5195 . -35) (undo-tree-id5196 . -35) (undo-tree-id5197 . -35) (undo-tree-id5198 . -35) (undo-tree-id5199 . -35) (undo-tree-id5200 . -35) (undo-tree-id5201 . -35) (undo-tree-id5202 . -35) (undo-tree-id5203 . -35) (undo-tree-id5204 . -35) (undo-tree-id5205 . -35) (undo-tree-id5206 . -35) (undo-tree-id5207 . -358) (undo-tree-id5208 . -358) (undo-tree-id5209 . -358) (undo-tree-id5210 . -284) (undo-tree-id5211 . -282) (undo-tree-id5212 . -281) (undo-tree-id5213 . -280) (undo-tree-id5214 . -258) (undo-tree-id5215 . -227) (undo-tree-id5216 . -226) (undo-tree-id5217 . -225) (undo-tree-id5218 . -224) (undo-tree-id5219 . -154) (undo-tree-id5220 . -153) (undo-tree-id5221 . -152) (undo-tree-id5222 . -151) (undo-tree-id5223 . -90) (undo-tree-id5224 . -89) (undo-tree-id5225 . -88) (undo-tree-id5226 . -5) (undo-tree-id5227 . -4) (undo-tree-id5228 . -3) (undo-tree-id5229 . -2) (undo-tree-id5230 . -1) (undo-tree-id5231 . -333) (undo-tree-id5232 . -358) (t 26039 53867 748878 637000)) nil (26039 53887 641461 988000) 0 nil])
nil
