(undo-tree-save-format-version . 1)
"5098987c154df313a65ef9498996c581b447369e"
[nil nil nil nil (26051 34694 572306 135000) 0 nil]
([nil nil ((1 . 6) (t 26051 34666 288518 741000)) nil (26051 34694 572304 987000) 0 nil])
([nil nil ((5 . 14) (#("i" 0 1 (fontified nil)) . 5) (5 . 6) (#("instance;" 0 9 (fontified nil)) . -5) (5 . 14) (#("i" 0 1 (face font-lock-constant-face fontified t)) . -5) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) 6) nil (26051 34694 572302 171000) 0 nil])
([nil nil ((14 . 15)) nil (26051 34694 572275 144000) 0 nil])
([nil nil ((14 . 15) (t 26051 34694 585187 146000)) nil (26051 35035 713035 319000) 0 nil])
([nil nil ((15 . 21)) nil (26051 35035 713034 314000) 0 nil])
([nil nil ((#("w" 0 1 (face font-lock-constant-face fontified t)) . -19) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (#("a" 0 1 (face font-lock-constant-face fontified t)) . -20) (undo-tree-id18 . -1) (undo-tree-id19 . -1) 21) nil (26051 35035 713032 889000) 0 nil])
([nil nil ((19 . 21)) nil (26051 35035 713027 320000) 0 nil])
([nil nil ((19 . 30) (#("va" 0 2 (fontified nil)) . 19) (19 . 21) (#("validation;" 0 11 (fontified nil)) . -19) (19 . 30) (#("va" 0 2 (face font-lock-constant-face fontified t)) . -19) (undo-tree-id9 . -2) (undo-tree-id10 . -1) (undo-tree-id11 . -2) (undo-tree-id12 . -2) (undo-tree-id13 . -2) 21) nil (26051 35035 713023 140000) 0 nil])
([nil nil ((30 . 31) (t 26051 35035 758541 423000)) nil (26051 35134 704907 874000) 0 nil])
([nil nil ((31 . 33)) nil (26051 35134 704907 145000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -32) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) 33) nil (26051 35134 704906 193000) 0 nil])
([nil nil ((32 . 37)) nil (26051 35134 704901 969000) 0 nil])
([nil nil ((#("v" 0 1 (face font-lock-constant-face fontified t)) . -35) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (#("a" 0 1 (face font-lock-constant-face fontified t)) . -36) (undo-tree-id29 . -1) (undo-tree-id30 . -1) 37) nil (26051 35134 704900 439000) 0 nil])
([nil nil ((35 . 36)) nil (26051 35134 704894 614000) 0 nil])
([nil nil ((35 . 45) (#("l" 0 1 (fontified nil)) . 35) (35 . 36) (#("utilities;" 0 10 (fontified nil)) . -35) (35 . 45) (#("l" 0 1 (face font-lock-constant-face fontified t)) . -35) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) 36) nil (26051 35134 704890 522000) 0 nil])
([nil nil ((45 . 46) (t 26051 35134 718547 495000)) nil (26051 35489 284346 406000) 0 nil])
([nil nil ((46 . 51)) nil (26051 35489 284344 945000) 0 nil])
([nil nil ((50 . 60) (#("p" 0 1 (fontified nil)) . 50) (50 . 51) (#("platforms;" 0 10 (fontified nil)) . -50) (50 . 60) (#("p" 0 1 (face font-lock-constant-face fontified t)) . -50) (undo-tree-id36 . -1) (undo-tree-id37 . -1) 51) nil (26051 35489 284341 246000) 0 nil])
([nil nil ((60 . 61) (t 26051 35489 295235 919000)) nil (26051 36499 503816 435000) 0 nil])
([nil nil ((61 . 66)) nil (26051 36499 503815 195000) 0 nil])
([nil nil ((65 . 72) (#("d" 0 1 (fontified nil)) . 65) (65 . 66) (#("device;" 0 7 (fontified nil)) . -65) (65 . 72) (#("d" 0 1 (face font-lock-constant-face fontified t)) . -65) (undo-tree-id38 . -1) (undo-tree-id39 . -1) 66) nil (26051 36499 503811 100000) 0 nil])
([nil nil ((72 . 73) (t 26051 36499 548631 275000)) nil (26051 36647 456432 129000) 0 nil])
([nil nil ((73 . 78)) nil (26051 36647 456430 621000) 0 nil])
([nil nil ((77 . 85) (#("s" 0 1 (fontified nil)) . 77) (77 . 78) (#("surface;" 0 8 (fontified nil)) . -77) (77 . 85) (#("s" 0 1 (face font-lock-constant-face fontified t)) . -77) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) 78) nil (26051 36647 456426 450000) 0 nil])
([nil nil ((85 . 86) (t 26051 36647 468640 357000)) nil (26051 38347 273473 794000) 0 nil])
([nil nil ((86 . 91)) nil (26051 38347 273472 280000) 0 nil])
([nil nil ((90 . 96) (#("q" 0 1 (fontified nil)) . 90) (90 . 91) (#("queue;" 0 6 (fontified nil)) . -90) (90 . 96) (#("q" 0 1 (face font-lock-constant-face fontified t)) . -90) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) 91) nil (26051 38347 273468 147000) 0 nil])
([nil nil ((97 . 98) (t 26051 38347 285411 72000)) nil (26051 39059 878063 207000) 0 nil])
([nil nil ((98 . 102)) nil (26051 39059 878062 463000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -99) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (#("u" 0 1 (fontified t)) . -100) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (#("n" 0 1 (fontified t)) . -101) (undo-tree-id196 . -1) (undo-tree-id197 . -1) 102) nil (26051 39059 878061 55000) 0 nil])
([nil nil ((99 . 101)) nil (26051 39059 878051 224000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -99) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (#("v" 0 1 (fontified t)) . -100) (undo-tree-id183 . -1) (undo-tree-id184 . -1) 101) nil (26051 39059 878049 866000) 0 nil])
([nil nil ((99 . 115)) nil (26051 39059 877573 883000) 0 nil])
([nil nil ((#("instance" 0 8 (fontified t)) . -107) (undo-tree-id152 . -8) (undo-tree-id153 . -8) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -2) (undo-tree-id158 . -2) (undo-tree-id159 . -2) (undo-tree-id160 . -2) (undo-tree-id161 . -2) (undo-tree-id162 . -2) (undo-tree-id163 . -2) (undo-tree-id164 . -3) (undo-tree-id165 . -3) (undo-tree-id166 . -3) (undo-tree-id167 . -3) (undo-tree-id168 . -4) (undo-tree-id169 . -5) (undo-tree-id170 . -6) (undo-tree-id171 . -7) (undo-tree-id172 . -8) (undo-tree-id173 . -8) (undo-tree-id174 . -8) (undo-tree-id175 . -8) (undo-tree-id176 . -8) (undo-tree-id177 . -8) (undo-tree-id178 . -8) 115) nil (26051 39059 877572 240000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -105) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (#(":" 0 1 (fontified t)) . -106) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) 107) nil (26051 39059 877550 825000) 0 nil])
([nil nil ((105 . 108)) nil (26051 39059 877458 344000) 0 nil])
([nil nil ((106 . 114) (#("in" 0 2 (fontified nil)) . 106) (106 . 108) (#("instance" 0 8 (fontified nil)) . -106) (106 . 114) (#("in" 0 2 (face font-lock-keyword-face fontified t)) . -106) (undo-tree-id48 . -2) (undo-tree-id49 . -2) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -2) (undo-tree-id53 . -2) (undo-tree-id54 . -2) (undo-tree-id55 . -2) (undo-tree-id56 . -2) (undo-tree-id57 . -2) (undo-tree-id58 . -2) 108) nil (26051 39059 877455 877000) 0 nil])
([nil nil ((114 . 118)) nil (26051 39059 877439 750000) 0 nil])
([nil nil ((118 . 119)) nil (26051 39059 877436 5000) 0 nil])
([nil nil ((118 . 119) (t 26051 39059 885454 487000)) nil (26051 39601 336049 205000) 0 nil])
([nil nil ((119 . 121)) nil (26051 39601 336048 369000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -119) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (#("p" 0 1 (fontified t)) . -120) (undo-tree-id208 . -1) (undo-tree-id209 . -1) 121) nil (26051 39601 336046 963000) 0 nil])
([nil nil ((119 . 129)) nil (26051 39601 336041 380000) 0 nil])
([nil nil ((127 . 137) (#("va" 0 2 (fontified nil)) . 127) (127 . 129) (#("validation" 0 10 (fontified nil)) . -127) (127 . 137) (#("va" 0 2 (face font-lock-constant-face fontified t)) . -127) (undo-tree-id198 . -2) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -2) (undo-tree-id202 . -2) 129) nil (26051 39601 336039 52000) 0 nil])
([nil nil ((137 . 141)) nil (26051 39601 336024 309000) 0 nil])
([nil nil ((141 . 142) (t 26051 39601 345487 468000)) nil (26051 39613 432059 507000) 0 nil])
([nil nil ((142 . 143)) nil (26051 39613 432058 689000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -142) (undo-tree-id216 . -1) (undo-tree-id217 . -1) 143) nil (26051 39613 432057 860000) 0 nil])
([nil nil ((142 . 151)) nil (26051 39613 432055 487000) 0 nil])
([nil nil ((150 . 157) (#("s" 0 1 (fontified nil)) . 150) (150 . 151) (#("surface" 0 7 (fontified nil)) . -150) (150 . 157) (#("s" 0 1 (face font-lock-constant-face fontified t)) . -150) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) 151) nil (26051 39613 432052 978000) 0 nil])
([nil nil ((157 . 161)) nil (26051 39613 432037 710000) 0 nil])
([nil nil ((161 . 162) (t 26051 39613 442154 864000)) nil (26051 39627 986709 773000) 0 nil])
([nil nil ((162 . 167)) nil (26051 39627 986708 958000) 0 nil])
([nil nil ((167 . 172)) nil (26051 39627 986708 318000) 0 nil])
([nil nil ((170 . 176) (#("de" 0 2 (fontified nil)) . 170) (170 . 172) (#("device" 0 6 (fontified nil)) . -170) (170 . 176) (#("de" 0 2 (face font-lock-constant-face fontified t)) . -170) (undo-tree-id224 . -2) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -2) (undo-tree-id228 . -2) (undo-tree-id229 . -2) (undo-tree-id230 . -2) 172) nil (26051 39627 986706 986000) 0 nil])
([nil nil ((176 . 180)) nil (26051 39627 986700 925000) 0 nil])
([nil nil ((180 . 181)) nil (26051 39627 986700 303000) 0 nil])
([nil nil ((181 . 189)) nil (26051 39627 986699 714000) 0 nil])
([nil nil ((189 . 190)) nil (26051 39627 986699 126000) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-constant-face fontified t)) . -189) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) 190) nil (26051 39627 986698 184000) 0 nil])
([nil nil ((189 . 190)) nil (26051 39627 986694 747000) 0 nil])
([nil nil ((189 . 194) (#("q" 0 1 (fontified nil)) . 189) (189 . 190) (#("queue" 0 5 (fontified nil)) . -189) (189 . 194) (#("q" 0 1 (face font-lock-constant-face fontified t)) . -189) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) 190) nil (26051 39627 986692 294000) 0 nil])
([nil nil ((194 . 198)) nil (26051 39627 986679 233000) 0 nil])
([nil nil ((96 . 97) (t 26051 39628 25489 83000)) nil (26051 43319 268371 392000) 0 nil])
([nil nil ((97 . 102)) nil (26051 43319 268369 863000) 0 nil])
([nil nil ((101 . 111) (#("s" 0 1 (fontified nil)) . 101) (101 . 102) (#("swapchain;" 0 10 (fontified nil)) . -101) (101 . 111) (#("s" 0 1 (face font-lock-constant-face fontified t)) . -101) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) 102) nil (26051 43319 268365 745000) 0 nil])
([nil nil ((112 . 113) (t 26051 43319 312380 396000)) nil (26052 57050 364355 780000) 0 nil])
([nil nil ((112 . 117)) nil (26052 57050 364354 207000) 0 nil])
([nil nil ((116 . 126) (#("c" 0 1 (fontified nil)) . 116) (116 . 117) (#("constants;" 0 10 (fontified nil)) . -116) (116 . 126) (#("c" 0 1 (face font-lock-constant-face fontified t)) . -116) (undo-tree-id0 . -1) (undo-tree-id1 . -1) 117) nil (26052 57050 364350 212000) 0 nil])
([nil nil ((229 . 231) (t 26052 57050 406719 15000)) nil (26052 60101 588720 770000) 0 nil])
([nil nil ((231 . 233)) nil (26052 60101 588720 107000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -231) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (#("t" 0 1 (fontified t)) . -232) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) 233) nil (26052 60101 588719 29000) 0 nil])
([nil nil ((231 . 234)) nil (26052 60101 588711 518000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 237 252 nil nil nil t #s(yas--exit 259 nil))) #s(yas--exit 259 nil) 15 nil #s(yas--field 1 237 252 nil nil nil t #s(yas--exit 259 nil)) nil nil)) (231 . 246) (#("trait $1 {
    $0
}" 0 19 (fontified nil)) . 231) (231 . 250) (#("tra" 0 3 (fontified nil)) . 231) (231 . 234) (#("trait" 0 5 (fontified nil)) . -231) (231 . 236) (#("tra" 0 3 (fontified t)) . -231) (undo-tree-id19 . -3) (undo-tree-id20 . -1) (undo-tree-id21 . -2) (undo-tree-id22 . -2) (undo-tree-id23 . -2) (undo-tree-id24 . -3) (undo-tree-id25 . -3) (undo-tree-id26 . -3) (undo-tree-id27 . -3) 234) nil (26052 60101 588709 996000) 0 nil])
([nil nil ((237 . 238)) nil (26052 60101 588702 694000) 0 nil])
([nil nil ((#("E" 0 1 (face font-lock-type-face fontified t)) . -237) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) 238) nil (26052 60101 588701 937000) 0 nil])
([nil nil ((237 . 241)) nil (26052 60101 588698 975000) 0 nil])
([nil nil ((#("u" 0 1 (face font-lock-type-face fontified t)) . -240) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) 241) nil (26052 60101 588698 10000) 0 nil])
([nil nil ((240 . 250)) nil (26052 60101 588692 645000) 0 nil])
([nil nil ((250 . 253)) nil (26052 60101 588691 880000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-type-face fontified t)) . -252) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) 253) nil (26052 60101 588689 755000) 0 nil])
([nil nil ((261 . 262) 252) nil (26052 60101 588675 805000) 0 nil])
([nil nil ((apply yas--snippet-revive 231 262 #s(yas--snippet nil (#s(yas--field 1 237 252 nil nil nil t #s(yas--exit 259 nil))) #s(yas--exit 259 nil) 15 nil #s(yas--field 1 237 252 nil nil nil t #s(yas--exit 259 nil)) nil nil))) nil (26052 60130 148408 810000) 0 nil])
([nil nil ((259 . 265) (t 26052 60101 633572 881000)) nil (26052 60130 148408 180000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -264) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) 265) nil (26052 60130 148407 43000) 0 nil])
([nil nil ((264 . 265)) nil (26052 60130 148400 619000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -264) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) 265) nil (26052 60130 148399 877000) 0 nil])
([nil nil ((264 . 267)) nil (26052 60130 148397 218000) 0 nil])
([nil nil ((267 . 268)) nil (26052 60130 148396 694000) 0 nil])
([nil nil ((#("l" 0 1 (face font-lock-function-name-face fontified t)) . -267) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) 268) nil (26052 60130 148395 583000) 0 nil])
([nil nil ((267 . 273)) nil (26052 60130 148391 157000) 0 nil])
([nil nil ((273 . 274)) nil (26052 60130 148390 618000) 0 nil])
([nil nil ((274 . 275)) nil (26052 60130 148390 60000) 0 nil])
([nil nil ((274 . 279)) nil (26052 60130 148389 529000) 0 nil])
([nil nil ((280 . 285)) nil (26052 60130 148388 768000) 0 nil])
([nil nil ((284 . 288) (#("b" 0 1 (fontified nil)) . 284) (284 . 285) (#("bool" 0 4 (fontified nil)) . -284) (284 . 288) (#("b" 0 1 (fontified t)) . -284) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) 285) nil (26052 60130 148386 408000) 0 nil])
([nil nil ((288 . 289)) nil (26052 60130 148372 784000) 0 nil])
([nil nil ((#("
trait DeviceExtension {
    fn is_suitable(&self) -> bool;
}
" 0 1 (fontified t) 1 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 22 (face font-lock-type-face fontified t) 22 23 (fontified t) 23 24 (face (rainbow-delimiters-depth-1-face) fontified t) 24 25 (fontified t) 25 29 (fontified t) 29 31 (face font-lock-keyword-face fontified t) 31 32 (fontified t) 32 43 (face font-lock-function-name-face fontified t) 43 44 (face (rainbow-delimiters-depth-2-face) fontified t) 44 45 (face rust-ampersand-face fontified t) 45 49 (face font-lock-keyword-face fontified t) 49 50 (face (rainbow-delimiters-depth-2-face) fontified t) 50 52 (fontified t) 52 53 (syntax-table (1) fontified t) 53 54 (fontified t) 54 58 (face font-lock-type-face fontified t) 58 59 (fontified t) 59 60 (fontified t) 60 61 (face (rainbow-delimiters-depth-1-face) fontified t) 61 62 (fontified t)) . 230) (undo-tree-id64 . -7) (undo-tree-id65 . -62) (undo-tree-id66 . -7) (undo-tree-id67 . -7) (undo-tree-id68 . -7) (undo-tree-id69 . -62) (undo-tree-id70 . -62) (undo-tree-id71 . -62) (undo-tree-id72 . -61) (undo-tree-id73 . -31) (undo-tree-id74 . -30) (undo-tree-id75 . -5) (undo-tree-id76 . -4) (undo-tree-id77 . -62) (undo-tree-id78 . -62) (t 26052 60130 160241 298000)) nil (26052 60285 73086 896000) 0 nil])
([nil nil ((229 . 238) (t 26052 60285 73584 146000)) nil (26052 62035 220578 481000) 0 nil])
([nil nil ((237 . 246) (#("s" 0 1 (fontified nil)) . 237) (237 . 238) (#("swapchain" 0 9 (fontified nil)) . -237) (237 . 246) (#("s" 0 1 (face font-lock-constant-face fontified t)) . -237) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) 238) nil (26052 62035 220576 723000) 0 nil])
([nil nil ((246 . 251)) nil (26052 62035 220570 36000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t)) . -250) (undo-tree-id79 . -1) (undo-tree-id80 . -1) 251) nil (26052 62035 220566 448000) 0 nil])
([nil nil ((250 . 252) (t 26052 62035 233691 565000)) nil (26052 65398 428169 2000) 0 nil])
([nil nil ((252 . 258)) nil (26052 65398 428168 120000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t)) . -256) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (#("k" 0 1 (fontified t)) . -257) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) 258) nil (26052 65398 428166 982000) 0 nil])
([nil nil ((256 . 257)) nil (26052 65398 428157 754000) 0 nil])
([nil nil ((#("V" 0 1 (face font-lock-type-face fontified t)) . -256) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) 257) nil (26052 65398 428156 983000) 0 nil])
([nil nil ((256 . 259)) nil (26052 65398 428154 173000) 0 nil])
([nil nil ((apply yas--snippet-revive 256 263 #s(yas--snippet nil nil #s(yas--exit 263 nil) 42 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 263 nil) 42 nil nil nil nil)) (256 . 263) (#("struct $0" 0 9 (fontified nil)) . 256) (256 . 265) (#("str" 0 3 (fontified nil)) . 256) (256 . 259) (#("struct" 0 6 (fontified nil)) . -256) (256 . 262) (#("str" 0 3 (face font-lock-type-face fontified t)) . -256) (undo-tree-id113 . -3) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -2) (undo-tree-id117 . -2) (undo-tree-id118 . -2) (undo-tree-id119 . -3) (undo-tree-id120 . -3) (undo-tree-id121 . -3) (undo-tree-id122 . -3) 259) nil (26052 65398 428152 779000) 0 nil])
([nil nil ((263 . 268)) nil (26052 65398 428145 469000) 0 nil])
([nil nil ((268 . 272)) nil (26052 65398 428144 883000) 0 nil])
([nil nil ((#("K" 0 1 (face font-lock-type-face fontified t)) . -264) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (#("_" 0 1 (face font-lock-type-face fontified t)) . -265) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) 266) nil (26052 65398 428143 630000) 0 nil])
([nil nil ((264 . 265)) nil (26052 65398 428134 269000) 0 nil])
([nil nil ((#("l" 0 1 (face font-lock-type-face fontified t)) . -264) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) 265) nil (26052 65398 428132 658000) 0 nil])
([nil nil ((264 . 265)) nil (26052 65398 427060 919000) 0 nil])
([nil nil ((271 . 274)) nil (26052 65398 427060 359000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . 274) (274 . 278) (273 . 275)) nil (26052 65398 427058 678000) 0 nil])
([nil nil ((nil rear-nonsticky nil 483 . 484) (nil fontified nil 483 . 484) (nil fontified nil 474 . 483) (nil fontified nil 472 . 474) (nil fontified nil 463 . 472) (nil fontified nil 461 . 463) (nil fontified nil 452 . 461) (nil fontified nil 448 . 452) (nil fontified nil 446 . 448) (nil fontified nil 441 . 446) (nil fontified nil 439 . 441) (nil fontified nil 430 . 439) (nil fontified nil 428 . 430) (nil fontified nil 423 . 428) (nil fontified nil 419 . 423) (nil fontified nil 417 . 419) (nil fontified nil 411 . 417) (nil fontified nil 409 . 411) (nil fontified nil 400 . 409) (nil fontified nil 398 . 400) (nil fontified nil 392 . 398) (nil fontified nil 386 . 392) (nil fontified nil 379 . 386) (nil fontified nil 377 . 379) (nil fontified nil 368 . 377) (nil fontified nil 366 . 368) (nil fontified nil 359 . 366) (nil fontified nil 353 . 359) (nil fontified nil 340 . 353) (nil fontified nil 338 . 340) (nil fontified nil 329 . 338) (nil fontified nil 327 . 329) (nil fontified nil 313 . 327) (nil fontified nil 307 . 313) (nil fontified nil 299 . 307) (nil fontified nil 297 . 299) (nil fontified nil 288 . 297) (nil fontified nil 286 . 288) (nil fontified nil 278 . 286) (nil fontified nil 274 . 278) (274 . 484)) nil (26052 65398 427053 323000) 0 nil])
([nil nil ((#("render" 0 6 (face font-lock-constant-face fontified t)) . -291) (undo-tree-id206 . -6) (undo-tree-id207 . -6) 297 (t 26052 65398 470564 673000)) nil (26052 65405 272710 946000) 0 nil])
([nil nil ((#("v" 0 1 (face font-lock-constant-face fontified t)) . -288) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (#("k" 0 1 (face font-lock-constant-face fontified t)) . -289) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (#("_" 0 1 (face font-lock-constant-face fontified t)) . -290) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) 291) nil (26052 65405 272705 893000) 0 nil])
([nil nil ((288 . 289)) nil (26052 65405 272675 536000) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-constant-face fontified t)) . -288) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) 289) nil (26052 65405 272674 42000) 0 nil])
([nil nil ((288 . 289)) nil (26052 65405 272669 557000) 0 nil])
([nil nil ((288 . 294) (#("s" 0 1 (fontified nil)) . 288) (288 . 289) (#("self::" 0 6 (fontified nil)) . -288) (288 . 294) (#("s" 0 1 (face font-lock-constant-face fontified t)) . -288) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) 289) nil (26052 65405 272667 210000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -292) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (#(":" 0 1 (fontified t)) . -293) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) 294) nil (26052 65405 272656 966000) 0 nil])
([nil nil ((#("render" 0 6 (face font-lock-constant-face fontified t)) . -327) (undo-tree-id582 . -6) (undo-tree-id583 . -6) (undo-tree-id584 . -5) (undo-tree-id585 . -5) (undo-tree-id586 . -5) (undo-tree-id587 . -5) (undo-tree-id588 . -5) (undo-tree-id589 . -5) (undo-tree-id590 . -5) (undo-tree-id591 . -5) (undo-tree-id592 . -6) (undo-tree-id593 . -6) (undo-tree-id594 . -6) (undo-tree-id595 . -6) (undo-tree-id596 . -6) (undo-tree-id597 . -6) (undo-tree-id598 . -6) (undo-tree-id599 . -6) 333 (t 26052 65405 283898 425000)) nil (26052 65427 492514 484000) 0 nil])
([nil nil ((#("vk_" 0 3 (face font-lock-constant-face fontified t)) . -324) (undo-tree-id559 . -3) (undo-tree-id560 . -3) (undo-tree-id561 . -3) (undo-tree-id562 . -3) (undo-tree-id563 . -3) (undo-tree-id564 . -3) (undo-tree-id565 . -3) (undo-tree-id566 . -3) (undo-tree-id567 . -3) (undo-tree-id568 . -3) (undo-tree-id569 . -3) (undo-tree-id570 . -3) (undo-tree-id571 . -3) (undo-tree-id572 . -3) (undo-tree-id573 . -3) (undo-tree-id574 . -3) (undo-tree-id575 . -3) (undo-tree-id576 . -3) (undo-tree-id577 . -3) (undo-tree-id578 . -3) (undo-tree-id579 . -3) (undo-tree-id580 . -3) (undo-tree-id581 . -3) 327) nil (26052 65427 492503 139000) 0 nil])
([nil nil ((324 . 325)) nil (26052 65427 492488 506000) 0 nil])
([nil nil ((324 . 330) (#("s" 0 1 (fontified nil)) . 324) (324 . 325) (#("self::" 0 6 (fontified nil)) . -324) (324 . 330) (#("s" 0 1 (face font-lock-constant-face fontified t)) . -324) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) 325) nil (26052 65427 492486 848000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -328) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (#(":" 0 1 (fontified t)) . -329) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) 330) nil (26052 65427 492480 872000) 0 nil])
([nil nil ((apply activate-cursor-for-undo 18) (#("v" 0 1 (face font-lock-constant-face fontified t)) . -426) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (apply deactivate-cursor-after-undo 18) (apply activate-cursor-for-undo 17) (#("v" 0 1 (face font-lock-constant-face fontified t)) . -402) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (apply deactivate-cursor-after-undo 17) (apply activate-cursor-for-undo 16) (#("v" 0 1 (face font-lock-constant-face fontified t)) . -381) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (apply deactivate-cursor-after-undo 16) (#("v" 0 1 (face font-lock-constant-face fontified t)) . -358) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (apply activate-cursor-for-undo 18) (#("k" 0 1 (face font-lock-constant-face fontified t)) . -430) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (apply deactivate-cursor-after-undo 18) (apply activate-cursor-for-undo 17) (#("k" 0 1 (face font-lock-constant-face fontified t)) . -405) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (apply deactivate-cursor-after-undo 17) (apply activate-cursor-for-undo 16) (#("k" 0 1 (face font-lock-constant-face fontified t)) . -383) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (apply deactivate-cursor-after-undo 16) (#("k" 0 1 (face font-lock-constant-face fontified t)) . -359) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (apply activate-cursor-for-undo 18) (#("_" 0 1 (face font-lock-constant-face fontified t)) . -434) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (apply deactivate-cursor-after-undo 18) (apply activate-cursor-for-undo 17) (#("_" 0 1 (face font-lock-constant-face fontified t)) . -408) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (apply deactivate-cursor-after-undo 17) (apply activate-cursor-for-undo 16) (#("_" 0 1 (face font-lock-constant-face fontified t)) . -385) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (apply deactivate-cursor-after-undo 16) (#("_" 0 1 (face font-lock-constant-face fontified t)) . -360) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (apply activate-cursor-for-undo 18) (#("r" 0 1 (face font-lock-constant-face fontified t)) . -438) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (apply deactivate-cursor-after-undo 18) (apply activate-cursor-for-undo 17) (#("r" 0 1 (face font-lock-constant-face fontified t)) . -411) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (apply deactivate-cursor-after-undo 17) (apply activate-cursor-for-undo 16) (#("r" 0 1 (face font-lock-constant-face fontified t)) . -387) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (apply deactivate-cursor-after-undo 16) (#("r" 0 1 (face font-lock-constant-face fontified t)) . -361) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (apply activate-cursor-for-undo 18) (#("e" 0 1 (face font-lock-constant-face fontified t)) . -442) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (apply deactivate-cursor-after-undo 18) (apply activate-cursor-for-undo 17) (#("e" 0 1 (face font-lock-constant-face fontified t)) . -414) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (apply deactivate-cursor-after-undo 17) (apply activate-cursor-for-undo 16) (#("e" 0 1 (face font-lock-constant-face fontified t)) . -389) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (apply deactivate-cursor-after-undo 16) (#("e" 0 1 (face font-lock-constant-face fontified t)) . -362) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (apply activate-cursor-for-undo 18) (#("n" 0 1 (face font-lock-constant-face fontified t)) . -446) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (apply deactivate-cursor-after-undo 18) (apply activate-cursor-for-undo 17) (#("n" 0 1 (face font-lock-constant-face fontified t)) . -417) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (apply deactivate-cursor-after-undo 17) (apply activate-cursor-for-undo 16) (#("n" 0 1 (face font-lock-constant-face fontified t)) . -391) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (apply deactivate-cursor-after-undo 16) (#("n" 0 1 (face font-lock-constant-face fontified t)) . -363) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (apply activate-cursor-for-undo 18) (#("d" 0 1 (face font-lock-constant-face fontified t)) . -450) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (apply deactivate-cursor-after-undo 18) (apply activate-cursor-for-undo 17) (#("d" 0 1 (face font-lock-constant-face fontified t)) . -420) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (apply deactivate-cursor-after-undo 17) (apply activate-cursor-for-undo 16) (#("d" 0 1 (face font-lock-constant-face fontified t)) . -393) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (apply deactivate-cursor-after-undo 16) (#("d" 0 1 (face font-lock-constant-face fontified t)) . -364) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (apply activate-cursor-for-undo 18) (#("e" 0 1 (face font-lock-constant-face fontified t)) . -454) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (apply deactivate-cursor-after-undo 18) (apply activate-cursor-for-undo 17) (#("e" 0 1 (face font-lock-constant-face fontified t)) . -423) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (apply deactivate-cursor-after-undo 17) (apply activate-cursor-for-undo 16) (#("e" 0 1 (face font-lock-constant-face fontified t)) . -395) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (apply deactivate-cursor-after-undo 16) (#("e" 0 1 (face font-lock-constant-face fontified t)) . -365) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (apply activate-cursor-for-undo 18) (#("r" 0 1 (face font-lock-constant-face fontified t)) . -458) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (apply deactivate-cursor-after-undo 18) (apply activate-cursor-for-undo 17) (#("r" 0 1 (face font-lock-constant-face fontified t)) . -426) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (apply deactivate-cursor-after-undo 17) (apply activate-cursor-for-undo 16) (#("r" 0 1 (face font-lock-constant-face fontified t)) . -397) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (apply deactivate-cursor-after-undo 16) (#("r" 0 1 (face font-lock-constant-face fontified t)) . -366) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) 367) nil (26052 65427 492449 881000) 0 nil])
([nil nil ((apply activate-cursor-for-undo 18) (441 . 442) (apply deactivate-cursor-after-undo 18) (apply activate-cursor-for-undo 17) (413 . 414) (apply deactivate-cursor-after-undo 17) (apply activate-cursor-for-undo 16) (388 . 389) (apply deactivate-cursor-after-undo 16) (361 . 362) (apply activate-cursor-for-undo 18) (437 . 438) (apply deactivate-cursor-after-undo 18) (apply activate-cursor-for-undo 17) (410 . 411) (apply deactivate-cursor-after-undo 17) (apply activate-cursor-for-undo 16) (386 . 387) (apply deactivate-cursor-after-undo 16) (360 . 361) (apply activate-cursor-for-undo 18) (433 . 434) (apply deactivate-cursor-after-undo 18) (apply activate-cursor-for-undo 17) (407 . 408) (apply deactivate-cursor-after-undo 17) (apply activate-cursor-for-undo 16) (384 . 385) (apply deactivate-cursor-after-undo 16) (359 . 360) (apply activate-cursor-for-undo 18) (429 . 430) (apply deactivate-cursor-after-undo 18) (apply activate-cursor-for-undo 17) (404 . 405) (apply deactivate-cursor-after-undo 17) (apply activate-cursor-for-undo 16) (382 . 383) (apply deactivate-cursor-after-undo 16) (358 . 359)) nil (26052 65427 491657 646000) 0 nil])
([nil nil ((456 . 458) (t 26052 65427 537233 124000)) nil (26052 65490 968729 485000) 0 nil])
([nil nil ((458 . 460)) nil (26052 65490 968728 701000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -458) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -459) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) 460) nil (26052 65490 968727 405000) 0 nil])
([nil nil ((458 . 460)) nil (26052 65490 968716 881000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -458) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (#("p" 0 1 (fontified t)) . -459) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) 460) nil (26052 65490 968715 794000) 0 nil])
([nil nil ((458 . 459)) nil (26052 65490 968709 293000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -458) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) 459) nil (26052 65490 968708 228000) 0 nil])
([nil nil ((458 . 460)) nil (26052 65490 968704 353000) 0 nil])
([nil nil ((458 . 463) (#("im" 0 2 (fontified nil)) . 458) (458 . 460) (#("image" 0 5 (fontified nil)) . -458) (458 . 463) (#("im" 0 2 (fontified t)) . -458) (undo-tree-id727 . -2) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -2) (undo-tree-id731 . -2) 460) nil (26052 65490 968703 313000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -458) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (#("m" 0 1 (fontified t)) . -459) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (#("a" 0 1 (fontified t)) . -460) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (#("g" 0 1 (fontified t)) . -461) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (#("e" 0 1 (fontified t)) . -462) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) 463) nil (26052 65490 968696 506000) 0 nil])
([nil nil ((458 . 461)) nil (26052 65490 968671 802000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 463 471 nil nil nil t #s(yas--exit 478 nil))) #s(yas--exit 478 nil) 43 nil #s(yas--field 1 463 471 nil nil nil t #s(yas--exit 478 nil)) nil nil)) (458 . 472) (#("impl $1 {
    $0
}" 0 18 (fontified nil)) . 458) (458 . 476) (#("imp" 0 3 (fontified nil)) . 458) (458 . 461) (#("impl" 0 4 (fontified nil)) . -458) (458 . 462) (#("imp" 0 3 (fontified t)) . -458) (undo-tree-id677 . -3) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -2) (undo-tree-id681 . -2) (undo-tree-id682 . -3) (undo-tree-id683 . -3) (undo-tree-id684 . -3) (undo-tree-id685 . -3) (undo-tree-id686 . -3) 461) nil (26052 65490 968670 200000) 0 nil])
([nil nil ((463 . 464)) nil (26052 65490 968662 401000) 0 nil])
([nil nil ((#("N" 0 1 (face font-lock-type-face fontified t)) . -463) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) 464) nil (26052 65490 968661 554000) 0 nil])
([nil nil ((463 . 464)) nil (26052 65490 968657 989000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -463) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) 464) nil (26052 65490 968657 78000) 0 nil])
([nil nil ((463 . 464)) nil (26052 65490 968651 566000) 0 nil])
([nil nil ((#("W" 0 1 (face font-lock-type-face fontified t)) . -463) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) 464) nil (26052 65490 968650 769000) 0 nil])
([nil nil ((463 . 464)) nil (26052 65490 968647 842000) 0 nil])
([nil nil ((463 . 471) (#("V" 0 1 (fontified nil)) . 463) (undo-tree-id652 . -1) (463 . 464) (#("VkRender" 0 8 (fontified nil)) . -463) (undo-tree-id653 . -8) (463 . 471) (#("V" 0 1 (face font-lock-type-face fontified t)) . -463) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) 464) nil (26052 65490 968646 467000) 0 nil])
([nil nil ((apply yas--snippet-revive 458 480 #s(yas--snippet nil (#s(yas--field 1 463 471 nil nil nil t #s(yas--exit 478 nil))) #s(yas--exit 478 nil) 43 nil #s(yas--field 1 463 471 nil nil nil t #s(yas--exit 478 nil)) nil nil))) nil (26052 65490 968639 979000) 0 nil])
([nil nil ((478 . 480)) nil (26052 65490 968639 313000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -478) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -479) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) 480) nil (26052 65490 968637 768000) 0 nil])
([nil nil ((478 . 490)) nil (26052 65490 968628 619000) 0 nil])
([nil nil ((489 . 501)) nil (26052 65490 968628 187000) 0 nil])
([nil nil ((498 . 503) (#("win" 0 3 (fontified nil)) . 498) (498 . 501) (#("winit" 0 5 (fontified nil)) . -498) (498 . 503) (#("win" 0 3 (fontified t)) . -498) (undo-tree-id627 . -3) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -2) (undo-tree-id632 . -2) (undo-tree-id633 . -2) (undo-tree-id634 . -3) (undo-tree-id635 . -3) (undo-tree-id636 . -3) (undo-tree-id637 . -3) (undo-tree-id638 . -3) 501) nil (26052 65490 968626 864000) 0 nil])
([nil nil ((503 . 505)) nil (26052 65490 968618 786000) 0 nil])
([nil nil ((505 . 506)) nil (26052 65490 968618 298000) 0 nil])
([nil nil ((505 . 511) (#("w" 0 1 (fontified nil)) . 505) (505 . 506) (#("window" 0 6 (fontified nil)) . -505) (505 . 511) (#("w" 0 1 (fontified t)) . -505) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) 506) nil (26052 65490 968617 120000) 0 nil])
([nil nil ((511 . 514)) nil (26052 65490 968612 849000) 0 nil])
([nil nil ((513 . 519) (#("W" 0 1 (fontified nil)) . 513) (513 . 514) (#("Window" 0 6 (fontified nil)) . -513) (513 . 519) (#("W" 0 1 (face font-lock-type-face fontified t)) . -513) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) 514) nil (26052 65490 968611 718000) 0 nil])
([nil nil ((520 . 523)) nil (26052 65490 968608 230000) 0 nil])
([nil nil ((524 . 528) (#("        " 0 8 (fontified nil)) . 523) (523 . 531) (#("    " 0 4 (fontified nil)) . 523) (undo-tree-id615 . -4) (undo-tree-id616 . -4) (undo-tree-id617 . -4) (undo-tree-id618 . -4) (522 . 528)) nil (26052 65490 968607 166000) 0 nil])
([nil nil ((520 . 525)) nil (26052 65490 968603 450000) 0 nil])
([nil nil ((524 . 532) (#("V" 0 1 (fontified nil)) . 524) (524 . 525) (#("VkRender" 0 8 (fontified nil)) . -524) (524 . 532) (#("V" 0 1 (face font-lock-type-face fontified t)) . -524) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) 525) nil (26052 65490 968602 43000) 0 nil])
([nil nil ((535 . 543)) nil (26052 65490 968596 742000) 0 nil])
([nil nil ((nil rear-nonsticky nil 881 . 882) (nil fontified nil 881 . 882) (nil fontified nil 880 . 881) (nil fontified nil 873 . 880) (nil fontified nil 872 . 873) (nil fontified nil 870 . 872) (nil fontified nil 864 . 870) (nil fontified nil 863 . 864) (nil fontified nil 853 . 863) (nil fontified nil 852 . 853) (nil fontified nil 844 . 852) (nil fontified nil 843 . 844) (nil fontified nil 842 . 843) (nil fontified nil 839 . 842) (nil fontified nil 837 . 839) (nil fontified nil 828 . 837) (nil fontified nil 825 . 828) (nil fontified nil 816 . 825) (nil fontified nil 815 . 816) (nil fontified nil 812 . 815) (nil fontified nil 804 . 812) (nil fontified nil 802 . 804) (nil fontified nil 801 . 802) (nil fontified nil 795 . 801) (nil fontified nil 794 . 795) (nil fontified nil 793 . 794) (nil fontified nil 788 . 793) (nil fontified nil 783 . 788) (nil fontified nil 780 . 783) (nil fontified nil 775 . 780) (nil fontified nil 774 . 775) (nil fontified nil 771 . 774) (nil fontified nil 761 . 771) (nil fontified nil 760 . 761) (nil fontified nil 753 . 760) (nil fontified nil 752 . 753) (nil fontified nil 742 . 752) (nil fontified nil 741 . 742) (nil fontified nil 740 . 741) (nil fontified nil 735 . 740) (nil fontified nil 729 . 735) (nil fontified nil 726 . 729) (nil fontified nil 720 . 726) (nil fontified nil 719 . 720) (nil fontified nil 716 . 719) (nil fontified nil 706 . 716) (nil fontified nil 705 . 706) (nil fontified nil 699 . 705) (nil fontified nil 698 . 699) (nil fontified nil 688 . 698) (nil fontified nil 687 . 688) (nil fontified nil 686 . 687) (nil fontified nil 681 . 686) (nil fontified nil 674 . 681) (nil fontified nil 671 . 674) (nil fontified nil 664 . 671) (nil fontified nil 663 . 664) (nil fontified nil 660 . 663) (nil fontified nil 650 . 660) (nil fontified nil 649 . 650) (nil fontified nil 641 . 649) (nil fontified nil 640 . 641) (nil fontified nil 639 . 640) (nil fontified nil 634 . 639) (nil fontified nil 621 . 634) (nil fontified nil 618 . 621) (nil fontified nil 604 . 618) (nil fontified nil 603 . 604) (nil fontified nil 600 . 603) (nil fontified nil 590 . 600) (nil fontified nil 589 . 590) (nil fontified nil 588 . 589) (nil fontified nil 581 . 588) (nil fontified nil 580 . 581) (nil fontified nil 579 . 580) (nil fontified nil 574 . 579) (nil fontified nil 566 . 574) (nil fontified nil 563 . 566) (nil fontified nil 555 . 563) (nil fontified nil 554 . 555) (nil fontified nil 551 . 554) (nil fontified nil 543 . 551) (543 . 882)) nil (26052 65490 968593 736000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -543) 459) nil (26052 65490 968582 627000) 0 nil])
([nil nil ((876 . 884) (#("        " 0 8 (fontified nil)) . 875) (undo-tree-id605 . -8) (undo-tree-id606 . -8) (undo-tree-id607 . -8) (undo-tree-id608 . -8) (874 . 884)) nil (26052 65490 968581 221000) 0 nil])
([nil nil ((884 . 885)) nil (26052 65490 970843 148000) 0 nil])
([nil nil ((885 . 886)) nil (26052 65506 568670 163000) 0 nil] [nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 905 907 nil nil nil nil #s(yas--field 2 925 927 nil nil nil nil #s(yas--field 3 938 940 nil nil nil nil #s(yas--field 4 950 952 nil nil nil nil #s(yas--field 5 961 963 nil nil nil nil #s(yas--field 6 976 978 nil nil nil nil #s(yas--exit 980 nil))))))) #s(yas--field 2 925 927 nil nil nil nil #s(yas--field 3 938 940 nil nil nil nil #s(yas--field 4 950 952 nil nil nil nil #s(yas--field 5 961 963 nil nil nil nil #s(yas--field 6 976 978 nil nil nil nil #s(yas--exit 980 nil)))))) #s(yas--field 3 938 940 nil nil nil nil #s(yas--field 4 950 952 nil nil nil nil #s(yas--field 5 961 963 nil nil nil nil #s(yas--field 6 976 978 nil nil nil nil #s(yas--exit 980 nil))))) #s(yas--field 4 950 952 nil nil nil nil #s(yas--field 5 961 963 nil nil nil nil #s(yas--field 6 976 978 nil nil nil nil #s(yas--exit 980 nil)))) #s(yas--field 5 961 963 nil nil nil nil #s(yas--field 6 976 978 nil nil nil nil #s(yas--exit 980 nil))) #s(yas--field 6 976 978 nil nil nil nil #s(yas--exit 980 nil))) #s(yas--exit 980 nil) 44 nil #s(yas--field 1 905 907 nil nil nil nil #s(yas--field 2 925 927 nil nil nil nil #s(yas--field 3 938 940 nil nil nil nil #s(yas--field 4 950 952 nil nil nil nil #s(yas--field 5 961 963 nil nil nil nil #s(yas--field 6 976 978 nil nil nil nil #s(yas--exit 980 nil))))))) nil nil)) (884 . 980) (#("VkRender { instance: ${1:()}, debug_messager: ${2:()}, surface: ${3:()}, device: ${4:()}, queue: ${5:()}, swapchain: ${6:()} }$0" 0 128 (fontified nil)) . 884) (884 . 1012) (#("V" 0 1 (fontified nil)) . 884) (884 . 885) (#("VkRender {…}" 0 12 (fontified nil)) . -884) (884 . 896) (#("V" 0 1 (face font-lock-type-face fontified t)) . -884) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) 885) ((884 . 885) (#("VkRender {…}" 0 12 (fontified nil)) . 884) (884 . 896) (#("V" 0 1 (fontified nil)) . 884) (884 . 885) (#("VkRender { instance: ${1:()}, debug_messager: ${2:()}, surface: ${3:()}, device: ${4:()}, queue: ${5:()}, swapchain: ${6:()} }$0" 0 128 (fontified nil)) . 884) (884 . 1012) (#("VkRender { instance: (), debug_messager: (), surface: (), device: (), queue: (), swapchain: () }" 0 8 (face font-lock-type-face fontified t) 8 9 (fontified t) 9 10 (face (rainbow-delimiters-depth-3-face) fontified t) 10 11 (fontified t) 11 19 (face font-lock-variable-name-face fontified t) 19 21 (fontified t) 21 22 (face (rainbow-delimiters-depth-4-face) fontified t) 22 23 (face (rainbow-delimiters-depth-4-face) fontified t) 23 25 (fontified t) 25 39 (face font-lock-variable-name-face fontified t) 39 41 (fontified t) 41 42 (face (rainbow-delimiters-depth-4-face) fontified t) 42 43 (face (rainbow-delimiters-depth-4-face) fontified t) 43 45 (fontified t) 45 52 (face font-lock-variable-name-face fontified t) 52 54 (fontified t) 54 55 (face (rainbow-delimiters-depth-4-face) fontified t) 55 56 (face (rainbow-delimiters-depth-4-face) fontified t) 56 58 (fontified t) 58 64 (face font-lock-variable-name-face fontified t) 64 66 (fontified t) 66 67 (face (rainbow-delimiters-depth-4-face) fontified t) 67 68 (face (rainbow-delimiters-depth-4-face) fontified t) 68 70 (fontified t) 70 75 (face font-lock-variable-name-face fontified t) 75 77 (fontified t) 77 78 (face (rainbow-delimiters-depth-4-face) fontified t) 78 79 (face (rainbow-delimiters-depth-4-face) fontified t) 79 81 (fontified t) 81 90 (face font-lock-variable-name-face fontified t) 90 92 (fontified t) 92 93 (face (rainbow-delimiters-depth-4-face) fontified t) 93 94 (face (rainbow-delimiters-depth-4-face) fontified t) 94 95 (fontified t) 95 96 (face (rainbow-delimiters-depth-3-face) fontified t)) . 884) (undo-tree-id764 . -21) (undo-tree-id765 . -21) (undo-tree-id766 . -21) (apply yas--snippet-revive 884 980 #s(yas--snippet nil (#s(yas--field 1 905 907 nil nil nil nil #s(yas--field 2 925 927 nil nil nil nil #s(yas--field 3 938 940 nil nil nil nil #s(yas--field 4 950 952 nil nil nil nil #s(yas--field 5 961 963 nil nil nil nil #s(yas--field 6 976 978 nil nil nil nil #s(yas--exit 980 nil))))))) #s(yas--field 2 925 927 nil nil nil nil #s(yas--field 3 938 940 nil nil nil nil #s(yas--field 4 950 952 nil nil nil nil #s(yas--field 5 961 963 nil nil nil nil #s(yas--field 6 976 978 nil nil nil nil #s(yas--exit 980 nil)))))) #s(yas--field 3 938 940 nil nil nil nil #s(yas--field 4 950 952 nil nil nil nil #s(yas--field 5 961 963 nil nil nil nil #s(yas--field 6 976 978 nil nil nil nil #s(yas--exit 980 nil))))) #s(yas--field 4 950 952 nil nil nil nil #s(yas--field 5 961 963 nil nil nil nil #s(yas--field 6 976 978 nil nil nil nil #s(yas--exit 980 nil)))) #s(yas--field 5 961 963 nil nil nil nil #s(yas--field 6 976 978 nil nil nil nil #s(yas--exit 980 nil))) #s(yas--field 6 976 978 nil nil nil nil #s(yas--exit 980 nil))) #s(yas--exit 980 nil) 44 nil #s(yas--field 1 905 907 nil nil nil nil #s(yas--field 2 925 927 nil nil nil nil #s(yas--field 3 938 940 nil nil nil nil #s(yas--field 4 950 952 nil nil nil nil #s(yas--field 5 961 963 nil nil nil nil #s(yas--field 6 976 978 nil nil nil nil #s(yas--exit 980 nil))))))) nil nil))) (26052 65490 968572 375000) 0 nil])
([nil nil ((884 . 892) (#("Vk" 0 2 (fontified nil)) . 884) (884 . 886) (#("VkRender" 0 8 (fontified nil)) . -884) (884 . 892) (#("Vk" 0 2 (face font-lock-type-face fontified t)) . -884) (undo-tree-id799 . -1) (undo-tree-id800 . -2) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -2) (undo-tree-id813 . -2) (undo-tree-id814 . -2) (undo-tree-id815 . -2) 886) nil (26052 65506 568668 649000) 0 nil])
nil
([nil nil ((892 . 895)) nil (26052 65506 568655 655000) 0 nil])
([nil nil ((896 . 904) (#("            " 0 12 (fontified nil)) . 895) (undo-tree-id795 . -8) (undo-tree-id796 . -8) (undo-tree-id797 . -8) (undo-tree-id798 . -8) (903 . 907) (894 . 904)) nil (26052 65506 568654 842000) 0 nil])
([nil nil ((895 . 907)) nil (26052 65506 568651 244000) 0 nil])
([nil nil ((907 . 908)) nil (26052 65506 568650 712000) 0 nil])
([nil nil ((907 . 915) (#("i" 0 1 (fontified nil)) . 907) (907 . 908) (#("instance" 0 8 (fontified nil)) . -907) (907 . 915) (#("i" 0 1 (fontified t)) . -907) (undo-tree-id793 . -1) (undo-tree-id794 . -1) 908) nil (26052 65506 568649 651000) 0 nil])
([nil nil ((915 . 916)) nil (26052 65506 568647 152000) 0 nil])
([nil nil ((916 . 929)) nil (26052 65506 568646 583000) 0 nil])
([nil nil ((929 . 930)) nil (26052 65506 568646 32000) 0 nil])
([nil nil ((929 . 943) (#("d" 0 1 (fontified nil)) . 929) (929 . 930) (#("debug_messager" 0 14 (fontified nil)) . -929) (929 . 943) (#("d" 0 1 (fontified t)) . -929) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) 930) nil (26052 65506 568644 795000) 0 nil])
([nil nil ((943 . 944)) nil (26052 65506 568640 331000) 0 nil])
([nil nil ((944 . 957)) nil (26052 65506 568639 780000) 0 nil])
([nil nil ((957 . 958)) nil (26052 65506 568639 218000) 0 nil])
([nil nil ((957 . 964) (#("s" 0 1 (fontified nil)) . 957) (957 . 958) (#("surface" 0 7 (fontified nil)) . -957) (957 . 964) (#("s" 0 1 (fontified t)) . -957) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) 958) nil (26052 65506 568637 816000) 0 nil])
([nil nil ((964 . 965)) nil (26052 65506 568633 683000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -964) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) 965) nil (26052 65506 568632 900000) 0 nil])
([nil nil ((964 . 965)) nil (26052 65506 568628 839000) 0 nil])
([nil nil ((965 . 978)) nil (26052 65506 568628 284000) 0 nil])
([nil nil ((978 . 979)) nil (26052 65506 568627 496000) 0 nil])
([nil nil ((978 . 984) (#("d" 0 1 (fontified nil)) . 978) (978 . 979) (#("device" 0 6 (fontified nil)) . -978) (978 . 984) (#("d" 0 1 (fontified t)) . -978) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) 979) nil (26052 65506 568625 677000) 0 nil])
([nil nil ((984 . 985)) nil (26052 65506 568617 617000) 0 nil])
([nil nil ((985 . 998)) nil (26052 65506 568616 710000) 0 nil])
([nil nil ((998 . 999)) nil (26052 65506 568615 881000) 0 nil])
([nil nil ((998 . 1003) (#("q" 0 1 (fontified nil)) . 998) (998 . 999) (#("queue" 0 5 (fontified nil)) . -998) (998 . 1003) (#("q" 0 1 (fontified t)) . -998) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) 999) nil (26052 65506 568614 108000) 0 nil])
([nil nil ((1003 . 1004)) nil (26052 65506 568608 161000) 0 nil])
([nil nil ((1004 . 1017)) nil (26052 65506 568607 263000) 0 nil])
([nil nil ((1017 . 1018)) nil (26052 65506 568606 158000) 0 nil])
([nil nil ((1017 . 1026) (#("s" 0 1 (fontified nil)) . 1017) (1017 . 1018) (#("swapchain" 0 9 (fontified nil)) . -1017) (1017 . 1026) (#("s" 0 1 (fontified t)) . -1017) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) 1018) nil (26052 65506 568602 906000) 0 nil])
([nil nil ((1026 . 1027)) nil (26052 65506 568590 991000) 0 nil])
([nil nil ((1046 . 1047) (t 26052 65506 580571 309000)) nil (26053 9 836180 929000) 0 nil])
([nil nil ((1047 . 1049)) nil (26053 9 836180 238000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1052 1069 nil nil nil t #s(yas--exit 1076 nil))) #s(yas--exit 1076 nil) 45 nil #s(yas--field 1 1052 1069 nil nil nil t #s(yas--exit 1076 nil)) nil nil)) (1047 . 1061) (#("impl $1 {
    $0
}" 0 18 (fontified nil)) . 1047) (1047 . 1065) (#("im" 0 2 (fontified nil)) . 1047) (1047 . 1049) (#("impl" 0 4 (fontified nil)) . -1047) (1047 . 1051) (#("im" 0 2 (fontified t)) . -1047) (undo-tree-id865 . -2) (undo-tree-id866 . -1) (undo-tree-id867 . -2) (undo-tree-id868 . -2) (undo-tree-id869 . -2) (undo-tree-id870 . -2) 1049) nil (26053 9 836178 863000) 0 nil])
([nil nil ((1052 . 1054)) nil (26053 9 836173 653000) 0 nil])
([nil nil ((1052 . 1056) (#("Dr" 0 2 (fontified nil)) . 1052) (undo-tree-id853 . -2) (1052 . 1054) (#("Drop" 0 4 (fontified nil)) . -1052) (undo-tree-id854 . -4) (1052 . 1056) (#("Dr" 0 2 (face font-lock-type-face fontified t)) . -1052) (undo-tree-id855 . -2) (undo-tree-id856 . -2) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -2) (undo-tree-id862 . -2) (undo-tree-id863 . -2) (undo-tree-id864 . -2) 1054) nil (26053 9 836172 406000) 0 nil])
([nil nil ((1056 . 1059)) nil (26053 9 836164 385000) 0 nil])
([nil nil ((apply yas--snippet-revive 1057 1060 #s(yas--snippet nil nil nil 46 nil nil #s(yas--field 1 1052 1069 nil nil nil t #s(yas--exit 1076 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 46 nil nil #s(yas--field 1 1052 1069 nil nil nil t #s(yas--exit 1076 nil)) nil)) (1057 . 1060) (#("for" 0 3 (fontified nil)) . 1057) (undo-tree-id843 . -3) (1057 . 1060) (#("fo" 0 2 (fontified nil)) . 1057) (undo-tree-id844 . -2) (1057 . 1059) (#("for" 0 3 (fontified nil)) . -1057) (undo-tree-id845 . -3) (1057 . 1060) (#("fo" 0 2 (fontified t)) . -1057) (undo-tree-id846 . -2) (undo-tree-id847 . -2) (undo-tree-id848 . -1) (undo-tree-id849 . -2) (undo-tree-id850 . -2) (undo-tree-id851 . -2) (undo-tree-id852 . -2) 1059) nil (26053 9 836162 979000) 0 nil])
([nil nil ((1060 . 1063)) nil (26053 9 836155 131000) 0 nil])
([nil nil ((#("v" 0 1 (face font-lock-variable-name-face fontified t)) . -1061) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (#("k" 0 1 (face font-lock-variable-name-face fontified t)) . -1062) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) 1063) nil (26053 9 836153 809000) 0 nil])
([nil nil ((1061 . 1062)) nil (26053 9 836141 878000) 0 nil])
([nil nil ((1061 . 1069) (#("V" 0 1 (fontified nil)) . 1061) (undo-tree-id818 . -1) (1061 . 1062) (#("VkRender" 0 8 (fontified nil)) . -1061) (undo-tree-id819 . -8) (1061 . 1069) (#("V" 0 1 (face font-lock-type-face fontified t)) . -1061) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) 1062) nil (26053 9 836140 728000) 0 nil])
([nil nil ((apply yas--snippet-revive 1047 1078 #s(yas--snippet nil (#s(yas--field 1 1052 1069 nil nil nil t #s(yas--exit 1076 nil))) #s(yas--exit 1076 nil) 45 nil #s(yas--field 1 1052 1069 nil nil nil t #s(yas--exit 1076 nil)) nil nil))) nil (26053 9 836134 406000) 0 nil])
([nil nil ((1076 . 1077)) nil (26053 9 836133 684000) 0 nil])
([nil nil ((apply yas--snippet-revive 1076 1111 #s(yas--snippet nil nil #s(yas--exit 1105 nil) 47 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1105 nil) 47 nil nil nil nil)) (1076 . 1111) (#("fn drop(&mut self) {
        $0
    }" 0 37 (fontified nil)) . 1076) (1108 . 1112) (1097 . 1105) (#("    " 0 4 (fontified nil)) . 1097) (1076 . 1105) (#("f" 0 1 (fontified nil)) . 1076) (1076 . 1077) (#("fn drop(..)" 0 11 (fontified nil)) . -1076) (1076 . 1087) (#("f" 0 1 (fontified t)) . -1076) (undo-tree-id816 . -1) (undo-tree-id817 . -1) 1077) nil (26053 9 836132 190000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1505 . 1506) (nil fontified nil 1505 . 1506) (nil fontified nil 1504 . 1505) (nil fontified nil 1503 . 1504) (nil fontified nil 1489 . 1503) (nil fontified nil 1485 . 1489) (nil fontified nil 1475 . 1485) (nil fontified nil 1474 . 1475) (nil fontified nil 1473 . 1474) (nil fontified nil 1453 . 1473) (nil fontified nil 1449 . 1453) (nil fontified nil 1439 . 1449) (nil fontified nil 1438 . 1439) (nil fontified nil 1437 . 1438) (nil fontified nil 1424 . 1437) (nil fontified nil 1420 . 1424) (nil fontified nil 1410 . 1420) (nil fontified nil 1409 . 1410) (nil fontified nil 1408 . 1409) (nil fontified nil 1396 . 1408) (nil fontified nil 1392 . 1396) (nil fontified nil 1384 . 1392) (nil fontified nil 1383 . 1384) (nil fontified nil 1382 . 1383) (nil fontified nil 1381 . 1382) (nil fontified nil 1380 . 1381) (nil fontified nil 1376 . 1380) (nil fontified nil 1366 . 1376) (nil fontified nil 1365 . 1366) (nil fontified nil 1361 . 1365) (nil fontified nil 1353 . 1361) (nil fontified nil 1352 . 1353) (nil fontified nil 1351 . 1352) (nil fontified nil 1343 . 1351) (nil fontified nil 1342 . 1343) (nil fontified nil 1341 . 1342) (nil fontified nil 1329 . 1341) (nil fontified nil 1327 . 1329) (nil fontified nil 1326 . 1327) (nil fontified nil 1322 . 1326) (nil fontified nil 1311 . 1322) (nil fontified nil 1310 . 1311) (nil fontified nil 1291 . 1310) (nil fontified nil 1277 . 1291) (nil fontified nil 1269 . 1277) (nil fontified nil 1265 . 1269) (nil fontified nil 1248 . 1265) (nil fontified nil 1247 . 1248) (nil fontified nil 1246 . 1247) (nil fontified nil 1245 . 1246) (nil fontified nil 1244 . 1245) (nil fontified nil 1239 . 1244) (nil fontified nil 1219 . 1239) (nil fontified nil 1208 . 1219) (nil fontified nil 1204 . 1208) (nil fontified nil 1203 . 1204) (nil fontified nil 1201 . 1203) (nil fontified nil 1191 . 1201) (nil fontified nil 1190 . 1191) (nil fontified nil 1189 . 1190) (nil fontified nil 1186 . 1189) (nil fontified nil 1174 . 1186) (nil fontified nil 1173 . 1174) (nil fontified nil 1172 . 1173) (nil fontified nil 1171 . 1172) (nil fontified nil 1165 . 1171) (nil fontified nil 1157 . 1165) (nil fontified nil 1156 . 1157) (nil fontified nil 1155 . 1156) (nil fontified nil 1154 . 1155) (nil fontified nil 1128 . 1154) (nil fontified nil 1127 . 1128) (nil fontified nil 1122 . 1127) (nil fontified nil 1120 . 1122) (nil fontified nil 1113 . 1120) (nil fontified nil 1105 . 1113) (1105 . 1506)) nil (26053 9 836122 69000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -1105) 1046) nil (26053 9 836111 515000) 0 nil])
([nil current ((1506 . 1507) 1046) nil (26053 9 836107 183000) 0 nil])
nil
