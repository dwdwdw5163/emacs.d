(undo-tree-save-format-version . 1)
"42593bbf3de1e6683b0ecf697fb63d7c7aaba774"
[nil nil nil nil (26039 43822 10028 853000) 0 nil]
([nil nil ((1 . 4) (t 26039 43769 19462 404000)) nil (26039 43822 10027 851000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -2) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (#("]" 0 1 (face (rainbow-delimiters-unmatched-face) fontified t)) . -3) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) 4) nil (26039 43822 10026 637000) 0 nil])
([nil nil ((2 . 4)) nil (26039 43822 10020 879000) 0 nil])
([nil nil ((3 . 5)) nil (26039 43822 10020 311000) 0 nil])
([nil nil ((#("predicate" 0 9 (face font-lock-preprocessor-face fontified t)) . 7) (undo-tree-id37 . -9) (apply yas--snippet-revive 3 17 #s(yas--snippet nil (#s(yas--field 0 7 16 nil nil nil nil nil)) nil 5 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 0 7 16 nil nil nil nil nil)) nil 5 nil nil nil nil)) (3 . 17) (#("cfg(${0:predicate})" 0 19 (fontified nil)) . 3) (3 . 22) (#("cf" 0 2 (fontified nil)) . 3) (3 . 5) (#("cfg(â€¦)" 0 6 (fontified nil)) . -3) (3 . 9) (#("cf" 0 2 (face font-lock-preprocessor-face fontified t)) . -3) (undo-tree-id38 . -2) (undo-tree-id39 . -1) (undo-tree-id40 . -2) (undo-tree-id41 . -2) 5) nil (26039 43822 10018 710000) 0 nil])
([nil nil ((7 . 12)) nil (26039 43822 10013 541000) 0 nil])
([nil nil ((14 . 15)) nil (26039 43822 10012 976000) 0 nil])
([nil nil ((15 . 23)) nil (26039 43822 10012 366000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-preprocessor-face fontified t)) . -11) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) 12) nil (26039 43822 10011 484000) 0 nil])
([nil nil ((22 . 26)) nil (26039 43822 10008 296000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . 26) (26 . 30) (25 . 27)) nil (26039 43822 10007 602000) 0 nil])
([nil nil ((26 . 30)) nil (26039 43822 10006 768000) 0 nil])
([nil nil ((30 . 31)) nil (26039 43822 10006 293000) 0 nil])
([nil nil ((31 . 33)) nil (26039 43822 10005 810000) 0 nil])
([nil nil ((32 . 36)) nil (26039 43822 10005 297000) 0 nil])
([nil nil ((37 . 42)) nil (26039 43822 10004 837000) 0 nil])
([nil nil ((42 . 45)) nil (26039 43822 10004 313000) 0 nil])
([nil nil ((45 . 46)) nil (26039 43822 10003 783000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-function-name-face fontified t)) . -45) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) 46) nil (26039 43822 10002 862000) 0 nil])
([nil nil ((45 . 46)) nil (26039 43822 9999 661000) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-function-name-face fontified t)) . -45) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) 46) nil (26039 43822 9998 748000) 0 nil])
([nil nil ((45 . 56)) nil (26039 43822 9995 152000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -53) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -54) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (#(" " 0 1 (fontified t)) . -55) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) 56) nil (26039 43822 9992 779000) 0 nil])
([nil nil ((53 . 58)) nil (26039 43822 9959 202000) 0 nil])
([nil nil ((57 . 62)) nil (26039 43822 9957 854000) 0 nil])
([nil nil ((65 . 66) 62) nil (26039 43822 9953 902000) 0 nil])
([nil nil ((59 . 67) (#("        " 0 8 (fontified nil)) . 58) (undo-tree-id643 . -8) (57 . 67) (t 26039 43822 52792 645000)) nil (26039 52803 411405 770000) 0 nil])
([nil nil ((58 . 66)) nil (26039 52803 411404 111000) 0 nil])
([nil nil ((nil rear-nonsticky nil 80 . 81) (nil fontified nil 66 . 81) (66 . 81)) nil (26039 52803 411403 398000) 0 nil])
([nil nil ((81 . 90)) nil (26039 52803 411402 517000) 0 nil])
([nil nil ((90 . 91)) nil (26039 52803 411401 930000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -90) (undo-tree-id642 . -1) 91) nil (26039 52803 411401 265000) 0 nil])
([nil nil ((90 . 94)) nil (26039 52803 411399 826000) 0 nil])
([nil nil ((94 . 98)) nil (26039 52803 411399 172000) 0 nil])
([nil nil ((#("R" 0 1 (face font-lock-type-face fontified t)) . -94) (undo-tree-id640 . -1) (undo-tree-id641 . -1) 95) nil (26039 52803 411398 63000) 0 nil])
([nil nil ((94 . 95)) nil (26039 52803 411396 8000) 0 nil])
([nil nil ((95 . 98)) nil (26039 52803 411395 417000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -95) (undo-tree-id637 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -96) (undo-tree-id638 . -1) (#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -97) (undo-tree-id639 . -1) 98) nil (26039 52803 411394 512000) 0 nil])
([nil nil ((95 . 97)) nil (26039 52803 411391 536000) 0 nil])
([nil nil ((#("p" 0 1 (face font-lock-variable-name-face fontified t)) . -95) (undo-tree-id635 . -1) (#("o" 0 1 (face font-lock-variable-name-face fontified t)) . -96) (undo-tree-id636 . -1) 97) nil (26039 52803 411390 722000) 0 nil])
([nil nil ((95 . 103)) nil (26039 52803 411388 281000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -102) (undo-tree-id634 . -1) 103) nil (26039 52803 411387 578000) 0 nil])
([nil nil ((102 . 106)) nil (26039 52803 411386 176000) 0 nil])
([nil nil ((#("M" 0 1 (face font-lock-variable-name-face fontified t)) . -103) (undo-tree-id631 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -104) (undo-tree-id632 . -1) (#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -105) (undo-tree-id633 . -1) 106) nil (26039 52803 411385 252000) 0 nil])
([nil nil ((103 . 106)) nil (26039 52803 411382 328000) 0 nil])
([nil nil ((#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -103) (undo-tree-id628 . -1) (#("m" 0 1 (face font-lock-variable-name-face fontified t)) . -104) (undo-tree-id629 . -1) (#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -105) (undo-tree-id630 . -1) 106) nil (26039 52803 411381 361000) 0 nil])
([nil nil ((103 . 109)) nil (26039 52803 411378 5000) 0 nil])
([nil nil ((111 . 120)) nil (26039 52803 411377 412000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-type-face fontified t)) . -114) (undo-tree-id622 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -115) (undo-tree-id623 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -116) (undo-tree-id624 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -117) (undo-tree-id625 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -118) (undo-tree-id626 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -119) (undo-tree-id627 . -1) 120) nil (26039 52803 411376 182000) 0 nil])
([nil nil ((114 . 120)) nil (26039 52803 411371 38000) 0 nil])
([nil nil ((30 . 60) (112 . 112) (112 . 121) (#("Rotation" 0 8 (fontified nil)) . 112) (112 . 120) (#("Rotation3 (use nalgebra::Rotation3)" 0 35 (fontified nil)) . -112) (112 . 147) (#("Rotation" 0 8 (face font-lock-type-face fontified t)) . -112) (undo-tree-id609 . -8) (undo-tree-id610 . -4) (undo-tree-id611 . -5) (undo-tree-id612 . -5) (undo-tree-id613 . -6) (undo-tree-id614 . -6) (undo-tree-id615 . -7) (undo-tree-id616 . -7) (undo-tree-id617 . -8) (undo-tree-id618 . -8) (undo-tree-id619 . -8) (undo-tree-id620 . -8) (undo-tree-id621 . -8) 120) nil (26039 52803 411369 529000) 0 nil])
([nil nil ((151 . 157)) nil (26039 52803 411359 500000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -154) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (#("r" 0 1 (fontified t)) . -155) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (#("i" 0 1 (fontified t)) . -156) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) 157) nil (26039 52803 411357 768000) 0 nil])
([nil nil ((154 . 155)) nil (26039 52803 411340 73000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -154) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) 155) nil (26039 52803 411339 121000) 0 nil])
([nil nil ((154 . 157)) nil (26039 52803 411334 529000) 0 nil])
([nil nil ((153 . 168) (#("from" 0 4 (fontified nil)) . 153) (153 . 157) (#("from_axis_angle" 0 15 (fontified nil)) . -153) (153 . 168) (#("from" 0 4 (fontified t)) . -153) (undo-tree-id544 . -4) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -2) (undo-tree-id569 . -2) (undo-tree-id570 . -2) (undo-tree-id571 . -3) (undo-tree-id572 . -3) (undo-tree-id573 . -4) (undo-tree-id574 . -4) (undo-tree-id575 . -4) (undo-tree-id576 . -4) (undo-tree-id577 . -4) 157) nil (26039 52803 411332 402000) 0 nil])
([nil nil ((168 . 170)) nil (26039 52803 411308 282000) 0 nil])
([nil nil ((169 . 179)) nil (26039 52803 411307 617000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -177) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (#("z" 0 1 (fontified t)) . -178) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) 179) nil (26039 52803 411305 179000) 0 nil])
([nil nil ((177 . 179)) nil (26039 52803 411260 411000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -176) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (#(":" 0 1 (fontified t)) . -177) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (#(":" 0 1 (fontified t)) . -178) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) 179) nil (26039 52803 411257 799000) 0 nil])
([nil nil ((176 . 179)) nil (26039 52803 411217 621000) 0 nil])
([nil nil ((179 . 180)) nil (26039 52803 411216 934000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -179) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) 180) nil (26039 52803 411215 973000) 0 nil])
([nil nil ((179 . 180)) nil (26039 52803 411212 524000) 0 nil])
([nil nil ((#("3" 0 1 (face font-lock-type-face fontified t)) . -175) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (#(":" 0 1 (fontified t)) . -176) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (#(":" 0 1 (fontified t)) . -177) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (#("z" 0 1 (fontified t)) . -178) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (#("_" 0 1 (fontified t)) . -179) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) 180) nil (26039 52803 411203 495000) 0 nil])
([nil nil ((175 . 176)) nil (26039 52803 410078 874000) 0 nil])
([nil nil ((44 . 45) (53 . 63) (169 . 169) (169 . 176) (#("Vector3" 0 7 (fontified nil)) . 169) (169 . 176) (#("Vector3 (use nalgebra::Vector3)" 0 31 (fontified nil)) . -169) (169 . 200) (#("Vector3" 0 7 (face font-lock-type-face fontified t)) . -169) (undo-tree-id79 . -3) (undo-tree-id80 . -6) (undo-tree-id81 . -7) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -2) (undo-tree-id86 . -2) (undo-tree-id87 . -3) (undo-tree-id88 . -3) (undo-tree-id89 . -4) (undo-tree-id90 . -4) (undo-tree-id91 . -5) (undo-tree-id92 . -5) (undo-tree-id93 . -6) (undo-tree-id94 . -6) (undo-tree-id95 . -6) (undo-tree-id96 . -6) (undo-tree-id97 . -6) (undo-tree-id98 . -6) (undo-tree-id99 . -6) (undo-tree-id100 . -6) (undo-tree-id101 . -6) (undo-tree-id102 . -6) (undo-tree-id103 . -6) (undo-tree-id104 . -6) (undo-tree-id105 . -6) (undo-tree-id106 . -6) (undo-tree-id107 . -6) (undo-tree-id108 . -6) (undo-tree-id109 . -6) (undo-tree-id110 . -6) (undo-tree-id111 . -6) (undo-tree-id112 . -6) (undo-tree-id113 . -6) (undo-tree-id114 . -6) (undo-tree-id115 . -6) (undo-tree-id116 . -6) (undo-tree-id117 . -6) (undo-tree-id118 . -6) (undo-tree-id119 . -6) (undo-tree-id120 . -6) (undo-tree-id121 . -6) (undo-tree-id122 . -6) (undo-tree-id123 . -6) (undo-tree-id124 . -6) (undo-tree-id125 . -6) (undo-tree-id126 . -6) (undo-tree-id127 . -6) (undo-tree-id128 . -6) (undo-tree-id129 . -6) (undo-tree-id130 . -6) (undo-tree-id131 . -6) (undo-tree-id132 . -6) (undo-tree-id133 . -6) (undo-tree-id134 . -6) (undo-tree-id135 . -6) (undo-tree-id136 . -6) (undo-tree-id137 . -6) (undo-tree-id138 . -6) (undo-tree-id139 . -6) (undo-tree-id140 . -6) (undo-tree-id141 . -6) (undo-tree-id142 . -6) (undo-tree-id143 . -6) (undo-tree-id144 . -6) (undo-tree-id145 . -6) (undo-tree-id146 . -6) (undo-tree-id147 . -6) (undo-tree-id148 . -6) (undo-tree-id149 . -6) (undo-tree-id150 . -6) (undo-tree-id151 . -6) (undo-tree-id152 . -6) (undo-tree-id153 . -6) (undo-tree-id154 . -6) (undo-tree-id155 . -6) (undo-tree-id156 . -6) (undo-tree-id157 . -6) (undo-tree-id158 . -6) (undo-tree-id159 . -6) (undo-tree-id160 . -6) (undo-tree-id161 . -6) (undo-tree-id162 . -6) (undo-tree-id163 . -6) (undo-tree-id164 . -6) (undo-tree-id165 . -6) (undo-tree-id166 . -6) (undo-tree-id167 . -6) (undo-tree-id168 . -6) (undo-tree-id169 . -6) (undo-tree-id170 . -6) (undo-tree-id171 . -6) (undo-tree-id172 . -6) (undo-tree-id173 . -6) (undo-tree-id174 . -3) (undo-tree-id175 . -3) (undo-tree-id176 . -3) (undo-tree-id177 . -3) (undo-tree-id178 . -3) (undo-tree-id179 . -3) (undo-tree-id180 . -3) (undo-tree-id181 . -6) (undo-tree-id182 . -6) (undo-tree-id183 . -6) (undo-tree-id184 . -6) (undo-tree-id185 . -6) (undo-tree-id186 . -6) (undo-tree-id187 . -6) (undo-tree-id188 . -6) (undo-tree-id189 . -6) (undo-tree-id190 . -6) (undo-tree-id191 . -6) (undo-tree-id192 . -6) (undo-tree-id193 . -6) (undo-tree-id194 . -6) (undo-tree-id195 . -6) (undo-tree-id196 . -6) (undo-tree-id197 . -6) (undo-tree-id198 . -6) (undo-tree-id199 . -7) (undo-tree-id200 . -7) (undo-tree-id201 . -7) (undo-tree-id202 . -7) (undo-tree-id203 . -7) 176) nil (26039 52803 410072 985000) 0 nil])
([nil nil ((187 . 190)) nil (26039 52803 409564 194000) 0 nil])
([nil nil ((apply yas--snippet-revive 189 197 #s(yas--snippet nil nil #s(yas--exit 197 nil) 93 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 197 nil) 93 nil nil nil nil)) (189 . 197) (#("z_axis()$0" 0 10 (fontified nil)) . 189) (189 . 199) (#("z" 0 1 (fontified nil)) . 189) (189 . 190) (#("z_axis()" 0 8 (fontified nil)) . -189) (189 . 197) (#("z" 0 1 (fontified t)) . -189) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) 190) nil (26039 52803 409562 454000) 0 nil])
([nil nil ((197 . 199)) nil (26039 52803 409552 451000) 0 nil])
([nil nil ((199 . 201)) nil (26039 52803 409551 800000) 0 nil])
([nil nil ((30 . 61) (199 . 199) (199 . 201) (#("PI" 0 2 (fontified nil)) . 199) (199 . 201) (#("PI (use std::f64::consts::PI)" 0 29 (fontified nil)) . -199) (199 . 228) (#("PI" 0 2 (face font-lock-type-face fontified t)) . -199) (undo-tree-id50 . -1) (undo-tree-id51 . -2) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -2) (undo-tree-id62 . -2) (undo-tree-id63 . -2) (undo-tree-id64 . -2) (undo-tree-id65 . -2) (undo-tree-id66 . -2) 201) nil (26039 52803 409549 173000) 0 nil])
([nil nil ((232 . 236)) nil (26039 52803 409511 265000) 0 nil])
([nil nil ((237 . 238)) nil (26039 52803 409507 152000) 0 nil])
([nil nil ((211 . 212) (t 26039 52803 425606 458000)) nil (26039 52807 402759 570000) 0 nil])
([nil nil ((240 . 248) (#(" " 0 1 (fontified nil)) . 240) (239 . 240) (t 26039 52807 415606 228000)) nil (26039 52915 130848 192000) 0 nil])
([nil nil ((248 . 258)) nil (26039 52915 130846 997000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -255) (undo-tree-id681 . -1) (#("=" 0 1 (fontified t)) . -256) (undo-tree-id682 . -1) (#(" " 0 1 (fontified t)) . -257) (undo-tree-id683 . -1) 258) nil (26039 52915 130845 884000) 0 nil])
([nil nil ((255 . 261)) nil (26039 52915 130842 686000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -260) (undo-tree-id680 . -1) 261) nil (26039 52915 130841 898000) 0 nil])
([nil nil ((260 . 263)) nil (26039 52915 130840 426000) 0 nil])
([nil nil ((61 . 83) (260 . 260) (260 . 263) (#("SO3" 0 3 (fontified nil)) . 260) (260 . 263) (#("SO3 (use lib_lie::SO3)" 0 22 (fontified nil)) . -260) (260 . 282) (#("SO3" 0 3 (face font-lock-type-face fontified t)) . -260) (undo-tree-id679 . -3) 263) nil (26039 52915 130839 248000) 0 nil])
([nil nil ((285 . 287)) nil (26039 52915 130836 551000) 0 nil])
([nil nil ((287 . 289)) nil (26039 52915 130835 890000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -287) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (#("r" 0 1 (fontified t)) . -288) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) 289) nil (26039 52915 130834 412000) 0 nil])
([nil nil ((287 . 291)) nil (26039 52915 130822 371000) 0 nil])
([nil nil ((287 . 307) (#("from" 0 4 (fontified nil)) . 287) (287 . 291) (#("from_rotation_matrix" 0 20 (fontified nil)) . -287) (287 . 307) (#("from" 0 4 (fontified t)) . -287) (undo-tree-id650 . -4) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -2) (undo-tree-id655 . -2) (undo-tree-id656 . -3) (undo-tree-id657 . -3) (undo-tree-id658 . -4) (undo-tree-id659 . -4) (undo-tree-id660 . -4) (undo-tree-id661 . -4) (undo-tree-id662 . -4) 291) nil (26039 52915 130820 697000) 0 nil])
([nil nil ((307 . 309)) nil (26039 52915 130809 877000) 0 nil])
([nil nil ((308 . 309)) nil (26039 52915 130809 44000) 0 nil])
([nil nil ((308 . 323) (#("r" 0 1 (fontified nil)) . 308) (308 . 309) (#("rotation_matrix" 0 15 (fontified nil)) . -308) (308 . 323) (#("r" 0 1 (fontified t)) . -308) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) 309) nil (26039 52915 130806 8000) 0 nil])
([nil nil ((324 . 325)) nil (26039 52915 130788 49000) 0 nil])
([nil nil ((325 . 334) (t 26039 52915 142266 706000)) nil (26039 53015 402124 537000) 0 nil])
([nil nil ((334 . 339)) nil (26039 53015 402123 783000) 0 nil])
([nil nil ((#("q" 0 1 (face font-lock-variable-name-face fontified t)) . -338) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) 339) nil (26039 53015 402122 825000) 0 nil])
([nil nil ((338 . 343)) nil (26039 53015 402118 601000) 0 nil])
([nil nil ((343 . 344)) nil (26039 53015 402117 967000) 0 nil])
([nil nil ((#("Q" 0 1 (face font-lock-type-face fontified t)) . -343) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) 344) nil (26039 53015 402117 26000) 0 nil])
([nil nil ((343 . 347)) nil (26039 53015 402111 846000) 0 nil])
([nil nil ((116 . 132) (343 . 343) (343 . 357) (#("Unit" 0 4 (fontified nil)) . 343) (343 . 347) (#("UnitQuaternion (use nalgebra::UnitQuaternion)" 0 45 (fontified nil)) . -343) (343 . 388) (#("Unit" 0 4 (face font-lock-type-face fontified t)) . -343) (undo-tree-id703 . -4) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -2) (undo-tree-id707 . -2) (undo-tree-id708 . -3) (undo-tree-id709 . -3) (undo-tree-id710 . -3) (undo-tree-id711 . -4) (undo-tree-id712 . -4) (undo-tree-id713 . -4) (undo-tree-id714 . -4) (undo-tree-id715 . -4) (undo-tree-id716 . -4) 347) nil (26039 53015 402110 243000) 0 nil])
([nil nil ((373 . 379)) nil (26039 53015 402099 588000) 0 nil])
([nil nil ((375 . 395) (#("from" 0 4 (fontified nil)) . 375) (375 . 379) (#("from_rotation_matrix" 0 20 (fontified nil)) . -375) (375 . 395) (#("from" 0 4 (fontified t)) . -375) (undo-tree-id690 . -4) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -2) (undo-tree-id695 . -2) (undo-tree-id696 . -3) (undo-tree-id697 . -3) (undo-tree-id698 . -4) (undo-tree-id699 . -4) (undo-tree-id700 . -4) (undo-tree-id701 . -4) (undo-tree-id702 . -4) 379) nil (26039 53015 402098 233000) 0 nil])
([nil nil ((395 . 397)) nil (26039 53015 402089 21000) 0 nil])
([nil nil ((396 . 397)) nil (26039 53015 402088 266000) 0 nil])
([nil nil ((396 . 411) (#("r" 0 1 (fontified nil)) . 396) (396 . 397) (#("rotation_matrix" 0 15 (fontified nil)) . -396) (396 . 411) (#("r" 0 1 (fontified t)) . -396) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) 397) nil (26039 53015 402085 700000) 0 nil])
([nil nil ((412 . 413)) nil (26039 53015 402069 463000) 0 nil])
([nil nil ((396 . 397) (t 26039 53015 415594 284000)) nil (26039 53018 543910 114000) 0 nil])
([nil nil ((414 . 423)) nil (26039 53018 543905 943000) 0 nil])
([nil nil ((423 . 436) (t 26039 53018 545594 104000)) nil (26039 53031 332241 997000) 0 nil])
([nil nil ((435 . 438) (#("S" 0 1 (fontified nil)) . 435) (435 . 436) (#("SO3" 0 3 (fontified nil)) . -435) (435 . 438) (#("S" 0 1 (face font-lock-type-face fontified t)) . -435) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) 436) nil (26039 53031 332240 479000) 0 nil])
([nil nil ((438 . 444)) nil (26039 53031 332234 423000) 0 nil])
([nil nil ((440 . 460) (#("from" 0 4 (fontified nil)) . 440) (440 . 444) (#("from_unit_quaternion" 0 20 (fontified nil)) . -440) (440 . 460) (#("from" 0 4 (fontified t)) . -440) (undo-tree-id736 . -4) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -2) (undo-tree-id741 . -2) (undo-tree-id742 . -3) (undo-tree-id743 . -3) (undo-tree-id744 . -4) (undo-tree-id745 . -4) (undo-tree-id746 . -4) (undo-tree-id747 . -4) (undo-tree-id748 . -4) 444) nil (26039 53031 332232 444000) 0 nil])
([nil nil ((460 . 462)) nil (26039 53031 332221 707000) 0 nil])
([nil nil ((461 . 462)) nil (26039 53031 332220 938000) 0 nil])
([nil nil ((461 . 463) (#("u" 0 1 (fontified nil)) . 461) (461 . 462) (#("uq" 0 2 (fontified nil)) . -461) (461 . 463) (#("u" 0 1 (fontified t)) . -461) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) 462) nil (26039 53031 332218 366000) 0 nil])
([nil nil ((464 . 465)) nil (26039 53031 332202 503000) 0 nil])
([nil nil ((467 . 475) (#("        " 0 8 (fontified nil)) . 466) (undo-tree-id851 . -8) (465 . 475) (t 26039 53031 345593 365000)) nil (26039 53355 531048 904000) 0 nil])
([nil nil ((475 . 483)) nil (26039 53355 531047 202000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -482) (undo-tree-id850 . -1) 483) nil (26039 53355 531046 471000) 0 nil])
([nil nil ((482 . 483)) nil (26039 53355 531045 140000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -481) (undo-tree-id848 . -1) (#("c" 0 1 (fontified t)) . -482) (undo-tree-id849 . -1) 483) nil (26039 53355 531044 246000) 0 nil])
([nil nil ((481 . 482)) nil (26039 53355 531041 895000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -481) (undo-tree-id847 . -1) 482) nil (26039 53355 531041 210000) 0 nil])
([nil nil ((481 . 482)) nil (26039 53355 531039 960000) 0 nil])
([nil nil ((#("assert_" 0 7 (fontified t)) . -475) (undo-tree-id845 . -7) (undo-tree-id846 . -7) 482) nil (26039 53355 531039 228000) 0 nil])
([nil nil ((475 . 476)) nil (26039 53355 531037 278000) 0 nil])
([nil nil ((#("q" 0 1 (fontified t)) . -475) (undo-tree-id844 . -1) 476) nil (26039 53355 531036 564000) 0 nil])
([nil nil ((475 . 478)) nil (26039 53355 531035 164000) 0 nil])
([nil nil ((apply yas--snippet-revive 475 487 #s(yas--snippet nil nil #s(yas--exit 486 nil) 98 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 486 nil) 98 nil nil nil nil)) (475 . 487) (#("assert_eq!($0)" 0 14 (fontified nil)) . 475) (475 . 489) (#("assert_" 0 7 (fontified nil)) . 475) (475 . 482) (#("assert_eq!(â€¦)" 0 13 (fontified nil)) . -475) (475 . 488) (#("ass" 0 3 (fontified t)) . -475) (undo-tree-id843 . -3) 478) nil (26039 53355 531034 1000) 0 nil])
([nil nil ((#("eq!(" 0 3 (face font-lock-preprocessor-face fontified t) 3 4 (face (rainbow-delimiters-depth-3-face) fontified t)) . -482) (undo-tree-id842 . -4) 486) nil (26039 53355 531031 483000) 0 nil])
([nil nil ((#("assert_)" 0 7 (fontified t) 7 8 (face (rainbow-delimiters-mismatched-face) fontified t)) . 475)) nil (26039 53355 531030 162000) 0 nil])
([nil nil ((475 . 481)) nil (26039 53355 531029 561000) 0 nil])
([nil nil ((apply yas--snippet-revive 475 484 #s(yas--snippet nil nil #s(yas--exit 483 nil) 99 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 483 nil) 99 nil nil nil nil)) (475 . 484) (#("assert!($0)" 0 11 (fontified nil)) . 475) (475 . 486) (#("assert" 0 6 (fontified nil)) . 475) (475 . 481) (#("assert!(â€¦)" 0 10 (fontified nil)) . -475) (475 . 485) (#("assert" 0 6 (fontified t)) . -475) (undo-tree-id841 . -6) 481) nil (26039 53355 531028 286000) 0 nil])
([nil nil ((483 . 486)) nil (26039 53355 531025 891000) 0 nil])
([nil nil ((483 . 490) (#("Vec" 0 3 (fontified nil)) . 483) (483 . 486) (#("Vector3" 0 7 (fontified nil)) . -483) (483 . 490) (#("Vec" 0 3 (face font-lock-type-face fontified t)) . -483) (undo-tree-id840 . -3) 486) nil (26039 53355 531024 832000) 0 nil])
([nil nil ((490 . 495)) nil (26039 53355 531022 858000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 496 511 nil nil nil t #s(yas--field 2 513 514 nil nil nil nil #s(yas--field 3 516 517 nil nil nil nil #s(yas--exit 518 nil)))) #s(yas--field 2 513 514 nil nil nil nil #s(yas--field 3 516 517 nil nil nil nil #s(yas--exit 518 nil))) #s(yas--field 3 516 517 nil nil nil nil #s(yas--exit 518 nil))) #s(yas--exit 518 nil) 100 nil #s(yas--field 1 496 511 nil nil nil t #s(yas--field 2 513 514 nil nil nil nil #s(yas--field 3 516 517 nil nil nil nil #s(yas--exit 518 nil)))) nil nil)) (492 . 504) (#("new(${1:x}, ${2:y}, ${3:z})$0" 0 29 (fontified nil)) . 492) (492 . 521) (#("new" 0 3 (fontified nil)) . 492) (492 . 495) (#("new(â€¦)" 0 6 (fontified nil)) . -492) (492 . 498) (#("new" 0 3 (fontified t)) . -492) (undo-tree-id838 . -3) (undo-tree-id839 . -3) 495) nil (26039 53355 531021 826000) 0 nil])
([nil nil ((nil rear-nonsticky nil 510 . 511) (nil fontified nil 496 . 511) (#("x" 0 1 (fontified nil)) . 511) (undo-tree-id837 . -1) (496 . 511)) nil (26039 53355 531018 668000) 0 nil])
([nil nil ((apply yas--snippet-revive 492 518 #s(yas--snippet nil (#s(yas--field 1 496 511 nil nil nil t #s(yas--field 2 513 514 nil nil nil nil #s(yas--field 3 516 517 nil nil nil nil #s(yas--exit 518 nil)))) #s(yas--field 2 513 514 nil nil nil nil #s(yas--field 3 516 517 nil nil nil nil #s(yas--exit 518 nil))) #s(yas--field 3 516 517 nil nil nil nil #s(yas--exit 518 nil))) #s(yas--exit 518 nil) 100 nil #s(yas--field 1 496 511 nil nil nil t #s(yas--field 2 513 514 nil nil nil nil #s(yas--field 3 516 517 nil nil nil nil #s(yas--exit 518 nil)))) nil nil))) nil (26039 53355 531016 883000) 0 nil])
([nil nil ((497 . 500)) nil (26039 53355 531016 305000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -500) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . 1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (#(" " 0 1 (fontified t)) . -501) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (#(" " 0 1 (fontified t)) . -502) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (#(" " 0 1 (fontified t)) . -503) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (#(" " 0 1 (fontified t)) . -504) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (#(" " 0 1 (fontified t)) . -505) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) 506) nil (26039 53355 531013 600000) 0 nil])
([nil nil ((501 . 505)) nil (26039 53355 530981 977000) 0 nil])
([nil nil ((500 . 501)) nil (26039 53355 530981 212000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -506) (undo-tree-id783 . -1) (undo-tree-id784 . 1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) 507) nil (26039 53355 530980 218000) 0 nil])
([nil nil ((#("z" 0 1 (fontified t)) . -517) (undo-tree-id781 . -1) (undo-tree-id782 . -1) 518) nil (26039 53355 530976 479000) 0 nil])
([nil nil ((#("y, " 0 3 (fontified t)) . -514) (undo-tree-id776 . -3) (undo-tree-id777 . -1) (undo-tree-id778 . -3) (undo-tree-id779 . -3) (undo-tree-id780 . -3) 517) nil (26039 53355 531533 361000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -513) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) 514) nil (26039 53375 890758 774000) 0 nil] [nil nil ((#("5708, " 0 3 (fontified t) 3 4 (fontified t rear-nonsticky t) 4 6 (fontified t)) . -508) (undo-tree-id756 . -6) (undo-tree-id757 . -6) (undo-tree-id758 . -4) (undo-tree-id759 . -4) (undo-tree-id760 . -4) (undo-tree-id761 . -4) (undo-tree-id762 . -4) (undo-tree-id763 . -4) (undo-tree-id764 . -4) (undo-tree-id765 . -4) (undo-tree-id766 . -4) (undo-tree-id767 . -6) (undo-tree-id768 . -6) (undo-tree-id769 . -6) (undo-tree-id770 . -6) (undo-tree-id771 . -6) (undo-tree-id772 . -6) (undo-tree-id773 . -6) (undo-tree-id774 . -6) (undo-tree-id775 . -6) 514) ((508 . 514)) (26039 53355 530965 906000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -512) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) 513) nil (26039 53375 890749 986000) 0 nil])
nil
([nil nil ((513 . 514)) nil (26039 53375 890740 894000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -513) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) 514) nil (26039 53375 890740 21000) 0 nil])
([nil nil ((513 . 519)) nil (26039 53375 890735 807000) 0 nil])
([nil nil ((#("close" 0 5 (fontified t)) . -514) (undo-tree-id1681 . -5) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) (undo-tree-id1686 . -2) (undo-tree-id1687 . -2) (undo-tree-id1688 . -3) (undo-tree-id1689 . -3) (undo-tree-id1690 . -4) (undo-tree-id1691 . -4) (undo-tree-id1692 . -4) (undo-tree-id1693 . -4) (undo-tree-id1694 . -4) (undo-tree-id1695 . -5) (undo-tree-id1696 . -5) (undo-tree-id1697 . -5) (undo-tree-id1698 . -5) (undo-tree-id1699 . -5) (undo-tree-id1700 . -5) (undo-tree-id1701 . -5) (undo-tree-id1702 . -5) (undo-tree-id1703 . -5) (undo-tree-id1704 . -5) (undo-tree-id1705 . -5) 519) nil (26039 53377 978530 498000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -513) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) 514) nil (26039 53488 387846 23000) 0 nil] [nil nil ((#("5708)." 0 3 (fontified t) 3 4 (fontified t rear-nonsticky t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t) 5 6 (fontified t)) . -508) (undo-tree-id1602 . -6) (undo-tree-id1603 . -4) (undo-tree-id1604 . -4) (undo-tree-id1605 . -4) (undo-tree-id1606 . -4) (undo-tree-id1607 . -4) (undo-tree-id1608 . -4) (undo-tree-id1609 . -4) (undo-tree-id1610 . -4) (undo-tree-id1611 . -4) (undo-tree-id1612 . -4) (undo-tree-id1613 . -4) (undo-tree-id1614 . -4) (undo-tree-id1615 . -4) (undo-tree-id1616 . -4) (undo-tree-id1617 . -4) (undo-tree-id1618 . -4) (undo-tree-id1619 . -4) (undo-tree-id1620 . -4) (undo-tree-id1621 . -4) (undo-tree-id1622 . -4) (undo-tree-id1623 . -4) (undo-tree-id1624 . -4) (undo-tree-id1625 . -4) (undo-tree-id1626 . -4) (undo-tree-id1627 . -4) (undo-tree-id1628 . -5) (undo-tree-id1629 . -5) (undo-tree-id1630 . -5) (undo-tree-id1631 . -5) (undo-tree-id1632 . -5) (undo-tree-id1633 . -5) (undo-tree-id1634 . -5) (undo-tree-id1635 . -5) (undo-tree-id1636 . -5) (undo-tree-id1637 . -5) (undo-tree-id1638 . -5) (undo-tree-id1639 . -5) (undo-tree-id1640 . -5) (undo-tree-id1641 . -5) (undo-tree-id1642 . -5) (undo-tree-id1643 . -5) (undo-tree-id1644 . -5) (undo-tree-id1645 . -5) (undo-tree-id1646 . -5) (undo-tree-id1647 . -5) (undo-tree-id1648 . -5) (undo-tree-id1649 . -5) (undo-tree-id1650 . -5) (undo-tree-id1651 . -5) (undo-tree-id1652 . -5) (undo-tree-id1653 . -6) (undo-tree-id1654 . -6) (undo-tree-id1655 . -6) (undo-tree-id1656 . -6) (undo-tree-id1657 . -6) (undo-tree-id1658 . -6) (undo-tree-id1659 . -6) (undo-tree-id1660 . -6) (undo-tree-id1661 . -6) (undo-tree-id1662 . -6) (undo-tree-id1663 . -6) (undo-tree-id1664 . -6) (undo-tree-id1665 . -6) (undo-tree-id1666 . -6) (undo-tree-id1667 . -6) (undo-tree-id1668 . -6) (undo-tree-id1669 . -6) (undo-tree-id1670 . -6) (undo-tree-id1671 . -6) (undo-tree-id1672 . -6) (undo-tree-id1673 . -6) (undo-tree-id1674 . -6) (undo-tree-id1675 . -6) (undo-tree-id1676 . -6) (undo-tree-id1677 . -6) (undo-tree-id1678 . -6) (undo-tree-id1679 . -6) (undo-tree-id1680 . -6) 514) ((508 . 514)) (26039 53377 612995 608000) 0 nil])
([nil nil ((513 . 514)) nil (26039 53488 387432 747000) 0 nil])
([nil nil ((#("1." 0 2 (fontified t)) . -506) (undo-tree-id1510 . -2) (undo-tree-id1511 . -2) (undo-tree-id1512 . -2) (undo-tree-id1513 . -2) (undo-tree-id1514 . -2) (undo-tree-id1515 . -2) (undo-tree-id1516 . -2) (undo-tree-id1517 . -2) (undo-tree-id1518 . -2) (undo-tree-id1519 . -2) (undo-tree-id1520 . -2) (undo-tree-id1521 . -2) (undo-tree-id1522 . -2) (undo-tree-id1523 . -2) (undo-tree-id1524 . -2) (undo-tree-id1525 . -2) (undo-tree-id1526 . -2) (undo-tree-id1527 . -2) (undo-tree-id1528 . -2) (undo-tree-id1529 . -2) (undo-tree-id1530 . -2) (undo-tree-id1531 . -2) (undo-tree-id1532 . -2) (undo-tree-id1533 . -2) (undo-tree-id1534 . -2) (undo-tree-id1535 . -2) (undo-tree-id1536 . -2) (undo-tree-id1537 . -2) (undo-tree-id1538 . -2) (undo-tree-id1539 . -2) (undo-tree-id1540 . -2) (undo-tree-id1541 . -2) (undo-tree-id1542 . -2) (undo-tree-id1543 . -2) (undo-tree-id1544 . -2) (undo-tree-id1545 . -2) (undo-tree-id1546 . -2) (undo-tree-id1547 . -2) (undo-tree-id1548 . -2) (undo-tree-id1549 . -2) (undo-tree-id1550 . -2) (undo-tree-id1551 . -2) (undo-tree-id1552 . -2) (undo-tree-id1553 . -2) (undo-tree-id1554 . -2) (undo-tree-id1555 . -2) (undo-tree-id1556 . -2) (undo-tree-id1557 . -2) (undo-tree-id1558 . -2) (undo-tree-id1559 . -2) (undo-tree-id1560 . -2) (undo-tree-id1561 . -2) (undo-tree-id1562 . -2) (undo-tree-id1563 . -2) (undo-tree-id1564 . -2) (undo-tree-id1565 . -2) (undo-tree-id1566 . -2) (undo-tree-id1567 . -2) (undo-tree-id1568 . -2) (undo-tree-id1569 . -2) (undo-tree-id1570 . -2) (undo-tree-id1571 . -2) (undo-tree-id1572 . -2) (undo-tree-id1573 . -2) (undo-tree-id1574 . -2) (undo-tree-id1575 . -2) (undo-tree-id1576 . -2) (undo-tree-id1577 . -2) (undo-tree-id1578 . -2) (undo-tree-id1579 . -2) (undo-tree-id1580 . -2) (undo-tree-id1581 . -2) (undo-tree-id1582 . -2) (undo-tree-id1583 . -2) (undo-tree-id1584 . -2) (undo-tree-id1585 . -2) (undo-tree-id1586 . -2) (undo-tree-id1587 . -2) (undo-tree-id1588 . -2) (undo-tree-id1589 . -2) (undo-tree-id1590 . -2) (undo-tree-id1591 . -2) (undo-tree-id1592 . -2) (undo-tree-id1593 . -2) (undo-tree-id1594 . -2) (undo-tree-id1595 . -2) (undo-tree-id1596 . -2) (undo-tree-id1597 . -2) (undo-tree-id1598 . -2) (undo-tree-id1599 . -2) (undo-tree-id1600 . -2) (undo-tree-id1601 . -2) 508) ((506 . 508)) (26039 53377 287214 79000) 0 nil])
([nil nil ((514 . 515)) nil (26039 53488 387432 206000) 0 nil])
([nil nil ((#("0, " 0 3 (fontified t)) . -503) (undo-tree-id1415 . -3) (undo-tree-id1416 . -3) (undo-tree-id1417 . -3) (undo-tree-id1418 . -3) (undo-tree-id1419 . -3) (undo-tree-id1420 . -3) (undo-tree-id1421 . -3) (undo-tree-id1422 . -3) (undo-tree-id1423 . -3) (undo-tree-id1424 . -3) (undo-tree-id1425 . -3) (undo-tree-id1426 . -3) (undo-tree-id1427 . -3) (undo-tree-id1428 . -3) (undo-tree-id1429 . -3) (undo-tree-id1430 . -3) (undo-tree-id1431 . -3) (undo-tree-id1432 . -3) (undo-tree-id1433 . -3) (undo-tree-id1434 . -3) (undo-tree-id1435 . -3) (undo-tree-id1436 . -3) (undo-tree-id1437 . -3) (undo-tree-id1438 . -3) (undo-tree-id1439 . -3) (undo-tree-id1440 . -3) (undo-tree-id1441 . -3) (undo-tree-id1442 . -3) (undo-tree-id1443 . -3) (undo-tree-id1444 . -3) (undo-tree-id1445 . -3) (undo-tree-id1446 . -3) (undo-tree-id1447 . -3) (undo-tree-id1448 . -3) (undo-tree-id1449 . -3) (undo-tree-id1450 . -3) (undo-tree-id1451 . -3) (undo-tree-id1452 . -3) (undo-tree-id1453 . -3) (undo-tree-id1454 . -3) (undo-tree-id1455 . -3) (undo-tree-id1456 . -3) (undo-tree-id1457 . -3) (undo-tree-id1458 . -3) (undo-tree-id1459 . -3) (undo-tree-id1460 . -3) (undo-tree-id1461 . -3) (undo-tree-id1462 . -3) (undo-tree-id1463 . -3) (undo-tree-id1464 . -3) (undo-tree-id1465 . -3) (undo-tree-id1466 . -3) (undo-tree-id1467 . -3) (undo-tree-id1468 . -3) (undo-tree-id1469 . -3) (undo-tree-id1470 . -3) (undo-tree-id1471 . -3) (undo-tree-id1472 . -3) (undo-tree-id1473 . -3) (undo-tree-id1474 . -3) (undo-tree-id1475 . -3) (undo-tree-id1476 . -3) (undo-tree-id1477 . -3) (undo-tree-id1478 . -3) (undo-tree-id1479 . -3) (undo-tree-id1480 . -3) (undo-tree-id1481 . -3) (undo-tree-id1482 . -3) (undo-tree-id1483 . -3) (undo-tree-id1484 . -3) (undo-tree-id1485 . -3) (undo-tree-id1486 . -3) (undo-tree-id1487 . -3) (undo-tree-id1488 . -3) (undo-tree-id1489 . -3) (undo-tree-id1490 . -3) (undo-tree-id1491 . -3) (undo-tree-id1492 . -3) (undo-tree-id1493 . -3) (undo-tree-id1494 . -3) (undo-tree-id1495 . -3) (undo-tree-id1496 . -3) (undo-tree-id1497 . -3) (undo-tree-id1498 . -3) (undo-tree-id1499 . -3) (undo-tree-id1500 . -3) (undo-tree-id1501 . -3) (undo-tree-id1502 . -3) (undo-tree-id1503 . -3) (undo-tree-id1504 . -3) (undo-tree-id1505 . -3) (undo-tree-id1506 . -3) (undo-tree-id1507 . -3) (undo-tree-id1508 . -3) (undo-tree-id1509 . -3) 506) ((503 . 506)) (26039 53377 8674 818000) 0 nil])
([nil nil ((514 . 519) (#("s" 0 1 (fontified nil)) . 514) (514 . 515) (#("so3_r" 0 5 (fontified nil)) . -514) (514 . 519) (#("s" 0 1 (fontified t)) . -514) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) 515) nil (26039 53488 387430 883000) 0 nil])
([nil nil ((#("0." 0 2 (fontified t)) . -501) (undo-tree-id1318 . -2) (undo-tree-id1319 . -2) (undo-tree-id1320 . -2) (undo-tree-id1321 . -2) (undo-tree-id1322 . -2) (undo-tree-id1323 . -2) (undo-tree-id1324 . -2) (undo-tree-id1325 . -2) (undo-tree-id1326 . -2) (undo-tree-id1327 . -2) (undo-tree-id1328 . -2) (undo-tree-id1329 . -2) (undo-tree-id1330 . -2) (undo-tree-id1331 . -2) (undo-tree-id1332 . -2) (undo-tree-id1333 . -2) (undo-tree-id1334 . -2) (undo-tree-id1335 . -2) (undo-tree-id1336 . -2) (undo-tree-id1337 . -2) (undo-tree-id1338 . -2) (undo-tree-id1339 . -2) (undo-tree-id1340 . -2) (undo-tree-id1341 . -2) (undo-tree-id1342 . -2) (undo-tree-id1343 . -2) (undo-tree-id1344 . -2) (undo-tree-id1345 . -2) (undo-tree-id1346 . -2) (undo-tree-id1347 . -2) (undo-tree-id1348 . -2) (undo-tree-id1349 . -2) (undo-tree-id1350 . -2) (undo-tree-id1351 . -2) (undo-tree-id1352 . -2) (undo-tree-id1353 . -2) (undo-tree-id1354 . -2) (undo-tree-id1355 . -2) (undo-tree-id1356 . -2) (undo-tree-id1357 . -2) (undo-tree-id1358 . -2) (undo-tree-id1359 . -2) (undo-tree-id1360 . -2) (undo-tree-id1361 . -2) (undo-tree-id1362 . -2) (undo-tree-id1363 . -2) (undo-tree-id1364 . -2) (undo-tree-id1365 . -2) (undo-tree-id1366 . -2) (undo-tree-id1367 . -2) (undo-tree-id1368 . -2) (undo-tree-id1369 . -2) (undo-tree-id1370 . -2) (undo-tree-id1371 . -2) (undo-tree-id1372 . -2) (undo-tree-id1373 . -2) (undo-tree-id1374 . -2) (undo-tree-id1375 . -2) (undo-tree-id1376 . -2) (undo-tree-id1377 . -2) (undo-tree-id1378 . -2) (undo-tree-id1379 . -2) (undo-tree-id1380 . -2) (undo-tree-id1381 . -2) (undo-tree-id1382 . -2) (undo-tree-id1383 . -2) (undo-tree-id1384 . -2) (undo-tree-id1385 . -2) (undo-tree-id1386 . -2) (undo-tree-id1387 . -2) (undo-tree-id1388 . -2) (undo-tree-id1389 . -2) (undo-tree-id1390 . -2) (undo-tree-id1391 . -2) (undo-tree-id1392 . -2) (undo-tree-id1393 . -2) (undo-tree-id1394 . -2) (undo-tree-id1395 . -2) (undo-tree-id1396 . -2) (undo-tree-id1397 . -2) (undo-tree-id1398 . -2) (undo-tree-id1399 . -2) (undo-tree-id1400 . -2) (undo-tree-id1401 . -2) (undo-tree-id1402 . -2) (undo-tree-id1403 . -2) (undo-tree-id1404 . -2) (undo-tree-id1405 . -2) (undo-tree-id1406 . -2) (undo-tree-id1407 . -2) (undo-tree-id1408 . -2) (undo-tree-id1409 . -2) (undo-tree-id1410 . -2) (undo-tree-id1411 . -2) (undo-tree-id1412 . -2) (undo-tree-id1413 . -2) (undo-tree-id1414 . -2) 503) ((501 . 503)) (26039 53376 763829 543000) 0 nil])
([nil nil ((519 . 520)) nil (26039 53488 387426 374000) 0 nil])
([nil nil ((#("0, " 0 3 (fontified t)) . -498) (undo-tree-id1207 . -3) (undo-tree-id1208 . -3) (undo-tree-id1209 . -3) (undo-tree-id1210 . -3) (undo-tree-id1211 . -3) (undo-tree-id1212 . -3) (undo-tree-id1213 . -3) (undo-tree-id1214 . -3) (undo-tree-id1215 . -3) (undo-tree-id1216 . -3) (undo-tree-id1217 . -2) (undo-tree-id1218 . -2) (undo-tree-id1219 . -2) (undo-tree-id1220 . -2) (undo-tree-id1221 . -2) (undo-tree-id1222 . -2) (undo-tree-id1223 . -2) (undo-tree-id1224 . -2) (undo-tree-id1225 . -2) (undo-tree-id1226 . -2) (undo-tree-id1227 . -2) (undo-tree-id1228 . -2) (undo-tree-id1229 . -3) (undo-tree-id1230 . -3) (undo-tree-id1231 . -3) (undo-tree-id1232 . -3) (undo-tree-id1233 . -3) (undo-tree-id1234 . -3) (undo-tree-id1235 . -3) (undo-tree-id1236 . -3) (undo-tree-id1237 . -3) (undo-tree-id1238 . -3) (undo-tree-id1239 . -3) (undo-tree-id1240 . -3) (undo-tree-id1241 . -3) (undo-tree-id1242 . -3) (undo-tree-id1243 . -3) (undo-tree-id1244 . -3) (undo-tree-id1245 . -3) (undo-tree-id1246 . -3) (undo-tree-id1247 . -3) (undo-tree-id1248 . -3) (undo-tree-id1249 . -3) (undo-tree-id1250 . -3) (undo-tree-id1251 . -3) (undo-tree-id1252 . -3) (undo-tree-id1253 . -3) (undo-tree-id1254 . -3) (undo-tree-id1255 . -3) (undo-tree-id1256 . -3) (undo-tree-id1257 . -3) (undo-tree-id1258 . -3) (undo-tree-id1259 . -3) (undo-tree-id1260 . -3) (undo-tree-id1261 . -3) (undo-tree-id1262 . -3) (undo-tree-id1263 . -3) (undo-tree-id1264 . -3) (undo-tree-id1265 . -3) (undo-tree-id1266 . -3) (undo-tree-id1267 . -3) (undo-tree-id1268 . -3) (undo-tree-id1269 . -3) (undo-tree-id1270 . -3) (undo-tree-id1271 . -3) (undo-tree-id1272 . -3) (undo-tree-id1273 . -3) (undo-tree-id1274 . -3) (undo-tree-id1275 . -3) (undo-tree-id1276 . -3) (undo-tree-id1277 . -3) (undo-tree-id1278 . -3) (undo-tree-id1279 . -3) (undo-tree-id1280 . -3) (undo-tree-id1281 . -3) (undo-tree-id1282 . -3) (undo-tree-id1283 . -3) (undo-tree-id1284 . -3) (undo-tree-id1285 . -3) (undo-tree-id1286 . -3) (undo-tree-id1287 . -3) (undo-tree-id1288 . -3) (undo-tree-id1289 . -3) (undo-tree-id1290 . -3) (undo-tree-id1291 . -3) (undo-tree-id1292 . -3) (undo-tree-id1293 . -3) (undo-tree-id1294 . -3) (undo-tree-id1295 . -3) (undo-tree-id1296 . -3) (undo-tree-id1297 . -3) (undo-tree-id1298 . -3) (undo-tree-id1299 . -3) (undo-tree-id1300 . -3) (undo-tree-id1301 . -3) (undo-tree-id1302 . -3) (undo-tree-id1303 . -3) (undo-tree-id1304 . -3) (undo-tree-id1305 . -3) (undo-tree-id1306 . -3) (undo-tree-id1307 . -3) (undo-tree-id1308 . -3) (undo-tree-id1309 . -3) (undo-tree-id1310 . -3) (undo-tree-id1311 . -3) (undo-tree-id1312 . -3) (undo-tree-id1313 . -3) (undo-tree-id1314 . -3) (undo-tree-id1315 . -3) (undo-tree-id1316 . -3) (undo-tree-id1317 . -3) 501) ((498 . 501)) (26039 53376 388572 353000) 0 nil])
([nil nil ((apply yas--snippet-revive 520 525 #s(yas--snippet nil nil #s(yas--exit 525 nil) 101 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 525 nil) 101 nil nil nil nil)) (520 . 525) (#("log()$0" 0 7 (fontified nil)) . 520) (520 . 527) (#("log()" 0 5 (fontified nil)) . -520) (520 . 525)) nil (26039 53488 387425 424000) 0 nil])
([nil nil ((#("0." 0 2 (fontified t)) . -496) (undo-tree-id1094 . -2) (undo-tree-id1095 . -2) (undo-tree-id1096 . -2) (undo-tree-id1097 . -2) (undo-tree-id1098 . -2) (undo-tree-id1099 . -2) (undo-tree-id1100 . -2) (undo-tree-id1101 . -2) (undo-tree-id1102 . -2) (undo-tree-id1103 . -2) (undo-tree-id1104 . -2) (undo-tree-id1105 . -2) (undo-tree-id1106 . -2) (undo-tree-id1107 . -2) (undo-tree-id1108 . -2) (undo-tree-id1109 . -2) (undo-tree-id1110 . -2) (undo-tree-id1111 . -2) (undo-tree-id1112 . -2) (undo-tree-id1113 . -2) (undo-tree-id1114 . -2) (undo-tree-id1115 . -2) (undo-tree-id1116 . -2) (undo-tree-id1117 . -2) (undo-tree-id1118 . -2) (undo-tree-id1119 . -2) (undo-tree-id1120 . -2) (undo-tree-id1121 . -2) (undo-tree-id1122 . -2) (undo-tree-id1123 . -2) (undo-tree-id1124 . -2) (undo-tree-id1125 . -2) (undo-tree-id1126 . -2) (undo-tree-id1127 . -2) (undo-tree-id1128 . -2) (undo-tree-id1129 . -2) (undo-tree-id1130 . -2) (undo-tree-id1131 . -2) (undo-tree-id1132 . -2) (undo-tree-id1133 . -2) (undo-tree-id1134 . -2) (undo-tree-id1135 . -2) (undo-tree-id1136 . -2) (undo-tree-id1137 . -2) (undo-tree-id1138 . -2) (undo-tree-id1139 . -2) (undo-tree-id1140 . -2) (undo-tree-id1141 . -2) (undo-tree-id1142 . -2) (undo-tree-id1143 . -2) (undo-tree-id1144 . -2) (undo-tree-id1145 . -2) (undo-tree-id1146 . -2) (undo-tree-id1147 . -2) (undo-tree-id1148 . -2) (undo-tree-id1149 . -2) (undo-tree-id1150 . -2) (undo-tree-id1151 . -2) (undo-tree-id1152 . -2) (undo-tree-id1153 . -2) (undo-tree-id1154 . -2) (undo-tree-id1155 . -2) (undo-tree-id1156 . -2) (undo-tree-id1157 . -2) (undo-tree-id1158 . -2) (undo-tree-id1159 . -2) (undo-tree-id1160 . -2) (undo-tree-id1161 . -2) (undo-tree-id1162 . -2) (undo-tree-id1163 . -2) (undo-tree-id1164 . -2) (undo-tree-id1165 . -2) (undo-tree-id1166 . -2) (undo-tree-id1167 . -2) (undo-tree-id1168 . -2) (undo-tree-id1169 . -2) (undo-tree-id1170 . -2) (undo-tree-id1171 . -2) (undo-tree-id1172 . -2) (undo-tree-id1173 . -2) (undo-tree-id1174 . -2) (undo-tree-id1175 . -2) (undo-tree-id1176 . -2) (undo-tree-id1177 . -2) (undo-tree-id1178 . -2) (undo-tree-id1179 . -2) (undo-tree-id1180 . -2) (undo-tree-id1181 . -2) (undo-tree-id1182 . -2) (undo-tree-id1183 . -2) (undo-tree-id1184 . -2) (undo-tree-id1185 . -2) (undo-tree-id1186 . -2) (undo-tree-id1187 . -2) (undo-tree-id1188 . -2) (undo-tree-id1189 . -2) (undo-tree-id1190 . -2) (undo-tree-id1191 . -2) (undo-tree-id1192 . -2) (undo-tree-id1193 . -2) (undo-tree-id1194 . -2) (undo-tree-id1195 . -2) (undo-tree-id1196 . -2) (undo-tree-id1197 . -2) (undo-tree-id1198 . -2) (undo-tree-id1199 . -2) (undo-tree-id1200 . -2) (undo-tree-id1201 . -2) (undo-tree-id1202 . -2) (undo-tree-id1203 . -2) (undo-tree-id1204 . -2) (undo-tree-id1205 . -2) (undo-tree-id1206 . -2) 498) ((496 . 498)) (26039 53375 893488 976000) 0 nil])
([nil nil ((483 . 484)) nil (26039 53488 387423 857000) 0 nil])
([nil nil ((#("new(" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-4-face) fontified t)) . -492) (undo-tree-id974 . -4) (undo-tree-id975 . -4) (undo-tree-id976 . -4) (undo-tree-id977 . -4) (undo-tree-id978 . -4) (undo-tree-id979 . -4) (undo-tree-id980 . -4) (undo-tree-id981 . -4) (undo-tree-id982 . -4) (undo-tree-id983 . -4) (undo-tree-id984 . -4) (undo-tree-id985 . -4) (undo-tree-id986 . -4) (undo-tree-id987 . -4) (undo-tree-id988 . -4) (undo-tree-id989 . -4) (undo-tree-id990 . -4) (undo-tree-id991 . -4) (undo-tree-id992 . -4) (undo-tree-id993 . -4) (undo-tree-id994 . -4) (undo-tree-id995 . -4) (undo-tree-id996 . -4) (undo-tree-id997 . -4) (undo-tree-id998 . -4) (undo-tree-id999 . -4) (undo-tree-id1000 . -4) (undo-tree-id1001 . -4) (undo-tree-id1002 . -4) (undo-tree-id1003 . -4) (undo-tree-id1004 . -4) (undo-tree-id1005 . -4) (undo-tree-id1006 . -4) (undo-tree-id1007 . -4) (undo-tree-id1008 . -4) (undo-tree-id1009 . -4) (undo-tree-id1010 . -4) (undo-tree-id1011 . -4) (undo-tree-id1012 . -4) (undo-tree-id1013 . -4) (undo-tree-id1014 . -4) (undo-tree-id1015 . -4) (undo-tree-id1016 . -4) (undo-tree-id1017 . -4) (undo-tree-id1018 . -4) (undo-tree-id1019 . -4) (undo-tree-id1020 . -4) (undo-tree-id1021 . -4) (undo-tree-id1022 . -4) (undo-tree-id1023 . -4) (undo-tree-id1024 . -4) (undo-tree-id1025 . -4) (undo-tree-id1026 . -4) (undo-tree-id1027 . -4) (undo-tree-id1028 . -4) (undo-tree-id1029 . -4) (undo-tree-id1030 . -4) (undo-tree-id1031 . -4) (undo-tree-id1032 . -4) (undo-tree-id1033 . -4) (undo-tree-id1034 . -4) (undo-tree-id1035 . -4) (undo-tree-id1036 . -4) (undo-tree-id1037 . -4) (undo-tree-id1038 . -4) (undo-tree-id1039 . -4) (undo-tree-id1040 . -4) (undo-tree-id1041 . -4) (undo-tree-id1042 . -4) (undo-tree-id1043 . -4) (undo-tree-id1044 . -4) (undo-tree-id1045 . -4) (undo-tree-id1046 . -4) (undo-tree-id1047 . -4) (undo-tree-id1048 . -4) (undo-tree-id1049 . -4) (undo-tree-id1050 . -4) (undo-tree-id1051 . -4) (undo-tree-id1052 . -4) (undo-tree-id1053 . -4) (undo-tree-id1054 . -4) (undo-tree-id1055 . -4) (undo-tree-id1056 . -4) (undo-tree-id1057 . -4) (undo-tree-id1058 . -4) (undo-tree-id1059 . -4) (undo-tree-id1060 . -4) (undo-tree-id1061 . -4) (undo-tree-id1062 . -4) (undo-tree-id1063 . -4) (undo-tree-id1064 . -4) (undo-tree-id1065 . -4) (undo-tree-id1066 . -4) (undo-tree-id1067 . -4) (undo-tree-id1068 . -4) (undo-tree-id1069 . -4) (undo-tree-id1070 . -4) (undo-tree-id1071 . -4) (undo-tree-id1072 . -4) (undo-tree-id1073 . -4) (undo-tree-id1074 . -4) (undo-tree-id1075 . -4) (undo-tree-id1076 . -4) (undo-tree-id1077 . -4) (undo-tree-id1078 . -4) (undo-tree-id1079 . -4) (undo-tree-id1080 . -4) (undo-tree-id1081 . -4) (undo-tree-id1082 . -4) (undo-tree-id1083 . -4) (undo-tree-id1084 . -4) (undo-tree-id1085 . -4) (undo-tree-id1086 . -4) (undo-tree-id1087 . -4) (undo-tree-id1088 . -4) (undo-tree-id1089 . -4) (undo-tree-id1090 . -4) (undo-tree-id1091 . -4) (undo-tree-id1092 . -4) (undo-tree-id1093 . -4) 496) ((492 . 496)) (26039 53375 891037 246000) 0 nil])
([nil nil ((526 . 527)) nil (26039 53488 387423 175000) 0 nil])
([nil nil ((#("Vector3::" 0 7 (face font-lock-type-face fontified t) 7 9 (fontified t)) . -483) (undo-tree-id852 . -9) (undo-tree-id853 . -9) (undo-tree-id854 . -9) (undo-tree-id855 . -9) (undo-tree-id856 . -9) (undo-tree-id857 . -9) (undo-tree-id858 . -9) (undo-tree-id859 . -9) (undo-tree-id860 . -9) (undo-tree-id861 . -9) (undo-tree-id862 . -9) (undo-tree-id863 . -9) (undo-tree-id864 . -9) (undo-tree-id865 . -9) (undo-tree-id866 . -9) (undo-tree-id867 . -9) (undo-tree-id868 . -9) (undo-tree-id869 . -9) (undo-tree-id870 . -9) (undo-tree-id871 . -9) (undo-tree-id872 . -9) (undo-tree-id873 . -9) (undo-tree-id874 . -9) (undo-tree-id875 . -9) (undo-tree-id876 . -9) (undo-tree-id877 . -9) (undo-tree-id878 . -9) (undo-tree-id879 . -9) (undo-tree-id880 . -9) (undo-tree-id881 . -9) (undo-tree-id882 . -9) (undo-tree-id883 . -9) (undo-tree-id884 . -9) (undo-tree-id885 . -9) (undo-tree-id886 . -9) (undo-tree-id887 . -9) (undo-tree-id888 . -9) (undo-tree-id889 . -9) (undo-tree-id890 . -9) (undo-tree-id891 . -9) (undo-tree-id892 . -9) (undo-tree-id893 . -9) (undo-tree-id894 . -9) (undo-tree-id895 . -9) (undo-tree-id896 . -9) (undo-tree-id897 . -9) (undo-tree-id898 . -9) (undo-tree-id899 . -9) (undo-tree-id900 . -9) (undo-tree-id901 . -9) (undo-tree-id902 . -9) (undo-tree-id903 . -9) (undo-tree-id904 . -9) (undo-tree-id905 . -9) (undo-tree-id906 . -9) (undo-tree-id907 . -9) (undo-tree-id908 . -9) (undo-tree-id909 . -9) (undo-tree-id910 . -9) (undo-tree-id911 . -9) (undo-tree-id912 . -9) (undo-tree-id913 . -9) (undo-tree-id914 . -9) (undo-tree-id915 . -9) (undo-tree-id916 . -9) (undo-tree-id917 . -9) (undo-tree-id918 . -9) (undo-tree-id919 . -9) (undo-tree-id920 . -9) (undo-tree-id921 . -9) (undo-tree-id922 . -9) (undo-tree-id923 . -9) (undo-tree-id924 . -9) (undo-tree-id925 . -9) (undo-tree-id926 . -9) (undo-tree-id927 . -9) (undo-tree-id928 . -9) (undo-tree-id929 . -9) (undo-tree-id930 . -9) (undo-tree-id931 . -9) (undo-tree-id932 . -9) (undo-tree-id933 . -9) (undo-tree-id934 . -9) (undo-tree-id935 . -9) (undo-tree-id936 . -9) (undo-tree-id937 . -9) (undo-tree-id938 . -9) (undo-tree-id939 . -9) (undo-tree-id940 . -9) (undo-tree-id941 . -9) (undo-tree-id942 . -9) (undo-tree-id943 . -9) (undo-tree-id944 . -9) (undo-tree-id945 . -9) (undo-tree-id946 . -9) (undo-tree-id947 . -9) (undo-tree-id948 . -9) (undo-tree-id949 . -9) (undo-tree-id950 . -9) (undo-tree-id951 . -9) (undo-tree-id952 . -9) (undo-tree-id953 . -9) (undo-tree-id954 . -9) (undo-tree-id955 . -9) (undo-tree-id956 . -9) (undo-tree-id957 . -9) (undo-tree-id958 . -9) (undo-tree-id959 . -9) (undo-tree-id960 . -9) (undo-tree-id961 . -9) (undo-tree-id962 . -9) (undo-tree-id963 . -9) (undo-tree-id964 . -9) (undo-tree-id965 . -9) (undo-tree-id966 . -9) (undo-tree-id967 . -9) (undo-tree-id968 . -9) (undo-tree-id969 . -9) (undo-tree-id970 . -9) (undo-tree-id971 . -9) (undo-tree-id972 . -9) (undo-tree-id973 . -9) 492) ((483 . 492)) (26039 53375 889042 81000) 0 nil])
([nil nil ((527 . 529)) nil (26039 53488 387422 222000) 0 nil])
nil
([nil nil ((#("a" 0 1 (fontified t)) . -528) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) 529) nil (26039 53488 387421 305000) 0 nil])
([nil nil ((528 . 531)) nil (26039 53488 387417 10000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -528) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (#("u" 0 1 (fontified t)) . -529) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (#("m" 0 1 (fontified t)) . -530) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) 531) nil (26039 53488 387415 72000) 0 nil])
([nil nil ((528 . 530)) nil (26039 53488 387393 539000) 0 nil])
([nil nil ((apply yas--snippet-revive 528 542 #s(yas--snippet nil nil #s(yas--exit 542 nil) 102 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 542 nil) 102 nil nil nil nil)) (528 . 542) (#("norm_squared()$0" 0 16 (fontified nil)) . 528) (528 . 544) (#("no" 0 2 (fontified nil)) . 528) (528 . 530) (#("norm_squared()" 0 14 (fontified nil)) . -528) (528 . 542) (#("no" 0 2 (fontified t)) . -528) (undo-tree-id1857 . -2) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -2) (undo-tree-id1861 . -2) (undo-tree-id1862 . -2) (undo-tree-id1863 . -2) 530) nil (26039 53488 387392 90000) 0 nil])
([nil nil ((542 . 546)) nil (26039 53488 387385 822000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -543) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (#("s" 0 1 (face font-lock-keyword-face fontified t)) . -544) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (#("s" 0 1 (fontified t)) . -545) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) 546) nil (26039 53488 387384 70000) 0 nil])
([nil nil ((543 . 546)) nil (26039 53488 387368 362000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -544) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (#("o" 0 1 (fontified t)) . -545) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) 546) nil (26039 53488 387366 927000) 0 nil])
([nil nil ((544 . 549)) nil (26039 53488 387357 724000) 0 nil])
([nil nil ((61 . 90) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 582 585 nil nil nil t #s(yas--field 2 587 593 nil nil nil nil #s(yas--exit 594 nil))) #s(yas--field 2 587 593 nil nil nil nil #s(yas--exit 594 nil))) #s(yas--exit 594 nil) 103 nil #s(yas--field 1 582 585 nil nil nil t #s(yas--field 2 587 593 nil nil nil nil #s(yas--exit 594 nil))) nil nil)) (543 . 567) (#("approx_eq(${1:other}, ${2:margin})$0" 0 36 (fontified nil)) . 543) (543 . 579) (#("approx" 0 6 (fontified nil)) . 543) (543 . 549) (#("approx_eq(â€¦) (use float_cmp::ApproxEq)" 0 38 (fontified nil)) . -543) (543 . 581) (#("approx" 0 6 (fontified t)) . -543) (undo-tree-id1795 . -6) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (undo-tree-id1808 . -2) (undo-tree-id1809 . -2) (undo-tree-id1810 . -3) (undo-tree-id1811 . -3) (undo-tree-id1812 . -4) (undo-tree-id1813 . -4) (undo-tree-id1814 . -5) (undo-tree-id1815 . -5) (undo-tree-id1816 . -6) (undo-tree-id1817 . -6) (undo-tree-id1818 . -6) (undo-tree-id1819 . -6) 549) nil (26039 53488 387355 647000) 0 nil])
([nil nil ((583 . 585) (#("other" 0 5 (fontified nil)) . 583) (undo-tree-id1794 . -5) (582 . 583)) nil (26039 53488 387336 302000) 0 nil])
([nil nil ((apply yas--snippet-revive 572 594 #s(yas--snippet nil (#s(yas--field 1 582 585 nil nil nil t #s(yas--field 2 587 593 nil nil nil nil #s(yas--exit 594 nil))) #s(yas--field 2 587 593 nil nil nil nil #s(yas--exit 594 nil))) #s(yas--exit 594 nil) 103 nil #s(yas--field 1 582 585 nil nil nil t #s(yas--field 2 587 593 nil nil nil nil #s(yas--exit 594 nil))) nil nil))) nil (26039 53488 387334 601000) 0 nil])
([nil nil ((#("margin" 0 6 (fontified t)) . -587) (undo-tree-id1788 . -6) (undo-tree-id1789 . -6) (undo-tree-id1790 . -6) (undo-tree-id1791 . -6) (undo-tree-id1792 . -6) (undo-tree-id1793 . -6) 593) nil (26039 53488 387333 646000) 0 nil])
([nil nil ((587 . 589)) nil (26039 53488 387328 739000) 0 nil])
([nil nil ((#("3" 0 1 (face font-lock-type-face fontified t)) . -588) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) 589) nil (26039 53488 387327 698000) 0 nil])
([nil nil ((588 . 589)) nil (26039 53488 387323 733000) 0 nil])
([nil nil ((#("5" 0 1 (face font-lock-type-face fontified t)) . -588) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) 589) nil (26039 53488 387322 763000) 0 nil])
([nil nil ((588 . 590)) nil (26039 53488 387317 671000) 0 nil])
([nil nil ((76 . 77) (84 . 96) (587 . 587) (587 . 596) (#("F64" 0 3 (fontified nil)) . 587) (587 . 590) (#("F64Margin (use float_cmp::F64Margin)" 0 36 (fontified nil)) . -587) (587 . 623) (#("F64" 0 3 (face font-lock-type-face fontified t)) . -587) (undo-tree-id1747 . -3) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (undo-tree-id1770 . -2) (undo-tree-id1771 . -2) (undo-tree-id1772 . -3) (undo-tree-id1773 . -3) (undo-tree-id1774 . -3) (undo-tree-id1775 . -3) 590) nil (26039 53488 387315 210000) 0 nil])
([nil nil ((609 . 612)) nil (26039 53488 387292 482000) 0 nil])
([nil nil ((apply yas--snippet-revive 611 620 #s(yas--snippet nil nil #s(yas--exit 620 nil) 104 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 620 nil) 104 nil nil nil nil)) (611 . 620) (#("default()$0" 0 11 (fontified nil)) . 611) (611 . 622) (#("D" 0 1 (fontified nil)) . 611) (611 . 612) (#("default() (as Default)" 0 22 (fontified nil)) . -611) (611 . 633) (#("D" 0 1 (face font-lock-type-face fontified t)) . -611) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) 612) nil (26039 53488 387287 866000) 0 nil])
([nil nil ((508 . 516) (t 26039 53488 402233 768000)) nil (26039 53552 664996 946000) 0 nil])
([nil nil ((509 . 517) (#("        " 0 8 (fontified nil)) . 508) (undo-tree-id2113 . -8) (undo-tree-id2114 . -8) (undo-tree-id2115 . -8) (516 . 517)) nil (26039 53552 664995 852000) 0 nil])
([nil nil ((517 . 518)) nil (26039 53552 664993 36000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -517) (undo-tree-id2110 . -1) (undo-tree-id2111 . -1) (undo-tree-id2112 . -1) 518) nil (26039 53552 664992 170000) 0 nil])
([nil nil ((517 . 519)) nil (26039 53552 664989 89000) 0 nil])
([nil nil ((apply yas--snippet-revive 517 527 #s(yas--snippet nil nil #s(yas--exit 526 nil) 105 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 526 nil) 105 nil nil nil nil)) (517 . 527) (#("println!($0)" 0 12 (fontified nil)) . 517) (517 . 529) (#("pr" 0 2 (fontified nil)) . 517) (517 . 519) (#("println!(â€¦)" 0 11 (fontified nil)) . -517) (517 . 528) (#("pr" 0 2 (fontified t)) . -517) (undo-tree-id2102 . -2) (undo-tree-id2103 . -1) (undo-tree-id2104 . -1) (undo-tree-id2105 . -2) (undo-tree-id2106 . -2) (undo-tree-id2107 . -2) (undo-tree-id2108 . -2) (undo-tree-id2109 . -2) 519) nil (26039 53552 664987 579000) 0 nil])
([nil nil ((526 . 528)) nil (26039 53552 664979 630000) 0 nil])
([nil nil ((#("println!(\"\")" 0 8 (face rust-builtin-formatting-macro fontified t) 8 9 (face (rainbow-delimiters-depth-3-face) fontified t) 9 11 (face font-lock-string-face fontified t) 11 12 (face (rainbow-delimiters-depth-3-face) fontified t)) . -517) (undo-tree-id2075 . -12) (undo-tree-id2076 . -9) (undo-tree-id2077 . -9) (undo-tree-id2078 . -9) (undo-tree-id2079 . -9) (undo-tree-id2080 . -9) (undo-tree-id2081 . -9) (undo-tree-id2082 . -9) (undo-tree-id2083 . -9) (undo-tree-id2084 . -9) (undo-tree-id2085 . -9) (undo-tree-id2086 . -9) (undo-tree-id2087 . -9) (undo-tree-id2088 . -10) (undo-tree-id2089 . -10) (undo-tree-id2090 . -11) (undo-tree-id2091 . -11) (undo-tree-id2092 . -10) (undo-tree-id2093 . -10) (undo-tree-id2094 . -10) (undo-tree-id2095 . -10) (undo-tree-id2096 . -10) (undo-tree-id2097 . -10) (undo-tree-id2098 . -10) (undo-tree-id2099 . -10) (undo-tree-id2100 . -11) (undo-tree-id2101 . -12) 529) nil (26039 53552 664978 24000) 0 nil])
([nil nil ((517 . 527)) nil (26039 53552 664959 771000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -525) (undo-tree-id2065 . -1) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) (undo-tree-id2071 . -1) (#(" " 0 1 (fontified t)) . -526) (undo-tree-id2072 . -1) (undo-tree-id2073 . -1) (undo-tree-id2074 . -1) 527) nil (26039 53552 664958 362000) 0 nil])
([nil nil ((525 . 527)) nil (26039 53552 664950 188000) 0 nil])
([nil nil ((#("Vector3::new(0.0, 0.0, 1.5708)-so3_r.log()).norm_squared()" 0 7 (face font-lock-type-face fontified t) 7 9 (fontified t) 9 12 (fontified t) 12 13 (face (rainbow-delimiters-depth-5-face) fontified t) 13 15 (fontified t) 15 18 (fontified t) 18 20 (fontified t) 20 23 (fontified t) 23 25 (fontified t) 25 28 (fontified t) 28 29 (fontified t rear-nonsticky t) 29 30 (face (rainbow-delimiters-depth-5-face) fontified t) 30 31 (fontified t) 31 37 (fontified t) 37 40 (fontified t) 40 41 (face (rainbow-delimiters-depth-5-face) fontified t) 41 42 (face (rainbow-delimiters-depth-5-face) fontified t) 42 43 (face (rainbow-delimiters-depth-4-face) fontified t) 43 44 (fontified t) 44 56 (fontified t) 56 57 (face (rainbow-delimiters-depth-4-face) fontified t) 57 58 (face (rainbow-delimiters-depth-4-face) fontified t)) . 545) (undo-tree-id1939 . -58) (undo-tree-id1940 . -58) (undo-tree-id1941 . -13) (undo-tree-id1942 . -17) (undo-tree-id1943 . -30) (undo-tree-id1944 . -30) (undo-tree-id1945 . -30) (undo-tree-id1946 . -30) (undo-tree-id1947 . -30) (undo-tree-id1948 . -30) (undo-tree-id1949 . -30) (undo-tree-id1950 . -30) (undo-tree-id1951 . -30) (undo-tree-id1952 . -30) (undo-tree-id1953 . -30) (undo-tree-id1954 . -30) (undo-tree-id1955 . -30) (undo-tree-id1956 . -30) (undo-tree-id1957 . -30) (undo-tree-id1958 . -30) (undo-tree-id1959 . -30) (undo-tree-id1960 . -30) (undo-tree-id1961 . -30) (undo-tree-id1962 . -30) (undo-tree-id1963 . -30) (undo-tree-id1964 . -30) (undo-tree-id1965 . -30) (undo-tree-id1966 . -30) (undo-tree-id1967 . -30) (undo-tree-id1968 . -30) (undo-tree-id1969 . -30) (undo-tree-id1970 . -30) (undo-tree-id1971 . -30) (undo-tree-id1972 . -30) (undo-tree-id1973 . -30) (undo-tree-id1974 . -30) (undo-tree-id1975 . -30) (undo-tree-id1976 . -31) (undo-tree-id1977 . -31) (undo-tree-id1978 . -31) (undo-tree-id1979 . -31) (undo-tree-id1980 . -44) (undo-tree-id1981 . -44) (undo-tree-id1982 . -44) (undo-tree-id1983 . -44) (undo-tree-id1984 . -44) (undo-tree-id1985 . -44) (undo-tree-id1986 . -44) (undo-tree-id1987 . -44) (undo-tree-id1988 . -44) (undo-tree-id1989 . -44) (undo-tree-id1990 . -44) (undo-tree-id1991 . -44) (undo-tree-id1992 . -44) (undo-tree-id1993 . -44) (undo-tree-id1994 . -44) (undo-tree-id1995 . -44) (undo-tree-id1996 . -44) (undo-tree-id1997 . -44) (undo-tree-id1998 . -44) (undo-tree-id1999 . -44) (undo-tree-id2000 . -44) (undo-tree-id2001 . -44) (undo-tree-id2002 . -44) (undo-tree-id2003 . -44) (undo-tree-id2004 . -44) (undo-tree-id2005 . -44) (undo-tree-id2006 . -1) (undo-tree-id2007 . -2) (undo-tree-id2008 . -3) (undo-tree-id2009 . -5) (undo-tree-id2010 . -6) (undo-tree-id2011 . -7) (undo-tree-id2012 . -9) (undo-tree-id2013 . -10) (undo-tree-id2014 . -12) (undo-tree-id2015 . -13) (undo-tree-id2016 . -15) (undo-tree-id2017 . -16) (undo-tree-id2018 . -18) (undo-tree-id2019 . -20) (undo-tree-id2020 . -21) (undo-tree-id2021 . -23) (undo-tree-id2022 . -25) (undo-tree-id2023 . -26) (undo-tree-id2024 . -27) (undo-tree-id2025 . -29) (undo-tree-id2026 . -30) (undo-tree-id2027 . -31) (undo-tree-id2028 . -32) (undo-tree-id2029 . -33) (undo-tree-id2030 . -34) (undo-tree-id2031 . -35) (undo-tree-id2032 . -36) (undo-tree-id2033 . -37) (undo-tree-id2034 . -38) (undo-tree-id2035 . -39) (undo-tree-id2036 . -40) (undo-tree-id2037 . -41) (undo-tree-id2038 . -42) (undo-tree-id2039 . -43) (undo-tree-id2040 . -44) (undo-tree-id2041 . -45) (undo-tree-id2042 . -46) (undo-tree-id2043 . -47) (undo-tree-id2044 . -48) (undo-tree-id2045 . -49) (undo-tree-id2046 . -50) (undo-tree-id2047 . -51) (undo-tree-id2048 . -52) (undo-tree-id2049 . -53) (undo-tree-id2050 . -55) (undo-tree-id2051 . -56) (undo-tree-id2052 . -57) (undo-tree-id2053 . -58) (undo-tree-id2054 . -58) (undo-tree-id2055 . -58) (undo-tree-id2056 . -58) (undo-tree-id2057 . -58) (undo-tree-id2058 . -58) (undo-tree-id2059 . -13) (undo-tree-id2060 . -58) (undo-tree-id2061 . -58) (undo-tree-id2062 . -58) (undo-tree-id2063 . -58) (undo-tree-id2064 . -58) 603) nil (26039 53552 664943 173000) 0 nil])
([nil nil ((nil rear-nonsticky nil 584 . 585) (nil fontified nil 584 . 585) (nil fontified nil 583 . 584) (nil fontified nil 571 . 583) (nil fontified nil 570 . 571) (nil fontified nil 569 . 570) (nil fontified nil 568 . 569) (nil fontified nil 567 . 568) (nil fontified nil 564 . 567) (nil fontified nil 558 . 564) (nil fontified nil 557 . 558) (nil fontified nil 556 . 557) (nil fontified nil 555 . 556) (nil fontified nil 552 . 555) (nil fontified nil 550 . 552) (nil fontified nil 547 . 550) (nil fontified nil 545 . 547) (nil fontified nil 542 . 545) (nil fontified nil 540 . 542) (nil fontified nil 539 . 540) (nil fontified nil 536 . 539) (nil fontified nil 534 . 536) (nil fontified nil 527 . 534) (527 . 585)) nil (26039 53552 664549 920000) 0 nil])
([nil nil ((585 . 586)) nil (26039 53552 664542 116000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -569) (undo-tree-id2116 . -1) (undo-tree-id2117 . -1) 570 (t 26039 53552 678896 740000)) nil (26039 53563 201509 300000) 0 nil])
([nil nil ((569 . 570)) nil (26039 53563 201499 56000) 0 nil])
([nil nil ((527 . 528)) nil (26039 53563 201495 186000) 0 nil])
([nil nil ((596 . 598) (t 26039 53563 215562 802000)) nil (26039 53582 440698 760000) 0 nil])
([nil nil ((587 . 596)) nil (26039 53582 440697 616000) 0 nil])
([nil nil ((596 . 597)) nil (26039 53582 440696 793000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -596) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) 597) nil (26039 53582 440695 577000) 0 nil])
([nil nil ((596 . 598)) nil (26039 53582 440689 792000) 0 nil])
([nil nil ((apply yas--snippet-revive 596 606 #s(yas--snippet nil nil #s(yas--exit 605 nil) 106 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 605 nil) 106 nil nil nil nil)) (596 . 606) (#("println!($0)" 0 12 (fontified nil)) . 596) (596 . 608) (#("pr" 0 2 (fontified nil)) . 596) (596 . 598) (#("println!(â€¦)" 0 11 (fontified nil)) . -596) (596 . 607) (#("pr" 0 2 (fontified t)) . -596) (undo-tree-id2135 . -2) (undo-tree-id2136 . -2) (undo-tree-id2137 . -1) (undo-tree-id2138 . -1) (undo-tree-id2139 . -1) (undo-tree-id2140 . -2) (undo-tree-id2141 . -2) (undo-tree-id2142 . -2) (undo-tree-id2143 . -2) (undo-tree-id2144 . -2) (undo-tree-id2145 . -2) (undo-tree-id2146 . -2) (undo-tree-id2147 . -2) (undo-tree-id2148 . -2) 598) nil (26039 53582 440687 181000) 0 nil])
([nil nil ((605 . 607)) nil (26039 53582 440668 556000) 0 nil])
([nil nil ((606 . 611)) nil (26039 53582 440667 744000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -610) (undo-tree-id2125 . -1) (undo-tree-id2126 . -1) (undo-tree-id2127 . -1) (undo-tree-id2128 . -1) (undo-tree-id2129 . -1) (undo-tree-id2130 . -1) (undo-tree-id2131 . -1) (undo-tree-id2132 . -1) (undo-tree-id2133 . -1) (undo-tree-id2134 . -1) 611) nil (26039 53582 440666 449000) 0 nil])
([nil nil ((610 . 613)) nil (26039 53582 440658 372000) 0 nil])
([nil nil ((614 . 616)) nil (26039 53582 440657 619000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -615) (undo-tree-id2118 . -1) (undo-tree-id2119 . -1) (undo-tree-id2120 . -1) (undo-tree-id2121 . -1) (undo-tree-id2122 . -1) (undo-tree-id2123 . -1) (undo-tree-id2124 . -1) 616) nil (26039 53582 440655 875000) 0 nil])
([nil nil ((615 . 616)) nil (26039 53582 440645 364000) 0 nil])
([nil nil ((616 . 618)) nil (26039 53582 440644 473000) 0 nil])
([nil nil ((615 . 616)) nil (26039 53582 440643 250000) 0 nil])
([nil nil ((620 . 621)) nil (26039 53582 440639 404000) 0 nil])
([nil nil ((688 . 691) (t 26039 53582 488895 27000)) nil (26039 53607 996117 426000) 0 nil])
([nil nil ((apply yas--snippet-revive 688 697 #s(yas--snippet nil nil #s(yas--exit 696 nil) 107 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 696 nil) 107 nil nil nil nil)) (688 . 697) (#("assert!($0)" 0 11 (fontified nil)) . 688) (688 . 699) (#("ass" 0 3 (fontified nil)) . 688) (688 . 691) (#("assert!(â€¦)" 0 10 (fontified nil)) . -688) (688 . 698) (#("ass" 0 3 (fontified t)) . -688) (undo-tree-id2153 . -3) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -2) (undo-tree-id2159 . -2) (undo-tree-id2160 . -3) (undo-tree-id2161 . -3) (undo-tree-id2162 . -3) (undo-tree-id2163 . -3) 691) nil (26039 53607 996112 970000) 0 nil])
([nil nil ((#("assert!()" 0 7 (face font-lock-preprocessor-face fontified t) 7 8 (face (rainbow-delimiters-depth-3-face) fontified t) 8 9 (face (rainbow-delimiters-depth-3-face) fontified t)) . 688) (undo-tree-id2164 . -8) (undo-tree-id2165 . -8) (undo-tree-id2166 . -8) (undo-tree-id2167 . -8) (undo-tree-id2168 . -8) (undo-tree-id2169 . -8) (undo-tree-id2170 . -8) (undo-tree-id2171 . -8) (undo-tree-id2172 . -8) (undo-tree-id2173 . -8) (undo-tree-id2174 . -8) (undo-tree-id2175 . -9) (t 26039 53608 42226 892000)) nil (26039 53610 717236 915000) 0 nil])
([nil nil ((#("println!(\"err: {}\", err);" 0 8 (face rust-builtin-formatting-macro fontified t) 8 9 (face (rainbow-delimiters-depth-3-face) fontified t) 9 15 (face font-lock-string-face fontified t) 15 17 (face rust-string-interpolation fontified t) 17 18 (face font-lock-string-face fontified t) 18 23 (fontified t) 23 24 (face (rainbow-delimiters-depth-3-face) fontified t) 24 25 (fontified t)) . 596) (undo-tree-id2209 . -25) (t 26039 53610 732226 737000)) nil (26039 53661 934947 880000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 596) (undo-tree-id2208 . -1)) nil (26039 53661 934946 184000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -596) (undo-tree-id2204 . -8) (undo-tree-id2205 . -8) (undo-tree-id2206 . -8) (undo-tree-id2207 . -8)) nil (26039 53661 934943 888000) 0 nil])
([nil nil ((589 . 597) (#("        " 0 8 (fontified nil)) . 588) (undo-tree-id2176 . -8) (undo-tree-id2177 . -8) (undo-tree-id2178 . -8) (undo-tree-id2179 . -8) (undo-tree-id2180 . -8) (undo-tree-id2181 . -8) (undo-tree-id2182 . -8) (undo-tree-id2183 . -8) (undo-tree-id2184 . -8) (undo-tree-id2185 . -8) (undo-tree-id2186 . -8) (undo-tree-id2187 . -8) (undo-tree-id2188 . -8) (undo-tree-id2189 . -8) (undo-tree-id2190 . -8) (undo-tree-id2191 . -8) (undo-tree-id2192 . -8) (undo-tree-id2193 . -8) (undo-tree-id2194 . -8) (undo-tree-id2195 . -8) (undo-tree-id2196 . -8) (undo-tree-id2197 . -8) (undo-tree-id2198 . -8) (undo-tree-id2199 . -8) (undo-tree-id2200 . -8) (undo-tree-id2201 . -8) (undo-tree-id2202 . -8) (undo-tree-id2203 . -8) (596 . 597)) nil (26039 53661 934936 210000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -597) (undo-tree-id2210 . -1) (undo-tree-id2211 . -1) (undo-tree-id2212 . -1) (undo-tree-id2213 . -1) (undo-tree-id2214 . -1) (undo-tree-id2215 . -1) (undo-tree-id2216 . -1) (undo-tree-id2217 . -1) (undo-tree-id2218 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -598) (undo-tree-id2219 . -1) (undo-tree-id2220 . -1) (undo-tree-id2221 . -1) (undo-tree-id2222 . -1) (undo-tree-id2223 . -1) (undo-tree-id2224 . -1) 599 (t 26039 53661 948890 456000)) nil (26039 53786 962161 490000) 0 nil])
([nil nil ((597 . 599) (t 26039 53774 545550 657000)) nil (26039 53788 760302 753000) 0 nil] [nil nil ((#("assert!((.approx_eq(0.0, F64Margin::default()))" 0 7 (face font-lock-preprocessor-face fontified t) 7 8 (face (rainbow-delimiters-depth-3-face) fontified t) 8 9 (face (rainbow-delimiters-depth-4-face) fontified t) 9 10 (fontified t) 10 19 (fontified t) 19 20 (face (rainbow-delimiters-depth-5-face) fontified t) 20 23 (fontified t) 23 25 (fontified t) 25 34 (face font-lock-type-face fontified t) 34 36 (fontified t) 36 43 (fontified t) 43 44 (face (rainbow-delimiters-depth-6-face) fontified t) 44 45 (face (rainbow-delimiters-depth-6-face) fontified t) 45 46 (face (rainbow-delimiters-depth-5-face) fontified t) 46 47 (face (rainbow-delimiters-depth-4-face) fontified t)) . 597) (undo-tree-id2225 . -9) (undo-tree-id2226 . -8) (undo-tree-id2227 . -9) (undo-tree-id2228 . -6) (undo-tree-id2229 . -16) (undo-tree-id2230 . -19) (undo-tree-id2231 . -21) (undo-tree-id2232 . -23) (undo-tree-id2233 . -23) (undo-tree-id2234 . -23) (undo-tree-id2235 . -23) (undo-tree-id2236 . -23) (undo-tree-id2237 . -34) (undo-tree-id2238 . -43) (undo-tree-id2239 . -43) (undo-tree-id2240 . -43) (undo-tree-id2241 . -43) (undo-tree-id2242 . -43) (undo-tree-id2243 . -44) (undo-tree-id2244 . -44) (undo-tree-id2245 . -44) (undo-tree-id2246 . -44) (undo-tree-id2247 . -44) (undo-tree-id2248 . -45) (undo-tree-id2249 . -45) (undo-tree-id2250 . -45) (undo-tree-id2251 . -45) (undo-tree-id2252 . -45) (undo-tree-id2253 . -47) (t 26039 53774 545550 657000)) ((597 . 644)) (26039 53786 961525 265000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -597) (undo-tree-id2309 . -1) (undo-tree-id2310 . -1) (undo-tree-id2311 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -598) (undo-tree-id2312 . -1) (undo-tree-id2313 . -1) (undo-tree-id2314 . -1) 599 (t 26039 53788 805549 837000)) nil (26039 54126 116940 197000) 0 nil])
nil
([nil nil ((#("default())" 0 7 (fontified t) 7 8 (face (rainbow-delimiters-depth-6-face) fontified t) 8 9 (face (rainbow-delimiters-depth-6-face) fontified t) 9 10 (face (rainbow-delimiters-depth-5-face) fontified t)) . -633) (undo-tree-id2308 . -10) 643) nil (26039 54126 116935 45000) 0 nil])
([nil nil ((#("F64Margin::" 0 9 (face font-lock-type-face fontified t) 9 11 (fontified t)) . -622) (undo-tree-id2307 . -11) 633) nil (26039 54126 116933 496000) 0 nil])
([nil nil ((#("0, " 0 1 (fontified t) 1 3 (fontified t)) . -619) (undo-tree-id2306 . -3) 622) nil (26039 54126 116931 924000) 0 nil])
([nil nil ((#("0." 0 2 (fontified t)) . -617) (undo-tree-id2305 . -2) 619) nil (26039 54126 116930 313000) 0 nil])
([nil nil ((#("eq(" 0 2 (fontified t) 2 3 (face (rainbow-delimiters-depth-5-face) fontified t)) . -614) (undo-tree-id2304 . -3) 617) nil (26039 54126 116928 789000) 0 nil])
([nil nil ((#("approx_" 0 7 (fontified t)) . -607) (undo-tree-id2303 . -7) 614) nil (26039 54126 116927 329000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -605) (undo-tree-id2300 . -1) (undo-tree-id2301 . -1) (#("." 0 1 (fontified t)) . -606) (undo-tree-id2302 . -1) 607) nil (26039 54126 116925 457000) 0 nil])
([nil nil ((605 . 606)) nil (26039 54126 116922 437000) 0 nil])
([nil nil ((#("q" 0 1 (fontified t)) . -605) (undo-tree-id2299 . -1) 606) nil (26039 54126 116921 671000) 0 nil])
([nil nil ((605 . 611)) nil (26039 54126 116920 227000) 0 nil])
([nil nil ((#("assert!(approx)" 0 7 (face font-lock-preprocessor-face fontified t) 7 8 (face (rainbow-delimiters-depth-3-face) fontified t) 8 14 (fontified t) 14 15 (face (rainbow-delimiters-depth-3-face) fontified t)) . 597) (undo-tree-id2297 . -8) (undo-tree-id2298 . -8)) nil (26039 54126 116919 406000) 0 nil])
([nil nil ((597 . 603)) nil (26039 54126 116917 477000) 0 nil])
([nil nil ((603 . 605)) nil (26039 54126 116916 562000) 0 nil])
([nil nil ((96 . 114) (apply yas--snippet-revive 597 616 #s(yas--snippet nil nil #s(yas--exit 615 nil) 109 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 615 nil) 109 nil nil nil nil)) (597 . 616) (#("assert_approx_eq!($0)" 0 21 (fontified nil)) . 597) (597 . 618) (#("assert_a" 0 8 (fontified nil)) . 597) (597 . 605) (#("assert_approx_eq!(â€¦) (use float_cmp::assert_approx_eq)" 0 54 (fontified nil)) . -597) (597 . 651) (#("assert_a" 0 8 (fontified t)) . -597) (undo-tree-id2296 . -8) 605) nil (26039 54126 116915 204000) 0 nil])
([nil nil ((633 . 634)) nil (26039 54126 116912 398000) 0 nil])
([nil nil ((633 . 636) (#("f" 0 1 (fontified nil)) . 633) (633 . 634) (#("f64" 0 3 (fontified nil)) . -633) (633 . 636) (#("f" 0 1 (fontified t)) . -633) (undo-tree-id2295 . -1) 634) nil (26039 54126 116911 289000) 0 nil])
([nil nil ((636 . 637)) nil (26039 54126 116909 106000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -636) (undo-tree-id2294 . -1) 637) nil (26039 54126 116908 347000) 0 nil])
([nil nil ((636 . 638)) nil (26039 54126 116906 908000) 0 nil])
([nil nil ((638 . 639)) nil (26039 54126 116906 325000) 0 nil])
([nil nil ((638 . 641) (#("e" 0 1 (fontified nil)) . 638) (638 . 639) (#("err" 0 3 (fontified nil)) . -638) (638 . 641) (#("e" 0 1 (fontified t)) . -638) (undo-tree-id2293 . -1) 639) nil (26039 54126 116905 135000) 0 nil])
([nil nil ((641 . 646)) nil (26039 54126 116903 40000) 0 nil])
([nil nil ((646 . 647)) nil (26039 54126 116902 385000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -646) (undo-tree-id2292 . -1) 647) nil (26039 54126 116901 651000) 0 nil])
([nil nil ((646 . 648)) nil (26039 54126 116900 106000) 0 nil])
([nil nil ((648 . 649)) nil (26039 54126 116899 481000) 0 nil])
([nil nil ((648 . 651) (#("f" 0 1 (fontified nil)) . 648) (648 . 649) (#("f64" 0 3 (fontified nil)) . -648) (648 . 651) (#("f" 0 1 (fontified t)) . -648) (undo-tree-id2291 . -1) 649) nil (26039 54126 116898 337000) 0 nil])
([nil nil ((651 . 656)) nil (26039 54126 116896 215000) 0 nil])
([nil nil ((#("mar" 0 3 (fontified t)) . -653) (undo-tree-id2290 . -3) 656) nil (26039 54126 116895 464000) 0 nil])
([nil nil ((#("f64::" 0 3 (face font-lock-type-face fontified t) 3 5 (fontified t)) . -648) (undo-tree-id2289 . -5) 653) nil (26039 54126 116893 921000) 0 nil])
([nil nil ((648 . 649)) nil (26039 54126 116892 516000) 0 nil])
([nil nil ((648 . 657) (#("F" 0 1 (fontified nil)) . 648) (648 . 649) (#("F64Margin" 0 9 (fontified nil)) . -648) (648 . 657) (#("F" 0 1 (face font-lock-type-face fontified t)) . -648) (undo-tree-id2288 . -1) 649) nil (26039 54126 116891 514000) 0 nil])
([nil nil ((657 . 659)) nil (26039 54126 116889 580000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -657) (undo-tree-id2286 . -1) (#(":" 0 1 (fontified t)) . -658) (undo-tree-id2287 . -1) 659) nil (26039 54126 116888 684000) 0 nil])
([nil nil ((657 . 660)) nil (26039 54126 116886 370000) 0 nil])
([nil nil ((659 . 660)) nil (26039 54126 116885 780000) 0 nil])
([nil nil ((659 . 666) (#("e" 0 1 (fontified nil)) . 659) (659 . 660) (#("epsilon" 0 7 (fontified nil)) . -659) (659 . 666) (#("e" 0 1 (fontified t)) . -659) (undo-tree-id2285 . -1) 660) nil (26039 54126 116884 735000) 0 nil])
([nil nil ((666 . 668)) nil (26039 54126 116882 769000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -667) (undo-tree-id2284 . -1) 668) nil (26039 54126 116882 3000) 0 nil])
([nil nil ((667 . 671)) nil (26039 54126 116880 609000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -670) (undo-tree-id2283 . -1) 671) nil (26039 54126 116879 770000) 0 nil])
([nil nil ((670 . 672)) nil (26039 54126 116878 208000) 0 nil])
([nil nil ((672 . 675)) nil (26039 54126 116877 357000) 0 nil])
([nil nil ((674 . 678) (#("u" 0 1 (fontified nil)) . 674) (674 . 675) (#("ulps" 0 4 (fontified nil)) . -674) (674 . 678) (#("u" 0 1 (fontified t)) . -674) (undo-tree-id2281 . -1) (undo-tree-id2282 . -1) 675) nil (26039 54126 116875 887000) 0 nil])
([nil nil ((678 . 680)) nil (26039 54126 116872 895000) 0 nil])
([nil nil ((#("ulps: " 0 4 (face font-lock-variable-name-face fontified t) 4 6 (fontified t)) . -674) (undo-tree-id2271 . -5) (undo-tree-id2272 . -6) (undo-tree-id2273 . -6) (undo-tree-id2274 . -6) (undo-tree-id2275 . -6) (undo-tree-id2276 . -6) (undo-tree-id2277 . -6) (undo-tree-id2278 . -6) (undo-tree-id2279 . -6) (undo-tree-id2280 . -6) 680) nil (26039 54126 116871 849000) 0 nil])
([nil nil ((674 . 678)) nil (26039 54126 116864 165000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -676) (undo-tree-id2254 . -1) (undo-tree-id2255 . -1) (undo-tree-id2256 . -1) (undo-tree-id2257 . -1) (undo-tree-id2258 . -1) (undo-tree-id2259 . -1) (undo-tree-id2260 . -1) (undo-tree-id2261 . -1) (undo-tree-id2262 . -1) (undo-tree-id2263 . -1) (undo-tree-id2264 . -1) (undo-tree-id2265 . -1) (#("e" 0 1 (fontified t)) . -677) (undo-tree-id2266 . -1) (undo-tree-id2267 . -1) (undo-tree-id2268 . -1) (undo-tree-id2269 . -1) (undo-tree-id2270 . -1) 678) nil (26039 54126 116861 703000) 0 nil])
([nil nil ((676 . 694) (#("..Default::default()" 0 20 (fontified nil)) . -676) (676 . 696)) nil (26039 54126 116838 892000) 0 nil])
([nil nil ((542 . 543) (t 26039 54126 165530 459000)) nil (26039 54169 919852 129000) 0 nil])
([nil nil ((642 . 643)) nil (26039 54169 919851 103000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . -642) (undo-tree-id2326 . -1) (undo-tree-id2327 . -1) (undo-tree-id2328 . -1) (undo-tree-id2329 . -1) (undo-tree-id2330 . -1) (undo-tree-id2331 . -1) (undo-tree-id2332 . -1) (undo-tree-id2333 . -1) (undo-tree-id2334 . -1) (undo-tree-id2335 . -1) 643) nil (26039 54169 919849 658000) 0 nil])
([nil nil ((642 . 643)) nil (26039 54169 919841 105000) 0 nil])
([nil nil ((#("1" 0 1 (face font-lock-variable-name-face fontified t)) . -542) (undo-tree-id2315 . -1) (undo-tree-id2316 . -1) (undo-tree-id2317 . -1) (undo-tree-id2318 . -1) (undo-tree-id2319 . -1) (undo-tree-id2320 . -1) (undo-tree-id2321 . -1) (undo-tree-id2322 . -1) (undo-tree-id2323 . -1) (undo-tree-id2324 . -1) (undo-tree-id2325 . -1) 543) nil (26039 54169 919838 744000) 0 nil])
([nil nil ((542 . 543)) nil (26039 54169 919819 539000) 0 nil])
([nil nil ((607 . 615) (t 26039 54169 965527 942000)) nil (26039 54202 494510 799000) 0 nil])
([nil nil ((608 . 616) (#("        " 0 8 (fontified nil)) . 607) (undo-tree-id2466 . -8) (undo-tree-id2467 . -8) (undo-tree-id2468 . -8) (undo-tree-id2469 . -8) (undo-tree-id2470 . -8) (undo-tree-id2471 . -8) (undo-tree-id2472 . -8) (615 . 616)) nil (26039 54202 494509 616000) 0 nil])
([nil nil ((607 . 615)) nil (26039 54202 494504 157000) 0 nil])
([nil nil ((615 . 621)) nil (26039 54202 494503 535000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-variable-name-face fontified t)) . -619) (undo-tree-id2456 . -1) (undo-tree-id2457 . -1) (undo-tree-id2458 . -1) (undo-tree-id2459 . -1) (undo-tree-id2460 . -1) (undo-tree-id2461 . -1) (undo-tree-id2462 . -1) (#("o" 0 1 (face font-lock-variable-name-face fontified t)) . -620) (undo-tree-id2463 . -1) (undo-tree-id2464 . -1) (undo-tree-id2465 . -1) 621) nil (26039 54202 494502 322000) 0 nil])
([nil nil ((619 . 625)) nil (26039 54202 494495 9000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -624) (undo-tree-id2453 . -1) (undo-tree-id2454 . -1) (undo-tree-id2455 . -1) 625) nil (26039 54202 494494 185000) 0 nil])
([nil nil ((624 . 625)) nil (26039 54202 494491 603000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -624) (undo-tree-id2450 . -1) (undo-tree-id2451 . -1) (undo-tree-id2452 . -1) 625) nil (26039 54202 494490 863000) 0 nil])
([nil nil ((624 . 626)) nil (26039 54202 494487 720000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -624) (undo-tree-id2440 . -1) (undo-tree-id2441 . -1) (undo-tree-id2442 . -1) (undo-tree-id2443 . -1) (undo-tree-id2444 . -1) (undo-tree-id2445 . -1) (undo-tree-id2446 . -1) (#(" " 0 1 (fontified t)) . -625) (undo-tree-id2447 . -1) (undo-tree-id2448 . -1) (undo-tree-id2449 . -1) 626) nil (26039 54202 494486 504000) 0 nil])
([nil nil ((624 . 628)) nil (26039 54202 494479 384000) 0 nil])
([nil nil ((606 . 615)) nil (26039 54202 494478 735000) 0 nil])
([nil nil ((nil rear-nonsticky nil 685 . 686) (nil fontified nil 685 . 686) (nil fontified nil 684 . 685) (nil fontified nil 683 . 684) (nil fontified nil 671 . 683) (nil fontified nil 670 . 671) (nil fontified nil 669 . 670) (nil fontified nil 668 . 669) (nil fontified nil 667 . 668) (nil fontified nil 664 . 667) (nil fontified nil 658 . 664) (nil fontified nil 657 . 658) (nil fontified nil 656 . 657) (nil fontified nil 655 . 656) (nil fontified nil 652 . 655) (nil fontified nil 650 . 652) (nil fontified nil 647 . 650) (nil fontified nil 645 . 647) (nil fontified nil 642 . 645) (nil fontified nil 640 . 642) (nil fontified nil 639 . 640) (nil fontified nil 636 . 639) (nil fontified nil 634 . 636) (nil fontified nil 627 . 634) (nil fontified nil 626 . 627) (nil fontified nil 623 . 626) (nil fontified nil 619 . 623) (nil fontified nil 618 . 619) (nil fontified nil 615 . 618) (615 . 686)) nil (26039 54202 494477 212000) 0 nil])
([nil nil ((#("        let err1 = ()" 0 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 16 (face font-lock-variable-name-face fontified t) 16 19 (fontified t) 19 20 (face (rainbow-delimiters-depth-3-face) fontified t) 20 21 (face (rainbow-delimiters-depth-3-face) fontified t)) . 687) (undo-tree-id2353 . -8) (undo-tree-id2354 . -8) (undo-tree-id2355 . -9) (undo-tree-id2356 . -9) (undo-tree-id2357 . -10) (undo-tree-id2358 . -10) (undo-tree-id2359 . -11) (undo-tree-id2360 . -11) (undo-tree-id2361 . -12) (undo-tree-id2362 . -12) (undo-tree-id2363 . -12) (undo-tree-id2364 . -12) (undo-tree-id2365 . -12) (undo-tree-id2366 . -12) (undo-tree-id2367 . -12) (undo-tree-id2368 . -12) (undo-tree-id2369 . -12) (undo-tree-id2370 . -12) (undo-tree-id2371 . -12) (undo-tree-id2372 . -12) (undo-tree-id2373 . -12) (undo-tree-id2374 . -12) (undo-tree-id2375 . -12) (undo-tree-id2376 . -13) (undo-tree-id2377 . -13) (undo-tree-id2378 . -13) (undo-tree-id2379 . -14) (undo-tree-id2380 . -14) (undo-tree-id2381 . -15) (undo-tree-id2382 . -15) (undo-tree-id2383 . -16) (undo-tree-id2384 . -16) (undo-tree-id2385 . -16) (undo-tree-id2386 . -16) (undo-tree-id2387 . -17) (undo-tree-id2388 . -17) (undo-tree-id2389 . -17) (undo-tree-id2390 . -17) (undo-tree-id2391 . -17) (undo-tree-id2392 . -17) (undo-tree-id2393 . -17) (undo-tree-id2394 . -17) (undo-tree-id2395 . -17) (undo-tree-id2396 . -17) (undo-tree-id2397 . -17) (undo-tree-id2398 . -17) (undo-tree-id2399 . -17) (undo-tree-id2400 . -17) (undo-tree-id2401 . -17) (undo-tree-id2402 . -17) (undo-tree-id2403 . -17) (undo-tree-id2404 . -17) (undo-tree-id2405 . -18) (undo-tree-id2406 . -18) (undo-tree-id2407 . -19) (undo-tree-id2408 . -19) (undo-tree-id2409 . -19) (undo-tree-id2410 . -19) (undo-tree-id2411 . -19) (undo-tree-id2412 . -19) (undo-tree-id2413 . -20) (undo-tree-id2414 . -20) (undo-tree-id2415 . -20) (undo-tree-id2416 . -20) (undo-tree-id2417 . -20) (undo-tree-id2418 . -20) (undo-tree-id2419 . -21) (undo-tree-id2420 . -21) (undo-tree-id2421 . -21) (undo-tree-id2422 . -21) (undo-tree-id2423 . -20) (undo-tree-id2424 . -20) (undo-tree-id2425 . -20) (undo-tree-id2426 . -20) (undo-tree-id2427 . -20) (undo-tree-id2428 . -20) (undo-tree-id2429 . -20) (undo-tree-id2430 . -20) (undo-tree-id2431 . -20) (undo-tree-id2432 . -20) (undo-tree-id2433 . -21) (undo-tree-id2434 . -21) (undo-tree-id2435 . -21) (undo-tree-id2436 . -21) (undo-tree-id2437 . -21) (undo-tree-id2438 . -21) (undo-tree-id2439 . -21)) nil (26039 54202 494469 822000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 687) (undo-tree-id2345 . 1) (undo-tree-id2346 . 1) (undo-tree-id2347 . -1) (undo-tree-id2348 . -1) (undo-tree-id2349 . -1) (undo-tree-id2350 . -1) (undo-tree-id2351 . -1) (undo-tree-id2352 . -1)) nil (26039 54202 494404 930000) 0 nil])
([nil nil ((#("0" 0 1 (face font-lock-variable-name-face fontified t)) . -622) (undo-tree-id2343 . -1) (undo-tree-id2344 . -1) 623) nil (26039 54202 494398 420000) 0 nil])
([nil nil ((622 . 623)) nil (26039 54202 494396 14000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -662) (undo-tree-id2336 . -1) (undo-tree-id2337 . -1) (undo-tree-id2338 . -1) (undo-tree-id2339 . -1) (undo-tree-id2340 . -1) (undo-tree-id2341 . -1) (undo-tree-id2342 . -1) 663) nil (26039 54202 494393 881000) 0 nil])
([nil nil ((662 . 663)) nil (26039 54202 494379 999000) 0 nil])
([nil nil ((786 . 799) (t 26039 54202 508859 405000)) nil (26039 54208 382850 52000) 0 nil])
([nil nil ((nil rear-nonsticky nil 880 . 881) (nil fontified nil 880 . 881) (nil fontified nil 879 . 880) (nil fontified nil 878 . 879) (nil fontified nil 877 . 878) (nil fontified nil 868 . 877) (nil fontified nil 861 . 868) (nil fontified nil 851 . 861) (nil fontified nil 844 . 851) (nil fontified nil 843 . 844) (nil fontified nil 842 . 843) (nil fontified nil 833 . 842) (nil fontified nil 826 . 833) (nil fontified nil 822 . 826) (nil fontified nil 820 . 822) (nil fontified nil 817 . 820) (nil fontified nil 816 . 817) (nil fontified nil 799 . 816) (799 . 881)) nil (26039 54224 651912 784000) 0 nil] [nil nil ((nil rear-nonsticky nil 880 . 881) (nil fontified nil 880 . 881) (nil fontified nil 879 . 880) (nil fontified nil 878 . 879) (nil fontified nil 877 . 878) (nil fontified nil 868 . 877) (nil fontified nil 861 . 868) (nil fontified nil 851 . 861) (nil fontified nil 844 . 851) (nil fontified nil 843 . 844) (nil fontified nil 842 . 843) (nil fontified nil 833 . 842) (nil fontified nil 826 . 833) (nil fontified nil 822 . 826) (nil fontified nil 820 . 822) (nil fontified nil 817 . 820) (nil fontified nil 816 . 817) (nil fontified nil 799 . 816) (799 . 881)) ((#("assert_approx_eq!(f64, err0, 0.0, F64Margin {epsilon: 1e-8, ..Default::default()})" 0 17 (face font-lock-preprocessor-face fontified nil) 17 18 (face (rainbow-delimiters-depth-3-face) fontified nil) 18 21 (face font-lock-type-face fontified nil) 21 23 (fontified nil) 23 27 (fontified nil) 27 34 (fontified nil) 34 43 (face font-lock-type-face fontified nil) 43 44 (fontified nil) 44 45 (face (rainbow-delimiters-depth-4-face) fontified nil) 45 52 (face font-lock-variable-name-face fontified nil) 52 62 (fontified nil) 62 69 (face font-lock-type-face fontified nil) 69 78 (fontified nil) 78 79 (face (rainbow-delimiters-depth-5-face) fontified nil) 79 80 (face (rainbow-delimiters-depth-5-face) fontified nil) 80 81 (face (rainbow-delimiters-depth-4-face) fontified nil) 81 82 (face (rainbow-delimiters-depth-3-face) rear-nonsticky nil fontified nil)) . 799) (undo-tree-id2473 . -82) (nil rear-nonsticky t 880 . 881)) (26039 54208 382542 387000) 0 nil])
([nil nil ((786 . 787)) nil (26039 54224 651909 966000) 0 nil])
nil
([nil nil ((882 . 883)) nil (26039 54224 651909 245000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -796) (undo-tree-id2476 . -4) (undo-tree-id2477 . -4) (undo-tree-id2478 . -4) (undo-tree-id2479 . -4) (undo-tree-id2480 . -4) (undo-tree-id2481 . -4) (undo-tree-id2482 . -4) (undo-tree-id2483 . -4) (undo-tree-id2484 . -4) (undo-tree-id2485 . -4) (undo-tree-id2486 . -4) (undo-tree-id2487 . -4) (undo-tree-id2488 . -4) (undo-tree-id2489 . -4) (undo-tree-id2490 . -4) (undo-tree-id2491 . -4) (undo-tree-id2492 . -4) (undo-tree-id2493 . -4) (undo-tree-id2494 . -4) (undo-tree-id2495 . -4) (undo-tree-id2496 . -4) (undo-tree-id2497 . -4) 883) nil (26039 54224 651907 433000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -822) (undo-tree-id2474 . -1) (undo-tree-id2475 . -1) 823) nil (26039 54224 651889 514000) 0 nil])
([nil current ((822 . 823)) nil (26039 54224 651876 82000) 0 nil])
nil
