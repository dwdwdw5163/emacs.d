(undo-tree-save-format-version . 1)
"97a0247c80829fa973f037af5610b0e02a40dfc8"
[nil nil nil nil (26040 42672 115467 227000) 0 nil]
([nil nil ((1 . 3) (t 26040 42177 99526 505000)) nil (26040 42672 115466 120000) 0 nil])
([nil nil ((1 . 3)) nil (26040 42672 115465 197000) 0 nil])
([nil nil ((apply yas--snippet-revive 1 5 #s(yas--snippet nil nil #s(yas--exit 5 nil) 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 5 nil) 1 nil nil nil nil)) (1 . 5) (#("mod $0" 0 6 (fontified nil)) . 1) (1 . 7) (#("mo" 0 2 (fontified nil)) . 1) (1 . 3) (#("mod" 0 3 (fontified nil)) . -1) (1 . 4) (#("mo" 0 2 (fontified t)) . -1) (undo-tree-id7 . -2) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -2) (undo-tree-id11 . -2) (undo-tree-id12 . -2) (undo-tree-id13 . -2) 3) nil (26040 42672 115463 613000) 0 nil])
([nil nil ((5 . 6)) nil (26040 42672 115456 615000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -5) (undo-tree-id5 . -1) (undo-tree-id6 . -1) 6) nil (26040 42672 115455 440000) 0 nil])
([nil nil ((5 . 7)) nil (26040 42672 115452 489000) 0 nil])
([nil nil ((5 . 9) (#("ff" 0 2 (fontified nil)) . 5) (5 . 7) (#("ffi;" 0 4 (fontified nil)) . -5) (5 . 9) (#("ff" 0 2 (face font-lock-constant-face fontified t)) . -5) (undo-tree-id0 . -2) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -2) (undo-tree-id4 . -2) 7) nil (26040 42672 115448 406000) 0 nil])
([nil nil ((22 . 27) (t 26040 42672 126223 231000)) nil (26040 42979 712861 575000) 0 nil])
([nil nil ((27 . 32)) nil (26040 42979 712860 677000) 0 nil])
([nil nil ((#("I" 0 1 (face font-lock-type-face fontified t)) . -27) (undo-tree-id277 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -28) (undo-tree-id278 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -29) (undo-tree-id279 . -1) (#("g" 0 1 (face font-lock-type-face fontified t)) . -30) (undo-tree-id280 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -31) (undo-tree-id281 . -1) 32) nil (26040 42979 712859 395000) 0 nil])
([nil nil ((27 . 31)) nil (26040 42979 712854 615000) 0 nil])
([nil nil ((31 . 39) (#(" " 0 1 (fontified nil)) . 30) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (31 . 32)) nil (26040 42979 712853 696000) 0 nil])
([nil nil ((30 . 34)) nil (26040 42979 712851 467000) 0 nil])
([nil nil ((27 . 32) (#("Im" 0 2 (fontified nil)) . 27) (27 . 29) (#("let image
        " 0 3 (face font-lock-keyword-face fontified nil) 3 4 (fontified nil) 4 9 (fontified nil) 9 10 (fontified nil) 10 18 (fontified t)) . 27) (undo-tree-id272 . -18) (undo-tree-id273 . -4) (31 . 36) (#("ima" 0 3 (face font-lock-variable-name-face fontified t)) . -31) (undo-tree-id274 . -3) 34) nil (26040 42979 712850 305000) 0 nil])
([nil nil ((#("image" 0 5 (fontified t)) . -27) (undo-tree-id271 . -5) 32) nil (26040 42979 712846 833000) 0 nil])
([nil nil ((27 . 30)) nil (26040 42979 712845 314000) 0 nil])
([nil nil ((30 . 44)) nil (26040 42979 712844 663000) 0 nil])
([nil nil ((10 . 12)) nil (26040 42979 712843 811000) 0 nil])
([nil nil ((1 . 2)) nil (26040 42979 712843 295000) 0 nil])
([nil nil ((2 . 3)) nil (26040 42979 712842 698000) 0 nil])
([nil nil ((1 . 6)) nil (26040 42979 712842 184000) 0 nil])
([nil nil ((5 . 10) (#("i" 0 1 (fontified nil)) . 5) (5 . 6) (#("image" 0 5 (fontified nil)) . -5) (5 . 10) (#("i" 0 1 (face font-lock-constant-face fontified t)) . -5) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) 6) nil (26040 42979 712840 919000) 0 nil])
([nil nil ((10 . 12)) nil (26040 42979 712835 888000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -10) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (#(";" 0 1 (fontified t)) . -11) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) 12) nil (26040 42979 712834 674000) 0 nil])
([nil nil ((10 . 17)) nil (26040 42979 712827 652000) 0 nil])
([nil nil ((#("Image" 0 5 (face font-lock-type-face fontified t)) . -12) (undo-tree-id235 . -5) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -2) (undo-tree-id242 . -2) (undo-tree-id243 . -2) (undo-tree-id244 . -3) (undo-tree-id245 . -3) (undo-tree-id246 . -3) (undo-tree-id247 . -4) (undo-tree-id248 . -4) (undo-tree-id249 . -4) (undo-tree-id250 . -5) (undo-tree-id251 . -5) (undo-tree-id252 . -5) (undo-tree-id253 . -5) (undo-tree-id254 . -5) 17) nil (26040 42979 712826 199000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -10) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (#(":" 0 1 (fontified t)) . -11) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) 12) nil (26040 42979 712810 498000) 0 nil])
([nil nil ((10 . 11)) nil (26040 42979 712763 685000) 0 nil])
([nil nil ((58 . 60)) nil (26040 42979 712763 111000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -58) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (#(":" 0 1 (fontified t)) . -59) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) 60) nil (26040 42979 712761 352000) 0 nil])
([nil nil ((#("Image" 0 5 (face font-lock-type-face fontified t)) . -53) (undo-tree-id129 . -5) (undo-tree-id130 . -5) (undo-tree-id131 . -5) (undo-tree-id132 . -5) (undo-tree-id133 . -5) (undo-tree-id134 . -5) (undo-tree-id135 . -5) (undo-tree-id136 . -5) (undo-tree-id137 . -5) (undo-tree-id138 . -5) (undo-tree-id139 . -5) (undo-tree-id140 . -5) (undo-tree-id141 . -5) (undo-tree-id142 . -5) (undo-tree-id143 . -5) (undo-tree-id144 . -5) (undo-tree-id145 . -5) (undo-tree-id146 . -5) (undo-tree-id147 . -5) (undo-tree-id148 . -5) (undo-tree-id149 . -5) 58) nil (26040 42979 712374 901000) 0 nil])
([nil nil ((53 . 54)) nil (26040 42979 712359 659000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -53) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) 54) nil (26040 42979 712358 734000) 0 nil])
([nil nil ((53 . 58)) nil (26040 42979 712355 833000) 0 nil])
([nil nil ((#("Image" 0 5 (face font-lock-type-face fontified t)) . -53) (undo-tree-id108 . -5) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -2) (undo-tree-id112 . -2) (undo-tree-id113 . -2) (undo-tree-id114 . -2) (undo-tree-id115 . -3) (undo-tree-id116 . -3) (undo-tree-id117 . -4) (undo-tree-id118 . -4) (undo-tree-id119 . -5) (undo-tree-id120 . -5) (undo-tree-id121 . -5) (undo-tree-id122 . -5) (undo-tree-id123 . -5) (undo-tree-id124 . -5) (undo-tree-id125 . -5) 58) nil (26040 42979 712354 26000) 0 nil])
([nil nil ((#("use image;" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 9 (face font-lock-constant-face fontified t) 9 10 (fontified t)) . 1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -2) (undo-tree-id32 . -2) (undo-tree-id33 . -2) (undo-tree-id34 . -3) (undo-tree-id35 . -3) (undo-tree-id36 . -3) (undo-tree-id37 . -4) (undo-tree-id38 . -4) (undo-tree-id39 . -4) (undo-tree-id40 . -4) (undo-tree-id41 . -4) (undo-tree-id42 . -4) (undo-tree-id43 . -4) (undo-tree-id44 . -4) (undo-tree-id45 . -4) (undo-tree-id46 . -4) (undo-tree-id47 . -4) (undo-tree-id48 . -4) (undo-tree-id49 . -4) (undo-tree-id50 . -4) (undo-tree-id51 . -4) (undo-tree-id52 . -9) (undo-tree-id53 . -9) (undo-tree-id54 . -9) (undo-tree-id55 . -9) (undo-tree-id56 . -9) (undo-tree-id57 . -9) (undo-tree-id58 . -9) (undo-tree-id59 . -9) (undo-tree-id60 . -9) (undo-tree-id61 . -9) (undo-tree-id62 . -9) (undo-tree-id63 . -9) (undo-tree-id64 . -9) (undo-tree-id65 . -9) (undo-tree-id66 . -9) (undo-tree-id67 . -9) (undo-tree-id68 . -9) (undo-tree-id69 . -9) (undo-tree-id70 . -9) (undo-tree-id71 . -9) (undo-tree-id72 . -9) (undo-tree-id73 . -9) (undo-tree-id74 . -9) (undo-tree-id75 . -9) (undo-tree-id76 . -9) (undo-tree-id77 . -9) (undo-tree-id78 . -9) (undo-tree-id79 . -9) (undo-tree-id80 . -9) (undo-tree-id81 . -9) (undo-tree-id82 . -9) (undo-tree-id83 . -9) (undo-tree-id84 . -9) (undo-tree-id85 . -9) (undo-tree-id86 . -9) (undo-tree-id87 . -9) (undo-tree-id88 . -9) (undo-tree-id89 . -9) (undo-tree-id90 . -9) (undo-tree-id91 . -9) (undo-tree-id92 . -9) (undo-tree-id93 . -9) (undo-tree-id94 . -9) (undo-tree-id95 . -9) (undo-tree-id96 . -9) (undo-tree-id97 . -9) (undo-tree-id98 . -9) (undo-tree-id99 . -9) (undo-tree-id100 . -9) (undo-tree-id101 . -9) (undo-tree-id102 . -9) (undo-tree-id103 . -9) (undo-tree-id104 . -10) (undo-tree-id105 . -10) (undo-tree-id106 . -10) (undo-tree-id107 . -10)) nil (26040 42979 711981 485000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1) (undo-tree-id20 . 1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1)) nil (26040 42979 711926 999000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1) (undo-tree-id14 . 1) (undo-tree-id15 . 1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1)) nil (26040 42979 711917 622000) 0 nil])
([nil nil ((1 . 3) (t 26040 42979 722908 624000)) nil (26040 43010 877348 975000) 0 nil])
([nil nil ((nil rear-nonsticky nil 58 . 59) (nil fontified nil 1 . 59) (1 . 59)) nil (26040 43010 877344 656000) 0 nil])
([nil nil ((101 . 106) (t 26040 43010 886243 862000)) nil (26040 43127 645165 728000) 0 nil])
([nil nil ((101 . 112) (#("Image" 0 5 (fontified nil)) . 101) (101 . 106) (#("ImageReader" 0 11 (fontified nil)) . -101) (101 . 112) (#("Image" 0 5 (face font-lock-type-face fontified t)) . -101) (undo-tree-id311 . -5) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -2) (undo-tree-id316 . -2) (undo-tree-id317 . -2) (undo-tree-id318 . -3) (undo-tree-id319 . -3) (undo-tree-id320 . -4) (undo-tree-id321 . -4) (undo-tree-id322 . -5) (undo-tree-id323 . -5) (undo-tree-id324 . -5) (undo-tree-id325 . -5) (undo-tree-id326 . -5) 106) nil (26040 43127 645163 808000) 0 nil])
([nil nil ((112 . 115)) nil (26040 43127 645150 826000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -114) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) 115) nil (26040 43127 645149 928000) 0 nil])
([nil nil ((114 . 116)) nil (26040 43127 645145 955000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 119 137 nil nil nil t #s(yas--exit 138 nil))) #s(yas--exit 138 nil) 2 nil #s(yas--field 1 119 137 nil nil nil t #s(yas--exit 138 nil)) nil nil)) (114 . 124) (#("open(${1:path})$0" 0 17 (fontified nil)) . 114) (114 . 131) (#("op" 0 2 (fontified nil)) . 114) (114 . 116) (#("open(…)" 0 7 (fontified nil)) . -114) (114 . 121) (#("op" 0 2 (fontified t)) . -114) (undo-tree-id300 . -2) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -2) (undo-tree-id304 . -2) (undo-tree-id305 . -2) (undo-tree-id306 . -2) 116) nil (26040 43127 645144 335000) 0 nil])
([nil nil ((120 . 121) (#("path" 0 4 (fontified nil)) . 120) (undo-tree-id299 . -4) (119 . 120)) nil (26040 43127 644894 812000) 0 nil])
([nil nil ((120 . 136)) nil (26040 43127 644893 37000) 0 nil])
([nil nil ((apply yas--snippet-revive 114 138 #s(yas--snippet nil (#s(yas--field 1 119 137 nil nil nil t #s(yas--exit 138 nil))) #s(yas--exit 138 nil) 2 nil #s(yas--field 1 119 137 nil nil nil t #s(yas--exit 138 nil)) nil nil))) nil (26040 43127 644892 455000) 0 nil])
([nil nil ((138 . 139)) nil (26040 43127 644891 911000) 0 nil])
([nil nil ((139 . 140)) nil (26040 43127 644891 167000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -139) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) 140) nil (26040 43127 644890 115000) 0 nil])
([nil nil ((139 . 140)) nil (26040 43127 644885 100000) 0 nil])
([nil nil ((apply yas--snippet-revive 139 147 #s(yas--snippet nil nil #s(yas--exit 147 nil) 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 147 nil) 3 nil nil nil nil)) (139 . 147) (#("unwrap()$0" 0 10 (fontified nil)) . 139) (139 . 149) (#("u" 0 1 (fontified nil)) . 139) (139 . 140) (#("unwrap()" 0 8 (fontified nil)) . -139) (139 . 147) (#("u" 0 1 (fontified t)) . -139) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) 140) nil (26040 43127 644883 621000) 0 nil])
([nil nil ((147 . 149)) nil (26040 43127 644877 484000) 0 nil])
([nil nil ((apply yas--snippet-revive 148 156 #s(yas--snippet nil nil #s(yas--exit 156 nil) 4 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 156 nil) 4 nil nil nil nil)) (148 . 156) (#("decode()$0" 0 10 (fontified nil)) . 148) (148 . 158) (#("d" 0 1 (fontified nil)) . 148) (148 . 149) (#("decode()" 0 8 (fontified nil)) . -148) (148 . 156) (#("d" 0 1 (fontified t)) . -148) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) 149) nil (26040 43127 644874 624000) 0 nil])
([nil nil ((156 . 157)) nil (26040 43127 644857 632000) 0 nil])
([nil nil ((159 . 163) (#("    " 0 4 (fontified nil)) . 158) (undo-tree-id329 . -4) (undo-tree-id330 . -4) (undo-tree-id331 . -4) (undo-tree-id332 . -4) (157 . 163) (t 26040 43127 709584 269000)) nil (26040 43169 409098 206000) 0 nil])
([nil nil ((158 . 162)) nil (26040 43169 409093 452000) 0 nil])
([nil nil ((#("use std::io::Cursor;" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 7 (face font-lock-constant-face fontified t) 7 9 (fontified t) 9 11 (face font-lock-constant-face fontified t) 11 13 (fontified t) 13 19 (face font-lock-type-face fontified t) 19 20 (fontified t)) . 1) (undo-tree-id328 . -20)) nil (26040 43169 409091 932000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1) (undo-tree-id327 . -1)) nil (26040 43169 409087 161000) 0 nil])
([nil nil ((141 . 144) (t 26040 43169 419586 798000)) nil (26040 43497 941807 273000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -141) (undo-tree-id1071 . -1) (#("s" 0 1 (fontified t)) . -142) (undo-tree-id1072 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -143) (undo-tree-id1073 . -1) 144) nil (26040 43497 941805 949000) 0 nil])
([nil nil ((#("use image::io::Reader as ImageReader;" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 9 (face font-lock-constant-face fontified t) 9 11 (fontified t) 11 13 (face font-lock-constant-face fontified t) 13 15 (fontified t) 15 21 (face font-lock-type-face fontified t) 21 22 (fontified t) 22 24 (face font-lock-keyword-face fontified t) 24 25 (fontified t) 25 36 (face font-lock-type-face fontified t) 36 37 (rear-nonsticky t fontified t)) . 1)) nil (26040 43497 941803 43000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1)) nil (26040 43497 941802 378000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1)) nil (26040 43497 941801 667000) 0 nil])
([nil nil ((nil rear-nonsticky nil 48 . 49) (nil fontified nil 48 . 49) (nil fontified nil 47 . 48) (nil fontified nil 46 . 47) (nil fontified nil 35 . 46) (nil fontified nil 34 . 35) (nil fontified nil 32 . 34) (nil fontified nil 31 . 32) (nil fontified nil 25 . 31) (nil fontified nil 23 . 25) (nil fontified nil 21 . 23) (nil fontified nil 19 . 21) (nil fontified nil 14 . 19) (nil fontified nil 13 . 14) (nil fontified nil 10 . 13) (10 . 49)) nil (26040 43497 941800 620000) 0 nil])
([nil nil ((48 . 54)) nil (26040 43497 941798 67000) 0 nil])
([nil nil ((52 . 55) (#("ff" 0 2 (fontified nil)) . 52) (52 . 54) (#("ffi" 0 3 (fontified nil)) . -52) (52 . 55) (#("ff" 0 2 (face font-lock-constant-face fontified t)) . -52) (undo-tree-id1070 . -2) 54) nil (26040 43497 941797 12000) 0 nil])
([nil nil ((55 . 57)) nil (26040 43497 941794 926000) 0 nil])
([nil nil ((57 . 61)) nil (26040 43497 941794 287000) 0 nil])
([nil nil ((61 . 65)) nil (26040 43497 941793 386000) 0 nil])
([nil nil ((#("decodedo" 0 8 (fontified t)) . -57) (undo-tree-id1069 . -8) 65) nil (26040 43497 941792 628000) 0 nil])
([nil nil ((#("ffi::" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t)) . -52) (undo-tree-id1068 . -5) 57) nil (26040 43497 941791 25000) 0 nil])
([nil nil ((#("use " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -48) (undo-tree-id1067 . -4) 52) nil (26040 43497 941789 595000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -47) (undo-tree-id1066 . -1) 48) nil (26040 43497 941788 122000) 0 nil])
([nil nil ((140 . 150)) nil (26040 43497 941786 802000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -149) (undo-tree-id1065 . -1) 150) nil (26040 43497 941785 724000) 0 nil])
([nil nil ((149 . 157)) nil (26040 43497 941784 496000) 0 nil])
([nil nil ((157 . 160)) nil (26040 43497 941783 931000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -158) (undo-tree-id1063 . -1) (#(" " 0 1 (fontified t)) . -159) (undo-tree-id1064 . -1) 160) nil (26040 43497 941783 60000) 0 nil])
([nil nil ((158 . 160)) nil (26040 43497 941780 850000) 0 nil])
([nil nil ((160 . 174)) nil (26040 43497 941780 58000) 0 nil])
([nil nil ((174 . 178)) nil (26040 43497 941779 406000) 0 nil])
([nil nil ((165 . 185) (#("image_scanner" 0 13 (fontified nil)) . 165) (165 . 178) (#("zbar_image_scanner_s" 0 20 (fontified nil)) . -165) (165 . 185) (#("image_scanner" 0 13 (fontified t)) . -165) (undo-tree-id1046 . -13) (undo-tree-id1047 . -7) (undo-tree-id1048 . -8) (undo-tree-id1049 . -8) (undo-tree-id1050 . -9) (undo-tree-id1051 . -9) (undo-tree-id1052 . -10) (undo-tree-id1053 . -10) (undo-tree-id1054 . -11) (undo-tree-id1055 . -11) (undo-tree-id1056 . -12) (undo-tree-id1057 . -12) (undo-tree-id1058 . -13) (undo-tree-id1059 . -13) (undo-tree-id1060 . -13) (undo-tree-id1061 . -13) (undo-tree-id1062 . -13) 178) nil (26040 43497 941777 210000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -184) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) 185) nil (26040 43497 941763 661000) 0 nil])
([nil nil ((184 . 185)) nil (26040 43497 941737 991000) 0 nil])
([nil nil ((165 . 185) (#("zbar_image_scanner_t" 0 20 (fontified nil)) . 165) (165 . 185) (#("zbar_image_scanner_t" 0 20 (fontified t)) . -165) (undo-tree-id973 . -9) (undo-tree-id974 . -9) (undo-tree-id975 . -19) (undo-tree-id976 . -19) (undo-tree-id977 . -19) (undo-tree-id978 . -19) (undo-tree-id979 . -19) (undo-tree-id980 . -19) (undo-tree-id981 . -19) (undo-tree-id982 . -19) (undo-tree-id983 . -19) (undo-tree-id984 . -19) (undo-tree-id985 . -19) (undo-tree-id986 . -19) (undo-tree-id987 . -19) (undo-tree-id988 . -19) (undo-tree-id989 . -19) (undo-tree-id990 . -19) (undo-tree-id991 . -9) (undo-tree-id992 . -9) (undo-tree-id993 . -20) (undo-tree-id994 . -9) (undo-tree-id995 . -9) (undo-tree-id996 . -9) (undo-tree-id997 . -9) (undo-tree-id998 . -9) (undo-tree-id999 . -9) (undo-tree-id1000 . -9) (undo-tree-id1001 . -9) (undo-tree-id1002 . -9) (undo-tree-id1003 . -9) (undo-tree-id1004 . -9) (undo-tree-id1005 . -9) (undo-tree-id1006 . -9) (undo-tree-id1007 . -9) (undo-tree-id1008 . -9) (undo-tree-id1009 . -9) (undo-tree-id1010 . -9) (undo-tree-id1011 . -9) (undo-tree-id1012 . -9) (undo-tree-id1013 . -9) (undo-tree-id1014 . -9) (undo-tree-id1015 . -9) (undo-tree-id1016 . -9) (undo-tree-id1017 . -9) (undo-tree-id1018 . -9) (undo-tree-id1019 . -9) (undo-tree-id1020 . -19) (undo-tree-id1021 . -19) (undo-tree-id1022 . -19) (undo-tree-id1023 . -20) (undo-tree-id1024 . -20) (undo-tree-id1025 . -20) (undo-tree-id1026 . -20) (undo-tree-id1027 . -20) 185) nil (26040 43497 941735 463000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -184) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) 185) nil (26040 43497 941698 54000) 0 nil])
([nil nil ((184 . 190)) nil (26040 43497 941691 208000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -185) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (#(":" 0 1 (fontified t)) . -186) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (#("n" 0 1 (fontified t)) . -187) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (#("e" 0 1 (fontified t)) . -188) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (#("w" 0 1 (fontified t)) . -189) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) 190) nil (26040 43497 941687 267000) 0 nil])
([nil nil ((185 . 189)) nil (26040 43497 941632 522000) 0 nil])
([nil nil ((#("de" 0 2 (fontified t)) . -187) (undo-tree-id856 . -2) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -2) (undo-tree-id863 . -2) (undo-tree-id864 . -2) (undo-tree-id865 . -2) (undo-tree-id866 . -2) (undo-tree-id867 . -2) (undo-tree-id868 . -2) (undo-tree-id869 . -2) (undo-tree-id870 . -2) (undo-tree-id871 . -2) (undo-tree-id872 . -2) 189) nil (26040 43497 941631 217000) 0 nil])
([nil nil ((#("s::" 0 1 (face font-lock-constant-face fontified t) 1 3 (fontified t)) . -184) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -3) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -2) (undo-tree-id827 . -2) (undo-tree-id828 . -2) (undo-tree-id829 . -3) (undo-tree-id830 . -3) (undo-tree-id831 . -3) (undo-tree-id832 . -3) (undo-tree-id833 . -3) (undo-tree-id834 . -3) (undo-tree-id835 . -3) (undo-tree-id836 . -3) (undo-tree-id837 . -3) (undo-tree-id838 . -3) (undo-tree-id839 . -3) (undo-tree-id840 . -3) (undo-tree-id841 . -3) (undo-tree-id842 . -3) (undo-tree-id843 . -3) (undo-tree-id844 . -3) (undo-tree-id845 . -3) (undo-tree-id846 . -3) (undo-tree-id847 . -3) (undo-tree-id848 . -3) (undo-tree-id849 . -3) (undo-tree-id850 . -3) (undo-tree-id851 . -3) (undo-tree-id852 . -3) (undo-tree-id853 . -3) (undo-tree-id854 . -3) (undo-tree-id855 . -3) 187) nil (26040 43497 941616 335000) 0 nil])
([nil nil ((#("let image_scanner = ffi::zbar_image_scanner_" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 17 (face font-lock-variable-name-face fontified t) 17 20 (fontified t) 20 23 (face font-lock-constant-face fontified t) 23 25 (fontified t) 25 44 (fontified t)) . 140) (undo-tree-id554 . -42) (undo-tree-id555 . -44) (undo-tree-id556 . -25) (undo-tree-id557 . -25) (undo-tree-id558 . -25) (undo-tree-id559 . -25) (undo-tree-id560 . -25) (undo-tree-id561 . -25) (undo-tree-id562 . -25) (undo-tree-id563 . -25) (undo-tree-id564 . -25) (undo-tree-id565 . -25) (undo-tree-id566 . -25) (undo-tree-id567 . -25) (undo-tree-id568 . -25) (undo-tree-id569 . -25) (undo-tree-id570 . -25) (undo-tree-id571 . -25) (undo-tree-id572 . -25) (undo-tree-id573 . -25) (undo-tree-id574 . -25) (undo-tree-id575 . -25) (undo-tree-id576 . -25) (undo-tree-id577 . -25) (undo-tree-id578 . -25) (undo-tree-id579 . -25) (undo-tree-id580 . -25) (undo-tree-id581 . -25) (undo-tree-id582 . -25) (undo-tree-id583 . -25) (undo-tree-id584 . -25) (undo-tree-id585 . -25) (undo-tree-id586 . -25) (undo-tree-id587 . -25) (undo-tree-id588 . -25) (undo-tree-id589 . -25) (undo-tree-id590 . -25) (undo-tree-id591 . -25) (undo-tree-id592 . -25) (undo-tree-id593 . -25) (undo-tree-id594 . -25) (undo-tree-id595 . -25) (undo-tree-id596 . -25) (undo-tree-id597 . -25) (undo-tree-id598 . -25) (undo-tree-id599 . -25) (undo-tree-id600 . -25) (undo-tree-id601 . -25) (undo-tree-id602 . -25) (undo-tree-id603 . -25) (undo-tree-id604 . -25) (undo-tree-id605 . -25) (undo-tree-id606 . -25) (undo-tree-id607 . -25) (undo-tree-id608 . -25) (undo-tree-id609 . -25) (undo-tree-id610 . -25) (undo-tree-id611 . -25) (undo-tree-id612 . -25) (undo-tree-id613 . -25) (undo-tree-id614 . -25) (undo-tree-id615 . -25) (undo-tree-id616 . -25) (undo-tree-id617 . -25) (undo-tree-id618 . -25) (undo-tree-id619 . -25) (undo-tree-id620 . -25) (undo-tree-id621 . -25) (undo-tree-id622 . -25) (undo-tree-id623 . -44) (undo-tree-id624 . -44) (undo-tree-id625 . -44) (undo-tree-id626 . -44) (undo-tree-id627 . -44) (undo-tree-id628 . -44) (undo-tree-id629 . -44) (undo-tree-id630 . -25) (undo-tree-id631 . -42) (undo-tree-id632 . -44) (undo-tree-id633 . -42) (undo-tree-id634 . -42) (undo-tree-id635 . -42) (undo-tree-id636 . -42) (undo-tree-id637 . -42) (undo-tree-id638 . -42) (undo-tree-id639 . -42) (undo-tree-id640 . -42) (undo-tree-id641 . -42) (undo-tree-id642 . -42) (undo-tree-id643 . -42) (undo-tree-id644 . -42) (undo-tree-id645 . -42) (undo-tree-id646 . -42) (undo-tree-id647 . -42) (undo-tree-id648 . -42) (undo-tree-id649 . -42) (undo-tree-id650 . -42) (undo-tree-id651 . -42) (undo-tree-id652 . -42) (undo-tree-id653 . -42) (undo-tree-id654 . -42) (undo-tree-id655 . -42) (undo-tree-id656 . -42) (undo-tree-id657 . -42) (undo-tree-id658 . -42) (undo-tree-id659 . -44) (undo-tree-id660 . -44) (undo-tree-id661 . -44) (undo-tree-id662 . -44) (undo-tree-id663 . -44) (undo-tree-id664 . -44) (undo-tree-id665 . -44) (undo-tree-id666 . -44) (undo-tree-id667 . -44) (undo-tree-id668 . -44) (undo-tree-id669 . -44) (undo-tree-id670 . -44) (undo-tree-id671 . -44) (undo-tree-id672 . -44) (undo-tree-id673 . -44) (undo-tree-id674 . -44) (undo-tree-id675 . -44) (undo-tree-id676 . -44) (undo-tree-id677 . -44) (undo-tree-id678 . -44) (undo-tree-id679 . -44) (undo-tree-id680 . -44) (undo-tree-id681 . -44) (undo-tree-id682 . -44) (undo-tree-id683 . -44) (undo-tree-id684 . -44) (undo-tree-id685 . -44) (undo-tree-id686 . -44) (undo-tree-id687 . -44) (undo-tree-id688 . -44) (undo-tree-id689 . -44) (undo-tree-id690 . -44) (undo-tree-id691 . -44) (undo-tree-id692 . -44) (undo-tree-id693 . -44) (undo-tree-id694 . -44) (undo-tree-id695 . -44) (undo-tree-id696 . -44) (undo-tree-id697 . -44) (undo-tree-id698 . -44) (undo-tree-id699 . -44) (undo-tree-id700 . -44) (undo-tree-id701 . -44) (undo-tree-id702 . -44) (undo-tree-id703 . -44) (undo-tree-id704 . -44) (undo-tree-id705 . -44) (undo-tree-id706 . -44) (undo-tree-id707 . -44) (undo-tree-id708 . -44) (undo-tree-id709 . -44) (undo-tree-id710 . -44) (undo-tree-id711 . -44) (undo-tree-id712 . -44) (undo-tree-id713 . -42) (undo-tree-id714 . -44) (undo-tree-id715 . -44) (undo-tree-id716 . -44) (undo-tree-id717 . -44) (undo-tree-id718 . -44) (undo-tree-id719 . -44) (undo-tree-id720 . -44) (undo-tree-id721 . -44) (undo-tree-id722 . -44) (undo-tree-id723 . -44) (undo-tree-id724 . -44) (undo-tree-id725 . -44) (undo-tree-id726 . -44) (undo-tree-id727 . -44) (undo-tree-id728 . -44) (undo-tree-id729 . -44) (undo-tree-id730 . -44) (undo-tree-id731 . -44) (undo-tree-id732 . -44) (undo-tree-id733 . -44) (undo-tree-id734 . -44) (undo-tree-id735 . -44) (undo-tree-id736 . -44) (undo-tree-id737 . -44) (undo-tree-id738 . -44) (undo-tree-id739 . -44) (undo-tree-id740 . -44) (undo-tree-id741 . -44) (undo-tree-id742 . -44) (undo-tree-id743 . -44) (undo-tree-id744 . -44) (undo-tree-id745 . -44) (undo-tree-id746 . -44) (undo-tree-id747 . -44) (undo-tree-id748 . -44) (undo-tree-id749 . -44) (undo-tree-id750 . -44) (undo-tree-id751 . -44) (undo-tree-id752 . -44) (undo-tree-id753 . -44) (undo-tree-id754 . -44) (undo-tree-id755 . -44) (undo-tree-id756 . -44) (undo-tree-id757 . -44) (undo-tree-id758 . -44) (undo-tree-id759 . -44) (undo-tree-id760 . -44) (undo-tree-id761 . -44) (undo-tree-id762 . -44)) nil (26040 43497 941454 617000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 140) (undo-tree-id552 . 1) (undo-tree-id553 . -1)) nil (26040 43497 940348 730000) 0 nil])
([nil nil ((49 . 50)) nil (26040 43497 940346 879000) 0 nil])
([nil nil ((49 . 52)) nil (26040 43497 940346 383000) 0 nil])
([nil nil ((apply yas--snippet-revive 49 56 #s(yas--snippet nil nil #s(yas--exit 56 nil) 5 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 56 nil) 5 nil nil nil nil)) (49 . 56) (#("struct $0" 0 9 (fontified nil)) . 49) (49 . 58) (#("str" 0 3 (fontified nil)) . 49) (49 . 52) (#("struct" 0 6 (fontified nil)) . -49) (49 . 55) (#("str" 0 3 (face font-lock-type-face fontified t)) . -49) (undo-tree-id540 . -3) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -2) (undo-tree-id544 . -2) (undo-tree-id545 . -2) (undo-tree-id546 . -3) (undo-tree-id547 . -3) (undo-tree-id548 . -3) (undo-tree-id549 . -3) (undo-tree-id550 . -3) (undo-tree-id551 . -3) 52) nil (26040 43497 940344 876000) 0 nil])
([nil nil ((56 . 57)) nil (26040 43497 940335 524000) 0 nil])
([nil nil ((#("z" 0 1 (face font-lock-type-face fontified t)) . -56) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) 57) nil (26040 43497 940334 334000) 0 nil])
([nil nil ((56 . 57)) nil (26040 43497 940324 199000) 0 nil])
([nil nil ((#("Z" 0 1 (face font-lock-type-face fontified t)) . -56) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) 57) nil (26040 43497 940323 255000) 0 nil])
([nil nil ((56 . 59)) nil (26040 43497 940319 165000) 0 nil])
([nil nil ((#("n" 0 1 (face font-lock-type-face fontified t)) . -57) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -58) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) 59) nil (26040 43497 940317 982000) 0 nil])
([nil nil ((57 . 60)) nil (26040 43497 940311 370000) 0 nil])
([nil nil ((#("z" 0 1 (face font-lock-type-face fontified t)) . -56) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (#("b" 0 1 (face font-lock-type-face fontified t)) . -57) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -58) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -59) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) 60) nil (26040 43497 940308 929000) 0 nil])
([nil nil ((nil rear-nonsticky nil 82 . 83) (nil fontified nil 56 . 83) (56 . 83)) nil (26040 43497 940279 422000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 49) (#("s" 0 1 (face font-lock-keyword-face fontified t)) . 49)) nil (26040 43497 940277 528000) 0 nil])
([nil nil ((#("ruct" 0 4 (fontified t)) . 49) (undo-tree-id460 . -4)) nil (26040 43497 940276 631000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 49) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1)) nil (26040 43497 940272 965000) 0 nil])
([nil nil ((76 . 79)) nil (26040 43497 940226 828000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . 79) (79 . 83) (78 . 80)) nil (26040 43497 940226 70000) 0 nil])
([nil nil ((79 . 83)) nil (26040 43497 940225 170000) 0 nil])
([nil nil ((#("pub " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -49) (undo-tree-id387 . -4) 53) nil (26040 43497 940224 410000) 0 nil])
([nil nil ((79 . 90)) nil (26040 43497 940223 33000) 0 nil])
([nil nil ((88 . 91) (#("ff" 0 2 (fontified nil)) . 88) (88 . 90) (#("ffi" 0 3 (fontified nil)) . -88) (88 . 91) (#("ff" 0 2 (fontified t)) . -88) (undo-tree-id378 . -2) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -2) (undo-tree-id383 . -2) (undo-tree-id384 . -2) (undo-tree-id385 . -2) (undo-tree-id386 . -2) 90) nil (26040 43497 940221 643000) 0 nil])
([nil nil ((91 . 95)) nil (26040 43497 940214 257000) 0 nil])
([nil nil ((#("Z" 0 1 (face font-lock-type-face fontified t)) . -93) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -94) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) 95) nil (26040 43497 940212 155000) 0 nil])
([nil nil ((93 . 98)) nil (26040 43497 940196 307000) 0 nil])
([nil nil ((93 . 113) (#("image" 0 5 (fontified nil)) . 93) (93 . 98) (#("zbar_image_scanner_s" 0 20 (fontified nil)) . -93) (93 . 113) (#("image" 0 5 (fontified t)) . -93) (undo-tree-id335 . -5) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -2) (undo-tree-id340 . -2) (undo-tree-id341 . -2) (undo-tree-id342 . -3) (undo-tree-id343 . -3) (undo-tree-id344 . -3) (undo-tree-id345 . -4) (undo-tree-id346 . -4) (undo-tree-id347 . -4) (undo-tree-id348 . -5) (undo-tree-id349 . -5) (undo-tree-id350 . -5) (undo-tree-id351 . -5) (undo-tree-id352 . -5) 98) nil (26040 43497 940194 267000) 0 nil])
([nil nil ((113 . 114)) nil (26040 43497 942023 614000) 0 nil])
([nil nil ((88 . 93)) nil (26040 43502 91692 435000) 0 nil] [nil nil ((#("s" 0 1 (face font-lock-variable-name-face fontified t)) . 79) (undo-tree-id333 . -1) (undo-tree-id334 . -1)) ((79 . 80)) (26040 43497 940176 896000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . -91) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) 92 (t 26040 43502 102940 286000)) nil (26040 43508 428091 192000) 0 nil])
nil
([nil nil ((88 . 89)) nil (26040 43508 428080 79000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -213) (undo-tree-id1313 . -4) (undo-tree-id1314 . -4) (undo-tree-id1315 . -4) (undo-tree-id1316 . -4) (undo-tree-id1317 . -4) 209 (t 26040 43508 436274 2000)) nil (26040 43654 245155 871000) 0 nil])
([nil nil ((210 . 214) (#("    " 0 4 (fontified nil)) . 209) (undo-tree-id1303 . -4) (undo-tree-id1304 . -4) (undo-tree-id1305 . -4) (undo-tree-id1306 . -4) (undo-tree-id1307 . -4) (undo-tree-id1308 . -4) (undo-tree-id1309 . -4) (undo-tree-id1310 . -4) (undo-tree-id1311 . -4) (undo-tree-id1312 . -4) (213 . 214)) nil (26040 43654 245151 471000) 0 nil])
([nil nil ((209 . 213)) nil (26040 43654 245117 597000) 0 nil])
([nil nil ((213 . 222)) nil (26040 43654 245116 996000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-variable-name-face fontified t)) . -217) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (#("c" 0 1 (face font-lock-variable-name-face fontified t)) . -218) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -219) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (#("n" 0 1 (face font-lock-variable-name-face fontified t)) . -220) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (#("n" 0 1 (face font-lock-variable-name-face fontified t)) . -221) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) 222) nil (26040 43654 245113 279000) 0 nil])
([nil nil ((217 . 225)) nil (26040 43654 245060 450000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-variable-name-face fontified t)) . -222) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (#("m" 0 1 (face font-lock-variable-name-face fontified t)) . -223) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -224) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) 225) nil (26040 43654 245058 657000) 0 nil])
([nil nil ((222 . 224)) nil (26040 43654 245040 231000) 0 nil])
([nil nil ((224 . 233)) nil (26040 43654 245039 694000) 0 nil])
([nil nil ((232 . 248) (#("Z" 0 1 (fontified nil)) . 232) (232 . 233) (#("ZBarImageScanner" 0 16 (fontified nil)) . -232) (232 . 248) (#("Z" 0 1 (face font-lock-type-face fontified t)) . -232) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) 233) nil (26040 43654 245038 595000) 0 nil])
([nil nil ((248 . 251)) nil (26040 43654 245033 658000) 0 nil])
([nil nil ((#("D" 0 1 (face font-lock-type-face fontified t)) . -250) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) 251) nil (26040 43654 245032 897000) 0 nil])
([nil nil ((250 . 252)) nil (26040 43654 245029 145000) 0 nil])
([nil nil ((#("d" 0 1 (fontified nil)) . -250) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (#("e" 0 1 (fontified t)) . -251) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) 252) nil (26040 43654 245027 998000) 0 nil])
([nil nil ((250 . 251)) nil (26040 43654 245019 782000) 0 nil])
([nil nil ((#("D" 0 1 (face font-lock-type-face fontified t)) . -250) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) 251) nil (26040 43654 245018 836000) 0 nil])
([nil nil ((250 . 251)) nil (26040 43654 245010 637000) 0 nil])
([nil nil ((251 . 252)) nil (26040 43654 245010 144000) 0 nil])
([nil nil ((#("de" 0 2 (fontified t)) . -250) (undo-tree-id1135 . -2) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -2) (undo-tree-id1142 . -2) (undo-tree-id1143 . -2) (undo-tree-id1144 . -2) (undo-tree-id1145 . -2) (undo-tree-id1146 . -2) (undo-tree-id1147 . -2) (undo-tree-id1148 . -2) (undo-tree-id1149 . -2) 252) nil (26040 43654 245008 967000) 0 nil])
([nil nil ((123 . 125)) nil (26040 43654 244998 825000) 0 nil])
([nil nil ((123 . 126)) nil (26040 43654 244998 233000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 128 144 nil nil nil t #s(yas--exit 151 nil))) #s(yas--exit 151 nil) 6 nil #s(yas--field 1 128 144 nil nil nil t #s(yas--exit 151 nil)) nil nil)) (123 . 137) (#("impl $1 {
    $0
}" 0 18 (fontified nil)) . 123) (123 . 141) (#("imp" 0 3 (fontified nil)) . 123) (123 . 126) (#("impl" 0 4 (fontified nil)) . -123) (123 . 127) (#("imp" 0 3 (fontified t)) . -123) (undo-tree-id1124 . -3) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -2) (undo-tree-id1128 . -2) (undo-tree-id1129 . -2) (undo-tree-id1130 . -3) (undo-tree-id1131 . -3) (undo-tree-id1132 . -3) (undo-tree-id1133 . -3) (undo-tree-id1134 . -3) 126) nil (26040 43654 244996 737000) 0 nil])
([nil nil ((128 . 129)) nil (26040 43654 244988 475000) 0 nil])
([nil nil ((128 . 144) (#("Z" 0 1 (fontified nil)) . 128) (undo-tree-id1115 . -1) (128 . 129) (#("ZBarImageScanner" 0 16 (fontified nil)) . -128) (undo-tree-id1116 . -16) (128 . 144) (#("Z" 0 1 (face font-lock-type-face fontified t)) . -128) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) 129) nil (26040 43654 244987 78000) 0 nil])
([nil nil ((apply yas--snippet-revive 123 153 #s(yas--snippet nil (#s(yas--field 1 128 144 nil nil nil t #s(yas--exit 151 nil))) #s(yas--exit 151 nil) 6 nil #s(yas--field 1 128 144 nil nil nil t #s(yas--exit 151 nil)) nil nil))) nil (26040 43654 244979 842000) 0 nil])
([nil nil ((151 . 152)) nil (26040 43654 244979 197000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -151) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) 152) nil (26040 43654 244978 7000) 0 nil])
([nil nil ((151 . 153)) nil (26040 43654 244781 216000) 0 nil])
([nil nil ((153 . 159)) nil (26040 43654 244780 652000) 0 nil])
([nil nil ((159 . 164)) nil (26040 43654 244780 109000) 0 nil])
([nil nil ((163 . 167) (#("S" 0 1 (fontified nil)) . 163) (163 . 164) (#("Self" 0 4 (fontified nil)) . -163) (163 . 167) (#("S" 0 1 (face font-lock-type-face fontified t)) . -163) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) 164) nil (26040 43654 244778 923000) 0 nil])
([nil nil ((167 . 170)) nil (26040 43654 244774 543000) 0 nil])
([nil nil ((171 . 175) (#("        " 0 8 (fontified nil)) . 170) (170 . 178) (#("    " 0 4 (fontified nil)) . 170) (undo-tree-id1100 . -4) (undo-tree-id1101 . -4) (undo-tree-id1102 . -4) (undo-tree-id1103 . -4) (undo-tree-id1104 . -4) (169 . 175)) nil (26040 43654 244773 557000) 0 nil])
([nil nil ((170 . 178)) nil (26040 43654 244769 480000) 0 nil])
([nil nil ((178 . 179)) nil (26040 43654 244768 865000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 194 200 nil nil nil t #s(yas--exit 202 nil))) #s(yas--exit 202 nil) 7 nil #s(yas--field 1 194 200 nil nil nil t #s(yas--exit 202 nil)) nil nil)) (178 . 198) (#("Self { scanner: ${1:()} }$0" 0 27 (fontified nil)) . 178) (178 . 205) (#("S" 0 1 (fontified nil)) . 178) (178 . 179) (#("Self {…}" 0 8 (fontified nil)) . -178) (178 . 186) (#("S" 0 1 (face font-lock-type-face fontified t)) . -178) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) 179) nil (26040 43654 244767 435000) 0 nil])
([nil nil ((#("()" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 195) (undo-tree-id1093 . -2) (194 . 195)) nil (26040 43654 244761 949000) 0 nil])
([nil nil ((194 . 198) (#("S" 0 1 (fontified nil)) . 194) (undo-tree-id1083 . -1) (194 . 195) (#("Self" 0 4 (fontified nil)) . -194) (undo-tree-id1084 . -4) (194 . 198) (#("S" 0 1 (face font-lock-type-face fontified t)) . -194) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) 195) nil (26040 43654 244759 783000) 0 nil])
([nil nil ((198 . 201)) nil (26040 43654 244752 342000) 0 nil])
([nil nil ((#("D" 0 1 (face font-lock-type-face fontified t)) . -200) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) 201) nil (26040 43654 244750 934000) 0 nil])
([nil nil ((apply yas--snippet-revive 178 202 #s(yas--snippet nil (#s(yas--field 1 194 200 nil nil nil t #s(yas--exit 202 nil))) #s(yas--exit 202 nil) 7 nil #s(yas--field 1 194 200 nil nil nil t #s(yas--exit 202 nil)) nil nil))) nil (26040 43654 244739 462000) 0 nil])
([nil nil ((nil rear-nonsticky nil 592 . 593) (nil fontified nil 122 . 593) (122 . 593)) nil (26040 43654 244738 527000) 0 nil])
([nil nil ((593 . 594)) nil (26040 43654 244736 983000) 0 nil])
([nil nil ((121 . 122)) nil (26040 43654 244733 282000) 0 nil])
([nil nil ((673 . 674) (t 26040 43654 246282 819000)) nil (26040 43658 236428 570000) 0 nil])
([nil nil ((apply yas--snippet-revive 673 682 #s(yas--snippet nil nil #s(yas--exit 682 nil) 8 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 682 nil) 8 nil nil nil nil)) (673 . 682) (#("default()$0" 0 11 (fontified nil)) . 673) (673 . 684) (#("d" 0 1 (fontified nil)) . 673) (673 . 674) (#("default() (as Default)" 0 22 (fontified nil)) . -673) (673 . 695) (#("d" 0 1 (fontified t)) . -673) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) 674) nil (26040 43658 236424 317000) 0 nil])
([nil nil ((#("scanner.set_config(ZBarSymbolType::ZBAR_NONE, ZBarConfig::ZBAR_CFG_ENABLE, 0).unwrap();" 0 18 (fontified t) 18 19 (face (rainbow-delimiters-depth-3-face) fontified t) 19 33 (face font-lock-type-face fontified t) 33 35 (fontified t) 35 44 (face font-lock-type-face fontified t) 44 46 (fontified t) 46 56 (face font-lock-type-face fontified t) 56 58 (fontified t) 58 73 (face font-lock-type-face fontified t) 73 76 (fontified t) 76 77 (face (rainbow-delimiters-depth-3-face) fontified t) 77 84 (fontified t) 84 85 (face (rainbow-delimiters-depth-3-face) fontified t) 85 86 (face (rainbow-delimiters-depth-3-face) fontified t) 86 87 (fontified t)) . 364) (undo-tree-id1324 . -24) (undo-tree-id1325 . -24) (undo-tree-id1326 . -24) (undo-tree-id1327 . -24) (undo-tree-id1328 . -24) (undo-tree-id1329 . -24) (undo-tree-id1330 . -24) (undo-tree-id1331 . -24) (undo-tree-id1332 . -24) (undo-tree-id1333 . -24) (undo-tree-id1334 . -24) (undo-tree-id1335 . -24) (undo-tree-id1336 . -24) (undo-tree-id1337 . -24) (undo-tree-id1338 . -24) (undo-tree-id1339 . -24) (undo-tree-id1340 . -24) (undo-tree-id1341 . -24) (undo-tree-id1342 . -24) (undo-tree-id1343 . -24) (undo-tree-id1344 . -15) (undo-tree-id1345 . -15) (undo-tree-id1346 . -15) (undo-tree-id1347 . -15) (undo-tree-id1348 . -15) (undo-tree-id1349 . -15) (undo-tree-id1350 . -15) (undo-tree-id1351 . -15) (undo-tree-id1352 . -15) (undo-tree-id1353 . -15) (undo-tree-id1354 . -15) (undo-tree-id1355 . -15) (undo-tree-id1356 . -87) (t 26040 43658 246283 61000)) nil (26040 43699 464950 225000) 0 nil])
([nil nil ((#("Self { scanner: Self::default() }" 0 4 (face font-lock-type-face fontified t) 4 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-3-face) fontified t) 6 7 (fontified t) 7 14 (face font-lock-variable-name-face fontified t) 14 16 (fontified t) 16 20 (face font-lock-type-face fontified t) 20 22 (fontified t) 22 29 (fontified t) 29 30 (face (rainbow-delimiters-depth-4-face) fontified t) 30 31 (face (rainbow-delimiters-depth-4-face) fontified t) 31 32 (fontified t) 32 33 (face (rainbow-delimiters-depth-3-face) fontified t)) . 564) (undo-tree-id1381 . -16) (undo-tree-id1382 . -32) (undo-tree-id1383 . -14) (undo-tree-id1384 . -16) (undo-tree-id1385 . -7) (undo-tree-id1386 . -7) (undo-tree-id1387 . -7) (undo-tree-id1388 . -7) (undo-tree-id1389 . -7) (undo-tree-id1390 . -7) (undo-tree-id1391 . -7) (undo-tree-id1392 . -7) (undo-tree-id1393 . -7) (undo-tree-id1394 . -7) (undo-tree-id1395 . -7) (undo-tree-id1396 . -16) (undo-tree-id1397 . -16) (undo-tree-id1398 . -16) (undo-tree-id1399 . -16) (undo-tree-id1400 . -16) (undo-tree-id1401 . -16) (undo-tree-id1402 . -16) (undo-tree-id1403 . -16) (undo-tree-id1404 . -16) (undo-tree-id1405 . -16) (undo-tree-id1406 . -16) (undo-tree-id1407 . -16) (undo-tree-id1408 . -16) (undo-tree-id1409 . -16) (undo-tree-id1410 . -16) (undo-tree-id1411 . -16) (undo-tree-id1412 . -16) (undo-tree-id1413 . -16) (undo-tree-id1414 . -16) (undo-tree-id1415 . -16) (undo-tree-id1416 . -33) (t 26040 43700 296285 585000)) nil (26040 43774 939293 561000) 0 nil] [nil nil ((#("scanner: " 0 7 (face font-lock-variable-name-face fontified t) 7 9 (fontified t)) . -571) (undo-tree-id1357 . -9) (undo-tree-id1358 . -9) (undo-tree-id1359 . -7) (undo-tree-id1360 . -9) 580 (t 26040 43671 952950 551000)) ((571 . 580) (t 26040 43695 682951 978000)) (26040 43695 636663 45000) 0 nil])
([nil nil ((564 . 565)) nil (26040 43774 939268 589000) 0 nil])
nil
([nil nil ((564 . 568) (#("S" 0 1 (fontified nil)) . 564) (564 . 565) (#("Self" 0 4 (fontified nil)) . -564) (564 . 568) (#("S" 0 1 (face font-lock-type-face fontified t)) . -564) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) 565) nil (26040 43774 939266 821000) 0 nil])
([nil nil ((568 . 571)) nil (26040 43774 939256 249000) 0 nil])
([nil nil ((apply yas--snippet-revive 570 579 #s(yas--snippet nil nil #s(yas--exit 579 nil) 9 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 579 nil) 9 nil nil nil nil)) (570 . 579) (#("default()$0" 0 11 (fontified nil)) . 570) (570 . 581) (#("D" 0 1 (fontified nil)) . 570) (570 . 571) (#("default() (as Default)" 0 22 (fontified nil)) . -570) (570 . 592) (#("D" 0 1 (face font-lock-type-face fontified t)) . -570) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) 571) nil (26040 43774 939251 796000) 0 nil])
([nil nil ((364 . 365) (t 26040 43774 952956 755000)) nil (26040 43878 65697 160000) 0 nil])
([nil nil ((364 . 371) (#("s" 0 1 (fontified nil)) . 364) (364 . 365) (#("scanner" 0 7 (fontified nil)) . -364) (364 . 371) (#("s" 0 1 (fontified t)) . -364) (undo-tree-id1513 . -1) 365) nil (26040 43878 65696 15000) 0 nil])
([nil nil ((371 . 373)) nil (26040 43878 65694 7000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -372) (undo-tree-id1512 . -1) 373) nil (26040 43878 65693 271000) 0 nil])
([nil nil ((#("scanner." 0 8 (fontified t)) . -364) (undo-tree-id1511 . -8) 372) nil (26040 43878 65691 824000) 0 nil])
([nil nil ((364 . 366)) nil (26040 43878 65690 584000) 0 nil])
([nil nil ((364 . 367) (#("ff" 0 2 (fontified nil)) . 364) (364 . 366) (#("ffi" 0 3 (fontified nil)) . -364) (364 . 367) (#("ff" 0 2 (fontified t)) . -364) (undo-tree-id1510 . -2) 366) nil (26040 43878 65689 632000) 0 nil])
([nil nil ((367 . 374)) nil (26040 43878 65687 689000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -371) (undo-tree-id1507 . -1) (#("b" 0 1 (fontified t)) . -372) (undo-tree-id1508 . -1) (#("a" 0 1 (fontified t)) . -373) (undo-tree-id1509 . -1) 374) nil (26040 43878 65686 755000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -370) (undo-tree-id1506 . -1) 371) nil (26040 43878 65683 915000) 0 nil])
([nil nil ((370 . 382)) nil (26040 43878 65682 369000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -381) (undo-tree-id1505 . -1) 382) nil (26040 43878 65681 628000) 0 nil])
([nil nil ((381 . 384)) nil (26040 43878 65680 283000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 399 414 nil nil nil t #s(yas--field 2 416 425 nil nil nil nil #s(yas--field 3 427 433 nil nil nil nil #s(yas--field 4 435 440 nil nil nil nil #s(yas--exit 441 nil))))) #s(yas--field 2 416 425 nil nil nil nil #s(yas--field 3 427 433 nil nil nil nil #s(yas--field 4 435 440 nil nil nil nil #s(yas--exit 441 nil)))) #s(yas--field 3 427 433 nil nil nil nil #s(yas--field 4 435 440 nil nil nil nil #s(yas--exit 441 nil))) #s(yas--field 4 435 440 nil nil nil nil #s(yas--exit 441 nil))) #s(yas--exit 441 nil) 10 nil #s(yas--field 1 399 414 nil nil nil t #s(yas--field 2 416 425 nil nil nil nil #s(yas--field 3 427 433 nil nil nil nil #s(yas--field 4 435 440 nil nil nil nil #s(yas--exit 441 nil))))) nil nil)) (369 . 433) (#("zbar_image_scanner_set_config(${1:scanner}, ${2:symbology}, ${3:config}, ${4:value})$0" 0 86 (fontified nil)) . 369) (369 . 455) (#("zbar_set_config" 0 15 (fontified nil)) . 369) (369 . 384) (#("zbar_image_scanner_set_config(…)" 0 32 (fontified nil)) . -369) (369 . 401) (#("zbar_set_config" 0 15 (fontified t)) . -369) (undo-tree-id1500 . -15) (undo-tree-id1501 . -15) (undo-tree-id1502 . -15) (undo-tree-id1503 . -15) (undo-tree-id1504 . -15) 384) nil (26040 43878 65678 962000) 0 nil])
([nil nil ((#("scanner" 0 7 (fontified nil)) . 400) (undo-tree-id1499 . -7) (399 . 400)) nil (26040 43878 65673 823000) 0 nil])
([nil nil ((400 . 404)) nil (26040 43878 65666 295000) 0 nil])
([nil nil ((404 . 406)) nil (26040 43878 65665 638000) 0 nil])
([nil nil ((#("sc" 0 2 (fontified t)) . -404) (undo-tree-id1477 . -2) (undo-tree-id1478 . -2) (undo-tree-id1479 . -2) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -2) (undo-tree-id1488 . -2) (undo-tree-id1489 . -2) (undo-tree-id1490 . -2) (undo-tree-id1491 . -2) (undo-tree-id1492 . -2) (undo-tree-id1493 . -2) (undo-tree-id1494 . -2) (undo-tree-id1495 . -2) (undo-tree-id1496 . -2) (undo-tree-id1497 . -2) (undo-tree-id1498 . -2) 406) nil (26040 43878 65664 358000) 0 nil])
([nil nil ((#("self." 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t)) . -399) (undo-tree-id1427 . -5) (undo-tree-id1428 . -5) (undo-tree-id1429 . -5) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -2) (undo-tree-id1440 . -2) (undo-tree-id1441 . -3) (undo-tree-id1442 . -3) (undo-tree-id1443 . -4) (undo-tree-id1444 . -4) (undo-tree-id1445 . -4) (undo-tree-id1446 . -4) (undo-tree-id1447 . -4) (undo-tree-id1448 . -4) (undo-tree-id1449 . -5) (undo-tree-id1450 . -5) (undo-tree-id1451 . -5) (undo-tree-id1452 . -5) (undo-tree-id1453 . -5) (undo-tree-id1454 . -5) (undo-tree-id1455 . -5) (undo-tree-id1456 . -5) (undo-tree-id1457 . -5) (undo-tree-id1458 . -5) (undo-tree-id1459 . -5) (undo-tree-id1460 . -5) (undo-tree-id1461 . -5) (undo-tree-id1462 . -5) (undo-tree-id1463 . -5) (undo-tree-id1464 . -5) (undo-tree-id1465 . -5) (undo-tree-id1466 . -5) (undo-tree-id1467 . -5) (undo-tree-id1468 . -5) (undo-tree-id1469 . -5) (undo-tree-id1470 . -5) (undo-tree-id1471 . -5) (undo-tree-id1472 . -5) (undo-tree-id1473 . -5) (undo-tree-id1474 . -5) (undo-tree-id1475 . -5) (undo-tree-id1476 . -5) 404) nil (26040 43878 65648 21000) 0 nil])
([nil nil ((399 . 400)) nil (26040 43878 65617 73000) 0 nil])
([nil nil ((399 . 406) (#("s" 0 1 (fontified nil)) . 399) (undo-tree-id1418 . -1) (399 . 400) (#("scanner" 0 7 (fontified nil)) . -399) (undo-tree-id1419 . -7) (399 . 406) (#("s" 0 1 (fontified t)) . -399) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) 400) nil (26040 43878 65615 493000) 0 nil])
([nil nil ((406 . 407)) nil (26040 43878 65606 865000) 0 nil])
([nil nil ((407 . 414) (#("scanner" 0 7 (fontified nil)) . -407) (undo-tree-id1417 . -7) (407 . 414)) nil (26040 43878 65603 220000) 0 nil])
([nil nil ((apply yas--snippet-revive 369 441 #s(yas--snippet nil (#s(yas--field 1 399 414 nil nil nil t #s(yas--field 2 416 425 nil nil nil nil #s(yas--field 3 427 433 nil nil nil nil #s(yas--field 4 435 440 nil nil nil nil #s(yas--exit 441 nil))))) #s(yas--field 2 416 425 nil nil nil nil #s(yas--field 3 427 433 nil nil nil nil #s(yas--field 4 435 440 nil nil nil nil #s(yas--exit 441 nil)))) #s(yas--field 3 427 433 nil nil nil nil #s(yas--field 4 435 440 nil nil nil nil #s(yas--exit 441 nil))) #s(yas--field 4 435 440 nil nil nil nil #s(yas--exit 441 nil))) #s(yas--exit 441 nil) 10 nil #s(yas--field 1 399 414 nil nil nil t #s(yas--field 2 416 425 nil nil nil nil #s(yas--field 3 427 433 nil nil nil nil #s(yas--field 4 435 440 nil nil nil nil #s(yas--exit 441 nil))))) nil nil))) nil (26040 43881 788103 946000) 0 nil])
([nil nil ((441 . 442) (t 26040 43878 76296 307000)) nil (26040 43881 788099 916000) 0 nil])
([nil nil ((#("ffi::zbar_image_scanner_set_config(scanner.scanner, symbology, config, value);" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t) 5 34 (fontified t) 34 35 (face (rainbow-delimiters-depth-3-face) fontified t) 35 43 (fontified t) 43 50 (fontified t) 50 76 (fontified t) 76 77 (face (rainbow-delimiters-depth-3-face) fontified t) 77 78 (fontified t)) . 364) (undo-tree-id1583 . -24) (undo-tree-id1584 . -24) (t 26040 43881 799629 867000)) nil (26040 43991 448276 951000) 0 nil])
([nil nil ((364 . 365)) nil (26040 43991 448274 706000) 0 nil])
([nil nil ((364 . 371) (#("s" 0 1 (fontified nil)) . 364) (364 . 365) (#("scanner" 0 7 (fontified nil)) . -364) (364 . 371) (#("s" 0 1 (fontified t)) . -364) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) 365) nil (26040 43991 448273 715000) 0 nil])
([nil nil ((371 . 373)) nil (26040 43991 448270 692000) 0 nil])
([nil nil ((372 . 379) (#("s" 0 1 (fontified nil)) . 372) (372 . 373) (#("scanner" 0 7 (fontified nil)) . -372) (372 . 379) (#("s" 0 1 (fontified t)) . -372) (undo-tree-id1580 . -1) 373) nil (26040 43991 448269 371000) 0 nil])
([nil nil ((379 . 384)) nil (26040 43991 448266 619000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -380) (undo-tree-id1576 . -1) (#("e" 0 1 (fontified t)) . -381) (undo-tree-id1577 . -1) (#("d" 0 1 (fontified t)) . -382) (undo-tree-id1578 . -1) (#("t" 0 1 (fontified t)) . -383) (undo-tree-id1579 . -1) 384) nil (26040 43991 448265 376000) 0 nil])
([nil nil ((380 . 383)) nil (26040 43991 448261 961000) 0 nil])
([nil nil ((#("set" 0 3 (fontified t)) . -380) (undo-tree-id1575 . -3) 383) nil (26040 43991 448261 308000) 0 nil])
([nil nil ((#("scanner." 0 8 (fontified t)) . -372) (undo-tree-id1574 . -8) 380) nil (26040 43991 448259 816000) 0 nil])
([nil nil ((#("scanner." 0 8 (fontified t)) . -364) (undo-tree-id1572 . -7) (undo-tree-id1573 . -8) 372) nil (26040 43991 448258 320000) 0 nil])
([nil nil ((364 . 366)) nil (26040 43991 448256 362000) 0 nil])
([nil nil ((364 . 367) (#("ff" 0 2 (fontified nil)) . 364) (364 . 366) (#("ffi" 0 3 (fontified nil)) . -364) (364 . 367) (#("ff" 0 2 (fontified t)) . -364) (undo-tree-id1571 . -2) 366) nil (26040 43991 448255 95000) 0 nil])
([nil nil ((367 . 382)) nil (26040 43991 448253 94000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 399 414 nil nil nil t #s(yas--field 2 416 425 nil nil nil nil #s(yas--field 3 427 433 nil nil nil nil #s(yas--field 4 435 440 nil nil nil nil #s(yas--exit 441 nil))))) #s(yas--field 2 416 425 nil nil nil nil #s(yas--field 3 427 433 nil nil nil nil #s(yas--field 4 435 440 nil nil nil nil #s(yas--exit 441 nil)))) #s(yas--field 3 427 433 nil nil nil nil #s(yas--field 4 435 440 nil nil nil nil #s(yas--exit 441 nil))) #s(yas--field 4 435 440 nil nil nil nil #s(yas--exit 441 nil))) #s(yas--exit 441 nil) 11 nil #s(yas--field 1 399 414 nil nil nil t #s(yas--field 2 416 425 nil nil nil nil #s(yas--field 3 427 433 nil nil nil nil #s(yas--field 4 435 440 nil nil nil nil #s(yas--exit 441 nil))))) nil nil)) (369 . 433) (#("zbar_image_scanner_set_config(${1:scanner}, ${2:symbology}, ${3:config}, ${4:value})$0" 0 86 (fontified nil)) . 369) (369 . 455) (#("image_scanner" 0 13 (fontified nil)) . 369) (369 . 382) (#("zbar_image_scanner_set_config(…)" 0 32 (fontified nil)) . -369) (369 . 401) (#("image_scanner" 0 13 (fontified t)) . -369) (undo-tree-id1570 . -13) 382) nil (26040 43991 448251 814000) 0 nil])
([nil nil ((#("scanner" 0 7 (fontified nil)) . 400) (399 . 400)) nil (26040 43991 448249 394000) 0 nil])
([nil nil ((399 . 406) (#("s" 0 1 (fontified nil)) . 399) (399 . 400) (#("scanner" 0 7 (fontified nil)) . -399) (399 . 406) (#("s" 0 1 (fontified t)) . -399) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) 400) nil (26040 43991 448248 177000) 0 nil])
([nil nil ((406 . 408)) nil (26040 43991 448245 189000) 0 nil])
([nil nil ((407 . 414) (#("s" 0 1 (fontified nil)) . 407) (407 . 408) (#("scanner" 0 7 (fontified nil)) . -407) (407 . 414) (#("s" 0 1 (fontified t)) . -407) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) 408) nil (26040 43991 448244 2000) 0 nil])
([nil nil ((apply yas--snippet-revive 369 441 #s(yas--snippet nil (#s(yas--field 1 399 414 nil nil nil t #s(yas--field 2 416 425 nil nil nil nil #s(yas--field 3 427 433 nil nil nil nil #s(yas--field 4 435 440 nil nil nil nil #s(yas--exit 441 nil))))) #s(yas--field 2 416 425 nil nil nil nil #s(yas--field 3 427 433 nil nil nil nil #s(yas--field 4 435 440 nil nil nil nil #s(yas--exit 441 nil)))) #s(yas--field 3 427 433 nil nil nil nil #s(yas--field 4 435 440 nil nil nil nil #s(yas--exit 441 nil))) #s(yas--field 4 435 440 nil nil nil nil #s(yas--exit 441 nil))) #s(yas--exit 441 nil) 11 nil #s(yas--field 1 399 414 nil nil nil t #s(yas--field 2 416 425 nil nil nil nil #s(yas--field 3 427 433 nil nil nil nil #s(yas--field 4 435 440 nil nil nil nil #s(yas--exit 441 nil))))) nil nil))) nil (26040 43991 448241 265000) 0 nil])
([nil nil ((#("symbology" 0 9 (fontified t)) . -416) (undo-tree-id1564 . -9) (undo-tree-id1565 . -9) 425) nil (26040 43991 448240 502000) 0 nil])
([nil nil ((416 . 418)) nil (26040 43991 448238 418000) 0 nil])
([nil nil ((416 . 419) (#("ff" 0 2 (fontified nil)) . 416) (416 . 418) (#("ffi" 0 3 (fontified nil)) . -416) (416 . 419) (#("ff" 0 2 (fontified t)) . -416) (undo-tree-id1562 . -2) (undo-tree-id1563 . -2) 418) nil (26040 43991 448237 223000) 0 nil])
([nil nil ((419 . 432)) nil (26040 43991 448234 334000) 0 nil])
([nil nil ((432 . 433)) nil (26040 43991 448233 649000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -432) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) 433) nil (26040 43991 448232 367000) 0 nil])
([nil nil ((432 . 434)) nil (26040 43991 448227 506000) 0 nil])
([nil nil ((421 . 449) (#("zbar_symbol_t" 0 13 (fontified nil)) . 421) (421 . 434) (#("zbar_symbol_type_e_ZBAR_NONE" 0 28 (fontified nil)) . -421) (421 . 449) (#("zbar_symbol_t" 0 13 (fontified t)) . -421) (undo-tree-id1514 . -13) (undo-tree-id1515 . -13) (undo-tree-id1516 . -3) (undo-tree-id1517 . -4) (undo-tree-id1518 . -4) (undo-tree-id1519 . -4) (undo-tree-id1520 . -4) (undo-tree-id1521 . -5) (undo-tree-id1522 . -5) (undo-tree-id1523 . -5) (undo-tree-id1524 . -6) (undo-tree-id1525 . -6) (undo-tree-id1526 . -7) (undo-tree-id1527 . -7) (undo-tree-id1528 . -8) (undo-tree-id1529 . -8) (undo-tree-id1530 . -9) (undo-tree-id1531 . -9) (undo-tree-id1532 . -9) (undo-tree-id1533 . -9) (undo-tree-id1534 . -10) (undo-tree-id1535 . -10) (undo-tree-id1536 . -10) (undo-tree-id1537 . -11) (undo-tree-id1538 . -11) (undo-tree-id1539 . -11) (undo-tree-id1540 . -11) (undo-tree-id1541 . -11) (undo-tree-id1542 . -11) (undo-tree-id1543 . -11) (undo-tree-id1544 . -11) (undo-tree-id1545 . -11) (undo-tree-id1546 . -12) (undo-tree-id1547 . -12) (undo-tree-id1548 . -13) (undo-tree-id1549 . -13) (undo-tree-id1550 . -13) (undo-tree-id1551 . -13) (undo-tree-id1552 . -13) (undo-tree-id1553 . -13) (undo-tree-id1554 . -13) (undo-tree-id1555 . -13) (undo-tree-id1556 . -13) 434) nil (26040 43991 448222 206000) 0 nil])
([nil nil ((465 . 466) (t 26040 43991 492969 822000)) nil (26040 44005 707782 8000) 0 nil])
([nil nil ((240 . 246) (t 26040 44005 719637 340000)) nil (26040 44187 129486 174000) 0 nil])
([nil nil ((#("scanner" 0 7 (fontified t)) . -481) (undo-tree-id1713 . -7) (undo-tree-id1714 . -7) 488) nil (26040 44187 129485 282000) 0 nil])
([nil nil ((481 . 482)) nil (26040 44187 129483 325000) 0 nil])
([nil nil ((481 . 494) (#("i" 0 1 (fontified nil)) . 481) (481 . 482) (#("image_scanner" 0 13 (fontified nil)) . -481) (481 . 494) (#("i" 0 1 (fontified t)) . -481) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) 482) nil (26040 44187 129481 804000) 0 nil])
([nil nil ((#("scanner" 0 7 (fontified t)) . -405) (undo-tree-id1702 . -7) (undo-tree-id1703 . -7) 412) nil (26040 44187 129474 159000) 0 nil])
([nil nil ((405 . 406)) nil (26040 44187 129471 974000) 0 nil])
([nil nil ((405 . 418) (#("i" 0 1 (fontified nil)) . 405) (405 . 406) (#("image_scanner" 0 13 (fontified nil)) . -405) (405 . 418) (#("i" 0 1 (fontified t)) . -405) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) 406) nil (26040 44187 129470 735000) 0 nil])
([nil nil ((#("config" 0 6 (fontified t)) . -463) (undo-tree-id1649 . -6) (undo-tree-id1650 . -6) (undo-tree-id1651 . -6) (undo-tree-id1652 . -6) (undo-tree-id1653 . -6) (undo-tree-id1654 . -6) (undo-tree-id1655 . -6) (undo-tree-id1656 . -6) (undo-tree-id1657 . -6) (undo-tree-id1658 . -6) (undo-tree-id1659 . -6) (undo-tree-id1660 . -6) (undo-tree-id1661 . -6) (undo-tree-id1662 . -6) (undo-tree-id1663 . -6) (undo-tree-id1664 . -6) (undo-tree-id1665 . -6) (undo-tree-id1666 . -6) (undo-tree-id1667 . -6) (undo-tree-id1668 . -6) (undo-tree-id1669 . -6) (undo-tree-id1670 . -6) (undo-tree-id1671 . -6) (undo-tree-id1672 . -6) (undo-tree-id1673 . -6) (undo-tree-id1674 . -6) (undo-tree-id1675 . -6) (undo-tree-id1676 . -6) (undo-tree-id1677 . -6) (undo-tree-id1678 . -6) (undo-tree-id1679 . -6) (undo-tree-id1680 . -6) (undo-tree-id1681 . -6) (undo-tree-id1682 . -6) (undo-tree-id1683 . -6) (undo-tree-id1684 . -6) (undo-tree-id1685 . -6) (undo-tree-id1686 . -6) (undo-tree-id1687 . -6) (undo-tree-id1688 . -6) (undo-tree-id1689 . -6) (undo-tree-id1690 . -6) (undo-tree-id1691 . -6) (undo-tree-id1692 . -6) (undo-tree-id1693 . -6) (undo-tree-id1694 . -6) (undo-tree-id1695 . -6) (undo-tree-id1696 . -6) 469) nil (26040 44187 129463 819000) 0 nil])
([nil nil ((463 . 466)) nil (26040 44187 129426 463000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -465) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) 466) nil (26040 44187 129425 583000) 0 nil])
([nil nil ((465 . 468)) nil (26040 44187 129420 737000) 0 nil])
([nil nil ((468 . 471)) nil (26040 44187 129420 35000) 0 nil])
([nil nil ((471 . 476)) nil (26040 44187 129418 883000) 0 nil])
([nil nil ((#("B" 0 1 (face font-lock-type-face fontified t)) . -475) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) 476) nil (26040 44187 129417 702000) 0 nil])
([nil nil ((475 . 476)) nil (26040 44187 129409 460000) 0 nil])
([nil nil ((468 . 497) (#("CFG_ENAB" 0 8 (fontified nil)) . 468) (468 . 476) (#("zbar_config_e_ZBAR_CFG_ENABLE" 0 29 (fontified nil)) . -468) (468 . 497) (#("CFG_ENAB" 0 8 (face font-lock-type-face fontified t)) . -468) (undo-tree-id1593 . -8) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -2) (undo-tree-id1597 . -2) (undo-tree-id1598 . -3) (undo-tree-id1599 . -3) (undo-tree-id1600 . -3) (undo-tree-id1601 . -3) (undo-tree-id1602 . -4) (undo-tree-id1603 . -4) (undo-tree-id1604 . -4) (undo-tree-id1605 . -5) (undo-tree-id1606 . -5) (undo-tree-id1607 . -6) (undo-tree-id1608 . -6) (undo-tree-id1609 . -7) (undo-tree-id1610 . -7) (undo-tree-id1611 . -7) (undo-tree-id1612 . -7) (undo-tree-id1613 . -7) (undo-tree-id1614 . -7) (undo-tree-id1615 . -7) (undo-tree-id1616 . -7) (undo-tree-id1617 . -7) (undo-tree-id1618 . -7) (undo-tree-id1619 . -7) (undo-tree-id1620 . -7) (undo-tree-id1621 . -7) (undo-tree-id1622 . -7) (undo-tree-id1623 . -7) (undo-tree-id1624 . -7) (undo-tree-id1625 . -7) (undo-tree-id1626 . -7) (undo-tree-id1627 . -7) (undo-tree-id1628 . -8) (undo-tree-id1629 . -8) (undo-tree-id1630 . -8) (undo-tree-id1631 . -8) 476) nil (26040 44187 129406 449000) 0 nil])
([nil nil ((#("value" 0 5 (fontified t)) . -499) (undo-tree-id1585 . -5) (undo-tree-id1586 . -5) (undo-tree-id1587 . -5) (undo-tree-id1588 . -5) (undo-tree-id1589 . -5) (undo-tree-id1590 . -5) (undo-tree-id1591 . -5) (undo-tree-id1592 . -5) 504) nil (26040 44187 129337 961000) 0 nil])
([nil nil ((499 . 500)) nil (26040 44187 129322 281000) 0 nil])
([nil nil ((370 . 380) (t 26040 44187 142981 603000)) nil (26040 44214 546187 8000) 0 nil])
([nil nil ((380 . 381)) nil (26040 44222 938735 872000) 0 nil] [nil nil ((apply yas--snippet-revive 376 407 #s(yas--snippet nil nil #s(yas--exit #<marker at 129 in main.rs> nil) 12 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 129 in main.rs> nil) 12 nil nil nil nil)) (376 . 407) (#("unsafe {
            $0
        }" 0 33 (fontified nil)) . 376) (400 . 408) (385 . 397) (#("    " 0 4 (fontified nil)) . 385) (376 . 393) (#("unsaffi" 0 4 (fontified nil) 4 7 (face font-lock-constant-face fontified nil)) . 376) (undo-tree-id1715 . 3) (376 . 380) (#("unsafe" 0 6 (fontified nil)) . -376) (376 . 382) (#("unsa" 0 4 (face font-lock-constant-face fontified t)) . -376) (undo-tree-id1716 . -4) (undo-tree-id1717 . -4) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -2) (undo-tree-id1721 . -2) (undo-tree-id1722 . -3) (undo-tree-id1723 . -3) (undo-tree-id1724 . -4) (undo-tree-id1725 . -4) (undo-tree-id1726 . -4) (undo-tree-id1727 . -4) (undo-tree-id1728 . -4) (undo-tree-id1729 . -4) (undo-tree-id1730 . -4) (undo-tree-id1731 . -4) 380) ((376 . 380) (#("unsafe" 0 6 (fontified nil)) . 376) (376 . 382) (#("unsa" 0 4 (fontified nil)) . 376) (376 . 383) (#("unsafe {
    $0
}" 0 9 (fontified nil) 9 13 (fontified nil) 13 17 (fontified nil)) . 376) (385 . 389) (#("            " 0 12 (fontified nil)) . 385) (#("        " 0 8 (fontified nil)) . 400) (376 . 409) (#("unsafe {
            
        }" 0 6 (face rust-unsafe fontified t) 6 7 (fontified t) 7 8 (face (rainbow-delimiters-depth-3-face) fontified t) 8 30 (fontified t) 30 31 (face (rainbow-delimiters-depth-3-face) fontified t)) . 376) (undo-tree-id1732 . -21) (undo-tree-id1733 . -9) (undo-tree-id1734 . -21)) (26040 44214 544577 551000) 0 nil])
([nil nil ((380 . 381)) nil (26040 44222 938735 317000) 0 nil])
nil
([nil nil ((apply yas--snippet-revive 376 407 #s(yas--snippet nil nil #s(yas--exit 397 nil) 13 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 397 nil) 13 nil nil nil nil)) (376 . 407) (#("unsafe {
            $0
        }" 0 33 (fontified nil)) . 376) (400 . 408) (385 . 397) (#("    " 0 4 (fontified nil)) . 385) (376 . 393) (#("unsaf" 0 5 (fontified nil)) . 376) (376 . 381) (#("unsafe" 0 6 (fontified nil)) . -376) (376 . 382) (#("unsaf" 0 5 (fontified t)) . -376) (undo-tree-id1745 . -4) (undo-tree-id1746 . -5) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -2) (undo-tree-id1750 . -2) (undo-tree-id1751 . -3) (undo-tree-id1752 . -3) (undo-tree-id1753 . -4) (undo-tree-id1754 . -4) (undo-tree-id1755 . -4) (undo-tree-id1756 . -4) (undo-tree-id1757 . -4) (undo-tree-id1758 . -4) (undo-tree-id1759 . -4) (undo-tree-id1760 . -4) (undo-tree-id1761 . -4) (undo-tree-id1762 . -4) (undo-tree-id1763 . -4) (undo-tree-id1764 . -4) (undo-tree-id1765 . -4) (undo-tree-id1766 . -4) (undo-tree-id1767 . -4) (undo-tree-id1768 . -4) (undo-tree-id1769 . -4) (undo-tree-id1770 . -4) (undo-tree-id1771 . -5) (undo-tree-id1772 . -5) 381) nil (26040 44222 938733 25000) 0 nil])
([nil nil ((#("ffi::zbar_image_scanner_set_config(image_scanner.scanner, ffi::zbar_symbol_type_e_ZBAR_NONE, ffi::zbar_config_e_ZBAR_CFG_ENABLE, 1);" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t) 5 34 (fontified t) 34 35 (face (rainbow-delimiters-depth-3-face) fontified t) 35 48 (fontified t) 48 49 (fontified t) 49 56 (fontified t) 56 58 (fontified t) 58 61 (face font-lock-constant-face fontified t) 61 63 (fontified t) 63 91 (fontified t) 91 93 (fontified t) 93 96 (face font-lock-constant-face fontified t) 96 98 (fontified t) 98 127 (fontified t) 127 130 (fontified t) 130 131 (face (rainbow-delimiters-depth-3-face) fontified t) 131 132 (fontified t)) . 408) (undo-tree-id1735 . -35) (undo-tree-id1736 . -131) (undo-tree-id1737 . -2) (undo-tree-id1738 . -2) (undo-tree-id1739 . -2) (undo-tree-id1740 . -2) (undo-tree-id1741 . -2) (undo-tree-id1742 . -2) (undo-tree-id1743 . -2) (undo-tree-id1744 . -132)) nil (26040 44222 938711 625000) 0 nil])
([nil nil ((nil rear-nonsticky nil 526 . 527) (nil fontified nil 526 . 527) (nil fontified nil 525 . 526) (nil fontified nil 522 . 525) (nil fontified nil 493 . 522) (nil fontified nil 491 . 493) (nil fontified nil 488 . 491) (nil fontified nil 486 . 488) (nil fontified nil 458 . 486) (nil fontified nil 456 . 458) (nil fontified nil 453 . 456) (nil fontified nil 451 . 453) (nil fontified nil 444 . 451) (nil fontified nil 443 . 444) (nil fontified nil 430 . 443) (nil fontified nil 429 . 430) (nil fontified nil 400 . 429) (nil fontified nil 398 . 400) (nil fontified nil 395 . 398) (395 . 527)) nil (26040 44222 938696 629000) 0 nil])
([nil nil ((395 . 397) 527) nil (26040 44222 938690 652000) 0 nil])
([nil nil ((542 . 544) (t 26040 44222 949650 436000)) nil (26040 44232 266667 730000) 0 nil])
([nil nil ((545 . 553) (#("            " 0 12 (fontified nil)) . 544) (undo-tree-id1861 . -8) (undo-tree-id1862 . -8) (undo-tree-id1863 . -8) (undo-tree-id1864 . -8) (552 . 556) (543 . 553) (t 26040 44232 279651 3000)) nil (26040 44269 315363 295000) 0 nil])
([nil nil ((544 . 556)) nil (26040 44269 315359 563000) 0 nil])
([nil nil ((556 . 557)) nil (26040 44269 315358 985000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -556) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) 557) nil (26040 44269 315357 975000) 0 nil])
([nil nil ((556 . 557)) nil (26040 44269 315351 992000) 0 nil])
([nil nil ((556 . 558) (#("O" 0 1 (fontified nil)) . 556) (556 . 557) (#("Ok" 0 2 (fontified nil)) . -556) (556 . 558) (#("O" 0 1 (face font-lock-type-face fontified t)) . -556) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) 557) nil (26040 44269 315350 653000) 0 nil])
([nil nil ((#("{" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . 542) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1)) nil (26040 44269 315345 312000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 542) (undo-tree-id1837 . 1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1)) nil (26040 44269 315341 248000) 0 nil])
([nil nil ((#("            Ok" 0 12 (fontified t) 12 14 (face font-lock-type-face fontified t)) . 542) (undo-tree-id1800 . 14) (undo-tree-id1801 . -12) (undo-tree-id1802 . -12) (undo-tree-id1803 . -12) (undo-tree-id1804 . -12) (undo-tree-id1805 . -12) (undo-tree-id1806 . -12) (undo-tree-id1807 . -12) (undo-tree-id1808 . -12) (undo-tree-id1809 . -12) (undo-tree-id1810 . -12) (undo-tree-id1811 . -12) (undo-tree-id1812 . -12) (undo-tree-id1813 . -12) (undo-tree-id1814 . -12) (undo-tree-id1815 . -12) (undo-tree-id1816 . -12) (undo-tree-id1817 . -12) (undo-tree-id1818 . -12) (undo-tree-id1819 . -12) (undo-tree-id1820 . -12) (undo-tree-id1821 . -12) (undo-tree-id1822 . -14) (undo-tree-id1823 . -14) (undo-tree-id1824 . -14) (undo-tree-id1825 . -14) (undo-tree-id1826 . -14) (undo-tree-id1827 . -14) (undo-tree-id1828 . -14) (undo-tree-id1829 . -14) (undo-tree-id1830 . -14) (undo-tree-id1831 . -14) (undo-tree-id1832 . -14) (undo-tree-id1833 . -14) (undo-tree-id1834 . -14) (undo-tree-id1835 . -14) (undo-tree-id1836 . -14)) nil (26040 44269 315335 47000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 542) (undo-tree-id1797 . 1) (undo-tree-id1798 . 1) (undo-tree-id1799 . -1)) nil (26040 44269 315084 803000) 0 nil])
([nil nil ((#("        }" 0 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t)) . 542) (undo-tree-id1781 . -9) (undo-tree-id1782 . -9) (undo-tree-id1783 . -9) (undo-tree-id1784 . -9) (undo-tree-id1785 . -9) (undo-tree-id1786 . -9) (undo-tree-id1787 . -9) (undo-tree-id1788 . -9) (undo-tree-id1789 . -9) (undo-tree-id1790 . -9) (undo-tree-id1791 . -9) (undo-tree-id1792 . 9) (undo-tree-id1793 . 9) (undo-tree-id1794 . -8) (undo-tree-id1795 . -8) (undo-tree-id1796 . -9)) nil (26040 44269 315080 697000) 0 nil])
([nil nil ((#("match " 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t)) . -370) (undo-tree-id1773 . -6) (undo-tree-id1774 . -6) (undo-tree-id1775 . -5) (undo-tree-id1776 . -5) (undo-tree-id1777 . -5) (undo-tree-id1778 . -5) (undo-tree-id1779 . -5) (undo-tree-id1780 . -6) 376) nil (26040 44269 315065 340000) 0 nil])
([nil nil ((536 . 537) (t 26040 44269 326319 916000)) nil (26040 44278 191391 922000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -535) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (#("/" 0 1 (fontified t)) . -536) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) 537) nil (26040 44278 191388 519000) 0 nil])
([nil nil ((535 . 537)) nil (26040 44278 191343 727000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -535) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (#("u" 0 1 (fontified t)) . -536) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) 537) nil (26040 44278 191339 690000) 0 nil])
([nil nil ((#("ZBarImageScanner::" 0 16 (face font-lock-type-face fontified t) 16 18 (fontified t)) . -875) (undo-tree-id1973 . -18) (undo-tree-id1974 . -18) (undo-tree-id1975 . -18) (undo-tree-id1976 . -18) (undo-tree-id1977 . -18) (undo-tree-id1978 . -18) 893 (t 26040 44278 192987 114000)) nil (26040 44292 667515 282000) 0 nil])
([nil nil ((875 . 876)) nil (26040 44292 667510 338000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -875) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) (undo-tree-id1972 . -1) 876) nil (26040 44292 667509 468000) 0 nil])
([nil nil ((875 . 876)) nil (26040 44292 667505 425000) 0 nil])
([nil nil ((875 . 891) (#("Z" 0 1 (fontified nil)) . 875) (875 . 876) (#("ZBarImageScanner" 0 16 (fontified nil)) . -875) (875 . 891) (#("Z" 0 1 (face font-lock-type-face fontified t)) . -875) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) 876) nil (26040 44292 667504 146000) 0 nil])
([nil nil ((891 . 894)) nil (26040 44292 667498 869000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -893) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) 894) nil (26040 44292 667497 724000) 0 nil])
([nil nil ((893 . 894)) nil (26040 44292 667493 133000) 0 nil])
([nil nil ((apply yas--snippet-revive 893 898 #s(yas--snippet nil nil #s(yas--exit 898 nil) 14 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 898 nil) 14 nil nil nil nil)) (893 . 898) (#("new()$0" 0 7 (fontified nil)) . 893) (893 . 900) (#("n" 0 1 (fontified nil)) . 893) (893 . 894) (#("new()" 0 5 (fontified nil)) . -893) (893 . 898) (#("n" 0 1 (fontified t)) . -893) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) 894) nil (26040 44292 667490 493000) 0 nil])
([nil nil ((898 . 899)) nil (26040 44292 667476 66000) 0 nil])
([nil nil ((899 . 904) (t 26040 44292 679654 648000)) nil (26040 44459 470782 782000) 0 nil])
([nil nil ((850 . 853)) nil (26040 44459 470781 826000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -851) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (#("o" 0 1 (fontified t)) . -852) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) 853) nil (26040 44459 470780 117000) 0 nil])
([nil nil ((851 . 854)) nil (26040 44459 470765 976000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -850) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (undo-tree-id1983 . -1) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) (undo-tree-id1997 . -1) (undo-tree-id1998 . -1) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (undo-tree-id2005 . -1) (#("g" 0 1 (fontified t)) . -851) (undo-tree-id2006 . -1) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) (undo-tree-id2016 . -1) (#("r" 0 1 (fontified t)) . -852) (undo-tree-id2017 . -1) (undo-tree-id2018 . -1) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (undo-tree-id2024 . -1) (#("a" 0 1 (fontified t)) . -853) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) 854) nil (26040 44459 470760 618000) 0 nil])
([nil nil ((850 . 852) (t 26040 44459 486331 429000)) nil (26040 44467 493820 376000) 0 nil])
([nil nil ((apply yas--snippet-revive 851 859 #s(yas--snippet nil nil #s(yas--exit 859 nil) 15 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 859 nil) 15 nil nil nil nil)) (851 . 859) (#("unwrap()$0" 0 10 (fontified nil)) . 851) (851 . 861) (#("u" 0 1 (fontified nil)) . 851) (851 . 852) (#("unwrap()" 0 8 (fontified nil)) . -851) (851 . 859) (#("u" 0 1 (fontified t)) . -851) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) 852) nil (26040 44467 493815 459000) 0 nil])
([nil nil ((859 . 860) (t 26040 44467 506331 913000)) nil (26040 44484 313226 63000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -859) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) 860) nil (26040 44484 313224 703000) 0 nil])
([nil nil ((859 . 863)) nil (26040 44484 313220 745000) 0 nil])
([nil nil ((apply yas--snippet-revive 860 871 #s(yas--snippet nil nil #s(yas--exit 871 nil) 16 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 871 nil) 16 nil nil nil nil)) (860 . 871) (#("grayscale()$0" 0 13 (fontified nil)) . 860) (860 . 873) (#("gra" 0 3 (fontified nil)) . 860) (860 . 863) (#("grayscale()" 0 11 (fontified nil)) . -860) (860 . 871) (#("gra" 0 3 (fontified t)) . -860) (undo-tree-id2052 . -3) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) (undo-tree-id2055 . -2) (undo-tree-id2056 . -3) (undo-tree-id2057 . -3) (undo-tree-id2058 . -3) (undo-tree-id2059 . -3) 863) nil (26040 44484 313216 360000) 0 nil])
([nil nil ((925 . 939) (t 26040 44484 356332 923000)) nil (26040 44673 52420 23000) 0 nil])
([nil nil ((#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -935) (undo-tree-id2123 . -1) (undo-tree-id2124 . -1) (undo-tree-id2125 . -1) (undo-tree-id2126 . -1) (undo-tree-id2127 . -1) (undo-tree-id2128 . -1) (undo-tree-id2129 . -1) (undo-tree-id2130 . -1) (undo-tree-id2131 . -1) (undo-tree-id2132 . -1) (#("m" 0 1 (face font-lock-variable-name-face fontified t)) . -936) (undo-tree-id2133 . -1) (undo-tree-id2134 . -1) (undo-tree-id2135 . -1) (undo-tree-id2136 . -1) (undo-tree-id2137 . -1) (undo-tree-id2138 . -1) (undo-tree-id2139 . -1) (undo-tree-id2140 . -1) (undo-tree-id2141 . -1) (#("g" 0 1 (face font-lock-variable-name-face fontified t)) . -937) (undo-tree-id2142 . -1) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (undo-tree-id2145 . -1) (undo-tree-id2146 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -938) (undo-tree-id2147 . -1) (undo-tree-id2148 . -1) (undo-tree-id2149 . -1) 939) nil (26040 44673 52417 798000) 0 nil])
([nil nil ((935 . 952)) nil (26040 44673 52398 926000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -948) (undo-tree-id2094 . -1) (undo-tree-id2095 . -1) (undo-tree-id2096 . -1) (undo-tree-id2097 . -1) (undo-tree-id2098 . -1) (undo-tree-id2099 . -1) (undo-tree-id2100 . -1) (undo-tree-id2101 . -1) (undo-tree-id2102 . -1) (undo-tree-id2103 . -1) (undo-tree-id2104 . -1) (#("m" 0 1 (fontified t)) . -949) (undo-tree-id2105 . -1) (undo-tree-id2106 . -1) (undo-tree-id2107 . -1) (undo-tree-id2108 . -1) (undo-tree-id2109 . -1) (undo-tree-id2110 . -1) (undo-tree-id2111 . -1) (undo-tree-id2112 . -1) (undo-tree-id2113 . -1) (#("g" 0 1 (fontified t)) . -950) (undo-tree-id2114 . -1) (undo-tree-id2115 . -1) (undo-tree-id2116 . -1) (undo-tree-id2117 . -1) (undo-tree-id2118 . -1) (undo-tree-id2119 . -1) (#("e" 0 1 (fontified t)) . -951) (undo-tree-id2120 . -1) (undo-tree-id2121 . -1) (undo-tree-id2122 . -1) 952) nil (26040 44673 52396 825000) 0 nil])
([nil nil ((948 . 952)) nil (26040 44673 52376 999000) 0 nil])
([nil nil ((47 . 83) (apply yas--snippet-revive 942 961 #s(yas--snippet nil nil #s(yas--exit 961 nil) 17 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 961 nil) 17 nil nil nil nil)) (942 . 961) (#("zbar_image_create()$0" 0 21 (fontified nil)) . 942) (942 . 963) (#("zbar_image" 0 10 (fontified nil)) . 942) (942 . 952) (#("zbar_image_create() (use crate::ffi::zbar_image_create)" 0 55 (fontified nil)) . -942) (942 . 997) (#("zbar_image" 0 10 (fontified t)) . -942) (undo-tree-id2063 . -10) (undo-tree-id2064 . -1) (undo-tree-id2065 . -2) (undo-tree-id2066 . -3) (undo-tree-id2067 . -3) (undo-tree-id2068 . -4) (undo-tree-id2069 . -4) (undo-tree-id2070 . -4) (undo-tree-id2071 . -5) (undo-tree-id2072 . -5) (undo-tree-id2073 . -6) (undo-tree-id2074 . -6) (undo-tree-id2075 . -6) (undo-tree-id2076 . -6) (undo-tree-id2077 . -6) (undo-tree-id2078 . -6) (undo-tree-id2079 . -6) (undo-tree-id2080 . -6) (undo-tree-id2081 . -6) (undo-tree-id2082 . -6) (undo-tree-id2083 . -6) (undo-tree-id2084 . -6) (undo-tree-id2085 . -6) (undo-tree-id2086 . -6) (undo-tree-id2087 . -7) (undo-tree-id2088 . -8) (undo-tree-id2089 . -9) (undo-tree-id2090 . -10) (undo-tree-id2091 . -10) (undo-tree-id2092 . -10) (undo-tree-id2093 . -10) 952) nil (26040 44673 52373 520000) 0 nil])
([nil nil ((997 . 998)) nil (26040 44673 52342 76000) 0 nil])
([nil nil ((978 . 979) (t 26040 44673 66344 328000)) nil (26040 44684 455023 830000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -978) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) 979) nil (26040 44684 455022 265000) 0 nil])
([nil nil ((998 . 999) (978 . 978) (978 . 979)) nil (26040 44684 455015 640000) 0 nil])
([nil nil ((978 . 980)) nil (26040 44684 455014 621000) 0 nil])
([nil nil ((980 . 981)) nil (26040 44684 455013 941000) 0 nil])
([nil nil ((980 . 981)) nil (26040 44686 169863 951000) 0 nil])
([nil nil ((#(" {zbar_image_create()};" 0 1 (fontified t) 1 2 (face (rainbow-delimiters-depth-2-face) fontified t) 2 19 (fontified t) 19 20 (face (rainbow-delimiters-depth-3-face) fontified t) 20 21 (face (rainbow-delimiters-depth-3-face) fontified t) 21 22 (face (rainbow-delimiters-depth-2-face) fontified t) 22 23 (fontified t)) . 981) (undo-tree-id2247 . -3) (undo-tree-id2248 . -3) (undo-tree-id2249 . -3) (undo-tree-id2250 . -3) (undo-tree-id2251 . -3) (undo-tree-id2252 . -3) (undo-tree-id2253 . -23)) nil (26040 44697 581666 747000) 0 nil] [nil nil ((apply yas--snippet-revive 978 1001 #s(yas--snippet nil nil #s(yas--exit #<marker at 1762 in main.rs> nil) 18 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 1762 in main.rs> nil) 18 nil nil nil nil)) (978 . 1001) (#("unsafe {
        $0
    }" 0 25 (fontified nil)) . 978) (998 . 1002) (987 . 995) (#("    " 0 4 (fontified nil)) . 987) (978 . 995) (#("uns" 0 3 (fontified nil)) . 978) (978 . 981) (#("unsafe" 0 6 (fontified nil)) . -978) (978 . 984) (#("uns" 0 3 (fontified t)) . -978) (undo-tree-id2150 . -3) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (undo-tree-id2153 . -2) (undo-tree-id2154 . -2) (undo-tree-id2155 . -2) (undo-tree-id2156 . -2) (undo-tree-id2157 . -2) (undo-tree-id2158 . -2) (undo-tree-id2159 . -3) (undo-tree-id2160 . -3) (undo-tree-id2161 . -3) (undo-tree-id2162 . -3) (undo-tree-id2163 . -3) (undo-tree-id2164 . -3) 981) ((978 . 981) (#("unsafe" 0 6 (fontified nil)) . 978) (978 . 984) (#("uns" 0 3 (fontified nil)) . 978) (978 . 981) (#("unsafe {
    $0
}" 0 9 (fontified nil) 9 13 (fontified nil) 13 17 (fontified nil)) . 978) (987 . 991) (#("        " 0 8 (fontified nil)) . 987) (#("    " 0 4 (fontified nil)) . 998) (978 . 1003) (#("unsafe {
        
    }" 0 6 (face rust-unsafe fontified t) 6 7 (fontified t) 7 8 (face (rainbow-delimiters-depth-2-face) fontified t) 8 22 (fontified t) 22 23 (face (rainbow-delimiters-depth-2-face) fontified t)) . 978) (undo-tree-id2173 . -17) (undo-tree-id2174 . -17) (undo-tree-id2175 . -17) (undo-tree-id2176 . -17) (undo-tree-id2177 . -17) (undo-tree-id2178 . -17) (undo-tree-id2179 . -17) (undo-tree-id2180 . -17) (undo-tree-id2181 . -17) (undo-tree-id2182 . -17) (undo-tree-id2183 . -18) (undo-tree-id2184 . -17) (t 26040 44684 499678 351000)) (26040 44684 455008 476000) 0 nil])
([nil nil ((981 . 982)) nil (26040 44697 581661 110000) 0 nil])
nil
([nil nil ((#("s" 0 1 (fontified t)) . -981) (undo-tree-id2242 . -1) (undo-tree-id2243 . -1) (undo-tree-id2244 . -1) (undo-tree-id2245 . -1) (undo-tree-id2246 . -1) 982) nil (26040 44697 581660 135000) 0 nil])
([nil nil ((981 . 982)) nil (26040 44697 581656 184000) 0 nil])
([nil nil ((apply yas--snippet-revive 978 1002 #s(yas--snippet nil nil #s(yas--exit 995 nil) 19 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 995 nil) 19 nil nil nil nil)) (978 . 1002) (#("unsafe {
        $0
    };" 0 26 (fontified nil)) . 978) (998 . 1002) (987 . 995) (#("    " 0 4 (fontified nil)) . 987) (978 . 996) (#("unsa" 0 4 (fontified nil)) . 978) (978 . 982) (#("unsafe" 0 6 (fontified nil)) . -978) (978 . 984) (#("unsa" 0 4 (fontified t)) . -978) (undo-tree-id2199 . -3) (undo-tree-id2200 . -4) (undo-tree-id2201 . -1) (undo-tree-id2202 . -1) (undo-tree-id2203 . -2) (undo-tree-id2204 . -2) (undo-tree-id2205 . -2) (undo-tree-id2206 . -2) (undo-tree-id2207 . -2) (undo-tree-id2208 . -2) (undo-tree-id2209 . -3) (undo-tree-id2210 . -3) (undo-tree-id2211 . -3) (undo-tree-id2212 . -3) (undo-tree-id2213 . -3) (undo-tree-id2214 . -3) (undo-tree-id2215 . -3) (undo-tree-id2216 . -3) (undo-tree-id2217 . -3) (undo-tree-id2218 . -3) (undo-tree-id2219 . -3) (undo-tree-id2220 . -3) (undo-tree-id2221 . -3) (undo-tree-id2222 . -3) (undo-tree-id2223 . -3) (undo-tree-id2224 . -3) (undo-tree-id2225 . -3) (undo-tree-id2226 . -3) (undo-tree-id2227 . -3) (undo-tree-id2228 . -3) (undo-tree-id2229 . -3) (undo-tree-id2230 . -3) (undo-tree-id2231 . -3) (undo-tree-id2232 . -3) (undo-tree-id2233 . -3) (undo-tree-id2234 . -3) (undo-tree-id2235 . -3) (undo-tree-id2236 . -3) (undo-tree-id2237 . -3) (undo-tree-id2238 . -3) (undo-tree-id2239 . -4) (undo-tree-id2240 . -4) (undo-tree-id2241 . -4) 982) nil (26040 44697 581653 138000) 0 nil])
([nil nil ((995 . 1005)) nil (26040 44697 581622 583000) 0 nil])
([nil nil ((apply yas--snippet-revive 995 1014 #s(yas--snippet nil nil #s(yas--exit 1014 nil) 20 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1014 nil) 20 nil nil nil nil)) (995 . 1014) (#("zbar_image_create()$0" 0 21 (fontified nil)) . 995) (995 . 1016) (#("zbar_image" 0 10 (fontified nil)) . 995) (995 . 1005) (#("zbar_image_create()" 0 19 (fontified nil)) . -995) (995 . 1014) (#("zbar_image" 0 10 (fontified t)) . -995) (undo-tree-id2185 . -10) (undo-tree-id2186 . -1) (undo-tree-id2187 . -2) (undo-tree-id2188 . -3) (undo-tree-id2189 . -3) (undo-tree-id2190 . -4) (undo-tree-id2191 . -4) (undo-tree-id2192 . -4) (undo-tree-id2193 . -5) (undo-tree-id2194 . -6) (undo-tree-id2195 . -7) (undo-tree-id2196 . -8) (undo-tree-id2197 . -9) (undo-tree-id2198 . -10) 1005) nil (26040 44697 581617 937000) 0 nil])
([nil nil ((#("use crate::ffi::zbar_image_create;" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 9 (face font-lock-keyword-face fontified t) 9 11 (fontified t) 11 14 (face font-lock-constant-face fontified t) 14 34 (fontified t)) . 49) (undo-tree-id2445 . -34) (t 26040 44697 583012 479000)) nil (26040 45150 220803 842000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t rear-nonsticky t)) . 49)) nil (26040 45150 220802 321000) 0 nil])
([nil nil ((960 . 965)) nil (26040 45150 220801 659000) 0 nil])
([nil nil ((991 . 996)) nil (26040 45150 220801 50000) 0 nil])
([nil nil ((996 . 1000)) nil (26040 45150 220800 343000) 0 nil])
([nil nil ((#("let " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -996) (undo-tree-id2444 . -4) 1000) nil (26040 45150 220799 520000) 0 nil])
([nil nil ((996 . 998)) nil (26040 45150 220797 961000) 0 nil])
([nil nil ((996 . 999) (#("ff" 0 2 (fontified nil)) . 996) (996 . 998) (#("ffi" 0 3 (fontified nil)) . -996) (996 . 999) (#("ff" 0 2 (fontified t)) . -996) (undo-tree-id2443 . -2) 998) nil (26040 45150 220796 757000) 0 nil])
([nil nil ((999 . 1000)) nil (26040 45150 220794 657000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -999) (undo-tree-id2442 . -1) 1000) nil (26040 45150 220793 779000) 0 nil])
([nil nil ((999 . 1010)) nil (26040 45150 220792 277000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1023 1033 nil nil nil t #s(yas--field 2 1035 1041 nil nil nil nil #s(yas--exit 1042 nil))) #s(yas--field 2 1035 1041 nil nil nil nil #s(yas--exit 1042 nil))) #s(yas--exit 1042 nil) 21 nil #s(yas--field 1 1023 1033 nil nil nil t #s(yas--field 2 1035 1041 nil nil nil nil #s(yas--exit 1042 nil))) nil nil)) (1001 . 1037) (#("zbar_image_set_format(${1:image}, ${2:format})$0" 0 48 (fontified nil)) . 1001) (1001 . 1049) (#("image_set" 0 9 (fontified nil)) . 1001) (1001 . 1010) (#("zbar_image_set_format(…)" 0 24 (fontified nil)) . -1001) (1001 . 1025) (#("image_set" 0 9 (fontified t)) . -1001) (undo-tree-id2441 . -9) 1010) nil (26040 45150 220790 958000) 0 nil])
([nil nil ((#("image" 0 5 (fontified nil)) . 1024) (1023 . 1024)) nil (26040 45150 220788 86000) 0 nil])
([nil nil ((1023 . 1033) (#("z" 0 1 (fontified nil)) . 1023) (1023 . 1024) (#("zbar_image" 0 10 (fontified nil)) . -1023) (1023 . 1033) (#("z" 0 1 (fontified t)) . -1023) (undo-tree-id2439 . -1) (undo-tree-id2440 . -1) 1024) nil (26040 45150 220786 680000) 0 nil])
([nil nil ((apply yas--snippet-revive 1001 1042 #s(yas--snippet nil (#s(yas--field 1 1023 1033 nil nil nil t #s(yas--field 2 1035 1041 nil nil nil nil #s(yas--exit 1042 nil))) #s(yas--field 2 1035 1041 nil nil nil nil #s(yas--exit 1042 nil))) #s(yas--exit 1042 nil) 21 nil #s(yas--field 1 1023 1033 nil nil nil t #s(yas--field 2 1035 1041 nil nil nil nil #s(yas--exit 1042 nil))) nil nil))) nil (26040 45150 220783 600000) 0 nil])
([nil nil ((#("format" 0 6 (fontified t)) . -1035) (undo-tree-id2437 . -6) (undo-tree-id2438 . -6) 1041) nil (26040 45150 220782 704000) 0 nil])
([nil nil ((#("ffi::zbar_image_set_format(zbar_image, )" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t) 5 26 (fontified t) 26 27 (face (rainbow-delimiters-depth-2-face) fontified t) 27 37 (fontified t) 37 39 (fontified t) 39 40 (face (rainbow-delimiters-depth-2-face) fontified t)) . 996) (undo-tree-id2436 . -27)) nil (26040 45150 220780 488000) 0 nil])
([nil nil ((984 . 997)) nil (26040 45150 220778 378000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1036 . 1037) (nil fontified nil 1036 . 1037) (nil fontified nil 1034 . 1036) (nil fontified nil 1024 . 1034) (nil fontified nil 1023 . 1024) (nil fontified nil 1002 . 1023) (nil fontified nil 1000 . 1002) (nil fontified nil 997 . 1000) (997 . 1037)) nil (26040 45150 220777 378000) 0 nil])
([nil nil ((984 . 985)) nil (26040 45150 220775 497000) 0 nil])
([nil nil ((960 . 972)) nil (26040 45150 220774 807000) 0 nil])
([nil nil ((#("zbar_" 0 5 (fontified t)) . -1037) (undo-tree-id2435 . -5) 1042) nil (26040 45150 220773 960000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1006) (undo-tree-id2433 . -4) (undo-tree-id2434 . -4) 1037) nil (26040 45150 220772 205000) 0 nil])
([nil nil ((1040 . 1041)) nil (26040 45150 220769 888000) 0 nil])
([nil nil ((#("Y" 0 1 (face font-lock-type-face fontified t)) . -1040) (undo-tree-id2432 . -1) 1041) nil (26040 45150 220769 60000) 0 nil])
([nil nil ((1040 . 1048)) nil (26040 45150 220767 547000) 0 nil])
([nil nil ((#("8" 0 1 (face font-lock-type-face fontified t)) . -1046) (undo-tree-id2430 . -1) (#("0" 0 1 (face font-lock-type-face fontified t)) . -1047) (undo-tree-id2431 . -1) 1048) nil (26040 45150 220766 500000) 0 nil])
([nil nil ((1046 . 1048)) nil (26040 45150 220764 187000) 0 nil])
([nil nil ((#("Y80" 0 3 (face font-lock-type-face fontified t)) . -1045) (undo-tree-id2428 . -1) (undo-tree-id2429 . -3) 1048) nil (26040 45150 220763 209000) 0 nil])
([nil nil ((1045 . 1047)) nil (26040 45150 220760 994000) 0 nil])
([nil nil ((1047 . 1051)) nil (26040 45150 220760 238000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -1045) (undo-tree-id2422 . -1) (#("o" 0 1 (fontified t)) . -1046) (undo-tree-id2423 . -1) (#("r" 0 1 (face font-lock-keyword-face fontified t)) . -1047) (undo-tree-id2424 . -1) (#("m" 0 1 (fontified t)) . -1048) (undo-tree-id2425 . -1) (#("a" 0 1 (fontified t)) . -1049) (undo-tree-id2426 . -1) (#("t" 0 1 (fontified t)) . -1050) (undo-tree-id2427 . -1) 1051) nil (26040 45150 220758 744000) 0 nil])
([nil nil ((1045 . 1048)) nil (26040 45150 220753 392000) 0 nil])
([nil nil ((#("P" 0 1 (face font-lock-type-face fontified t)) . -1047) (undo-tree-id2416 . -1) (undo-tree-id2417 . -1) (undo-tree-id2418 . -1) (undo-tree-id2419 . -1) (undo-tree-id2420 . -1) (undo-tree-id2421 . -1) 1048) nil (26040 45150 220752 280000) 0 nil])
([nil nil ((1047 . 1051)) nil (26040 45150 220747 670000) 0 nil])
([nil nil ((#("FORMAT" 0 6 (face font-lock-type-face fontified t)) . -1045) (undo-tree-id2391 . -6) (undo-tree-id2392 . -2) (undo-tree-id2393 . -2) (undo-tree-id2394 . -2) (undo-tree-id2395 . -2) (undo-tree-id2396 . -2) (undo-tree-id2397 . -2) (undo-tree-id2398 . -2) (undo-tree-id2399 . -2) (undo-tree-id2400 . -3) (undo-tree-id2401 . -3) (undo-tree-id2402 . -4) (undo-tree-id2403 . -4) (undo-tree-id2404 . -4) (undo-tree-id2405 . -4) (undo-tree-id2406 . -5) (undo-tree-id2407 . -5) (undo-tree-id2408 . -5) (undo-tree-id2409 . -5) (undo-tree-id2410 . -6) (undo-tree-id2411 . -6) (undo-tree-id2412 . -6) (undo-tree-id2413 . -6) (undo-tree-id2414 . -6) (undo-tree-id2415 . -6) 1051) nil (26040 45150 220745 873000) 0 nil])
([nil nil ((1045 . 1049)) nil (26040 45150 220728 536000) 0 nil])
([nil nil ((1049 . 1050)) nil (26040 45150 220727 809000) 0 nil])
([nil nil ((#("IMAGE" 0 5 (face font-lock-type-face fontified t)) . -1045) (undo-tree-id2377 . -5) (undo-tree-id2378 . -1) (undo-tree-id2379 . -1) (undo-tree-id2380 . -1) (undo-tree-id2381 . -2) (undo-tree-id2382 . -2) (undo-tree-id2383 . -3) (undo-tree-id2384 . -3) (undo-tree-id2385 . -4) (undo-tree-id2386 . -4) (undo-tree-id2387 . -5) (undo-tree-id2388 . -5) (undo-tree-id2389 . -5) (undo-tree-id2390 . -5) 1050) nil (26040 45150 220726 392000) 0 nil])
([nil nil ((1045 . 1046)) nil (26040 45150 220716 492000) 0 nil])
([nil nil ((#("I" 0 1 (face font-lock-type-face fontified t)) . -1045) (undo-tree-id2372 . -1) (undo-tree-id2373 . -1) (undo-tree-id2374 . -1) (undo-tree-id2375 . -1) (undo-tree-id2376 . -1) 1046) nil (26040 45150 220715 321000) 0 nil])
([nil nil ((1045 . 1051)) nil (26040 45150 220710 402000) 0 nil])
([nil nil ((#("FORMAT" 0 6 (face font-lock-type-face fontified t)) . -1045) (undo-tree-id2345 . -6) (undo-tree-id2346 . -1) (undo-tree-id2347 . -1) (undo-tree-id2348 . -1) (undo-tree-id2349 . -1) (undo-tree-id2350 . -2) (undo-tree-id2351 . -2) (undo-tree-id2352 . -2) (undo-tree-id2353 . -2) (undo-tree-id2354 . -3) (undo-tree-id2355 . -3) (undo-tree-id2356 . -4) (undo-tree-id2357 . -4) (undo-tree-id2358 . -4) (undo-tree-id2359 . -4) (undo-tree-id2360 . -5) (undo-tree-id2361 . -5) (undo-tree-id2362 . -5) (undo-tree-id2363 . -5) (undo-tree-id2364 . -5) (undo-tree-id2365 . -5) (undo-tree-id2366 . -6) (undo-tree-id2367 . -6) (undo-tree-id2368 . -6) (undo-tree-id2369 . -6) (undo-tree-id2370 . -6) (undo-tree-id2371 . -6) 1051) nil (26040 45150 220708 100000) 0 nil])
([nil nil ((#("ffi::" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t)) . -1040) (undo-tree-id2254 . -5) (undo-tree-id2255 . -5) (undo-tree-id2256 . -5) (undo-tree-id2257 . -5) (undo-tree-id2258 . -5) (undo-tree-id2259 . -5) (undo-tree-id2260 . -5) (undo-tree-id2261 . -5) (undo-tree-id2262 . -5) (undo-tree-id2263 . -5) (undo-tree-id2264 . -5) (undo-tree-id2265 . -5) (undo-tree-id2266 . -5) (undo-tree-id2267 . -5) (undo-tree-id2268 . -5) (undo-tree-id2269 . -5) (undo-tree-id2270 . -5) (undo-tree-id2271 . -5) (undo-tree-id2272 . -5) (undo-tree-id2273 . -5) (undo-tree-id2274 . -5) (undo-tree-id2275 . -5) (undo-tree-id2276 . -5) (undo-tree-id2277 . -5) (undo-tree-id2278 . -5) (undo-tree-id2279 . -5) (undo-tree-id2280 . -5) (undo-tree-id2281 . -5) (undo-tree-id2282 . -5) (undo-tree-id2283 . -5) (undo-tree-id2284 . -5) (undo-tree-id2285 . -5) (undo-tree-id2286 . -5) (undo-tree-id2287 . -5) (undo-tree-id2288 . -5) (undo-tree-id2289 . -5) (undo-tree-id2290 . -5) (undo-tree-id2291 . -5) (undo-tree-id2292 . -5) (undo-tree-id2293 . -5) (undo-tree-id2294 . -5) (undo-tree-id2295 . -5) (undo-tree-id2296 . -5) (undo-tree-id2297 . -5) (undo-tree-id2298 . -5) (undo-tree-id2299 . -5) (undo-tree-id2300 . -5) (undo-tree-id2301 . -5) (undo-tree-id2302 . -5) (undo-tree-id2303 . -5) (undo-tree-id2304 . -5) (undo-tree-id2305 . -5) (undo-tree-id2306 . -5) (undo-tree-id2307 . -5) (undo-tree-id2308 . -5) (undo-tree-id2309 . -5) (undo-tree-id2310 . -5) (undo-tree-id2311 . -5) (undo-tree-id2312 . -5) (undo-tree-id2313 . -5) (undo-tree-id2314 . -5) (undo-tree-id2315 . -5) (undo-tree-id2316 . -5) (undo-tree-id2317 . -5) (undo-tree-id2318 . -5) (undo-tree-id2319 . -5) (undo-tree-id2320 . -5) (undo-tree-id2321 . -5) (undo-tree-id2322 . -5) (undo-tree-id2323 . -5) (undo-tree-id2324 . -5) (undo-tree-id2325 . -5) (undo-tree-id2326 . -5) (undo-tree-id2327 . -5) (undo-tree-id2328 . -5) (undo-tree-id2329 . -5) (undo-tree-id2330 . -5) (undo-tree-id2331 . -5) (undo-tree-id2332 . -5) (undo-tree-id2333 . -5) (undo-tree-id2334 . -5) (undo-tree-id2335 . -5) (undo-tree-id2336 . -5) (undo-tree-id2337 . -5) (undo-tree-id2338 . -5) (undo-tree-id2339 . -5) (undo-tree-id2340 . -5) (undo-tree-id2341 . -5) (undo-tree-id2342 . -5) (undo-tree-id2343 . -5) (undo-tree-id2344 . -5) 1045) nil (26040 45150 220684 604000) 0 nil])
([nil nil ((1040 . 1041)) nil (26040 45150 220609 192000) 0 nil])
([nil nil ((#("    let zbar_scanner = ZBarImageScanner::new();
    let zbar_image = unsafe {
        let image = ffi::zbar_image_create();
        ffi::zbar_image_set_format(image, 0)
    };
    " 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 20 (face font-lock-variable-name-face fontified t) 20 23 (fontified t) 23 39 (face font-lock-type-face fontified t) 39 41 (fontified t) 41 44 (fontified t) 44 45 (face (rainbow-delimiters-depth-2-face) fontified t) 45 46 (face (rainbow-delimiters-depth-2-face) fontified t) 46 48 (fontified t) 48 52 (fontified t) 52 55 (face font-lock-keyword-face fontified t) 55 56 (fontified t) 56 66 (face font-lock-variable-name-face fontified t) 66 69 (fontified t) 69 75 (face rust-unsafe fontified t) 75 76 (fontified t) 76 77 (face (rainbow-delimiters-depth-2-face) fontified t) 77 78 (fontified t) 78 86 (fontified t) 86 89 (face font-lock-keyword-face fontified t) 89 90 (fontified t) 90 95 (face font-lock-variable-name-face fontified t) 95 98 (fontified t) 98 101 (face font-lock-constant-face fontified t) 101 103 (fontified t) 103 120 (fontified t) 120 121 (face (rainbow-delimiters-depth-3-face) fontified t) 121 122 (face (rainbow-delimiters-depth-3-face) fontified t) 122 123 (fontified t) 123 124 (fontified t) 124 132 (fontified t) 132 135 (face font-lock-constant-face fontified t) 135 137 (fontified t) 137 158 (fontified t) 158 159 (face (rainbow-delimiters-depth-3-face) fontified t) 159 164 (fontified t) 164 167 (fontified t) 167 168 (face (rainbow-delimiters-depth-3-face) fontified t rear-nonsticky t) 168 169 (fontified t) 169 173 (fontified t) 173 174 (face (rainbow-delimiters-depth-2-face) fontified t) 174 176 (fontified t) 176 180 (fontified t)) . 874) (undo-tree-id2604 . -180) (undo-tree-id2605 . -69) (undo-tree-id2606 . -180) (undo-tree-id2607 . -132) (undo-tree-id2608 . -166) (undo-tree-id2609 . -166) (undo-tree-id2610 . -166) (undo-tree-id2611 . -166) (undo-tree-id2612 . -166) (undo-tree-id2613 . -166) (undo-tree-id2614 . -166) (undo-tree-id2615 . -166) (undo-tree-id2616 . -166) (undo-tree-id2617 . -166) (undo-tree-id2618 . -166) (undo-tree-id2619 . -166) (undo-tree-id2620 . -166) (undo-tree-id2621 . -166) (undo-tree-id2622 . -166) (undo-tree-id2623 . -166) (undo-tree-id2624 . -166) (undo-tree-id2625 . -166) (undo-tree-id2626 . -166) (undo-tree-id2627 . -166) (undo-tree-id2628 . -166) (undo-tree-id2629 . -166) (undo-tree-id2630 . -166) (undo-tree-id2631 . -166) (undo-tree-id2632 . -166) (undo-tree-id2633 . -166) (undo-tree-id2634 . -166) (undo-tree-id2635 . -166) (undo-tree-id2636 . -166) (undo-tree-id2637 . -166) (undo-tree-id2638 . -166) (undo-tree-id2639 . -166) (undo-tree-id2640 . -166) (undo-tree-id2641 . -166) (undo-tree-id2642 . -166) (undo-tree-id2643 . -166) (undo-tree-id2644 . -166) (undo-tree-id2645 . -166) (undo-tree-id2646 . -166) (undo-tree-id2647 . -166) (undo-tree-id2648 . -166) (undo-tree-id2649 . -166) (undo-tree-id2650 . -166) (undo-tree-id2651 . -166) (undo-tree-id2652 . -166) (undo-tree-id2653 . -166) (undo-tree-id2654 . -166) (undo-tree-id2655 . -166) (undo-tree-id2656 . -166) (undo-tree-id2657 . -166) (undo-tree-id2658 . -166) (undo-tree-id2659 . -166) (undo-tree-id2660 . -166) (undo-tree-id2661 . -166) (undo-tree-id2662 . -166) (undo-tree-id2663 . -166) (undo-tree-id2664 . -166) (undo-tree-id2665 . -166) (undo-tree-id2666 . -166) (undo-tree-id2667 . -166) (undo-tree-id2668 . -166) (undo-tree-id2669 . -166) (undo-tree-id2670 . -166) (undo-tree-id2671 . -166) (undo-tree-id2672 . -166) (undo-tree-id2673 . -166) (undo-tree-id2674 . -166) (undo-tree-id2675 . -166) (undo-tree-id2676 . -166) (undo-tree-id2677 . -166) (undo-tree-id2678 . -166) (undo-tree-id2679 . -166) (undo-tree-id2680 . -166) (undo-tree-id2681 . -166) (undo-tree-id2682 . -166) (undo-tree-id2683 . -166) (undo-tree-id2684 . -166) (undo-tree-id2685 . -166) (undo-tree-id2686 . -166) (undo-tree-id2687 . -166) (undo-tree-id2688 . -166) (undo-tree-id2689 . -166) (undo-tree-id2690 . -166) (undo-tree-id2691 . -166) (undo-tree-id2692 . -166) (undo-tree-id2693 . -166) (undo-tree-id2694 . -166) (undo-tree-id2695 . -166) (undo-tree-id2696 . -166) (undo-tree-id2697 . 13) (undo-tree-id2698 . -167) (undo-tree-id2699 . -167) (undo-tree-id2700 . -167) (undo-tree-id2701 . -167) (undo-tree-id2702 . -167) (undo-tree-id2703 . -167) (undo-tree-id2704 . -167) (undo-tree-id2705 . -167) (undo-tree-id2706 . -167) (undo-tree-id2707 . -167) (undo-tree-id2708 . -167) (undo-tree-id2709 . -167) (undo-tree-id2710 . -167) (undo-tree-id2711 . -167) (undo-tree-id2712 . -167) (undo-tree-id2713 . -167) (undo-tree-id2714 . -167) (undo-tree-id2715 . -167) (undo-tree-id2716 . -167) (undo-tree-id2717 . -167) (undo-tree-id2718 . -167) (undo-tree-id2719 . -167) (undo-tree-id2720 . -167) (undo-tree-id2721 . -167) (undo-tree-id2722 . -167) (undo-tree-id2723 . -167) (undo-tree-id2724 . -167) (undo-tree-id2725 . -158) (undo-tree-id2726 . -168) (undo-tree-id2727 . -168) (undo-tree-id2728 . -132) (undo-tree-id2729 . -158) (undo-tree-id2730 . -168) (undo-tree-id2731 . -168) (undo-tree-id2732 . -152) (undo-tree-id2733 . -152) (undo-tree-id2734 . -152) (undo-tree-id2735 . -152) (undo-tree-id2736 . -152) (undo-tree-id2737 . -152) (undo-tree-id2738 . -152) (undo-tree-id2739 . -152) (undo-tree-id2740 . -152) (undo-tree-id2741 . -152) (undo-tree-id2742 . -152) (undo-tree-id2743 . -152) (undo-tree-id2744 . -152) (undo-tree-id2745 . -152) (undo-tree-id2746 . -152) (undo-tree-id2747 . -152) (undo-tree-id2748 . -152) (undo-tree-id2749 . -152) (undo-tree-id2750 . -152) (undo-tree-id2751 . -152) (undo-tree-id2752 . -152) (undo-tree-id2753 . -152) (undo-tree-id2754 . -152) (undo-tree-id2755 . -152) (undo-tree-id2756 . -152) (undo-tree-id2757 . -152) (undo-tree-id2758 . -152) (undo-tree-id2759 . -152) (undo-tree-id2760 . -152) (undo-tree-id2761 . -152) (undo-tree-id2762 . -152) (undo-tree-id2763 . -152) (undo-tree-id2764 . -152) (undo-tree-id2765 . -152) (undo-tree-id2766 . -152) (undo-tree-id2767 . -152) (undo-tree-id2768 . -159) (undo-tree-id2769 . -159) (undo-tree-id2770 . -159) (undo-tree-id2771 . -159) (undo-tree-id2772 . -159) (undo-tree-id2773 . -159) (undo-tree-id2774 . -159) (undo-tree-id2775 . -159) (undo-tree-id2776 . -159) (undo-tree-id2777 . -159) (undo-tree-id2778 . -159) (undo-tree-id2779 . -159) (undo-tree-id2780 . -159) (undo-tree-id2781 . -159) (undo-tree-id2782 . -159) (undo-tree-id2783 . -159) (undo-tree-id2784 . -159) (undo-tree-id2785 . -159) (undo-tree-id2786 . -159) (undo-tree-id2787 . -159) (undo-tree-id2788 . -159) (undo-tree-id2789 . -159) (undo-tree-id2790 . -159) (undo-tree-id2791 . -159) (undo-tree-id2792 . -159) (undo-tree-id2793 . -159) (undo-tree-id2794 . -159) (undo-tree-id2795 . -159) (undo-tree-id2796 . -159) (undo-tree-id2797 . -159) (undo-tree-id2798 . -159) (undo-tree-id2799 . -159) (undo-tree-id2800 . -159) (undo-tree-id2801 . -159) (undo-tree-id2802 . -159) (undo-tree-id2803 . -159) (undo-tree-id2804 . -159) (undo-tree-id2805 . -159) (undo-tree-id2806 . -78) (undo-tree-id2807 . -78) (undo-tree-id2808 . -78) (undo-tree-id2809 . -78) (undo-tree-id2810 . -78) (undo-tree-id2811 . -78) (undo-tree-id2812 . -78) (undo-tree-id2813 . -78) (undo-tree-id2814 . -78) (undo-tree-id2815 . -78) (undo-tree-id2816 . -78) (undo-tree-id2817 . -78) (undo-tree-id2818 . -78) (undo-tree-id2819 . -158) (undo-tree-id2820 . -180) (undo-tree-id2821 . -180) (undo-tree-id2822 . -180) (undo-tree-id2823 . -175) (undo-tree-id2824 . -131) (undo-tree-id2825 . -82) (undo-tree-id2826 . -81) (undo-tree-id2827 . -50) (undo-tree-id2828 . -49) (undo-tree-id2829 . -48) (undo-tree-id2830 . -180) (t 26040 45150 236373 372000)) nil (26040 45412 604186 740000) 0 nil])
([nil nil ((874 . 878)) nil (26040 45412 603989 384000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -49) (undo-tree-id2596 . -1) (undo-tree-id2597 . -1) (undo-tree-id2598 . -1) (undo-tree-id2599 . -1) (undo-tree-id2600 . -1) (undo-tree-id2601 . -1) (undo-tree-id2602 . -1) (undo-tree-id2603 . -1) 50) nil (26040 45412 603987 886000) 0 nil])
([nil nil ((#("
struct ZBarImageScanner {
    scanner: *mut ffi::zbar_image_scanner_s,
}

unsafe impl Send for ZBarImageScanner {}

impl Default for ZBarImageScanner {
    fn default() -> Self {
        let image_scanner = ZBarImageScanner { scanner: unsafe { ffi::zbar_image_scanner_create() } };
        // safe to unwrap here
        unsafe {
            ffi::zbar_image_scanner_set_config(image_scanner.scanner, ffi::zbar_symbol_type_e_ZBAR_NONE, ffi::zbar_config_e_ZBAR_CFG_ENABLE, 1);  
        }
        image_scanner
    }
}
impl Drop for ZBarImageScanner {
    fn drop(&mut self) { unsafe { ffi::zbar_image_scanner_destroy(self.scanner) } }
}

impl ZBarImageScanner {
    fn new() -> Self {
        Self::default()
    }
}" 0 1 (fontified t) 1 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 23 (face font-lock-type-face fontified t) 23 24 (face font-lock-type-face fontified t rear-nonsticky t) 24 25 (fontified t) 25 26 (face (rainbow-delimiters-depth-1-face) fontified t) 26 27 (fontified t) 27 31 (fontified t) 31 32 (face font-lock-variable-name-face fontified t) 32 38 (face font-lock-variable-name-face fontified t) 38 41 (fontified t) 41 44 (face font-lock-keyword-face fontified t) 44 45 (fontified t) 45 48 (face font-lock-constant-face fontified t) 48 50 (fontified t) 50 71 (fontified t) 71 72 (fontified t) 72 73 (face (rainbow-delimiters-depth-1-face) fontified t) 73 74 (fontified t) 74 75 (fontified t) 75 81 (face rust-unsafe fontified t) 81 82 (fontified t) 82 86 (face font-lock-keyword-face fontified t) 86 87 (fontified t) 87 91 (face font-lock-type-face fontified t) 91 92 (fontified t) 92 95 (face font-lock-keyword-face fontified t) 95 96 (fontified t) 96 112 (face font-lock-type-face fontified t) 112 113 (fontified t) 113 114 (face (rainbow-delimiters-depth-1-face) fontified t) 114 115 (face (rainbow-delimiters-depth-1-face) fontified t) 115 117 (fontified t) 117 121 (face font-lock-keyword-face fontified t) 121 122 (fontified t) 122 129 (face font-lock-type-face fontified t) 129 130 (fontified t) 130 133 (face font-lock-keyword-face fontified t) 133 134 (fontified t) 134 150 (face font-lock-type-face fontified t) 150 151 (fontified t) 151 152 (face (rainbow-delimiters-depth-1-face) fontified t) 152 157 (fontified t) 157 159 (face font-lock-keyword-face fontified t) 159 160 (fontified t) 160 167 (face font-lock-function-name-face fontified t) 167 168 (face (rainbow-delimiters-depth-2-face) fontified t) 168 169 (face (rainbow-delimiters-depth-2-face) fontified t) 169 171 (fontified t) 171 172 (fontified t syntax-table (1)) 172 173 (fontified t) 173 177 (face font-lock-type-face fontified t) 177 178 (fontified t) 178 179 (face (rainbow-delimiters-depth-2-face) fontified t) 179 180 (fontified t) 180 188 (fontified t) 188 191 (face font-lock-keyword-face fontified t) 191 192 (fontified t) 192 198 (face font-lock-variable-name-face fontified t) 198 205 (face font-lock-variable-name-face fontified t) 205 208 (fontified t) 208 224 (face font-lock-type-face fontified t) 224 225 (fontified t) 225 226 (face (rainbow-delimiters-depth-3-face) fontified t) 226 227 (fontified t) 227 234 (face font-lock-variable-name-face fontified t) 234 236 (fontified t) 236 242 (face rust-unsafe fontified t) 242 243 (fontified t) 243 244 (face (rainbow-delimiters-depth-4-face) fontified t) 244 245 (fontified t) 245 248 (face font-lock-constant-face fontified t) 248 275 (fontified t) 275 276 (face (rainbow-delimiters-depth-5-face) fontified t) 276 277 (face (rainbow-delimiters-depth-5-face) fontified t) 277 278 (fontified t) 278 279 (face (rainbow-delimiters-depth-4-face) fontified t) 279 280 (fontified t) 280 281 (face (rainbow-delimiters-depth-3-face) fontified t) 281 283 (fontified t) 283 291 (fontified t) 291 294 (face font-lock-comment-delimiter-face fontified t) 294 314 (face font-lock-comment-face fontified t) 314 322 (fontified t) 322 328 (face rust-unsafe fontified t) 328 329 (fontified t) 329 330 (face (rainbow-delimiters-depth-3-face) fontified t) 330 331 (fontified t) 331 343 (fontified t) 343 346 (face font-lock-constant-face fontified t) 346 348 (fontified t) 348 377 (fontified t) 377 378 (face (rainbow-delimiters-depth-4-face) fontified t) 378 391 (fontified t) 391 392 (fontified t) 392 399 (fontified t) 399 401 (fontified t) 401 404 (face font-lock-constant-face fontified t) 404 406 (fontified t) 406 434 (fontified t) 434 436 (fontified t) 436 439 (face font-lock-constant-face fontified t) 439 441 (fontified t) 441 470 (fontified t) 470 473 (fontified t) 473 474 (face (rainbow-delimiters-depth-4-face) fontified t) 474 475 (fontified t rear-nonsticky t) 475 478 (fontified t) 478 486 (fontified t) 486 487 (face (rainbow-delimiters-depth-3-face) fontified t) 487 488 (fontified t) 488 496 (fontified t) 496 509 (fontified t) 509 510 (fontified t) 510 514 (fontified t) 514 515 (face (rainbow-delimiters-depth-2-face) fontified t) 515 516 (fontified t) 516 517 (face (rainbow-delimiters-depth-1-face) fontified t) 517 518 (fontified t) 518 522 (face font-lock-keyword-face fontified t) 522 523 (fontified t) 523 527 (face font-lock-type-face fontified t) 527 528 (fontified t) 528 531 (face font-lock-keyword-face fontified t) 531 532 (fontified t) 532 548 (face font-lock-type-face fontified t) 548 549 (fontified t) 549 550 (face (rainbow-delimiters-depth-1-face) fontified t) 550 555 (fontified t) 555 557 (face font-lock-keyword-face fontified t) 557 558 (fontified t) 558 562 (face font-lock-function-name-face fontified t) 562 563 (face (rainbow-delimiters-depth-2-face) fontified t) 563 564 (face rust-ampersand-face fontified t) 564 567 (face font-lock-keyword-face fontified t) 567 568 (fontified t) 568 572 (face font-lock-keyword-face fontified t) 572 573 (face (rainbow-delimiters-depth-2-face) fontified t) 573 574 (fontified t) 574 575 (face (rainbow-delimiters-depth-2-face) fontified t) 575 576 (fontified t) 576 582 (face rust-unsafe fontified t) 582 583 (fontified t) 583 584 (face (rainbow-delimiters-depth-3-face) fontified t) 584 585 (fontified t) 585 588 (face font-lock-constant-face fontified t) 588 616 (fontified t) 616 617 (face (rainbow-delimiters-depth-4-face) fontified t) 617 621 (face font-lock-keyword-face fontified t) 621 629 (fontified t) 629 630 (face (rainbow-delimiters-depth-4-face) fontified t) 630 631 (fontified t) 631 632 (face (rainbow-delimiters-depth-3-face) fontified t) 632 633 (fontified t) 633 634 (face (rainbow-delimiters-depth-2-face) fontified t) 634 635 (fontified t) 635 636 (face (rainbow-delimiters-depth-1-face) fontified t rear-nonsticky t) 636 637 (fontified t) 637 638 (fontified t) 638 642 (face font-lock-keyword-face fontified t) 642 643 (fontified t) 643 659 (face font-lock-type-face fontified t) 659 660 (fontified t) 660 661 (face (rainbow-delimiters-depth-1-face) fontified t) 661 662 (fontified t) 662 666 (fontified t) 666 668 (face font-lock-keyword-face fontified t) 668 669 (fontified t) 669 672 (face font-lock-function-name-face fontified t) 672 673 (face (rainbow-delimiters-depth-2-face) fontified t) 673 674 (face (rainbow-delimiters-depth-2-face) fontified t) 674 676 (fontified t) 676 677 (syntax-table (1) fontified t) 677 678 (fontified t) 678 682 (face font-lock-type-face fontified t) 682 683 (fontified t) 683 684 (face (rainbow-delimiters-depth-2-face) fontified t) 684 685 (fontified t) 685 693 (fontified t) 693 697 (face font-lock-type-face fontified t) 697 699 (fontified t) 699 706 (fontified t) 706 707 (face (rainbow-delimiters-depth-3-face) fontified t) 707 708 (face (rainbow-delimiters-depth-3-face) fontified t) 708 709 (fontified t) 709 713 (fontified t) 713 714 (face (rainbow-delimiters-depth-2-face) fontified t) 714 715 (fontified t) 715 716 (face (rainbow-delimiters-depth-1-face) fontified t)) . 48) (undo-tree-id2448 . -314) (undo-tree-id2449 . -716) (undo-tree-id2450 . -716) (undo-tree-id2451 . -1) (undo-tree-id2452 . -73) (undo-tree-id2453 . -693) (undo-tree-id2454 . -322) (undo-tree-id2455 . -322) (undo-tree-id2456 . -322) (undo-tree-id2457 . -116) (undo-tree-id2458 . -322) (undo-tree-id2459 . -75) (undo-tree-id2460 . -341) (undo-tree-id2461 . -1) (undo-tree-id2462 . -1) (undo-tree-id2463 . -1) (undo-tree-id2464 . -2) (undo-tree-id2465 . -29) (undo-tree-id2466 . -73) (undo-tree-id2467 . -74) (undo-tree-id2468 . -80) (undo-tree-id2469 . -80) (undo-tree-id2470 . -80) (undo-tree-id2471 . -80) (undo-tree-id2472 . -80) (undo-tree-id2473 . -81) (undo-tree-id2474 . -81) (undo-tree-id2475 . -81) (undo-tree-id2476 . -81) (undo-tree-id2477 . -81) (undo-tree-id2478 . -81) (undo-tree-id2479 . -81) (undo-tree-id2480 . -116) (undo-tree-id2481 . -153) (undo-tree-id2482 . -314) (undo-tree-id2483 . -314) (undo-tree-id2484 . -314) (undo-tree-id2485 . -1) (undo-tree-id2486 . -716) (undo-tree-id2487 . -716) (undo-tree-id2488 . -716) (undo-tree-id2489 . -716) (undo-tree-id2490 . -716) (undo-tree-id2491 . -716) (undo-tree-id2492 . -716) (undo-tree-id2493 . -716) (undo-tree-id2494 . -716) (undo-tree-id2495 . -716) (undo-tree-id2496 . -716) (undo-tree-id2497 . -716) (undo-tree-id2498 . -716) (undo-tree-id2499 . -716) (undo-tree-id2500 . -716) (undo-tree-id2501 . -716) (undo-tree-id2502 . -716) (undo-tree-id2503 . -716) (undo-tree-id2504 . -716) (undo-tree-id2505 . -716) (undo-tree-id2506 . -716) (undo-tree-id2507 . -716) (undo-tree-id2508 . -716) (undo-tree-id2509 . -716) (undo-tree-id2510 . -716) (undo-tree-id2511 . -716) (undo-tree-id2512 . -716) (undo-tree-id2513 . -716) (undo-tree-id2514 . -716) (undo-tree-id2515 . -716) (undo-tree-id2516 . -716) (undo-tree-id2517 . -716) (undo-tree-id2518 . -716) (undo-tree-id2519 . -716) (undo-tree-id2520 . -716) (undo-tree-id2521 . -716) (undo-tree-id2522 . -716) (undo-tree-id2523 . -716) (undo-tree-id2524 . -716) (undo-tree-id2525 . -716) (undo-tree-id2526 . -716) (undo-tree-id2527 . -716) (undo-tree-id2528 . -716) (undo-tree-id2529 . -716) (undo-tree-id2530 . -716) (undo-tree-id2531 . -716) (undo-tree-id2532 . -716) (undo-tree-id2533 . -716) (undo-tree-id2534 . -716) (undo-tree-id2535 . -716) (undo-tree-id2536 . -716) (undo-tree-id2537 . -716) (undo-tree-id2538 . -716) (undo-tree-id2539 . -716) (undo-tree-id2540 . -716) (undo-tree-id2541 . -716) (undo-tree-id2542 . -716) (undo-tree-id2543 . -1) (undo-tree-id2544 . -716) (undo-tree-id2545 . -714) (undo-tree-id2546 . -714) (undo-tree-id2547 . -714) (undo-tree-id2548 . -714) (undo-tree-id2549 . -714) (undo-tree-id2550 . -714) (undo-tree-id2551 . -714) (undo-tree-id2552 . -714) (undo-tree-id2553 . -714) (undo-tree-id2554 . -714) (undo-tree-id2555 . -714) (undo-tree-id2556 . -714) (undo-tree-id2557 . -714) (undo-tree-id2558 . -714) (undo-tree-id2559 . -714) (undo-tree-id2560 . -714) (undo-tree-id2561 . -714) (undo-tree-id2562 . -1) (undo-tree-id2563 . -1) (undo-tree-id2564 . -1) (undo-tree-id2565 . -1) (undo-tree-id2566 . -1) (undo-tree-id2567 . -1) (undo-tree-id2568 . -1) (undo-tree-id2569 . -1) (undo-tree-id2570 . -1) (undo-tree-id2571 . -1) (undo-tree-id2572 . -716) (undo-tree-id2573 . -716) (undo-tree-id2574 . -716) (undo-tree-id2575 . -713) (undo-tree-id2576 . -641) (undo-tree-id2577 . -637) (undo-tree-id2578 . -636) (undo-tree-id2579 . -554) (undo-tree-id2580 . -520) (undo-tree-id2581 . -517) (undo-tree-id2582 . -512) (undo-tree-id2583 . -479) (undo-tree-id2584 . -455) (undo-tree-id2585 . -315) (undo-tree-id2586 . -182) (undo-tree-id2587 . -116) (undo-tree-id2588 . -77) (undo-tree-id2589 . -74) (undo-tree-id2590 . -73) (undo-tree-id2591 . -29) (undo-tree-id2592 . -2) (undo-tree-id2593 . -1) (undo-tree-id2594 . -716) (undo-tree-id2595 . -716)) nil (26040 45412 603977 29000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -48) (undo-tree-id2446 . -1) (undo-tree-id2447 . -1) 49) nil (26040 45412 603831 176000) 0 nil])
([nil nil ((160 . 174) (t 26040 45412 616389 361000)) nil (26040 45436 601365 506000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -172) (undo-tree-id2873 . -1) (#("-" 0 1 (fontified t)) . -173) (undo-tree-id2874 . -1) 174) nil (26040 45436 601364 562000) 0 nil])
([nil nil ((172 . 174)) nil (26040 45436 601362 413000) 0 nil])
([nil nil ((174 . 176)) nil (26040 45436 601361 799000) 0 nil])
([nil nil ((176 . 178)) nil (26040 45436 601361 98000) 0 nil])
([nil nil ((#("z" 0 1 (fontified t)) . -174) (undo-tree-id2869 . -1) (#("b" 0 1 (fontified t)) . -175) (undo-tree-id2870 . -1) (#("a" 0 1 (fontified t)) . -176) (undo-tree-id2871 . -1) (#("r" 0 1 (fontified t)) . -177) (undo-tree-id2872 . -1) 178) nil (26040 45436 601359 820000) 0 nil])
([nil nil ((174 . 182)) nil (26040 45436 601355 650000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -180) (undo-tree-id2867 . -1) (#("r" 0 1 (fontified t)) . -181) (undo-tree-id2868 . -1) 182) nil (26040 45436 601354 730000) 0 nil])
([nil nil ((180 . 184)) nil (26040 45436 601352 413000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -183) (undo-tree-id2866 . -1) 184) nil (26040 45436 601351 741000) 0 nil])
([nil nil ((183 . 184)) nil (26040 45436 601349 994000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -180) (undo-tree-id2862 . -1) (#("b" 0 1 (fontified t)) . -181) (undo-tree-id2863 . -1) (#("r" 0 1 (fontified t)) . -182) (undo-tree-id2864 . -1) (#("_" 0 1 (fontified t)) . -183) (undo-tree-id2865 . -1) 184) nil (26040 45436 601348 909000) 0 nil])
([nil nil ((180 . 196)) nil (26040 45436 601345 125000) 0 nil])
([nil nil ((196 . 197)) nil (26040 45436 601344 424000) 0 nil])
([nil nil ((apply yas--snippet-revive 179 206 #s(yas--snippet nil nil #s(yas--exit 206 nil) 22 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 206 nil) 22 nil nil nil nil)) (179 . 206) (#("zbar_image_scanner_create()$0" 0 29 (fontified nil)) . 179) (179 . 208) (#("zbar_image_scanner" 0 18 (fontified nil)) . 179) (179 . 197) (#("zbar_image_scanner_create()" 0 27 (fontified nil)) . -179) (179 . 206) (#("zbar_image_scanner" 0 18 (fontified t)) . -179) (undo-tree-id2831 . -18) (undo-tree-id2832 . -5) (undo-tree-id2833 . -6) (undo-tree-id2834 . -6) (undo-tree-id2835 . -7) (undo-tree-id2836 . -7) (undo-tree-id2837 . -8) (undo-tree-id2838 . -8) (undo-tree-id2839 . -9) (undo-tree-id2840 . -9) (undo-tree-id2841 . -10) (undo-tree-id2842 . -10) (undo-tree-id2843 . -10) (undo-tree-id2844 . -10) (undo-tree-id2845 . -11) (undo-tree-id2846 . -11) (undo-tree-id2847 . -11) (undo-tree-id2848 . -12) (undo-tree-id2849 . -12) (undo-tree-id2850 . -13) (undo-tree-id2851 . -13) (undo-tree-id2852 . -14) (undo-tree-id2853 . -14) (undo-tree-id2854 . -15) (undo-tree-id2855 . -15) (undo-tree-id2856 . -16) (undo-tree-id2857 . -16) (undo-tree-id2858 . -17) (undo-tree-id2859 . -17) (undo-tree-id2860 . -18) (undo-tree-id2861 . -18) 197) nil (26040 45436 601340 817000) 0 nil])
([nil nil ((206 . 207)) nil (26040 45436 601308 78000) 0 nil])
([nil nil ((174 . 175) (t 26040 45436 646390 810000)) nil (26040 45452 355005 833000) 0 nil])
([nil nil ((174 . 175)) nil (26040 45452 355004 683000) 0 nil])
([nil nil ((175 . 178)) nil (26040 45452 355004 61000) 0 nil])
([nil nil ((apply yas--snippet-revive 174 198 #s(yas--snippet nil nil #s(yas--exit 191 nil) 23 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 191 nil) 23 nil nil nil nil)) (174 . 198) (#("unsafe {
        $0
    };" 0 26 (fontified nil)) . 174) (194 . 198) (183 . 191) (#("    " 0 4 (fontified nil)) . 183) (174 . 192) (#("unsa" 0 4 (fontified nil)) . 174) (174 . 178) (#("unsafe" 0 6 (fontified nil)) . -174) (174 . 180) (#("unsa" 0 4 (fontified t)) . -174) (undo-tree-id2931 . -4) (undo-tree-id2932 . -4) (undo-tree-id2933 . -1) (undo-tree-id2934 . -1) (undo-tree-id2935 . -1) (undo-tree-id2936 . -1) (undo-tree-id2937 . -1) (undo-tree-id2938 . -1) (undo-tree-id2939 . -1) (undo-tree-id2940 . -1) (undo-tree-id2941 . -1) (undo-tree-id2942 . -2) (undo-tree-id2943 . -2) (undo-tree-id2944 . -2) (undo-tree-id2945 . -3) (undo-tree-id2946 . -3) (undo-tree-id2947 . -4) (undo-tree-id2948 . -4) (undo-tree-id2949 . -4) (undo-tree-id2950 . -4) (undo-tree-id2951 . -4) (undo-tree-id2952 . -4) (undo-tree-id2953 . -4) (undo-tree-id2954 . -4) 178) nil (26040 45452 355001 133000) 0 nil])
([nil nil ((#("ffi::zbar_image_scanner_create();" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t) 5 30 (fontified t) 30 31 (face (rainbow-delimiters-depth-2-face) fontified t) 31 32 (face (rainbow-delimiters-depth-2-face) fontified t) 32 33 (fontified t)) . 199) (undo-tree-id2881 . -5) (undo-tree-id2882 . -5) (undo-tree-id2883 . -5) (undo-tree-id2884 . -5) (undo-tree-id2885 . -5) (undo-tree-id2886 . -5) (undo-tree-id2887 . -5) (undo-tree-id2888 . -5) (undo-tree-id2889 . -5) (undo-tree-id2890 . -5) (undo-tree-id2891 . -5) (undo-tree-id2892 . -5) (undo-tree-id2893 . -5) (undo-tree-id2894 . -5) (undo-tree-id2895 . -5) (undo-tree-id2896 . -5) (undo-tree-id2897 . -5) (undo-tree-id2898 . -5) (undo-tree-id2899 . -5) (undo-tree-id2900 . -5) (undo-tree-id2901 . -5) (undo-tree-id2902 . -5) (undo-tree-id2903 . -5) (undo-tree-id2904 . -5) (undo-tree-id2905 . -5) (undo-tree-id2906 . -5) (undo-tree-id2907 . -5) (undo-tree-id2908 . -5) (undo-tree-id2909 . -5) (undo-tree-id2910 . -5) (undo-tree-id2911 . -33) (undo-tree-id2912 . -33) (undo-tree-id2913 . -33) (undo-tree-id2914 . -33) (undo-tree-id2915 . -33) (undo-tree-id2916 . -33) (undo-tree-id2917 . -33) (undo-tree-id2918 . -33) (undo-tree-id2919 . -33) (undo-tree-id2920 . -33) (undo-tree-id2921 . -33) (undo-tree-id2922 . -33) (undo-tree-id2923 . -33) (undo-tree-id2924 . -33) (undo-tree-id2925 . -33) (undo-tree-id2926 . -33) (undo-tree-id2927 . -33) (undo-tree-id2928 . -33) (undo-tree-id2929 . -33) (undo-tree-id2930 . -33)) nil (26040 45452 354759 385000) 0 nil])
([nil nil ((nil rear-nonsticky nil 222 . 223) (nil fontified nil 222 . 223) (nil fontified nil 221 . 222) (nil fontified nil 220 . 221) (nil fontified nil 195 . 220) (nil fontified nil 193 . 195) (nil fontified nil 190 . 193) (190 . 223)) nil (26040 45452 354726 430000) 0 nil])
([nil nil ((#(";" 0 1 (rear-nonsticky t fontified t)) . -222) (undo-tree-id2875 . -1) (undo-tree-id2876 . -1) (undo-tree-id2877 . -1) (undo-tree-id2878 . -1) (undo-tree-id2879 . -1) (undo-tree-id2880 . -1) 223) nil (26040 45452 354721 815000) 0 nil])
([nil nil ((#("scanner = " 0 7 (face font-lock-variable-name-face fontified t) 7 10 (fontified t)) . -164) (undo-tree-id3017 . -10) (undo-tree-id3018 . -10) (undo-tree-id3019 . -10) (undo-tree-id3020 . -10) (undo-tree-id3021 . -10) (undo-tree-id3022 . -10) (undo-tree-id3023 . -10) (undo-tree-id3024 . -10) (undo-tree-id3025 . -10) (undo-tree-id3026 . -10) (undo-tree-id3027 . -10) (undo-tree-id3028 . -10) (undo-tree-id3029 . -10) (undo-tree-id3030 . -10) (undo-tree-id3031 . -10) (undo-tree-id3032 . -10) (undo-tree-id3033 . -10) (undo-tree-id3034 . -10) (undo-tree-id3035 . -10) (undo-tree-id3036 . -10) (undo-tree-id3037 . -10) (undo-tree-id3038 . -10) (undo-tree-id3039 . -10) (undo-tree-id3040 . -10) (undo-tree-id3041 . -10) (undo-tree-id3042 . -10) (undo-tree-id3043 . -10) (undo-tree-id3044 . -10) (undo-tree-id3045 . -10) (undo-tree-id3046 . -10) (undo-tree-id3047 . -10) (undo-tree-id3048 . -10) 174 (t 26040 45452 399725 107000)) nil (26040 45498 296312 118000) 0 nil])
([nil nil ((#("let " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -160) (undo-tree-id2983 . -4) (undo-tree-id2984 . -4) (undo-tree-id2985 . -4) (undo-tree-id2986 . -4) (undo-tree-id2987 . -4) (undo-tree-id2988 . -4) (undo-tree-id2989 . -4) (undo-tree-id2990 . -4) (undo-tree-id2991 . -4) (undo-tree-id2992 . -4) (undo-tree-id2993 . -4) (undo-tree-id2994 . -4) (undo-tree-id2995 . -4) (undo-tree-id2996 . -4) (undo-tree-id2997 . -4) (undo-tree-id2998 . -4) (undo-tree-id2999 . -4) (undo-tree-id3000 . -4) (undo-tree-id3001 . -4) (undo-tree-id3002 . -4) (undo-tree-id3003 . -4) (undo-tree-id3004 . -4) (undo-tree-id3005 . -4) (undo-tree-id3006 . -4) (undo-tree-id3007 . -4) (undo-tree-id3008 . -4) (undo-tree-id3009 . -4) (undo-tree-id3010 . -4) (undo-tree-id3011 . -4) (undo-tree-id3012 . -4) (undo-tree-id3013 . -4) (undo-tree-id3014 . -4) (undo-tree-id3015 . -4) (undo-tree-id3016 . -4) 164) nil (26040 45498 296289 553000) 0 nil])
([nil nil ((169 . 177) (#("       " 0 7 (fontified t)) . 169) (undo-tree-id2969 . -7) (undo-tree-id2970 . -4) (undo-tree-id2971 . -4) (undo-tree-id2972 . -7) (undo-tree-id2973 . -4) (undo-tree-id2974 . -4) (undo-tree-id2975 . -4) (undo-tree-id2976 . -4) (undo-tree-id2977 . -4) (undo-tree-id2978 . -4) (undo-tree-id2979 . -4) (undo-tree-id2980 . -4) (undo-tree-id2981 . -4) (undo-tree-id2982 . -4) 173) nil (26040 45498 296266 302000) 0 nil])
([nil nil ((177 . 180)) nil (26040 45498 296255 784000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -179) (undo-tree-id2955 . -1) (undo-tree-id2956 . -1) (undo-tree-id2957 . -1) (undo-tree-id2958 . -1) (undo-tree-id2959 . -1) (undo-tree-id2960 . -1) (undo-tree-id2961 . -1) (undo-tree-id2962 . -1) (undo-tree-id2963 . -1) (undo-tree-id2964 . -1) (undo-tree-id2965 . -1) (undo-tree-id2966 . -1) (undo-tree-id2967 . -1) (undo-tree-id2968 . -1) 180) nil (26040 45498 296254 156000) 0 nil])
([nil nil ((190 . 191) (222 . 223) (179 . 179) (179 . 190)) nil (26040 45498 296237 565000) 0 nil])
([nil nil ((225 . 233) (#(" " 0 1 (fontified nil)) . 225) (224 . 225)) nil (26040 45498 296232 447000) 0 nil])
([nil nil ((233 . 238) (t 26040 45498 309727 925000)) nil (26040 45527 939480 371000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-variable-name-face fontified t)) . -237) (undo-tree-id3205 . -1) (undo-tree-id3206 . -1) (undo-tree-id3207 . -1) 238) nil (26040 45527 939479 435000) 0 nil])
([nil nil ((237 . 247)) nil (26040 45527 939476 751000) 0 nil])
([nil nil ((#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -243) (undo-tree-id3139 . -1) (undo-tree-id3140 . -1) (undo-tree-id3141 . -1) (undo-tree-id3142 . -1) (undo-tree-id3143 . -1) (undo-tree-id3144 . -1) (undo-tree-id3145 . -1) (undo-tree-id3146 . -1) (undo-tree-id3147 . -1) (undo-tree-id3148 . -1) (undo-tree-id3149 . -1) (undo-tree-id3150 . -1) (undo-tree-id3151 . -1) (undo-tree-id3152 . -1) (undo-tree-id3153 . -1) (undo-tree-id3154 . -1) (undo-tree-id3155 . -1) (undo-tree-id3156 . -1) (undo-tree-id3157 . -1) (undo-tree-id3158 . -1) (undo-tree-id3159 . -1) (undo-tree-id3160 . -1) (undo-tree-id3161 . -1) (undo-tree-id3162 . -1) (#("m" 0 1 (face font-lock-variable-name-face fontified t)) . -244) (undo-tree-id3163 . -1) (undo-tree-id3164 . -1) (undo-tree-id3165 . -1) (undo-tree-id3166 . -1) (undo-tree-id3167 . -1) (undo-tree-id3168 . -1) (undo-tree-id3169 . -1) (undo-tree-id3170 . -1) (undo-tree-id3171 . -1) (undo-tree-id3172 . -1) (undo-tree-id3173 . -1) (undo-tree-id3174 . -1) (undo-tree-id3175 . -1) (undo-tree-id3176 . -1) (undo-tree-id3177 . -1) (undo-tree-id3178 . -1) (undo-tree-id3179 . -1) (undo-tree-id3180 . -1) (undo-tree-id3181 . -1) (undo-tree-id3182 . -1) (#("g" 0 1 (face font-lock-variable-name-face fontified t)) . -245) (undo-tree-id3183 . -1) (undo-tree-id3184 . -1) (undo-tree-id3185 . -1) (undo-tree-id3186 . -1) (undo-tree-id3187 . -1) (undo-tree-id3188 . -1) (undo-tree-id3189 . -1) (undo-tree-id3190 . -1) (undo-tree-id3191 . -1) (undo-tree-id3192 . -1) (undo-tree-id3193 . -1) (undo-tree-id3194 . -1) (undo-tree-id3195 . -1) (undo-tree-id3196 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -246) (undo-tree-id3197 . -1) (undo-tree-id3198 . -1) (undo-tree-id3199 . -1) (undo-tree-id3200 . -1) (undo-tree-id3201 . -1) (undo-tree-id3202 . -1) (undo-tree-id3203 . -1) (undo-tree-id3204 . -1) 247) nil (26040 45527 939473 756000) 0 nil])
([nil nil ((243 . 250)) nil (26040 45527 939432 638000) 0 nil])
([nil nil ((250 . 251)) nil (26040 45527 939432 109000) 0 nil])
([nil nil ((#("z" 0 1 (fontified t)) . -250) (undo-tree-id3133 . -1) (undo-tree-id3134 . -1) (undo-tree-id3135 . -1) (undo-tree-id3136 . -1) (undo-tree-id3137 . -1) (undo-tree-id3138 . -1) 251) nil (26040 45527 939431 187000) 0 nil])
([nil nil ((250 . 252)) nil (26040 45527 939426 406000) 0 nil])
([nil nil ((250 . 253) (#("ff" 0 2 (fontified nil)) . 250) (250 . 252) (#("ffi" 0 3 (fontified nil)) . -250) (250 . 253) (#("ff" 0 2 (fontified t)) . -250) (undo-tree-id3125 . -2) (undo-tree-id3126 . -1) (undo-tree-id3127 . -1) (undo-tree-id3128 . -1) (undo-tree-id3129 . -2) (undo-tree-id3130 . -2) (undo-tree-id3131 . -2) (undo-tree-id3132 . -2) 252) nil (26040 45527 939425 255000) 0 nil])
([nil nil ((253 . 258)) nil (26040 45527 939418 932000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -256) (undo-tree-id3114 . -1) (undo-tree-id3115 . -1) (undo-tree-id3116 . -1) (undo-tree-id3117 . -1) (undo-tree-id3118 . -1) (undo-tree-id3119 . -1) (undo-tree-id3120 . -1) (undo-tree-id3121 . -1) (#("b" 0 1 (fontified t)) . -257) (undo-tree-id3122 . -1) (undo-tree-id3123 . -1) (undo-tree-id3124 . -1) 258) nil (26040 45527 939417 709000) 0 nil])
([nil nil ((256 . 260)) nil (26040 45527 939409 964000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -259) (undo-tree-id3110 . -1) (undo-tree-id3111 . -1) (undo-tree-id3112 . -1) (undo-tree-id3113 . -1) 260) nil (26040 45527 939409 169000) 0 nil])
([nil nil ((259 . 260)) nil (26040 45527 939405 866000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -259) (undo-tree-id3107 . -1) (undo-tree-id3108 . -1) (undo-tree-id3109 . -1) 260) nil (26040 45527 939405 108000) 0 nil])
([nil nil ((259 . 260)) nil (26040 45527 939402 583000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -259) (undo-tree-id3101 . -1) (undo-tree-id3102 . -1) (undo-tree-id3103 . -1) (undo-tree-id3104 . -1) (undo-tree-id3105 . -1) (undo-tree-id3106 . -1) 260) nil (26040 45527 939401 715000) 0 nil])
([nil nil ((259 . 265)) nil (26040 45527 939397 43000) 0 nil])
([nil nil ((apply yas--snippet-revive 255 274 #s(yas--snippet nil nil #s(yas--exit 274 nil) 24 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 274 nil) 24 nil nil nil nil)) (255 . 274) (#("zbar_image_create()$0" 0 21 (fontified nil)) . 255) (255 . 276) (#("zbar_image" 0 10 (fontified nil)) . 255) (255 . 265) (#("zbar_image_create()" 0 19 (fontified nil)) . -255) (255 . 274) (#("zbar_image" 0 10 (fontified t)) . -255) (undo-tree-id3049 . -10) (undo-tree-id3050 . -1) (undo-tree-id3051 . -1) (undo-tree-id3052 . -1) (undo-tree-id3053 . -1) (undo-tree-id3054 . -1) (undo-tree-id3055 . -1) (undo-tree-id3056 . -1) (undo-tree-id3057 . -1) (undo-tree-id3058 . -1) (undo-tree-id3059 . -1) (undo-tree-id3060 . -1) (undo-tree-id3061 . -1) (undo-tree-id3062 . -2) (undo-tree-id3063 . -2) (undo-tree-id3064 . -3) (undo-tree-id3065 . -3) (undo-tree-id3066 . -4) (undo-tree-id3067 . -4) (undo-tree-id3068 . -4) (undo-tree-id3069 . -4) (undo-tree-id3070 . -4) (undo-tree-id3071 . -4) (undo-tree-id3072 . -4) (undo-tree-id3073 . -4) (undo-tree-id3074 . -4) (undo-tree-id3075 . -4) (undo-tree-id3076 . -4) (undo-tree-id3077 . -4) (undo-tree-id3078 . -4) (undo-tree-id3079 . -4) (undo-tree-id3080 . -4) (undo-tree-id3081 . -4) (undo-tree-id3082 . -4) (undo-tree-id3083 . -4) (undo-tree-id3084 . -5) (undo-tree-id3085 . -5) (undo-tree-id3086 . -5) (undo-tree-id3087 . -6) (undo-tree-id3088 . -6) (undo-tree-id3089 . -6) (undo-tree-id3090 . -7) (undo-tree-id3091 . -7) (undo-tree-id3092 . -8) (undo-tree-id3093 . -8) (undo-tree-id3094 . -9) (undo-tree-id3095 . -9) (undo-tree-id3096 . -10) (undo-tree-id3097 . -10) (undo-tree-id3098 . -10) (undo-tree-id3099 . -10) (undo-tree-id3100 . -10) 265) nil (26040 45527 939393 109000) 0 nil])
([nil nil ((274 . 275)) nil (26040 45527 939347 706000) 0 nil])
([nil nil ((275 . 284) (t 26040 45527 986396 408000)) nil (26040 45835 808856 260000) 0 nil])
([nil nil ((284 . 285)) nil (26040 45835 808855 503000) 0 nil])
([nil nil ((#("z" 0 1 (fontified t)) . -284) (undo-tree-id3259 . -1) 285) nil (26040 45835 808854 763000) 0 nil])
([nil nil ((284 . 288)) nil (26040 45835 808853 513000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -284) (undo-tree-id3255 . -1) (#("e" 0 1 (fontified t)) . -285) (undo-tree-id3256 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -286) (undo-tree-id3257 . -1) (#(" " 0 1 (fontified t)) . -287) (undo-tree-id3258 . -1) 288) nil (26040 45835 808852 438000) 0 nil])
([nil nil ((284 . 286)) nil (26040 45835 808848 873000) 0 nil])
([nil nil ((284 . 287) (#("ff" 0 2 (fontified nil)) . 284) (284 . 286) (#("ffi" 0 3 (fontified nil)) . -284) (284 . 287) (#("ff" 0 2 (fontified t)) . -284) (undo-tree-id3254 . -2) 286) nil (26040 45835 808847 886000) 0 nil])
([nil nil ((287 . 290)) nil (26040 45835 808845 505000) 0 nil])
([nil nil ((#("Z" 0 1 (face font-lock-type-face fontified t)) . -289) (undo-tree-id3253 . -1) 290) nil (26040 45835 808844 659000) 0 nil])
([nil nil ((289 . 296)) nil (26040 45835 808843 381000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -293) (undo-tree-id3250 . -1) (#("i" 0 1 (fontified t)) . -294) (undo-tree-id3251 . -1) (#("u" 0 1 (fontified t)) . -295) (undo-tree-id3252 . -1) 296) nil (26040 45835 808842 392000) 0 nil])
([nil nil ((293 . 301)) nil (26040 45835 808839 543000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -299) (undo-tree-id3248 . -1) (#(":" 0 1 (fontified t)) . -300) (undo-tree-id3249 . -1) 301) nil (26040 45835 808838 704000) 0 nil])
([nil nil ((299 . 300)) nil (26040 45835 808836 656000) 0 nil])
([nil nil ((300 . 301)) nil (26040 45835 808836 174000) 0 nil])
([nil nil ((#("z" 0 1 (fontified t)) . -300) (undo-tree-id3247 . -1) 301) nil (26040 45835 808835 425000) 0 nil])
([nil nil ((300 . 303)) nil (26040 45835 808834 63000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 311 321 nil nil nil t #s(yas--field 2 323 329 nil nil nil nil #s(yas--exit 330 nil))) #s(yas--field 2 323 329 nil nil nil nil #s(yas--exit 330 nil))) #s(yas--exit 330 nil) 25 nil #s(yas--field 1 311 321 nil nil nil t #s(yas--field 2 323 329 nil nil nil nil #s(yas--exit 330 nil))) nil nil)) (289 . 325) (#("zbar_image_set_format(${1:image}, ${2:format})$0" 0 48 (fontified nil)) . 289) (289 . 337) (#("zbar_image_set" 0 14 (fontified nil)) . 289) (289 . 303) (#("zbar_image_set_format(…)" 0 24 (fontified nil)) . -289) (289 . 313) (#("zbar_image_set" 0 14 (fontified t)) . -289) (undo-tree-id3246 . -14) 303) nil (26040 45835 808832 897000) 0 nil])
([nil nil ((#("image" 0 5 (fontified nil)) . 312) (311 . 312)) nil (26040 45835 808830 316000) 0 nil])
([nil nil ((311 . 321) (#("z" 0 1 (fontified nil)) . 311) (311 . 312) (#("zbar_image" 0 10 (fontified nil)) . -311) (311 . 321) (#("z" 0 1 (fontified t)) . -311) (undo-tree-id3244 . -1) (undo-tree-id3245 . -1) 312) nil (26040 45835 808828 971000) 0 nil])
([nil nil ((apply yas--snippet-revive 289 330 #s(yas--snippet nil (#s(yas--field 1 311 321 nil nil nil t #s(yas--field 2 323 329 nil nil nil nil #s(yas--exit 330 nil))) #s(yas--field 2 323 329 nil nil nil nil #s(yas--exit 330 nil))) #s(yas--exit 330 nil) 25 nil #s(yas--field 1 311 321 nil nil nil t #s(yas--field 2 323 329 nil nil nil nil #s(yas--exit 330 nil))) nil nil))) nil (26040 45835 808826 185000) 0 nil])
([nil nil ((#("format" 0 6 (fontified t)) . -323) (undo-tree-id3242 . -6) (undo-tree-id3243 . -6) 329) nil (26040 45835 808825 451000) 0 nil])
([nil nil ((323 . 328)) nil (26040 45835 808823 357000) 0 nil])
([nil nil ((328 . 333)) nil (26040 45835 808822 705000) 0 nil])
([nil nil ((333 . 335)) nil (26040 45835 808822 95000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -334) (undo-tree-id3240 . -1) (undo-tree-id3241 . -1) 335) nil (26040 45835 808821 294000) 0 nil])
([nil nil ((334 . 337)) nil (26040 45835 808819 300000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -336) (undo-tree-id3238 . -1) (undo-tree-id3239 . -1) 337) nil (26040 45835 808818 583000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -334) (undo-tree-id3234 . -1) (undo-tree-id3235 . -1) (#("y" 0 1 (fontified t)) . -335) (undo-tree-id3236 . -1) (undo-tree-id3237 . -1) 336) nil (26040 45835 808816 235000) 0 nil])
([nil nil ((334 . 337)) nil (26040 45835 808812 565000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -335) (undo-tree-id3230 . -1) (undo-tree-id3231 . -1) (#("u" 0 1 (fontified t)) . -336) (undo-tree-id3232 . -1) (undo-tree-id3233 . -1) 337) nil (26040 45835 808811 654000) 0 nil])
([nil nil ((335 . 337)) nil (26040 45835 808807 911000) 0 nil])
([nil nil ((#("four" 0 4 (fontified t)) . -333) (undo-tree-id3228 . -4) (undo-tree-id3229 . -4) 337) nil (26040 45835 808804 72000) 0 nil])
([nil nil ((333 . 337)) nil (26040 45835 808802 44000) 0 nil])
([nil nil ((#("four" 0 4 (fontified t)) . -333) (undo-tree-id3226 . -4) (undo-tree-id3227 . -4) 337) nil (26040 45835 808801 296000) 0 nil])
([nil nil ((#("zbar_" 0 5 (fontified t)) . -328) (undo-tree-id3224 . -5) (undo-tree-id3225 . -5) 333) nil (26040 45835 808798 850000) 0 nil])
([nil nil ((328 . 334)) nil (26040 45835 808796 838000) 0 nil])
([nil nil ((#("fourcc" 0 6 (fontified t)) . -328) (undo-tree-id3222 . -6) (undo-tree-id3223 . -6) 334) nil (26040 45835 808796 30000) 0 nil])
([nil nil ((328 . 331)) nil (26040 45835 808794 16000) 0 nil])
([nil nil ((#("F" 0 1 (face font-lock-type-face fontified t)) . -328) (undo-tree-id3219 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -329) (undo-tree-id3220 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -330) (undo-tree-id3221 . -1) 331) nil (26040 45835 808792 824000) 0 nil])
([nil nil ((328 . 330)) nil (26040 45835 808789 706000) 0 nil])
([nil nil ((330 . 339)) nil (26040 45835 808789 163000) 0 nil])
([nil nil ((nil rear-nonsticky nil 137 . 138) (nil fontified nil 49 . 138) (49 . 138)) nil (26040 45835 808788 475000) 0 nil])
([nil nil ((138 . 139)) nil (26040 45835 808787 557000) 0 nil])
([nil nil ((#("Format" 0 6 (face font-lock-type-face fontified t)) . -65) (undo-tree-id3218 . -6) 71) nil (26040 45835 808786 837000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -64) (undo-tree-id3217 . -1) 65) nil (26040 45835 808785 168000) 0 nil])
([nil nil ((64 . 68)) nil (26040 45835 808783 649000) 0 nil])
([nil nil ((#("Format" 0 6 (face font-lock-type-face fontified t)) . -106) (undo-tree-id3216 . -6) 112) nil (26040 45835 808782 733000) 0 nil])
([nil nil ((106 . 109)) nil (26040 45835 808781 60000) 0 nil])
([nil nil ((#("Format" 0 6 (face font-lock-type-face fontified t)) . -71) (undo-tree-id3212 . -6) (undo-tree-id3213 . -6) (undo-tree-id3214 . -6) (undo-tree-id3215 . -6) 77) nil (26040 45835 808779 556000) 0 nil])
([nil nil ((#("Format" 0 6 (face font-lock-type-face fontified t)) . -106) (undo-tree-id3208 . -6) (undo-tree-id3209 . -2) (undo-tree-id3210 . -2) (undo-tree-id3211 . -6) 112) nil (26040 45835 808772 509000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -71) (undo-tree-id3275 . -1) (undo-tree-id3276 . -1) (undo-tree-id3277 . -1) 72 (t 26040 45835 823081 886000)) nil (26040 45842 530128 515000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-unmatched-face) fontified t)) . -82) (undo-tree-id3273 . -1) (undo-tree-id3274 . -1) 83) nil (26040 45842 530124 867000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -116) (undo-tree-id3264 . -1) (undo-tree-id3265 . -1) (undo-tree-id3266 . -1) (undo-tree-id3267 . -1) (undo-tree-id3268 . -1) (undo-tree-id3269 . -1) (undo-tree-id3270 . -1) (undo-tree-id3271 . -1) (undo-tree-id3272 . -1) 117) nil (26040 45842 530121 1000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -104) (undo-tree-id3260 . -1) (undo-tree-id3261 . -1) (undo-tree-id3262 . -1) (undo-tree-id3263 . -1) 105) nil (26040 45842 530110 559000) 0 nil])
([nil nil ((#("fourcc" 0 6 (fontified t)) . -401) (undo-tree-id3295 . -6) (undo-tree-id3296 . -6) 407 (t 26040 45842 543082 298000)) nil (26040 45849 54936 110000) 0 nil])
([nil nil ((#("zbar_" 0 5 (fontified t)) . -396) (undo-tree-id3291 . -5) (undo-tree-id3292 . -5) (undo-tree-id3293 . -5) (undo-tree-id3294 . -5) 401) nil (26040 45849 54933 669000) 0 nil])
([nil nil ((#("ffi::" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t)) . -391) (undo-tree-id3285 . -5) (undo-tree-id3286 . -5) (undo-tree-id3287 . -5) (undo-tree-id3288 . -5) (undo-tree-id3289 . -5) (undo-tree-id3290 . -5) 396) nil (26040 45849 54929 683000) 0 nil])
([nil nil ((391 . 392)) nil (26040 45849 54924 116000) 0 nil])
([nil nil ((391 . 395) (#("Y" 0 1 (fontified nil)) . 391) (391 . 392) (#("Y800" 0 4 (fontified nil)) . -391) (391 . 395) (#("Y" 0 1 (face font-lock-type-face fontified t)) . -391) (undo-tree-id3278 . -1) (undo-tree-id3279 . -1) (undo-tree-id3280 . -1) (undo-tree-id3281 . -1) (undo-tree-id3282 . -1) (undo-tree-id3283 . -1) (undo-tree-id3284 . -1) 392) nil (26040 45849 54920 173000) 0 nil])
([nil nil ((395 . 398) (t 26040 45849 69749 364000)) nil (26040 45865 723070 697000) 0 nil])
([nil nil ((apply yas--snippet-revive 396 402 #s(yas--snippet nil nil #s(yas--exit 402 nil) 27 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 402 nil) 27 nil nil nil nil)) (396 . 402) (#("into()$0" 0 8 (fontified nil)) . 396) (396 . 404) (#("in" 0 2 (fontified nil)) . 396) (396 . 398) (#("into() (as Into)" 0 16 (fontified nil)) . -396) (396 . 412) (#("in" 0 2 (face font-lock-keyword-face fontified t)) . -396) (undo-tree-id3297 . -2) (undo-tree-id3298 . -2) (undo-tree-id3299 . -1) (undo-tree-id3300 . -1) (undo-tree-id3301 . -1) (undo-tree-id3302 . -2) (undo-tree-id3303 . -2) (undo-tree-id3304 . -2) (undo-tree-id3305 . -2) (undo-tree-id3306 . -2) (undo-tree-id3307 . -2) (undo-tree-id3308 . -2) (undo-tree-id3309 . -2) 398) nil (26040 45865 723066 21000) 0 nil])
([nil nil ((403 . 416) (t 26040 45865 736417 54000)) nil (26040 45880 704388 717000) 0 nil])
([nil nil ((403 . 404)) nil (26040 45880 704384 153000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -413) (undo-tree-id3339 . -4) 417 (t 26040 45880 713084 640000)) nil (26040 45916 536516 358000) 0 nil])
([nil nil ((413 . 415)) nil (26040 45916 536514 846000) 0 nil])
([nil nil ((413 . 416) (#("ff" 0 2 (fontified nil)) . 413) (413 . 415) (#("ffi" 0 3 (fontified nil)) . -413) (413 . 416) (#("ff" 0 2 (fontified t)) . -413) (undo-tree-id3337 . -2) (undo-tree-id3338 . -2) 415) nil (26040 45916 536513 701000) 0 nil])
([nil nil ((416 . 419)) nil (26040 45916 536510 798000) 0 nil])
([nil nil ((419 . 423)) nil (26040 45916 536510 229000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -422) (undo-tree-id3336 . -1) 423) nil (26040 45916 536509 469000) 0 nil])
([nil nil ((422 . 425)) nil (26040 45916 536507 971000) 0 nil])
([nil nil ((425 . 426)) nil (26040 45916 536507 439000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -423) (undo-tree-id3333 . -1) (#("e" 0 1 (fontified t)) . -424) (undo-tree-id3334 . -1) (#("t" 0 1 (fontified t)) . -425) (undo-tree-id3335 . -1) 426) nil (26040 45916 536506 522000) 0 nil])
([nil nil ((423 . 430)) nil (26040 45916 536503 425000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -428) (undo-tree-id3331 . -1) (#("s" 0 1 (fontified t)) . -429) (undo-tree-id3332 . -1) 430) nil (26040 45916 536502 500000) 0 nil])
([nil nil ((428 . 432)) nil (26040 45916 536500 262000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 438 448 nil nil nil t #s(yas--field 2 450 455 nil nil nil nil #s(yas--field 3 457 463 nil nil nil nil #s(yas--exit 464 nil)))) #s(yas--field 2 450 455 nil nil nil nil #s(yas--field 3 457 463 nil nil nil nil #s(yas--exit 464 nil))) #s(yas--field 3 457 463 nil nil nil nil #s(yas--exit 464 nil))) #s(yas--exit 464 nil) 28 nil #s(yas--field 1 438 448 nil nil nil t #s(yas--field 2 450 455 nil nil nil nil #s(yas--field 3 457 463 nil nil nil nil #s(yas--exit 464 nil)))) nil nil)) (418 . 459) (#("zbar_image_set_size(${1:image}, ${2:width}, ${3:height})$0" 0 58 (fontified nil)) . 418) (418 . 476) (#("zbar_image_set" 0 14 (fontified nil)) . 418) (418 . 432) (#("zbar_image_set_size(…)" 0 22 (fontified nil)) . -418) (418 . 440) (#("zbar_image_set" 0 14 (fontified t)) . -418) (undo-tree-id3330 . -14) 432) nil (26040 45916 536499 167000) 0 nil])
([nil nil ((#("image" 0 5 (fontified nil)) . 439) (438 . 439)) nil (26040 45916 536496 518000) 0 nil])
([nil nil ((438 . 448) (#("z" 0 1 (fontified nil)) . 438) (438 . 439) (#("zbar_image" 0 10 (fontified nil)) . -438) (438 . 448) (#("z" 0 1 (fontified t)) . -438) (undo-tree-id3328 . -1) (undo-tree-id3329 . -1) 439) nil (26040 45916 536495 174000) 0 nil])
([nil nil ((apply yas--snippet-revive 418 464 #s(yas--snippet nil (#s(yas--field 1 438 448 nil nil nil t #s(yas--field 2 450 455 nil nil nil nil #s(yas--field 3 457 463 nil nil nil nil #s(yas--exit 464 nil)))) #s(yas--field 2 450 455 nil nil nil nil #s(yas--field 3 457 463 nil nil nil nil #s(yas--exit 464 nil))) #s(yas--field 3 457 463 nil nil nil nil #s(yas--exit 464 nil))) #s(yas--exit 464 nil) 28 nil #s(yas--field 1 438 448 nil nil nil t #s(yas--field 2 450 455 nil nil nil nil #s(yas--field 3 457 463 nil nil nil nil #s(yas--exit 464 nil)))) nil nil))) nil (26040 45916 536492 329000) 0 nil])
([nil nil ((#("width" 0 5 (fontified t)) . -450) (undo-tree-id3326 . -5) (undo-tree-id3327 . -5) 455) nil (26040 45916 536491 560000) 0 nil])
([nil nil ((450 . 451)) nil (26040 45916 536489 433000) 0 nil])
([nil nil ((450 . 455) (#("i" 0 1 (fontified nil)) . 450) (450 . 451) (#("image" 0 5 (fontified nil)) . -450) (450 . 455) (#("i" 0 1 (fontified t)) . -450) (undo-tree-id3324 . -1) (undo-tree-id3325 . -1) 451) nil (26040 45916 536488 355000) 0 nil])
([nil nil ((455 . 457)) nil (26040 45916 536485 589000) 0 nil])
([nil nil ((apply yas--snippet-revive 456 463 #s(yas--snippet nil nil #s(yas--exit 463 nil) 29 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 463 nil) 29 nil nil nil nil)) (456 . 463) (#("width()$0" 0 9 (fontified nil)) . 456) (456 . 465) (#("w" 0 1 (fontified nil)) . 456) (456 . 457) (#("width()" 0 7 (fontified nil)) . -456) (456 . 463) (#("w" 0 1 (fontified t)) . -456) (undo-tree-id3322 . -1) (undo-tree-id3323 . -1) 457) nil (26040 45916 536484 189000) 0 nil])
([nil nil ((#("height" 0 6 (fontified t)) . -465) (undo-tree-id3320 . -6) (undo-tree-id3321 . -6) 471) nil (26040 45916 536480 757000) 0 nil])
([nil nil ((465 . 467)) nil (26040 45916 536478 414000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -466) (undo-tree-id3318 . -1) (undo-tree-id3319 . -1) 467) nil (26040 45916 536477 461000) 0 nil])
([nil nil ((466 . 467)) nil (26040 45916 536475 59000) 0 nil])
([nil nil ((465 . 470) (#("im" 0 2 (fontified nil)) . 465) (465 . 467) (#("image" 0 5 (fontified nil)) . -465) (465 . 470) (#("im" 0 2 (fontified t)) . -465) (undo-tree-id3316 . -2) (undo-tree-id3317 . -2) 467) nil (26040 45916 536473 570000) 0 nil])
([nil nil ((470 . 472)) nil (26040 45916 536469 718000) 0 nil])
([nil nil ((apply yas--snippet-revive 471 479 #s(yas--snippet nil nil #s(yas--exit 479 nil) 30 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 479 nil) 30 nil nil nil nil)) (471 . 479) (#("height()$0" 0 10 (fontified nil)) . 471) (471 . 481) (#("h" 0 1 (fontified nil)) . 471) (471 . 472) (#("height()" 0 8 (fontified nil)) . -471) (471 . 479) (#("h" 0 1 (fontified t)) . -471) (undo-tree-id3310 . -1) (undo-tree-id3311 . -1) (undo-tree-id3312 . -1) (undo-tree-id3313 . -1) (undo-tree-id3314 . -1) (undo-tree-id3315 . -1) 472) nil (26040 45916 536465 726000) 0 nil])
([nil nil ((480 . 493) (t 26040 45916 553086 817000)) nil (26040 46034 487492 714000) 0 nil])
([nil nil ((480 . 481)) nil (26040 46034 487491 938000) 0 nil])
([nil nil ((481 . 490)) nil (26040 46034 487491 442000) 0 nil])
([nil nil ((490 . 492)) nil (26040 46034 487490 770000) 0 nil])
([nil nil ((490 . 493) (#("ff" 0 2 (fontified nil)) . 490) (490 . 492) (#("ffi" 0 3 (fontified nil)) . -490) (490 . 493) (#("ff" 0 2 (fontified t)) . -490) (undo-tree-id3408 . -2) 492) nil (26040 46034 487489 749000) 0 nil])
([nil nil ((493 . 509)) nil (26040 46034 487487 803000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 515 525 nil nil nil t #s(yas--field 2 527 531 nil nil nil nil #s(yas--field 3 533 549 nil nil nil nil #s(yas--field 4 551 564 nil nil nil nil #s(yas--exit 565 nil))))) #s(yas--field 2 527 531 nil nil nil nil #s(yas--field 3 533 549 nil nil nil nil #s(yas--field 4 551 564 nil nil nil nil #s(yas--exit 565 nil)))) #s(yas--field 3 533 549 nil nil nil nil #s(yas--field 4 551 564 nil nil nil nil #s(yas--exit 565 nil))) #s(yas--field 4 551 564 nil nil nil nil #s(yas--exit 565 nil))) #s(yas--exit 565 nil) 31 nil #s(yas--field 1 515 525 nil nil nil t #s(yas--field 2 527 531 nil nil nil nil #s(yas--field 3 533 549 nil nil nil nil #s(yas--field 4 551 564 nil nil nil nil #s(yas--exit 565 nil))))) nil nil)) (495 . 560) (#("zbar_image_set_data(${1:image}, ${2:data}, ${3:data_byte_length}, ${4:cleanup_hndlr})$0" 0 87 (fontified nil)) . 495) (495 . 582) (#("zbar_image_set" 0 14 (fontified nil)) . 495) (495 . 509) (#("zbar_image_set_data(…)" 0 22 (fontified nil)) . -495) (495 . 517) (#("zbar_image_set" 0 14 (fontified t)) . -495) (undo-tree-id3407 . -14) 509) nil (26040 46034 487486 619000) 0 nil])
([nil nil ((#("image" 0 5 (fontified nil)) . 516) (515 . 516)) nil (26040 46034 487484 279000) 0 nil])
([nil nil ((515 . 525) (#("z" 0 1 (fontified nil)) . 515) (515 . 516) (#("zbar_image" 0 10 (fontified nil)) . -515) (515 . 525) (#("z" 0 1 (fontified t)) . -515) (undo-tree-id3405 . -1) (undo-tree-id3406 . -1) 516) nil (26040 46034 487483 51000) 0 nil])
([nil nil ((apply yas--snippet-revive 495 565 #s(yas--snippet nil (#s(yas--field 1 515 525 nil nil nil t #s(yas--field 2 527 531 nil nil nil nil #s(yas--field 3 533 549 nil nil nil nil #s(yas--field 4 551 564 nil nil nil nil #s(yas--exit 565 nil))))) #s(yas--field 2 527 531 nil nil nil nil #s(yas--field 3 533 549 nil nil nil nil #s(yas--field 4 551 564 nil nil nil nil #s(yas--exit 565 nil)))) #s(yas--field 3 533 549 nil nil nil nil #s(yas--field 4 551 564 nil nil nil nil #s(yas--exit 565 nil))) #s(yas--field 4 551 564 nil nil nil nil #s(yas--exit 565 nil))) #s(yas--exit 565 nil) 31 nil #s(yas--field 1 515 525 nil nil nil t #s(yas--field 2 527 531 nil nil nil nil #s(yas--field 3 533 549 nil nil nil nil #s(yas--field 4 551 564 nil nil nil nil #s(yas--exit 565 nil))))) nil nil))) nil (26040 46034 487480 549000) 0 nil])
([nil nil ((#("length" 0 6 (fontified t)) . -543) (undo-tree-id3403 . -6) (undo-tree-id3404 . -6) 549) nil (26040 46034 487479 802000) 0 nil])
([nil nil ((#("byte_" 0 5 (fontified t)) . -538) (undo-tree-id3401 . -5) (undo-tree-id3402 . -5) 543) nil (26040 46034 487477 782000) 0 nil])
([nil nil ((#("data_" 0 5 (fontified t)) . -533) (undo-tree-id3399 . -5) (undo-tree-id3400 . -5) 538) nil (26040 46034 487475 622000) 0 nil])
([nil nil ((#("data, " 0 6 (fontified t)) . -527) (undo-tree-id3397 . -6) (undo-tree-id3398 . -6) 533) nil (26040 46034 487473 535000) 0 nil])
([nil nil ((527 . 528)) nil (26040 46034 487471 394000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -527) (undo-tree-id3395 . -1) (undo-tree-id3396 . -1) 528) nil (26040 46034 487470 694000) 0 nil])
([nil nil ((527 . 530)) nil (26040 46034 487468 863000) 0 nil])
([nil nil ((527 . 532) (#("ima" 0 3 (fontified nil)) . 527) (527 . 530) (#("image" 0 5 (fontified nil)) . -527) (527 . 532) (#("ima" 0 3 (fontified t)) . -527) (undo-tree-id3393 . -3) (undo-tree-id3394 . -3) 530) nil (26040 46034 487467 906000) 0 nil])
([nil nil ((532 . 534)) nil (26040 46034 487465 291000) 0 nil])
([nil nil ((#("z" 0 1 (fontified t)) . -533) (undo-tree-id3391 . -1) (undo-tree-id3392 . -1) 534) nil (26040 46034 487464 518000) 0 nil])
([nil nil ((533 . 536)) nil (26040 46034 487462 594000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -533) (undo-tree-id3385 . -1) (undo-tree-id3386 . -1) (#("i" 0 1 (fontified t)) . -534) (undo-tree-id3387 . -1) (undo-tree-id3388 . -1) (#("z" 0 1 (fontified t)) . -535) (undo-tree-id3389 . -1) (undo-tree-id3390 . -1) 536) nil (26040 46034 487461 558000) 0 nil])
([nil nil ((533 . 535)) nil (26040 46034 487457 17000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -533) (undo-tree-id3381 . -1) (undo-tree-id3382 . -1) (#("i" 0 1 (fontified t)) . -534) (undo-tree-id3383 . -1) (undo-tree-id3384 . -1) 535) nil (26040 46034 487456 105000) 0 nil])
([nil nil ((533 . 534)) nil (26040 46034 487452 672000) 0 nil])
([nil nil ((apply yas--snippet-revive 533 540 #s(yas--snippet nil nil #s(yas--exit 540 nil) 32 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 540 nil) 32 nil nil nil nil)) (533 . 540) (#("width()$0" 0 9 (fontified nil)) . 533) (533 . 542) (#("w" 0 1 (fontified nil)) . 533) (533 . 534) (#("width()" 0 7 (fontified nil)) . -533) (533 . 540) (#("w" 0 1 (fontified t)) . -533) (undo-tree-id3379 . -1) (undo-tree-id3380 . -1) 534) nil (26040 46034 487451 390000) 0 nil])
([nil nil ((540 . 544)) nil (26040 46034 487448 93000) 0 nil])
([nil nil ((541 . 546) (#("ima" 0 3 (fontified nil)) . 541) (541 . 544) (#("image" 0 5 (fontified nil)) . -541) (541 . 546) (#("ima" 0 3 (fontified t)) . -541) (undo-tree-id3377 . -3) (undo-tree-id3378 . -3) 544) nil (26040 46034 487447 115000) 0 nil])
([nil nil ((546 . 548)) nil (26040 46034 487444 372000) 0 nil])
([nil nil ((apply yas--snippet-revive 547 555 #s(yas--snippet nil nil #s(yas--exit 555 nil) 33 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 555 nil) 33 nil nil nil nil)) (547 . 555) (#("height()$0" 0 10 (fontified nil)) . 547) (547 . 557) (#("h" 0 1 (fontified nil)) . 547) (547 . 548) (#("height()" 0 8 (fontified nil)) . -547) (547 . 555) (#("h" 0 1 (fontified t)) . -547) (undo-tree-id3375 . -1) (undo-tree-id3376 . -1) 548) nil (26040 46034 487442 690000) 0 nil])
([nil nil ((#("hndlr" 0 5 (fontified t)) . -565) (undo-tree-id3373 . -5) (undo-tree-id3374 . -5) 570) nil (26040 46034 487439 170000) 0 nil])
([nil nil ((#("cleanup_" 0 8 (fontified t)) . -557) (undo-tree-id3371 . -8) (undo-tree-id3372 . -8) 565) nil (26040 46034 487437 19000) 0 nil])
([nil nil ((557 . 559)) nil (26040 46034 487434 971000) 0 nil])
([nil nil ((557 . 560) (#("ff" 0 2 (fontified nil)) . 557) (557 . 559) (#("ffi" 0 3 (fontified nil)) . -557) (557 . 560) (#("ff" 0 2 (fontified t)) . -557) (undo-tree-id3369 . -2) (undo-tree-id3370 . -2) 559) nil (26040 46034 487433 934000) 0 nil])
([nil nil ((560 . 564)) nil (26040 46034 487431 265000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -563) (undo-tree-id3367 . -1) (undo-tree-id3368 . -1) 564) nil (26040 46034 487430 542000) 0 nil])
([nil nil ((563 . 572)) nil (26040 46034 487428 372000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -567) (undo-tree-id3357 . -1) (undo-tree-id3358 . -1) (#("m" 0 1 (fontified t)) . -568) (undo-tree-id3359 . -1) (undo-tree-id3360 . -1) (#("a" 0 1 (fontified t)) . -569) (undo-tree-id3361 . -1) (undo-tree-id3362 . -1) (#("g" 0 1 (fontified t)) . -570) (undo-tree-id3363 . -1) (undo-tree-id3364 . -1) (#("e" 0 1 (fontified t)) . -571) (undo-tree-id3365 . -1) (undo-tree-id3366 . -1) 572) nil (26040 46034 487426 852000) 0 nil])
([nil nil ((567 . 576)) nil (26040 46034 487418 931000) 0 nil])
([nil nil ((576 . 577)) nil (26040 46034 487418 397000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 583 593 nil nil nil t #s(yas--exit 594 nil))) #s(yas--exit 594 nil) 34 nil #s(yas--field 1 583 593 nil nil nil t #s(yas--exit 594 nil)) nil nil)) (562 . 589) (#("zbar_image_free_data(${1:image})$0" 0 34 (fontified nil)) . 562) (562 . 596) (#("zbar_image_free" 0 15 (fontified nil)) . 562) (562 . 577) (#("zbar_image_free_data(…)" 0 23 (fontified nil)) . -562) (562 . 585) (#("zbar_image_free" 0 15 (fontified t)) . -562) (undo-tree-id3355 . -15) (undo-tree-id3356 . -15) 577) nil (26040 46034 487416 959000) 0 nil])
([nil nil ((#("image" 0 5 (fontified nil)) . 584) (undo-tree-id3354 . -5) (583 . 584)) nil (26040 46034 487412 873000) 0 nil])
([nil nil ((583 . 593) (#("z" 0 1 (fontified nil)) . 583) (undo-tree-id3340 . -1) (583 . 584) (#("zbar_image" 0 10 (fontified nil)) . -583) (undo-tree-id3341 . -10) (583 . 593) (#("z" 0 1 (fontified t)) . -583) (undo-tree-id3342 . -1) (undo-tree-id3343 . -1) (undo-tree-id3344 . -1) (undo-tree-id3345 . -1) (undo-tree-id3346 . -1) (undo-tree-id3347 . -1) (undo-tree-id3348 . -1) (undo-tree-id3349 . -1) (undo-tree-id3350 . -1) (undo-tree-id3351 . -1) (undo-tree-id3352 . -1) (undo-tree-id3353 . -1) 584) nil (26040 46034 487407 684000) 0 nil])
([nil nil ((apply yas--snippet-revive 562 594 #s(yas--snippet nil (#s(yas--field 1 583 593 nil nil nil t #s(yas--exit 594 nil))) #s(yas--exit 594 nil) 34 nil #s(yas--field 1 583 593 nil nil nil t #s(yas--exit 594 nil)) nil nil))) nil (26040 46039 262527 107000) 0 nil])
([nil nil ((595 . 596) (t 26040 46034 503094 45000)) nil (26040 46039 262523 148000) 0 nil])
([nil nil ((527 . 528) (t 26040 46039 276427 671000)) nil (26040 46137 777378 108000) 0 nil])
([nil nil ((527 . 528)) nil (26040 46137 777377 203000) 0 nil])
([nil nil ((527 . 532) (#("i" 0 1 (fontified nil)) . 527) (527 . 528) (#("image" 0 5 (fontified nil)) . -527) (527 . 532) (#("i" 0 1 (fontified t)) . -527) (undo-tree-id3739 . -1) (undo-tree-id3740 . -1) (undo-tree-id3741 . -1) (undo-tree-id3742 . -1) (undo-tree-id3743 . -1) (undo-tree-id3744 . -1) (undo-tree-id3745 . -1) (undo-tree-id3746 . -1) (undo-tree-id3747 . -1) 528) nil (26040 46137 777375 834000) 0 nil])
([nil nil ((532 . 537)) nil (26040 46137 777368 586000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -532) (undo-tree-id3629 . -1) (undo-tree-id3630 . -1) (undo-tree-id3631 . -1) (undo-tree-id3632 . -1) (undo-tree-id3633 . -1) (undo-tree-id3634 . -1) (undo-tree-id3635 . -1) (undo-tree-id3636 . -1) (undo-tree-id3637 . -1) (undo-tree-id3638 . -1) (undo-tree-id3639 . -1) (undo-tree-id3640 . -1) (undo-tree-id3641 . -1) (undo-tree-id3642 . -1) (undo-tree-id3643 . -1) (undo-tree-id3644 . -1) (undo-tree-id3645 . -1) (undo-tree-id3646 . -1) (undo-tree-id3647 . -1) (undo-tree-id3648 . -1) (undo-tree-id3649 . -1) (undo-tree-id3650 . -1) (undo-tree-id3651 . -1) (undo-tree-id3652 . -1) (undo-tree-id3653 . -1) (undo-tree-id3654 . -1) (undo-tree-id3655 . -1) (undo-tree-id3656 . -1) (undo-tree-id3657 . -1) (undo-tree-id3658 . -1) (undo-tree-id3659 . -1) (undo-tree-id3660 . -1) (undo-tree-id3661 . -1) (undo-tree-id3662 . -1) (#("d" 0 1 (fontified t)) . -533) (undo-tree-id3663 . -1) (undo-tree-id3664 . -1) (undo-tree-id3665 . -1) (undo-tree-id3666 . -1) (undo-tree-id3667 . -1) (undo-tree-id3668 . -1) (undo-tree-id3669 . -1) (undo-tree-id3670 . -1) (undo-tree-id3671 . -1) (undo-tree-id3672 . -1) (undo-tree-id3673 . -1) (undo-tree-id3674 . -1) (undo-tree-id3675 . -1) (undo-tree-id3676 . -1) (undo-tree-id3677 . -1) (undo-tree-id3678 . -1) (undo-tree-id3679 . -1) (undo-tree-id3680 . -1) (undo-tree-id3681 . -1) (undo-tree-id3682 . -1) (undo-tree-id3683 . -1) (undo-tree-id3684 . -1) (undo-tree-id3685 . -1) (undo-tree-id3686 . -1) (undo-tree-id3687 . -1) (undo-tree-id3688 . -1) (undo-tree-id3689 . -1) (undo-tree-id3690 . -1) (undo-tree-id3691 . -1) (#("a" 0 1 (fontified t)) . -534) (undo-tree-id3692 . -1) (undo-tree-id3693 . -1) (undo-tree-id3694 . -1) (undo-tree-id3695 . -1) (undo-tree-id3696 . -1) (undo-tree-id3697 . -1) (undo-tree-id3698 . -1) (undo-tree-id3699 . -1) (undo-tree-id3700 . -1) (undo-tree-id3701 . -1) (undo-tree-id3702 . -1) (undo-tree-id3703 . -1) (undo-tree-id3704 . -1) (undo-tree-id3705 . -1) (undo-tree-id3706 . -1) (undo-tree-id3707 . -1) (undo-tree-id3708 . -1) (undo-tree-id3709 . -1) (undo-tree-id3710 . -1) (undo-tree-id3711 . -1) (undo-tree-id3712 . -1) (undo-tree-id3713 . -1) (#("t" 0 1 (fontified t)) . -535) (undo-tree-id3714 . -1) (undo-tree-id3715 . -1) (undo-tree-id3716 . -1) (undo-tree-id3717 . -1) (undo-tree-id3718 . -1) (undo-tree-id3719 . -1) (undo-tree-id3720 . -1) (undo-tree-id3721 . -1) (undo-tree-id3722 . -1) (undo-tree-id3723 . -1) (undo-tree-id3724 . -1) (undo-tree-id3725 . -1) (undo-tree-id3726 . -1) (undo-tree-id3727 . -1) (undo-tree-id3728 . -1) (#("a" 0 1 (fontified t)) . -536) (undo-tree-id3729 . -1) (undo-tree-id3730 . -1) (undo-tree-id3731 . -1) (undo-tree-id3732 . -1) (undo-tree-id3733 . -1) (undo-tree-id3734 . -1) (undo-tree-id3735 . -1) (undo-tree-id3736 . -1) (undo-tree-id3737 . -1) (undo-tree-id3738 . -1) 537) nil (26040 46137 777363 962000) 0 nil])
([nil nil ((#("grayscale()" 0 9 (fontified t) 9 10 (face (rainbow-delimiters-depth-2-face) fontified t) 10 11 (face (rainbow-delimiters-depth-2-face) fontified t)) . -211) (undo-tree-id3584 . -5) (undo-tree-id3585 . -5) (undo-tree-id3586 . -5) (undo-tree-id3587 . -11) (undo-tree-id3588 . -11) (undo-tree-id3589 . -5) (undo-tree-id3590 . -5) (undo-tree-id3591 . -5) (undo-tree-id3592 . -5) (undo-tree-id3593 . -5) (undo-tree-id3594 . -5) (undo-tree-id3595 . -5) (undo-tree-id3596 . -5) (undo-tree-id3597 . -5) (undo-tree-id3598 . -5) (undo-tree-id3599 . -5) (undo-tree-id3600 . -5) (undo-tree-id3601 . -5) (undo-tree-id3602 . -5) (undo-tree-id3603 . -5) (undo-tree-id3604 . -5) (undo-tree-id3605 . -5) (undo-tree-id3606 . -5) (undo-tree-id3607 . -5) (undo-tree-id3608 . -5) (undo-tree-id3609 . -5) (undo-tree-id3610 . -5) (undo-tree-id3611 . -5) (undo-tree-id3612 . -5) (undo-tree-id3613 . -5) (undo-tree-id3614 . -5) (undo-tree-id3615 . -5) (undo-tree-id3616 . -5) (undo-tree-id3617 . -11) (undo-tree-id3618 . -11) (undo-tree-id3619 . -11) (undo-tree-id3620 . -11) (undo-tree-id3621 . -11) (undo-tree-id3622 . -11) (undo-tree-id3623 . -11) (undo-tree-id3624 . -11) (undo-tree-id3625 . -11) (undo-tree-id3626 . -11) (undo-tree-id3627 . -11) (undo-tree-id3628 . -11) 222) nil (26040 46137 777240 394000) 0 nil])
([nil nil ((211 . 213)) nil (26040 46137 777212 647000) 0 nil])
([nil nil ((213 . 217)) nil (26040 46137 777212 75000) 0 nil])
([nil nil ((217 . 218)) nil (26040 46137 777211 462000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -215) (undo-tree-id3553 . -1) (undo-tree-id3554 . -1) (undo-tree-id3555 . -1) (undo-tree-id3556 . -1) (undo-tree-id3557 . -1) (undo-tree-id3558 . -1) (undo-tree-id3559 . -1) (undo-tree-id3560 . -1) (undo-tree-id3561 . -1) (undo-tree-id3562 . -1) (undo-tree-id3563 . -1) (undo-tree-id3564 . -1) (undo-tree-id3565 . -1) (undo-tree-id3566 . -1) (undo-tree-id3567 . -1) (#("g" 0 1 (fontified t)) . -216) (undo-tree-id3568 . -1) (undo-tree-id3569 . -1) (undo-tree-id3570 . -1) (undo-tree-id3571 . -1) (undo-tree-id3572 . -1) (undo-tree-id3573 . -1) (undo-tree-id3574 . -1) (undo-tree-id3575 . -1) (undo-tree-id3576 . -1) (undo-tree-id3577 . -1) (undo-tree-id3578 . -1) (#("r" 0 1 (fontified t)) . -217) (undo-tree-id3579 . -1) (undo-tree-id3580 . -1) (undo-tree-id3581 . -1) (undo-tree-id3582 . -1) (undo-tree-id3583 . -1) 218) nil (26040 46137 777209 382000) 0 nil])
([nil nil ((215 . 217)) nil (26040 46137 777189 576000) 0 nil])
([nil nil ((#("intol_" 0 6 (fontified t)) . -211) (undo-tree-id3509 . -2) (undo-tree-id3510 . -6) (undo-tree-id3511 . -1) (undo-tree-id3512 . -1) (undo-tree-id3513 . -1) (undo-tree-id3514 . -2) (undo-tree-id3515 . -2) (undo-tree-id3516 . -2) (undo-tree-id3517 . -2) (undo-tree-id3518 . -2) (undo-tree-id3519 . -2) (undo-tree-id3520 . -2) (undo-tree-id3521 . -2) (undo-tree-id3522 . -2) (undo-tree-id3523 . -2) (undo-tree-id3524 . -2) (undo-tree-id3525 . -3) (undo-tree-id3526 . -3) (undo-tree-id3527 . -4) (undo-tree-id3528 . -4) (undo-tree-id3529 . -4) (undo-tree-id3530 . -4) (undo-tree-id3531 . -4) (undo-tree-id3532 . -4) (undo-tree-id3533 . -4) (undo-tree-id3534 . -4) (undo-tree-id3535 . -4) (undo-tree-id3536 . -4) (undo-tree-id3537 . -4) (undo-tree-id3538 . -4) (undo-tree-id3539 . -4) (undo-tree-id3540 . -4) (undo-tree-id3541 . -4) (undo-tree-id3542 . -4) (undo-tree-id3543 . -4) (undo-tree-id3544 . -4) (undo-tree-id3545 . -4) (undo-tree-id3546 . -4) (undo-tree-id3547 . -4) (undo-tree-id3548 . -4) (undo-tree-id3549 . -6) (undo-tree-id3550 . -6) (undo-tree-id3551 . -6) (undo-tree-id3552 . -6) 217) nil (26040 46137 777186 588000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -210) (undo-tree-id3409 . -1) (undo-tree-id3410 . -1) (undo-tree-id3411 . -1) (undo-tree-id3412 . -1) (undo-tree-id3413 . -1) (undo-tree-id3414 . -1) (undo-tree-id3415 . -1) (undo-tree-id3416 . -1) (undo-tree-id3417 . -1) (undo-tree-id3418 . -1) (undo-tree-id3419 . -1) (undo-tree-id3420 . -1) (undo-tree-id3421 . -1) (undo-tree-id3422 . -1) (undo-tree-id3423 . -1) (undo-tree-id3424 . -1) (undo-tree-id3425 . -1) (undo-tree-id3426 . -1) (undo-tree-id3427 . -1) (undo-tree-id3428 . -1) (undo-tree-id3429 . -1) (undo-tree-id3430 . -1) (undo-tree-id3431 . -1) (undo-tree-id3432 . -1) (undo-tree-id3433 . -1) (undo-tree-id3434 . -1) (undo-tree-id3435 . -1) (undo-tree-id3436 . -1) (undo-tree-id3437 . -1) (undo-tree-id3438 . -1) (undo-tree-id3439 . -1) (undo-tree-id3440 . -1) (undo-tree-id3441 . -1) (undo-tree-id3442 . -1) (undo-tree-id3443 . -1) (undo-tree-id3444 . -1) (undo-tree-id3445 . -1) (undo-tree-id3446 . -1) (undo-tree-id3447 . -1) (undo-tree-id3448 . -1) (undo-tree-id3449 . -1) (undo-tree-id3450 . -1) (undo-tree-id3451 . -1) (undo-tree-id3452 . -1) (undo-tree-id3453 . -1) (undo-tree-id3454 . -1) (undo-tree-id3455 . -1) (undo-tree-id3456 . -1) (undo-tree-id3457 . -1) (undo-tree-id3458 . -1) (undo-tree-id3459 . -1) (undo-tree-id3460 . -1) (undo-tree-id3461 . -1) (undo-tree-id3462 . -1) (undo-tree-id3463 . -1) (undo-tree-id3464 . -1) (undo-tree-id3465 . -1) (undo-tree-id3466 . -1) (undo-tree-id3467 . -1) (undo-tree-id3468 . -1) (undo-tree-id3469 . -1) (undo-tree-id3470 . -1) (undo-tree-id3471 . -1) (undo-tree-id3472 . -1) (undo-tree-id3473 . -1) (undo-tree-id3474 . -1) (undo-tree-id3475 . -1) (undo-tree-id3476 . -1) (undo-tree-id3477 . -1) (undo-tree-id3478 . -1) (undo-tree-id3479 . -1) (undo-tree-id3480 . -1) (undo-tree-id3481 . -1) (undo-tree-id3482 . -1) (undo-tree-id3483 . -1) (undo-tree-id3484 . -1) (undo-tree-id3485 . -1) (undo-tree-id3486 . -1) (undo-tree-id3487 . -1) (undo-tree-id3488 . -1) (undo-tree-id3489 . -1) (undo-tree-id3490 . -1) (undo-tree-id3491 . -1) (undo-tree-id3492 . -1) (undo-tree-id3493 . -1) (undo-tree-id3494 . -1) (undo-tree-id3495 . -1) (undo-tree-id3496 . -1) (undo-tree-id3497 . -1) (undo-tree-id3498 . -1) (undo-tree-id3499 . -1) (undo-tree-id3500 . -1) (undo-tree-id3501 . -1) (undo-tree-id3502 . -1) (undo-tree-id3503 . -1) (undo-tree-id3504 . -1) (undo-tree-id3505 . -1) (undo-tree-id3506 . -1) (undo-tree-id3507 . -1) (undo-tree-id3508 . -1) 211) nil (26040 46137 777151 720000) 0 nil])
([nil nil ((#("image)" 0 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-4-face) fontified t)) . -582) (undo-tree-id4005 . -6) (undo-tree-id4006 . -6) (undo-tree-id4007 . -6) (undo-tree-id4008 . -6) (undo-tree-id4009 . -6) (undo-tree-id4010 . -6) (undo-tree-id4011 . -6) (undo-tree-id4012 . -6) (undo-tree-id4013 . -6) (undo-tree-id4014 . -6) 588 (t 26040 46137 793100 373000)) nil (26040 46262 530506 952000) 0 nil])
([nil nil ((#("zbar_" 0 5 (fontified t)) . -577) (undo-tree-id3993 . -5) (undo-tree-id3994 . -5) (undo-tree-id3995 . -5) (undo-tree-id3996 . -5) (undo-tree-id3997 . -5) (undo-tree-id3998 . -5) (undo-tree-id3999 . -5) (undo-tree-id4000 . -5) (undo-tree-id4001 . -5) (undo-tree-id4002 . -5) (undo-tree-id4003 . -5) (undo-tree-id4004 . -5) 582) nil (26040 46262 530499 94000) 0 nil])
([nil nil ((#("data(" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t)) . -572) (undo-tree-id3979 . -5) (undo-tree-id3980 . -5) (undo-tree-id3981 . -5) (undo-tree-id3982 . -5) (undo-tree-id3983 . -5) (undo-tree-id3984 . -5) (undo-tree-id3985 . -5) (undo-tree-id3986 . -5) (undo-tree-id3987 . -5) (undo-tree-id3988 . -5) (undo-tree-id3989 . -5) (undo-tree-id3990 . -5) (undo-tree-id3991 . -5) (undo-tree-id3992 . -5) 577) nil (26040 46262 530192 288000) 0 nil])
([nil nil ((#("free_" 0 5 (fontified t)) . -567) (undo-tree-id3961 . -5) (undo-tree-id3962 . -5) (undo-tree-id3963 . -5) (undo-tree-id3964 . -5) (undo-tree-id3965 . -5) (undo-tree-id3966 . -5) (undo-tree-id3967 . -5) (undo-tree-id3968 . -5) (undo-tree-id3969 . -5) (undo-tree-id3970 . -5) (undo-tree-id3971 . -5) (undo-tree-id3972 . -5) (undo-tree-id3973 . -5) (undo-tree-id3974 . -5) (undo-tree-id3975 . -5) (undo-tree-id3976 . -5) (undo-tree-id3977 . -5) (undo-tree-id3978 . -5) 572) nil (26040 46262 530182 470000) 0 nil])
([nil nil ((#("image_" 0 6 (fontified t)) . -561) (undo-tree-id3941 . -6) (undo-tree-id3942 . -6) (undo-tree-id3943 . -6) (undo-tree-id3944 . -6) (undo-tree-id3945 . -6) (undo-tree-id3946 . -6) (undo-tree-id3947 . -6) (undo-tree-id3948 . -6) (undo-tree-id3949 . -6) (undo-tree-id3950 . -6) (undo-tree-id3951 . -6) (undo-tree-id3952 . -6) (undo-tree-id3953 . -6) (undo-tree-id3954 . -6) (undo-tree-id3955 . -6) (undo-tree-id3956 . -6) (undo-tree-id3957 . -6) (undo-tree-id3958 . -6) (undo-tree-id3959 . -6) (undo-tree-id3960 . -6) 567) nil (26040 46262 530169 848000) 0 nil])
([nil nil ((#("zbar_" 0 5 (fontified t)) . -556) (undo-tree-id3849 . -4) (undo-tree-id3850 . -4) (undo-tree-id3851 . -4) (undo-tree-id3852 . -4) (undo-tree-id3853 . -4) (undo-tree-id3854 . -4) (undo-tree-id3855 . -4) (undo-tree-id3856 . -4) (undo-tree-id3857 . -4) (undo-tree-id3858 . -4) (undo-tree-id3859 . -4) (undo-tree-id3860 . -4) (undo-tree-id3861 . -4) (undo-tree-id3862 . -4) (undo-tree-id3863 . -4) (undo-tree-id3864 . -4) (undo-tree-id3865 . -4) (undo-tree-id3866 . -4) (undo-tree-id3867 . -4) (undo-tree-id3868 . -4) (undo-tree-id3869 . -4) (undo-tree-id3870 . -4) (undo-tree-id3871 . -4) (undo-tree-id3872 . -4) (undo-tree-id3873 . -4) (undo-tree-id3874 . -4) (undo-tree-id3875 . -4) (undo-tree-id3876 . -4) (undo-tree-id3877 . -4) (undo-tree-id3878 . -4) (undo-tree-id3879 . -4) (undo-tree-id3880 . -4) (undo-tree-id3881 . -4) (undo-tree-id3882 . -4) (undo-tree-id3883 . -4) (undo-tree-id3884 . -4) (undo-tree-id3885 . -4) (undo-tree-id3886 . -4) (undo-tree-id3887 . -4) (undo-tree-id3888 . -4) (undo-tree-id3889 . -4) (undo-tree-id3890 . -4) (undo-tree-id3891 . -4) (undo-tree-id3892 . -4) (undo-tree-id3893 . -4) (undo-tree-id3894 . -4) (undo-tree-id3895 . -4) (undo-tree-id3896 . -4) (undo-tree-id3897 . -4) (undo-tree-id3898 . -4) (undo-tree-id3899 . -4) (undo-tree-id3900 . -4) (undo-tree-id3901 . -4) (undo-tree-id3902 . -4) (undo-tree-id3903 . -4) (undo-tree-id3904 . -4) (undo-tree-id3905 . -4) (undo-tree-id3906 . -4) (undo-tree-id3907 . -4) (undo-tree-id3908 . -4) (undo-tree-id3909 . -4) (undo-tree-id3910 . -4) (undo-tree-id3911 . -4) (undo-tree-id3912 . -4) (undo-tree-id3913 . -4) (undo-tree-id3914 . -4) (undo-tree-id3915 . -4) (undo-tree-id3916 . -4) (undo-tree-id3917 . -4) (undo-tree-id3918 . -4) (undo-tree-id3919 . -5) (undo-tree-id3920 . -5) (undo-tree-id3921 . -5) (undo-tree-id3922 . -5) (undo-tree-id3923 . -5) (undo-tree-id3924 . -5) (undo-tree-id3925 . -5) (undo-tree-id3926 . -5) (undo-tree-id3927 . -5) (undo-tree-id3928 . -5) (undo-tree-id3929 . -5) (undo-tree-id3930 . -5) (undo-tree-id3931 . -5) (undo-tree-id3932 . -5) (undo-tree-id3933 . -5) (undo-tree-id3934 . -5) (undo-tree-id3935 . -5) (undo-tree-id3936 . -5) (undo-tree-id3937 . -5) (undo-tree-id3938 . -5) (undo-tree-id3939 . -5) (undo-tree-id3940 . -5) 561) nil (26040 46262 530153 549000) 0 nil])
([nil nil ((#("ffi::" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t)) . -551) (undo-tree-id3754 . -3) (undo-tree-id3755 . -5) (undo-tree-id3756 . -5) (undo-tree-id3757 . -5) (undo-tree-id3758 . -5) (undo-tree-id3759 . -5) (undo-tree-id3760 . -5) (undo-tree-id3761 . -5) (undo-tree-id3762 . -5) (undo-tree-id3763 . -5) (undo-tree-id3764 . -5) (undo-tree-id3765 . -5) (undo-tree-id3766 . -5) (undo-tree-id3767 . -5) (undo-tree-id3768 . -5) (undo-tree-id3769 . -5) (undo-tree-id3770 . -5) (undo-tree-id3771 . -5) (undo-tree-id3772 . -5) (undo-tree-id3773 . -5) (undo-tree-id3774 . -5) (undo-tree-id3775 . -5) (undo-tree-id3776 . -5) (undo-tree-id3777 . -5) (undo-tree-id3778 . -5) (undo-tree-id3779 . -5) (undo-tree-id3780 . -5) (undo-tree-id3781 . -5) (undo-tree-id3782 . -5) (undo-tree-id3783 . -5) (undo-tree-id3784 . -5) (undo-tree-id3785 . -5) (undo-tree-id3786 . -5) (undo-tree-id3787 . -5) (undo-tree-id3788 . -5) (undo-tree-id3789 . -5) (undo-tree-id3790 . -5) (undo-tree-id3791 . -5) (undo-tree-id3792 . -5) (undo-tree-id3793 . -5) (undo-tree-id3794 . -5) (undo-tree-id3795 . -5) (undo-tree-id3796 . -5) (undo-tree-id3797 . -5) (undo-tree-id3798 . -5) (undo-tree-id3799 . -5) (undo-tree-id3800 . -5) (undo-tree-id3801 . -5) (undo-tree-id3802 . -5) (undo-tree-id3803 . -5) (undo-tree-id3804 . -5) (undo-tree-id3805 . -5) (undo-tree-id3806 . -5) (undo-tree-id3807 . -5) (undo-tree-id3808 . -5) (undo-tree-id3809 . -5) (undo-tree-id3810 . -5) (undo-tree-id3811 . -5) (undo-tree-id3812 . -5) (undo-tree-id3813 . -5) (undo-tree-id3814 . -5) (undo-tree-id3815 . -5) (undo-tree-id3816 . -5) (undo-tree-id3817 . -5) (undo-tree-id3818 . -5) (undo-tree-id3819 . -5) (undo-tree-id3820 . -5) (undo-tree-id3821 . -5) (undo-tree-id3822 . -5) (undo-tree-id3823 . -5) (undo-tree-id3824 . -5) (undo-tree-id3825 . -5) (undo-tree-id3826 . -5) (undo-tree-id3827 . -5) (undo-tree-id3828 . -5) (undo-tree-id3829 . -5) (undo-tree-id3830 . -5) (undo-tree-id3831 . -5) (undo-tree-id3832 . -5) (undo-tree-id3833 . -5) (undo-tree-id3834 . -5) (undo-tree-id3835 . -5) (undo-tree-id3836 . -5) (undo-tree-id3837 . -5) (undo-tree-id3838 . -5) (undo-tree-id3839 . -5) (undo-tree-id3840 . -5) (undo-tree-id3841 . -5) (undo-tree-id3842 . -5) (undo-tree-id3843 . -5) (undo-tree-id3844 . -5) (undo-tree-id3845 . -5) (undo-tree-id3846 . -5) (undo-tree-id3847 . -5) (undo-tree-id3848 . -5) 556) nil (26040 46262 530009 592000) 0 nil])
([nil nil ((551 . 552)) nil (26040 46262 529946 735000) 0 nil])
([nil nil ((apply yas--snippet-revive 551 555 #s(yas--snippet nil nil #s(yas--exit 555 nil) 35 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 555 nil) 35 nil nil nil nil)) (551 . 555) (#("None$0" 0 6 (fontified nil)) . 551) (551 . 557) (#("N" 0 1 (fontified nil)) . 551) (551 . 552) (#("None" 0 4 (fontified nil)) . -551) (551 . 555) (#("N" 0 1 (face font-lock-type-face fontified t)) . -551) (undo-tree-id3748 . -1) (undo-tree-id3749 . -1) (undo-tree-id3750 . -1) (undo-tree-id3751 . -1) (undo-tree-id3752 . -1) (undo-tree-id3753 . -1) 552) nil (26040 46262 529942 232000) 0 nil])
([nil nil ((521 . 523) (t 26040 46262 546441 360000)) nil (26040 46283 522714 506000) 0 nil])
([nil nil ((551 . 554)) nil (26040 46283 522713 532000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -553) (undo-tree-id4027 . -1) (undo-tree-id4028 . -1) (undo-tree-id4029 . -1) (undo-tree-id4030 . -1) (undo-tree-id4031 . -1) (undo-tree-id4032 . -1) (undo-tree-id4033 . -1) (undo-tree-id4034 . -1) (undo-tree-id4035 . -1) (undo-tree-id4036 . -1) (undo-tree-id4037 . -1) 554) nil (26040 46283 522712 152000) 0 nil])
([nil nil ((553 . 556)) nil (26040 46283 522703 910000) 0 nil])
([nil nil ((apply yas--snippet-revive 553 559 #s(yas--snippet nil nil #s(yas--exit 559 nil) 36 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 559 nil) 36 nil nil nil nil)) (553 . 559) (#("into()$0" 0 8 (fontified nil)) . 553) (553 . 561) (#("int" 0 3 (fontified nil)) . 553) (553 . 556) (#("into() (as Into)" 0 16 (fontified nil)) . -553) (553 . 569) (#("int" 0 3 (fontified t)) . -553) (undo-tree-id4015 . -2) (undo-tree-id4016 . -3) (undo-tree-id4017 . -1) (undo-tree-id4018 . -1) (undo-tree-id4019 . -2) (undo-tree-id4020 . -2) (undo-tree-id4021 . -2) (undo-tree-id4022 . -2) (undo-tree-id4023 . -3) (undo-tree-id4024 . -3) (undo-tree-id4025 . -3) (undo-tree-id4026 . -3) 556) nil (26040 46283 522699 453000) 0 nil])
([nil nil ((520 . 521) (t 26040 46283 569775 980000)) nil (26040 46377 668390 737000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -520) (undo-tree-id4062 . -1) (undo-tree-id4063 . -1) (undo-tree-id4064 . -1) (undo-tree-id4065 . -1) (undo-tree-id4066 . -1) (undo-tree-id4067 . -1) 521) nil (26040 46377 668389 348000) 0 nil])
([nil nil ((210 . 211)) nil (26040 46377 668383 518000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -210) (undo-tree-id4052 . -1) (undo-tree-id4053 . -1) (undo-tree-id4054 . -1) (undo-tree-id4055 . -1) (undo-tree-id4056 . -1) (undo-tree-id4057 . -1) (undo-tree-id4058 . -1) (undo-tree-id4059 . -1) (undo-tree-id4060 . -1) (undo-tree-id4061 . -1) 211) nil (26040 46377 668381 957000) 0 nil])
([nil nil ((210 . 215)) nil (26040 46377 668372 999000) 0 nil])
([nil nil ((apply yas--snippet-revive 211 223 #s(yas--snippet nil nil #s(yas--exit 223 nil) 37 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 223 nil) 37 nil nil nil nil)) (211 . 223) (#("into_luma8()$0" 0 14 (fontified nil)) . 211) (211 . 225) (#("into" 0 4 (fontified nil)) . 211) (211 . 215) (#("into_luma8()" 0 12 (fontified nil)) . -211) (211 . 223) (#("into" 0 4 (fontified t)) . -211) (undo-tree-id4038 . -4) (undo-tree-id4039 . -1) (undo-tree-id4040 . -1) (undo-tree-id4041 . -1) (undo-tree-id4042 . -2) (undo-tree-id4043 . -2) (undo-tree-id4044 . -2) (undo-tree-id4045 . -2) (undo-tree-id4046 . -3) (undo-tree-id4047 . -3) (undo-tree-id4048 . -4) (undo-tree-id4049 . -4) (undo-tree-id4050 . -4) (undo-tree-id4051 . -4) 215) nil (26040 46377 668368 480000) 0 nil])
([nil nil ((533 . 536) (t 26040 46377 686448 426000)) nil (26040 46504 399962 903000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -534) (undo-tree-id4091 . -1) (#("a" 0 1 (fontified t)) . -535) (undo-tree-id4092 . -1) 536) nil (26040 46504 399961 927000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -533) (undo-tree-id4090 . -1) 534) nil (26040 46504 399959 561000) 0 nil])
([nil nil ((533 . 536)) nil (26040 46504 399957 993000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -534) (undo-tree-id4086 . -1) (undo-tree-id4087 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -535) (undo-tree-id4088 . -1) (undo-tree-id4089 . -1) 536) nil (26040 46504 399957 17000) 0 nil])
([nil nil ((534 . 535)) nil (26040 46504 399953 448000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t)) . -534) (undo-tree-id4084 . -1) (undo-tree-id4085 . -1) 535) nil (26040 46504 399952 490000) 0 nil])
([nil nil ((534 . 537)) nil (26040 46504 399950 277000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -534) (undo-tree-id4078 . -1) (undo-tree-id4079 . -1) (#("e" 0 1 (fontified t)) . -535) (undo-tree-id4080 . -1) (undo-tree-id4081 . -1) (#("n" 0 1 (fontified t)) . -536) (undo-tree-id4082 . -1) (undo-tree-id4083 . -1) 537) nil (26040 46504 399948 989000) 0 nil])
([nil nil ((534 . 538)) nil (26040 46504 399943 13000) 0 nil])
([nil nil ((apply yas--snippet-revive 534 544 #s(yas--snippet nil nil #s(yas--exit 544 nil) 38 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 544 nil) 38 nil nil nil nil)) (534 . 544) (#("into_raw()$0" 0 12 (fontified nil)) . 534) (534 . 546) (#("into" 0 4 (fontified nil)) . 534) (534 . 538) (#("into_raw()" 0 10 (fontified nil)) . -534) (534 . 544) (#("into" 0 4 (fontified t)) . -534) (undo-tree-id4068 . -4) (undo-tree-id4069 . -1) (undo-tree-id4070 . -3) (undo-tree-id4071 . -3) (undo-tree-id4072 . -3) (undo-tree-id4073 . -4) (undo-tree-id4074 . -4) (undo-tree-id4075 . -4) (undo-tree-id4076 . -4) (undo-tree-id4077 . -4) 538) nil (26040 46504 399938 799000) 0 nil])
([nil nil ((528 . 529) (t 26040 46504 446456 202000)) nil (26040 46564 270607 733000) 0 nil])
([nil nil ((528 . 532)) nil (26040 46564 270606 976000) 0 nil])
([nil nil ((528 . 536) (#("byte" 0 4 (fontified nil)) . 528) (528 . 532) (#("bytemuck" 0 8 (fontified nil)) . -528) (528 . 536) (#("byte" 0 4 (fontified t)) . -528) (undo-tree-id4203 . -4) (undo-tree-id4204 . -1) (undo-tree-id4205 . -1) (undo-tree-id4206 . -1) (undo-tree-id4207 . -2) (undo-tree-id4208 . -2) (undo-tree-id4209 . -2) (undo-tree-id4210 . -3) (undo-tree-id4211 . -3) (undo-tree-id4212 . -4) (undo-tree-id4213 . -4) (undo-tree-id4214 . -4) (undo-tree-id4215 . -4) 532) nil (26040 46564 270605 199000) 0 nil])
([nil nil ((536 . 542)) nil (26040 46564 270159 808000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -537) (undo-tree-id4135 . -1) (undo-tree-id4136 . -1) (undo-tree-id4137 . -1) (undo-tree-id4138 . -1) (undo-tree-id4139 . -1) (undo-tree-id4140 . -1) (undo-tree-id4141 . -1) (undo-tree-id4142 . -1) (undo-tree-id4143 . -1) (undo-tree-id4144 . -1) (undo-tree-id4145 . -1) (undo-tree-id4146 . -1) (undo-tree-id4147 . -1) (undo-tree-id4148 . -1) (undo-tree-id4149 . -1) (undo-tree-id4150 . -1) (undo-tree-id4151 . -1) (undo-tree-id4152 . -1) (undo-tree-id4153 . -1) (undo-tree-id4154 . -1) (undo-tree-id4155 . -1) (undo-tree-id4156 . -1) (undo-tree-id4157 . -1) (#("c" 0 1 (fontified t)) . -538) (undo-tree-id4158 . -1) (undo-tree-id4159 . -1) (undo-tree-id4160 . -1) (undo-tree-id4161 . -1) (undo-tree-id4162 . -1) (undo-tree-id4163 . -1) (undo-tree-id4164 . -1) (undo-tree-id4165 . -1) (undo-tree-id4166 . -1) (undo-tree-id4167 . -1) (undo-tree-id4168 . -1) (undo-tree-id4169 . -1) (undo-tree-id4170 . -1) (undo-tree-id4171 . -1) (undo-tree-id4172 . -1) (undo-tree-id4173 . -1) (undo-tree-id4174 . -1) (undo-tree-id4175 . -1) (undo-tree-id4176 . -1) (#("a" 0 1 (fontified t)) . -539) (undo-tree-id4177 . -1) (undo-tree-id4178 . -1) (undo-tree-id4179 . -1) (undo-tree-id4180 . -1) (undo-tree-id4181 . -1) (undo-tree-id4182 . -1) (undo-tree-id4183 . -1) (undo-tree-id4184 . -1) (undo-tree-id4185 . -1) (undo-tree-id4186 . -1) (undo-tree-id4187 . -1) (undo-tree-id4188 . -1) (undo-tree-id4189 . -1) (undo-tree-id4190 . -1) (#("t" 0 1 (fontified t)) . -540) (undo-tree-id4191 . -1) (undo-tree-id4192 . -1) (undo-tree-id4193 . -1) (undo-tree-id4194 . -1) (undo-tree-id4195 . -1) (undo-tree-id4196 . -1) (undo-tree-id4197 . -1) (undo-tree-id4198 . -1) (undo-tree-id4199 . -1) (#("e" 0 1 (fontified t)) . -541) (undo-tree-id4200 . -1) (undo-tree-id4201 . -1) (undo-tree-id4202 . -1) 542) nil (26040 46564 270156 778000) 0 nil])
([nil nil ((537 . 543)) nil (26040 46564 270115 366000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 549 550 nil nil nil nil #s(yas--exit 551 nil))) #s(yas--exit 551 nil) 39 nil #s(yas--field 1 549 550 nil nil nil nil #s(yas--exit 551 nil)) nil nil)) (538 . 551) (#("cast_slice(${1:a})$0" 0 20 (fontified nil)) . 538) (538 . 558) (#("caste" 0 5 (fontified nil)) . 538) (538 . 543) (#("cast_slice(…)" 0 13 (fontified nil)) . -538) (538 . 551) (#("caste" 0 5 (fontified t)) . -538) (undo-tree-id4117 . -5) (undo-tree-id4118 . -1) (undo-tree-id4119 . -1) (undo-tree-id4120 . -1) (undo-tree-id4121 . -2) (undo-tree-id4122 . -2) (undo-tree-id4123 . -3) (undo-tree-id4124 . -3) (undo-tree-id4125 . -3) (undo-tree-id4126 . -3) (undo-tree-id4127 . -4) (undo-tree-id4128 . -4) (undo-tree-id4129 . -4) (undo-tree-id4130 . -5) (undo-tree-id4131 . -5) (undo-tree-id4132 . -5) (undo-tree-id4133 . -5) (undo-tree-id4134 . -5) 543) nil (26040 46564 270113 681000) 0 nil])
([nil nil ((apply yas--snippet-revive 538 551 #s(yas--snippet nil (#s(yas--field 1 549 550 nil nil nil nil #s(yas--exit 551 nil))) #s(yas--exit 551 nil) 39 nil #s(yas--field 1 549 550 nil nil nil nil #s(yas--exit 551 nil)) nil nil))) nil (26040 46564 270100 726000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -549) (undo-tree-id4098 . -1) (undo-tree-id4099 . -1) (undo-tree-id4100 . -1) (undo-tree-id4101 . -1) (undo-tree-id4102 . -1) (undo-tree-id4103 . -1) (undo-tree-id4104 . -1) (undo-tree-id4105 . -1) (undo-tree-id4106 . -1) (undo-tree-id4107 . -1) (undo-tree-id4108 . -1) (undo-tree-id4109 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -550) (undo-tree-id4110 . -1) (undo-tree-id4111 . -1) (undo-tree-id4112 . -1) (undo-tree-id4113 . -1) (undo-tree-id4114 . -1) (undo-tree-id4115 . -1) (undo-tree-id4116 . -1) 551) nil (26040 46564 270098 985000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -549) (undo-tree-id4093 . -1) (undo-tree-id4094 . -1) (undo-tree-id4095 . -1) (undo-tree-id4096 . -1) (undo-tree-id4097 . -1) 550) nil (26040 46564 270084 327000) 0 nil])
([nil nil ((565 . 566)) nil (26040 46564 270070 736000) 0 nil])
([nil nil ((549 . 550) (t 26040 46564 286459 866000)) nil (26040 46570 736277 702000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . -549) (undo-tree-id4216 . -1) (undo-tree-id4217 . -1) (undo-tree-id4218 . -1) (undo-tree-id4219 . -1) 550) nil (26040 46570 736275 432000) 0 nil])
([nil nil ((549 . 550)) nil (26040 46570 736261 957000) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . -549) (undo-tree-id4231 . -1) (undo-tree-id4232 . -1) (undo-tree-id4233 . -1) (undo-tree-id4234 . -1) (undo-tree-id4235 . -1) (undo-tree-id4236 . -1) (undo-tree-id4237 . -1) (undo-tree-id4238 . -1) (undo-tree-id4239 . -1) (undo-tree-id4240 . -1) (undo-tree-id4241 . -1) (undo-tree-id4242 . -1) (undo-tree-id4243 . -1) (undo-tree-id4244 . -1) 550 (t 26040 46570 749793 596000)) nil (26040 46576 374967 289000) 0 nil])
([nil nil ((#("into" 0 4 (fontified t)) . -555) (undo-tree-id4220 . -4) (undo-tree-id4221 . -4) (undo-tree-id4222 . -4) (undo-tree-id4223 . -4) (undo-tree-id4224 . -4) (undo-tree-id4225 . -4) (undo-tree-id4226 . -4) (undo-tree-id4227 . -4) (undo-tree-id4228 . -4) (undo-tree-id4229 . -4) (undo-tree-id4230 . -4) 559) nil (26040 46576 374955 783000) 0 nil])
([nil nil ((555 . 557)) nil (26040 46576 374938 410000) 0 nil])
([nil nil ((564 . 567) (t 26040 46576 423127 277000)) nil (26040 46592 583054 143000) 0 nil])
([nil nil ((apply yas--snippet-revive 565 571 #s(yas--snippet nil nil #s(yas--exit 571 nil) 40 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 571 nil) 40 nil nil nil nil)) (565 . 571) (#("into()$0" 0 8 (fontified nil)) . 565) (565 . 573) (#("in" 0 2 (fontified nil)) . 565) (565 . 567) (#("into() (as Into)" 0 16 (fontified nil)) . -565) (565 . 581) (#("in" 0 2 (face font-lock-keyword-face fontified t)) . -565) (undo-tree-id4245 . -2) (undo-tree-id4246 . -2) (undo-tree-id4247 . -1) (undo-tree-id4248 . -1) (undo-tree-id4249 . -1) (undo-tree-id4250 . -2) (undo-tree-id4251 . -2) (undo-tree-id4252 . -2) (undo-tree-id4253 . -2) (undo-tree-id4254 . -2) (undo-tree-id4255 . -2) (undo-tree-id4256 . -2) (undo-tree-id4257 . -2) (undo-tree-id4258 . -2) (undo-tree-id4259 . -2) (undo-tree-id4260 . -2) (undo-tree-id4261 . -2) 567) nil (26040 46592 583049 487000) 0 nil])
([nil nil ((#("into()" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t) 5 6 (face (rainbow-delimiters-depth-4-face) fontified t)) . -565) (undo-tree-id4303 . -6) (undo-tree-id4304 . -6) (undo-tree-id4305 . -6) (undo-tree-id4306 . -6) (undo-tree-id4307 . -6) (undo-tree-id4308 . -6) (undo-tree-id4309 . -6) (undo-tree-id4310 . -6) (undo-tree-id4311 . -6) (undo-tree-id4312 . -6) (undo-tree-id4313 . -6) (undo-tree-id4314 . -6) (undo-tree-id4315 . -6) (undo-tree-id4316 . -6) (undo-tree-id4317 . -6) (undo-tree-id4318 . -6) (undo-tree-id4319 . -6) (undo-tree-id4320 . -6) 571 (t 26040 46592 629794 937000)) nil (26040 46605 299358 888000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -564) (undo-tree-id4262 . -1) (undo-tree-id4263 . -1) (undo-tree-id4264 . -1) (undo-tree-id4265 . -1) (undo-tree-id4266 . -1) (undo-tree-id4267 . -1) (undo-tree-id4268 . -1) (undo-tree-id4269 . -1) (undo-tree-id4270 . -1) (undo-tree-id4271 . -1) (undo-tree-id4272 . -1) (undo-tree-id4273 . -1) (undo-tree-id4274 . -1) (undo-tree-id4275 . -1) (undo-tree-id4276 . -1) (undo-tree-id4277 . -1) (undo-tree-id4278 . -1) (undo-tree-id4279 . -1) (undo-tree-id4280 . -1) (undo-tree-id4281 . -1) (undo-tree-id4282 . -1) (undo-tree-id4283 . -1) (undo-tree-id4284 . -1) (undo-tree-id4285 . -1) (undo-tree-id4286 . -1) (undo-tree-id4287 . -1) (undo-tree-id4288 . -1) (undo-tree-id4289 . -1) (undo-tree-id4290 . -1) (undo-tree-id4291 . -1) (undo-tree-id4292 . -1) (undo-tree-id4293 . -1) (undo-tree-id4294 . -1) (undo-tree-id4295 . -1) (undo-tree-id4296 . -1) (undo-tree-id4297 . -1) (undo-tree-id4298 . -1) (undo-tree-id4299 . -1) (undo-tree-id4300 . -1) (undo-tree-id4301 . -1) (undo-tree-id4302 . -1) 565) nil (26040 46605 299342 977000) 0 nil])
([nil nil ((528 . 529) (t 26040 46605 346462 385000)) nil (26040 46610 598232 433000) 0 nil])
([nil nil ((#("raw())" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-5-face) fontified t) 4 5 (face (rainbow-delimiters-depth-5-face) fontified t) 5 6 (face (rainbow-delimiters-depth-4-face) fontified t)) . -559) (undo-tree-id4493 . -1) (undo-tree-id4494 . -1) (undo-tree-id4495 . -6) (undo-tree-id4496 . -6) (undo-tree-id4497 . -6) (undo-tree-id4498 . -6) (undo-tree-id4499 . -3) (undo-tree-id4500 . -6) (undo-tree-id4501 . -6) (undo-tree-id4502 . -6) (undo-tree-id4503 . -6) (undo-tree-id4504 . -6) 565 (t 26040 46610 613129 374000)) nil (26040 46647 881880 676000) 0 nil])
([nil nil ((#("as_" 0 2 (fontified t) 2 3 (fontified t)) . -556) (undo-tree-id4478 . -3) (undo-tree-id4479 . -3) (undo-tree-id4480 . -3) (undo-tree-id4481 . -3) (undo-tree-id4482 . -3) (undo-tree-id4483 . -3) (undo-tree-id4484 . -2) (undo-tree-id4485 . -3) (undo-tree-id4486 . -3) (undo-tree-id4487 . -3) (undo-tree-id4488 . -3) (undo-tree-id4489 . -3) (undo-tree-id4490 . -3) (undo-tree-id4491 . -3) (undo-tree-id4492 . -3) 559) nil (26040 46647 881627 241000) 0 nil])
([nil nil ((#("image." 0 6 (fontified t)) . -550) (undo-tree-id4460 . -6) (undo-tree-id4461 . -6) (undo-tree-id4462 . -6) (undo-tree-id4463 . -6) (undo-tree-id4464 . -6) (undo-tree-id4465 . -6) (undo-tree-id4466 . -5) (undo-tree-id4467 . -6) (undo-tree-id4468 . -6) (undo-tree-id4469 . -6) (undo-tree-id4470 . -6) (undo-tree-id4471 . -6) (undo-tree-id4472 . -6) (undo-tree-id4473 . -6) (undo-tree-id4474 . -6) (undo-tree-id4475 . -6) (undo-tree-id4476 . -6) (undo-tree-id4477 . -6) 556) nil (26040 46647 881615 641000) 0 nil])
([nil nil ((#("slice(" 0 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-4-face) fontified t)) . -544) (undo-tree-id4438 . -6) (undo-tree-id4439 . -6) (undo-tree-id4440 . -6) (undo-tree-id4441 . -6) (undo-tree-id4442 . -6) (undo-tree-id4443 . -6) (undo-tree-id4444 . -6) (undo-tree-id4445 . -5) (undo-tree-id4446 . -6) (undo-tree-id4447 . -6) (undo-tree-id4448 . -6) (undo-tree-id4449 . -6) (undo-tree-id4450 . -6) (undo-tree-id4451 . -6) (undo-tree-id4452 . -6) (undo-tree-id4453 . -6) (undo-tree-id4454 . -6) (undo-tree-id4455 . -6) (undo-tree-id4456 . -6) (undo-tree-id4457 . -6) (undo-tree-id4458 . -6) (undo-tree-id4459 . -6) 550) nil (26040 46647 881601 818000) 0 nil])
([nil nil ((#("cast_" 0 5 (fontified t)) . -539) (undo-tree-id4413 . -5) (undo-tree-id4414 . -5) (undo-tree-id4415 . -5) (undo-tree-id4416 . -5) (undo-tree-id4417 . -5) (undo-tree-id4418 . -5) (undo-tree-id4419 . -5) (undo-tree-id4420 . -4) (undo-tree-id4421 . -5) (undo-tree-id4422 . -5) (undo-tree-id4423 . -5) (undo-tree-id4424 . -5) (undo-tree-id4425 . -5) (undo-tree-id4426 . -5) (undo-tree-id4427 . -5) (undo-tree-id4428 . -5) (undo-tree-id4429 . -5) (undo-tree-id4430 . -5) (undo-tree-id4431 . -5) (undo-tree-id4432 . -5) (undo-tree-id4433 . -5) (undo-tree-id4434 . -5) (undo-tree-id4435 . -5) (undo-tree-id4436 . -5) (undo-tree-id4437 . -5) 544) nil (26040 46647 881585 195000) 0 nil])
([nil nil ((#("bytemuck::" 0 8 (face font-lock-constant-face fontified t) 8 10 (fontified t)) . -529) (undo-tree-id4385 . -10) (undo-tree-id4386 . -10) (undo-tree-id4387 . -10) (undo-tree-id4388 . -10) (undo-tree-id4389 . -10) (undo-tree-id4390 . -10) (undo-tree-id4391 . -10) (undo-tree-id4392 . -8) (undo-tree-id4393 . -10) (undo-tree-id4394 . -10) (undo-tree-id4395 . -10) (undo-tree-id4396 . -10) (undo-tree-id4397 . -10) (undo-tree-id4398 . -10) (undo-tree-id4399 . -10) (undo-tree-id4400 . -10) (undo-tree-id4401 . -10) (undo-tree-id4402 . -10) (undo-tree-id4403 . -10) (undo-tree-id4404 . -10) (undo-tree-id4405 . -10) (undo-tree-id4406 . -10) (undo-tree-id4407 . -10) (undo-tree-id4408 . -10) (undo-tree-id4409 . -10) (undo-tree-id4410 . -10) (undo-tree-id4411 . -10) (undo-tree-id4412 . -10) 539) nil (26040 46647 882165 106000) 0 nil])
([nil nil ((#("&" 0 1 (fontified t)) . -528) (undo-tree-id4619 . -1) (undo-tree-id4620 . -1) (undo-tree-id4621 . -1) (undo-tree-id4622 . -1) (undo-tree-id4623 . -1) (undo-tree-id4624 . -1) (undo-tree-id4625 . -1) (undo-tree-id4626 . -1) (undo-tree-id4627 . -1) (undo-tree-id4628 . -1) (undo-tree-id4629 . -1) (undo-tree-id4630 . -1) (undo-tree-id4631 . -1) (undo-tree-id4632 . -1) (undo-tree-id4633 . -1) (undo-tree-id4634 . -1) (undo-tree-id4635 . -1) (undo-tree-id4636 . -1) (undo-tree-id4637 . -1) (undo-tree-id4638 . -1) (undo-tree-id4639 . -1) (undo-tree-id4640 . -1) (undo-tree-id4641 . -1) (undo-tree-id4642 . -1) (undo-tree-id4643 . -1) (undo-tree-id4644 . -1) (undo-tree-id4645 . -1) (undo-tree-id4646 . -1) (undo-tree-id4647 . -1) (undo-tree-id4648 . -1) (undo-tree-id4649 . -1) (undo-tree-id4650 . -1) (undo-tree-id4651 . -1) (undo-tree-id4652 . -1) (undo-tree-id4653 . -1) (undo-tree-id4654 . -1) (undo-tree-id4655 . -1) (undo-tree-id4656 . -1) (undo-tree-id4657 . -1) (undo-tree-id4658 . -1) (undo-tree-id4659 . -1) (undo-tree-id4660 . -1) (undo-tree-id4661 . -1) (undo-tree-id4662 . -1) (undo-tree-id4663 . -1) (undo-tree-id4664 . -1) (undo-tree-id4665 . -1) (undo-tree-id4666 . -1) (undo-tree-id4667 . -1) (undo-tree-id4668 . -1) (undo-tree-id4669 . -1) (undo-tree-id4670 . -1) (undo-tree-id4671 . -1) (undo-tree-id4672 . -1) (undo-tree-id4673 . -1) (undo-tree-id4674 . -1) (undo-tree-id4675 . -1) (undo-tree-id4676 . -1) (undo-tree-id4677 . -1) (undo-tree-id4678 . -1) (undo-tree-id4679 . -1) (undo-tree-id4680 . -1) (undo-tree-id4681 . -1) (undo-tree-id4682 . -1) (undo-tree-id4683 . -1) (undo-tree-id4684 . -1) (undo-tree-id4685 . -1) (undo-tree-id4686 . -1) (undo-tree-id4687 . -1) (undo-tree-id4688 . -1) (undo-tree-id4689 . -1) (undo-tree-id4690 . -1) 529) nil (26040 46681 380277 938000) 0 nil] [nil nil ((#("image, &" 0 5 (fontified t) 5 7 (fontified t) 7 8 (fontified t)) . -521) (undo-tree-id4321 . -8) (undo-tree-id4322 . -7) (undo-tree-id4323 . -8) (undo-tree-id4324 . -8) (undo-tree-id4325 . -8) (undo-tree-id4326 . -8) (undo-tree-id4327 . -8) (undo-tree-id4328 . -8) (undo-tree-id4329 . -8) (undo-tree-id4330 . -8) (undo-tree-id4331 . -8) (undo-tree-id4332 . -8) (undo-tree-id4333 . -8) (undo-tree-id4334 . -8) (undo-tree-id4335 . -8) (undo-tree-id4336 . -8) (undo-tree-id4337 . -8) (undo-tree-id4338 . -8) (undo-tree-id4339 . -8) (undo-tree-id4340 . -8) (undo-tree-id4341 . -8) (undo-tree-id4342 . -8) (undo-tree-id4343 . -8) (undo-tree-id4344 . -8) (undo-tree-id4345 . -8) (undo-tree-id4346 . -8) (undo-tree-id4347 . -8) (undo-tree-id4348 . -8) (undo-tree-id4349 . -8) (undo-tree-id4350 . -8) (undo-tree-id4351 . -8) (undo-tree-id4352 . -8) (undo-tree-id4353 . -8) (undo-tree-id4354 . -8) (undo-tree-id4355 . -8) (undo-tree-id4356 . -8) (undo-tree-id4357 . -8) (undo-tree-id4358 . -8) (undo-tree-id4359 . -8) (undo-tree-id4360 . -8) (undo-tree-id4361 . -8) (undo-tree-id4362 . -8) (undo-tree-id4363 . -8) (undo-tree-id4364 . -8) (undo-tree-id4365 . -8) (undo-tree-id4366 . -8) (undo-tree-id4367 . -8) (undo-tree-id4368 . -8) (undo-tree-id4369 . -8) (undo-tree-id4370 . -8) (undo-tree-id4371 . -8) (undo-tree-id4372 . -8) (undo-tree-id4373 . -8) (undo-tree-id4374 . -8) (undo-tree-id4375 . -8) (undo-tree-id4376 . -8) (undo-tree-id4377 . -8) (undo-tree-id4378 . -8) (undo-tree-id4379 . -8) (undo-tree-id4380 . -8) (undo-tree-id4381 . -8) (undo-tree-id4382 . -8) (undo-tree-id4383 . -8) (undo-tree-id4384 . -8) 529) ((521 . 529)) (26040 46647 881540 432000) 0 nil])
([nil nil ((528 . 530)) nil (26040 46681 380232 380000) 0 nil])
nil
([nil nil ((#("m" 0 1 (fontified t)) . -528) (undo-tree-id4604 . -1) (undo-tree-id4605 . -1) (undo-tree-id4606 . -1) (undo-tree-id4607 . -1) (undo-tree-id4608 . -1) (undo-tree-id4609 . -1) (undo-tree-id4610 . -1) (undo-tree-id4611 . -1) (undo-tree-id4612 . -1) (#("i" 0 1 (fontified t)) . -529) (undo-tree-id4613 . -1) (undo-tree-id4614 . -1) (undo-tree-id4615 . -1) (undo-tree-id4616 . -1) (undo-tree-id4617 . -1) (undo-tree-id4618 . -1) 530) nil (26040 46681 380231 44000) 0 nil])
([nil nil ((528 . 530)) nil (26040 46681 380220 823000) 0 nil])
([nil nil ((528 . 533) (#("im" 0 2 (fontified nil)) . 528) (528 . 530) (#("image" 0 5 (fontified nil)) . -528) (528 . 533) (#("im" 0 2 (fontified t)) . -528) (undo-tree-id4596 . -2) (undo-tree-id4597 . -1) (undo-tree-id4598 . -1) (undo-tree-id4599 . -1) (undo-tree-id4600 . -2) (undo-tree-id4601 . -2) (undo-tree-id4602 . -2) (undo-tree-id4603 . -2) 530) nil (26040 46681 380219 639000) 0 nil])
([nil nil ((533 . 535)) nil (26040 46681 380213 258000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -533) (undo-tree-id4586 . -1) (undo-tree-id4587 . -1) (undo-tree-id4588 . -1) (undo-tree-id4589 . -1) (undo-tree-id4590 . -1) (undo-tree-id4591 . -1) (undo-tree-id4592 . -1) (#("/" 0 1 (fontified t)) . -534) (undo-tree-id4593 . -1) (undo-tree-id4594 . -1) (undo-tree-id4595 . -1) 535) nil (26040 46681 380212 138000) 0 nil])
([nil nil ((533 . 535)) nil (26040 46681 380205 85000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -534) (undo-tree-id4581 . -1) (undo-tree-id4582 . -1) (undo-tree-id4583 . -1) (undo-tree-id4584 . -1) (undo-tree-id4585 . -1) 535) nil (26040 46681 380204 198000) 0 nil])
([nil nil ((534 . 536)) nil (26040 46681 380200 190000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -534) (undo-tree-id4566 . -1) (undo-tree-id4567 . -1) (undo-tree-id4568 . -1) (undo-tree-id4569 . -1) (undo-tree-id4570 . -1) (undo-tree-id4571 . -1) (undo-tree-id4572 . -1) (undo-tree-id4573 . -1) (undo-tree-id4574 . -1) (undo-tree-id4575 . -1) (#("a" 0 1 (fontified t)) . -535) (undo-tree-id4576 . -1) (undo-tree-id4577 . -1) (undo-tree-id4578 . -1) (undo-tree-id4579 . -1) (undo-tree-id4580 . -1) 536) nil (26040 46681 380198 929000) 0 nil])
([nil nil ((534 . 537)) nil (26040 46681 380188 496000) 0 nil])
([nil nil ((apply yas--snippet-revive 534 542 #s(yas--snippet nil nil #s(yas--exit 542 nil) 41 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 542 nil) 41 nil nil nil nil)) (534 . 542) (#("as_raw()$0" 0 10 (fontified nil)) . 534) (534 . 544) (#("raw" 0 3 (fontified nil)) . 534) (534 . 537) (#("as_raw()" 0 8 (fontified nil)) . -534) (534 . 542) (#("raw" 0 3 (fontified t)) . -534) (undo-tree-id4553 . -3) (undo-tree-id4554 . -1) (undo-tree-id4555 . -1) (undo-tree-id4556 . -2) (undo-tree-id4557 . -2) (undo-tree-id4558 . -2) (undo-tree-id4559 . -2) (undo-tree-id4560 . -3) (undo-tree-id4561 . -3) (undo-tree-id4562 . -3) (undo-tree-id4563 . -3) (undo-tree-id4564 . -3) (undo-tree-id4565 . -3) 537) nil (26040 46681 380186 965000) 0 nil])
([nil nil ((542 . 543)) nil (26040 46681 380176 869000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -542) (undo-tree-id4550 . -1) (undo-tree-id4551 . -1) (undo-tree-id4552 . -1) 543) nil (26040 46681 380176 117000) 0 nil])
([nil nil ((542 . 546)) nil (26040 46681 380172 569000) 0 nil])
([nil nil ((apply yas--snippet-revive 543 551 #s(yas--snippet nil nil #s(yas--exit 551 nil) 42 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 551 nil) 42 nil nil nil nil)) (543 . 551) (#("as_ptr()$0" 0 10 (fontified nil)) . 543) (543 . 553) (#("asp" 0 3 (fontified nil)) . 543) (543 . 546) (#("as_ptr()" 0 8 (fontified nil)) . -543) (543 . 551) (#("asp" 0 3 (fontified t)) . -543) (undo-tree-id4529 . -3) (undo-tree-id4530 . -3) (undo-tree-id4531 . -1) (undo-tree-id4532 . -1) (undo-tree-id4533 . -2) (undo-tree-id4534 . -2) (undo-tree-id4535 . -2) (undo-tree-id4536 . -2) (undo-tree-id4537 . -2) (undo-tree-id4538 . -2) (undo-tree-id4539 . -2) (undo-tree-id4540 . -2) (undo-tree-id4541 . -3) (undo-tree-id4542 . -3) (undo-tree-id4543 . -3) (undo-tree-id4544 . -3) (undo-tree-id4545 . -3) (undo-tree-id4546 . -3) (undo-tree-id4547 . -3) (undo-tree-id4548 . -3) (undo-tree-id4549 . -3) 546) nil (26040 46681 380170 767000) 0 nil])
([nil nil ((551 . 555)) nil (26040 46681 380155 270000) 0 nil])
([nil nil ((555 . 560)) nil (26040 46681 380154 722000) 0 nil])
([nil nil ((560 . 563)) nil (26040 46681 380154 54000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -562) (undo-tree-id4524 . -1) (undo-tree-id4525 . -1) (undo-tree-id4526 . -1) (undo-tree-id4527 . -1) (undo-tree-id4528 . -1) 563) nil (26040 46681 380152 837000) 0 nil])
([nil nil ((562 . 563)) nil (26040 46681 380147 833000) 0 nil])
([nil nil ((10 . 37) (560 . 560) (560 . 566) (#("c_v" 0 3 (fontified nil)) . 560) (560 . 563) (#("c_void (use std::os::raw::c_void)" 0 33 (fontified nil)) . -560) (560 . 593) (#("c_v" 0 3 (fontified t)) . -560) (undo-tree-id4505 . -3) (undo-tree-id4506 . -1) (undo-tree-id4507 . -1) (undo-tree-id4508 . -1) (undo-tree-id4509 . -2) (undo-tree-id4510 . -2) (undo-tree-id4511 . -2) (undo-tree-id4512 . -2) (undo-tree-id4513 . -2) (undo-tree-id4514 . -2) (undo-tree-id4515 . -2) (undo-tree-id4516 . -2) (undo-tree-id4517 . -2) (undo-tree-id4518 . -3) (undo-tree-id4519 . -3) (undo-tree-id4520 . -3) (undo-tree-id4521 . -3) (undo-tree-id4522 . -3) (undo-tree-id4523 . -3) 563) nil (26040 46681 380143 129000) 0 nil])
([nil nil ((648 . 658) (t 26040 46681 396467 47000)) nil (26040 46743 368809 209000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -654) (undo-tree-id4794 . -1) (undo-tree-id4795 . -1) (undo-tree-id4796 . -1) (undo-tree-id4797 . -1) (undo-tree-id4798 . -1) (undo-tree-id4799 . -1) (undo-tree-id4800 . -1) (undo-tree-id4801 . -1) (undo-tree-id4802 . -1) (undo-tree-id4803 . -1) (undo-tree-id4804 . -1) (undo-tree-id4805 . -1) (undo-tree-id4806 . -1) (undo-tree-id4807 . -1) (undo-tree-id4808 . -1) (undo-tree-id4809 . -1) (undo-tree-id4810 . -1) (#("b" 0 1 (fontified t)) . -655) (undo-tree-id4811 . -1) (undo-tree-id4812 . -1) (undo-tree-id4813 . -1) (undo-tree-id4814 . -1) (undo-tree-id4815 . -1) (undo-tree-id4816 . -1) (undo-tree-id4817 . -1) (undo-tree-id4818 . -1) (undo-tree-id4819 . -1) (undo-tree-id4820 . -1) (undo-tree-id4821 . -1) (undo-tree-id4822 . -1) (undo-tree-id4823 . -1) (#("a" 0 1 (fontified t)) . -656) (undo-tree-id4824 . -1) (undo-tree-id4825 . -1) (undo-tree-id4826 . -1) (undo-tree-id4827 . -1) (undo-tree-id4828 . -1) (undo-tree-id4829 . -1) (undo-tree-id4830 . -1) (undo-tree-id4831 . -1) (undo-tree-id4832 . -1) (#("r" 0 1 (fontified t)) . -657) (undo-tree-id4833 . -1) (undo-tree-id4834 . -1) (undo-tree-id4835 . -1) (undo-tree-id4836 . -1) (undo-tree-id4837 . -1) 658) nil (26040 46743 368806 497000) 0 nil])
([nil nil ((654 . 659)) nil (26040 46743 368776 983000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -657) (undo-tree-id4779 . -1) (undo-tree-id4780 . -1) (undo-tree-id4781 . -1) (undo-tree-id4782 . -1) (undo-tree-id4783 . -1) (undo-tree-id4784 . -1) (undo-tree-id4785 . -1) (undo-tree-id4786 . -1) (undo-tree-id4787 . -1) (undo-tree-id4788 . -1) (undo-tree-id4789 . -1) (#("_" 0 1 (fontified t)) . -658) (undo-tree-id4790 . -1) (undo-tree-id4791 . -1) (undo-tree-id4792 . -1) (undo-tree-id4793 . -1) 659) nil (26040 46743 368775 611000) 0 nil])
([nil nil ((657 . 659)) nil (26040 46743 368764 783000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -657) (undo-tree-id4766 . -1) (undo-tree-id4767 . -1) (undo-tree-id4768 . -1) (undo-tree-id4769 . -1) (undo-tree-id4770 . -1) (undo-tree-id4771 . -1) (undo-tree-id4772 . -1) (undo-tree-id4773 . -1) (undo-tree-id4774 . -1) (#("P" 0 1 (face font-lock-type-face fontified t)) . -658) (undo-tree-id4775 . -1) (undo-tree-id4776 . -1) (undo-tree-id4777 . -1) (undo-tree-id4778 . -1) 659) nil (26040 46743 368763 411000) 0 nil])
([nil nil ((657 . 659)) nil (26040 46743 368753 235000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 669 676 nil nil nil nil #s(yas--field 2 678 683 nil nil nil nil #s(yas--exit 684 nil))) #s(yas--field 2 678 683 nil nil nil nil #s(yas--exit 684 nil))) #s(yas--exit 684 nil) 43 nil #s(yas--field 1 669 676 nil nil nil nil #s(yas--field 2 678 683 nil nil nil nil #s(yas--exit 684 nil))) nil nil)) (653 . 684) (#("zbar_scan_image(${1:scanner}, ${2:image})$0" 0 43 (fontified nil)) . 653) (653 . 696) (#("zbar_s" 0 6 (fontified nil)) . 653) (653 . 659) (#("zbar_scan_image(…)" 0 18 (fontified nil)) . -653) (653 . 671) (#("zbar_s" 0 6 (fontified t)) . -653) (undo-tree-id4707 . -6) (undo-tree-id4708 . -1) (undo-tree-id4709 . -1) (undo-tree-id4710 . -1) (undo-tree-id4711 . -1) (undo-tree-id4712 . -1) (undo-tree-id4713 . -1) (undo-tree-id4714 . -1) (undo-tree-id4715 . -1) (undo-tree-id4716 . -1) (undo-tree-id4717 . -1) (undo-tree-id4718 . -1) (undo-tree-id4719 . -1) (undo-tree-id4720 . -1) (undo-tree-id4721 . -1) (undo-tree-id4722 . -1) (undo-tree-id4723 . -1) (undo-tree-id4724 . -1) (undo-tree-id4725 . -1) (undo-tree-id4726 . -1) (undo-tree-id4727 . -1) (undo-tree-id4728 . -1) (undo-tree-id4729 . -2) (undo-tree-id4730 . -2) (undo-tree-id4731 . -3) (undo-tree-id4732 . -3) (undo-tree-id4733 . -3) (undo-tree-id4734 . -4) (undo-tree-id4735 . -4) (undo-tree-id4736 . -4) (undo-tree-id4737 . -4) (undo-tree-id4738 . -4) (undo-tree-id4739 . -4) (undo-tree-id4740 . -4) (undo-tree-id4741 . -4) (undo-tree-id4742 . -4) (undo-tree-id4743 . -4) (undo-tree-id4744 . -4) (undo-tree-id4745 . -4) (undo-tree-id4746 . -4) (undo-tree-id4747 . -4) (undo-tree-id4748 . -4) (undo-tree-id4749 . -4) (undo-tree-id4750 . -4) (undo-tree-id4751 . -4) (undo-tree-id4752 . -4) (undo-tree-id4753 . -4) (undo-tree-id4754 . -4) (undo-tree-id4755 . -4) (undo-tree-id4756 . -4) (undo-tree-id4757 . -4) (undo-tree-id4758 . -5) (undo-tree-id4759 . -5) (undo-tree-id4760 . -5) (undo-tree-id4761 . -6) (undo-tree-id4762 . -6) (undo-tree-id4763 . -6) (undo-tree-id4764 . -6) (undo-tree-id4765 . -6) 659) nil (26040 46743 368749 397000) 0 nil])
([nil nil ((apply yas--snippet-revive 653 684 #s(yas--snippet nil (#s(yas--field 1 669 676 nil nil nil nil #s(yas--field 2 678 683 nil nil nil nil #s(yas--exit 684 nil))) #s(yas--field 2 678 683 nil nil nil nil #s(yas--exit 684 nil))) #s(yas--exit 684 nil) 43 nil #s(yas--field 1 669 676 nil nil nil nil #s(yas--field 2 678 683 nil nil nil nil #s(yas--exit 684 nil))) nil nil))) nil (26040 46743 368590 307000) 0 nil])
([nil nil ((#("image" 0 5 (fontified t)) . -678) (undo-tree-id4700 . -5) (undo-tree-id4701 . -5) (undo-tree-id4702 . -5) (undo-tree-id4703 . -5) (undo-tree-id4704 . -5) (undo-tree-id4705 . -5) (undo-tree-id4706 . -5) 683) nil (26040 46743 368589 200000) 0 nil])
([nil nil ((678 . 679)) nil (26040 46743 368583 83000) 0 nil])
([nil nil ((678 . 688) (#("z" 0 1 (fontified nil)) . 678) (678 . 679) (#("zbar_image" 0 10 (fontified nil)) . -678) (678 . 688) (#("z" 0 1 (fontified t)) . -678) (undo-tree-id4691 . -1) (undo-tree-id4692 . -1) (undo-tree-id4693 . -1) (undo-tree-id4694 . -1) (undo-tree-id4695 . -1) (undo-tree-id4696 . -1) (undo-tree-id4697 . -1) (undo-tree-id4698 . -1) (undo-tree-id4699 . -1) 679) nil (26040 46743 368580 341000) 0 nil])
([nil nil ((689 . 690)) nil (26040 46743 368562 280000) 0 nil])
([nil nil ((641 . 649) (#("       " 0 7 (fontified t)) . 641) 690 (t 26040 46743 416470 852000)) nil (26040 46754 931887 215000) 0 nil])
([nil nil ((691 . 692)) nil (26040 46754 931885 840000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -691) (undo-tree-id4838 . -1) (undo-tree-id4839 . -1) (undo-tree-id4840 . -1) (undo-tree-id4841 . -1) (undo-tree-id4842 . -1) 692) nil (26040 46754 931883 712000) 0 nil])
([nil nil ((649 . 657)) nil (26040 46754 931870 253000) 0 nil])
([nil nil ((700 . 708) (#("     " 0 5 (fontified nil)) . 700) (699 . 700) (t 26040 46754 979804 895000)) nil (26040 46767 679522 436000) 0 nil])
([nil nil ((721 . 722)) nil (26040 46767 679521 437000) 0 nil])
([nil nil ((apply yas--snippet-revive 721 731 #s(yas--snippet nil nil #s(yas--exit 730 nil) 44 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 730 nil) 44 nil nil nil nil)) (721 . 731) (#("println!($0)" 0 12 (fontified nil)) . 721) (721 . 733) (#("p" 0 1 (fontified nil)) . 721) (721 . 722) (#("println!(…)" 0 11 (fontified nil)) . -721) (721 . 732) (#("p" 0 1 (fontified t)) . -721) (undo-tree-id4843 . -1) (undo-tree-id4844 . -1) (undo-tree-id4845 . -1) (undo-tree-id4846 . -1) (undo-tree-id4847 . -1) (undo-tree-id4848 . -1) 722) nil (26040 46767 679519 197000) 0 nil])
([nil nil ((730 . 732)) nil (26040 46767 679506 583000) 0 nil])
([nil nil ((731 . 733)) nil (26040 46767 679505 982000) 0 nil])
([nil nil ((734 . 737)) nil (26040 46767 679504 760000) 0 nil])
([nil nil ((738 . 739)) nil (26040 46767 679500 834000) 0 nil])
([nil nil ((731 . 739) (t 26040 46767 696472 343000)) nil (26040 46772 125161 942000) 0 nil])
([nil nil ((#("println!(\"result: {}\", n);" 0 8 (face rust-builtin-formatting-macro fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t) 9 18 (face font-lock-string-face fontified t) 18 20 (face rust-string-interpolation fontified t) 20 21 (face font-lock-string-face fontified t) 21 24 (fontified t) 24 25 (face (rainbow-delimiters-depth-2-face) fontified t) 25 26 (fontified t)) . 721) (undo-tree-id4851 . -22) (undo-tree-id4852 . 8) (undo-tree-id4853 . -18) (undo-tree-id4854 . -18) (undo-tree-id4855 . -18) (undo-tree-id4856 . -18) (undo-tree-id4857 . -18) (undo-tree-id4858 . -18) (undo-tree-id4859 . -18) (undo-tree-id4860 . -18) (undo-tree-id4861 . -18) (undo-tree-id4862 . -18) (undo-tree-id4863 . -18) (undo-tree-id4864 . -18) (undo-tree-id4865 . -18) (undo-tree-id4866 . -18) (undo-tree-id4867 . -18) (undo-tree-id4868 . -18) (undo-tree-id4869 . -18) (undo-tree-id4870 . -18) (undo-tree-id4871 . -19) (undo-tree-id4872 . -20) (undo-tree-id4873 . -26) (undo-tree-id4874 . -26) (undo-tree-id4875 . -26) (undo-tree-id4876 . -26) (undo-tree-id4877 . -26) (undo-tree-id4878 . -26) (undo-tree-id4879 . -26) (t 26040 46772 139805 950000)) nil (26040 46785 939535 437000) 0 nil])
([nil nil ((nil rear-nonsticky nil 729 . 730) (nil fontified nil 729 . 730) (nil fontified nil 728 . 729) (nil fontified nil 725 . 728) (nil fontified nil 724 . 725) (nil fontified nil 722 . 724) (nil fontified nil 713 . 722) (nil fontified nil 712 . 713) (nil fontified nil 704 . 712) (704 . 730)) nil (26040 46785 939512 467000) 0 nil])
([nil nil ((700 . 708) (#("    " 0 4 (fontified t)) . 700) (undo-tree-id4849 . -4) (undo-tree-id4850 . -4) 730) nil (26040 46785 939507 867000) 0 nil])
([nil nil ((735 . 743) (#("    " 0 4 (fontified nil)) . 734) (undo-tree-id4884 . -4) (undo-tree-id4885 . -4) (undo-tree-id4886 . -4) (undo-tree-id4887 . -4) (undo-tree-id4888 . -4) (undo-tree-id4889 . -4) (undo-tree-id4890 . -4) (undo-tree-id4891 . -4) (undo-tree-id4892 . -4) (undo-tree-id4893 . -4) (undo-tree-id4894 . -4) (undo-tree-id4895 . -4) (738 . 739) (t 26040 46785 956473 464000)) nil (26040 46824 268369 20000) 0 nil])
([nil nil ((nil rear-nonsticky nil 813 . 814) (nil fontified nil 743 . 814) (743 . 814)) nil (26040 46824 268358 763000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -743) 773) nil (26040 46824 268357 642000) 0 nil])
([nil nil ((770 . 778) (#("    " 0 4 (fontified t)) . 770) 804) nil (26040 46824 268356 486000) 0 nil])
([nil nil ((743 . 748)) nil (26040 46824 268355 228000) 0 nil])
([nil nil ((783 . 788)) nil (26040 46824 268354 474000) 0 nil])
([nil nil ((788 . 789)) nil (26040 46824 268353 162000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -788) (undo-tree-id4880 . -1) (undo-tree-id4881 . -1) (undo-tree-id4882 . -1) (undo-tree-id4883 . -1) 789) nil (26040 46824 268349 221000) 0 nil])
([nil nil ((#("image" 0 5 (fontified t)) . -767) (undo-tree-id4906 . -5) (undo-tree-id4907 . -5) (undo-tree-id4908 . -5) (undo-tree-id4909 . -5) (undo-tree-id4910 . -5) (undo-tree-id4911 . -5) (undo-tree-id4912 . -5) (undo-tree-id4913 . -5) (undo-tree-id4914 . -5) (undo-tree-id4915 . -5) (undo-tree-id4916 . -5) (undo-tree-id4917 . -5) (undo-tree-id4918 . -5) (undo-tree-id4919 . -5) 772 (t 26040 46824 316475 820000)) nil (26040 46829 463331 696000) 0 nil])
([nil nil ((767 . 768)) nil (26040 46829 463320 246000) 0 nil])
([nil nil ((767 . 777) (#("z" 0 1 (fontified nil)) . 767) (767 . 768) (#("zbar_image" 0 10 (fontified nil)) . -767) (767 . 777) (#("z" 0 1 (fontified t)) . -767) (undo-tree-id4896 . -1) (undo-tree-id4897 . -1) (undo-tree-id4898 . -1) (undo-tree-id4899 . -1) (undo-tree-id4900 . -1) (undo-tree-id4901 . -1) (undo-tree-id4902 . -1) (undo-tree-id4903 . -1) (undo-tree-id4904 . -1) (undo-tree-id4905 . -1) 768) nil (26040 46829 463315 975000) 0 nil])
([nil nil ((736 . 744) (#("        " 0 8 (fontified nil)) . 735) (undo-tree-id4920 . -8) (undo-tree-id4921 . -8) (undo-tree-id4922 . -8) (undo-tree-id4923 . -8) (734 . 744) (t 26040 46829 479809 470000)) nil (26040 46836 906625 364000) 0 nil])
([nil nil ((753 . 755) (t 26040 46836 913143 260000)) nil (26040 46861 670724 161000) 0 nil])
([nil nil ((800 . 802)) nil (26040 46861 670720 312000) 0 nil])
([nil nil ((#("println!(\"Hello, world!\");" 0 8 (face rust-builtin-formatting-macro fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t) 9 24 (face font-lock-string-face fontified t) 24 25 (face (rainbow-delimiters-depth-2-face) fontified t) 25 26 (fontified t)) . 861) (undo-tree-id4940 . -6) (undo-tree-id4941 . -26) (t 26040 46861 686478 115000)) nil (26040 46865 490804 321000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 861) (undo-tree-id4939 . -1)) nil (26040 46865 490801 438000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -857) (undo-tree-id4924 . -4) (undo-tree-id4925 . -4) (undo-tree-id4926 . -4) (undo-tree-id4927 . -4) (undo-tree-id4928 . -4) (undo-tree-id4929 . -4) (undo-tree-id4930 . -4) (undo-tree-id4931 . -4) (undo-tree-id4932 . -4) (undo-tree-id4933 . -4) (undo-tree-id4934 . -4) (undo-tree-id4935 . -4) (undo-tree-id4936 . -4) (undo-tree-id4937 . -4) (undo-tree-id4938 . -4) 861) nil (26040 46865 490797 1000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -753) (undo-tree-id4949 . -1) (undo-tree-id4950 . -1) (undo-tree-id4951 . -1) (undo-tree-id4952 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -754) (undo-tree-id4953 . -1) (undo-tree-id4954 . -1) 755 (t 26040 46865 539811 684000)) nil (26040 46875 401171 600000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -798) (undo-tree-id4942 . -1) (undo-tree-id4943 . -1) (undo-tree-id4944 . -1) (undo-tree-id4945 . -1) (undo-tree-id4946 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -799) (undo-tree-id4947 . -1) (undo-tree-id4948 . -1) 800) nil (26040 46875 401162 290000) 0 nil])
([nil nil ((649 . 651) (t 26040 46875 416478 958000)) nil (26040 46942 345905 804000) 0 nil])
([nil nil ((710 . 712)) nil (26040 46942 345901 563000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -649) (undo-tree-id4955 . -1) (undo-tree-id4956 . -1) (undo-tree-id4957 . -1) (undo-tree-id4958 . -1) (undo-tree-id4959 . -1) (undo-tree-id4960 . -1) (undo-tree-id4961 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -650) (undo-tree-id4962 . -1) (undo-tree-id4963 . -1) (undo-tree-id4964 . -1) (undo-tree-id4965 . -1) (undo-tree-id4966 . -1) 651 (t 26040 46942 363149 736000)) nil (26040 46950 203489 805000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -708) (undo-tree-id4967 . -1) (undo-tree-id4968 . -1) (undo-tree-id4969 . -1) (undo-tree-id4970 . -1) (undo-tree-id4971 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -709) (undo-tree-id4972 . -1) (undo-tree-id4973 . -1) 710 (t 26040 46950 223150 218000)) nil (26040 46955 564928 663000) 0 nil])
([nil nil ((264 . 273) (t 26040 46955 569817 210000)) nil (26040 47125 188455 329000) 0 nil])
([nil nil ((273 . 281)) nil (26040 47125 188454 520000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -278) (undo-tree-id5254 . -1) (undo-tree-id5255 . -1) (undo-tree-id5256 . -1) (undo-tree-id5257 . -1) (undo-tree-id5258 . -1) (undo-tree-id5259 . -1) (undo-tree-id5260 . -1) (undo-tree-id5261 . -1) (undo-tree-id5262 . -1) (undo-tree-id5263 . -1) (undo-tree-id5264 . -1) (undo-tree-id5265 . -1) (undo-tree-id5266 . -1) (undo-tree-id5267 . -1) (undo-tree-id5268 . -1) (undo-tree-id5269 . -1) (undo-tree-id5270 . -1) (undo-tree-id5271 . -1) (#("o" 0 1 (fontified t)) . -279) (undo-tree-id5272 . -1) (undo-tree-id5273 . -1) (undo-tree-id5274 . -1) (undo-tree-id5275 . -1) (undo-tree-id5276 . -1) (undo-tree-id5277 . -1) (undo-tree-id5278 . -1) (undo-tree-id5279 . -1) (undo-tree-id5280 . -1) (undo-tree-id5281 . -1) (undo-tree-id5282 . -1) (undo-tree-id5283 . -1) (#("r" 0 1 (face font-lock-keyword-face fontified t)) . -280) (undo-tree-id5284 . -1) (undo-tree-id5285 . -1) (undo-tree-id5286 . -1) (undo-tree-id5287 . -1) (undo-tree-id5288 . -1) (undo-tree-id5289 . -1) (undo-tree-id5290 . -1) (undo-tree-id5291 . -1) 281) nil (26040 47125 188452 388000) 0 nil])
([nil nil ((278 . 280)) nil (26040 47125 188427 129000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -278) (undo-tree-id5242 . -1) (undo-tree-id5243 . -1) (undo-tree-id5244 . -1) (undo-tree-id5245 . -1) (undo-tree-id5246 . -1) (undo-tree-id5247 . -1) (undo-tree-id5248 . -1) (undo-tree-id5249 . -1) (undo-tree-id5250 . -1) (#("a" 0 1 (fontified t)) . -279) (undo-tree-id5251 . -1) (undo-tree-id5252 . -1) (undo-tree-id5253 . -1) 280) nil (26040 47125 188425 880000) 0 nil])
([nil nil ((278 . 283)) nil (26040 47125 188417 93000) 0 nil])
([nil nil ((#("ffi::parse" 0 3 (face font-lock-constant-face fontified t) 3 10 (fontified t)) . 273) (undo-tree-id5179 . -5) (undo-tree-id5180 . -1) (undo-tree-id5181 . -1) (undo-tree-id5182 . -2) (undo-tree-id5183 . -2) (undo-tree-id5184 . -3) (undo-tree-id5185 . -3) (undo-tree-id5186 . -4) (undo-tree-id5187 . -4) (undo-tree-id5188 . -4) (undo-tree-id5189 . -5) (undo-tree-id5190 . -5) (undo-tree-id5191 . -5) (undo-tree-id5192 . -5) (undo-tree-id5193 . -5) (undo-tree-id5194 . -5) (undo-tree-id5195 . -5) (undo-tree-id5196 . -5) (undo-tree-id5197 . -5) (undo-tree-id5198 . -5) (undo-tree-id5199 . -5) (undo-tree-id5200 . -5) (undo-tree-id5201 . -5) (undo-tree-id5202 . -5) (undo-tree-id5203 . -5) (undo-tree-id5204 . -5) (undo-tree-id5205 . -5) (undo-tree-id5206 . -5) (undo-tree-id5207 . -5) (undo-tree-id5208 . -5) (undo-tree-id5209 . -5) (undo-tree-id5210 . -5) (undo-tree-id5211 . -5) (undo-tree-id5212 . -5) (undo-tree-id5213 . -5) (undo-tree-id5214 . -5) (undo-tree-id5215 . -5) (undo-tree-id5216 . -5) (undo-tree-id5217 . -5) (undo-tree-id5218 . -5) (undo-tree-id5219 . -5) (undo-tree-id5220 . -5) (undo-tree-id5221 . -5) (undo-tree-id5222 . -5) (undo-tree-id5223 . -5) (undo-tree-id5224 . -6) (undo-tree-id5225 . -6) (undo-tree-id5226 . -6) (undo-tree-id5227 . -7) (undo-tree-id5228 . -7) (undo-tree-id5229 . -8) (undo-tree-id5230 . -8) (undo-tree-id5231 . -8) (undo-tree-id5232 . -8) (undo-tree-id5233 . -9) (undo-tree-id5234 . -9) (undo-tree-id5235 . -9) (undo-tree-id5236 . -10) (undo-tree-id5237 . -10) (undo-tree-id5238 . -10) (undo-tree-id5239 . -10) (undo-tree-id5240 . -10) (undo-tree-id5241 . -10)) nil (26040 47125 188414 160000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 273) (undo-tree-id5176 . -1) (undo-tree-id5177 . 1) (undo-tree-id5178 . -1)) nil (26040 47125 188353 390000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -273) (undo-tree-id5175 . 8)) nil (26040 47125 188350 274000) 0 nil])
([nil nil ((266 . 274) (#("        " 0 8 (fontified nil)) . 265) (undo-tree-id5093 . -8) (undo-tree-id5094 . -8) (undo-tree-id5095 . -8) (undo-tree-id5096 . -8) (undo-tree-id5097 . -8) (undo-tree-id5098 . -8) (undo-tree-id5099 . -8) (undo-tree-id5100 . -8) (undo-tree-id5101 . -8) (undo-tree-id5102 . -8) (undo-tree-id5103 . -8) (undo-tree-id5104 . -8) (undo-tree-id5105 . -8) (undo-tree-id5106 . -8) (undo-tree-id5107 . -8) (undo-tree-id5108 . -8) (undo-tree-id5109 . -8) (undo-tree-id5110 . -8) (undo-tree-id5111 . -8) (undo-tree-id5112 . -8) (undo-tree-id5113 . -8) (undo-tree-id5114 . -8) (undo-tree-id5115 . -8) (undo-tree-id5116 . -8) (undo-tree-id5117 . -8) (undo-tree-id5118 . -8) (undo-tree-id5119 . -8) (undo-tree-id5120 . -8) (undo-tree-id5121 . -8) (undo-tree-id5122 . -8) (undo-tree-id5123 . -8) (undo-tree-id5124 . -8) (undo-tree-id5125 . -8) (undo-tree-id5126 . -8) (undo-tree-id5127 . -8) (undo-tree-id5128 . -8) (undo-tree-id5129 . -8) (undo-tree-id5130 . -8) (undo-tree-id5131 . -8) (undo-tree-id5132 . -8) (undo-tree-id5133 . -8) (undo-tree-id5134 . -8) (undo-tree-id5135 . -8) (undo-tree-id5136 . -8) (undo-tree-id5137 . -8) (undo-tree-id5138 . -8) (undo-tree-id5139 . -8) (undo-tree-id5140 . -8) (undo-tree-id5141 . -8) (undo-tree-id5142 . -8) (undo-tree-id5143 . -8) (undo-tree-id5144 . -8) (undo-tree-id5145 . -8) (undo-tree-id5146 . -8) (undo-tree-id5147 . -8) (undo-tree-id5148 . -8) (undo-tree-id5149 . -8) (undo-tree-id5150 . -8) (undo-tree-id5151 . -8) (undo-tree-id5152 . -8) (undo-tree-id5153 . -8) (undo-tree-id5154 . -8) (undo-tree-id5155 . -8) (undo-tree-id5156 . -8) (undo-tree-id5157 . -8) (undo-tree-id5158 . -8) (undo-tree-id5159 . -8) (undo-tree-id5160 . -8) (undo-tree-id5161 . -8) (undo-tree-id5162 . -8) (undo-tree-id5163 . -8) (undo-tree-id5164 . -8) (undo-tree-id5165 . -8) (undo-tree-id5166 . -8) (undo-tree-id5167 . -8) (undo-tree-id5168 . -8) (undo-tree-id5169 . -8) (undo-tree-id5170 . -8) (undo-tree-id5171 . -8) (undo-tree-id5172 . -8) (undo-tree-id5173 . -8) (undo-tree-id5174 . -8) (273 . 274)) nil (26040 47125 188345 749000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -273) (undo-tree-id5086 . -1) (undo-tree-id5087 . -1) (undo-tree-id5088 . -1) (undo-tree-id5089 . -1) (undo-tree-id5090 . -1) (undo-tree-id5091 . -1) (undo-tree-id5092 . -1) 274) nil (26040 47125 187887 725000) 0 nil])
([nil nil ((266 . 274) (#("       " 0 7 (fontified t)) . 266) (undo-tree-id5071 . -7) (undo-tree-id5072 . -7) (undo-tree-id5073 . -7) (undo-tree-id5074 . -7) (undo-tree-id5075 . -7) (undo-tree-id5076 . -7) (undo-tree-id5077 . -7) (undo-tree-id5078 . -7) (undo-tree-id5079 . -7) (undo-tree-id5080 . -7) (undo-tree-id5081 . -7) (undo-tree-id5082 . -7) (undo-tree-id5083 . -7) (undo-tree-id5084 . -7) (undo-tree-id5085 . -7) 273) nil (26040 47125 187880 964000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -264) (undo-tree-id4974 . -1) (undo-tree-id4975 . -1) (undo-tree-id4976 . 1) (undo-tree-id4977 . -1) (undo-tree-id4978 . -1) (undo-tree-id4979 . -1) (undo-tree-id4980 . -1) (undo-tree-id4981 . -1) (undo-tree-id4982 . -1) (undo-tree-id4983 . -1) (undo-tree-id4984 . -1) (undo-tree-id4985 . -1) (undo-tree-id4986 . -1) (undo-tree-id4987 . -1) (undo-tree-id4988 . -1) (undo-tree-id4989 . -1) (undo-tree-id4990 . -1) (undo-tree-id4991 . -1) (undo-tree-id4992 . -1) (undo-tree-id4993 . -1) (undo-tree-id4994 . -1) (undo-tree-id4995 . -1) (undo-tree-id4996 . -1) (undo-tree-id4997 . -1) (undo-tree-id4998 . -1) (undo-tree-id4999 . -1) (undo-tree-id5000 . -1) (undo-tree-id5001 . -1) (undo-tree-id5002 . -1) (undo-tree-id5003 . -1) (undo-tree-id5004 . -1) (undo-tree-id5005 . -1) (undo-tree-id5006 . -1) (undo-tree-id5007 . -1) (undo-tree-id5008 . -1) (undo-tree-id5009 . -1) (undo-tree-id5010 . -1) (undo-tree-id5011 . -1) (undo-tree-id5012 . -1) (undo-tree-id5013 . -1) (undo-tree-id5014 . -1) (undo-tree-id5015 . -1) (undo-tree-id5016 . -1) (undo-tree-id5017 . -1) (undo-tree-id5018 . -1) (undo-tree-id5019 . -1) (undo-tree-id5020 . -1) (undo-tree-id5021 . -1) (undo-tree-id5022 . -1) (undo-tree-id5023 . -1) (undo-tree-id5024 . -1) (undo-tree-id5025 . -1) (undo-tree-id5026 . -1) (undo-tree-id5027 . -1) (undo-tree-id5028 . -1) (undo-tree-id5029 . -1) (undo-tree-id5030 . -1) (undo-tree-id5031 . -1) (undo-tree-id5032 . -1) (undo-tree-id5033 . -1) (undo-tree-id5034 . -1) (undo-tree-id5035 . -1) (undo-tree-id5036 . -1) (undo-tree-id5037 . -1) (undo-tree-id5038 . -1) (undo-tree-id5039 . -1) (undo-tree-id5040 . -1) (undo-tree-id5041 . -1) (undo-tree-id5042 . -1) (undo-tree-id5043 . -1) (undo-tree-id5044 . -1) (undo-tree-id5045 . -1) (undo-tree-id5046 . -1) (undo-tree-id5047 . -1) (undo-tree-id5048 . -1) (undo-tree-id5049 . -1) (undo-tree-id5050 . -1) (undo-tree-id5051 . -1) (undo-tree-id5052 . -1) (undo-tree-id5053 . -1) (undo-tree-id5054 . -1) (undo-tree-id5055 . -1) (undo-tree-id5056 . -1) (undo-tree-id5057 . -1) (undo-tree-id5058 . -1) (undo-tree-id5059 . -1) (undo-tree-id5060 . -1) (undo-tree-id5061 . -1) (undo-tree-id5062 . -1) (undo-tree-id5063 . -1) (undo-tree-id5064 . -1) (undo-tree-id5065 . -1) (undo-tree-id5066 . -1) (undo-tree-id5067 . -1) (undo-tree-id5068 . -1) (undo-tree-id5069 . -1) (undo-tree-id5070 . -1) 265) nil (26040 47125 187863 345000) 0 nil])
([nil nil ((#("pub const Y800: u32 = 0x5945_5247;
pub const Y8: u32 = 0x2020_3859;" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 9 (face font-lock-keyword-face fontified t) 9 10 (fontified t) 10 14 (face font-lock-variable-name-face fontified t) 14 16 (fontified t) 16 19 (face font-lock-type-face fontified t) 19 22 (fontified t) 22 33 (fontified t) 33 35 (fontified t) 35 38 (face font-lock-keyword-face fontified t) 38 39 (fontified t) 39 44 (face font-lock-keyword-face fontified t) 44 45 (fontified t) 45 47 (face font-lock-variable-name-face fontified t) 47 49 (fontified t) 49 52 (face font-lock-type-face fontified t) 52 55 (fontified t) 55 66 (fontified t) 66 67 (fontified t rear-nonsticky t)) . 76) (undo-tree-id5292 . -67) (undo-tree-id5293 . -30) (undo-tree-id5294 . -67) (undo-tree-id5295 . -67) (undo-tree-id5296 . -67) (undo-tree-id5297 . -66) (undo-tree-id5298 . -63) (undo-tree-id5299 . -60) (undo-tree-id5300 . -58) (undo-tree-id5301 . -56) (undo-tree-id5302 . -54) (undo-tree-id5303 . -52) (undo-tree-id5304 . -15) (undo-tree-id5305 . -13) (undo-tree-id5306 . -12) (undo-tree-id5307 . -10) (undo-tree-id5308 . -9) (undo-tree-id5309 . -8) (undo-tree-id5310 . -7) (undo-tree-id5311 . -6) (undo-tree-id5312 . -5) (undo-tree-id5313 . -4) (undo-tree-id5314 . -3) (undo-tree-id5315 . -2) (undo-tree-id5316 . -1) (undo-tree-id5317 . -67) (t 26040 47125 236494 283000)) nil (26040 47196 589373 503000) 0 nil])
([nil nil ((nil rear-nonsticky nil 311 . 312) (nil fontified nil 311 . 312) (nil fontified nil 310 . 311) (nil fontified nil 304 . 310) (nil fontified nil 303 . 304) (nil fontified nil 302 . 303) (nil fontified nil 301 . 302) (nil fontified nil 300 . 301) (nil fontified nil 296 . 300) (nil fontified nil 295 . 296) (nil fontified nil 287 . 295) (nil fontified nil 286 . 287) (nil fontified nil 285 . 286) (nil fontified nil 261 . 285) (nil fontified nil 260 . 261) (nil fontified nil 254 . 260) (nil fontified nil 253 . 254) (nil fontified nil 252 . 253) (nil fontified nil 251 . 252) (nil fontified nil 250 . 251) (nil fontified nil 246 . 250) (nil fontified nil 245 . 246) (nil fontified nil 237 . 245) (nil fontified nil 236 . 237) (nil fontified nil 235 . 236) (nil fontified nil 210 . 235) (nil fontified nil 209 . 210) (nil fontified nil 204 . 209) (nil fontified nil 203 . 204) (nil fontified nil 202 . 203) (nil fontified nil 201 . 202) (nil fontified nil 200 . 201) (nil fontified nil 196 . 200) (nil fontified nil 195 . 196) (nil fontified nil 187 . 195) (nil fontified nil 186 . 187) (nil fontified nil 185 . 186) (nil fontified nil 153 . 185) (nil fontified nil 152 . 153) (nil fontified nil 151 . 152) (nil fontified nil 150 . 151) (nil fontified nil 149 . 150) (nil fontified nil 145 . 149) (nil fontified nil 144 . 145) (nil fontified nil 136 . 144) (nil fontified nil 135 . 136) (nil fontified nil 134 . 135) (nil fontified nil 107 . 134) (nil fontified nil 106 . 107) (nil fontified nil 105 . 106) (nil fontified nil 103 . 105) (nil fontified nil 102 . 103) (nil fontified nil 100 . 102) (nil fontified nil 99 . 100) (nil fontified nil 97 . 99) (nil fontified nil 96 . 97) (nil fontified nil 95 . 96) (nil fontified nil 84 . 95) (nil fontified nil 83 . 84) (nil fontified nil 77 . 83) (nil fontified nil 76 . 77) (76 . 312)) nil (26040 47196 589343 25000) 0 nil])
([nil nil ((314 . 318) (#("    " 0 4 (fontified nil)) . 313) (undo-tree-id5525 . -4) (undo-tree-id5526 . -4) (undo-tree-id5527 . -4) (undo-tree-id5528 . -4) (312 . 318) (t 26040 47196 596498 656000)) nil (26040 47243 591613 515000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -314) (undo-tree-id5493 . -1) (undo-tree-id5494 . -1) (undo-tree-id5495 . -1) (undo-tree-id5496 . -1) (undo-tree-id5497 . -1) (undo-tree-id5498 . -1) (undo-tree-id5499 . -1) (undo-tree-id5500 . -1) (undo-tree-id5501 . -1) (undo-tree-id5502 . -1) (undo-tree-id5503 . -1) (#(" " 0 1 (fontified t)) . -315) (undo-tree-id5504 . -1) (undo-tree-id5505 . -1) (undo-tree-id5506 . -1) (undo-tree-id5507 . -1) (undo-tree-id5508 . -1) (undo-tree-id5509 . -1) (undo-tree-id5510 . -1) (undo-tree-id5511 . -1) (undo-tree-id5512 . -1) (#(" " 0 1 (fontified t)) . -316) (undo-tree-id5513 . -1) (undo-tree-id5514 . -1) (undo-tree-id5515 . -1) (undo-tree-id5516 . -1) (undo-tree-id5517 . -1) (undo-tree-id5518 . -1) (undo-tree-id5519 . -1) (#(" " 0 1 (fontified t)) . -317) (undo-tree-id5520 . -1) (undo-tree-id5521 . -1) (undo-tree-id5522 . -1) (undo-tree-id5523 . -1) (undo-tree-id5524 . -1) 318) nil (26040 47243 591607 697000) 0 nil])
([nil nil ((314 . 317)) nil (26040 47243 740948 712000) 0 nil])
([nil nil ((apply -15 76 328 undo--wrap-and-run-primitive-undo 76 328 ((288 . 291) (235 . 238) (182 . 185) (129 . 132) (76 . 79)))) nil (26040 47287 380638 962000) 0 nil] [nil nil ((#("
#define zbar_fourcc(a, b, c, d)                 \\
        ((unsigned long)(a) |                   \\
         ((unsigned long)(b) << 8) |            \\
         ((unsigned long)(c) << 16) |           \\
         ((unsigned long)(d) << 24))" 0 1 (fontified t) 1 2 (fontified t c-in-sws t c-is-sws t) 2 8 (fontified t c-in-sws t) 8 9 (fontified t c-in-sws t) 9 20 (fontified t c-in-sws t) 20 21 (face (rainbow-delimiters-depth-1-face) fontified t c-in-sws t) 21 22 (fontified t c-in-sws t) 22 24 (fontified t c-in-sws t) 24 25 (fontified t c-in-sws t) 25 27 (fontified t c-in-sws t) 27 28 (fontified t c-in-sws t) 28 30 (fontified t c-in-sws t) 30 31 (fontified t c-in-sws t) 31 32 (face (rainbow-delimiters-depth-1-face) fontified t c-in-sws t) 32 59 (fontified t c-in-sws t) 59 60 (face (rainbow-delimiters-depth-1-face) fontified t c-in-sws t) 60 61 (face (rainbow-delimiters-depth-2-face) fontified t c-in-sws t) 61 69 (fontified t c-in-sws t) 69 70 (fontified t c-in-sws t) 70 74 (fontified t c-in-sws t) 74 75 (face (rainbow-delimiters-depth-2-face) fontified t c-in-sws t) 75 76 (face (rainbow-delimiters-depth-2-face) fontified t c-in-sws t) 76 77 (fontified t c-in-sws t) 77 78 (face (rainbow-delimiters-depth-2-face) fontified t c-in-sws t) 78 110 (fontified t c-in-sws t) 110 111 (face (rainbow-delimiters-depth-2-face) fontified t c-in-sws t) 111 112 (face (rainbow-delimiters-depth-3-face) fontified t c-in-sws t) 112 120 (fontified t c-in-sws t) 120 121 (fontified t c-in-sws t) 121 125 (fontified t c-in-sws t) 125 126 (face (rainbow-delimiters-depth-3-face) fontified t c-in-sws t) 126 127 (face (rainbow-delimiters-depth-3-face) fontified t c-in-sws t) 127 128 (fontified t c-in-sws t) 128 129 (face (rainbow-delimiters-depth-3-face) fontified t c-in-sws t) 129 130 (fontified t c-in-sws t) 130 131 (syntax-table (1) fontified t c-in-sws t) 131 132 (syntax-table (1) fontified t c-in-sws t) 132 134 (fontified t c-in-sws t) 134 135 (face (rainbow-delimiters-depth-2-face) fontified t c-in-sws t) 135 160 (fontified t c-in-sws t) 160 161 (face (rainbow-delimiters-depth-2-face) fontified t c-in-sws t) 161 162 (face (rainbow-delimiters-depth-3-face) fontified t c-in-sws t) 162 170 (fontified t c-in-sws t) 170 171 (fontified t c-in-sws t) 171 175 (fontified t c-in-sws t) 175 176 (face (rainbow-delimiters-depth-3-face) fontified t c-in-sws t) 176 177 (face (rainbow-delimiters-depth-3-face) fontified t c-in-sws t) 177 178 (fontified t c-in-sws t) 178 179 (face (rainbow-delimiters-depth-3-face) fontified t c-in-sws t) 179 180 (fontified t c-in-sws t) 180 181 (syntax-table (1) fontified t c-in-sws t) 181 182 (syntax-table (1) fontified t c-in-sws t) 182 185 (fontified t c-in-sws t) 185 186 (face (rainbow-delimiters-depth-2-face) fontified t c-in-sws t) 186 201 (fontified t c-in-sws t) 201 210 (fontified t c-in-sws t) 210 211 (face (rainbow-delimiters-depth-2-face) fontified t c-in-sws t) 211 212 (face (rainbow-delimiters-depth-3-face) fontified t c-in-sws t) 212 220 (fontified t c-in-sws t) 220 221 (fontified t c-in-sws t) 221 225 (fontified t c-in-sws t) 225 226 (face (rainbow-delimiters-depth-3-face) fontified t c-in-sws t) 226 227 (face (rainbow-delimiters-depth-3-face) fontified t c-in-sws t) 227 228 (fontified t c-in-sws t) 228 229 (face (rainbow-delimiters-depth-3-face) fontified t c-in-sws t) 229 230 (fontified t c-in-sws t) 230 231 (syntax-table (1) fontified t c-in-sws t) 231 232 (syntax-table (1) fontified t c-in-sws t) 232 235 (fontified t c-in-sws t) 235 236 (face (rainbow-delimiters-depth-2-face) fontified t c-in-sws t) 236 237 (face (rainbow-delimiters-depth-1-face) rear-nonsticky t fontified t c-in-sws t)) . 75) (undo-tree-id5318 . -237) (undo-tree-id5319 . -1) (undo-tree-id5320 . -1) (undo-tree-id5321 . -1) (undo-tree-id5322 . -1) (undo-tree-id5323 . -1) (undo-tree-id5324 . -1) (undo-tree-id5325 . -1) (undo-tree-id5326 . -1) (undo-tree-id5327 . -1) (undo-tree-id5328 . -1) (undo-tree-id5329 . -1) (undo-tree-id5330 . -1) (undo-tree-id5331 . -1) (undo-tree-id5332 . -1) (undo-tree-id5333 . -1) (undo-tree-id5334 . -1) (undo-tree-id5335 . -1) (undo-tree-id5336 . -1) (undo-tree-id5337 . -1) (undo-tree-id5338 . -1) (undo-tree-id5339 . -1) (undo-tree-id5340 . -1) (undo-tree-id5341 . -1) (undo-tree-id5342 . -1) (undo-tree-id5343 . -1) (undo-tree-id5344 . -1) (undo-tree-id5345 . -14) (undo-tree-id5346 . -14) (undo-tree-id5347 . -14) (undo-tree-id5348 . -14) (undo-tree-id5349 . -14) (undo-tree-id5350 . -14) (undo-tree-id5351 . -14) (undo-tree-id5352 . -14) (undo-tree-id5353 . -237) (undo-tree-id5354 . -237) (undo-tree-id5355 . -237) (undo-tree-id5356 . -236) (undo-tree-id5357 . -232) (undo-tree-id5358 . -231) (undo-tree-id5359 . -230) (undo-tree-id5360 . -228) (undo-tree-id5361 . -177) (undo-tree-id5362 . -175) (undo-tree-id5363 . -174) (undo-tree-id5364 . -172) (undo-tree-id5365 . -171) (undo-tree-id5366 . -170) (undo-tree-id5367 . -169) (undo-tree-id5368 . -168) (undo-tree-id5369 . -167) (undo-tree-id5370 . -116) (undo-tree-id5371 . -115) (undo-tree-id5372 . -114) (undo-tree-id5373 . -113) (undo-tree-id5374 . -112) (undo-tree-id5375 . -111) (undo-tree-id5376 . -110) (undo-tree-id5377 . -109) (undo-tree-id5378 . -58) (undo-tree-id5379 . -57) (undo-tree-id5380 . -14) (undo-tree-id5381 . -237) (undo-tree-id5382 . -57) (undo-tree-id5383 . -57) (undo-tree-id5384 . -237) (undo-tree-id5385 . -237) (undo-tree-id5386 . -237) (undo-tree-id5387 . -237) (undo-tree-id5388 . -237) (undo-tree-id5389 . -237) (undo-tree-id5390 . -237) (undo-tree-id5391 . -237) (undo-tree-id5392 . -237) (undo-tree-id5393 . -237) (undo-tree-id5394 . -237) (undo-tree-id5395 . -237) (undo-tree-id5396 . -237) (undo-tree-id5397 . -237) (undo-tree-id5398 . -237) (undo-tree-id5399 . -237) (undo-tree-id5400 . -204) (undo-tree-id5401 . -54) (undo-tree-id5402 . -54) (undo-tree-id5403 . -54) (undo-tree-id5404 . -54) (undo-tree-id5405 . -237) (undo-tree-id5406 . -237) (undo-tree-id5407 . -237) (undo-tree-id5408 . -231) (undo-tree-id5409 . -229) (undo-tree-id5410 . -227) (undo-tree-id5411 . -226) (undo-tree-id5412 . -225) (undo-tree-id5413 . -224) (undo-tree-id5414 . -223) (undo-tree-id5415 . -222) (undo-tree-id5416 . -221) (undo-tree-id5417 . -220) (undo-tree-id5418 . -219) (undo-tree-id5419 . -218) (undo-tree-id5420 . -166) (undo-tree-id5421 . -164) (undo-tree-id5422 . -113) (undo-tree-id5423 . -112) (undo-tree-id5424 . -111) (undo-tree-id5425 . -110) (undo-tree-id5426 . -109) (undo-tree-id5427 . -58) (undo-tree-id5428 . -57) (undo-tree-id5429 . -56) (undo-tree-id5430 . -55) (undo-tree-id5431 . -54) (undo-tree-id5432 . -3) (undo-tree-id5433 . -2) (undo-tree-id5434 . -1) (undo-tree-id5435 . -237) (undo-tree-id5436 . -237) (undo-tree-id5437 . -237) (undo-tree-id5438 . -1) (undo-tree-id5439 . -1) (undo-tree-id5440 . -1) (undo-tree-id5441 . -1) (undo-tree-id5442 . -1) (undo-tree-id5443 . -1) (undo-tree-id5444 . -1) (undo-tree-id5445 . -1) (undo-tree-id5446 . -1) (undo-tree-id5447 . -1) (undo-tree-id5448 . -1) (undo-tree-id5449 . -1) (undo-tree-id5450 . -1) (undo-tree-id5451 . -1) (undo-tree-id5452 . -1) (undo-tree-id5453 . -1) (undo-tree-id5454 . -1) (undo-tree-id5455 . -1) (undo-tree-id5456 . -1) (undo-tree-id5457 . -1) (undo-tree-id5458 . -1) (undo-tree-id5459 . -1) (undo-tree-id5460 . -237) (undo-tree-id5461 . -237) (undo-tree-id5462 . -237) (undo-tree-id5463 . -235) (undo-tree-id5464 . -180) (undo-tree-id5465 . -178) (undo-tree-id5466 . -176) (undo-tree-id5467 . -174) (undo-tree-id5468 . -173) (undo-tree-id5469 . -171) (undo-tree-id5470 . -170) (undo-tree-id5471 . -167) (undo-tree-id5472 . -166) (undo-tree-id5473 . -115) (undo-tree-id5474 . -114) (undo-tree-id5475 . -113) (undo-tree-id5476 . -112) (undo-tree-id5477 . -111) (undo-tree-id5478 . -110) (undo-tree-id5479 . -109) (undo-tree-id5480 . -108) (undo-tree-id5481 . -57) (undo-tree-id5482 . -56) (undo-tree-id5483 . -55) (undo-tree-id5484 . -54) (undo-tree-id5485 . -53) (undo-tree-id5486 . -52) (undo-tree-id5487 . -1) (undo-tree-id5488 . -1) (undo-tree-id5489 . -1) (undo-tree-id5490 . -237) (undo-tree-id5491 . -237) (undo-tree-id5492 . -237)) ((75 . 312)) (26040 47243 592140 993000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -328) (undo-tree-id5582 . -1) (undo-tree-id5583 . -1) (undo-tree-id5584 . -1) (undo-tree-id5585 . -1) (undo-tree-id5586 . -1) (undo-tree-id5587 . -1) (undo-tree-id5588 . -1) (undo-tree-id5589 . -1) (undo-tree-id5590 . -1) (undo-tree-id5591 . -1) (undo-tree-id5592 . -1) (undo-tree-id5593 . -1) 329) nil (26040 47287 380637 824000) 0 nil])
([nil nil ((75 . 81)) ((#("omment" 0 6 (fontified t)) . 75) (undo-tree-id5529 . -6) (undo-tree-id5530 . -6)) (26040 47243 590816 650000) 0 nil])
([nil nil ((330 . 344)) nil (26040 47287 380629 522000) 0 nil])
nil
([nil nil ((343 . 347)) nil (26040 47287 380628 889000) 0 nil])
([nil nil ((343 . 352)) nil (26040 47287 380628 251000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -350) (undo-tree-id5572 . -1) (undo-tree-id5573 . -1) (undo-tree-id5574 . -1) (undo-tree-id5575 . -1) (undo-tree-id5576 . -1) (undo-tree-id5577 . -1) (undo-tree-id5578 . -1) (#("=" 0 1 (fontified t)) . -351) (undo-tree-id5579 . -1) (undo-tree-id5580 . -1) (undo-tree-id5581 . -1) 352) nil (26040 47287 380627 133000) 0 nil])
([nil nil ((355 . 357)) nil (26040 47287 380618 874000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -356) (undo-tree-id5569 . -1) (undo-tree-id5570 . -1) (undo-tree-id5571 . -1) 357) nil (26040 47287 380618 57000) 0 nil])
([nil nil ((356 . 361)) nil (26040 47287 380615 43000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -359) (undo-tree-id5549 . -1) (undo-tree-id5550 . -1) (undo-tree-id5551 . -1) (undo-tree-id5552 . -1) (undo-tree-id5553 . -1) (undo-tree-id5554 . -1) (undo-tree-id5555 . -1) (undo-tree-id5556 . -1) (undo-tree-id5557 . -1) (undo-tree-id5558 . -1) (undo-tree-id5559 . -1) (undo-tree-id5560 . -1) (undo-tree-id5561 . -1) (undo-tree-id5562 . -1) (#("l" 0 1 (fontified t)) . -360) (undo-tree-id5563 . -1) (undo-tree-id5564 . -1) (undo-tree-id5565 . -1) (undo-tree-id5566 . -1) (undo-tree-id5567 . -1) (undo-tree-id5568 . -1) 361) nil (26040 47287 380613 523000) 0 nil])
([nil nil ((359 . 363)) nil (26040 47287 380599 30000) 0 nil])
([nil nil ((#("::os" 0 2 (fontified t) 2 4 (face font-lock-constant-face fontified t)) . -17) (undo-tree-id5531 . -4) 21 (23 . 25) (#("raw" 0 3 (face font-lock-constant-face fontified t)) . -23) (undo-tree-id5532 . -3) 26 (28 . 34) (34 . 44) (359 . 359) (359 . 366) (#("long" 0 4 (fontified nil)) . 359) (359 . 363) (#("c_ulong (use std::os::raw::c_ulong)" 0 35 (fontified nil)) . -359) (359 . 394) (#("long" 0 4 (fontified t)) . -359) (undo-tree-id5533 . -4) (undo-tree-id5534 . -1) (undo-tree-id5535 . -1) (undo-tree-id5536 . -1) (undo-tree-id5537 . -2) (undo-tree-id5538 . -2) (undo-tree-id5539 . -2) (undo-tree-id5540 . -3) (undo-tree-id5541 . -3) (undo-tree-id5542 . -3) (undo-tree-id5543 . -4) (undo-tree-id5544 . -4) (undo-tree-id5545 . -4) (undo-tree-id5546 . -4) (undo-tree-id5547 . -4) (undo-tree-id5548 . -4) 363) nil (26040 47287 380596 539000) 0 nil])
([nil nil ((377 . 380)) nil (26040 47287 380573 809000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . 380) (380 . 384) (379 . 381)) nil (26040 47287 380571 626000) 0 nil])
([nil nil ((380 . 384)) nil (26040 47287 380566 771000) 0 nil])
([nil nil ((360 . 361) (t 26040 47287 399837 565000)) nil (26040 47290 768910 77000) 0 nil])
([nil nil ((385 . 389) (t 26040 47290 816504 442000)) nil (26040 47312 854200 586000) 0 nil])
([nil nil ((389 . 392)) nil (26040 47312 854199 677000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-keyword-face fontified t)) . -391) (undo-tree-id5600 . -1) (undo-tree-id5601 . -1) (undo-tree-id5602 . -1) (undo-tree-id5603 . -1) (undo-tree-id5604 . -1) 392) nil (26040 47312 854198 715000) 0 nil])
([nil nil ((391 . 398)) nil (26040 47312 854193 721000) 0 nil])
([nil nil ((398 . 399)) nil (26040 47312 854193 45000) 0 nil])
([nil nil ((395 . 398)) nil (26040 47312 854192 161000) 0 nil])
([nil nil ((397 . 404) (#("c" 0 1 (fontified nil)) . 397) (397 . 398) (#("c_ulong" 0 7 (fontified nil)) . -397) (397 . 404) (#("c" 0 1 (fontified t)) . -397) (undo-tree-id5594 . -1) (undo-tree-id5595 . -1) (undo-tree-id5596 . -1) (undo-tree-id5597 . -1) (undo-tree-id5598 . -1) (undo-tree-id5599 . -1) 398) nil (26040 47312 854189 308000) 0 nil])
([nil nil ((408 . 409)) nil (26040 47312 854173 200000) 0 nil])
([nil nil ((409 . 414) (t 26040 47312 873172 458000)) nil (26040 47332 910478 787000) 0 nil])
([nil nil ((414 . 415)) nil (26040 47332 910477 227000) 0 nil])
([nil nil ((414 . 420) (#("f" 0 1 (fontified nil)) . 414) (414 . 415) (#("fourcc" 0 6 (fontified nil)) . -414) (414 . 420) (#("f" 0 1 (fontified t)) . -414) (undo-tree-id5605 . -1) (undo-tree-id5606 . -1) (undo-tree-id5607 . -1) (undo-tree-id5608 . -1) (undo-tree-id5609 . -1) 415) nil (26040 47332 910473 148000) 0 nil])
([nil nil ((409 . 414) (t 26040 47332 926507 24000)) nil (26040 47455 663854 699000) 0 nil])
([nil nil ((414 . 416)) nil (26040 47455 663853 939000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -414) (undo-tree-id5646 . -1) (#("i" 0 1 (fontified t)) . -415) (undo-tree-id5647 . -1) 416) nil (26040 47455 663853 195000) 0 nil])
([nil nil ((414 . 418)) nil (26040 47455 663850 977000) 0 nil])
([nil nil ((417 . 418)) nil (26040 47455 663850 207000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -417) (undo-tree-id5645 . -1) 418) nil (26040 47455 663849 551000) 0 nil])
([nil nil ((417 . 418)) nil (26040 47455 663848 15000) 0 nil])
([nil nil ((417 . 423) (#("f" 0 1 (fontified nil)) . 417) (417 . 418) (#("format" 0 6 (fontified nil)) . -417) (417 . 423) (#("f" 0 1 (fontified t)) . -417) (undo-tree-id5644 . -1) 418) nil (26040 47455 663846 942000) 0 nil])
([nil nil ((423 . 424)) nil (26040 47455 663845 3000) 0 nil])
([nil nil ((#(">" 0 1 (syntax-table (1) fontified t)) . -423) (undo-tree-id5643 . -1) 424) nil (26040 47455 663844 390000) 0 nil])
([nil nil ((423 . 424)) nil (26040 47455 663842 905000) 0 nil])
([nil nil ((424 . 425)) nil (26040 47455 663842 360000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -424) (undo-tree-id5642 . -1) 425) nil (26040 47455 663841 580000) 0 nil])
([nil nil ((424 . 427)) nil (26040 47455 663840 117000) 0 nil])
([nil nil ((apply yas--snippet-revive 424 434 #s(yas--snippet nil nil #s(yas--exit 434 nil) 45 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 434 nil) 45 nil nil nil nil)) (424 . 434) (#("is_empty()$0" 0 12 (fontified nil)) . 424) (424 . 436) (#("emp" 0 3 (fontified nil)) . 424) (424 . 427) (#("is_empty()" 0 10 (fontified nil)) . -424) (424 . 434) (#("emp" 0 3 (fontified t)) . -424) (undo-tree-id5641 . -3) 427) nil (26040 47455 663838 906000) 0 nil])
([nil nil ((417 . 418)) nil (26040 47455 663836 399000) 0 nil])
([nil nil ((436 . 439)) nil (26040 47455 663835 871000) 0 nil])
([nil nil ((440 . 444) (#("        " 0 8 (fontified nil)) . 439) (439 . 447) (#("    " 0 4 (fontified nil)) . 439) (undo-tree-id5640 . -4) (438 . 444)) nil (26040 47455 663834 962000) 0 nil])
([nil nil ((439 . 447)) nil (26040 47455 663833 222000) 0 nil])
([nil nil ((447 . 449)) nil (26040 47455 663832 675000) 0 nil])
([nil nil ((448 . 452)) nil (26040 47455 663832 190000) 0 nil])
([nil nil ((#("3" 0 1 (fontified t)) . -451) (undo-tree-id5639 . -1) 452) nil (26040 47455 663831 437000) 0 nil])
([nil nil ((451 . 452)) nil (26040 47455 663830 96000) 0 nil])
([nil nil ((453 . 455)) nil (26040 47455 663829 529000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -454) (undo-tree-id5638 . -1) 455) nil (26040 47455 663828 872000) 0 nil])
([nil nil ((454 . 457)) nil (26040 47455 663827 637000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -454) (undo-tree-id5635 . -1) (#("o" 0 1 (fontified t)) . -455) (undo-tree-id5636 . -1) (#("r" 0 1 (face font-lock-keyword-face fontified t)) . -456) (undo-tree-id5637 . -1) 457) nil (26040 47455 663826 708000) 0 nil])
([nil nil ((454 . 455)) nil (26040 47455 663823 638000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 458 459 nil nil nil nil #s(yas--exit 460 nil))) #s(yas--exit 460 nil) 46 nil #s(yas--field 1 458 459 nil nil nil nil #s(yas--exit 460 nil)) nil nil)) (454 . 460) (#("map(${1:f})$0" 0 13 (fontified nil)) . 454) (454 . 467) (#("m" 0 1 (fontified nil)) . 454) (454 . 455) (#("map(…) (as Iterator)" 0 20 (fontified nil)) . -454) (454 . 474) (#("m" 0 1 (fontified t)) . -454) (undo-tree-id5634 . -1) 455) nil (26040 47455 663822 541000) 0 nil])
([nil nil ((apply yas--snippet-revive 454 460 #s(yas--snippet nil (#s(yas--field 1 458 459 nil nil nil nil #s(yas--exit 460 nil))) #s(yas--exit 460 nil) 46 nil #s(yas--field 1 458 459 nil nil nil nil #s(yas--exit 460 nil)) nil nil))) nil (26040 47455 663819 911000) 0 nil])
([nil nil ((#("f)" 0 1 (fontified t) 1 2 (face (rainbow-delimiters-depth-3-face) fontified t)) . -458) (undo-tree-id5632 . -2) (undo-tree-id5633 . -2) 460) nil (26040 47455 663819 165000) 0 nil])
([nil nil ((#("map(" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-3-face) fontified t)) . -454) (undo-tree-id5629 . -4) (undo-tree-id5630 . -4) (undo-tree-id5631 . -4) 458) nil (26040 47455 663816 814000) 0 nil])
([nil nil ((454 . 455)) nil (26040 47455 663813 838000) 0 nil])
([nil nil ((455 . 458)) nil (26040 47455 663813 286000) 0 nil])
([nil nil ((#("fore" 0 4 (fontified t)) . -454) (undo-tree-id5628 . -4) 458) nil (26040 47455 663812 657000) 0 nil])
([nil nil ((#("4)." 0 1 (fontified t) 1 2 (face (rainbow-delimiters-depth-3-face) fontified t) 2 3 (fontified t)) . -451) (undo-tree-id5625 . -3) (undo-tree-id5626 . -3) (undo-tree-id5627 . -3) 454) nil (26040 47455 663811 191000) 0 nil])
([nil nil ((#("0.." 0 3 (fontified t)) . -448) (undo-tree-id5622 . -3) (undo-tree-id5623 . -3) (undo-tree-id5624 . -3) 451) nil (26040 47455 663808 275000) 0 nil])
([nil nil ((448 . 449)) nil (26040 47455 663805 157000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -447) (undo-tree-id5618 . -1) (undo-tree-id5619 . -1) (undo-tree-id5620 . -1) (#("f" 0 1 (fontified t)) . -448) (undo-tree-id5621 . -1) 449) nil (26040 47455 663804 152000) 0 nil])
([nil nil ((447 . 455)) nil (26040 47455 663800 765000) 0 nil])
([nil nil ((455 . 459)) nil (26040 47455 663800 186000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -456) (undo-tree-id5615 . -1) (#("a" 0 1 (fontified t)) . -457) (undo-tree-id5616 . -1) (#("n" 0 1 (fontified t)) . -458) (undo-tree-id5617 . -1) 459) nil (26040 47455 663799 74000) 0 nil])
([nil nil ((456 . 463)) nil (26040 47455 663796 18000) 0 nil])
([nil nil ((464 . 472) (#("            " 0 12 (fontified nil)) . 463) (undo-tree-id5614 . -8) (471 . 475) (462 . 472)) nil (26040 47455 663795 204000) 0 nil])
([nil nil ((463 . 475)) nil (26040 47455 663793 414000) 0 nil])
([nil nil ((475 . 476)) nil (26040 47455 663792 879000) 0 nil])
([nil nil ((475 . 481) (#("f" 0 1 (fontified nil)) . 475) (475 . 476) (#("fourcc" 0 6 (fontified nil)) . -475) (475 . 481) (#("f" 0 1 (fontified t)) . -475) (undo-tree-id5613 . -1) 476) nil (26040 47455 663791 934000) 0 nil])
([nil nil ((389 . 393)) nil (26040 47455 663789 784000) 0 nil])
([nil nil ((485 . 488)) nil (26040 47455 663789 240000) 0 nil])
([nil nil ((488 . 489)) nil (26040 47455 663788 642000) 0 nil])
([nil nil ((489 . 490)) nil (26040 47455 663788 37000) 0 nil])
([nil nil ((489 . 495) (#("f" 0 1 (fontified nil)) . 489) (489 . 490) (#("format" 0 6 (fontified nil)) . -489) (489 . 495) (#("f" 0 1 (fontified t)) . -489) (undo-tree-id5612 . -1) 490) nil (26040 47455 663786 920000) 0 nil])
([nil nil ((495 . 497)) nil (26040 47455 663784 841000) 0 nil])
([nil nil ((496 . 497)) nil (26040 47455 663784 364000) 0 nil])
([nil nil ((498 . 501)) nil (26040 47455 663783 825000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -500) (undo-tree-id5611 . -1) 501) nil (26040 47455 663783 70000) 0 nil])
([nil nil ((500 . 502)) nil (26040 47455 663781 270000) 0 nil])
([nil nil ((502 . 504)) nil (26040 47455 663780 679000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -503) (undo-tree-id5610 . -1) 504) nil (26040 47455 663779 168000) 0 nil])
([nil nil ((503 . 504)) nil (26040 47455 663771 99000) 0 nil])
([nil nil ((503 . 506)) nil (26040 47455 663769 792000) 0 nil])
([nil nil ((507 . 508)) nil (26040 47455 663765 994000) 0 nil])
([nil nil ((497 . 503) (t 26040 47455 683181 219000)) nil (26040 47467 596346 961000) 0 nil])
([nil nil ((501 . 506) (#("us" 0 2 (fontified nil)) . 501) (501 . 503) (#("usize" 0 5 (fontified nil)) . -501) (501 . 506) (#("us" 0 2 (fontified t)) . -501) (undo-tree-id5648 . -2) (undo-tree-id5649 . -1) (undo-tree-id5650 . -1) (undo-tree-id5651 . -1) (undo-tree-id5652 . -1) (undo-tree-id5653 . -1) (undo-tree-id5654 . -2) (undo-tree-id5655 . -2) (undo-tree-id5656 . -2) (undo-tree-id5657 . -2) (undo-tree-id5658 . -2) 503) nil (26040 47467 596342 328000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -439) (undo-tree-id5661 . -1) (undo-tree-id5662 . -1) (undo-tree-id5663 . -1) (undo-tree-id5664 . -1) (undo-tree-id5665 . -1) (undo-tree-id5666 . -1) (undo-tree-id5667 . -1) (undo-tree-id5668 . -1) (undo-tree-id5669 . -1) (undo-tree-id5670 . -1) (undo-tree-id5671 . -1) (undo-tree-id5672 . -1) 440 (t 26040 47467 613181 952000)) nil (26040 47493 716137 773000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -420) (undo-tree-id5659 . -1) (undo-tree-id5660 . -1) 421) nil (26040 47493 716127 193000) 0 nil])
([nil nil ((420 . 421)) nil (26040 47493 716114 830000) 0 nil])
([nil nil ((#("usize]" 0 5 (face font-lock-type-face fontified t) 5 6 (face (rainbow-delimiters-depth-4-face) fontified t)) . -500) (undo-tree-id5808 . -5) (undo-tree-id5809 . -6) (undo-tree-id5810 . -5) (undo-tree-id5811 . -5) (undo-tree-id5812 . -5) (undo-tree-id5813 . -5) (undo-tree-id5814 . -5) (undo-tree-id5815 . -5) (undo-tree-id5816 . -5) (undo-tree-id5817 . -6) (undo-tree-id5818 . -6) (undo-tree-id5819 . -6) (undo-tree-id5820 . -6) (undo-tree-id5821 . -6) (undo-tree-id5822 . -6) (undo-tree-id5823 . -6) (undo-tree-id5824 . -6) (undo-tree-id5825 . -6) (undo-tree-id5826 . -6) (undo-tree-id5827 . -6) (undo-tree-id5828 . -6) (undo-tree-id5829 . -6) (undo-tree-id5830 . -5) (undo-tree-id5831 . -5) (undo-tree-id5832 . -5) (undo-tree-id5833 . -5) (undo-tree-id5834 . -5) (undo-tree-id5835 . -6) 506 (t 26040 47493 733183 553000)) nil (26040 47535 553611 29000) 0 nil])
([nil nil ((#("as " 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t)) . -497) (undo-tree-id5772 . -3) (undo-tree-id5773 . -3) (undo-tree-id5774 . -2) (undo-tree-id5775 . -2) (undo-tree-id5776 . -2) (undo-tree-id5777 . -3) (undo-tree-id5778 . -3) (undo-tree-id5779 . -3) (undo-tree-id5780 . -3) (undo-tree-id5781 . -3) (undo-tree-id5782 . -3) (undo-tree-id5783 . -3) (undo-tree-id5784 . -3) (undo-tree-id5785 . -3) (undo-tree-id5786 . -3) (undo-tree-id5787 . -3) (undo-tree-id5788 . -3) (undo-tree-id5789 . -3) (undo-tree-id5790 . -3) (undo-tree-id5791 . -3) (undo-tree-id5792 . -3) (undo-tree-id5793 . -3) (undo-tree-id5794 . -3) (undo-tree-id5795 . -3) (undo-tree-id5796 . -3) (undo-tree-id5797 . -3) (undo-tree-id5798 . -3) (undo-tree-id5799 . -3) (undo-tree-id5800 . -3) (undo-tree-id5801 . -3) (undo-tree-id5802 . -3) (undo-tree-id5803 . -3) (undo-tree-id5804 . -3) (undo-tree-id5805 . -3) (undo-tree-id5806 . -3) (undo-tree-id5807 . -3) 500) nil (26040 47535 553589 913000) 0 nil])
([nil nil ((#("i " 0 2 (fontified t)) . -495) (undo-tree-id5731 . -2) (undo-tree-id5732 . -2) (undo-tree-id5733 . -1) (undo-tree-id5734 . -1) (undo-tree-id5735 . -1) (undo-tree-id5736 . -2) (undo-tree-id5737 . -2) (undo-tree-id5738 . -2) (undo-tree-id5739 . -2) (undo-tree-id5740 . -2) (undo-tree-id5741 . -2) (undo-tree-id5742 . -2) (undo-tree-id5743 . -2) (undo-tree-id5744 . -2) (undo-tree-id5745 . -2) (undo-tree-id5746 . -2) (undo-tree-id5747 . -2) (undo-tree-id5748 . -2) (undo-tree-id5749 . -2) (undo-tree-id5750 . -2) (undo-tree-id5751 . -2) (undo-tree-id5752 . -2) (undo-tree-id5753 . -2) (undo-tree-id5754 . -2) (undo-tree-id5755 . -2) (undo-tree-id5756 . -2) (undo-tree-id5757 . -2) (undo-tree-id5758 . -2) (undo-tree-id5759 . -2) (undo-tree-id5760 . -2) (undo-tree-id5761 . -2) (undo-tree-id5762 . -2) (undo-tree-id5763 . -2) (undo-tree-id5764 . -2) (undo-tree-id5765 . -2) (undo-tree-id5766 . -2) (undo-tree-id5767 . -2) (undo-tree-id5768 . -2) (undo-tree-id5769 . -2) (undo-tree-id5770 . -2) (undo-tree-id5771 . -2) 497) nil (26040 47535 553564 614000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -494) (undo-tree-id5688 . -1) (undo-tree-id5689 . -1) (undo-tree-id5690 . -1) (undo-tree-id5691 . -1) (undo-tree-id5692 . -1) (undo-tree-id5693 . -1) (undo-tree-id5694 . -1) (undo-tree-id5695 . -1) (undo-tree-id5696 . -1) (undo-tree-id5697 . -1) (undo-tree-id5698 . -1) (undo-tree-id5699 . -1) (undo-tree-id5700 . -1) (undo-tree-id5701 . -1) (undo-tree-id5702 . -1) (undo-tree-id5703 . -1) (undo-tree-id5704 . -1) (undo-tree-id5705 . -1) (undo-tree-id5706 . -1) (undo-tree-id5707 . -1) (undo-tree-id5708 . -1) (undo-tree-id5709 . -1) (undo-tree-id5710 . -1) (undo-tree-id5711 . -1) (undo-tree-id5712 . -1) (undo-tree-id5713 . -1) (undo-tree-id5714 . -1) (undo-tree-id5715 . -1) (undo-tree-id5716 . -1) (undo-tree-id5717 . -1) (undo-tree-id5718 . -1) (undo-tree-id5719 . -1) (undo-tree-id5720 . -1) (undo-tree-id5721 . -1) (undo-tree-id5722 . -1) (undo-tree-id5723 . -1) (undo-tree-id5724 . -1) (undo-tree-id5725 . -1) (undo-tree-id5726 . -1) (undo-tree-id5727 . -1) (undo-tree-id5728 . -1) (undo-tree-id5729 . -1) (undo-tree-id5730 . -1) 495) nil (26040 47535 553534 972000) 0 nil])
([nil nil ((494 . 497)) nil (26040 47535 553503 148000) 0 nil])
([nil nil ((apply yas--snippet-revive 495 505 #s(yas--snippet nil nil #s(yas--exit 505 nil) 47 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 505 nil) 47 nil nil nil nil)) (495 . 505) (#("as_bytes()$0" 0 12 (fontified nil)) . 495) (495 . 507) (#("as" 0 2 (fontified nil)) . 495) (495 . 497) (#("as_bytes()" 0 10 (fontified nil)) . -495) (495 . 505) (#("as" 0 2 (face font-lock-keyword-face fontified t)) . -495) (undo-tree-id5681 . -2) (undo-tree-id5682 . -1) (undo-tree-id5683 . -1) (undo-tree-id5684 . -2) (undo-tree-id5685 . -2) (undo-tree-id5686 . -2) (undo-tree-id5687 . -2) 497) nil (26040 47535 553501 536000) 0 nil])
([nil nil ((505 . 507)) nil (26040 47535 553493 927000) 0 nil])
([nil nil ((506 . 508)) nil (26040 47535 553492 743000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -507) (undo-tree-id5673 . -1) (undo-tree-id5674 . -1) (undo-tree-id5675 . -1) (undo-tree-id5676 . -1) (undo-tree-id5677 . -1) (undo-tree-id5678 . -1) (undo-tree-id5679 . -1) (undo-tree-id5680 . -1) 508) nil (26040 47535 553488 990000) 0 nil])
([nil nil ((508 . 509) (t 26040 47535 603186 121000)) nil (26040 47562 572018 54000) 0 nil])
([nil nil ((509 . 511)) nil (26040 47562 572017 252000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -508) (undo-tree-id5861 . -1) (undo-tree-id5862 . -1) (undo-tree-id5863 . -1) (undo-tree-id5864 . -1) (undo-tree-id5865 . -1) (undo-tree-id5866 . -1) (undo-tree-id5867 . -1) (undo-tree-id5868 . -1) (undo-tree-id5869 . -1) (undo-tree-id5870 . -1) (undo-tree-id5871 . -1) (undo-tree-id5872 . -1) (undo-tree-id5873 . -1) (undo-tree-id5874 . -1) (undo-tree-id5875 . -1) (undo-tree-id5876 . -1) (undo-tree-id5877 . -1) (undo-tree-id5878 . -1) (#("a" 0 1 (fontified t)) . -509) (undo-tree-id5879 . -1) (undo-tree-id5880 . -1) (undo-tree-id5881 . -1) (undo-tree-id5882 . -1) (undo-tree-id5883 . -1) (undo-tree-id5884 . -1) (undo-tree-id5885 . -1) (undo-tree-id5886 . -1) (undo-tree-id5887 . -1) (undo-tree-id5888 . -1) (undo-tree-id5889 . -1) (#("s" 0 1 (face font-lock-keyword-face fontified t)) . -510) (undo-tree-id5890 . -1) (undo-tree-id5891 . -1) (undo-tree-id5892 . -1) (undo-tree-id5893 . -1) (undo-tree-id5894 . -1) 511) nil (26040 47562 572015 220000) 0 nil])
([nil nil ((508 . 509)) nil (26040 47562 571991 454000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -508) (undo-tree-id5858 . -1) (undo-tree-id5859 . -1) (undo-tree-id5860 . -1) 509) nil (26040 47562 571990 635000) 0 nil])
([nil nil ((508 . 510)) nil (26040 47562 571987 709000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -508) (undo-tree-id5848 . -1) (undo-tree-id5849 . -1) (undo-tree-id5850 . -1) (undo-tree-id5851 . -1) (undo-tree-id5852 . -1) (undo-tree-id5853 . -1) (undo-tree-id5854 . -1) (#("s" 0 1 (face font-lock-keyword-face fontified t)) . -509) (undo-tree-id5855 . -1) (undo-tree-id5856 . -1) (undo-tree-id5857 . -1) 510) nil (26040 47562 571986 512000) 0 nil])
([nil nil ((508 . 513)) nil (26040 47562 571978 570000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -512) (undo-tree-id5842 . -1) (undo-tree-id5843 . -1) (undo-tree-id5844 . -1) (undo-tree-id5845 . -1) (undo-tree-id5846 . -1) (undo-tree-id5847 . -1) 513) nil (26040 47562 571977 278000) 0 nil])
([nil nil ((512 . 513)) nil (26040 47562 571971 53000) 0 nil])
([nil nil ((512 . 519) (#("c" 0 1 (fontified nil)) . 512) (512 . 513) (#("c_ulong" 0 7 (fontified nil)) . -512) (512 . 519) (#("c" 0 1 (fontified t)) . -512) (undo-tree-id5836 . -1) (undo-tree-id5837 . -1) (undo-tree-id5838 . -1) (undo-tree-id5839 . -1) (undo-tree-id5840 . -1) (undo-tree-id5841 . -1) 513) nil (26040 47562 571962 867000) 0 nil])
([nil nil ((519 . 520) (t 26040 47562 589854 440000)) nil (26040 47568 58690 293000) 0 nil])
([nil nil ((488 . 489)) nil (26040 47568 58685 725000) 0 nil])
([nil nil ((#("into()" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t) 5 6 (face (rainbow-delimiters-depth-4-face) fontified t)) . -842) (undo-tree-id5911 . -6) (undo-tree-id5912 . -4) (undo-tree-id5913 . -5) (undo-tree-id5914 . -6) 848 (t 26040 47568 76521 445000)) nil (26040 47579 95785 273000) 0 nil])
([nil nil ((#("Y800." 0 4 (face font-lock-type-face fontified t) 4 5 (fontified t)) . -837) (undo-tree-id5904 . -5) (undo-tree-id5905 . -4) (undo-tree-id5906 . -5) (undo-tree-id5907 . -5) (undo-tree-id5908 . -5) (undo-tree-id5909 . -5) (undo-tree-id5910 . -5) 842) nil (26040 47579 95781 312000) 0 nil])
([nil nil ((837 . 838)) nil (26040 47579 95775 324000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 849 855 nil nil nil t #s(yas--exit 856 nil))) #s(yas--exit 856 nil) 48 nil #s(yas--field 1 849 855 nil nil nil t #s(yas--exit 856 nil)) nil nil)) (837 . 856) (#("zbar_fourcc(${1:format})$0" 0 26 (fontified nil)) . 837) (837 . 863) (#("z" 0 1 (fontified nil)) . 837) (837 . 838) (#("zbar_fourcc(…)" 0 14 (fontified nil)) . -837) (837 . 851) (#("z" 0 1 (fontified t)) . -837) (undo-tree-id5896 . -1) (undo-tree-id5897 . -1) (undo-tree-id5898 . -1) (undo-tree-id5899 . -1) (undo-tree-id5900 . -1) (undo-tree-id5901 . -1) (undo-tree-id5902 . -1) (undo-tree-id5903 . -1) 838) nil (26040 47579 95773 462000) 0 nil])
([nil nil ((850 . 851) (#("format" 0 6 (fontified nil)) . 850) (undo-tree-id5895 . -6) (849 . 850)) nil (26040 47579 95764 120000) 0 nil])
([nil nil ((850 . 854)) nil (26040 47579 95752 606000) 0 nil])
([nil nil ((apply yas--snippet-revive 837 856 #s(yas--snippet nil (#s(yas--field 1 849 855 nil nil nil t #s(yas--exit 856 nil))) #s(yas--exit 856 nil) 48 nil #s(yas--field 1 849 855 nil nil nil t #s(yas--exit 856 nil)) nil nil))) nil (26040 47635 918411 766000) 0 nil])
([nil nil ((1163 . 1171) (#("        " 0 8 (fontified nil)) . 1162) (undo-tree-id5966 . -8) (undo-tree-id5967 . -8) (undo-tree-id5968 . -8) (undo-tree-id5969 . -8) (1162 . 1171) (#("        " 0 8 (fontified nil)) . 1161) (1161 . 1169) (1161 . 1162) (t 26040 47579 113188 789000)) nil (26040 47635 918410 508000) 0 nil])
([nil nil ((1162 . 1170)) nil (26040 47635 918406 548000) 0 nil])
([nil nil ((1170 . 1174)) nil (26040 47635 918405 977000) 0 nil])
([nil nil ((1174 . 1183)) nil (26040 47635 918405 477000) 0 nil])
([nil nil ((1183 . 1184)) nil (26040 47635 918404 824000) 0 nil])
([nil nil ((#("z" 0 1 (fontified t)) . -1183) (undo-tree-id5961 . -1) (undo-tree-id5962 . -1) (undo-tree-id5963 . -1) (undo-tree-id5964 . -1) (undo-tree-id5965 . -1) 1184) nil (26040 47635 918403 734000) 0 nil])
([nil nil ((1183 . 1185)) nil (26040 47635 918399 652000) 0 nil])
([nil nil ((1183 . 1186) (#("ff" 0 2 (fontified nil)) . 1183) (1183 . 1185) (#("ffi" 0 3 (fontified nil)) . -1183) (1183 . 1186) (#("ff" 0 2 (fontified t)) . -1183) (undo-tree-id5954 . -2) (undo-tree-id5955 . -1) (undo-tree-id5956 . -1) (undo-tree-id5957 . -1) (undo-tree-id5958 . -2) (undo-tree-id5959 . -2) (undo-tree-id5960 . -2) 1185) nil (26040 47635 918398 177000) 0 nil])
([nil nil ((1186 . 1192)) nil (26040 47635 918391 4000) 0 nil])
([nil nil ((1192 . 1200)) nil (26040 47635 918390 377000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1212 1222 nil nil nil t #s(yas--exit 1223 nil))) #s(yas--exit 1223 nil) 49 nil #s(yas--field 1 1212 1222 nil nil nil t #s(yas--exit 1223 nil)) nil nil)) (1188 . 1218) (#("zbar_image_first_symbol(${1:image})$0" 0 37 (fontified nil)) . 1188) (1188 . 1225) (#("zbar_image_f" 0 12 (fontified nil)) . 1188) (1188 . 1200) (#("zbar_image_first_symbol(…)" 0 26 (fontified nil)) . -1188) (1188 . 1214) (#("zbar_image_f" 0 12 (fontified t)) . -1188) (undo-tree-id5929 . -4) (undo-tree-id5930 . -12) (undo-tree-id5931 . -1) (undo-tree-id5932 . -1) (undo-tree-id5933 . -2) (undo-tree-id5934 . -3) (undo-tree-id5935 . -4) (undo-tree-id5936 . -4) (undo-tree-id5937 . -4) (undo-tree-id5938 . -4) (undo-tree-id5939 . -4) (undo-tree-id5940 . -4) (undo-tree-id5941 . -5) (undo-tree-id5942 . -6) (undo-tree-id5943 . -7) (undo-tree-id5944 . -7) (undo-tree-id5945 . -7) (undo-tree-id5946 . -8) (undo-tree-id5947 . -8) (undo-tree-id5948 . -9) (undo-tree-id5949 . -10) (undo-tree-id5950 . -11) (undo-tree-id5951 . -12) (undo-tree-id5952 . -12) (undo-tree-id5953 . -12) 1200) nil (26040 47635 918388 76000) 0 nil])
([nil nil ((#("image" 0 5 (fontified nil)) . 1213) (undo-tree-id5928 . -5) (1212 . 1213)) nil (26040 47635 917979 673000) 0 nil])
([nil nil ((1212 . 1222) (#("z" 0 1 (fontified nil)) . 1212) (undo-tree-id5915 . -1) (1212 . 1213) (#("zbar_image" 0 10 (fontified nil)) . -1212) (undo-tree-id5916 . -10) (1212 . 1222) (#("z" 0 1 (fontified t)) . -1212) (undo-tree-id5917 . -1) (undo-tree-id5918 . -1) (undo-tree-id5919 . -1) (undo-tree-id5920 . -1) (undo-tree-id5921 . -1) (undo-tree-id5922 . -1) (undo-tree-id5923 . -1) (undo-tree-id5924 . -1) (undo-tree-id5925 . -1) (undo-tree-id5926 . -1) (undo-tree-id5927 . -1) 1213) nil (26040 47635 917976 352000) 0 nil])
([nil nil ((apply yas--snippet-revive 1188 1223 #s(yas--snippet nil (#s(yas--field 1 1212 1222 nil nil nil t #s(yas--exit 1223 nil))) #s(yas--exit 1223 nil) 49 nil #s(yas--field 1 1212 1222 nil nil nil t #s(yas--exit 1223 nil)) nil nil))) nil (26040 47635 917957 942000) 0 nil])
([nil nil ((1223 . 1224)) nil (26040 47635 917953 566000) 0 nil])
([nil nil ((1233 . 1237) (t 26040 47635 969858 945000)) nil (26040 47815 269618 64000) 0 nil])
([nil nil ((#("for " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -1233) (undo-tree-id5981 . -4) 1237) nil (26040 47815 269617 72000) 0 nil])
([nil nil ((1233 . 1237)) nil (26040 47815 269615 613000) 0 nil])
([nil nil ((#("for " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -1233) (undo-tree-id5980 . -4) 1237) nil (26040 47815 269614 937000) 0 nil])
([nil nil ((1233 . 1236)) nil (26040 47815 269613 398000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1243 1249 nil nil nil t #s(yas--field 2 1252 1252 nil nil nil nil #s(yas--exit 1267 nil))) #s(yas--field 2 1252 1252 nil nil nil nil #s(yas--exit 1267 nil))) #s(yas--exit 1267 nil) 50 nil #s(yas--field 1 1243 1249 nil nil nil t #s(yas--field 2 1252 1252 nil nil nil nil #s(yas--exit 1267 nil))) nil nil)) (1233 . 1271) (#("while let $1 = $2 {
            $0
        }" 0 44 (fontified nil)) . 1233) (1268 . 1276) (1253 . 1265) (#("    " 0 4 (fontified nil)) . 1253) (1233 . 1261) (#("whi" 0 3 (fontified nil)) . 1233) (1233 . 1236) (#("while let" 0 9 (fontified nil)) . -1233) (1233 . 1242) (#("whi" 0 3 (fontified t)) . -1233) (undo-tree-id5979 . -3) 1236) nil (26040 47815 269612 41000) 0 nil])
([nil nil ((1243 . 1249)) nil (26040 47815 269609 140000) 0 nil])
([nil nil ((apply yas--snippet-revive 1233 1277 #s(yas--snippet nil (#s(yas--field 1 1243 1249 nil nil nil t #s(yas--field 2 1252 1252 nil nil nil nil #s(yas--exit 1267 nil))) #s(yas--field 2 1252 1252 nil nil nil nil #s(yas--exit 1267 nil))) #s(yas--exit 1267 nil) 50 nil #s(yas--field 1 1243 1249 nil nil nil t #s(yas--field 2 1252 1252 nil nil nil nil #s(yas--exit 1267 nil))) nil nil))) nil (26040 47815 269608 508000) 0 nil])
([nil nil ((#("symbol =" 0 6 (face font-lock-variable-name-face fontified t) 6 8 (fontified t)) . -1243) (undo-tree-id5978 . -8) 1251) nil (26040 47815 269607 736000) 0 nil])
([nil nil ((1243 . 1249)) nil (26040 47815 269605 884000) 0 nil])
([nil nil ((#("k" 0 1 (face font-lock-variable-name-face fontified t)) . -1247) (undo-tree-id5976 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -1248) (undo-tree-id5977 . -1) 1249) nil (26040 47815 269604 983000) 0 nil])
([nil nil ((#("while let symb  {" 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 9 (face font-lock-keyword-face fontified t) 9 10 (fontified t) 10 14 (face font-lock-variable-name-face fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 17 (face (rainbow-delimiters-depth-3-face) fontified t)) . 1233) (undo-tree-id5975 . -10)) nil (26040 47815 269602 381000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1233)) nil (26040 47815 269600 864000) 0 nil])
([nil nil ((#("            
" 0 13 (fontified t)) . 1233)) nil (26040 47815 269600 229000) 0 nil])
([nil nil ((#("        }" 0 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1233)) nil (26040 47815 269599 556000) 0 nil])
([nil nil ((1233 . 1236)) nil (26040 47815 269598 933000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1239 1239 nil nil nil nil #s(yas--exit 1254 nil))) #s(yas--exit 1254 nil) 51 nil #s(yas--field 1 1239 1239 nil nil nil nil #s(yas--exit 1254 nil)) nil nil)) (1233 . 1264) (#("while $1 {
            $0
        }" 0 35 (fontified nil)) . 1233) (1259 . 1267) (1244 . 1256) (#("    " 0 4 (fontified nil)) . 1244) (1233 . 1252) (#("whi" 0 3 (fontified nil)) . 1233) (1233 . 1236) (#("while" 0 5 (fontified nil)) . -1233) (1233 . 1238) (#("whi" 0 3 (fontified t)) . -1233) (undo-tree-id5974 . -3) 1236) nil (26040 47815 269597 164000) 0 nil])
([nil nil ((apply yas--snippet-revive 1233 1264 #s(yas--snippet nil (#s(yas--field 1 1239 1239 nil nil nil nil #s(yas--exit 1254 nil))) #s(yas--exit 1254 nil) 51 nil #s(yas--field 1 1239 1239 nil nil nil nil #s(yas--exit 1254 nil)) nil nil))) nil (26040 47815 269594 342000) 0 nil])
([nil nil ((#("while  {" 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (face (rainbow-delimiters-depth-3-face) fontified t)) . 1233)) nil (26040 47815 269593 694000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1233)) nil (26040 47815 269593 34000) 0 nil])
([nil nil ((#("            
" 0 13 (fontified t)) . 1233)) nil (26040 47815 269592 399000) 0 nil])
([nil nil ((#("        }" 0 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1233)) nil (26040 47815 269591 709000) 0 nil])
([nil nil ((1233 . 1237)) nil (26040 47815 269591 144000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1243 1243 nil nil nil nil #s(yas--field 2 1246 1246 nil nil nil nil #s(yas--exit 1261 nil))) #s(yas--field 2 1246 1246 nil nil nil nil #s(yas--exit 1261 nil))) #s(yas--exit 1261 nil) 52 nil #s(yas--field 1 1243 1243 nil nil nil nil #s(yas--field 2 1246 1246 nil nil nil nil #s(yas--exit 1261 nil))) nil nil)) (1233 . 1271) (#("while let $1 = $2 {
            $0
        }" 0 44 (fontified nil)) . 1233) (1268 . 1276) (1253 . 1265) (#("    " 0 4 (fontified nil)) . 1253) (1233 . 1261) (#("whil" 0 4 (fontified nil)) . 1233) (1233 . 1237) (#("while let" 0 9 (fontified nil)) . -1233) (1233 . 1242) (#("whil" 0 4 (fontified t)) . -1233) (undo-tree-id5973 . -4) 1237) nil (26040 47815 269589 337000) 0 nil])
([nil nil ((apply yas--snippet-revive 1233 1271 #s(yas--snippet nil (#s(yas--field 1 1243 1243 nil nil nil nil #s(yas--field 2 1246 1246 nil nil nil nil #s(yas--exit 1261 nil))) #s(yas--field 2 1246 1246 nil nil nil nil #s(yas--exit 1261 nil))) #s(yas--exit 1261 nil) 52 nil #s(yas--field 1 1243 1243 nil nil nil nil #s(yas--field 2 1246 1246 nil nil nil nil #s(yas--exit 1261 nil))) nil nil))) nil (26040 47815 269586 298000) 0 nil])
([nil nil ((1246 . 1248)) nil (26040 47815 269585 673000) 0 nil])
([nil nil ((1246 . 1249) (#("ff" 0 2 (fontified nil)) . 1246) (1246 . 1248) (#("ffi" 0 3 (fontified nil)) . -1246) (1246 . 1249) (#("ff" 0 2 (fontified t)) . -1246) (undo-tree-id5971 . -2) (undo-tree-id5972 . -2) 1248) nil (26040 47815 269584 491000) 0 nil])
([nil nil ((1249 . 1251)) nil (26040 47815 269581 418000) 0 nil])
([nil nil ((1251 . 1259)) nil (26040 47815 269580 788000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1268 1274 nil nil nil nil #s(yas--exit 1275 nil))) #s(yas--exit 1275 nil) 53 nil #s(yas--field 1 1268 1274 nil nil nil nil #s(yas--exit 1275 nil)) nil nil)) (1251 . 1275) (#("zbar_symbol_next(${1:symbol})$0" 0 31 (fontified nil)) . 1251) (1251 . 1282) (#("symbol_n" 0 8 (fontified nil)) . 1251) (1251 . 1259) (#("zbar_symbol_next(…)" 0 19 (fontified nil)) . -1251) (1251 . 1270) (#("symbol_n" 0 8 (fontified t)) . -1251) (undo-tree-id5970 . -8) 1259) nil (26040 47815 269578 645000) 0 nil])
([nil nil ((apply yas--snippet-revive 1251 1275 #s(yas--snippet nil (#s(yas--field 1 1268 1274 nil nil nil nil #s(yas--exit 1275 nil))) #s(yas--exit 1275 nil) 53 nil #s(yas--field 1 1268 1274 nil nil nil nil #s(yas--exit 1275 nil)) nil nil))) nil (26040 47815 269568 732000) 0 nil])
([nil nil ((1243 . 1249)) nil (26040 47815 269564 482000) 0 nil])
([nil nil ((#("l" 0 1 (face font-lock-variable-name-face fontified t)) . -1247) (undo-tree-id5982 . -1) (undo-tree-id5983 . -1) (undo-tree-id5984 . -1) (undo-tree-id5985 . -1) (undo-tree-id5986 . -1) (undo-tree-id5987 . -1) (undo-tree-id5988 . -1) (undo-tree-id5989 . -1) (undo-tree-id5990 . -1) (undo-tree-id5991 . -1) (undo-tree-id5992 . -1) (undo-tree-id5993 . -1) (undo-tree-id5994 . -1) (undo-tree-id5995 . -1) (undo-tree-id5996 . -1) (undo-tree-id5997 . -1) (undo-tree-id5998 . -1) (undo-tree-id5999 . -1) (undo-tree-id6000 . -1) (undo-tree-id6001 . -1) (undo-tree-id6002 . -1) (undo-tree-id6003 . -1) (undo-tree-id6004 . -1) (undo-tree-id6005 . -1) (undo-tree-id6006 . -1) (undo-tree-id6007 . -1) (undo-tree-id6008 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -1248) (undo-tree-id6009 . -1) (undo-tree-id6010 . -1) (undo-tree-id6011 . -1) (undo-tree-id6012 . -1) (undo-tree-id6013 . -1) (undo-tree-id6014 . -1) (undo-tree-id6015 . -1) (undo-tree-id6016 . -1) (undo-tree-id6017 . -1) (undo-tree-id6018 . -1) (undo-tree-id6019 . -1) (undo-tree-id6020 . -1) (undo-tree-id6021 . -1) (undo-tree-id6022 . -1) (undo-tree-id6023 . -1) (undo-tree-id6024 . -1) (undo-tree-id6025 . -1) (undo-tree-id6026 . -1) (undo-tree-id6027 . -1) (undo-tree-id6028 . -1) (undo-tree-id6029 . -1) (undo-tree-id6030 . -1) (undo-tree-id6031 . -1) (undo-tree-id6032 . -1) (undo-tree-id6033 . -1) 1249 (t 26040 47815 289869 940000)) nil (26040 47821 269821 934000) 0 nil])
([nil nil ((1247 . 1249)) nil (26040 47821 269641 603000) 0 nil])
([nil nil ((1174 . 1178) (t 26040 47821 319870 311000)) nil (26040 47828 458873 193000) 0 nil])
([nil nil ((#("mut " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -1174) (undo-tree-id6034 . -4) (undo-tree-id6035 . -4) (undo-tree-id6036 . -4) (undo-tree-id6037 . -4) (undo-tree-id6038 . -4) (undo-tree-id6039 . -4) (undo-tree-id6040 . -4) (undo-tree-id6041 . -4) (undo-tree-id6042 . -4) (undo-tree-id6043 . -4) (undo-tree-id6044 . -4) (undo-tree-id6045 . -4) (undo-tree-id6046 . -4) 1178 (t 26040 47828 466537 416000)) nil (26040 47831 262767 635000) 0 nil])
([nil nil ((#("while let symbol = ffi::zbar_symbol_next(symbol) {" 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 9 (face font-lock-keyword-face fontified t) 9 10 (fontified t) 10 16 (face font-lock-variable-name-face fontified t) 16 19 (fontified t) 19 22 (face font-lock-constant-face fontified t) 22 24 (fontified t) 24 40 (fontified t) 40 41 (face (rainbow-delimiters-depth-3-face) fontified t) 41 47 (fontified t) 47 48 (face (rainbow-delimiters-depth-3-face) fontified t) 48 49 (fontified t) 49 50 (face (rainbow-delimiters-depth-3-face) fontified t)) . 1233) (undo-tree-id6211 . -41) (undo-tree-id6212 . -4) (undo-tree-id6213 . -4) (undo-tree-id6214 . -4) (undo-tree-id6215 . -4) (undo-tree-id6216 . -4) (undo-tree-id6217 . -4) (undo-tree-id6218 . -4) (undo-tree-id6219 . -4) (undo-tree-id6220 . -4) (undo-tree-id6221 . -4) (undo-tree-id6222 . -4) (undo-tree-id6223 . -4) (undo-tree-id6224 . -5) (undo-tree-id6225 . -9) (undo-tree-id6226 . -16) (undo-tree-id6227 . -16) (undo-tree-id6228 . -16) (undo-tree-id6229 . -16) (undo-tree-id6230 . -16) (undo-tree-id6231 . -16) (undo-tree-id6232 . -16) (undo-tree-id6233 . -16) (undo-tree-id6234 . -16) (undo-tree-id6235 . -16) (undo-tree-id6236 . -16) (undo-tree-id6237 . -16) (undo-tree-id6238 . -16) (undo-tree-id6239 . -16) (undo-tree-id6240 . -16) (undo-tree-id6241 . -17) (undo-tree-id6242 . -18) (undo-tree-id6243 . -19) (undo-tree-id6244 . -19) (undo-tree-id6245 . -19) (undo-tree-id6246 . -19) (undo-tree-id6247 . -19) (undo-tree-id6248 . -19) (undo-tree-id6249 . -19) (undo-tree-id6250 . -19) (undo-tree-id6251 . -19) (undo-tree-id6252 . -19) (undo-tree-id6253 . -19) (undo-tree-id6254 . -19) (undo-tree-id6255 . -19) (undo-tree-id6256 . -19) (undo-tree-id6257 . -19) (undo-tree-id6258 . -19) (undo-tree-id6259 . -19) (undo-tree-id6260 . -19) (undo-tree-id6261 . -5) (undo-tree-id6262 . -9) (undo-tree-id6263 . -16) (undo-tree-id6264 . -22) (undo-tree-id6265 . -22) (undo-tree-id6266 . -22) (undo-tree-id6267 . -22) (undo-tree-id6268 . -22) (undo-tree-id6269 . -22) (undo-tree-id6270 . -22) (undo-tree-id6271 . -19) (undo-tree-id6272 . -19) (undo-tree-id6273 . -19) (undo-tree-id6274 . -19) (undo-tree-id6275 . -19) (undo-tree-id6276 . -50) (t 26040 47831 313204 257000)) nil (26040 48090 99655 761000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1233) (undo-tree-id6210 . -1)) nil (26040 48090 99566 269000) 0 nil])
([nil nil ((#("            
" 0 13 (fontified t)) . 1233) (undo-tree-id6144 . -12) (undo-tree-id6145 . -12) (undo-tree-id6146 . -12) (undo-tree-id6147 . -12) (undo-tree-id6148 . -12) (undo-tree-id6149 . -12) (undo-tree-id6150 . -12) (undo-tree-id6151 . -12) (undo-tree-id6152 . -12) (undo-tree-id6153 . -12) (undo-tree-id6154 . -12) (undo-tree-id6155 . -12) (undo-tree-id6156 . -12) (undo-tree-id6157 . -12) (undo-tree-id6158 . -12) (undo-tree-id6159 . -12) (undo-tree-id6160 . -12) (undo-tree-id6161 . -12) (undo-tree-id6162 . -12) (undo-tree-id6163 . -12) (undo-tree-id6164 . -12) (undo-tree-id6165 . -12) (undo-tree-id6166 . -12) (undo-tree-id6167 . -12) (undo-tree-id6168 . -12) (undo-tree-id6169 . -12) (undo-tree-id6170 . -12) (undo-tree-id6171 . -12) (undo-tree-id6172 . -12) (undo-tree-id6173 . -12) (undo-tree-id6174 . -12) (undo-tree-id6175 . -12) (undo-tree-id6176 . -12) (undo-tree-id6177 . -12) (undo-tree-id6178 . -12) (undo-tree-id6179 . -12) (undo-tree-id6180 . -12) (undo-tree-id6181 . -12) (undo-tree-id6182 . -12) (undo-tree-id6183 . -12) (undo-tree-id6184 . -12) (undo-tree-id6185 . -12) (undo-tree-id6186 . -12) (undo-tree-id6187 . -12) (undo-tree-id6188 . -12) (undo-tree-id6189 . -12) (undo-tree-id6190 . -12) (undo-tree-id6191 . -12) (undo-tree-id6192 . -12) (undo-tree-id6193 . -12) (undo-tree-id6194 . -12) (undo-tree-id6195 . -12) (undo-tree-id6196 . -12) (undo-tree-id6197 . -12) (undo-tree-id6198 . -12) (undo-tree-id6199 . -12) (undo-tree-id6200 . -12) (undo-tree-id6201 . -12) (undo-tree-id6202 . -12) (undo-tree-id6203 . -12) (undo-tree-id6204 . -12) (undo-tree-id6205 . -12) (undo-tree-id6206 . -12) (undo-tree-id6207 . -12) (undo-tree-id6208 . -12) (undo-tree-id6209 . -13)) nil (26040 48090 99562 562000) 0 nil])
([nil nil ((#("        }" 0 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1233) (undo-tree-id6138 . -9) (undo-tree-id6139 . -9) (undo-tree-id6140 . -9) (undo-tree-id6141 . -9) (undo-tree-id6142 . -9) (undo-tree-id6143 . -9)) nil (26040 48090 99519 193000) 0 nil])
([nil nil ((562 . 564)) nil (26040 48090 99514 28000) 0 nil])
([nil nil ((563 . 568)) nil (26040 48090 99513 511000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -567) (undo-tree-id6131 . -1) (undo-tree-id6132 . -1) (undo-tree-id6133 . -1) (undo-tree-id6134 . -1) (undo-tree-id6135 . -1) (undo-tree-id6136 . -1) (undo-tree-id6137 . -1) 568) nil (26040 48090 99512 548000) 0 nil])
([nil nil ((567 . 570)) nil (26040 48090 99507 277000) 0 nil])
([nil nil ((568 . 576) (#("It" 0 2 (fontified nil)) . 568) (568 . 570) (#("Iterator" 0 8 (fontified nil)) . -568) (568 . 576) (#("It" 0 2 (face font-lock-type-face fontified t)) . -568) (undo-tree-id6123 . -2) (undo-tree-id6124 . -1) (undo-tree-id6125 . -1) (undo-tree-id6126 . -2) (undo-tree-id6127 . -2) (undo-tree-id6128 . -2) (undo-tree-id6129 . -2) (undo-tree-id6130 . -2) 570) nil (26040 48090 99505 890000) 0 nil])
([nil nil ((576 . 581)) nil (26040 48090 99499 422000) 0 nil])
([nil nil ((581 . 587)) nil (26040 48090 99498 829000) 0 nil])
([nil nil ((587 . 593)) nil (26040 48090 99498 203000) 0 nil])
([nil nil ((586 . 599) (#("zbar_sy" 0 7 (fontified nil)) . 586) (586 . 593) (#("zbar_symbol_t" 0 13 (fontified nil)) . -586) (586 . 599) (#("zbar_sy" 0 7 (fontified t)) . -586) (undo-tree-id6093 . -7) (undo-tree-id6094 . -7) (undo-tree-id6095 . -1) (undo-tree-id6096 . -1) (undo-tree-id6097 . -1) (undo-tree-id6098 . -2) (undo-tree-id6099 . -2) (undo-tree-id6100 . -2) (undo-tree-id6101 . -3) (undo-tree-id6102 . -3) (undo-tree-id6103 . -3) (undo-tree-id6104 . -4) (undo-tree-id6105 . -4) (undo-tree-id6106 . -4) (undo-tree-id6107 . -4) (undo-tree-id6108 . -4) (undo-tree-id6109 . -5) (undo-tree-id6110 . -5) (undo-tree-id6111 . -5) (undo-tree-id6112 . -6) (undo-tree-id6113 . -6) (undo-tree-id6114 . -6) (undo-tree-id6115 . -7) (undo-tree-id6116 . -7) (undo-tree-id6117 . -7) (undo-tree-id6118 . -7) (undo-tree-id6119 . -7) (undo-tree-id6120 . -7) (undo-tree-id6121 . -7) (undo-tree-id6122 . -7) 593) nil (26040 48090 99496 214000) 0 nil])
([nil nil ((599 . 602)) nil (26040 48090 99460 574000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . 602) (602 . 606) (601 . 603)) nil (26040 48090 99459 878000) 0 nil])
([nil nil ((602 . 606)) nil (26040 48090 99458 988000) 0 nil])
([nil nil ((606 . 607)) nil (26040 48090 99458 414000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -606) (undo-tree-id6090 . -1) (undo-tree-id6091 . -1) (undo-tree-id6092 . -1) 607) nil (26040 48090 99457 622000) 0 nil])
([nil nil ((606 . 611)) nil (26040 48090 99454 526000) 0 nil])
([nil nil ((apply yas--snippet-revive 606 663 #s(yas--snippet nil nil #s(yas--exit 657 nil) 54 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 657 nil) 54 nil nil nil nil)) (606 . 663) (#("fn next(&mut self) -> Option<Self::Item> {
        $0
    }" 0 20 (fontified nil) 20 21 (syntax-table (1) fontified nil) 21 59 (fontified nil)) . 606) (660 . 664) (649 . 657) (#("    " 0 4 (fontified nil)) . 649) (606 . 657) (#("fn ne" 0 2 (face font-lock-keyword-face fontified nil) 2 3 (fontified nil) 3 5 (fontified nil)) . 606) (undo-tree-id6060 . -3) (undo-tree-id6061 . -1) (undo-tree-id6062 . -1) (undo-tree-id6063 . -2) (undo-tree-id6064 . -2) (undo-tree-id6065 . -2) (undo-tree-id6066 . -3) (undo-tree-id6067 . -3) (undo-tree-id6068 . -3) (undo-tree-id6069 . -3) (undo-tree-id6070 . -3) (undo-tree-id6071 . -3) (undo-tree-id6072 . -3) (undo-tree-id6073 . -3) (undo-tree-id6074 . -3) (undo-tree-id6075 . -3) (undo-tree-id6076 . -3) (undo-tree-id6077 . -3) (undo-tree-id6078 . -3) (609 . 611) (#("fn next(..)" 0 11 (fontified nil)) . -609) (609 . 620) (#("ne" 0 2 (face font-lock-function-name-face fontified t)) . -609) (undo-tree-id6079 . -2) (undo-tree-id6080 . -1) (undo-tree-id6081 . -1) (undo-tree-id6082 . -1) (undo-tree-id6083 . -1) (undo-tree-id6084 . -2) (undo-tree-id6085 . -2) (undo-tree-id6086 . -2) (undo-tree-id6087 . -2) (undo-tree-id6088 . -2) (undo-tree-id6089 . -2) 611) nil (26040 48090 99451 884000) 0 nil])
([nil nil ((601 . 606)) nil (26040 48090 98853 298000) 0 nil])
([nil nil ((606 . 608)) nil (26040 48090 98852 639000) 0 nil])
([nil nil ((apply yas--snippet-revive 606 619 #s(yas--snippet nil nil #s(yas--exit 618 nil) 55 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 618 nil) 55 nil nil nil nil)) (606 . 619) (#("type Item = $0;" 0 15 (fontified nil)) . 606) (606 . 621) (#("ty" 0 2 (fontified nil)) . 606) (606 . 608) (#("type Item =" 0 11 (fontified nil)) . -606) (606 . 617) (#("ty" 0 2 (fontified t)) . -606) (undo-tree-id6053 . -2) (undo-tree-id6054 . -1) (undo-tree-id6055 . -1) (undo-tree-id6056 . -2) (undo-tree-id6057 . -2) (undo-tree-id6058 . -2) (undo-tree-id6059 . -2) 608) nil (26040 48090 98850 951000) 0 nil])
([nil nil ((618 . 619)) nil (26040 48090 98843 388000) 0 nil])
([nil nil ((618 . 622) (#("S" 0 1 (fontified nil)) . 618) (618 . 619) (#("Self" 0 4 (fontified nil)) . -618) (618 . 622) (#("S" 0 1 (face font-lock-type-face fontified t)) . -618) (undo-tree-id6047 . -1) (undo-tree-id6048 . -1) (undo-tree-id6049 . -1) (undo-tree-id6050 . -1) (undo-tree-id6051 . -1) (undo-tree-id6052 . -1) 619) nil (26040 48090 98838 914000) 0 nil])
([nil nil ((#("Self" 0 4 (face font-lock-type-face fontified t)) . -618) (undo-tree-id6546 . -4) (undo-tree-id6547 . -4) (undo-tree-id6548 . -4) (undo-tree-id6549 . -4) (undo-tree-id6550 . -4) (undo-tree-id6551 . -4) (undo-tree-id6552 . -4) (undo-tree-id6553 . -4) (undo-tree-id6554 . -4) (undo-tree-id6555 . -4) (undo-tree-id6556 . -4) (undo-tree-id6557 . -4) (undo-tree-id6558 . -4) 622 (t 26040 48090 149886 790000)) nil (26040 48128 260157 941000) 0 nil])
([nil nil ((618 . 622)) nil (26040 48128 260148 531000) 0 nil])
([nil nil ((622 . 625)) nil (26040 48128 260147 802000) 0 nil])
([nil nil ((#("z" 0 1 (fontified t)) . -618) (undo-tree-id6377 . -1) (undo-tree-id6378 . -1) (undo-tree-id6379 . -1) (undo-tree-id6380 . -1) (undo-tree-id6381 . -1) (undo-tree-id6382 . -1) (undo-tree-id6383 . -1) (undo-tree-id6384 . -1) (undo-tree-id6385 . -1) (undo-tree-id6386 . -1) (undo-tree-id6387 . -1) (undo-tree-id6388 . -1) (undo-tree-id6389 . -1) (undo-tree-id6390 . -1) (undo-tree-id6391 . -1) (undo-tree-id6392 . -1) (undo-tree-id6393 . -1) (undo-tree-id6394 . -1) (undo-tree-id6395 . -1) (undo-tree-id6396 . -1) (undo-tree-id6397 . -1) (undo-tree-id6398 . -1) (undo-tree-id6399 . -1) (undo-tree-id6400 . -1) (undo-tree-id6401 . -1) (undo-tree-id6402 . -1) (undo-tree-id6403 . -1) (undo-tree-id6404 . -1) (undo-tree-id6405 . -1) (undo-tree-id6406 . -1) (undo-tree-id6407 . -1) (undo-tree-id6408 . -1) (undo-tree-id6409 . -1) (undo-tree-id6410 . -1) (undo-tree-id6411 . -1) (undo-tree-id6412 . -1) (undo-tree-id6413 . -1) (undo-tree-id6414 . -1) (undo-tree-id6415 . -1) (undo-tree-id6416 . -1) (undo-tree-id6417 . -1) (undo-tree-id6418 . -1) (undo-tree-id6419 . -1) (undo-tree-id6420 . -1) (undo-tree-id6421 . -1) (undo-tree-id6422 . -1) (undo-tree-id6423 . -1) (undo-tree-id6424 . -1) (undo-tree-id6425 . -1) (undo-tree-id6426 . -1) (#("b" 0 1 (fontified t)) . -619) (undo-tree-id6427 . -1) (undo-tree-id6428 . -1) (undo-tree-id6429 . -1) (undo-tree-id6430 . -1) (undo-tree-id6431 . -1) (undo-tree-id6432 . -1) (undo-tree-id6433 . -1) (undo-tree-id6434 . -1) (undo-tree-id6435 . -1) (undo-tree-id6436 . -1) (undo-tree-id6437 . -1) (undo-tree-id6438 . -1) (undo-tree-id6439 . -1) (undo-tree-id6440 . -1) (undo-tree-id6441 . -1) (undo-tree-id6442 . -1) (undo-tree-id6443 . -1) (undo-tree-id6444 . -1) (undo-tree-id6445 . -1) (undo-tree-id6446 . -1) (undo-tree-id6447 . -1) (undo-tree-id6448 . -1) (undo-tree-id6449 . -1) (undo-tree-id6450 . -1) (undo-tree-id6451 . -1) (undo-tree-id6452 . -1) (undo-tree-id6453 . -1) (undo-tree-id6454 . -1) (undo-tree-id6455 . -1) (undo-tree-id6456 . -1) (undo-tree-id6457 . -1) (undo-tree-id6458 . -1) (undo-tree-id6459 . -1) (undo-tree-id6460 . -1) (undo-tree-id6461 . -1) (undo-tree-id6462 . -1) (undo-tree-id6463 . -1) (undo-tree-id6464 . -1) (undo-tree-id6465 . -1) (#("a" 0 1 (fontified t)) . -620) (undo-tree-id6466 . -1) (undo-tree-id6467 . -1) (undo-tree-id6468 . -1) (undo-tree-id6469 . -1) (undo-tree-id6470 . -1) (undo-tree-id6471 . -1) (undo-tree-id6472 . -1) (undo-tree-id6473 . -1) (undo-tree-id6474 . -1) (undo-tree-id6475 . -1) (undo-tree-id6476 . -1) (undo-tree-id6477 . -1) (undo-tree-id6478 . -1) (undo-tree-id6479 . -1) (undo-tree-id6480 . -1) (undo-tree-id6481 . -1) (undo-tree-id6482 . -1) (undo-tree-id6483 . -1) (undo-tree-id6484 . -1) (undo-tree-id6485 . -1) (undo-tree-id6486 . -1) (undo-tree-id6487 . -1) (undo-tree-id6488 . -1) (undo-tree-id6489 . -1) (undo-tree-id6490 . -1) (undo-tree-id6491 . -1) (undo-tree-id6492 . -1) (undo-tree-id6493 . -1) (undo-tree-id6494 . -1) (undo-tree-id6495 . -1) (undo-tree-id6496 . -1) (#("r" 0 1 (fontified t)) . -621) (undo-tree-id6497 . -1) (undo-tree-id6498 . -1) (undo-tree-id6499 . -1) (undo-tree-id6500 . -1) (undo-tree-id6501 . -1) (undo-tree-id6502 . -1) (undo-tree-id6503 . -1) (undo-tree-id6504 . -1) (undo-tree-id6505 . -1) (undo-tree-id6506 . -1) (undo-tree-id6507 . -1) (undo-tree-id6508 . -1) (undo-tree-id6509 . -1) (undo-tree-id6510 . -1) (undo-tree-id6511 . -1) (undo-tree-id6512 . -1) (undo-tree-id6513 . -1) (undo-tree-id6514 . -1) (undo-tree-id6515 . -1) (undo-tree-id6516 . -1) (undo-tree-id6517 . -1) (undo-tree-id6518 . -1) (undo-tree-id6519 . -1) (undo-tree-id6520 . -1) (undo-tree-id6521 . -1) (undo-tree-id6522 . -1) (#("_" 0 1 (fontified t)) . -622) (undo-tree-id6523 . -1) (undo-tree-id6524 . -1) (undo-tree-id6525 . -1) (undo-tree-id6526 . -1) (undo-tree-id6527 . -1) (undo-tree-id6528 . -1) (undo-tree-id6529 . -1) (undo-tree-id6530 . -1) (undo-tree-id6531 . -1) (undo-tree-id6532 . -1) (undo-tree-id6533 . -1) (undo-tree-id6534 . -1) (undo-tree-id6535 . -1) (#("s" 0 1 (fontified t)) . -623) (undo-tree-id6536 . -1) (undo-tree-id6537 . -1) (undo-tree-id6538 . -1) (undo-tree-id6539 . -1) (undo-tree-id6540 . -1) (undo-tree-id6541 . -1) (undo-tree-id6542 . -1) (#("y" 0 1 (fontified t)) . -624) (undo-tree-id6543 . -1) (undo-tree-id6544 . -1) (undo-tree-id6545 . -1) 625) nil (26040 48128 260139 717000) 0 nil])
([nil nil ((618 . 620)) nil (26040 48128 259027 469000) 0 nil])
([nil nil ((618 . 621) (#("ff" 0 2 (fontified nil)) . 618) (618 . 620) (#("ffi" 0 3 (fontified nil)) . -618) (618 . 621) (#("ff" 0 2 (fontified t)) . -618) (undo-tree-id6369 . -2) (undo-tree-id6370 . -1) (undo-tree-id6371 . -1) (undo-tree-id6372 . -2) (undo-tree-id6373 . -2) (undo-tree-id6374 . -2) (undo-tree-id6375 . -2) (undo-tree-id6376 . -2) 620) nil (26040 48128 259026 151000) 0 nil])
([nil nil ((621 . 627)) nil (26040 48128 259019 271000) 0 nil])
([nil nil ((#("zbar" 0 4 (fontified t)) . -623) (undo-tree-id6355 . -4) (undo-tree-id6356 . -1) (undo-tree-id6357 . -1) (undo-tree-id6358 . -1) (undo-tree-id6359 . -2) (undo-tree-id6360 . -2) (undo-tree-id6361 . -3) (undo-tree-id6362 . -3) (undo-tree-id6363 . -3) (undo-tree-id6364 . -4) (undo-tree-id6365 . -4) (undo-tree-id6366 . -4) (undo-tree-id6367 . -4) (undo-tree-id6368 . -4) 627) nil (26040 48128 259018 117000) 0 nil])
([nil nil ((#("ffi::" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t)) . -618) (undo-tree-id6328 . -5) (undo-tree-id6329 . -3) (undo-tree-id6330 . -3) (undo-tree-id6331 . -3) (undo-tree-id6332 . -4) (undo-tree-id6333 . -4) (undo-tree-id6334 . -5) (undo-tree-id6335 . -5) (undo-tree-id6336 . -5) (undo-tree-id6337 . -5) (undo-tree-id6338 . -5) (undo-tree-id6339 . -5) (undo-tree-id6340 . -5) (undo-tree-id6341 . -5) (undo-tree-id6342 . -5) (undo-tree-id6343 . -5) (undo-tree-id6344 . -5) (undo-tree-id6345 . -5) (undo-tree-id6346 . -5) (undo-tree-id6347 . -5) (undo-tree-id6348 . -5) (undo-tree-id6349 . -5) (undo-tree-id6350 . -5) (undo-tree-id6351 . -5) (undo-tree-id6352 . -5) (undo-tree-id6353 . -5) (undo-tree-id6354 . -5) 623) nil (26040 48128 259007 297000) 0 nil])
([nil nil ((618 . 619)) nil (26040 48128 258987 898000) 0 nil])
([nil nil ((#("z" 0 1 (fontified t)) . -618) (undo-tree-id6322 . -1) (undo-tree-id6323 . -1) (undo-tree-id6324 . -1) (undo-tree-id6325 . -1) (undo-tree-id6326 . -1) (undo-tree-id6327 . -1) 619) nil (26040 48128 258986 830000) 0 nil])
([nil nil ((618 . 630)) nil (26040 48128 258981 857000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -629) (undo-tree-id6314 . -1) (undo-tree-id6315 . -1) (undo-tree-id6316 . -1) (undo-tree-id6317 . -1) (undo-tree-id6318 . -1) (undo-tree-id6319 . -1) (undo-tree-id6320 . -1) (undo-tree-id6321 . -1) 630) nil (26040 48128 258980 600000) 0 nil])
([nil nil ((629 . 630)) nil (26040 48128 258973 241000) 0 nil])
([nil nil ((623 . 636) (#("zbar_sy" 0 7 (fontified nil)) . 623) (623 . 630) (#("zbar_symbol_t" 0 13 (fontified nil)) . -623) (623 . 636) (#("zbar_sy" 0 7 (fontified t)) . -623) (undo-tree-id6277 . -7) (undo-tree-id6278 . -1) (undo-tree-id6279 . -1) (undo-tree-id6280 . -1) (undo-tree-id6281 . -1) (undo-tree-id6282 . -2) (undo-tree-id6283 . -2) (undo-tree-id6284 . -3) (undo-tree-id6285 . -3) (undo-tree-id6286 . -3) (undo-tree-id6287 . -4) (undo-tree-id6288 . -4) (undo-tree-id6289 . -4) (undo-tree-id6290 . -4) (undo-tree-id6291 . -4) (undo-tree-id6292 . -5) (undo-tree-id6293 . -5) (undo-tree-id6294 . -6) (undo-tree-id6295 . -6) (undo-tree-id6296 . -6) (undo-tree-id6297 . -6) (undo-tree-id6298 . -6) (undo-tree-id6299 . -6) (undo-tree-id6300 . -6) (undo-tree-id6301 . -6) (undo-tree-id6302 . -6) (undo-tree-id6303 . -6) (undo-tree-id6304 . -6) (undo-tree-id6305 . -6) (undo-tree-id6306 . -6) (undo-tree-id6307 . -6) (undo-tree-id6308 . -6) (undo-tree-id6309 . -6) (undo-tree-id6310 . -7) (undo-tree-id6311 . -7) (undo-tree-id6312 . -7) (undo-tree-id6313 . -7) 630) nil (26040 48128 258968 32000) 0 nil])
([nil nil ((693 . 698) (t 26040 48128 309889 130000)) nil (26040 48249 2664 860000) 0 nil])
([nil nil ((#("y" 0 1 (face font-lock-variable-name-face fontified t)) . -697) (undo-tree-id6642 . -1) (undo-tree-id6643 . -1) (undo-tree-id6644 . -1) (undo-tree-id6645 . -1) (undo-tree-id6646 . -1) 698) nil (26040 48249 2663 724000) 0 nil])
([nil nil ((697 . 706)) nil (26040 48249 2659 445000) 0 nil])
([nil nil ((706 . 708)) nil (26040 48249 2658 795000) 0 nil])
([nil nil ((706 . 709) (#("ff" 0 2 (fontified nil)) . 706) (706 . 708) (#("ffi" 0 3 (fontified nil)) . -706) (706 . 709) (#("ff" 0 2 (fontified t)) . -706) (undo-tree-id6636 . -2) (undo-tree-id6637 . -1) (undo-tree-id6638 . -1) (undo-tree-id6639 . -1) (undo-tree-id6640 . -2) (undo-tree-id6641 . -2) 708) nil (26040 48249 2657 537000) 0 nil])
([nil nil ((709 . 716)) nil (26040 48249 2652 236000) 0 nil])
([nil nil ((716 . 723)) nil (26040 48249 2651 505000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t)) . -722) (undo-tree-id6629 . -1) (undo-tree-id6630 . -1) (undo-tree-id6631 . -1) (undo-tree-id6632 . -1) (undo-tree-id6633 . -1) (undo-tree-id6634 . -1) (undo-tree-id6635 . -1) 723) nil (26040 48249 2650 340000) 0 nil])
([nil nil ((722 . 724)) nil (26040 48249 2644 931000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 728 732 nil nil nil t #s(yas--exit 733 nil))) #s(yas--exit 733 nil) 56 nil #s(yas--field 1 728 732 nil nil nil t #s(yas--exit 733 nil)) nil nil)) (711 . 735) (#("zbar_symbol_next(${1:symbol})$0" 0 31 (fontified nil)) . 711) (711 . 742) (#("zbar_symbol_n" 0 13 (fontified nil)) . 711) (711 . 724) (#("zbar_symbol_next(…)" 0 19 (fontified nil)) . -711) (711 . 730) (#("zbar_symbol_n" 0 13 (fontified t)) . -711) (undo-tree-id6570 . -13) (undo-tree-id6571 . -1) (undo-tree-id6572 . -1) (undo-tree-id6573 . -1) (undo-tree-id6574 . -1) (undo-tree-id6575 . -1) (undo-tree-id6576 . -2) (undo-tree-id6577 . -2) (undo-tree-id6578 . -2) (undo-tree-id6579 . -3) (undo-tree-id6580 . -3) (undo-tree-id6581 . -4) (undo-tree-id6582 . -4) (undo-tree-id6583 . -4) (undo-tree-id6584 . -4) (undo-tree-id6585 . -5) (undo-tree-id6586 . -5) (undo-tree-id6587 . -5) (undo-tree-id6588 . -6) (undo-tree-id6589 . -6) (undo-tree-id6590 . -6) (undo-tree-id6591 . -7) (undo-tree-id6592 . -7) (undo-tree-id6593 . -7) (undo-tree-id6594 . -7) (undo-tree-id6595 . -8) (undo-tree-id6596 . -8) (undo-tree-id6597 . -8) (undo-tree-id6598 . -9) (undo-tree-id6599 . -9) (undo-tree-id6600 . -9) (undo-tree-id6601 . -10) (undo-tree-id6602 . -10) (undo-tree-id6603 . -10) (undo-tree-id6604 . -11) (undo-tree-id6605 . -11) (undo-tree-id6606 . -11) (undo-tree-id6607 . -11) (undo-tree-id6608 . -11) (undo-tree-id6609 . -11) (undo-tree-id6610 . -11) (undo-tree-id6611 . -11) (undo-tree-id6612 . -11) (undo-tree-id6613 . -11) (undo-tree-id6614 . -11) (undo-tree-id6615 . -11) (undo-tree-id6616 . -11) (undo-tree-id6617 . -11) (undo-tree-id6618 . -11) (undo-tree-id6619 . -11) (undo-tree-id6620 . -11) (undo-tree-id6621 . -12) (undo-tree-id6622 . -12) (undo-tree-id6623 . -12) (undo-tree-id6624 . -13) (undo-tree-id6625 . -13) (undo-tree-id6626 . -13) (undo-tree-id6627 . -13) (undo-tree-id6628 . -13) 724) nil (26040 48249 2641 397000) 0 nil])
([nil nil ((#("symbol" 0 6 (fontified nil)) . 729) (undo-tree-id6569 . -6) (728 . 729)) nil (26040 48249 2599 732000) 0 nil])
([nil nil ((728 . 732) (#("s" 0 1 (fontified nil)) . 728) (undo-tree-id6559 . -1) (728 . 729) (#("self" 0 4 (fontified nil)) . -728) (undo-tree-id6560 . -4) (728 . 732) (#("s" 0 1 (fontified t)) . -728) (undo-tree-id6561 . -1) (undo-tree-id6562 . -1) (undo-tree-id6563 . -1) (undo-tree-id6564 . -1) (undo-tree-id6565 . -1) (undo-tree-id6566 . -1) (undo-tree-id6567 . -1) (undo-tree-id6568 . -1) 729) nil (26040 48249 2596 591000) 0 nil])
([nil nil ((apply yas--snippet-revive 711 733 #s(yas--snippet nil (#s(yas--field 1 728 732 nil nil nil t #s(yas--exit 733 nil))) #s(yas--exit 733 nil) 56 nil #s(yas--field 1 728 732 nil nil nil t #s(yas--exit 733 nil)) nil nil))) nil (26040 48249 2580 594000) 0 nil])
([nil nil ((733 . 734)) nil (26040 48249 2576 370000) 0 nil])
([nil nil ((693 . 694) (t 26040 48249 23229 869000)) nil (26040 48263 20481 428000) 0 nil])
([nil nil ((686 . 694) (#("        " 0 8 (fontified nil)) . 685) (undo-tree-id6764 . -8) (undo-tree-id6765 . -8) (undo-tree-id6766 . -8) (undo-tree-id6767 . -8) (undo-tree-id6768 . -8) (undo-tree-id6769 . -8) (undo-tree-id6770 . -8) (undo-tree-id6771 . -8) (undo-tree-id6772 . -8) (undo-tree-id6773 . -8) (undo-tree-id6774 . -8) (undo-tree-id6775 . -8) (undo-tree-id6776 . -8) (undo-tree-id6777 . -8) (undo-tree-id6778 . -8) (undo-tree-id6779 . -8) (undo-tree-id6780 . -8) (undo-tree-id6781 . -8) (#(" " 0 1 (fontified nil)) . -693) (undo-tree-id6782 . -1) (undo-tree-id6783 . -1) (undo-tree-id6784 . -1) (undo-tree-id6785 . -1) (undo-tree-id6786 . -1) (undo-tree-id6787 . -1) (undo-tree-id6788 . -1) (undo-tree-id6789 . -1) (undo-tree-id6790 . -1) (undo-tree-id6791 . -1) (694 . 695)) nil (26040 48263 20479 605000) 0 nil])
([nil nil ((685 . 688)) nil (26040 48263 20460 947000) 0 nil])
([nil nil ((apply yas--snippet-revive 685 691 #s(yas--snippet nil nil nil 57 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 57 nil nil nil nil)) (685 . 691) (#("unsafe" 0 6 (fontified nil)) . 685) (685 . 691) (#("uns" 0 3 (fontified nil)) . 685) (685 . 688) (#("unsafe" 0 6 (fontified nil)) . -685) (685 . 691) (#("uns" 0 3 (fontified t)) . -685) (undo-tree-id6754 . -3) (undo-tree-id6755 . -1) (undo-tree-id6756 . -1) (undo-tree-id6757 . -2) (undo-tree-id6758 . -2) (undo-tree-id6759 . -2) (undo-tree-id6760 . -3) (undo-tree-id6761 . -3) (undo-tree-id6762 . -3) (undo-tree-id6763 . -3) 688) nil (26040 48263 20459 314000) 0 nil])
([nil nil ((685 . 693) (691 . 693)) nil (26040 48263 20451 228000) 0 nil])
([nil nil ((702 . 710) (#("            " 0 12 (fontified nil)) . 701) (undo-tree-id6744 . -8) (undo-tree-id6745 . -8) (undo-tree-id6746 . -8) (undo-tree-id6747 . -8) (undo-tree-id6748 . -8) (undo-tree-id6749 . -8) (undo-tree-id6750 . -8) (undo-tree-id6751 . -8) (undo-tree-id6752 . -8) (undo-tree-id6753 . -8) (709 . 713) (700 . 710)) nil (26040 48263 20449 724000) 0 nil])
([nil nil ((#("let symbol = ffi::zbar_symbol_next(self);" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 10 (face font-lock-variable-name-face fontified t) 10 13 (fontified t) 13 16 (face font-lock-constant-face fontified t) 16 18 (fontified t) 18 34 (fontified t) 34 35 (face (rainbow-delimiters-depth-3-face) fontified t) 35 39 (face font-lock-keyword-face fontified t) 39 40 (face (rainbow-delimiters-depth-3-face) fontified t) 40 41 (fontified t)) . 720) (undo-tree-id6647 . -4) (undo-tree-id6648 . -4) (undo-tree-id6649 . -4) (undo-tree-id6650 . -4) (undo-tree-id6651 . -13) (undo-tree-id6652 . -13) (undo-tree-id6653 . -13) (undo-tree-id6654 . -13) (undo-tree-id6655 . -13) (undo-tree-id6656 . -18) (undo-tree-id6657 . -18) (undo-tree-id6658 . -18) (undo-tree-id6659 . -18) (undo-tree-id6660 . -18) (undo-tree-id6661 . -18) (undo-tree-id6662 . -18) (undo-tree-id6663 . -18) (undo-tree-id6664 . -18) (undo-tree-id6665 . -18) (undo-tree-id6666 . -18) (undo-tree-id6667 . -18) (undo-tree-id6668 . -18) (undo-tree-id6669 . -18) (undo-tree-id6670 . -18) (undo-tree-id6671 . -18) (undo-tree-id6672 . -18) (undo-tree-id6673 . -18) (undo-tree-id6674 . -18) (undo-tree-id6675 . -18) (undo-tree-id6676 . -18) (undo-tree-id6677 . -18) (undo-tree-id6678 . -18) (undo-tree-id6679 . -18) (undo-tree-id6680 . -18) (undo-tree-id6681 . -18) (undo-tree-id6682 . -18) (undo-tree-id6683 . -18) (undo-tree-id6684 . -18) (undo-tree-id6685 . -18) (undo-tree-id6686 . -18) (undo-tree-id6687 . -18) (undo-tree-id6688 . -18) (undo-tree-id6689 . -18) (undo-tree-id6690 . -18) (undo-tree-id6691 . -18) (undo-tree-id6692 . -18) (undo-tree-id6693 . -18) (undo-tree-id6694 . -18) (undo-tree-id6695 . -18) (undo-tree-id6696 . -18) (undo-tree-id6697 . -18) (undo-tree-id6698 . -18) (undo-tree-id6699 . -18) (undo-tree-id6700 . -18) (undo-tree-id6701 . -18) (undo-tree-id6702 . -18) (undo-tree-id6703 . -18) (undo-tree-id6704 . -18) (undo-tree-id6705 . -18) (undo-tree-id6706 . -18) (undo-tree-id6707 . -18) (undo-tree-id6708 . -18) (undo-tree-id6709 . -18) (undo-tree-id6710 . -18) (undo-tree-id6711 . -18) (undo-tree-id6712 . -18) (undo-tree-id6713 . -18) (undo-tree-id6714 . -35) (undo-tree-id6715 . -35) (undo-tree-id6716 . -35) (undo-tree-id6717 . -35) (undo-tree-id6718 . -35) (undo-tree-id6719 . -35) (undo-tree-id6720 . -41) (undo-tree-id6721 . -41) (undo-tree-id6722 . -41) (undo-tree-id6723 . -41) (undo-tree-id6724 . -41) (undo-tree-id6725 . -41) (undo-tree-id6726 . -41) (undo-tree-id6727 . -41) (undo-tree-id6728 . -41) (undo-tree-id6729 . -41) (undo-tree-id6730 . -41) (undo-tree-id6731 . -41) (undo-tree-id6732 . -41) (undo-tree-id6733 . -41) (undo-tree-id6734 . -41) (undo-tree-id6735 . -41) (undo-tree-id6736 . -41) (undo-tree-id6737 . -35) (undo-tree-id6738 . -30) (undo-tree-id6739 . -23) (undo-tree-id6740 . -18) (undo-tree-id6741 . -13) (undo-tree-id6742 . -4) (undo-tree-id6743 . -41)) nil (26040 48263 78439 438000) 0 nil])
([nil nil ((nil rear-nonsticky nil 741 . 742) (nil fontified nil 741 . 742) (nil fontified nil 740 . 741) (nil fontified nil 736 . 740) (nil fontified nil 735 . 736) (nil fontified nil 719 . 735) (nil fontified nil 717 . 719) (nil fontified nil 714 . 717) (nil fontified nil 711 . 714) (nil fontified nil 705 . 711) (nil fontified nil 704 . 705) (nil fontified nil 701 . 704) (701 . 742)) nil (26040 48266 779129 584000) 0 nil] [nil nil ((nil rear-nonsticky nil 760 . 761) (nil fontified nil 760 . 761) (nil fontified nil 759 . 760) (nil fontified nil 755 . 759) (nil fontified nil 754 . 755) (nil fontified nil 738 . 754) (nil fontified nil 736 . 738) (nil fontified nil 733 . 736) (nil fontified nil 730 . 733) (nil fontified nil 724 . 730) (nil fontified nil 723 . 724) (nil fontified nil 720 . 723) (720 . 761)) ((#("let symbol = ffi::zbar_symbol_next(self);" 0 3 (face font-lock-keyword-face fontified nil) 3 4 (fontified nil) 4 10 (face font-lock-variable-name-face fontified nil) 10 13 (fontified nil) 13 16 (face font-lock-constant-face fontified nil) 16 18 (fontified nil) 18 34 (fontified nil) 34 35 (face (rainbow-delimiters-depth-3-face) fontified nil) 35 39 (face font-lock-keyword-face fontified nil) 39 40 (face (rainbow-delimiters-depth-3-face) fontified nil) 40 41 (rear-nonsticky nil fontified nil)) . 720) (undo-tree-id6793 . -41) (undo-tree-id6794 . -41) (undo-tree-id6795 . -41) (undo-tree-id6796 . -41) (undo-tree-id6797 . -41) (nil rear-nonsticky t 760 . 761)) (26040 48263 20897 261000) 0 nil])
([nil nil ((701 . 713) 742) nil (26040 48266 779123 549000) 0 nil])
([nil nil ((nil rear-nonsticky nil 801 . 802) (nil fontified nil 801 . 802) (nil fontified nil 800 . 801) (nil fontified nil 796 . 800) (nil fontified nil 795 . 796) (nil fontified nil 779 . 795) (nil fontified nil 777 . 779) (nil fontified nil 774 . 777) (nil fontified nil 771 . 774) (nil fontified nil 765 . 771) (nil fontified nil 764 . 765) (nil fontified nil 761 . 764) (761 . 802)) ((#("let symbol = ffi::zbar_symbol_next(self);" 0 3 (face font-lock-keyword-face fontified nil) 3 4 (fontified nil) 4 10 (face font-lock-variable-name-face fontified nil) 10 13 (fontified nil) 13 16 (face font-lock-constant-face fontified nil) 16 18 (fontified nil) 18 34 (fontified nil) 34 35 (face (rainbow-delimiters-depth-3-face) fontified nil) 35 39 (face font-lock-keyword-face fontified nil) 39 40 (face (rainbow-delimiters-depth-3-face) fontified nil) 40 41 (rear-nonsticky nil fontified nil)) . 761) (undo-tree-id6792 . -41) (nil rear-nonsticky t 801 . 802)) (26040 48263 20177 540000) 0 nil])
([nil nil ((#("unsafe{" 0 6 (face rust-unsafe fontified t) 6 7 (face (rainbow-delimiters-depth-3-face) fontified t)) . -693) (undo-tree-id6815 . -7) (undo-tree-id6816 . -7) (undo-tree-id6817 . -7) (undo-tree-id6818 . -7) (undo-tree-id6819 . -7) (undo-tree-id6820 . -7) (undo-tree-id6821 . -7) (undo-tree-id6822 . -7) 700 (t 26040 48266 796564 293000)) nil (26040 48289 235958 79000) 0 nil])
nil
([nil nil ((#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -756) (undo-tree-id6798 . -1) (undo-tree-id6799 . -1) (undo-tree-id6800 . -1) (undo-tree-id6801 . -1) (undo-tree-id6802 . -1) (undo-tree-id6803 . -1) (undo-tree-id6804 . -1) (undo-tree-id6805 . -1) (undo-tree-id6806 . -1) (undo-tree-id6807 . -1) (undo-tree-id6808 . -1) (undo-tree-id6809 . -1) (undo-tree-id6810 . -1) (undo-tree-id6811 . -1) (undo-tree-id6812 . -1) (undo-tree-id6813 . -1) (undo-tree-id6814 . -1) 757) nil (26040 48289 235949 863000) 0 nil])
([nil nil ((642 . 643)) nil (26040 48289 235657 561000) 0 nil])
([nil nil ((642 . 648)) nil (26040 48289 235653 941000) 0 nil])
([nil nil ((#("unsafe " 0 6 (face rust-unsafe fontified t) 6 7 (fontified t)) . -642) (undo-tree-id6853 . -7) (undo-tree-id6854 . -7) (undo-tree-id6855 . 1) (undo-tree-id6856 . -5) (undo-tree-id6857 . -6) (undo-tree-id6858 . -7) 649 (t 26040 48289 283232 340000)) nil (26040 48305 972654 190000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -702)) nil (26040 48305 972648 384000) 0 nil])
([nil nil ((715 . 716)) nil (26040 48305 972647 755000) 0 nil])
([nil nil ((715 . 718)) nil (26040 48305 972647 279000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -717) (undo-tree-id6849 . -1) (undo-tree-id6850 . -1) (undo-tree-id6851 . -1) (undo-tree-id6852 . -1) 718) nil (26040 48305 972646 269000) 0 nil])
([nil nil ((717 . 718)) nil (26040 48305 972642 806000) 0 nil])
([nil nil ((apply yas--snippet-revive 715 747 #s(yas--snippet nil nil #s(yas--exit 736 nil) 58 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 736 nil) 58 nil nil nil nil)) (715 . 747) (#("unsafe {
            $0
        };" 0 34 (fontified nil)) . 715) (739 . 747) (724 . 736) (#("    " 0 4 (fontified nil)) . 724) (715 . 733) (#("uns" 0 3 (fontified nil)) . 715) (715 . 718) (#("unsafe" 0 6 (fontified nil)) . -715) (715 . 721) (#("uns" 0 3 (fontified t)) . -715) (undo-tree-id6834 . -3) (undo-tree-id6835 . -1) (undo-tree-id6836 . -1) (undo-tree-id6837 . -1) (undo-tree-id6838 . -2) (undo-tree-id6839 . -2) (undo-tree-id6840 . -2) (undo-tree-id6841 . -2) (undo-tree-id6842 . -2) (undo-tree-id6843 . -2) (undo-tree-id6844 . -2) (undo-tree-id6845 . -3) (undo-tree-id6846 . -3) (undo-tree-id6847 . -3) (undo-tree-id6848 . -3) 718) nil (26040 48305 972640 705000) 0 nil])
([nil nil ((#("ffi::zbar_symbol_next(self);" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t) 5 21 (fontified t) 21 22 (face (rainbow-delimiters-depth-3-face) fontified t) 22 26 (face font-lock-keyword-face fontified t) 26 27 (face (rainbow-delimiters-depth-3-face) fontified t) 27 28 (fontified t rear-nonsticky t)) . 748) (undo-tree-id6824 . -1) (undo-tree-id6825 . -1) (undo-tree-id6826 . -1) (undo-tree-id6827 . -1) (undo-tree-id6828 . -1) (undo-tree-id6829 . -1) (undo-tree-id6830 . -1) (undo-tree-id6831 . -1) (undo-tree-id6832 . -1) (undo-tree-id6833 . -28)) nil (26040 48306 346561 736000) 0 nil])
([nil nil ((nil rear-nonsticky nil 735 . 736) (nil fontified nil 735 . 736) (735 . 736)) nil (26040 48313 611226 857000) 0 nil] [nil nil ((nil fontified nil 775 . 776) (nil fontified nil 774 . 775) (nil fontified nil 770 . 774) (nil fontified nil 769 . 770) (nil fontified nil 753 . 769) (nil fontified nil 751 . 753) (nil fontified nil 748 . 751) (748 . 776)) ((#("ffi::zbar_symbol_next(self);" 0 3 (face font-lock-constant-face fontified nil) 3 5 (fontified nil) 5 21 (fontified nil) 21 22 (face (rainbow-delimiters-depth-3-face) fontified nil) 22 26 (face font-lock-keyword-face fontified nil) 26 27 (face (rainbow-delimiters-depth-3-face) fontified nil) 27 28 (fontified nil rear-nonsticky t)) . 748) (undo-tree-id6859 . -28) (undo-tree-id6860 . -28) (undo-tree-id6861 . -28) (undo-tree-id6862 . -28) (nil fontified t 775 . 776)) (26040 48305 972878 865000) 0 nil])
([nil nil ((nil rear-nonsticky nil 736 . 737) (nil fontified nil 736 . 737) (736 . 737)) nil (26040 48314 156136 579000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 776) (undo-tree-id6823 . -1)) ((776 . 777)) (26040 48305 972613 125000) 0 nil])
([nil nil ((nil rear-nonsticky nil 751 . 752) (nil fontified nil 724 . 752) (724 . 752)) nil (26040 48322 724083 57000) 0 nil] [nil nil ((#("fn" 0 2 (face font-lock-keyword-face fontified nil)) . 780) (774 . 780) (#("unsafe" 0 6 (face rust-unsafe fontified nil)) . 715) (721 . 723) 737) ((#("fn" 0 2 (face font-lock-keyword-face fontified nil)) . 721) (715 . 721) (#("unsafe" 0 6 (face rust-unsafe fontified nil)) . 774) (undo-tree-id6865 . -6) (undo-tree-id6866 . -6) (undo-tree-id6867 . -6) (undo-tree-id6868 . -6) (undo-tree-id6869 . -6) (undo-tree-id6870 . -6) (undo-tree-id6871 . -6) (undo-tree-id6872 . -6) (undo-tree-id6873 . -6) (undo-tree-id6874 . -6) (undo-tree-id6875 . -6) (undo-tree-id6876 . -6) (undo-tree-id6877 . -6) (undo-tree-id6878 . -6) (undo-tree-id6879 . -6) (780 . 782)) (26040 48313 611536 345000) 0 nil])
nil
([nil nil ((#(";" 0 1 (rear-nonsticky t fontified t)) . -751) (undo-tree-id7317 . -1) (undo-tree-id7318 . -1) (undo-tree-id7319 . -1) (undo-tree-id7320 . -1) (undo-tree-id7321 . -1) (undo-tree-id7322 . -1) (undo-tree-id7323 . -1) (undo-tree-id7324 . -1) (undo-tree-id7325 . -1) (undo-tree-id7326 . -1) 752) nil (26040 48322 724081 371000) 0 nil])
([nil nil ((nil rear-nonsticky nil 807 . 808) (nil fontified nil 780 . 808) (780 . 808)) ((#("ffi::zbar_symbol_next(self);" 0 3 (face font-lock-constant-face fontified nil) 3 21 (fontified nil) 21 22 (face (rainbow-delimiters-depth-1-face) fontified nil) 22 26 (face font-lock-keyword-face fontified nil) 26 27 (face (rainbow-delimiters-depth-1-face) fontified nil) 27 28 (rear-nonsticky nil fontified nil)) . 780) (undo-tree-id6863 . -28) (undo-tree-id6864 . -28) (nil rear-nonsticky t 807 . 808)) (26040 48313 611218 281000) 0 nil])
([nil nil ((724 . 736) 751) nil (26040 48322 724072 443000) 0 nil])
nil
([nil nil ((#(" " 0 1 (fontified t)) . -763) (undo-tree-id6880 . -1) (undo-tree-id6881 . -1) (undo-tree-id6882 . -1) (undo-tree-id6883 . -1) (undo-tree-id6884 . -1) (undo-tree-id6885 . -1) (undo-tree-id6886 . -1) (undo-tree-id6887 . -1) (undo-tree-id6888 . -1) (undo-tree-id6889 . -1) (undo-tree-id6890 . -1) (undo-tree-id6891 . -1) (undo-tree-id6892 . -1) (undo-tree-id6893 . -1) (undo-tree-id6894 . -1) (undo-tree-id6895 . -1) (undo-tree-id6896 . -1) (undo-tree-id6897 . -1) (undo-tree-id6898 . -1) (undo-tree-id6899 . -1) (undo-tree-id6900 . -1) (undo-tree-id6901 . -1) (undo-tree-id6902 . -1) (undo-tree-id6903 . -1) (undo-tree-id6904 . -1) (undo-tree-id6905 . -1) (undo-tree-id6906 . -1) (undo-tree-id6907 . -1) (undo-tree-id6908 . -1) (undo-tree-id6909 . -1) (undo-tree-id6910 . -1) (undo-tree-id6911 . -1) (undo-tree-id6912 . -1) (undo-tree-id6913 . -1) (undo-tree-id6914 . -1) (undo-tree-id6915 . -1) (undo-tree-id6916 . -1) (undo-tree-id6917 . -1) (undo-tree-id6918 . -1) (undo-tree-id6919 . -1) (undo-tree-id6920 . -1) (undo-tree-id6921 . -1) (undo-tree-id6922 . -1) (undo-tree-id6923 . -1) (undo-tree-id6924 . -1) (undo-tree-id6925 . -1) (undo-tree-id6926 . -1) (#(" " 0 1 (fontified t)) . -764) (undo-tree-id6927 . -1) (undo-tree-id6928 . -1) (undo-tree-id6929 . -1) (undo-tree-id6930 . -1) (undo-tree-id6931 . -1) (undo-tree-id6932 . -1) (undo-tree-id6933 . -1) (undo-tree-id6934 . -1) (undo-tree-id6935 . -1) (undo-tree-id6936 . -1) (undo-tree-id6937 . -1) (undo-tree-id6938 . -1) (undo-tree-id6939 . -1) (undo-tree-id6940 . -1) (undo-tree-id6941 . -1) (undo-tree-id6942 . -1) (undo-tree-id6943 . -1) (undo-tree-id6944 . -1) (undo-tree-id6945 . -1) (undo-tree-id6946 . -1) (undo-tree-id6947 . -1) (undo-tree-id6948 . -1) (undo-tree-id6949 . -1) (undo-tree-id6950 . -1) (undo-tree-id6951 . -1) (undo-tree-id6952 . -1) (undo-tree-id6953 . -1) (undo-tree-id6954 . -1) (undo-tree-id6955 . -1) (undo-tree-id6956 . -1) (undo-tree-id6957 . -1) (undo-tree-id6958 . -1) (undo-tree-id6959 . -1) (undo-tree-id6960 . -1) (undo-tree-id6961 . -1) (undo-tree-id6962 . -1) (undo-tree-id6963 . -1) (undo-tree-id6964 . -1) (undo-tree-id6965 . -1) (undo-tree-id6966 . -1) (undo-tree-id6967 . -1) (undo-tree-id6968 . -1) (undo-tree-id6969 . -1) (undo-tree-id6970 . -1) (undo-tree-id6971 . -1) (#(" " 0 1 (fontified t)) . -765) (undo-tree-id6972 . -1) (undo-tree-id6973 . -1) (undo-tree-id6974 . -1) (undo-tree-id6975 . -1) (undo-tree-id6976 . -1) (undo-tree-id6977 . -1) (undo-tree-id6978 . -1) (undo-tree-id6979 . -1) (undo-tree-id6980 . -1) (undo-tree-id6981 . -1) (undo-tree-id6982 . -1) (undo-tree-id6983 . -1) (undo-tree-id6984 . -1) (undo-tree-id6985 . -1) (undo-tree-id6986 . -1) (undo-tree-id6987 . -1) (undo-tree-id6988 . -1) (undo-tree-id6989 . -1) (undo-tree-id6990 . -1) (undo-tree-id6991 . -1) (undo-tree-id6992 . -1) (undo-tree-id6993 . -1) (undo-tree-id6994 . -1) (undo-tree-id6995 . -1) (undo-tree-id6996 . -1) (undo-tree-id6997 . -1) (undo-tree-id6998 . -1) (undo-tree-id6999 . -1) (undo-tree-id7000 . -1) (undo-tree-id7001 . -1) (undo-tree-id7002 . -1) (undo-tree-id7003 . -1) (undo-tree-id7004 . -1) (undo-tree-id7005 . -1) (undo-tree-id7006 . -1) (undo-tree-id7007 . -1) (undo-tree-id7008 . -1) (undo-tree-id7009 . -1) (undo-tree-id7010 . -1) (undo-tree-id7011 . -1) (undo-tree-id7012 . -1) (undo-tree-id7013 . -1) (undo-tree-id7014 . -1) (#(" " 0 1 (fontified t)) . -766) (undo-tree-id7015 . -1) (undo-tree-id7016 . -1) (undo-tree-id7017 . -1) (undo-tree-id7018 . -1) (undo-tree-id7019 . -1) (undo-tree-id7020 . -1) (undo-tree-id7021 . -1) (undo-tree-id7022 . -1) (undo-tree-id7023 . -1) (undo-tree-id7024 . -1) (undo-tree-id7025 . -1) (undo-tree-id7026 . -1) (undo-tree-id7027 . -1) (undo-tree-id7028 . -1) (undo-tree-id7029 . -1) (undo-tree-id7030 . -1) (undo-tree-id7031 . -1) (undo-tree-id7032 . -1) (undo-tree-id7033 . -1) (undo-tree-id7034 . -1) (undo-tree-id7035 . -1) (undo-tree-id7036 . -1) (undo-tree-id7037 . -1) (undo-tree-id7038 . -1) (undo-tree-id7039 . -1) (undo-tree-id7040 . -1) (undo-tree-id7041 . -1) (undo-tree-id7042 . -1) (undo-tree-id7043 . -1) (undo-tree-id7044 . -1) (undo-tree-id7045 . -1) (undo-tree-id7046 . -1) (undo-tree-id7047 . -1) (undo-tree-id7048 . -1) (undo-tree-id7049 . -1) (undo-tree-id7050 . -1) (undo-tree-id7051 . -1) (undo-tree-id7052 . -1) (undo-tree-id7053 . -1) (undo-tree-id7054 . -1) (undo-tree-id7055 . -1) (#(" " 0 1 (fontified t)) . -767) (undo-tree-id7056 . -1) (undo-tree-id7057 . -1) (undo-tree-id7058 . -1) (undo-tree-id7059 . -1) (undo-tree-id7060 . -1) (undo-tree-id7061 . -1) (undo-tree-id7062 . -1) (undo-tree-id7063 . -1) (undo-tree-id7064 . -1) (undo-tree-id7065 . -1) (undo-tree-id7066 . -1) (undo-tree-id7067 . -1) (undo-tree-id7068 . -1) (undo-tree-id7069 . -1) (undo-tree-id7070 . -1) (undo-tree-id7071 . -1) (undo-tree-id7072 . -1) (undo-tree-id7073 . -1) (undo-tree-id7074 . -1) (undo-tree-id7075 . -1) (undo-tree-id7076 . -1) (undo-tree-id7077 . -1) (undo-tree-id7078 . -1) (undo-tree-id7079 . -1) (undo-tree-id7080 . -1) (undo-tree-id7081 . -1) (undo-tree-id7082 . -1) (undo-tree-id7083 . -1) (undo-tree-id7084 . -1) (undo-tree-id7085 . -1) (undo-tree-id7086 . -1) (undo-tree-id7087 . -1) (undo-tree-id7088 . -1) (undo-tree-id7089 . -1) (undo-tree-id7090 . -1) (undo-tree-id7091 . -1) (undo-tree-id7092 . -1) (undo-tree-id7093 . -1) (undo-tree-id7094 . -1) (#(" " 0 1 (fontified t)) . -768) (undo-tree-id7095 . -1) (undo-tree-id7096 . -1) (undo-tree-id7097 . -1) (undo-tree-id7098 . -1) (undo-tree-id7099 . -1) (undo-tree-id7100 . -1) (undo-tree-id7101 . -1) (undo-tree-id7102 . -1) (undo-tree-id7103 . -1) (undo-tree-id7104 . -1) (undo-tree-id7105 . -1) (undo-tree-id7106 . -1) (undo-tree-id7107 . -1) (undo-tree-id7108 . -1) (undo-tree-id7109 . -1) (undo-tree-id7110 . -1) (undo-tree-id7111 . -1) (undo-tree-id7112 . -1) (undo-tree-id7113 . -1) (undo-tree-id7114 . -1) (undo-tree-id7115 . -1) (undo-tree-id7116 . -1) (undo-tree-id7117 . -1) (undo-tree-id7118 . -1) (undo-tree-id7119 . -1) (undo-tree-id7120 . -1) (undo-tree-id7121 . -1) (undo-tree-id7122 . -1) (undo-tree-id7123 . -1) (undo-tree-id7124 . -1) (undo-tree-id7125 . -1) (undo-tree-id7126 . -1) (undo-tree-id7127 . -1) (undo-tree-id7128 . -1) (undo-tree-id7129 . -1) (undo-tree-id7130 . -1) (undo-tree-id7131 . -1) (#(" " 0 1 (fontified t)) . -769) (undo-tree-id7132 . -1) (undo-tree-id7133 . -1) (undo-tree-id7134 . -1) (undo-tree-id7135 . -1) (undo-tree-id7136 . -1) (undo-tree-id7137 . -1) (undo-tree-id7138 . -1) (undo-tree-id7139 . -1) (undo-tree-id7140 . -1) (undo-tree-id7141 . -1) (undo-tree-id7142 . -1) (undo-tree-id7143 . -1) (undo-tree-id7144 . -1) (undo-tree-id7145 . -1) (undo-tree-id7146 . -1) (undo-tree-id7147 . -1) (undo-tree-id7148 . -1) (undo-tree-id7149 . -1) (undo-tree-id7150 . -1) (undo-tree-id7151 . -1) (undo-tree-id7152 . -1) (undo-tree-id7153 . -1) (undo-tree-id7154 . -1) (undo-tree-id7155 . -1) (undo-tree-id7156 . -1) (undo-tree-id7157 . -1) (undo-tree-id7158 . -1) (undo-tree-id7159 . -1) (undo-tree-id7160 . -1) (undo-tree-id7161 . -1) (undo-tree-id7162 . -1) (undo-tree-id7163 . -1) (undo-tree-id7164 . -1) (undo-tree-id7165 . -1) (undo-tree-id7166 . -1) (#(" " 0 1 (fontified t)) . -770) (undo-tree-id7167 . -1) (undo-tree-id7168 . -1) (undo-tree-id7169 . -1) (undo-tree-id7170 . -1) (undo-tree-id7171 . -1) (undo-tree-id7172 . -1) (undo-tree-id7173 . -1) (undo-tree-id7174 . -1) (undo-tree-id7175 . -1) (undo-tree-id7176 . -1) (undo-tree-id7177 . -1) (undo-tree-id7178 . -1) (undo-tree-id7179 . -1) (undo-tree-id7180 . -1) (undo-tree-id7181 . -1) (undo-tree-id7182 . -1) (undo-tree-id7183 . -1) (undo-tree-id7184 . -1) (undo-tree-id7185 . -1) (undo-tree-id7186 . -1) (undo-tree-id7187 . -1) (undo-tree-id7188 . -1) (undo-tree-id7189 . -1) (undo-tree-id7190 . -1) (undo-tree-id7191 . -1) (undo-tree-id7192 . -1) (undo-tree-id7193 . -1) (undo-tree-id7194 . -1) (undo-tree-id7195 . -1) (undo-tree-id7196 . -1) (undo-tree-id7197 . -1) (undo-tree-id7198 . -1) (undo-tree-id7199 . -1) (#(" " 0 1 (fontified t)) . -771) (undo-tree-id7200 . -1) (undo-tree-id7201 . -1) (undo-tree-id7202 . -1) (undo-tree-id7203 . -1) (undo-tree-id7204 . -1) (undo-tree-id7205 . -1) (undo-tree-id7206 . -1) (undo-tree-id7207 . -1) (undo-tree-id7208 . -1) (undo-tree-id7209 . -1) (undo-tree-id7210 . -1) (undo-tree-id7211 . -1) (undo-tree-id7212 . -1) (undo-tree-id7213 . -1) (undo-tree-id7214 . -1) (undo-tree-id7215 . -1) (undo-tree-id7216 . -1) (undo-tree-id7217 . -1) (undo-tree-id7218 . -1) (undo-tree-id7219 . -1) (undo-tree-id7220 . -1) (undo-tree-id7221 . -1) (undo-tree-id7222 . -1) (undo-tree-id7223 . -1) (undo-tree-id7224 . -1) (undo-tree-id7225 . -1) (undo-tree-id7226 . -1) (undo-tree-id7227 . -1) (#(" " 0 1 (fontified t)) . -772) (undo-tree-id7228 . -1) (undo-tree-id7229 . -1) (undo-tree-id7230 . -1) (undo-tree-id7231 . -1) (undo-tree-id7232 . -1) (undo-tree-id7233 . -1) (undo-tree-id7234 . -1) (undo-tree-id7235 . -1) (undo-tree-id7236 . -1) (undo-tree-id7237 . -1) (undo-tree-id7238 . -1) (undo-tree-id7239 . -1) (undo-tree-id7240 . -1) (undo-tree-id7241 . -1) (undo-tree-id7242 . -1) (undo-tree-id7243 . -1) (undo-tree-id7244 . -1) (undo-tree-id7245 . -1) (undo-tree-id7246 . -1) (undo-tree-id7247 . -1) (undo-tree-id7248 . -1) (undo-tree-id7249 . -1) (undo-tree-id7250 . -1) (undo-tree-id7251 . -1) (undo-tree-id7252 . -1) (undo-tree-id7253 . -1) (#(" " 0 1 (fontified t)) . -773) (undo-tree-id7254 . -1) (undo-tree-id7255 . -1) (undo-tree-id7256 . -1) (undo-tree-id7257 . -1) (undo-tree-id7258 . -1) (undo-tree-id7259 . -1) (undo-tree-id7260 . -1) (undo-tree-id7261 . -1) (undo-tree-id7262 . -1) (undo-tree-id7263 . -1) (undo-tree-id7264 . -1) (undo-tree-id7265 . -1) (undo-tree-id7266 . -1) (undo-tree-id7267 . -1) (undo-tree-id7268 . -1) (undo-tree-id7269 . -1) (undo-tree-id7270 . -1) (undo-tree-id7271 . -1) (undo-tree-id7272 . -1) (undo-tree-id7273 . -1) (undo-tree-id7274 . -1) (undo-tree-id7275 . -1) (undo-tree-id7276 . -1) (undo-tree-id7277 . -1) (#("
" 0 1 (fontified t rear-nonsticky t)) . -774) (undo-tree-id7278 . -1) (undo-tree-id7279 . -1) (undo-tree-id7280 . -1) (undo-tree-id7281 . -1) (undo-tree-id7282 . -1) (undo-tree-id7283 . -1) (undo-tree-id7284 . -1) (undo-tree-id7285 . -1) (undo-tree-id7286 . -1) (undo-tree-id7287 . -1) (undo-tree-id7288 . -1) (undo-tree-id7289 . -1) (undo-tree-id7290 . -1) (undo-tree-id7291 . -1) (undo-tree-id7292 . -1) (undo-tree-id7293 . -1) (undo-tree-id7294 . -1) (undo-tree-id7295 . -1) (undo-tree-id7296 . -1) (#("
" 0 1 (fontified t rear-nonsticky t)) . -775) (undo-tree-id7297 . -1) (undo-tree-id7298 . -1) (undo-tree-id7299 . -1) (undo-tree-id7300 . -1) (undo-tree-id7301 . -1) (undo-tree-id7302 . -1) (undo-tree-id7303 . -1) (undo-tree-id7304 . -1) (undo-tree-id7305 . -1) (undo-tree-id7306 . -1) (undo-tree-id7307 . -1) (undo-tree-id7308 . -1) (undo-tree-id7309 . -1) (undo-tree-id7310 . -1) (undo-tree-id7311 . -1) (undo-tree-id7312 . -1) (#(" " 0 1 (fontified t)) . -776) (undo-tree-id7313 . -1) (undo-tree-id7314 . -1) (undo-tree-id7315 . -1) (undo-tree-id7316 . -1) 777) nil (26040 48322 724052 982000) 0 nil])
([nil nil ((784 . 792) (t 26040 48322 743234 392000)) nil (26040 48375 619705 306000) 0 nil])
([nil nil ((790 . 796) (#("sy" 0 2 (fontified nil)) . 790) (790 . 792) (#("symbol" 0 6 (fontified nil)) . -790) (790 . 796) (#("sy" 0 2 (fontified t)) . -790) (undo-tree-id7492 . -2) (undo-tree-id7493 . -1) (undo-tree-id7494 . -1) (undo-tree-id7495 . -2) (undo-tree-id7496 . -2) (undo-tree-id7497 . -2) (undo-tree-id7498 . -2) 792) nil (26040 48375 619703 988000) 0 nil])
([nil nil ((796 . 799)) nil (26040 48375 619697 800000) 0 nil])
([nil nil ((apply yas--snippet-revive 797 806 #s(yas--snippet nil nil #s(yas--exit 806 nil) 59 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 806 nil) 59 nil nil nil nil)) (797 . 806) (#("is_null()$0" 0 11 (fontified nil)) . 797) (797 . 808) (#("is" 0 2 (fontified nil)) . 797) (797 . 799) (#("is_null()" 0 9 (fontified nil)) . -797) (797 . 806) (#("is" 0 2 (fontified t)) . -797) (undo-tree-id7484 . -2) (undo-tree-id7485 . -1) (undo-tree-id7486 . -1) (undo-tree-id7487 . -1) (undo-tree-id7488 . -2) (undo-tree-id7489 . -2) (undo-tree-id7490 . -2) (undo-tree-id7491 . -2) 799) nil (26040 48375 619696 208000) 0 nil])
([nil nil ((806 . 809)) nil (26040 48375 619689 12000) 0 nil])
([nil nil ((810 . 818) (#("            " 0 12 (fontified nil)) . 809) (undo-tree-id7480 . -8) (undo-tree-id7481 . -8) (undo-tree-id7482 . -8) (undo-tree-id7483 . -8) (817 . 821) (808 . 818)) nil (26040 48375 619688 116000) 0 nil])
([nil nil ((809 . 821)) nil (26040 48375 619683 672000) 0 nil])
([nil nil ((821 . 825)) nil (26040 48375 619683 74000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -821) (undo-tree-id7421 . -1) (undo-tree-id7422 . -1) (undo-tree-id7423 . -1) (undo-tree-id7424 . -1) (undo-tree-id7425 . -1) (undo-tree-id7426 . -1) (undo-tree-id7427 . -1) (undo-tree-id7428 . -1) (undo-tree-id7429 . -1) (undo-tree-id7430 . -1) (undo-tree-id7431 . -1) (undo-tree-id7432 . -1) (undo-tree-id7433 . -1) (undo-tree-id7434 . -1) (undo-tree-id7435 . -1) (undo-tree-id7436 . -1) (undo-tree-id7437 . -1) (undo-tree-id7438 . -1) (undo-tree-id7439 . -1) (undo-tree-id7440 . -1) (undo-tree-id7441 . -1) (undo-tree-id7442 . -1) (undo-tree-id7443 . -1) (#("r" 0 1 (fontified t)) . -822) (undo-tree-id7444 . -1) (undo-tree-id7445 . -1) (undo-tree-id7446 . -1) (undo-tree-id7447 . -1) (undo-tree-id7448 . -1) (undo-tree-id7449 . -1) (undo-tree-id7450 . -1) (undo-tree-id7451 . -1) (undo-tree-id7452 . -1) (undo-tree-id7453 . -1) (undo-tree-id7454 . -1) (undo-tree-id7455 . -1) (undo-tree-id7456 . -1) (undo-tree-id7457 . -1) (undo-tree-id7458 . -1) (undo-tree-id7459 . -1) (undo-tree-id7460 . -1) (#("u" 0 1 (fontified t)) . -823) (undo-tree-id7461 . -1) (undo-tree-id7462 . -1) (undo-tree-id7463 . -1) (undo-tree-id7464 . -1) (undo-tree-id7465 . -1) (undo-tree-id7466 . -1) (undo-tree-id7467 . -1) (undo-tree-id7468 . -1) (undo-tree-id7469 . -1) (undo-tree-id7470 . -1) (undo-tree-id7471 . -1) (undo-tree-id7472 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -824) (undo-tree-id7473 . -1) (undo-tree-id7474 . -1) (undo-tree-id7475 . -1) (undo-tree-id7476 . -1) (undo-tree-id7477 . -1) (undo-tree-id7478 . -1) (undo-tree-id7479 . -1) 825) nil (26040 48375 619679 562000) 0 nil])
([nil nil ((821 . 825)) nil (26040 48375 619478 863000) 0 nil])
([nil nil ((#("y" 0 1 (face font-lock-type-face fontified t)) . -823) (undo-tree-id7410 . -1) (undo-tree-id7411 . -1) (undo-tree-id7412 . -1) (undo-tree-id7413 . -1) (undo-tree-id7414 . -1) (undo-tree-id7415 . -1) (undo-tree-id7416 . -1) (undo-tree-id7417 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -824) (undo-tree-id7418 . -1) (undo-tree-id7419 . -1) (undo-tree-id7420 . -1) 825) nil (26040 48375 619477 711000) 0 nil])
([nil nil ((823 . 827)) nil (26040 48375 619469 30000) 0 nil])
([nil nil ((#("True =" 0 4 (face font-lock-type-face fontified t) 4 6 (fontified t)) . -821) (undo-tree-id7371 . -6) (undo-tree-id7372 . -6) (undo-tree-id7373 . -1) (undo-tree-id7374 . -1) (undo-tree-id7375 . -2) (undo-tree-id7376 . -2) (undo-tree-id7377 . -2) (undo-tree-id7378 . -2) (undo-tree-id7379 . -2) (undo-tree-id7380 . -2) (undo-tree-id7381 . -2) (undo-tree-id7382 . -2) (undo-tree-id7383 . -2) (undo-tree-id7384 . -2) (undo-tree-id7385 . -2) (undo-tree-id7386 . -2) (undo-tree-id7387 . -2) (undo-tree-id7388 . -3) (undo-tree-id7389 . -3) (undo-tree-id7390 . -4) (undo-tree-id7391 . -4) (undo-tree-id7392 . -4) (undo-tree-id7393 . -4) (undo-tree-id7394 . -4) (undo-tree-id7395 . -4) (undo-tree-id7396 . -4) (undo-tree-id7397 . -6) (undo-tree-id7398 . -6) (undo-tree-id7399 . -6) (undo-tree-id7400 . -6) (undo-tree-id7401 . -6) (undo-tree-id7402 . -6) (undo-tree-id7403 . -6) (undo-tree-id7404 . -6) (undo-tree-id7405 . -6) (undo-tree-id7406 . -6) (undo-tree-id7407 . -6) (undo-tree-id7408 . -6) (undo-tree-id7409 . -6) 827) nil (26040 48375 619466 871000) 0 nil])
([nil nil ((821 . 829)) nil (26040 48375 619438 714000) 0 nil])
([nil nil ((829 . 832)) nil (26040 48375 619438 172000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 834 840 nil nil nil t #s(yas--exit 841 nil))) #s(yas--exit 841 nil) 60 nil #s(yas--field 1 834 840 nil nil nil t #s(yas--exit 841 nil)) nil nil)) (829 . 837) (#("Some(${1:()})$0" 0 15 (fontified nil)) . 829) (829 . 844) (#("Som" 0 3 (fontified nil)) . 829) (829 . 832) (#("Some(…)" 0 7 (fontified nil)) . -829) (829 . 836) (#("Som" 0 3 (face font-lock-type-face fontified t)) . -829) (undo-tree-id7362 . -3) (undo-tree-id7363 . -1) (undo-tree-id7364 . -1) (undo-tree-id7365 . -1) (undo-tree-id7366 . -2) (undo-tree-id7367 . -2) (undo-tree-id7368 . -2) (undo-tree-id7369 . -3) (undo-tree-id7370 . -3) 832) nil (26040 48375 619436 620000) 0 nil])
([nil nil ((835 . 836) (#("()" 0 1 (face (rainbow-delimiters-depth-5-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-5-face) fontified nil)) . 835) (undo-tree-id7361 . -2) (834 . 835)) nil (26040 48375 619427 867000) 0 nil])
([nil nil ((834 . 840) (#("sy" 0 2 (fontified nil)) . 834) (undo-tree-id7348 . -2) (834 . 836) (#("symbol" 0 6 (fontified nil)) . -834) (undo-tree-id7349 . -6) (834 . 840) (#("sy" 0 2 (fontified t)) . -834) (undo-tree-id7350 . -2) (undo-tree-id7351 . -2) (undo-tree-id7352 . -2) (undo-tree-id7353 . -1) (undo-tree-id7354 . -1) (undo-tree-id7355 . -1) (undo-tree-id7356 . -1) (undo-tree-id7357 . -2) (undo-tree-id7358 . -2) (undo-tree-id7359 . -2) (undo-tree-id7360 . -2) 836) nil (26040 48375 619425 527000) 0 nil])
([nil nil ((apply yas--snippet-revive 829 841 #s(yas--snippet nil (#s(yas--field 1 834 840 nil nil nil t #s(yas--exit 841 nil))) #s(yas--exit 841 nil) 60 nil #s(yas--field 1 834 840 nil nil nil t #s(yas--exit 841 nil)) nil nil))) nil (26040 48375 619415 434000) 0 nil])
([nil nil ((841 . 842)) nil (26040 48375 619414 890000) 0 nil])
([nil nil ((842 . 855)) nil (26040 48375 619414 329000) 0 nil])
([nil nil ((855 . 864)) nil (26040 48375 619413 708000) 0 nil])
([nil nil ((#("?" 0 1 (face rust-question-mark fontified t)) . -862) (undo-tree-id7337 . -1) (undo-tree-id7338 . -1) (undo-tree-id7339 . -1) (undo-tree-id7340 . -1) (undo-tree-id7341 . -1) (undo-tree-id7342 . -1) (undo-tree-id7343 . -1) (undo-tree-id7344 . -1) (#(" " 0 1 (fontified t)) . -863) (undo-tree-id7345 . -1) (undo-tree-id7346 . -1) (undo-tree-id7347 . -1) 864) nil (26040 48375 619412 413000) 0 nil])
([nil nil ((862 . 863)) nil (26040 48375 619402 946000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -862) (undo-tree-id7333 . -1) (undo-tree-id7334 . -1) (undo-tree-id7335 . -1) (undo-tree-id7336 . -1) 863) nil (26040 48375 619401 713000) 0 nil])
([nil nil ((862 . 865)) nil (26040 48375 619397 55000) 0 nil])
([nil nil ((apply yas--snippet-revive 864 868 #s(yas--snippet nil nil #s(yas--exit 868 nil) 61 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 868 nil) 61 nil nil nil nil)) (864 . 868) (#("None$0" 0 6 (fontified nil)) . 864) (864 . 870) (#("N" 0 1 (fontified nil)) . 864) (864 . 865) (#("None" 0 4 (fontified nil)) . -864) (864 . 868) (#("N" 0 1 (face font-lock-type-face fontified t)) . -864) (undo-tree-id7327 . -1) (undo-tree-id7328 . -1) (undo-tree-id7329 . -1) (undo-tree-id7330 . -1) (undo-tree-id7331 . -1) (undo-tree-id7332 . -1) 865) nil (26040 48375 619392 568000) 0 nil])
([nil nil ((#("impl Iterator for ffi::zbar_symbol_t {
    type Item = ffi::zbar_symbol_t;
    fn next(&mut self) -> Option<Self::Item> {
        
        let symbol = unsafe {
            ffi::zbar_symbol_next(self)
        }; 
        match symbol.is_null() {
            true => Some(symbol),
            false => None
        }
        
    }
}" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 13 (face font-lock-type-face fontified t) 13 14 (fontified t) 14 17 (face font-lock-keyword-face fontified t) 17 18 (fontified t) 18 21 (face font-lock-variable-name-face fontified t) 21 23 (fontified t) 23 37 (fontified t) 37 38 (face (rainbow-delimiters-depth-1-face) fontified t) 38 39 (fontified t) 39 43 (fontified t) 43 47 (face font-lock-keyword-face fontified t) 47 48 (fontified t) 48 52 (face font-lock-type-face fontified t) 52 55 (fontified t) 55 58 (face font-lock-constant-face fontified t) 58 60 (fontified t) 60 73 (fontified t) 73 74 (fontified t) 74 75 (fontified t) 75 79 (fontified t) 79 81 (face font-lock-keyword-face fontified t) 81 82 (fontified t) 82 86 (face font-lock-function-name-face fontified t) 86 87 (face (rainbow-delimiters-depth-2-face) fontified t) 87 88 (face rust-ampersand-face fontified t) 88 91 (face font-lock-keyword-face fontified t) 91 92 (fontified t) 92 96 (face font-lock-keyword-face fontified t) 96 97 (face (rainbow-delimiters-depth-2-face) fontified t) 97 99 (fontified t) 99 100 (syntax-table (1) fontified t) 100 101 (fontified t) 101 107 (face font-lock-type-face fontified t) 107 108 (face (rainbow-delimiters-depth-2-face) fontified t) 108 112 (face font-lock-type-face fontified t) 112 114 (fontified t) 114 118 (face font-lock-type-face fontified t) 118 119 (face (rainbow-delimiters-depth-2-face) fontified t) 119 120 (fontified t) 120 121 (face (rainbow-delimiters-depth-2-face) fontified t) 121 122 (fontified t) 122 130 (fontified t) 130 131 (fontified t) 131 139 (fontified t) 139 142 (face font-lock-keyword-face fontified t) 142 143 (fontified t) 143 149 (face font-lock-variable-name-face fontified t) 149 152 (fontified t) 152 158 (face rust-unsafe fontified t) 158 159 (fontified t) 159 160 (face (rainbow-delimiters-depth-3-face) fontified t) 160 161 (fontified t) 161 173 (fontified t) 173 176 (face font-lock-constant-face fontified t) 176 194 (fontified t) 194 195 (face (rainbow-delimiters-depth-4-face) fontified t) 195 199 (face font-lock-keyword-face fontified t) 199 200 (face (rainbow-delimiters-depth-4-face) fontified t) 200 201 (fontified t) 201 209 (fontified t) 209 210 (face (rainbow-delimiters-depth-3-face) fontified t) 210 211 (fontified t) 211 212 (fontified t) 212 213 (fontified t) 213 221 (fontified t) 221 226 (face font-lock-keyword-face fontified t) 226 227 (fontified t) 227 234 (fontified t) 234 241 (fontified t) 241 242 (face (rainbow-delimiters-depth-3-face) fontified t) 242 243 (face (rainbow-delimiters-depth-3-face) fontified t) 243 244 (fontified t) 244 245 (face (rainbow-delimiters-depth-3-face) fontified t) 245 246 (fontified t) 246 258 (fontified t) 258 262 (face font-lock-keyword-face fontified t) 262 264 (fontified t) 264 265 (syntax-table (1) fontified t) 265 266 (fontified t) 266 270 (face font-lock-type-face fontified t) 270 271 (face (rainbow-delimiters-depth-4-face) fontified t) 271 277 (fontified t) 277 278 (face (rainbow-delimiters-depth-4-face) fontified t) 278 280 (fontified t) 280 292 (fontified t) 292 297 (face font-lock-keyword-face fontified t) 297 299 (fontified t) 299 300 (syntax-table (1) fontified t) 300 301 (fontified t) 301 305 (face font-lock-type-face fontified t) 305 306 (fontified t) 306 314 (fontified t) 314 315 (face (rainbow-delimiters-depth-3-face) fontified t) 315 316 (fontified t) 316 324 (fontified t) 324 325 (fontified t) 325 329 (fontified t) 329 330 (face (rainbow-delimiters-depth-2-face) fontified t) 330 331 (fontified t) 331 332 (face (rainbow-delimiters-depth-1-face) fontified t)) . 563) (undo-tree-id7722 . -332) (undo-tree-id7723 . -324) (undo-tree-id7724 . -131) (undo-tree-id7725 . -212) (undo-tree-id7726 . -200) (undo-tree-id7727 . -200) (undo-tree-id7728 . -161) (undo-tree-id7729 . -161) (undo-tree-id7730 . -161) (undo-tree-id7731 . -227) (undo-tree-id7732 . -227) (undo-tree-id7733 . -227) (undo-tree-id7734 . -227) (undo-tree-id7735 . -227) (undo-tree-id7736 . -227) (undo-tree-id7737 . -234) (undo-tree-id7738 . -234) (undo-tree-id7739 . -234) (undo-tree-id7740 . -234) (undo-tree-id7741 . -234) (undo-tree-id7742 . -234) (undo-tree-id7743 . -234) (undo-tree-id7744 . -246) (undo-tree-id7745 . -246) (undo-tree-id7746 . -246) (undo-tree-id7747 . -258) (undo-tree-id7748 . -258) (undo-tree-id7749 . -258) (undo-tree-id7750 . -258) (undo-tree-id7751 . -258) (undo-tree-id7752 . -258) (undo-tree-id7753 . -258) (undo-tree-id7754 . -258) (undo-tree-id7755 . -258) (undo-tree-id7756 . -258) (undo-tree-id7757 . -258) (undo-tree-id7758 . -258) (undo-tree-id7759 . -258) (undo-tree-id7760 . -258) (undo-tree-id7761 . -258) (undo-tree-id7762 . -258) (undo-tree-id7763 . -258) (undo-tree-id7764 . -258) (undo-tree-id7765 . -258) (undo-tree-id7766 . -258) (undo-tree-id7767 . -258) (undo-tree-id7768 . -258) (undo-tree-id7769 . -258) (undo-tree-id7770 . -258) (undo-tree-id7771 . -258) (undo-tree-id7772 . -258) (undo-tree-id7773 . -258) (undo-tree-id7774 . -258) (undo-tree-id7775 . -258) (undo-tree-id7776 . -258) (undo-tree-id7777 . -258) (undo-tree-id7778 . -258) (undo-tree-id7779 . -258) (undo-tree-id7780 . -258) (undo-tree-id7781 . -258) (undo-tree-id7782 . -258) (undo-tree-id7783 . -258) (undo-tree-id7784 . -258) (undo-tree-id7785 . -258) (undo-tree-id7786 . -258) (undo-tree-id7787 . -258) (undo-tree-id7788 . -258) (undo-tree-id7789 . -258) (undo-tree-id7790 . -258) (undo-tree-id7791 . -258) (undo-tree-id7792 . -258) (undo-tree-id7793 . -258) (undo-tree-id7794 . -258) (undo-tree-id7795 . -258) (undo-tree-id7796 . -258) (undo-tree-id7797 . -258) (undo-tree-id7798 . -258) (undo-tree-id7799 . -258) (undo-tree-id7800 . -258) (undo-tree-id7801 . -258) (undo-tree-id7802 . -258) (undo-tree-id7803 . -258) (undo-tree-id7804 . -258) (undo-tree-id7805 . -258) (undo-tree-id7806 . -266) (undo-tree-id7807 . -266) (undo-tree-id7808 . -266) (undo-tree-id7809 . -266) (undo-tree-id7810 . -266) (undo-tree-id7811 . -266) (undo-tree-id7812 . -266) (undo-tree-id7813 . -266) (undo-tree-id7814 . -271) (undo-tree-id7815 . -271) (undo-tree-id7816 . -271) (undo-tree-id7817 . -271) (undo-tree-id7818 . -271) (undo-tree-id7819 . -271) (undo-tree-id7820 . -271) (undo-tree-id7821 . -271) (undo-tree-id7822 . -271) (undo-tree-id7823 . -299) (undo-tree-id7824 . -299) (undo-tree-id7825 . -299) (undo-tree-id7826 . -299) (undo-tree-id7827 . -299) (undo-tree-id7828 . -299) (undo-tree-id7829 . -299) (undo-tree-id7830 . -299) (undo-tree-id7831 . -299) (undo-tree-id7832 . -299) (undo-tree-id7833 . -301) (undo-tree-id7834 . -301) (undo-tree-id7835 . -301) (undo-tree-id7836 . -301) (undo-tree-id7837 . -301) (undo-tree-id7838 . -305) (undo-tree-id7839 . -305) (undo-tree-id7840 . -305) (undo-tree-id7841 . -305) (undo-tree-id7842 . -305) (undo-tree-id7843 . -305) (undo-tree-id7844 . -305) (undo-tree-id7845 . -305) (undo-tree-id7846 . -305) (undo-tree-id7847 . -305) (undo-tree-id7848 . -305) (undo-tree-id7849 . -271) (undo-tree-id7850 . -271) (undo-tree-id7851 . -271) (undo-tree-id7852 . -271) (undo-tree-id7853 . -271) (undo-tree-id7854 . -271) (undo-tree-id7855 . -238) (undo-tree-id7856 . -238) (undo-tree-id7857 . -238) (undo-tree-id7858 . -238) (undo-tree-id7859 . -238) (undo-tree-id7860 . -238) (undo-tree-id7861 . -238) (undo-tree-id7862 . -238) (undo-tree-id7863 . -238) (undo-tree-id7864 . -238) (undo-tree-id7865 . -238) (undo-tree-id7866 . -238) (undo-tree-id7867 . -212) (undo-tree-id7868 . -212) (undo-tree-id7869 . -212) (undo-tree-id7870 . -212) (undo-tree-id7871 . -212) (undo-tree-id7872 . -212) (undo-tree-id7873 . -212) (undo-tree-id7874 . -186) (undo-tree-id7875 . -130) (undo-tree-id7876 . -100) (undo-tree-id7877 . -64) (undo-tree-id7878 . -64) (undo-tree-id7879 . -64) (undo-tree-id7880 . -64) (undo-tree-id7881 . -64) (undo-tree-id7882 . -64) (undo-tree-id7883 . -100) (undo-tree-id7884 . -100) (undo-tree-id7885 . -100) (undo-tree-id7886 . -100) (undo-tree-id7887 . -100) (undo-tree-id7888 . -100) (undo-tree-id7889 . -130) (undo-tree-id7890 . -156) (undo-tree-id7891 . -212) (undo-tree-id7892 . -238) (undo-tree-id7893 . -305) (undo-tree-id7894 . -271) (undo-tree-id7895 . -271) (undo-tree-id7896 . -271) (undo-tree-id7897 . -271) (undo-tree-id7898 . -271) (undo-tree-id7899 . -271) (undo-tree-id7900 . -238) (undo-tree-id7901 . -238) (undo-tree-id7902 . -238) (undo-tree-id7903 . -238) (undo-tree-id7904 . -238) (undo-tree-id7905 . -212) (undo-tree-id7906 . -186) (undo-tree-id7907 . -130) (undo-tree-id7908 . -100) (undo-tree-id7909 . -25) (undo-tree-id7910 . -25) (undo-tree-id7911 . -25) (undo-tree-id7912 . -25) (undo-tree-id7913 . -25) (undo-tree-id7914 . -25) (undo-tree-id7915 . -330) (undo-tree-id7916 . -330) (undo-tree-id7917 . -330) (undo-tree-id7918 . -332) (undo-tree-id7919 . -161) (undo-tree-id7920 . -330) (undo-tree-id7921 . -332) (undo-tree-id7922 . -332) (undo-tree-id7923 . -332) (undo-tree-id7924 . -332) (undo-tree-id7925 . -332) (undo-tree-id7926 . -330) (undo-tree-id7927 . -329) (undo-tree-id7928 . -309) (undo-tree-id7929 . -248) (undo-tree-id7930 . -76) (undo-tree-id7931 . -39) (undo-tree-id7932 . -330) (undo-tree-id7933 . -332) (t 26040 48375 639904 302000)) nil (26040 48443 3412 152000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -562) (undo-tree-id7499 . -1) (undo-tree-id7500 . -1) (undo-tree-id7501 . -1) (undo-tree-id7502 . -1) (undo-tree-id7503 . -1) (undo-tree-id7504 . -1) (undo-tree-id7505 . -1) (undo-tree-id7506 . -1) (undo-tree-id7507 . -1) (undo-tree-id7508 . -1) (undo-tree-id7509 . -1) (undo-tree-id7510 . -1) (undo-tree-id7511 . -1) (undo-tree-id7512 . -1) (undo-tree-id7513 . -1) (undo-tree-id7514 . -1) (undo-tree-id7515 . -1) (undo-tree-id7516 . -1) (undo-tree-id7517 . -1) (undo-tree-id7518 . -1) (undo-tree-id7519 . -1) (undo-tree-id7520 . -1) (undo-tree-id7521 . -1) (undo-tree-id7522 . -1) (undo-tree-id7523 . -1) (undo-tree-id7524 . -1) (undo-tree-id7525 . -1) (undo-tree-id7526 . -1) (undo-tree-id7527 . -1) (undo-tree-id7528 . -1) (undo-tree-id7529 . -1) (undo-tree-id7530 . -1) (undo-tree-id7531 . -1) (undo-tree-id7532 . -1) (undo-tree-id7533 . -1) (undo-tree-id7534 . -1) (undo-tree-id7535 . -1) (undo-tree-id7536 . -1) (undo-tree-id7537 . -1) (undo-tree-id7538 . -1) (undo-tree-id7539 . -1) (undo-tree-id7540 . -1) (undo-tree-id7541 . -1) (undo-tree-id7542 . -1) (undo-tree-id7543 . -1) (undo-tree-id7544 . -1) (undo-tree-id7545 . -1) (undo-tree-id7546 . -1) (undo-tree-id7547 . -1) (undo-tree-id7548 . -1) (undo-tree-id7549 . -1) (undo-tree-id7550 . -1) (undo-tree-id7551 . -1) (undo-tree-id7552 . -1) (undo-tree-id7553 . -1) (undo-tree-id7554 . -1) (undo-tree-id7555 . -1) (undo-tree-id7556 . -1) (undo-tree-id7557 . -1) (undo-tree-id7558 . -1) (undo-tree-id7559 . -1) (undo-tree-id7560 . -1) (undo-tree-id7561 . -1) (undo-tree-id7562 . -1) (undo-tree-id7563 . -1) (undo-tree-id7564 . -1) (undo-tree-id7565 . -1) (undo-tree-id7566 . -1) (undo-tree-id7567 . -1) (undo-tree-id7568 . -1) (undo-tree-id7569 . -1) (undo-tree-id7570 . -1) (undo-tree-id7571 . -1) (undo-tree-id7572 . -1) (undo-tree-id7573 . -1) (undo-tree-id7574 . -1) (undo-tree-id7575 . -1) (undo-tree-id7576 . -1) (undo-tree-id7577 . -1) (undo-tree-id7578 . -1) (undo-tree-id7579 . -1) (undo-tree-id7580 . -1) (undo-tree-id7581 . -1) (undo-tree-id7582 . -1) (undo-tree-id7583 . -1) (undo-tree-id7584 . -1) (undo-tree-id7585 . -1) (undo-tree-id7586 . -1) (undo-tree-id7587 . -1) (undo-tree-id7588 . -1) (undo-tree-id7589 . -1) (undo-tree-id7590 . -1) (undo-tree-id7591 . -1) (undo-tree-id7592 . -1) (undo-tree-id7593 . -1) (undo-tree-id7594 . -1) (undo-tree-id7595 . -1) (undo-tree-id7596 . -1) (undo-tree-id7597 . -1) (undo-tree-id7598 . -1) (undo-tree-id7599 . -1) (undo-tree-id7600 . -1) (undo-tree-id7601 . -1) (undo-tree-id7602 . -1) (undo-tree-id7603 . -1) (undo-tree-id7604 . -1) (undo-tree-id7605 . -1) (undo-tree-id7606 . -1) (undo-tree-id7607 . -1) (undo-tree-id7608 . -1) (undo-tree-id7609 . -1) (undo-tree-id7610 . -1) (undo-tree-id7611 . -1) (undo-tree-id7612 . -1) (undo-tree-id7613 . -1) (undo-tree-id7614 . -1) (undo-tree-id7615 . -1) (undo-tree-id7616 . -1) (undo-tree-id7617 . -1) (undo-tree-id7618 . -1) (undo-tree-id7619 . -1) (undo-tree-id7620 . -1) (undo-tree-id7621 . -1) (undo-tree-id7622 . -1) (undo-tree-id7623 . -1) (undo-tree-id7624 . -1) (undo-tree-id7625 . -1) (undo-tree-id7626 . -1) (undo-tree-id7627 . -1) (undo-tree-id7628 . -1) (undo-tree-id7629 . -1) (undo-tree-id7630 . -1) (undo-tree-id7631 . -1) (undo-tree-id7632 . -1) (undo-tree-id7633 . -1) (undo-tree-id7634 . -1) (undo-tree-id7635 . -1) (undo-tree-id7636 . -1) (undo-tree-id7637 . -1) (undo-tree-id7638 . -1) (undo-tree-id7639 . -1) (undo-tree-id7640 . -1) (undo-tree-id7641 . -1) (undo-tree-id7642 . -1) (undo-tree-id7643 . -1) (undo-tree-id7644 . -1) (undo-tree-id7645 . -1) (undo-tree-id7646 . -1) (undo-tree-id7647 . -1) (undo-tree-id7648 . -1) (undo-tree-id7649 . -1) (undo-tree-id7650 . -1) (undo-tree-id7651 . -1) (undo-tree-id7652 . -1) (undo-tree-id7653 . -1) (undo-tree-id7654 . -1) (undo-tree-id7655 . -1) (undo-tree-id7656 . -1) (undo-tree-id7657 . -1) (undo-tree-id7658 . -1) (undo-tree-id7659 . -1) (undo-tree-id7660 . -1) (undo-tree-id7661 . -1) (undo-tree-id7662 . -1) (undo-tree-id7663 . -1) (undo-tree-id7664 . -1) (undo-tree-id7665 . -1) (undo-tree-id7666 . -1) (undo-tree-id7667 . -1) (undo-tree-id7668 . -1) (undo-tree-id7669 . -1) (undo-tree-id7670 . -1) (undo-tree-id7671 . -1) (undo-tree-id7672 . -1) (undo-tree-id7673 . -1) (undo-tree-id7674 . -1) (undo-tree-id7675 . -1) (undo-tree-id7676 . -1) (undo-tree-id7677 . -1) (undo-tree-id7678 . -1) (undo-tree-id7679 . -1) (undo-tree-id7680 . -1) (undo-tree-id7681 . -1) (undo-tree-id7682 . -1) (undo-tree-id7683 . -1) (undo-tree-id7684 . -1) (undo-tree-id7685 . -1) (undo-tree-id7686 . -1) (undo-tree-id7687 . -1) (undo-tree-id7688 . -1) (undo-tree-id7689 . -1) (undo-tree-id7690 . -1) (undo-tree-id7691 . -1) (undo-tree-id7692 . -1) (undo-tree-id7693 . -1) (undo-tree-id7694 . -1) (undo-tree-id7695 . -1) (undo-tree-id7696 . -1) (undo-tree-id7697 . -1) (undo-tree-id7698 . -1) (undo-tree-id7699 . -1) (undo-tree-id7700 . -1) (undo-tree-id7701 . -1) (undo-tree-id7702 . -1) (undo-tree-id7703 . -1) (undo-tree-id7704 . -1) (undo-tree-id7705 . -1) (undo-tree-id7706 . -1) (undo-tree-id7707 . -1) (undo-tree-id7708 . -1) (undo-tree-id7709 . -1) (undo-tree-id7710 . -1) (undo-tree-id7711 . -1) (undo-tree-id7712 . -1) (undo-tree-id7713 . -1) (undo-tree-id7714 . -1) (undo-tree-id7715 . -1) (undo-tree-id7716 . -1) (undo-tree-id7717 . -1) (undo-tree-id7718 . -1) (undo-tree-id7719 . -1) (undo-tree-id7720 . -1) (undo-tree-id7721 . -1) 563) nil (26040 48443 3259 267000) 0 nil])
([nil nil ((1234 . 1237) (t 26040 48443 23241 772000)) nil (26040 48511 67614 489000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -1235) (undo-tree-id7949 . -1) (#("8" 0 1 (fontified t)) . -1236) (undo-tree-id7950 . -1) 1237) nil (26040 48511 67613 376000) 0 nil])
([nil nil ((1235 . 1241)) nil (26040 48511 67610 942000) 0 nil])
([nil nil ((1240 . 1246) (#("s" 0 1 (fontified nil)) . 1240) (1240 . 1241) (#("symbol" 0 6 (fontified nil)) . -1240) (1240 . 1246) (#("s" 0 1 (fontified t)) . -1240) (undo-tree-id7948 . -1) 1241) nil (26040 48511 67609 900000) 0 nil])
([nil nil ((1246 . 1249)) nil (26040 48511 67607 756000) 0 nil])
([nil nil ((apply yas--snippet-revive 1247 1256 #s(yas--snippet nil nil #s(yas--exit 1256 nil) 62 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1256 nil) 62 nil nil nil nil)) (1247 . 1256) (#("is_null()$0" 0 11 (fontified nil)) . 1247) (1247 . 1258) (#("is" 0 2 (fontified nil)) . 1247) (1247 . 1249) (#("is_null()" 0 9 (fontified nil)) . -1247) (1247 . 1256) (#("is" 0 2 (fontified t)) . -1247) (undo-tree-id7947 . -2) 1249) nil (26040 48511 67606 324000) 0 nil])
([nil nil ((1240 . 1241)) nil (26040 48511 67603 814000) 0 nil])
([nil nil ((1257 . 1260)) nil (26040 48511 67603 204000) 0 nil])
([nil nil ((1261 . 1269) (#("            " 0 12 (fontified nil)) . 1260) (undo-tree-id7946 . -8) (1268 . 1272) (1259 . 1269)) nil (26040 48511 67602 353000) 0 nil])
([nil nil ((1260 . 1272)) nil (26040 48511 67600 539000) 0 nil])
([nil nil ((1261 . 1273) (#("            " 0 12 (fontified nil)) . 1260) (undo-tree-id7945 . -12) (1272 . 1273)) nil (26040 48511 67599 757000) 0 nil])
([nil nil ((1273 . 1275)) nil (26040 48511 67598 120000) 0 nil])
([nil nil ((1273 . 1276) (#("ff" 0 2 (fontified nil)) . 1273) (1273 . 1275) (#("ffi" 0 3 (fontified nil)) . -1273) (1273 . 1276) (#("ff" 0 2 (fontified t)) . -1273) (undo-tree-id7944 . -2) 1275) nil (26040 48511 67597 141000) 0 nil])
([nil nil ((1276 . 1281)) nil (26040 48511 67594 865000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -1279) (undo-tree-id7942 . -1) (#("n" 0 1 (fontified t)) . -1280) (undo-tree-id7943 . -1) 1281) nil (26040 48511 67594 76000) 0 nil])
([nil nil ((1279 . 1284)) nil (26040 48511 67591 689000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -1282) (undo-tree-id7940 . -1) (#(":" 0 1 (fontified t)) . -1283) (undo-tree-id7941 . -1) 1284) nil (26040 48511 67590 931000) 0 nil])
([nil nil ((1282 . 1286)) nil (26040 48511 67588 665000) 0 nil])
([nil nil ((1286 . 1288)) nil (26040 48511 67588 54000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -1287) (undo-tree-id7939 . -1) 1288) nil (26040 48511 67587 178000) 0 nil])
([nil nil ((1287 . 1291)) nil (26040 48511 67585 148000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1295 1301 nil nil nil nil #s(yas--exit 1302 nil))) #s(yas--exit 1302 nil) 63 nil #s(yas--field 1 1295 1301 nil nil nil nil #s(yas--exit 1302 nil)) nil nil)) (1278 . 1302) (#("zbar_symbol_next(${1:symbol})$0" 0 31 (fontified nil)) . 1278) (1278 . 1309) (#("zbar_symbol_n" 0 13 (fontified nil)) . 1278) (1278 . 1291) (#("zbar_symbol_next(…)" 0 19 (fontified nil)) . -1278) (1278 . 1297) (#("zbar_symbol_n" 0 13 (fontified t)) . -1278) (undo-tree-id7934 . -13) (undo-tree-id7935 . -13) (undo-tree-id7936 . -13) (undo-tree-id7937 . -13) (undo-tree-id7938 . -13) 1291) nil (26040 48511 67582 855000) 0 nil])
([nil nil ((apply yas--snippet-revive 1278 1302 #s(yas--snippet nil (#s(yas--field 1 1295 1301 nil nil nil nil #s(yas--exit 1302 nil))) #s(yas--exit 1302 nil) 63 nil #s(yas--field 1 1295 1301 nil nil nil nil #s(yas--exit 1302 nil)) nil nil))) nil (26040 48511 67569 969000) 0 nil])
([nil nil ((1302 . 1303)) nil (26040 48511 67565 984000) 0 nil])
([nil nil ((1260 . 1272) (t 26040 48511 119912 617000)) nil (26040 48519 234396 359000) 0 nil])
([nil nil ((1175 . 1179)) nil (26040 48519 234395 222000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1176) (undo-tree-id7951 . -1) (undo-tree-id7952 . -1) (undo-tree-id7953 . -1) (undo-tree-id7954 . -1) (undo-tree-id7955 . -1) (undo-tree-id7956 . -1) (undo-tree-id7957 . -1) (undo-tree-id7958 . -1) (undo-tree-id7959 . -1) (undo-tree-id7960 . -1) (undo-tree-id7961 . -1) (#("u" 0 1 (fontified t)) . -1177) (undo-tree-id7962 . -1) (undo-tree-id7963 . -1) (undo-tree-id7964 . -1) (undo-tree-id7965 . -1) (undo-tree-id7966 . -1) (undo-tree-id7967 . -1) (undo-tree-id7968 . -1) (undo-tree-id7969 . -1) (#("t" 0 1 (fontified t)) . -1178) (undo-tree-id7970 . -1) (undo-tree-id7971 . -1) (undo-tree-id7972 . -1) (undo-tree-id7973 . -1) (undo-tree-id7974 . -1) 1179) nil (26040 48519 234392 369000) 0 nil])
([nil nil ((1176 . 1179)) nil (26040 48519 234366 16000) 0 nil])
([nil nil ((#("mut " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -1175) (undo-tree-id7975 . -1) (undo-tree-id7976 . -4) (undo-tree-id7977 . -1) (undo-tree-id7978 . -1) (undo-tree-id7979 . -1) (undo-tree-id7980 . -1) (undo-tree-id7981 . -1) (undo-tree-id7982 . -1) (undo-tree-id7983 . -1) (undo-tree-id7984 . -1) (undo-tree-id7985 . -1) (undo-tree-id7986 . -1) (undo-tree-id7987 . -4) (undo-tree-id7988 . -4) (undo-tree-id7989 . -4) (undo-tree-id7990 . -4) (undo-tree-id7991 . -4) (undo-tree-id7992 . -4) (undo-tree-id7993 . -4) (undo-tree-id7994 . -4) (undo-tree-id7995 . -4) (undo-tree-id7996 . -4) (undo-tree-id7997 . -4) (undo-tree-id7998 . -4) (undo-tree-id7999 . -4) (undo-tree-id8000 . -4) 1179 (t 26040 48519 286579 784000)) nil (26040 48521 559795 445000) 0 nil])
([nil nil ((1272 . 1276) (t 26040 48521 573246 591000)) nil (26040 48579 486938 397000) 0 nil])
([nil nil ((1276 . 1282)) nil (26040 48579 486937 596000) 0 nil])
([nil nil ((1282 . 1283)) nil (26040 48579 486936 985000) 0 nil])
([nil nil ((#("z" 0 1 (fontified t)) . -1282) (undo-tree-id8088 . -1) 1283) nil (26040 48579 486936 178000) 0 nil])
([nil nil ((1282 . 1284)) nil (26040 48579 486934 709000) 0 nil])
([nil nil ((1282 . 1285) (#("ff" 0 2 (fontified nil)) . 1282) (1282 . 1284) (#("ffi" 0 3 (fontified nil)) . -1282) (1282 . 1285) (#("ff" 0 2 (fontified t)) . -1282) (undo-tree-id8087 . -2) 1284) nil (26040 48579 486933 629000) 0 nil])
([nil nil ((1285 . 1289)) nil (26040 48579 486931 348000) 0 nil])
([nil nil ((1289 . 1291)) nil (26040 48579 486930 743000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -1287) (undo-tree-id8083 . -1) (#("i" 0 1 (fontified t)) . -1288) (undo-tree-id8084 . -1) (#("m" 0 1 (fontified t)) . -1289) (undo-tree-id8085 . -1) (#("b" 0 1 (fontified t)) . -1290) (undo-tree-id8086 . -1) 1291) nil (26040 48579 486929 575000) 0 nil])
([nil nil ((1287 . 1293)) nil (26040 48579 486925 730000) 0 nil])
([nil nil ((1293 . 1299)) nil (26040 48579 486925 187000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1308 1314 nil nil nil nil #s(yas--exit 1315 nil))) #s(yas--exit 1315 nil) 64 nil #s(yas--field 1 1308 1314 nil nil nil nil #s(yas--exit 1315 nil)) nil nil)) (1287 . 1315) (#("zbar_symbol_get_type(${1:symbol})$0" 0 35 (fontified nil)) . 1287) (1287 . 1322) (#("symbol_get_t" 0 12 (fontified nil)) . 1287) (1287 . 1299) (#("zbar_symbol_get_type(…)" 0 23 (fontified nil)) . -1287) (1287 . 1310) (#("symbol_get_t" 0 12 (fontified t)) . -1287) (undo-tree-id8082 . -12) 1299) nil (26040 48579 486923 770000) 0 nil])
([nil nil ((apply yas--snippet-revive 1287 1315 #s(yas--snippet nil (#s(yas--field 1 1308 1314 nil nil nil nil #s(yas--exit 1315 nil))) #s(yas--exit 1315 nil) 64 nil #s(yas--field 1 1308 1314 nil nil nil nil #s(yas--exit 1315 nil)) nil nil))) nil (26040 48579 486921 356000) 0 nil])
([nil nil ((1315 . 1316)) nil (26040 48579 486920 728000) 0 nil])
([nil nil ((1316 . 1329)) nil (26040 48579 486920 154000) 0 nil])
([nil nil ((1329 . 1340)) nil (26040 48579 486919 582000) 0 nil])
([nil nil ((1340 . 1341)) nil (26040 48579 486919 43000) 0 nil])
([nil nil ((#("z" 0 1 (fontified t)) . -1340) (undo-tree-id8077 . -1) (undo-tree-id8078 . -1) (undo-tree-id8079 . -1) (undo-tree-id8080 . -1) (undo-tree-id8081 . -1) 1341) nil (26040 48579 486918 146000) 0 nil])
([nil nil ((1340 . 1342)) nil (26040 48579 486914 103000) 0 nil])
([nil nil ((1340 . 1343) (#("ff" 0 2 (fontified nil)) . 1340) (1340 . 1342) (#("ffi" 0 3 (fontified nil)) . -1340) (1340 . 1343) (#("ff" 0 2 (fontified t)) . -1340) (undo-tree-id8071 . -2) (undo-tree-id8072 . -1) (undo-tree-id8073 . -1) (undo-tree-id8074 . -1) (undo-tree-id8075 . -2) (undo-tree-id8076 . -2) 1342) nil (26040 48579 486912 872000) 0 nil])
([nil nil ((1343 . 1347)) nil (26040 48579 486907 354000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -1345) (undo-tree-id8056 . -1) (undo-tree-id8057 . -1) (undo-tree-id8058 . -1) (undo-tree-id8059 . -1) (undo-tree-id8060 . -1) (undo-tree-id8061 . -1) (undo-tree-id8062 . -1) (undo-tree-id8063 . -1) (undo-tree-id8064 . -1) (undo-tree-id8065 . -1) (#("e" 0 1 (fontified t)) . -1346) (undo-tree-id8066 . -1) (undo-tree-id8067 . -1) (undo-tree-id8068 . -1) (undo-tree-id8069 . -1) (undo-tree-id8070 . -1) 1347) nil (26040 48579 486906 39000) 0 nil])
([nil nil ((1345 . 1346)) nil (26040 48579 486895 5000) 0 nil])
([nil nil ((#("z" 0 1 (fontified t)) . -1345) (undo-tree-id8051 . -1) (undo-tree-id8052 . -1) (undo-tree-id8053 . -1) (undo-tree-id8054 . -1) (undo-tree-id8055 . -1) 1346) nil (26040 48579 486894 130000) 0 nil])
([nil nil ((1345 . 1353)) nil (26040 48579 486889 825000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -1351) (undo-tree-id8040 . -1) (undo-tree-id8041 . -1) (undo-tree-id8042 . -1) (undo-tree-id8043 . -1) (undo-tree-id8044 . -1) (undo-tree-id8045 . -1) (undo-tree-id8046 . -1) (undo-tree-id8047 . -1) (#("_" 0 1 (fontified t)) . -1352) (undo-tree-id8048 . -1) (undo-tree-id8049 . -1) (undo-tree-id8050 . -1) 1353) nil (26040 48579 486888 550000) 0 nil])
([nil nil ((1351 . 1355)) nil (26040 48579 486879 533000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1366 1372 nil nil nil nil #s(yas--exit 1373 nil))) #s(yas--exit 1373 nil) 65 nil #s(yas--field 1 1366 1372 nil nil nil nil #s(yas--exit 1373 nil)) nil nil)) (1345 . 1373) (#("zbar_symbol_get_data(${1:symbol})$0" 0 35 (fontified nil)) . 1345) (1345 . 1380) (#("symbol_get" 0 10 (fontified nil)) . 1345) (1345 . 1355) (#("zbar_symbol_get_data(…)" 0 23 (fontified nil)) . -1345) (1345 . 1368) (#("symbol_get" 0 10 (fontified t)) . -1345) (undo-tree-id8001 . -10) (undo-tree-id8002 . -1) (undo-tree-id8003 . -1) (undo-tree-id8004 . -1) (undo-tree-id8005 . -1) (undo-tree-id8006 . -2) (undo-tree-id8007 . -2) (undo-tree-id8008 . -2) (undo-tree-id8009 . -3) (undo-tree-id8010 . -3) (undo-tree-id8011 . -4) (undo-tree-id8012 . -4) (undo-tree-id8013 . -5) (undo-tree-id8014 . -5) (undo-tree-id8015 . -6) (undo-tree-id8016 . -6) (undo-tree-id8017 . -6) (undo-tree-id8018 . -6) (undo-tree-id8019 . -6) (undo-tree-id8020 . -6) (undo-tree-id8021 . -6) (undo-tree-id8022 . -6) (undo-tree-id8023 . -6) (undo-tree-id8024 . -6) (undo-tree-id8025 . -6) (undo-tree-id8026 . -7) (undo-tree-id8027 . -7) (undo-tree-id8028 . -7) (undo-tree-id8029 . -8) (undo-tree-id8030 . -8) (undo-tree-id8031 . -8) (undo-tree-id8032 . -9) (undo-tree-id8033 . -9) (undo-tree-id8034 . -9) (undo-tree-id8035 . -10) (undo-tree-id8036 . -10) (undo-tree-id8037 . -10) (undo-tree-id8038 . -10) (undo-tree-id8039 . -10) 1355) nil (26040 48579 486876 183000) 0 nil])
([nil nil ((apply yas--snippet-revive 1345 1373 #s(yas--snippet nil (#s(yas--field 1 1366 1372 nil nil nil nil #s(yas--exit 1373 nil))) #s(yas--exit 1373 nil) 65 nil #s(yas--field 1 1366 1372 nil nil nil nil #s(yas--exit 1373 nil)) nil nil))) nil (26040 48579 486839 763000) 0 nil])
([nil nil ((1373 . 1374)) nil (26040 48579 486835 939000) 0 nil])
([nil nil ((1374 . 1387) (t 26040 48579 506583 484000)) nil (26040 48664 673207 654000) 0 nil])
([nil nil ((1387 . 1388)) nil (26040 48664 673206 872000) 0 nil])
([nil nil ((apply yas--snippet-revive 1387 1397 #s(yas--snippet nil nil #s(yas--exit 1396 nil) 66 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1396 nil) 66 nil nil nil nil)) (1387 . 1397) (#("println!($0)" 0 12 (fontified nil)) . 1387) (1387 . 1399) (#("p" 0 1 (fontified nil)) . 1387) (1387 . 1388) (#("println!(…)" 0 11 (fontified nil)) . -1387) (1387 . 1398) (#("p" 0 1 (fontified t)) . -1387) (undo-tree-id8407 . -1) (undo-tree-id8408 . -1) (undo-tree-id8409 . -1) (undo-tree-id8410 . -1) (undo-tree-id8411 . -1) (undo-tree-id8412 . -1) 1388) nil (26040 48664 673205 482000) 0 nil])
([nil nil ((1396 . 1398)) nil (26040 48664 673199 602000) 0 nil])
([nil nil ((1397 . 1399)) nil (26040 48664 673199 7000) 0 nil])
([nil nil ((1398 . 1400)) nil (26040 48664 673198 433000) 0 nil])
([nil nil ((#("L" 0 1 (face rust-string-interpolation fontified t)) . -1398) (undo-tree-id8398 . -1) (undo-tree-id8399 . -1) (undo-tree-id8400 . -1) (undo-tree-id8401 . -1) (undo-tree-id8402 . -1) (undo-tree-id8403 . -1) (#(":" 0 1 (face rust-string-interpolation fontified t)) . -1399) (undo-tree-id8404 . -1) (undo-tree-id8405 . -1) (undo-tree-id8406 . -1) 1400) nil (26040 48664 673197 222000) 0 nil])
([nil nil ((1398 . 1400)) nil (26040 48664 673190 149000) 0 nil])
([nil nil ((1402 . 1404)) nil (26040 48664 673189 582000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -1396) (undo-tree-id8254 . -1) (undo-tree-id8255 . -1) (undo-tree-id8256 . -1) (undo-tree-id8257 . -1) (undo-tree-id8258 . -1) (undo-tree-id8259 . -1) (undo-tree-id8260 . -1) (undo-tree-id8261 . -1) (undo-tree-id8262 . -1) (undo-tree-id8263 . -1) (undo-tree-id8264 . -1) (undo-tree-id8265 . -1) (undo-tree-id8266 . -1) (undo-tree-id8267 . -1) (undo-tree-id8268 . -1) (undo-tree-id8269 . -1) (undo-tree-id8270 . -1) (undo-tree-id8271 . -1) (undo-tree-id8272 . -1) (undo-tree-id8273 . -1) (undo-tree-id8274 . -1) (undo-tree-id8275 . -1) (undo-tree-id8276 . -1) (undo-tree-id8277 . -1) (undo-tree-id8278 . -1) (undo-tree-id8279 . -1) (undo-tree-id8280 . -1) (undo-tree-id8281 . -1) (undo-tree-id8282 . -1) (undo-tree-id8283 . -1) (undo-tree-id8284 . -1) (undo-tree-id8285 . -1) (undo-tree-id8286 . -1) (undo-tree-id8287 . -1) (undo-tree-id8288 . -1) (undo-tree-id8289 . -1) (undo-tree-id8290 . -1) (undo-tree-id8291 . -1) (undo-tree-id8292 . -1) (undo-tree-id8293 . -1) (undo-tree-id8294 . -1) (undo-tree-id8295 . -1) (undo-tree-id8296 . -1) (#("{" 0 1 (face rust-string-interpolation fontified t)) . -1397) (undo-tree-id8297 . -1) (undo-tree-id8298 . -1) (undo-tree-id8299 . -1) (undo-tree-id8300 . -1) (undo-tree-id8301 . -1) (undo-tree-id8302 . -1) (undo-tree-id8303 . -1) (undo-tree-id8304 . -1) (undo-tree-id8305 . -1) (undo-tree-id8306 . -1) (undo-tree-id8307 . -1) (undo-tree-id8308 . -1) (undo-tree-id8309 . -1) (undo-tree-id8310 . -1) (undo-tree-id8311 . -1) (undo-tree-id8312 . -1) (undo-tree-id8313 . -1) (undo-tree-id8314 . -1) (undo-tree-id8315 . -1) (undo-tree-id8316 . -1) (undo-tree-id8317 . -1) (undo-tree-id8318 . -1) (undo-tree-id8319 . -1) (undo-tree-id8320 . -1) (undo-tree-id8321 . -1) (undo-tree-id8322 . -1) (undo-tree-id8323 . -1) (undo-tree-id8324 . -1) (undo-tree-id8325 . -1) (undo-tree-id8326 . -1) (undo-tree-id8327 . -1) (undo-tree-id8328 . -1) (undo-tree-id8329 . -1) (undo-tree-id8330 . -1) (undo-tree-id8331 . -1) (undo-tree-id8332 . -1) (#(":" 0 1 (face rust-string-interpolation fontified t)) . -1398) (undo-tree-id8333 . -1) (undo-tree-id8334 . -1) (undo-tree-id8335 . -1) (undo-tree-id8336 . -1) (undo-tree-id8337 . -1) (undo-tree-id8338 . -1) (undo-tree-id8339 . -1) (undo-tree-id8340 . -1) (undo-tree-id8341 . -1) (undo-tree-id8342 . -1) (undo-tree-id8343 . -1) (undo-tree-id8344 . -1) (undo-tree-id8345 . -1) (undo-tree-id8346 . -1) (undo-tree-id8347 . -1) (undo-tree-id8348 . -1) (undo-tree-id8349 . -1) (undo-tree-id8350 . -1) (undo-tree-id8351 . -1) (undo-tree-id8352 . -1) (undo-tree-id8353 . -1) (undo-tree-id8354 . -1) (undo-tree-id8355 . -1) (undo-tree-id8356 . -1) (#("?" 0 1 (face rust-string-interpolation fontified t)) . -1399) (undo-tree-id8357 . -1) (undo-tree-id8358 . -1) (undo-tree-id8359 . -1) (undo-tree-id8360 . -1) (undo-tree-id8361 . -1) (undo-tree-id8362 . -1) (undo-tree-id8363 . -1) (undo-tree-id8364 . -1) (undo-tree-id8365 . -1) (undo-tree-id8366 . -1) (undo-tree-id8367 . -1) (undo-tree-id8368 . -1) (undo-tree-id8369 . -1) (undo-tree-id8370 . -1) (undo-tree-id8371 . -1) (undo-tree-id8372 . -1) (undo-tree-id8373 . -1) (undo-tree-id8374 . -1) (undo-tree-id8375 . -1) (undo-tree-id8376 . -1) (#("}" 0 1 (face rust-string-interpolation fontified t)) . -1400) (undo-tree-id8377 . -1) (undo-tree-id8378 . -1) (undo-tree-id8379 . -1) (undo-tree-id8380 . -1) (undo-tree-id8381 . -1) (undo-tree-id8382 . -1) (undo-tree-id8383 . 1) (undo-tree-id8384 . -1) (undo-tree-id8385 . -1) (undo-tree-id8386 . -1) (undo-tree-id8387 . -1) (undo-tree-id8388 . -1) (undo-tree-id8389 . -1) (undo-tree-id8390 . -1) (undo-tree-id8391 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -1401) (undo-tree-id8392 . -1) (undo-tree-id8393 . -1) (undo-tree-id8394 . -1) (undo-tree-id8395 . -1) (undo-tree-id8396 . -1) (undo-tree-id8397 . -1) 1402) nil (26040 48664 673183 783000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1423 . 1424) (nil fontified nil 1396 . 1424) (1396 . 1424)) nil (26040 48664 672295 893000) 0 nil])
([nil nil ((#("%" 0 1 (face font-lock-string-face fontified t)) . -1405) (undo-tree-id8243 . -1) (undo-tree-id8244 . -1) (undo-tree-id8245 . -1) (undo-tree-id8246 . -1) (undo-tree-id8247 . -1) (undo-tree-id8248 . -1) (undo-tree-id8249 . -1) (undo-tree-id8250 . -1) (undo-tree-id8251 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -1406) (undo-tree-id8252 . -1) (undo-tree-id8253 . -1) 1407) nil (26040 48664 672294 246000) 0 nil])
([nil nil ((1405 . 1407)) nil (26040 48664 672286 156000) 0 nil])
([nil nil ((#("[" 0 1 (face font-lock-string-face fontified t)) . -1405) (undo-tree-id8228 . -1) (undo-tree-id8229 . -1) (undo-tree-id8230 . -1) (undo-tree-id8231 . -1) (undo-tree-id8232 . -1) (undo-tree-id8233 . -1) (undo-tree-id8234 . -1) (undo-tree-id8235 . -1) (undo-tree-id8236 . -1) (undo-tree-id8237 . -1) (undo-tree-id8238 . -1) (#("]" 0 1 (face font-lock-string-face fontified t)) . -1406) (undo-tree-id8239 . -1) (undo-tree-id8240 . -1) (undo-tree-id8241 . -1) (undo-tree-id8242 . -1) 1407) nil (26040 48664 672284 884000) 0 nil])
([nil nil ((1405 . 1407)) nil (26040 48664 672273 999000) 0 nil])
([nil nil ((1406 . 1408)) nil (26040 48664 672273 365000) 0 nil])
([nil nil ((#("L" 0 1 (face rust-string-interpolation fontified t)) . -1407) (undo-tree-id8225 . -1) (undo-tree-id8226 . -1) (undo-tree-id8227 . -1) 1408) nil (26040 48664 672272 465000) 0 nil])
([nil nil ((1407 . 1408)) nil (26040 48664 672269 765000) 0 nil])
([nil nil ((#("%" 0 1 (face font-lock-string-face fontified t)) . -1419) (undo-tree-id8208 . -1) (undo-tree-id8209 . -1) (undo-tree-id8210 . -1) (undo-tree-id8211 . -1) (undo-tree-id8212 . -1) (undo-tree-id8213 . -1) (undo-tree-id8214 . -1) (undo-tree-id8215 . -1) (undo-tree-id8216 . -1) (undo-tree-id8217 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -1420) (undo-tree-id8218 . -1) (undo-tree-id8219 . -1) (undo-tree-id8220 . -1) (undo-tree-id8221 . -1) (undo-tree-id8222 . -1) (undo-tree-id8223 . -1) (undo-tree-id8224 . -1) 1421) nil (26040 48664 672268 341000) 0 nil])
([nil nil ((1419 . 1421)) nil (26040 48664 672256 74000) 0 nil])
([nil nil ((1420 . 1422)) nil (26040 48664 672255 486000) 0 nil])
([nil nil ((#("?" 0 1 (face font-lock-string-face fontified t)) . -1420) (undo-tree-id8194 . -1) (undo-tree-id8195 . -1) (undo-tree-id8196 . -1) (undo-tree-id8197 . -1) (undo-tree-id8198 . -1) (undo-tree-id8199 . -1) (undo-tree-id8200 . -1) (undo-tree-id8201 . -1) (#(":" 0 1 (face font-lock-string-face fontified t)) . -1421) (undo-tree-id8202 . -1) (undo-tree-id8203 . -1) (undo-tree-id8204 . -1) (undo-tree-id8205 . -1) (undo-tree-id8206 . -1) (undo-tree-id8207 . -1) 1422) nil (26040 48664 672253 811000) 0 nil])
([nil nil ((1420 . 1422)) nil (26040 48664 671909 595000) 0 nil])
([nil nil ((#("L" 0 1 (face font-lock-string-face fontified t)) . -1420) (undo-tree-id8185 . -1) (undo-tree-id8186 . -1) (undo-tree-id8187 . -1) (undo-tree-id8188 . -1) (undo-tree-id8189 . -1) (undo-tree-id8190 . -1) (#(":" 0 1 (face font-lock-string-face fontified t)) . -1421) (undo-tree-id8191 . -1) (undo-tree-id8192 . -1) (undo-tree-id8193 . -1) 1422) nil (26040 48664 671908 525000) 0 nil])
([nil nil ((1420 . 1422)) nil (26040 48664 671901 290000) 0 nil])
([nil nil ((1430 . 1434)) nil (26040 48664 671900 697000) 0 nil])
([nil nil ((#("z" 0 1 (fontified t)) . -1430) (undo-tree-id8133 . -1) (undo-tree-id8134 . -1) (undo-tree-id8135 . -1) (undo-tree-id8136 . -1) (undo-tree-id8137 . -1) (undo-tree-id8138 . -1) (undo-tree-id8139 . -1) (undo-tree-id8140 . -1) (undo-tree-id8141 . -1) (undo-tree-id8142 . -1) (undo-tree-id8143 . -1) (undo-tree-id8144 . -1) (undo-tree-id8145 . -1) (undo-tree-id8146 . -1) (undo-tree-id8147 . -1) (undo-tree-id8148 . -1) (undo-tree-id8149 . -1) (undo-tree-id8150 . -1) (undo-tree-id8151 . -1) (undo-tree-id8152 . -1) (undo-tree-id8153 . -1) (undo-tree-id8154 . -1) (#("b" 0 1 (fontified t)) . -1431) (undo-tree-id8155 . -1) (undo-tree-id8156 . -1) (undo-tree-id8157 . -1) (undo-tree-id8158 . -1) (undo-tree-id8159 . -1) (undo-tree-id8160 . -1) (undo-tree-id8161 . -1) (undo-tree-id8162 . -1) (undo-tree-id8163 . -1) (undo-tree-id8164 . -1) (undo-tree-id8165 . -1) (undo-tree-id8166 . -1) (undo-tree-id8167 . -1) (undo-tree-id8168 . -1) (undo-tree-id8169 . -1) (#("a" 0 1 (fontified t)) . -1432) (undo-tree-id8170 . -1) (undo-tree-id8171 . -1) (undo-tree-id8172 . -1) (undo-tree-id8173 . -1) (undo-tree-id8174 . -1) (undo-tree-id8175 . -1) (undo-tree-id8176 . -1) (undo-tree-id8177 . -1) (undo-tree-id8178 . -1) (undo-tree-id8179 . -1) (#("r" 0 1 (fontified t)) . -1433) (undo-tree-id8180 . -1) (undo-tree-id8181 . -1) (undo-tree-id8182 . -1) (undo-tree-id8183 . -1) (undo-tree-id8184 . -1) 1434) nil (26040 48664 671898 28000) 0 nil])
([nil nil ((1430 . 1443)) nil (26040 48664 671861 676000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1456 1459 nil nil nil t #s(yas--exit 1460 nil))) #s(yas--exit 1460 nil) 67 nil #s(yas--field 1 1456 1459 nil nil nil t #s(yas--exit 1460 nil)) nil nil)) (1435 . 1460) (#("zbar_get_symbol_name(${1:sym})$0" 0 32 (fontified nil)) . 1435) (1435 . 1467) (#("zbar_get" 0 8 (fontified nil)) . 1435) (1435 . 1443) (#("zbar_get_symbol_name(…)" 0 23 (fontified nil)) . -1435) (1435 . 1458) (#("zbar_get" 0 8 (fontified t)) . -1435) (undo-tree-id8112 . -8) (undo-tree-id8113 . -1) (undo-tree-id8114 . -1) (undo-tree-id8115 . -1) (undo-tree-id8116 . -2) (undo-tree-id8117 . -2) (undo-tree-id8118 . -3) (undo-tree-id8119 . -3) (undo-tree-id8120 . -4) (undo-tree-id8121 . -4) (undo-tree-id8122 . -5) (undo-tree-id8123 . -5) (undo-tree-id8124 . -6) (undo-tree-id8125 . -6) (undo-tree-id8126 . -7) (undo-tree-id8127 . -7) (undo-tree-id8128 . -8) (undo-tree-id8129 . -8) (undo-tree-id8130 . -8) (undo-tree-id8131 . -8) (undo-tree-id8132 . -8) 1443) nil (26040 48664 671859 461000) 0 nil])
([nil nil ((#("sym" 0 3 (fontified nil)) . 1457) (undo-tree-id8111 . -3) (1456 . 1457)) nil (26040 48664 671839 581000) 0 nil])
([nil nil ((1456 . 1459) (#("t" 0 1 (fontified nil)) . 1456) (undo-tree-id8100 . -1) (1456 . 1457) (#("typ" 0 3 (fontified nil)) . -1456) (undo-tree-id8101 . -3) (1456 . 1459) (#("t" 0 1 (fontified t)) . -1456) (undo-tree-id8102 . -1) (undo-tree-id8103 . -1) (undo-tree-id8104 . -1) (undo-tree-id8105 . -1) (undo-tree-id8106 . -1) (undo-tree-id8107 . -1) (undo-tree-id8108 . -1) (undo-tree-id8109 . -1) (undo-tree-id8110 . -1) 1457) nil (26040 48664 671837 81000) 0 nil])
([nil nil ((apply yas--snippet-revive 1435 1460 #s(yas--snippet nil (#s(yas--field 1 1456 1459 nil nil nil t #s(yas--exit 1460 nil))) #s(yas--exit 1460 nil) 67 nil #s(yas--field 1 1456 1459 nil nil nil t #s(yas--exit 1460 nil)) nil nil))) nil (26040 48664 671828 150000) 0 nil])
([nil nil ((1460 . 1463)) nil (26040 48664 671827 390000) 0 nil])
([nil nil ((1462 . 1466) (#("d" 0 1 (fontified nil)) . 1462) (1462 . 1463) (#("data" 0 4 (fontified nil)) . -1462) (1462 . 1466) (#("d" 0 1 (fontified t)) . -1462) (undo-tree-id8089 . -1) (undo-tree-id8090 . -1) (undo-tree-id8091 . -1) (undo-tree-id8092 . -1) (undo-tree-id8093 . -1) (undo-tree-id8094 . -1) (undo-tree-id8095 . -1) (undo-tree-id8096 . -1) (undo-tree-id8097 . -1) (undo-tree-id8098 . -1) (undo-tree-id8099 . -1) 1463) nil (26040 48664 671824 576000) 0 nil])
([nil nil ((1467 . 1468)) nil (26040 48664 671804 509000) 0 nil])
([nil nil ((1466 . 1469) (t 26040 48664 693255 371000)) nil (26040 48700 180429 343000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1466) (undo-tree-id8766 . -1) (undo-tree-id8767 . -1) (undo-tree-id8768 . -1) (undo-tree-id8769 . -1) (undo-tree-id8770 . -1) (undo-tree-id8771 . -1) (undo-tree-id8772 . -1) (undo-tree-id8773 . -1) (undo-tree-id8774 . -1) (undo-tree-id8775 . -1) (undo-tree-id8776 . -1) (undo-tree-id8777 . -1) (undo-tree-id8778 . -1) (undo-tree-id8779 . -1) (undo-tree-id8780 . -1) (undo-tree-id8781 . -1) (undo-tree-id8782 . -1) (undo-tree-id8783 . -1) (undo-tree-id8784 . -1) (undo-tree-id8785 . -1) (undo-tree-id8786 . -1) (#("a" 0 1 (fontified t)) . -1467) (undo-tree-id8787 . -1) (undo-tree-id8788 . -1) (undo-tree-id8789 . -1) (undo-tree-id8790 . -1) (undo-tree-id8791 . -1) (undo-tree-id8792 . -1) (undo-tree-id8793 . -1) (#("s" 0 1 (face font-lock-keyword-face fontified t)) . -1468) (undo-tree-id8794 . -1) (undo-tree-id8795 . -1) (undo-tree-id8796 . -1) (undo-tree-id8797 . -1) (undo-tree-id8798 . -1) 1469) nil (26040 48700 180427 81000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -1462) (undo-tree-id8590 . -1) (undo-tree-id8591 . -1) (undo-tree-id8592 . -1) (undo-tree-id8593 . -1) (undo-tree-id8594 . -1) (undo-tree-id8595 . -1) (undo-tree-id8596 . -1) (undo-tree-id8597 . -1) (undo-tree-id8598 . -1) (undo-tree-id8599 . -1) (undo-tree-id8600 . -1) (undo-tree-id8601 . -1) (undo-tree-id8602 . -1) (undo-tree-id8603 . -1) (undo-tree-id8604 . -1) (undo-tree-id8605 . -1) (undo-tree-id8606 . -1) (undo-tree-id8607 . -1) (undo-tree-id8608 . -1) (undo-tree-id8609 . -1) (undo-tree-id8610 . -1) (undo-tree-id8611 . -1) (undo-tree-id8612 . -1) (undo-tree-id8613 . -1) (undo-tree-id8614 . -1) (undo-tree-id8615 . -1) (undo-tree-id8616 . -1) (undo-tree-id8617 . -1) (undo-tree-id8618 . -1) (undo-tree-id8619 . -1) (undo-tree-id8620 . -1) (undo-tree-id8621 . -1) (undo-tree-id8622 . -1) (undo-tree-id8623 . -1) (undo-tree-id8624 . -1) (undo-tree-id8625 . -1) (undo-tree-id8626 . -1) (undo-tree-id8627 . -1) (undo-tree-id8628 . -1) (undo-tree-id8629 . -1) (undo-tree-id8630 . -1) (undo-tree-id8631 . -1) (undo-tree-id8632 . -1) (undo-tree-id8633 . -1) (undo-tree-id8634 . -1) (undo-tree-id8635 . -1) (undo-tree-id8636 . -1) (#("a" 0 1 (fontified t)) . -1463) (undo-tree-id8637 . -1) (undo-tree-id8638 . -1) (undo-tree-id8639 . -1) (undo-tree-id8640 . -1) (undo-tree-id8641 . -1) (undo-tree-id8642 . -1) (undo-tree-id8643 . -1) (undo-tree-id8644 . -1) (undo-tree-id8645 . -1) (undo-tree-id8646 . -1) (undo-tree-id8647 . -1) (undo-tree-id8648 . -1) (undo-tree-id8649 . -1) (undo-tree-id8650 . -1) (undo-tree-id8651 . -1) (undo-tree-id8652 . -1) (undo-tree-id8653 . -1) (undo-tree-id8654 . -1) (undo-tree-id8655 . -1) (undo-tree-id8656 . -1) (undo-tree-id8657 . -1) (undo-tree-id8658 . -1) (undo-tree-id8659 . -1) (undo-tree-id8660 . -1) (undo-tree-id8661 . -1) (undo-tree-id8662 . -1) (undo-tree-id8663 . -1) (undo-tree-id8664 . -1) (undo-tree-id8665 . -1) (undo-tree-id8666 . -1) (undo-tree-id8667 . -1) (undo-tree-id8668 . -1) (undo-tree-id8669 . -1) (undo-tree-id8670 . -1) (undo-tree-id8671 . -1) (undo-tree-id8672 . -1) (undo-tree-id8673 . -1) (undo-tree-id8674 . -1) (undo-tree-id8675 . -1) (undo-tree-id8676 . -1) (undo-tree-id8677 . -1) (undo-tree-id8678 . -1) (undo-tree-id8679 . -1) (undo-tree-id8680 . -1) (undo-tree-id8681 . -1) (#("t" 0 1 (fontified t)) . -1464) (undo-tree-id8682 . -1) (undo-tree-id8683 . -1) (undo-tree-id8684 . -1) (undo-tree-id8685 . -1) (undo-tree-id8686 . -1) (undo-tree-id8687 . -1) (undo-tree-id8688 . -1) (undo-tree-id8689 . -1) (undo-tree-id8690 . -1) (undo-tree-id8691 . -1) (undo-tree-id8692 . -1) (undo-tree-id8693 . -1) (undo-tree-id8694 . -1) (undo-tree-id8695 . -1) (undo-tree-id8696 . -1) (undo-tree-id8697 . -1) (undo-tree-id8698 . -1) (undo-tree-id8699 . -1) (undo-tree-id8700 . -1) (undo-tree-id8701 . -1) (undo-tree-id8702 . -1) (undo-tree-id8703 . -1) (undo-tree-id8704 . -1) (undo-tree-id8705 . -1) (undo-tree-id8706 . -1) (undo-tree-id8707 . -1) (undo-tree-id8708 . -1) (undo-tree-id8709 . -1) (undo-tree-id8710 . -1) (undo-tree-id8711 . -1) (undo-tree-id8712 . -1) (undo-tree-id8713 . -1) (undo-tree-id8714 . -1) (undo-tree-id8715 . -1) (undo-tree-id8716 . -1) (undo-tree-id8717 . -1) (undo-tree-id8718 . -1) (undo-tree-id8719 . -1) (undo-tree-id8720 . -1) (undo-tree-id8721 . -1) (undo-tree-id8722 . -1) (undo-tree-id8723 . -1) (undo-tree-id8724 . -1) (#("a" 0 1 (fontified t)) . -1465) (undo-tree-id8725 . -1) (undo-tree-id8726 . -1) (undo-tree-id8727 . -1) (undo-tree-id8728 . -1) (undo-tree-id8729 . -1) (undo-tree-id8730 . -1) (undo-tree-id8731 . -1) (undo-tree-id8732 . -1) (undo-tree-id8733 . -1) (undo-tree-id8734 . -1) (undo-tree-id8735 . -1) (undo-tree-id8736 . -1) (undo-tree-id8737 . -1) (undo-tree-id8738 . -1) (undo-tree-id8739 . -1) (undo-tree-id8740 . -1) (undo-tree-id8741 . -1) (undo-tree-id8742 . -1) (undo-tree-id8743 . -1) (undo-tree-id8744 . -1) (undo-tree-id8745 . -1) (undo-tree-id8746 . -1) (undo-tree-id8747 . -1) (undo-tree-id8748 . -1) (undo-tree-id8749 . -1) (undo-tree-id8750 . -1) (undo-tree-id8751 . -1) (undo-tree-id8752 . -1) (undo-tree-id8753 . -1) (undo-tree-id8754 . -1) (undo-tree-id8755 . -1) (undo-tree-id8756 . -1) (undo-tree-id8757 . -1) (undo-tree-id8758 . -1) (undo-tree-id8759 . -1) (undo-tree-id8760 . -1) (undo-tree-id8761 . -1) (undo-tree-id8762 . -1) (undo-tree-id8763 . -1) (undo-tree-id8764 . -1) (undo-tree-id8765 . -1) 1466) nil (26040 48700 180398 822000) 0 nil])
([nil nil ((1462 . 1465)) nil (26040 48700 179601 189000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -1462) (undo-tree-id8542 . -1) (undo-tree-id8543 . -1) (undo-tree-id8544 . -1) (undo-tree-id8545 . -1) (undo-tree-id8546 . -1) (undo-tree-id8547 . -1) (undo-tree-id8548 . -1) (undo-tree-id8549 . -1) (undo-tree-id8550 . -1) (undo-tree-id8551 . -1) (undo-tree-id8552 . -1) (undo-tree-id8553 . -1) (undo-tree-id8554 . -1) (undo-tree-id8555 . -1) (undo-tree-id8556 . -1) (undo-tree-id8557 . -1) (undo-tree-id8558 . -1) (undo-tree-id8559 . -1) (undo-tree-id8560 . -1) (undo-tree-id8561 . -1) (undo-tree-id8562 . -1) (undo-tree-id8563 . -1) (undo-tree-id8564 . -1) (undo-tree-id8565 . -1) (undo-tree-id8566 . -1) (undo-tree-id8567 . -1) (#("t" 0 1 (fontified t)) . -1463) (undo-tree-id8568 . -1) (undo-tree-id8569 . -1) (undo-tree-id8570 . -1) (undo-tree-id8571 . -1) (undo-tree-id8572 . -1) (undo-tree-id8573 . -1) (undo-tree-id8574 . -1) (undo-tree-id8575 . -1) (undo-tree-id8576 . -1) (undo-tree-id8577 . -1) (undo-tree-id8578 . -1) (undo-tree-id8579 . -1) (undo-tree-id8580 . -1) (undo-tree-id8581 . -1) (undo-tree-id8582 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -1464) (undo-tree-id8583 . -1) (undo-tree-id8584 . -1) (undo-tree-id8585 . -1) (undo-tree-id8586 . -1) (undo-tree-id8587 . -1) (undo-tree-id8588 . -1) (undo-tree-id8589 . -1) 1465) nil (26040 48700 179598 823000) 0 nil])
([nil nil ((1462 . 1474)) nil (26040 48700 179566 690000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -1471) (undo-tree-id8515 . -1) (undo-tree-id8516 . -1) (undo-tree-id8517 . -1) (undo-tree-id8518 . -1) (undo-tree-id8519 . -1) (undo-tree-id8520 . -1) (undo-tree-id8521 . -1) (undo-tree-id8522 . -1) (undo-tree-id8523 . -1) (undo-tree-id8524 . -1) (undo-tree-id8525 . -1) (undo-tree-id8526 . -1) (undo-tree-id8527 . -1) (#("i" 0 1 (fontified t)) . -1472) (undo-tree-id8528 . -1) (undo-tree-id8529 . -1) (undo-tree-id8530 . -1) (undo-tree-id8531 . -1) (undo-tree-id8532 . -1) (undo-tree-id8533 . -1) (undo-tree-id8534 . -1) (undo-tree-id8535 . -1) (undo-tree-id8536 . -1) (#("m" 0 1 (fontified t)) . -1473) (undo-tree-id8537 . -1) (undo-tree-id8538 . -1) (undo-tree-id8539 . -1) (undo-tree-id8540 . -1) (undo-tree-id8541 . -1) 1474) nil (26040 48700 179564 864000) 0 nil])
([nil nil ((1471 . 1472)) nil (26040 48700 179546 235000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -1471) (undo-tree-id8512 . -1) (undo-tree-id8513 . -1) (undo-tree-id8514 . -1) 1472) nil (26040 48700 179545 374000) 0 nil])
([nil nil ((1471 . 1474)) nil (26040 48700 179542 376000) 0 nil])
([nil nil ((#("from" 0 4 (fontified t)) . -1470) (undo-tree-id8477 . -4) (undo-tree-id8478 . -4) (undo-tree-id8479 . -1) (undo-tree-id8480 . -1) (undo-tree-id8481 . -1) (undo-tree-id8482 . -1) (undo-tree-id8483 . -1) (undo-tree-id8484 . -1) (undo-tree-id8485 . -1) (undo-tree-id8486 . -1) (undo-tree-id8487 . -1) (undo-tree-id8488 . -1) (undo-tree-id8489 . -1) (undo-tree-id8490 . -1) (undo-tree-id8491 . -1) (undo-tree-id8492 . -1) (undo-tree-id8493 . -1) (undo-tree-id8494 . -1) (undo-tree-id8495 . -1) (undo-tree-id8496 . -1) (undo-tree-id8497 . -1) (undo-tree-id8498 . -1) (undo-tree-id8499 . -2) (undo-tree-id8500 . -2) (undo-tree-id8501 . -3) (undo-tree-id8502 . -3) (undo-tree-id8503 . -4) (undo-tree-id8504 . -4) (undo-tree-id8505 . -4) (undo-tree-id8506 . -4) (undo-tree-id8507 . -4) (undo-tree-id8508 . -4) (undo-tree-id8509 . -4) (undo-tree-id8510 . -4) (undo-tree-id8511 . -4) 1474) nil (26040 48700 179540 278000) 0 nil])
([nil nil ((#("String::" 0 6 (face font-lock-type-face fontified t) 6 8 (fontified t)) . -1462) (undo-tree-id8418 . -8) (undo-tree-id8419 . -8) (undo-tree-id8420 . -1) (undo-tree-id8421 . -1) (undo-tree-id8422 . -2) (undo-tree-id8423 . -2) (undo-tree-id8424 . -3) (undo-tree-id8425 . -3) (undo-tree-id8426 . -3) (undo-tree-id8427 . -4) (undo-tree-id8428 . -4) (undo-tree-id8429 . -4) (undo-tree-id8430 . -4) (undo-tree-id8431 . -5) (undo-tree-id8432 . -5) (undo-tree-id8433 . -6) (undo-tree-id8434 . -6) (undo-tree-id8435 . -6) (undo-tree-id8436 . -6) (undo-tree-id8437 . -7) (undo-tree-id8438 . -7) (undo-tree-id8439 . -7) (undo-tree-id8440 . -8) (undo-tree-id8441 . -8) (undo-tree-id8442 . -8) (undo-tree-id8443 . -8) (undo-tree-id8444 . -8) (undo-tree-id8445 . -8) (undo-tree-id8446 . -8) (undo-tree-id8447 . -8) (undo-tree-id8448 . -8) (undo-tree-id8449 . -8) (undo-tree-id8450 . -8) (undo-tree-id8451 . -8) (undo-tree-id8452 . -8) (undo-tree-id8453 . -8) (undo-tree-id8454 . -8) (undo-tree-id8455 . -8) (undo-tree-id8456 . -8) (undo-tree-id8457 . -8) (undo-tree-id8458 . -8) (undo-tree-id8459 . -8) (undo-tree-id8460 . -8) (undo-tree-id8461 . -8) (undo-tree-id8462 . -8) (undo-tree-id8463 . -8) (undo-tree-id8464 . -8) (undo-tree-id8465 . -8) (undo-tree-id8466 . -8) (undo-tree-id8467 . -8) (undo-tree-id8468 . -8) (undo-tree-id8469 . -8) (undo-tree-id8470 . -8) (undo-tree-id8471 . -8) (undo-tree-id8472 . -8) (undo-tree-id8473 . -8) (undo-tree-id8474 . -8) (undo-tree-id8475 . -8) (undo-tree-id8476 . -8) 1470) nil (26040 48700 179511 463000) 0 nil])
([nil nil ((1462 . 1463)) nil (26040 48700 179203 869000) 0 nil])
([nil nil ((1462 . 1466) (#("d" 0 1 (fontified nil)) . 1462) (1462 . 1463) (#("data" 0 4 (fontified nil)) . -1462) (1462 . 1466) (#("d" 0 1 (fontified t)) . -1462) (undo-tree-id8413 . -1) (undo-tree-id8414 . -1) (undo-tree-id8415 . -1) (undo-tree-id8416 . -1) (undo-tree-id8417 . -1) 1463) nil (26040 48700 179199 787000) 0 nil])
([nil nil ((1481 . 1485) (t 26040 48700 199924 218000)) nil (26040 48738 59032 735000) 0 nil])
([nil nil ((1485 . 1494)) nil (26040 48738 59028 380000) 0 nil])
([nil nil ((#("while !symbol.is_null() {" 0 5 (face font-lock-keyword-face fontified t) 5 7 (fontified t) 7 14 (fontified t) 14 21 (fontified t) 21 22 (face (rainbow-delimiters-depth-3-face) fontified t) 22 23 (face (rainbow-delimiters-depth-3-face) fontified t) 23 24 (fontified t) 24 25 (face (rainbow-delimiters-depth-3-face) fontified t)) . 1234) (undo-tree-id8799 . -14) (undo-tree-id8800 . -14) (undo-tree-id8801 . -14) (undo-tree-id8802 . -14) (undo-tree-id8803 . -14) (undo-tree-id8804 . -14) (undo-tree-id8805 . -16) (undo-tree-id8806 . -21) (undo-tree-id8807 . -25) (t 26040 48738 113259 874000)) nil (26040 48753 903039 541000) 0 nil])
([nil nil ((1234 . 1240)) nil (26040 48753 903022 616000) 0 nil])
([nil nil ((1175 . 1179) (t 26040 48753 956594 179000)) nil (26040 48806 394579 24000) 0 nil])
([nil nil ((#("let " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -1466) (undo-tree-id8808 . -4) (undo-tree-id8809 . -4) (undo-tree-id8810 . -2) (undo-tree-id8811 . -2) (undo-tree-id8812 . -2) (undo-tree-id8813 . -2) (undo-tree-id8814 . -2) (undo-tree-id8815 . -2) (undo-tree-id8816 . -4) (undo-tree-id8817 . -3) (undo-tree-id8818 . -3) (undo-tree-id8819 . -3) (undo-tree-id8820 . -3) (undo-tree-id8821 . -3) (undo-tree-id8822 . -4) (undo-tree-id8823 . -4) (undo-tree-id8824 . -4) (undo-tree-id8825 . -4) (undo-tree-id8826 . -4) (undo-tree-id8827 . -4) (undo-tree-id8828 . -4) (undo-tree-id8829 . -4) (undo-tree-id8830 . -4) (undo-tree-id8831 . -4) (undo-tree-id8832 . -4) (undo-tree-id8833 . -4) (undo-tree-id8834 . -4) (undo-tree-id8835 . -4) (undo-tree-id8836 . -4) 1470) nil (26040 48806 394574 503000) 0 nil])
([nil nil ((1505 . 1518) (t 26040 48806 446597 399000)) nil (26040 48824 517799 204000) 0 nil])
([nil nil ((1518 . 1522)) nil (26040 48824 517798 301000) 0 nil])
([nil nil ((1521 . 1527) (#("s" 0 1 (fontified nil)) . 1521) (1521 . 1522) (#("symbol" 0 6 (fontified nil)) . -1521) (1521 . 1527) (#("s" 0 1 (fontified t)) . -1521) (undo-tree-id8858 . -1) (undo-tree-id8859 . -1) (undo-tree-id8860 . -1) (undo-tree-id8861 . -1) (undo-tree-id8862 . -1) (undo-tree-id8863 . -1) (undo-tree-id8864 . -1) 1522) nil (26040 48824 517796 141000) 0 nil])
([nil nil ((1527 . 1528)) nil (26040 48824 517543 368000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -1527) (undo-tree-id8852 . -1) (undo-tree-id8853 . -1) (undo-tree-id8854 . -1) (undo-tree-id8855 . -1) (undo-tree-id8856 . -1) (undo-tree-id8857 . -1) 1528) nil (26040 48824 517542 232000) 0 nil])
([nil nil ((1527 . 1529)) nil (26040 48824 517536 867000) 0 nil])
([nil nil ((apply yas--snippet-revive 1528 1537 #s(yas--snippet nil nil #s(yas--exit 1537 nil) 68 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1537 nil) 68 nil nil nil nil)) (1528 . 1537) (#("is_null()$0" 0 11 (fontified nil)) . 1528) (1528 . 1539) (#("i" 0 1 (fontified nil)) . 1528) (1528 . 1529) (#("is_null()" 0 9 (fontified nil)) . -1528) (1528 . 1537) (#("i" 0 1 (fontified t)) . -1528) (undo-tree-id8846 . -1) (undo-tree-id8847 . -1) (undo-tree-id8848 . -1) (undo-tree-id8849 . -1) (undo-tree-id8850 . -1) (undo-tree-id8851 . -1) 1529) nil (26040 48824 517535 403000) 0 nil])
([nil nil ((1537 . 1540)) nil (26040 48824 517528 996000) 0 nil])
([nil nil ((1541 . 1553) (#("                " 0 16 (fontified nil)) . 1540) (1540 . 1556) (#("            " 0 12 (fontified nil)) . 1540) (undo-tree-id8842 . -12) (undo-tree-id8843 . -12) (undo-tree-id8844 . -12) (undo-tree-id8845 . -12) (1539 . 1553)) nil (26040 48824 517527 750000) 0 nil])
([nil nil ((1540 . 1556)) nil (26040 48824 517523 30000) 0 nil])
([nil nil ((1556 . 1557)) nil (26040 48824 517521 803000) 0 nil])
([nil nil ((apply yas--snippet-revive 1556 1562 #s(yas--snippet nil nil nil 69 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 69 nil nil nil nil)) (1556 . 1562) (#("break;" 0 6 (fontified nil)) . 1556) (1556 . 1562) (#("b" 0 1 (fontified nil)) . 1556) (1556 . 1557) (#("break" 0 5 (fontified nil)) . -1556) (1556 . 1561) (#("b" 0 1 (fontified t)) . -1556) (undo-tree-id8837 . -1) (undo-tree-id8838 . -1) (undo-tree-id8839 . -1) (undo-tree-id8840 . -1) (undo-tree-id8841 . -1) 1557) nil (26040 48824 517517 351000) 0 nil])
([nil nil ((1322 . 1328) (t 26040 48824 539931 845000)) nil (26040 48862 444639 111000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . -1324) (undo-tree-id8865 . -1) (undo-tree-id8866 . -1) (undo-tree-id8867 . -1) (undo-tree-id8868 . -1) (undo-tree-id8869 . -1) (undo-tree-id8870 . -1) (undo-tree-id8871 . -1) (undo-tree-id8872 . -1) (undo-tree-id8873 . -1) (undo-tree-id8874 . -1) (undo-tree-id8875 . -1) 1325) nil (26040 48862 444635 269000) 0 nil])
([nil nil ((1324 . 1325) (t 26040 48862 496600 840000)) nil (26040 48867 572293 715000) 0 nil])
([nil nil ((#("str" 0 3 (face font-lock-type-face fontified t)) . -1325) (undo-tree-id8936 . -3) (undo-tree-id8937 . -3) (undo-tree-id8938 . -1) (undo-tree-id8939 . -2) (undo-tree-id8940 . -3) 1328 (t 26040 48867 596601 153000)) nil (26040 48871 64902 365000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -1322) (undo-tree-id8876 . -1) (undo-tree-id8877 . -1) (undo-tree-id8878 . -1) (undo-tree-id8879 . -1) (undo-tree-id8880 . -1) (undo-tree-id8881 . -1) (undo-tree-id8882 . -1) (undo-tree-id8883 . -1) (undo-tree-id8884 . -1) (undo-tree-id8885 . -1) (undo-tree-id8886 . -1) (undo-tree-id8887 . -1) (undo-tree-id8888 . -1) (undo-tree-id8889 . -1) (undo-tree-id8890 . -1) (undo-tree-id8891 . -1) (undo-tree-id8892 . -1) (undo-tree-id8893 . -1) (undo-tree-id8894 . -1) (undo-tree-id8895 . -1) (undo-tree-id8896 . -1) (undo-tree-id8897 . -1) (#(" " 0 1 (fontified t)) . -1323) (undo-tree-id8898 . -1) (undo-tree-id8899 . -1) (undo-tree-id8900 . -1) (undo-tree-id8901 . -1) (undo-tree-id8902 . -1) (undo-tree-id8903 . -1) (undo-tree-id8904 . -1) (undo-tree-id8905 . -1) (undo-tree-id8906 . -1) (undo-tree-id8907 . -1) (undo-tree-id8908 . -1) (undo-tree-id8909 . -1) (undo-tree-id8910 . -1) (undo-tree-id8911 . -1) (undo-tree-id8912 . -1) (undo-tree-id8913 . -1) (undo-tree-id8914 . -1) (undo-tree-id8915 . -1) (undo-tree-id8916 . -1) (undo-tree-id8917 . -1) (#("&" 0 1 (fontified t)) . -1324) (undo-tree-id8918 . -1) (undo-tree-id8919 . -1) (undo-tree-id8920 . -1) (undo-tree-id8921 . -1) (undo-tree-id8922 . -1) (undo-tree-id8923 . -1) (undo-tree-id8924 . -1) (undo-tree-id8925 . -1) (undo-tree-id8926 . -1) (undo-tree-id8927 . -1) (undo-tree-id8928 . -1) (undo-tree-id8929 . -1) (undo-tree-id8930 . -1) (undo-tree-id8931 . -1) (undo-tree-id8932 . -1) (undo-tree-id8933 . -1) (undo-tree-id8934 . -1) (undo-tree-id8935 . -1) 1325) nil (26040 48871 64892 657000) 0 nil])
([nil nil ((#(":" 0 1 (face rust-string-interpolation fontified t)) . -1391) (undo-tree-id8941 . -1) (undo-tree-id8942 . -1) (undo-tree-id8943 . -1) (undo-tree-id8944 . -1) (undo-tree-id8945 . -1) (undo-tree-id8946 . -1) (undo-tree-id8947 . -1) (undo-tree-id8948 . -1) (undo-tree-id8949 . -1) (undo-tree-id8950 . -1) (undo-tree-id8951 . -1) (undo-tree-id8952 . -1) (#("?" 0 1 (face rust-string-interpolation fontified t)) . -1392) (undo-tree-id8953 . -1) (undo-tree-id8954 . -1) (undo-tree-id8955 . -1) (undo-tree-id8956 . -1) (undo-tree-id8957 . -1) (undo-tree-id8958 . -1) (undo-tree-id8959 . -1) (undo-tree-id8960 . -1) (undo-tree-id8961 . -1) (undo-tree-id8962 . -1) 1393 (t 26040 48871 116601 369000)) nil (26040 48899 949383 964000) 0 nil])
([nil nil ((1391 . 1393) (t 26040 48899 969936 474000)) nil (26040 48903 947392 665000) 0 nil])
([nil nil ((1445 . 1446) (t 26040 48903 999936 720000)) nil (26040 48990 325684 113000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1445) (undo-tree-id9106 . -1) (undo-tree-id9107 . -1) (undo-tree-id9108 . -1) 1446) nil (26040 48990 325683 121000) 0 nil])
([nil nil ((1445 . 1449)) nil (26040 48990 325680 528000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -1448) (undo-tree-id9099 . -1) (undo-tree-id9100 . -1) (undo-tree-id9101 . -1) (undo-tree-id9102 . -1) (undo-tree-id9103 . -1) (undo-tree-id9104 . -1) (undo-tree-id9105 . -1) 1449) nil (26040 48990 325679 518000) 0 nil])
([nil nil ((1448 . 1450)) nil (26040 48990 325673 935000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -1446) (undo-tree-id9023 . -1) (undo-tree-id9024 . -1) (undo-tree-id9025 . -1) (undo-tree-id9026 . -1) (undo-tree-id9027 . -1) (undo-tree-id9028 . -1) (undo-tree-id9029 . -1) (undo-tree-id9030 . -1) (undo-tree-id9031 . -1) (undo-tree-id9032 . -1) (undo-tree-id9033 . -1) (undo-tree-id9034 . -1) (undo-tree-id9035 . -1) (undo-tree-id9036 . -1) (undo-tree-id9037 . -1) (undo-tree-id9038 . -1) (undo-tree-id9039 . -1) (undo-tree-id9040 . -1) (undo-tree-id9041 . -1) (undo-tree-id9042 . -1) (undo-tree-id9043 . -1) (undo-tree-id9044 . -1) (undo-tree-id9045 . -1) (undo-tree-id9046 . -1) (undo-tree-id9047 . -1) (undo-tree-id9048 . -1) (undo-tree-id9049 . -1) (undo-tree-id9050 . -1) (undo-tree-id9051 . -1) (undo-tree-id9052 . -1) (#("o" 0 1 (fontified t)) . -1447) (undo-tree-id9053 . -1) (undo-tree-id9054 . -1) (undo-tree-id9055 . -1) (undo-tree-id9056 . -1) (undo-tree-id9057 . -1) (undo-tree-id9058 . -1) (undo-tree-id9059 . -1) (undo-tree-id9060 . -1) (undo-tree-id9061 . -1) (undo-tree-id9062 . -1) (undo-tree-id9063 . -1) (undo-tree-id9064 . -1) (undo-tree-id9065 . -1) (undo-tree-id9066 . -1) (undo-tree-id9067 . -1) (undo-tree-id9068 . -1) (undo-tree-id9069 . -1) (undo-tree-id9070 . -1) (undo-tree-id9071 . -1) (undo-tree-id9072 . -1) (undo-tree-id9073 . -1) (undo-tree-id9074 . -1) (undo-tree-id9075 . -1) (undo-tree-id9076 . -1) (undo-tree-id9077 . -1) (undo-tree-id9078 . -1) (#("_" 0 1 (fontified t)) . -1448) (undo-tree-id9079 . -1) (undo-tree-id9080 . -1) (undo-tree-id9081 . -1) (undo-tree-id9082 . -1) (undo-tree-id9083 . -1) (undo-tree-id9084 . -1) (undo-tree-id9085 . -1) (undo-tree-id9086 . -1) (undo-tree-id9087 . -1) (undo-tree-id9088 . -1) (undo-tree-id9089 . -1) (undo-tree-id9090 . -1) (#("s" 0 1 (fontified t)) . -1449) (undo-tree-id9091 . -1) (undo-tree-id9092 . -1) (undo-tree-id9093 . -1) (undo-tree-id9094 . -1) (undo-tree-id9095 . -1) (undo-tree-id9096 . -1) (undo-tree-id9097 . -1) (undo-tree-id9098 . -1) 1450) nil (26040 48990 325926 954000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1445) (undo-tree-id9254 . -1) (undo-tree-id9255 . -1) (undo-tree-id9256 . -1) (undo-tree-id9257 . -1) (undo-tree-id9258 . -1) (undo-tree-id9259 . -1) (undo-tree-id9260 . -1) (undo-tree-id9261 . -1) (undo-tree-id9262 . -1) (undo-tree-id9263 . -1) (undo-tree-id9264 . -1) (undo-tree-id9265 . -1) (undo-tree-id9266 . -1) (undo-tree-id9267 . -1) (undo-tree-id9268 . -1) (undo-tree-id9269 . -1) (undo-tree-id9270 . -1) (undo-tree-id9271 . -1) (undo-tree-id9272 . -1) (undo-tree-id9273 . -1) (undo-tree-id9274 . -1) (undo-tree-id9275 . -1) (undo-tree-id9276 . -1) (undo-tree-id9277 . -1) (undo-tree-id9278 . -1) (undo-tree-id9279 . -1) (undo-tree-id9280 . -1) (undo-tree-id9281 . -1) (undo-tree-id9282 . -1) (undo-tree-id9283 . -1) (undo-tree-id9284 . -1) (undo-tree-id9285 . -1) (undo-tree-id9286 . -1) (undo-tree-id9287 . -1) (undo-tree-id9288 . -1) (undo-tree-id9289 . -1) (undo-tree-id9290 . -1) (undo-tree-id9291 . -1) (undo-tree-id9292 . -1) (undo-tree-id9293 . -1) (undo-tree-id9294 . -1) (undo-tree-id9295 . -1) (undo-tree-id9296 . -1) (undo-tree-id9297 . -1) (undo-tree-id9298 . -1) (undo-tree-id9299 . -1) (undo-tree-id9300 . -1) (undo-tree-id9301 . -1) (undo-tree-id9302 . -1) (undo-tree-id9303 . -1) (undo-tree-id9304 . -1) 1446) nil (26040 49020 42853 714000) 0 nil] [nil nil ((#("typ)." 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-5-face) fontified t) 4 5 (fontified t)) . -1441) (undo-tree-id8963 . -4) (undo-tree-id8964 . -5) (undo-tree-id8965 . -3) (undo-tree-id8966 . -3) (undo-tree-id8967 . -3) (undo-tree-id8968 . -3) (undo-tree-id8969 . -3) (undo-tree-id8970 . -3) (undo-tree-id8971 . -3) (undo-tree-id8972 . -4) (undo-tree-id8973 . -4) (undo-tree-id8974 . -4) (undo-tree-id8975 . -4) (undo-tree-id8976 . -4) (undo-tree-id8977 . -4) (undo-tree-id8978 . -4) (undo-tree-id8979 . -4) (undo-tree-id8980 . -4) (undo-tree-id8981 . -5) (undo-tree-id8982 . -5) (undo-tree-id8983 . -5) (undo-tree-id8984 . -5) (undo-tree-id8985 . -5) (undo-tree-id8986 . -5) (undo-tree-id8987 . -5) (undo-tree-id8988 . -5) (undo-tree-id8989 . -5) (undo-tree-id8990 . -5) (undo-tree-id8991 . -5) (undo-tree-id8992 . -5) (undo-tree-id8993 . -5) (undo-tree-id8994 . -5) (undo-tree-id8995 . -5) (undo-tree-id8996 . -5) (undo-tree-id8997 . -5) (undo-tree-id8998 . -5) (undo-tree-id8999 . -5) (undo-tree-id9000 . -5) (undo-tree-id9001 . -5) (undo-tree-id9002 . -5) (undo-tree-id9003 . -5) (undo-tree-id9004 . -5) (undo-tree-id9005 . -5) (undo-tree-id9006 . -5) (undo-tree-id9007 . -5) (undo-tree-id9008 . -5) (undo-tree-id9009 . -5) (undo-tree-id9010 . -5) (undo-tree-id9011 . -5) (undo-tree-id9012 . -5) (undo-tree-id9013 . -5) (undo-tree-id9014 . -5) (undo-tree-id9015 . -5) (undo-tree-id9016 . -5) (undo-tree-id9017 . -5) (undo-tree-id9018 . -5) (undo-tree-id9019 . -5) (undo-tree-id9020 . -5) (undo-tree-id9021 . -4) (undo-tree-id9022 . -5) 1446) ((1441 . 1446)) (26040 48990 325143 857000) 0 nil])
([nil nil ((1415 . 1416)) nil (26040 49020 42820 216000) 0 nil])
nil
([nil nil ((1415 . 1419)) nil (26040 49020 42819 647000) 0 nil])
([nil nil ((#("::os::raw" 0 2 (fontified t) 2 4 (face font-lock-constant-face fontified t) 4 6 (fontified t) 6 9 (face font-lock-constant-face fontified t)) . -17) (undo-tree-id9230 . -9) 26 (29 . 39) (35 . 45) (37 . 46) (#("c_ulong" 0 7 (fontified t)) . -37) (undo-tree-id9231 . -7) 44 (1415 . 1415) (1415 . 1419) (#("CStr" 0 4 (fontified nil)) . 1415) (1415 . 1419) (#("CStr (use std::ffi::CStr)" 0 25 (fontified nil)) . -1415) (1415 . 1440) (#("CStr" 0 4 (face font-lock-type-face fontified t)) . -1415) (undo-tree-id9232 . -4) (undo-tree-id9233 . -4) (undo-tree-id9234 . -1) (undo-tree-id9235 . -1) (undo-tree-id9236 . -1) (undo-tree-id9237 . -1) (undo-tree-id9238 . -1) (undo-tree-id9239 . -1) (undo-tree-id9240 . -2) (undo-tree-id9241 . -2) (undo-tree-id9242 . -2) (undo-tree-id9243 . -2) (undo-tree-id9244 . -3) (undo-tree-id9245 . -3) (undo-tree-id9246 . -4) (undo-tree-id9247 . -4) (undo-tree-id9248 . -4) (undo-tree-id9249 . -4) (undo-tree-id9250 . -4) (undo-tree-id9251 . -4) (undo-tree-id9252 . -4) (undo-tree-id9253 . -4) 1419) nil (26040 49020 42817 199000) 0 nil])
([nil nil ((1432 . 1434)) nil (26040 49020 42798 558000) 0 nil])
([nil nil ((1434 . 1435)) nil (26040 49020 42797 926000) 0 nil])
([nil nil ((1435 . 1438)) nil (26040 49020 42797 366000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1443 1446 nil nil nil nil #s(yas--exit 1447 nil))) #s(yas--exit 1447 nil) 70 nil #s(yas--field 1 1443 1446 nil nil nil nil #s(yas--exit 1447 nil)) nil nil)) (1434 . 1447) (#("from_ptr(${1:ptr})$0" 0 20 (fontified nil)) . 1434) (1434 . 1454) (#("from" 0 4 (fontified nil)) . 1434) (1434 . 1438) (#("from_ptr(…)" 0 11 (fontified nil)) . -1434) (1434 . 1445) (#("from" 0 4 (fontified t)) . -1434) (undo-tree-id9219 . -4) (undo-tree-id9220 . -1) (undo-tree-id9221 . -1) (undo-tree-id9222 . -2) (undo-tree-id9223 . -2) (undo-tree-id9224 . -3) (undo-tree-id9225 . -3) (undo-tree-id9226 . -4) (undo-tree-id9227 . -4) (undo-tree-id9228 . -4) (undo-tree-id9229 . -4) 1438) nil (26040 49020 42795 594000) 0 nil])
([nil nil ((apply yas--snippet-revive 1434 1447 #s(yas--snippet nil (#s(yas--field 1 1443 1446 nil nil nil nil #s(yas--exit 1447 nil))) #s(yas--exit 1447 nil) 70 nil #s(yas--field 1 1443 1446 nil nil nil nil #s(yas--exit 1447 nil)) nil nil))) nil (26040 49020 42786 397000) 0 nil])
([nil nil ((#("p" 0 1 (face font-lock-constant-face fontified t)) . -1443) (undo-tree-id9122 . -1) (undo-tree-id9123 . -1) (undo-tree-id9124 . -1) (undo-tree-id9125 . -1) (undo-tree-id9126 . -1) (undo-tree-id9127 . -1) (undo-tree-id9128 . -1) (undo-tree-id9129 . -1) (undo-tree-id9130 . -1) (undo-tree-id9131 . -1) (undo-tree-id9132 . -1) (undo-tree-id9133 . -1) (undo-tree-id9134 . -1) (undo-tree-id9135 . -1) (undo-tree-id9136 . -1) (undo-tree-id9137 . -1) (undo-tree-id9138 . -1) (undo-tree-id9139 . -1) (undo-tree-id9140 . -1) (undo-tree-id9141 . -1) (undo-tree-id9142 . -1) (undo-tree-id9143 . -1) (undo-tree-id9144 . -1) (undo-tree-id9145 . -1) (undo-tree-id9146 . -1) (undo-tree-id9147 . -1) (undo-tree-id9148 . -1) (undo-tree-id9149 . -1) (undo-tree-id9150 . -1) (#("t" 0 1 (face font-lock-constant-face fontified t)) . -1444) (undo-tree-id9151 . -1) (undo-tree-id9152 . -1) (undo-tree-id9153 . -1) (undo-tree-id9154 . -1) (undo-tree-id9155 . -1) (undo-tree-id9156 . -1) (undo-tree-id9157 . -1) (undo-tree-id9158 . -1) (undo-tree-id9159 . -1) (undo-tree-id9160 . -1) (undo-tree-id9161 . -1) (undo-tree-id9162 . -1) (undo-tree-id9163 . -1) (undo-tree-id9164 . -1) (undo-tree-id9165 . -1) (undo-tree-id9166 . -1) (undo-tree-id9167 . -1) (undo-tree-id9168 . -1) (undo-tree-id9169 . -1) (undo-tree-id9170 . -1) (undo-tree-id9171 . -1) (undo-tree-id9172 . -1) (undo-tree-id9173 . -1) (undo-tree-id9174 . -1) (#("r" 0 1 (face font-lock-constant-face fontified t)) . -1445) (undo-tree-id9175 . -1) (undo-tree-id9176 . -1) (undo-tree-id9177 . -1) (undo-tree-id9178 . -1) (undo-tree-id9179 . -1) (undo-tree-id9180 . -1) (undo-tree-id9181 . -1) (undo-tree-id9182 . -1) (undo-tree-id9183 . -1) (undo-tree-id9184 . -1) (undo-tree-id9185 . -1) (undo-tree-id9186 . -1) (undo-tree-id9187 . -1) (undo-tree-id9188 . -1) (undo-tree-id9189 . -1) (undo-tree-id9190 . -1) (undo-tree-id9191 . -1) (undo-tree-id9192 . -1) (undo-tree-id9193 . -1) (undo-tree-id9194 . -1) (undo-tree-id9195 . -1) (undo-tree-id9196 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -1446) (undo-tree-id9197 . -1) (undo-tree-id9198 . -1) (undo-tree-id9199 . -1) (undo-tree-id9200 . -1) (undo-tree-id9201 . -1) (undo-tree-id9202 . -1) (undo-tree-id9203 . -1) (undo-tree-id9204 . -1) (undo-tree-id9205 . -1) (undo-tree-id9206 . -1) (undo-tree-id9207 . -1) (undo-tree-id9208 . -1) (undo-tree-id9209 . -1) (undo-tree-id9210 . -1) (undo-tree-id9211 . -1) (undo-tree-id9212 . -1) (undo-tree-id9213 . -1) (#(" " 0 1 (fontified t)) . -1447) (undo-tree-id9214 . -1) (undo-tree-id9215 . -1) (undo-tree-id9216 . -1) (undo-tree-id9217 . -1) (undo-tree-id9218 . -1) 1448) nil (26040 49020 42781 789000) 0 nil])
([nil nil ((1473 . 1474)) nil (26040 49020 42506 17000) 0 nil])
([nil nil ((1474 . 1477)) nil (26040 49020 42505 257000) 0 nil])
([nil nil ((apply yas--snippet-revive 1475 1483 #s(yas--snippet nil nil #s(yas--exit 1483 nil) 71 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1483 nil) 71 nil nil nil nil)) (1475 . 1483) (#("to_str()$0" 0 10 (fontified nil)) . 1475) (1475 . 1485) (#("to" 0 2 (fontified nil)) . 1475) (1475 . 1477) (#("to_str()" 0 8 (fontified nil)) . -1475) (1475 . 1483) (#("to" 0 2 (fontified t)) . -1475) (undo-tree-id9115 . -2) (undo-tree-id9116 . -1) (undo-tree-id9117 . -1) (undo-tree-id9118 . -2) (undo-tree-id9119 . -2) (undo-tree-id9120 . -2) (undo-tree-id9121 . -2) 1477) nil (26040 49020 42503 82000) 0 nil])
([nil nil ((#(":" 0 1 (face rust-string-interpolation fontified t)) . -1404) (undo-tree-id9109 . -1) (undo-tree-id9110 . -1) (undo-tree-id9111 . -1) (undo-tree-id9112 . -1) (#("?" 0 1 (face rust-string-interpolation fontified t)) . -1405) (undo-tree-id9113 . -1) (undo-tree-id9114 . -1) 1406) nil (26040 49020 42492 151000) 0 nil])
([nil nil ((1404 . 1406) (t 26040 49020 63277 175000)) nil (26040 49025 445441 249000) 0 nil])
([nil nil ((#(":" 0 1 (face rust-string-interpolation fontified t)) . -1404) (undo-tree-id9305 . -1) (undo-tree-id9306 . -1) (undo-tree-id9307 . -1) (undo-tree-id9308 . -1) (undo-tree-id9309 . -1) (undo-tree-id9310 . -1) (undo-tree-id9311 . -1) (undo-tree-id9312 . -1) (undo-tree-id9313 . -1) (undo-tree-id9314 . -1) (undo-tree-id9315 . -1) (undo-tree-id9316 . -1) (undo-tree-id9317 . -1) (undo-tree-id9318 . -1) (undo-tree-id9319 . -1) (undo-tree-id9320 . -1) (undo-tree-id9321 . -1) (undo-tree-id9322 . -1) (undo-tree-id9323 . -1) (undo-tree-id9324 . -1) (undo-tree-id9325 . -1) (undo-tree-id9326 . -1) (undo-tree-id9327 . -1) (#("?" 0 1 (face rust-string-interpolation fontified t)) . -1405) (undo-tree-id9328 . -1) (undo-tree-id9329 . -1) (undo-tree-id9330 . -1) (undo-tree-id9331 . -1) (undo-tree-id9332 . -1) (undo-tree-id9333 . -1) (undo-tree-id9334 . -1) (undo-tree-id9335 . -1) (undo-tree-id9336 . -1) (undo-tree-id9337 . -1) (undo-tree-id9338 . -1) (undo-tree-id9339 . -1) (undo-tree-id9340 . -1) (undo-tree-id9341 . -1) (undo-tree-id9342 . -1) (undo-tree-id9343 . -1) (undo-tree-id9344 . -1) (undo-tree-id9345 . -1) (undo-tree-id9346 . -1) (undo-tree-id9347 . -1) (undo-tree-id9348 . -1) 1406 (t 26040 49025 506610 843000)) nil (26040 49053 896088 515000) 0 nil])
([nil nil ((1481 . 1483) (t 26040 49053 916612 586000)) nil (26040 49062 261075 857000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -1481) (undo-tree-id9355 . -1) (undo-tree-id9356 . -1) (undo-tree-id9357 . -1) (undo-tree-id9358 . -1) (undo-tree-id9359 . -1) (undo-tree-id9360 . -1) (undo-tree-id9361 . -1) (undo-tree-id9362 . -1) (#("." 0 1 (fontified t)) . -1482) (undo-tree-id9363 . -1) (undo-tree-id9364 . -1) (undo-tree-id9365 . -1) (undo-tree-id9366 . -1) 1483) nil (26040 49062 261074 263000) 0 nil])
([nil nil ((1481 . 1483)) nil (26040 49062 261064 159000) 0 nil])
([nil nil ((apply yas--snippet-revive 1482 1490 #s(yas--snippet nil nil #s(yas--exit 1490 nil) 72 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1490 nil) 72 nil nil nil nil)) (1482 . 1490) (#("unwrap()$0" 0 10 (fontified nil)) . 1482) (1482 . 1492) (#("u" 0 1 (fontified nil)) . 1482) (1482 . 1483) (#("unwrap()" 0 8 (fontified nil)) . -1482) (1482 . 1490) (#("u" 0 1 (fontified t)) . -1482) (undo-tree-id9349 . -1) (undo-tree-id9350 . -1) (undo-tree-id9351 . -1) (undo-tree-id9352 . -1) (undo-tree-id9353 . -1) (undo-tree-id9354 . -1) 1483) nil (26040 49062 261059 807000) 0 nil])
([nil nil ((20 . 40) ("c_void, " . -30) ("}" . -45) (48 . 52) ("ff" . 48) (51 . 55) ("::CStr" . -51) (undo-tree-id9499 . -6) 57 (540 . 541) (541 . 542) (#(" " 0 1 (fontified t)) . -573) (#("
" 0 1 (fontified t)) . -576) (undo-tree-id9500 . -1) (642 . 651) (651 . 660) (660 . 669) (669 . 678) (983 . 996) (994 . 1006) (1034 . 1046) (1049 . 1050) (1050 . 1051) (1073 . 1084) (1074 . 1075) (1078 . 1088) (1394 . 1411) (1425 . 1441) (1472 . 1493) (1481 . 1502) (1491 . 1503) (1492 . 1496) (1496 . 1509) 1472 (#("        " 0 8 (fontified t)) . 1632) (#(" 
    " 0 1 (fontified t) 1 2 (fontified t) 2 6 (fontified t)) . 1742) 1402 (t 26040 49062 279946 434000)) nil (26040 49112 309033 699000) 0 nil])
([nil nil ((#(":" 0 1 (face font-lock-string-face fontified t)) . -1541) (undo-tree-id9421 . -1) (undo-tree-id9422 . -1) (undo-tree-id9423 . -1) (undo-tree-id9424 . -1) (undo-tree-id9425 . -1) (undo-tree-id9426 . -1) (undo-tree-id9427 . -1) (undo-tree-id9428 . -1) (undo-tree-id9429 . -1) (undo-tree-id9430 . -1) (undo-tree-id9431 . -1) (undo-tree-id9432 . -1) (undo-tree-id9433 . -1) (undo-tree-id9434 . -1) (undo-tree-id9435 . -1) (undo-tree-id9436 . -1) (undo-tree-id9437 . -1) (undo-tree-id9438 . -1) (undo-tree-id9439 . -1) (undo-tree-id9440 . -1) (undo-tree-id9441 . -1) (undo-tree-id9442 . -1) (undo-tree-id9443 . -1) (undo-tree-id9444 . -1) (undo-tree-id9445 . -1) (undo-tree-id9446 . -1) (undo-tree-id9447 . -1) (undo-tree-id9448 . -1) (undo-tree-id9449 . -1) (undo-tree-id9450 . -1) (undo-tree-id9451 . -1) (undo-tree-id9452 . -1) (undo-tree-id9453 . -1) (undo-tree-id9454 . -1) (undo-tree-id9455 . -1) (undo-tree-id9456 . -1) (undo-tree-id9457 . -1) (undo-tree-id9458 . -1) (undo-tree-id9459 . -1) (undo-tree-id9460 . -1) (#("?" 0 1 (face font-lock-string-face fontified t)) . -1542) (undo-tree-id9461 . -1) (undo-tree-id9462 . -1) (undo-tree-id9463 . -1) (undo-tree-id9464 . -1) (undo-tree-id9465 . -1) (undo-tree-id9466 . -1) (undo-tree-id9467 . -1) (undo-tree-id9468 . -1) (undo-tree-id9469 . -1) (undo-tree-id9470 . -1) (undo-tree-id9471 . -1) (undo-tree-id9472 . -1) (undo-tree-id9473 . -1) (undo-tree-id9474 . -1) (undo-tree-id9475 . -1) (undo-tree-id9476 . -1) (undo-tree-id9477 . -1) (undo-tree-id9478 . -1) (undo-tree-id9479 . -1) (undo-tree-id9480 . -1) (undo-tree-id9481 . -1) (undo-tree-id9482 . -1) (undo-tree-id9483 . -1) (undo-tree-id9484 . -1) (undo-tree-id9485 . -1) (undo-tree-id9486 . -1) (undo-tree-id9487 . -1) (undo-tree-id9488 . -1) (undo-tree-id9489 . -1) (undo-tree-id9490 . -1) (undo-tree-id9491 . -1) (undo-tree-id9492 . -1) (undo-tree-id9493 . -1) (undo-tree-id9494 . -1) (undo-tree-id9495 . -1) (undo-tree-id9496 . -1) (undo-tree-id9497 . -1) (undo-tree-id9498 . -1) 1543) nil (26040 49112 309024 256000) 0 nil])
([nil nil ((#("data" 0 4 (fontified t)) . -1689) (undo-tree-id9403 . -4) (undo-tree-id9404 . -4) (undo-tree-id9405 . -4) (undo-tree-id9406 . -4) (undo-tree-id9407 . -4) (undo-tree-id9408 . -4) (undo-tree-id9409 . -4) (undo-tree-id9410 . -4) (undo-tree-id9411 . -4) (undo-tree-id9412 . -4) (undo-tree-id9413 . -4) (undo-tree-id9414 . -4) (undo-tree-id9415 . -4) (undo-tree-id9416 . -4) (undo-tree-id9417 . -4) (undo-tree-id9418 . -4) (undo-tree-id9419 . -4) (undo-tree-id9420 . -4) 1693) nil (26040 49112 308966 710000) 0 nil])
([nil nil ((1689 . 1690)) nil (26040 49112 308452 104000) 0 nil])
([nil nil ((#("S" 0 1 (face font-lock-type-face fontified t)) . -1689) (undo-tree-id9400 . -1) (undo-tree-id9401 . -1) (undo-tree-id9402 . -1) 1690) nil (26040 49112 308451 158000) 0 nil])
([nil nil ((1689 . 1690)) nil (26040 49112 308448 77000) 0 nil])
([nil nil ((1689 . 1693) (#("C" 0 1 (fontified nil)) . 1689) (1689 . 1690) (#("CStr" 0 4 (fontified nil)) . -1689) (1689 . 1693) (#("C" 0 1 (face font-lock-type-face fontified t)) . -1689) (undo-tree-id9395 . -1) (undo-tree-id9396 . -1) (undo-tree-id9397 . -1) (undo-tree-id9398 . -1) (undo-tree-id9399 . -1) 1690) nil (26040 49112 308446 775000) 0 nil])
([nil nil ((1693 . 1696)) nil (26040 49112 308442 30000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1704 1708 nil nil nil t #s(yas--exit 1709 nil))) #s(yas--exit 1709 nil) 73 nil #s(yas--field 1 1704 1708 nil nil nil t #s(yas--exit 1709 nil)) nil nil)) (1695 . 1708) (#("from_ptr(${1:ptr})$0" 0 20 (fontified nil)) . 1695) (1695 . 1715) (#("f" 0 1 (fontified nil)) . 1695) (1695 . 1696) (#("from_ptr(…)" 0 11 (fontified nil)) . -1695) (1695 . 1706) (#("f" 0 1 (fontified t)) . -1695) (undo-tree-id9390 . -1) (undo-tree-id9391 . -1) (undo-tree-id9392 . -1) (undo-tree-id9393 . -1) (undo-tree-id9394 . -1) 1696) nil (26040 49112 308440 704000) 0 nil])
([nil nil ((#("ptr" 0 3 (fontified nil)) . 1705) (undo-tree-id9389 . -3) (1704 . 1705)) nil (26040 49112 308435 503000) 0 nil])
([nil nil ((1704 . 1708) (#("d" 0 1 (fontified nil)) . 1704) (undo-tree-id9379 . -1) (1704 . 1705) (#("data" 0 4 (fontified nil)) . -1704) (undo-tree-id9380 . -4) (1704 . 1708) (#("d" 0 1 (fontified t)) . -1704) (undo-tree-id9381 . -1) (undo-tree-id9382 . -1) (undo-tree-id9383 . -1) (undo-tree-id9384 . -1) (undo-tree-id9385 . -1) (undo-tree-id9386 . -1) (undo-tree-id9387 . -1) (undo-tree-id9388 . -1) 1705) nil (26040 49112 308433 64000) 0 nil])
([nil nil ((apply yas--snippet-revive 1695 1709 #s(yas--snippet nil (#s(yas--field 1 1704 1708 nil nil nil t #s(yas--exit 1709 nil))) #s(yas--exit 1709 nil) 73 nil #s(yas--field 1 1704 1708 nil nil nil t #s(yas--exit 1709 nil)) nil nil))) nil (26040 49112 308424 676000) 0 nil])
([nil nil ((1541 . 1543)) nil (26040 49112 308424 59000) 0 nil])
([nil nil ((#(">" 0 1 (face font-lock-string-face syntax-table (1) fontified t)) . -1542) (undo-tree-id9372 . -1) (undo-tree-id9373 . -1) (undo-tree-id9374 . -1) (undo-tree-id9375 . -1) (undo-tree-id9376 . -1) (undo-tree-id9377 . -1) (undo-tree-id9378 . -1) 1543) nil (26040 49112 308422 888000) 0 nil])
([nil nil ((1542 . 1543)) nil (26040 49112 308416 119000) 0 nil])
([nil nil ((1711 . 1713)) nil (26040 49112 308414 725000) 0 nil])
([nil nil ((apply yas--snippet-revive 1712 1720 #s(yas--snippet nil nil #s(yas--exit 1720 nil) 74 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1720 nil) 74 nil nil nil nil)) (1712 . 1720) (#("to_str()$0" 0 10 (fontified nil)) . 1712) (1712 . 1722) (#("t" 0 1 (fontified nil)) . 1712) (1712 . 1713) (#("to_str()" 0 8 (fontified nil)) . -1712) (1712 . 1720) (#("t" 0 1 (fontified t)) . -1712) (undo-tree-id9367 . -1) (undo-tree-id9368 . -1) (undo-tree-id9369 . -1) (undo-tree-id9370 . -1) (undo-tree-id9371 . -1) 1713) nil (26040 49112 308410 504000) 0 nil])
([nil nil ((#("loop {" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-3-face) fontified t)) . -1359) (undo-tree-id9579 . -5) (undo-tree-id9580 . -6) (undo-tree-id9581 . -5) (undo-tree-id9582 . -5) (undo-tree-id9583 . -5) (undo-tree-id9584 . -5) (undo-tree-id9585 . -5) (undo-tree-id9586 . -5) (undo-tree-id9587 . -5) (undo-tree-id9588 . -5) (undo-tree-id9589 . -5) (undo-tree-id9590 . -5) (undo-tree-id9591 . -5) (undo-tree-id9592 . -5) (undo-tree-id9593 . -5) (undo-tree-id9594 . -5) (undo-tree-id9595 . -5) (undo-tree-id9596 . -5) (undo-tree-id9597 . -5) (undo-tree-id9598 . -5) (undo-tree-id9599 . -5) (undo-tree-id9600 . -5) (undo-tree-id9601 . -5) (undo-tree-id9602 . -5) (undo-tree-id9603 . -5) (undo-tree-id9604 . -5) (undo-tree-id9605 . -5) (undo-tree-id9606 . -6) (undo-tree-id9607 . -6) (undo-tree-id9608 . -6) (undo-tree-id9609 . -6) (undo-tree-id9610 . -6) 1365 (t 26040 49112 329949 506000)) nil (26040 49350 353799 250000) 0 nil])
([nil nil ((1359 . 1366)) nil (26040 49350 353777 423000) 0 nil])
([nil nil ((1365 . 1371) (#("s" 0 1 (fontified nil)) . 1365) (1365 . 1366) (#("symbol" 0 6 (fontified nil)) . -1365) (1365 . 1371) (#("s" 0 1 (fontified t)) . -1365) (undo-tree-id9573 . -1) (undo-tree-id9574 . -1) (undo-tree-id9575 . -1) (undo-tree-id9576 . -1) (undo-tree-id9577 . -1) (undo-tree-id9578 . -1) 1366) nil (26040 49350 353776 271000) 0 nil])
([nil nil ((1371 . 1373)) nil (26040 49350 353771 197000) 0 nil])
([nil nil ((apply yas--snippet-revive 1372 1381 #s(yas--snippet nil nil #s(yas--exit 1381 nil) 75 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1381 nil) 75 nil nil nil nil)) (1372 . 1381) (#("is_null()$0" 0 11 (fontified nil)) . 1372) (1372 . 1383) (#("i" 0 1 (fontified nil)) . 1372) (1372 . 1373) (#("is_null()" 0 9 (fontified nil)) . -1372) (1372 . 1381) (#("i" 0 1 (fontified t)) . -1372) (undo-tree-id9566 . -1) (undo-tree-id9567 . -1) (undo-tree-id9568 . -1) (undo-tree-id9569 . -1) (undo-tree-id9570 . -1) (undo-tree-id9571 . -1) (undo-tree-id9572 . -1) 1373) nil (26040 49350 353769 610000) 0 nil])
([nil nil ((1365 . 1366)) nil (26040 49350 353279 436000) 0 nil])
([nil nil ((1382 . 1384)) nil (26040 49350 353278 861000) 0 nil])
([nil nil ((#("if symbol.is_null() {" 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t) 3 10 (fontified t) 10 17 (fontified t) 17 18 (face (rainbow-delimiters-depth-4-face) fontified t) 18 19 (face (rainbow-delimiters-depth-4-face) fontified t) 19 20 (fontified t) 20 21 (face (rainbow-delimiters-depth-4-face) fontified t)) . 1819) (undo-tree-id9559 . -21) (undo-tree-id9560 . -21) (undo-tree-id9561 . -21) (undo-tree-id9562 . -21) (undo-tree-id9563 . -21) (undo-tree-id9564 . -21) (undo-tree-id9565 . -21)) nil (26040 49350 353277 909000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1819) (undo-tree-id9558 . -1)) nil (26040 49350 353273 30000) 0 nil])
([nil nil ((#("                break;" 0 16 (fontified t) 16 21 (face font-lock-keyword-face fontified t) 21 22 (fontified t)) . 1819) (undo-tree-id9545 . -22) (undo-tree-id9546 . -22) (undo-tree-id9547 . -22) (undo-tree-id9548 . -22) (undo-tree-id9549 . -22) (undo-tree-id9550 . -22) (undo-tree-id9551 . -22) (undo-tree-id9552 . -22) (undo-tree-id9553 . -22) (undo-tree-id9554 . -22) (undo-tree-id9555 . -22) (undo-tree-id9556 . -22) (undo-tree-id9557 . -22)) nil (26040 49350 353271 223000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1819) (undo-tree-id9544 . -1)) nil (26040 49350 353261 620000) 0 nil])
([nil nil ((#("            }" 0 12 (fontified t) 12 13 (face (rainbow-delimiters-depth-3-face) fontified t)) . 1819) (undo-tree-id9543 . -13)) nil (26040 49350 353259 874000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1819) (undo-tree-id9542 . -1)) nil (26040 49350 353257 612000) 0 nil])
([nil nil ((#("            " 0 4 (fontified t) 4 12 (fontified t)) . -1815) (undo-tree-id9501 . -4) (undo-tree-id9502 . -4) (undo-tree-id9503 . -4) (undo-tree-id9504 . -4) (undo-tree-id9505 . -4) (undo-tree-id9506 . -4) (undo-tree-id9507 . -4) (undo-tree-id9508 . -4) (undo-tree-id9509 . -4) (undo-tree-id9510 . -4) (undo-tree-id9511 . -4) (undo-tree-id9512 . -4) (undo-tree-id9513 . -4) (undo-tree-id9514 . -4) (undo-tree-id9515 . -4) (undo-tree-id9516 . -4) (undo-tree-id9517 . -4) (undo-tree-id9518 . -4) (undo-tree-id9519 . -4) (undo-tree-id9520 . -4) (undo-tree-id9521 . -4) (undo-tree-id9522 . -4) (undo-tree-id9523 . -4) (undo-tree-id9524 . -4) (undo-tree-id9525 . -4) (undo-tree-id9526 . -4) (undo-tree-id9527 . -4) (undo-tree-id9528 . -4) (undo-tree-id9529 . -4) (undo-tree-id9530 . -4) (undo-tree-id9531 . -4) (undo-tree-id9532 . -4) (undo-tree-id9533 . -4) (undo-tree-id9534 . -4) (undo-tree-id9535 . -4) (undo-tree-id9536 . -4) (undo-tree-id9537 . -4) (undo-tree-id9538 . -4) (undo-tree-id9539 . -4) (undo-tree-id9540 . -4) (undo-tree-id9541 . -4) 1819) nil (26040 49350 353251 752000) 0 nil])
([nil nil ((#("        " 0 8 (fontified nil)) . 1351) (1351 . 1359) (1351 . 1352) (t 26040 49350 376630 765000)) nil (26040 49355 425279 734000) 0 nil])
([nil nil ((#("!" 0 1 (fontified t)) . -1366) (undo-tree-id9681 . -1) (undo-tree-id9682 . -1) (undo-tree-id9683 . -1) (undo-tree-id9684 . -1) (undo-tree-id9685 . -1) (undo-tree-id9686 . -1) (undo-tree-id9687 . -1) (undo-tree-id9688 . -1) (undo-tree-id9689 . -1) 1367 (t 26040 49355 446631 76000)) nil (26040 49395 177619 389000) 0 nil])
([nil nil ((1366 . 1370)) nil (26040 49395 177611 351000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -1366) (undo-tree-id9641 . -1) (undo-tree-id9642 . -1) (undo-tree-id9643 . -1) (undo-tree-id9644 . -1) (undo-tree-id9645 . -1) (undo-tree-id9646 . -1) (undo-tree-id9647 . -1) (undo-tree-id9648 . -1) (undo-tree-id9649 . -1) (undo-tree-id9650 . -1) (undo-tree-id9651 . -1) (undo-tree-id9652 . -1) (undo-tree-id9653 . -1) (undo-tree-id9654 . -1) (undo-tree-id9655 . -1) (undo-tree-id9656 . -1) (#("e" 0 1 (fontified t)) . -1367) (undo-tree-id9657 . -1) (undo-tree-id9658 . -1) (undo-tree-id9659 . -1) (undo-tree-id9660 . -1) (undo-tree-id9661 . -1) (undo-tree-id9662 . -1) (undo-tree-id9663 . -1) (undo-tree-id9664 . -1) (undo-tree-id9665 . -1) (undo-tree-id9666 . -1) (undo-tree-id9667 . -1) (undo-tree-id9668 . -1) (#("t" 0 1 (fontified t)) . -1368) (undo-tree-id9669 . -1) (undo-tree-id9670 . -1) (undo-tree-id9671 . -1) (undo-tree-id9672 . -1) (undo-tree-id9673 . -1) (undo-tree-id9674 . -1) (undo-tree-id9675 . -1) (undo-tree-id9676 . -1) (#(" " 0 1 (fontified t)) . -1369) (undo-tree-id9677 . -1) (undo-tree-id9678 . -1) (undo-tree-id9679 . -1) (undo-tree-id9680 . -1) 1370) nil (26040 49395 177608 877000) 0 nil])
([nil nil ((1366 . 1375)) nil (26040 49395 177579 843000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -1372) (undo-tree-id9611 . -1) (undo-tree-id9612 . -1) (undo-tree-id9613 . -1) (undo-tree-id9614 . -1) (undo-tree-id9615 . -1) (undo-tree-id9616 . -1) (undo-tree-id9617 . -1) (undo-tree-id9618 . -1) (undo-tree-id9619 . -1) (undo-tree-id9620 . -1) (undo-tree-id9621 . -1) (undo-tree-id9622 . -1) (undo-tree-id9623 . -1) (undo-tree-id9624 . -1) (undo-tree-id9625 . -1) (undo-tree-id9626 . -1) (#("s" 0 1 (fontified t)) . -1373) (undo-tree-id9627 . -1) (undo-tree-id9628 . -1) (undo-tree-id9629 . -1) (undo-tree-id9630 . -1) (undo-tree-id9631 . -1) (undo-tree-id9632 . -1) (undo-tree-id9633 . -1) (undo-tree-id9634 . -1) (undo-tree-id9635 . -1) (undo-tree-id9636 . -1) (#("e" 0 1 (fontified t)) . -1374) (undo-tree-id9637 . -1) (undo-tree-id9638 . -1) (undo-tree-id9639 . -1) (undo-tree-id9640 . -1) 1375) nil (26040 49395 177576 671000) 0 nil])
([nil nil ((1372 . 1378)) nil (26040 49395 177545 578000) 0 nil])
([nil nil ((#("false = " 0 5 (face font-lock-keyword-face fontified t) 5 8 (fontified t)) . -1370) (undo-tree-id9753 . -8) (undo-tree-id9754 . -8) (undo-tree-id9755 . -2) (undo-tree-id9756 . -2) (undo-tree-id9757 . -2) (undo-tree-id9758 . -2) (undo-tree-id9759 . -2) (undo-tree-id9760 . -2) (undo-tree-id9761 . -2) (undo-tree-id9762 . -2) (undo-tree-id9763 . -2) (undo-tree-id9764 . -2) (undo-tree-id9765 . -2) (undo-tree-id9766 . -2) (undo-tree-id9767 . -2) (undo-tree-id9768 . -2) (undo-tree-id9769 . -8) (undo-tree-id9770 . -8) (undo-tree-id9771 . -8) (undo-tree-id9772 . -8) (undo-tree-id9773 . -8) (undo-tree-id9774 . -8) (undo-tree-id9775 . -8) (undo-tree-id9776 . -8) (undo-tree-id9777 . -8) (undo-tree-id9778 . -8) (undo-tree-id9779 . -8) (undo-tree-id9780 . -8) (undo-tree-id9781 . -8) (undo-tree-id9782 . -8) (undo-tree-id9783 . -8) (undo-tree-id9784 . -8) (undo-tree-id9785 . -8) (undo-tree-id9786 . -8) (undo-tree-id9787 . -8) (undo-tree-id9788 . -5) (undo-tree-id9789 . -5) (undo-tree-id9790 . -5) (undo-tree-id9791 . -5) (undo-tree-id9792 . -5) (undo-tree-id9793 . -6) (undo-tree-id9794 . -7) (undo-tree-id9795 . -8) (undo-tree-id9796 . -8) (undo-tree-id9797 . -8) (undo-tree-id9798 . -8) (undo-tree-id9799 . -8) (undo-tree-id9800 . -8) (undo-tree-id9801 . -8) 1378 (t 26040 49395 199966 842000)) nil (26040 49408 821303 42000) 0 nil])
([nil nil ((#("let " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -1366) (undo-tree-id9701 . -4) (undo-tree-id9702 . -4) (undo-tree-id9703 . -4) (undo-tree-id9704 . -4) (undo-tree-id9705 . -4) (undo-tree-id9706 . -4) (undo-tree-id9707 . -4) (undo-tree-id9708 . -4) (undo-tree-id9709 . -4) (undo-tree-id9710 . -4) (undo-tree-id9711 . -4) (undo-tree-id9712 . -4) (undo-tree-id9713 . -4) (undo-tree-id9714 . -4) (undo-tree-id9715 . -4) (undo-tree-id9716 . -4) (undo-tree-id9717 . -4) (undo-tree-id9718 . -4) (undo-tree-id9719 . -4) (undo-tree-id9720 . -4) (undo-tree-id9721 . -4) (undo-tree-id9722 . -4) (undo-tree-id9723 . -4) (undo-tree-id9724 . -4) (undo-tree-id9725 . -4) (undo-tree-id9726 . -4) (undo-tree-id9727 . -4) (undo-tree-id9728 . -4) (undo-tree-id9729 . -4) (undo-tree-id9730 . -4) (undo-tree-id9731 . -4) (undo-tree-id9732 . -4) (undo-tree-id9733 . -4) (undo-tree-id9734 . -4) (undo-tree-id9735 . -4) (undo-tree-id9736 . -4) (undo-tree-id9737 . -4) (undo-tree-id9738 . -4) (undo-tree-id9739 . -4) (undo-tree-id9740 . -4) (undo-tree-id9741 . -4) (undo-tree-id9742 . -4) (undo-tree-id9743 . -4) (undo-tree-id9744 . -4) (undo-tree-id9745 . -4) (undo-tree-id9746 . -4) (undo-tree-id9747 . -4) (undo-tree-id9748 . -4) (undo-tree-id9749 . -4) (undo-tree-id9750 . -4) (undo-tree-id9751 . -4) (undo-tree-id9752 . -4) 1370) nil (26040 49408 821269 201000) 0 nil])
([nil nil ((1366 . 1367)) nil (26040 49408 821233 756000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . -1366) (undo-tree-id9690 . -1) (undo-tree-id9691 . -1) (undo-tree-id9692 . -1) (undo-tree-id9693 . -1) (undo-tree-id9694 . -1) (undo-tree-id9695 . -1) (undo-tree-id9696 . -1) (undo-tree-id9697 . -1) (undo-tree-id9698 . -1) (undo-tree-id9699 . -1) (undo-tree-id9700 . -1) 1367) nil (26040 49408 821231 576000) 0 nil])
([nil nil ((1366 . 1367)) nil (26040 49408 821212 829000) 0 nil])
([nil nil ((404 . 409) (t 26040 49408 843301 12000)) nil (26040 49526 627401 867000) 0 nil])
([nil nil ((409 . 412)) nil (26040 49526 627401 21000) 0 nil])
([nil nil ((apply yas--snippet-revive 409 418 #s(yas--snippet nil nil #s(yas--exit 417 nil) 76 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 417 nil) 76 nil nil nil nil)) (409 . 418) (#("assert!($0)" 0 11 (fontified nil)) . 409) (409 . 420) (#("ass" 0 3 (fontified nil)) . 409) (409 . 412) (#("assert!(…)" 0 10 (fontified nil)) . -409) (409 . 419) (#("ass" 0 3 (fontified t)) . -409) (undo-tree-id9837 . -3) (undo-tree-id9838 . -1) (undo-tree-id9839 . -1) (undo-tree-id9840 . -2) (undo-tree-id9841 . -2) (undo-tree-id9842 . -3) (undo-tree-id9843 . -3) (undo-tree-id9844 . -3) (undo-tree-id9845 . -3) 412) nil (26040 49526 627399 544000) 0 nil])
([nil nil ((417 . 418)) nil (26040 49526 627391 511000) 0 nil])
([nil nil ((417 . 423) (#("f" 0 1 (fontified nil)) . 417) (417 . 418) (#("format" 0 6 (fontified nil)) . -417) (417 . 423) (#("f" 0 1 (fontified t)) . -417) (undo-tree-id9833 . -1) (undo-tree-id9834 . -1) (undo-tree-id9835 . -1) (undo-tree-id9836 . -1) 418) nil (26040 49526 627390 275000) 0 nil])
([nil nil ((423 . 424)) nil (26040 49526 627386 91000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -423) (undo-tree-id9830 . -1) (undo-tree-id9831 . -1) (undo-tree-id9832 . -1) 424) nil (26040 49526 627385 209000) 0 nil])
([nil nil ((423 . 427)) nil (26040 49526 627382 190000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -426) (undo-tree-id9825 . -1) (undo-tree-id9826 . -1) (undo-tree-id9827 . -1) (undo-tree-id9828 . -1) (undo-tree-id9829 . -1) 427) nil (26040 49526 627381 353000) 0 nil])
([nil nil ((apply yas--snippet-revive 424 429 #s(yas--snippet nil nil #s(yas--exit 429 nil) 77 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 429 nil) 77 nil nil nil nil)) (424 . 429) (#("len()$0" 0 7 (fontified nil)) . 424) (424 . 431) (#("le" 0 2 (fontified nil)) . 424) (424 . 426) (#("len()" 0 5 (fontified nil)) . -424) (424 . 429) (#("le" 0 2 (fontified t)) . -424) (undo-tree-id9810 . -2) (undo-tree-id9811 . -1) (undo-tree-id9812 . -1) (undo-tree-id9813 . -1) (undo-tree-id9814 . -2) (undo-tree-id9815 . -2) (undo-tree-id9816 . -2) (undo-tree-id9817 . -2) (undo-tree-id9818 . -2) (undo-tree-id9819 . -2) (undo-tree-id9820 . -2) (undo-tree-id9821 . -2) (undo-tree-id9822 . -2) (undo-tree-id9823 . -2) (undo-tree-id9824 . -2) 426) nil (26040 49526 627375 975000) 0 nil])
([nil nil ((429 . 432)) nil (26040 49526 627362 219000) 0 nil])
([nil nil ((#("5" 0 1 (fontified t)) . -431) (undo-tree-id9802 . -1) (undo-tree-id9803 . -1) (undo-tree-id9804 . -1) (undo-tree-id9805 . -1) (undo-tree-id9806 . -1) (undo-tree-id9807 . -1) (undo-tree-id9808 . -1) (undo-tree-id9809 . -1) 432) nil (26040 49526 627359 372000) 0 nil])
([nil nil ((431 . 432)) nil (26040 49526 626858 469000) 0 nil])
([nil nil ((433 . 434) (t 26040 49526 649974 906000)) nil (26040 49528 496712 974000) 0 nil])
([nil nil ((945 . 946) (t 26040 49528 516641 684000)) nil (26040 49544 249343 995000) 0 nil])
([nil nil ((#("0" 0 1 (face font-lock-string-face fontified t)) . -945) (undo-tree-id9846 . -1) (undo-tree-id9847 . -1) (undo-tree-id9848 . -1) (undo-tree-id9849 . -1) (undo-tree-id9850 . -1) (undo-tree-id9851 . -1) (undo-tree-id9852 . -1) (undo-tree-id9853 . -1) (undo-tree-id9854 . -1) (undo-tree-id9855 . -1) (undo-tree-id9856 . -1) (undo-tree-id9857 . -1) (undo-tree-id9858 . -1) (undo-tree-id9859 . -1) (undo-tree-id9860 . -1) (undo-tree-id9861 . -1) (undo-tree-id9862 . -1) (undo-tree-id9863 . -1) (undo-tree-id9864 . -1) (undo-tree-id9865 . -1) (undo-tree-id9866 . -1) 946 (t 26040 49544 269975 987000)) nil (26040 49553 795676 136000) 0 nil])
([nil nil ((434 . 439) (t 26040 49553 849976 573000)) nil (26040 49564 746923 4000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -436) (undo-tree-id9893 . -1) (undo-tree-id9894 . -1) (undo-tree-id9895 . -1) (undo-tree-id9896 . -1) (undo-tree-id9897 . -1) (undo-tree-id9898 . -1) (undo-tree-id9899 . -1) (undo-tree-id9900 . -1) (undo-tree-id9901 . -1) (#(" " 0 1 (fontified t)) . -437) (undo-tree-id9902 . -1) (undo-tree-id9903 . -1) (undo-tree-id9904 . -1) (undo-tree-id9905 . -1) (undo-tree-id9906 . -1) (undo-tree-id9907 . -1) (undo-tree-id9908 . -1) (#(" " 0 1 (fontified t)) . -438) (undo-tree-id9909 . -1) (undo-tree-id9910 . -1) (undo-tree-id9911 . -1) (undo-tree-id9912 . -1) (undo-tree-id9913 . -1) 439) nil (26040 49564 746920 488000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -434) (undo-tree-id9867 . -1) (undo-tree-id9868 . 1) (undo-tree-id9869 . -1) (undo-tree-id9870 . -1) (undo-tree-id9871 . -1) (undo-tree-id9872 . -1) (undo-tree-id9873 . -1) (undo-tree-id9874 . -1) (undo-tree-id9875 . -1) (undo-tree-id9876 . -1) (undo-tree-id9877 . -1) (undo-tree-id9878 . -1) (undo-tree-id9879 . -1) (undo-tree-id9880 . -1) (undo-tree-id9881 . -1) (#(" " 0 1 (fontified t)) . -435) (undo-tree-id9882 . -1) (undo-tree-id9883 . -1) (undo-tree-id9884 . -1) (undo-tree-id9885 . -1) (undo-tree-id9886 . -1) (undo-tree-id9887 . -1) (undo-tree-id9888 . -1) (undo-tree-id9889 . -1) (undo-tree-id9890 . -1) (undo-tree-id9891 . -1) (undo-tree-id9892 . -1) 436) nil (26040 49564 746901 33000) 0 nil])
([nil nil ((1952 . 1956) (#("    " 0 4 (fontified nil)) . 1951) (undo-tree-id9995 . -4) (undo-tree-id9996 . -4) (undo-tree-id9997 . -4) (undo-tree-id9998 . -4) (1950 . 1956) (t 26040 49564 769977 244000)) nil (26040 63429 259265 876000) 0 nil])
([nil nil ((1956 . 1961)) nil (26040 63429 259262 93000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -1959) (undo-tree-id9971 . -1) (undo-tree-id9972 . -1) (undo-tree-id9973 . -1) (undo-tree-id9974 . -1) (undo-tree-id9975 . -1) (undo-tree-id9976 . -1) (undo-tree-id9977 . -1) (undo-tree-id9978 . -1) (undo-tree-id9979 . -1) (undo-tree-id9980 . -1) (undo-tree-id9981 . -1) (undo-tree-id9982 . -1) (undo-tree-id9983 . -1) (undo-tree-id9984 . -1) (#("a" 0 1 (fontified t)) . -1960) (undo-tree-id9985 . -1) (undo-tree-id9986 . -1) (undo-tree-id9987 . -1) (undo-tree-id9988 . -1) (undo-tree-id9989 . -1) (undo-tree-id9990 . -1) (undo-tree-id9991 . -1) (undo-tree-id9992 . -1) (undo-tree-id9993 . -1) (undo-tree-id9994 . -1) 1961) nil (26040 63429 259260 337000) 0 nil])
([nil nil ((1959 . 1960)) nil (26040 63429 259243 219000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -1959) (undo-tree-id9968 . -1) (undo-tree-id9969 . -1) (undo-tree-id9970 . -1) 1960) nil (26040 63429 259242 287000) 0 nil])
([nil nil ((1959 . 1960)) nil (26040 63429 259239 362000) 0 nil])
([nil nil ((apply yas--snippet-revive 1956 1962 #s(yas--snippet nil nil nil 78 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 78 nil nil nil nil)) (1956 . 1962) (#("unsafe" 0 6 (fontified nil)) . 1956) (1956 . 1962) (#("unsa" 0 4 (fontified nil)) . 1956) (1956 . 1960) (#("unsafe" 0 6 (fontified nil)) . -1956) (1956 . 1962) (#("unsa" 0 4 (fontified t)) . -1956) (undo-tree-id9936 . -4) (undo-tree-id9937 . -1) (undo-tree-id9938 . -1) (undo-tree-id9939 . -2) (undo-tree-id9940 . -2) (undo-tree-id9941 . -2) (undo-tree-id9942 . -2) (undo-tree-id9943 . -3) (undo-tree-id9944 . -3) (undo-tree-id9945 . -3) (undo-tree-id9946 . -3) (undo-tree-id9947 . -3) (undo-tree-id9948 . -3) (undo-tree-id9949 . -3) (undo-tree-id9950 . -3) (undo-tree-id9951 . -3) (undo-tree-id9952 . -3) (undo-tree-id9953 . -3) (undo-tree-id9954 . -3) (undo-tree-id9955 . -3) (undo-tree-id9956 . -3) (undo-tree-id9957 . -3) (undo-tree-id9958 . -3) (undo-tree-id9959 . -3) (undo-tree-id9960 . -3) (undo-tree-id9961 . -3) (undo-tree-id9962 . -3) (undo-tree-id9963 . -3) (undo-tree-id9964 . -4) (undo-tree-id9965 . -4) (undo-tree-id9966 . -4) (undo-tree-id9967 . -4) 1960) nil (26040 63429 259236 887000) 0 nil])
([nil nil ((1962 . 1965)) nil (26040 63429 259211 852000) 0 nil])
([nil nil ((1966 . 1970) (#("        " 0 8 (fontified nil)) . 1965) (1965 . 1973) (#("    " 0 4 (fontified nil)) . 1965) (undo-tree-id9932 . -4) (undo-tree-id9933 . -4) (undo-tree-id9934 . -4) (undo-tree-id9935 . -4) (1964 . 1970)) nil (26040 63429 259210 642000) 0 nil])
([nil nil ((1965 . 1973)) nil (26040 63429 259205 592000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -1949) (undo-tree-id9914 . -1) (undo-tree-id9915 . -1) (undo-tree-id9916 . -1) (undo-tree-id9917 . -1) (undo-tree-id9918 . -1) (undo-tree-id9919 . -1) (undo-tree-id9920 . -1) (undo-tree-id9921 . -1) (undo-tree-id9922 . -1) (undo-tree-id9923 . -1) (undo-tree-id9924 . -1) (undo-tree-id9925 . -1) (undo-tree-id9926 . -1) (undo-tree-id9927 . -1) (undo-tree-id9928 . -1) (undo-tree-id9929 . -1) (undo-tree-id9930 . -1) (undo-tree-id9931 . -1) 1950) nil (26040 63429 259200 994000) 0 nil])
([nil nil ((1972 . 1983) (t 26040 63429 314160 792000)) nil (26040 63512 647938 449000) 0 nil])
([nil nil ((1983 . 1994)) nil (26040 63512 647937 179000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -1993) (undo-tree-id10235 . -1) 1994) nil (26040 63512 647936 11000) 0 nil])
([nil nil ((1993 . 2002)) nil (26040 63512 647933 670000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2010 2011 nil nil nil t #s(yas--exit 2012 nil))) #s(yas--exit 2012 nil) 79 nil #s(yas--field 1 2010 2011 nil nil nil t #s(yas--exit 2012 nil)) nil nil)) (1988 . 2019) (#("zbar_processor_create(${1:threaded})$0" 0 38 (fontified nil)) . 1988) (1988 . 2026) (#("zbar_processor" 0 14 (fontified nil)) . 1988) (1988 . 2002) (#("zbar_processor_create(…)" 0 24 (fontified nil)) . -1988) (1988 . 2012) (#("zbar_processor" 0 14 (fontified t)) . -1988) (undo-tree-id10234 . -14) 2002) nil (26040 63512 647931 700000) 0 nil])
([nil nil ((#("threaded" 0 8 (fontified nil)) . 2011) (2010 . 2011)) nil (26040 63512 647927 449000) 0 nil])
([nil nil ((apply yas--snippet-revive 1988 2012 #s(yas--snippet nil (#s(yas--field 1 2010 2011 nil nil nil t #s(yas--exit 2012 nil))) #s(yas--exit 2012 nil) 79 nil #s(yas--field 1 2010 2011 nil nil nil t #s(yas--exit 2012 nil)) nil nil))) nil (26040 63512 647926 196000) 0 nil])
([nil nil ((2012 . 2013)) nil (26040 63512 647924 993000) 0 nil])
([nil nil ((2013 . 2022)) nil (26040 63512 647923 956000) 0 nil])
([nil nil ((2022 . 2023)) nil (26040 63512 647922 978000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -2022) (undo-tree-id10233 . -1) 2023) nil (26040 63512 647921 747000) 0 nil])
([nil nil ((2022 . 2040)) nil (26040 63512 647919 280000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2053 2057 nil nil nil t #s(yas--field 2 2059 2068 nil nil nil nil #s(yas--field 3 2070 2076 nil nil nil nil #s(yas--field 4 2078 2083 nil nil nil nil #s(yas--exit 2084 nil))))) #s(yas--field 2 2059 2068 nil nil nil nil #s(yas--field 3 2070 2076 nil nil nil nil #s(yas--field 4 2078 2083 nil nil nil nil #s(yas--exit 2084 nil)))) #s(yas--field 3 2070 2076 nil nil nil nil #s(yas--field 4 2078 2083 nil nil nil nil #s(yas--exit 2084 nil))) #s(yas--field 4 2078 2083 nil nil nil nil #s(yas--exit 2084 nil))) #s(yas--exit 2084 nil) 80 nil #s(yas--field 1 2053 2057 nil nil nil t #s(yas--field 2 2059 2068 nil nil nil nil #s(yas--field 3 2070 2076 nil nil nil nil #s(yas--field 4 2078 2083 nil nil nil nil #s(yas--exit 2084 nil))))) nil nil)) (2027 . 2089) (#("zbar_processor_set_config(${1:processor}, ${2:symbology}, ${3:config}, ${4:value})$0" 0 84 (fontified nil)) . 2027) (2027 . 2111) (#("processor_set" 0 13 (fontified nil)) . 2027) (2027 . 2040) (#("zbar_processor_set_config(…)" 0 28 (fontified nil)) . -2027) (2027 . 2055) (#("processor_set" 0 13 (fontified t)) . -2027) (undo-tree-id10220 . -13) (undo-tree-id10221 . -4) (undo-tree-id10222 . -5) (undo-tree-id10223 . -6) (undo-tree-id10224 . -7) (undo-tree-id10225 . -8) (undo-tree-id10226 . -9) (undo-tree-id10227 . -10) (undo-tree-id10228 . -11) (undo-tree-id10229 . -12) (undo-tree-id10230 . -13) (undo-tree-id10231 . -13) (undo-tree-id10232 . -13) 2040) nil (26040 63512 647916 687000) 0 nil])
([nil nil ((2054 . 2057) (#("processor" 0 9 (fontified nil)) . 2054) (undo-tree-id10219 . -9) (2053 . 2054)) nil (26040 63512 647870 28000) 0 nil])
([nil nil ((apply yas--snippet-revive 2027 2084 #s(yas--snippet nil (#s(yas--field 1 2053 2057 nil nil nil t #s(yas--field 2 2059 2068 nil nil nil nil #s(yas--field 3 2070 2076 nil nil nil nil #s(yas--field 4 2078 2083 nil nil nil nil #s(yas--exit 2084 nil))))) #s(yas--field 2 2059 2068 nil nil nil nil #s(yas--field 3 2070 2076 nil nil nil nil #s(yas--field 4 2078 2083 nil nil nil nil #s(yas--exit 2084 nil)))) #s(yas--field 3 2070 2076 nil nil nil nil #s(yas--field 4 2078 2083 nil nil nil nil #s(yas--exit 2084 nil))) #s(yas--field 4 2078 2083 nil nil nil nil #s(yas--exit 2084 nil))) #s(yas--exit 2084 nil) 80 nil #s(yas--field 1 2053 2057 nil nil nil t #s(yas--field 2 2059 2068 nil nil nil nil #s(yas--field 3 2070 2076 nil nil nil nil #s(yas--field 4 2078 2083 nil nil nil nil #s(yas--exit 2084 nil))))) nil nil))) nil (26040 63512 647867 504000) 0 nil])
([nil nil ((#("symbology" 0 9 (fontified t)) . -2059) (undo-tree-id10209 . -9) (undo-tree-id10210 . -9) (undo-tree-id10211 . -9) (undo-tree-id10212 . -9) (undo-tree-id10213 . -9) (undo-tree-id10214 . -9) (undo-tree-id10215 . -9) (undo-tree-id10216 . -9) (undo-tree-id10217 . -9) (undo-tree-id10218 . -9) 2068) nil (26040 63512 647865 883000) 0 nil])
([nil nil ((2059 . 2060)) nil (26040 63512 647854 132000) 0 nil])
([nil nil ((#("config" 0 6 (fontified t)) . -2062) (undo-tree-id10198 . -6) (undo-tree-id10199 . -6) (undo-tree-id10200 . -6) (undo-tree-id10201 . -6) (undo-tree-id10202 . -6) (undo-tree-id10203 . -6) (undo-tree-id10204 . -6) (undo-tree-id10205 . -6) (undo-tree-id10206 . -6) (undo-tree-id10207 . -6) (undo-tree-id10208 . -6) 2068) nil (26040 63512 647852 348000) 0 nil])
([nil nil ((2062 . 2065)) nil (26040 63512 647839 96000) 0 nil])
([nil nil ((#("C" 0 1 (face font-lock-type-face fontified t)) . -2062) (undo-tree-id10173 . -1) (undo-tree-id10174 . -1) (undo-tree-id10175 . -1) (undo-tree-id10176 . -1) (undo-tree-id10177 . -1) (undo-tree-id10178 . -1) (undo-tree-id10179 . -1) (undo-tree-id10180 . -1) (undo-tree-id10181 . -1) (undo-tree-id10182 . -1) (undo-tree-id10183 . -1) (undo-tree-id10184 . -1) (undo-tree-id10185 . -1) (#("F" 0 1 (face font-lock-type-face fontified t)) . -2063) (undo-tree-id10186 . -1) (undo-tree-id10187 . -1) (undo-tree-id10188 . -1) (undo-tree-id10189 . -1) (undo-tree-id10190 . -1) (undo-tree-id10191 . -1) (undo-tree-id10192 . -1) (undo-tree-id10193 . -1) (undo-tree-id10194 . -1) (#("G" 0 1 (face font-lock-type-face fontified t)) . -2064) (undo-tree-id10195 . -1) (undo-tree-id10196 . -1) (undo-tree-id10197 . -1) 2065) nil (26040 63512 647836 248000) 0 nil])
([nil nil ((2062 . 2074)) nil (26040 63512 647807 309000) 0 nil])
([nil nil ((2067 . 2096) (#("CFG_ENA" 0 7 (fontified nil)) . 2067) (2067 . 2074) (#("zbar_config_e_ZBAR_CFG_ENABLE" 0 29 (fontified nil)) . -2067) (2067 . 2096) (#("CFG_ENA" 0 7 (face font-lock-type-face fontified t)) . -2067) (undo-tree-id10161 . -7) (undo-tree-id10162 . -7) (undo-tree-id10163 . -1) (undo-tree-id10164 . -2) (undo-tree-id10165 . -3) (undo-tree-id10166 . -3) (undo-tree-id10167 . -4) (undo-tree-id10168 . -5) (undo-tree-id10169 . -6) (undo-tree-id10170 . -7) (undo-tree-id10171 . -7) (undo-tree-id10172 . -7) 2074) nil (26040 63512 647804 807000) 0 nil])
([nil nil ((#("value" 0 5 (fontified t)) . -2098) (undo-tree-id10151 . -5) (undo-tree-id10152 . -5) (undo-tree-id10153 . -5) (undo-tree-id10154 . -5) (undo-tree-id10155 . -5) (undo-tree-id10156 . -5) (undo-tree-id10157 . -5) (undo-tree-id10158 . -5) (undo-tree-id10159 . -5) (undo-tree-id10160 . -5) 2103) nil (26040 63512 647787 40000) 0 nil])
([nil nil ((2098 . 2099)) nil (26040 63512 649945 936000) 0 nil])
([nil nil ((2100 . 2101)) nil (26040 63570 130112 908000) 0 nil] [nil nil ((#("
fn zbar_fourcc(format: &str) -> c_ulong {
    assert!(format.len()==4);
    let mut fourcc: c_ulong = 0;
    if !format.is_empty() {
        for i in 0..4 {
            fourcc |= (format.as_bytes()[i] as c_ulong) << (i * 8);
        }
    }
    fourcc
}

fn main() {
    let image = ImageReader::open(\"qr_greetings.png\")
        .unwrap()
        .decode()
        .unwrap()
        .into_luma8();
    unsafe {
        let scanner = ffi::zbar_image_scanner_create();
        let zbar_image = ffi::zbar_image_create();
        ffi::zbar_image_set_format(zbar_image, zbar_fourcc(\"Y800\"));
        ffi::zbar_image_set_size(zbar_image, image.width(), image.height());
        ffi::zbar_image_set_data(
            zbar_image,
            image.as_raw().as_ptr() as *mut c_void,
            (image.width() * image.height()).into(),
            None,
        );
        let n = ffi::zbar_scan_image(scanner, zbar_image);
        println!(\"result: {}\", n);

        let mut symbol = ffi::zbar_image_first_symbol(zbar_image);

        while !symbol.is_null() {
            let typ = ffi::zbar_symbol_get_type(symbol);
            let data = ffi::zbar_symbol_get_data(symbol);
            println!(
                \"decoded {} symbol \\\"{:?}\\\"\\n\",
                CStr::from_ptr(ffi::zbar_get_symbol_name(typ))
                    .to_str()
                    .unwrap(),
                CStr::from_ptr(data).to_str()
            );
            symbol = ffi::zbar_symbol_next(symbol);
        }

        ffi::zbar_image_destroy(zbar_image);
        ffi::zbar_image_scanner_destroy(scanner);
    }

    unsafe {
        let proc = ffi::zbar_processor_create(1);
        ffi::zbar_processor_set_config(proc, 0, ffi::zbar_config_e_ZBAR_CFG_ENABLE, 1" 0 1 (face font-lock-comment-face fontified t) 1 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 15 (face font-lock-function-name-face fontified t) 15 16 (face (rainbow-delimiters-depth-1-face) fontified t) 16 22 (face font-lock-variable-name-face fontified t) 22 24 (fontified t) 24 25 (face rust-ampersand-face fontified t) 25 28 (face font-lock-type-face fontified t) 28 29 (face (rainbow-delimiters-depth-1-face) fontified t) 29 31 (fontified t) 31 32 (syntax-table (1) fontified t) 32 33 (fontified t) 33 41 (fontified t) 41 42 (face (rainbow-delimiters-depth-1-face) fontified t) 42 43 (fontified t) 43 47 (fontified t) 47 54 (face font-lock-preprocessor-face fontified t) 54 55 (face (rainbow-delimiters-depth-2-face) fontified t) 55 62 (fontified t) 62 65 (fontified t) 65 66 (face (rainbow-delimiters-depth-3-face) fontified t) 66 67 (face (rainbow-delimiters-depth-3-face) fontified t) 67 70 (fontified t) 70 71 (face (rainbow-delimiters-depth-2-face) fontified t) 71 72 (fontified t) 72 73 (fontified t) 73 77 (fontified t) 77 80 (face font-lock-keyword-face fontified t) 80 81 (fontified t) 81 84 (face font-lock-keyword-face fontified t) 84 85 (fontified t) 85 91 (face font-lock-variable-name-face fontified t) 91 93 (fontified t) 93 100 (fontified t) 100 106 (fontified t) 106 110 (fontified t) 110 112 (face font-lock-keyword-face fontified t) 112 113 (fontified t) 113 114 (fontified t) 114 121 (fontified t) 121 129 (fontified t) 129 130 (face (rainbow-delimiters-depth-2-face) fontified t) 130 131 (face (rainbow-delimiters-depth-2-face) fontified t) 131 132 (fontified t) 132 133 (face (rainbow-delimiters-depth-2-face) fontified t) 133 134 (fontified t) 134 142 (fontified t) 142 145 (face font-lock-keyword-face fontified t) 145 146 (fontified t) 146 147 (face font-lock-variable-name-face fontified t) 147 148 (fontified t) 148 150 (face font-lock-keyword-face fontified t) 150 156 (fontified t) 156 157 (face (rainbow-delimiters-depth-3-face) fontified t) 157 158 (fontified t) 158 170 (fontified t) 170 180 (fontified t) 180 181 (face (rainbow-delimiters-depth-4-face) fontified t) 181 188 (fontified t) 188 196 (fontified t) 196 197 (face (rainbow-delimiters-depth-5-face) fontified t) 197 198 (face (rainbow-delimiters-depth-5-face) fontified t) 198 199 (face (rainbow-delimiters-depth-5-face) fontified t) 199 200 (fontified t) 200 201 (face (rainbow-delimiters-depth-5-face) fontified t) 201 202 (fontified t) 202 204 (face font-lock-keyword-face fontified t) 204 205 (fontified t) 205 212 (fontified t) 212 213 (face (rainbow-delimiters-depth-4-face) fontified t) 213 214 (fontified t) 214 215 (fontified t syntax-table (1)) 215 216 (fontified t syntax-table (1)) 216 217 (fontified t) 217 218 (face (rainbow-delimiters-depth-4-face) fontified t) 218 219 (fontified t) 219 220 (fontified t) 220 221 (fontified t) 221 222 (fontified t) 222 223 (fontified t) 223 224 (face (rainbow-delimiters-depth-4-face) fontified t) 224 225 (fontified t) 225 226 (fontified t) 226 234 (fontified t) 234 235 (face (rainbow-delimiters-depth-3-face) fontified t) 235 236 (fontified t) 236 240 (fontified t) 240 241 (face (rainbow-delimiters-depth-2-face) fontified t) 241 242 (fontified t) 242 246 (fontified t) 246 252 (fontified t) 252 253 (fontified t) 253 254 (face (rainbow-delimiters-depth-1-face) fontified t) 254 255 (fontified t) 255 256 (fontified t) 256 258 (face font-lock-keyword-face fontified t) 258 259 (fontified t) 259 263 (face font-lock-function-name-face fontified t) 263 264 (face (rainbow-delimiters-depth-1-face) fontified t) 264 265 (face (rainbow-delimiters-depth-1-face) fontified t) 265 266 (fontified t) 266 267 (face (rainbow-delimiters-depth-1-face) fontified t) 267 268 (fontified t) 268 272 (fontified t) 272 275 (face font-lock-keyword-face fontified t) 275 276 (fontified t) 276 281 (face font-lock-variable-name-face fontified t) 281 284 (fontified t) 284 295 (face font-lock-type-face fontified t) 295 297 (fontified t) 297 301 (fontified t) 301 302 (face (rainbow-delimiters-depth-2-face) fontified t) 302 320 (face font-lock-string-face fontified t) 320 321 (face (rainbow-delimiters-depth-2-face) fontified t) 321 330 (fontified t) 330 331 (fontified t) 331 337 (fontified t) 337 338 (face (rainbow-delimiters-depth-2-face) fontified t) 338 339 (face (rainbow-delimiters-depth-2-face) fontified t) 339 348 (fontified t) 348 349 (fontified t) 349 355 (fontified t) 355 356 (face (rainbow-delimiters-depth-2-face) fontified t) 356 357 (face (rainbow-delimiters-depth-2-face) fontified t) 357 366 (fontified t) 366 367 (fontified t) 367 373 (fontified t) 373 374 (face (rainbow-delimiters-depth-2-face) fontified t) 374 375 (face (rainbow-delimiters-depth-2-face) fontified t) 375 384 (fontified t) 384 385 (fontified t) 385 395 (fontified t) 395 396 (face (rainbow-delimiters-depth-2-face) fontified t) 396 397 (face (rainbow-delimiters-depth-2-face) fontified t) 397 399 (fontified t) 399 403 (fontified t) 403 409 (face rust-unsafe fontified t) 409 410 (fontified t) 410 411 (face (rainbow-delimiters-depth-2-face) fontified t) 411 412 (fontified t) 412 420 (fontified t) 420 423 (face font-lock-keyword-face fontified t) 423 424 (fontified t) 424 431 (face font-lock-variable-name-face fontified t) 431 434 (fontified t) 434 437 (face font-lock-constant-face fontified t) 437 439 (fontified t) 439 464 (fontified t) 464 465 (face (rainbow-delimiters-depth-3-face) fontified t) 465 466 (face (rainbow-delimiters-depth-3-face) fontified t) 466 468 (fontified t) 468 476 (fontified t) 476 479 (face font-lock-keyword-face fontified t) 479 480 (fontified t) 480 490 (face font-lock-variable-name-face fontified t) 490 493 (fontified t) 493 496 (face font-lock-constant-face fontified t) 496 498 (fontified t) 498 515 (fontified t) 515 516 (face (rainbow-delimiters-depth-3-face) fontified t) 516 517 (face (rainbow-delimiters-depth-3-face) fontified t) 517 519 (fontified t) 519 527 (fontified t) 527 530 (face font-lock-constant-face fontified t) 530 532 (fontified t) 532 553 (fontified t) 553 554 (face (rainbow-delimiters-depth-3-face) fontified t) 554 564 (fontified t) 564 566 (fontified t) 566 577 (fontified t) 577 578 (face (rainbow-delimiters-depth-4-face) fontified t) 578 584 (face font-lock-string-face fontified t) 584 585 (face (rainbow-delimiters-depth-4-face) fontified t) 585 586 (face (rainbow-delimiters-depth-3-face) fontified t) 586 587 (fontified t) 587 588 (fontified t) 588 596 (fontified t) 596 599 (face font-lock-constant-face fontified t) 599 601 (fontified t) 601 620 (fontified t) 620 621 (face (rainbow-delimiters-depth-3-face) fontified t) 621 631 (fontified t) 631 633 (fontified t) 633 639 (fontified t) 639 644 (fontified t) 644 645 (face (rainbow-delimiters-depth-4-face) fontified t) 645 646 (face (rainbow-delimiters-depth-4-face) fontified t) 646 648 (fontified t) 648 654 (fontified t) 654 660 (fontified t) 660 661 (face (rainbow-delimiters-depth-4-face) fontified t) 661 662 (face (rainbow-delimiters-depth-4-face) fontified t) 662 663 (face (rainbow-delimiters-depth-3-face) fontified t) 663 665 (fontified t) 665 673 (fontified t) 673 676 (face font-lock-constant-face fontified t) 676 678 (fontified t) 678 697 (fontified t) 697 698 (face (rainbow-delimiters-depth-3-face) fontified t) 698 711 (fontified t) 711 716 (fontified t) 716 721 (fontified t) 721 722 (fontified t) 722 734 (fontified t) 734 735 (fontified t) 735 741 (fontified t) 741 747 (fontified t) 747 748 (face (rainbow-delimiters-depth-4-face) fontified t) 748 749 (face (rainbow-delimiters-depth-4-face) fontified t) 749 750 (fontified t) 750 756 (fontified t) 756 757 (face (rainbow-delimiters-depth-4-face) fontified t) 757 758 (face (rainbow-delimiters-depth-4-face) fontified t) 758 759 (fontified t) 759 761 (face font-lock-keyword-face fontified t) 761 763 (fontified t) 763 766 (face font-lock-keyword-face fontified t) 766 767 (fontified t) 767 773 (fontified t) 773 774 (fontified t) 774 786 (fontified t) 786 787 (fontified t) 787 788 (face (rainbow-delimiters-depth-4-face) fontified t) 788 794 (fontified t) 794 799 (fontified t) 799 800 (face (rainbow-delimiters-depth-5-face) fontified t) 800 801 (face (rainbow-delimiters-depth-5-face) fontified t) 801 802 (fontified t) 802 803 (fontified t) 803 804 (fontified t) 804 810 (fontified t) 810 816 (fontified t) 816 817 (face (rainbow-delimiters-depth-5-face) fontified t) 817 818 (face (rainbow-delimiters-depth-5-face) fontified t) 818 819 (face (rainbow-delimiters-depth-4-face) fontified t) 819 820 (fontified t) 820 824 (fontified t) 824 825 (face (rainbow-delimiters-depth-4-face) fontified t) 825 826 (face (rainbow-delimiters-depth-4-face) fontified t) 826 827 (fontified t) 827 838 (fontified t) 838 839 (fontified t) 839 840 (fontified t) 840 844 (face font-lock-type-face fontified t) 844 854 (fontified t) 854 855 (face (rainbow-delimiters-depth-3-face) fontified t) 855 856 (fontified t) 856 857 (fontified t) 857 865 (fontified t) 865 868 (face font-lock-keyword-face fontified t) 868 869 (fontified t) 869 870 (face font-lock-variable-name-face fontified t) 870 873 (fontified t) 873 876 (face font-lock-constant-face fontified t) 876 878 (fontified t) 878 893 (fontified t) 893 894 (face (rainbow-delimiters-depth-3-face) fontified t) 894 903 (fontified t) 903 913 (fontified t) 913 914 (face (rainbow-delimiters-depth-3-face) fontified t) 914 916 (fontified t) 916 924 (fontified t) 924 932 (face rust-builtin-formatting-macro fontified t) 932 933 (face (rainbow-delimiters-depth-3-face) fontified t) 933 942 (face font-lock-string-face fontified t) 942 944 (face rust-string-interpolation fontified t) 944 945 (face font-lock-string-face fontified t) 945 948 (fontified t) 948 949 (face (rainbow-delimiters-depth-3-face) fontified t) 949 950 (fontified t rear-nonsticky t) 950 951 (fontified t) 951 952 (fontified t) 952 960 (fontified t) 960 963 (face font-lock-keyword-face fontified t) 963 964 (fontified t) 964 967 (face font-lock-keyword-face fontified t) 967 968 (fontified t) 968 974 (face font-lock-variable-name-face fontified t) 974 977 (fontified t) 977 980 (face font-lock-constant-face fontified t) 980 982 (fontified t) 982 1005 (fontified t) 1005 1006 (face (rainbow-delimiters-depth-3-face) fontified t) 1006 1016 (fontified t) 1016 1017 (face (rainbow-delimiters-depth-3-face) fontified t) 1017 1018 (fontified t) 1018 1019 (fontified t) 1019 1020 (fontified t) 1020 1028 (fontified t) 1028 1033 (face font-lock-keyword-face fontified t) 1033 1035 (fontified t) 1035 1041 (fontified t) 1041 1042 (fontified t) 1042 1049 (fontified t) 1049 1050 (face (rainbow-delimiters-depth-3-face) fontified t) 1050 1051 (face (rainbow-delimiters-depth-3-face) fontified t) 1051 1052 (fontified t) 1052 1053 (face (rainbow-delimiters-depth-3-face) fontified t) 1053 1054 (fontified t) 1054 1066 (fontified t) 1066 1069 (face font-lock-keyword-face fontified t) 1069 1070 (fontified t) 1070 1073 (face font-lock-variable-name-face fontified t) 1073 1076 (fontified t) 1076 1079 (face font-lock-constant-face fontified t) 1079 1081 (fontified t) 1081 1101 (fontified t) 1101 1102 (face (rainbow-delimiters-depth-4-face) fontified t) 1102 1108 (fontified t) 1108 1109 (face (rainbow-delimiters-depth-4-face) fontified t) 1109 1111 (fontified t) 1111 1123 (fontified t) 1123 1126 (face font-lock-keyword-face fontified t) 1126 1127 (fontified t) 1127 1131 (face font-lock-variable-name-face fontified t) 1131 1134 (fontified t) 1134 1137 (face font-lock-constant-face fontified t) 1137 1139 (fontified t) 1139 1159 (fontified t) 1159 1160 (face (rainbow-delimiters-depth-4-face) fontified t) 1160 1166 (fontified t) 1166 1167 (face (rainbow-delimiters-depth-4-face) fontified t) 1167 1169 (fontified t) 1169 1181 (fontified t) 1181 1189 (face rust-builtin-formatting-macro fontified t) 1189 1190 (face (rainbow-delimiters-depth-4-face) fontified t) 1190 1191 (fontified t) 1191 1207 (fontified t) 1207 1216 (face font-lock-string-face fontified t) 1216 1218 (face rust-string-interpolation fontified t) 1218 1231 (face font-lock-string-face fontified t) 1231 1236 (face font-lock-string-face fontified t) 1236 1237 (face font-lock-string-face fontified t rear-nonsticky t) 1237 1238 (fontified t) 1238 1239 (fontified t) 1239 1254 (fontified t) 1254 1255 (fontified t) 1255 1259 (face font-lock-type-face fontified t) 1259 1261 (fontified t) 1261 1269 (fontified t) 1269 1270 (face (rainbow-delimiters-depth-5-face) fontified t) 1270 1273 (face font-lock-constant-face fontified t) 1273 1275 (fontified t) 1275 1295 (fontified t) 1295 1296 (face (rainbow-delimiters-depth-6-face) fontified t) 1296 1299 (fontified t) 1299 1300 (face (rainbow-delimiters-depth-6-face) fontified t) 1300 1301 (face (rainbow-delimiters-depth-5-face) fontified t) 1301 1302 (fontified t) 1302 1322 (fontified t) 1322 1323 (fontified t) 1323 1329 (fontified t) 1329 1330 (face (rainbow-delimiters-depth-5-face) fontified t) 1330 1331 (face (rainbow-delimiters-depth-5-face) fontified t) 1331 1352 (fontified t) 1352 1353 (fontified t) 1353 1359 (fontified t) 1359 1360 (face (rainbow-delimiters-depth-5-face) fontified t) 1360 1361 (face (rainbow-delimiters-depth-5-face) fontified t) 1361 1362 (fontified t) 1362 1363 (fontified t) 1363 1374 (fontified t) 1374 1375 (fontified t) 1375 1379 (fontified t) 1379 1383 (face font-lock-type-face fontified t) 1383 1385 (fontified t) 1385 1393 (fontified t) 1393 1394 (face (rainbow-delimiters-depth-5-face) fontified t) 1394 1398 (fontified t) 1398 1399 (face (rainbow-delimiters-depth-5-face) fontified t) 1399 1400 (fontified t) 1400 1406 (fontified t) 1406 1407 (face (rainbow-delimiters-depth-5-face) fontified t) 1407 1408 (face (rainbow-delimiters-depth-5-face) fontified t) 1408 1409 (fontified t) 1409 1421 (fontified t) 1421 1422 (face (rainbow-delimiters-depth-4-face) fontified t) 1422 1423 (fontified t) 1423 1424 (fontified t) 1424 1436 (fontified t) 1436 1442 (fontified t) 1442 1445 (fontified t) 1445 1448 (face font-lock-constant-face fontified t) 1448 1450 (fontified t) 1450 1466 (fontified t) 1466 1467 (face (rainbow-delimiters-depth-4-face) fontified t) 1467 1473 (fontified t) 1473 1474 (face (rainbow-delimiters-depth-4-face) fontified t) 1474 1476 (fontified t) 1476 1484 (fontified t) 1484 1485 (face (rainbow-delimiters-depth-3-face) fontified t) 1485 1486 (fontified t) 1486 1487 (fontified t) 1487 1495 (fontified t) 1495 1498 (face font-lock-constant-face fontified t) 1498 1500 (fontified t) 1500 1518 (fontified t) 1518 1519 (face (rainbow-delimiters-depth-3-face) fontified t) 1519 1529 (fontified t) 1529 1530 (face (rainbow-delimiters-depth-3-face) fontified t) 1530 1532 (fontified t) 1532 1540 (fontified t) 1540 1543 (face font-lock-constant-face fontified t) 1543 1545 (fontified t) 1545 1571 (fontified t) 1571 1572 (face (rainbow-delimiters-depth-3-face) fontified t) 1572 1573 (fontified t) 1573 1579 (fontified t) 1579 1580 (fontified t face (rainbow-delimiters-depth-3-face)) 1580 1581 (fontified t rear-nonsticky t) 1581 1582 (fontified t) 1582 1586 (fontified t) 1586 1587 (face (rainbow-delimiters-depth-2-face) fontified t) 1587 1588 (fontified t) 1588 1589 (fontified t) 1589 1593 (fontified t) 1593 1599 (face rust-unsafe fontified t) 1599 1600 (fontified t) 1600 1601 (face (rainbow-delimiters-depth-2-face) fontified t) 1601 1602 (fontified t) 1602 1610 (fontified t) 1610 1613 (face font-lock-keyword-face fontified t) 1613 1614 (fontified t) 1614 1618 (face font-lock-variable-name-face fontified t) 1618 1621 (fontified t) 1621 1624 (face font-lock-constant-face fontified t) 1624 1626 (fontified t) 1626 1647 (fontified t) 1647 1648 (face (rainbow-delimiters-depth-3-face) fontified t) 1648 1649 (fontified t) 1649 1650 (face (rainbow-delimiters-depth-3-face) fontified t) 1650 1652 (fontified t) 1652 1660 (fontified t) 1660 1663 (face font-lock-constant-face fontified t) 1663 1665 (fontified t) 1665 1690 (fontified t) 1690 1691 (face (rainbow-delimiters-depth-3-face) fontified t) 1691 1695 (fontified t) 1695 1700 (fontified t) 1700 1703 (face font-lock-constant-face fontified t) 1703 1705 (fontified t) 1705 1734 (fontified t) 1734 1737 (fontified t)) . 362) (undo-tree-id9999 . -399) (undo-tree-id10000 . -279) (undo-tree-id10001 . -735) (undo-tree-id10002 . -916) (undo-tree-id10003 . -1495) (undo-tree-id10004 . -969) (undo-tree-id10005 . -969) (undo-tree-id10006 . -999) (undo-tree-id10007 . -255) (undo-tree-id10008 . -255) (undo-tree-id10009 . -226) (undo-tree-id10010 . -256) (undo-tree-id10011 . -1028) (undo-tree-id10012 . -255) (undo-tree-id10013 . -1436) (undo-tree-id10014 . -1217) (undo-tree-id10015 . -1190) (undo-tree-id10016 . -1038) (undo-tree-id10017 . -268) (undo-tree-id10018 . -588) (undo-tree-id10019 . -988) (undo-tree-id10020 . -1737) (undo-tree-id10021 . -1737) (undo-tree-id10022 . -519) (undo-tree-id10023 . -1587) (undo-tree-id10024 . -1587) (undo-tree-id10025 . -268) (undo-tree-id10026 . -1648) (undo-tree-id10027 . -1665) (undo-tree-id10028 . -1665) (undo-tree-id10029 . -1665) (undo-tree-id10030 . -1665) (undo-tree-id10031 . -1665) (undo-tree-id10032 . -1665) (undo-tree-id10033 . -1665) (undo-tree-id10034 . -1665) (undo-tree-id10035 . -1665) (undo-tree-id10036 . -1665) (undo-tree-id10037 . -1665) (undo-tree-id10038 . -1665) (undo-tree-id10039 . -1691) (undo-tree-id10040 . -1691) (undo-tree-id10041 . -268) (undo-tree-id10042 . -1691) (undo-tree-id10043 . -1691) (undo-tree-id10044 . -1691) (undo-tree-id10045 . -1691) (undo-tree-id10046 . -1691) (undo-tree-id10047 . -1691) (undo-tree-id10048 . -1691) (undo-tree-id10049 . -1694) (undo-tree-id10050 . -1694) (undo-tree-id10051 . -1695) (undo-tree-id10052 . -1695) (undo-tree-id10053 . -1695) (undo-tree-id10054 . -1695) (undo-tree-id10055 . -1695) (undo-tree-id10056 . -1695) (undo-tree-id10057 . -1695) (undo-tree-id10058 . -1695) (undo-tree-id10059 . -1695) (undo-tree-id10060 . -1696) (undo-tree-id10061 . -1696) (undo-tree-id10062 . -1697) (undo-tree-id10063 . -1697) (undo-tree-id10064 . -1697) (undo-tree-id10065 . -1697) (undo-tree-id10066 . -1697) (undo-tree-id10067 . -1697) (undo-tree-id10068 . -1697) (undo-tree-id10069 . -1697) (undo-tree-id10070 . -1697) (undo-tree-id10071 . -1697) (undo-tree-id10072 . -1698) (undo-tree-id10073 . -1698) (undo-tree-id10074 . -1698) (undo-tree-id10075 . -1698) (undo-tree-id10076 . -1700) (undo-tree-id10077 . -1700) (undo-tree-id10078 . -1700) (undo-tree-id10079 . -1700) (undo-tree-id10080 . -1700) (undo-tree-id10081 . -1700) (undo-tree-id10082 . -1700) (undo-tree-id10083 . -1700) (undo-tree-id10084 . -1700) (undo-tree-id10085 . -1700) (undo-tree-id10086 . -1700) (undo-tree-id10087 . -1700) (undo-tree-id10088 . -1700) (undo-tree-id10089 . -1700) (undo-tree-id10090 . -1700) (undo-tree-id10091 . -1700) (undo-tree-id10092 . -1700) (undo-tree-id10093 . -1700) (undo-tree-id10094 . -1700) (undo-tree-id10095 . -1700) (undo-tree-id10096 . -1700) (undo-tree-id10097 . -1700) (undo-tree-id10098 . -1700) (undo-tree-id10099 . -1700) (undo-tree-id10100 . -1701) (undo-tree-id10101 . -1701) (undo-tree-id10102 . -1701) (undo-tree-id10103 . -1701) (undo-tree-id10104 . -1702) (undo-tree-id10105 . -1703) (undo-tree-id10106 . -1703) (undo-tree-id10107 . -1704) (undo-tree-id10108 . -1704) (undo-tree-id10109 . -1704) (undo-tree-id10110 . -1704) (undo-tree-id10111 . -1705) (undo-tree-id10112 . -1705) (undo-tree-id10113 . -1705) (undo-tree-id10114 . -1705) (undo-tree-id10115 . -1705) (undo-tree-id10116 . -1705) (undo-tree-id10117 . -1705) (undo-tree-id10118 . -1705) (undo-tree-id10119 . -1705) (undo-tree-id10120 . -1705) (undo-tree-id10121 . -1705) (undo-tree-id10122 . -1705) (undo-tree-id10123 . -1705) (undo-tree-id10124 . -1705) (undo-tree-id10125 . -1734) (undo-tree-id10126 . -1734) (undo-tree-id10127 . -1734) (undo-tree-id10128 . -1736) (undo-tree-id10129 . -1736) (undo-tree-id10130 . -1736) (undo-tree-id10131 . -1736) (undo-tree-id10132 . -1736) (undo-tree-id10133 . -1736) (undo-tree-id10134 . -1736) (undo-tree-id10135 . -1736) (undo-tree-id10136 . -1736) (undo-tree-id10137 . -1736) (undo-tree-id10138 . -1736) (undo-tree-id10139 . -1736) (undo-tree-id10140 . -1736) (undo-tree-id10141 . -1736) (undo-tree-id10142 . -1736) (undo-tree-id10143 . -1736) (undo-tree-id10144 . -1736) (undo-tree-id10145 . -1736) (undo-tree-id10146 . -1736) (undo-tree-id10147 . -1652) (undo-tree-id10148 . -1737) (undo-tree-id10149 . -1737) (undo-tree-id10150 . -1737) 2099) ((362 . 2099)) (26040 63512 647618 224000) 0 nil])
([nil nil ((2101 . 2110)) nil (26040 63570 130112 259000) 0 nil])
nil
([nil nil ((2110 . 2111)) nil (26040 63570 130111 631000) 0 nil])
([nil nil ((#("z" 0 1 (fontified t)) . -2110) (undo-tree-id10400 . -1) (undo-tree-id10401 . -1) (undo-tree-id10402 . -1) (undo-tree-id10403 . -1) (undo-tree-id10404 . -1) 2111) nil (26040 63570 130110 680000) 0 nil])
([nil nil ((2110 . 2125)) nil (26040 63570 130106 868000) 0 nil])
([nil nil ((2125 . 2131)) nil (26040 63570 130105 870000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2135 2139 nil nil nil t #s(yas--field 2 2141 2153 nil nil nil nil #s(yas--field 3 2155 2169 nil nil nil nil #s(yas--exit 2170 nil)))) #s(yas--field 2 2141 2153 nil nil nil nil #s(yas--field 3 2155 2169 nil nil nil nil #s(yas--exit 2170 nil))) #s(yas--field 3 2155 2169 nil nil nil nil #s(yas--exit 2170 nil))) #s(yas--exit 2170 nil) 81 nil #s(yas--field 1 2135 2139 nil nil nil t #s(yas--field 2 2141 2153 nil nil nil nil #s(yas--field 3 2155 2169 nil nil nil nil #s(yas--exit 2170 nil)))) nil nil)) (2115 . 2175) (#("zbar_processor_init(${1:processor}, ${2:video_device}, ${3:enable_display})$0" 0 77 (fontified nil)) . 2115) (2115 . 2192) (#("zbar_processor_i" 0 16 (fontified nil)) . 2115) (2115 . 2131) (#("zbar_processor_init(…)" 0 22 (fontified nil)) . -2115) (2115 . 2137) (#("zbar_processor_i" 0 16 (fontified t)) . -2115) (undo-tree-id10365 . -16) (undo-tree-id10366 . -1) (undo-tree-id10367 . -1) (undo-tree-id10368 . -2) (undo-tree-id10369 . -2) (undo-tree-id10370 . -3) (undo-tree-id10371 . -3) (undo-tree-id10372 . -4) (undo-tree-id10373 . -4) (undo-tree-id10374 . -5) (undo-tree-id10375 . -5) (undo-tree-id10376 . -6) (undo-tree-id10377 . -6) (undo-tree-id10378 . -7) (undo-tree-id10379 . -7) (undo-tree-id10380 . -8) (undo-tree-id10381 . -8) (undo-tree-id10382 . -9) (undo-tree-id10383 . -9) (undo-tree-id10384 . -10) (undo-tree-id10385 . -10) (undo-tree-id10386 . -11) (undo-tree-id10387 . -11) (undo-tree-id10388 . -12) (undo-tree-id10389 . -12) (undo-tree-id10390 . -13) (undo-tree-id10391 . -13) (undo-tree-id10392 . -14) (undo-tree-id10393 . -14) (undo-tree-id10394 . -15) (undo-tree-id10395 . -15) (undo-tree-id10396 . -16) (undo-tree-id10397 . -16) (undo-tree-id10398 . -16) (undo-tree-id10399 . -16) 2131) nil (26040 63570 130103 573000) 0 nil])
([nil nil ((2136 . 2137) (#("processor" 0 9 (fontified nil)) . 2136) (undo-tree-id10364 . -9) (2135 . 2136)) nil (26040 63570 130079 825000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -2135) (undo-tree-id10350 . -1) (undo-tree-id10351 . -1) (undo-tree-id10352 . -1) (undo-tree-id10353 . -1) (undo-tree-id10354 . -1) (undo-tree-id10355 . -1) (undo-tree-id10356 . -1) (undo-tree-id10357 . -1) (undo-tree-id10358 . -1) (#("r" 0 1 (fontified t)) . -2136) (undo-tree-id10359 . -1) (undo-tree-id10360 . -1) (undo-tree-id10361 . -1) (undo-tree-id10362 . -1) (undo-tree-id10363 . -1) 2137) nil (26040 63570 130077 539000) 0 nil])
([nil nil ((2135 . 2138)) nil (26040 63570 130067 711000) 0 nil])
([nil nil ((2135 . 2139) (#("pro" 0 3 (fontified nil)) . 2135) (undo-tree-id10337 . -3) (2135 . 2138) (#("proc" 0 4 (fontified nil)) . -2135) (undo-tree-id10338 . -4) (2135 . 2139) (#("pro" 0 3 (fontified t)) . -2135) (undo-tree-id10339 . -3) (undo-tree-id10340 . -3) (undo-tree-id10341 . -3) (undo-tree-id10342 . -1) (undo-tree-id10343 . -1) (undo-tree-id10344 . -2) (undo-tree-id10345 . -2) (undo-tree-id10346 . -3) (undo-tree-id10347 . -3) (undo-tree-id10348 . -3) (undo-tree-id10349 . -3) 2138) nil (26040 63570 130066 247000) 0 nil])
([nil nil ((apply yas--snippet-revive 2115 2170 #s(yas--snippet nil (#s(yas--field 1 2135 2139 nil nil nil t #s(yas--field 2 2141 2153 nil nil nil nil #s(yas--field 3 2155 2169 nil nil nil nil #s(yas--exit 2170 nil)))) #s(yas--field 2 2141 2153 nil nil nil nil #s(yas--field 3 2155 2169 nil nil nil nil #s(yas--exit 2170 nil))) #s(yas--field 3 2155 2169 nil nil nil nil #s(yas--exit 2170 nil))) #s(yas--exit 2170 nil) 81 nil #s(yas--field 1 2135 2139 nil nil nil t #s(yas--field 2 2141 2153 nil nil nil nil #s(yas--field 3 2155 2169 nil nil nil nil #s(yas--exit 2170 nil)))) nil nil))) nil (26040 63570 130055 970000) 0 nil])
([nil nil ((#("device" 0 6 (fontified t)) . -2147) (undo-tree-id10315 . -6) (undo-tree-id10316 . -6) (undo-tree-id10317 . -6) (undo-tree-id10318 . -6) (undo-tree-id10319 . -6) (undo-tree-id10320 . -6) (undo-tree-id10321 . -6) (undo-tree-id10322 . -6) (undo-tree-id10323 . -6) (undo-tree-id10324 . -6) (undo-tree-id10325 . -6) (undo-tree-id10326 . -6) (undo-tree-id10327 . -6) (undo-tree-id10328 . -6) (undo-tree-id10329 . -6) (undo-tree-id10330 . -6) (undo-tree-id10331 . -6) (undo-tree-id10332 . -6) (undo-tree-id10333 . -6) (undo-tree-id10334 . -6) (undo-tree-id10335 . -6) (undo-tree-id10336 . -6) 2153) nil (26040 63570 130054 433000) 0 nil])
([nil nil ((#("video_" 0 6 (fontified t)) . -2141) (undo-tree-id10288 . -6) (undo-tree-id10289 . -6) (undo-tree-id10290 . -5) (undo-tree-id10291 . -5) (undo-tree-id10292 . -5) (undo-tree-id10293 . -6) (undo-tree-id10294 . -6) (undo-tree-id10295 . -6) (undo-tree-id10296 . -6) (undo-tree-id10297 . -6) (undo-tree-id10298 . -6) (undo-tree-id10299 . -6) (undo-tree-id10300 . -6) (undo-tree-id10301 . -6) (undo-tree-id10302 . -6) (undo-tree-id10303 . -6) (undo-tree-id10304 . -6) (undo-tree-id10305 . -6) (undo-tree-id10306 . -6) (undo-tree-id10307 . -6) (undo-tree-id10308 . -6) (undo-tree-id10309 . -6) (undo-tree-id10310 . -6) (undo-tree-id10311 . -6) (undo-tree-id10312 . -6) (undo-tree-id10313 . -6) (undo-tree-id10314 . -6) 2147) nil (26040 63570 130038 380000) 0 nil])
([nil nil ((2141 . 2143)) nil (26040 63570 129911 396000) 0 nil])
([nil nil ((2142 . 2152)) nil (26040 63570 129910 796000) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-string-face fontified t)) . -2149) (undo-tree-id10267 . -1) (undo-tree-id10268 . -1) (undo-tree-id10269 . -1) (undo-tree-id10270 . -1) (undo-tree-id10271 . -1) (undo-tree-id10272 . -1) (undo-tree-id10273 . -1) (undo-tree-id10274 . -1) (undo-tree-id10275 . -1) (undo-tree-id10276 . -1) (undo-tree-id10277 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -2150) (undo-tree-id10278 . -1) (undo-tree-id10279 . -1) (undo-tree-id10280 . -1) (undo-tree-id10281 . -1) (undo-tree-id10282 . -1) (undo-tree-id10283 . -1) (undo-tree-id10284 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -2151) (undo-tree-id10285 . -1) (undo-tree-id10286 . -1) (undo-tree-id10287 . -1) 2152) nil (26040 63570 129909 80000) 0 nil])
([nil nil ((2149 . 2153)) nil (26040 63570 129893 691000) 0 nil])
([nil nil ((#("display" 0 7 (fontified t)) . -2163) (undo-tree-id10253 . -7) (undo-tree-id10254 . -7) (undo-tree-id10255 . -7) (undo-tree-id10256 . -7) (undo-tree-id10257 . -7) (undo-tree-id10258 . -7) (undo-tree-id10259 . -7) (undo-tree-id10260 . -7) (undo-tree-id10261 . -7) (undo-tree-id10262 . -7) (undo-tree-id10263 . -7) (undo-tree-id10264 . -7) (undo-tree-id10265 . -7) (undo-tree-id10266 . -7) 2170) nil (26040 63570 129892 310000) 0 nil])
([nil nil ((#("enable_" 0 7 (fontified t)) . -2156) (undo-tree-id10236 . -7) (undo-tree-id10237 . -6) (undo-tree-id10238 . -7) (undo-tree-id10239 . -7) (undo-tree-id10240 . -7) (undo-tree-id10241 . -7) (undo-tree-id10242 . -7) (undo-tree-id10243 . -7) (undo-tree-id10244 . -7) (undo-tree-id10245 . -7) (undo-tree-id10246 . -7) (undo-tree-id10247 . -7) (undo-tree-id10248 . -7) (undo-tree-id10249 . -7) (undo-tree-id10250 . -7) (undo-tree-id10251 . -7) (undo-tree-id10252 . -7) 2163) nil (26040 63570 129880 509000) 0 nil])
([nil nil ((2156 . 2157)) nil (26040 63570 129861 499000) 0 nil])
([nil nil ((2158 . 2159)) nil (26040 63570 129857 687000) 0 nil])
([nil nil ((2154 . 2158) (t 26040 63570 150836 10000)) nil (26040 63578 231675 605000) 0 nil])
([nil nil ((apply yas--snippet-revive 2155 2161 #s(yas--snippet nil nil #s(yas--exit 2161 nil) 82 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2161 nil) 82 nil nil nil nil)) (2155 . 2161) (#("into()$0" 0 8 (fontified nil)) . 2155) (2155 . 2163) (#("int" 0 3 (fontified nil)) . 2155) (2155 . 2158) (#("into() (as Into)" 0 16 (fontified nil)) . -2155) (2155 . 2171) (#("int" 0 3 (fontified t)) . -2155) (undo-tree-id10405 . -3) (undo-tree-id10406 . -1) (undo-tree-id10407 . -1) (undo-tree-id10408 . -1) (undo-tree-id10409 . -2) (undo-tree-id10410 . -2) (undo-tree-id10411 . -3) (undo-tree-id10412 . -3) (undo-tree-id10413 . -3) (undo-tree-id10414 . -3) 2158) nil (26040 63578 231670 850000) 0 nil])
([nil nil ((#("into()" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t) 5 6 (face (rainbow-delimiters-depth-4-face) fontified t)) . -2155) (undo-tree-id10462 . -6) (undo-tree-id10463 . -6) (undo-tree-id10464 . -6) (undo-tree-id10465 . -6) (undo-tree-id10466 . -6) (undo-tree-id10467 . -6) (undo-tree-id10468 . -6) (undo-tree-id10469 . -6) (undo-tree-id10470 . -6) (undo-tree-id10471 . -6) (undo-tree-id10472 . -6) (undo-tree-id10473 . -6) (undo-tree-id10474 . -6) (undo-tree-id10475 . -6) (undo-tree-id10476 . -6) (undo-tree-id10477 . -6) (undo-tree-id10478 . -6) (undo-tree-id10479 . -6) (undo-tree-id10480 . -6) (undo-tree-id10481 . -6) (undo-tree-id10482 . -6) (undo-tree-id10483 . -6) (undo-tree-id10484 . -6) (undo-tree-id10485 . -6) (undo-tree-id10486 . -6) 2161 (t 26040 63578 284169 834000)) nil (26040 63589 306722 585000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2154) (undo-tree-id10426 . -1) (undo-tree-id10427 . -1) (undo-tree-id10428 . -1) (undo-tree-id10429 . -1) (undo-tree-id10430 . -1) (undo-tree-id10431 . -1) (undo-tree-id10432 . -1) (undo-tree-id10433 . -1) (undo-tree-id10434 . -1) (undo-tree-id10435 . -1) (undo-tree-id10436 . -1) (undo-tree-id10437 . -1) (undo-tree-id10438 . -1) (undo-tree-id10439 . -1) (undo-tree-id10440 . -1) (undo-tree-id10441 . -1) (undo-tree-id10442 . -1) (undo-tree-id10443 . -1) (undo-tree-id10444 . -1) (undo-tree-id10445 . -1) (undo-tree-id10446 . -1) (undo-tree-id10447 . -1) (undo-tree-id10448 . -1) (undo-tree-id10449 . -1) (undo-tree-id10450 . -1) (undo-tree-id10451 . -1) (undo-tree-id10452 . -1) (undo-tree-id10453 . -1) (undo-tree-id10454 . -1) (undo-tree-id10455 . -1) (undo-tree-id10456 . -1) (undo-tree-id10457 . -1) (undo-tree-id10458 . -1) (undo-tree-id10459 . -1) (undo-tree-id10460 . -1) (undo-tree-id10461 . -1) 2155) nil (26040 63589 306702 138000) 0 nil])
([nil nil ((2154 . 2158)) nil (26040 63589 306516 233000) 0 nil])
([nil nil ((apply yas--snippet-revive 2155 2163 #s(yas--snippet nil nil #s(yas--exit 2163 nil) 83 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2163 nil) 83 nil nil nil nil)) (2155 . 2163) (#("as_ptr()$0" 0 10 (fontified nil)) . 2155) (2155 . 2165) (#("ptr" 0 3 (fontified nil)) . 2155) (2155 . 2158) (#("as_ptr()" 0 8 (fontified nil)) . -2155) (2155 . 2163) (#("ptr" 0 3 (fontified t)) . -2155) (undo-tree-id10415 . -3) (undo-tree-id10416 . -1) (undo-tree-id10417 . -1) (undo-tree-id10418 . -1) (undo-tree-id10419 . -2) (undo-tree-id10420 . -2) (undo-tree-id10421 . -2) (undo-tree-id10422 . -3) (undo-tree-id10423 . -3) (undo-tree-id10424 . -3) (undo-tree-id10425 . -3) 2158) nil (26040 63589 306511 672000) 0 nil])
([nil nil ((#("ptr()" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-4-face) fontified t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t)) . -2158) (undo-tree-id11077 . -5) (undo-tree-id11078 . -5) (undo-tree-id11079 . -5) (undo-tree-id11080 . -5) (undo-tree-id11081 . -5) (undo-tree-id11082 . -5) (undo-tree-id11083 . -5) (undo-tree-id11084 . -5) (undo-tree-id11085 . -5) (undo-tree-id11086 . -5) (undo-tree-id11087 . -5) (undo-tree-id11088 . -5) (undo-tree-id11089 . -5) (undo-tree-id11090 . -5) (undo-tree-id11091 . -5) (undo-tree-id11092 . -5) 2163 (t 26040 63589 327503 839000)) nil (26040 63630 459593 534000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2154) (undo-tree-id10968 . -1) (undo-tree-id10969 . -1) (undo-tree-id10970 . -1) (undo-tree-id10971 . -1) (undo-tree-id10972 . -1) (undo-tree-id10973 . -1) (undo-tree-id10974 . -1) (undo-tree-id10975 . -1) (undo-tree-id10976 . -1) (undo-tree-id10977 . -1) (undo-tree-id10978 . -1) (undo-tree-id10979 . -1) (undo-tree-id10980 . -1) (undo-tree-id10981 . -1) (undo-tree-id10982 . -1) (undo-tree-id10983 . -1) (undo-tree-id10984 . -1) (undo-tree-id10985 . -1) (undo-tree-id10986 . -1) (undo-tree-id10987 . -1) (undo-tree-id10988 . -1) (undo-tree-id10989 . -1) (undo-tree-id10990 . -1) (undo-tree-id10991 . -1) (undo-tree-id10992 . -1) (undo-tree-id10993 . -1) (undo-tree-id10994 . -1) (undo-tree-id10995 . -1) (undo-tree-id10996 . -1) (undo-tree-id10997 . -1) (undo-tree-id10998 . -1) (undo-tree-id10999 . -1) (undo-tree-id11000 . -1) (undo-tree-id11001 . -1) (undo-tree-id11002 . -1) (undo-tree-id11003 . -1) (undo-tree-id11004 . -1) (undo-tree-id11005 . -1) (undo-tree-id11006 . -1) (undo-tree-id11007 . -1) (#("a" 0 1 (fontified t)) . -2155) (undo-tree-id11008 . -1) (undo-tree-id11009 . -1) (undo-tree-id11010 . -1) (undo-tree-id11011 . -1) (undo-tree-id11012 . -1) (undo-tree-id11013 . -1) (undo-tree-id11014 . -1) (undo-tree-id11015 . -1) (undo-tree-id11016 . -1) (undo-tree-id11017 . -1) (undo-tree-id11018 . -1) (undo-tree-id11019 . -1) (undo-tree-id11020 . -1) (undo-tree-id11021 . -1) (undo-tree-id11022 . -1) (undo-tree-id11023 . -1) (undo-tree-id11024 . -1) (undo-tree-id11025 . -1) (undo-tree-id11026 . -1) (undo-tree-id11027 . -1) (undo-tree-id11028 . -1) (undo-tree-id11029 . -1) (undo-tree-id11030 . -1) (undo-tree-id11031 . -1) (undo-tree-id11032 . -1) (#("s" 0 1 (face font-lock-keyword-face fontified t)) . -2156) (undo-tree-id11033 . -1) (undo-tree-id11034 . -1) (undo-tree-id11035 . -1) (undo-tree-id11036 . -1) (undo-tree-id11037 . -1) (undo-tree-id11038 . -1) (undo-tree-id11039 . -1) (undo-tree-id11040 . -1) (undo-tree-id11041 . -1) (undo-tree-id11042 . -1) (undo-tree-id11043 . -1) (undo-tree-id11044 . -1) (undo-tree-id11045 . -1) (undo-tree-id11046 . -1) (undo-tree-id11047 . -1) (undo-tree-id11048 . -1) (undo-tree-id11049 . -1) (undo-tree-id11050 . -1) (undo-tree-id11051 . -1) (undo-tree-id11052 . -1) (undo-tree-id11053 . -1) (undo-tree-id11054 . -1) (undo-tree-id11055 . -1) (#("_" 0 1 (fontified t)) . -2157) (undo-tree-id11056 . -1) (undo-tree-id11057 . -1) (undo-tree-id11058 . -1) (undo-tree-id11059 . -1) (undo-tree-id11060 . -1) (undo-tree-id11061 . -1) (undo-tree-id11062 . -1) (undo-tree-id11063 . -1) (undo-tree-id11064 . -1) (undo-tree-id11065 . -1) (undo-tree-id11066 . -1) (undo-tree-id11067 . -1) (undo-tree-id11068 . -1) (undo-tree-id11069 . -1) (undo-tree-id11070 . -1) (undo-tree-id11071 . -1) (undo-tree-id11072 . -1) (undo-tree-id11073 . -1) (undo-tree-id11074 . -1) (undo-tree-id11075 . -1) (undo-tree-id11076 . -1) 2158) nil (26040 63630 459577 876000) 0 nil])
([nil nil ((#("video0\"" 0 7 (face font-lock-string-face fontified t)) . -2147) (undo-tree-id10892 . -7) (undo-tree-id10893 . -7) (undo-tree-id10894 . -7) (undo-tree-id10895 . -7) (undo-tree-id10896 . -7) (undo-tree-id10897 . -7) (undo-tree-id10898 . -7) (undo-tree-id10899 . -7) (undo-tree-id10900 . -7) (undo-tree-id10901 . -7) (undo-tree-id10902 . -7) (undo-tree-id10903 . -7) (undo-tree-id10904 . -7) (undo-tree-id10905 . -7) (undo-tree-id10906 . -7) (undo-tree-id10907 . -7) (undo-tree-id10908 . -7) (undo-tree-id10909 . -7) (undo-tree-id10910 . -7) (undo-tree-id10911 . -7) (undo-tree-id10912 . -7) (undo-tree-id10913 . -7) (undo-tree-id10914 . -7) (undo-tree-id10915 . -7) (undo-tree-id10916 . -7) (undo-tree-id10917 . -7) (undo-tree-id10918 . -7) (undo-tree-id10919 . -7) (undo-tree-id10920 . -7) (undo-tree-id10921 . -7) (undo-tree-id10922 . -7) (undo-tree-id10923 . -7) (undo-tree-id10924 . -7) (undo-tree-id10925 . -7) (undo-tree-id10926 . -7) (undo-tree-id10927 . -7) (undo-tree-id10928 . -7) (undo-tree-id10929 . -7) (undo-tree-id10930 . -7) (undo-tree-id10931 . -7) (undo-tree-id10932 . -7) (undo-tree-id10933 . -7) (undo-tree-id10934 . -7) (undo-tree-id10935 . -7) (undo-tree-id10936 . -7) (undo-tree-id10937 . -7) (undo-tree-id10938 . -7) (undo-tree-id10939 . -7) (undo-tree-id10940 . -7) (undo-tree-id10941 . -7) (undo-tree-id10942 . -7) (undo-tree-id10943 . -7) (undo-tree-id10944 . -7) (undo-tree-id10945 . -7) (undo-tree-id10946 . -7) (undo-tree-id10947 . -7) (undo-tree-id10948 . -7) (undo-tree-id10949 . -7) (undo-tree-id10950 . -7) (undo-tree-id10951 . -7) (undo-tree-id10952 . -7) (undo-tree-id10953 . -7) (undo-tree-id10954 . -7) (undo-tree-id10955 . -7) (undo-tree-id10956 . -7) (undo-tree-id10957 . -7) (undo-tree-id10958 . -7) (undo-tree-id10959 . -7) (undo-tree-id10960 . -7) (undo-tree-id10961 . -7) (undo-tree-id10962 . -7) (undo-tree-id10963 . -7) (undo-tree-id10964 . -7) (undo-tree-id10965 . -7) (undo-tree-id10966 . -7) (undo-tree-id10967 . -7) 2154) nil (26040 63630 459215 529000) 0 nil])
([nil nil ((#("dev/" 0 4 (face font-lock-string-face fontified t)) . -2143) (undo-tree-id10814 . -4) (undo-tree-id10815 . -4) (undo-tree-id10816 . -4) (undo-tree-id10817 . -4) (undo-tree-id10818 . -4) (undo-tree-id10819 . -4) (undo-tree-id10820 . -4) (undo-tree-id10821 . -4) (undo-tree-id10822 . -4) (undo-tree-id10823 . -4) (undo-tree-id10824 . -4) (undo-tree-id10825 . -4) (undo-tree-id10826 . -4) (undo-tree-id10827 . -4) (undo-tree-id10828 . -4) (undo-tree-id10829 . -4) (undo-tree-id10830 . -4) (undo-tree-id10831 . -4) (undo-tree-id10832 . -4) (undo-tree-id10833 . -4) (undo-tree-id10834 . -4) (undo-tree-id10835 . -4) (undo-tree-id10836 . -4) (undo-tree-id10837 . -4) (undo-tree-id10838 . -4) (undo-tree-id10839 . -4) (undo-tree-id10840 . -4) (undo-tree-id10841 . -4) (undo-tree-id10842 . -4) (undo-tree-id10843 . -4) (undo-tree-id10844 . -4) (undo-tree-id10845 . -4) (undo-tree-id10846 . -4) (undo-tree-id10847 . -4) (undo-tree-id10848 . -4) (undo-tree-id10849 . -4) (undo-tree-id10850 . -4) (undo-tree-id10851 . -4) (undo-tree-id10852 . -4) (undo-tree-id10853 . -4) (undo-tree-id10854 . -4) (undo-tree-id10855 . -4) (undo-tree-id10856 . -4) (undo-tree-id10857 . -4) (undo-tree-id10858 . -4) (undo-tree-id10859 . -4) (undo-tree-id10860 . -4) (undo-tree-id10861 . -4) (undo-tree-id10862 . -4) (undo-tree-id10863 . -4) (undo-tree-id10864 . -4) (undo-tree-id10865 . -4) (undo-tree-id10866 . -4) (undo-tree-id10867 . -4) (undo-tree-id10868 . -4) (undo-tree-id10869 . -4) (undo-tree-id10870 . -4) (undo-tree-id10871 . -4) (undo-tree-id10872 . -4) (undo-tree-id10873 . -4) (undo-tree-id10874 . -4) (undo-tree-id10875 . -4) (undo-tree-id10876 . -4) (undo-tree-id10877 . -4) (undo-tree-id10878 . -4) (undo-tree-id10879 . -4) (undo-tree-id10880 . -4) (undo-tree-id10881 . -4) (undo-tree-id10882 . -4) (undo-tree-id10883 . -4) (undo-tree-id10884 . -4) (undo-tree-id10885 . -4) (undo-tree-id10886 . -4) (undo-tree-id10887 . -4) (undo-tree-id10888 . -4) (undo-tree-id10889 . -4) (undo-tree-id10890 . -4) (undo-tree-id10891 . -4) 2147) nil (26040 63630 459161 312000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -2141) (undo-tree-id10652 . -1) (undo-tree-id10653 . -1) (undo-tree-id10654 . -1) (undo-tree-id10655 . -1) (undo-tree-id10656 . -1) (undo-tree-id10657 . -1) (undo-tree-id10658 . -1) (undo-tree-id10659 . -1) (undo-tree-id10660 . -1) (undo-tree-id10661 . -1) (undo-tree-id10662 . -1) (undo-tree-id10663 . -1) (undo-tree-id10664 . -1) (undo-tree-id10665 . -1) (undo-tree-id10666 . -1) (undo-tree-id10667 . -1) (undo-tree-id10668 . -1) (undo-tree-id10669 . -1) (undo-tree-id10670 . -1) (undo-tree-id10671 . -1) (undo-tree-id10672 . -1) (undo-tree-id10673 . -1) (undo-tree-id10674 . -1) (undo-tree-id10675 . -1) (undo-tree-id10676 . -1) (undo-tree-id10677 . -1) (undo-tree-id10678 . -1) (undo-tree-id10679 . -1) (undo-tree-id10680 . -1) (undo-tree-id10681 . -1) (undo-tree-id10682 . -1) (undo-tree-id10683 . -1) (undo-tree-id10684 . -1) (undo-tree-id10685 . -1) (undo-tree-id10686 . -1) (undo-tree-id10687 . -1) (undo-tree-id10688 . -1) (undo-tree-id10689 . -1) (undo-tree-id10690 . -1) (undo-tree-id10691 . -1) (undo-tree-id10692 . -1) (undo-tree-id10693 . -1) (undo-tree-id10694 . -1) (undo-tree-id10695 . -1) (undo-tree-id10696 . -1) (undo-tree-id10697 . -1) (undo-tree-id10698 . -1) (undo-tree-id10699 . -1) (undo-tree-id10700 . -1) (undo-tree-id10701 . -1) (undo-tree-id10702 . -1) (undo-tree-id10703 . -1) (undo-tree-id10704 . -1) (undo-tree-id10705 . -1) (undo-tree-id10706 . -1) (undo-tree-id10707 . -1) (undo-tree-id10708 . -1) (undo-tree-id10709 . -1) (undo-tree-id10710 . -1) (undo-tree-id10711 . -1) (undo-tree-id10712 . -1) (undo-tree-id10713 . -1) (undo-tree-id10714 . -1) (undo-tree-id10715 . -1) (undo-tree-id10716 . -1) (undo-tree-id10717 . -1) (undo-tree-id10718 . -1) (undo-tree-id10719 . -1) (undo-tree-id10720 . -1) (undo-tree-id10721 . -1) (undo-tree-id10722 . -1) (undo-tree-id10723 . -1) (undo-tree-id10724 . -1) (undo-tree-id10725 . -1) (undo-tree-id10726 . -1) (undo-tree-id10727 . -1) (undo-tree-id10728 . -1) (undo-tree-id10729 . -1) (undo-tree-id10730 . -1) (undo-tree-id10731 . -1) (undo-tree-id10732 . -1) (undo-tree-id10733 . -1) (#("/" 0 1 (face font-lock-string-face fontified t)) . -2142) (undo-tree-id10734 . -1) (undo-tree-id10735 . -1) (undo-tree-id10736 . -1) (undo-tree-id10737 . -1) (undo-tree-id10738 . -1) (undo-tree-id10739 . -1) (undo-tree-id10740 . -1) (undo-tree-id10741 . -1) (undo-tree-id10742 . -1) (undo-tree-id10743 . -1) (undo-tree-id10744 . -1) (undo-tree-id10745 . -1) (undo-tree-id10746 . -1) (undo-tree-id10747 . -1) (undo-tree-id10748 . -1) (undo-tree-id10749 . -1) (undo-tree-id10750 . -1) (undo-tree-id10751 . -1) (undo-tree-id10752 . -1) (undo-tree-id10753 . -1) (undo-tree-id10754 . -1) (undo-tree-id10755 . -1) (undo-tree-id10756 . -1) (undo-tree-id10757 . -1) (undo-tree-id10758 . -1) (undo-tree-id10759 . -1) (undo-tree-id10760 . -1) (undo-tree-id10761 . -1) (undo-tree-id10762 . -1) (undo-tree-id10763 . -1) (undo-tree-id10764 . -1) (undo-tree-id10765 . -1) (undo-tree-id10766 . -1) (undo-tree-id10767 . -1) (undo-tree-id10768 . -1) (undo-tree-id10769 . -1) (undo-tree-id10770 . -1) (undo-tree-id10771 . -1) (undo-tree-id10772 . -1) (undo-tree-id10773 . -1) (undo-tree-id10774 . -1) (undo-tree-id10775 . -1) (undo-tree-id10776 . -1) (undo-tree-id10777 . -1) (undo-tree-id10778 . -1) (undo-tree-id10779 . -1) (undo-tree-id10780 . -1) (undo-tree-id10781 . -1) (undo-tree-id10782 . -1) (undo-tree-id10783 . -1) (undo-tree-id10784 . -1) (undo-tree-id10785 . -1) (undo-tree-id10786 . -1) (undo-tree-id10787 . -1) (undo-tree-id10788 . -1) (undo-tree-id10789 . -1) (undo-tree-id10790 . -1) (undo-tree-id10791 . -1) (undo-tree-id10792 . -1) (undo-tree-id10793 . -1) (undo-tree-id10794 . -1) (undo-tree-id10795 . -1) (undo-tree-id10796 . -1) (undo-tree-id10797 . -1) (undo-tree-id10798 . -1) (undo-tree-id10799 . -1) (undo-tree-id10800 . -1) (undo-tree-id10801 . -1) (undo-tree-id10802 . -1) (undo-tree-id10803 . -1) (undo-tree-id10804 . -1) (undo-tree-id10805 . -1) (undo-tree-id10806 . -1) (undo-tree-id10807 . -1) (undo-tree-id10808 . -1) (undo-tree-id10809 . -1) (undo-tree-id10810 . -1) (undo-tree-id10811 . -1) (undo-tree-id10812 . -1) (undo-tree-id10813 . -1) 2143) nil (26040 63630 458512 608000) 0 nil])
([nil nil ((2141 . 2147)) nil (26040 63630 458363 493000) 0 nil])
([nil nil ((65 . 73) (2141 . 2141) (2141 . 2147) (#("c_char" 0 6 (fontified nil)) . 2141) (2141 . 2147) (#("c_char (use std::os::raw::c_char)" 0 33 (fontified nil)) . -2141) (2141 . 2174) (#("c_char" 0 6 (fontified t)) . -2141) (undo-tree-id10632 . -6) (undo-tree-id10633 . -1) (undo-tree-id10634 . -1) (undo-tree-id10635 . -1) (undo-tree-id10636 . -1) (undo-tree-id10637 . -1) (undo-tree-id10638 . -2) (undo-tree-id10639 . -2) (undo-tree-id10640 . -2) (undo-tree-id10641 . -3) (undo-tree-id10642 . -3) (undo-tree-id10643 . -4) (undo-tree-id10644 . -4) (undo-tree-id10645 . -5) (undo-tree-id10646 . -5) (undo-tree-id10647 . -6) (undo-tree-id10648 . -6) (undo-tree-id10649 . -6) (undo-tree-id10650 . -6) (undo-tree-id10651 . -6) 2147) nil (26040 63630 458361 182000) 0 nil])
([nil nil ((2155 . 2161)) nil (26040 63630 458098 782000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -2157) (undo-tree-id10563 . -1) (undo-tree-id10564 . -1) (undo-tree-id10565 . -1) (undo-tree-id10566 . -1) (undo-tree-id10567 . -1) (undo-tree-id10568 . -1) (undo-tree-id10569 . -1) (undo-tree-id10570 . -1) (undo-tree-id10571 . -1) (undo-tree-id10572 . -1) (undo-tree-id10573 . -1) (undo-tree-id10574 . -1) (undo-tree-id10575 . -1) (undo-tree-id10576 . -1) (undo-tree-id10577 . -1) (undo-tree-id10578 . -1) (undo-tree-id10579 . -1) (undo-tree-id10580 . -1) (undo-tree-id10581 . -1) (undo-tree-id10582 . -1) (undo-tree-id10583 . -1) (undo-tree-id10584 . -1) (undo-tree-id10585 . -1) (undo-tree-id10586 . -1) (#("r" 0 1 (fontified t)) . -2158) (undo-tree-id10587 . -1) (undo-tree-id10588 . -1) (undo-tree-id10589 . -1) (undo-tree-id10590 . -1) (undo-tree-id10591 . -1) (undo-tree-id10592 . -1) (undo-tree-id10593 . -1) (undo-tree-id10594 . -1) (undo-tree-id10595 . -1) (undo-tree-id10596 . -1) (undo-tree-id10597 . -1) (undo-tree-id10598 . -1) (undo-tree-id10599 . -1) (undo-tree-id10600 . -1) (undo-tree-id10601 . -1) (undo-tree-id10602 . -1) (undo-tree-id10603 . -1) (undo-tree-id10604 . -1) (undo-tree-id10605 . -1) (#("o" 0 1 (fontified t)) . -2159) (undo-tree-id10606 . -1) (undo-tree-id10607 . -1) (undo-tree-id10608 . -1) (undo-tree-id10609 . -1) (undo-tree-id10610 . -1) (undo-tree-id10611 . -1) (undo-tree-id10612 . -1) (undo-tree-id10613 . -1) (undo-tree-id10614 . -1) (undo-tree-id10615 . -1) (undo-tree-id10616 . -1) (undo-tree-id10617 . -1) (undo-tree-id10618 . -1) (undo-tree-id10619 . -1) (undo-tree-id10620 . -1) (#("m" 0 1 (fontified t)) . -2160) (undo-tree-id10621 . -1) (undo-tree-id10622 . -1) (undo-tree-id10623 . -1) (undo-tree-id10624 . -1) (undo-tree-id10625 . -1) (undo-tree-id10626 . -1) (undo-tree-id10627 . -1) (undo-tree-id10628 . -1) (undo-tree-id10629 . -1) (undo-tree-id10630 . -1) (undo-tree-id10631 . -1) 2161) nil (26040 63630 458095 558000) 0 nil])
([nil nil ((2157 . 2160)) nil (26040 63630 458048 52000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -2157) (undo-tree-id10511 . -1) (undo-tree-id10512 . -1) (undo-tree-id10513 . -1) (undo-tree-id10514 . -1) (undo-tree-id10515 . -1) (undo-tree-id10516 . -1) (undo-tree-id10517 . -1) (undo-tree-id10518 . -1) (undo-tree-id10519 . -1) (undo-tree-id10520 . -1) (undo-tree-id10521 . -1) (undo-tree-id10522 . -1) (undo-tree-id10523 . -1) (undo-tree-id10524 . -1) (undo-tree-id10525 . -1) (undo-tree-id10526 . -1) (undo-tree-id10527 . -1) (undo-tree-id10528 . -1) (undo-tree-id10529 . -1) (undo-tree-id10530 . -1) (undo-tree-id10531 . -1) (undo-tree-id10532 . -1) (undo-tree-id10533 . -1) (undo-tree-id10534 . -1) (undo-tree-id10535 . -1) (undo-tree-id10536 . -1) (#("e" 0 1 (fontified t)) . -2158) (undo-tree-id10537 . -1) (undo-tree-id10538 . -1) (undo-tree-id10539 . -1) (undo-tree-id10540 . -1) (undo-tree-id10541 . -1) (undo-tree-id10542 . -1) (undo-tree-id10543 . -1) (undo-tree-id10544 . -1) (undo-tree-id10545 . -1) (undo-tree-id10546 . -1) (undo-tree-id10547 . -1) (undo-tree-id10548 . -1) (undo-tree-id10549 . -1) (undo-tree-id10550 . -1) (undo-tree-id10551 . -1) (undo-tree-id10552 . -1) (#("w" 0 1 (fontified t)) . -2159) (undo-tree-id10553 . -1) (undo-tree-id10554 . -1) (undo-tree-id10555 . -1) (undo-tree-id10556 . -1) (undo-tree-id10557 . -1) (undo-tree-id10558 . -1) (undo-tree-id10559 . -1) (undo-tree-id10560 . -1) (undo-tree-id10561 . -1) (undo-tree-id10562 . -1) 2160) nil (26040 63630 458045 573000) 0 nil])
([nil nil ((2157 . 2158)) nil (26040 63630 458007 66000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -2157) (undo-tree-id10500 . -1) (undo-tree-id10501 . -1) (undo-tree-id10502 . -1) (undo-tree-id10503 . -1) (undo-tree-id10504 . -1) (undo-tree-id10505 . -1) (undo-tree-id10506 . -1) (undo-tree-id10507 . -1) (undo-tree-id10508 . -1) (undo-tree-id10509 . -1) (undo-tree-id10510 . -1) 2158) nil (26040 63630 458005 833000) 0 nil])
([nil nil ((2157 . 2159)) nil (26040 63630 457997 949000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2162 2175 nil nil nil t #s(yas--exit 2176 nil))) #s(yas--exit 2176 nil) 84 nil #s(yas--field 1 2162 2175 nil nil nil t #s(yas--exit 2176 nil)) nil nil)) (2157 . 2168) (#("from(${1:value})$0" 0 18 (fontified nil)) . 2157) (2157 . 2175) (#("fr" 0 2 (fontified nil)) . 2157) (2157 . 2159) (#("from(…) (as From)" 0 17 (fontified nil)) . -2157) (2157 . 2174) (#("fr" 0 2 (fontified t)) . -2157) (undo-tree-id10488 . -2) (undo-tree-id10489 . -2) (undo-tree-id10490 . -1) (undo-tree-id10491 . -1) (undo-tree-id10492 . -2) (undo-tree-id10493 . -2) (undo-tree-id10494 . -2) (undo-tree-id10495 . -2) (undo-tree-id10496 . -2) (undo-tree-id10497 . -2) (undo-tree-id10498 . -2) (undo-tree-id10499 . -2) 2159) nil (26040 63630 457996 142000) 0 nil])
([nil nil ((2163 . 2164) (#("value" 0 5 (fontified nil)) . 2163) (undo-tree-id10487 . -5) (2162 . 2163)) nil (26040 63630 457984 656000) 0 nil])
([nil nil ((2163 . 2172)) nil (26040 63630 457975 573000) 0 nil])
([nil nil ((2172 . 2174)) nil (26040 63630 457971 209000) 0 nil])
([nil nil ((apply yas--snippet-revive 2157 2176 #s(yas--snippet nil (#s(yas--field 1 2162 2175 nil nil nil t #s(yas--exit 2176 nil))) #s(yas--exit 2176 nil) 84 nil #s(yas--field 1 2162 2175 nil nil nil t #s(yas--exit 2176 nil)) nil nil))) nil (26040 63685 92069 961000) 0 nil])
([nil nil ((#("video0\")" 0 7 (face font-lock-string-face fontified t) 7 8 (face (rainbow-delimiters-depth-4-face) fontified t)) . -2168) (undo-tree-id11696 . -8) (undo-tree-id11697 . -8) (undo-tree-id11698 . 2) (undo-tree-id11699 . -6) (undo-tree-id11700 . -6) (undo-tree-id11701 . -6) (undo-tree-id11702 . -6) (undo-tree-id11703 . -6) (undo-tree-id11704 . -6) (undo-tree-id11705 . -6) (undo-tree-id11706 . -6) (undo-tree-id11707 . -6) (undo-tree-id11708 . -6) (undo-tree-id11709 . -6) (undo-tree-id11710 . -7) (undo-tree-id11711 . -8) (undo-tree-id11712 . -8) (undo-tree-id11713 . -8) (undo-tree-id11714 . -8) (undo-tree-id11715 . -8) (undo-tree-id11716 . -8) (undo-tree-id11717 . -8) (undo-tree-id11718 . -8) (undo-tree-id11719 . -8) (undo-tree-id11720 . -8) (undo-tree-id11721 . -8) (undo-tree-id11722 . -8) (undo-tree-id11723 . -8) 2176 (t 26040 63630 507506 330000)) nil (26040 63685 92068 243000) 0 nil])
([nil nil ((#("dev/" 0 4 (face font-lock-string-face fontified t)) . -2164) (undo-tree-id11667 . -4) (undo-tree-id11668 . -4) (undo-tree-id11669 . -4) (undo-tree-id11670 . -4) (undo-tree-id11671 . -4) (undo-tree-id11672 . -4) (undo-tree-id11673 . -4) (undo-tree-id11674 . -4) (undo-tree-id11675 . -4) (undo-tree-id11676 . -4) (undo-tree-id11677 . -4) (undo-tree-id11678 . -4) (undo-tree-id11679 . -4) (undo-tree-id11680 . -4) (undo-tree-id11681 . -4) (undo-tree-id11682 . -4) (undo-tree-id11683 . -4) (undo-tree-id11684 . -4) (undo-tree-id11685 . -4) (undo-tree-id11686 . -4) (undo-tree-id11687 . -4) (undo-tree-id11688 . -4) (undo-tree-id11689 . -4) (undo-tree-id11690 . -4) (undo-tree-id11691 . -4) (undo-tree-id11692 . -4) (undo-tree-id11693 . -4) (undo-tree-id11694 . -4) (undo-tree-id11695 . -4) 2168) nil (26040 63685 92047 965000) 0 nil])
([nil nil ((#("from(\"/" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t) 5 7 (face font-lock-string-face fontified t)) . -2157) (undo-tree-id11635 . -7) (undo-tree-id11636 . -7) (undo-tree-id11637 . -5) (undo-tree-id11638 . -7) (undo-tree-id11639 . -7) (undo-tree-id11640 . -7) (undo-tree-id11641 . -7) (undo-tree-id11642 . -7) (undo-tree-id11643 . -7) (undo-tree-id11644 . -7) (undo-tree-id11645 . -7) (undo-tree-id11646 . -7) (undo-tree-id11647 . -7) (undo-tree-id11648 . -7) (undo-tree-id11649 . -7) (undo-tree-id11650 . -7) (undo-tree-id11651 . -7) (undo-tree-id11652 . -7) (undo-tree-id11653 . -7) (undo-tree-id11654 . -7) (undo-tree-id11655 . -7) (undo-tree-id11656 . -7) (undo-tree-id11657 . -7) (undo-tree-id11658 . -7) (undo-tree-id11659 . -7) (undo-tree-id11660 . -7) (undo-tree-id11661 . -7) (undo-tree-id11662 . -7) (undo-tree-id11663 . -7) (undo-tree-id11664 . -7) (undo-tree-id11665 . -7) (undo-tree-id11666 . -7) 2164) nil (26040 63685 92026 884000) 0 nil])
([nil nil ((#("char::" 0 4 (face font-lock-constant-face fontified t) 4 6 (fontified t)) . -2151) (undo-tree-id11533 . -6) (undo-tree-id11534 . -6) (undo-tree-id11535 . -6) (undo-tree-id11536 . -6) (undo-tree-id11537 . -6) (undo-tree-id11538 . -6) (undo-tree-id11539 . -6) (undo-tree-id11540 . -6) (undo-tree-id11541 . -6) (undo-tree-id11542 . -6) (undo-tree-id11543 . -6) (undo-tree-id11544 . -6) (undo-tree-id11545 . -6) (undo-tree-id11546 . -6) (undo-tree-id11547 . -6) (undo-tree-id11548 . -6) (undo-tree-id11549 . -6) (undo-tree-id11550 . -6) (undo-tree-id11551 . -6) (undo-tree-id11552 . -6) (undo-tree-id11553 . -6) (undo-tree-id11554 . -6) (undo-tree-id11555 . -6) (undo-tree-id11556 . -6) (undo-tree-id11557 . -6) (undo-tree-id11558 . -6) (undo-tree-id11559 . -6) (undo-tree-id11560 . -6) (undo-tree-id11561 . -6) (undo-tree-id11562 . -6) (undo-tree-id11563 . -6) (undo-tree-id11564 . -6) (undo-tree-id11565 . -6) (undo-tree-id11566 . -6) (undo-tree-id11567 . -6) (undo-tree-id11568 . -6) (undo-tree-id11569 . -6) (undo-tree-id11570 . -6) (undo-tree-id11571 . -6) (undo-tree-id11572 . -6) (undo-tree-id11573 . -6) (undo-tree-id11574 . -6) (undo-tree-id11575 . -6) (undo-tree-id11576 . -6) (undo-tree-id11577 . -6) (undo-tree-id11578 . -6) (undo-tree-id11579 . -6) (undo-tree-id11580 . -6) (undo-tree-id11581 . -6) (undo-tree-id11582 . -6) (undo-tree-id11583 . -6) (undo-tree-id11584 . -6) (undo-tree-id11585 . -6) (undo-tree-id11586 . -6) (undo-tree-id11587 . -6) (undo-tree-id11588 . -6) (undo-tree-id11589 . -6) (undo-tree-id11590 . -6) (undo-tree-id11591 . -6) (undo-tree-id11592 . -6) (undo-tree-id11593 . -6) (undo-tree-id11594 . -6) (undo-tree-id11595 . -6) (undo-tree-id11596 . -6) (undo-tree-id11597 . -6) (undo-tree-id11598 . -6) (undo-tree-id11599 . -6) (undo-tree-id11600 . -6) (undo-tree-id11601 . -6) (undo-tree-id11602 . -6) (undo-tree-id11603 . -6) (undo-tree-id11604 . -6) (undo-tree-id11605 . -6) (undo-tree-id11606 . -6) (undo-tree-id11607 . -6) (undo-tree-id11608 . -6) (undo-tree-id11609 . -6) (undo-tree-id11610 . -6) (undo-tree-id11611 . -6) (undo-tree-id11612 . -6) (undo-tree-id11613 . -6) (undo-tree-id11614 . -6) (undo-tree-id11615 . -6) (undo-tree-id11616 . -6) (undo-tree-id11617 . -6) (undo-tree-id11618 . -6) (undo-tree-id11619 . -6) (undo-tree-id11620 . -6) (undo-tree-id11621 . -6) (undo-tree-id11622 . -6) (undo-tree-id11623 . -6) (undo-tree-id11624 . -6) (undo-tree-id11625 . -6) (undo-tree-id11626 . -6) (undo-tree-id11627 . -6) (undo-tree-id11628 . -6) (undo-tree-id11629 . -6) (undo-tree-id11630 . -6) (undo-tree-id11631 . -6) (undo-tree-id11632 . -6) (undo-tree-id11633 . -6) (undo-tree-id11634 . -6) 2157) nil (26040 63685 92000 844000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -2149) (undo-tree-id11309 . -1) (undo-tree-id11310 . -1) (undo-tree-id11311 . -1) (undo-tree-id11312 . -1) (undo-tree-id11313 . -1) (undo-tree-id11314 . -1) (undo-tree-id11315 . -1) (undo-tree-id11316 . -1) (undo-tree-id11317 . -1) (undo-tree-id11318 . -1) (undo-tree-id11319 . -1) (undo-tree-id11320 . -1) (undo-tree-id11321 . -1) (undo-tree-id11322 . -1) (undo-tree-id11323 . -1) (undo-tree-id11324 . -1) (undo-tree-id11325 . -1) (undo-tree-id11326 . -1) (undo-tree-id11327 . -1) (undo-tree-id11328 . -1) (undo-tree-id11329 . -1) (undo-tree-id11330 . -1) (undo-tree-id11331 . -1) (undo-tree-id11332 . -1) (undo-tree-id11333 . -1) (undo-tree-id11334 . -1) (undo-tree-id11335 . -1) (undo-tree-id11336 . -1) (undo-tree-id11337 . -1) (undo-tree-id11338 . -1) (undo-tree-id11339 . -1) (undo-tree-id11340 . -1) (undo-tree-id11341 . -1) (undo-tree-id11342 . -1) (undo-tree-id11343 . -1) (undo-tree-id11344 . -1) (undo-tree-id11345 . -1) (undo-tree-id11346 . -1) (undo-tree-id11347 . -1) (undo-tree-id11348 . -1) (undo-tree-id11349 . -1) (undo-tree-id11350 . -1) (undo-tree-id11351 . -1) (undo-tree-id11352 . -1) (undo-tree-id11353 . -1) (undo-tree-id11354 . -1) (undo-tree-id11355 . -1) (undo-tree-id11356 . -1) (undo-tree-id11357 . -1) (undo-tree-id11358 . -1) (undo-tree-id11359 . -1) (undo-tree-id11360 . -1) (undo-tree-id11361 . -1) (undo-tree-id11362 . -1) (undo-tree-id11363 . -1) (undo-tree-id11364 . -1) (undo-tree-id11365 . -1) (undo-tree-id11366 . -1) (undo-tree-id11367 . -1) (undo-tree-id11368 . -1) (undo-tree-id11369 . -1) (undo-tree-id11370 . -1) (undo-tree-id11371 . -1) (undo-tree-id11372 . -1) (undo-tree-id11373 . -1) (undo-tree-id11374 . -1) (undo-tree-id11375 . -1) (undo-tree-id11376 . -1) (undo-tree-id11377 . -1) (undo-tree-id11378 . -1) (undo-tree-id11379 . -1) (undo-tree-id11380 . -1) (undo-tree-id11381 . -1) (undo-tree-id11382 . -1) (undo-tree-id11383 . -1) (undo-tree-id11384 . -1) (undo-tree-id11385 . -1) (undo-tree-id11386 . -1) (undo-tree-id11387 . -1) (undo-tree-id11388 . -1) (undo-tree-id11389 . -1) (undo-tree-id11390 . -1) (undo-tree-id11391 . -1) (undo-tree-id11392 . -1) (undo-tree-id11393 . -1) (undo-tree-id11394 . -1) (undo-tree-id11395 . -1) (undo-tree-id11396 . -1) (undo-tree-id11397 . -1) (undo-tree-id11398 . -1) (undo-tree-id11399 . -1) (undo-tree-id11400 . -1) (undo-tree-id11401 . -1) (undo-tree-id11402 . -1) (undo-tree-id11403 . -1) (undo-tree-id11404 . -1) (undo-tree-id11405 . -1) (undo-tree-id11406 . -1) (undo-tree-id11407 . -1) (undo-tree-id11408 . -1) (undo-tree-id11409 . -1) (undo-tree-id11410 . -1) (undo-tree-id11411 . -1) (undo-tree-id11412 . -1) (undo-tree-id11413 . -1) (undo-tree-id11414 . -1) (undo-tree-id11415 . -1) (undo-tree-id11416 . -1) (undo-tree-id11417 . -1) (undo-tree-id11418 . -1) (undo-tree-id11419 . -1) (undo-tree-id11420 . -1) (undo-tree-id11421 . -1) (#("_" 0 1 (fontified t)) . -2150) (undo-tree-id11422 . -1) (undo-tree-id11423 . -1) (undo-tree-id11424 . -1) (undo-tree-id11425 . -1) (undo-tree-id11426 . -1) (undo-tree-id11427 . -1) (undo-tree-id11428 . -1) (undo-tree-id11429 . -1) (undo-tree-id11430 . -1) (undo-tree-id11431 . -1) (undo-tree-id11432 . -1) (undo-tree-id11433 . -1) (undo-tree-id11434 . -1) (undo-tree-id11435 . -1) (undo-tree-id11436 . -1) (undo-tree-id11437 . -1) (undo-tree-id11438 . -1) (undo-tree-id11439 . -1) (undo-tree-id11440 . -1) (undo-tree-id11441 . -1) (undo-tree-id11442 . -1) (undo-tree-id11443 . -1) (undo-tree-id11444 . -1) (undo-tree-id11445 . -1) (undo-tree-id11446 . -1) (undo-tree-id11447 . -1) (undo-tree-id11448 . -1) (undo-tree-id11449 . -1) (undo-tree-id11450 . -1) (undo-tree-id11451 . -1) (undo-tree-id11452 . -1) (undo-tree-id11453 . -1) (undo-tree-id11454 . -1) (undo-tree-id11455 . -1) (undo-tree-id11456 . -1) (undo-tree-id11457 . -1) (undo-tree-id11458 . -1) (undo-tree-id11459 . -1) (undo-tree-id11460 . -1) (undo-tree-id11461 . -1) (undo-tree-id11462 . -1) (undo-tree-id11463 . -1) (undo-tree-id11464 . -1) (undo-tree-id11465 . -1) (undo-tree-id11466 . -1) (undo-tree-id11467 . -1) (undo-tree-id11468 . -1) (undo-tree-id11469 . -1) (undo-tree-id11470 . -1) (undo-tree-id11471 . -1) (undo-tree-id11472 . -1) (undo-tree-id11473 . -1) (undo-tree-id11474 . -1) (undo-tree-id11475 . -1) (undo-tree-id11476 . -1) (undo-tree-id11477 . -1) (undo-tree-id11478 . -1) (undo-tree-id11479 . -1) (undo-tree-id11480 . -1) (undo-tree-id11481 . -1) (undo-tree-id11482 . -1) (undo-tree-id11483 . -1) (undo-tree-id11484 . -1) (undo-tree-id11485 . -1) (undo-tree-id11486 . -1) (undo-tree-id11487 . -1) (undo-tree-id11488 . -1) (undo-tree-id11489 . -1) (undo-tree-id11490 . -1) (undo-tree-id11491 . -1) (undo-tree-id11492 . -1) (undo-tree-id11493 . -1) (undo-tree-id11494 . -1) (undo-tree-id11495 . -1) (undo-tree-id11496 . -1) (undo-tree-id11497 . -1) (undo-tree-id11498 . -1) (undo-tree-id11499 . -1) (undo-tree-id11500 . -1) (undo-tree-id11501 . -1) (undo-tree-id11502 . -1) (undo-tree-id11503 . -1) (undo-tree-id11504 . -1) (undo-tree-id11505 . -1) (undo-tree-id11506 . -1) (undo-tree-id11507 . -1) (undo-tree-id11508 . -1) (undo-tree-id11509 . -1) (undo-tree-id11510 . -1) (undo-tree-id11511 . -1) (undo-tree-id11512 . -1) (undo-tree-id11513 . -1) (undo-tree-id11514 . -1) (undo-tree-id11515 . -1) (undo-tree-id11516 . -1) (undo-tree-id11517 . -1) (undo-tree-id11518 . -1) (undo-tree-id11519 . -1) (undo-tree-id11520 . -1) (undo-tree-id11521 . -1) (undo-tree-id11522 . -1) (undo-tree-id11523 . -1) (undo-tree-id11524 . -1) (undo-tree-id11525 . -1) (undo-tree-id11526 . -1) (undo-tree-id11527 . -1) (undo-tree-id11528 . -1) (undo-tree-id11529 . -1) (undo-tree-id11530 . -1) (undo-tree-id11531 . -1) (undo-tree-id11532 . -1) 2151) nil (26040 63685 91573 347000) 0 nil])
([nil nil ((2149 . 2151)) nil (26040 63685 91152 372000) 0 nil])
([nil nil ((2150 . 2152)) nil (26040 63685 91151 766000) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-string-face fontified t)) . -2150) (undo-tree-id11293 . -1) (undo-tree-id11294 . -1) (undo-tree-id11295 . -1) (undo-tree-id11296 . -1) (undo-tree-id11297 . -1) (undo-tree-id11298 . -1) (undo-tree-id11299 . -1) (undo-tree-id11300 . -1) (undo-tree-id11301 . -1) (undo-tree-id11302 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -2151) (undo-tree-id11303 . -1) (undo-tree-id11304 . -1) (undo-tree-id11305 . -1) (undo-tree-id11306 . -1) (undo-tree-id11307 . -1) (undo-tree-id11308 . -1) 2152) nil (26040 63685 91150 346000) 0 nil])
([nil nil ((2150 . 2156)) nil (26040 63685 91138 248000) 0 nil])
([nil nil ((#("o" 0 1 (face font-lock-string-face fontified t)) . -2154) (undo-tree-id11285 . -1) (undo-tree-id11286 . -1) (undo-tree-id11287 . -1) (undo-tree-id11288 . -1) (undo-tree-id11289 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -2155) (undo-tree-id11290 . -1) (undo-tree-id11291 . -1) (undo-tree-id11292 . -1) 2156) nil (26040 63685 91137 87000) 0 nil])
([nil nil ((2154 . 2161)) nil (26040 63685 91100 248000) 0 nil])
([nil nil ((#("9" 0 1 (face font-lock-string-face fontified t)) . -2160) (undo-tree-id11282 . -1) (undo-tree-id11283 . -1) (undo-tree-id11284 . -1) 2161) nil (26040 63685 91099 428000) 0 nil])
([nil nil ((2160 . 2161)) nil (26040 63685 91096 816000) 0 nil])
([nil nil ((2162 . 2163)) nil (26040 63685 91096 130000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -2162) (undo-tree-id11279 . -1) (undo-tree-id11280 . -1) (undo-tree-id11281 . -1) 2163) nil (26040 63685 91095 311000) 0 nil])
([nil nil ((2162 . 2163)) nil (26040 63685 91092 569000) 0 nil])
([nil nil ((apply yas--snippet-revive 2163 2170 #s(yas--snippet nil nil #s(yas--exit 2170 nil) 85 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2170 nil) 85 nil nil nil nil)) (2163 . 2170) (#("bytes()$0" 0 9 (fontified nil)) . 2163) (2163 . 2172) (#("bytes()" 0 7 (fontified nil)) . -2163) (2163 . 2170)) nil (26040 63685 91091 648000) 0 nil])
([nil nil ((2170 . 2171)) nil (26040 63685 91090 233000) 0 nil])
([nil nil ((2171 . 2174)) nil (26040 63685 91089 500000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -2171) (undo-tree-id11245 . -1) (undo-tree-id11246 . -1) (undo-tree-id11247 . -1) (undo-tree-id11248 . -1) (undo-tree-id11249 . -1) (undo-tree-id11250 . -1) (undo-tree-id11251 . -1) (undo-tree-id11252 . -1) (undo-tree-id11253 . -1) (undo-tree-id11254 . -1) (undo-tree-id11255 . -1) (undo-tree-id11256 . -1) (undo-tree-id11257 . -1) (undo-tree-id11258 . -1) (undo-tree-id11259 . -1) (undo-tree-id11260 . -1) (undo-tree-id11261 . -1) (undo-tree-id11262 . -1) (#("r" 0 1 (fontified t)) . -2172) (undo-tree-id11263 . -1) (undo-tree-id11264 . -1) (undo-tree-id11265 . -1) (undo-tree-id11266 . -1) (undo-tree-id11267 . -1) (undo-tree-id11268 . -1) (undo-tree-id11269 . -1) (undo-tree-id11270 . -1) (undo-tree-id11271 . -1) (undo-tree-id11272 . -1) (undo-tree-id11273 . -1) (#("t" 0 1 (fontified t)) . -2173) (undo-tree-id11274 . -1) (undo-tree-id11275 . -1) (undo-tree-id11276 . -1) (undo-tree-id11277 . -1) (undo-tree-id11278 . -1) 2174) nil (26040 63685 91087 456000) 0 nil])
([nil nil ((2171 . 2174)) nil (26040 63685 91063 778000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2170) (undo-tree-id11174 . -1) (undo-tree-id11175 . -1) (undo-tree-id11176 . -1) (undo-tree-id11177 . -1) (undo-tree-id11178 . -1) (undo-tree-id11179 . -1) (undo-tree-id11180 . -1) (undo-tree-id11181 . -1) (undo-tree-id11182 . -1) (undo-tree-id11183 . -1) (undo-tree-id11184 . -1) (undo-tree-id11185 . -1) (undo-tree-id11186 . -1) (undo-tree-id11187 . -1) (undo-tree-id11188 . -1) (undo-tree-id11189 . -1) (undo-tree-id11190 . -1) (undo-tree-id11191 . -1) (undo-tree-id11192 . -1) (undo-tree-id11193 . -1) (undo-tree-id11194 . -1) (undo-tree-id11195 . -1) (undo-tree-id11196 . -1) (undo-tree-id11197 . -1) (undo-tree-id11198 . -1) (undo-tree-id11199 . -1) (undo-tree-id11200 . -1) (undo-tree-id11201 . -1) (undo-tree-id11202 . -1) (undo-tree-id11203 . -1) (undo-tree-id11204 . -1) (undo-tree-id11205 . -1) (undo-tree-id11206 . -1) (undo-tree-id11207 . -1) (undo-tree-id11208 . -1) (undo-tree-id11209 . -1) (undo-tree-id11210 . -1) (undo-tree-id11211 . -1) (undo-tree-id11212 . -1) (#("p" 0 1 (fontified nil)) . -2171) (undo-tree-id11213 . -1) (undo-tree-id11214 . -1) (undo-tree-id11215 . -1) (undo-tree-id11216 . -1) (undo-tree-id11217 . -1) (undo-tree-id11218 . -1) (undo-tree-id11219 . -1) (undo-tree-id11220 . -1) (undo-tree-id11221 . -1) (undo-tree-id11222 . -1) (undo-tree-id11223 . -1) (undo-tree-id11224 . -1) (undo-tree-id11225 . -1) (#("t" 0 1 (fontified t)) . -2172) (undo-tree-id11226 . -1) (undo-tree-id11227 . -1) (undo-tree-id11228 . -1) (undo-tree-id11229 . -1) (undo-tree-id11230 . -1) (undo-tree-id11231 . -1) (undo-tree-id11232 . -1) (undo-tree-id11233 . -1) (undo-tree-id11234 . -1) (undo-tree-id11235 . -1) (undo-tree-id11236 . -1) (#("r" 0 1 (fontified t)) . -2173) (undo-tree-id11237 . -1) (undo-tree-id11238 . -1) (undo-tree-id11239 . -1) (undo-tree-id11240 . -1) (undo-tree-id11241 . -1) (undo-tree-id11242 . -1) (undo-tree-id11243 . -1) (undo-tree-id11244 . -1) 2174) nil (26040 63685 91060 27000) 0 nil])
([nil nil ((#("bytes()" 0 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-4-face) fontified t) 6 7 (face (rainbow-delimiters-depth-4-face) fontified t)) . -2163) (undo-tree-id11112 . -7) (undo-tree-id11113 . -7) (undo-tree-id11114 . -7) (undo-tree-id11115 . -7) (undo-tree-id11116 . -7) (undo-tree-id11117 . -7) (undo-tree-id11118 . -7) (undo-tree-id11119 . -7) (undo-tree-id11120 . -7) (undo-tree-id11121 . -7) (undo-tree-id11122 . -7) (undo-tree-id11123 . -7) (undo-tree-id11124 . -7) (undo-tree-id11125 . -7) (undo-tree-id11126 . -7) (undo-tree-id11127 . -7) (undo-tree-id11128 . -7) (undo-tree-id11129 . -7) (undo-tree-id11130 . -7) (undo-tree-id11131 . -7) (undo-tree-id11132 . -7) (undo-tree-id11133 . -7) (undo-tree-id11134 . -7) (undo-tree-id11135 . -7) (undo-tree-id11136 . -7) (undo-tree-id11137 . -7) (undo-tree-id11138 . -7) (undo-tree-id11139 . -7) (undo-tree-id11140 . -7) (undo-tree-id11141 . -7) (undo-tree-id11142 . -7) (undo-tree-id11143 . -7) (undo-tree-id11144 . -7) (undo-tree-id11145 . -7) (undo-tree-id11146 . -7) (undo-tree-id11147 . -7) (undo-tree-id11148 . -7) (undo-tree-id11149 . -7) (undo-tree-id11150 . -7) (undo-tree-id11151 . -7) (undo-tree-id11152 . -7) (undo-tree-id11153 . -7) (undo-tree-id11154 . -7) (undo-tree-id11155 . -7) (undo-tree-id11156 . -7) (undo-tree-id11157 . -7) (undo-tree-id11158 . -7) (undo-tree-id11159 . -7) (undo-tree-id11160 . -7) (undo-tree-id11161 . -7) (undo-tree-id11162 . -7) (undo-tree-id11163 . -7) (undo-tree-id11164 . -7) (undo-tree-id11165 . -7) (undo-tree-id11166 . -7) (undo-tree-id11167 . -7) (undo-tree-id11168 . -7) (undo-tree-id11169 . -7) (undo-tree-id11170 . -7) (undo-tree-id11171 . -7) (undo-tree-id11172 . -7) (undo-tree-id11173 . -7) 2170) nil (26040 63685 90920 582000) 0 nil])
([nil nil ((2163 . 2164)) nil (26040 63685 90875 896000) 0 nil])
([nil nil ((apply yas--snippet-revive 2163 2173 #s(yas--snippet nil nil #s(yas--exit 2173 nil) 86 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2173 nil) 86 nil nil nil nil)) (2163 . 2173) (#("as_bytes()$0" 0 12 (fontified nil)) . 2163) (2163 . 2175) (#("a" 0 1 (fontified nil)) . 2163) (2163 . 2164) (#("as_bytes()" 0 10 (fontified nil)) . -2163) (2163 . 2173) (#("a" 0 1 (fontified t)) . -2163) (undo-tree-id11106 . -1) (undo-tree-id11107 . -1) (undo-tree-id11108 . -1) (undo-tree-id11109 . -1) (undo-tree-id11110 . -1) (undo-tree-id11111 . -1) 2164) nil (26040 63685 90873 882000) 0 nil])
([nil nil ((2173 . 2177)) nil (26040 63685 90866 844000) 0 nil])
([nil nil ((apply yas--snippet-revive 2174 2182 #s(yas--snippet nil nil #s(yas--exit 2182 nil) 87 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2182 nil) 87 nil nil nil nil)) (2174 . 2182) (#("as_ptr()$0" 0 10 (fontified nil)) . 2174) (2174 . 2184) (#("ptr" 0 3 (fontified nil)) . 2174) (2174 . 2177) (#("as_ptr()" 0 8 (fontified nil)) . -2174) (2174 . 2182) (#("ptr" 0 3 (fontified t)) . -2174) (undo-tree-id11093 . -3) (undo-tree-id11094 . -1) (undo-tree-id11095 . -1) (undo-tree-id11096 . -1) (undo-tree-id11097 . -1) (undo-tree-id11098 . -1) (undo-tree-id11099 . -2) (undo-tree-id11100 . -2) (undo-tree-id11101 . -2) (undo-tree-id11102 . -3) (undo-tree-id11103 . -3) (undo-tree-id11104 . -3) (undo-tree-id11105 . -3) 2177) nil (26040 63685 90862 299000) 0 nil])
([nil nil ((2182 . 2183) (t 26040 63685 150842 990000)) nil (26040 63702 750637 713000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2182) (undo-tree-id11890 . -1) (undo-tree-id11891 . -1) (undo-tree-id11892 . -1) (undo-tree-id11893 . -1) (undo-tree-id11894 . -1) (undo-tree-id11895 . -1) 2183) nil (26040 63702 750636 528000) 0 nil])
([nil nil ((#("ptr()" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-4-face) fontified t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t)) . -2177) (undo-tree-id11832 . -5) (undo-tree-id11833 . -5) (undo-tree-id11834 . -5) (undo-tree-id11835 . -5) (undo-tree-id11836 . -5) (undo-tree-id11837 . -5) (undo-tree-id11838 . -5) (undo-tree-id11839 . -5) (undo-tree-id11840 . -5) (undo-tree-id11841 . -5) (undo-tree-id11842 . -5) (undo-tree-id11843 . -5) (undo-tree-id11844 . -5) (undo-tree-id11845 . -5) (undo-tree-id11846 . -5) (undo-tree-id11847 . -5) (undo-tree-id11848 . -5) (undo-tree-id11849 . -5) (undo-tree-id11850 . -5) (undo-tree-id11851 . -5) (undo-tree-id11852 . -5) (undo-tree-id11853 . -5) (undo-tree-id11854 . -5) (undo-tree-id11855 . -5) (undo-tree-id11856 . -5) (undo-tree-id11857 . -5) (undo-tree-id11858 . -5) (undo-tree-id11859 . -5) (undo-tree-id11860 . -5) (undo-tree-id11861 . -5) (undo-tree-id11862 . -5) (undo-tree-id11863 . -5) (undo-tree-id11864 . -5) (undo-tree-id11865 . -5) (undo-tree-id11866 . -5) (undo-tree-id11867 . -5) (undo-tree-id11868 . -5) (undo-tree-id11869 . -5) (undo-tree-id11870 . -5) (undo-tree-id11871 . -5) (undo-tree-id11872 . -5) (undo-tree-id11873 . -5) (undo-tree-id11874 . -5) (undo-tree-id11875 . -5) (undo-tree-id11876 . -5) (undo-tree-id11877 . -5) (undo-tree-id11878 . -5) (undo-tree-id11879 . -5) (undo-tree-id11880 . -5) (undo-tree-id11881 . -5) (undo-tree-id11882 . -5) (undo-tree-id11883 . -5) (undo-tree-id11884 . -5) (undo-tree-id11885 . -5) (undo-tree-id11886 . -5) (undo-tree-id11887 . -5) (undo-tree-id11888 . -5) (undo-tree-id11889 . -5) 2182) nil (26040 63702 750629 99000) 0 nil])
([nil nil ((#("as_" 0 3 (fontified t)) . -2174) (undo-tree-id11769 . -3) (undo-tree-id11770 . -3) (undo-tree-id11771 . -3) (undo-tree-id11772 . -3) (undo-tree-id11773 . -3) (undo-tree-id11774 . -3) (undo-tree-id11775 . -3) (undo-tree-id11776 . -3) (undo-tree-id11777 . -3) (undo-tree-id11778 . -3) (undo-tree-id11779 . -3) (undo-tree-id11780 . -3) (undo-tree-id11781 . -3) (undo-tree-id11782 . -3) (undo-tree-id11783 . -3) (undo-tree-id11784 . -3) (undo-tree-id11785 . -3) (undo-tree-id11786 . -3) (undo-tree-id11787 . -3) (undo-tree-id11788 . -3) (undo-tree-id11789 . -3) (undo-tree-id11790 . -3) (undo-tree-id11791 . -3) (undo-tree-id11792 . -3) (undo-tree-id11793 . -3) (undo-tree-id11794 . -3) (undo-tree-id11795 . -3) (undo-tree-id11796 . -3) (undo-tree-id11797 . -3) (undo-tree-id11798 . -3) (undo-tree-id11799 . -3) (undo-tree-id11800 . -3) (undo-tree-id11801 . -3) (undo-tree-id11802 . -3) (undo-tree-id11803 . -3) (undo-tree-id11804 . -3) (undo-tree-id11805 . -3) (undo-tree-id11806 . -3) (undo-tree-id11807 . -3) (undo-tree-id11808 . -3) (undo-tree-id11809 . -3) (undo-tree-id11810 . -3) (undo-tree-id11811 . -3) (undo-tree-id11812 . -3) (undo-tree-id11813 . -3) (undo-tree-id11814 . -3) (undo-tree-id11815 . -3) (undo-tree-id11816 . -3) (undo-tree-id11817 . -3) (undo-tree-id11818 . -3) (undo-tree-id11819 . -3) (undo-tree-id11820 . -3) (undo-tree-id11821 . -3) (undo-tree-id11822 . -3) (undo-tree-id11823 . -3) (undo-tree-id11824 . -3) (undo-tree-id11825 . -3) (undo-tree-id11826 . -3) (undo-tree-id11827 . -3) (undo-tree-id11828 . -3) (undo-tree-id11829 . -3) (undo-tree-id11830 . -3) (undo-tree-id11831 . -3) 2177) nil (26040 63702 750584 855000) 0 nil])
([nil nil ((2174 . 2176)) nil (26040 63702 750192 75000) 0 nil])
([nil nil ((apply yas--snippet-revive 2174 2185 #s(yas--snippet nil nil #s(yas--exit 2185 nil) 88 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2185 nil) 88 nil nil nil nil)) (2174 . 2185) (#("into_iter()$0" 0 13 (fontified nil)) . 2174) (2174 . 2187) (#("i" 0 1 (fontified nil)) . 2174) (2174 . 2175) (#("into_iter() (as IntoIterator)" 0 29 (fontified nil)) . -2174) (2174 . 2203) (#("in" 0 2 (face font-lock-keyword-face fontified t)) . -2174) (undo-tree-id11760 . -2) (undo-tree-id11761 . -2) (undo-tree-id11762 . -1) (undo-tree-id11763 . -1) (undo-tree-id11764 . -1) (undo-tree-id11765 . -2) (undo-tree-id11766 . -2) (undo-tree-id11767 . -2) (undo-tree-id11768 . -2) 2176) nil (26040 63702 750190 533000) 0 nil])
([nil nil ((#("iter()" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t) 5 6 (face (rainbow-delimiters-depth-4-face) fontified t)) . -2179) (undo-tree-id11748 . -6) (undo-tree-id11749 . -6) (undo-tree-id11750 . -6) (undo-tree-id11751 . -6) (undo-tree-id11752 . -6) (undo-tree-id11753 . -6) (undo-tree-id11754 . -6) (undo-tree-id11755 . -6) (undo-tree-id11756 . -6) (undo-tree-id11757 . -6) (undo-tree-id11758 . -6) (undo-tree-id11759 . -6) 2185) nil (26040 63702 750182 146000) 0 nil])
([nil nil ((#("into_" 0 5 (fontified t)) . -2174) (undo-tree-id11734 . -5) (undo-tree-id11735 . -5) (undo-tree-id11736 . -5) (undo-tree-id11737 . -5) (undo-tree-id11738 . -5) (undo-tree-id11739 . -5) (undo-tree-id11740 . -5) (undo-tree-id11741 . -5) (undo-tree-id11742 . -5) (undo-tree-id11743 . -5) (undo-tree-id11744 . -5) (undo-tree-id11745 . -5) (undo-tree-id11746 . -5) (undo-tree-id11747 . -5) 2179) nil (26040 63702 750171 820000) 0 nil])
([nil nil ((2174 . 2176)) nil (26040 63702 750160 786000) 0 nil])
([nil nil ((apply yas--snippet-revive 2174 2180 #s(yas--snippet nil nil #s(yas--exit 2180 nil) 89 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2180 nil) 89 nil nil nil nil)) (2174 . 2180) (#("into()$0" 0 8 (fontified nil)) . 2174) (2174 . 2182) (#("in" 0 2 (fontified nil)) . 2174) (2174 . 2176) (#("into() (as Into)" 0 16 (fontified nil)) . -2174) (2174 . 2190) (#("in" 0 2 (face font-lock-keyword-face fontified t)) . -2174) (undo-tree-id11724 . -2) (undo-tree-id11725 . -2) (undo-tree-id11726 . -1) (undo-tree-id11727 . -1) (undo-tree-id11728 . -1) (undo-tree-id11729 . -2) (undo-tree-id11730 . -2) (undo-tree-id11731 . -2) (undo-tree-id11732 . -2) (undo-tree-id11733 . -2) 2176) nil (26040 63702 750156 284000) 0 nil])
([nil nil ((#("into()" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t) 5 6 (face (rainbow-delimiters-depth-4-face) fontified t)) . -2174) (undo-tree-id12282 . -6) (undo-tree-id12283 . -6) (undo-tree-id12284 . -6) (undo-tree-id12285 . -6) (undo-tree-id12286 . -6) (undo-tree-id12287 . -6) (undo-tree-id12288 . -6) (undo-tree-id12289 . -6) (undo-tree-id12290 . -6) (undo-tree-id12291 . -6) (undo-tree-id12292 . -6) (undo-tree-id12293 . -6) (undo-tree-id12294 . -6) (undo-tree-id12295 . -6) (undo-tree-id12296 . -6) (undo-tree-id12297 . -6) 2180 (t 26040 63702 774177 398000)) nil (26040 63734 673162 657000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2173) (undo-tree-id12169 . -1) (undo-tree-id12170 . -1) (undo-tree-id12171 . -1) (undo-tree-id12172 . -1) (undo-tree-id12173 . -1) (undo-tree-id12174 . -1) (undo-tree-id12175 . -1) (undo-tree-id12176 . -1) (undo-tree-id12177 . -1) (undo-tree-id12178 . -1) (undo-tree-id12179 . -1) (undo-tree-id12180 . -1) (undo-tree-id12181 . -1) (undo-tree-id12182 . -1) (undo-tree-id12183 . -1) (undo-tree-id12184 . -1) (undo-tree-id12185 . -1) (undo-tree-id12186 . -1) (undo-tree-id12187 . -1) (undo-tree-id12188 . -1) (undo-tree-id12189 . -1) (undo-tree-id12190 . -1) (undo-tree-id12191 . -1) (undo-tree-id12192 . -1) (undo-tree-id12193 . -1) (undo-tree-id12194 . -1) (undo-tree-id12195 . -1) (undo-tree-id12196 . -1) (undo-tree-id12197 . -1) (undo-tree-id12198 . -1) (undo-tree-id12199 . -1) (undo-tree-id12200 . -1) (undo-tree-id12201 . -1) (undo-tree-id12202 . -1) (undo-tree-id12203 . -1) (undo-tree-id12204 . -1) (undo-tree-id12205 . -1) (undo-tree-id12206 . -1) (undo-tree-id12207 . -1) (undo-tree-id12208 . -1) (undo-tree-id12209 . -1) (undo-tree-id12210 . -1) (undo-tree-id12211 . -1) (undo-tree-id12212 . -1) (undo-tree-id12213 . -1) (undo-tree-id12214 . -1) (undo-tree-id12215 . -1) (undo-tree-id12216 . -1) (undo-tree-id12217 . -1) (undo-tree-id12218 . -1) (undo-tree-id12219 . -1) (undo-tree-id12220 . -1) (undo-tree-id12221 . -1) (undo-tree-id12222 . -1) (undo-tree-id12223 . -1) (undo-tree-id12224 . -1) (undo-tree-id12225 . -1) (undo-tree-id12226 . -1) (undo-tree-id12227 . -1) (undo-tree-id12228 . -1) (undo-tree-id12229 . -1) (undo-tree-id12230 . -1) (undo-tree-id12231 . -1) (undo-tree-id12232 . -1) (undo-tree-id12233 . -1) (undo-tree-id12234 . -1) (undo-tree-id12235 . -1) (undo-tree-id12236 . -1) (undo-tree-id12237 . -1) (undo-tree-id12238 . -1) (undo-tree-id12239 . -1) (undo-tree-id12240 . -1) (undo-tree-id12241 . -1) (undo-tree-id12242 . -1) (undo-tree-id12243 . -1) (undo-tree-id12244 . -1) (undo-tree-id12245 . -1) (undo-tree-id12246 . -1) (undo-tree-id12247 . -1) (undo-tree-id12248 . -1) (undo-tree-id12249 . -1) (undo-tree-id12250 . -1) (undo-tree-id12251 . -1) (undo-tree-id12252 . -1) (undo-tree-id12253 . -1) (undo-tree-id12254 . -1) (undo-tree-id12255 . -1) (undo-tree-id12256 . -1) (undo-tree-id12257 . -1) (undo-tree-id12258 . -1) (undo-tree-id12259 . -1) (undo-tree-id12260 . -1) (undo-tree-id12261 . -1) (undo-tree-id12262 . -1) (undo-tree-id12263 . -1) (undo-tree-id12264 . -1) (undo-tree-id12265 . -1) (undo-tree-id12266 . -1) (undo-tree-id12267 . -1) (undo-tree-id12268 . -1) (undo-tree-id12269 . -1) (undo-tree-id12270 . -1) (undo-tree-id12271 . -1) (undo-tree-id12272 . -1) (undo-tree-id12273 . -1) (undo-tree-id12274 . -1) (undo-tree-id12275 . -1) (undo-tree-id12276 . -1) (undo-tree-id12277 . -1) (undo-tree-id12278 . -1) (undo-tree-id12279 . -1) (undo-tree-id12280 . -1) (undo-tree-id12281 . -1) 2174) nil (26040 63734 673148 149000) 0 nil])
([nil nil ((#("bytes()" 0 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-4-face) fontified t) 6 7 (face (rainbow-delimiters-depth-4-face) fontified t)) . -2166) (undo-tree-id12047 . -7) (undo-tree-id12048 . -7) (undo-tree-id12049 . -7) (undo-tree-id12050 . -7) (undo-tree-id12051 . -7) (undo-tree-id12052 . -7) (undo-tree-id12053 . -7) (undo-tree-id12054 . -7) (undo-tree-id12055 . -7) (undo-tree-id12056 . -7) (undo-tree-id12057 . -7) (undo-tree-id12058 . -7) (undo-tree-id12059 . -7) (undo-tree-id12060 . -7) (undo-tree-id12061 . -7) (undo-tree-id12062 . -7) (undo-tree-id12063 . -7) (undo-tree-id12064 . -7) (undo-tree-id12065 . -7) (undo-tree-id12066 . -7) (undo-tree-id12067 . -7) (undo-tree-id12068 . -7) (undo-tree-id12069 . -7) (undo-tree-id12070 . -7) (undo-tree-id12071 . -7) (undo-tree-id12072 . -7) (undo-tree-id12073 . -7) (undo-tree-id12074 . -7) (undo-tree-id12075 . -7) (undo-tree-id12076 . -7) (undo-tree-id12077 . -7) (undo-tree-id12078 . -7) (undo-tree-id12079 . -7) (undo-tree-id12080 . -7) (undo-tree-id12081 . -7) (undo-tree-id12082 . -7) (undo-tree-id12083 . -7) (undo-tree-id12084 . -7) (undo-tree-id12085 . -7) (undo-tree-id12086 . -7) (undo-tree-id12087 . -7) (undo-tree-id12088 . -7) (undo-tree-id12089 . -7) (undo-tree-id12090 . -7) (undo-tree-id12091 . -7) (undo-tree-id12092 . -7) (undo-tree-id12093 . -7) (undo-tree-id12094 . -7) (undo-tree-id12095 . -7) (undo-tree-id12096 . -7) (undo-tree-id12097 . -7) (undo-tree-id12098 . -7) (undo-tree-id12099 . -7) (undo-tree-id12100 . -7) (undo-tree-id12101 . -7) (undo-tree-id12102 . -7) (undo-tree-id12103 . -7) (undo-tree-id12104 . -7) (undo-tree-id12105 . -7) (undo-tree-id12106 . -7) (undo-tree-id12107 . -7) (undo-tree-id12108 . -7) (undo-tree-id12109 . -7) (undo-tree-id12110 . -7) (undo-tree-id12111 . -7) (undo-tree-id12112 . -7) (undo-tree-id12113 . -7) (undo-tree-id12114 . -7) (undo-tree-id12115 . -7) (undo-tree-id12116 . -7) (undo-tree-id12117 . -7) (undo-tree-id12118 . -7) (undo-tree-id12119 . -7) (undo-tree-id12120 . -7) (undo-tree-id12121 . -7) (undo-tree-id12122 . -7) (undo-tree-id12123 . -7) (undo-tree-id12124 . -7) (undo-tree-id12125 . -7) (undo-tree-id12126 . -7) (undo-tree-id12127 . -7) (undo-tree-id12128 . -7) (undo-tree-id12129 . -7) (undo-tree-id12130 . -7) (undo-tree-id12131 . -7) (undo-tree-id12132 . -7) (undo-tree-id12133 . -7) (undo-tree-id12134 . -7) (undo-tree-id12135 . -7) (undo-tree-id12136 . -7) (undo-tree-id12137 . -7) (undo-tree-id12138 . -7) (undo-tree-id12139 . -7) (undo-tree-id12140 . -7) (undo-tree-id12141 . -7) (undo-tree-id12142 . -7) (undo-tree-id12143 . -7) (undo-tree-id12144 . -7) (undo-tree-id12145 . -7) (undo-tree-id12146 . -7) (undo-tree-id12147 . -7) (undo-tree-id12148 . -7) (undo-tree-id12149 . -7) (undo-tree-id12150 . -7) (undo-tree-id12151 . -7) (undo-tree-id12152 . -7) (undo-tree-id12153 . -7) (undo-tree-id12154 . -7) (undo-tree-id12155 . -7) (undo-tree-id12156 . -7) (undo-tree-id12157 . -7) (undo-tree-id12158 . -7) (undo-tree-id12159 . -7) (undo-tree-id12160 . -7) (undo-tree-id12161 . -7) (undo-tree-id12162 . -7) (undo-tree-id12163 . -7) (undo-tree-id12164 . -7) (undo-tree-id12165 . -7) (undo-tree-id12166 . -7) (undo-tree-id12167 . -7) (undo-tree-id12168 . -7) 2173) nil (26040 63734 672844 245000) 0 nil])
([nil nil ((#("as_" 0 3 (fontified t)) . -2163) (undo-tree-id11920 . -3) (undo-tree-id11921 . -3) (undo-tree-id11922 . -3) (undo-tree-id11923 . -3) (undo-tree-id11924 . -3) (undo-tree-id11925 . -3) (undo-tree-id11926 . -3) (undo-tree-id11927 . -3) (undo-tree-id11928 . -3) (undo-tree-id11929 . -3) (undo-tree-id11930 . -3) (undo-tree-id11931 . -3) (undo-tree-id11932 . -3) (undo-tree-id11933 . -3) (undo-tree-id11934 . -3) (undo-tree-id11935 . -3) (undo-tree-id11936 . -3) (undo-tree-id11937 . -3) (undo-tree-id11938 . -3) (undo-tree-id11939 . -3) (undo-tree-id11940 . -3) (undo-tree-id11941 . -3) (undo-tree-id11942 . -3) (undo-tree-id11943 . -3) (undo-tree-id11944 . -3) (undo-tree-id11945 . -3) (undo-tree-id11946 . -3) (undo-tree-id11947 . -3) (undo-tree-id11948 . -3) (undo-tree-id11949 . -3) (undo-tree-id11950 . -3) (undo-tree-id11951 . -3) (undo-tree-id11952 . -3) (undo-tree-id11953 . -3) (undo-tree-id11954 . -3) (undo-tree-id11955 . -3) (undo-tree-id11956 . -3) (undo-tree-id11957 . -3) (undo-tree-id11958 . -3) (undo-tree-id11959 . -3) (undo-tree-id11960 . -3) (undo-tree-id11961 . -3) (undo-tree-id11962 . -3) (undo-tree-id11963 . -3) (undo-tree-id11964 . -3) (undo-tree-id11965 . -3) (undo-tree-id11966 . -3) (undo-tree-id11967 . -3) (undo-tree-id11968 . -3) (undo-tree-id11969 . -3) (undo-tree-id11970 . -3) (undo-tree-id11971 . -3) (undo-tree-id11972 . -3) (undo-tree-id11973 . -3) (undo-tree-id11974 . -3) (undo-tree-id11975 . -3) (undo-tree-id11976 . -3) (undo-tree-id11977 . -3) (undo-tree-id11978 . -3) (undo-tree-id11979 . -3) (undo-tree-id11980 . -3) (undo-tree-id11981 . -3) (undo-tree-id11982 . -3) (undo-tree-id11983 . -3) (undo-tree-id11984 . -3) (undo-tree-id11985 . -3) (undo-tree-id11986 . -3) (undo-tree-id11987 . -3) (undo-tree-id11988 . -3) (undo-tree-id11989 . -3) (undo-tree-id11990 . -3) (undo-tree-id11991 . -3) (undo-tree-id11992 . -3) (undo-tree-id11993 . -3) (undo-tree-id11994 . -3) (undo-tree-id11995 . -3) (undo-tree-id11996 . -3) (undo-tree-id11997 . -3) (undo-tree-id11998 . -3) (undo-tree-id11999 . -3) (undo-tree-id12000 . -3) (undo-tree-id12001 . -3) (undo-tree-id12002 . -3) (undo-tree-id12003 . -3) (undo-tree-id12004 . -3) (undo-tree-id12005 . -3) (undo-tree-id12006 . -3) (undo-tree-id12007 . -3) (undo-tree-id12008 . -3) (undo-tree-id12009 . -3) (undo-tree-id12010 . -3) (undo-tree-id12011 . -3) (undo-tree-id12012 . -3) (undo-tree-id12013 . -3) (undo-tree-id12014 . -3) (undo-tree-id12015 . -3) (undo-tree-id12016 . -3) (undo-tree-id12017 . -3) (undo-tree-id12018 . -3) (undo-tree-id12019 . -3) (undo-tree-id12020 . -3) (undo-tree-id12021 . -3) (undo-tree-id12022 . -3) (undo-tree-id12023 . -3) (undo-tree-id12024 . -3) (undo-tree-id12025 . -3) (undo-tree-id12026 . -3) (undo-tree-id12027 . -3) (undo-tree-id12028 . -3) (undo-tree-id12029 . -3) (undo-tree-id12030 . -3) (undo-tree-id12031 . -3) (undo-tree-id12032 . -3) (undo-tree-id12033 . -3) (undo-tree-id12034 . -3) (undo-tree-id12035 . -3) (undo-tree-id12036 . -3) (undo-tree-id12037 . -3) (undo-tree-id12038 . -3) (undo-tree-id12039 . -3) (undo-tree-id12040 . -3) (undo-tree-id12041 . -3) (undo-tree-id12042 . -3) (undo-tree-id12043 . -3) (undo-tree-id12044 . -3) (undo-tree-id12045 . -3) (undo-tree-id12046 . -3) 2166) nil (26040 63734 672712 16000) 0 nil])
([nil nil ((2163 . 2166)) nil (26040 63734 672353 65000) 0 nil])
([nil nil ((apply yas--snippet-revive 2163 2171 #s(yas--snippet nil nil #s(yas--exit 2171 nil) 90 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2171 nil) 90 nil nil nil nil)) (2163 . 2171) (#("as_ptr()$0" 0 10 (fontified nil)) . 2163) (2163 . 2173) (#("ptr" 0 3 (fontified nil)) . 2163) (2163 . 2166) (#("as_ptr()" 0 8 (fontified nil)) . -2163) (2163 . 2171) (#("ptr" 0 3 (fontified t)) . -2163) (undo-tree-id11907 . -3) (undo-tree-id11908 . -1) (undo-tree-id11909 . -1) (undo-tree-id11910 . -1) (undo-tree-id11911 . -1) (undo-tree-id11912 . -1) (undo-tree-id11913 . -2) (undo-tree-id11914 . -2) (undo-tree-id11915 . -2) (undo-tree-id11916 . -3) (undo-tree-id11917 . -3) (undo-tree-id11918 . -3) (undo-tree-id11919 . -3) 2166) nil (26040 63734 672351 176000) 0 nil])
([nil nil ((2171 . 2175)) nil (26040 63734 672339 961000) 0 nil])
([nil nil ((2175 . 2183)) nil (26040 63734 672338 834000) 0 nil])
([nil nil ((2182 . 2188) (#("c" 0 1 (fontified nil)) . 2182) (2182 . 2183) (#("c_char" 0 6 (fontified nil)) . -2182) (2182 . 2188) (#("c" 0 1 (fontified t)) . -2182) (undo-tree-id11896 . -1) (undo-tree-id11897 . -1) (undo-tree-id11898 . -1) (undo-tree-id11899 . -1) (undo-tree-id11900 . -1) (undo-tree-id11901 . -1) (undo-tree-id11902 . -1) (undo-tree-id11903 . -1) (undo-tree-id11904 . -1) (undo-tree-id11905 . -1) (undo-tree-id11906 . -1) 2183) nil (26040 63734 672334 648000) 0 nil])
([nil nil ((2195 . 2203) (#("        " 0 8 (fontified nil)) . 2194) (undo-tree-id12355 . -8) (2193 . 2203) (t 26040 63734 727512 671000)) nil (26040 64172 902485 448000) 0 nil])
([nil nil ((2203 . 2205)) nil (26040 64172 902483 687000) 0 nil])
([nil nil ((2203 . 2206) (#("ff" 0 2 (fontified nil)) . 2203) (2203 . 2205) (#("ffi" 0 3 (fontified nil)) . -2203) (2203 . 2206) (#("ff" 0 2 (fontified t)) . -2203) (undo-tree-id12354 . -2) 2205) nil (26040 64172 902482 546000) 0 nil])
([nil nil ((2206 . 2211)) nil (26040 64172 902480 571000) 0 nil])
([nil nil ((2211 . 2216)) nil (26040 64172 902479 926000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2240 2244 nil nil nil t #s(yas--field 2 2246 2253 nil nil nil nil #s(yas--field 3 2255 2263 nil nil nil nil #s(yas--exit 2264 nil)))) #s(yas--field 2 2246 2253 nil nil nil nil #s(yas--field 3 2255 2263 nil nil nil nil #s(yas--exit 2264 nil))) #s(yas--field 3 2255 2263 nil nil nil nil #s(yas--exit 2264 nil))) #s(yas--exit 2264 nil) 91 nil #s(yas--field 1 2240 2244 nil nil nil t #s(yas--field 2 2246 2253 nil nil nil nil #s(yas--field 3 2255 2263 nil nil nil nil #s(yas--exit 2264 nil)))) nil nil)) (2208 . 2269) (#("zbar_processor_set_data_handler(${1:processor}, ${2:handler}, ${3:userdata})$0" 0 78 (fontified nil)) . 2208) (2208 . 2286) (#("set_data" 0 8 (fontified nil)) . 2208) (2208 . 2216) (#("zbar_processor_set_data_handler(…)" 0 34 (fontified nil)) . -2208) (2208 . 2242) (#("set_data" 0 8 (fontified t)) . -2208) (undo-tree-id12353 . -8) 2216) nil (26040 64172 902478 734000) 0 nil])
([nil nil ((2241 . 2242) (#("processor" 0 9 (fontified nil)) . 2241) (2240 . 2241)) nil (26040 64172 902475 688000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -2240) (undo-tree-id12349 . -1) (undo-tree-id12350 . -1) (#("p" 0 1 (fontified t)) . -2241) (undo-tree-id12351 . -1) (undo-tree-id12352 . -1) 2242) nil (26040 64172 902474 409000) 0 nil])
([nil nil ((2240 . 2243)) nil (26040 64172 902470 749000) 0 nil])
([nil nil ((2240 . 2244) (#("pro" 0 3 (fontified nil)) . 2240) (2240 . 2243) (#("proc" 0 4 (fontified nil)) . -2240) (2240 . 2244) (#("pro" 0 3 (fontified t)) . -2240) (undo-tree-id12347 . -3) (undo-tree-id12348 . -3) 2243) nil (26040 64172 902469 505000) 0 nil])
([nil nil ((apply yas--snippet-revive 2208 2264 #s(yas--snippet nil (#s(yas--field 1 2240 2244 nil nil nil t #s(yas--field 2 2246 2253 nil nil nil nil #s(yas--field 3 2255 2263 nil nil nil nil #s(yas--exit 2264 nil)))) #s(yas--field 2 2246 2253 nil nil nil nil #s(yas--field 3 2255 2263 nil nil nil nil #s(yas--exit 2264 nil))) #s(yas--field 3 2255 2263 nil nil nil nil #s(yas--exit 2264 nil))) #s(yas--exit 2264 nil) 91 nil #s(yas--field 1 2240 2244 nil nil nil t #s(yas--field 2 2246 2253 nil nil nil nil #s(yas--field 3 2255 2263 nil nil nil nil #s(yas--exit 2264 nil)))) nil nil))) nil (26040 64172 902466 696000) 0 nil])
([nil nil ((#("userdata" 0 8 (fontified t)) . -2255) (undo-tree-id12345 . -8) (undo-tree-id12346 . -8) 2263) nil (26040 64172 902465 902000) 0 nil])
([nil nil ((2255 . 2256)) nil (26040 64172 902463 708000) 0 nil])
([nil nil ((apply yas--snippet-revive 2255 2259 #s(yas--snippet nil nil #s(yas--exit 2259 nil) 92 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2259 nil) 92 nil nil nil nil)) (2255 . 2259) (#("None$0" 0 6 (fontified nil)) . 2255) (2255 . 2261) (#("N" 0 1 (fontified nil)) . 2255) (2255 . 2256) (#("None" 0 4 (fontified nil)) . -2255) (2255 . 2259) (#("N" 0 1 (face font-lock-type-face fontified t)) . -2255) (undo-tree-id12343 . -1) (undo-tree-id12344 . -1) 2256) nil (26040 64172 902462 442000) 0 nil])
([nil nil ((2260 . 2261)) nil (26040 64172 902459 19000) 0 nil])
([nil nil ((624 . 626)) nil (26040 64172 902458 388000) 0 nil])
([nil nil ((nil rear-nonsticky nil 703 . 704) (nil fontified nil 626 . 704) (626 . 704)) nil (26040 64172 902457 685000) 0 nil])
([nil nil ((626 . 629)) nil (26040 64172 902456 711000) 0 nil])
([nil nil ((#("         " 0 9 (fontified t)) . -677) 703) nil (26040 64172 902456 7000) 0 nil])
([nil nil ((641 . 646)) nil (26040 64172 902455 193000) 0 nil])
([nil nil ((#("           " 0 11 (fontified t)) . -671) 685) nil (26040 64172 902454 417000) 0 nil])
([nil nil ((#("t *" 0 3 (fontified t)) . -657) (undo-tree-id12341 . -3) (undo-tree-id12342 . -3) 660) nil (26040 64172 902453 457000) 0 nil])
([nil nil ((#("image_" 0 6 (fontified t)) . -651) (undo-tree-id12339 . -6) (undo-tree-id12340 . -6) 657) nil (26040 64172 902451 81000) 0 nil])
([nil nil ((#("zbar_" 0 5 (fontified t)) . -646) (undo-tree-id12337 . -5) (undo-tree-id12338 . -5) 651) nil (26040 64172 902448 565000) 0 nil])
([nil nil ((651 . 658)) nil (26040 64172 902445 789000) 0 nil])
([nil nil ((658 . 659)) nil (26040 64172 902445 290000) 0 nil])
([nil nil ((#("z" 0 1 (fontified t)) . -658) (undo-tree-id12336 . -1) 659) nil (26040 64172 902444 582000) 0 nil])
([nil nil ((658 . 663)) nil (26040 64172 902442 930000) 0 nil])
([nil nil ((658 . 670) (#("image" 0 5 (fontified nil)) . 658) (658 . 663) (#("zbar_image_t" 0 12 (fontified nil)) . -658) (658 . 670) (#("image" 0 5 (fontified t)) . -658) (undo-tree-id12335 . -5) 663) nil (26040 64172 902441 901000) 0 nil])
([nil nil ((653 . 654)) nil (26040 64172 902439 832000) 0 nil])
([nil nil ((654 . 655)) nil (26040 64172 902439 154000) 0 nil])
([nil nil ((655 . 658)) nil (26040 64172 902438 361000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -656) (undo-tree-id12331 . -1) (undo-tree-id12332 . -1) (#("t" 0 1 (face font-lock-constant-face fontified t)) . -657) (undo-tree-id12333 . -1) (undo-tree-id12334 . -1) 658) nil (26040 64172 902437 341000) 0 nil])
([nil nil ((656 . 658)) nil (26040 64172 902433 760000) 0 nil])
([nil nil ((701 . 702)) nil (26040 64172 902433 97000) 0 nil])
([nil nil ((#("void *" 0 6 (fontified t)) . -687) (undo-tree-id12327 . -6) (undo-tree-id12328 . -6) (undo-tree-id12329 . -6) (undo-tree-id12330 . -6) 693) nil (26040 64172 902432 275000) 0 nil])
([nil nil ((#("const " 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t)) . -681) (undo-tree-id12323 . -6) (undo-tree-id12324 . -6) (undo-tree-id12325 . -6) (undo-tree-id12326 . -6) 687) nil (26040 64172 902428 483000) 0 nil])
([nil nil ((681 . 682)) nil (26040 64172 902424 915000) 0 nil])
([nil nil ((#("E" 0 1 (face font-lock-type-face fontified t)) . -681) (undo-tree-id12312 . -1) (undo-tree-id12313 . -1) (undo-tree-id12314 . -1) (undo-tree-id12315 . -1) (undo-tree-id12316 . -1) (undo-tree-id12317 . -1) (undo-tree-id12318 . -1) (undo-tree-id12319 . -1) (undo-tree-id12320 . -1) (undo-tree-id12321 . -1) (undo-tree-id12322 . -1) 682) nil (26040 64172 902423 732000) 0 nil])
([nil nil ((689 . 690)) nil (26040 64172 902415 483000) 0 nil])
([nil nil ((690 . 695)) nil (26040 64172 902414 842000) 0 nil])
([nil nil ((691 . 697) (#("void" 0 4 (fontified nil)) . 691) (691 . 695) (#("c_void" 0 6 (fontified nil)) . -691) (691 . 697) (#("void" 0 4 (fontified t)) . -691) (undo-tree-id12298 . -4) (undo-tree-id12299 . -1) (undo-tree-id12300 . -1) (undo-tree-id12301 . -1) (undo-tree-id12302 . -2) (undo-tree-id12303 . -2) (undo-tree-id12304 . -2) (undo-tree-id12305 . -3) (undo-tree-id12306 . -3) (undo-tree-id12307 . -4) (undo-tree-id12308 . -4) (undo-tree-id12309 . -4) (undo-tree-id12310 . -4) (undo-tree-id12311 . -4) 695) nil (26040 64172 902412 586000) 0 nil])
([nil nil ((691 . 698)) nil (26040 64172 902394 158000) 0 nil])
([nil nil ((704 . 705)) nil (26040 64172 902389 938000) 0 nil])
([nil nil ((707 . 710) (t 26040 64172 927539 276000)) nil (26040 64175 974325 660000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . 710) (710 . 714) (709 . 711)) nil (26040 64175 974323 240000) 0 nil])
([nil nil ((710 . 714)) nil (26040 64175 974318 646000) 0 nil])
([nil nil ((626 . 629) (t 26040 64176 30872 793000)) nil (26040 64192 368451 71000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -626) (undo-tree-id12368 . -1) (undo-tree-id12369 . -1) (undo-tree-id12370 . -1) (undo-tree-id12371 . -1) (undo-tree-id12372 . -1) (undo-tree-id12373 . -1) (undo-tree-id12374 . -1) (undo-tree-id12375 . -1) (undo-tree-id12376 . -1) (undo-tree-id12377 . -1) (undo-tree-id12378 . -1) (undo-tree-id12379 . -1) (undo-tree-id12380 . -1) (undo-tree-id12381 . -1) (undo-tree-id12382 . -1) (undo-tree-id12383 . -1) (undo-tree-id12384 . -1) (undo-tree-id12385 . -1) (undo-tree-id12386 . -1) (undo-tree-id12387 . -1) (undo-tree-id12388 . -1) (#("t" 0 1 (fontified t)) . -627) (undo-tree-id12389 . -1) (undo-tree-id12390 . -1) (undo-tree-id12391 . -1) (undo-tree-id12392 . -1) (undo-tree-id12393 . -1) (undo-tree-id12394 . -1) (undo-tree-id12395 . -1) (undo-tree-id12396 . -1) (undo-tree-id12397 . -1) (undo-tree-id12398 . -1) (undo-tree-id12399 . -1) (undo-tree-id12400 . -1) (undo-tree-id12401 . -1) (undo-tree-id12402 . -1) (undo-tree-id12403 . -1) (undo-tree-id12404 . -1) (#("a" 0 1 (fontified t)) . -628) (undo-tree-id12405 . -1) (undo-tree-id12406 . -1) (undo-tree-id12407 . -1) (undo-tree-id12408 . -1) (undo-tree-id12409 . -1) (undo-tree-id12410 . -1) (undo-tree-id12411 . -1) (undo-tree-id12412 . -1) (undo-tree-id12413 . -1) (undo-tree-id12414 . -1) (undo-tree-id12415 . -1) 629) nil (26040 64192 368448 179000) 0 nil])
([nil nil ((626 . 627)) nil (26040 64192 368410 842000) 0 nil])
([nil nil ((626 . 628)) nil (26040 64192 368409 193000) 0 nil])
([nil nil ((apply yas--snippet-revive 626 633 #s(yas--snippet nil nil #s(yas--exit 633 nil) 93 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 633 nil) 93 nil nil nil nil)) (626 . 633) (#("static $0" 0 9 (fontified nil)) . 626) (626 . 635) (#("st" 0 2 (fontified nil)) . 626) (626 . 628) (#("static" 0 6 (fontified nil)) . -626) (626 . 632) (#("st" 0 2 (fontified t)) . -626) (undo-tree-id12356 . -2) (undo-tree-id12357 . -1) (undo-tree-id12358 . -1) (undo-tree-id12359 . -1) (undo-tree-id12360 . -1) (undo-tree-id12361 . -1) (undo-tree-id12362 . -2) (undo-tree-id12363 . -2) (undo-tree-id12364 . -2) (undo-tree-id12365 . -2) (undo-tree-id12366 . -2) (undo-tree-id12367 . -2) 628) nil (26040 64192 368402 913000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -632) (undo-tree-id12416 . -1) (undo-tree-id12417 . -1) (undo-tree-id12418 . -1) (undo-tree-id12419 . -1) (undo-tree-id12420 . -1) 633 (t 26040 64192 390873 776000)) nil (26040 64195 24321 796000) 0 nil])
([nil nil ((#("static" 0 6 (face font-lock-keyword-face fontified t)) . -626) (undo-tree-id12423 . -6) (undo-tree-id12424 . -6) (undo-tree-id12425 . -6) (undo-tree-id12426 . -6) (undo-tree-id12427 . -6) (undo-tree-id12428 . -6) (undo-tree-id12429 . -6) (undo-tree-id12430 . -6) (undo-tree-id12431 . -6) (undo-tree-id12432 . -6) (undo-tree-id12433 . -6) (undo-tree-id12434 . -6) (undo-tree-id12435 . -6) (undo-tree-id12436 . -6) (undo-tree-id12437 . -6) (undo-tree-id12438 . -6) (undo-tree-id12439 . -6) 632 (t 26040 64195 77540 609000)) nil (26040 64203 164647 161000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -626) (undo-tree-id12421 . -1) (undo-tree-id12422 . -1) 627) nil (26040 64203 164630 811000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1246 . 1247) (nil fontified nil 1246 . 1247) (nil fontified nil 1238 . 1246) (nil fontified nil 1236 . 1238) (nil fontified nil 1235 . 1236) (nil fontified nil 1229 . 1235) (nil fontified nil 1228 . 1229) (nil fontified nil 1223 . 1228) (nil fontified nil 1212 . 1223) (nil fontified nil 1210 . 1212) (nil fontified nil 1207 . 1210) (nil fontified nil 1204 . 1207) (nil fontified nil 1198 . 1204) (nil fontified nil 1186 . 1198) (nil fontified nil 1185 . 1186) (nil fontified nil 1184 . 1185) (nil fontified nil 1183 . 1184) (nil fontified nil 1171 . 1183) (nil fontified nil 1170 . 1171) (nil fontified nil 1169 . 1170) (nil fontified nil 1168 . 1169) (nil fontified nil 1162 . 1168) (nil fontified nil 1161 . 1162) (nil fontified nil 1160 . 1161) (nil fontified nil 1156 . 1160) (nil fontified nil 1155 . 1156) (nil fontified nil 1147 . 1155) (nil fontified nil 1145 . 1147) (nil fontified nil 1141 . 1145) (nil fontified nil 1137 . 1141) (nil fontified nil 1136 . 1137) (nil fontified nil 1125 . 1136) (nil fontified nil 1124 . 1125) (nil fontified nil 1123 . 1124) (nil fontified nil 1122 . 1123) (nil fontified nil 1121 . 1122) (nil fontified nil 1115 . 1121) (nil fontified nil 1114 . 1115) (nil fontified nil 1093 . 1114) (nil fontified nil 1092 . 1093) (nil fontified nil 1091 . 1092) (nil fontified nil 1085 . 1091) (nil fontified nil 1084 . 1085) (nil fontified nil 1064 . 1084) (nil fontified nil 1063 . 1064) (nil fontified nil 1062 . 1063) (nil fontified nil 1061 . 1062) (nil fontified nil 1058 . 1061) (nil fontified nil 1057 . 1058) (nil fontified nil 1037 . 1057) (nil fontified nil 1035 . 1037) (nil fontified nil 1032 . 1035) (nil fontified nil 1031 . 1032) (nil fontified nil 1023 . 1031) (nil fontified nil 1021 . 1023) (nil fontified nil 1017 . 1021) (nil fontified nil 1016 . 1017) (nil fontified nil 1001 . 1016) (nil fontified nil 1000 . 1001) (nil fontified nil 999 . 1000) (nil fontified nil 998 . 999) (nil fontified nil 993 . 998) (nil fontified nil 980 . 993) (nil fontified nil 978 . 980) (nil fontified nil 969 . 978) (nil fontified nil 953 . 969) (nil fontified nil 952 . 953) (nil fontified nil 951 . 952) (nil fontified nil 943 . 951) (nil fontified nil 931 . 943) (nil fontified nil 929 . 931) (nil fontified nil 928 . 929) (nil fontified nil 922 . 928) (nil fontified nil 921 . 922) (nil fontified nil 901 . 921) (nil fontified nil 899 . 901) (nil fontified nil 896 . 899) (nil fontified nil 893 . 896) (nil fontified nil 889 . 893) (nil fontified nil 888 . 889) (nil fontified nil 885 . 888) (nil fontified nil 873 . 885) (nil fontified nil 871 . 873) (nil fontified nil 870 . 871) (nil fontified nil 864 . 870) (nil fontified nil 863 . 864) (nil fontified nil 843 . 863) (nil fontified nil 841 . 843) (nil fontified nil 838 . 841) (nil fontified nil 835 . 838) (nil fontified nil 832 . 835) (nil fontified nil 831 . 832) (nil fontified nil 828 . 831) (nil fontified nil 816 . 828) (nil fontified nil 815 . 816) (nil fontified nil 814 . 815) (nil fontified nil 813 . 814) (nil fontified nil 812 . 813) (nil fontified nil 811 . 812) (nil fontified nil 804 . 811) (nil fontified nil 803 . 804) (nil fontified nil 797 . 803) (nil fontified nil 795 . 797) (nil fontified nil 790 . 795) (nil fontified nil 782 . 790) (nil fontified nil 781 . 782) (nil fontified nil 780 . 781) (nil fontified nil 779 . 780) (nil fontified nil 778 . 779) (nil fontified nil 768 . 778) (nil fontified nil 767 . 768) (nil fontified nil 744 . 767) (nil fontified nil 742 . 744) (nil fontified nil 739 . 742) (nil fontified nil 736 . 739) (nil fontified nil 730 . 736) (nil fontified nil 729 . 730) (nil fontified nil 726 . 729) (nil fontified nil 725 . 726) (nil fontified nil 722 . 725) (nil fontified nil 714 . 722) (714 . 1247) (t 26040 64203 220874 431000)) nil (26040 64227 88940 723000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1190) (#("    " 0 4 (fontified t)) . -1146) (undo-tree-id12440 . -4) (undo-tree-id12441 . -3) (#("    " 0 4 (fontified t)) . -1135) (#("    " 0 4 (fontified t)) . -1097) (#("    " 0 4 (fontified t)) . -1074) (#("    " 0 4 (fontified t)) . -1048) (#("    " 0 3 (fontified t) 3 4 (fontified t)) . -985) (#("    " 0 4 (fontified t)) . -941) (#("    " 0 4 (fontified t)) . -919) (#("    " 0 4 (fontified t)) . -865) (#("    " 0 4 (fontified t)) . -812) (#("    " 0 4 (fontified t)) . -778) (undo-tree-id12442 . -1) (#("        " 0 8 (fontified t)) . -714) (undo-tree-id12443 . -1) 709) nil (26040 64227 88914 214000) 0 nil])
([nil nil ((626 . 633) (t 26040 64227 110875 883000)) nil (26040 64232 889012 707000) 0 nil])
([nil nil ((#("zbar_" 0 5 (fontified t)) . -767) (undo-tree-id12444 . -5) (undo-tree-id12445 . -4) (undo-tree-id12446 . -5) 772 (t 26040 64232 910876 234000)) nil (26040 64238 839523 401000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -720) (undo-tree-id12456 . -1) (undo-tree-id12457 . -1) (undo-tree-id12458 . -1) 721 (t 26040 64238 864209 932000)) nil (26040 64251 932755 204000) 0 nil])
([nil nil ((#("handler" 0 7 (fontified t)) . -2816) (undo-tree-id12575 . -7) (undo-tree-id12576 . -7) (undo-tree-id12577 . -7) (undo-tree-id12578 . -7) 2823 (t 26040 64252 450877 417000)) nil (26040 64355 539077 306000) 0 nil] [nil nil ((718 . 722) (#("    " 0 4 (fontified nil)) . 717) (undo-tree-id12447 . -3) (undo-tree-id12448 . -3) (undo-tree-id12449 . -3) (undo-tree-id12450 . -3) (undo-tree-id12451 . -3) (undo-tree-id12452 . -3) (undo-tree-id12453 . -3) (undo-tree-id12454 . -3) (undo-tree-id12455 . -3) (720 . 721) (720 . 721)) ((#("
" 0 1 (fontified nil)) . 720) (undo-tree-id12459 . -1) (undo-tree-id12460 . -1) (undo-tree-id12461 . -1) (#(" " 0 1 (fontified nil)) . 720) (717 . 721) (#("    " 0 4 (fontified t)) . 718) (undo-tree-id12462 . -4) (undo-tree-id12463 . -4)) (26040 64251 932041 362000) 0 nil])
([nil nil ((2816 . 2817)) nil (26040 64355 539074 258000) 0 nil])
nil
([nil nil ((#("f" 0 1 (fontified t)) . -2816) (undo-tree-id12574 . -1) 2817) nil (26040 64355 539073 604000) 0 nil])
([nil nil ((2816 . 2818)) nil (26040 64355 539072 331000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2827 2832 nil nil nil nil #s(yas--field 2 2834 2842 nil nil nil nil #s(yas--exit 2843 nil))) #s(yas--field 2 2834 2842 nil nil nil nil #s(yas--exit 2843 nil))) #s(yas--exit 2843 nil) 94 nil #s(yas--field 1 2827 2832 nil nil nil nil #s(yas--field 2 2834 2842 nil nil nil nil #s(yas--exit 2843 nil))) nil nil)) (2816 . 2843) (#("my_handler(${1:image}, ${2:userdata})$0" 0 39 (fontified nil)) . 2816) (2816 . 2855) (#("my" 0 2 (fontified nil)) . 2816) (2816 . 2818) (#("my_handler(…)" 0 13 (fontified nil)) . -2816) (2816 . 2829) (#("my" 0 2 (fontified t)) . -2816) (undo-tree-id12573 . -2) 2818) nil (26040 64355 539071 219000) 0 nil])
([nil nil ((apply yas--snippet-revive 2816 2843 #s(yas--snippet nil (#s(yas--field 1 2827 2832 nil nil nil nil #s(yas--field 2 2834 2842 nil nil nil nil #s(yas--exit 2843 nil))) #s(yas--field 2 2834 2842 nil nil nil nil #s(yas--exit 2843 nil))) #s(yas--exit 2843 nil) 94 nil #s(yas--field 1 2827 2832 nil nil nil nil #s(yas--field 2 2834 2842 nil nil nil nil #s(yas--exit 2843 nil))) nil nil))) nil (26040 64355 539068 969000) 0 nil])
([nil nil ((#("userdata)" 0 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-4-face) fontified t)) . -2834) (undo-tree-id12571 . -9) (undo-tree-id12572 . -9) 2843) nil (26040 64355 539068 215000) 0 nil])
([nil nil ((#("image, " 0 7 (fontified t)) . -2827) (undo-tree-id12569 . -7) (undo-tree-id12570 . -7) 2834) nil (26040 64355 539066 296000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -2826) (undo-tree-id12566 . -1) (undo-tree-id12567 . -1) (undo-tree-id12568 . -1) 2827) nil (26040 64355 539064 145000) 0 nil])
([nil nil ((2826 . 2830)) nil (26040 64355 539061 686000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -2827) (undo-tree-id12560 . -1) (undo-tree-id12561 . -1) (#("r" 0 1 (fontified t)) . -2828) (undo-tree-id12562 . -1) (undo-tree-id12563 . -1) (#("t" 0 1 (fontified t)) . -2829) (undo-tree-id12564 . -1) (undo-tree-id12565 . -1) 2830) nil (26040 64355 539060 607000) 0 nil])
([nil nil ((2827 . 2830)) nil (26040 64355 539055 879000) 0 nil])
([nil nil ((#("ptr" 0 3 (fontified t)) . -2827) (undo-tree-id12558 . -3) (undo-tree-id12559 . -3) 2830) nil (26040 64355 539055 145000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2826) (undo-tree-id12556 . -1) (undo-tree-id12557 . -1) 2827) nil (26040 64355 539053 45000) 0 nil])
([nil nil ((2826 . 2827)) nil (26040 64355 539051 281000) 0 nil])
([nil nil ((#("handler." 0 8 (fontified t)) . -2819) (undo-tree-id12553 . -8) (undo-tree-id12554 . -8) (undo-tree-id12555 . -7) 2827) nil (26040 64355 539050 595000) 0 nil])
([nil nil ((#("my_" 0 3 (fontified t)) . -2816) (undo-tree-id12550 . -3) (undo-tree-id12551 . -3) (undo-tree-id12552 . -3) 2819) nil (26040 64355 539047 993000) 0 nil])
([nil nil ((2816 . 2831)) nil (26040 64355 539045 314000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2836 2839 nil nil nil nil #s(yas--exit 2840 nil))) #s(yas--exit 2840 nil) 95 nil #s(yas--field 1 2836 2839 nil nil nil nil #s(yas--exit 2840 nil)) nil nil)) (2826 . 2840) (#("transmute(${1:src})$0" 0 21 (fontified nil)) . 2826) (2826 . 2847) (#("trans" 0 5 (fontified nil)) . 2826) (2826 . 2831) (#("transmute(…)" 0 12 (fontified nil)) . -2826) (2826 . 2838) (#("trans" 0 5 (fontified t)) . -2826) (undo-tree-id12548 . -5) (undo-tree-id12549 . -5) 2831) nil (26040 64355 539043 713000) 0 nil])
([nil nil ((apply yas--snippet-revive 2826 2840 #s(yas--snippet nil (#s(yas--field 1 2836 2839 nil nil nil nil #s(yas--exit 2840 nil))) #s(yas--exit 2840 nil) 95 nil #s(yas--field 1 2836 2839 nil nil nil nil #s(yas--exit 2840 nil)) nil nil))) nil (26040 64355 539040 681000) 0 nil])
([nil nil ((2835 . 2839)) nil (26040 64355 539040 133000) 0 nil])
([nil nil ((2838 . 2844)) nil (26040 64355 539039 588000) 0 nil])
([nil nil ((2844 . 2849)) nil (26040 64355 539038 968000) 0 nil])
([nil nil ((2849 . 2853)) nil (26040 64355 539038 403000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -2855) (undo-tree-id12524 . -1) (undo-tree-id12525 . -1) (undo-tree-id12526 . -1) (undo-tree-id12527 . -1) (undo-tree-id12528 . -1) (undo-tree-id12529 . -1) (undo-tree-id12530 . -1) (undo-tree-id12531 . -1) (undo-tree-id12532 . -1) (undo-tree-id12533 . -1) (#("r" 0 1 (fontified t)) . -2856) (undo-tree-id12534 . -1) (undo-tree-id12535 . -1) (undo-tree-id12536 . -1) (undo-tree-id12537 . -1) (undo-tree-id12538 . -1) (undo-tree-id12539 . -1) (undo-tree-id12540 . -1) (undo-tree-id12541 . -1) (#("c" 0 1 (fontified t)) . -2857) (undo-tree-id12542 . -1) (undo-tree-id12543 . -1) (undo-tree-id12544 . -1) (undo-tree-id12545 . -1) (undo-tree-id12546 . -1) (undo-tree-id12547 . -1) 2858) nil (26040 64355 539036 949000) 0 nil])
([nil nil ((2855 . 2856)) nil (26040 64355 539021 122000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -2855) (undo-tree-id12517 . -1) (undo-tree-id12518 . -1) (undo-tree-id12519 . -1) (undo-tree-id12520 . -1) (undo-tree-id12521 . -1) (undo-tree-id12522 . -1) (undo-tree-id12523 . -1) 2856) nil (26040 64355 539020 212000) 0 nil])
([nil nil ((2855 . 2856)) nil (26040 64355 539014 509000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -2855) (undo-tree-id12512 . -1) (undo-tree-id12513 . -1) (undo-tree-id12514 . -1) (undo-tree-id12515 . -1) (undo-tree-id12516 . -1) 2856) nil (26040 64355 539013 674000) 0 nil])
([nil nil ((2855 . 2856)) nil (26040 64355 539010 14000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2866 2866 nil nil nil t #s(yas--field 2 2866 2866 nil nil nil nil #s(yas--exit 2867 nil))) #s(yas--field 2 2866 2866 nil nil nil nil #s(yas--exit 2867 nil))) #s(yas--exit 2867 nil) 96 nil #s(yas--field 1 2866 2866 nil nil nil t #s(yas--field 2 2866 2866 nil nil nil nil #s(yas--exit 2867 nil))) nil nil)) (2855 . 2882) (#("my_handler(${1:image}, ${2:userdata})$0" 0 39 (fontified nil)) . 2855) (2855 . 2894) (#("m" 0 1 (fontified nil)) . 2855) (2855 . 2856) (#("my_handler(…)" 0 13 (fontified nil)) . -2855) (2855 . 2868) (#("m" 0 1 (fontified t)) . -2855) (undo-tree-id12502 . -1) (undo-tree-id12503 . -1) (undo-tree-id12504 . -1) (undo-tree-id12505 . -1) (undo-tree-id12506 . -1) (undo-tree-id12507 . -1) (undo-tree-id12508 . -1) (undo-tree-id12509 . -1) (undo-tree-id12510 . -1) (undo-tree-id12511 . -1) 2856) nil (26040 64355 539008 441000) 0 nil])
([nil nil ((#("image" 0 5 (fontified t)) . 2866) (undo-tree-id12500 . -5) (undo-tree-id12501 . -5)) nil (26040 64355 539000 48000) 0 nil])
([nil nil ((#(", userdata" 0 10 (fontified t)) . 2866) (undo-tree-id12497 . -2) (undo-tree-id12498 . -10) (undo-tree-id12499 . -10)) nil (26040 64355 538997 323000) 0 nil])
([nil nil ((apply yas--snippet-revive 2855 2867 #s(yas--snippet nil (#s(yas--field 1 2866 2866 nil nil nil t #s(yas--field 2 2866 2866 nil nil nil nil #s(yas--exit 2867 nil))) #s(yas--field 2 2866 2866 nil nil nil nil #s(yas--exit 2867 nil))) #s(yas--exit 2867 nil) 96 nil #s(yas--field 1 2866 2866 nil nil nil t #s(yas--field 2 2866 2866 nil nil nil nil #s(yas--exit 2867 nil))) nil nil))) nil (26040 64355 538994 61000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -2865) (undo-tree-id12464 . -1) (undo-tree-id12465 . -1) (undo-tree-id12466 . -1) (undo-tree-id12467 . -1) (undo-tree-id12468 . -1) (undo-tree-id12469 . -1) (undo-tree-id12470 . -1) (undo-tree-id12471 . -1) (undo-tree-id12472 . -1) (undo-tree-id12473 . -1) (undo-tree-id12474 . -1) (undo-tree-id12475 . -1) (undo-tree-id12476 . -1) (undo-tree-id12477 . -1) (undo-tree-id12478 . -1) (undo-tree-id12479 . -1) (undo-tree-id12480 . -1) (undo-tree-id12481 . -1) (undo-tree-id12482 . -1) (undo-tree-id12483 . -1) (undo-tree-id12484 . -1) (undo-tree-id12485 . -1) (undo-tree-id12486 . -1) (undo-tree-id12487 . -1) (undo-tree-id12488 . -1) (undo-tree-id12489 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -2866) (undo-tree-id12490 . -1) (undo-tree-id12491 . -1) (undo-tree-id12492 . -1) (undo-tree-id12493 . -1) (undo-tree-id12494 . -1) (undo-tree-id12495 . -1) (undo-tree-id12496 . -1) 2867) nil (26040 64355 538989 557000) 0 nil])
([nil nil ((#("fn()" 0 2 (face font-lock-keyword-face fontified t) 2 3 (face (rainbow-delimiters-depth-5-face) fontified t) 3 4 (face (rainbow-delimiters-depth-5-face) fontified t)) . -2849) (undo-tree-id12643 . -4) (undo-tree-id12644 . -4) (undo-tree-id12645 . -2) (undo-tree-id12646 . -3) (undo-tree-id12647 . -4) 2853 (t 26040 64355 564216 981000)) nil (26040 64413 890860 948000) 0 nil])
([nil nil ((#("const (), " 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-5-face) fontified t) 7 8 (face (rainbow-delimiters-depth-5-face) fontified t) 8 10 (fontified t)) . -2839) (undo-tree-id12612 . -10) (undo-tree-id12613 . -10) (undo-tree-id12614 . -5) (undo-tree-id12615 . -5) (undo-tree-id12616 . -5) (undo-tree-id12617 . -5) (undo-tree-id12618 . -5) (undo-tree-id12619 . -5) (undo-tree-id12620 . -5) (undo-tree-id12621 . -5) (undo-tree-id12622 . -5) (undo-tree-id12623 . -5) (undo-tree-id12624 . -5) (undo-tree-id12625 . -5) (undo-tree-id12626 . -5) (undo-tree-id12627 . -5) (undo-tree-id12628 . -5) (undo-tree-id12629 . -5) (undo-tree-id12630 . -5) (undo-tree-id12631 . -5) (undo-tree-id12632 . -5) (undo-tree-id12633 . -5) (undo-tree-id12634 . -5) (undo-tree-id12635 . -5) (undo-tree-id12636 . -5) (undo-tree-id12637 . -5) (undo-tree-id12638 . -10) (undo-tree-id12639 . -10) (undo-tree-id12640 . -10) (undo-tree-id12641 . -10) (undo-tree-id12642 . -10) 2849) nil (26040 64413 891499 472000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . -2838) (undo-tree-id12648 . -1) (undo-tree-id12649 . -1) (undo-tree-id12650 . -1) (undo-tree-id12651 . -1) (undo-tree-id12652 . -1) (undo-tree-id12653 . -1) (undo-tree-id12654 . -1) (undo-tree-id12655 . -1) (undo-tree-id12656 . -1) (undo-tree-id12657 . -1) (undo-tree-id12658 . -1) (undo-tree-id12659 . -1) (undo-tree-id12660 . -1) (undo-tree-id12661 . -1) (undo-tree-id12662 . -1) (undo-tree-id12663 . -1) (undo-tree-id12664 . -1) (undo-tree-id12665 . -1) (undo-tree-id12666 . -1) (undo-tree-id12667 . -1) (undo-tree-id12668 . -1) (undo-tree-id12669 . -1) (undo-tree-id12670 . -1) (undo-tree-id12671 . -1) (undo-tree-id12672 . -1) (undo-tree-id12673 . -1) (undo-tree-id12674 . -1) (undo-tree-id12675 . -1) (undo-tree-id12676 . -1) (undo-tree-id12677 . -1) (undo-tree-id12678 . -1) (undo-tree-id12679 . -1) (undo-tree-id12680 . -1) (undo-tree-id12681 . -1) (undo-tree-id12682 . -1) (undo-tree-id12683 . -1) (undo-tree-id12684 . -1) (undo-tree-id12685 . -1) (undo-tree-id12686 . -1) (undo-tree-id12687 . -1) (undo-tree-id12688 . -1) (undo-tree-id12689 . -1) (undo-tree-id12690 . -1) (undo-tree-id12691 . -1) 2839) nil (26040 64436 194479 82000) 0 nil] [nil nil ((#("transmute::<*" 0 9 (fontified t) 9 11 (fontified t) 11 12 (face (rainbow-delimiters-depth-4-face) fontified t) 12 13 (fontified t)) . -2826) (undo-tree-id12579 . -13) (undo-tree-id12580 . -13) (undo-tree-id12581 . -13) (undo-tree-id12582 . -13) (undo-tree-id12583 . -13) (undo-tree-id12584 . -13) (undo-tree-id12585 . -13) (undo-tree-id12586 . -13) (undo-tree-id12587 . -13) (undo-tree-id12588 . -13) (undo-tree-id12589 . -13) (undo-tree-id12590 . -13) (undo-tree-id12591 . -13) (undo-tree-id12592 . -13) (undo-tree-id12593 . -13) (undo-tree-id12594 . -13) (undo-tree-id12595 . -13) (undo-tree-id12596 . -13) (undo-tree-id12597 . -13) (undo-tree-id12598 . -13) (undo-tree-id12599 . -13) (undo-tree-id12600 . -13) (undo-tree-id12601 . -13) (undo-tree-id12602 . -13) (undo-tree-id12603 . -13) (undo-tree-id12604 . -13) (undo-tree-id12605 . -13) (undo-tree-id12606 . -13) (undo-tree-id12607 . -13) (undo-tree-id12608 . -13) (undo-tree-id12609 . -13) (undo-tree-id12610 . -13) (undo-tree-id12611 . -13) 2839) ((2826 . 2839)) (26040 64413 890832 32000) 0 nil])
([nil nil ((2838 . 2839)) nil (26040 64436 194446 296000) 0 nil])
nil
([nil nil ((2839 . 2840)) nil (26040 64436 194445 742000) 0 nil])
([nil nil ((2840 . 2842)) nil (26040 64436 194445 141000) 0 nil])
([nil nil ((2842 . 2843)) nil (26040 64436 194444 562000) 0 nil])
([nil nil ((2843 . 2851)) nil (26040 64436 194443 366000) 0 nil])
([nil nil ((2851 . 2853)) nil (26040 64436 194439 690000) 0 nil])
([nil nil ((#("handler)" 0 7 (fontified t) 7 8 (face (rainbow-delimiters-depth-4-face) fontified t)) . -2858) (undo-tree-id12765 . -8) (undo-tree-id12766 . -8) (undo-tree-id12767 . -8) (undo-tree-id12768 . -8) 2866 (t 26040 64436 250888 528000)) nil (26040 64976 170399 287000) 0 nil])
([nil nil ((#("my_" 0 3 (fontified t)) . -2855) (undo-tree-id12761 . -3) (undo-tree-id12762 . -3) (undo-tree-id12763 . -3) (undo-tree-id12764 . -3) 2858) nil (26040 64976 170395 742000) 0 nil])
([nil nil ((#("const ()>(" 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-5-face) fontified t) 7 8 (face (rainbow-delimiters-depth-5-face) fontified t) 8 9 (face (rainbow-delimiters-depth-4-face) fontified t) 9 10 (face (rainbow-delimiters-depth-4-face) fontified t)) . -2845) (undo-tree-id12757 . -10) (undo-tree-id12758 . -10) (undo-tree-id12759 . -10) (undo-tree-id12760 . -10) 2855) nil (26040 64976 170392 202000) 0 nil])
([nil nil ((#("fn(), *" 0 2 (face font-lock-keyword-face fontified t) 2 3 (face (rainbow-delimiters-depth-5-face) fontified t) 3 4 (face (rainbow-delimiters-depth-5-face) fontified t) 4 7 (fontified t)) . -2838) (undo-tree-id12753 . -7) (undo-tree-id12754 . -7) (undo-tree-id12755 . -7) (undo-tree-id12756 . -7) 2845) nil (26040 64976 170388 564000) 0 nil])
([nil nil ((#("transmute::<" 0 9 (fontified t) 9 11 (fontified t) 11 12 (face (rainbow-delimiters-depth-4-face) fontified t)) . -2826) (undo-tree-id12749 . -12) (undo-tree-id12750 . -12) (undo-tree-id12751 . -12) (undo-tree-id12752 . -12) 2838) nil (26040 64976 170384 784000) 0 nil])
([nil nil ((#("mem::" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t)) . -2821) (undo-tree-id12745 . -5) (undo-tree-id12746 . -5) (undo-tree-id12747 . -5) (undo-tree-id12748 . -5) 2826) nil (26040 64976 170380 159000) 0 nil])
([nil nil ((#("std::" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t)) . -2816) (undo-tree-id12741 . -5) (undo-tree-id12742 . -5) (undo-tree-id12743 . -5) (undo-tree-id12744 . -5) 2821) nil (26040 64976 170376 554000) 0 nil])
([nil nil ((2764 . 2772)) nil (26040 64976 170373 118000) 0 nil])
([nil nil ((2772 . 2778)) nil (26040 64976 170372 595000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-variable-name-face fontified t)) . -2777) (undo-tree-id12740 . -1) 2778) nil (26040 64976 170371 781000) 0 nil])
([nil nil ((2777 . 2779)) nil (26040 64976 170370 400000) 0 nil])
([nil nil ((#("p" 0 1 (face font-lock-variable-name-face fontified t)) . -2776) (undo-tree-id12737 . -1) (#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -2777) (undo-tree-id12738 . -1) (#("r" 0 1 (face font-lock-variable-name-face fontified t)) . -2778) (undo-tree-id12739 . -1) 2779) nil (26040 64976 170369 294000) 0 nil])
([nil nil ((2776 . 2778)) nil (26040 64976 170366 129000) 0 nil])
([nil nil ((2778 . 2788)) nil (26040 64976 170365 561000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2797 2819 nil nil nil t #s(yas--field 2 2821 2829 nil nil nil nil #s(yas--exit 2830 nil))) #s(yas--field 2 2821 2829 nil nil nil nil #s(yas--exit 2830 nil))) #s(yas--exit 2830 nil) 97 nil #s(yas--field 1 2797 2819 nil nil nil t #s(yas--field 2 2821 2829 nil nil nil nil #s(yas--exit 2830 nil))) nil nil)) (2786 . 2813) (#("my_handler(${1:image}, ${2:userdata})$0" 0 39 (fontified nil)) . 2786) (2786 . 2825) (#("my" 0 2 (fontified nil)) . 2786) (2786 . 2788) (#("my_handler(…)" 0 13 (fontified nil)) . -2786) (2786 . 2799) (#("my" 0 2 (fontified t)) . -2786) (undo-tree-id12736 . -2) 2788) nil (26040 64976 170364 190000) 0 nil])
([nil nil ((#("image" 0 5 (fontified t)) . -2797) (undo-tree-id12734 . -5) (undo-tree-id12735 . -5) 2802) nil (26040 64976 170361 400000) 0 nil])
([nil nil ((2797 . 2814)) nil (26040 64976 170359 182000) 0 nil])
([nil nil ((2807 . 2819) (#("image_t" 0 7 (fontified nil)) . 2807) (2807 . 2814) (#("zbar_image_t" 0 12 (fontified nil)) . -2807) (2807 . 2819) (#("image_t" 0 7 (fontified t)) . -2807) (undo-tree-id12732 . -7) (undo-tree-id12733 . -7) 2814) nil (26040 64976 170357 801000) 0 nil])
([nil nil ((apply yas--snippet-revive 2786 2830 #s(yas--snippet nil (#s(yas--field 1 2797 2819 nil nil nil t #s(yas--field 2 2821 2829 nil nil nil nil #s(yas--exit 2830 nil))) #s(yas--field 2 2821 2829 nil nil nil nil #s(yas--exit 2830 nil))) #s(yas--exit 2830 nil) 97 nil #s(yas--field 1 2797 2819 nil nil nil t #s(yas--field 2 2821 2829 nil nil nil nil #s(yas--exit 2830 nil))) nil nil))) nil (26040 64976 170354 990000) 0 nil])
([nil nil ((#("userdata" 0 8 (fontified t)) . -2821) (undo-tree-id12730 . -8) (undo-tree-id12731 . -8) 2829) nil (26040 64976 170354 76000) 0 nil])
([nil nil ((2821 . 2831)) nil (26040 64976 170351 722000) 0 nil])
([nil nil ((2828 . 2834) (#("c_v" 0 3 (fontified nil)) . 2828) (2828 . 2831) (#("c_void" 0 6 (fontified nil)) . -2828) (2828 . 2834) (#("c_v" 0 3 (fontified t)) . -2828) (undo-tree-id12716 . -3) (undo-tree-id12717 . -3) (undo-tree-id12718 . -1) (undo-tree-id12719 . -1) (undo-tree-id12720 . -1) (undo-tree-id12721 . -1) (undo-tree-id12722 . -1) (undo-tree-id12723 . -2) (undo-tree-id12724 . -2) (undo-tree-id12725 . -2) (undo-tree-id12726 . -3) (undo-tree-id12727 . -3) (undo-tree-id12728 . -3) (undo-tree-id12729 . -3) 2831) nil (26040 64976 170349 862000) 0 nil])
([nil nil ((2835 . 2845)) nil (26040 64976 170161 708000) 0 nil])
([nil nil ((2845 . 2849)) nil (26040 64976 170160 957000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -2848) (undo-tree-id12711 . -1) (undo-tree-id12712 . -1) (undo-tree-id12713 . -1) (undo-tree-id12714 . -1) (undo-tree-id12715 . -1) 2849) nil (26040 64976 170159 847000) 0 nil])
([nil nil ((2846 . 2852) (#("c_" 0 2 (fontified nil)) . 2846) (2846 . 2848) (#("c_void" 0 6 (fontified nil)) . -2846) (2846 . 2852) (#("c_" 0 2 (fontified t)) . -2846) (undo-tree-id12692 . -2) (undo-tree-id12693 . -1) (undo-tree-id12694 . -1) (undo-tree-id12695 . -1) (undo-tree-id12696 . -1) (undo-tree-id12697 . -1) (undo-tree-id12698 . -2) (undo-tree-id12699 . -2) (undo-tree-id12700 . -2) (undo-tree-id12701 . -2) (undo-tree-id12702 . -2) (undo-tree-id12703 . -2) (undo-tree-id12704 . -2) (undo-tree-id12705 . -2) (undo-tree-id12706 . -2) (undo-tree-id12707 . -2) (undo-tree-id12708 . -2) (undo-tree-id12709 . -2) (undo-tree-id12710 . -2) 2848) nil (26040 64976 170153 286000) 0 nil])
([nil nil ((2852 . 2853)) nil (26040 64976 170130 596000) 0 nil])
([nil nil ((2862 . 2864) (t 26040 64976 194254 522000)) nil (26040 64980 781077 923000) 0 nil])
([nil nil ((2852 . 2854) (t 26040 64980 837588 137000)) nil (26040 64999 320463 774000) 0 nil])
([nil nil ((#("void" 0 4 (fontified t)) . -2848) (undo-tree-id12806 . -4) (undo-tree-id12807 . -4) (undo-tree-id12808 . -4) (undo-tree-id12809 . -4) (undo-tree-id12810 . -4) (undo-tree-id12811 . -4) (undo-tree-id12812 . -4) (undo-tree-id12813 . -4) (undo-tree-id12814 . -4) (undo-tree-id12815 . -4) (undo-tree-id12816 . -4) 2852) nil (26040 64999 320461 705000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -2846) (undo-tree-id12769 . -1) (undo-tree-id12770 . -1) (undo-tree-id12771 . -1) (undo-tree-id12772 . -1) (undo-tree-id12773 . -1) (undo-tree-id12774 . -1) (undo-tree-id12775 . -1) (undo-tree-id12776 . -1) (undo-tree-id12777 . -1) (undo-tree-id12778 . -1) (undo-tree-id12779 . -1) (undo-tree-id12780 . -1) (undo-tree-id12781 . -1) (undo-tree-id12782 . -1) (undo-tree-id12783 . -1) (undo-tree-id12784 . -1) (undo-tree-id12785 . -1) (undo-tree-id12786 . -1) (undo-tree-id12787 . -1) (undo-tree-id12788 . -1) (undo-tree-id12789 . -1) (#("_" 0 1 (fontified t)) . -2847) (undo-tree-id12790 . -1) (undo-tree-id12791 . -1) (undo-tree-id12792 . -1) (undo-tree-id12793 . -1) (undo-tree-id12794 . -1) (undo-tree-id12795 . -1) (undo-tree-id12796 . -1) (undo-tree-id12797 . -1) (undo-tree-id12798 . -1) (undo-tree-id12799 . -1) (undo-tree-id12800 . -1) (undo-tree-id12801 . -1) (undo-tree-id12802 . -1) (undo-tree-id12803 . -1) (undo-tree-id12804 . -1) (undo-tree-id12805 . -1) 2848) nil (26040 64999 320448 41000) 0 nil])
([nil nil ((#("const ()" 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-3-face) fontified t) 7 8 (face (rainbow-delimiters-depth-3-face) fontified t)) . -2840) (undo-tree-id13775 . -8) (undo-tree-id13776 . -3) (undo-tree-id13777 . -3) (undo-tree-id13778 . -6) (undo-tree-id13779 . -6) (undo-tree-id13780 . -6) (undo-tree-id13781 . -6) (undo-tree-id13782 . -6) (undo-tree-id13783 . -6) (undo-tree-id13784 . -6) (undo-tree-id13785 . -6) (undo-tree-id13786 . -6) (undo-tree-id13787 . -6) (undo-tree-id13788 . -6) (undo-tree-id13789 . -6) (undo-tree-id13790 . -6) (undo-tree-id13791 . -6) (undo-tree-id13792 . -6) (undo-tree-id13793 . -6) (undo-tree-id13794 . -6) (undo-tree-id13795 . -6) (undo-tree-id13796 . -6) (undo-tree-id13797 . -6) (undo-tree-id13798 . -6) (undo-tree-id13799 . -6) (undo-tree-id13800 . -6) (undo-tree-id13801 . -6) (undo-tree-id13802 . -6) (undo-tree-id13803 . -6) (undo-tree-id13804 . -6) (undo-tree-id13805 . -6) (undo-tree-id13806 . -6) (undo-tree-id13807 . -6) (undo-tree-id13808 . -6) (undo-tree-id13809 . -7) (undo-tree-id13810 . -5) (undo-tree-id13811 . -8) 2848 (t 26040 64999 377589 252000)) nil (26040 65052 818567 247000) 0 nil])
([nil nil ((#("as *" 0 2 (face font-lock-keyword-face fontified t) 2 4 (fontified t)) . -2836) (undo-tree-id13734 . -4) (undo-tree-id13735 . -4) (undo-tree-id13736 . -4) (undo-tree-id13737 . -4) (undo-tree-id13738 . -4) (undo-tree-id13739 . -4) (undo-tree-id13740 . -4) (undo-tree-id13741 . -4) (undo-tree-id13742 . -4) (undo-tree-id13743 . -4) (undo-tree-id13744 . -4) (undo-tree-id13745 . -4) (undo-tree-id13746 . -4) (undo-tree-id13747 . -4) (undo-tree-id13748 . -4) (undo-tree-id13749 . -4) (undo-tree-id13750 . -4) (undo-tree-id13751 . -4) (undo-tree-id13752 . -4) (undo-tree-id13753 . -4) (undo-tree-id13754 . -4) (undo-tree-id13755 . -4) (undo-tree-id13756 . -4) (undo-tree-id13757 . -4) (undo-tree-id13758 . -4) (undo-tree-id13759 . -4) (undo-tree-id13760 . -4) (undo-tree-id13761 . -4) (undo-tree-id13762 . -4) (undo-tree-id13763 . -4) (undo-tree-id13764 . -4) (undo-tree-id13765 . -4) (undo-tree-id13766 . -4) (undo-tree-id13767 . -4) (undo-tree-id13768 . -4) (undo-tree-id13769 . -4) (undo-tree-id13770 . -2) (undo-tree-id13771 . -4) (undo-tree-id13772 . -4) (undo-tree-id13773 . -4) (undo-tree-id13774 . -4) 2840) nil (26040 65052 818540 714000) 0 nil])
([nil nil ((#("void) " 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-3-face) fontified t) 5 6 (fontified t)) . -2830) (undo-tree-id13669 . -6) (undo-tree-id13670 . -6) (undo-tree-id13671 . -6) (undo-tree-id13672 . -6) (undo-tree-id13673 . -6) (undo-tree-id13674 . -6) (undo-tree-id13675 . -6) (undo-tree-id13676 . -6) (undo-tree-id13677 . -6) (undo-tree-id13678 . -6) (undo-tree-id13679 . -6) (undo-tree-id13680 . -6) (undo-tree-id13681 . -6) (undo-tree-id13682 . -6) (undo-tree-id13683 . -6) (undo-tree-id13684 . -6) (undo-tree-id13685 . -6) (undo-tree-id13686 . -6) (undo-tree-id13687 . -6) (undo-tree-id13688 . -6) (undo-tree-id13689 . -6) (undo-tree-id13690 . -6) (undo-tree-id13691 . -6) (undo-tree-id13692 . -6) (undo-tree-id13693 . -6) (undo-tree-id13694 . -6) (undo-tree-id13695 . -6) (undo-tree-id13696 . -6) (undo-tree-id13697 . -6) (undo-tree-id13698 . -6) (undo-tree-id13699 . -6) (undo-tree-id13700 . -6) (undo-tree-id13701 . -6) (undo-tree-id13702 . -6) (undo-tree-id13703 . -6) (undo-tree-id13704 . -6) (undo-tree-id13705 . -6) (undo-tree-id13706 . -6) (undo-tree-id13707 . -6) (undo-tree-id13708 . -6) (undo-tree-id13709 . -6) (undo-tree-id13710 . -6) (undo-tree-id13711 . -6) (undo-tree-id13712 . -5) (undo-tree-id13713 . -1) (undo-tree-id13714 . -2) (undo-tree-id13715 . -3) (undo-tree-id13716 . -4) (undo-tree-id13717 . -5) (undo-tree-id13718 . -5) (undo-tree-id13719 . -5) (undo-tree-id13720 . -5) (undo-tree-id13721 . -5) (undo-tree-id13722 . -5) (undo-tree-id13723 . -5) (undo-tree-id13724 . -5) (undo-tree-id13725 . -5) (undo-tree-id13726 . -5) (undo-tree-id13727 . -6) (undo-tree-id13728 . -6) (undo-tree-id13729 . -6) (undo-tree-id13730 . -6) (undo-tree-id13731 . -6) (undo-tree-id13732 . -6) (undo-tree-id13733 . -6) 2836) nil (26040 65052 818510 322000) 0 nil])
([nil nil ((#("c_" 0 2 (fontified t)) . -2828) (undo-tree-id13593 . -2) (undo-tree-id13594 . -2) (undo-tree-id13595 . -2) (undo-tree-id13596 . -2) (undo-tree-id13597 . -2) (undo-tree-id13598 . -2) (undo-tree-id13599 . -2) (undo-tree-id13600 . -2) (undo-tree-id13601 . -2) (undo-tree-id13602 . -2) (undo-tree-id13603 . -2) (undo-tree-id13604 . -2) (undo-tree-id13605 . -2) (undo-tree-id13606 . -2) (undo-tree-id13607 . -2) (undo-tree-id13608 . -2) (undo-tree-id13609 . -2) (undo-tree-id13610 . -2) (undo-tree-id13611 . -2) (undo-tree-id13612 . -2) (undo-tree-id13613 . -2) (undo-tree-id13614 . -2) (undo-tree-id13615 . -2) (undo-tree-id13616 . -2) (undo-tree-id13617 . -2) (undo-tree-id13618 . -2) (undo-tree-id13619 . -2) (undo-tree-id13620 . -2) (undo-tree-id13621 . -2) (undo-tree-id13622 . -2) (undo-tree-id13623 . -2) (undo-tree-id13624 . -2) (undo-tree-id13625 . -2) (undo-tree-id13626 . -2) (undo-tree-id13627 . -2) (undo-tree-id13628 . -2) (undo-tree-id13629 . -2) (undo-tree-id13630 . -2) (undo-tree-id13631 . -2) (undo-tree-id13632 . -2) (undo-tree-id13633 . -2) (undo-tree-id13634 . -2) (undo-tree-id13635 . -2) (undo-tree-id13636 . -2) (undo-tree-id13637 . -2) (undo-tree-id13638 . -1) (undo-tree-id13639 . -1) (undo-tree-id13640 . -1) (undo-tree-id13641 . -2) (undo-tree-id13642 . -2) (undo-tree-id13643 . -2) (undo-tree-id13644 . -2) (undo-tree-id13645 . -2) (undo-tree-id13646 . -2) (undo-tree-id13647 . -2) (undo-tree-id13648 . -2) (undo-tree-id13649 . -2) (undo-tree-id13650 . -2) (undo-tree-id13651 . -2) (undo-tree-id13652 . -2) (undo-tree-id13653 . -2) (undo-tree-id13654 . -2) (undo-tree-id13655 . -2) (undo-tree-id13656 . -2) (undo-tree-id13657 . -2) (undo-tree-id13658 . -2) (undo-tree-id13659 . -2) (undo-tree-id13660 . -2) (undo-tree-id13661 . -2) (undo-tree-id13662 . -2) (undo-tree-id13663 . -2) (undo-tree-id13664 . -2) (undo-tree-id13665 . -2) (undo-tree-id13666 . -2) (undo-tree-id13667 . -2) (undo-tree-id13668 . -2) 2830) nil (26040 65052 818464 499000) 0 nil])
([nil nil ((#("const " 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t)) . -2822) (undo-tree-id13513 . -6) (undo-tree-id13514 . -6) (undo-tree-id13515 . -6) (undo-tree-id13516 . -6) (undo-tree-id13517 . -6) (undo-tree-id13518 . -6) (undo-tree-id13519 . -6) (undo-tree-id13520 . -6) (undo-tree-id13521 . -6) (undo-tree-id13522 . -6) (undo-tree-id13523 . -6) (undo-tree-id13524 . -6) (undo-tree-id13525 . -6) (undo-tree-id13526 . -6) (undo-tree-id13527 . -6) (undo-tree-id13528 . -6) (undo-tree-id13529 . -6) (undo-tree-id13530 . -6) (undo-tree-id13531 . -6) (undo-tree-id13532 . -6) (undo-tree-id13533 . -6) (undo-tree-id13534 . -6) (undo-tree-id13535 . -6) (undo-tree-id13536 . -6) (undo-tree-id13537 . -6) (undo-tree-id13538 . -6) (undo-tree-id13539 . -6) (undo-tree-id13540 . -6) (undo-tree-id13541 . -6) (undo-tree-id13542 . -6) (undo-tree-id13543 . -6) (undo-tree-id13544 . -6) (undo-tree-id13545 . -6) (undo-tree-id13546 . -6) (undo-tree-id13547 . -6) (undo-tree-id13548 . -6) (undo-tree-id13549 . -6) (undo-tree-id13550 . -6) (undo-tree-id13551 . -6) (undo-tree-id13552 . -6) (undo-tree-id13553 . -6) (undo-tree-id13554 . -6) (undo-tree-id13555 . -6) (undo-tree-id13556 . -6) (undo-tree-id13557 . -6) (undo-tree-id13558 . -6) (undo-tree-id13559 . -5) (undo-tree-id13560 . -6) (undo-tree-id13561 . -6) (undo-tree-id13562 . -6) (undo-tree-id13563 . -6) (undo-tree-id13564 . -6) (undo-tree-id13565 . -6) (undo-tree-id13566 . -6) (undo-tree-id13567 . -6) (undo-tree-id13568 . -6) (undo-tree-id13569 . -6) (undo-tree-id13570 . -6) (undo-tree-id13571 . -6) (undo-tree-id13572 . -6) (undo-tree-id13573 . -6) (undo-tree-id13574 . -6) (undo-tree-id13575 . -6) (undo-tree-id13576 . -6) (undo-tree-id13577 . -6) (undo-tree-id13578 . -6) (undo-tree-id13579 . -6) (undo-tree-id13580 . -6) (undo-tree-id13581 . -6) (undo-tree-id13582 . -6) (undo-tree-id13583 . -6) (undo-tree-id13584 . -6) (undo-tree-id13585 . -6) (undo-tree-id13586 . -6) (undo-tree-id13587 . -6) (undo-tree-id13588 . -6) (undo-tree-id13589 . -6) (undo-tree-id13590 . -6) (undo-tree-id13591 . -6) (undo-tree-id13592 . -6) 2828) nil (26040 65052 818412 833000) 0 nil])
([nil nil ((#("t, *" 0 1 (fontified t) 1 4 (fontified t)) . -2818) (undo-tree-id13429 . -4) (undo-tree-id13430 . -4) (undo-tree-id13431 . -4) (undo-tree-id13432 . -4) (undo-tree-id13433 . -4) (undo-tree-id13434 . -4) (undo-tree-id13435 . -4) (undo-tree-id13436 . -4) (undo-tree-id13437 . -4) (undo-tree-id13438 . -4) (undo-tree-id13439 . -4) (undo-tree-id13440 . -4) (undo-tree-id13441 . -4) (undo-tree-id13442 . -4) (undo-tree-id13443 . -4) (undo-tree-id13444 . -4) (undo-tree-id13445 . -4) (undo-tree-id13446 . -4) (undo-tree-id13447 . -4) (undo-tree-id13448 . -4) (undo-tree-id13449 . -4) (undo-tree-id13450 . -4) (undo-tree-id13451 . -4) (undo-tree-id13452 . -4) (undo-tree-id13453 . -4) (undo-tree-id13454 . -4) (undo-tree-id13455 . -4) (undo-tree-id13456 . -4) (undo-tree-id13457 . -4) (undo-tree-id13458 . -4) (undo-tree-id13459 . -4) (undo-tree-id13460 . -4) (undo-tree-id13461 . -4) (undo-tree-id13462 . -4) (undo-tree-id13463 . -4) (undo-tree-id13464 . -4) (undo-tree-id13465 . -4) (undo-tree-id13466 . -4) (undo-tree-id13467 . -4) (undo-tree-id13468 . -4) (undo-tree-id13469 . -4) (undo-tree-id13470 . -4) (undo-tree-id13471 . -4) (undo-tree-id13472 . -4) (undo-tree-id13473 . -4) (undo-tree-id13474 . -4) (undo-tree-id13475 . -4) (undo-tree-id13476 . -1) (undo-tree-id13477 . -4) (undo-tree-id13478 . -4) (undo-tree-id13479 . -4) (undo-tree-id13480 . -4) (undo-tree-id13481 . -4) (undo-tree-id13482 . -4) (undo-tree-id13483 . -4) (undo-tree-id13484 . -4) (undo-tree-id13485 . -4) (undo-tree-id13486 . -4) (undo-tree-id13487 . -4) (undo-tree-id13488 . -4) (undo-tree-id13489 . -4) (undo-tree-id13490 . -4) (undo-tree-id13491 . -4) (undo-tree-id13492 . -4) (undo-tree-id13493 . -4) (undo-tree-id13494 . -4) (undo-tree-id13495 . -4) (undo-tree-id13496 . -4) (undo-tree-id13497 . -4) (undo-tree-id13498 . -4) (undo-tree-id13499 . -4) (undo-tree-id13500 . -4) (undo-tree-id13501 . -4) (undo-tree-id13502 . -4) (undo-tree-id13503 . -4) (undo-tree-id13504 . -4) (undo-tree-id13505 . -4) (undo-tree-id13506 . -4) (undo-tree-id13507 . -4) (undo-tree-id13508 . -4) (undo-tree-id13509 . -4) (undo-tree-id13510 . -4) (undo-tree-id13511 . -4) (undo-tree-id13512 . -4) 2822) nil (26040 65052 818357 769000) 0 nil])
([nil nil ((#("image_" 0 6 (fontified t)) . -2812) (undo-tree-id13341 . -6) (undo-tree-id13342 . -6) (undo-tree-id13343 . -6) (undo-tree-id13344 . -6) (undo-tree-id13345 . -6) (undo-tree-id13346 . -6) (undo-tree-id13347 . -6) (undo-tree-id13348 . -6) (undo-tree-id13349 . -6) (undo-tree-id13350 . -6) (undo-tree-id13351 . -6) (undo-tree-id13352 . -6) (undo-tree-id13353 . -6) (undo-tree-id13354 . -6) (undo-tree-id13355 . -6) (undo-tree-id13356 . -6) (undo-tree-id13357 . -6) (undo-tree-id13358 . -6) (undo-tree-id13359 . -6) (undo-tree-id13360 . -6) (undo-tree-id13361 . -6) (undo-tree-id13362 . -6) (undo-tree-id13363 . -6) (undo-tree-id13364 . -6) (undo-tree-id13365 . -6) (undo-tree-id13366 . -6) (undo-tree-id13367 . -6) (undo-tree-id13368 . -6) (undo-tree-id13369 . -6) (undo-tree-id13370 . -6) (undo-tree-id13371 . -6) (undo-tree-id13372 . -6) (undo-tree-id13373 . -6) (undo-tree-id13374 . -6) (undo-tree-id13375 . -6) (undo-tree-id13376 . -6) (undo-tree-id13377 . -6) (undo-tree-id13378 . -6) (undo-tree-id13379 . -6) (undo-tree-id13380 . -6) (undo-tree-id13381 . -6) (undo-tree-id13382 . -6) (undo-tree-id13383 . -6) (undo-tree-id13384 . -6) (undo-tree-id13385 . -6) (undo-tree-id13386 . -6) (undo-tree-id13387 . -6) (undo-tree-id13388 . -6) (undo-tree-id13389 . -5) (undo-tree-id13390 . -6) (undo-tree-id13391 . -6) (undo-tree-id13392 . -6) (undo-tree-id13393 . -6) (undo-tree-id13394 . -6) (undo-tree-id13395 . -6) (undo-tree-id13396 . -6) (undo-tree-id13397 . -6) (undo-tree-id13398 . -6) (undo-tree-id13399 . -6) (undo-tree-id13400 . -6) (undo-tree-id13401 . -6) (undo-tree-id13402 . -6) (undo-tree-id13403 . -6) (undo-tree-id13404 . -6) (undo-tree-id13405 . -6) (undo-tree-id13406 . -6) (undo-tree-id13407 . -6) (undo-tree-id13408 . -6) (undo-tree-id13409 . -6) (undo-tree-id13410 . -6) (undo-tree-id13411 . -6) (undo-tree-id13412 . -6) (undo-tree-id13413 . -6) (undo-tree-id13414 . -6) (undo-tree-id13415 . -6) (undo-tree-id13416 . -6) (undo-tree-id13417 . -6) (undo-tree-id13418 . -6) (undo-tree-id13419 . -6) (undo-tree-id13420 . -6) (undo-tree-id13421 . -6) (undo-tree-id13422 . -6) (undo-tree-id13423 . -6) (undo-tree-id13424 . -6) (undo-tree-id13425 . -6) (undo-tree-id13426 . -6) (undo-tree-id13427 . -6) (undo-tree-id13428 . -6) 2818) nil (26040 65052 818299 430000) 0 nil])
([nil nil ((#("zbar_" 0 5 (fontified t)) . -2807) (undo-tree-id13249 . -5) (undo-tree-id13250 . -5) (undo-tree-id13251 . -5) (undo-tree-id13252 . -5) (undo-tree-id13253 . -5) (undo-tree-id13254 . -5) (undo-tree-id13255 . -5) (undo-tree-id13256 . -5) (undo-tree-id13257 . -5) (undo-tree-id13258 . -5) (undo-tree-id13259 . -5) (undo-tree-id13260 . -5) (undo-tree-id13261 . -5) (undo-tree-id13262 . -5) (undo-tree-id13263 . -5) (undo-tree-id13264 . -5) (undo-tree-id13265 . -5) (undo-tree-id13266 . -5) (undo-tree-id13267 . -5) (undo-tree-id13268 . -5) (undo-tree-id13269 . -5) (undo-tree-id13270 . -5) (undo-tree-id13271 . -5) (undo-tree-id13272 . -5) (undo-tree-id13273 . -5) (undo-tree-id13274 . -5) (undo-tree-id13275 . -5) (undo-tree-id13276 . -5) (undo-tree-id13277 . -5) (undo-tree-id13278 . -5) (undo-tree-id13279 . -5) (undo-tree-id13280 . -5) (undo-tree-id13281 . -5) (undo-tree-id13282 . -5) (undo-tree-id13283 . -5) (undo-tree-id13284 . -5) (undo-tree-id13285 . -5) (undo-tree-id13286 . -5) (undo-tree-id13287 . -5) (undo-tree-id13288 . -5) (undo-tree-id13289 . -5) (undo-tree-id13290 . -5) (undo-tree-id13291 . -5) (undo-tree-id13292 . -5) (undo-tree-id13293 . -5) (undo-tree-id13294 . -5) (undo-tree-id13295 . -5) (undo-tree-id13296 . -5) (undo-tree-id13297 . -5) (undo-tree-id13298 . -4) (undo-tree-id13299 . -5) (undo-tree-id13300 . -5) (undo-tree-id13301 . -5) (undo-tree-id13302 . -5) (undo-tree-id13303 . -5) (undo-tree-id13304 . -5) (undo-tree-id13305 . -5) (undo-tree-id13306 . -5) (undo-tree-id13307 . -5) (undo-tree-id13308 . -5) (undo-tree-id13309 . -5) (undo-tree-id13310 . -5) (undo-tree-id13311 . -5) (undo-tree-id13312 . -5) (undo-tree-id13313 . -5) (undo-tree-id13314 . -5) (undo-tree-id13315 . -5) (undo-tree-id13316 . -5) (undo-tree-id13317 . -5) (undo-tree-id13318 . -5) (undo-tree-id13319 . -5) (undo-tree-id13320 . -5) (undo-tree-id13321 . -5) (undo-tree-id13322 . -5) (undo-tree-id13323 . -5) (undo-tree-id13324 . -5) (undo-tree-id13325 . -5) (undo-tree-id13326 . -5) (undo-tree-id13327 . -5) (undo-tree-id13328 . -5) (undo-tree-id13329 . -5) (undo-tree-id13330 . -5) (undo-tree-id13331 . -5) (undo-tree-id13332 . -5) (undo-tree-id13333 . -5) (undo-tree-id13334 . -5) (undo-tree-id13335 . -5) (undo-tree-id13336 . -5) (undo-tree-id13337 . -5) (undo-tree-id13338 . -5) (undo-tree-id13339 . -5) (undo-tree-id13340 . -5) 2812) nil (26040 65052 818238 501000) 0 nil])
([nil nil ((#("ffi::" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t)) . -2802) (undo-tree-id13151 . -5) (undo-tree-id13152 . -5) (undo-tree-id13153 . -5) (undo-tree-id13154 . -5) (undo-tree-id13155 . -5) (undo-tree-id13156 . -5) (undo-tree-id13157 . -5) (undo-tree-id13158 . -5) (undo-tree-id13159 . -5) (undo-tree-id13160 . -5) (undo-tree-id13161 . -5) (undo-tree-id13162 . -5) (undo-tree-id13163 . -5) (undo-tree-id13164 . -5) (undo-tree-id13165 . -5) (undo-tree-id13166 . -5) (undo-tree-id13167 . -5) (undo-tree-id13168 . -5) (undo-tree-id13169 . -5) (undo-tree-id13170 . -5) (undo-tree-id13171 . -5) (undo-tree-id13172 . -5) (undo-tree-id13173 . -5) (undo-tree-id13174 . -5) (undo-tree-id13175 . -5) (undo-tree-id13176 . -5) (undo-tree-id13177 . -5) (undo-tree-id13178 . -5) (undo-tree-id13179 . -5) (undo-tree-id13180 . -5) (undo-tree-id13181 . -5) (undo-tree-id13182 . -5) (undo-tree-id13183 . -5) (undo-tree-id13184 . -5) (undo-tree-id13185 . -5) (undo-tree-id13186 . -5) (undo-tree-id13187 . -5) (undo-tree-id13188 . -5) (undo-tree-id13189 . -5) (undo-tree-id13190 . -5) (undo-tree-id13191 . -5) (undo-tree-id13192 . -5) (undo-tree-id13193 . -5) (undo-tree-id13194 . -5) (undo-tree-id13195 . -5) (undo-tree-id13196 . -5) (undo-tree-id13197 . -5) (undo-tree-id13198 . -5) (undo-tree-id13199 . -5) (undo-tree-id13200 . -5) (undo-tree-id13201 . -3) (undo-tree-id13202 . -3) (undo-tree-id13203 . -3) (undo-tree-id13204 . -5) (undo-tree-id13205 . -5) (undo-tree-id13206 . -5) (undo-tree-id13207 . -5) (undo-tree-id13208 . -5) (undo-tree-id13209 . -5) (undo-tree-id13210 . -5) (undo-tree-id13211 . -5) (undo-tree-id13212 . -5) (undo-tree-id13213 . -5) (undo-tree-id13214 . -5) (undo-tree-id13215 . -5) (undo-tree-id13216 . -5) (undo-tree-id13217 . -5) (undo-tree-id13218 . -5) (undo-tree-id13219 . -5) (undo-tree-id13220 . -5) (undo-tree-id13221 . -5) (undo-tree-id13222 . -5) (undo-tree-id13223 . -5) (undo-tree-id13224 . -5) (undo-tree-id13225 . -5) (undo-tree-id13226 . -5) (undo-tree-id13227 . -5) (undo-tree-id13228 . -5) (undo-tree-id13229 . -5) (undo-tree-id13230 . -5) (undo-tree-id13231 . -5) (undo-tree-id13232 . -5) (undo-tree-id13233 . -5) (undo-tree-id13234 . -5) (undo-tree-id13235 . -5) (undo-tree-id13236 . -5) (undo-tree-id13237 . -5) (undo-tree-id13238 . -5) (undo-tree-id13239 . -5) (undo-tree-id13240 . -5) (undo-tree-id13241 . -5) (undo-tree-id13242 . -5) (undo-tree-id13243 . -5) (undo-tree-id13244 . -5) (undo-tree-id13245 . -5) (undo-tree-id13246 . -5) (undo-tree-id13247 . -5) (undo-tree-id13248 . -5) 2807) nil (26040 65052 818173 925000) 0 nil])
([nil nil ((#("mut " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -2798) (undo-tree-id13047 . -4) (undo-tree-id13048 . -4) (undo-tree-id13049 . -4) (undo-tree-id13050 . -4) (undo-tree-id13051 . -4) (undo-tree-id13052 . -4) (undo-tree-id13053 . -4) (undo-tree-id13054 . -4) (undo-tree-id13055 . -4) (undo-tree-id13056 . -4) (undo-tree-id13057 . -4) (undo-tree-id13058 . -4) (undo-tree-id13059 . -4) (undo-tree-id13060 . -4) (undo-tree-id13061 . -4) (undo-tree-id13062 . -4) (undo-tree-id13063 . -4) (undo-tree-id13064 . -4) (undo-tree-id13065 . -4) (undo-tree-id13066 . -4) (undo-tree-id13067 . -4) (undo-tree-id13068 . -4) (undo-tree-id13069 . -4) (undo-tree-id13070 . -4) (undo-tree-id13071 . -4) (undo-tree-id13072 . -4) (undo-tree-id13073 . -4) (undo-tree-id13074 . -4) (undo-tree-id13075 . -4) (undo-tree-id13076 . -4) (undo-tree-id13077 . -4) (undo-tree-id13078 . -4) (undo-tree-id13079 . -4) (undo-tree-id13080 . -4) (undo-tree-id13081 . -4) (undo-tree-id13082 . -4) (undo-tree-id13083 . -4) (undo-tree-id13084 . -4) (undo-tree-id13085 . -4) (undo-tree-id13086 . -4) (undo-tree-id13087 . -4) (undo-tree-id13088 . -4) (undo-tree-id13089 . -4) (undo-tree-id13090 . -4) (undo-tree-id13091 . -4) (undo-tree-id13092 . -4) (undo-tree-id13093 . -4) (undo-tree-id13094 . -4) (undo-tree-id13095 . -4) (undo-tree-id13096 . -4) (undo-tree-id13097 . -4) (undo-tree-id13098 . -3) (undo-tree-id13099 . -3) (undo-tree-id13100 . -3) (undo-tree-id13101 . -4) (undo-tree-id13102 . -4) (undo-tree-id13103 . -4) (undo-tree-id13104 . -4) (undo-tree-id13105 . -4) (undo-tree-id13106 . -4) (undo-tree-id13107 . -4) (undo-tree-id13108 . -4) (undo-tree-id13109 . -4) (undo-tree-id13110 . -4) (undo-tree-id13111 . -4) (undo-tree-id13112 . -4) (undo-tree-id13113 . -4) (undo-tree-id13114 . -4) (undo-tree-id13115 . -4) (undo-tree-id13116 . -4) (undo-tree-id13117 . -4) (undo-tree-id13118 . -4) (undo-tree-id13119 . -4) (undo-tree-id13120 . -4) (undo-tree-id13121 . -4) (undo-tree-id13122 . -4) (undo-tree-id13123 . -4) (undo-tree-id13124 . -4) (undo-tree-id13125 . -4) (undo-tree-id13126 . -4) (undo-tree-id13127 . -4) (undo-tree-id13128 . -4) (undo-tree-id13129 . -4) (undo-tree-id13130 . -4) (undo-tree-id13131 . -4) (undo-tree-id13132 . -4) (undo-tree-id13133 . -4) (undo-tree-id13134 . -4) (undo-tree-id13135 . -4) (undo-tree-id13136 . -4) (undo-tree-id13137 . -4) (undo-tree-id13138 . -4) (undo-tree-id13139 . -4) (undo-tree-id13140 . -4) (undo-tree-id13141 . -4) (undo-tree-id13142 . -4) (undo-tree-id13143 . -4) (undo-tree-id13144 . -4) (undo-tree-id13145 . -4) (undo-tree-id13146 . -4) (undo-tree-id13147 . -4) (undo-tree-id13148 . -4) (undo-tree-id13149 . -4) (undo-tree-id13150 . -4) 2802) nil (26040 65052 818104 913000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -2796) (undo-tree-id12817 . -1) (undo-tree-id12818 . -1) (undo-tree-id12819 . -1) (undo-tree-id12820 . -1) (undo-tree-id12821 . -1) (undo-tree-id12822 . -1) (undo-tree-id12823 . -1) (undo-tree-id12824 . -1) (undo-tree-id12825 . -1) (undo-tree-id12826 . -1) (undo-tree-id12827 . -1) (undo-tree-id12828 . -1) (undo-tree-id12829 . -1) (undo-tree-id12830 . -1) (undo-tree-id12831 . -1) (undo-tree-id12832 . -1) (undo-tree-id12833 . -1) (undo-tree-id12834 . -1) (undo-tree-id12835 . -1) (undo-tree-id12836 . -1) (undo-tree-id12837 . -1) (undo-tree-id12838 . -1) (undo-tree-id12839 . -1) (undo-tree-id12840 . -1) (undo-tree-id12841 . -1) (undo-tree-id12842 . -1) (undo-tree-id12843 . -1) (undo-tree-id12844 . -1) (undo-tree-id12845 . -1) (undo-tree-id12846 . -1) (undo-tree-id12847 . -1) (undo-tree-id12848 . -1) (undo-tree-id12849 . -1) (undo-tree-id12850 . -1) (undo-tree-id12851 . -1) (undo-tree-id12852 . -1) (undo-tree-id12853 . -1) (undo-tree-id12854 . -1) (undo-tree-id12855 . -1) (undo-tree-id12856 . -1) (undo-tree-id12857 . -1) (undo-tree-id12858 . -1) (undo-tree-id12859 . -1) (undo-tree-id12860 . -1) (undo-tree-id12861 . -1) (undo-tree-id12862 . -1) (undo-tree-id12863 . -1) (undo-tree-id12864 . -1) (undo-tree-id12865 . -1) (undo-tree-id12866 . -1) (undo-tree-id12867 . -1) (undo-tree-id12868 . -1) (undo-tree-id12869 . -1) (undo-tree-id12870 . -1) (undo-tree-id12871 . -1) (undo-tree-id12872 . -1) (undo-tree-id12873 . -1) (undo-tree-id12874 . -1) (undo-tree-id12875 . -1) (undo-tree-id12876 . -1) (undo-tree-id12877 . -1) (undo-tree-id12878 . -1) (undo-tree-id12879 . -1) (undo-tree-id12880 . -1) (undo-tree-id12881 . -1) (undo-tree-id12882 . -1) (undo-tree-id12883 . -1) (undo-tree-id12884 . -1) (undo-tree-id12885 . -1) (undo-tree-id12886 . -1) (undo-tree-id12887 . -1) (undo-tree-id12888 . -1) (undo-tree-id12889 . -1) (undo-tree-id12890 . -1) (undo-tree-id12891 . -1) (undo-tree-id12892 . -1) (undo-tree-id12893 . -1) (undo-tree-id12894 . -1) (undo-tree-id12895 . -1) (undo-tree-id12896 . -1) (undo-tree-id12897 . -1) (undo-tree-id12898 . -1) (undo-tree-id12899 . -1) (undo-tree-id12900 . -1) (undo-tree-id12901 . -1) (undo-tree-id12902 . -1) (undo-tree-id12903 . -1) (undo-tree-id12904 . -1) (undo-tree-id12905 . -1) (undo-tree-id12906 . -1) (undo-tree-id12907 . -1) (undo-tree-id12908 . -1) (undo-tree-id12909 . -1) (undo-tree-id12910 . -1) (undo-tree-id12911 . -1) (undo-tree-id12912 . -1) (undo-tree-id12913 . -1) (undo-tree-id12914 . -1) (undo-tree-id12915 . -1) (undo-tree-id12916 . -1) (undo-tree-id12917 . -1) (undo-tree-id12918 . -1) (undo-tree-id12919 . -1) (undo-tree-id12920 . -1) (undo-tree-id12921 . -1) (undo-tree-id12922 . -1) (undo-tree-id12923 . -1) (undo-tree-id12924 . -1) (undo-tree-id12925 . -1) (undo-tree-id12926 . -1) (undo-tree-id12927 . -1) (undo-tree-id12928 . -1) (undo-tree-id12929 . -1) (undo-tree-id12930 . -1) (undo-tree-id12931 . -1) (undo-tree-id12932 . -1) (undo-tree-id12933 . -1) (#("*" 0 1 (fontified t)) . -2797) (undo-tree-id12934 . -1) (undo-tree-id12935 . -1) (undo-tree-id12936 . -1) (undo-tree-id12937 . -1) (undo-tree-id12938 . -1) (undo-tree-id12939 . -1) (undo-tree-id12940 . -1) (undo-tree-id12941 . -1) (undo-tree-id12942 . -1) (undo-tree-id12943 . -1) (undo-tree-id12944 . -1) (undo-tree-id12945 . -1) (undo-tree-id12946 . -1) (undo-tree-id12947 . -1) (undo-tree-id12948 . -1) (undo-tree-id12949 . -1) (undo-tree-id12950 . -1) (undo-tree-id12951 . -1) (undo-tree-id12952 . -1) (undo-tree-id12953 . -1) (undo-tree-id12954 . -1) (undo-tree-id12955 . -1) (undo-tree-id12956 . -1) (undo-tree-id12957 . -1) (undo-tree-id12958 . -1) (undo-tree-id12959 . -1) (undo-tree-id12960 . -1) (undo-tree-id12961 . -1) (undo-tree-id12962 . -1) (undo-tree-id12963 . -1) (undo-tree-id12964 . -1) (undo-tree-id12965 . -1) (undo-tree-id12966 . -1) (undo-tree-id12967 . -1) (undo-tree-id12968 . -1) (undo-tree-id12969 . -1) (undo-tree-id12970 . -1) (undo-tree-id12971 . -1) (undo-tree-id12972 . -1) (undo-tree-id12973 . -1) (undo-tree-id12974 . -1) (undo-tree-id12975 . -1) (undo-tree-id12976 . -1) (undo-tree-id12977 . -1) (undo-tree-id12978 . -1) (undo-tree-id12979 . -1) (undo-tree-id12980 . -1) (undo-tree-id12981 . -1) (undo-tree-id12982 . -1) (undo-tree-id12983 . -1) (undo-tree-id12984 . -1) (undo-tree-id12985 . -1) (undo-tree-id12986 . -1) (undo-tree-id12987 . -1) (undo-tree-id12988 . -1) (undo-tree-id12989 . -1) (undo-tree-id12990 . -1) (undo-tree-id12991 . -1) (undo-tree-id12992 . -1) (undo-tree-id12993 . -1) (undo-tree-id12994 . -1) (undo-tree-id12995 . -1) (undo-tree-id12996 . -1) (undo-tree-id12997 . -1) (undo-tree-id12998 . -1) (undo-tree-id12999 . -1) (undo-tree-id13000 . -1) (undo-tree-id13001 . -1) (undo-tree-id13002 . -1) (undo-tree-id13003 . -1) (undo-tree-id13004 . -1) (undo-tree-id13005 . -1) (undo-tree-id13006 . -1) (undo-tree-id13007 . -1) (undo-tree-id13008 . -1) (undo-tree-id13009 . -1) (undo-tree-id13010 . -1) (undo-tree-id13011 . -1) (undo-tree-id13012 . -1) (undo-tree-id13013 . -1) (undo-tree-id13014 . -1) (undo-tree-id13015 . -1) (undo-tree-id13016 . -1) (undo-tree-id13017 . -1) (undo-tree-id13018 . -1) (undo-tree-id13019 . -1) (undo-tree-id13020 . -1) (undo-tree-id13021 . -1) (undo-tree-id13022 . -1) (undo-tree-id13023 . -1) (undo-tree-id13024 . -1) (undo-tree-id13025 . -1) (undo-tree-id13026 . -1) (undo-tree-id13027 . -1) (undo-tree-id13028 . -1) (undo-tree-id13029 . -1) (undo-tree-id13030 . -1) (undo-tree-id13031 . -1) (undo-tree-id13032 . -1) (undo-tree-id13033 . -1) (undo-tree-id13034 . -1) (undo-tree-id13035 . -1) (undo-tree-id13036 . -1) (undo-tree-id13037 . -1) (undo-tree-id13038 . -1) (undo-tree-id13039 . -1) (undo-tree-id13040 . -1) (undo-tree-id13041 . -1) (undo-tree-id13042 . -1) (undo-tree-id13043 . -1) (undo-tree-id13044 . -1) (undo-tree-id13045 . -1) (undo-tree-id13046 . -1) 2798) nil (26040 65052 818023 603000) 0 nil])
([nil nil ((2796 . 2797) (t 26040 65052 844259 150000)) nil (26040 65162 619823 628000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2796) (undo-tree-id13891 . -1) (undo-tree-id13892 . -1) 2797) nil (26040 65162 619822 745000) 0 nil])
([nil nil ((2786 . 2787)) nil (26040 65162 619820 948000) 0 nil])
([nil nil ((2786 . 2790)) nil (26040 65162 619820 339000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -2788) (undo-tree-id13888 . -1) (undo-tree-id13889 . -1) (#("d" 0 1 (fontified t)) . -2789) (undo-tree-id13890 . -1) 2790) nil (26040 65162 619819 481000) 0 nil])
([nil nil ((2788 . 2792)) nil (26040 65162 619816 950000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -2791) (undo-tree-id13887 . -1) 2792) nil (26040 65162 619816 301000) 0 nil])
([nil nil ((2791 . 2800)) nil (26040 65162 619814 855000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -2798) (undo-tree-id13885 . -1) (#("a" 0 1 (fontified t)) . -2799) (undo-tree-id13886 . -1) 2800) nil (26040 65162 619814 5000) 0 nil])
([nil nil ((2798 . 2801)) nil (26040 65162 619811 743000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2806 2809 nil nil nil nil #s(yas--exit 2810 nil))) #s(yas--exit 2810 nil) 98 nil #s(yas--field 1 2806 2809 nil nil nil nil #s(yas--exit 2810 nil)) nil nil)) (2796 . 2810) (#("transmute(${1:src})$0" 0 21 (fontified nil)) . 2796) (2796 . 2817) (#("trans" 0 5 (fontified nil)) . 2796) (2796 . 2801) (#("transmute(…)" 0 12 (fontified nil)) . -2796) (2796 . 2808) (#("trans" 0 5 (fontified t)) . -2796) (undo-tree-id13884 . -5) 2801) nil (26040 65162 619810 613000) 0 nil])
([nil nil ((apply yas--snippet-revive 2796 2810 #s(yas--snippet nil (#s(yas--field 1 2806 2809 nil nil nil nil #s(yas--exit 2810 nil))) #s(yas--exit 2810 nil) 98 nil #s(yas--field 1 2806 2809 nil nil nil nil #s(yas--exit 2810 nil)) nil nil))) nil (26040 65162 619808 268000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -2805) (undo-tree-id13874 . -1) (undo-tree-id13875 . -1) (#("s" 0 1 (fontified t)) . -2806) (undo-tree-id13876 . -1) (undo-tree-id13877 . -1) (#("r" 0 1 (fontified t)) . -2807) (undo-tree-id13878 . -1) (undo-tree-id13879 . -1) (#("c" 0 1 (fontified t)) . -2808) (undo-tree-id13880 . -1) (undo-tree-id13881 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -2809) (undo-tree-id13882 . -1) (undo-tree-id13883 . -1) 2810) nil (26040 65162 619806 663000) 0 nil])
([nil nil ((2805 . 2809)) nil (26040 65162 619798 882000) 0 nil])
([nil nil ((2808 . 2810)) nil (26040 65162 619798 320000) 0 nil])
([nil nil ((2810 . 2812)) nil (26040 65162 619797 851000) 0 nil])
([nil nil ((2811 . 2815)) nil (26040 65162 619796 986000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -2813) (undo-tree-id13870 . -1) (undo-tree-id13871 . -1) (#("i" 0 1 (fontified t)) . -2814) (undo-tree-id13872 . -1) (undo-tree-id13873 . -1) 2815) nil (26040 65162 619795 980000) 0 nil])
([nil nil ((2813 . 2816)) nil (26040 65162 619792 706000) 0 nil])
([nil nil ((2816 . 2821)) nil (26040 65162 619792 209000) 0 nil])
([nil nil ((2821 . 2823)) nil (26040 65162 619791 761000) 0 nil])
([nil nil ((2816 . 2828) (#("image_t" 0 7 (fontified nil)) . 2816) (2816 . 2823) (#("zbar_image_t" 0 12 (fontified nil)) . -2816) (2816 . 2828) (#("image_t" 0 7 (fontified t)) . -2816) (undo-tree-id13868 . -7) (undo-tree-id13869 . -7) 2823) nil (26040 65162 619790 590000) 0 nil])
([nil nil ((2828 . 2829)) nil (26040 65162 619788 158000) 0 nil])
([nil nil ((2811 . 2816)) nil (26040 65162 619787 548000) 0 nil])
([nil nil ((2834 . 2835)) nil (26040 65162 619786 996000) 0 nil])
([nil nil ((2835 . 2843)) nil (26040 65162 619786 445000) 0 nil])
([nil nil ((2842 . 2848) (#("c" 0 1 (fontified nil)) . 2842) (2842 . 2843) (#("c_void" 0 6 (fontified nil)) . -2842) (2842 . 2848) (#("c" 0 1 (fontified t)) . -2842) (undo-tree-id13858 . -1) (undo-tree-id13859 . -1) (undo-tree-id13860 . -1) (undo-tree-id13861 . -1) (undo-tree-id13862 . -1) (undo-tree-id13863 . -1) (undo-tree-id13864 . -1) (undo-tree-id13865 . -1) (undo-tree-id13866 . -1) (undo-tree-id13867 . -1) 2843) nil (26040 65162 619785 115000) 0 nil])
([nil nil ((2849 . 2851)) nil (26040 65162 619777 392000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -2873) (undo-tree-id13840 . -1) (undo-tree-id13841 . -1) (undo-tree-id13842 . -1) (undo-tree-id13843 . -1) (undo-tree-id13844 . -1) (undo-tree-id13845 . -1) (undo-tree-id13846 . -1) (undo-tree-id13847 . -1) (undo-tree-id13848 . -1) (undo-tree-id13849 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -2874) (undo-tree-id13850 . -1) (undo-tree-id13851 . -1) (undo-tree-id13852 . -1) (undo-tree-id13853 . -1) (undo-tree-id13854 . -1) (undo-tree-id13855 . -1) (undo-tree-id13856 . -1) (undo-tree-id13857 . -1) 2875) nil (26040 65162 619775 982000) 0 nil])
([nil nil ((2851 . 2856)) nil (26040 65162 619763 185000) 0 nil])
([nil nil ((2851 . 2852)) nil (26040 65162 619762 510000) 0 nil])
([nil nil ((2857 . 2862)) nil (26040 65162 619761 947000) 0 nil])
([nil nil ((2858 . 2864) (#("void" 0 4 (fontified nil)) . 2858) (2858 . 2862) (#("c_void" 0 6 (fontified nil)) . -2858) (2858 . 2864) (#("void" 0 4 (fontified t)) . -2858) (undo-tree-id13823 . -4) (undo-tree-id13824 . -4) (undo-tree-id13825 . -1) (undo-tree-id13826 . -1) (undo-tree-id13827 . -1) (undo-tree-id13828 . -2) (undo-tree-id13829 . -2) (undo-tree-id13830 . -3) (undo-tree-id13831 . -3) (undo-tree-id13832 . -4) (undo-tree-id13833 . -4) (undo-tree-id13834 . -4) (undo-tree-id13835 . -4) (undo-tree-id13836 . -4) (undo-tree-id13837 . -4) (undo-tree-id13838 . -4) (undo-tree-id13839 . -4) 2862) nil (26040 65162 619760 129000) 0 nil])
([nil nil ((2864 . 2865)) nil (26040 65162 619745 536000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2864) (undo-tree-id13812 . -1) (undo-tree-id13813 . -1) (undo-tree-id13814 . -1) (undo-tree-id13815 . -1) (undo-tree-id13816 . -1) (undo-tree-id13817 . -1) (undo-tree-id13818 . -1) (undo-tree-id13819 . -1) (undo-tree-id13820 . -1) (undo-tree-id13821 . -1) (undo-tree-id13822 . -1) 2865) nil (26040 65162 619741 662000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2865) (undo-tree-id13906 . -1) (undo-tree-id13907 . -1) (undo-tree-id13908 . -1) (undo-tree-id13909 . -1) (undo-tree-id13910 . -1) (undo-tree-id13911 . -1) (undo-tree-id13912 . -1) (undo-tree-id13913 . -1) (undo-tree-id13914 . -1) (undo-tree-id13915 . -1) (undo-tree-id13916 . -1) 2866 (t 26040 65162 644265 786000)) nil (26040 65169 991642 233000) 0 nil])
([nil nil ((2865 . 2866)) nil (26040 65169 991633 719000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -2865) (undo-tree-id13893 . -1) (undo-tree-id13894 . -1) (undo-tree-id13895 . -1) (undo-tree-id13896 . -1) (undo-tree-id13897 . -1) (undo-tree-id13898 . -1) (undo-tree-id13899 . -1) (undo-tree-id13900 . -1) (undo-tree-id13901 . -1) (undo-tree-id13902 . -1) (undo-tree-id13903 . -1) (undo-tree-id13904 . -1) (undo-tree-id13905 . -1) 2866) nil (26040 65169 991631 783000) 0 nil])
([nil nil ((2865 . 2866)) nil (26040 65169 991616 665000) 0 nil])
([nil nil ((2876 . 2877)) nil (26040 65169 991612 691000) 0 nil])
([nil nil ((2887 . 2889) (t 26040 65170 47599 555000)) nil (26040 65173 889708 821000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2888) (undo-tree-id13958 . -1) (undo-tree-id13959 . -1) (undo-tree-id13960 . -1) (undo-tree-id13961 . -1) (undo-tree-id13962 . -1) (undo-tree-id13963 . -1) (undo-tree-id13964 . -1) (undo-tree-id13965 . -1) (undo-tree-id13966 . -1) (undo-tree-id13967 . -1) (undo-tree-id13968 . -1) 2889) nil (26040 65173 889707 602000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2887) (undo-tree-id13941 . -1) (undo-tree-id13942 . -1) (undo-tree-id13943 . -1) (undo-tree-id13944 . -1) (undo-tree-id13945 . -1) (undo-tree-id13946 . -1) (undo-tree-id13947 . -1) (undo-tree-id13948 . -1) (undo-tree-id13949 . -1) (undo-tree-id13950 . -1) (undo-tree-id13951 . -1) (undo-tree-id13952 . -1) (undo-tree-id13953 . -1) (undo-tree-id13954 . -1) (undo-tree-id13955 . -1) (undo-tree-id13956 . -1) (undo-tree-id13957 . -1) 2888) nil (26040 65173 889698 0) 0 nil])
([nil nil ((2887 . 2890)) nil (26040 65173 889684 884000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2887) (undo-tree-id13917 . -1) (undo-tree-id13918 . -1) (undo-tree-id13919 . -1) (undo-tree-id13920 . -1) (undo-tree-id13921 . -1) (undo-tree-id13922 . -1) (undo-tree-id13923 . -1) (undo-tree-id13924 . -1) (undo-tree-id13925 . -1) (undo-tree-id13926 . -1) (undo-tree-id13927 . -1) (undo-tree-id13928 . -1) (#("/" 0 1 (fontified t)) . -2888) (undo-tree-id13929 . -1) (undo-tree-id13930 . -1) (undo-tree-id13931 . -1) (undo-tree-id13932 . -1) (undo-tree-id13933 . -1) (undo-tree-id13934 . -1) (undo-tree-id13935 . -1) (undo-tree-id13936 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -2889) (undo-tree-id13937 . -1) (undo-tree-id13938 . -1) (undo-tree-id13939 . -1) (undo-tree-id13940 . -1) 2890) nil (26040 65173 889681 770000) 0 nil])
([nil nil ((2887 . 2889)) nil (26040 65173 889653 659000) 0 nil])
([nil nil ((2808 . 2815) (t 26040 65173 914266 453000)) nil (26040 65184 762737 572000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -2812) (undo-tree-id13969 . -1) (undo-tree-id13970 . -1) (undo-tree-id13971 . -1) (undo-tree-id13972 . -1) (undo-tree-id13973 . -1) (undo-tree-id13974 . -1) (undo-tree-id13975 . -1) (undo-tree-id13976 . -1) (undo-tree-id13977 . -1) (undo-tree-id13978 . -1) (undo-tree-id13979 . -1) (#("e" 0 1 (fontified t)) . -2813) (undo-tree-id13980 . -1) (undo-tree-id13981 . -1) (undo-tree-id13982 . -1) (undo-tree-id13983 . -1) (undo-tree-id13984 . -1) (undo-tree-id13985 . -1) (undo-tree-id13986 . -1) (#(" " 0 1 (fontified t)) . -2814) (undo-tree-id13987 . -1) (undo-tree-id13988 . -1) (undo-tree-id13989 . -1) 2815) nil (26040 65184 762734 222000) 0 nil])
([nil nil ((2812 . 2815)) nil (26040 65184 762707 608000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . 2894) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 2894) (t 26040 65184 820933 782000)) nil (26040 65195 986747 82000) 0 nil])
([nil nil ((2937 . 2938)) nil (26040 65195 986745 398000) 0 nil])
([nil nil ((2937 . 2944) (#("h" 0 1 (fontified nil)) . 2937) (2937 . 2938) (#("handler" 0 7 (fontified nil)) . -2937) (2937 . 2944) (#("h" 0 1 (fontified t)) . -2937) (undo-tree-id13990 . -1) (undo-tree-id13991 . -1) (undo-tree-id13992 . -1) (undo-tree-id13993 . -1) (undo-tree-id13994 . -1) (undo-tree-id13995 . -1) 2938) nil (26040 65195 986741 122000) 0 nil])
([nil nil ((2937 . 2941) (t 26040 65196 44267 802000)) nil (26040 65212 910410 893000) 0 nil])
([nil nil ((2941 . 2942)) nil (26040 65212 910409 834000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-type-face fontified t)) . -2941) (undo-tree-id13996 . -1) (undo-tree-id13997 . -1) (undo-tree-id13998 . -1) 2942) nil (26040 65212 910408 102000) 0 nil])
([nil nil ((2941 . 2942)) nil (26040 65212 910397 417000) 0 nil])
([nil nil ((2949 . 2950)) nil (26040 65212 910393 242000) 0 nil])
([nil nil ((#("handler)" 0 7 (fontified t) 7 8 (face (rainbow-delimiters-depth-4-face) fontified t)) . -2942) (undo-tree-id14052 . -8) (undo-tree-id14053 . -8) (undo-tree-id14054 . 8) (undo-tree-id14055 . -8) (undo-tree-id14056 . -8) (undo-tree-id14057 . -8) (undo-tree-id14058 . -8) (undo-tree-id14059 . -8) (undo-tree-id14060 . -8) (undo-tree-id14061 . -8) (undo-tree-id14062 . -8) (undo-tree-id14063 . -8) (undo-tree-id14064 . -8) (undo-tree-id14065 . -8) (undo-tree-id14066 . -7) (undo-tree-id14067 . -7) (undo-tree-id14068 . -7) (undo-tree-id14069 . -7) (undo-tree-id14070 . -7) (undo-tree-id14071 . -7) (undo-tree-id14072 . -7) (undo-tree-id14073 . -7) (undo-tree-id14074 . -7) (undo-tree-id14075 . -6) (undo-tree-id14076 . -6) (undo-tree-id14077 . -6) (undo-tree-id14078 . -6) (undo-tree-id14079 . -6) (undo-tree-id14080 . -7) (undo-tree-id14081 . -8) (undo-tree-id14082 . -8) (undo-tree-id14083 . -8) (undo-tree-id14084 . -8) (undo-tree-id14085 . -8) (undo-tree-id14086 . -8) (undo-tree-id14087 . -8) 2950 (t 26040 65212 934268 824000)) nil (26040 65221 542883 270000) 0 nil])
([nil nil ((#("Some(" 0 4 (face font-lock-type-face fontified t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t)) . -2937) (undo-tree-id14010 . -5) (undo-tree-id14011 . -5) (undo-tree-id14012 . -4) (undo-tree-id14013 . -4) (undo-tree-id14014 . -5) (undo-tree-id14015 . -5) (undo-tree-id14016 . -5) (undo-tree-id14017 . -5) (undo-tree-id14018 . -5) (undo-tree-id14019 . -5) (undo-tree-id14020 . -5) (undo-tree-id14021 . -5) (undo-tree-id14022 . -5) (undo-tree-id14023 . -5) (undo-tree-id14024 . -5) (undo-tree-id14025 . -5) (undo-tree-id14026 . -5) (undo-tree-id14027 . -5) (undo-tree-id14028 . -5) (undo-tree-id14029 . -5) (undo-tree-id14030 . -5) (undo-tree-id14031 . -5) (undo-tree-id14032 . -5) (undo-tree-id14033 . -5) (undo-tree-id14034 . -5) (undo-tree-id14035 . -5) (undo-tree-id14036 . -5) (undo-tree-id14037 . -5) (undo-tree-id14038 . -5) (undo-tree-id14039 . -5) (undo-tree-id14040 . -5) (undo-tree-id14041 . -5) (undo-tree-id14042 . -5) (undo-tree-id14043 . -5) (undo-tree-id14044 . -5) (undo-tree-id14045 . -5) (undo-tree-id14046 . -5) (undo-tree-id14047 . -5) (undo-tree-id14048 . -5) (undo-tree-id14049 . -5) (undo-tree-id14050 . -5) (undo-tree-id14051 . -5) 2942) nil (26040 65221 542855 494000) 0 nil])
([nil nil ((2937 . 2938)) nil (26040 65221 542824 369000) 0 nil])
([nil nil ((2937 . 2944) (#("h" 0 1 (fontified nil)) . 2937) (2937 . 2938) (#("handler" 0 7 (fontified nil)) . -2937) (2937 . 2944) (#("h" 0 1 (fontified t)) . -2937) (undo-tree-id13999 . -1) (undo-tree-id14000 . -1) (undo-tree-id14001 . -1) (undo-tree-id14002 . -1) (undo-tree-id14003 . -1) (undo-tree-id14004 . -1) (undo-tree-id14005 . -1) (undo-tree-id14006 . -1) (undo-tree-id14007 . -1) (undo-tree-id14008 . -1) (undo-tree-id14009 . -1) 2938) nil (26040 65221 542820 233000) 0 nil])
([nil nil ((#("None" 0 4 (face font-lock-type-face fontified t)) . -2946) (undo-tree-id14170 . -4) (undo-tree-id14171 . -4) 2950 (t 26040 65221 567602 682000)) nil (26040 65330 481368 735000) 0 nil])
([nil nil ((2946 . 2950)) nil (26040 65330 481366 455000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2962 2968 nil nil nil t #s(yas--exit 2969 nil))) #s(yas--exit 2969 nil) 99 nil #s(yas--field 1 2962 2968 nil nil nil t #s(yas--exit 2969 nil)) nil nil)) (2946 . 2954) (#("Some(${1:()})$0" 0 15 (fontified nil)) . 2946) (2946 . 2961) (#("Some" 0 4 (fontified nil)) . 2946) (2946 . 2950) (#("Some(…)" 0 7 (fontified nil)) . -2946) (2946 . 2953) (#("Some" 0 4 (face font-lock-type-face fontified t)) . -2946) (undo-tree-id14168 . -4) (undo-tree-id14169 . -4) 2950) nil (26040 65330 481365 148000) 0 nil])
([nil nil ((#("()" 0 1 (face (rainbow-delimiters-depth-5-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-5-face) fontified nil)) . 2952) (undo-tree-id14167 . -2) (2951 . 2952)) nil (26040 65330 481361 980000) 0 nil])
([nil nil ((2951 . 2957) (#("c" 0 1 (fontified nil)) . 2951) (undo-tree-id14162 . -1) (2951 . 2952) (#("c_void" 0 6 (fontified nil)) . -2951) (undo-tree-id14163 . -6) (2951 . 2957) (#("c" 0 1 (fontified t)) . -2951) (undo-tree-id14164 . -1) (undo-tree-id14165 . -1) (undo-tree-id14166 . -1) 2952) nil (26040 65330 481360 44000) 0 nil])
([nil nil ((2957 . 2960)) nil (26040 65330 481354 809000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t)) . -2953) (undo-tree-id14141 . -1) (undo-tree-id14142 . -1) (undo-tree-id14143 . -1) (#("o" 0 1 (fontified t)) . -2954) (undo-tree-id14144 . -1) (undo-tree-id14145 . -1) (undo-tree-id14146 . -1) (#("i" 0 1 (fontified t)) . -2955) (undo-tree-id14147 . -1) (undo-tree-id14148 . -1) (undo-tree-id14149 . -1) (#("d" 0 1 (fontified t)) . -2956) (undo-tree-id14150 . -1) (undo-tree-id14151 . -1) (undo-tree-id14152 . -1) (#(":" 0 1 (fontified t)) . -2957) (undo-tree-id14153 . -1) (undo-tree-id14154 . -1) (undo-tree-id14155 . -1) (#(":" 0 1 (fontified t)) . -2958) (undo-tree-id14156 . -1) (undo-tree-id14157 . -1) (undo-tree-id14158 . -1) (#("N" 0 1 (face font-lock-type-face fontified t)) . -2959) (undo-tree-id14159 . -1) (undo-tree-id14160 . -1) (undo-tree-id14161 . -1) 2960) nil (26040 65330 481352 869000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -2951) (undo-tree-id14135 . -1) (undo-tree-id14136 . -1) (undo-tree-id14137 . -1) (#("_" 0 1 (fontified t)) . -2952) (undo-tree-id14138 . -1) (undo-tree-id14139 . -1) (undo-tree-id14140 . -1) 2953) nil (26040 65330 481336 839000) 0 nil])
([nil nil ((2951 . 2955)) nil (26040 65330 481330 646000) 0 nil])
([nil nil ((#("N" 0 1 (face font-lock-type-face fontified t)) . -2951) (undo-tree-id14123 . -1) (undo-tree-id14124 . -1) (undo-tree-id14125 . -1) (#("U" 0 1 (face font-lock-type-face fontified t)) . -2952) (undo-tree-id14126 . -1) (undo-tree-id14127 . -1) (undo-tree-id14128 . -1) (#("L" 0 1 (face font-lock-type-face fontified t)) . -2953) (undo-tree-id14129 . -1) (undo-tree-id14130 . -1) (undo-tree-id14131 . -1) (#("L" 0 1 (face font-lock-type-face fontified t)) . -2954) (undo-tree-id14132 . -1) (undo-tree-id14133 . -1) (undo-tree-id14134 . -1) 2955) nil (26040 65330 481328 962000) 0 nil])
([nil nil ((2951 . 2953)) nil (26040 65330 481093 829000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -2951) (undo-tree-id14108 . -1) (undo-tree-id14109 . -1) (undo-tree-id14110 . -1) (undo-tree-id14111 . -1) (undo-tree-id14112 . -1) (undo-tree-id14113 . -1) (undo-tree-id14114 . -1) (undo-tree-id14115 . -1) (undo-tree-id14116 . -1) (#("u" 0 1 (fontified t)) . -2952) (undo-tree-id14117 . -1) (undo-tree-id14118 . -1) (undo-tree-id14119 . -1) (undo-tree-id14120 . -1) (undo-tree-id14121 . -1) (undo-tree-id14122 . -1) 2953) nil (26040 65330 481092 181000) 0 nil])
([nil nil ((2951 . 2955)) nil (26040 65330 481080 39000) 0 nil])
([nil nil ((75 . 86) (apply yas--snippet-revive 2951 2957 #s(yas--snippet nil nil #s(yas--exit 2957 nil) 100 nil nil #s(yas--field 1 2962 2968 nil nil nil t #s(yas--exit 2969 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2957 nil) 100 nil nil #s(yas--field 1 2962 2968 nil nil nil t #s(yas--exit 2969 nil)) nil)) (2951 . 2957) (#("null()$0" 0 8 (fontified nil)) . 2951) (undo-tree-id14088 . -8) (2951 . 2959) (#("null" 0 4 (fontified nil)) . 2951) (undo-tree-id14089 . -4) (2951 . 2955) (#("null() (use std::ptr::null)" 0 27 (fontified nil)) . -2951) (undo-tree-id14090 . -27) (2951 . 2978) (#("null" 0 4 (fontified t)) . -2951) (undo-tree-id14091 . -4) (undo-tree-id14092 . -4) (undo-tree-id14093 . -4) (undo-tree-id14094 . -1) (undo-tree-id14095 . -1) (undo-tree-id14096 . -1) (undo-tree-id14097 . -2) (undo-tree-id14098 . -2) (undo-tree-id14099 . -2) (undo-tree-id14100 . -3) (undo-tree-id14101 . -3) (undo-tree-id14102 . -4) (undo-tree-id14103 . -4) (undo-tree-id14104 . -4) (undo-tree-id14105 . -4) (undo-tree-id14106 . -4) (undo-tree-id14107 . -4) 2955) nil (26040 65330 481075 173000) 0 nil])
([nil nil ((apply yas--snippet-revive 2957 2969 #s(yas--snippet nil (#s(yas--field 1 2962 2968 nil nil nil t #s(yas--exit 2969 nil))) #s(yas--exit 2969 nil) 99 nil #s(yas--field 1 2962 2968 nil nil nil t #s(yas--exit 2969 nil)) nil nil))) nil (26040 65357 424697 612000) 0 nil])
([nil nil ((#("ffi::zbar_processor_set_data_handler(proc, handler, Some(null()));" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t) 5 36 (fontified t) 36 37 (face (rainbow-delimiters-depth-3-face) fontified t) 37 41 (fontified t) 41 43 (fontified t) 43 50 (fontified t) 50 52 (fontified t) 52 56 (face font-lock-type-face fontified t) 56 57 (face (rainbow-delimiters-depth-4-face) fontified t) 57 61 (fontified t) 61 62 (face (rainbow-delimiters-depth-5-face) fontified t) 62 63 (face (rainbow-delimiters-depth-5-face) fontified t) 63 64 (face (rainbow-delimiters-depth-4-face) fontified t) 64 65 (face (rainbow-delimiters-depth-3-face) fontified t) 65 66 (fontified t)) . 2905) (undo-tree-id14217 . -23) (undo-tree-id14218 . -23) (undo-tree-id14219 . -43) (undo-tree-id14220 . -46) (undo-tree-id14221 . -46) (undo-tree-id14222 . -57) (undo-tree-id14223 . -57) (undo-tree-id14224 . -57) (undo-tree-id14225 . -57) (undo-tree-id14226 . -57) (undo-tree-id14227 . -57) (undo-tree-id14228 . -57) (undo-tree-id14229 . -57) (undo-tree-id14230 . -57) (undo-tree-id14231 . -57) (undo-tree-id14232 . -57) (undo-tree-id14233 . -57) (undo-tree-id14234 . -57) (undo-tree-id14235 . -57) (undo-tree-id14236 . -57) (undo-tree-id14237 . -57) (undo-tree-id14238 . -57) (undo-tree-id14239 . -57) (undo-tree-id14240 . -57) (undo-tree-id14241 . -57) (undo-tree-id14242 . -63) (undo-tree-id14243 . -63) (undo-tree-id14244 . -63) (undo-tree-id14245 . -63) (undo-tree-id14246 . -63) (undo-tree-id14247 . -63) (undo-tree-id14248 . -63) (undo-tree-id14249 . -63) (undo-tree-id14250 . -63) (undo-tree-id14251 . -63) (undo-tree-id14252 . -63) (undo-tree-id14253 . -63) (undo-tree-id14254 . -63) (undo-tree-id14255 . -63) (undo-tree-id14256 . -64) (undo-tree-id14257 . -64) (undo-tree-id14258 . -64) (undo-tree-id14259 . -64) (undo-tree-id14260 . -64) (undo-tree-id14261 . -64) (undo-tree-id14262 . -64) (undo-tree-id14263 . -64) (undo-tree-id14264 . -64) (undo-tree-id14265 . -66) (t 26040 65330 507609 290000)) nil (26040 65357 424695 210000) 0 nil])
([nil nil ((2905 . 2911)) nil (26040 65357 424658 119000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -2910) (undo-tree-id14211 . -1) (undo-tree-id14212 . -1) (undo-tree-id14213 . -1) (undo-tree-id14214 . -1) (undo-tree-id14215 . -1) (undo-tree-id14216 . -1) 2911) nil (26040 65357 424657 102000) 0 nil])
([nil nil ((2910 . 2924)) nil (26040 65357 424651 962000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2942 2951 nil nil nil nil #s(yas--field 2 2953 2960 nil nil nil nil #s(yas--field 3 2962 2970 nil nil nil nil #s(yas--exit 2971 nil)))) #s(yas--field 2 2953 2960 nil nil nil nil #s(yas--field 3 2962 2970 nil nil nil nil #s(yas--exit 2971 nil))) #s(yas--field 3 2962 2970 nil nil nil nil #s(yas--exit 2971 nil))) #s(yas--exit 2971 nil) 101 nil #s(yas--field 1 2942 2951 nil nil nil nil #s(yas--field 2 2953 2960 nil nil nil nil #s(yas--field 3 2962 2970 nil nil nil nil #s(yas--exit 2971 nil)))) nil nil)) (2910 . 2971) (#("zbar_processor_set_data_handler(${1:processor}, ${2:handler}, ${3:userdata})$0" 0 78 (fontified nil)) . 2910) (2910 . 2988) (#("processor_data" 0 14 (fontified nil)) . 2910) (2910 . 2924) (#("zbar_processor_set_data_handler(…)" 0 34 (fontified nil)) . -2910) (2910 . 2944) (#("processor_data" 0 14 (fontified t)) . -2910) (undo-tree-id14172 . -14) (undo-tree-id14173 . -1) (undo-tree-id14174 . -1) (undo-tree-id14175 . -1) (undo-tree-id14176 . -2) (undo-tree-id14177 . -2) (undo-tree-id14178 . -3) (undo-tree-id14179 . -3) (undo-tree-id14180 . -4) (undo-tree-id14181 . -4) (undo-tree-id14182 . -5) (undo-tree-id14183 . -5) (undo-tree-id14184 . -6) (undo-tree-id14185 . -6) (undo-tree-id14186 . -7) (undo-tree-id14187 . -7) (undo-tree-id14188 . -8) (undo-tree-id14189 . -8) (undo-tree-id14190 . -9) (undo-tree-id14191 . -9) (undo-tree-id14192 . -9) (undo-tree-id14193 . -9) (undo-tree-id14194 . -10) (undo-tree-id14195 . -10) (undo-tree-id14196 . -10) (undo-tree-id14197 . -10) (undo-tree-id14198 . -10) (undo-tree-id14199 . -11) (undo-tree-id14200 . -11) (undo-tree-id14201 . -11) (undo-tree-id14202 . -12) (undo-tree-id14203 . -12) (undo-tree-id14204 . -13) (undo-tree-id14205 . -13) (undo-tree-id14206 . -14) (undo-tree-id14207 . -14) (undo-tree-id14208 . -14) (undo-tree-id14209 . -14) (undo-tree-id14210 . -14) 2924) nil (26040 65357 424648 357000) 0 nil])
([nil nil ((apply yas--snippet-revive 2910 2971 #s(yas--snippet nil (#s(yas--field 1 2942 2951 nil nil nil nil #s(yas--field 2 2953 2960 nil nil nil nil #s(yas--field 3 2962 2970 nil nil nil nil #s(yas--exit 2971 nil)))) #s(yas--field 2 2953 2960 nil nil nil nil #s(yas--field 3 2962 2970 nil nil nil nil #s(yas--exit 2971 nil))) #s(yas--field 3 2962 2970 nil nil nil nil #s(yas--exit 2971 nil))) #s(yas--exit 2971 nil) 101 nil #s(yas--field 1 2942 2951 nil nil nil nil #s(yas--field 2 2953 2960 nil nil nil nil #s(yas--field 3 2962 2970 nil nil nil nil #s(yas--exit 2971 nil)))) nil nil))) nil (26040 65358 110803 193000) 0 nil])
([nil nil ((2971 . 2972)) nil (26040 65359 603851 615000) 0 nil] [nil nil ((#("
" 0 1 (fontified t)) . 2971)) ((2971 . 2972)) (26040 65357 424949 577000) 0 nil])
([nil nil ((#("processor" 0 9 (fontified t)) . -2942) (undo-tree-id14277 . -9) (undo-tree-id14278 . -9) 2951 (t 26040 65359 620944 376000)) nil (26040 65363 314224 466000) 0 nil])
([nil nil ((2971 . 2972)) ((#(";" 0 1 (fontified t)) . 2971) (undo-tree-id14266 . -1) (undo-tree-id14267 . -1)) (26040 65357 424483 476000) 0 nil])
([nil nil ((2942 . 2943)) nil (26040 65363 314221 28000) 0 nil])
nil
([nil nil ((2942 . 2946) (#("p" 0 1 (fontified nil)) . 2942) (2942 . 2943) (#("proc" 0 4 (fontified nil)) . -2942) (2942 . 2946) (#("p" 0 1 (fontified t)) . -2942) (undo-tree-id14268 . -1) (undo-tree-id14269 . -1) (undo-tree-id14270 . -1) (undo-tree-id14271 . -1) (undo-tree-id14272 . -1) (undo-tree-id14273 . -1) (undo-tree-id14274 . -1) (undo-tree-id14275 . -1) (undo-tree-id14276 . -1) 2943) nil (26040 65363 314216 884000) 0 nil])
([nil nil ((#("userdata" 0 8 (fontified t)) . -2957) (undo-tree-id14918 . -8) (undo-tree-id14919 . -8) (undo-tree-id14920 . -8) (undo-tree-id14921 . -8) (undo-tree-id14922 . -8) (undo-tree-id14923 . -8) (undo-tree-id14924 . -8) (undo-tree-id14925 . -8) (undo-tree-id14926 . -8) (undo-tree-id14927 . -8) (undo-tree-id14928 . -8) (undo-tree-id14929 . -8) (undo-tree-id14930 . -8) 2965 (t 26040 65363 374277 935000)) nil (26040 65480 448057 640000) 0 nil])
([nil nil ((2957 . 2958)) nil (26040 65480 448048 12000) 0 nil])
([nil nil ((2957 . 2963) (#("c" 0 1 (fontified nil)) . 2957) (2957 . 2958) (#("c_void" 0 6 (fontified nil)) . -2957) (2957 . 2963) (#("c" 0 1 (fontified t)) . -2957) (undo-tree-id14911 . -1) (undo-tree-id14912 . -1) (undo-tree-id14913 . -1) (undo-tree-id14914 . -1) (undo-tree-id14915 . -1) (undo-tree-id14916 . -1) (undo-tree-id14917 . -1) 2958) nil (26040 65480 448046 608000) 0 nil])
([nil nil ((2963 . 2967)) nil (26040 65480 448040 104000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -2966) (undo-tree-id14904 . -1) (undo-tree-id14905 . -1) (undo-tree-id14906 . -1) (undo-tree-id14907 . -1) (undo-tree-id14908 . -1) (undo-tree-id14909 . -1) (undo-tree-id14910 . -1) 2967) nil (26040 65480 448038 984000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -2965) (undo-tree-id14885 . -1) (undo-tree-id14886 . -1) (undo-tree-id14887 . -1) (undo-tree-id14888 . -1) (undo-tree-id14889 . -1) (undo-tree-id14890 . -1) (undo-tree-id14891 . -1) (undo-tree-id14892 . -1) (undo-tree-id14893 . -1) (undo-tree-id14894 . -1) (undo-tree-id14895 . -1) (undo-tree-id14896 . -1) (undo-tree-id14897 . -1) (undo-tree-id14898 . -1) (undo-tree-id14899 . -1) (undo-tree-id14900 . -1) (undo-tree-id14901 . -1) (undo-tree-id14902 . -1) (undo-tree-id14903 . -1) 2966) nil (26040 65480 448032 792000) 0 nil])
([nil nil ((#("void::" 0 4 (face font-lock-constant-face fontified t) 4 6 (fontified t)) . -2959) (undo-tree-id14850 . -6) (undo-tree-id14851 . -6) (undo-tree-id14852 . -4) (undo-tree-id14853 . -4) (undo-tree-id14854 . -4) (undo-tree-id14855 . -5) (undo-tree-id14856 . -5) (undo-tree-id14857 . -6) (undo-tree-id14858 . -6) (undo-tree-id14859 . -6) (undo-tree-id14860 . -6) (undo-tree-id14861 . -6) (undo-tree-id14862 . -6) (undo-tree-id14863 . -6) (undo-tree-id14864 . -6) (undo-tree-id14865 . -6) (undo-tree-id14866 . -6) (undo-tree-id14867 . -6) (undo-tree-id14868 . -6) (undo-tree-id14869 . -6) (undo-tree-id14870 . -6) (undo-tree-id14871 . -6) (undo-tree-id14872 . -6) (undo-tree-id14873 . -6) (undo-tree-id14874 . -6) (undo-tree-id14875 . -6) (undo-tree-id14876 . -6) (undo-tree-id14877 . -6) (undo-tree-id14878 . -6) (undo-tree-id14879 . -6) (undo-tree-id14880 . -6) (undo-tree-id14881 . -6) (undo-tree-id14882 . -6) (undo-tree-id14883 . -6) (undo-tree-id14884 . -6) 2965) nil (26040 65480 448018 4000) 0 nil])
([nil nil ((#("c_" 0 2 (fontified t)) . -2957) (undo-tree-id14774 . -2) (undo-tree-id14775 . -2) (undo-tree-id14776 . -2) (undo-tree-id14777 . -2) (undo-tree-id14778 . -2) (undo-tree-id14779 . -2) (undo-tree-id14780 . -2) (undo-tree-id14781 . -2) (undo-tree-id14782 . -2) (undo-tree-id14783 . -2) (undo-tree-id14784 . -2) (undo-tree-id14785 . -2) (undo-tree-id14786 . -2) (undo-tree-id14787 . -2) (undo-tree-id14788 . -2) (undo-tree-id14789 . -2) (undo-tree-id14790 . -2) (undo-tree-id14791 . -2) (undo-tree-id14792 . -2) (undo-tree-id14793 . -2) (undo-tree-id14794 . -2) (undo-tree-id14795 . -2) (undo-tree-id14796 . -2) (undo-tree-id14797 . -2) (undo-tree-id14798 . -2) (undo-tree-id14799 . -2) (undo-tree-id14800 . -2) (undo-tree-id14801 . -2) (undo-tree-id14802 . -2) (undo-tree-id14803 . -2) (undo-tree-id14804 . -2) (undo-tree-id14805 . -2) (undo-tree-id14806 . -2) (undo-tree-id14807 . -2) (undo-tree-id14808 . -2) (undo-tree-id14809 . -2) (undo-tree-id14810 . -2) (undo-tree-id14811 . -2) (undo-tree-id14812 . -2) (undo-tree-id14813 . -2) (undo-tree-id14814 . -2) (undo-tree-id14815 . -2) (undo-tree-id14816 . -2) (undo-tree-id14817 . -2) (undo-tree-id14818 . -2) (undo-tree-id14819 . -2) (undo-tree-id14820 . -2) (undo-tree-id14821 . -2) (undo-tree-id14822 . -2) (undo-tree-id14823 . -2) (undo-tree-id14824 . -2) (undo-tree-id14825 . -2) (undo-tree-id14826 . -2) (undo-tree-id14827 . -2) (undo-tree-id14828 . -2) (undo-tree-id14829 . -2) (undo-tree-id14830 . -2) (undo-tree-id14831 . -2) (undo-tree-id14832 . -2) (undo-tree-id14833 . -2) (undo-tree-id14834 . -2) (undo-tree-id14835 . -2) (undo-tree-id14836 . -2) (undo-tree-id14837 . -2) (undo-tree-id14838 . -2) (undo-tree-id14839 . -2) (undo-tree-id14840 . -2) (undo-tree-id14841 . -2) (undo-tree-id14842 . -2) (undo-tree-id14843 . -2) (undo-tree-id14844 . -2) (undo-tree-id14845 . -2) (undo-tree-id14846 . -2) (undo-tree-id14847 . -2) (undo-tree-id14848 . -2) (undo-tree-id14849 . -2) 2959) nil (26040 65480 447989 59000) 0 nil])
([nil nil ((2957 . 2958)) nil (26040 65480 447377 843000) 0 nil])
([nil nil ((2957 . 2963) (#("c" 0 1 (fontified nil)) . 2957) (2957 . 2958) (#("c_void" 0 6 (fontified nil)) . -2957) (2957 . 2963) (#("c" 0 1 (fontified t)) . -2957) (undo-tree-id14767 . -1) (undo-tree-id14768 . -1) (undo-tree-id14769 . -1) (undo-tree-id14770 . -1) (undo-tree-id14771 . -1) (undo-tree-id14772 . -1) (undo-tree-id14773 . -1) 2958) nil (26040 65480 447376 465000) 0 nil])
([nil nil ((2963 . 2965)) nil (26040 65480 447370 364000) 0 nil])
([nil nil ((2965 . 2966)) nil (26040 65480 447369 662000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -2965) (undo-tree-id14748 . -1) (undo-tree-id14749 . -1) (undo-tree-id14750 . -1) (undo-tree-id14751 . -1) (undo-tree-id14752 . -1) (undo-tree-id14753 . -1) (undo-tree-id14754 . -1) (undo-tree-id14755 . -1) (undo-tree-id14756 . -1) (undo-tree-id14757 . -1) (undo-tree-id14758 . -1) (undo-tree-id14759 . -1) (undo-tree-id14760 . -1) (undo-tree-id14761 . -1) (undo-tree-id14762 . -1) (undo-tree-id14763 . -1) (undo-tree-id14764 . -1) (undo-tree-id14765 . -1) (undo-tree-id14766 . -1) 2966) nil (26040 65480 447368 338000) 0 nil])
([nil nil ((2965 . 2966)) nil (26040 65480 447354 583000) 0 nil])
([nil nil ((#("N" 0 1 (face font-lock-type-face fontified t)) . -2965) (undo-tree-id14738 . -1) (undo-tree-id14739 . -1) (undo-tree-id14740 . -1) (undo-tree-id14741 . -1) (undo-tree-id14742 . -1) (undo-tree-id14743 . -1) (undo-tree-id14744 . -1) (undo-tree-id14745 . -1) (undo-tree-id14746 . -1) (undo-tree-id14747 . -1) 2966) nil (26040 65480 447353 270000) 0 nil])
([nil nil ((2965 . 2966)) nil (26040 65480 447152 71000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -2965) (undo-tree-id14732 . -1) (undo-tree-id14733 . -1) (undo-tree-id14734 . -1) (undo-tree-id14735 . -1) (undo-tree-id14736 . -1) (undo-tree-id14737 . -1) 2966) nil (26040 65480 447151 99000) 0 nil])
([nil nil ((2965 . 2967)) nil (26040 65480 447146 596000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -2965) (undo-tree-id14716 . -1) (undo-tree-id14717 . -1) (undo-tree-id14718 . -1) (undo-tree-id14719 . -1) (undo-tree-id14720 . -1) (undo-tree-id14721 . -1) (undo-tree-id14722 . -1) (undo-tree-id14723 . -1) (undo-tree-id14724 . -1) (undo-tree-id14725 . -1) (undo-tree-id14726 . -1) (#("o" 0 1 (fontified t)) . -2966) (undo-tree-id14727 . -1) (undo-tree-id14728 . -1) (undo-tree-id14729 . -1) (undo-tree-id14730 . -1) (undo-tree-id14731 . -1) 2967) nil (26040 65480 447145 275000) 0 nil])
([nil nil ((2965 . 2966)) nil (26040 65480 447133 887000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -2965) (undo-tree-id14711 . -1) (undo-tree-id14712 . -1) (undo-tree-id14713 . -1) (undo-tree-id14714 . -1) (undo-tree-id14715 . -1) 2966) nil (26040 65480 447132 940000) 0 nil])
([nil nil ((2965 . 2966)) nil (26040 65480 447128 874000) 0 nil])
([nil nil ((#("N" 0 1 (face font-lock-type-face fontified t)) . -2965) (undo-tree-id14705 . -1) (undo-tree-id14706 . -1) (undo-tree-id14707 . -1) (undo-tree-id14708 . -1) (undo-tree-id14709 . -1) (undo-tree-id14710 . -1) 2966) nil (26040 65480 447127 833000) 0 nil])
([nil nil ((#("void::" 0 4 (face font-lock-constant-face fontified t) 4 6 (fontified t)) . -2959) (undo-tree-id14583 . -4) (undo-tree-id14584 . -4) (undo-tree-id14585 . -4) (undo-tree-id14586 . -5) (undo-tree-id14587 . -5) (undo-tree-id14588 . -6) (undo-tree-id14589 . -6) (undo-tree-id14590 . -6) (undo-tree-id14591 . -6) (undo-tree-id14592 . -6) (undo-tree-id14593 . -6) (undo-tree-id14594 . -6) (undo-tree-id14595 . -6) (undo-tree-id14596 . -6) (undo-tree-id14597 . -6) (undo-tree-id14598 . -6) (undo-tree-id14599 . -6) (undo-tree-id14600 . -6) (undo-tree-id14601 . -6) (undo-tree-id14602 . -6) (undo-tree-id14603 . -6) (undo-tree-id14604 . -6) (undo-tree-id14605 . -6) (undo-tree-id14606 . -6) (undo-tree-id14607 . -6) (undo-tree-id14608 . -6) (undo-tree-id14609 . -6) (undo-tree-id14610 . -6) (undo-tree-id14611 . -6) (undo-tree-id14612 . -6) (undo-tree-id14613 . -6) (undo-tree-id14614 . -6) (undo-tree-id14615 . -6) (undo-tree-id14616 . -6) (undo-tree-id14617 . -6) (undo-tree-id14618 . -6) (undo-tree-id14619 . -6) (undo-tree-id14620 . -6) (undo-tree-id14621 . -6) (undo-tree-id14622 . -6) (undo-tree-id14623 . -6) (undo-tree-id14624 . -6) (undo-tree-id14625 . -6) (undo-tree-id14626 . -6) (undo-tree-id14627 . -6) (undo-tree-id14628 . -6) (undo-tree-id14629 . -6) (undo-tree-id14630 . -6) (undo-tree-id14631 . -6) (undo-tree-id14632 . -6) (undo-tree-id14633 . -6) (undo-tree-id14634 . -6) (undo-tree-id14635 . -6) (undo-tree-id14636 . -6) (undo-tree-id14637 . -6) (undo-tree-id14638 . -6) (undo-tree-id14639 . -6) (undo-tree-id14640 . -6) (undo-tree-id14641 . -6) (undo-tree-id14642 . -6) (undo-tree-id14643 . -6) (undo-tree-id14644 . -6) (undo-tree-id14645 . -6) (undo-tree-id14646 . -6) (undo-tree-id14647 . -6) (undo-tree-id14648 . -6) (undo-tree-id14649 . -6) (undo-tree-id14650 . -6) (undo-tree-id14651 . -6) (undo-tree-id14652 . -6) (undo-tree-id14653 . -6) (undo-tree-id14654 . -6) (undo-tree-id14655 . -6) (undo-tree-id14656 . -6) (undo-tree-id14657 . -6) (undo-tree-id14658 . -6) (undo-tree-id14659 . -6) (undo-tree-id14660 . -6) (undo-tree-id14661 . -6) (undo-tree-id14662 . -6) (undo-tree-id14663 . -6) (undo-tree-id14664 . -6) (undo-tree-id14665 . -6) (undo-tree-id14666 . -6) (undo-tree-id14667 . -6) (undo-tree-id14668 . -6) (undo-tree-id14669 . -6) (undo-tree-id14670 . -6) (undo-tree-id14671 . -6) (undo-tree-id14672 . -6) (undo-tree-id14673 . -6) (undo-tree-id14674 . -6) (undo-tree-id14675 . -6) (undo-tree-id14676 . -6) (undo-tree-id14677 . -6) (undo-tree-id14678 . -6) (undo-tree-id14679 . -6) (undo-tree-id14680 . -6) (undo-tree-id14681 . -6) (undo-tree-id14682 . -6) (undo-tree-id14683 . -6) (undo-tree-id14684 . -6) (undo-tree-id14685 . -6) (undo-tree-id14686 . -6) (undo-tree-id14687 . -6) (undo-tree-id14688 . -6) (undo-tree-id14689 . -6) (undo-tree-id14690 . -6) (undo-tree-id14691 . -6) (undo-tree-id14692 . -6) (undo-tree-id14693 . -6) (undo-tree-id14694 . -6) (undo-tree-id14695 . -6) (undo-tree-id14696 . -4) (undo-tree-id14697 . -4) (undo-tree-id14698 . -4) (undo-tree-id14699 . -5) (undo-tree-id14700 . -5) (undo-tree-id14701 . -5) (undo-tree-id14702 . -5) (undo-tree-id14703 . -5) (undo-tree-id14704 . -6) 2965) nil (26040 65480 447119 47000) 0 nil])
([nil nil ((#("c_" 0 2 (fontified t)) . -2957) (undo-tree-id14415 . -2) (undo-tree-id14416 . -2) (undo-tree-id14417 . -2) (undo-tree-id14418 . -2) (undo-tree-id14419 . -2) (undo-tree-id14420 . -2) (undo-tree-id14421 . -2) (undo-tree-id14422 . -2) (undo-tree-id14423 . -2) (undo-tree-id14424 . -2) (undo-tree-id14425 . -2) (undo-tree-id14426 . -2) (undo-tree-id14427 . -2) (undo-tree-id14428 . -2) (undo-tree-id14429 . -2) (undo-tree-id14430 . -2) (undo-tree-id14431 . -2) (undo-tree-id14432 . -2) (undo-tree-id14433 . -2) (undo-tree-id14434 . -2) (undo-tree-id14435 . -2) (undo-tree-id14436 . -2) (undo-tree-id14437 . -2) (undo-tree-id14438 . -2) (undo-tree-id14439 . -2) (undo-tree-id14440 . -2) (undo-tree-id14441 . -2) (undo-tree-id14442 . -2) (undo-tree-id14443 . -2) (undo-tree-id14444 . -2) (undo-tree-id14445 . -2) (undo-tree-id14446 . -2) (undo-tree-id14447 . -2) (undo-tree-id14448 . -2) (undo-tree-id14449 . -2) (undo-tree-id14450 . -2) (undo-tree-id14451 . -2) (undo-tree-id14452 . -2) (undo-tree-id14453 . -2) (undo-tree-id14454 . -2) (undo-tree-id14455 . -2) (undo-tree-id14456 . -2) (undo-tree-id14457 . -2) (undo-tree-id14458 . -2) (undo-tree-id14459 . -2) (undo-tree-id14460 . -2) (undo-tree-id14461 . -2) (undo-tree-id14462 . -2) (undo-tree-id14463 . -2) (undo-tree-id14464 . -2) (undo-tree-id14465 . -2) (undo-tree-id14466 . -2) (undo-tree-id14467 . -2) (undo-tree-id14468 . -2) (undo-tree-id14469 . -2) (undo-tree-id14470 . -2) (undo-tree-id14471 . -2) (undo-tree-id14472 . -2) (undo-tree-id14473 . -2) (undo-tree-id14474 . -2) (undo-tree-id14475 . -2) (undo-tree-id14476 . -2) (undo-tree-id14477 . -2) (undo-tree-id14478 . -2) (undo-tree-id14479 . -2) (undo-tree-id14480 . -2) (undo-tree-id14481 . -2) (undo-tree-id14482 . -2) (undo-tree-id14483 . -2) (undo-tree-id14484 . -2) (undo-tree-id14485 . -2) (undo-tree-id14486 . -2) (undo-tree-id14487 . -2) (undo-tree-id14488 . -2) (undo-tree-id14489 . -2) (undo-tree-id14490 . -2) (undo-tree-id14491 . -2) (undo-tree-id14492 . -2) (undo-tree-id14493 . -2) (undo-tree-id14494 . -2) (undo-tree-id14495 . -2) (undo-tree-id14496 . -2) (undo-tree-id14497 . -2) (undo-tree-id14498 . -2) (undo-tree-id14499 . -2) (undo-tree-id14500 . -2) (undo-tree-id14501 . -2) (undo-tree-id14502 . -2) (undo-tree-id14503 . -2) (undo-tree-id14504 . -2) (undo-tree-id14505 . -2) (undo-tree-id14506 . -2) (undo-tree-id14507 . -2) (undo-tree-id14508 . -2) (undo-tree-id14509 . -2) (undo-tree-id14510 . -2) (undo-tree-id14511 . -2) (undo-tree-id14512 . -2) (undo-tree-id14513 . -2) (undo-tree-id14514 . -2) (undo-tree-id14515 . -2) (undo-tree-id14516 . -2) (undo-tree-id14517 . -2) (undo-tree-id14518 . -2) (undo-tree-id14519 . -2) (undo-tree-id14520 . -2) (undo-tree-id14521 . -2) (undo-tree-id14522 . -2) (undo-tree-id14523 . -2) (undo-tree-id14524 . -2) (undo-tree-id14525 . -2) (undo-tree-id14526 . -2) (undo-tree-id14527 . -2) (undo-tree-id14528 . -2) (undo-tree-id14529 . -2) (undo-tree-id14530 . -2) (undo-tree-id14531 . -2) (undo-tree-id14532 . -2) (undo-tree-id14533 . -2) (undo-tree-id14534 . -2) (undo-tree-id14535 . -2) (undo-tree-id14536 . -2) (undo-tree-id14537 . -2) (undo-tree-id14538 . -2) (undo-tree-id14539 . -2) (undo-tree-id14540 . -2) (undo-tree-id14541 . -2) (undo-tree-id14542 . -2) (undo-tree-id14543 . -2) (undo-tree-id14544 . -2) (undo-tree-id14545 . -2) (undo-tree-id14546 . -2) (undo-tree-id14547 . -2) (undo-tree-id14548 . -2) (undo-tree-id14549 . -2) (undo-tree-id14550 . -2) (undo-tree-id14551 . -2) (undo-tree-id14552 . -2) (undo-tree-id14553 . -2) (undo-tree-id14554 . -2) (undo-tree-id14555 . -2) (undo-tree-id14556 . -2) (undo-tree-id14557 . -2) (undo-tree-id14558 . -2) (undo-tree-id14559 . -2) (undo-tree-id14560 . -2) (undo-tree-id14561 . -2) (undo-tree-id14562 . -2) (undo-tree-id14563 . -2) (undo-tree-id14564 . -2) (undo-tree-id14565 . -2) (undo-tree-id14566 . -2) (undo-tree-id14567 . -2) (undo-tree-id14568 . -2) (undo-tree-id14569 . -2) (undo-tree-id14570 . -2) (undo-tree-id14571 . -2) (undo-tree-id14572 . -2) (undo-tree-id14573 . -2) (undo-tree-id14574 . -2) (undo-tree-id14575 . -2) (undo-tree-id14576 . -2) (undo-tree-id14577 . -2) (undo-tree-id14578 . -2) (undo-tree-id14579 . -2) (undo-tree-id14580 . -2) (undo-tree-id14581 . -2) (undo-tree-id14582 . -2) 2959) nil (26040 65480 446577 303000) 0 nil])
([nil nil ((2957 . 2960)) nil (26040 65480 446315 750000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -2958) (undo-tree-id14393 . -1) (undo-tree-id14394 . -1) (undo-tree-id14395 . -1) (undo-tree-id14396 . -1) (undo-tree-id14397 . -1) (undo-tree-id14398 . -1) (undo-tree-id14399 . -1) (undo-tree-id14400 . -1) (undo-tree-id14401 . -1) (undo-tree-id14402 . -1) (undo-tree-id14403 . -1) (undo-tree-id14404 . -1) (undo-tree-id14405 . -1) (undo-tree-id14406 . -1) (undo-tree-id14407 . -1) (#("t" 0 1 (fontified t)) . -2959) (undo-tree-id14408 . -1) (undo-tree-id14409 . -1) (undo-tree-id14410 . -1) (undo-tree-id14411 . -1) (undo-tree-id14412 . -1) (undo-tree-id14413 . -1) (undo-tree-id14414 . -1) 2960) nil (26040 65480 446314 268000) 0 nil])
([nil nil ((2958 . 2963)) nil (26040 65480 446299 51000) 0 nil])
([nil nil ((#("N" 0 1 (face font-lock-type-face fontified t)) . -2962) (undo-tree-id14382 . -1) (undo-tree-id14383 . -1) (undo-tree-id14384 . -1) (undo-tree-id14385 . -1) (undo-tree-id14386 . -1) (undo-tree-id14387 . -1) (undo-tree-id14388 . -1) (undo-tree-id14389 . -1) (undo-tree-id14390 . -1) (undo-tree-id14391 . -1) (undo-tree-id14392 . -1) 2963) nil (26040 65480 446297 980000) 0 nil])
([nil nil ((#("ptr::" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t)) . -2957) (undo-tree-id14336 . -5) (undo-tree-id14337 . -5) (undo-tree-id14338 . -1) (undo-tree-id14339 . -1) (undo-tree-id14340 . -1) (undo-tree-id14341 . -1) (undo-tree-id14342 . -1) (undo-tree-id14343 . -1) (undo-tree-id14344 . -1) (undo-tree-id14345 . -1) (undo-tree-id14346 . -1) (undo-tree-id14347 . -1) (undo-tree-id14348 . -1) (undo-tree-id14349 . -1) (undo-tree-id14350 . -1) (undo-tree-id14351 . -1) (undo-tree-id14352 . -1) (undo-tree-id14353 . -1) (undo-tree-id14354 . -1) (undo-tree-id14355 . -1) (undo-tree-id14356 . -2) (undo-tree-id14357 . -2) (undo-tree-id14358 . -3) (undo-tree-id14359 . -3) (undo-tree-id14360 . -3) (undo-tree-id14361 . -3) (undo-tree-id14362 . -3) (undo-tree-id14363 . -3) (undo-tree-id14364 . -3) (undo-tree-id14365 . -3) (undo-tree-id14366 . -4) (undo-tree-id14367 . -4) (undo-tree-id14368 . -4) (undo-tree-id14369 . -5) (undo-tree-id14370 . -5) (undo-tree-id14371 . -5) (undo-tree-id14372 . -5) (undo-tree-id14373 . -5) (undo-tree-id14374 . -5) (undo-tree-id14375 . -5) (undo-tree-id14376 . -5) (undo-tree-id14377 . -5) (undo-tree-id14378 . -5) (undo-tree-id14379 . -5) (undo-tree-id14380 . -5) (undo-tree-id14381 . -5) 2962) nil (26040 65480 446287 902000) 0 nil])
([nil nil ((2957 . 2965)) nil (26040 65480 446254 386000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -2963) (undo-tree-id14319 . -1) (undo-tree-id14320 . -1) (undo-tree-id14321 . -1) (undo-tree-id14322 . -1) (undo-tree-id14323 . -1) (undo-tree-id14324 . -1) (undo-tree-id14325 . -1) (undo-tree-id14326 . -1) (undo-tree-id14327 . -1) (undo-tree-id14328 . -1) (undo-tree-id14329 . -1) (#("t" 0 1 (fontified t)) . -2964) (undo-tree-id14330 . -1) (undo-tree-id14331 . -1) (undo-tree-id14332 . -1) (undo-tree-id14333 . -1) (undo-tree-id14334 . -1) (undo-tree-id14335 . -1) 2965) nil (26040 65480 446252 864000) 0 nil])
([nil nil ((2963 . 2965)) nil (26040 65480 446240 895000) 0 nil])
([nil nil ((2962 . 2965) (#("ptr" 0 3 (fontified nil)) . 2962) (2962 . 2965) (#("ptr" 0 3 (fontified t)) . -2962) (undo-tree-id14292 . -3) (undo-tree-id14293 . -3) (undo-tree-id14294 . -1) (undo-tree-id14295 . -1) (undo-tree-id14296 . -1) (undo-tree-id14297 . -1) (undo-tree-id14298 . -1) (undo-tree-id14299 . -1) (undo-tree-id14300 . -1) (undo-tree-id14301 . -1) (undo-tree-id14302 . -1) (undo-tree-id14303 . -1) (undo-tree-id14304 . -1) (undo-tree-id14305 . -1) (undo-tree-id14306 . -1) (undo-tree-id14307 . -1) (undo-tree-id14308 . -1) (undo-tree-id14309 . -2) (undo-tree-id14310 . -2) (undo-tree-id14311 . -3) (undo-tree-id14312 . -3) (undo-tree-id14313 . -3) (undo-tree-id14314 . -3) (undo-tree-id14315 . -3) (undo-tree-id14316 . -3) (undo-tree-id14317 . -3) (undo-tree-id14318 . -3) 2965) nil (26040 65480 446238 700000) 0 nil])
([nil nil ((2965 . 2969)) nil (26040 65480 446217 730000) 0 nil])
([nil nil ((apply yas--snippet-revive 2967 2973 #s(yas--snippet nil nil #s(yas--exit 2973 nil) 102 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2973 nil) 102 nil nil nil nil)) (2967 . 2973) (#("null()$0" 0 8 (fontified nil)) . 2967) (2967 . 2975) (#("nu" 0 2 (fontified nil)) . 2967) (2967 . 2969) (#("null()" 0 6 (fontified nil)) . -2967) (2967 . 2973) (#("nu" 0 2 (fontified t)) . -2967) (undo-tree-id14279 . -2) (undo-tree-id14280 . -2) (undo-tree-id14281 . -1) (undo-tree-id14282 . -1) (undo-tree-id14283 . -1) (undo-tree-id14284 . -2) (undo-tree-id14285 . -2) (undo-tree-id14286 . -2) (undo-tree-id14287 . -2) (undo-tree-id14288 . -2) (undo-tree-id14289 . -2) (undo-tree-id14290 . -2) (undo-tree-id14291 . -2) 2969) nil (26040 65480 446212 774000) 0 nil])
([nil nil ((#("handler" 0 7 (fontified t)) . -2948) (undo-tree-id14939 . -7) (undo-tree-id14940 . -7) (undo-tree-id14941 . -7) (undo-tree-id14942 . -7) (undo-tree-id14943 . -7) (undo-tree-id14944 . -7) (undo-tree-id14945 . -7) 2955 (t 26040 65480 474285 53000)) nil (26040 65487 745048 211000) 0 nil])
([nil nil ((2948 . 2949)) nil (26040 65487 745041 594000) 0 nil])
([nil nil ((2948 . 2955) (#("h" 0 1 (fontified nil)) . 2948) (2948 . 2949) (#("handler" 0 7 (fontified nil)) . -2948) (2948 . 2955) (#("h" 0 1 (fontified t)) . -2948) (undo-tree-id14931 . -1) (undo-tree-id14932 . -1) (undo-tree-id14933 . -1) (undo-tree-id14934 . -1) (undo-tree-id14935 . -1) (undo-tree-id14936 . -1) (undo-tree-id14937 . -1) (undo-tree-id14938 . -1) 2949) nil (26040 65487 745037 19000) 0 nil])
([nil nil ((#("void" 0 4 (fontified t)) . -2878) (undo-tree-id15304 . -4) (undo-tree-id15305 . -4) (undo-tree-id15306 . -4) (undo-tree-id15307 . -4) 2882 (t 26040 65487 804285 500000)) nil (26041 407 596189 867000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -2876) (undo-tree-id15296 . -1) (undo-tree-id15297 . -1) (undo-tree-id15298 . -1) (undo-tree-id15299 . -1) (#("_" 0 1 (fontified t)) . -2877) (undo-tree-id15300 . -1) (undo-tree-id15301 . -1) (undo-tree-id15302 . -1) (undo-tree-id15303 . -1) 2878) nil (26041 407 596185 702000) 0 nil])
([nil nil ((2876 . 2877)) nil (26041 407 596180 205000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -2876) (undo-tree-id15295 . -1) 2877) nil (26041 407 596179 402000) 0 nil])
([nil nil ((2876 . 2877)) nil (26041 407 596178 93000) 0 nil])
([nil nil ((2876 . 2882) (#("c" 0 1 (fontified nil)) . 2876) (2876 . 2877) (#("c_void" 0 6 (fontified nil)) . -2876) (2876 . 2882) (#("c" 0 1 (fontified t)) . -2876) (undo-tree-id15294 . -1) 2877) nil (26041 407 596177 101000) 0 nil])
([nil nil ((#("void" 0 4 (fontified t)) . -2878) (undo-tree-id15293 . -4) 2882) nil (26041 407 596175 2000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -2876) (undo-tree-id15291 . -1) (#("_" 0 1 (fontified t)) . -2877) (undo-tree-id15292 . -1) 2878) nil (26041 407 596173 285000) 0 nil])
([nil nil ((2876 . 2883)) nil (26041 407 596170 971000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2882) (undo-tree-id15290 . -1) 2883) nil (26041 407 596170 237000) 0 nil])
([nil nil ((#("extern" 0 6 (face font-lock-keyword-face fontified t)) . -2876) (undo-tree-id15288 . -6) (undo-tree-id15289 . -6) 2882) nil (26041 407 596168 579000) 0 nil])
([nil nil ((2774 . 2783)) nil (26041 407 596166 324000) 0 nil])
([nil nil ((2783 . 2788)) nil (26041 407 596165 660000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -2787) (undo-tree-id15287 . -1) 2788) nil (26041 407 596164 843000) 0 nil])
([nil nil ((apply yas--snippet-revive 2783 2788 #s(yas--snippet nil nil #s(yas--exit 2788 nil) 103 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2788 nil) 103 nil nil nil nil)) (2783 . 2788) (#("type $0" 0 7 (fontified nil)) . 2783) (2783 . 2790) (#("type" 0 4 (fontified nil)) . 2783) (2783 . 2787) (#("type" 0 4 (face font-lock-keyword-face fontified t)) . -2783) (undo-tree-id15286 . -4) 2787) nil (26041 407 596162 997000) 0 nil])
([nil nil ((2788 . 2790)) nil (26041 407 596160 539000) 0 nil])
([nil nil ((#("my" 0 2 (face font-lock-type-face fontified t)) . -2788) (undo-tree-id15285 . -2) 2790) nil (26041 407 596159 699000) 0 nil])
([nil nil ((#("type " 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t)) . -2783) (undo-tree-id15284 . -5) 2788) nil (26041 407 596158 202000) 0 nil])
([nil nil ((2783 . 2790)) nil (26041 407 596156 59000) 0 nil])
([nil nil ((#("typedef" 0 7 (fontified t)) . -2783) (undo-tree-id15280 . -7) (undo-tree-id15281 . -7) (undo-tree-id15282 . -7) (undo-tree-id15283 . -7) 2790) nil (26041 407 596155 194000) 0 nil])
([nil nil ((1206 . 1207)) nil (26041 407 596152 12000) 0 nil])
([nil nil ((1207 . 1208)) nil (26041 407 596151 488000) 0 nil])
([nil nil ((1208 . 1210)) nil (26041 407 596150 931000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -1208) (undo-tree-id15268 . -1) (undo-tree-id15269 . -1) (undo-tree-id15270 . -1) (undo-tree-id15271 . -1) (undo-tree-id15272 . -1) (undo-tree-id15273 . -1) (undo-tree-id15274 . -1) (undo-tree-id15275 . -1) (undo-tree-id15276 . -1) (#("y" 0 1 (fontified t)) . -1209) (undo-tree-id15277 . -1) (undo-tree-id15278 . -1) (undo-tree-id15279 . -1) 1210) nil (26041 407 596149 595000) 0 nil])
([nil nil ((1207 . 1211)) nil (26041 407 596141 262000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -1209) (undo-tree-id15257 . -1) (undo-tree-id15258 . -1) (undo-tree-id15259 . -1) (undo-tree-id15260 . -1) (undo-tree-id15261 . -1) (undo-tree-id15262 . -1) (undo-tree-id15263 . -1) (undo-tree-id15264 . -1) (#("e" 0 1 (fontified t)) . -1210) (undo-tree-id15265 . -1) (undo-tree-id15266 . -1) (undo-tree-id15267 . -1) 1211) nil (26041 407 596139 740000) 0 nil])
([nil nil ((1209 . 1213)) nil (26041 407 595865 477000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -1212) (undo-tree-id15251 . -1) (undo-tree-id15252 . -1) (undo-tree-id15253 . -1) (undo-tree-id15254 . -1) (undo-tree-id15255 . -1) (undo-tree-id15256 . -1) 1213) nil (26041 407 595864 603000) 0 nil])
([nil nil ((1212 . 1214)) nil (26041 407 595860 485000) 0 nil])
([nil nil ((#("u" 0 1 (face font-lock-type-face fontified t)) . -1213) (undo-tree-id15245 . -1) (undo-tree-id15246 . -1) (undo-tree-id15247 . -1) (undo-tree-id15248 . -1) (undo-tree-id15249 . -1) (undo-tree-id15250 . -1) 1214) nil (26041 407 595859 600000) 0 nil])
([nil nil ((1213 . 1217)) nil (26041 407 595855 362000) 0 nil])
([nil nil ((#("h" 0 1 (face font-lock-type-face fontified t)) . -1214) (undo-tree-id15221 . -1) (undo-tree-id15222 . -1) (undo-tree-id15223 . -1) (undo-tree-id15224 . -1) (undo-tree-id15225 . -1) (undo-tree-id15226 . -1) (undo-tree-id15227 . -1) (undo-tree-id15228 . -1) (undo-tree-id15229 . -1) (undo-tree-id15230 . -1) (undo-tree-id15231 . -1) (undo-tree-id15232 . -1) (undo-tree-id15233 . -1) (undo-tree-id15234 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -1215) (undo-tree-id15235 . -1) (undo-tree-id15236 . -1) (undo-tree-id15237 . -1) (undo-tree-id15238 . -1) (undo-tree-id15239 . -1) (undo-tree-id15240 . -1) (undo-tree-id15241 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -1216) (undo-tree-id15242 . -1) (undo-tree-id15243 . -1) (undo-tree-id15244 . -1) 1217) nil (26041 407 595853 788000) 0 nil])
([nil nil ((1214 . 1218)) nil (26041 407 595838 233000) 0 nil])
([nil nil ((1218 . 1228)) nil (26041 407 595837 708000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -1226) (undo-tree-id15211 . -1) (undo-tree-id15212 . -1) (undo-tree-id15213 . -1) (undo-tree-id15214 . -1) (undo-tree-id15215 . -1) (undo-tree-id15216 . -1) (undo-tree-id15217 . -1) (#("n" 0 1 (fontified t)) . -1227) (undo-tree-id15218 . -1) (undo-tree-id15219 . -1) (undo-tree-id15220 . -1) 1228) nil (26041 407 595836 658000) 0 nil])
([nil nil ((1226 . 1229)) nil (26041 407 595829 867000) 0 nil])
([nil nil ((1228 . 1233)) nil (26041 407 595829 341000) 0 nil])
([nil nil ((1233 . 1240)) nil (26041 407 595828 737000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -1239) (undo-tree-id15203 . -1) (undo-tree-id15204 . -1) (undo-tree-id15205 . -1) (undo-tree-id15206 . -1) (undo-tree-id15207 . -1) (undo-tree-id15208 . -1) (undo-tree-id15209 . -1) (undo-tree-id15210 . -1) 1240) nil (26041 407 595827 717000) 0 nil])
([nil nil ((#("type my_handler_t fn(*mut ffi::z)" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 17 (face font-lock-type-face fontified t) 17 18 (fontified t) 18 20 (face font-lock-keyword-face fontified t) 20 21 (face (rainbow-delimiters-depth-1-face) fontified t) 21 22 (fontified t) 22 25 (face font-lock-keyword-face fontified t) 25 26 (fontified t) 26 29 (face font-lock-constant-face fontified t) 29 32 (fontified t) 32 33 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1207) (undo-tree-id15047 . -1) (undo-tree-id15048 . -1) (undo-tree-id15049 . -2) (undo-tree-id15050 . -2) (undo-tree-id15051 . -2) (undo-tree-id15052 . -2) (undo-tree-id15053 . -2) (undo-tree-id15054 . -2) (undo-tree-id15055 . -2) (undo-tree-id15056 . -2) (undo-tree-id15057 . -2) (undo-tree-id15058 . -2) (undo-tree-id15059 . -2) (undo-tree-id15060 . -3) (undo-tree-id15061 . -3) (undo-tree-id15062 . -4) (undo-tree-id15063 . -4) (undo-tree-id15064 . -4) (undo-tree-id15065 . -4) (undo-tree-id15066 . -5) (undo-tree-id15067 . -5) (undo-tree-id15068 . -5) (undo-tree-id15069 . -5) (undo-tree-id15070 . -5) (undo-tree-id15071 . -5) (undo-tree-id15072 . -5) (undo-tree-id15073 . -5) (undo-tree-id15074 . -5) (undo-tree-id15075 . -5) (undo-tree-id15076 . -6) (undo-tree-id15077 . -6) (undo-tree-id15078 . -6) (undo-tree-id15079 . -6) (undo-tree-id15080 . -6) (undo-tree-id15081 . -6) (undo-tree-id15082 . -6) (undo-tree-id15083 . -6) (undo-tree-id15084 . -6) (undo-tree-id15085 . -7) (undo-tree-id15086 . -7) (undo-tree-id15087 . -7) (undo-tree-id15088 . -7) (undo-tree-id15089 . -7) (undo-tree-id15090 . -7) (undo-tree-id15091 . -7) (undo-tree-id15092 . -7) (undo-tree-id15093 . -7) (undo-tree-id15094 . -7) (undo-tree-id15095 . -7) (undo-tree-id15096 . -7) (undo-tree-id15097 . -7) (undo-tree-id15098 . -7) (undo-tree-id15099 . -7) (undo-tree-id15100 . -7) (undo-tree-id15101 . -7) (undo-tree-id15102 . -8) (undo-tree-id15103 . -8) (undo-tree-id15104 . -9) (undo-tree-id15105 . -9) (undo-tree-id15106 . -9) (undo-tree-id15107 . -9) (undo-tree-id15108 . -10) (undo-tree-id15109 . -10) (undo-tree-id15110 . -11) (undo-tree-id15111 . -11) (undo-tree-id15112 . -12) (undo-tree-id15113 . -12) (undo-tree-id15114 . -13) (undo-tree-id15115 . -13) (undo-tree-id15116 . -14) (undo-tree-id15117 . -14) (undo-tree-id15118 . -15) (undo-tree-id15119 . -15) (undo-tree-id15120 . -16) (undo-tree-id15121 . -16) (undo-tree-id15122 . -17) (undo-tree-id15123 . -17) (undo-tree-id15124 . -17) (undo-tree-id15125 . -17) (undo-tree-id15126 . -17) (undo-tree-id15127 . -18) (undo-tree-id15128 . -18) (undo-tree-id15129 . -19) (undo-tree-id15130 . -19) (undo-tree-id15131 . -19) (undo-tree-id15132 . -19) (undo-tree-id15133 . -19) (undo-tree-id15134 . -19) (undo-tree-id15135 . -19) (undo-tree-id15136 . -19) (undo-tree-id15137 . -19) (undo-tree-id15138 . -20) (undo-tree-id15139 . -20) (undo-tree-id15140 . -20) (undo-tree-id15141 . -20) (undo-tree-id15142 . -20) (undo-tree-id15143 . -21) (undo-tree-id15144 . -21) (undo-tree-id15145 . -21) (undo-tree-id15146 . -21) (undo-tree-id15147 . -21) (undo-tree-id15148 . -33) (undo-tree-id15149 . -33) (undo-tree-id15150 . -33) (undo-tree-id15151 . -33) (undo-tree-id15152 . -33) (undo-tree-id15153 . -21) (undo-tree-id15154 . -21) (undo-tree-id15155 . -21) (undo-tree-id15156 . -21) (undo-tree-id15157 . -21) (undo-tree-id15158 . -22) (undo-tree-id15159 . -22) (undo-tree-id15160 . -23) (undo-tree-id15161 . -23) (undo-tree-id15162 . -24) (undo-tree-id15163 . -24) (undo-tree-id15164 . -25) (undo-tree-id15165 . -25) (undo-tree-id15166 . -26) (undo-tree-id15167 . -26) (undo-tree-id15168 . -26) (undo-tree-id15169 . -26) (undo-tree-id15170 . -26) (undo-tree-id15171 . -27) (undo-tree-id15172 . -27) (undo-tree-id15173 . -28) (undo-tree-id15174 . -28) (undo-tree-id15175 . -29) (undo-tree-id15176 . -30) (undo-tree-id15177 . -30) (undo-tree-id15178 . -31) (undo-tree-id15179 . -31) (undo-tree-id15180 . -31) (undo-tree-id15181 . -31) (undo-tree-id15182 . -31) (undo-tree-id15183 . -32) (undo-tree-id15184 . -32) (undo-tree-id15185 . -32) (undo-tree-id15186 . -32) (undo-tree-id15187 . 1) (undo-tree-id15188 . -32) (undo-tree-id15189 . -32) (undo-tree-id15190 . -32) (undo-tree-id15191 . -32) (undo-tree-id15192 . -32) (undo-tree-id15193 . -32) (undo-tree-id15194 . -32) (undo-tree-id15195 . -32) (undo-tree-id15196 . -32) (undo-tree-id15197 . -32) (undo-tree-id15198 . -32) (undo-tree-id15199 . -32) (undo-tree-id15200 . -32) (undo-tree-id15201 . -32) (undo-tree-id15202 . -33)) nil (26041 407 595816 619000) 0 nil])
([nil nil ((1207 . 1223)) nil (26041 407 594595 835000) 0 nil])
([nil nil ((#("_" 0 1 (face font-lock-type-face fontified t)) . -1222) (undo-tree-id15044 . -1) (undo-tree-id15045 . -1) (undo-tree-id15046 . -1) 1223) nil (26041 407 594595 68000) 0 nil])
([nil nil ((1222 . 1225)) nil (26041 407 594592 314000) 0 nil])
([nil nil ((#("T" 0 1 (face font-lock-type-face fontified t)) . -1223) (undo-tree-id15034 . -1) (undo-tree-id15035 . -1) (undo-tree-id15036 . -1) (undo-tree-id15037 . -1) (undo-tree-id15038 . -1) (undo-tree-id15039 . -1) (undo-tree-id15040 . -1) (#(" " 0 1 (fontified t)) . -1224) (undo-tree-id15041 . -1) (undo-tree-id15042 . -1) (undo-tree-id15043 . -1) 1225) nil (26041 407 594591 234000) 0 nil])
([nil nil ((1223 . 1229)) nil (26041 407 594583 704000) 0 nil])
([nil nil ((1227 . 1229) (#("fn" 0 2 (fontified nil)) . 1227) (1227 . 1229) (#("Fn" 0 2 (fontified nil)) . -1227) (1227 . 1229) (#("fn" 0 2 (face font-lock-keyword-face fontified t)) . -1227) (undo-tree-id15026 . -2) (undo-tree-id15027 . -1) (undo-tree-id15028 . -1) (undo-tree-id15029 . -2) (undo-tree-id15030 . -2) (undo-tree-id15031 . -2) (undo-tree-id15032 . -2) (undo-tree-id15033 . -2) 1229) nil (26041 407 594582 317000) 0 nil])
([nil nil ((1229 . 1231)) nil (26041 407 594576 114000) 0 nil])
([nil nil ((1230 . 1231)) nil (26041 407 594575 593000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -1230) (undo-tree-id15022 . -1) (undo-tree-id15023 . -1) (undo-tree-id15024 . -1) (undo-tree-id15025 . -1) 1231) nil (26041 407 594574 511000) 0 nil])
([nil nil ((1230 . 1232)) nil (26041 407 594571 513000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -1230) (undo-tree-id15012 . -1) (undo-tree-id15013 . -1) (undo-tree-id15014 . -1) (undo-tree-id15015 . -1) (undo-tree-id15016 . -1) (undo-tree-id15017 . -1) (undo-tree-id15018 . -1) (#("u" 0 1 (fontified t)) . -1231) (undo-tree-id15019 . -1) (undo-tree-id15020 . -1) (undo-tree-id15021 . -1) 1232) nil (26041 407 594570 392000) 0 nil])
([nil nil ((1230 . 1232)) nil (26041 407 594563 266000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -1230) (undo-tree-id14994 . -1) (undo-tree-id14995 . -1) (undo-tree-id14996 . -1) (undo-tree-id14997 . -1) (undo-tree-id14998 . -1) (undo-tree-id14999 . -1) (undo-tree-id15000 . -1) (undo-tree-id15001 . -1) (undo-tree-id15002 . -1) (undo-tree-id15003 . -1) (undo-tree-id15004 . -1) (#("i" 0 1 (fontified t)) . -1231) (undo-tree-id15005 . -1) (undo-tree-id15006 . -1) (undo-tree-id15007 . -1) (undo-tree-id15008 . -1) (undo-tree-id15009 . -1) (undo-tree-id15010 . -1) (undo-tree-id15011 . -1) 1232) nil (26041 407 594562 6000) 0 nil])
([nil nil ((1230 . 1231)) nil (26041 407 594549 69000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -1230) (undo-tree-id14988 . -1) (undo-tree-id14989 . -1) (undo-tree-id14990 . -1) (undo-tree-id14991 . -1) (undo-tree-id14992 . -1) (undo-tree-id14993 . -1) 1231) nil (26041 407 594548 202000) 0 nil])
([nil nil ((1230 . 1238)) nil (26041 407 594543 408000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -1237) (undo-tree-id14983 . -1) (undo-tree-id14984 . -1) (undo-tree-id14985 . -1) (undo-tree-id14986 . -1) (undo-tree-id14987 . -1) 1238) nil (26041 407 594542 483000) 0 nil])
([nil nil ((1237 . 1239)) nil (26041 407 594538 746000) 0 nil])
([nil nil ((#("I" 0 1 (fontified t)) . -1237) (undo-tree-id14970 . -1) (undo-tree-id14971 . -1) (undo-tree-id14972 . -1) (undo-tree-id14973 . -1) (undo-tree-id14974 . -1) (undo-tree-id14975 . -1) (undo-tree-id14976 . -1) (undo-tree-id14977 . -1) (undo-tree-id14978 . -1) (#(":" 0 1 (fontified t)) . -1238) (undo-tree-id14979 . -1) (undo-tree-id14980 . -1) (undo-tree-id14981 . -1) (undo-tree-id14982 . -1) 1239) nil (26041 407 594537 530000) 0 nil])
([nil nil ((1237 . 1243)) nil (26041 407 594528 340000) 0 nil])
([nil nil ((1243 . 1247)) nil (26041 407 594527 424000) 0 nil])
([nil nil ((1240 . 1252) (#("image_t" 0 7 (fontified nil)) . 1240) (1240 . 1247) (#("zbar_image_t" 0 12 (fontified nil)) . -1240) (1240 . 1252) (#("image_t" 0 7 (fontified t)) . -1240) (undo-tree-id14953 . -7) (undo-tree-id14954 . -1) (undo-tree-id14955 . -1) (undo-tree-id14956 . -2) (undo-tree-id14957 . -2) (undo-tree-id14958 . -3) (undo-tree-id14959 . -3) (undo-tree-id14960 . -4) (undo-tree-id14961 . -4) (undo-tree-id14962 . -5) (undo-tree-id14963 . -5) (undo-tree-id14964 . -6) (undo-tree-id14965 . -6) (undo-tree-id14966 . -7) (undo-tree-id14967 . -7) (undo-tree-id14968 . -7) (undo-tree-id14969 . -7) 1247) nil (26041 407 594525 752000) 0 nil])
([nil nil ((1252 . 1262)) nil (26041 407 594512 647000) 0 nil])
([nil nil ((1261 . 1267) (#("c" 0 1 (fontified nil)) . 1261) (1261 . 1262) (#("c_void" 0 6 (fontified nil)) . -1261) (1261 . 1267) (#("c" 0 1 (fontified t)) . -1261) (undo-tree-id14946 . -1) (undo-tree-id14947 . -1) (undo-tree-id14948 . -1) (undo-tree-id14949 . -1) (undo-tree-id14950 . -1) (undo-tree-id14951 . -1) (undo-tree-id14952 . -1) 1262) nil (26041 407 594510 165000) 0 nil])
([nil nil ((1268 . 1269)) nil (26041 407 594494 539000) 0 nil])
([nil nil ((1227 . 1228) (t 26041 407 620979 914000)) nil (26041 419 462499 770000) 0 nil])
([nil nil ((1228 . 1234)) nil (26041 419 462495 833000) 0 nil])
([nil nil ((#("unsafe" 0 6 (face rust-unsafe fontified t)) . -1227) (undo-tree-id15326 . -6) (undo-tree-id15327 . -6) (undo-tree-id15328 . -6) (undo-tree-id15329 . -6) (undo-tree-id15330 . -6) (undo-tree-id15331 . -6) (undo-tree-id15332 . -6) 1233 (t 26041 419 487647 302000)) nil (26041 425 609800 847000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1227) (undo-tree-id15308 . -1) (undo-tree-id15309 . -1) (undo-tree-id15310 . -1) (undo-tree-id15311 . -1) (undo-tree-id15312 . -1) (undo-tree-id15313 . -1) (undo-tree-id15314 . -1) (undo-tree-id15315 . -1) (undo-tree-id15316 . -1) (undo-tree-id15317 . -1) (undo-tree-id15318 . -1) (undo-tree-id15319 . -1) (undo-tree-id15320 . -1) (undo-tree-id15321 . -1) (undo-tree-id15322 . -1) (undo-tree-id15323 . -1) (undo-tree-id15324 . -1) (undo-tree-id15325 . -1) 1228) nil (26041 425 609790 771000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-type-face fontified t)) . -1223) (undo-tree-id15390 . -1) (undo-tree-id15391 . -1) (undo-tree-id15392 . -1) 1224 (t 26041 425 634314 342000)) nil (26041 457 795175 414000) 0 nil])
([nil nil ((#("handler_" 0 8 (face font-lock-type-face fontified t)) . -1215) (undo-tree-id15376 . -8) (undo-tree-id15377 . -8) (undo-tree-id15378 . -8) (undo-tree-id15379 . -7) (undo-tree-id15380 . -7) (undo-tree-id15381 . -7) (undo-tree-id15382 . -7) (undo-tree-id15383 . -7) (undo-tree-id15384 . -8) (undo-tree-id15385 . -8) (undo-tree-id15386 . -8) (undo-tree-id15387 . -8) (undo-tree-id15388 . -8) (undo-tree-id15389 . -8) 1223) nil (26041 457 795171 768000) 0 nil])
([nil nil ((#("my_" 0 3 (face font-lock-type-face fontified t)) . -1212) (undo-tree-id15342 . -3) (undo-tree-id15343 . -3) (undo-tree-id15344 . -3) (undo-tree-id15345 . -3) (undo-tree-id15346 . -3) (undo-tree-id15347 . -3) (undo-tree-id15348 . -3) (undo-tree-id15349 . -3) (undo-tree-id15350 . -3) (undo-tree-id15351 . -2) (undo-tree-id15352 . -2) (undo-tree-id15353 . -2) (undo-tree-id15354 . -2) (undo-tree-id15355 . -2) (undo-tree-id15356 . -1) (undo-tree-id15357 . -2) (undo-tree-id15358 . -2) (undo-tree-id15359 . -2) (undo-tree-id15360 . -2) (undo-tree-id15361 . -2) (undo-tree-id15362 . -3) (undo-tree-id15363 . -3) (undo-tree-id15364 . -3) (undo-tree-id15365 . -3) (undo-tree-id15366 . -3) (undo-tree-id15367 . -3) (undo-tree-id15368 . -3) (undo-tree-id15369 . -3) (undo-tree-id15370 . -3) (undo-tree-id15371 . -3) (undo-tree-id15372 . -3) (undo-tree-id15373 . -3) (undo-tree-id15374 . -3) (undo-tree-id15375 . -3) 1215) nil (26041 457 795158 970000) 0 nil])
([nil nil ((1212 . 1214)) nil (26041 457 795133 628000) 0 nil])
([nil nil ((#("Y" 0 1 (face font-lock-type-face fontified t)) . -1213) (undo-tree-id15333 . -1) (undo-tree-id15334 . -1) (undo-tree-id15335 . -1) (undo-tree-id15336 . -1) (undo-tree-id15337 . -1) (undo-tree-id15338 . -1) (undo-tree-id15339 . -1) (undo-tree-id15340 . -1) (undo-tree-id15341 . -1) 1214) nil (26041 457 795131 273000) 0 nil])
([nil nil ((1213 . 1222)) nil (26041 457 795113 217000) 0 nil])
([nil nil ((1227 . 1228) (t 26041 457 857649 623000)) nil (26041 486 228122 25000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1227) (undo-tree-id15409 . -1) (undo-tree-id15410 . -1) (undo-tree-id15411 . -1) (undo-tree-id15412 . -1) 1228) nil (26041 486 228120 743000) 0 nil])
([nil nil ((1227 . 1228)) nil (26041 486 228116 475000) 0 nil])
([nil nil ((1225 . 1230) (#("FnM" 0 3 (fontified nil)) . 1225) (1225 . 1228) (#("FnMut" 0 5 (fontified nil)) . -1225) (1225 . 1230) (#("FnM" 0 3 (face font-lock-type-face fontified t)) . -1225) (undo-tree-id15393 . -3) (undo-tree-id15394 . -2) (undo-tree-id15395 . -2) (undo-tree-id15396 . -2) (undo-tree-id15397 . -2) (undo-tree-id15398 . -2) (undo-tree-id15399 . -2) (undo-tree-id15400 . -2) (undo-tree-id15401 . -2) (undo-tree-id15402 . -2) (undo-tree-id15403 . -2) (undo-tree-id15404 . -3) (undo-tree-id15405 . -3) (undo-tree-id15406 . -3) (undo-tree-id15407 . -3) (undo-tree-id15408 . -3) 1228) nil (26041 486 228112 285000) 0 nil])
([nil nil ((#("M" 0 1 (face font-lock-type-face fontified t)) . -1227) (undo-tree-id15413 . -1) (undo-tree-id15414 . -1) (undo-tree-id15415 . -1) (undo-tree-id15416 . -1) (undo-tree-id15417 . -1) (undo-tree-id15418 . -1) (undo-tree-id15419 . -1) (undo-tree-id15420 . -1) (undo-tree-id15421 . -1) (undo-tree-id15422 . -1) (undo-tree-id15423 . -1) (undo-tree-id15424 . -1) (undo-tree-id15425 . -1) (undo-tree-id15426 . -1) (undo-tree-id15427 . -1) (undo-tree-id15428 . -1) (undo-tree-id15429 . -1) (undo-tree-id15430 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -1228) (undo-tree-id15431 . -1) (undo-tree-id15432 . -1) (undo-tree-id15433 . -1) (undo-tree-id15434 . -1) (undo-tree-id15435 . -1) (undo-tree-id15436 . -1) (undo-tree-id15437 . -1) (undo-tree-id15438 . -1) (undo-tree-id15439 . -1) (undo-tree-id15440 . -1) (undo-tree-id15441 . -1) (undo-tree-id15442 . -1) (undo-tree-id15443 . -1) (undo-tree-id15444 . -1) (undo-tree-id15445 . -1) (undo-tree-id15446 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -1229) (undo-tree-id15447 . -1) (undo-tree-id15448 . -1) (undo-tree-id15449 . -1) (undo-tree-id15450 . -1) (undo-tree-id15451 . -1) (undo-tree-id15452 . -1) (undo-tree-id15453 . -1) (undo-tree-id15454 . -1) (undo-tree-id15455 . -1) (undo-tree-id15456 . -1) (undo-tree-id15457 . -1) (undo-tree-id15458 . -1) (undo-tree-id15459 . -1) 1230 (t 26041 486 254318 24000)) nil (26041 489 551553 280000) 0 nil])
([nil nil ((2854 . 2856) (t 26041 489 577651 561000)) nil (26041 495 284792 814000) 0 nil])
([nil nil ((3044 . 3052) (#("        " 0 8 (fontified nil)) . 3043) (undo-tree-id15487 . -8) (undo-tree-id15488 . -8) (undo-tree-id15489 . -8) (undo-tree-id15490 . -8) (3042 . 3052) (t 26041 495 310985 246000)) nil (26041 514 175751 906000) 0 nil])
([nil nil ((3052 . 3069)) nil (26041 514 175745 581000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3080 3084 nil nil nil t #s(yas--exit 3085 nil))) #s(yas--exit 3085 nil) 104 nil #s(yas--field 1 3080 3084 nil nil nil t #s(yas--exit 3085 nil)) nil nil)) (3057 . 3090) (#("zbar_processor_destroy(${1:processor})$0" 0 40 (fontified nil)) . 3057) (3057 . 3097) (#("processor_de" 0 12 (fontified nil)) . 3057) (3057 . 3069) (#("zbar_processor_destroy(…)" 0 25 (fontified nil)) . -3057) (3057 . 3082) (#("processor_de" 0 12 (fontified t)) . -3057) (undo-tree-id15471 . -12) (undo-tree-id15472 . -1) (undo-tree-id15473 . -1) (undo-tree-id15474 . -2) (undo-tree-id15475 . -3) (undo-tree-id15476 . -4) (undo-tree-id15477 . -5) (undo-tree-id15478 . -6) (undo-tree-id15479 . -7) (undo-tree-id15480 . -8) (undo-tree-id15481 . -9) (undo-tree-id15482 . -10) (undo-tree-id15483 . -11) (undo-tree-id15484 . -12) (undo-tree-id15485 . -12) (undo-tree-id15486 . -12) 3069) nil (26041 514 175742 849000) 0 nil])
([nil nil ((#("processor" 0 9 (fontified nil)) . 3081) (undo-tree-id15470 . -9) (3080 . 3081)) nil (26041 514 175728 870000) 0 nil])
([nil nil ((3080 . 3084) (#("p" 0 1 (fontified nil)) . 3080) (undo-tree-id15460 . -1) (3080 . 3081) (#("proc" 0 4 (fontified nil)) . -3080) (undo-tree-id15461 . -4) (3080 . 3084) (#("p" 0 1 (fontified t)) . -3080) (undo-tree-id15462 . -1) (undo-tree-id15463 . -1) (undo-tree-id15464 . -1) (undo-tree-id15465 . -1) (undo-tree-id15466 . -1) (undo-tree-id15467 . -1) (undo-tree-id15468 . -1) (undo-tree-id15469 . -1) 3081) nil (26041 514 175725 768000) 0 nil])
([nil nil ((apply yas--snippet-revive 3057 3085 #s(yas--snippet nil (#s(yas--field 1 3080 3084 nil nil nil t #s(yas--exit 3085 nil))) #s(yas--exit 3085 nil) 104 nil #s(yas--field 1 3080 3084 nil nil nil t #s(yas--exit 3085 nil)) nil nil))) nil (26041 514 175711 307000) 0 nil])
([nil nil ((3085 . 3086)) nil (26041 514 175707 33000) 0 nil])
([nil nil ((2972 . 2974) (t 26041 514 200986 405000)) nil (26041 517 230712 40000) 0 nil])
([nil nil ((1225 . 1229) (t 26041 517 287653 261000)) nil (26041 531 827441 81000) 0 nil])
([nil nil ((1271 . 1272) (t 26041 531 854320 822000)) nil (26041 597 800213 702000) 0 nil])
([nil nil ((1272 . 1287)) nil (26041 597 800212 912000) 0 nil])
([nil nil ((#("_" 0 1 (face font-lock-type-face fontified t)) . -1286) (undo-tree-id15709 . -1) (undo-tree-id15710 . -1) (undo-tree-id15711 . -1) (undo-tree-id15712 . -1) (undo-tree-id15713 . -1) (undo-tree-id15714 . -1) (undo-tree-id15715 . -1) (undo-tree-id15716 . -1) (undo-tree-id15717 . -1) (undo-tree-id15718 . -1) 1287) nil (26041 597 800211 799000) 0 nil])
([nil nil ((1286 . 1289)) nil (26041 597 800203 539000) 0 nil])
([nil nil ((1289 . 1298)) nil (26041 597 800202 936000) 0 nil])
([nil nil ((1297 . 1298)) nil (26041 597 800202 167000) 0 nil])
([nil nil ((1299 . 1300)) nil (26041 597 800201 480000) 0 nil])
([nil nil ((1300 . 1302)) nil (26041 597 800200 668000) 0 nil])
([nil nil ((#("type MyHandlerT = dyn Fn(*mut ffi::zbar_image_t, *const c_void);" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 15 (face font-lock-type-face fontified t) 15 18 (fontified t) 18 21 (face font-lock-keyword-face fontified t) 21 22 (fontified t) 22 24 (face font-lock-type-face fontified t) 24 25 (face (rainbow-delimiters-depth-1-face) fontified t) 25 26 (fontified t) 26 29 (face font-lock-keyword-face fontified t) 29 30 (fontified t) 30 33 (face font-lock-constant-face fontified t) 33 35 (fontified t) 35 50 (fontified t) 50 55 (face font-lock-keyword-face fontified t) 55 56 (fontified t) 56 62 (fontified t) 62 63 (face (rainbow-delimiters-depth-1-face) fontified t) 63 64 (fontified t)) . 1207) (undo-tree-id15658 . -18) (undo-tree-id15659 . -22) (undo-tree-id15660 . -22) (undo-tree-id15661 . -22) (undo-tree-id15662 . -22) (undo-tree-id15663 . -22) (undo-tree-id15664 . -22) (undo-tree-id15665 . -22) (undo-tree-id15666 . -22) (undo-tree-id15667 . -22) (undo-tree-id15668 . -22) (undo-tree-id15669 . -22) (undo-tree-id15670 . -22) (undo-tree-id15671 . -22) (undo-tree-id15672 . -22) (undo-tree-id15673 . -22) (undo-tree-id15674 . -22) (undo-tree-id15675 . -22) (undo-tree-id15676 . -22) (undo-tree-id15677 . -22) (undo-tree-id15678 . -22) (undo-tree-id15679 . -22) (undo-tree-id15680 . -22) (undo-tree-id15681 . -22) (undo-tree-id15682 . -22) (undo-tree-id15683 . -22) (undo-tree-id15684 . -25) (undo-tree-id15685 . -25) (undo-tree-id15686 . -25) (undo-tree-id15687 . -25) (undo-tree-id15688 . -25) (undo-tree-id15689 . -25) (undo-tree-id15690 . -25) (undo-tree-id15691 . -25) (undo-tree-id15692 . -25) (undo-tree-id15693 . -25) (undo-tree-id15694 . -25) (undo-tree-id15695 . -25) (undo-tree-id15696 . -25) (undo-tree-id15697 . -64) (undo-tree-id15698 . -64) (undo-tree-id15699 . -64) (undo-tree-id15700 . -64) (undo-tree-id15701 . -64) (undo-tree-id15702 . -30) (undo-tree-id15703 . -30) (undo-tree-id15704 . -30) (undo-tree-id15705 . -30) (undo-tree-id15706 . -30) (undo-tree-id15707 . -30) (undo-tree-id15708 . -64)) nil (26041 597 800197 535000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1207) (undo-tree-id15646 . 1) (undo-tree-id15647 . -1) (undo-tree-id15648 . -1) (undo-tree-id15649 . -1) (undo-tree-id15650 . -1) (undo-tree-id15651 . -1) (undo-tree-id15652 . -1) (undo-tree-id15653 . -1) (undo-tree-id15654 . -1) (undo-tree-id15655 . -1) (undo-tree-id15656 . -1) (undo-tree-id15657 . -1)) nil (26041 597 799713 261000) 0 nil])
([nil nil ((#("type MyHandler = extern \"C\" fn" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 14 (face font-lock-type-face fontified t) 14 17 (fontified t) 17 23 (face font-lock-keyword-face fontified t) 23 24 (fontified t) 24 27 (face font-lock-string-face fontified t) 27 28 (fontified t) 28 30 (face font-lock-keyword-face fontified t)) . 1207) (undo-tree-id15500 . 30) (undo-tree-id15501 . -1) (undo-tree-id15502 . -1) (undo-tree-id15503 . -2) (undo-tree-id15504 . -2) (undo-tree-id15505 . -2) (undo-tree-id15506 . -3) (undo-tree-id15507 . -3) (undo-tree-id15508 . -3) (undo-tree-id15509 . -4) (undo-tree-id15510 . -4) (undo-tree-id15511 . -4) (undo-tree-id15512 . -4) (undo-tree-id15513 . -5) (undo-tree-id15514 . -5) (undo-tree-id15515 . -5) (undo-tree-id15516 . -5) (undo-tree-id15517 . -5) (undo-tree-id15518 . -5) (undo-tree-id15519 . -6) (undo-tree-id15520 . -6) (undo-tree-id15521 . -7) (undo-tree-id15522 . -7) (undo-tree-id15523 . -7) (undo-tree-id15524 . -7) (undo-tree-id15525 . -7) (undo-tree-id15526 . -8) (undo-tree-id15527 . -8) (undo-tree-id15528 . -9) (undo-tree-id15529 . -9) (undo-tree-id15530 . -10) (undo-tree-id15531 . -10) (undo-tree-id15532 . -11) (undo-tree-id15533 . -12) (undo-tree-id15534 . -12) (undo-tree-id15535 . -13) (undo-tree-id15536 . -13) (undo-tree-id15537 . -14) (undo-tree-id15538 . -14) (undo-tree-id15539 . -14) (undo-tree-id15540 . -14) (undo-tree-id15541 . -14) (undo-tree-id15542 . -14) (undo-tree-id15543 . -14) (undo-tree-id15544 . -14) (undo-tree-id15545 . -14) (undo-tree-id15546 . -14) (undo-tree-id15547 . -14) (undo-tree-id15548 . -14) (undo-tree-id15549 . -14) (undo-tree-id15550 . -14) (undo-tree-id15551 . -14) (undo-tree-id15552 . -14) (undo-tree-id15553 . -14) (undo-tree-id15554 . -14) (undo-tree-id15555 . -14) (undo-tree-id15556 . -14) (undo-tree-id15557 . -14) (undo-tree-id15558 . -14) (undo-tree-id15559 . -14) (undo-tree-id15560 . -15) (undo-tree-id15561 . -15) (undo-tree-id15562 . -16) (undo-tree-id15563 . -16) (undo-tree-id15564 . -16) (undo-tree-id15565 . -17) (undo-tree-id15566 . -17) (undo-tree-id15567 . -17) (undo-tree-id15568 . -17) (undo-tree-id15569 . -17) (undo-tree-id15570 . -17) (undo-tree-id15571 . -17) (undo-tree-id15572 . -17) (undo-tree-id15573 . -17) (undo-tree-id15574 . -17) (undo-tree-id15575 . -17) (undo-tree-id15576 . -17) (undo-tree-id15577 . -17) (undo-tree-id15578 . -17) (undo-tree-id15579 . -17) (undo-tree-id15580 . -17) (undo-tree-id15581 . -18) (undo-tree-id15582 . -18) (undo-tree-id15583 . -19) (undo-tree-id15584 . -19) (undo-tree-id15585 . -19) (undo-tree-id15586 . -19) (undo-tree-id15587 . -20) (undo-tree-id15588 . -20) (undo-tree-id15589 . -20) (undo-tree-id15590 . -20) (undo-tree-id15591 . -21) (undo-tree-id15592 . -21) (undo-tree-id15593 . -21) (undo-tree-id15594 . -21) (undo-tree-id15595 . -22) (undo-tree-id15596 . -22) (undo-tree-id15597 . -22) (undo-tree-id15598 . -22) (undo-tree-id15599 . -23) (undo-tree-id15600 . -23) (undo-tree-id15601 . -23) (undo-tree-id15602 . -23) (undo-tree-id15603 . -24) (undo-tree-id15604 . -24) (undo-tree-id15605 . -24) (undo-tree-id15606 . -24) (undo-tree-id15607 . -24) (undo-tree-id15608 . -25) (undo-tree-id15609 . -25) (undo-tree-id15610 . -27) (undo-tree-id15611 . -27) (undo-tree-id15612 . -25) (undo-tree-id15613 . -26) (undo-tree-id15614 . -26) (undo-tree-id15615 . -27) (undo-tree-id15616 . -27) (undo-tree-id15617 . -27) (undo-tree-id15618 . -27) (undo-tree-id15619 . -28) (undo-tree-id15620 . -28) (undo-tree-id15621 . -28) (undo-tree-id15622 . -28) (undo-tree-id15623 . -28) (undo-tree-id15624 . -28) (undo-tree-id15625 . -28) (undo-tree-id15626 . -29) (undo-tree-id15627 . -29) (undo-tree-id15628 . -30) (undo-tree-id15629 . -30) (undo-tree-id15630 . -30) (undo-tree-id15631 . -30) (undo-tree-id15632 . -30) (undo-tree-id15633 . -30) (undo-tree-id15634 . -30) (undo-tree-id15635 . -30) (undo-tree-id15636 . -30) (undo-tree-id15637 . -30) (undo-tree-id15638 . -30) (undo-tree-id15639 . -30) (undo-tree-id15640 . -30) (undo-tree-id15641 . -30) (undo-tree-id15642 . -30) (undo-tree-id15643 . -30) (undo-tree-id15644 . -30) (undo-tree-id15645 . -30)) nil (26041 597 799699 756000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1207) (undo-tree-id15495 . -1) (undo-tree-id15496 . -1) (undo-tree-id15497 . 1) (undo-tree-id15498 . 1) (undo-tree-id15499 . -1)) nil (26041 597 799595 800000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1207) (undo-tree-id15491 . -1) (undo-tree-id15492 . 1) (undo-tree-id15493 . 1) (undo-tree-id15494 . -1)) nil (26041 597 799587 732000) 0 nil])
([nil nil ((2776 . 2784) (#("        " 0 8 (fontified nil)) . 2775) (undo-tree-id15765 . -8) (undo-tree-id15766 . -8) (2783 . 2784) (t 26041 597 857658 170000)) nil (26041 612 107771 510000) 0 nil])
([nil nil ((2784 . 2787)) nil (26041 612 107769 121000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -2785) (undo-tree-id15754 . -1) (undo-tree-id15755 . -1) (undo-tree-id15756 . -1) (undo-tree-id15757 . -1) (undo-tree-id15758 . -1) (undo-tree-id15759 . -1) (undo-tree-id15760 . -1) (undo-tree-id15761 . -1) (#("e" 0 1 (fontified t)) . -2786) (undo-tree-id15762 . -1) (undo-tree-id15763 . -1) (undo-tree-id15764 . -1) 2787) nil (26041 612 107767 689000) 0 nil])
([nil nil ((2785 . 2790)) nil (26041 612 107758 444000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-variable-name-face fontified t)) . -2789) (undo-tree-id15749 . -1) (undo-tree-id15750 . -1) (undo-tree-id15751 . -1) (undo-tree-id15752 . -1) (undo-tree-id15753 . -1) 2790) nil (26041 612 107757 512000) 0 nil])
([nil nil ((2789 . 2795)) nil (26041 612 107753 456000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t)) . -2794) (undo-tree-id15744 . -1) (undo-tree-id15745 . -1) (undo-tree-id15746 . -1) (undo-tree-id15747 . -1) (undo-tree-id15748 . -1) 2795) nil (26041 612 107752 608000) 0 nil])
([nil nil ((2794 . 2795)) nil (26041 612 107748 479000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2805 2810 nil nil nil nil #s(yas--field 2 2812 2820 nil nil nil nil #s(yas--exit 2821 nil))) #s(yas--field 2 2812 2820 nil nil nil nil #s(yas--exit 2821 nil))) #s(yas--exit 2821 nil) 105 nil #s(yas--field 1 2805 2810 nil nil nil nil #s(yas--field 2 2812 2820 nil nil nil nil #s(yas--exit 2821 nil))) nil nil)) (2794 . 2821) (#("my_handler(${1:image}, ${2:userdata})$0" 0 39 (fontified nil)) . 2794) (2794 . 2833) (#("m" 0 1 (fontified nil)) . 2794) (2794 . 2795) (#("my_handler(…)" 0 13 (fontified nil)) . -2794) (2794 . 2807) (#("m" 0 1 (fontified t)) . -2794) (undo-tree-id15737 . -1) (undo-tree-id15738 . -1) (undo-tree-id15739 . -1) (undo-tree-id15740 . -1) (undo-tree-id15741 . -1) (undo-tree-id15742 . -1) (undo-tree-id15743 . -1) 2795) nil (26041 612 107746 839000) 0 nil])
([nil nil ((apply yas--snippet-revive 2794 2821 #s(yas--snippet nil (#s(yas--field 1 2805 2810 nil nil nil nil #s(yas--field 2 2812 2820 nil nil nil nil #s(yas--exit 2821 nil))) #s(yas--field 2 2812 2820 nil nil nil nil #s(yas--exit 2821 nil))) #s(yas--exit 2821 nil) 105 nil #s(yas--field 1 2805 2810 nil nil nil nil #s(yas--field 2 2812 2820 nil nil nil nil #s(yas--exit 2821 nil))) nil nil))) nil (26041 612 107739 739000) 0 nil])
([nil nil ((#("(image, userdata)" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 16 (fontified t) 16 17 (face (rainbow-delimiters-depth-3-face) fontified t)) . 2804) (undo-tree-id15719 . -17) (undo-tree-id15720 . -17) (undo-tree-id15721 . -1) (undo-tree-id15722 . -1) (undo-tree-id15723 . -1) (undo-tree-id15724 . -1) (undo-tree-id15725 . -1) (undo-tree-id15726 . -1) (undo-tree-id15727 . -1) (undo-tree-id15728 . -1) (undo-tree-id15729 . -1) (undo-tree-id15730 . -1) (undo-tree-id15731 . -1) (undo-tree-id15732 . -1) (undo-tree-id15733 . -1) (undo-tree-id15734 . -1) (undo-tree-id15735 . -1) (undo-tree-id15736 . -17)) nil (26041 612 107737 179000) 0 nil])
([nil nil ((2804 . 2805)) nil (26041 612 107713 953000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -2932) (undo-tree-id15767 . -1) (undo-tree-id15768 . -1) (undo-tree-id15769 . -1) (undo-tree-id15770 . -1) (undo-tree-id15771 . -1) (undo-tree-id15772 . -1) (undo-tree-id15773 . -1) (undo-tree-id15774 . -1) (undo-tree-id15775 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -2933) (undo-tree-id15776 . -1) (undo-tree-id15777 . -1) (undo-tree-id15778 . -1) (undo-tree-id15779 . -1) (undo-tree-id15780 . -1) (undo-tree-id15781 . -1) (undo-tree-id15782 . -1) 2934 (t 26041 612 134325 699000)) nil (26041 616 835082 772000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t)) . -2975) (undo-tree-id15789 . -1) (undo-tree-id15790 . -1) (undo-tree-id15791 . -1) (undo-tree-id15792 . -1) (undo-tree-id15793 . -1) (undo-tree-id15794 . -1) (undo-tree-id15795 . -1) (undo-tree-id15796 . -1) (undo-tree-id15797 . -1) (undo-tree-id15798 . -1) (undo-tree-id15799 . -1) (undo-tree-id15800 . -1) (undo-tree-id15801 . -1) (undo-tree-id15802 . -1) (undo-tree-id15803 . -1) (undo-tree-id15804 . -1) (#("a" 0 1 (fontified t)) . -2976) (undo-tree-id15805 . -1) (undo-tree-id15806 . -1) (undo-tree-id15807 . -1) (undo-tree-id15808 . -1) (undo-tree-id15809 . -1) (undo-tree-id15810 . -1) (undo-tree-id15811 . -1) (undo-tree-id15812 . -1) (undo-tree-id15813 . -1) (undo-tree-id15814 . -1) (undo-tree-id15815 . -1) (undo-tree-id15816 . -1) (undo-tree-id15817 . -1) (undo-tree-id15818 . -1) (#("n" 0 1 (fontified t)) . -2977) (undo-tree-id15819 . -1) (undo-tree-id15820 . -1) (undo-tree-id15821 . -1) (undo-tree-id15822 . -1) (undo-tree-id15823 . -1) (undo-tree-id15824 . -1) (undo-tree-id15825 . -1) (undo-tree-id15826 . -1) (undo-tree-id15827 . -1) (undo-tree-id15828 . -1) (undo-tree-id15829 . -1) (undo-tree-id15830 . -1) (#("d" 0 1 (fontified t)) . -2978) (undo-tree-id15831 . -1) (undo-tree-id15832 . -1) (undo-tree-id15833 . -1) (undo-tree-id15834 . -1) (undo-tree-id15835 . -1) (undo-tree-id15836 . -1) (undo-tree-id15837 . -1) (undo-tree-id15838 . -1) (undo-tree-id15839 . -1) (undo-tree-id15840 . -1) (#("l" 0 1 (fontified t)) . -2979) (undo-tree-id15841 . -1) (undo-tree-id15842 . -1) (undo-tree-id15843 . -1) (undo-tree-id15844 . -1) (undo-tree-id15845 . -1) (undo-tree-id15846 . -1) (undo-tree-id15847 . -1) (undo-tree-id15848 . -1) (#("e" 0 1 (fontified t)) . -2980) (undo-tree-id15849 . -1) (undo-tree-id15850 . -1) (undo-tree-id15851 . -1) (undo-tree-id15852 . -1) (undo-tree-id15853 . -1) (#("r" 0 1 (fontified t)) . -2981) (undo-tree-id15854 . -1) (undo-tree-id15855 . -1) (undo-tree-id15856 . -1) 2982 (t 26041 616 890992 654000)) nil (26041 621 675738 975000) 0 nil])
([nil nil ((2975 . 2976)) nil (26041 621 675687 144000) 0 nil])
([nil nil ((2975 . 2978) (#("p" 0 1 (fontified nil)) . 2975) (2975 . 2976) (#("ptr" 0 3 (fontified nil)) . -2975) (2975 . 2978) (#("p" 0 1 (fontified t)) . -2975) (undo-tree-id15783 . -1) (undo-tree-id15784 . -1) (undo-tree-id15785 . -1) (undo-tree-id15786 . -1) (undo-tree-id15787 . -1) (undo-tree-id15788 . -1) 2976) nil (26041 621 675683 8000) 0 nil])
([nil nil ((#("ptr" 0 3 (fontified t)) . -2975) (undo-tree-id15986 . -3) (undo-tree-id15987 . -3) (undo-tree-id15988 . -3) (undo-tree-id15989 . -3) (undo-tree-id15990 . -3) (undo-tree-id15991 . -3) (undo-tree-id15992 . -3) (undo-tree-id15993 . -3) (undo-tree-id15994 . -3) (undo-tree-id15995 . -3) (undo-tree-id15996 . -3) (undo-tree-id15997 . -3) (undo-tree-id15998 . -3) (undo-tree-id15999 . -3) (undo-tree-id16000 . -3) (undo-tree-id16001 . -3) (undo-tree-id16002 . -3) (undo-tree-id16003 . -3) (undo-tree-id16004 . -3) (undo-tree-id16005 . -3) (undo-tree-id16006 . -3) (undo-tree-id16007 . -3) (undo-tree-id16008 . -3) (undo-tree-id16009 . -3) (undo-tree-id16010 . -3) (undo-tree-id16011 . -3) (undo-tree-id16012 . -3) (undo-tree-id16013 . -3) (undo-tree-id16014 . -3) (undo-tree-id16015 . -3) (undo-tree-id16016 . -3) (undo-tree-id16017 . -3) (undo-tree-id16018 . -3) (undo-tree-id16019 . -3) 2978 (t 26041 621 700992 937000)) nil (26041 681 947871 489000) 0 nil])
([nil nil ((2975 . 2977)) nil (26041 681 947846 347000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -2975) (undo-tree-id15975 . -1) (undo-tree-id15976 . -1) (undo-tree-id15977 . -1) (undo-tree-id15978 . -1) (undo-tree-id15979 . -1) (undo-tree-id15980 . -1) (undo-tree-id15981 . -1) (undo-tree-id15982 . -1) (#("a" 0 1 (fontified t)) . -2976) (undo-tree-id15983 . -1) (undo-tree-id15984 . -1) (undo-tree-id15985 . -1) 2977) nil (26041 681 947845 124000) 0 nil])
([nil nil ((2975 . 2980)) nil (26041 681 947837 126000) 0 nil])
([nil nil ((2980 . 2988)) nil (26041 681 947836 411000) 0 nil])
([nil nil ((#("han" 0 3 (fontified t)) . -2985) (undo-tree-id15965 . -3) (undo-tree-id15966 . -3) (undo-tree-id15967 . -3) (undo-tree-id15968 . -3) (undo-tree-id15969 . -3) (undo-tree-id15970 . -3) (undo-tree-id15971 . -3) (undo-tree-id15972 . -3) (undo-tree-id15973 . -3) (undo-tree-id15974 . -3) 2988) nil (26041 681 947835 298000) 0 nil])
([nil nil ((#("data_" 0 5 (fontified t)) . -2980) (undo-tree-id15937 . -5) (undo-tree-id15938 . -5) (undo-tree-id15939 . -1) (undo-tree-id15940 . -1) (undo-tree-id15941 . -2) (undo-tree-id15942 . -2) (undo-tree-id15943 . -3) (undo-tree-id15944 . -3) (undo-tree-id15945 . -4) (undo-tree-id15946 . -4) (undo-tree-id15947 . -4) (undo-tree-id15948 . -4) (undo-tree-id15949 . -5) (undo-tree-id15950 . -5) (undo-tree-id15951 . -5) (undo-tree-id15952 . -5) (undo-tree-id15953 . -5) (undo-tree-id15954 . -5) (undo-tree-id15955 . -5) (undo-tree-id15956 . -5) (undo-tree-id15957 . -5) (undo-tree-id15958 . -5) (undo-tree-id15959 . -5) (undo-tree-id15960 . -5) (undo-tree-id15961 . -5) (undo-tree-id15962 . -5) (undo-tree-id15963 . -5) (undo-tree-id15964 . -5) 2985) nil (26041 681 947826 844000) 0 nil])
([nil nil ((#("ffi::" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t)) . -2975) (undo-tree-id15890 . -5) (undo-tree-id15891 . -5) (undo-tree-id15892 . -1) (undo-tree-id15893 . -1) (undo-tree-id15894 . -1) (undo-tree-id15895 . -2) (undo-tree-id15896 . -2) (undo-tree-id15897 . -3) (undo-tree-id15898 . -3) (undo-tree-id15899 . -4) (undo-tree-id15900 . -4) (undo-tree-id15901 . -4) (undo-tree-id15902 . -5) (undo-tree-id15903 . -5) (undo-tree-id15904 . -5) (undo-tree-id15905 . -5) (undo-tree-id15906 . -5) (undo-tree-id15907 . -5) (undo-tree-id15908 . -5) (undo-tree-id15909 . -5) (undo-tree-id15910 . -5) (undo-tree-id15911 . -5) (undo-tree-id15912 . -5) (undo-tree-id15913 . -5) (undo-tree-id15914 . -5) (undo-tree-id15915 . -5) (undo-tree-id15916 . -5) (undo-tree-id15917 . -5) (undo-tree-id15918 . -5) (undo-tree-id15919 . -5) (undo-tree-id15920 . -5) (undo-tree-id15921 . -5) (undo-tree-id15922 . -5) (undo-tree-id15923 . -5) (undo-tree-id15924 . -5) (undo-tree-id15925 . -5) (undo-tree-id15926 . -5) (undo-tree-id15927 . -5) (undo-tree-id15928 . -5) (undo-tree-id15929 . -5) (undo-tree-id15930 . -5) (undo-tree-id15931 . -5) (undo-tree-id15932 . -5) (undo-tree-id15933 . -5) (undo-tree-id15934 . -5) (undo-tree-id15935 . -5) (undo-tree-id15936 . -5) 2980) nil (26041 681 947806 5000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -2814) (undo-tree-id15867 . -1) (undo-tree-id15868 . -1) (undo-tree-id15869 . -1) (undo-tree-id15870 . -1) (undo-tree-id15871 . -1) (undo-tree-id15872 . -1) (undo-tree-id15873 . -1) (undo-tree-id15874 . -1) (undo-tree-id15875 . -1) (undo-tree-id15876 . -1) (undo-tree-id15877 . -1) (undo-tree-id15878 . -1) (undo-tree-id15879 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -2815) (undo-tree-id15880 . -1) (undo-tree-id15881 . -1) (undo-tree-id15882 . -1) (undo-tree-id15883 . -1) (undo-tree-id15884 . -1) (undo-tree-id15885 . -1) (undo-tree-id15886 . -1) (undo-tree-id15887 . -1) (undo-tree-id15888 . -1) (undo-tree-id15889 . -1) 2816) nil (26041 681 947771 622000) 0 nil])
([nil nil ((#("        let ptr = my_handler;" 0 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 15 (face font-lock-variable-name-face fontified t) 15 18 (fontified t) 18 29 (fontified t)) . 2776) (undo-tree-id15864 . -28) (undo-tree-id15865 . -8) (undo-tree-id15866 . -29)) nil (26041 681 947754 65000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2776) (undo-tree-id15863 . -1)) nil (26041 681 948134 236000) 0 nil])
([nil nil ((#("const" 0 5 (face font-lock-keyword-face fontified t)) . -2871) (undo-tree-id16088 . -5) (undo-tree-id16089 . -5) (undo-tree-id16090 . -5) (undo-tree-id16091 . -5) (undo-tree-id16092 . -5) (undo-tree-id16093 . -5) (undo-tree-id16094 . -5) (undo-tree-id16095 . -5) (undo-tree-id16096 . -5) 2876) nil (26041 708 342487 140000) 0 nil] [nil nil ((#("void" 0 4 (fontified t)) . -2863) (undo-tree-id15857 . -4) (undo-tree-id15858 . -4) (undo-tree-id15859 . -1) (undo-tree-id15860 . -2) (undo-tree-id15861 . -3) (undo-tree-id15862 . -4) 2867) ((2863 . 2867)) (26041 681 947744 507000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . -2870) (undo-tree-id16070 . -1) (undo-tree-id16071 . -1) (undo-tree-id16072 . -1) (undo-tree-id16073 . -1) (undo-tree-id16074 . -1) (undo-tree-id16075 . -1) (undo-tree-id16076 . -1) (undo-tree-id16077 . -1) (undo-tree-id16078 . -1) (undo-tree-id16079 . -1) (undo-tree-id16080 . -1) (undo-tree-id16081 . -1) (undo-tree-id16082 . -1) (undo-tree-id16083 . -1) (undo-tree-id16084 . -1) (undo-tree-id16085 . -1) (undo-tree-id16086 . -1) (undo-tree-id16087 . -1) 2871) nil (26041 708 342479 888000) 0 nil])
nil
([nil nil ((2870 . 2875)) nil (26041 708 342465 476000) 0 nil])
([nil nil ((2870 . 2871)) nil (26041 708 342464 852000) 0 nil])
([nil nil ((2876 . 2878)) nil (26041 708 342464 81000) 0 nil])
([nil nil ((2878 . 2880)) nil (26041 708 342463 417000) 0 nil])
([nil nil ((#("data" 0 4 (fontified t)) . -2876) (undo-tree-id16041 . -4) (undo-tree-id16042 . -1) (undo-tree-id16043 . -1) (undo-tree-id16044 . -1) (undo-tree-id16045 . -2) (undo-tree-id16046 . -2) (undo-tree-id16047 . -2) (undo-tree-id16048 . -2) (undo-tree-id16049 . -2) (undo-tree-id16050 . -2) (undo-tree-id16051 . -2) (undo-tree-id16052 . -2) (undo-tree-id16053 . -2) (undo-tree-id16054 . -2) (undo-tree-id16055 . -2) (undo-tree-id16056 . -2) (undo-tree-id16057 . -3) (undo-tree-id16058 . -3) (undo-tree-id16059 . -3) (undo-tree-id16060 . -4) (undo-tree-id16061 . -4) (undo-tree-id16062 . -4) (undo-tree-id16063 . -4) (undo-tree-id16064 . -4) (undo-tree-id16065 . -4) (undo-tree-id16066 . -4) (undo-tree-id16067 . -4) (undo-tree-id16068 . -4) (undo-tree-id16069 . -4) 2880) nil (26041 708 342461 650000) 0 nil])
([nil nil ((2876 . 2877)) nil (26041 708 342441 66000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -2876) (undo-tree-id16035 . -1) (undo-tree-id16036 . -1) (undo-tree-id16037 . -1) (undo-tree-id16038 . -1) (undo-tree-id16039 . -1) (undo-tree-id16040 . -1) 2877) nil (26041 708 342439 349000) 0 nil])
([nil nil ((2876 . 2881)) nil (26041 708 342432 734000) 0 nil])
([nil nil ((2876 . 2901) (#("image" 0 5 (fontified nil)) . 2876) (2876 . 2881) (#("zbar_image_data_handler_t" 0 25 (fontified nil)) . -2876) (2876 . 2901) (#("image" 0 5 (fontified t)) . -2876) (undo-tree-id16020 . -5) (undo-tree-id16021 . -1) (undo-tree-id16022 . -1) (undo-tree-id16023 . -1) (undo-tree-id16024 . -2) (undo-tree-id16025 . -2) (undo-tree-id16026 . -3) (undo-tree-id16027 . -3) (undo-tree-id16028 . -4) (undo-tree-id16029 . -4) (undo-tree-id16030 . -5) (undo-tree-id16031 . -5) (undo-tree-id16032 . -5) (undo-tree-id16033 . -5) (undo-tree-id16034 . -5) 2881) nil (26041 708 342427 948000) 0 nil])
([nil nil ((2871 . 2877) (t 26041 708 370998 256000)) nil (26041 722 659294 83000) 0 nil])
([nil nil ((2974 . 2975) (t 26041 722 717665 801000)) nil (26041 729 936536 695000) 0 nil])
([nil nil ((2974 . 2981) (#("h" 0 1 (fontified nil)) . 2974) (2974 . 2975) (#("handler" 0 7 (fontified nil)) . -2974) (2974 . 2981) (#("h" 0 1 (fontified t)) . -2974) (undo-tree-id16097 . -1) (undo-tree-id16098 . -1) (undo-tree-id16099 . -1) (undo-tree-id16100 . -1) (undo-tree-id16101 . -1) (undo-tree-id16102 . -1) 2975) nil (26041 748 161269 782000) 0 nil])
([nil nil ((2981 . 2983) (t 26041 729 964332 908000)) nil (26041 765 490719 970000) 0 nil] [nil nil ((2981 . 2983) (t 26041 729 964332 908000)) ((#(".u" 0 1 (fontified t) 1 2 (fontified t)) . 2981) (undo-tree-id16196 . -2) (undo-tree-id16197 . -1) (undo-tree-id16198 . -1) (undo-tree-id16199 . -1) (undo-tree-id16200 . -2) (undo-tree-id16201 . -2) (undo-tree-id16202 . -2) (undo-tree-id16203 . -2) (undo-tree-id16204 . -2) (undo-tree-id16205 . -1) (undo-tree-id16206 . -1) (undo-tree-id16207 . -1) (undo-tree-id16208 . -1) (undo-tree-id16209 . -1) (undo-tree-id16210 . -1) (undo-tree-id16211 . -1) (undo-tree-id16212 . -1) (undo-tree-id16213 . -2) (undo-tree-id16214 . -2) (undo-tree-id16215 . -2) (undo-tree-id16216 . -2) (undo-tree-id16217 . -2)) (26041 747 482515 642000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -2982) (undo-tree-id16243 . -1) (undo-tree-id16244 . -1) (undo-tree-id16245 . -1) (undo-tree-id16246 . -1) 2983) nil (26041 765 490718 596000) 0 nil])
([nil nil ((apply yas--snippet-revive 2974 2992 #s(yas--snippet nil nil nil 106 nil nil nil nil)) (#("handler." 0 8 (fontified nil)) . -2974) (undo-tree-id16110 . -7) (undo-tree-id16111 . -8) (undo-tree-id16112 . -7) (undo-tree-id16113 . -7) (undo-tree-id16114 . -7) (undo-tree-id16115 . -7) (undo-tree-id16116 . -7) (undo-tree-id16117 . -7) (undo-tree-id16118 . -7) (undo-tree-id16119 . -7) (undo-tree-id16120 . -7) (undo-tree-id16121 . -7) (undo-tree-id16122 . -7) (undo-tree-id16123 . -7) (undo-tree-id16124 . -7) (undo-tree-id16125 . -7) (undo-tree-id16126 . -7) (undo-tree-id16127 . -7) (undo-tree-id16128 . -2) (undo-tree-id16129 . -2) (undo-tree-id16130 . -2) (undo-tree-id16131 . -2) (undo-tree-id16132 . -2) (undo-tree-id16133 . -2) (undo-tree-id16134 . -2) (undo-tree-id16135 . -2) (undo-tree-id16136 . -2) (undo-tree-id16137 . -2) (undo-tree-id16138 . -2) (undo-tree-id16139 . -2) (undo-tree-id16140 . -2) (undo-tree-id16141 . -2) (undo-tree-id16142 . -2) (undo-tree-id16143 . -2) (undo-tree-id16144 . -2) (undo-tree-id16145 . -2) (undo-tree-id16146 . -2) (undo-tree-id16147 . -2) (undo-tree-id16148 . -2) (undo-tree-id16149 . -2) (undo-tree-id16150 . -2) (undo-tree-id16151 . -2) (undo-tree-id16152 . -2) (undo-tree-id16153 . -2) (undo-tree-id16154 . -2) (undo-tree-id16155 . -2) (undo-tree-id16156 . -2) (undo-tree-id16157 . -2) (undo-tree-id16158 . -2) (undo-tree-id16159 . -2) (undo-tree-id16160 . -2) (undo-tree-id16161 . -7) (undo-tree-id16162 . -7) (undo-tree-id16163 . -7) (undo-tree-id16164 . -7) (undo-tree-id16165 . -7) (undo-tree-id16166 . -7) (undo-tree-id16167 . -7) (undo-tree-id16168 . -7) (undo-tree-id16169 . -7) (undo-tree-id16170 . -7) (undo-tree-id16171 . -7) (undo-tree-id16172 . -7) (undo-tree-id16173 . -8) (undo-tree-id16174 . -8) (undo-tree-id16175 . -8) (undo-tree-id16176 . -8) (undo-tree-id16177 . -8) (undo-tree-id16178 . -8) (undo-tree-id16179 . -8) (undo-tree-id16180 . -8) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 106 nil nil nil nil)) (2982 . 3000) (#("unsafe { handler }" 0 18 (fontified nil)) . 2982) (2982 . 3000) (#("u" 0 1 (fontified nil)) . 2982) (2982 . 2983) (#("unsafe" 0 6 (fontified nil)) . -2982) (2982 . 2988) (#("u" 0 1 (fontified t)) . -2982) (undo-tree-id16181 . -1) (undo-tree-id16182 . -1) (undo-tree-id16183 . -1) (undo-tree-id16184 . -1) (undo-tree-id16185 . -1) (undo-tree-id16186 . -1) 2983) ((2982 . 2983) (#("unsafe" 0 6 (fontified nil)) . 2982) (2982 . 2988) (#("u" 0 1 (fontified nil)) . 2982) (2982 . 2983) (#("unsafe { handler }" 0 18 (fontified nil)) . 2982) (2982 . 3000) (#("unsafe { handler }" 0 6 (face rust-unsafe fontified nil) 6 7 (fontified nil) 7 8 (face (rainbow-delimiters-depth-4-face) fontified nil) 8 9 (fontified nil) 9 17 (fontified nil) 17 18 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 2982) (undo-tree-id16187 . -18) (undo-tree-id16188 . -18) (undo-tree-id16189 . -18) (undo-tree-id16190 . -18) (undo-tree-id16191 . -18) (undo-tree-id16192 . -18) (undo-tree-id16193 . -18) (undo-tree-id16194 . -18) (undo-tree-id16195 . -18) (2974 . 2982)) (26041 747 146940 356000) 0 nil])
([nil nil ((2982 . 2983)) nil (26041 765 490714 358000) 0 nil])
([nil nil ((#("handler }" 0 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-4-face) fontified t)) . -2983) (undo-tree-id16103 . -9) (undo-tree-id16104 . -9) (undo-tree-id16105 . -9) (undo-tree-id16106 . -9) (undo-tree-id16107 . -9) (undo-tree-id16108 . -9) (undo-tree-id16109 . -9) 2992) ((2983 . 2992)) (26041 747 146148 229000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2981) (undo-tree-id16218 . -1) (undo-tree-id16219 . -1) (undo-tree-id16220 . -1) (undo-tree-id16221 . -1) (undo-tree-id16222 . -1) (undo-tree-id16223 . -1) (undo-tree-id16224 . -1) (undo-tree-id16225 . -1) (undo-tree-id16226 . -1) (undo-tree-id16227 . -1) (undo-tree-id16228 . -1) (undo-tree-id16229 . -1) (undo-tree-id16230 . -1) (undo-tree-id16231 . -1) (undo-tree-id16232 . -1) (undo-tree-id16233 . -1) (undo-tree-id16234 . -1) (undo-tree-id16235 . -1) (undo-tree-id16236 . -1) (#("u" 0 1 (fontified t)) . -2982) (undo-tree-id16237 . -1) (undo-tree-id16238 . -1) (undo-tree-id16239 . -1) (undo-tree-id16240 . -1) (undo-tree-id16241 . -1) (undo-tree-id16242 . -1) 2983) nil (26041 765 490709 880000) 0 nil])
nil
([nil nil ((2981 . 2984) (t 26041 765 517668 380000)) nil (26041 778 723828 185000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -2983) (undo-tree-id16285 . -1) (undo-tree-id16286 . -1) (undo-tree-id16287 . -1) (undo-tree-id16288 . -1) (undo-tree-id16289 . -1) (undo-tree-id16290 . -1) 2984) nil (26041 778 723826 156000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2981) (undo-tree-id16247 . -1) (undo-tree-id16248 . -1) (undo-tree-id16249 . -1) (undo-tree-id16250 . -1) (undo-tree-id16251 . -1) (undo-tree-id16252 . -1) (undo-tree-id16253 . -1) (undo-tree-id16254 . -1) (undo-tree-id16255 . -1) (undo-tree-id16256 . -1) (undo-tree-id16257 . -1) (undo-tree-id16258 . -1) (undo-tree-id16259 . -1) (undo-tree-id16260 . -1) (undo-tree-id16261 . -1) (undo-tree-id16262 . -1) (undo-tree-id16263 . -1) (undo-tree-id16264 . -1) (undo-tree-id16265 . -1) (undo-tree-id16266 . -1) (undo-tree-id16267 . -1) (undo-tree-id16268 . -1) (undo-tree-id16269 . -1) (undo-tree-id16270 . -1) (#("i" 0 1 (fontified t)) . -2982) (undo-tree-id16271 . -1) (undo-tree-id16272 . -1) (undo-tree-id16273 . -1) (undo-tree-id16274 . -1) (undo-tree-id16275 . -1) (undo-tree-id16276 . -1) (undo-tree-id16277 . -1) (undo-tree-id16278 . -1) (undo-tree-id16279 . -1) (undo-tree-id16280 . -1) (undo-tree-id16281 . -1) (undo-tree-id16282 . -1) (undo-tree-id16283 . -1) (undo-tree-id16284 . -1) 2983) nil (26041 778 723815 927000) 0 nil])
([nil nil ((2784 . 2786) (t 26041 778 784335 856000)) nil (26041 834 312101 526000) 0 nil])
([nil nil ((#("handler" 0 7 (fontified t)) . -2976) (undo-tree-id16453 . -7) (undo-tree-id16454 . -7) (undo-tree-id16455 . -7) (undo-tree-id16456 . -7) (undo-tree-id16457 . -7) (undo-tree-id16458 . -7) (undo-tree-id16459 . -7) (undo-tree-id16460 . -7) (undo-tree-id16461 . -7) (undo-tree-id16462 . -7) (undo-tree-id16463 . -7) (undo-tree-id16464 . -7) (undo-tree-id16465 . -7) (undo-tree-id16466 . -7) (undo-tree-id16467 . -7) (undo-tree-id16468 . -7) (undo-tree-id16469 . -7) (undo-tree-id16470 . -7) (undo-tree-id16471 . -7) (undo-tree-id16472 . -7) (undo-tree-id16473 . -7) (undo-tree-id16474 . -7) (undo-tree-id16475 . -7) (undo-tree-id16476 . -7) (undo-tree-id16477 . -7) (undo-tree-id16478 . -7) (undo-tree-id16479 . -7) (undo-tree-id16480 . -7) (undo-tree-id16481 . -7) (undo-tree-id16482 . -7) (undo-tree-id16483 . -7) (undo-tree-id16484 . -7) (undo-tree-id16485 . -7) (undo-tree-id16486 . -7) (undo-tree-id16487 . -7) (undo-tree-id16488 . -7) (undo-tree-id16489 . -7) (undo-tree-id16490 . -7) (undo-tree-id16491 . -7) (undo-tree-id16492 . -7) (undo-tree-id16493 . -7) 2983) nil (26041 834 312099 127000) 0 nil])
([nil nil ((2976 . 2977)) nil (26041 834 311386 539000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t)) . -2976) (undo-tree-id16449 . -1) (undo-tree-id16450 . -1) (undo-tree-id16451 . -1) (undo-tree-id16452 . -1) 2977) nil (26041 834 311385 677000) 0 nil])
([nil nil ((2976 . 2978)) nil (26041 834 311382 124000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2987 2987 nil nil nil t #s(yas--field 2 2987 2987 nil nil nil nil #s(yas--exit 2988 nil))) #s(yas--field 2 2987 2987 nil nil nil nil #s(yas--exit 2988 nil))) #s(yas--exit 2988 nil) 107 nil #s(yas--field 1 2987 2987 nil nil nil t #s(yas--field 2 2987 2987 nil nil nil nil #s(yas--exit 2988 nil))) nil nil)) (2976 . 3003) (#("my_handler(${1:image}, ${2:userdata})$0" 0 39 (fontified nil)) . 2976) (2976 . 3015) (#("my" 0 2 (fontified nil)) . 2976) (2976 . 2978) (#("my_handler(…)" 0 13 (fontified nil)) . -2976) (2976 . 2989) (#("my" 0 2 (fontified t)) . -2976) (undo-tree-id16438 . -2) (undo-tree-id16439 . -1) (undo-tree-id16440 . -1) (undo-tree-id16441 . -1) (undo-tree-id16442 . -1) (undo-tree-id16443 . -1) (undo-tree-id16444 . -2) (undo-tree-id16445 . -2) (undo-tree-id16446 . -2) (undo-tree-id16447 . -2) (undo-tree-id16448 . -2) 2978) nil (26041 834 311380 680000) 0 nil])
([nil nil ((#("image" 0 5 (fontified t)) . 2987) (undo-tree-id16436 . -5) (undo-tree-id16437 . -5)) nil (26041 834 311370 794000) 0 nil])
([nil nil ((#(", userdata" 0 10 (fontified t)) . 2987) (undo-tree-id16433 . -2) (undo-tree-id16434 . -10) (undo-tree-id16435 . -10)) nil (26041 834 311368 568000) 0 nil])
([nil nil ((apply yas--snippet-revive 2976 2988 #s(yas--snippet nil (#s(yas--field 1 2987 2987 nil nil nil t #s(yas--field 2 2987 2987 nil nil nil nil #s(yas--exit 2988 nil))) #s(yas--field 2 2987 2987 nil nil nil nil #s(yas--exit 2988 nil))) #s(yas--exit 2988 nil) 107 nil #s(yas--field 1 2987 2987 nil nil nil t #s(yas--field 2 2987 2987 nil nil nil nil #s(yas--exit 2988 nil))) nil nil))) nil (26041 834 311365 940000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -2986) (undo-tree-id16397 . -1) (undo-tree-id16398 . -1) (undo-tree-id16399 . -1) (undo-tree-id16400 . -1) (undo-tree-id16401 . -1) (undo-tree-id16402 . -1) (undo-tree-id16403 . -1) (undo-tree-id16404 . -1) (undo-tree-id16405 . -1) (undo-tree-id16406 . -1) (undo-tree-id16407 . -1) (undo-tree-id16408 . -1) (undo-tree-id16409 . -1) (undo-tree-id16410 . -1) (undo-tree-id16411 . -1) (undo-tree-id16412 . -1) (undo-tree-id16413 . -1) (undo-tree-id16414 . -1) (undo-tree-id16415 . -1) (undo-tree-id16416 . -1) (undo-tree-id16417 . -1) (undo-tree-id16418 . -1) (undo-tree-id16419 . -1) (undo-tree-id16420 . -1) (undo-tree-id16421 . -1) (undo-tree-id16422 . -1) (undo-tree-id16423 . -1) (undo-tree-id16424 . -1) (undo-tree-id16425 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -2987) (undo-tree-id16426 . -1) (undo-tree-id16427 . -1) (undo-tree-id16428 . -1) (undo-tree-id16429 . -1) (undo-tree-id16430 . -1) (undo-tree-id16431 . -1) (undo-tree-id16432 . -1) 2988) nil (26041 834 311363 847000) 0 nil])
([nil nil ((2986 . 2987)) nil (26041 834 311338 905000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2986) (undo-tree-id16388 . -1) (undo-tree-id16389 . -1) (undo-tree-id16390 . -1) (undo-tree-id16391 . -1) (undo-tree-id16392 . -1) (undo-tree-id16393 . -1) (undo-tree-id16394 . -1) (undo-tree-id16395 . -1) (undo-tree-id16396 . -1) 2987) nil (26041 834 311337 974000) 0 nil])
([nil nil ((2986 . 2992)) nil (26041 834 311331 405000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -2991) (undo-tree-id16379 . -1) (undo-tree-id16380 . -1) (undo-tree-id16381 . -1) (undo-tree-id16382 . -1) (undo-tree-id16383 . -1) (undo-tree-id16384 . -1) (undo-tree-id16385 . -1) (undo-tree-id16386 . -1) (undo-tree-id16387 . -1) 2992) nil (26041 834 311330 306000) 0 nil])
([nil nil ((2991 . 2997)) nil (26041 834 311323 424000) 0 nil])
([nil nil ((2986 . 2990)) nil (26041 834 311322 727000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2986) (undo-tree-id16321 . -1) (undo-tree-id16322 . -1) (undo-tree-id16323 . -1) (undo-tree-id16324 . -1) (undo-tree-id16325 . -1) (undo-tree-id16326 . -1) (undo-tree-id16327 . -1) (undo-tree-id16328 . -1) (undo-tree-id16329 . -1) (undo-tree-id16330 . -1) (undo-tree-id16331 . -1) (undo-tree-id16332 . -1) (undo-tree-id16333 . -1) (undo-tree-id16334 . -1) (undo-tree-id16335 . -1) (undo-tree-id16336 . -1) (undo-tree-id16337 . -1) (undo-tree-id16338 . -1) (undo-tree-id16339 . -1) (undo-tree-id16340 . -1) (undo-tree-id16341 . -1) (undo-tree-id16342 . -1) (#("p" 0 1 (fontified t)) . -2987) (undo-tree-id16343 . -1) (undo-tree-id16344 . -1) (undo-tree-id16345 . -1) (undo-tree-id16346 . -1) (undo-tree-id16347 . -1) (undo-tree-id16348 . -1) (undo-tree-id16349 . -1) (undo-tree-id16350 . -1) (undo-tree-id16351 . -1) (undo-tree-id16352 . -1) (undo-tree-id16353 . -1) (undo-tree-id16354 . -1) (undo-tree-id16355 . -1) (undo-tree-id16356 . -1) (undo-tree-id16357 . -1) (undo-tree-id16358 . -1) (undo-tree-id16359 . -1) (#("t" 0 1 (fontified t)) . -2988) (undo-tree-id16360 . -1) (undo-tree-id16361 . -1) (undo-tree-id16362 . -1) (undo-tree-id16363 . -1) (undo-tree-id16364 . -1) (undo-tree-id16365 . -1) (undo-tree-id16366 . -1) (undo-tree-id16367 . -1) (undo-tree-id16368 . -1) (undo-tree-id16369 . -1) (undo-tree-id16370 . -1) (undo-tree-id16371 . -1) (#("r" 0 1 (fontified t)) . -2989) (undo-tree-id16372 . -1) (undo-tree-id16373 . -1) (undo-tree-id16374 . -1) (undo-tree-id16375 . -1) (undo-tree-id16376 . -1) (undo-tree-id16377 . -1) (undo-tree-id16378 . -1) 2990) nil (26041 834 311319 484000) 0 nil])
([nil nil ((2997 . 3004)) nil (26041 834 310921 414000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -3002) (undo-tree-id16308 . -1) (undo-tree-id16309 . -1) (undo-tree-id16310 . -1) (undo-tree-id16311 . -1) (undo-tree-id16312 . -1) (undo-tree-id16313 . -1) (undo-tree-id16314 . -1) (undo-tree-id16315 . -1) (undo-tree-id16316 . -1) (#("a" 0 1 (fontified t)) . -3003) (undo-tree-id16317 . -1) (undo-tree-id16318 . -1) (undo-tree-id16319 . -1) (undo-tree-id16320 . -1) 3004) nil (26041 834 310919 935000) 0 nil])
([nil nil ((3002 . 3007)) nil (26041 834 310907 905000) 0 nil])
([nil nil ((3002 . 3027) (#("image" 0 5 (fontified nil)) . 3002) (3002 . 3007) (#("zbar_image_data_handler_t" 0 25 (fontified nil)) . -3002) (3002 . 3027) (#("image" 0 5 (fontified t)) . -3002) (undo-tree-id16291 . -5) (undo-tree-id16292 . -5) (undo-tree-id16293 . -1) (undo-tree-id16294 . -1) (undo-tree-id16295 . -2) (undo-tree-id16296 . -2) (undo-tree-id16297 . -3) (undo-tree-id16298 . -3) (undo-tree-id16299 . -3) (undo-tree-id16300 . -4) (undo-tree-id16301 . -4) (undo-tree-id16302 . -5) (undo-tree-id16303 . -5) (undo-tree-id16304 . -5) (undo-tree-id16305 . -5) (undo-tree-id16306 . -5) (undo-tree-id16307 . -5) 3007) nil (26041 834 310903 720000) 0 nil])
([nil nil ((2986 . 2987) (t 26041 834 341005 933000)) nil (26041 898 258934 591000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2986) (undo-tree-id16589 . -1) (undo-tree-id16590 . -1) (undo-tree-id16591 . -1) (undo-tree-id16592 . -1) (undo-tree-id16593 . -1) (undo-tree-id16594 . -1) (undo-tree-id16595 . -1) (undo-tree-id16596 . -1) 2987) nil (26041 898 258933 405000) 0 nil])
([nil nil ((2924 . 2933)) nil (26041 898 258927 469000) 0 nil])
([nil nil ((2933 . 2940)) nil (26041 898 258926 868000) 0 nil])
([nil nil ((#("y" 0 1 (face font-lock-variable-name-face fontified t)) . -2939) (undo-tree-id16585 . -1) (undo-tree-id16586 . -1) (undo-tree-id16587 . -1) (undo-tree-id16588 . -1) 2940) nil (26041 898 258926 46000) 0 nil])
([nil nil ((2939 . 2946)) nil (26041 898 258922 35000) 0 nil])
([nil nil ((2946 . 2947)) nil (26041 898 258921 452000) 0 nil])
([nil nil ((#("+" 0 1 (fontified t)) . -2946) (undo-tree-id16575 . -1) (undo-tree-id16576 . -1) (undo-tree-id16577 . -1) (undo-tree-id16578 . -1) (undo-tree-id16579 . -1) (undo-tree-id16580 . -1) (undo-tree-id16581 . -1) (undo-tree-id16582 . -1) (undo-tree-id16583 . -1) (undo-tree-id16584 . -1) 2947) nil (26041 898 258920 333000) 0 nil])
([nil nil ((2946 . 2948)) nil (26041 898 258912 682000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2955 2955 nil nil nil t #s(yas--field 2 2955 2955 nil nil nil nil #s(yas--exit 2956 nil))) #s(yas--field 2 2955 2955 nil nil nil nil #s(yas--exit 2956 nil))) #s(yas--exit 2956 nil) 108 nil #s(yas--field 1 2955 2955 nil nil nil t #s(yas--field 2 2955 2955 nil nil nil nil #s(yas--exit 2956 nil))) nil nil)) (2944 . 2971) (#("my_handler(${1:image}, ${2:userdata})$0" 0 39 (fontified nil)) . 2944) (2944 . 2983) (#("my_h" 0 4 (fontified nil)) . 2944) (2944 . 2948) (#("my_handler(…)" 0 13 (fontified nil)) . -2944) (2944 . 2957) (#("my_h" 0 4 (fontified t)) . -2944) (undo-tree-id16542 . -4) (undo-tree-id16543 . -1) (undo-tree-id16544 . -1) (undo-tree-id16545 . -1) (undo-tree-id16546 . -2) (undo-tree-id16547 . -2) (undo-tree-id16548 . -2) (undo-tree-id16549 . -2) (undo-tree-id16550 . -2) (undo-tree-id16551 . -2) (undo-tree-id16552 . -2) (undo-tree-id16553 . -2) (undo-tree-id16554 . -2) (undo-tree-id16555 . -2) (undo-tree-id16556 . -2) (undo-tree-id16557 . -2) (undo-tree-id16558 . -2) (undo-tree-id16559 . -2) (undo-tree-id16560 . -2) (undo-tree-id16561 . -2) (undo-tree-id16562 . -2) (undo-tree-id16563 . -2) (undo-tree-id16564 . -2) (undo-tree-id16565 . -2) (undo-tree-id16566 . -2) (undo-tree-id16567 . -3) (undo-tree-id16568 . -3) (undo-tree-id16569 . -3) (undo-tree-id16570 . -4) (undo-tree-id16571 . -4) (undo-tree-id16572 . -4) (undo-tree-id16573 . -4) (undo-tree-id16574 . -4) 2948) nil (26041 898 258910 304000) 0 nil])
([nil nil ((#("image" 0 5 (fontified t)) . 2955) (undo-tree-id16540 . -5) (undo-tree-id16541 . -5)) nil (26041 898 258885 214000) 0 nil])
([nil nil ((#(", userdata" 0 10 (fontified t)) . 2955) (undo-tree-id16537 . -2) (undo-tree-id16538 . -10) (undo-tree-id16539 . -10)) nil (26041 898 258883 73000) 0 nil])
([nil nil ((apply yas--snippet-revive 2944 2956 #s(yas--snippet nil (#s(yas--field 1 2955 2955 nil nil nil t #s(yas--field 2 2955 2955 nil nil nil nil #s(yas--exit 2956 nil))) #s(yas--field 2 2955 2955 nil nil nil nil #s(yas--exit 2956 nil))) #s(yas--exit 2956 nil) 108 nil #s(yas--field 1 2955 2955 nil nil nil t #s(yas--field 2 2955 2955 nil nil nil nil #s(yas--exit 2956 nil))) nil nil))) nil (26041 898 258880 187000) 0 nil])
([nil nil ((2956 . 2960)) nil (26041 898 258879 646000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2958) (undo-tree-id16516 . -1) (undo-tree-id16517 . -1) (undo-tree-id16518 . -1) (undo-tree-id16519 . -1) (undo-tree-id16520 . -1) (undo-tree-id16521 . -1) (undo-tree-id16522 . -1) (undo-tree-id16523 . -1) (undo-tree-id16524 . -1) (undo-tree-id16525 . -1) (undo-tree-id16526 . -1) (undo-tree-id16527 . -1) (undo-tree-id16528 . -1) (#("s" 0 1 (fontified t)) . -2959) (undo-tree-id16529 . -1) (undo-tree-id16530 . -1) (undo-tree-id16531 . -1) (undo-tree-id16532 . -1) (undo-tree-id16533 . -1) (undo-tree-id16534 . -1) (undo-tree-id16535 . -1) (undo-tree-id16536 . -1) 2960) nil (26041 898 258877 425000) 0 nil])
([nil nil ((2958 . 2967)) nil (26041 898 258640 52000) 0 nil])
([nil nil ((2967 . 2969)) nil (26041 898 258639 480000) 0 nil])
([nil nil ((2968 . 2983)) nil (26041 898 258638 887000) 0 nil])
([nil nil ((2978 . 2990) (#("image" 0 5 (fontified nil)) . 2978) (2978 . 2983) (#("zbar_image_t" 0 12 (fontified nil)) . -2978) (2978 . 2990) (#("image" 0 5 (fontified t)) . -2978) (undo-tree-id16501 . -5) (undo-tree-id16502 . -1) (undo-tree-id16503 . -1) (undo-tree-id16504 . -1) (undo-tree-id16505 . -2) (undo-tree-id16506 . -2) (undo-tree-id16507 . -3) (undo-tree-id16508 . -3) (undo-tree-id16509 . -4) (undo-tree-id16510 . -4) (undo-tree-id16511 . -5) (undo-tree-id16512 . -5) (undo-tree-id16513 . -5) (undo-tree-id16514 . -5) (undo-tree-id16515 . -5) 2983) nil (26041 898 258637 205000) 0 nil])
([nil nil ((2990 . 2992)) nil (26041 898 258625 143000) 0 nil])
([nil nil ((2992 . 3000)) nil (26041 898 258624 366000) 0 nil])
([nil nil ((2999 . 3005) (#("c" 0 1 (fontified nil)) . 2999) (2999 . 3000) (#("c_void" 0 6 (fontified nil)) . -2999) (2999 . 3005) (#("c" 0 1 (fontified t)) . -2999) (undo-tree-id16494 . -1) (undo-tree-id16495 . -1) (undo-tree-id16496 . -1) (undo-tree-id16497 . -1) (undo-tree-id16498 . -1) (undo-tree-id16499 . -1) (undo-tree-id16500 . -1) 3000) nil (26041 898 258621 670000) 0 nil])
([nil nil ((3006 . 3007)) nil (26041 898 258605 144000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -2954) (undo-tree-id16597 . -1) (undo-tree-id16598 . -1) (undo-tree-id16599 . -1) (undo-tree-id16600 . -1) (undo-tree-id16601 . -1) (undo-tree-id16602 . -1) (undo-tree-id16603 . -1) (undo-tree-id16604 . -1) (undo-tree-id16605 . -1) (undo-tree-id16606 . -1) (undo-tree-id16607 . -1) (undo-tree-id16608 . -1) (undo-tree-id16609 . -1) (undo-tree-id16610 . -1) (undo-tree-id16611 . -1) (undo-tree-id16612 . -1) (undo-tree-id16613 . -1) (undo-tree-id16614 . -1) (undo-tree-id16615 . -1) (undo-tree-id16616 . -1) (undo-tree-id16617 . -1) (undo-tree-id16618 . -1) (undo-tree-id16619 . -1) (undo-tree-id16620 . -1) (undo-tree-id16621 . -1) (undo-tree-id16622 . -1) (undo-tree-id16623 . -1) (undo-tree-id16624 . -1) (undo-tree-id16625 . -1) (undo-tree-id16626 . -1) (undo-tree-id16627 . -1) (undo-tree-id16628 . -1) (undo-tree-id16629 . -1) (undo-tree-id16630 . -1) (undo-tree-id16631 . -1) (undo-tree-id16632 . -1) (undo-tree-id16633 . -1) (undo-tree-id16634 . -1) (undo-tree-id16635 . -1) (undo-tree-id16636 . -1) (undo-tree-id16637 . -1) (undo-tree-id16638 . -1) (undo-tree-id16639 . -1) (undo-tree-id16640 . -1) (undo-tree-id16641 . -1) (undo-tree-id16642 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -2955) (undo-tree-id16643 . -1) (undo-tree-id16644 . -1) (undo-tree-id16645 . -1) (undo-tree-id16646 . -1) (undo-tree-id16647 . -1) (undo-tree-id16648 . -1) (undo-tree-id16649 . -1) (undo-tree-id16650 . -1) (undo-tree-id16651 . -1) (undo-tree-id16652 . -1) (undo-tree-id16653 . -1) (undo-tree-id16654 . -1) (undo-tree-id16655 . -1) (undo-tree-id16656 . -1) (undo-tree-id16657 . -1) (undo-tree-id16658 . -1) (undo-tree-id16659 . -1) (undo-tree-id16660 . -1) (undo-tree-id16661 . -1) (undo-tree-id16662 . -1) (undo-tree-id16663 . -1) (undo-tree-id16664 . -1) (undo-tree-id16665 . -1) (undo-tree-id16666 . -1) (undo-tree-id16667 . -1) (undo-tree-id16668 . -1) (undo-tree-id16669 . -1) (undo-tree-id16670 . -1) (undo-tree-id16671 . -1) (undo-tree-id16672 . -1) (undo-tree-id16673 . -1) (undo-tree-id16674 . -1) (undo-tree-id16675 . -1) (undo-tree-id16676 . -1) (undo-tree-id16677 . -1) (undo-tree-id16678 . -1) (undo-tree-id16679 . -1) (undo-tree-id16680 . -1) (#(" " 0 1 (fontified t)) . -2956) (undo-tree-id16681 . -1) (undo-tree-id16682 . -1) (undo-tree-id16683 . -1) (undo-tree-id16684 . -1) (undo-tree-id16685 . -1) (undo-tree-id16686 . -1) (undo-tree-id16687 . -1) (undo-tree-id16688 . -1) (undo-tree-id16689 . -1) (undo-tree-id16690 . -1) (undo-tree-id16691 . -1) (undo-tree-id16692 . -1) (undo-tree-id16693 . -1) (undo-tree-id16694 . -1) (undo-tree-id16695 . -1) (undo-tree-id16696 . -1) (undo-tree-id16697 . -1) (undo-tree-id16698 . -1) (undo-tree-id16699 . -1) (undo-tree-id16700 . -1) (undo-tree-id16701 . -1) (undo-tree-id16702 . -1) (undo-tree-id16703 . -1) (undo-tree-id16704 . -1) (undo-tree-id16705 . -1) 2957 (t 26041 898 317676 512000)) nil (26041 925 447182 157000) 0 nil])
([nil nil ((2954 . 2955)) nil (26041 925 447098 486000) 0 nil])
([nil nil ((#("handler" 0 7 (fontified t)) . -3060) (undo-tree-id16747 . -7) (undo-tree-id16748 . -7) (undo-tree-id16749 . -7) (undo-tree-id16750 . -7) (undo-tree-id16751 . -7) (undo-tree-id16752 . -7) 3067 (t 26041 925 474344 833000)) nil (26041 936 759588 725000) 0 nil])
([nil nil ((#("my_" 0 3 (fontified t)) . -3057) (undo-tree-id16735 . -3) (undo-tree-id16736 . -2) (undo-tree-id16737 . -3) (undo-tree-id16738 . -3) (undo-tree-id16739 . -3) (undo-tree-id16740 . -3) (undo-tree-id16741 . -3) (undo-tree-id16742 . -3) (undo-tree-id16743 . -3) (undo-tree-id16744 . -3) (undo-tree-id16745 . -3) (undo-tree-id16746 . -3) 3060) nil (26041 936 759583 502000) 0 nil])
([nil nil ((3057 . 3060)) nil (26041 936 759573 694000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -3059) (undo-tree-id16729 . -1) (undo-tree-id16730 . -1) (undo-tree-id16731 . -1) (undo-tree-id16732 . -1) (undo-tree-id16733 . -1) (undo-tree-id16734 . -1) 3060) nil (26041 936 759572 694000) 0 nil])
([nil nil ((3059 . 3060)) nil (26041 936 759567 580000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -3059) 3060) nil (26041 936 759566 847000) 0 nil])
([nil nil ((3059 . 3060)) nil (26041 936 759565 726000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -3058) (undo-tree-id16706 . -1) (undo-tree-id16707 . -1) (undo-tree-id16708 . -1) (undo-tree-id16709 . -1) (undo-tree-id16710 . -1) (undo-tree-id16711 . -1) (undo-tree-id16712 . -1) (undo-tree-id16713 . -1) (undo-tree-id16714 . -1) (undo-tree-id16715 . -1) (undo-tree-id16716 . -1) (undo-tree-id16717 . -1) (undo-tree-id16718 . -1) (undo-tree-id16719 . -1) (undo-tree-id16720 . -1) (undo-tree-id16721 . -1) (undo-tree-id16722 . -1) (#("t" 0 1 (fontified t)) . -3059) (undo-tree-id16723 . -1) (undo-tree-id16724 . -1) (undo-tree-id16725 . -1) (undo-tree-id16726 . -1) (undo-tree-id16727 . -1) (undo-tree-id16728 . -1) 3060) nil (26041 936 759562 434000) 0 nil])
([nil nil ((3058 . 3060)) nil (26041 936 759534 908000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -3100) (undo-tree-id17279 . -1) (undo-tree-id17280 . -1) (undo-tree-id17281 . -1) (undo-tree-id17282 . -1) (undo-tree-id17283 . -1) (undo-tree-id17284 . -1) (undo-tree-id17285 . -1) (undo-tree-id17286 . -1) (undo-tree-id17287 . -1) (undo-tree-id17288 . -1) (undo-tree-id17289 . -1) (undo-tree-id17290 . -1) (undo-tree-id17291 . -1) (undo-tree-id17292 . -1) (undo-tree-id17293 . -1) (undo-tree-id17294 . -1) (undo-tree-id17295 . -1) (undo-tree-id17296 . -1) (undo-tree-id17297 . -1) (undo-tree-id17298 . -1) (undo-tree-id17299 . -1) (undo-tree-id17300 . -1) (undo-tree-id17301 . -1) (undo-tree-id17302 . -1) (undo-tree-id17303 . -1) (undo-tree-id17304 . -1) (undo-tree-id17305 . -1) (undo-tree-id17306 . -1) (undo-tree-id17307 . -1) (undo-tree-id17308 . -1) (undo-tree-id17309 . -1) (undo-tree-id17310 . -1) (undo-tree-id17311 . -1) (undo-tree-id17312 . -1) (undo-tree-id17313 . -1) (undo-tree-id17314 . -1) (undo-tree-id17315 . -1) (undo-tree-id17316 . -1) (undo-tree-id17317 . -1) (undo-tree-id17318 . -1) (undo-tree-id17319 . -1) (undo-tree-id17320 . -1) (undo-tree-id17321 . -1) (undo-tree-id17322 . -1) (undo-tree-id17323 . -1) (undo-tree-id17324 . -1) 3101 (t 26041 936 787678 860000)) nil (26041 960 482173 716000) 0 nil])
([nil nil ((#("handler_" 0 8 (fontified t)) . -3092) (undo-tree-id17230 . -8) (undo-tree-id17231 . -8) (undo-tree-id17232 . -7) (undo-tree-id17233 . -8) (undo-tree-id17234 . -8) (undo-tree-id17235 . -8) (undo-tree-id17236 . -8) (undo-tree-id17237 . -8) (undo-tree-id17238 . -8) (undo-tree-id17239 . -8) (undo-tree-id17240 . -8) (undo-tree-id17241 . -8) (undo-tree-id17242 . -8) (undo-tree-id17243 . -8) (undo-tree-id17244 . -8) (undo-tree-id17245 . -8) (undo-tree-id17246 . -8) (undo-tree-id17247 . -8) (undo-tree-id17248 . -8) (undo-tree-id17249 . -8) (undo-tree-id17250 . -8) (undo-tree-id17251 . -8) (undo-tree-id17252 . -8) (undo-tree-id17253 . -8) (undo-tree-id17254 . -8) (undo-tree-id17255 . -8) (undo-tree-id17256 . -8) (undo-tree-id17257 . -8) (undo-tree-id17258 . -8) (undo-tree-id17259 . -8) (undo-tree-id17260 . -8) (undo-tree-id17261 . -8) (undo-tree-id17262 . -8) (undo-tree-id17263 . -8) (undo-tree-id17264 . -8) (undo-tree-id17265 . -8) (undo-tree-id17266 . -8) (undo-tree-id17267 . -8) (undo-tree-id17268 . -8) (undo-tree-id17269 . -8) (undo-tree-id17270 . -8) (undo-tree-id17271 . -8) (undo-tree-id17272 . -8) (undo-tree-id17273 . -8) (undo-tree-id17274 . -8) (undo-tree-id17275 . -8) (undo-tree-id17276 . -8) (undo-tree-id17277 . -8) (undo-tree-id17278 . -8) 3100) nil (26041 960 482141 569000) 0 nil])
([nil nil ((#("data_" 0 5 (fontified t)) . -3087) (undo-tree-id17178 . -5) (undo-tree-id17179 . -5) (undo-tree-id17180 . -4) (undo-tree-id17181 . -5) (undo-tree-id17182 . -5) (undo-tree-id17183 . -5) (undo-tree-id17184 . -5) (undo-tree-id17185 . -5) (undo-tree-id17186 . -5) (undo-tree-id17187 . -5) (undo-tree-id17188 . -5) (undo-tree-id17189 . -5) (undo-tree-id17190 . -5) (undo-tree-id17191 . -5) (undo-tree-id17192 . -5) (undo-tree-id17193 . -5) (undo-tree-id17194 . -5) (undo-tree-id17195 . -5) (undo-tree-id17196 . -5) (undo-tree-id17197 . -5) (undo-tree-id17198 . -5) (undo-tree-id17199 . -5) (undo-tree-id17200 . -5) (undo-tree-id17201 . -5) (undo-tree-id17202 . -5) (undo-tree-id17203 . -5) (undo-tree-id17204 . -5) (undo-tree-id17205 . -5) (undo-tree-id17206 . -5) (undo-tree-id17207 . -5) (undo-tree-id17208 . -5) (undo-tree-id17209 . -5) (undo-tree-id17210 . -5) (undo-tree-id17211 . -5) (undo-tree-id17212 . -5) (undo-tree-id17213 . -5) (undo-tree-id17214 . -5) (undo-tree-id17215 . -5) (undo-tree-id17216 . -5) (undo-tree-id17217 . -5) (undo-tree-id17218 . -5) (undo-tree-id17219 . -5) (undo-tree-id17220 . -5) (undo-tree-id17221 . -5) (undo-tree-id17222 . -5) (undo-tree-id17223 . -5) (undo-tree-id17224 . -5) (undo-tree-id17225 . -5) (undo-tree-id17226 . -5) (undo-tree-id17227 . -5) (undo-tree-id17228 . -5) (undo-tree-id17229 . -5) 3092) nil (26041 960 482108 689000) 0 nil])
([nil nil ((#("image_" 0 6 (fontified t)) . -3081) (undo-tree-id17123 . -6) (undo-tree-id17124 . -6) (undo-tree-id17125 . -5) (undo-tree-id17126 . -6) (undo-tree-id17127 . -6) (undo-tree-id17128 . -6) (undo-tree-id17129 . -6) (undo-tree-id17130 . -6) (undo-tree-id17131 . -6) (undo-tree-id17132 . -6) (undo-tree-id17133 . -6) (undo-tree-id17134 . -6) (undo-tree-id17135 . -6) (undo-tree-id17136 . -6) (undo-tree-id17137 . -6) (undo-tree-id17138 . -6) (undo-tree-id17139 . -6) (undo-tree-id17140 . -6) (undo-tree-id17141 . -6) (undo-tree-id17142 . -6) (undo-tree-id17143 . -6) (undo-tree-id17144 . -6) (undo-tree-id17145 . -6) (undo-tree-id17146 . -6) (undo-tree-id17147 . -6) (undo-tree-id17148 . -6) (undo-tree-id17149 . -6) (undo-tree-id17150 . -6) (undo-tree-id17151 . -6) (undo-tree-id17152 . -6) (undo-tree-id17153 . -6) (undo-tree-id17154 . -6) (undo-tree-id17155 . -6) (undo-tree-id17156 . -6) (undo-tree-id17157 . -6) (undo-tree-id17158 . -6) (undo-tree-id17159 . -6) (undo-tree-id17160 . -6) (undo-tree-id17161 . -6) (undo-tree-id17162 . -6) (undo-tree-id17163 . -6) (undo-tree-id17164 . -6) (undo-tree-id17165 . -6) (undo-tree-id17166 . -6) (undo-tree-id17167 . -6) (undo-tree-id17168 . -6) (undo-tree-id17169 . -6) (undo-tree-id17170 . -6) (undo-tree-id17171 . -6) (undo-tree-id17172 . -6) (undo-tree-id17173 . -6) (undo-tree-id17174 . -6) (undo-tree-id17175 . -6) (undo-tree-id17176 . -6) (undo-tree-id17177 . -6) 3087) nil (26041 960 482072 500000) 0 nil])
([nil nil ((#("zbar_" 0 5 (fontified t)) . -3076) (undo-tree-id17065 . -5) (undo-tree-id17066 . -5) (undo-tree-id17067 . -4) (undo-tree-id17068 . -5) (undo-tree-id17069 . -5) (undo-tree-id17070 . -5) (undo-tree-id17071 . -5) (undo-tree-id17072 . -5) (undo-tree-id17073 . -5) (undo-tree-id17074 . -5) (undo-tree-id17075 . -5) (undo-tree-id17076 . -5) (undo-tree-id17077 . -5) (undo-tree-id17078 . -5) (undo-tree-id17079 . -5) (undo-tree-id17080 . -5) (undo-tree-id17081 . -5) (undo-tree-id17082 . -5) (undo-tree-id17083 . -5) (undo-tree-id17084 . -5) (undo-tree-id17085 . -5) (undo-tree-id17086 . -5) (undo-tree-id17087 . -5) (undo-tree-id17088 . -5) (undo-tree-id17089 . -5) (undo-tree-id17090 . -5) (undo-tree-id17091 . -5) (undo-tree-id17092 . -5) (undo-tree-id17093 . -5) (undo-tree-id17094 . -5) (undo-tree-id17095 . -5) (undo-tree-id17096 . -5) (undo-tree-id17097 . -5) (undo-tree-id17098 . -5) (undo-tree-id17099 . -5) (undo-tree-id17100 . -5) (undo-tree-id17101 . -5) (undo-tree-id17102 . -5) (undo-tree-id17103 . -5) (undo-tree-id17104 . -5) (undo-tree-id17105 . -5) (undo-tree-id17106 . -5) (undo-tree-id17107 . -5) (undo-tree-id17108 . -5) (undo-tree-id17109 . -5) (undo-tree-id17110 . -5) (undo-tree-id17111 . -5) (undo-tree-id17112 . -5) (undo-tree-id17113 . -5) (undo-tree-id17114 . -5) (undo-tree-id17115 . -5) (undo-tree-id17116 . -5) (undo-tree-id17117 . -5) (undo-tree-id17118 . -5) (undo-tree-id17119 . -5) (undo-tree-id17120 . -5) (undo-tree-id17121 . -5) (undo-tree-id17122 . -5) 3081) nil (26041 960 482034 559000) 0 nil])
([nil nil ((#("ffi::" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t)) . -3071) (undo-tree-id17004 . -5) (undo-tree-id17005 . -5) (undo-tree-id17006 . -3) (undo-tree-id17007 . -5) (undo-tree-id17008 . -5) (undo-tree-id17009 . -5) (undo-tree-id17010 . -5) (undo-tree-id17011 . -5) (undo-tree-id17012 . -5) (undo-tree-id17013 . -5) (undo-tree-id17014 . -5) (undo-tree-id17015 . -5) (undo-tree-id17016 . -5) (undo-tree-id17017 . -5) (undo-tree-id17018 . -5) (undo-tree-id17019 . -5) (undo-tree-id17020 . -5) (undo-tree-id17021 . -5) (undo-tree-id17022 . -5) (undo-tree-id17023 . -5) (undo-tree-id17024 . -5) (undo-tree-id17025 . -5) (undo-tree-id17026 . -5) (undo-tree-id17027 . -5) (undo-tree-id17028 . -5) (undo-tree-id17029 . -5) (undo-tree-id17030 . -5) (undo-tree-id17031 . -5) (undo-tree-id17032 . -5) (undo-tree-id17033 . -5) (undo-tree-id17034 . -5) (undo-tree-id17035 . -5) (undo-tree-id17036 . -5) (undo-tree-id17037 . -5) (undo-tree-id17038 . -5) (undo-tree-id17039 . -5) (undo-tree-id17040 . -5) (undo-tree-id17041 . -5) (undo-tree-id17042 . -5) (undo-tree-id17043 . -5) (undo-tree-id17044 . -5) (undo-tree-id17045 . -5) (undo-tree-id17046 . -5) (undo-tree-id17047 . -5) (undo-tree-id17048 . -5) (undo-tree-id17049 . -5) (undo-tree-id17050 . -5) (undo-tree-id17051 . -5) (undo-tree-id17052 . -5) (undo-tree-id17053 . -5) (undo-tree-id17054 . -5) (undo-tree-id17055 . -5) (undo-tree-id17056 . -5) (undo-tree-id17057 . -5) (undo-tree-id17058 . -5) (undo-tree-id17059 . -5) (undo-tree-id17060 . -5) (undo-tree-id17061 . -5) (undo-tree-id17062 . -5) (undo-tree-id17063 . -5) (undo-tree-id17064 . -5) 3076) nil (26041 960 481994 532000) 0 nil])
([nil nil ((#("const " 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t)) . -3065) (undo-tree-id16940 . -6) (undo-tree-id16941 . -6) (undo-tree-id16942 . -5) (undo-tree-id16943 . -6) (undo-tree-id16944 . -6) (undo-tree-id16945 . -6) (undo-tree-id16946 . -6) (undo-tree-id16947 . -6) (undo-tree-id16948 . -6) (undo-tree-id16949 . -6) (undo-tree-id16950 . -6) (undo-tree-id16951 . -6) (undo-tree-id16952 . -6) (undo-tree-id16953 . -6) (undo-tree-id16954 . -6) (undo-tree-id16955 . -6) (undo-tree-id16956 . -6) (undo-tree-id16957 . -6) (undo-tree-id16958 . -6) (undo-tree-id16959 . -6) (undo-tree-id16960 . -6) (undo-tree-id16961 . -6) (undo-tree-id16962 . -6) (undo-tree-id16963 . -6) (undo-tree-id16964 . -6) (undo-tree-id16965 . -6) (undo-tree-id16966 . -6) (undo-tree-id16967 . -6) (undo-tree-id16968 . -6) (undo-tree-id16969 . -6) (undo-tree-id16970 . -6) (undo-tree-id16971 . -6) (undo-tree-id16972 . -6) (undo-tree-id16973 . -6) (undo-tree-id16974 . -6) (undo-tree-id16975 . -6) (undo-tree-id16976 . -6) (undo-tree-id16977 . -6) (undo-tree-id16978 . -6) (undo-tree-id16979 . -6) (undo-tree-id16980 . -6) (undo-tree-id16981 . -6) (undo-tree-id16982 . -6) (undo-tree-id16983 . -6) (undo-tree-id16984 . -6) (undo-tree-id16985 . -6) (undo-tree-id16986 . -6) (undo-tree-id16987 . -6) (undo-tree-id16988 . -6) (undo-tree-id16989 . -6) (undo-tree-id16990 . -6) (undo-tree-id16991 . -6) (undo-tree-id16992 . -6) (undo-tree-id16993 . -6) (undo-tree-id16994 . -6) (undo-tree-id16995 . -6) (undo-tree-id16996 . -6) (undo-tree-id16997 . -6) (undo-tree-id16998 . -6) (undo-tree-id16999 . -6) (undo-tree-id17000 . -6) (undo-tree-id17001 . -6) (undo-tree-id17002 . -6) (undo-tree-id17003 . -6) 3071) nil (26041 960 481950 998000) 0 nil])
([nil nil ((#("as *" 0 2 (face font-lock-keyword-face fontified t) 2 4 (fontified t)) . -3061) (undo-tree-id16862 . -4) (undo-tree-id16863 . -4) (undo-tree-id16864 . -2) (undo-tree-id16865 . -4) (undo-tree-id16866 . -4) (undo-tree-id16867 . -4) (undo-tree-id16868 . -4) (undo-tree-id16869 . -4) (undo-tree-id16870 . -4) (undo-tree-id16871 . -4) (undo-tree-id16872 . -4) (undo-tree-id16873 . -4) (undo-tree-id16874 . -4) (undo-tree-id16875 . -4) (undo-tree-id16876 . -4) (undo-tree-id16877 . -4) (undo-tree-id16878 . -4) (undo-tree-id16879 . -4) (undo-tree-id16880 . -4) (undo-tree-id16881 . -4) (undo-tree-id16882 . -4) (undo-tree-id16883 . -4) (undo-tree-id16884 . -4) (undo-tree-id16885 . -4) (undo-tree-id16886 . -4) (undo-tree-id16887 . -4) (undo-tree-id16888 . -4) (undo-tree-id16889 . -4) (undo-tree-id16890 . -4) (undo-tree-id16891 . -4) (undo-tree-id16892 . -4) (undo-tree-id16893 . -4) (undo-tree-id16894 . -4) (undo-tree-id16895 . -4) (undo-tree-id16896 . -4) (undo-tree-id16897 . -4) (undo-tree-id16898 . -4) (undo-tree-id16899 . -4) (undo-tree-id16900 . -4) (undo-tree-id16901 . -4) (undo-tree-id16902 . -4) (undo-tree-id16903 . -4) (undo-tree-id16904 . -4) (undo-tree-id16905 . -4) (undo-tree-id16906 . -4) (undo-tree-id16907 . -4) (undo-tree-id16908 . -4) (undo-tree-id16909 . -4) (undo-tree-id16910 . -4) (undo-tree-id16911 . -4) (undo-tree-id16912 . -4) (undo-tree-id16913 . -4) (undo-tree-id16914 . -4) (undo-tree-id16915 . -4) (undo-tree-id16916 . -4) (undo-tree-id16917 . -4) (undo-tree-id16918 . -4) (undo-tree-id16919 . -4) (undo-tree-id16920 . -4) (undo-tree-id16921 . -4) (undo-tree-id16922 . -4) (undo-tree-id16923 . -4) (undo-tree-id16924 . -4) (undo-tree-id16925 . -4) (undo-tree-id16926 . -4) (undo-tree-id16927 . -4) (undo-tree-id16928 . -4) (undo-tree-id16929 . -4) (undo-tree-id16930 . -4) (undo-tree-id16931 . -4) (undo-tree-id16932 . -4) (undo-tree-id16933 . -4) (undo-tree-id16934 . -4) (undo-tree-id16935 . -4) (undo-tree-id16936 . -4) (undo-tree-id16937 . -4) (undo-tree-id16938 . -4) (undo-tree-id16939 . -4) 3065) nil (26041 960 481734 655000) 0 nil])
([nil nil ((#("ptr " 0 3 (fontified t) 3 4 (fontified t)) . -3057) (undo-tree-id16753 . -4) (undo-tree-id16754 . -4) (undo-tree-id16755 . -1) (undo-tree-id16756 . -1) (undo-tree-id16757 . -1) (undo-tree-id16758 . -1) (undo-tree-id16759 . -1) (undo-tree-id16760 . -1) (undo-tree-id16761 . -1) (undo-tree-id16762 . -1) (undo-tree-id16763 . -1) (undo-tree-id16764 . -1) (undo-tree-id16765 . -1) (undo-tree-id16766 . -1) (undo-tree-id16767 . -1) (undo-tree-id16768 . -1) (undo-tree-id16769 . -1) (undo-tree-id16770 . -1) (undo-tree-id16771 . 1) (undo-tree-id16772 . -3) (undo-tree-id16773 . -3) (undo-tree-id16774 . -3) (undo-tree-id16775 . -3) (undo-tree-id16776 . -3) (undo-tree-id16777 . -3) (undo-tree-id16778 . -3) (undo-tree-id16779 . -3) (undo-tree-id16780 . -3) (undo-tree-id16781 . -3) (undo-tree-id16782 . -3) (undo-tree-id16783 . -3) (undo-tree-id16784 . -4) (undo-tree-id16785 . -4) (undo-tree-id16786 . -4) (undo-tree-id16787 . -4) (undo-tree-id16788 . -4) (undo-tree-id16789 . -4) (undo-tree-id16790 . -4) (undo-tree-id16791 . -4) (undo-tree-id16792 . -4) (undo-tree-id16793 . -4) (undo-tree-id16794 . -4) (undo-tree-id16795 . -4) (undo-tree-id16796 . -4) (undo-tree-id16797 . -4) (undo-tree-id16798 . -4) (undo-tree-id16799 . -4) (undo-tree-id16800 . -4) (undo-tree-id16801 . -4) (undo-tree-id16802 . -4) (undo-tree-id16803 . -4) (undo-tree-id16804 . -4) (undo-tree-id16805 . -4) (undo-tree-id16806 . -4) (undo-tree-id16807 . -4) (undo-tree-id16808 . -4) (undo-tree-id16809 . -4) (undo-tree-id16810 . -4) (undo-tree-id16811 . -4) (undo-tree-id16812 . -4) (undo-tree-id16813 . -4) (undo-tree-id16814 . -4) (undo-tree-id16815 . -4) (undo-tree-id16816 . -4) (undo-tree-id16817 . -4) (undo-tree-id16818 . -4) (undo-tree-id16819 . -4) (undo-tree-id16820 . -4) (undo-tree-id16821 . -4) (undo-tree-id16822 . -4) (undo-tree-id16823 . -4) (undo-tree-id16824 . -4) (undo-tree-id16825 . -4) (undo-tree-id16826 . -4) (undo-tree-id16827 . -4) (undo-tree-id16828 . -4) (undo-tree-id16829 . -4) (undo-tree-id16830 . -4) (undo-tree-id16831 . -4) (undo-tree-id16832 . -4) (undo-tree-id16833 . -4) (undo-tree-id16834 . -4) (undo-tree-id16835 . -4) (undo-tree-id16836 . -4) (undo-tree-id16837 . -4) (undo-tree-id16838 . -4) (undo-tree-id16839 . -4) (undo-tree-id16840 . -4) (undo-tree-id16841 . -4) (undo-tree-id16842 . -4) (undo-tree-id16843 . -4) (undo-tree-id16844 . -4) (undo-tree-id16845 . -4) (undo-tree-id16846 . -4) (undo-tree-id16847 . -4) (undo-tree-id16848 . -4) (undo-tree-id16849 . -4) (undo-tree-id16850 . -4) (undo-tree-id16851 . -4) (undo-tree-id16852 . -4) (undo-tree-id16853 . -4) (undo-tree-id16854 . -4) (undo-tree-id16855 . -4) (undo-tree-id16856 . -4) (undo-tree-id16857 . -4) (undo-tree-id16858 . -4) (undo-tree-id16859 . -4) (undo-tree-id16860 . -4) (undo-tree-id16861 . -4) 3061) nil (26041 960 481678 975000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -2784) (undo-tree-id17832 . -1) (undo-tree-id17833 . -1) (undo-tree-id17834 . -1) (undo-tree-id17835 . -1) (undo-tree-id17836 . -1) (undo-tree-id17837 . -1) (undo-tree-id17838 . -1) (undo-tree-id17839 . -1) (undo-tree-id17840 . -1) (undo-tree-id17841 . -1) (undo-tree-id17842 . -1) (undo-tree-id17843 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -2785) (undo-tree-id17844 . -1) (undo-tree-id17845 . -1) (undo-tree-id17846 . -1) (undo-tree-id17847 . -1) (undo-tree-id17848 . -1) (undo-tree-id17849 . -1) (undo-tree-id17850 . -1) (undo-tree-id17851 . -1) (undo-tree-id17852 . -1) (undo-tree-id17853 . -1) 2786 (t 26041 960 507680 317000)) nil (26041 1304 668501 551000) 0 nil])
([nil nil ((#("t >" 0 1 (fontified t) 1 2 (fontified t) 2 3 (face (rainbow-delimiters-depth-3-face) fontified t)) . -2906) (undo-tree-id17822 . -3) (undo-tree-id17823 . -3) (undo-tree-id17824 . -3) (undo-tree-id17825 . -3) (undo-tree-id17826 . -3) (undo-tree-id17827 . -3) (undo-tree-id17828 . -3) (undo-tree-id17829 . -3) (undo-tree-id17830 . -3) (undo-tree-id17831 . -3) 2909) nil (26041 1304 668485 363000) 0 nil])
([nil nil ((#("handler_" 0 8 (fontified t)) . -2898) (undo-tree-id17810 . -8) (undo-tree-id17811 . -8) (undo-tree-id17812 . -8) (undo-tree-id17813 . -8) (undo-tree-id17814 . -8) (undo-tree-id17815 . -8) (undo-tree-id17816 . -8) (undo-tree-id17817 . -8) (undo-tree-id17818 . -8) (undo-tree-id17819 . -8) (undo-tree-id17820 . -8) (undo-tree-id17821 . -8) 2906) nil (26041 1304 668477 251000) 0 nil])
([nil nil ((#("data_" 0 5 (fontified t)) . -2893) (undo-tree-id17796 . -5) (undo-tree-id17797 . -5) (undo-tree-id17798 . -5) (undo-tree-id17799 . -5) (undo-tree-id17800 . -5) (undo-tree-id17801 . -5) (undo-tree-id17802 . -5) (undo-tree-id17803 . -5) (undo-tree-id17804 . -5) (undo-tree-id17805 . -5) (undo-tree-id17806 . -5) (undo-tree-id17807 . -5) (undo-tree-id17808 . -5) (undo-tree-id17809 . -5) 2898) nil (26041 1304 668468 393000) 0 nil])
([nil nil ((#("image_" 0 6 (fontified t)) . -2887) (undo-tree-id17780 . -6) (undo-tree-id17781 . -6) (undo-tree-id17782 . -6) (undo-tree-id17783 . -6) (undo-tree-id17784 . -6) (undo-tree-id17785 . -6) (undo-tree-id17786 . -6) (undo-tree-id17787 . -6) (undo-tree-id17788 . -6) (undo-tree-id17789 . -6) (undo-tree-id17790 . -6) (undo-tree-id17791 . -6) (undo-tree-id17792 . -6) (undo-tree-id17793 . -6) (undo-tree-id17794 . -6) (undo-tree-id17795 . -6) 2893) nil (26041 1304 668457 277000) 0 nil])
([nil nil ((#("zbar_" 0 5 (fontified t)) . -2882) (undo-tree-id17762 . -5) (undo-tree-id17763 . -5) (undo-tree-id17764 . -5) (undo-tree-id17765 . -5) (undo-tree-id17766 . -5) (undo-tree-id17767 . -5) (undo-tree-id17768 . -5) (undo-tree-id17769 . -5) (undo-tree-id17770 . -5) (undo-tree-id17771 . -5) (undo-tree-id17772 . -5) (undo-tree-id17773 . -5) (undo-tree-id17774 . -5) (undo-tree-id17775 . -5) (undo-tree-id17776 . -5) (undo-tree-id17777 . -5) (undo-tree-id17778 . -5) (undo-tree-id17779 . -5) 2887) nil (26041 1304 668445 312000) 0 nil])
([nil nil ((#("ffi::" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t)) . -2877) (undo-tree-id17742 . -5) (undo-tree-id17743 . -5) (undo-tree-id17744 . -5) (undo-tree-id17745 . -5) (undo-tree-id17746 . -5) (undo-tree-id17747 . -5) (undo-tree-id17748 . -5) (undo-tree-id17749 . -5) (undo-tree-id17750 . -5) (undo-tree-id17751 . -5) (undo-tree-id17752 . -5) (undo-tree-id17753 . -5) (undo-tree-id17754 . -5) (undo-tree-id17755 . -5) (undo-tree-id17756 . -5) (undo-tree-id17757 . -5) (undo-tree-id17758 . -5) (undo-tree-id17759 . -5) (undo-tree-id17760 . -5) (undo-tree-id17761 . -5) 2882) nil (26041 1304 668431 909000) 0 nil])
([nil nil ((#("const " 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t)) . -2871) (undo-tree-id17720 . -6) (undo-tree-id17721 . -6) (undo-tree-id17722 . -6) (undo-tree-id17723 . -6) (undo-tree-id17724 . -6) (undo-tree-id17725 . -6) (undo-tree-id17726 . -6) (undo-tree-id17727 . -6) (undo-tree-id17728 . -6) (undo-tree-id17729 . -6) (undo-tree-id17730 . -6) (undo-tree-id17731 . -6) (undo-tree-id17732 . -6) (undo-tree-id17733 . -6) (undo-tree-id17734 . -6) (undo-tree-id17735 . -6) (undo-tree-id17736 . -6) (undo-tree-id17737 . -6) (undo-tree-id17738 . -6) (undo-tree-id17739 . -6) (undo-tree-id17740 . -6) (undo-tree-id17741 . -6) 2877) nil (26041 1304 668237 611000) 0 nil])
([nil nil ((#("void), *" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t) 5 8 (fontified t)) . -2863) (undo-tree-id17696 . -8) (undo-tree-id17697 . -8) (undo-tree-id17698 . -8) (undo-tree-id17699 . -8) (undo-tree-id17700 . -8) (undo-tree-id17701 . -8) (undo-tree-id17702 . -8) (undo-tree-id17703 . -8) (undo-tree-id17704 . -8) (undo-tree-id17705 . -8) (undo-tree-id17706 . -8) (undo-tree-id17707 . -8) (undo-tree-id17708 . -8) (undo-tree-id17709 . -8) (undo-tree-id17710 . -8) (undo-tree-id17711 . -8) (undo-tree-id17712 . -8) (undo-tree-id17713 . -8) (undo-tree-id17714 . -8) (undo-tree-id17715 . -8) (undo-tree-id17716 . -8) (undo-tree-id17717 . -8) (undo-tree-id17718 . -8) (undo-tree-id17719 . -8) 2871) nil (26041 1304 668220 732000) 0 nil])
([nil nil ((#("c_" 0 2 (fontified t)) . -2861) (undo-tree-id17670 . -2) (undo-tree-id17671 . -2) (undo-tree-id17672 . -2) (undo-tree-id17673 . -2) (undo-tree-id17674 . -2) (undo-tree-id17675 . -2) (undo-tree-id17676 . -2) (undo-tree-id17677 . -2) (undo-tree-id17678 . -2) (undo-tree-id17679 . -2) (undo-tree-id17680 . -2) (undo-tree-id17681 . -2) (undo-tree-id17682 . -2) (undo-tree-id17683 . -2) (undo-tree-id17684 . -2) (undo-tree-id17685 . -2) (undo-tree-id17686 . -2) (undo-tree-id17687 . -2) (undo-tree-id17688 . -2) (undo-tree-id17689 . -2) (undo-tree-id17690 . -2) (undo-tree-id17691 . -2) (undo-tree-id17692 . -2) (undo-tree-id17693 . -2) (undo-tree-id17694 . -2) (undo-tree-id17695 . -2) 2863) nil (26041 1304 667750 572000) 0 nil])
([nil nil ((#("const " 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t)) . -2855) (undo-tree-id17642 . -6) (undo-tree-id17643 . -6) (undo-tree-id17644 . -6) (undo-tree-id17645 . -6) (undo-tree-id17646 . -6) (undo-tree-id17647 . -6) (undo-tree-id17648 . -6) (undo-tree-id17649 . -6) (undo-tree-id17650 . -6) (undo-tree-id17651 . -6) (undo-tree-id17652 . -6) (undo-tree-id17653 . -6) (undo-tree-id17654 . -6) (undo-tree-id17655 . -6) (undo-tree-id17656 . -6) (undo-tree-id17657 . -6) (undo-tree-id17658 . -6) (undo-tree-id17659 . -6) (undo-tree-id17660 . -6) (undo-tree-id17661 . -6) (undo-tree-id17662 . -6) (undo-tree-id17663 . -6) (undo-tree-id17664 . -6) (undo-tree-id17665 . -6) (undo-tree-id17666 . -6) (undo-tree-id17667 . -6) (undo-tree-id17668 . -6) (undo-tree-id17669 . -6) 2861) nil (26041 1304 667731 701000) 0 nil])
([nil nil ((#("t, *" 0 4 (fontified t)) . -2851) (undo-tree-id17612 . -4) (undo-tree-id17613 . -4) (undo-tree-id17614 . -4) (undo-tree-id17615 . -4) (undo-tree-id17616 . -4) (undo-tree-id17617 . -4) (undo-tree-id17618 . -4) (undo-tree-id17619 . -4) (undo-tree-id17620 . -4) (undo-tree-id17621 . -4) (undo-tree-id17622 . -4) (undo-tree-id17623 . -4) (undo-tree-id17624 . -4) (undo-tree-id17625 . -4) (undo-tree-id17626 . -4) (undo-tree-id17627 . -4) (undo-tree-id17628 . -4) (undo-tree-id17629 . -4) (undo-tree-id17630 . -4) (undo-tree-id17631 . -4) (undo-tree-id17632 . -4) (undo-tree-id17633 . -4) (undo-tree-id17634 . -4) (undo-tree-id17635 . -4) (undo-tree-id17636 . -4) (undo-tree-id17637 . -4) (undo-tree-id17638 . -4) (undo-tree-id17639 . -4) (undo-tree-id17640 . -4) (undo-tree-id17641 . -4) 2855) nil (26041 1304 667711 40000) 0 nil])
([nil nil ((#("image_" 0 6 (fontified t)) . -2845) (undo-tree-id17577 . -6) (undo-tree-id17578 . -6) (undo-tree-id17579 . -6) (undo-tree-id17580 . -6) (undo-tree-id17581 . -6) (undo-tree-id17582 . -6) (undo-tree-id17583 . -6) (undo-tree-id17584 . -6) (undo-tree-id17585 . -6) (undo-tree-id17586 . -6) (undo-tree-id17587 . -6) (undo-tree-id17588 . -6) (undo-tree-id17589 . -6) (undo-tree-id17590 . -6) (undo-tree-id17591 . -6) (undo-tree-id17592 . -6) (undo-tree-id17593 . -6) (undo-tree-id17594 . -6) (undo-tree-id17595 . -6) (undo-tree-id17596 . -6) (undo-tree-id17597 . -6) (undo-tree-id17598 . -6) (undo-tree-id17599 . -6) (undo-tree-id17600 . -6) (undo-tree-id17601 . -6) (undo-tree-id17602 . -6) (undo-tree-id17603 . -6) (undo-tree-id17604 . -6) (undo-tree-id17605 . -6) (undo-tree-id17606 . -6) (undo-tree-id17607 . -6) (undo-tree-id17608 . -6) (undo-tree-id17609 . -6) (undo-tree-id17610 . -6) (undo-tree-id17611 . -6) 2851) nil (26041 1304 667634 891000) 0 nil])
([nil nil ((#("zbar_" 0 5 (fontified t)) . -2840) (undo-tree-id17540 . -5) (undo-tree-id17541 . -5) (undo-tree-id17542 . -5) (undo-tree-id17543 . -5) (undo-tree-id17544 . -5) (undo-tree-id17545 . -5) (undo-tree-id17546 . -5) (undo-tree-id17547 . -5) (undo-tree-id17548 . -5) (undo-tree-id17549 . -5) (undo-tree-id17550 . -5) (undo-tree-id17551 . -5) (undo-tree-id17552 . -5) (undo-tree-id17553 . -5) (undo-tree-id17554 . -5) (undo-tree-id17555 . -5) (undo-tree-id17556 . -5) (undo-tree-id17557 . -5) (undo-tree-id17558 . -5) (undo-tree-id17559 . -5) (undo-tree-id17560 . -5) (undo-tree-id17561 . -5) (undo-tree-id17562 . -5) (undo-tree-id17563 . -5) (undo-tree-id17564 . -5) (undo-tree-id17565 . -5) (undo-tree-id17566 . -5) (undo-tree-id17567 . -5) (undo-tree-id17568 . -5) (undo-tree-id17569 . -5) (undo-tree-id17570 . -5) (undo-tree-id17571 . -5) (undo-tree-id17572 . -5) (undo-tree-id17573 . -5) (undo-tree-id17574 . -5) (undo-tree-id17575 . -5) (undo-tree-id17576 . -5) 2845) nil (26041 1304 667610 576000) 0 nil])
([nil nil ((#("ffi::" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t)) . -2835) (undo-tree-id17501 . -5) (undo-tree-id17502 . -5) (undo-tree-id17503 . -5) (undo-tree-id17504 . -5) (undo-tree-id17505 . -5) (undo-tree-id17506 . -5) (undo-tree-id17507 . -5) (undo-tree-id17508 . -5) (undo-tree-id17509 . -5) (undo-tree-id17510 . -5) (undo-tree-id17511 . -5) (undo-tree-id17512 . -5) (undo-tree-id17513 . -5) (undo-tree-id17514 . -5) (undo-tree-id17515 . -5) (undo-tree-id17516 . -5) (undo-tree-id17517 . -5) (undo-tree-id17518 . -5) (undo-tree-id17519 . -5) (undo-tree-id17520 . -5) (undo-tree-id17521 . -5) (undo-tree-id17522 . -5) (undo-tree-id17523 . -5) (undo-tree-id17524 . -5) (undo-tree-id17525 . -5) (undo-tree-id17526 . -5) (undo-tree-id17527 . -5) (undo-tree-id17528 . -5) (undo-tree-id17529 . -5) (undo-tree-id17530 . -5) (undo-tree-id17531 . -5) (undo-tree-id17532 . -5) (undo-tree-id17533 . -5) (undo-tree-id17534 . -5) (undo-tree-id17535 . -5) (undo-tree-id17536 . -5) (undo-tree-id17537 . -5) (undo-tree-id17538 . -5) (undo-tree-id17539 . -5) 2840) nil (26041 1304 667558 544000) 0 nil])
([nil nil ((#("mut " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -2831) (undo-tree-id17460 . -4) (undo-tree-id17461 . -4) (undo-tree-id17462 . -4) (undo-tree-id17463 . -4) (undo-tree-id17464 . -4) (undo-tree-id17465 . -4) (undo-tree-id17466 . -4) (undo-tree-id17467 . -4) (undo-tree-id17468 . -4) (undo-tree-id17469 . -4) (undo-tree-id17470 . -4) (undo-tree-id17471 . -4) (undo-tree-id17472 . -4) (undo-tree-id17473 . -4) (undo-tree-id17474 . -4) (undo-tree-id17475 . -4) (undo-tree-id17476 . -4) (undo-tree-id17477 . -4) (undo-tree-id17478 . -4) (undo-tree-id17479 . -4) (undo-tree-id17480 . -4) (undo-tree-id17481 . -4) (undo-tree-id17482 . -4) (undo-tree-id17483 . -4) (undo-tree-id17484 . -4) (undo-tree-id17485 . -4) (undo-tree-id17486 . -4) (undo-tree-id17487 . -4) (undo-tree-id17488 . -4) (undo-tree-id17489 . -4) (undo-tree-id17490 . -4) (undo-tree-id17491 . -4) (undo-tree-id17492 . -4) (undo-tree-id17493 . -4) (undo-tree-id17494 . -4) (undo-tree-id17495 . -4) (undo-tree-id17496 . -4) (undo-tree-id17497 . -4) (undo-tree-id17498 . -4) (undo-tree-id17499 . -4) (undo-tree-id17500 . -4) 2835) nil (26041 1304 667531 472000) 0 nil])
([nil nil ((#("fn(*" 0 2 (face font-lock-keyword-face fontified t) 2 3 (face (rainbow-delimiters-depth-4-face) fontified t) 3 4 (fontified t)) . -2827) (undo-tree-id17417 . -4) (undo-tree-id17418 . -4) (undo-tree-id17419 . -4) (undo-tree-id17420 . -4) (undo-tree-id17421 . -4) (undo-tree-id17422 . -4) (undo-tree-id17423 . -4) (undo-tree-id17424 . -4) (undo-tree-id17425 . -4) (undo-tree-id17426 . -4) (undo-tree-id17427 . -4) (undo-tree-id17428 . -4) (undo-tree-id17429 . -4) (undo-tree-id17430 . -4) (undo-tree-id17431 . -4) (undo-tree-id17432 . -4) (undo-tree-id17433 . -4) (undo-tree-id17434 . -4) (undo-tree-id17435 . -4) (undo-tree-id17436 . -4) (undo-tree-id17437 . -4) (undo-tree-id17438 . -4) (undo-tree-id17439 . -4) (undo-tree-id17440 . -4) (undo-tree-id17441 . -4) (undo-tree-id17442 . -4) (undo-tree-id17443 . -4) (undo-tree-id17444 . -4) (undo-tree-id17445 . -4) (undo-tree-id17446 . -4) (undo-tree-id17447 . -4) (undo-tree-id17448 . -4) (undo-tree-id17449 . -4) (undo-tree-id17450 . -4) (undo-tree-id17451 . -4) (undo-tree-id17452 . -4) (undo-tree-id17453 . -4) (undo-tree-id17454 . -4) (undo-tree-id17455 . -4) (undo-tree-id17456 . -4) (undo-tree-id17457 . -4) (undo-tree-id17458 . -4) (undo-tree-id17459 . -4) 2831) nil (26041 1304 667500 279000) 0 nil])
([nil nil ((#("unsafe " 0 6 (face rust-unsafe fontified t) 6 7 (fontified t)) . -2820) (undo-tree-id17372 . -7) (undo-tree-id17373 . -7) (undo-tree-id17374 . -7) (undo-tree-id17375 . -7) (undo-tree-id17376 . -7) (undo-tree-id17377 . -7) (undo-tree-id17378 . -7) (undo-tree-id17379 . -7) (undo-tree-id17380 . -7) (undo-tree-id17381 . -7) (undo-tree-id17382 . -7) (undo-tree-id17383 . -7) (undo-tree-id17384 . -7) (undo-tree-id17385 . -7) (undo-tree-id17386 . -7) (undo-tree-id17387 . -7) (undo-tree-id17388 . -7) (undo-tree-id17389 . -7) (undo-tree-id17390 . -7) (undo-tree-id17391 . -7) (undo-tree-id17392 . -7) (undo-tree-id17393 . -7) (undo-tree-id17394 . -7) (undo-tree-id17395 . -7) (undo-tree-id17396 . -7) (undo-tree-id17397 . -7) (undo-tree-id17398 . -7) (undo-tree-id17399 . -7) (undo-tree-id17400 . -7) (undo-tree-id17401 . -7) (undo-tree-id17402 . -7) (undo-tree-id17403 . -7) (undo-tree-id17404 . -7) (undo-tree-id17405 . -7) (undo-tree-id17406 . -7) (undo-tree-id17407 . -7) (undo-tree-id17408 . -7) (undo-tree-id17409 . -7) (undo-tree-id17410 . -7) (undo-tree-id17411 . -7) (undo-tree-id17412 . -7) (undo-tree-id17413 . -7) (undo-tree-id17414 . -7) (undo-tree-id17415 . -7) (undo-tree-id17416 . -7) 2827) nil (26041 1304 668891 615000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -2817) (undo-tree-id17880 . -1) (undo-tree-id17881 . -1) (undo-tree-id17882 . -1) (undo-tree-id17883 . -1) (undo-tree-id17884 . -1) (undo-tree-id17885 . -1) (undo-tree-id17886 . -1) (undo-tree-id17887 . -1) (undo-tree-id17888 . -1) (undo-tree-id17889 . -1) (undo-tree-id17890 . -1) (undo-tree-id17891 . -1) (undo-tree-id17892 . -1) (undo-tree-id17893 . -1) (undo-tree-id17894 . -1) (undo-tree-id17895 . -1) (undo-tree-id17896 . -1) (undo-tree-id17897 . -1) (undo-tree-id17898 . -1) (undo-tree-id17899 . -1) (undo-tree-id17900 . -1) (undo-tree-id17901 . -1) (undo-tree-id17902 . -1) (undo-tree-id17903 . -1) (undo-tree-id17904 . -1) (undo-tree-id17905 . -1) (undo-tree-id17906 . -1) (undo-tree-id17907 . -1) (undo-tree-id17908 . -1) (undo-tree-id17909 . -1) (undo-tree-id17910 . -1) (undo-tree-id17911 . -1) (undo-tree-id17912 . -1) (undo-tree-id17913 . -1) (undo-tree-id17914 . -1) (undo-tree-id17915 . -1) (undo-tree-id17916 . -1) (undo-tree-id17917 . -1) (undo-tree-id17918 . -1) (undo-tree-id17919 . -1) (undo-tree-id17920 . -1) (undo-tree-id17921 . -1) (undo-tree-id17922 . -1) (undo-tree-id17923 . -1) (undo-tree-id17924 . -1) (undo-tree-id17925 . -1) (undo-tree-id17926 . -1) (undo-tree-id17927 . -1) (undo-tree-id17928 . -1) (undo-tree-id17929 . -1) (undo-tree-id17930 . -1) (undo-tree-id17931 . -1) (undo-tree-id17932 . -1) (#(":" 0 1 (fontified t)) . -2818) (undo-tree-id17933 . -1) (undo-tree-id17934 . -1) (undo-tree-id17935 . -1) (undo-tree-id17936 . -1) (undo-tree-id17937 . -1) (undo-tree-id17938 . -1) (undo-tree-id17939 . -1) (undo-tree-id17940 . -1) (undo-tree-id17941 . -1) (undo-tree-id17942 . -1) (undo-tree-id17943 . -1) (undo-tree-id17944 . -1) (undo-tree-id17945 . -1) (undo-tree-id17946 . -1) (undo-tree-id17947 . -1) (undo-tree-id17948 . -1) (undo-tree-id17949 . -1) (undo-tree-id17950 . -1) (undo-tree-id17951 . -1) (undo-tree-id17952 . -1) (undo-tree-id17953 . -1) (undo-tree-id17954 . -1) (undo-tree-id17955 . -1) (undo-tree-id17956 . -1) (undo-tree-id17957 . -1) (undo-tree-id17958 . -1) (undo-tree-id17959 . -1) (undo-tree-id17960 . -1) (undo-tree-id17961 . -1) (undo-tree-id17962 . -1) (undo-tree-id17963 . -1) (undo-tree-id17964 . -1) (undo-tree-id17965 . -1) (undo-tree-id17966 . -1) (undo-tree-id17967 . -1) (undo-tree-id17968 . -1) (undo-tree-id17969 . -1) (undo-tree-id17970 . -1) (undo-tree-id17971 . -1) (undo-tree-id17972 . -1) (undo-tree-id17973 . -1) (undo-tree-id17974 . -1) (undo-tree-id17975 . -1) (undo-tree-id17976 . -1) (undo-tree-id17977 . -1) (undo-tree-id17978 . -1) (undo-tree-id17979 . -1) (undo-tree-id17980 . -1) (undo-tree-id17981 . -1) (undo-tree-id17982 . -1) (undo-tree-id17983 . -1) (#("<" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -2819) (undo-tree-id17984 . -1) (undo-tree-id17985 . -1) (undo-tree-id17986 . -1) (undo-tree-id17987 . -1) (undo-tree-id17988 . -1) (undo-tree-id17989 . -1) (undo-tree-id17990 . -1) (undo-tree-id17991 . -1) (undo-tree-id17992 . -1) (undo-tree-id17993 . -1) (undo-tree-id17994 . -1) (undo-tree-id17995 . -1) (undo-tree-id17996 . -1) (undo-tree-id17997 . -1) (undo-tree-id17998 . -1) (undo-tree-id17999 . -1) (undo-tree-id18000 . -1) (undo-tree-id18001 . -1) (undo-tree-id18002 . -1) (undo-tree-id18003 . -1) (undo-tree-id18004 . -1) (undo-tree-id18005 . -1) (undo-tree-id18006 . -1) (undo-tree-id18007 . -1) (undo-tree-id18008 . -1) (undo-tree-id18009 . -1) (undo-tree-id18010 . -1) (undo-tree-id18011 . -1) (undo-tree-id18012 . -1) (undo-tree-id18013 . -1) (undo-tree-id18014 . -1) (undo-tree-id18015 . -1) (undo-tree-id18016 . -1) (undo-tree-id18017 . -1) (undo-tree-id18018 . -1) (undo-tree-id18019 . -1) (undo-tree-id18020 . -1) (undo-tree-id18021 . -1) (undo-tree-id18022 . -1) (undo-tree-id18023 . -1) (undo-tree-id18024 . -1) (undo-tree-id18025 . -1) (undo-tree-id18026 . -1) (undo-tree-id18027 . -1) (undo-tree-id18028 . -1) (undo-tree-id18029 . -1) (undo-tree-id18030 . -1) (undo-tree-id18031 . -1) (undo-tree-id18032 . -1) 2820) nil (26041 1323 382520 246000) 0 nil] [nil nil ((#("transmute::<" 0 9 (fontified t) 9 11 (fontified t) 11 12 (face (rainbow-delimiters-depth-3-face) fontified t)) . -2808) (undo-tree-id17325 . -12) (undo-tree-id17326 . -12) (undo-tree-id17327 . -12) (undo-tree-id17328 . -12) (undo-tree-id17329 . -12) (undo-tree-id17330 . -12) (undo-tree-id17331 . -12) (undo-tree-id17332 . -12) (undo-tree-id17333 . -12) (undo-tree-id17334 . -12) (undo-tree-id17335 . -12) (undo-tree-id17336 . -12) (undo-tree-id17337 . -12) (undo-tree-id17338 . -12) (undo-tree-id17339 . -12) (undo-tree-id17340 . -12) (undo-tree-id17341 . -12) (undo-tree-id17342 . -12) (undo-tree-id17343 . -12) (undo-tree-id17344 . -12) (undo-tree-id17345 . -12) (undo-tree-id17346 . -12) (undo-tree-id17347 . -12) (undo-tree-id17348 . -12) (undo-tree-id17349 . -12) (undo-tree-id17350 . -12) (undo-tree-id17351 . -12) (undo-tree-id17352 . -12) (undo-tree-id17353 . -12) (undo-tree-id17354 . -12) (undo-tree-id17355 . -12) (undo-tree-id17356 . -12) (undo-tree-id17357 . -12) (undo-tree-id17358 . -12) (undo-tree-id17359 . -12) (undo-tree-id17360 . -12) (undo-tree-id17361 . -12) (undo-tree-id17362 . -12) (undo-tree-id17363 . -12) (undo-tree-id17364 . -12) (undo-tree-id17365 . -12) (undo-tree-id17366 . -12) (undo-tree-id17367 . -12) (undo-tree-id17368 . -12) (undo-tree-id17369 . -12) (undo-tree-id17370 . -12) (undo-tree-id17371 . -12) 2820) ((2808 . 2820)) (26041 1304 667379 299000) 0 nil])
([nil nil ((2795 . 2797)) nil (26041 1323 382040 967000) 0 nil])
nil
([nil nil ((2797 . 2803)) nil (26041 1323 382040 383000) 0 nil])
([nil nil ((#("Z" 0 1 (face font-lock-type-face fontified t)) . -2802) (undo-tree-id17874 . -1) (undo-tree-id17875 . -1) (undo-tree-id17876 . -1) (undo-tree-id17877 . -1) (undo-tree-id17878 . -1) (undo-tree-id17879 . -1) 2803) nil (26041 1323 382039 490000) 0 nil])
([nil nil ((2802 . 2803)) nil (26041 1323 382034 726000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -2802) (undo-tree-id17869 . -1) (undo-tree-id17870 . -1) (undo-tree-id17871 . -1) (undo-tree-id17872 . -1) (undo-tree-id17873 . -1) 2803) nil (26041 1323 382033 786000) 0 nil])
([nil nil ((2802 . 2803)) nil (26041 1323 382029 209000) 0 nil])
([nil nil ((#("z" 0 1 (fontified t)) . -2802) (undo-tree-id17865 . -1) (undo-tree-id17866 . -1) (undo-tree-id17867 . -1) (undo-tree-id17868 . -1) 2803) nil (26041 1323 382028 49000) 0 nil])
([nil nil ((2802 . 2806)) nil (26041 1323 382023 283000) 0 nil])
([nil nil ((2802 . 2827) (#("data" 0 4 (fontified nil)) . 2802) (2802 . 2806) (#("zbar_image_data_handler_t" 0 25 (fontified nil)) . -2802) (2802 . 2827) (#("data" 0 4 (fontified t)) . -2802) (undo-tree-id17854 . -4) (undo-tree-id17855 . -1) (undo-tree-id17856 . -1) (undo-tree-id17857 . -2) (undo-tree-id17858 . -2) (undo-tree-id17859 . -3) (undo-tree-id17860 . -3) (undo-tree-id17861 . -4) (undo-tree-id17862 . -4) (undo-tree-id17863 . -4) (undo-tree-id17864 . -4) 2806) nil (26041 1323 382018 981000) 0 nil])
([nil nil ((2995 . 2996) (t 26041 1323 447702 546000)) nil (26041 1327 188921 138000) 0 nil])
([nil nil ((2995 . 3002) (#("h" 0 1 (fontified nil)) . 2995) (2995 . 2996) (#("handler" 0 7 (fontified nil)) . -2995) (2995 . 3002) (#("h" 0 1 (fontified t)) . -2995) (undo-tree-id18033 . -1) (undo-tree-id18034 . -1) (undo-tree-id18035 . -1) (undo-tree-id18036 . -1) (undo-tree-id18037 . -1) (undo-tree-id18038 . -1) 2996) nil (26041 1327 188916 614000) 0 nil])
([nil nil ((2797 . 2804) (t 26041 1327 247702 780000)) nil (26041 1338 707547 299000) 0 nil])
([nil nil ((#("const " 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t)) . -2798) (undo-tree-id18039 . -6) (undo-tree-id18040 . -6) (undo-tree-id18041 . -6) (undo-tree-id18042 . -6) (undo-tree-id18043 . -6) (undo-tree-id18044 . -6) (undo-tree-id18045 . -6) (undo-tree-id18046 . -6) (undo-tree-id18047 . -6) (undo-tree-id18048 . -6) (undo-tree-id18049 . -6) (undo-tree-id18050 . -6) (undo-tree-id18051 . -6) (undo-tree-id18052 . -6) (undo-tree-id18053 . -6) (undo-tree-id18054 . -6) (undo-tree-id18055 . -6) (undo-tree-id18056 . -6) (undo-tree-id18057 . -6) 2804 (t 26041 1338 734370 152000)) nil (26041 1342 506193 541000) 0 nil])
([nil nil ((2798 . 2803) (t 26041 1342 564370 387000)) nil (26041 1345 162238 302000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2798) (undo-tree-id18058 . -1) (undo-tree-id18059 . -1) (undo-tree-id18060 . -1) (undo-tree-id18061 . -1) (undo-tree-id18062 . -1) (undo-tree-id18063 . -1) (undo-tree-id18064 . -1) (undo-tree-id18065 . -1) 2799 (t 26041 1345 221037 216000)) nil (26041 1347 628895 838000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -2798) (undo-tree-id18066 . -1) (undo-tree-id18067 . -1) (undo-tree-id18068 . -1) (undo-tree-id18069 . -1) (undo-tree-id18070 . -1) (undo-tree-id18071 . -1) (#("u" 0 1 (fontified t)) . -2799) (undo-tree-id18072 . -1) (undo-tree-id18073 . -1) (undo-tree-id18074 . -1) (undo-tree-id18075 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -2800) (undo-tree-id18076 . -1) (undo-tree-id18077 . -1) 2801 (t 26041 1347 687704 35000)) nil (26041 1354 943578 91000) 0 nil])
([nil nil ((2798 . 2803)) nil (26041 1354 943558 902000) 0 nil])
([nil nil ((3009 . 3010) (t 26041 1354 971037 815000)) nil (26041 1366 671497 231000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -3009) (undo-tree-id18078 . -1) (undo-tree-id18079 . -1) (undo-tree-id18080 . -1) (undo-tree-id18081 . -1) (undo-tree-id18082 . -1) 3010) nil (26041 1366 671494 798000) 0 nil])
([nil nil ((3002 . 3003)) nil (26041 1366 671480 754000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . -3002) (undo-tree-id18083 . -1) (undo-tree-id18084 . -1) (undo-tree-id18085 . -1) (undo-tree-id18086 . -1) (undo-tree-id18087 . -1) (undo-tree-id18088 . -1) (undo-tree-id18089 . -1) (undo-tree-id18090 . -1) (undo-tree-id18091 . -1) (undo-tree-id18092 . -1) (undo-tree-id18093 . -1) (undo-tree-id18094 . -1) (undo-tree-id18095 . -1) (undo-tree-id18096 . -1) (undo-tree-id18097 . -1) (undo-tree-id18098 . -1) (undo-tree-id18099 . -1) (undo-tree-id18100 . -1) 3003 (t 26041 1366 697705 201000)) nil (26041 1371 637403 70000) 0 nil])
([nil nil ((#("const " 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t)) . -2798) (undo-tree-id18117 . -6) (undo-tree-id18118 . -6) (undo-tree-id18119 . -6) (undo-tree-id18120 . -6) (undo-tree-id18121 . -6) (undo-tree-id18122 . -6) (undo-tree-id18123 . -6) (undo-tree-id18124 . -6) (undo-tree-id18125 . -6) (undo-tree-id18126 . -6) (undo-tree-id18127 . -6) (undo-tree-id18128 . -6) (undo-tree-id18129 . -6) (undo-tree-id18130 . -6) 2804 (t 26041 1371 664372 172000)) nil (26041 1450 922990 671000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . -2797) (undo-tree-id18101 . -1) (undo-tree-id18102 . -1) (undo-tree-id18103 . -1) (undo-tree-id18104 . -1) (undo-tree-id18105 . -1) (undo-tree-id18106 . -1) (undo-tree-id18107 . -1) (undo-tree-id18108 . -1) (undo-tree-id18109 . -1) (undo-tree-id18110 . -1) (undo-tree-id18111 . -1) (undo-tree-id18112 . -1) (undo-tree-id18113 . -1) (undo-tree-id18114 . -1) (undo-tree-id18115 . -1) (undo-tree-id18116 . -1) 2798) nil (26041 1450 922976 574000) 0 nil])
([nil nil ((2860 . 2861) (t 26041 1450 981043 703000)) nil (26041 1471 484191 136000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2860) (undo-tree-id18131 . -1) (undo-tree-id18132 . -1) (undo-tree-id18133 . -1) (undo-tree-id18134 . -1) (undo-tree-id18135 . -1) (undo-tree-id18136 . -1) (undo-tree-id18137 . -1) (undo-tree-id18138 . -1) (undo-tree-id18139 . -1) 2861) nil (26041 1471 484187 325000) 0 nil])
([nil nil ((2860 . 2863) (t 26041 1471 541044 966000)) nil (26041 1477 899664 216000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -2861) (undo-tree-id18238 . -1) (undo-tree-id18239 . -1) (undo-tree-id18240 . -1) (undo-tree-id18241 . -1) (undo-tree-id18242 . -1) (undo-tree-id18243 . -1) (undo-tree-id18244 . -1) (undo-tree-id18245 . -1) (undo-tree-id18246 . -1) (undo-tree-id18247 . -1) (undo-tree-id18248 . -1) (undo-tree-id18249 . -1) (undo-tree-id18250 . -1) (undo-tree-id18251 . -1) (undo-tree-id18252 . -1) (undo-tree-id18253 . -1) (#("p" 0 1 (fontified t)) . -2862) (undo-tree-id18254 . -1) (undo-tree-id18255 . -1) (undo-tree-id18256 . -1) (undo-tree-id18257 . -1) (undo-tree-id18258 . -1) (undo-tree-id18259 . -1) (undo-tree-id18260 . -1) (undo-tree-id18261 . -1) (undo-tree-id18262 . -1) 2863) nil (26041 1477 899662 421000) 0 nil])
([nil nil ((2861 . 2864)) nil (26041 1477 899644 905000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -2862) (undo-tree-id18225 . -1) (undo-tree-id18226 . -1) (undo-tree-id18227 . -1) (undo-tree-id18228 . -1) (undo-tree-id18229 . -1) (undo-tree-id18230 . -1) (undo-tree-id18231 . -1) (undo-tree-id18232 . -1) (undo-tree-id18233 . -1) (#("t" 0 1 (fontified t)) . -2863) (undo-tree-id18234 . -1) (undo-tree-id18235 . -1) (undo-tree-id18236 . -1) (undo-tree-id18237 . -1) 2864) nil (26041 1477 899643 314000) 0 nil])
([nil nil ((2862 . 2864)) nil (26041 1477 899632 708000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2860) (undo-tree-id18140 . -1) (undo-tree-id18141 . -1) (undo-tree-id18142 . -1) (undo-tree-id18143 . -1) (undo-tree-id18144 . -1) (undo-tree-id18145 . -1) (undo-tree-id18146 . -1) (undo-tree-id18147 . -1) (undo-tree-id18148 . -1) (undo-tree-id18149 . -1) (undo-tree-id18150 . -1) (undo-tree-id18151 . -1) (undo-tree-id18152 . -1) (undo-tree-id18153 . -1) (undo-tree-id18154 . -1) (undo-tree-id18155 . -1) (undo-tree-id18156 . -1) (undo-tree-id18157 . -1) (undo-tree-id18158 . -1) (undo-tree-id18159 . -1) (undo-tree-id18160 . -1) (undo-tree-id18161 . -1) (undo-tree-id18162 . -1) (undo-tree-id18163 . -1) (undo-tree-id18164 . -1) (undo-tree-id18165 . -1) (undo-tree-id18166 . -1) (undo-tree-id18167 . -1) (undo-tree-id18168 . -1) (undo-tree-id18169 . -1) (undo-tree-id18170 . -1) (undo-tree-id18171 . -1) (undo-tree-id18172 . -1) (undo-tree-id18173 . -1) (undo-tree-id18174 . -1) (undo-tree-id18175 . -1) (undo-tree-id18176 . -1) (undo-tree-id18177 . -1) (undo-tree-id18178 . -1) (undo-tree-id18179 . -1) (undo-tree-id18180 . -1) (undo-tree-id18181 . -1) (undo-tree-id18182 . -1) (undo-tree-id18183 . -1) (undo-tree-id18184 . -1) (undo-tree-id18185 . -1) (undo-tree-id18186 . -1) (#("p" 0 1 (fontified t)) . -2861) (undo-tree-id18187 . -1) (undo-tree-id18188 . -1) (undo-tree-id18189 . -1) (undo-tree-id18190 . -1) (undo-tree-id18191 . -1) (undo-tree-id18192 . -1) (undo-tree-id18193 . -1) (undo-tree-id18194 . -1) (undo-tree-id18195 . -1) (undo-tree-id18196 . -1) (undo-tree-id18197 . -1) (undo-tree-id18198 . -1) (undo-tree-id18199 . -1) (undo-tree-id18200 . -1) (undo-tree-id18201 . -1) (undo-tree-id18202 . -1) (undo-tree-id18203 . -1) (undo-tree-id18204 . -1) (undo-tree-id18205 . -1) (undo-tree-id18206 . -1) (undo-tree-id18207 . -1) (undo-tree-id18208 . -1) (#("t" 0 1 (fontified t)) . -2862) (undo-tree-id18209 . -1) (undo-tree-id18210 . -1) (undo-tree-id18211 . -1) (undo-tree-id18212 . -1) (undo-tree-id18213 . -1) (undo-tree-id18214 . -1) (undo-tree-id18215 . -1) (undo-tree-id18216 . -1) (undo-tree-id18217 . -1) (undo-tree-id18218 . -1) (#("r" 0 1 (fontified t)) . -2863) (undo-tree-id18219 . -1) (undo-tree-id18220 . -1) (undo-tree-id18221 . -1) (undo-tree-id18222 . -1) (undo-tree-id18223 . -1) (undo-tree-id18224 . -1) 2864) nil (26041 1477 899625 479000) 0 nil])
([nil nil ((2777 . 2785) (#("        " 0 8 (fontified nil)) . 2776) (undo-tree-id18271 . -8) (undo-tree-id18272 . -8) (undo-tree-id18273 . -8) (undo-tree-id18274 . -8) (2776 . 2785) (#("        " 0 8 (fontified nil)) . 2775) (2775 . 2783) (2775 . 2776) (t 26041 1477 961045 360000)) nil (26041 1525 368015 753000) 0 nil])
([nil nil ((2776 . 2784)) nil (26041 1525 368011 293000) 0 nil])
([nil nil ((2784 . 2800)) nil (26041 1525 368010 639000) 0 nil])
([nil nil ((#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -2799) (undo-tree-id18263 . -1) (undo-tree-id18264 . -1) (undo-tree-id18265 . -1) (undo-tree-id18266 . -1) (undo-tree-id18267 . -1) (undo-tree-id18268 . -1) (undo-tree-id18269 . -1) (undo-tree-id18270 . -1) 2800) nil (26041 1525 368008 923000) 0 nil])
([nil nil ((2799 . 2804)) nil (26041 1525 367996 850000) 0 nil])
([nil nil ((2804 . 2806)) nil (26041 1525 367995 391000) 0 nil])
([nil nil ((2806 . 2810)) nil (26041 1525 367991 530000) 0 nil])
([nil nil ((2805 . 2810) (t 26041 1525 427714 939000)) nil (26041 1576 200856 871000) 0 nil])
([nil nil ((2810 . 2811)) nil (26041 1576 200856 24000) 0 nil])
([nil nil ((#("image:" 0 5 (face font-lock-variable-name-face fontified t) 5 6 (fontified t)) . -2805) (undo-tree-id18299 . -5) (undo-tree-id18300 . -6) (undo-tree-id18301 . -1) (undo-tree-id18302 . -1) (undo-tree-id18303 . -2) (undo-tree-id18304 . -2) (undo-tree-id18305 . -3) (undo-tree-id18306 . -3) (undo-tree-id18307 . -4) (undo-tree-id18308 . -4) (undo-tree-id18309 . -5) (undo-tree-id18310 . -5) (undo-tree-id18311 . -5) (undo-tree-id18312 . -5) (undo-tree-id18313 . -5) (undo-tree-id18314 . -6) (undo-tree-id18315 . -6) (undo-tree-id18316 . -6) (undo-tree-id18317 . -6) (undo-tree-id18318 . -6) (undo-tree-id18319 . -6) (undo-tree-id18320 . -6) (undo-tree-id18321 . -6) (undo-tree-id18322 . -6) (undo-tree-id18323 . -6) 2811) nil (26041 1576 200854 507000) 0 nil])
([nil nil ((2805 . 2817)) nil (26041 1576 200835 414000) 0 nil])
([nil nil ((2817 . 2827)) nil (26041 1576 200834 847000) 0 nil])
([nil nil ((2822 . 2834) (#("image" 0 5 (fontified nil)) . 2822) (2822 . 2827) (#("zbar_image_t" 0 12 (fontified nil)) . -2822) (2822 . 2834) (#("image" 0 5 (fontified t)) . -2822) (undo-tree-id18284 . -5) (undo-tree-id18285 . -1) (undo-tree-id18286 . -1) (undo-tree-id18287 . -1) (undo-tree-id18288 . -2) (undo-tree-id18289 . -2) (undo-tree-id18290 . -3) (undo-tree-id18291 . -3) (undo-tree-id18292 . -4) (undo-tree-id18293 . -4) (undo-tree-id18294 . -4) (undo-tree-id18295 . -5) (undo-tree-id18296 . -5) (undo-tree-id18297 . -5) (undo-tree-id18298 . -5) 2827) nil (26041 1576 200833 65000) 0 nil])
([nil nil ((2834 . 2844)) nil (26041 1576 200821 367000) 0 nil])
([nil nil ((2844 . 2847)) nil (26041 1576 200820 401000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t)) . -2846) (undo-tree-id18281 . -1) (undo-tree-id18282 . -1) (undo-tree-id18283 . -1) 2847) nil (26041 1576 200819 194000) 0 nil])
([nil nil ((2846 . 2854)) nil (26041 1576 200815 366000) 0 nil])
([nil nil ((2853 . 2859) (#("c" 0 1 (fontified nil)) . 2853) (2853 . 2854) (#("c_void" 0 6 (fontified nil)) . -2853) (2853 . 2859) (#("c" 0 1 (fontified t)) . -2853) (undo-tree-id18275 . -1) (undo-tree-id18276 . -1) (undo-tree-id18277 . -1) (undo-tree-id18278 . -1) (undo-tree-id18279 . -1) (undo-tree-id18280 . -1) 2854) nil (26041 1576 200810 915000) 0 nil])
([nil nil ((2864 . 2872) (#("            " 0 12 (fontified nil)) . 2863) (undo-tree-id18324 . -8) (undo-tree-id18325 . -8) (undo-tree-id18326 . -8) (undo-tree-id18327 . -8) (2871 . 2875) (2862 . 2872) (t 26041 1576 267718 61000)) nil (26041 1580 256836 91000) 0 nil])
([nil nil ((2863 . 2875)) nil (26041 1580 256821 973000) 0 nil])
([nil nil ((2904 . 2906) (t 26041 1580 284384 973000)) nil (26041 1585 912599 373000) 0 nil])
([nil nil ((2993 . 2995)) nil (26041 1585 912597 604000) 0 nil])
([nil nil ((3076 . 3078)) nil (26041 1585 912593 701000) 0 nil])
([nil nil ((nil fontified nil 3349 . 3350) (nil fontified nil 3345 . 3349) (nil fontified nil 3343 . 3345) (nil fontified nil 3342 . 3343) (nil fontified nil 3336 . 3342) (nil fontified nil 3335 . 3336) (nil fontified nil 3330 . 3335) (nil fontified nil 3319 . 3330) (nil fontified nil 3317 . 3319) (nil fontified nil 3314 . 3317) (nil fontified nil 3311 . 3314) (nil fontified nil 3305 . 3311) (nil fontified nil 3297 . 3305) (nil fontified nil 3296 . 3297) (nil fontified nil 3295 . 3296) (nil fontified nil 3294 . 3295) (nil fontified nil 3286 . 3294) (nil fontified nil 3285 . 3286) (nil fontified nil 3284 . 3285) (nil fontified nil 3283 . 3284) (nil fontified nil 3277 . 3283) (nil fontified nil 3276 . 3277) (nil fontified nil 3275 . 3276) (nil fontified nil 3271 . 3275) (nil fontified nil 3270 . 3271) (nil fontified nil 3262 . 3270) (nil fontified nil 3260 . 3262) (nil fontified nil 3256 . 3260) (nil fontified nil 3255 . 3256) (nil fontified nil 3244 . 3255) (nil fontified nil 3243 . 3244) (nil fontified nil 3242 . 3243) (nil fontified nil 3241 . 3242) (nil fontified nil 3240 . 3241) (nil fontified nil 3234 . 3240) (nil fontified nil 3233 . 3234) (nil fontified nil 3217 . 3233) (nil fontified nil 3216 . 3217) (nil fontified nil 3215 . 3216) (nil fontified nil 3214 . 3215) (nil fontified nil 3208 . 3214) (nil fontified nil 3207 . 3208) (nil fontified nil 3191 . 3207) (nil fontified nil 3190 . 3191) (nil fontified nil 3189 . 3190) (nil fontified nil 3188 . 3189) (nil fontified nil 3185 . 3188) (nil fontified nil 3184 . 3185) (nil fontified nil 3164 . 3184) (nil fontified nil 3162 . 3164) (nil fontified nil 3159 . 3162) (nil fontified nil 3158 . 3159) (nil fontified nil 3150 . 3158) (nil fontified nil 3148 . 3150) (nil fontified nil 3144 . 3148) (nil fontified nil 3132 . 3144) (nil fontified nil 3131 . 3132) (nil fontified nil 3130 . 3131) (nil fontified nil 3129 . 3130) (nil fontified nil 3124 . 3129) (nil fontified nil 3111 . 3124) (nil fontified nil 3109 . 3111) (nil fontified nil 3100 . 3109) (nil fontified nil 3088 . 3100) (nil fontified nil 3087 . 3088) (nil fontified nil 3086 . 3087) (nil fontified nil 3078 . 3086) (nil fontified nil 3070 . 3078) (nil fontified nil 3068 . 3070) (nil fontified nil 3067 . 3068) (nil fontified nil 3061 . 3067) (nil fontified nil 3060 . 3061) (nil fontified nil 3040 . 3060) (nil fontified nil 3038 . 3040) (nil fontified nil 3035 . 3038) (nil fontified nil 3032 . 3035) (nil fontified nil 3028 . 3032) (nil fontified nil 3027 . 3028) (nil fontified nil 3024 . 3027) (nil fontified nil 3016 . 3024) (nil fontified nil 3014 . 3016) (nil fontified nil 3013 . 3014) (nil fontified nil 3007 . 3013) (nil fontified nil 3006 . 3007) (nil fontified nil 2986 . 3006) (nil fontified nil 2984 . 2986) (nil fontified nil 2981 . 2984) (nil fontified nil 2978 . 2981) (nil fontified nil 2975 . 2978) (nil fontified nil 2974 . 2975) (nil fontified nil 2971 . 2974) (nil fontified nil 2963 . 2971) (nil fontified nil 2962 . 2963) (nil fontified nil 2961 . 2962) (nil fontified nil 2960 . 2961) (nil fontified nil 2959 . 2960) (nil fontified nil 2958 . 2959) (nil fontified nil 2951 . 2958) (nil fontified nil 2950 . 2951) (nil fontified nil 2944 . 2950) (nil fontified nil 2942 . 2944) (nil fontified nil 2937 . 2942) (nil fontified nil 2933 . 2937) (nil fontified nil 2932 . 2933) (nil fontified nil 2931 . 2932) (nil fontified nil 2930 . 2931) (nil fontified nil 2929 . 2930) (nil fontified nil 2924 . 2929) (nil fontified nil 2923 . 2924) (nil fontified nil 2900 . 2923) (nil fontified nil 2898 . 2900) (nil fontified nil 2895 . 2898) (nil fontified nil 2892 . 2895) (nil fontified nil 2886 . 2892) (nil fontified nil 2885 . 2886) (nil fontified nil 2882 . 2885) (nil fontified nil 2881 . 2882) (nil fontified nil 2878 . 2881) (nil fontified nil 2875 . 2878) (2875 . 3350) (t 26041 1585 974385 312000)) nil (26041 1615 647535 476000) 0 nil])
([nil nil ((3430 . 3442) (#("    " 0 4 (fontified t)) . 3430) (3374 . 3390) (#("        " 0 8 (fontified t)) . 3374) (3355 . 3371) (#("        " 0 8 (fontified t)) . 3355) (3305 . 3325) (#("            " 0 11 (fontified t) 11 12 (fontified t)) . 3305) (3270 . 3294) (#("                " 0 16 (fontified t)) . 3270) (undo-tree-id18353 . -8) (3236 . 3260) (#("                " 0 16 (fontified t)) . 3236) (undo-tree-id18354 . -7) (3169 . 3189) (#("            " 0 12 (fontified t)) . 3169) (undo-tree-id18355 . -6) (3117 . 3137) (#("            " 0 12 (fontified t)) . 3117) (3091 . 3107) (#("        " 0 8 (fontified t)) . 3091) (undo-tree-id18356 . -5) (3029 . 3045) (#("        " 0 8 (fontified t)) . 3029) (2968 . 2984) (#("        " 0 8 (fontified t)) . 2968) (undo-tree-id18357 . -4) (2930 . 2942) (#("    " 0 4 (fontified t)) . 2930) (#("   " 0 3 (fontified t)) . -2875) 2780) nil (26041 1615 647518 300000) 0 nil])
([nil nil ((2862 . 2875)) nil (26041 1615 647510 640000) 0 nil])
([nil nil ((2875 . 2883)) nil (26041 1615 647509 940000) 0 nil])
([nil nil ((3464 . 3465)) nil (26041 1615 647509 90000) 0 nil])
([nil nil ((3499 . 3515) (#("            " 0 12 (fontified t)) . 3499) (3455 . 3459) (3432 . 3436) (3362 . 3386) (#("                    " 0 20 (fontified t)) . 3362) (undo-tree-id18328 . -20) (undo-tree-id18329 . -13) (3347 . 3351) (3309 . 3313) (3214 . 3238) (#("                    " 0 20 (fontified t)) . 3214) (undo-tree-id18330 . -20) (3158 . 3182) (#("                    " 0 20 (fontified t)) . 3158) (undo-tree-id18331 . -20) (undo-tree-id18332 . -12) (3144 . 3148) (3078 . 3082) (3013 . 3017) (2955 . 2971) (#("            " 0 12 (fontified t)) . 2955) (2884 . 2900) (#("            " 0 12 (fontified t)) . 2884) (undo-tree-id18333 . -12) (undo-tree-id18334 . -12) (undo-tree-id18335 . -12) (undo-tree-id18336 . -12) (undo-tree-id18337 . -12) (undo-tree-id18338 . -12) (undo-tree-id18339 . -12) (undo-tree-id18340 . -12) (undo-tree-id18341 . -12) (undo-tree-id18342 . -12) (undo-tree-id18343 . -12) (undo-tree-id18344 . -12) (undo-tree-id18345 . -12) (undo-tree-id18346 . -12) (undo-tree-id18347 . -12) (undo-tree-id18348 . -12) (undo-tree-id18349 . -12) (undo-tree-id18350 . -4) (undo-tree-id18351 . -12) (undo-tree-id18352 . -12) 2775) nil (26041 1615 647505 316000) 0 nil])
([nil nil ((3516 . 3529)) nil (26041 1615 647475 330000) 0 nil])
([nil nil ((#("unsafe {" 0 6 (face rust-unsafe fontified t) 6 7 (fontified t) 7 8 (face (rainbow-delimiters-depth-4-face) fontified t)) . -2875) (undo-tree-id18421 . -8) (undo-tree-id18422 . -8) (undo-tree-id18423 . -8) (undo-tree-id18424 . -8) (undo-tree-id18425 . -8) (undo-tree-id18426 . -8) (undo-tree-id18427 . -8) (undo-tree-id18428 . -8) (undo-tree-id18429 . -8) (undo-tree-id18430 . -8) 2883 (t 26041 1615 674387 135000)) nil (26041 1624 72949 169000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2874) (undo-tree-id18402 . -1) (undo-tree-id18403 . -1) (undo-tree-id18404 . -1) (undo-tree-id18405 . -1) (undo-tree-id18406 . -1) (undo-tree-id18407 . -1) (undo-tree-id18408 . -1) (undo-tree-id18409 . -1) (undo-tree-id18410 . -1) (undo-tree-id18411 . -1) (undo-tree-id18412 . -1) (undo-tree-id18413 . -1) (undo-tree-id18414 . -1) (undo-tree-id18415 . -1) (undo-tree-id18416 . -1) (undo-tree-id18417 . -1) (undo-tree-id18418 . -1) (undo-tree-id18419 . -1) (undo-tree-id18420 . -1) 2875) nil (26041 1624 72940 39000) 0 nil])
([nil nil ((#("           
" 0 11 (fontified t) 11 12 (fontified t)) . 2863) (undo-tree-id18360 . -11) (undo-tree-id18361 . -12) (undo-tree-id18362 . -12) (undo-tree-id18363 . -12) (undo-tree-id18364 . -12) (undo-tree-id18365 . -12) (undo-tree-id18366 . -12) (undo-tree-id18367 . -12) (undo-tree-id18368 . -12) (undo-tree-id18369 . -12) (undo-tree-id18370 . -12) (undo-tree-id18371 . -12) (undo-tree-id18372 . -12) (undo-tree-id18373 . -12) (undo-tree-id18374 . -12) (undo-tree-id18375 . -12) (undo-tree-id18376 . -12) (undo-tree-id18377 . -12) (undo-tree-id18378 . -12) (undo-tree-id18379 . -12) (undo-tree-id18380 . 1) (undo-tree-id18381 . -12) (undo-tree-id18382 . -11) (undo-tree-id18383 . -11) (undo-tree-id18384 . -11) (undo-tree-id18385 . -11) (undo-tree-id18386 . -11) (undo-tree-id18387 . -11) (undo-tree-id18388 . -11) (undo-tree-id18389 . -11) (undo-tree-id18390 . -11) (undo-tree-id18391 . -11) (undo-tree-id18392 . -11) (undo-tree-id18393 . -11) (undo-tree-id18394 . -11) (undo-tree-id18395 . -11) (undo-tree-id18396 . -11) (undo-tree-id18397 . -11) (undo-tree-id18398 . -11) (undo-tree-id18399 . -11) (undo-tree-id18400 . -11) (undo-tree-id18401 . -12)) nil (26041 1624 72923 660000) 0 nil])
([nil nil ((#("            }" 0 12 (fontified t) 12 13 (face (rainbow-delimiters-depth-3-face) fontified t)) . 3496) (undo-tree-id18359 . -13)) nil (26041 1624 72894 84000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 3496) (undo-tree-id18358 . -1)) nil (26041 1624 72889 151000) 0 nil])
([nil nil ((2836 . 2837) (t 26041 1624 134387 657000)) nil (26041 1632 958827 445000) 0 nil])
([nil nil ((2935 . 2947) (#("            " 0 12 (fontified nil)) . 2934) (2934 . 2946) (2934 . 2935) (t 26041 1632 987721 534000)) nil (26041 1642 660594 252000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2946) (undo-tree-id18431 . -1) (undo-tree-id18432 . -1) (undo-tree-id18433 . -1) (undo-tree-id18434 . -1) 2947) nil (26041 1642 660590 31000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2945) (undo-tree-id18436 . -1) (undo-tree-id18437 . -1) (undo-tree-id18438 . -1) (undo-tree-id18439 . -1) (undo-tree-id18440 . -1) (undo-tree-id18441 . -1) (undo-tree-id18442 . -1) (undo-tree-id18443 . -1) (undo-tree-id18444 . -1) (undo-tree-id18445 . -1) (undo-tree-id18446 . -1) (undo-tree-id18447 . -1) (undo-tree-id18448 . -1) (undo-tree-id18449 . -1) (undo-tree-id18450 . -1) (undo-tree-id18451 . -1) (undo-tree-id18452 . -1) (undo-tree-id18453 . -1) (undo-tree-id18454 . -1) (undo-tree-id18455 . -1) (undo-tree-id18456 . -1) (undo-tree-id18457 . -1) (undo-tree-id18458 . -1) (undo-tree-id18459 . -1) (undo-tree-id18460 . -1) (undo-tree-id18461 . -1) 2946 (t 26041 1642 687722 129000)) nil (26041 1654 694123 327000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2945) (undo-tree-id18435 . -1)) nil (26041 1654 694103 231000) 0 nil])
([nil nil ((#("              " 0 14 (fontified t)) . -2947) 2945) nil (26041 1654 694092 105000) 0 nil])
([nil nil ((2776 . 2784) (#("        " 0 8 (fontified nil)) . 2775) (2775 . 2783) (2775 . 2776) (t 26041 1654 754389 537000)) nil (26041 1745 152625 224000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2811 . 2812) (nil fontified nil 2784 . 2812) (2784 . 2812)) nil (26041 1745 152623 332000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . -2811) (undo-tree-id18462 . -1) (undo-tree-id18463 . -1) (undo-tree-id18464 . -1) (undo-tree-id18465 . -1) (undo-tree-id18466 . -1) (undo-tree-id18467 . -1) (undo-tree-id18468 . -1) (undo-tree-id18469 . -1) 2812) nil (26041 1745 152619 59000) 0 nil])
([nil nil ((3548 . 3551) (t 26041 1745 181061 743000)) nil (26041 1775 470107 516000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -3548) (undo-tree-id18560 . -1) (undo-tree-id18561 . -1) (undo-tree-id18562 . -1) (undo-tree-id18563 . -1) (undo-tree-id18564 . -1) (undo-tree-id18565 . -1) (undo-tree-id18566 . -1) (undo-tree-id18567 . -1) (undo-tree-id18568 . -1) (undo-tree-id18569 . -1) (undo-tree-id18570 . -1) (undo-tree-id18571 . -1) (undo-tree-id18572 . -1) (undo-tree-id18573 . -1) (undo-tree-id18574 . -1) (undo-tree-id18575 . -1) (undo-tree-id18576 . -1) (#("l" 0 1 (fontified t)) . -3549) (undo-tree-id18577 . -1) (undo-tree-id18578 . -1) (undo-tree-id18579 . -1) (undo-tree-id18580 . -1) (undo-tree-id18581 . -1) (undo-tree-id18582 . -1) (undo-tree-id18583 . -1) (undo-tree-id18584 . -1) (undo-tree-id18585 . -1) (undo-tree-id18586 . -1) (undo-tree-id18587 . -1) (undo-tree-id18588 . -1) (#("o" 0 1 (fontified t)) . -3550) (undo-tree-id18589 . -1) (undo-tree-id18590 . -1) (undo-tree-id18591 . -1) (undo-tree-id18592 . -1) (undo-tree-id18593 . -1) (undo-tree-id18594 . -1) 3551) nil (26041 1775 470105 59000) 0 nil])
([nil nil ((3548 . 3553)) nil (26041 1775 470081 246000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -3549) (undo-tree-id18519 . -1) (undo-tree-id18520 . -1) (undo-tree-id18521 . -1) (undo-tree-id18522 . -1) (undo-tree-id18523 . -1) (undo-tree-id18524 . -1) (undo-tree-id18525 . -1) (undo-tree-id18526 . -1) (undo-tree-id18527 . -1) (undo-tree-id18528 . -1) (undo-tree-id18529 . -1) (undo-tree-id18530 . -1) (undo-tree-id18531 . -1) (undo-tree-id18532 . -1) (undo-tree-id18533 . -1) (undo-tree-id18534 . -1) (undo-tree-id18535 . -1) (#("e" 0 1 (fontified t)) . -3550) (undo-tree-id18536 . -1) (undo-tree-id18537 . -1) (undo-tree-id18538 . -1) (undo-tree-id18539 . -1) (undo-tree-id18540 . -1) (undo-tree-id18541 . -1) (undo-tree-id18542 . -1) (undo-tree-id18543 . -1) (undo-tree-id18544 . -1) (undo-tree-id18545 . -1) (undo-tree-id18546 . -1) (undo-tree-id18547 . -1) (#("t" 0 1 (fontified t)) . -3551) (undo-tree-id18548 . -1) (undo-tree-id18549 . -1) (undo-tree-id18550 . -1) (undo-tree-id18551 . -1) (undo-tree-id18552 . -1) (undo-tree-id18553 . -1) (undo-tree-id18554 . -1) (undo-tree-id18555 . -1) (#(" " 0 1 (fontified t)) . -3552) (undo-tree-id18556 . -1) (undo-tree-id18557 . -1) (undo-tree-id18558 . -1) (undo-tree-id18559 . -1) 3553) nil (26041 1775 470078 915000) 0 nil])
([nil nil ((3549 . 3555)) nil (26041 1775 470048 890000) 0 nil])
([nil nil ((#("p" 0 1 (face font-lock-variable-name-face fontified t)) . -3554) (undo-tree-id18513 . -1) (undo-tree-id18514 . -1) (undo-tree-id18515 . -1) (undo-tree-id18516 . -1) (undo-tree-id18517 . -1) (undo-tree-id18518 . -1) 3555) nil (26041 1775 470047 935000) 0 nil])
([nil nil ((3554 . 3559)) nil (26041 1775 470042 214000) 0 nil])
([nil nil ((3559 . 3563)) nil (26041 1775 470041 599000) 0 nil])
([nil nil ((3562 . 3570) (#("C" 0 1 (fontified nil)) . 3562) (3562 . 3563) (#("Closure2" 0 8 (fontified nil)) . -3562) (3562 . 3570) (#("C" 0 1 (face font-lock-type-face fontified t)) . -3562) (undo-tree-id18506 . -1) (undo-tree-id18507 . -1) (undo-tree-id18508 . -1) (undo-tree-id18509 . -1) (undo-tree-id18510 . -1) (undo-tree-id18511 . -1) (undo-tree-id18512 . -1) 3563) nil (26041 1775 470040 297000) 0 nil])
([nil nil ((3570 . 3574)) nil (26041 1775 470034 255000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -3573) (undo-tree-id18501 . -1) (undo-tree-id18502 . -1) (undo-tree-id18503 . -1) (undo-tree-id18504 . -1) (undo-tree-id18505 . -1) 3574) nil (26041 1775 470033 362000) 0 nil])
([nil nil ((3573 . 3575)) nil (26041 1775 470029 22000) 0 nil])
([nil nil ((3572 . 3575) (#("new" 0 3 (fontified nil)) . 3572) (3572 . 3575) (#("new" 0 3 (fontified t)) . -3572) (undo-tree-id18485 . -3) (undo-tree-id18486 . -1) (undo-tree-id18487 . -1) (undo-tree-id18488 . -1) (undo-tree-id18489 . -1) (undo-tree-id18490 . -1) (undo-tree-id18491 . -1) (undo-tree-id18492 . -1) (undo-tree-id18493 . -1) (undo-tree-id18494 . -2) (undo-tree-id18495 . -2) (undo-tree-id18496 . -2) (undo-tree-id18497 . -3) (undo-tree-id18498 . -3) (undo-tree-id18499 . -3) (undo-tree-id18500 . -3) 3575) nil (26041 1775 470027 445000) 0 nil])
([nil nil ((3575 . 3577)) nil (26041 1775 470015 266000) 0 nil])
([nil nil ((3576 . 3579)) nil (26041 1775 470014 543000) 0 nil])
([nil nil ((3577 . 3590) (#("im" 0 2 (fontified nil)) . 3577) (3577 . 3579) (#("image_handler" 0 13 (fontified nil)) . -3577) (3577 . 3590) (#("im" 0 2 (fontified t)) . -3577) (undo-tree-id18470 . -2) (undo-tree-id18471 . -2) (undo-tree-id18472 . -1) (undo-tree-id18473 . -1) (undo-tree-id18474 . -1) (undo-tree-id18475 . -2) (undo-tree-id18476 . -2) (undo-tree-id18477 . -2) (undo-tree-id18478 . -2) (undo-tree-id18479 . -2) (undo-tree-id18480 . -2) (undo-tree-id18481 . -2) (undo-tree-id18482 . -2) (undo-tree-id18483 . -2) (undo-tree-id18484 . -2) 3579) nil (26041 1775 470011 517000) 0 nil])
([nil nil ((3591 . 3592)) nil (26041 1775 469985 239000) 0 nil])
([nil nil ((3592 . 3601) (t 26041 1775 534396 939000)) nil (26041 1805 442851 816000) 0 nil])
([nil nil ((3601 . 3602)) nil (26041 1805 442850 883000) 0 nil])
([nil nil ((3602 . 3605)) nil (26041 1805 442850 150000) 0 nil])
([nil nil ((3605 . 3611)) nil (26041 1805 442849 612000) 0 nil])
([nil nil ((3611 . 3612)) nil (26041 1805 442849 59000) 0 nil])
([nil nil ((3611 . 3618) (#("c" 0 1 (fontified nil)) . 3611) (3611 . 3612) (#("closure" 0 7 (fontified nil)) . -3611) (3611 . 3618) (#("c" 0 1 (fontified t)) . -3611) (undo-tree-id18595 . -1) (undo-tree-id18596 . -1) (undo-tree-id18597 . -1) (undo-tree-id18598 . -1) (undo-tree-id18599 . -1) 3612) nil (26041 1805 442847 532000) 0 nil])
([nil nil ((3618 . 3619)) nil (26041 1805 442835 143000) 0 nil])
([nil nil ((apply yas--snippet-revive 3619 3629 #s(yas--snippet nil nil #s(yas--exit 3629 nil) 109 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 3629 nil) 109 nil nil nil nil)) (3619 . 3629) (#("code_ptr()$0" 0 12 (fontified nil)) . 3619) (3619 . 3631) (#("code_ptr()" 0 10 (fontified nil)) . -3619) (3619 . 3629)) nil (26041 1805 442832 819000) 0 nil])
([nil nil ((3629 . 3630)) nil (26041 1805 442827 675000) 0 nil])
([nil nil ((3605 . 3606) (t 26041 1805 507732 111000)) nil (26041 1818 426650 216000) 0 nil])
([nil nil ((3631 . 3640) (t 26041 1818 444399 570000)) nil (26041 1896 996194 203000) 0 nil])
([nil nil ((3640 . 3647)) nil (26041 1896 996193 410000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -3646) (undo-tree-id18856 . -1) (undo-tree-id18857 . -1) (undo-tree-id18858 . -1) (undo-tree-id18859 . -1) 3647) nil (26041 1896 996192 579000) 0 nil])
([nil nil ((3646 . 3650)) nil (26041 1896 996189 195000) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . -3605) (undo-tree-id18841 . -1) (undo-tree-id18842 . -1) (undo-tree-id18843 . -1) (undo-tree-id18844 . -1) (undo-tree-id18845 . -1) (undo-tree-id18846 . -1) (undo-tree-id18847 . -1) (undo-tree-id18848 . -1) (undo-tree-id18849 . -1) (undo-tree-id18850 . -1) (undo-tree-id18851 . -1) (undo-tree-id18852 . -1) (undo-tree-id18853 . -1) (undo-tree-id18854 . -1) (undo-tree-id18855 . -1) 3606) nil (26041 1896 996188 30000) 0 nil])
([nil nil ((3648 . 3649)) nil (26041 1896 996177 406000) 0 nil])
([nil nil ((3646 . 3648)) nil (26041 1896 996176 874000) 0 nil])
([nil nil ((3648 . 3655)) nil (26041 1896 996176 324000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -3651) (undo-tree-id18787 . -1) (undo-tree-id18788 . -1) (undo-tree-id18789 . -1) (undo-tree-id18790 . -1) (undo-tree-id18791 . -1) (undo-tree-id18792 . -1) (undo-tree-id18793 . -1) (undo-tree-id18794 . -1) (undo-tree-id18795 . -1) (undo-tree-id18796 . -1) (undo-tree-id18797 . -1) (undo-tree-id18798 . -1) (undo-tree-id18799 . -1) (undo-tree-id18800 . -1) (undo-tree-id18801 . -1) (undo-tree-id18802 . -1) (undo-tree-id18803 . -1) (undo-tree-id18804 . -1) (undo-tree-id18805 . -1) (undo-tree-id18806 . -1) (#("n" 0 1 (fontified t)) . -3652) (undo-tree-id18807 . -1) (undo-tree-id18808 . -1) (undo-tree-id18809 . -1) (undo-tree-id18810 . -1) (undo-tree-id18811 . -1) (undo-tree-id18812 . -1) (undo-tree-id18813 . -1) (undo-tree-id18814 . -1) (undo-tree-id18815 . -1) (undo-tree-id18816 . -1) (undo-tree-id18817 . -1) (undo-tree-id18818 . -1) (undo-tree-id18819 . -1) (undo-tree-id18820 . -1) (undo-tree-id18821 . -1) (undo-tree-id18822 . -1) (#("t" 0 1 (fontified t)) . -3653) (undo-tree-id18823 . -1) (undo-tree-id18824 . -1) (undo-tree-id18825 . -1) (undo-tree-id18826 . -1) (undo-tree-id18827 . -1) (undo-tree-id18828 . -1) (undo-tree-id18829 . -1) (undo-tree-id18830 . -1) (undo-tree-id18831 . -1) (undo-tree-id18832 . -1) (undo-tree-id18833 . -1) (undo-tree-id18834 . -1) (#(" " 0 1 (fontified t)) . -3654) (undo-tree-id18835 . -1) (undo-tree-id18836 . -1) (undo-tree-id18837 . -1) (undo-tree-id18838 . -1) (undo-tree-id18839 . -1) (undo-tree-id18840 . -1) 3655) nil (26041 1896 996173 611000) 0 nil])
([nil nil ((3651 . 3656)) nil (26041 1896 996077 7000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -3655) (undo-tree-id18781 . -1) (undo-tree-id18782 . -1) (undo-tree-id18783 . -1) (undo-tree-id18784 . -1) (undo-tree-id18785 . -1) (undo-tree-id18786 . -1) 3656) nil (26041 1896 996076 115000) 0 nil])
([nil nil ((3655 . 3659)) nil (26041 1896 996071 167000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -3658) (undo-tree-id18777 . -1) (undo-tree-id18778 . -1) (undo-tree-id18779 . -1) (undo-tree-id18780 . -1) 3659) nil (26041 1896 996070 313000) 0 nil])
([nil nil ((3658 . 3667)) nil (26041 1896 996067 215000) 0 nil])
([nil nil ((3660 . 3685) (#("image_h" 0 7 (fontified nil)) . 3660) (3660 . 3667) (#("zbar_image_data_handler_t" 0 25 (fontified nil)) . -3660) (3660 . 3685) (#("image_h" 0 7 (fontified t)) . -3660) (undo-tree-id18754 . -7) (undo-tree-id18755 . -1) (undo-tree-id18756 . -1) (undo-tree-id18757 . -1) (undo-tree-id18758 . -2) (undo-tree-id18759 . -2) (undo-tree-id18760 . -2) (undo-tree-id18761 . -3) (undo-tree-id18762 . -3) (undo-tree-id18763 . -4) (undo-tree-id18764 . -4) (undo-tree-id18765 . -4) (undo-tree-id18766 . -5) (undo-tree-id18767 . -5) (undo-tree-id18768 . -5) (undo-tree-id18769 . -5) (undo-tree-id18770 . -6) (undo-tree-id18771 . -6) (undo-tree-id18772 . -7) (undo-tree-id18773 . -7) (undo-tree-id18774 . -7) (undo-tree-id18775 . -7) (undo-tree-id18776 . -7) 3667) nil (26041 1896 996065 443000) 0 nil])
([nil nil ((3687 . 3688)) nil (26041 1896 996048 623000) 0 nil])
([nil nil ((3688 . 3691)) nil (26041 1896 996048 27000) 0 nil])
([nil nil ((3691 . 3703)) nil (26041 1896 996047 294000) 0 nil])
([nil nil ((3704 . 3716) (#("  " 0 2 (fontified nil)) . 3704) (undo-tree-id18716 . -2) (undo-tree-id18717 . -2) (undo-tree-id18718 . -2) (undo-tree-id18719 . -2) (undo-tree-id18720 . -2) (undo-tree-id18721 . -2) (undo-tree-id18722 . -2) (undo-tree-id18723 . -2) (undo-tree-id18724 . -2) (undo-tree-id18725 . -2) (undo-tree-id18726 . -2) (undo-tree-id18727 . -2) (undo-tree-id18728 . -2) (undo-tree-id18729 . -2) (undo-tree-id18730 . -2) (undo-tree-id18731 . -2) (undo-tree-id18732 . -2) (undo-tree-id18733 . -2) (undo-tree-id18734 . -2) (undo-tree-id18735 . -2) (undo-tree-id18736 . -2) (undo-tree-id18737 . -2) (undo-tree-id18738 . -2) (undo-tree-id18739 . -2) (undo-tree-id18740 . -2) (undo-tree-id18741 . -2) (undo-tree-id18742 . -2) (undo-tree-id18743 . -2) (undo-tree-id18744 . -1) (undo-tree-id18745 . -1) (undo-tree-id18746 . -1) (undo-tree-id18747 . -1) (undo-tree-id18748 . -1) (undo-tree-id18749 . -1) (undo-tree-id18750 . -1) (undo-tree-id18751 . -1) (undo-tree-id18752 . -1) (undo-tree-id18753 . 2) (3703 . 3704)) nil (26041 1896 996045 423000) 0 nil])
([nil nil ((3703 . 3704)) nil (26041 1896 996019 796000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -3701) (undo-tree-id18656 . -1) (undo-tree-id18657 . -1) (undo-tree-id18658 . -1) (undo-tree-id18659 . -1) (undo-tree-id18660 . -1) (undo-tree-id18661 . -1) (undo-tree-id18662 . -1) (undo-tree-id18663 . -1) (undo-tree-id18664 . -1) (undo-tree-id18665 . -1) (undo-tree-id18666 . -1) (undo-tree-id18667 . -1) (undo-tree-id18668 . -1) (undo-tree-id18669 . -1) (undo-tree-id18670 . -1) (undo-tree-id18671 . -1) (undo-tree-id18672 . -1) (undo-tree-id18673 . -1) (undo-tree-id18674 . -1) (undo-tree-id18675 . -1) (undo-tree-id18676 . -1) (undo-tree-id18677 . -1) (undo-tree-id18678 . -1) (undo-tree-id18679 . -1) (undo-tree-id18680 . -1) (undo-tree-id18681 . -1) (undo-tree-id18682 . -1) (#("s" 0 1 (fontified t)) . -3702) (undo-tree-id18683 . -1) (undo-tree-id18684 . -1) (undo-tree-id18685 . -1) (undo-tree-id18686 . -1) (undo-tree-id18687 . -1) (undo-tree-id18688 . -1) (undo-tree-id18689 . -1) (undo-tree-id18690 . -1) (undo-tree-id18691 . -1) (undo-tree-id18692 . -1) (undo-tree-id18693 . -1) (undo-tree-id18694 . -1) (undo-tree-id18695 . -1) (undo-tree-id18696 . -1) (undo-tree-id18697 . -1) (undo-tree-id18698 . -1) (undo-tree-id18699 . -1) (undo-tree-id18700 . -1) (undo-tree-id18701 . -1) (undo-tree-id18702 . -1) (undo-tree-id18703 . -1) (undo-tree-id18704 . -1) (undo-tree-id18705 . -1) (#("m" 0 1 (fontified t)) . -3703) (undo-tree-id18706 . -1) (undo-tree-id18707 . -1) (undo-tree-id18708 . -1) (undo-tree-id18709 . -1) (undo-tree-id18710 . -1) (undo-tree-id18711 . -1) (undo-tree-id18712 . -1) (undo-tree-id18713 . -1) (undo-tree-id18714 . -1) (undo-tree-id18715 . -1) 3704) nil (26041 1896 996016 578000) 0 nil])
([nil nil ((3701 . 3702)) nil (26041 1896 995882 123000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3708 3711 nil nil nil t #s(yas--exit 3712 nil))) #s(yas--exit 3712 nil) 110 nil #s(yas--field 1 3708 3711 nil nil nil t #s(yas--exit 3712 nil)) nil nil)) (3698 . 3712) (#("transmute(${1:src})$0" 0 21 (fontified nil)) . 3698) (3698 . 3719) (#("tran" 0 4 (fontified nil)) . 3698) (3698 . 3702) (#("transmute(…)" 0 12 (fontified nil)) . -3698) (3698 . 3710) (#("tran" 0 4 (fontified t)) . -3698) (undo-tree-id18614 . -4) (undo-tree-id18615 . -1) (undo-tree-id18616 . -1) (undo-tree-id18617 . -1) (undo-tree-id18618 . -2) (undo-tree-id18619 . -2) (undo-tree-id18620 . -3) (undo-tree-id18621 . -3) (undo-tree-id18622 . -3) (undo-tree-id18623 . -3) (undo-tree-id18624 . -3) (undo-tree-id18625 . -3) (undo-tree-id18626 . -3) (undo-tree-id18627 . -3) (undo-tree-id18628 . -3) (undo-tree-id18629 . -3) (undo-tree-id18630 . -3) (undo-tree-id18631 . -3) (undo-tree-id18632 . -3) (undo-tree-id18633 . -3) (undo-tree-id18634 . -3) (undo-tree-id18635 . -3) (undo-tree-id18636 . -3) (undo-tree-id18637 . -3) (undo-tree-id18638 . -3) (undo-tree-id18639 . -3) (undo-tree-id18640 . -3) (undo-tree-id18641 . -3) (undo-tree-id18642 . -3) (undo-tree-id18643 . -3) (undo-tree-id18644 . -3) (undo-tree-id18645 . -3) (undo-tree-id18646 . -3) (undo-tree-id18647 . -3) (undo-tree-id18648 . -3) (undo-tree-id18649 . -3) (undo-tree-id18650 . -3) (undo-tree-id18651 . -4) (undo-tree-id18652 . -4) (undo-tree-id18653 . -4) (undo-tree-id18654 . -4) (undo-tree-id18655 . -4) 3702) nil (26041 1896 995879 428000) 0 nil])
([nil nil ((#("src" 0 3 (fontified nil)) . 3709) (undo-tree-id18613 . -3) (3708 . 3709)) nil (26041 1896 995848 285000) 0 nil])
([nil nil ((3708 . 3711) (#("f" 0 1 (fontified nil)) . 3708) (undo-tree-id18600 . -1) (3708 . 3709) (#("fun" 0 3 (fontified nil)) . -3708) (undo-tree-id18601 . -3) (3708 . 3711) (#("f" 0 1 (fontified t)) . -3708) (undo-tree-id18602 . -1) (undo-tree-id18603 . -1) (undo-tree-id18604 . -1) (undo-tree-id18605 . -1) (undo-tree-id18606 . -1) (undo-tree-id18607 . -1) (undo-tree-id18608 . -1) (undo-tree-id18609 . -1) (undo-tree-id18610 . -1) (undo-tree-id18611 . -1) (undo-tree-id18612 . -1) 3709) nil (26041 1896 995844 614000) 0 nil])
([nil nil ((apply yas--snippet-revive 3698 3712 #s(yas--snippet nil (#s(yas--field 1 3708 3711 nil nil nil t #s(yas--exit 3712 nil))) #s(yas--exit 3712 nil) 110 nil #s(yas--field 1 3708 3711 nil nil nil t #s(yas--exit 3712 nil)) nil nil))) nil (26041 1896 995827 95000) 0 nil])
([nil nil ((3712 . 3713)) nil (26041 1896 995823 40000) 0 nil])
([nil nil ((#("const " 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t)) . -3649) (undo-tree-id18889 . -6) (undo-tree-id18890 . -2) (undo-tree-id18891 . -2) (undo-tree-id18892 . -2) (undo-tree-id18893 . -2) (undo-tree-id18894 . -2) (undo-tree-id18895 . -2) (undo-tree-id18896 . -2) (undo-tree-id18897 . -2) (undo-tree-id18898 . -2) (undo-tree-id18899 . -2) (undo-tree-id18900 . -2) (undo-tree-id18901 . -2) (undo-tree-id18902 . -2) (undo-tree-id18903 . -2) (undo-tree-id18904 . -2) (undo-tree-id18905 . -2) (undo-tree-id18906 . -2) (undo-tree-id18907 . -2) (undo-tree-id18908 . -2) (undo-tree-id18909 . -6) (undo-tree-id18910 . -6) (undo-tree-id18911 . -6) (undo-tree-id18912 . -6) (undo-tree-id18913 . -6) (undo-tree-id18914 . -5) (undo-tree-id18915 . -6) 3655 (t 26041 1897 24404 391000)) nil (26041 1991 704015 281000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . -3648) (undo-tree-id18860 . -1) (undo-tree-id18861 . -1) (undo-tree-id18862 . -1) (undo-tree-id18863 . -1) (undo-tree-id18864 . -1) (undo-tree-id18865 . -1) (undo-tree-id18866 . -1) (undo-tree-id18867 . -1) (undo-tree-id18868 . -1) (undo-tree-id18869 . -1) (undo-tree-id18870 . -1) (undo-tree-id18871 . -1) (undo-tree-id18872 . -1) (undo-tree-id18873 . -1) (undo-tree-id18874 . -1) (undo-tree-id18875 . -1) (undo-tree-id18876 . -1) (undo-tree-id18877 . -1) (undo-tree-id18878 . -1) (undo-tree-id18879 . -1) (undo-tree-id18880 . -1) (undo-tree-id18881 . -1) (undo-tree-id18882 . -1) (undo-tree-id18883 . -1) (undo-tree-id18884 . -1) (undo-tree-id18885 . -1) (undo-tree-id18886 . -1) (undo-tree-id18887 . -1) (undo-tree-id18888 . -1) 3649) nil (26041 1991 703992 219000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . 3900) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 3900) (t 26041 1991 734410 206000)) nil (26041 2010 7222 515000) 0 nil])
([nil nil ((#("handler" 0 7 (fontified t)) . -3943) (undo-tree-id18926 . -7) (undo-tree-id18927 . -7) 3950) nil (26041 2010 7220 984000) 0 nil])
([nil nil ((3943 . 3944)) nil (26041 2010 7217 759000) 0 nil])
([nil nil ((3943 . 3946) (#("p" 0 1 (fontified nil)) . 3943) (3943 . 3944) (#("ptr" 0 3 (fontified nil)) . -3943) (3943 . 3946) (#("p" 0 1 (fontified t)) . -3943) (undo-tree-id18916 . -1) (undo-tree-id18917 . -1) (undo-tree-id18918 . -1) (undo-tree-id18919 . -1) (undo-tree-id18920 . -1) (undo-tree-id18921 . -1) (undo-tree-id18922 . -1) (undo-tree-id18923 . -1) (undo-tree-id18924 . -1) (undo-tree-id18925 . -1) 3944) nil (26041 2010 7213 322000) 0 nil])
([nil nil ((3970 . 3978) (#("        " 0 8 (fontified nil)) . 3969) (undo-tree-id18928 . -8) (undo-tree-id18929 . -8) (undo-tree-id18930 . -8) (undo-tree-id18931 . -8) (3969 . 3978) (#("        " 0 8 (fontified nil)) . 3968) (undo-tree-id18932 . -8) (undo-tree-id18933 . -8) (undo-tree-id18934 . -8) (undo-tree-id18935 . -8) (3968 . 3977) (#("        " 0 8 (fontified nil)) . 3967) (3967 . 3975) (3967 . 3968) (t 26041 2010 37744 661000)) nil (26041 2018 647955 459000) 0 nil])
([nil nil ((3969 . 3977)) nil (26041 2018 647941 960000) 0 nil])
([nil nil ((3968 . 3976)) nil (26041 2018 647937 850000) 0 nil])
([nil nil ((3605 . 3606) (t 26041 2018 677745 190000)) nil (26041 2023 178883 90000) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . -3605) (undo-tree-id18936 . -1) (undo-tree-id18937 . -1) (undo-tree-id18938 . -1) (undo-tree-id18939 . -1) (undo-tree-id18940 . -1) (undo-tree-id18941 . -1) (undo-tree-id18942 . -1) (undo-tree-id18943 . -1) (undo-tree-id18944 . -1) (undo-tree-id18945 . -1) (undo-tree-id18946 . -1) (undo-tree-id18947 . -1) (undo-tree-id18948 . -1) (undo-tree-id18949 . -1) (undo-tree-id18950 . -1) (undo-tree-id18951 . -1) (undo-tree-id18952 . -1) (undo-tree-id18953 . -1) (undo-tree-id18954 . -1) (undo-tree-id18955 . -1) (undo-tree-id18956 . -1) (undo-tree-id18957 . -1) (undo-tree-id18958 . -1) (undo-tree-id18959 . -1) (undo-tree-id18960 . -1) (undo-tree-id18961 . -1) (undo-tree-id18962 . -1) (undo-tree-id18963 . -1) (undo-tree-id18964 . -1) 3606 (t 26041 2023 207745 469000)) nil (26041 2049 543554 327000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4192 . 4193) (nil fontified nil 3976 . 4193) (3976 . 4193) (t 26041 2049 574413 756000)) nil (26041 2102 528670 309000) 0 nil])
([nil nil ((4162 . 4170) (#("    " 0 4 (fontified t)) . 4162) (4098 . 4106) (#("    " 0 4 (fontified t)) . 4098) (4053 . 4061) (#("    " 0 4 (fontified t)) . 4053) (4008 . 4016) (#("    " 0 4 (fontified t)) . 4008) (#("    " 0 4 (fontified t)) . -3976) (undo-tree-id18982 . -1) 3967) nil (26041 2102 528668 476000) 0 nil])
([nil nil ((4016 . 4021)) nil (26041 2102 528665 874000) 0 nil])
([nil nil ((4066 . 4071)) nil (26041 2102 528665 338000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -4069) (undo-tree-id18970 . -1) (undo-tree-id18971 . -1) (undo-tree-id18972 . -1) (undo-tree-id18973 . -1) (undo-tree-id18974 . -1) (undo-tree-id18975 . -1) (undo-tree-id18976 . -1) (undo-tree-id18977 . -1) (undo-tree-id18978 . -1) (#(":" 0 1 (face font-lock-string-face fontified t)) . -4070) (undo-tree-id18979 . -1) (undo-tree-id18980 . -1) (undo-tree-id18981 . -1) 4071) nil (26041 2102 528664 55000) 0 nil])
([nil nil ((4069 . 4071)) nil (26041 2102 528654 267000) 0 nil])
([nil nil ((4180 . 4184)) nil (26041 2102 528653 526000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -4183) (undo-tree-id18965 . -1) (undo-tree-id18966 . -1) (undo-tree-id18967 . -1) (undo-tree-id18968 . -1) (undo-tree-id18969 . -1) 4184) nil (26041 2102 528651 318000) 0 nil])
([nil nil ((4183 . 4185)) nil (26041 2102 528637 345000) 0 nil])
([nil nil ((#("ptr" 0 3 (fontified t)) . -3943) (undo-tree-id19093 . -3) (undo-tree-id19094 . -3) 3946 (t 26041 2102 557750 338000)) nil (26041 2123 466563 60000) 0 nil])
([nil nil ((3943 . 3947)) nil (26041 2123 466560 568000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-type-face fontified t)) . -3944) (undo-tree-id19063 . -1) (undo-tree-id19064 . -1) (undo-tree-id19065 . -1) (undo-tree-id19066 . -1) (undo-tree-id19067 . -1) (undo-tree-id19068 . -1) (undo-tree-id19069 . -1) (undo-tree-id19070 . -1) (undo-tree-id19071 . -1) (undo-tree-id19072 . -1) (undo-tree-id19073 . -1) (undo-tree-id19074 . -1) (undo-tree-id19075 . -1) (undo-tree-id19076 . -1) (undo-tree-id19077 . -1) (undo-tree-id19078 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -3945) (undo-tree-id19079 . -1) (undo-tree-id19080 . -1) (undo-tree-id19081 . -1) (undo-tree-id19082 . -1) (undo-tree-id19083 . -1) (undo-tree-id19084 . -1) (undo-tree-id19085 . -1) (undo-tree-id19086 . -1) (undo-tree-id19087 . -1) (undo-tree-id19088 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -3946) (undo-tree-id19089 . -1) (undo-tree-id19090 . -1) (undo-tree-id19091 . -1) (undo-tree-id19092 . -1) 3947) nil (26041 2123 466558 620000) 0 nil])
([nil nil ((3944 . 3947)) nil (26041 2123 466537 798000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-type-face fontified t)) . -3944) (undo-tree-id19034 . -1) (undo-tree-id19035 . -1) (undo-tree-id19036 . -1) (undo-tree-id19037 . -1) (undo-tree-id19038 . -1) (undo-tree-id19039 . -1) (undo-tree-id19040 . -1) (undo-tree-id19041 . -1) (undo-tree-id19042 . -1) (undo-tree-id19043 . -1) (undo-tree-id19044 . -1) (undo-tree-id19045 . -1) (undo-tree-id19046 . -1) (undo-tree-id19047 . -1) (undo-tree-id19048 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -3945) (undo-tree-id19049 . -1) (undo-tree-id19050 . -1) (undo-tree-id19051 . -1) (undo-tree-id19052 . -1) (undo-tree-id19053 . -1) (undo-tree-id19054 . -1) (undo-tree-id19055 . -1) (undo-tree-id19056 . -1) (undo-tree-id19057 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -3946) (undo-tree-id19058 . -1) (undo-tree-id19059 . -1) (undo-tree-id19060 . -1) (undo-tree-id19061 . -1) (undo-tree-id19062 . -1) 3947) nil (26041 2123 466535 333000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3948 3951 nil nil nil t #s(yas--exit 3952 nil))) #s(yas--exit 3952 nil) 111 nil #s(yas--field 1 3948 3951 nil nil nil t #s(yas--exit 3952 nil)) nil nil)) (3943 . 3951) (#("Some(${1:()})$0" 0 15 (fontified nil)) . 3943) (3943 . 3958) (#("S" 0 1 (fontified nil)) . 3943) (3943 . 3944) (#("Some(…)" 0 7 (fontified nil)) . -3943) (3943 . 3950) (#("S" 0 1 (face font-lock-type-face fontified t)) . -3943) (undo-tree-id18994 . -1) (undo-tree-id18995 . -1) (undo-tree-id18996 . -1) (undo-tree-id18997 . -1) (undo-tree-id18998 . -1) (undo-tree-id18999 . -1) (undo-tree-id19000 . -1) (undo-tree-id19001 . -1) (undo-tree-id19002 . -1) (undo-tree-id19003 . -1) (undo-tree-id19004 . -1) (undo-tree-id19005 . -1) (undo-tree-id19006 . -1) (undo-tree-id19007 . -1) (undo-tree-id19008 . -1) (undo-tree-id19009 . -1) (undo-tree-id19010 . -1) (undo-tree-id19011 . -1) (undo-tree-id19012 . -1) (undo-tree-id19013 . -1) (undo-tree-id19014 . -1) (undo-tree-id19015 . -1) (undo-tree-id19016 . -1) (undo-tree-id19017 . -1) (undo-tree-id19018 . -1) (undo-tree-id19019 . -1) (undo-tree-id19020 . -1) (undo-tree-id19021 . -1) (undo-tree-id19022 . -1) (undo-tree-id19023 . -1) (undo-tree-id19024 . -1) (undo-tree-id19025 . -1) (undo-tree-id19026 . -1) (undo-tree-id19027 . -1) (undo-tree-id19028 . -1) (undo-tree-id19029 . -1) (undo-tree-id19030 . -1) (undo-tree-id19031 . -1) (undo-tree-id19032 . -1) (undo-tree-id19033 . -1) 3944) nil (26041 2123 466511 211000) 0 nil])
([nil nil ((#("()" 0 1 (face (rainbow-delimiters-depth-5-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-5-face) fontified nil)) . 3949) (undo-tree-id18993 . -2) (3948 . 3949)) nil (26041 2123 466159 686000) 0 nil])
([nil nil ((3948 . 3951) (#("p" 0 1 (fontified nil)) . 3948) (undo-tree-id18983 . -1) (3948 . 3949) (#("ptr" 0 3 (fontified nil)) . -3948) (undo-tree-id18984 . -3) (3948 . 3951) (#("p" 0 1 (fontified t)) . -3948) (undo-tree-id18985 . -1) (undo-tree-id18986 . -1) (undo-tree-id18987 . -1) (undo-tree-id18988 . -1) (undo-tree-id18989 . -1) (undo-tree-id18990 . -1) (undo-tree-id18991 . -1) (undo-tree-id18992 . -1) 3949) nil (26041 2123 466154 542000) 0 nil])
([nil nil ((apply yas--snippet-revive 3943 3952 #s(yas--snippet nil (#s(yas--field 1 3948 3951 nil nil nil t #s(yas--exit 3952 nil))) #s(yas--exit 3952 nil) 111 nil #s(yas--field 1 3948 3951 nil nil nil t #s(yas--exit 3952 nil)) nil nil))) nil (26041 2261 576705 86000) 0 nil])
([nil nil ((#("ptr)" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-4-face) fontified t)) . -3948) (undo-tree-id19599 . -4) (undo-tree-id19600 . -4) (undo-tree-id19601 . -4) (undo-tree-id19602 . -4) (undo-tree-id19603 . -4) (undo-tree-id19604 . -4) (undo-tree-id19605 . -4) (undo-tree-id19606 . -4) (undo-tree-id19607 . -4) (undo-tree-id19608 . -4) (undo-tree-id19609 . -4) 3952) nil (26041 2267 133386 870000) 0 nil] [nil nil ((#("ptr)" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-4-face) fontified t)) . -3948) (undo-tree-id19133 . -4) (undo-tree-id19134 . -4) (undo-tree-id19136 . -3) (undo-tree-id19138 . -3) (undo-tree-id19140 . -3) (undo-tree-id19142 . -3) (undo-tree-id19144 . -3) (undo-tree-id19146 . -3) (undo-tree-id19148 . -3) (undo-tree-id19150 . -3) (undo-tree-id19152 . -4) 3952 (t 26041 2123 497751 624000)) ((3948 . 3952)) (26041 2260 851668 354000) 0 nil])
([nil nil ((#("Some(" 0 4 (face font-lock-type-face fontified t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t)) . -3943) (undo-tree-id19580 . -5) (undo-tree-id19581 . -5) (undo-tree-id19582 . -5) (undo-tree-id19583 . -5) (undo-tree-id19584 . -5) (undo-tree-id19585 . -5) (undo-tree-id19586 . -5) (undo-tree-id19587 . -5) (undo-tree-id19588 . -5) (undo-tree-id19589 . -5) (undo-tree-id19590 . -5) (undo-tree-id19591 . -5) (undo-tree-id19592 . -5) (undo-tree-id19593 . -5) (undo-tree-id19594 . -5) (undo-tree-id19595 . -5) (undo-tree-id19596 . -5) (undo-tree-id19597 . -5) (undo-tree-id19598 . -5) 3948) nil (26041 2267 133378 122000) 0 nil])
([nil nil ((#("Some(" 0 4 (face font-lock-type-face fontified t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t)) . -3943) (undo-tree-id19103 . -5) (undo-tree-id19104 . -5) (undo-tree-id19105 . -5) (undo-tree-id19107 . -5) (undo-tree-id19109 . -5) (undo-tree-id19111 . -5) (undo-tree-id19113 . -5) (undo-tree-id19115 . -5) (undo-tree-id19117 . -5) (undo-tree-id19119 . -5) (undo-tree-id19121 . -5) (undo-tree-id19123 . -5) (undo-tree-id19125 . -5) (undo-tree-id19127 . -5) (undo-tree-id19129 . -5) (undo-tree-id19131 . -5) 3948) ((3943 . 3948)) (26041 2260 504846 994000) 0 nil])
([nil nil ((3943 . 3946)) nil (26041 2267 133364 216000) 0 nil])
([nil nil ((3943 . 3944)) ((#("p" 0 1 (fontified t)) . 3943) (undo-tree-id19539 . -1) (undo-tree-id19540 . -1) (undo-tree-id19541 . -1) (undo-tree-id19542 . -1) (undo-tree-id19543 . -1) (undo-tree-id19544 . -1)) (26041 2259 948151 401000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -3944) (undo-tree-id19568 . -1) (undo-tree-id19569 . -1) (undo-tree-id19570 . -1) (undo-tree-id19571 . -1) (undo-tree-id19572 . -1) (undo-tree-id19573 . -1) (undo-tree-id19574 . -1) (undo-tree-id19575 . -1) (undo-tree-id19576 . -1) (#("t" 0 1 (fontified t)) . -3945) (undo-tree-id19577 . -1) (undo-tree-id19578 . -1) (undo-tree-id19579 . -1) 3946) nil (26041 2267 133362 611000) 0 nil])
([nil nil ((3943 . 3946) (#("p" 0 1 (fontified nil)) . 3943) (3943 . 3944) (#("ptr" 0 3 (fontified nil)) . -3943) (3943 . 3946) (#("p" 0 1 (fontified t)) . -3943) (undo-tree-id19095 . -1) (undo-tree-id19096 . -1) (undo-tree-id19098 . -1) (undo-tree-id19100 . -1) (undo-tree-id19102 . -1) 3944) ((3943 . 3944) (#("ptr" 0 3 (fontified nil)) . 3943) (3943 . 3946) (#("p" 0 1 (fontified nil)) . 3943) (3943 . 3944) (#("ptr" 0 3 (fontified t)) . 3943)) (26041 2259 171564 787000) 0 nil])
([nil nil ((3944 . 3946)) nil (26041 2267 133351 362000) 0 nil])
([nil nil ((3892 . 3894) (t 26041 2136 677752 434000)) ((#("//" 0 2 (face font-lock-comment-delimiter-face fontified t)) . 3892)) (26041 2258 942823 759000) 0 nil])
([nil nil ((3943 . 3946) (#("ptr" 0 3 (fontified nil)) . 3943) (3943 . 3946) (#("ptr" 0 3 (fontified t)) . -3943) (undo-tree-id19545 . -3) (undo-tree-id19546 . -3) (undo-tree-id19547 . -1) (undo-tree-id19548 . -1) (undo-tree-id19549 . -1) (undo-tree-id19550 . -1) (undo-tree-id19551 . -1) (undo-tree-id19552 . -1) (undo-tree-id19553 . -1) (undo-tree-id19554 . -1) (undo-tree-id19555 . -1) (undo-tree-id19556 . -1) (undo-tree-id19557 . -1) (undo-tree-id19558 . -1) (undo-tree-id19559 . -2) (undo-tree-id19560 . -3) (undo-tree-id19561 . -3) (undo-tree-id19562 . -3) (undo-tree-id19563 . -3) (undo-tree-id19564 . -3) (undo-tree-id19565 . -3) (undo-tree-id19566 . -3) (undo-tree-id19567 . -3) 3946) nil (26041 2267 133346 517000) 0 nil])
([nil nil ((#("        use libffi::high::Closure2;
        let image_handler = |image: *mut ffi::zbar_image_t, _userdata: *const c_void| {
                let mut symbol = ffi::zbar_image_first_symbol(image);

            while !symbol.is_null() {
                    let typ = ffi::zbar_symbol_get_type(symbol);
                    let data = ffi::zbar_symbol_get_data(symbol);
                    println!(
                        \"decoded {} symbol \\\"{:?}\\\"\\n\",
                        CStr::from_ptr(ffi::zbar_get_symbol_name(typ))
                            .to_str()
                            .unwrap(),
                        CStr::from_ptr(data).to_str()
                    );
                    symbol = ffi::zbar_symbol_next(symbol);
                }
        };
        let closure = Closure2::new(&image_handler);
        let fun = closure.code_ptr();
        let ptr: ffi::zbar_image_data_handler_t = std::mem::transmute(fun);" 0 1 (fontified t) 1 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 18 (face font-lock-constant-face fontified t) 18 20 (fontified t) 20 24 (face font-lock-constant-face fontified t) 24 26 (fontified t) 26 34 (face font-lock-type-face fontified t) 34 35 (fontified t) 35 36 (fontified t) 36 44 (fontified t) 44 47 (face font-lock-keyword-face fontified t) 47 48 (fontified t) 48 61 (face font-lock-variable-name-face fontified t) 61 65 (fontified t) 65 70 (face font-lock-variable-name-face fontified t) 70 73 (fontified t) 73 76 (face font-lock-keyword-face fontified t) 76 77 (fontified t) 77 80 (face font-lock-constant-face fontified t) 80 82 (fontified t) 82 96 (fontified t) 96 97 (face font-lock-variable-name-face fontified t) 97 105 (face font-lock-variable-name-face fontified t) 105 108 (fontified t) 108 113 (face font-lock-keyword-face fontified t) 113 114 (fontified t) 114 120 (fontified t) 120 122 (fontified t) 122 123 (face (rainbow-delimiters-depth-3-face) fontified t) 123 124 (fontified t) 124 140 (fontified t) 140 143 (face font-lock-keyword-face fontified t) 143 144 (fontified t) 144 147 (face font-lock-keyword-face fontified t) 147 148 (fontified t) 148 154 (face font-lock-variable-name-face fontified t) 154 157 (fontified t) 157 160 (face font-lock-constant-face fontified t) 160 162 (fontified t) 162 185 (fontified t) 185 186 (face (rainbow-delimiters-depth-4-face) fontified t) 186 191 (fontified t) 191 192 (face (rainbow-delimiters-depth-4-face) fontified t) 192 193 (fontified t) 193 194 (fontified t) 194 195 (fontified t) 195 205 (fontified t) 205 207 (fontified t) 207 212 (face font-lock-keyword-face fontified t) 212 214 (fontified t) 214 220 (fontified t) 220 221 (fontified t) 221 228 (fontified t) 228 229 (face (rainbow-delimiters-depth-4-face) fontified t) 229 230 (face (rainbow-delimiters-depth-4-face) fontified t) 230 231 (fontified t) 231 232 (face (rainbow-delimiters-depth-4-face) fontified t) 232 233 (fontified t) 233 253 (fontified t) 253 256 (face font-lock-keyword-face fontified t) 256 257 (fontified t) 257 260 (face font-lock-variable-name-face fontified t) 260 263 (fontified t) 263 266 (face font-lock-constant-face fontified t) 266 268 (fontified t) 268 288 (fontified t) 288 289 (face (rainbow-delimiters-depth-5-face) fontified t) 289 295 (fontified t) 295 296 (face (rainbow-delimiters-depth-5-face) fontified t) 296 298 (fontified t) 298 318 (fontified t) 318 321 (face font-lock-keyword-face fontified t) 321 322 (fontified t) 322 326 (face font-lock-variable-name-face fontified t) 326 329 (fontified t) 329 332 (face font-lock-constant-face fontified t) 332 334 (fontified t) 334 354 (fontified t) 354 355 (face (rainbow-delimiters-depth-5-face) fontified t) 355 361 (fontified t) 361 362 (face (rainbow-delimiters-depth-5-face) fontified t) 362 364 (fontified t) 364 384 (fontified t) 384 392 (face rust-builtin-formatting-macro fontified t) 392 393 (face (rainbow-delimiters-depth-5-face) fontified t) 393 418 (fontified t) 418 427 (face font-lock-string-face fontified t) 427 429 (face rust-string-interpolation fontified t) 429 442 (face font-lock-string-face fontified t) 442 447 (face font-lock-string-face fontified t) 447 448 (face font-lock-string-face fontified t rear-nonsticky t) 448 449 (fontified t) 449 474 (fontified t) 474 478 (face font-lock-type-face fontified t) 478 480 (fontified t) 480 488 (fontified t) 488 489 (face (rainbow-delimiters-depth-6-face) fontified t) 489 492 (face font-lock-constant-face fontified t) 492 494 (fontified t) 494 514 (fontified t) 514 515 (face (rainbow-delimiters-depth-7-face) fontified t) 515 518 (fontified t) 518 519 (face (rainbow-delimiters-depth-7-face) fontified t) 519 520 (face (rainbow-delimiters-depth-6-face) fontified t) 520 521 (fontified t) 521 549 (fontified t) 549 550 (fontified t) 550 556 (fontified t) 556 557 (face (rainbow-delimiters-depth-6-face) fontified t) 557 558 (face (rainbow-delimiters-depth-6-face) fontified t) 558 559 (fontified t) 559 587 (fontified t) 587 588 (fontified t) 588 594 (fontified t) 594 595 (face (rainbow-delimiters-depth-6-face) fontified t) 595 596 (face (rainbow-delimiters-depth-6-face) fontified t) 596 597 (fontified t) 597 622 (fontified t) 622 626 (face font-lock-type-face fontified t) 626 628 (fontified t) 628 636 (fontified t) 636 637 (face (rainbow-delimiters-depth-6-face) fontified t) 637 641 (fontified t) 641 642 (face (rainbow-delimiters-depth-6-face) fontified t) 642 643 (fontified t) 643 649 (fontified t) 649 650 (face (rainbow-delimiters-depth-6-face) fontified t) 650 651 (face (rainbow-delimiters-depth-6-face) fontified t) 651 652 (fontified t) 652 672 (fontified t) 672 673 (face (rainbow-delimiters-depth-5-face) fontified t) 673 674 (fontified t) 674 675 (fontified t) 675 695 (fontified t) 695 701 (fontified t) 701 704 (fontified t) 704 707 (face font-lock-constant-face fontified t) 707 709 (fontified t) 709 720 (fontified t) 720 725 (fontified t) 725 726 (face (rainbow-delimiters-depth-5-face) fontified t) 726 732 (fontified t) 732 733 (face (rainbow-delimiters-depth-5-face) fontified t) 733 735 (fontified t) 735 751 (fontified t) 751 752 (face (rainbow-delimiters-depth-4-face) fontified t rear-nonsticky t) 752 753 (fontified t) 753 761 (fontified t) 761 762 (face (rainbow-delimiters-depth-3-face) fontified t) 762 763 (fontified t) 763 764 (fontified t) 764 772 (fontified t) 772 775 (face font-lock-keyword-face fontified t) 775 776 (fontified t) 776 783 (face font-lock-variable-name-face fontified t) 783 786 (fontified t) 786 794 (face font-lock-type-face fontified t) 794 796 (fontified t) 796 799 (fontified t) 799 800 (face (rainbow-delimiters-depth-3-face) fontified t) 800 801 (face rust-ampersand-face fontified t) 801 814 (fontified t) 814 815 (face (rainbow-delimiters-depth-3-face) fontified t) 815 817 (fontified t) 817 825 (fontified t) 825 828 (face font-lock-keyword-face fontified t) 828 829 (fontified t) 829 832 (face font-lock-variable-name-face fontified t) 832 835 (fontified t) 835 843 (fontified t) 843 851 (fontified t) 851 852 (face (rainbow-delimiters-depth-3-face) fontified t) 852 853 (face (rainbow-delimiters-depth-3-face) fontified t) 853 855 (fontified t) 855 863 (fontified t) 863 866 (face font-lock-keyword-face fontified t) 866 867 (fontified t) 867 870 (face font-lock-variable-name-face fontified t) 870 872 (fontified t) 872 875 (face font-lock-constant-face fontified t) 875 877 (fontified t) 877 902 (fontified t) 902 905 (fontified t) 905 908 (face font-lock-constant-face fontified t) 908 910 (fontified t) 910 913 (face font-lock-constant-face fontified t) 913 915 (fontified t) 915 924 (fontified t) 924 925 (face (rainbow-delimiters-depth-3-face) fontified t) 925 928 (fontified t) 928 929 (face (rainbow-delimiters-depth-3-face) fontified t) 929 930 (fontified t)) . 2776) (undo-tree-id19350 . -930) (undo-tree-id19351 . -205) (undo-tree-id19352 . -124) (undo-tree-id19353 . -752) (undo-tree-id19354 . -772) (undo-tree-id19355 . -8) (undo-tree-id19357 . -930) (undo-tree-id19359 . -854) (undo-tree-id19361 . -763) (undo-tree-id19363 . -734) (undo-tree-id19365 . -651) (undo-tree-id19367 . -558) (undo-tree-id19369 . -504) (undo-tree-id19371 . -446) (undo-tree-id19373 . -393) (undo-tree-id19375 . -345) (undo-tree-id19377 . -278) (undo-tree-id19379 . -276) (undo-tree-id19381 . -194) (undo-tree-id19383 . -66) (undo-tree-id19385 . -64) (undo-tree-id19387 . -62) (undo-tree-id19389 . -24) (undo-tree-id19391 . -22) (undo-tree-id19393 . -20) (undo-tree-id19395 . -930) (undo-tree-id19397 . -1) (undo-tree-id19399 . -1) (undo-tree-id19401 . -1) (undo-tree-id19403 . -1) (undo-tree-id19405 . -1) (undo-tree-id19407 . -1) (undo-tree-id19409 . -1) (undo-tree-id19411 . -1) (undo-tree-id19413 . -930) (undo-tree-id19415 . -930) (undo-tree-id19417 . -854) (undo-tree-id19419 . -763) (undo-tree-id19421 . -721) (undo-tree-id19423 . -634) (undo-tree-id19425 . -592) (undo-tree-id19427 . -589) (undo-tree-id19429 . -548) (undo-tree-id19431 . -475) (undo-tree-id19433 . -473) (undo-tree-id19435 . -414) (undo-tree-id19437 . -382) (undo-tree-id19439 . -379) (undo-tree-id19441 . -311) (undo-tree-id19443 . -244) (undo-tree-id19445 . -242) (undo-tree-id19447 . -202) (undo-tree-id19449 . -194) (undo-tree-id19451 . -126) (undo-tree-id19453 . -36) (undo-tree-id19455 . -930) (undo-tree-id19456 . -930) (t 26041 2192 264422 509000)) ((2776 . 3706)) (26041 2258 736231 718000) 0 nil] [nil nil ((#("       use libffi::high::Closure2;
        let image_handler = |image: *mut ffi::zbar_image_t, _userdata: *const c_void| {
                let mut symbol = ffi::zbar_image_first_symbol(image);

            while !symbol.is_null() {
                    let typ = ffi::zbar_symbol_get_type(symbol);
                    let data = ffi::zbar_symbol_get_data(symbol);
                    println!(
                        \"decoded {} symbol \\\"{:?}\\\"\\n\",
                        CStr::from_ptr(ffi::zbar_get_symbol_name(typ))
                            .to_str()
                            .unwrap(),
                        CStr::from_ptr(data).to_str()
                    );
                    symbol = ffi::zbar_symbol_next(symbol);
                }
        };
        let closure = Closure2::new(&image_handler);
        let fun = closure.code_ptr();
        let ptr: ffi::zbar_image_data_handler_t = std::mem::transmute(fun);" 0 7 (fontified t) 7 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 17 (face font-lock-constant-face fontified t) 17 19 (fontified t) 19 23 (face font-lock-constant-face fontified t) 23 25 (fontified t) 25 33 (face font-lock-type-face fontified t) 33 34 (fontified t) 34 35 (fontified t) 35 43 (fontified t) 43 46 (face font-lock-keyword-face fontified t) 46 47 (fontified t) 47 60 (face font-lock-variable-name-face fontified t) 60 64 (fontified t) 64 69 (face font-lock-variable-name-face fontified t) 69 72 (fontified t) 72 75 (face font-lock-keyword-face fontified t) 75 76 (fontified t) 76 79 (face font-lock-constant-face fontified t) 79 81 (fontified t) 81 95 (fontified t) 95 96 (face font-lock-variable-name-face fontified t) 96 104 (face font-lock-variable-name-face fontified t) 104 107 (fontified t) 107 112 (face font-lock-keyword-face fontified t) 112 113 (fontified t) 113 119 (fontified t) 119 121 (fontified t) 121 122 (face (rainbow-delimiters-depth-3-face) fontified t) 122 123 (fontified t) 123 139 (fontified t) 139 142 (face font-lock-keyword-face fontified t) 142 143 (fontified t) 143 146 (face font-lock-keyword-face fontified t) 146 147 (fontified t) 147 153 (face font-lock-variable-name-face fontified t) 153 156 (fontified t) 156 159 (face font-lock-constant-face fontified t) 159 161 (fontified t) 161 184 (fontified t) 184 185 (face (rainbow-delimiters-depth-4-face) fontified t) 185 190 (fontified t) 190 191 (face (rainbow-delimiters-depth-4-face) fontified t) 191 192 (fontified t) 192 193 (fontified t) 193 194 (fontified t) 194 204 (fontified t) 204 206 (fontified t) 206 211 (face font-lock-keyword-face fontified t) 211 213 (fontified t) 213 219 (fontified t) 219 220 (fontified t) 220 227 (fontified t) 227 228 (face (rainbow-delimiters-depth-4-face) fontified t) 228 229 (face (rainbow-delimiters-depth-4-face) fontified t) 229 230 (fontified t) 230 231 (face (rainbow-delimiters-depth-4-face) fontified t) 231 232 (fontified t) 232 252 (fontified t) 252 255 (face font-lock-keyword-face fontified t) 255 256 (fontified t) 256 259 (face font-lock-variable-name-face fontified t) 259 262 (fontified t) 262 265 (face font-lock-constant-face fontified t) 265 267 (fontified t) 267 287 (fontified t) 287 288 (face (rainbow-delimiters-depth-5-face) fontified t) 288 294 (fontified t) 294 295 (face (rainbow-delimiters-depth-5-face) fontified t) 295 297 (fontified t) 297 317 (fontified t) 317 320 (face font-lock-keyword-face fontified t) 320 321 (fontified t) 321 325 (face font-lock-variable-name-face fontified t) 325 328 (fontified t) 328 331 (face font-lock-constant-face fontified t) 331 333 (fontified t) 333 353 (fontified t) 353 354 (face (rainbow-delimiters-depth-5-face) fontified t) 354 360 (fontified t) 360 361 (face (rainbow-delimiters-depth-5-face) fontified t) 361 363 (fontified t) 363 383 (fontified t) 383 391 (face rust-builtin-formatting-macro fontified t) 391 392 (face (rainbow-delimiters-depth-5-face) fontified t) 392 417 (fontified t) 417 426 (face font-lock-string-face fontified t) 426 428 (face rust-string-interpolation fontified t) 428 441 (face font-lock-string-face fontified t) 441 446 (face font-lock-string-face fontified t) 446 447 (face font-lock-string-face fontified t rear-nonsticky t) 447 448 (fontified t) 448 473 (fontified t) 473 477 (face font-lock-type-face fontified t) 477 479 (fontified t) 479 487 (fontified t) 487 488 (face (rainbow-delimiters-depth-6-face) fontified t) 488 491 (face font-lock-constant-face fontified t) 491 493 (fontified t) 493 513 (fontified t) 513 514 (face (rainbow-delimiters-depth-7-face) fontified t) 514 517 (fontified t) 517 518 (face (rainbow-delimiters-depth-7-face) fontified t) 518 519 (face (rainbow-delimiters-depth-6-face) fontified t) 519 520 (fontified t) 520 548 (fontified t) 548 549 (fontified t) 549 555 (fontified t) 555 556 (face (rainbow-delimiters-depth-6-face) fontified t) 556 557 (face (rainbow-delimiters-depth-6-face) fontified t) 557 558 (fontified t) 558 586 (fontified t) 586 587 (fontified t) 587 593 (fontified t) 593 594 (face (rainbow-delimiters-depth-6-face) fontified t) 594 595 (face (rainbow-delimiters-depth-6-face) fontified t) 595 596 (fontified t) 596 621 (fontified t) 621 625 (face font-lock-type-face fontified t) 625 627 (fontified t) 627 635 (fontified t) 635 636 (face (rainbow-delimiters-depth-6-face) fontified t) 636 640 (fontified t) 640 641 (face (rainbow-delimiters-depth-6-face) fontified t) 641 642 (fontified t) 642 648 (fontified t) 648 649 (face (rainbow-delimiters-depth-6-face) fontified t) 649 650 (face (rainbow-delimiters-depth-6-face) fontified t) 650 651 (fontified t) 651 671 (fontified t) 671 672 (face (rainbow-delimiters-depth-5-face) fontified t) 672 673 (fontified t) 673 674 (fontified t) 674 694 (fontified t) 694 700 (fontified t) 700 703 (fontified t) 703 706 (face font-lock-constant-face fontified t) 706 708 (fontified t) 708 719 (fontified t) 719 724 (fontified t) 724 725 (face (rainbow-delimiters-depth-5-face) fontified t) 725 731 (fontified t) 731 732 (face (rainbow-delimiters-depth-5-face) fontified t) 732 734 (fontified t) 734 750 (fontified t) 750 751 (face (rainbow-delimiters-depth-4-face) fontified t rear-nonsticky t) 751 752 (fontified t) 752 760 (fontified t) 760 761 (face (rainbow-delimiters-depth-3-face) fontified t) 761 762 (fontified t) 762 763 (fontified t) 763 771 (fontified t) 771 774 (face font-lock-keyword-face fontified t) 774 775 (fontified t) 775 782 (face font-lock-variable-name-face fontified t) 782 785 (fontified t) 785 793 (face font-lock-type-face fontified t) 793 795 (fontified t) 795 798 (fontified t) 798 799 (face (rainbow-delimiters-depth-3-face) fontified t) 799 800 (face rust-ampersand-face fontified t) 800 813 (fontified t) 813 814 (face (rainbow-delimiters-depth-3-face) fontified t) 814 816 (fontified t) 816 824 (fontified t) 824 827 (face font-lock-keyword-face fontified t) 827 828 (fontified t) 828 831 (face font-lock-variable-name-face fontified t) 831 834 (fontified t) 834 842 (fontified t) 842 850 (fontified t) 850 851 (face (rainbow-delimiters-depth-3-face) fontified t) 851 852 (face (rainbow-delimiters-depth-3-face) fontified t) 852 854 (fontified t) 854 862 (fontified t) 862 865 (face font-lock-keyword-face fontified t) 865 866 (fontified t) 866 869 (face font-lock-variable-name-face fontified t) 869 871 (fontified t) 871 874 (face font-lock-constant-face fontified t) 874 876 (fontified t) 876 901 (fontified t) 901 904 (fontified t) 904 907 (face font-lock-constant-face fontified t) 907 909 (fontified t) 909 912 (face font-lock-constant-face fontified t) 912 914 (fontified t) 914 923 (fontified t) 923 924 (face (rainbow-delimiters-depth-3-face) fontified t) 924 927 (fontified t) 927 928 (face (rainbow-delimiters-depth-3-face) fontified t) 928 929 (fontified t)) . 2777) (undo-tree-id19167 . -929) (undo-tree-id19168 . -204) (undo-tree-id19169 . -123) (undo-tree-id19170 . -751) (undo-tree-id19171 . -771) (undo-tree-id19172 . -7) (undo-tree-id19173 . -929) (undo-tree-id19174 . -929) (undo-tree-id19175 . -929) (undo-tree-id19176 . -853) (undo-tree-id19177 . -815) (undo-tree-id19178 . -762) (undo-tree-id19179 . -751) (undo-tree-id19180 . -733) (undo-tree-id19181 . -673) (undo-tree-id19182 . -650) (undo-tree-id19183 . -596) (undo-tree-id19184 . -557) (undo-tree-id19185 . -504) (undo-tree-id19186 . -503) (undo-tree-id19187 . -446) (undo-tree-id19188 . -445) (undo-tree-id19189 . -444) (undo-tree-id19190 . -392) (undo-tree-id19191 . -345) (undo-tree-id19192 . -344) (undo-tree-id19193 . -343) (undo-tree-id19194 . -277) (undo-tree-id19195 . -276) (undo-tree-id19196 . -275) (undo-tree-id19197 . -231) (undo-tree-id19198 . -193) (undo-tree-id19199 . -157) (undo-tree-id19200 . -65) (undo-tree-id19201 . -64) (undo-tree-id19202 . -63) (undo-tree-id19203 . -62) (undo-tree-id19204 . -61) (undo-tree-id19205 . -24) (undo-tree-id19206 . -23) (undo-tree-id19207 . -22) (undo-tree-id19208 . -21) (undo-tree-id19209 . -20) (undo-tree-id19210 . -19) (undo-tree-id19211 . -1) (undo-tree-id19212 . -929) (t 26041 2192 264422 509000)) ((2777 . 3706)) (26041 2210 686064 354000) 0 nil])
([nil nil ((3946 . 3948) (t 26041 2267 161093 774000)) nil (26041 2282 654686 682000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2775) (undo-tree-id19231 . -1) (undo-tree-id19232 . -1) (undo-tree-id19233 . -1) (undo-tree-id19234 . -1) (undo-tree-id19235 . -1) (undo-tree-id19236 . -1) (undo-tree-id19237 . -1) (undo-tree-id19238 . -1) (undo-tree-id19240 . -1) (undo-tree-id19242 . -1) (undo-tree-id19244 . -1) (undo-tree-id19246 . -1) (undo-tree-id19248 . -1) (undo-tree-id19250 . -1) (undo-tree-id19252 . -1) (undo-tree-id19254 . -1) (undo-tree-id19256 . -1) (undo-tree-id19258 . -1) (undo-tree-id19260 . -1) (undo-tree-id19262 . -1) (undo-tree-id19264 . -1) (undo-tree-id19266 . -1) (undo-tree-id19268 . -1) (undo-tree-id19270 . -1) (undo-tree-id19272 . -1) (undo-tree-id19274 . -1) (undo-tree-id19276 . -1) (undo-tree-id19278 . -1) (undo-tree-id19280 . -1) (undo-tree-id19282 . -1) (undo-tree-id19284 . -1) (undo-tree-id19286 . -1) (undo-tree-id19288 . -1) (undo-tree-id19290 . -1) (undo-tree-id19292 . -1) (undo-tree-id19294 . -1) (undo-tree-id19296 . -1) (undo-tree-id19298 . -1) (undo-tree-id19300 . -1) (undo-tree-id19302 . -1) (undo-tree-id19304 . -1) (undo-tree-id19306 . -1) (undo-tree-id19308 . -1) (undo-tree-id19310 . -1) (undo-tree-id19312 . -1) (undo-tree-id19314 . -1) (undo-tree-id19316 . -1) (undo-tree-id19318 . -1) (undo-tree-id19320 . -1) (undo-tree-id19322 . -1) (undo-tree-id19324 . -1) (undo-tree-id19326 . -1) (undo-tree-id19328 . -1) (undo-tree-id19330 . -1) (undo-tree-id19332 . -1) (undo-tree-id19334 . -1) (undo-tree-id19336 . -1) (undo-tree-id19338 . -1) (undo-tree-id19339 . -1) (undo-tree-id19341 . -1) (undo-tree-id19343 . -1) (undo-tree-id19345 . -1) (undo-tree-id19347 . -1) (undo-tree-id19349 . -1) 2776) ((2775 . 2776)) (26041 2258 541629 17000) 0 nil])
([nil nil ((2777 . 2779)) ((#("co" 0 1 (fontified t) 1 2 (fontified t)) . 2777) (undo-tree-id19213 . -2) (undo-tree-id19214 . -1) (undo-tree-id19215 . -1) (undo-tree-id19216 . -1) (undo-tree-id19217 . -2) (undo-tree-id19218 . -2) (undo-tree-id19219 . -2) (undo-tree-id19220 . -1) (undo-tree-id19221 . -1) (undo-tree-id19222 . -1) (undo-tree-id19223 . -2) (undo-tree-id19224 . -2)) (26041 2210 399617 984000) 0 nil])
([nil nil ((apply yas--snippet-revive 3947 3955 #s(yas--snippet nil nil #s(yas--exit 3955 nil) 112 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 3955 nil) 112 nil nil nil nil)) (3947 . 3955) (#("unwrap()$0" 0 10 (fontified nil)) . 3947) (3947 . 3957) (#("u" 0 1 (fontified nil)) . 3947) (3947 . 3948) (#("unwrap()" 0 8 (fontified nil)) . -3947) (3947 . 3955) (#("u" 0 1 (fontified t)) . -3947) (undo-tree-id19610 . -1) (undo-tree-id19611 . -1) (undo-tree-id19612 . -1) (undo-tree-id19613 . -1) (undo-tree-id19614 . -1) 3948) nil (26041 2282 654681 515000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2775) (undo-tree-id19225 . -1) (undo-tree-id19226 . 1) (undo-tree-id19228 . -1) (undo-tree-id19230 . -1) 2776) ((2775 . 2776)) (26041 2257 776749 959000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -2777) (undo-tree-id19153 . -1) (undo-tree-id19154 . -1) (undo-tree-id19155 . -1) (undo-tree-id19156 . -1) (undo-tree-id19157 . -1) (undo-tree-id19158 . -1) (undo-tree-id19159 . -1) (undo-tree-id19160 . -1) (undo-tree-id19161 . -1) (undo-tree-id19162 . -1) (#("o" 0 1 (fontified t)) . -2778) (undo-tree-id19163 . -1) (undo-tree-id19164 . -1) (undo-tree-id19165 . -1) (undo-tree-id19166 . -1) 2779) ((2777 . 2779)) (26041 2210 398902 527000) 0 nil])
([nil nil ((#("unwrap()" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-4-face) fontified t) 7 8 (face (rainbow-delimiters-depth-4-face) fontified t)) . -3947) (undo-tree-id19666 . -8) (undo-tree-id19667 . -8) (undo-tree-id19668 . -8) (undo-tree-id19669 . -8) (undo-tree-id19670 . -8) (undo-tree-id19671 . -8) (undo-tree-id19672 . -8) (undo-tree-id19673 . -8) (undo-tree-id19674 . -8) (undo-tree-id19675 . -8) (undo-tree-id19676 . -8) (undo-tree-id19677 . -8) (undo-tree-id19678 . -8) (undo-tree-id19679 . -8) (undo-tree-id19680 . -8) (undo-tree-id19681 . -8) (undo-tree-id19682 . -8) (undo-tree-id19683 . -8) (undo-tree-id19684 . -8) (undo-tree-id19685 . -8) (undo-tree-id19686 . -8) (undo-tree-id19687 . -8) (undo-tree-id19688 . -8) (undo-tree-id19689 . -8) (undo-tree-id19690 . -8) (undo-tree-id19691 . -8) (undo-tree-id19692 . -8) (undo-tree-id19693 . -8) (undo-tree-id19694 . -8) (undo-tree-id19695 . -8) (undo-tree-id19696 . -8) (undo-tree-id19697 . -8) (undo-tree-id19698 . -8) (undo-tree-id19699 . -8) (undo-tree-id19700 . -8) (undo-tree-id19701 . -8) (undo-tree-id19702 . -8) (undo-tree-id19703 . -8) (undo-tree-id19704 . -8) (undo-tree-id19705 . -8) (undo-tree-id19706 . -8) (undo-tree-id19707 . -8) (undo-tree-id19708 . -8) (undo-tree-id19709 . -8) (undo-tree-id19710 . -8) 3955 (t 26041 2282 717761 395000)) nil (26041 2293 248410 258000) 0 nil])
([nil nil ((2691 . 2692) (t 26041 2217 214424 41000)) ((#("/" 0 1 (fontified t)) . 2691) (undo-tree-id19536 . -1) (undo-tree-id19537 . -1) (undo-tree-id19538 . -1)) (26041 2257 481817 383000) 0 nil])
nil
([nil nil ((#("." 0 1 (fontified t)) . -3946) (undo-tree-id19615 . -1) (undo-tree-id19616 . -1) (undo-tree-id19617 . -1) (undo-tree-id19618 . -1) (undo-tree-id19619 . -1) (undo-tree-id19620 . -1) (undo-tree-id19621 . -1) (undo-tree-id19622 . -1) (undo-tree-id19623 . -1) (undo-tree-id19624 . -1) (undo-tree-id19625 . -1) (undo-tree-id19626 . -1) (undo-tree-id19627 . -1) (undo-tree-id19628 . -1) (undo-tree-id19629 . -1) (undo-tree-id19630 . -1) (undo-tree-id19631 . -1) (undo-tree-id19632 . -1) (undo-tree-id19633 . -1) (undo-tree-id19634 . -1) (undo-tree-id19635 . -1) (undo-tree-id19636 . -1) (undo-tree-id19637 . -1) (undo-tree-id19638 . -1) (undo-tree-id19639 . -1) (undo-tree-id19640 . -1) (undo-tree-id19641 . -1) (undo-tree-id19642 . -1) (undo-tree-id19643 . -1) (undo-tree-id19644 . -1) (undo-tree-id19645 . -1) (undo-tree-id19646 . -1) (undo-tree-id19647 . -1) (undo-tree-id19648 . -1) (undo-tree-id19649 . -1) (undo-tree-id19650 . -1) (undo-tree-id19651 . -1) (undo-tree-id19652 . -1) (undo-tree-id19653 . -1) (undo-tree-id19654 . -1) (undo-tree-id19655 . -1) (undo-tree-id19656 . -1) (undo-tree-id19657 . -1) (undo-tree-id19658 . -1) (undo-tree-id19659 . -1) (undo-tree-id19660 . -1) (undo-tree-id19661 . -1) (undo-tree-id19662 . -1) (undo-tree-id19663 . -1) (undo-tree-id19664 . -1) (undo-tree-id19665 . -1) 3947) nil (26041 2293 248374 894000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -2691) (undo-tree-id19457 . -1) (undo-tree-id19459 . -1) (undo-tree-id19461 . -1) (undo-tree-id19463 . -1) (undo-tree-id19465 . -1) 2692) ((2691 . 2692)) (26041 2257 147388 856000) 0 nil])
([nil nil ((#("char" 0 4 (fontified t)) . -2765) (undo-tree-id20580 . -4) (undo-tree-id20581 . -1) (undo-tree-id20582 . -2) (undo-tree-id20583 . -3) (undo-tree-id20584 . -4) 2769 (t 26041 2293 281095 365000)) nil (26041 2424 644353 479000) 0 nil])
([nil nil ((2691 . 2693)) ((#("//" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 2 (face font-lock-comment-delimiter-face fontified t)) . 2691) (undo-tree-id19511 . -2) (undo-tree-id19512 . -2) (undo-tree-id19513 . -2) (undo-tree-id19514 . -2) (undo-tree-id19515 . -2) (undo-tree-id19516 . -2) (undo-tree-id19517 . -2) (undo-tree-id19518 . -2) (undo-tree-id19519 . -2) (undo-tree-id19520 . -2) (undo-tree-id19521 . -2) (undo-tree-id19522 . -2) (undo-tree-id19523 . -2) (undo-tree-id19524 . -2) (undo-tree-id19525 . -2) (undo-tree-id19526 . -2) (undo-tree-id19527 . -2) (undo-tree-id19528 . -2) (undo-tree-id19529 . -2) (undo-tree-id19530 . -2) (undo-tree-id19531 . -2) (undo-tree-id19532 . -1) (undo-tree-id19533 . -1) (undo-tree-id19534 . -2) (undo-tree-id19535 . -2)) (26041 2256 845820 836000) 0 nil])
([nil nil ((#("c_" 0 2 (fontified t)) . -2763) (undo-tree-id20571 . -2) (undo-tree-id20572 . -1) (undo-tree-id20573 . -2) (undo-tree-id20574 . -2) (undo-tree-id20575 . -2) (undo-tree-id20576 . -2) (undo-tree-id20577 . -2) (undo-tree-id20578 . -2) (undo-tree-id20579 . -2) 2765) nil (26041 2424 644349 7000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -2691) (undo-tree-id19467 . -1) (undo-tree-id19468 . -1) (undo-tree-id19469 . -1) (undo-tree-id19470 . -1) (undo-tree-id19471 . -1) (undo-tree-id19472 . -1) (undo-tree-id19473 . -1) (undo-tree-id19474 . -1) (undo-tree-id19475 . -1) (undo-tree-id19476 . -1) (undo-tree-id19477 . -1) (undo-tree-id19478 . -1) (undo-tree-id19479 . -1) (undo-tree-id19480 . -1) (undo-tree-id19481 . -1) (undo-tree-id19482 . -1) (undo-tree-id19483 . -1) (undo-tree-id19484 . -1) (undo-tree-id19485 . -1) (undo-tree-id19486 . -1) (undo-tree-id19487 . -1) (undo-tree-id19488 . -1) (undo-tree-id19489 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -2692) (undo-tree-id19490 . -1) (undo-tree-id19491 . -1) (undo-tree-id19492 . -1) (undo-tree-id19493 . -1) (undo-tree-id19494 . -1) (undo-tree-id19495 . -1) (undo-tree-id19496 . -1) (undo-tree-id19497 . -1) (undo-tree-id19498 . -1) (undo-tree-id19499 . -1) (undo-tree-id19500 . -1) (undo-tree-id19501 . -1) (undo-tree-id19502 . -1) (undo-tree-id19503 . -1) (undo-tree-id19504 . -1) (undo-tree-id19505 . -1) (undo-tree-id19506 . -1) (undo-tree-id19507 . -1) (undo-tree-id19508 . -1) (undo-tree-id19509 . -1) (undo-tree-id19510 . -1) 2693 (t 26041 2244 357759 42000)) ((2691 . 2693) (t 26041 2250 727759 434000)) (26041 2250 667803 242000) 0 nil])
([nil nil ((#("const " 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t)) . -2757) (undo-tree-id20554 . -6) (undo-tree-id20555 . -1) (undo-tree-id20556 . -2) (undo-tree-id20557 . -3) (undo-tree-id20558 . -4) (undo-tree-id20559 . -5) (undo-tree-id20560 . -6) (undo-tree-id20561 . -6) (undo-tree-id20562 . -6) (undo-tree-id20563 . -6) (undo-tree-id20564 . -6) (undo-tree-id20565 . -6) (undo-tree-id20566 . -6) (undo-tree-id20567 . -6) (undo-tree-id20568 . -6) (undo-tree-id20569 . -6) (undo-tree-id20570 . -6) 2763) nil (26041 2424 644342 383000) 0 nil])
nil
([nil nil ((#("as *" 0 2 (face font-lock-keyword-face fontified t) 2 4 (fontified t)) . -2753) (undo-tree-id20531 . -4) (undo-tree-id20532 . -1) (undo-tree-id20533 . -2) (undo-tree-id20534 . -3) (undo-tree-id20535 . -4) (undo-tree-id20536 . -4) (undo-tree-id20537 . -4) (undo-tree-id20538 . -4) (undo-tree-id20539 . -4) (undo-tree-id20540 . -4) (undo-tree-id20541 . -4) (undo-tree-id20542 . -4) (undo-tree-id20543 . -4) (undo-tree-id20544 . -4) (undo-tree-id20545 . -4) (undo-tree-id20546 . -4) (undo-tree-id20547 . -4) (undo-tree-id20548 . -4) (undo-tree-id20549 . -4) (undo-tree-id20550 . -4) (undo-tree-id20551 . -4) (undo-tree-id20552 . -4) (undo-tree-id20553 . -4) 2757) nil (26041 2424 644330 117000) 0 nil])
([nil nil ((#("ptr() " 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-4-face) fontified t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t) 5 6 (fontified t)) . -2747) (undo-tree-id20493 . -6) (undo-tree-id20494 . -1) (undo-tree-id20495 . -1) (undo-tree-id20496 . -1) (undo-tree-id20497 . -1) (undo-tree-id20498 . -1) (undo-tree-id20499 . -1) (undo-tree-id20500 . -1) (undo-tree-id20501 . -1) (undo-tree-id20502 . -2) (undo-tree-id20503 . -3) (undo-tree-id20504 . -4) (undo-tree-id20505 . -5) (undo-tree-id20506 . -6) (undo-tree-id20507 . -6) (undo-tree-id20508 . -6) (undo-tree-id20509 . -6) (undo-tree-id20510 . -6) (undo-tree-id20511 . -6) (undo-tree-id20512 . -6) (undo-tree-id20513 . -6) (undo-tree-id20514 . -6) (undo-tree-id20515 . -6) (undo-tree-id20516 . -6) (undo-tree-id20517 . -6) (undo-tree-id20518 . -6) (undo-tree-id20519 . -6) (undo-tree-id20520 . -6) (undo-tree-id20521 . -6) (undo-tree-id20522 . -6) (undo-tree-id20523 . -6) (undo-tree-id20524 . -6) (undo-tree-id20525 . -6) (undo-tree-id20526 . -6) (undo-tree-id20527 . -6) (undo-tree-id20528 . -6) (undo-tree-id20529 . -6) (undo-tree-id20530 . -6) 2753) nil (26041 2424 644314 505000) 0 nil])
([nil nil ((#("as_" 0 3 (fontified t)) . -2744) (undo-tree-id20407 . -3) (undo-tree-id20408 . -3) (undo-tree-id20409 . -1) (undo-tree-id20410 . -1) (undo-tree-id20411 . -1) (undo-tree-id20412 . -1) (undo-tree-id20413 . -1) (undo-tree-id20414 . -1) (undo-tree-id20415 . -1) (undo-tree-id20416 . -1) (undo-tree-id20417 . -1) (undo-tree-id20418 . -1) (undo-tree-id20419 . -1) (undo-tree-id20420 . -1) (undo-tree-id20421 . -1) (undo-tree-id20422 . -1) (undo-tree-id20423 . -1) (undo-tree-id20424 . -1) (undo-tree-id20425 . -1) (undo-tree-id20426 . -1) (undo-tree-id20427 . -1) (undo-tree-id20428 . -1) (undo-tree-id20429 . -1) (undo-tree-id20430 . -1) (undo-tree-id20431 . -1) (undo-tree-id20432 . -1) (undo-tree-id20433 . -1) (undo-tree-id20434 . -1) (undo-tree-id20435 . -1) (undo-tree-id20436 . -1) (undo-tree-id20437 . -1) (undo-tree-id20438 . -1) (undo-tree-id20439 . -1) (undo-tree-id20440 . -1) (undo-tree-id20441 . -1) (undo-tree-id20442 . -1) (undo-tree-id20443 . -1) (undo-tree-id20444 . -1) (undo-tree-id20445 . -1) (undo-tree-id20446 . -1) (undo-tree-id20447 . -1) (undo-tree-id20448 . -1) (undo-tree-id20449 . -1) (undo-tree-id20450 . -1) (undo-tree-id20451 . -1) (undo-tree-id20452 . -1) (undo-tree-id20453 . -2) (undo-tree-id20454 . -3) (undo-tree-id20455 . -3) (undo-tree-id20456 . -3) (undo-tree-id20457 . -3) (undo-tree-id20458 . -3) (undo-tree-id20459 . -3) (undo-tree-id20460 . -3) (undo-tree-id20461 . -3) (undo-tree-id20462 . -3) (undo-tree-id20463 . -3) (undo-tree-id20464 . -3) (undo-tree-id20465 . -3) (undo-tree-id20466 . -3) (undo-tree-id20467 . -3) (undo-tree-id20468 . -3) (undo-tree-id20469 . -3) (undo-tree-id20470 . -3) (undo-tree-id20471 . -3) (undo-tree-id20472 . -3) (undo-tree-id20473 . -3) (undo-tree-id20474 . -3) (undo-tree-id20475 . -3) (undo-tree-id20476 . -3) (undo-tree-id20477 . -3) (undo-tree-id20478 . -3) (undo-tree-id20479 . -3) (undo-tree-id20480 . -3) (undo-tree-id20481 . -3) (undo-tree-id20482 . -3) (undo-tree-id20483 . -3) (undo-tree-id20484 . -3) (undo-tree-id20485 . -3) (undo-tree-id20486 . -3) (undo-tree-id20487 . -3) (undo-tree-id20488 . -3) (undo-tree-id20489 . -3) (undo-tree-id20490 . -3) (undo-tree-id20491 . -3) (undo-tree-id20492 . -3) 2747) nil (26041 2424 644288 562000) 0 nil])
([nil nil ((#("video0\"." 0 7 (face font-lock-string-face fontified t) 7 8 (fontified t)) . -2736) (undo-tree-id20319 . -8) (undo-tree-id20320 . -8) (undo-tree-id20321 . -8) (undo-tree-id20322 . -8) (undo-tree-id20323 . -8) (undo-tree-id20324 . -8) (undo-tree-id20325 . -8) (undo-tree-id20326 . -8) (undo-tree-id20327 . -8) (undo-tree-id20328 . -8) (undo-tree-id20329 . -8) (undo-tree-id20330 . -8) (undo-tree-id20331 . -8) (undo-tree-id20332 . -8) (undo-tree-id20333 . -8) (undo-tree-id20334 . -8) (undo-tree-id20335 . -8) (undo-tree-id20336 . -8) (undo-tree-id20337 . -8) (undo-tree-id20338 . -8) (undo-tree-id20339 . -8) (undo-tree-id20340 . -8) (undo-tree-id20341 . -8) (undo-tree-id20342 . -8) (undo-tree-id20343 . -8) (undo-tree-id20344 . -8) (undo-tree-id20345 . -8) (undo-tree-id20346 . -8) (undo-tree-id20347 . -8) (undo-tree-id20348 . -8) (undo-tree-id20349 . -8) (undo-tree-id20350 . -8) (undo-tree-id20351 . -8) (undo-tree-id20352 . -8) (undo-tree-id20353 . -8) (undo-tree-id20354 . -8) (undo-tree-id20355 . -8) (undo-tree-id20356 . -8) (undo-tree-id20357 . -8) (undo-tree-id20358 . -8) (undo-tree-id20359 . -8) (undo-tree-id20360 . -8) (undo-tree-id20361 . -8) (undo-tree-id20362 . -8) (undo-tree-id20363 . -8) (undo-tree-id20364 . -8) (undo-tree-id20365 . -8) (undo-tree-id20366 . -8) (undo-tree-id20367 . -8) (undo-tree-id20368 . -8) (undo-tree-id20369 . -8) (undo-tree-id20370 . -8) (undo-tree-id20371 . -8) (undo-tree-id20372 . -8) (undo-tree-id20373 . -8) (undo-tree-id20374 . -8) (undo-tree-id20375 . -8) (undo-tree-id20376 . -8) (undo-tree-id20377 . -8) (undo-tree-id20378 . -8) (undo-tree-id20379 . -8) (undo-tree-id20380 . -8) (undo-tree-id20381 . -8) (undo-tree-id20382 . -8) (undo-tree-id20383 . -8) (undo-tree-id20384 . -8) (undo-tree-id20385 . -8) (undo-tree-id20386 . -8) (undo-tree-id20387 . -8) (undo-tree-id20388 . -8) (undo-tree-id20389 . -8) (undo-tree-id20390 . -8) (undo-tree-id20391 . -8) (undo-tree-id20392 . -8) (undo-tree-id20393 . -8) (undo-tree-id20394 . -8) (undo-tree-id20395 . -8) (undo-tree-id20396 . -8) (undo-tree-id20397 . -8) (undo-tree-id20398 . -8) (undo-tree-id20399 . -8) (undo-tree-id20400 . -8) (undo-tree-id20401 . -8) (undo-tree-id20402 . -8) (undo-tree-id20403 . -8) (undo-tree-id20404 . -8) (undo-tree-id20405 . -8) (undo-tree-id20406 . -8) 2744) nil (26041 2424 644232 290000) 0 nil])
([nil nil ((#("dev/" 0 4 (face font-lock-string-face fontified t)) . -2732) (undo-tree-id20229 . -4) (undo-tree-id20230 . -4) (undo-tree-id20231 . -4) (undo-tree-id20232 . -4) (undo-tree-id20233 . -4) (undo-tree-id20234 . -4) (undo-tree-id20235 . -4) (undo-tree-id20236 . -4) (undo-tree-id20237 . -4) (undo-tree-id20238 . -4) (undo-tree-id20239 . -4) (undo-tree-id20240 . -4) (undo-tree-id20241 . -4) (undo-tree-id20242 . -4) (undo-tree-id20243 . -4) (undo-tree-id20244 . -4) (undo-tree-id20245 . -4) (undo-tree-id20246 . -4) (undo-tree-id20247 . -4) (undo-tree-id20248 . -4) (undo-tree-id20249 . -4) (undo-tree-id20250 . -4) (undo-tree-id20251 . -4) (undo-tree-id20252 . -4) (undo-tree-id20253 . -4) (undo-tree-id20254 . -4) (undo-tree-id20255 . -4) (undo-tree-id20256 . -4) (undo-tree-id20257 . -4) (undo-tree-id20258 . -4) (undo-tree-id20259 . -4) (undo-tree-id20260 . -4) (undo-tree-id20261 . -4) (undo-tree-id20262 . -4) (undo-tree-id20263 . -4) (undo-tree-id20264 . -4) (undo-tree-id20265 . -4) (undo-tree-id20266 . -4) (undo-tree-id20267 . -4) (undo-tree-id20268 . -4) (undo-tree-id20269 . -4) (undo-tree-id20270 . -4) (undo-tree-id20271 . -4) (undo-tree-id20272 . -4) (undo-tree-id20273 . -4) (undo-tree-id20274 . -4) (undo-tree-id20275 . -4) (undo-tree-id20276 . -4) (undo-tree-id20277 . -4) (undo-tree-id20278 . -4) (undo-tree-id20279 . -4) (undo-tree-id20280 . -4) (undo-tree-id20281 . -4) (undo-tree-id20282 . -4) (undo-tree-id20283 . -4) (undo-tree-id20284 . -4) (undo-tree-id20285 . -4) (undo-tree-id20286 . -4) (undo-tree-id20287 . -4) (undo-tree-id20288 . -4) (undo-tree-id20289 . -4) (undo-tree-id20290 . -4) (undo-tree-id20291 . -4) (undo-tree-id20292 . -4) (undo-tree-id20293 . -4) (undo-tree-id20294 . -4) (undo-tree-id20295 . -4) (undo-tree-id20296 . -4) (undo-tree-id20297 . -4) (undo-tree-id20298 . -4) (undo-tree-id20299 . -4) (undo-tree-id20300 . -4) (undo-tree-id20301 . -4) (undo-tree-id20302 . -4) (undo-tree-id20303 . -4) (undo-tree-id20304 . -4) (undo-tree-id20305 . -4) (undo-tree-id20306 . -4) (undo-tree-id20307 . -4) (undo-tree-id20308 . -4) (undo-tree-id20309 . -4) (undo-tree-id20310 . -4) (undo-tree-id20311 . -4) (undo-tree-id20312 . -4) (undo-tree-id20313 . -4) (undo-tree-id20314 . -4) (undo-tree-id20315 . -4) (undo-tree-id20316 . -4) (undo-tree-id20317 . -4) (undo-tree-id20318 . -4) 2736) nil (26041 2424 644127 652000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -2730) (undo-tree-id20043 . -1) (undo-tree-id20044 . -1) (undo-tree-id20045 . -1) (undo-tree-id20046 . -1) (undo-tree-id20047 . -1) (undo-tree-id20048 . -1) (undo-tree-id20049 . -1) (undo-tree-id20050 . -1) (undo-tree-id20051 . -1) (undo-tree-id20052 . -1) (undo-tree-id20053 . -1) (undo-tree-id20054 . -1) (undo-tree-id20055 . -1) (undo-tree-id20056 . -1) (undo-tree-id20057 . -1) (undo-tree-id20058 . -1) (undo-tree-id20059 . -1) (undo-tree-id20060 . -1) (undo-tree-id20061 . -1) (undo-tree-id20062 . -1) (undo-tree-id20063 . -1) (undo-tree-id20064 . -1) (undo-tree-id20065 . -1) (undo-tree-id20066 . -1) (undo-tree-id20067 . -1) (undo-tree-id20068 . -1) (undo-tree-id20069 . -1) (undo-tree-id20070 . -1) (undo-tree-id20071 . -1) (undo-tree-id20072 . -1) (undo-tree-id20073 . -1) (undo-tree-id20074 . -1) (undo-tree-id20075 . -1) (undo-tree-id20076 . -1) (undo-tree-id20077 . -1) (undo-tree-id20078 . -1) (undo-tree-id20079 . -1) (undo-tree-id20080 . -1) (undo-tree-id20081 . -1) (undo-tree-id20082 . -1) (undo-tree-id20083 . -1) (undo-tree-id20084 . -1) (undo-tree-id20085 . -1) (undo-tree-id20086 . -1) (undo-tree-id20087 . -1) (undo-tree-id20088 . -1) (undo-tree-id20089 . -1) (undo-tree-id20090 . -1) (undo-tree-id20091 . -1) (undo-tree-id20092 . -1) (undo-tree-id20093 . -1) (undo-tree-id20094 . -1) (undo-tree-id20095 . -1) (undo-tree-id20096 . -1) (undo-tree-id20097 . -1) (undo-tree-id20098 . -1) (undo-tree-id20099 . -1) (undo-tree-id20100 . -1) (undo-tree-id20101 . -1) (undo-tree-id20102 . -1) (undo-tree-id20103 . -1) (undo-tree-id20104 . -1) (undo-tree-id20105 . -1) (undo-tree-id20106 . -1) (undo-tree-id20107 . -1) (undo-tree-id20108 . -1) (undo-tree-id20109 . -1) (undo-tree-id20110 . -1) (undo-tree-id20111 . -1) (undo-tree-id20112 . -1) (undo-tree-id20113 . -1) (undo-tree-id20114 . -1) (undo-tree-id20115 . -1) (undo-tree-id20116 . -1) (undo-tree-id20117 . -1) (undo-tree-id20118 . -1) (undo-tree-id20119 . -1) (undo-tree-id20120 . -1) (undo-tree-id20121 . -1) (undo-tree-id20122 . -1) (undo-tree-id20123 . -1) (undo-tree-id20124 . -1) (undo-tree-id20125 . -1) (undo-tree-id20126 . -1) (undo-tree-id20127 . -1) (undo-tree-id20128 . -1) (undo-tree-id20129 . -1) (undo-tree-id20130 . -1) (undo-tree-id20131 . -1) (undo-tree-id20132 . -1) (undo-tree-id20133 . -1) (undo-tree-id20134 . -1) (undo-tree-id20135 . -1) (undo-tree-id20136 . -1) (#("/" 0 1 (face font-lock-string-face fontified t)) . -2731) (undo-tree-id20137 . -1) (undo-tree-id20138 . -1) (undo-tree-id20139 . -1) (undo-tree-id20140 . -1) (undo-tree-id20141 . -1) (undo-tree-id20142 . -1) (undo-tree-id20143 . -1) (undo-tree-id20144 . -1) (undo-tree-id20145 . -1) (undo-tree-id20146 . -1) (undo-tree-id20147 . -1) (undo-tree-id20148 . -1) (undo-tree-id20149 . -1) (undo-tree-id20150 . -1) (undo-tree-id20151 . -1) (undo-tree-id20152 . -1) (undo-tree-id20153 . -1) (undo-tree-id20154 . -1) (undo-tree-id20155 . -1) (undo-tree-id20156 . -1) (undo-tree-id20157 . -1) (undo-tree-id20158 . -1) (undo-tree-id20159 . -1) (undo-tree-id20160 . -1) (undo-tree-id20161 . -1) (undo-tree-id20162 . -1) (undo-tree-id20163 . -1) (undo-tree-id20164 . -1) (undo-tree-id20165 . -1) (undo-tree-id20166 . -1) (undo-tree-id20167 . -1) (undo-tree-id20168 . -1) (undo-tree-id20169 . -1) (undo-tree-id20170 . -1) (undo-tree-id20171 . -1) (undo-tree-id20172 . -1) (undo-tree-id20173 . -1) (undo-tree-id20174 . -1) (undo-tree-id20175 . -1) (undo-tree-id20176 . -1) (undo-tree-id20177 . -1) (undo-tree-id20178 . -1) (undo-tree-id20179 . -1) (undo-tree-id20180 . -1) (undo-tree-id20181 . -1) (undo-tree-id20182 . -1) (undo-tree-id20183 . -1) (undo-tree-id20184 . -1) (undo-tree-id20185 . -1) (undo-tree-id20186 . -1) (undo-tree-id20187 . -1) (undo-tree-id20188 . -1) (undo-tree-id20189 . -1) (undo-tree-id20190 . -1) (undo-tree-id20191 . -1) (undo-tree-id20192 . -1) (undo-tree-id20193 . -1) (undo-tree-id20194 . -1) (undo-tree-id20195 . -1) (undo-tree-id20196 . -1) (undo-tree-id20197 . -1) (undo-tree-id20198 . -1) (undo-tree-id20199 . -1) (undo-tree-id20200 . -1) (undo-tree-id20201 . -1) (undo-tree-id20202 . -1) (undo-tree-id20203 . -1) (undo-tree-id20204 . -1) (undo-tree-id20205 . -1) (undo-tree-id20206 . -1) (undo-tree-id20207 . -1) (undo-tree-id20208 . -1) (undo-tree-id20209 . -1) (undo-tree-id20210 . -1) (undo-tree-id20211 . -1) (undo-tree-id20212 . -1) (undo-tree-id20213 . -1) (undo-tree-id20214 . -1) (undo-tree-id20215 . -1) (undo-tree-id20216 . -1) (undo-tree-id20217 . -1) (undo-tree-id20218 . -1) (undo-tree-id20219 . -1) (undo-tree-id20220 . -1) (undo-tree-id20221 . -1) (undo-tree-id20222 . -1) (undo-tree-id20223 . -1) (undo-tree-id20224 . -1) (undo-tree-id20225 . -1) (undo-tree-id20226 . -1) (undo-tree-id20227 . -1) (undo-tree-id20228 . -1) 2732) nil (26041 2424 644066 624000) 0 nil])
([nil nil ((2730 . 2731)) nil (26041 2424 643093 877000) 0 nil])
([nil nil ((2730 . 2734) (#("C" 0 1 (fontified nil)) . 2730) (2730 . 2731) (#("CStr" 0 4 (fontified nil)) . -2730) (2730 . 2734) (#("C" 0 1 (face font-lock-type-face fontified t)) . -2730) (undo-tree-id20038 . -1) (undo-tree-id20039 . -1) (undo-tree-id20040 . -1) (undo-tree-id20041 . -1) (undo-tree-id20042 . -1) 2731) nil (26041 2424 643092 722000) 0 nil])
([nil nil ((2734 . 2739)) nil (26041 2424 643088 305000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -2736) (undo-tree-id19997 . -1) (undo-tree-id19998 . -1) (undo-tree-id19999 . -1) (undo-tree-id20000 . -1) (undo-tree-id20001 . -1) (undo-tree-id20002 . -1) (undo-tree-id20003 . -1) (undo-tree-id20004 . -1) (undo-tree-id20005 . -1) (undo-tree-id20006 . -1) (undo-tree-id20007 . -1) (undo-tree-id20008 . -1) (undo-tree-id20009 . -1) (undo-tree-id20010 . -1) (undo-tree-id20011 . -1) (undo-tree-id20012 . -1) (undo-tree-id20013 . -1) (undo-tree-id20014 . -1) (undo-tree-id20015 . -1) (undo-tree-id20016 . -1) (#("e" 0 1 (fontified t)) . -2737) (undo-tree-id20017 . -1) (undo-tree-id20018 . -1) (undo-tree-id20019 . -1) (undo-tree-id20020 . -1) (undo-tree-id20021 . -1) (undo-tree-id20022 . -1) (undo-tree-id20023 . -1) (undo-tree-id20024 . -1) (undo-tree-id20025 . -1) (undo-tree-id20026 . -1) (undo-tree-id20027 . -1) (undo-tree-id20028 . -1) (undo-tree-id20029 . -1) (#("w" 0 1 (fontified t)) . -2738) (undo-tree-id20030 . -1) (undo-tree-id20031 . -1) (undo-tree-id20032 . -1) (undo-tree-id20033 . -1) (undo-tree-id20034 . -1) (undo-tree-id20035 . -1) (undo-tree-id20036 . -1) (undo-tree-id20037 . -1) 2739) nil (26041 2424 643086 174000) 0 nil])
([nil nil ((2736 . 2740)) nil (26041 2424 643060 190000) 0 nil])
([nil nil ((#("from" 0 4 (fontified t)) . -2736) (undo-tree-id19978 . -4) (undo-tree-id19979 . -4) (undo-tree-id19980 . -1) (undo-tree-id19981 . -1) (undo-tree-id19982 . -2) (undo-tree-id19983 . -2) (undo-tree-id19984 . -2) (undo-tree-id19985 . -3) (undo-tree-id19986 . -3) (undo-tree-id19987 . -4) (undo-tree-id19988 . -4) (undo-tree-id19989 . -4) (undo-tree-id19990 . -4) (undo-tree-id19991 . -4) (undo-tree-id19992 . -4) (undo-tree-id19993 . -4) (undo-tree-id19994 . -4) (undo-tree-id19995 . -4) (undo-tree-id19996 . -4) 2740) nil (26041 2424 643058 912000) 0 nil])
([nil nil ((#("CStr::" 0 4 (face font-lock-type-face fontified t) 4 6 (fontified t)) . -2730) (undo-tree-id19909 . -6) (undo-tree-id19910 . -6) (undo-tree-id19911 . -4) (undo-tree-id19912 . -4) (undo-tree-id19913 . -4) (undo-tree-id19914 . -4) (undo-tree-id19915 . -4) (undo-tree-id19916 . -4) (undo-tree-id19917 . -4) (undo-tree-id19918 . -4) (undo-tree-id19919 . -4) (undo-tree-id19920 . -4) (undo-tree-id19921 . -4) (undo-tree-id19922 . -4) (undo-tree-id19923 . -4) (undo-tree-id19924 . -4) (undo-tree-id19925 . -4) (undo-tree-id19926 . -4) (undo-tree-id19927 . -4) (undo-tree-id19928 . -4) (undo-tree-id19929 . -4) (undo-tree-id19930 . -4) (undo-tree-id19931 . -4) (undo-tree-id19932 . -4) (undo-tree-id19933 . -5) (undo-tree-id19934 . -5) (undo-tree-id19935 . -6) (undo-tree-id19936 . -6) (undo-tree-id19937 . -6) (undo-tree-id19938 . -6) (undo-tree-id19939 . -6) (undo-tree-id19940 . -6) (undo-tree-id19941 . -6) (undo-tree-id19942 . -6) (undo-tree-id19943 . -6) (undo-tree-id19944 . -6) (undo-tree-id19945 . -6) (undo-tree-id19946 . -6) (undo-tree-id19947 . -6) (undo-tree-id19948 . -6) (undo-tree-id19949 . -6) (undo-tree-id19950 . -6) (undo-tree-id19951 . -6) (undo-tree-id19952 . -6) (undo-tree-id19953 . -6) (undo-tree-id19954 . -6) (undo-tree-id19955 . -6) (undo-tree-id19956 . -6) (undo-tree-id19957 . -6) (undo-tree-id19958 . -6) (undo-tree-id19959 . -6) (undo-tree-id19960 . -6) (undo-tree-id19961 . -6) (undo-tree-id19962 . -6) (undo-tree-id19963 . -6) (undo-tree-id19964 . -6) (undo-tree-id19965 . -6) (undo-tree-id19966 . -6) (undo-tree-id19967 . -6) (undo-tree-id19968 . -6) (undo-tree-id19969 . -6) (undo-tree-id19970 . -6) (undo-tree-id19971 . -6) (undo-tree-id19972 . -6) (undo-tree-id19973 . -6) (undo-tree-id19974 . -6) (undo-tree-id19975 . -6) (undo-tree-id19976 . -6) (undo-tree-id19977 . -6) 2736) nil (26041 2424 643043 681000) 0 nil])
([nil nil ((2730 . 2731)) nil (26041 2424 642997 191000) 0 nil])
([nil nil ((#("S" 0 1 (face font-lock-type-face fontified t)) . -2730) (undo-tree-id19905 . -1) (undo-tree-id19906 . -1) (undo-tree-id19907 . -1) (undo-tree-id19908 . -1) 2731) nil (26041 2424 642996 245000) 0 nil])
([nil nil ((2730 . 2733)) nil (26041 2424 642926 513000) 0 nil])
([nil nil ((2733 . 2737)) nil (26041 2424 642925 905000) 0 nil])
([nil nil ((30 . 31) (34 . 44) (2730 . 2730) (2730 . 2737) (#("CString" 0 7 (fontified nil)) . 2730) (2730 . 2737) (#("CString (use std::ffi::CString)" 0 31 (fontified nil)) . -2730) (2730 . 2761) (#("CString" 0 7 (face font-lock-type-face fontified t)) . -2730) (undo-tree-id19882 . -7) (undo-tree-id19883 . -1) (undo-tree-id19884 . -1) (undo-tree-id19885 . -1) (undo-tree-id19886 . -1) (undo-tree-id19887 . -1) (undo-tree-id19888 . -2) (undo-tree-id19889 . -2) (undo-tree-id19890 . -2) (undo-tree-id19891 . -3) (undo-tree-id19892 . -3) (undo-tree-id19893 . -4) (undo-tree-id19894 . -4) (undo-tree-id19895 . -4) (undo-tree-id19896 . -5) (undo-tree-id19897 . -5) (undo-tree-id19898 . -5) (undo-tree-id19899 . -6) (undo-tree-id19900 . -6) (undo-tree-id19901 . -7) (undo-tree-id19902 . -7) (undo-tree-id19903 . -7) (undo-tree-id19904 . -7) 2737) nil (26041 2424 642924 41000) 0 nil])
([nil nil ((2748 . 2754)) nil (26041 2424 642907 200000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -2749) (undo-tree-id19769 . -1) (undo-tree-id19770 . -1) (undo-tree-id19771 . -1) (undo-tree-id19772 . -1) (undo-tree-id19773 . -1) (undo-tree-id19774 . -1) (undo-tree-id19775 . -1) (undo-tree-id19776 . -1) (undo-tree-id19777 . -1) (undo-tree-id19778 . -1) (undo-tree-id19779 . -1) (undo-tree-id19780 . -1) (undo-tree-id19781 . -1) (undo-tree-id19782 . -1) (undo-tree-id19783 . -1) (undo-tree-id19784 . -1) (undo-tree-id19785 . -1) (undo-tree-id19786 . -1) (undo-tree-id19787 . -1) (undo-tree-id19788 . -1) (undo-tree-id19789 . -1) (undo-tree-id19790 . -1) (undo-tree-id19791 . -1) (undo-tree-id19792 . -1) (undo-tree-id19793 . -1) (undo-tree-id19794 . -1) (undo-tree-id19795 . -1) (undo-tree-id19796 . -1) (undo-tree-id19797 . -1) (undo-tree-id19798 . -1) (undo-tree-id19799 . -1) (undo-tree-id19800 . -1) (undo-tree-id19801 . -1) (#("f" 0 1 (fontified t)) . -2750) (undo-tree-id19802 . -1) (undo-tree-id19803 . -1) (undo-tree-id19804 . -1) (undo-tree-id19805 . -1) (undo-tree-id19806 . -1) (undo-tree-id19807 . -1) (undo-tree-id19808 . -1) (undo-tree-id19809 . -1) (undo-tree-id19810 . -1) (undo-tree-id19811 . -1) (undo-tree-id19812 . -1) (undo-tree-id19813 . -1) (undo-tree-id19814 . -1) (undo-tree-id19815 . -1) (undo-tree-id19816 . -1) (undo-tree-id19817 . -1) (undo-tree-id19818 . -1) (undo-tree-id19819 . -1) (undo-tree-id19820 . -1) (undo-tree-id19821 . -1) (undo-tree-id19822 . -1) (undo-tree-id19823 . -1) (undo-tree-id19824 . -1) (undo-tree-id19825 . -1) (undo-tree-id19826 . -1) (undo-tree-id19827 . -1) (undo-tree-id19828 . -1) (undo-tree-id19829 . -1) (#("r" 0 1 (fontified t)) . -2751) (undo-tree-id19830 . -1) (undo-tree-id19831 . -1) (undo-tree-id19832 . -1) (undo-tree-id19833 . -1) (undo-tree-id19834 . -1) (undo-tree-id19835 . -1) (undo-tree-id19836 . -1) (undo-tree-id19837 . -1) (undo-tree-id19838 . -1) (undo-tree-id19839 . -1) (undo-tree-id19840 . -1) (undo-tree-id19841 . -1) (undo-tree-id19842 . -1) (undo-tree-id19843 . -1) (undo-tree-id19844 . -1) (undo-tree-id19845 . -1) (undo-tree-id19846 . -1) (undo-tree-id19847 . -1) (undo-tree-id19848 . -1) (undo-tree-id19849 . -1) (undo-tree-id19850 . -1) (undo-tree-id19851 . -1) (undo-tree-id19852 . -1) (#("o" 0 1 (fontified t)) . -2752) (undo-tree-id19853 . -1) (undo-tree-id19854 . -1) (undo-tree-id19855 . -1) (undo-tree-id19856 . -1) (undo-tree-id19857 . -1) (undo-tree-id19858 . -1) (undo-tree-id19859 . -1) (undo-tree-id19860 . -1) (undo-tree-id19861 . -1) (undo-tree-id19862 . -1) (undo-tree-id19863 . -1) (undo-tree-id19864 . -1) (undo-tree-id19865 . -1) (undo-tree-id19866 . -1) (undo-tree-id19867 . -1) (undo-tree-id19868 . -1) (undo-tree-id19869 . -1) (undo-tree-id19870 . -1) (#("m" 0 1 (fontified t)) . -2753) (undo-tree-id19871 . -1) (undo-tree-id19872 . -1) (undo-tree-id19873 . -1) (undo-tree-id19874 . -1) (undo-tree-id19875 . -1) (undo-tree-id19876 . -1) (undo-tree-id19877 . -1) (undo-tree-id19878 . -1) (undo-tree-id19879 . -1) (undo-tree-id19880 . -1) (undo-tree-id19881 . -1) 2754) nil (26041 2424 642902 483000) 0 nil])
([nil nil ((2749 . 2751)) nil (26041 2424 642732 771000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2754 2767 nil nil nil t #s(yas--exit 2768 nil))) #s(yas--exit 2768 nil) 113 nil #s(yas--field 1 2754 2767 nil nil nil t #s(yas--exit 2768 nil)) nil nil)) (2750 . 2756) (#("new(${1:t})$0" 0 13 (fontified nil)) . 2750) (2750 . 2763) (#("n" 0 1 (fontified nil)) . 2750) (2750 . 2751) (#("new(…)" 0 6 (fontified nil)) . -2750) (2750 . 2756) (#("n" 0 1 (fontified t)) . -2750) (undo-tree-id19763 . -1) (undo-tree-id19764 . -1) (undo-tree-id19765 . -1) (undo-tree-id19766 . -1) (undo-tree-id19767 . -1) (undo-tree-id19768 . -1) 2751) nil (26041 2424 642731 175000) 0 nil])
([nil nil ((2755 . 2756) (#("t" 0 1 (fontified nil)) . 2755) (undo-tree-id19762 . -1) (2754 . 2755)) nil (26041 2424 642724 896000) 0 nil])
([nil nil ((2755 . 2759)) nil (26041 2424 642723 135000) 0 nil])
([nil nil ((#("v" 0 1 (face font-lock-string-face fontified t)) . -2756) (undo-tree-id19734 . -1) (undo-tree-id19735 . -1) (undo-tree-id19736 . -1) (undo-tree-id19737 . -1) (undo-tree-id19738 . -1) (undo-tree-id19739 . -1) (undo-tree-id19740 . -1) (undo-tree-id19741 . -1) (undo-tree-id19742 . -1) (undo-tree-id19743 . -1) (undo-tree-id19744 . -1) (undo-tree-id19745 . -1) (#("d" 0 1 (face font-lock-string-face fontified t)) . -2757) (undo-tree-id19746 . -1) (undo-tree-id19747 . -1) (undo-tree-id19748 . -1) (undo-tree-id19749 . -1) (undo-tree-id19750 . -1) (undo-tree-id19751 . -1) (undo-tree-id19752 . -1) (undo-tree-id19753 . -1) (undo-tree-id19754 . -1) (undo-tree-id19755 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -2758) (undo-tree-id19756 . -1) (undo-tree-id19757 . -1) (undo-tree-id19758 . -1) (undo-tree-id19759 . -1) (undo-tree-id19760 . -1) (undo-tree-id19761 . -1) 2759) nil (26041 2424 642721 292000) 0 nil])
([nil nil ((2756 . 2759)) nil (26041 2424 642699 696000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-string-face fontified t)) . -2758) (undo-tree-id19731 . -1) (undo-tree-id19732 . -1) (undo-tree-id19733 . -1) 2759) nil (26041 2424 642698 810000) 0 nil])
([nil nil ((2758 . 2766)) nil (26041 2424 642695 567000) 0 nil])
([nil nil ((apply yas--snippet-revive 2750 2768 #s(yas--snippet nil (#s(yas--field 1 2754 2767 nil nil nil t #s(yas--exit 2768 nil))) #s(yas--exit 2768 nil) 113 nil #s(yas--field 1 2754 2767 nil nil nil t #s(yas--exit 2768 nil)) nil nil))) nil (26041 2424 642694 992000) 0 nil])
([nil nil ((2768 . 2769)) nil (26041 2424 642694 368000) 0 nil])
([nil nil ((2769 . 2770)) nil (26041 2424 642693 732000) 0 nil])
([nil nil ((apply yas--snippet-revive 2769 2777 #s(yas--snippet nil nil #s(yas--exit 2777 nil) 114 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2777 nil) 114 nil nil nil nil)) (2769 . 2777) (#("unwrap()$0" 0 10 (fontified nil)) . 2769) (2769 . 2779) (#("u" 0 1 (fontified nil)) . 2769) (2769 . 2770) (#("unwrap()" 0 8 (fontified nil)) . -2769) (2769 . 2777) (#("u" 0 1 (fontified t)) . -2769) (undo-tree-id19725 . -1) (undo-tree-id19726 . -1) (undo-tree-id19727 . -1) (undo-tree-id19728 . -1) (undo-tree-id19729 . -1) (undo-tree-id19730 . -1) 2770) nil (26041 2424 642691 954000) 0 nil])
([nil nil ((2777 . 2780)) nil (26041 2424 642684 586000) 0 nil])
([nil nil ((apply yas--snippet-revive 2778 2786 #s(yas--snippet nil nil #s(yas--exit 2786 nil) 115 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2786 nil) 115 nil nil nil nil)) (2778 . 2786) (#("as_ptr()$0" 0 10 (fontified nil)) . 2778) (2778 . 2788) (#("as" 0 2 (fontified nil)) . 2778) (2778 . 2780) (#("as_ptr()" 0 8 (fontified nil)) . -2778) (2778 . 2786) (#("as" 0 2 (face font-lock-keyword-face fontified t)) . -2778) (undo-tree-id19711 . -2) (undo-tree-id19712 . -2) (undo-tree-id19713 . -1) (undo-tree-id19714 . -1) (undo-tree-id19715 . -1) (undo-tree-id19716 . -2) (undo-tree-id19717 . -2) (undo-tree-id19718 . -2) (undo-tree-id19719 . -2) (undo-tree-id19720 . -2) (undo-tree-id19721 . -2) (undo-tree-id19722 . -2) (undo-tree-id19723 . -2) (undo-tree-id19724 . -2) 2780) nil (26041 2424 642679 900000) 0 nil])
([nil nil ((2786 . 2790) (t 26041 2424 674436 760000)) nil (26041 2435 280743 616000) 0 nil])
([nil nil ((2790 . 2796)) nil (26041 2435 280742 638000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -2793) (undo-tree-id20591 . -1) (undo-tree-id20592 . -1) (undo-tree-id20593 . -1) (undo-tree-id20594 . -1) (undo-tree-id20595 . -1) (undo-tree-id20596 . -1) (undo-tree-id20597 . -1) (undo-tree-id20598 . -1) (undo-tree-id20599 . -1) (undo-tree-id20600 . -1) (undo-tree-id20601 . -1) (undo-tree-id20602 . -1) (undo-tree-id20603 . -1) (undo-tree-id20604 . -1) (undo-tree-id20605 . -1) (undo-tree-id20606 . -1) (undo-tree-id20607 . -1) (#("n" 0 1 (fontified t)) . -2794) (undo-tree-id20608 . -1) (undo-tree-id20609 . -1) (undo-tree-id20610 . -1) (undo-tree-id20611 . -1) (undo-tree-id20612 . -1) (undo-tree-id20613 . -1) (undo-tree-id20614 . -1) (undo-tree-id20615 . -1) (undo-tree-id20616 . -1) (undo-tree-id20617 . -1) (undo-tree-id20618 . -1) (undo-tree-id20619 . -1) (#("t" 0 1 (fontified t)) . -2795) (undo-tree-id20620 . -1) (undo-tree-id20621 . -1) (undo-tree-id20622 . -1) (undo-tree-id20623 . -1) (undo-tree-id20624 . -1) (undo-tree-id20625 . -1) (undo-tree-id20626 . -1) 2796) nil (26041 2435 280740 268000) 0 nil])
([nil nil ((2793 . 2798)) nil (26041 2435 280714 586000) 0 nil])
([nil nil ((2797 . 2803) (#("c" 0 1 (fontified nil)) . 2797) (2797 . 2798) (#("c_char" 0 6 (fontified nil)) . -2797) (2797 . 2803) (#("c" 0 1 (fontified t)) . -2797) (undo-tree-id20585 . -1) (undo-tree-id20586 . -1) (undo-tree-id20587 . -1) (undo-tree-id20588 . -1) (undo-tree-id20589 . -1) (undo-tree-id20590 . -1) 2798) nil (26041 2435 280710 539000) 0 nil])
([nil nil ((#("char" 0 4 (fontified t)) . -2799) (undo-tree-id20861 . -4) (undo-tree-id20862 . -4) (undo-tree-id20863 . -4) (undo-tree-id20864 . -4) (undo-tree-id20865 . -4) (undo-tree-id20866 . -4) (undo-tree-id20867 . -4) (undo-tree-id20868 . -4) (undo-tree-id20869 . -4) (undo-tree-id20870 . -4) (undo-tree-id20871 . -4) (undo-tree-id20872 . -4) (undo-tree-id20873 . -4) (undo-tree-id20874 . -3) (undo-tree-id20875 . -3) (undo-tree-id20876 . -3) (undo-tree-id20877 . -3) (undo-tree-id20878 . -3) (undo-tree-id20879 . -3) (undo-tree-id20880 . -3) (undo-tree-id20881 . -2) (undo-tree-id20882 . -1) (undo-tree-id20883 . -4) (undo-tree-id20884 . -4) (undo-tree-id20885 . -4) (undo-tree-id20886 . -4) (undo-tree-id20887 . -4) (undo-tree-id20888 . -4) (undo-tree-id20889 . -4) 2803 (t 26041 2435 311104 77000)) nil (26041 2488 641893 579000) 0 nil])
([nil nil ((#("c_" 0 2 (fontified t)) . -2797) (undo-tree-id20828 . -2) (undo-tree-id20829 . -2) (undo-tree-id20830 . -2) (undo-tree-id20831 . -2) (undo-tree-id20832 . -2) (undo-tree-id20833 . -2) (undo-tree-id20834 . -2) (undo-tree-id20835 . -2) (undo-tree-id20836 . -2) (undo-tree-id20837 . -2) (undo-tree-id20838 . -2) (undo-tree-id20839 . -2) (undo-tree-id20840 . -2) (undo-tree-id20841 . -2) (undo-tree-id20842 . -2) (undo-tree-id20843 . -2) (undo-tree-id20844 . -2) (undo-tree-id20845 . -2) (undo-tree-id20846 . -2) (undo-tree-id20847 . -2) (undo-tree-id20848 . -2) (undo-tree-id20849 . -2) (undo-tree-id20850 . -2) (undo-tree-id20851 . -1) (undo-tree-id20852 . -2) (undo-tree-id20853 . -2) (undo-tree-id20854 . -2) (undo-tree-id20855 . -2) (undo-tree-id20856 . -2) (undo-tree-id20857 . -2) (undo-tree-id20858 . -2) (undo-tree-id20859 . -2) (undo-tree-id20860 . -2) 2799) nil (26041 2488 641872 509000) 0 nil])
([nil nil ((#("const " 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t)) . -2791) (undo-tree-id20766 . -6) (undo-tree-id20767 . -6) (undo-tree-id20768 . -2) (undo-tree-id20769 . -2) (undo-tree-id20770 . -2) (undo-tree-id20771 . -2) (undo-tree-id20772 . -2) (undo-tree-id20773 . -2) (undo-tree-id20774 . -2) (undo-tree-id20775 . -2) (undo-tree-id20776 . -2) (undo-tree-id20777 . -2) (undo-tree-id20778 . -2) (undo-tree-id20779 . -2) (undo-tree-id20780 . -2) (undo-tree-id20781 . -2) (undo-tree-id20782 . -2) (undo-tree-id20783 . -2) (undo-tree-id20784 . -6) (undo-tree-id20785 . -6) (undo-tree-id20786 . -6) (undo-tree-id20787 . -6) (undo-tree-id20788 . -6) (undo-tree-id20789 . -6) (undo-tree-id20790 . -6) (undo-tree-id20791 . -6) (undo-tree-id20792 . -6) (undo-tree-id20793 . -6) (undo-tree-id20794 . -6) (undo-tree-id20795 . -6) (undo-tree-id20796 . -6) (undo-tree-id20797 . -6) (undo-tree-id20798 . -6) (undo-tree-id20799 . -6) (undo-tree-id20800 . -6) (undo-tree-id20801 . -6) (undo-tree-id20802 . -6) (undo-tree-id20803 . -6) (undo-tree-id20804 . -6) (undo-tree-id20805 . -6) (undo-tree-id20806 . -6) (undo-tree-id20807 . -6) (undo-tree-id20808 . -6) (undo-tree-id20809 . -6) (undo-tree-id20810 . -6) (undo-tree-id20811 . -6) (undo-tree-id20812 . -5) (undo-tree-id20813 . -4) (undo-tree-id20814 . -3) (undo-tree-id20815 . -2) (undo-tree-id20816 . -1) (undo-tree-id20817 . -6) (undo-tree-id20818 . -6) (undo-tree-id20819 . -6) (undo-tree-id20820 . -6) (undo-tree-id20821 . -6) (undo-tree-id20822 . -6) (undo-tree-id20823 . -6) (undo-tree-id20824 . -6) (undo-tree-id20825 . -6) (undo-tree-id20826 . -6) (undo-tree-id20827 . -6) 2797) nil (26041 2488 641492 619000) 0 nil])
([nil nil ((#("as *" 0 2 (face font-lock-keyword-face fontified t) 2 4 (fontified t)) . -2787) (undo-tree-id20698 . -4) (undo-tree-id20699 . -4) (undo-tree-id20700 . -4) (undo-tree-id20701 . -4) (undo-tree-id20702 . -4) (undo-tree-id20703 . -4) (undo-tree-id20704 . -4) (undo-tree-id20705 . -4) (undo-tree-id20706 . -4) (undo-tree-id20707 . -4) (undo-tree-id20708 . -4) (undo-tree-id20709 . -4) (undo-tree-id20710 . -4) (undo-tree-id20711 . -4) (undo-tree-id20712 . -4) (undo-tree-id20713 . -4) (undo-tree-id20714 . -4) (undo-tree-id20715 . -4) (undo-tree-id20716 . -4) (undo-tree-id20717 . -4) (undo-tree-id20718 . -4) (undo-tree-id20719 . -4) (undo-tree-id20720 . -4) (undo-tree-id20721 . -4) (undo-tree-id20722 . -4) (undo-tree-id20723 . -4) (undo-tree-id20724 . -4) (undo-tree-id20725 . -4) (undo-tree-id20726 . -4) (undo-tree-id20727 . -4) (undo-tree-id20728 . -4) (undo-tree-id20729 . -4) (undo-tree-id20730 . -4) (undo-tree-id20731 . -4) (undo-tree-id20732 . -4) (undo-tree-id20733 . -4) (undo-tree-id20734 . -4) (undo-tree-id20735 . -4) (undo-tree-id20736 . -4) (undo-tree-id20737 . -4) (undo-tree-id20738 . -4) (undo-tree-id20739 . -4) (undo-tree-id20740 . -4) (undo-tree-id20741 . -4) (undo-tree-id20742 . -4) (undo-tree-id20743 . -4) (undo-tree-id20744 . -4) (undo-tree-id20745 . -4) (undo-tree-id20746 . -4) (undo-tree-id20747 . -4) (undo-tree-id20748 . -4) (undo-tree-id20749 . -4) (undo-tree-id20750 . -3) (undo-tree-id20751 . -2) (undo-tree-id20752 . -1) (undo-tree-id20753 . -4) (undo-tree-id20754 . -4) (undo-tree-id20755 . -4) (undo-tree-id20756 . -4) (undo-tree-id20757 . -4) (undo-tree-id20758 . -4) (undo-tree-id20759 . -4) (undo-tree-id20760 . -4) (undo-tree-id20761 . -4) (undo-tree-id20762 . -4) (undo-tree-id20763 . -4) (undo-tree-id20764 . -4) (undo-tree-id20765 . -4) 2791) nil (26041 2488 641447 425000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2786) (undo-tree-id20627 . -1) (undo-tree-id20628 . -1) (undo-tree-id20629 . -1) (undo-tree-id20630 . -1) (undo-tree-id20631 . -1) (undo-tree-id20632 . -1) (undo-tree-id20633 . -1) (undo-tree-id20634 . -1) (undo-tree-id20635 . -1) (undo-tree-id20636 . -1) (undo-tree-id20637 . -1) (undo-tree-id20638 . -1) (undo-tree-id20639 . -1) (undo-tree-id20640 . -1) (undo-tree-id20641 . -1) (undo-tree-id20642 . -1) (undo-tree-id20643 . -1) (undo-tree-id20644 . -1) (undo-tree-id20645 . -1) (undo-tree-id20646 . -1) (undo-tree-id20647 . -1) (undo-tree-id20648 . -1) (undo-tree-id20649 . -1) (undo-tree-id20650 . -1) (undo-tree-id20651 . -1) (undo-tree-id20652 . -1) (undo-tree-id20653 . -1) (undo-tree-id20654 . -1) (undo-tree-id20655 . -1) (undo-tree-id20656 . -1) (undo-tree-id20657 . -1) (undo-tree-id20658 . -1) (undo-tree-id20659 . -1) (undo-tree-id20660 . -1) (undo-tree-id20661 . -1) (undo-tree-id20662 . -1) (undo-tree-id20663 . -1) (undo-tree-id20664 . -1) (undo-tree-id20665 . -1) (undo-tree-id20666 . -1) (undo-tree-id20667 . -1) (undo-tree-id20668 . -1) (undo-tree-id20669 . -1) (undo-tree-id20670 . -1) (undo-tree-id20671 . -1) (undo-tree-id20672 . -1) (undo-tree-id20673 . -1) (undo-tree-id20674 . -1) (undo-tree-id20675 . -1) (undo-tree-id20676 . -1) (undo-tree-id20677 . -1) (undo-tree-id20678 . -1) (undo-tree-id20679 . -1) (undo-tree-id20680 . -1) (undo-tree-id20681 . -1) (undo-tree-id20682 . -1) (undo-tree-id20683 . -1) (undo-tree-id20684 . -1) (undo-tree-id20685 . -1) (undo-tree-id20686 . -1) (undo-tree-id20687 . -1) (undo-tree-id20688 . -1) (undo-tree-id20689 . -1) (undo-tree-id20690 . -1) (undo-tree-id20691 . -1) (undo-tree-id20692 . -1) (undo-tree-id20693 . -1) (undo-tree-id20694 . -1) (undo-tree-id20695 . -1) (undo-tree-id20696 . -1) (undo-tree-id20697 . -1) 2787) nil (26041 2488 641395 76000) 0 nil])
([nil nil ((2786 . 2787) (t 26041 2488 671107 354000)) nil (26041 2498 957264 886000) 0 nil])
([nil nil ((2787 . 2790)) nil (26041 2498 957263 989000) 0 nil])
([nil nil ((2790 . 2796)) nil (26041 2498 957263 407000) 0 nil])
([nil nil ((2796 . 2797)) nil (26041 2498 957262 772000) 0 nil])
([nil nil ((2797 . 2798)) nil (26041 2498 957262 44000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -2793) (undo-tree-id20896 . -1) (undo-tree-id20897 . -1) (undo-tree-id20898 . -1) (undo-tree-id20899 . -1) (undo-tree-id20900 . -1) (undo-tree-id20901 . -1) (undo-tree-id20902 . -1) (undo-tree-id20903 . -1) (undo-tree-id20904 . -1) (undo-tree-id20905 . -1) (undo-tree-id20906 . -1) (undo-tree-id20907 . -1) (undo-tree-id20908 . -1) (undo-tree-id20909 . -1) (undo-tree-id20910 . -1) (undo-tree-id20911 . -1) (undo-tree-id20912 . -1) (undo-tree-id20913 . -1) (undo-tree-id20914 . -1) (undo-tree-id20915 . -1) (undo-tree-id20916 . -1) (undo-tree-id20917 . -1) (undo-tree-id20918 . -1) (undo-tree-id20919 . -1) (undo-tree-id20920 . -1) (undo-tree-id20921 . -1) (undo-tree-id20922 . -1) (undo-tree-id20923 . -1) (undo-tree-id20924 . -1) (undo-tree-id20925 . -1) (undo-tree-id20926 . -1) (undo-tree-id20927 . -1) (undo-tree-id20928 . -1) (undo-tree-id20929 . -1) (undo-tree-id20930 . -1) (#("n" 0 1 (fontified t)) . -2794) (undo-tree-id20931 . -1) (undo-tree-id20932 . -1) (undo-tree-id20933 . -1) (undo-tree-id20934 . -1) (undo-tree-id20935 . -1) (undo-tree-id20936 . -1) (undo-tree-id20937 . -1) (undo-tree-id20938 . -1) (undo-tree-id20939 . -1) (undo-tree-id20940 . -1) (undo-tree-id20941 . -1) (undo-tree-id20942 . -1) (undo-tree-id20943 . -1) (undo-tree-id20944 . -1) (undo-tree-id20945 . -1) (undo-tree-id20946 . -1) (undo-tree-id20947 . -1) (undo-tree-id20948 . -1) (undo-tree-id20949 . -1) (undo-tree-id20950 . -1) (undo-tree-id20951 . -1) (undo-tree-id20952 . -1) (undo-tree-id20953 . -1) (undo-tree-id20954 . -1) (undo-tree-id20955 . -1) (undo-tree-id20956 . -1) (undo-tree-id20957 . -1) (undo-tree-id20958 . -1) (undo-tree-id20959 . -1) (undo-tree-id20960 . -1) (#("t" 0 1 (fontified t)) . -2795) (undo-tree-id20961 . -1) (undo-tree-id20962 . -1) (undo-tree-id20963 . -1) (undo-tree-id20964 . -1) (undo-tree-id20965 . -1) (undo-tree-id20966 . -1) (undo-tree-id20967 . -1) (undo-tree-id20968 . -1) (undo-tree-id20969 . -1) (undo-tree-id20970 . -1) (undo-tree-id20971 . -1) (undo-tree-id20972 . -1) (undo-tree-id20973 . -1) (undo-tree-id20974 . -1) (undo-tree-id20975 . -1) (undo-tree-id20976 . -1) (undo-tree-id20977 . -1) (undo-tree-id20978 . -1) (undo-tree-id20979 . -1) (undo-tree-id20980 . -1) (undo-tree-id20981 . -1) (undo-tree-id20982 . -1) (undo-tree-id20983 . -1) (undo-tree-id20984 . -1) (undo-tree-id20985 . -1) (undo-tree-id20986 . -1) (#(" " 0 1 (fontified t)) . -2796) (undo-tree-id20987 . -1) (undo-tree-id20988 . -1) (undo-tree-id20989 . -1) (undo-tree-id20990 . -1) (undo-tree-id20991 . -1) (undo-tree-id20992 . -1) (undo-tree-id20993 . -1) (undo-tree-id20994 . -1) (undo-tree-id20995 . -1) (undo-tree-id20996 . -1) (undo-tree-id20997 . -1) (undo-tree-id20998 . -1) (undo-tree-id20999 . -1) (undo-tree-id21000 . -1) (undo-tree-id21001 . -1) (#("c" 0 1 (fontified t)) . -2797) (undo-tree-id21002 . -1) (undo-tree-id21003 . -1) (undo-tree-id21004 . -1) (undo-tree-id21005 . -1) (undo-tree-id21006 . -1) (undo-tree-id21007 . -1) 2798) nil (26041 2498 957255 569000) 0 nil])
([nil nil ((2793 . 2795)) nil (26041 2498 956891 460000) 0 nil])
([nil nil ((2795 . 2798)) nil (26041 2498 956890 197000) 0 nil])
([nil nil ((2797 . 2803) (#("c" 0 1 (fontified nil)) . 2797) (2797 . 2798) (#("c_char" 0 6 (fontified nil)) . -2797) (2797 . 2803) (#("c" 0 1 (fontified t)) . -2797) (undo-tree-id20890 . -1) (undo-tree-id20891 . -1) (undo-tree-id20892 . -1) (undo-tree-id20893 . -1) (undo-tree-id20894 . -1) (undo-tree-id20895 . -1) 2798) nil (26041 2498 956885 805000) 0 nil])
([nil nil ((2701 . 2710) (t 26041 2498 987774 653000)) nil (26041 2540 9789 164000) 0 nil])
([nil nil ((2710 . 2717)) nil (26041 2540 9788 383000) 0 nil])
([nil nil ((2717 . 2721)) nil (26041 2540 9787 771000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2719) (undo-tree-id21072 . -1) (undo-tree-id21073 . -1) (undo-tree-id21074 . -1) (undo-tree-id21075 . -1) (undo-tree-id21076 . -1) (undo-tree-id21077 . -1) (undo-tree-id21078 . -1) (undo-tree-id21079 . -1) (undo-tree-id21080 . -1) (undo-tree-id21081 . -1) (undo-tree-id21082 . -1) (undo-tree-id21083 . -1) (undo-tree-id21084 . -1) (undo-tree-id21085 . -1) (#("=" 0 1 (fontified t)) . -2720) (undo-tree-id21086 . -1) (undo-tree-id21087 . -1) (undo-tree-id21088 . -1) (undo-tree-id21089 . -1) (undo-tree-id21090 . -1) (undo-tree-id21091 . -1) (undo-tree-id21092 . -1) (undo-tree-id21093 . -1) (undo-tree-id21094 . -1) 2721) nil (26041 2540 9785 964000) 0 nil])
([nil nil ((2719 . 2723)) nil (26041 2540 9768 791000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2719) (undo-tree-id21008 . -1) (undo-tree-id21009 . -1) (undo-tree-id21010 . -1) (undo-tree-id21011 . -1) (undo-tree-id21012 . -1) (undo-tree-id21013 . -1) (undo-tree-id21014 . -1) (undo-tree-id21015 . -1) (undo-tree-id21016 . -1) (undo-tree-id21017 . -1) (undo-tree-id21018 . -1) (undo-tree-id21019 . -1) (undo-tree-id21020 . -1) (undo-tree-id21021 . -1) (undo-tree-id21022 . -1) (undo-tree-id21023 . -1) (undo-tree-id21024 . -1) (undo-tree-id21025 . -1) (undo-tree-id21026 . -1) (undo-tree-id21027 . -1) (undo-tree-id21028 . -1) (undo-tree-id21029 . -1) (undo-tree-id21030 . -1) (undo-tree-id21031 . -1) (#("=" 0 1 (fontified t)) . -2720) (undo-tree-id21032 . -1) (undo-tree-id21033 . -1) (undo-tree-id21034 . -1) (undo-tree-id21035 . -1) (undo-tree-id21036 . -1) (undo-tree-id21037 . -1) (undo-tree-id21038 . -1) (undo-tree-id21039 . -1) (undo-tree-id21040 . -1) (undo-tree-id21041 . -1) (undo-tree-id21042 . -1) (undo-tree-id21043 . -1) (undo-tree-id21044 . -1) (undo-tree-id21045 . -1) (undo-tree-id21046 . -1) (undo-tree-id21047 . -1) (undo-tree-id21048 . -1) (undo-tree-id21049 . -1) (undo-tree-id21050 . -1) (undo-tree-id21051 . -1) (#(" " 0 1 (fontified t)) . -2721) (undo-tree-id21052 . -1) (undo-tree-id21053 . -1) (undo-tree-id21054 . -1) (undo-tree-id21055 . -1) (undo-tree-id21056 . -1) (undo-tree-id21057 . -1) (undo-tree-id21058 . -1) (undo-tree-id21059 . -1) (undo-tree-id21060 . -1) (undo-tree-id21061 . -1) (undo-tree-id21062 . -1) (undo-tree-id21063 . -1) (undo-tree-id21064 . -1) (undo-tree-id21065 . -1) (undo-tree-id21066 . -1) (undo-tree-id21067 . -1) (#("d" 0 1 (fontified t)) . -2722) (undo-tree-id21068 . -1) (undo-tree-id21069 . -1) (undo-tree-id21070 . -1) (undo-tree-id21071 . -1) 2723) nil (26041 2540 9764 659000) 0 nil])
([nil nil ((2719 . 2723)) nil (26041 2540 8991 4000) 0 nil])
([nil nil ((2722 . 2733)) nil (26041 2540 8989 647000) 0 nil])
([nil nil ((2734 . 2735)) nil (26041 2540 8985 524000) 0 nil])
([nil nil ((#("video0\"" 0 7 (face font-lock-string-face fontified t)) . -2794) (undo-tree-id21128 . -7) (undo-tree-id21129 . -6) (undo-tree-id21130 . -6) (undo-tree-id21131 . -7) 2801 (t 26041 2540 41110 507000)) nil (26041 2544 801939 633000) 0 nil])
([nil nil ((#("dev/" 0 4 (face font-lock-string-face fontified t)) . -2790) (undo-tree-id21121 . -4) (undo-tree-id21122 . -4) (undo-tree-id21123 . -3) (undo-tree-id21124 . -4) (undo-tree-id21125 . -4) (undo-tree-id21126 . -4) (undo-tree-id21127 . -4) 2794) nil (26041 2544 801935 200000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -2788) (undo-tree-id21101 . -1) (undo-tree-id21102 . -1) (undo-tree-id21103 . -1) (undo-tree-id21104 . -1) (undo-tree-id21105 . -1) (undo-tree-id21106 . -1) (undo-tree-id21107 . -1) (undo-tree-id21108 . -1) (undo-tree-id21109 . -1) (undo-tree-id21110 . -1) (undo-tree-id21111 . -1) (#("/" 0 1 (face font-lock-string-face fontified t)) . -2789) (undo-tree-id21112 . -1) (undo-tree-id21113 . -1) (undo-tree-id21114 . -1) (undo-tree-id21115 . -1) (undo-tree-id21116 . -1) (undo-tree-id21117 . -1) (undo-tree-id21118 . -1) (undo-tree-id21119 . -1) (undo-tree-id21120 . -1) 2790) nil (26041 2544 801928 585000) 0 nil])
([nil nil ((2788 . 2789)) nil (26041 2544 801913 345000) 0 nil])
([nil nil ((2788 . 2792) (#("p" 0 1 (fontified nil)) . 2788) (2788 . 2789) (#("path" 0 4 (fontified nil)) . -2788) (2788 . 2792) (#("p" 0 1 (fontified t)) . -2788) (undo-tree-id21095 . -1) (undo-tree-id21096 . -1) (undo-tree-id21097 . -1) (undo-tree-id21098 . -1) (undo-tree-id21099 . -1) (undo-tree-id21100 . -1) 2789) nil (26041 2544 801909 148000) 0 nil])
([nil nil ((2721 . 2722) (t 26041 2544 834444 134000)) nil (26041 2561 456796 260000) 0 nil])
([nil nil ((2721 . 2722)) nil (26041 2561 456795 411000) 0 nil])
([nil nil ((2721 . 2728) (#("C" 0 1 (fontified nil)) . 2721) (2721 . 2722) (#("CString" 0 7 (fontified nil)) . -2721) (2721 . 2728) (#("C" 0 1 (face font-lock-type-face fontified t)) . -2721) (undo-tree-id21181 . -1) (undo-tree-id21182 . -1) (undo-tree-id21183 . -1) (undo-tree-id21184 . -1) (undo-tree-id21185 . -1) (undo-tree-id21186 . -1) 2722) nil (26041 2561 456794 162000) 0 nil])
([nil nil ((2728 . 2731)) nil (26041 2561 456788 817000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2734 2735 nil nil nil nil #s(yas--exit 2736 nil))) #s(yas--exit 2736 nil) 116 nil #s(yas--field 1 2734 2735 nil nil nil nil #s(yas--exit 2736 nil)) nil nil)) (2730 . 2736) (#("new(${1:t})$0" 0 13 (fontified nil)) . 2730) (2730 . 2743) (#("n" 0 1 (fontified nil)) . 2730) (2730 . 2731) (#("new(…)" 0 6 (fontified nil)) . -2730) (2730 . 2736) (#("n" 0 1 (fontified t)) . -2730) (undo-tree-id21175 . -1) (undo-tree-id21176 . -1) (undo-tree-id21177 . -1) (undo-tree-id21178 . -1) (undo-tree-id21179 . -1) (undo-tree-id21180 . -1) 2731) nil (26041 2561 456787 284000) 0 nil])
([nil nil ((apply yas--snippet-revive 2730 2736 #s(yas--snippet nil (#s(yas--field 1 2734 2735 nil nil nil nil #s(yas--exit 2736 nil))) #s(yas--exit 2736 nil) 116 nil #s(yas--field 1 2734 2735 nil nil nil nil #s(yas--exit 2736 nil)) nil nil))) nil (26041 2561 456781 243000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -2734) (undo-tree-id21143 . -1) (undo-tree-id21144 . -1) (undo-tree-id21145 . -1) (undo-tree-id21146 . -1) (undo-tree-id21147 . -1) (undo-tree-id21148 . -1) (undo-tree-id21149 . -1) (undo-tree-id21150 . -1) (undo-tree-id21151 . -1) (undo-tree-id21152 . -1) (undo-tree-id21153 . -1) (undo-tree-id21154 . -1) (undo-tree-id21155 . -1) (undo-tree-id21156 . -1) (undo-tree-id21157 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -2735) (undo-tree-id21158 . -1) (undo-tree-id21159 . -1) (undo-tree-id21160 . -1) (undo-tree-id21161 . -1) (undo-tree-id21162 . -1) (undo-tree-id21163 . -1) (undo-tree-id21164 . -1) (undo-tree-id21165 . -1) (undo-tree-id21166 . -1) (undo-tree-id21167 . -1) (undo-tree-id21168 . -1) (undo-tree-id21169 . -1) (#(" " 0 1 (fontified t)) . -2736) (undo-tree-id21170 . -1) (undo-tree-id21171 . -1) (undo-tree-id21172 . -1) (undo-tree-id21173 . -1) (undo-tree-id21174 . -1) 2737) nil (26041 2561 456778 905000) 0 nil])
([nil nil ((2747 . 2749)) nil (26041 2561 456754 139000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -2748) (undo-tree-id21132 . -1) (undo-tree-id21133 . -1) (undo-tree-id21134 . -1) (undo-tree-id21135 . -1) (undo-tree-id21136 . -1) (undo-tree-id21137 . -1) (undo-tree-id21138 . -1) (undo-tree-id21139 . -1) (undo-tree-id21140 . -1) (undo-tree-id21141 . -1) (undo-tree-id21142 . -1) 2749) nil (26041 2561 456749 936000) 0 nil])
([nil nil ((#("unwrap()" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-4-face) fontified t) 7 8 (face (rainbow-delimiters-depth-4-face) fontified t)) . -2808) (undo-tree-id21251 . -8) (undo-tree-id21252 . -8) (undo-tree-id21253 . -6) (undo-tree-id21254 . -8) (undo-tree-id21255 . -8) (undo-tree-id21256 . -8) (undo-tree-id21257 . -8) (undo-tree-id21258 . -8) 2816 (t 26041 2561 487778 489000)) nil (26041 2573 958837 138000) 0 nil])
([nil nil ((#("path)." 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t) 5 6 (fontified t)) . -2802) (undo-tree-id21240 . -6) (undo-tree-id21241 . -6) (undo-tree-id21242 . -4) (undo-tree-id21243 . -6) (undo-tree-id21244 . -6) (undo-tree-id21245 . -6) (undo-tree-id21246 . -6) (undo-tree-id21247 . -6) (undo-tree-id21248 . -6) (undo-tree-id21249 . -6) (undo-tree-id21250 . -6) 2808) nil (26041 2573 958829 798000) 0 nil])
([nil nil ((#("new(" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-4-face) fontified t)) . -2798) (undo-tree-id21226 . -4) (undo-tree-id21227 . -4) (undo-tree-id21228 . -3) (undo-tree-id21229 . -4) (undo-tree-id21230 . -4) (undo-tree-id21231 . -4) (undo-tree-id21232 . -4) (undo-tree-id21233 . -4) (undo-tree-id21234 . -4) (undo-tree-id21235 . -4) (undo-tree-id21236 . -4) (undo-tree-id21237 . -4) (undo-tree-id21238 . -4) (undo-tree-id21239 . -4) 2802) nil (26041 2573 958821 492000) 0 nil])
([nil nil ((#("CString::" 0 7 (face font-lock-type-face fontified t) 7 9 (fontified t)) . -2789) (undo-tree-id21204 . -9) (undo-tree-id21205 . -9) (undo-tree-id21206 . -7) (undo-tree-id21207 . -7) (undo-tree-id21208 . -7) (undo-tree-id21209 . -7) (undo-tree-id21210 . -7) (undo-tree-id21211 . -7) (undo-tree-id21212 . -9) (undo-tree-id21213 . -9) (undo-tree-id21214 . -9) (undo-tree-id21215 . -9) (undo-tree-id21216 . -9) (undo-tree-id21217 . -9) (undo-tree-id21218 . -9) (undo-tree-id21219 . -9) (undo-tree-id21220 . -9) (undo-tree-id21221 . -9) (undo-tree-id21222 . -9) (undo-tree-id21223 . -9) (undo-tree-id21224 . -9) (undo-tree-id21225 . -9) 2798) nil (26041 2573 958809 578000) 0 nil])
([nil nil ((2789 . 2790)) nil (26041 2573 958562 189000) 0 nil])
([nil nil ((2789 . 2793) (#("p" 0 1 (fontified nil)) . 2789) (2789 . 2790) (#("path" 0 4 (fontified nil)) . -2789) (2789 . 2793) (#("p" 0 1 (fontified t)) . -2789) (undo-tree-id21193 . -1) (undo-tree-id21194 . -1) (undo-tree-id21195 . -1) (undo-tree-id21196 . -1) (undo-tree-id21197 . -1) (undo-tree-id21198 . -1) (undo-tree-id21199 . -1) (undo-tree-id21200 . -1) (undo-tree-id21201 . -1) (undo-tree-id21202 . -1) (undo-tree-id21203 . -1) 2790) nil (26041 2573 958560 370000) 0 nil])
([nil nil ((2748 . 2750)) nil (26041 2573 958549 944000) 0 nil])
([nil nil ((apply yas--snippet-revive 2749 2757 #s(yas--snippet nil nil #s(yas--exit 2757 nil) 117 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2757 nil) 117 nil nil nil nil)) (2749 . 2757) (#("unwrap()$0" 0 10 (fontified nil)) . 2749) (2749 . 2759) (#("u" 0 1 (fontified nil)) . 2749) (2749 . 2750) (#("unwrap()" 0 8 (fontified nil)) . -2749) (2749 . 2757) (#("u" 0 1 (fontified t)) . -2749) (undo-tree-id21187 . -1) (undo-tree-id21188 . -1) (undo-tree-id21189 . -1) (undo-tree-id21190 . -1) (undo-tree-id21191 . -1) (undo-tree-id21192 . -1) 2750) nil (26041 2963 180933 304000) 0 nil])
([nil nil ((#("       use libffi::high::Closure2;
        let image_handler = |image: *mut ffi::zbar_image_t, _userdata: *const c_void| {
                let mut symbol = ffi::zbar_image_first_symbol(image);

            while !symbol.is_null() {
                    let typ = ffi::zbar_symbol_get_type(symbol);
                    let data = ffi::zbar_symbol_get_data(symbol);
                    println!(
                        \"decoded {} symbol \\\"{:?}\\\"\\n\",
                        CStr::from_ptr(ffi::zbar_get_symbol_name(typ))
                            .to_str()
                            .unwrap(),
                        CStr::from_ptr(data).to_str()
                    );
                    symbol = ffi::zbar_symbol_next(symbol);
                }
        };
        let closure = Closure2::new(&image_handler);
        let fun = closure.code_ptr();
        let ptr: ffi::zbar_image_data_handler_t = std::mem::transmute(fun);" 0 2 (fontified t) 2 7 (fontified t) 7 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 17 (face font-lock-constant-face fontified t) 17 19 (fontified t) 19 23 (face font-lock-constant-face fontified t) 23 25 (fontified t) 25 33 (face font-lock-type-face fontified t) 33 34 (fontified t) 34 35 (fontified t) 35 43 (fontified t) 43 46 (face font-lock-keyword-face fontified t) 46 47 (fontified t) 47 60 (face font-lock-variable-name-face fontified t) 60 64 (fontified t) 64 69 (face font-lock-variable-name-face fontified t) 69 72 (fontified t) 72 75 (face font-lock-keyword-face fontified t) 75 76 (fontified t) 76 79 (face font-lock-constant-face fontified t) 79 81 (fontified t) 81 95 (fontified t) 95 96 (face font-lock-variable-name-face fontified t) 96 104 (face font-lock-variable-name-face fontified t) 104 107 (fontified t) 107 112 (face font-lock-keyword-face fontified t) 112 113 (fontified t) 113 119 (fontified t) 119 121 (fontified t) 121 122 (face (rainbow-delimiters-depth-3-face) fontified t) 122 123 (fontified t) 123 139 (fontified t) 139 142 (face font-lock-keyword-face fontified t) 142 143 (fontified t) 143 146 (face font-lock-keyword-face fontified t) 146 147 (fontified t) 147 153 (face font-lock-variable-name-face fontified t) 153 156 (fontified t) 156 159 (face font-lock-constant-face fontified t) 159 161 (fontified t) 161 184 (fontified t) 184 185 (face (rainbow-delimiters-depth-4-face) fontified t) 185 190 (fontified t) 190 191 (face (rainbow-delimiters-depth-4-face) fontified t) 191 192 (fontified t) 192 193 (fontified t) 193 194 (fontified t) 194 204 (fontified t) 204 206 (fontified t) 206 211 (face font-lock-keyword-face fontified t) 211 213 (fontified t) 213 219 (fontified t) 219 220 (fontified t) 220 227 (fontified t) 227 228 (face (rainbow-delimiters-depth-4-face) fontified t) 228 229 (face (rainbow-delimiters-depth-4-face) fontified t) 229 230 (fontified t) 230 231 (face (rainbow-delimiters-depth-4-face) fontified t) 231 232 (fontified t) 232 252 (fontified t) 252 255 (face font-lock-keyword-face fontified t) 255 256 (fontified t) 256 259 (face font-lock-variable-name-face fontified t) 259 262 (fontified t) 262 265 (face font-lock-constant-face fontified t) 265 267 (fontified t) 267 287 (fontified t) 287 288 (face (rainbow-delimiters-depth-5-face) fontified t) 288 294 (fontified t) 294 295 (face (rainbow-delimiters-depth-5-face) fontified t) 295 297 (fontified t) 297 317 (fontified t) 317 320 (face font-lock-keyword-face fontified t) 320 321 (fontified t) 321 325 (face font-lock-variable-name-face fontified t) 325 328 (fontified t) 328 331 (face font-lock-constant-face fontified t) 331 333 (fontified t) 333 353 (fontified t) 353 354 (face (rainbow-delimiters-depth-5-face) fontified t) 354 360 (fontified t) 360 361 (face (rainbow-delimiters-depth-5-face) fontified t) 361 363 (fontified t) 363 383 (fontified t) 383 391 (face rust-builtin-formatting-macro fontified t) 391 392 (face (rainbow-delimiters-depth-5-face) fontified t) 392 417 (fontified t) 417 426 (face font-lock-string-face fontified t) 426 428 (face rust-string-interpolation fontified t) 428 441 (face font-lock-string-face fontified t) 441 446 (face font-lock-string-face fontified t) 446 447 (face font-lock-string-face fontified t rear-nonsticky t) 447 448 (fontified t) 448 473 (fontified t) 473 477 (face font-lock-type-face fontified t) 477 479 (fontified t) 479 483 (fontified t) 483 487 (fontified t) 487 488 (face (rainbow-delimiters-depth-6-face) fontified t) 488 491 (face font-lock-constant-face fontified t) 491 493 (fontified t) 493 513 (fontified t) 513 514 (face (rainbow-delimiters-depth-7-face) fontified t) 514 517 (fontified t) 517 518 (face (rainbow-delimiters-depth-7-face) fontified t) 518 519 (face (rainbow-delimiters-depth-6-face) fontified t) 519 520 (fontified t) 520 548 (fontified t) 548 549 (fontified t) 549 555 (fontified t) 555 556 (face (rainbow-delimiters-depth-6-face) fontified t) 556 557 (face (rainbow-delimiters-depth-6-face) fontified t) 557 558 (fontified t) 558 586 (fontified t) 586 587 (fontified t) 587 593 (fontified t) 593 594 (face (rainbow-delimiters-depth-6-face) fontified t) 594 595 (face (rainbow-delimiters-depth-6-face) fontified t) 595 596 (fontified t) 596 621 (fontified t) 621 625 (face font-lock-type-face fontified t) 625 627 (fontified t) 627 635 (fontified t) 635 636 (face (rainbow-delimiters-depth-6-face) fontified t) 636 640 (fontified t) 640 641 (face (rainbow-delimiters-depth-6-face) fontified t) 641 642 (fontified t) 642 648 (fontified t) 648 649 (face (rainbow-delimiters-depth-6-face) fontified t) 649 650 (face (rainbow-delimiters-depth-6-face) fontified t) 650 651 (fontified t) 651 671 (fontified t) 671 672 (face (rainbow-delimiters-depth-5-face) fontified t) 672 673 (fontified t) 673 674 (fontified t) 674 694 (fontified t) 694 700 (fontified t) 700 703 (fontified t) 703 706 (face font-lock-constant-face fontified t) 706 708 (fontified t) 708 719 (fontified t) 719 724 (fontified t) 724 725 (face (rainbow-delimiters-depth-5-face) fontified t) 725 731 (fontified t) 731 732 (face (rainbow-delimiters-depth-5-face) fontified t) 732 734 (fontified t) 734 750 (fontified t) 750 751 (face (rainbow-delimiters-depth-4-face) fontified t rear-nonsticky t) 751 752 (fontified t) 752 760 (fontified t) 760 761 (face (rainbow-delimiters-depth-3-face) fontified t) 761 762 (fontified t) 762 763 (fontified t) 763 771 (fontified t) 771 774 (face font-lock-keyword-face fontified t) 774 775 (fontified t) 775 782 (face font-lock-variable-name-face fontified t) 782 785 (fontified t) 785 793 (face font-lock-type-face fontified t) 793 795 (fontified t) 795 798 (fontified t) 798 799 (face (rainbow-delimiters-depth-3-face) fontified t) 799 800 (face rust-ampersand-face fontified t) 800 813 (fontified t) 813 814 (face (rainbow-delimiters-depth-3-face) fontified t) 814 816 (fontified t) 816 824 (fontified t) 824 827 (face font-lock-keyword-face fontified t) 827 828 (fontified t) 828 831 (face font-lock-variable-name-face fontified t) 831 834 (fontified t) 834 842 (fontified t) 842 850 (fontified t) 850 851 (face (rainbow-delimiters-depth-3-face) fontified t) 851 852 (face (rainbow-delimiters-depth-3-face) fontified t) 852 854 (fontified t) 854 862 (fontified t) 862 865 (face font-lock-keyword-face fontified t) 865 866 (fontified t) 866 869 (face font-lock-variable-name-face fontified t) 869 871 (fontified t) 871 874 (face font-lock-constant-face fontified t) 874 876 (fontified t) 876 901 (fontified t) 901 904 (fontified t) 904 907 (face font-lock-constant-face fontified t) 907 909 (fontified t) 909 912 (face font-lock-constant-face fontified t) 912 914 (fontified t) 914 923 (fontified t) 923 924 (face (rainbow-delimiters-depth-3-face) fontified t) 924 927 (fontified t) 927 928 (face (rainbow-delimiters-depth-3-face) fontified t) 928 929 (fontified t)) . 2836) (undo-tree-id22095 . -929) (undo-tree-id22096 . -2) (undo-tree-id22097 . -929) (undo-tree-id22098 . -854) (undo-tree-id22099 . -929) (undo-tree-id22100 . -929) (undo-tree-id22101 . -929) (undo-tree-id22102 . -763) (undo-tree-id22103 . -558) (undo-tree-id22104 . -558) (undo-tree-id22105 . -558) (undo-tree-id22106 . -558) (undo-tree-id22107 . -558) (undo-tree-id22108 . -558) (undo-tree-id22109 . -558) (undo-tree-id22110 . -558) (undo-tree-id22111 . -558) (undo-tree-id22112 . -558) (undo-tree-id22113 . -558) (undo-tree-id22114 . -558) (undo-tree-id22115 . -558) (undo-tree-id22116 . -558) (undo-tree-id22117 . -558) (undo-tree-id22118 . -558) (undo-tree-id22119 . -558) (undo-tree-id22120 . -558) (undo-tree-id22121 . -558) (undo-tree-id22122 . -558) (undo-tree-id22123 . -558) (undo-tree-id22124 . -558) (undo-tree-id22125 . -558) (undo-tree-id22126 . -558) (undo-tree-id22127 . -558) (undo-tree-id22128 . -558) (undo-tree-id22129 . -558) (undo-tree-id22130 . -558) (undo-tree-id22131 . -558) (undo-tree-id22132 . -558) (undo-tree-id22133 . -558) (undo-tree-id22134 . -558) (undo-tree-id22135 . -558) (undo-tree-id22136 . -558) (undo-tree-id22137 . -558) (undo-tree-id22138 . -558) (undo-tree-id22139 . -558) (undo-tree-id22140 . -929) (undo-tree-id22141 . -929) (undo-tree-id22142 . -929) (undo-tree-id22143 . -853) (undo-tree-id22144 . -815) (undo-tree-id22145 . -762) (undo-tree-id22146 . -751) (undo-tree-id22147 . -731) (undo-tree-id22148 . -646) (undo-tree-id22149 . -596) (undo-tree-id22150 . -557) (undo-tree-id22151 . -485) (undo-tree-id22152 . -484) (undo-tree-id22153 . -427) (undo-tree-id22154 . -426) (undo-tree-id22155 . -425) (undo-tree-id22156 . -392) (undo-tree-id22157 . -391) (undo-tree-id22158 . -324) (undo-tree-id22159 . -323) (undo-tree-id22160 . -257) (undo-tree-id22161 . -256) (undo-tree-id22162 . -216) (undo-tree-id22163 . -214) (undo-tree-id22164 . -193) (undo-tree-id22165 . -136) (undo-tree-id22166 . -134) (undo-tree-id22167 . -132) (undo-tree-id22168 . -43) (undo-tree-id22169 . -42) (undo-tree-id22170 . -41) (undo-tree-id22171 . -40) (undo-tree-id22172 . -39) (undo-tree-id22173 . -2) (undo-tree-id22174 . -1) (undo-tree-id22175 . -929) (t 26041 2966 321136 657000)) nil (26041 3052 163646 734000) 0 nil] [nil nil ((3959 . 3961) (t 26041 2573 991112 588000)) ((#("//" 0 2 (face font-lock-comment-delimiter-face fontified t)) . 3959)) (26041 2962 845541 668000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2835) (undo-tree-id22000 . -1) (undo-tree-id22001 . -1) (undo-tree-id22002 . -1) (undo-tree-id22003 . -1) (undo-tree-id22004 . -1) (undo-tree-id22005 . -1) (undo-tree-id22006 . -1) (undo-tree-id22007 . -1) (undo-tree-id22008 . -1) (undo-tree-id22009 . -1) (undo-tree-id22010 . -1) (undo-tree-id22011 . -1) (undo-tree-id22012 . -1) (undo-tree-id22013 . -1) (undo-tree-id22014 . -1) (undo-tree-id22015 . -1) (undo-tree-id22016 . -1) (undo-tree-id22017 . -1) (undo-tree-id22018 . -1) (undo-tree-id22019 . -1) (undo-tree-id22020 . -1) (undo-tree-id22021 . -1) (undo-tree-id22022 . -1) (undo-tree-id22023 . -1) (undo-tree-id22024 . -1) (undo-tree-id22025 . -1) (undo-tree-id22026 . -1) (undo-tree-id22027 . -1) (undo-tree-id22028 . -1) (undo-tree-id22029 . -1) (undo-tree-id22030 . -1) (undo-tree-id22031 . -1) (undo-tree-id22032 . -1) (undo-tree-id22033 . -1) (undo-tree-id22034 . -1) (undo-tree-id22035 . -1) (undo-tree-id22036 . -1) (undo-tree-id22037 . -1) (undo-tree-id22038 . -1) (undo-tree-id22039 . -1) (undo-tree-id22040 . -1) (undo-tree-id22041 . -1) (undo-tree-id22042 . -1) (undo-tree-id22043 . -1) (undo-tree-id22044 . -1) (undo-tree-id22045 . -1) (undo-tree-id22046 . -1) (undo-tree-id22047 . -1) (undo-tree-id22048 . -1) (undo-tree-id22049 . -1) (undo-tree-id22050 . -1) (undo-tree-id22051 . -1) (undo-tree-id22052 . -1) (undo-tree-id22053 . -1) (undo-tree-id22054 . -1) (undo-tree-id22055 . -1) (undo-tree-id22056 . -1) (undo-tree-id22057 . -1) (undo-tree-id22058 . -1) (undo-tree-id22059 . -1) (undo-tree-id22060 . -1) (undo-tree-id22061 . -1) (undo-tree-id22062 . -1) (undo-tree-id22063 . -1) (undo-tree-id22064 . -1) (undo-tree-id22065 . -1) (undo-tree-id22066 . -1) (undo-tree-id22067 . -1) (undo-tree-id22068 . -1) (undo-tree-id22069 . -1) (undo-tree-id22070 . -1) (undo-tree-id22071 . -1) (undo-tree-id22072 . -1) (undo-tree-id22073 . -1) (undo-tree-id22074 . -1) (undo-tree-id22075 . -1) (undo-tree-id22076 . -1) (undo-tree-id22077 . -1) (undo-tree-id22078 . -1) (undo-tree-id22079 . -1) (undo-tree-id22080 . -1) (undo-tree-id22081 . -1) (undo-tree-id22082 . -1) (undo-tree-id22083 . -1) (undo-tree-id22084 . -1) (undo-tree-id22085 . -1) (undo-tree-id22086 . -1) (undo-tree-id22087 . -1) (undo-tree-id22088 . -1) (undo-tree-id22089 . -1) (undo-tree-id22090 . -1) (undo-tree-id22091 . -1) (undo-tree-id22092 . -1) (undo-tree-id22093 . -1) (undo-tree-id22094 . -1) 2836) nil (26041 3052 163140 597000) 0 nil])
([nil nil ((1818 . 1827) (t 26041 2650 917783 976000)) ((#("
        " 0 1 (fontified t) 1 9 (fontified t)) . 1818) (undo-tree-id21934 . -9) (undo-tree-id21935 . -9) (undo-tree-id21936 . -9) (undo-tree-id21937 . -9) (undo-tree-id21938 . -9) (undo-tree-id21939 . -9) (undo-tree-id21940 . -9) (undo-tree-id21941 . -9) (undo-tree-id21942 . -9) (undo-tree-id21943 . -9) (undo-tree-id21944 . -9) (undo-tree-id21945 . -9) (undo-tree-id21946 . -9) (undo-tree-id21947 . -9) (undo-tree-id21948 . -9) (undo-tree-id21949 . -1) (undo-tree-id21950 . -9) (undo-tree-id21951 . -9) (undo-tree-id21952 . -9) (undo-tree-id21953 . -9) (undo-tree-id21954 . -9) (undo-tree-id21955 . -9) (undo-tree-id21956 . -9) (undo-tree-id21957 . -9) (undo-tree-id21958 . -9) (undo-tree-id21959 . -9) (undo-tree-id21960 . -9) (undo-tree-id21961 . -9) (undo-tree-id21962 . -9) (undo-tree-id21963 . -9) (undo-tree-id21964 . -9) (undo-tree-id21965 . -9) (undo-tree-id21966 . -9) (undo-tree-id21967 . -9) (undo-tree-id21968 . -9) (undo-tree-id21969 . -9) (undo-tree-id21970 . -9) (undo-tree-id21971 . -9) (undo-tree-id21972 . -9) (undo-tree-id21973 . -9) (undo-tree-id21974 . -9) (undo-tree-id21975 . -1) (undo-tree-id21976 . -9) (undo-tree-id21977 . -9)) (26041 2962 553777 764000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2847) (undo-tree-id21989 . -1) (undo-tree-id21990 . -1) (undo-tree-id21991 . -1) (undo-tree-id21992 . -1) (undo-tree-id21993 . -1) (undo-tree-id21994 . -1) (#("
" 0 1 (fontified t)) . -2848) (undo-tree-id21995 . -1) (undo-tree-id21996 . -1) (undo-tree-id21997 . -1) (undo-tree-id21998 . -1) (undo-tree-id21999 . -1) 2849) nil (26041 3052 163071 924000) 0 nil])
([nil nil ((1827 . 1832)) ((#("ffi::" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t)) . 1827) (undo-tree-id21902 . -5) (undo-tree-id21903 . -5) (undo-tree-id21904 . -5) (undo-tree-id21905 . -5) (undo-tree-id21906 . -5) (undo-tree-id21907 . -5) (undo-tree-id21908 . -5) (undo-tree-id21909 . -5) (undo-tree-id21910 . -5) (undo-tree-id21911 . -5) (undo-tree-id21912 . -5) (undo-tree-id21913 . -5) (undo-tree-id21914 . -5) (undo-tree-id21915 . -5) (undo-tree-id21916 . -5) (undo-tree-id21917 . -5) (undo-tree-id21918 . -5) (undo-tree-id21919 . -5) (undo-tree-id21920 . -5) (undo-tree-id21921 . -5) (undo-tree-id21922 . -5) (undo-tree-id21923 . -5) (undo-tree-id21924 . -5) (undo-tree-id21925 . -5) (undo-tree-id21926 . -5) (undo-tree-id21927 . -5) (undo-tree-id21928 . -5) (undo-tree-id21929 . -5) (undo-tree-id21930 . -5) (undo-tree-id21931 . -5) (undo-tree-id21932 . -5) (undo-tree-id21933 . -5)) (26041 2962 234005 570000) 0 nil])
([nil nil ((#("           " 0 3 (fontified t) 3 11 (fontified t)) . -2844) (undo-tree-id21978 . -3) (undo-tree-id21979 . -3) (undo-tree-id21980 . -3) (undo-tree-id21981 . -3) (undo-tree-id21982 . -3) (undo-tree-id21983 . -3) (undo-tree-id21984 . -3) (undo-tree-id21985 . -3) (undo-tree-id21986 . -3) (undo-tree-id21987 . -3) (undo-tree-id21988 . -3) 2847) nil (26041 3052 163059 719000) 0 nil])
([nil nil ((1832 . 1843)) ((#("scanner_set" 0 11 (fontified t)) . 1832) (undo-tree-id21899 . -11) (undo-tree-id21900 . -11) (undo-tree-id21901 . -11)) (26041 2961 986888 128000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2834) (undo-tree-id22176 . -1) (undo-tree-id22177 . -1) (undo-tree-id22178 . -1) (undo-tree-id22179 . -1) (undo-tree-id22180 . -1) (undo-tree-id22181 . -1) (undo-tree-id22182 . -1) (undo-tree-id22183 . -1) (undo-tree-id22184 . -1) (undo-tree-id22185 . -1) (undo-tree-id22186 . -1) (undo-tree-id22187 . -1) (undo-tree-id22188 . -1) (undo-tree-id22189 . -1) (undo-tree-id22190 . -1) (undo-tree-id22191 . -1) (undo-tree-id22192 . -1) (undo-tree-id22193 . -1) (undo-tree-id22194 . -1) (undo-tree-id22195 . -1) (undo-tree-id22196 . -1) (undo-tree-id22197 . -1) (undo-tree-id22198 . -1) (undo-tree-id22199 . -1) (undo-tree-id22200 . -1) (undo-tree-id22201 . -1) (undo-tree-id22202 . -1) (undo-tree-id22203 . -1) (undo-tree-id22204 . -1) (undo-tree-id22205 . -1) (undo-tree-id22206 . -1) (undo-tree-id22207 . -1) (undo-tree-id22208 . -1) (undo-tree-id22209 . -1) (undo-tree-id22210 . -1) (undo-tree-id22211 . -1) (undo-tree-id22212 . -1) (undo-tree-id22213 . -1) (undo-tree-id22214 . -1) (undo-tree-id22215 . -1) (undo-tree-id22216 . -1) (undo-tree-id22217 . -1) (undo-tree-id22218 . -1) (undo-tree-id22219 . -1) (undo-tree-id22220 . -1) (undo-tree-id22221 . -1) (undo-tree-id22222 . -1) (undo-tree-id22223 . -1) (undo-tree-id22224 . -1) (undo-tree-id22225 . -1) (undo-tree-id22226 . -1) (undo-tree-id22227 . -1) (undo-tree-id22228 . -1) (undo-tree-id22229 . -1) (undo-tree-id22230 . -1) (undo-tree-id22231 . -1) (undo-tree-id22232 . -1) (undo-tree-id22233 . -1) (undo-tree-id22234 . -1) (undo-tree-id22235 . -1) (undo-tree-id22236 . -1) (undo-tree-id22237 . -1) (undo-tree-id22238 . -1) (undo-tree-id22239 . -1) (undo-tree-id22240 . -1) (undo-tree-id22241 . -1) (undo-tree-id22242 . -1) (undo-tree-id22243 . -1) (undo-tree-id22244 . -1) (undo-tree-id22245 . -1) (undo-tree-id22246 . -1) (undo-tree-id22247 . -1) (undo-tree-id22248 . -1) (undo-tree-id22249 . -1) (undo-tree-id22250 . -1) (undo-tree-id22251 . -1) (undo-tree-id22252 . -1) (undo-tree-id22253 . -1) (undo-tree-id22254 . -1) (undo-tree-id22255 . -1) (undo-tree-id22256 . -1) (undo-tree-id22257 . -1) (undo-tree-id22258 . -1) (undo-tree-id22259 . -1) (undo-tree-id22260 . -1) (undo-tree-id22261 . -1) (undo-tree-id22262 . -1) (undo-tree-id22263 . -1) (undo-tree-id22264 . -1) (undo-tree-id22265 . -1) (undo-tree-id22266 . -1) (undo-tree-id22267 . -1) (undo-tree-id22268 . -1) (undo-tree-id22269 . -1) (undo-tree-id22270 . -1) (undo-tree-id22271 . -1) (undo-tree-id22272 . -1) 2835 (t 26041 3052 194475 251000)) nil (26041 3055 75938 253000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1868 1875 nil nil nil nil #s(yas--field 2 1877 1884 nil nil nil nil #s(yas--field 3 1886 1894 nil nil nil nil #s(yas--exit 1895 nil)))) #s(yas--field 2 1877 1884 nil nil nil nil #s(yas--field 3 1886 1894 nil nil nil nil #s(yas--exit 1895 nil))) #s(yas--field 3 1886 1894 nil nil nil nil #s(yas--exit 1895 nil))) #s(yas--exit 1895 nil) 118 nil #s(yas--field 1 1868 1875 nil nil nil nil #s(yas--field 2 1877 1884 nil nil nil nil #s(yas--field 3 1886 1894 nil nil nil nil #s(yas--exit 1895 nil)))) nil nil)) (1832 . 1895) (#("zbar_image_scanner_set_data_handler(${1:scanner}, ${2:handler}, ${3:userdata})$0" 0 80 (fontified nil)) . 1832) (1832 . 1912) (#("scanner_set" 0 11 (fontified nil)) . 1832) (1832 . 1843) (#("zbar_image_scanner_set_data_handler(…)" 0 38 (fontified nil)) . -1832) (1832 . 1870) (#("scanner_set" 0 11 (fontified t)) . -1832) (undo-tree-id21327 . -11) (undo-tree-id21329 . -1) (undo-tree-id21331 . -2) (undo-tree-id21333 . -2) (undo-tree-id21335 . -3) (undo-tree-id21337 . -4) (undo-tree-id21339 . -4) (undo-tree-id21341 . -5) (undo-tree-id21343 . -6) (undo-tree-id21345 . -6) (undo-tree-id21347 . -7) (undo-tree-id21349 . -7) (undo-tree-id21351 . -8) (undo-tree-id21353 . -8) (undo-tree-id21355 . -9) (undo-tree-id21357 . -10) (undo-tree-id21359 . -10) (undo-tree-id21361 . -11) (undo-tree-id21363 . -11) (undo-tree-id21365 . -11) 1843) ((1832 . 1843) (#("zbar_image_scanner_set_data_handler(…)" 0 38 (fontified nil)) . 1832) (1832 . 1870) (#("scanner_set" 0 11 (fontified nil)) . 1832) (1832 . 1843) (#("zbar_image_scanner_set_data_handler(${1:scanner}, ${2:handler}, ${3:userdata})$0" 0 80 (fontified nil)) . 1832) (1832 . 1912) (#("zbar_image_scanner_set_data_handler(scanner, handler, userdata)" 0 35 (fontified t) 35 36 (face (rainbow-delimiters-depth-3-face) fontified t) 36 45 (fontified t) 45 52 (fontified t) 52 54 (fontified t) 54 62 (fontified t) 62 63 (face (rainbow-delimiters-depth-3-face) fontified t)) . 1832) (undo-tree-id21871 . -36) (undo-tree-id21872 . -46) (undo-tree-id21873 . -46) (undo-tree-id21874 . -46) (undo-tree-id21875 . -46) (undo-tree-id21876 . -46) (undo-tree-id21877 . -46) (undo-tree-id21878 . -63) (undo-tree-id21879 . -63) (undo-tree-id21880 . -63) (undo-tree-id21881 . -54) (undo-tree-id21882 . -54) (undo-tree-id21883 . -54) (undo-tree-id21884 . -54) (undo-tree-id21885 . -54) (undo-tree-id21886 . -54) (undo-tree-id21887 . -54) (undo-tree-id21888 . -54) (undo-tree-id21889 . -54) (undo-tree-id21890 . -54) (undo-tree-id21891 . -54) (undo-tree-id21892 . -54) (undo-tree-id21893 . -54) (undo-tree-id21894 . -54) (undo-tree-id21895 . -54) (undo-tree-id21896 . -62) (undo-tree-id21897 . -62) (undo-tree-id21898 . -36) (apply yas--snippet-revive 1832 1895 #s(yas--snippet nil (#s(yas--field 1 1868 1875 nil nil nil nil #s(yas--field 2 1877 1884 nil nil nil nil #s(yas--field 3 1886 1894 nil nil nil nil #s(yas--exit 1895 nil)))) #s(yas--field 2 1877 1884 nil nil nil nil #s(yas--field 3 1886 1894 nil nil nil nil #s(yas--exit 1895 nil))) #s(yas--field 3 1886 1894 nil nil nil nil #s(yas--exit 1895 nil))) #s(yas--exit 1895 nil) 118 nil #s(yas--field 1 1868 1875 nil nil nil nil #s(yas--field 2 1877 1884 nil nil nil nil #s(yas--field 3 1886 1894 nil nil nil nil #s(yas--exit 1895 nil)))) nil nil))) (26041 2961 754937 219000) 0 nil])
([nil nil ((3007 . 3009)) nil (26041 3298 307565 144000) 0 nil])
([nil nil ((apply yas--snippet-revive 1832 1895 #s(yas--snippet nil (#s(yas--field 1 1868 1875 nil nil nil nil #s(yas--field 2 1877 1884 nil nil nil nil #s(yas--field 3 1886 1894 nil nil nil nil #s(yas--exit 1895 nil)))) #s(yas--field 2 1877 1884 nil nil nil nil #s(yas--field 3 1886 1894 nil nil nil nil #s(yas--exit 1895 nil))) #s(yas--field 3 1886 1894 nil nil nil nil #s(yas--exit 1895 nil))) #s(yas--exit 1895 nil) 118 nil #s(yas--field 1 1868 1875 nil nil nil nil #s(yas--field 2 1877 1884 nil nil nil nil #s(yas--field 3 1886 1894 nil nil nil nil #s(yas--exit 1895 nil)))) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1868 1875 nil nil nil nil #s(yas--field 2 1877 1884 nil nil nil nil #s(yas--field 3 1886 1894 nil nil nil nil #s(yas--exit 1895 nil)))) #s(yas--field 2 1877 1884 nil nil nil nil #s(yas--field 3 1886 1894 nil nil nil nil #s(yas--exit 1895 nil))) #s(yas--field 3 1886 1894 nil nil nil nil #s(yas--exit 1895 nil))) #s(yas--exit 1895 nil) 118 nil #s(yas--field 1 1868 1875 nil nil nil nil #s(yas--field 2 1877 1884 nil nil nil nil #s(yas--field 3 1886 1894 nil nil nil nil #s(yas--exit 1895 nil)))) nil nil))) (26041 2961 547000 849000) 0 nil])
([nil nil ((3183 . 3185) (t 26041 3055 94475 429000)) nil (26041 3301 564198 689000) 0 nil] [nil nil ((3177 . 3179) (t 26041 3055 94475 429000)) ((#("//" 0 2 (face font-lock-comment-delimiter-face fontified t)) . 3177) (undo-tree-id22273 . -2) (undo-tree-id22274 . -2) (undo-tree-id22275 . -2) (undo-tree-id22276 . -2) (undo-tree-id22277 . -2) (undo-tree-id22278 . -2) (undo-tree-id22279 . -2)) (26041 3297 694753 803000) 0 nil] [nil nil ((3007 . 3015) 3009 (t 26041 3055 94475 429000)) ((#("        " 0 8 (fontified t)) . 3007)) (26041 3057 357060 871000) 0 nil])
([nil nil ((#("userdata" 0 8 (fontified t)) . -1886) (undo-tree-id21320 . -8) (undo-tree-id21321 . -8) (undo-tree-id21323 . -8) (undo-tree-id21325 . -8) 1894) ((1886 . 1894)) (26041 2961 339809 870000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . 3007) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 3007) (t 26041 3301 627823 889000)) nil (26041 3304 697521 677000) 0 nil])
([nil nil ((3175 . 3183) (#("  " 0 2 (fontified t)) . 3175) 3179) ((3175 . 3177) (#("        " 0 8 (fontified t)) . 3175)) (26041 3297 694411 212000) 0 nil])
nil
([nil nil ((1886 . 1891)) ((#("ptr::" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t)) . 1886) (undo-tree-id21868 . -5) (undo-tree-id21869 . -5) (undo-tree-id21870 . -5)) (26041 2961 126124 202000) 0 nil])
([nil nil ((3015 . 3017)) nil (26041 3304 697517 316000) 0 nil])
nil
([nil nil ((#("ptr::" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t)) . -1886) (undo-tree-id21294 . -5) (undo-tree-id21295 . -5) (undo-tree-id21297 . -1) (undo-tree-id21299 . -1) (undo-tree-id21301 . -2) (undo-tree-id21303 . -3) (undo-tree-id21305 . -3) (undo-tree-id21307 . -4) (undo-tree-id21309 . -4) (undo-tree-id21311 . -5) (undo-tree-id21313 . -5) (undo-tree-id21315 . -5) (undo-tree-id21317 . -5) (undo-tree-id21319 . -5) 1891) ((1886 . 1891)) (26041 2960 919829 393000) 0 nil])
([nil nil ((3227 . 3235) (#("        " 0 8 (face font-lock-comment-face fontified nil)) . 3226) (3226 . 3234) (3226 . 3227) (t 26041 3304 761157 414000)) nil (26041 3353 339493 411000) 0 nil])
([nil nil ((1886 . 1894)) ((#("std::prt" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t)) . 1886) (undo-tree-id21858 . -8) (undo-tree-id21859 . -6) (undo-tree-id21860 . -6) (undo-tree-id21861 . -6) (undo-tree-id21862 . -6) (undo-tree-id21863 . -6) (undo-tree-id21864 . -6) (undo-tree-id21865 . -6) (undo-tree-id21866 . -8) (undo-tree-id21867 . -8)) (26041 2960 695977 58000) 0 nil])
([nil nil ((3235 . 3239)) nil (26041 3353 339492 136000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -1892) (undo-tree-id21266 . -1) (undo-tree-id21267 . -1) (undo-tree-id21269 . -1) (undo-tree-id21271 . -1) (undo-tree-id21273 . -1) (undo-tree-id21275 . -1) (undo-tree-id21277 . -1) (undo-tree-id21279 . -1) (undo-tree-id21281 . -1) (#("t" 0 1 (fontified t)) . -1893) (undo-tree-id21283 . -1) (undo-tree-id21284 . -1) (undo-tree-id21286 . -1) (undo-tree-id21288 . -1) (undo-tree-id21290 . -1) (undo-tree-id21292 . -1) 1894) ((1892 . 1894)) (26041 2960 456070 550000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -3235) (undo-tree-id22426 . -1) (undo-tree-id22427 . -1) (undo-tree-id22428 . -1) (undo-tree-id22429 . -1) (undo-tree-id22430 . -1) (undo-tree-id22431 . -1) (undo-tree-id22432 . -1) (undo-tree-id22433 . -1) (undo-tree-id22434 . -1) (undo-tree-id22435 . -1) (undo-tree-id22436 . -1) (undo-tree-id22437 . -1) (undo-tree-id22438 . -1) (undo-tree-id22439 . -1) (undo-tree-id22440 . -1) (undo-tree-id22441 . -1) (undo-tree-id22442 . -1) (undo-tree-id22443 . -1) (undo-tree-id22444 . -1) (undo-tree-id22445 . -1) (undo-tree-id22446 . -1) (undo-tree-id22447 . -1) (undo-tree-id22448 . -1) (#("o" 0 1 (fontified t)) . -3236) (undo-tree-id22449 . -1) (undo-tree-id22450 . -1) (undo-tree-id22451 . -1) (undo-tree-id22452 . -1) (undo-tree-id22453 . -1) (undo-tree-id22454 . -1) (undo-tree-id22455 . -1) (undo-tree-id22456 . -1) (undo-tree-id22457 . -1) (undo-tree-id22458 . -1) (undo-tree-id22459 . -1) (undo-tree-id22460 . -1) (undo-tree-id22461 . -1) (undo-tree-id22462 . -1) (undo-tree-id22463 . -1) (undo-tree-id22464 . -1) (undo-tree-id22465 . -1) (#("o" 0 1 (fontified t)) . -3237) (undo-tree-id22466 . -1) (undo-tree-id22467 . -1) (undo-tree-id22468 . -1) (undo-tree-id22469 . -1) (undo-tree-id22470 . -1) (undo-tree-id22471 . -1) (undo-tree-id22472 . -1) (undo-tree-id22473 . -1) (undo-tree-id22474 . -1) (undo-tree-id22475 . -1) (undo-tree-id22476 . -1) (undo-tree-id22477 . -1) (#("p" 0 1 (face font-lock-keyword-face fontified t)) . -3238) (undo-tree-id22478 . -1) (undo-tree-id22479 . -1) (undo-tree-id22480 . -1) (undo-tree-id22481 . -1) (undo-tree-id22482 . -1) (undo-tree-id22483 . -1) 3239) nil (26041 3353 339488 993000) 0 nil])
([nil nil ((1892 . 1893)) ((#("t" 0 1 (fontified t)) . 1892) (undo-tree-id21852 . -1) (undo-tree-id21853 . -1) (undo-tree-id21854 . -1) (undo-tree-id21855 . -1) (undo-tree-id21856 . -1) (undo-tree-id21857 . -1)) (26041 2960 77085 110000) 0 nil])
([nil nil ((3226 . 3234)) nil (26041 3353 339449 720000) 0 nil])
([nil nil ((1893 . 1897)) ((#("r::n" 0 1 (face font-lock-constant-face fontified t) 1 3 (fontified t) 3 4 (fontified t)) . 1893) (undo-tree-id21848 . -4) (undo-tree-id21849 . -3) (undo-tree-id21850 . -4) (undo-tree-id21851 . -4)) (26041 2959 777728 632000) 0 nil])
([nil nil ((3227 . 3235) (#("        " 0 8 (fontified nil)) . 3226) (undo-tree-id22420 . -8) (undo-tree-id22421 . -8) (undo-tree-id22422 . -8) (undo-tree-id22423 . -8) (undo-tree-id22424 . -8) (undo-tree-id22425 . -8) (3234 . 3235)) nil (26041 3353 339448 797000) 0 nil])
([nil nil ((apply yas--snippet-revive 1896 1902 #s(yas--snippet nil nil #s(yas--exit #<marker at 2219 in main.rs> nil) 119 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 2219 in main.rs> nil) 119 nil nil nil nil)) (1896 . 1902) (#("null()$0" 0 8 (fontified nil)) . 1896) (1896 . 1904) (#("n" 0 1 (fontified nil)) . 1896) (1896 . 1897) (#("null()" 0 6 (fontified nil)) . -1896) (1896 . 1902) (#("n" 0 1 (fontified t)) . -1896) (undo-tree-id21259 . -1) (undo-tree-id21260 . -1) (undo-tree-id21262 . -1) (undo-tree-id21264 . -1) 1897) ((1896 . 1897) (#("null()" 0 6 (fontified nil)) . 1896) (1896 . 1902) (#("n" 0 1 (fontified nil)) . 1896) (1896 . 1897) (#("null()$0" 0 8 (fontified nil)) . 1896) (1896 . 1904) (#("null()" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t) 5 6 (face (rainbow-delimiters-depth-4-face) fontified t)) . 1896) (undo-tree-id21847 . -6)) (26041 2959 310149 60000) 0 nil])
([nil nil ((3235 . 3242)) nil (26041 3353 339443 758000) 0 nil])
([nil nil ((1903 . 1904)) ((#(";" 0 1 (fontified t)) . 1903)) (26041 2959 62705 892000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -3235) (undo-tree-id22291 . -1) (undo-tree-id22292 . -1) (undo-tree-id22293 . -1) (undo-tree-id22294 . -1) (undo-tree-id22295 . -1) (undo-tree-id22296 . -1) (undo-tree-id22297 . -1) (undo-tree-id22298 . -1) (undo-tree-id22299 . -1) (undo-tree-id22300 . -1) (undo-tree-id22301 . -1) (undo-tree-id22302 . -1) (undo-tree-id22303 . -1) (undo-tree-id22304 . -1) (undo-tree-id22305 . -1) (undo-tree-id22306 . -1) (undo-tree-id22307 . -1) (undo-tree-id22308 . -1) (undo-tree-id22309 . -1) (undo-tree-id22310 . -1) (undo-tree-id22311 . -1) (undo-tree-id22312 . -1) (undo-tree-id22313 . -1) (undo-tree-id22314 . -1) (undo-tree-id22315 . -1) (undo-tree-id22316 . -1) (undo-tree-id22317 . -1) (undo-tree-id22318 . -1) (undo-tree-id22319 . -1) (undo-tree-id22320 . -1) (#("o" 0 1 (fontified t)) . -3236) (undo-tree-id22321 . -1) (undo-tree-id22322 . -1) (undo-tree-id22323 . -1) (undo-tree-id22324 . -1) (undo-tree-id22325 . -1) (undo-tree-id22326 . -1) (undo-tree-id22327 . -1) (undo-tree-id22328 . -1) (undo-tree-id22329 . -1) (undo-tree-id22330 . -1) (undo-tree-id22331 . -1) (undo-tree-id22332 . -1) (undo-tree-id22333 . -1) (undo-tree-id22334 . -1) (undo-tree-id22335 . -1) (undo-tree-id22336 . -1) (undo-tree-id22337 . -1) (undo-tree-id22338 . -1) (undo-tree-id22339 . -1) (undo-tree-id22340 . -1) (undo-tree-id22341 . -1) (undo-tree-id22342 . -1) (undo-tree-id22343 . -1) (undo-tree-id22344 . -1) (undo-tree-id22345 . -1) (undo-tree-id22346 . -1) (undo-tree-id22347 . -1) (undo-tree-id22348 . -1) (#("o" 0 1 (fontified t)) . -3237) (undo-tree-id22349 . -1) (undo-tree-id22350 . -1) (undo-tree-id22351 . -1) (undo-tree-id22352 . -1) (undo-tree-id22353 . -1) (undo-tree-id22354 . -1) (undo-tree-id22355 . -1) (undo-tree-id22356 . -1) (undo-tree-id22357 . -1) (undo-tree-id22358 . -1) (undo-tree-id22359 . -1) (undo-tree-id22360 . -1) (undo-tree-id22361 . -1) (undo-tree-id22362 . -1) (undo-tree-id22363 . -1) (undo-tree-id22364 . -1) (undo-tree-id22365 . -1) (undo-tree-id22366 . -1) (undo-tree-id22367 . -1) (undo-tree-id22368 . -1) (undo-tree-id22369 . -1) (undo-tree-id22370 . -1) (undo-tree-id22371 . -1) (undo-tree-id22372 . -1) (undo-tree-id22373 . -1) (#("p" 0 1 (face font-lock-keyword-face fontified t)) . -3238) (undo-tree-id22374 . -1) (undo-tree-id22375 . -1) (undo-tree-id22376 . -1) (undo-tree-id22377 . -1) (undo-tree-id22378 . -1) (undo-tree-id22379 . -1) (undo-tree-id22380 . -1) (undo-tree-id22381 . -1) (undo-tree-id22382 . -1) (undo-tree-id22383 . -1) (undo-tree-id22384 . -1) (undo-tree-id22385 . -1) (undo-tree-id22386 . -1) (undo-tree-id22387 . -1) (undo-tree-id22388 . -1) (undo-tree-id22389 . -1) (undo-tree-id22390 . -1) (undo-tree-id22391 . -1) (undo-tree-id22392 . -1) (undo-tree-id22393 . -1) (undo-tree-id22394 . -1) (#(" " 0 1 (fontified t)) . -3239) (undo-tree-id22395 . -1) (undo-tree-id22396 . -1) (undo-tree-id22397 . -1) (undo-tree-id22398 . -1) (undo-tree-id22399 . -1) (undo-tree-id22400 . -1) (undo-tree-id22401 . -1) (undo-tree-id22402 . -1) (undo-tree-id22403 . -1) (undo-tree-id22404 . -1) (undo-tree-id22405 . -1) (undo-tree-id22406 . -1) (undo-tree-id22407 . -1) (undo-tree-id22408 . -1) (undo-tree-id22409 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -3240) (undo-tree-id22410 . -1) (undo-tree-id22411 . -1) (undo-tree-id22412 . -1) (undo-tree-id22413 . -1) (undo-tree-id22414 . -1) (undo-tree-id22415 . -1) (undo-tree-id22416 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -3241) (undo-tree-id22417 . -1) (undo-tree-id22418 . -1) (undo-tree-id22419 . -1) 3242) nil (26041 3353 339437 752000) 0 nil])
([nil nil ((#("     use libffi::high::Closure2;
        let image_handler = |image: *mut ffi::zbar_image_t, _userdata: *const c_void| {
                let mut symbol = ffi::zbar_image_first_symbol(image);

            while !symbol.is_null() {
                    let typ = ffi::zbar_symbol_get_type(symbol);
                    let data = ffi::zbar_symbol_get_data(symbol);
                    println!(
                        \"decoded {} symbol \\\"{:?}\\\"\\n\",
                        CStr::from_ptr(ffi::zbar_get_symbol_name(typ))
                            .to_str()
                            .unwrap(),
                        CStr::from_ptr(data).to_str()
                    );
                    symbol = ffi::zbar_symbol_next(symbol);
                }
        };
        let closure = Closure2::new(&image_handler);
        let fun = closure.code_ptr();
        let ptr: ffi::zbar_image_data_handler_t = std::mem::transmute(fun);" 0 5 (fontified t) 5 8 (face font-lock-keyword-face fontified t) 8 9 (fontified t) 9 15 (face font-lock-constant-face fontified t) 15 17 (fontified t) 17 21 (face font-lock-constant-face fontified t) 21 23 (fontified t) 23 31 (face font-lock-type-face fontified t) 31 32 (fontified t) 32 33 (fontified t) 33 41 (fontified t) 41 44 (face font-lock-keyword-face fontified t) 44 45 (fontified t) 45 58 (face font-lock-variable-name-face fontified t) 58 62 (fontified t) 62 67 (face font-lock-variable-name-face fontified t) 67 70 (fontified t) 70 73 (face font-lock-keyword-face fontified t) 73 74 (fontified t) 74 77 (face font-lock-constant-face fontified t) 77 79 (fontified t) 79 93 (fontified t) 93 94 (face font-lock-variable-name-face fontified t) 94 102 (face font-lock-variable-name-face fontified t) 102 105 (fontified t) 105 110 (face font-lock-keyword-face fontified t) 110 111 (fontified t) 111 117 (fontified t) 117 119 (fontified t) 119 120 (face (rainbow-delimiters-depth-3-face) fontified t) 120 121 (fontified t) 121 137 (fontified t) 137 140 (face font-lock-keyword-face fontified t) 140 141 (fontified t) 141 144 (face font-lock-keyword-face fontified t) 144 145 (fontified t) 145 151 (face font-lock-variable-name-face fontified t) 151 154 (fontified t) 154 157 (face font-lock-constant-face fontified t) 157 159 (fontified t) 159 182 (fontified t) 182 183 (face (rainbow-delimiters-depth-4-face) fontified t) 183 188 (fontified t) 188 189 (face (rainbow-delimiters-depth-4-face) fontified t) 189 190 (fontified t) 190 191 (fontified t) 191 192 (fontified t) 192 202 (fontified t) 202 204 (fontified t) 204 209 (face font-lock-keyword-face fontified t) 209 211 (fontified t) 211 217 (fontified t) 217 218 (fontified t) 218 225 (fontified t) 225 226 (face (rainbow-delimiters-depth-4-face) fontified t) 226 227 (face (rainbow-delimiters-depth-4-face) fontified t) 227 228 (fontified t) 228 229 (face (rainbow-delimiters-depth-4-face) fontified t) 229 230 (fontified t) 230 250 (fontified t) 250 253 (face font-lock-keyword-face fontified t) 253 254 (fontified t) 254 257 (face font-lock-variable-name-face fontified t) 257 260 (fontified t) 260 263 (face font-lock-constant-face fontified t) 263 265 (fontified t) 265 285 (fontified t) 285 286 (face (rainbow-delimiters-depth-5-face) fontified t) 286 292 (fontified t) 292 293 (face (rainbow-delimiters-depth-5-face) fontified t) 293 295 (fontified t) 295 315 (fontified t) 315 318 (face font-lock-keyword-face fontified t) 318 319 (fontified t) 319 323 (face font-lock-variable-name-face fontified t) 323 326 (fontified t) 326 329 (face font-lock-constant-face fontified t) 329 331 (fontified t) 331 351 (fontified t) 351 352 (face (rainbow-delimiters-depth-5-face) fontified t) 352 358 (fontified t) 358 359 (face (rainbow-delimiters-depth-5-face) fontified t) 359 361 (fontified t) 361 381 (fontified t) 381 389 (face rust-builtin-formatting-macro fontified t) 389 390 (face (rainbow-delimiters-depth-5-face) fontified t) 390 415 (fontified t) 415 424 (face font-lock-string-face fontified t) 424 426 (face rust-string-interpolation fontified t) 426 439 (face font-lock-string-face fontified t) 439 444 (face font-lock-string-face fontified t) 444 445 (face font-lock-string-face fontified t rear-nonsticky t) 445 446 (fontified t) 446 471 (fontified t) 471 475 (face font-lock-type-face fontified t) 475 477 (fontified t) 477 481 (fontified t) 481 485 (fontified t) 485 486 (fontified t face (rainbow-delimiters-depth-6-face)) 486 489 (fontified t face font-lock-constant-face) 489 491 (fontified t) 491 511 (fontified t) 511 512 (fontified t face (rainbow-delimiters-depth-7-face)) 512 515 (fontified t) 515 516 (fontified t face (rainbow-delimiters-depth-7-face)) 516 517 (fontified t face (rainbow-delimiters-depth-6-face)) 517 518 (fontified t) 518 546 (fontified t) 546 547 (fontified t) 547 553 (fontified t) 553 554 (face (rainbow-delimiters-depth-6-face) fontified t) 554 555 (face (rainbow-delimiters-depth-6-face) fontified t) 555 556 (fontified t) 556 584 (fontified t) 584 585 (fontified t) 585 591 (fontified t) 591 592 (face (rainbow-delimiters-depth-6-face) fontified t) 592 593 (face (rainbow-delimiters-depth-6-face) fontified t) 593 594 (fontified t) 594 619 (fontified t) 619 623 (face font-lock-type-face fontified t) 623 625 (fontified t) 625 633 (fontified t) 633 634 (face (rainbow-delimiters-depth-6-face) fontified t) 634 638 (fontified t) 638 639 (face (rainbow-delimiters-depth-6-face) fontified t) 639 640 (fontified t) 640 646 (fontified t) 646 647 (face (rainbow-delimiters-depth-6-face) fontified t) 647 648 (face (rainbow-delimiters-depth-6-face) fontified t) 648 649 (fontified t) 649 669 (fontified t) 669 670 (face (rainbow-delimiters-depth-5-face) fontified t) 670 671 (fontified t) 671 672 (fontified t) 672 692 (fontified t) 692 698 (fontified t) 698 701 (fontified t) 701 704 (face font-lock-constant-face fontified t) 704 706 (fontified t) 706 717 (fontified t) 717 722 (fontified t) 722 723 (face (rainbow-delimiters-depth-5-face) fontified t) 723 729 (fontified t) 729 730 (face (rainbow-delimiters-depth-5-face) fontified t) 730 732 (fontified t) 732 748 (fontified t) 748 749 (face (rainbow-delimiters-depth-4-face) fontified t rear-nonsticky t) 749 750 (fontified t) 750 758 (fontified t) 758 759 (face (rainbow-delimiters-depth-3-face) fontified t) 759 760 (fontified t) 760 761 (fontified t) 761 769 (fontified t) 769 772 (face font-lock-keyword-face fontified t) 772 773 (fontified t) 773 780 (face font-lock-variable-name-face fontified t) 780 783 (fontified t) 783 791 (face font-lock-type-face fontified t) 791 793 (fontified t) 793 796 (fontified t) 796 797 (face (rainbow-delimiters-depth-3-face) fontified t) 797 798 (face rust-ampersand-face fontified t) 798 811 (fontified t) 811 812 (face (rainbow-delimiters-depth-3-face) fontified t) 812 814 (fontified t) 814 822 (fontified t) 822 825 (face font-lock-keyword-face fontified t) 825 826 (fontified t) 826 829 (face font-lock-variable-name-face fontified t) 829 832 (fontified t) 832 840 (fontified t) 840 848 (fontified t) 848 849 (face (rainbow-delimiters-depth-3-face) fontified t) 849 850 (face (rainbow-delimiters-depth-3-face) fontified t) 850 852 (fontified t) 852 860 (fontified t) 860 863 (face font-lock-keyword-face fontified t) 863 864 (fontified t) 864 867 (face font-lock-variable-name-face fontified t) 867 869 (fontified t) 869 872 (face font-lock-constant-face fontified t) 872 874 (fontified t) 874 899 (fontified t) 899 902 (fontified t) 902 905 (face font-lock-constant-face fontified t) 905 907 (fontified t) 907 910 (face font-lock-constant-face fontified t) 910 912 (fontified t) 912 921 (fontified t) 921 922 (face (rainbow-delimiters-depth-3-face) fontified t) 922 925 (fontified t) 925 926 (face (rainbow-delimiters-depth-3-face) fontified t) 926 927 (fontified t)) . 2924) (undo-tree-id21378 . -121) (undo-tree-id21380 . -927) (undo-tree-id21381 . -927) (undo-tree-id21383 . -5) (undo-tree-id21385 . -2) (undo-tree-id21387 . -41) (undo-tree-id21389 . -191) (undo-tree-id21391 . -211) (undo-tree-id21393 . -320) (undo-tree-id21395 . -389) (undo-tree-id21397 . -421) (undo-tree-id21399 . -423) (undo-tree-id21401 . -481) (undo-tree-id21403 . -554) (undo-tree-id21405 . -594) (undo-tree-id21407 . -636) (undo-tree-id21409 . -638) (undo-tree-id21411 . -721) (undo-tree-id21413 . -723) (undo-tree-id21415 . -749) (undo-tree-id21417 . -813) (undo-tree-id21419 . -813) (undo-tree-id21421 . -813) (undo-tree-id21423 . -851) (undo-tree-id21425 . -927) (undo-tree-id21427 . -927) (undo-tree-id21429 . -927) 3851 (t 26041 2718 534454 789000)) ((2924 . 3851)) (26041 2958 857064 662000) 0 nil])
([nil nil ((3235 . 3239)) nil (26041 3353 338808 829000) 0 nil])
([nil nil ((1360 . 1365)) ((#("
    " 0 5 (fontified t)) . 1360) (undo-tree-id21838 . -5) (undo-tree-id21839 . -5) (undo-tree-id21840 . -5) (undo-tree-id21841 . -5) (undo-tree-id21842 . -5) (undo-tree-id21843 . -5) (undo-tree-id21844 . -5) (undo-tree-id21845 . -5) (undo-tree-id21846 . -5) (t 26041 2954 814469 283000)) (26041 2954 780605 898000) 0 nil] [nil nil ((1362 . 1366) (#("    " 0 4 (fontified nil)) . 1361) (undo-tree-id21373 . -4) (undo-tree-id21375 . -4) (1360 . 1366)) ((#("
    
" 0 1 (fontified t) 1 5 (fontified nil) 5 6 (fontified nil)) . 1360) (undo-tree-id21836 . -6) (1361 . 1365) (#("    " 0 4 (fontified t)) . 1362) (undo-tree-id21837 . -4)) (26041 2952 291216 980000) 0 nil])
([nil nil ((apply yas--snippet-revive 3235 3264 #s(yas--snippet nil nil #s(yas--exit 3254 nil) 121 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 3254 nil) 121 nil nil nil nil)) (3235 . 3264) (#("loop {
            $0
        }" 0 31 (fontified nil)) . 3235) (3257 . 3265) (3242 . 3254) (#("    " 0 4 (fontified nil)) . 3242) (3235 . 3250) (#("loop" 0 4 (fontified nil)) . 3235) (3235 . 3239) (#("loop" 0 4 (face font-lock-keyword-face fontified t)) . -3235) (undo-tree-id22280 . -4) (undo-tree-id22281 . -1) (undo-tree-id22282 . -1) (undo-tree-id22283 . -1) (undo-tree-id22284 . -2) (undo-tree-id22285 . -2) (undo-tree-id22286 . -2) (undo-tree-id22287 . -3) (undo-tree-id22288 . -3) (undo-tree-id22289 . -4) (undo-tree-id22290 . -4) 3239) nil (26041 3353 338806 825000) 0 nil])
nil
([nil nil ((1381 . 1389) (#("        " 0 8 (fontified nil)) . 1380) (undo-tree-id21437 . -8) (undo-tree-id21439 . -8) (1379 . 1389)) ((#("
        
" 0 1 (fontified t) 1 9 (fontified nil) 9 10 (fontified nil)) . 1379) (undo-tree-id21797 . -1) (undo-tree-id21798 . -1) (undo-tree-id21799 . -1) (undo-tree-id21800 . -1) (undo-tree-id21801 . -1) (undo-tree-id21802 . -9) (undo-tree-id21803 . -1) (undo-tree-id21804 . -1) (undo-tree-id21805 . -1) (undo-tree-id21806 . -1) (undo-tree-id21807 . -1) (undo-tree-id21808 . -1) (undo-tree-id21809 . -1) (undo-tree-id21810 . -1) (undo-tree-id21811 . -1) (undo-tree-id21812 . -1) (undo-tree-id21813 . -1) (undo-tree-id21814 . -1) (undo-tree-id21815 . -1) (undo-tree-id21816 . -1) (undo-tree-id21817 . -1) (undo-tree-id21818 . -1) (undo-tree-id21819 . -1) (undo-tree-id21820 . -1) (undo-tree-id21821 . -1) (undo-tree-id21822 . -1) (undo-tree-id21823 . -1) (undo-tree-id21824 . -1) (undo-tree-id21825 . -1) (undo-tree-id21826 . -1) (undo-tree-id21827 . -1) (undo-tree-id21828 . -1) (undo-tree-id21829 . -1) (undo-tree-id21830 . -1) (undo-tree-id21831 . -1) (undo-tree-id21832 . -1) (undo-tree-id21833 . -1) (undo-tree-id21834 . -1) (undo-tree-id21835 . -1) (1380 . 1388) (#("        " 0 8 (fontified t)) . 1381)) (26041 2950 710876 490000) 0 nil] [nil nil ((nil rear-nonsticky nil 2292 . 2293) (nil fontified nil 2292 . 2293) (nil fontified nil 2291 . 2292) (nil fontified nil 2288 . 2291) (nil fontified nil 2287 . 2288) (nil fontified nil 2278 . 2287) (nil fontified nil 2276 . 2278) (nil fontified nil 2273 . 2276) (nil fontified nil 2271 . 2273) (nil fontified nil 2268 . 2271) (nil fontified nil 2265 . 2268) (nil fontified nil 2240 . 2265) (nil fontified nil 2238 . 2240) (nil fontified nil 2235 . 2238) (nil fontified nil 2233 . 2235) (nil fontified nil 2230 . 2233) (nil fontified nil 2229 . 2230) (nil fontified nil 2226 . 2229) (nil fontified nil 2218 . 2226) (nil fontified nil 2216 . 2218) (nil fontified nil 2215 . 2216) (nil fontified nil 2214 . 2215) (nil fontified nil 2206 . 2214) (nil fontified nil 2198 . 2206) (nil fontified nil 2195 . 2198) (nil fontified nil 2192 . 2195) (nil fontified nil 2191 . 2192) (nil fontified nil 2188 . 2191) (nil fontified nil 2180 . 2188) (nil fontified nil 2178 . 2180) (nil fontified nil 2177 . 2178) (nil fontified nil 2164 . 2177) (nil fontified nil 2163 . 2164) (nil fontified nil 2162 . 2163) (nil fontified nil 2159 . 2162) (nil fontified nil 2157 . 2159) (nil fontified nil 2149 . 2157) (nil fontified nil 2146 . 2149) (nil fontified nil 2139 . 2146) (nil fontified nil 2138 . 2139) (nil fontified nil 2135 . 2138) (nil fontified nil 2127 . 2135) (nil fontified nil 2126 . 2127) (nil fontified nil 2125 . 2126) (nil fontified nil 2124 . 2125) (nil fontified nil 2116 . 2124) (nil fontified nil 2115 . 2116) (nil fontified nil 2114 . 2115) (nil fontified nil 2098 . 2114) (nil fontified nil 2096 . 2098) (nil fontified nil 2095 . 2096) (nil fontified nil 2089 . 2095) (nil fontified nil 2088 . 2089) (nil fontified nil 2083 . 2088) (nil fontified nil 2072 . 2083) (nil fontified nil 2070 . 2072) (nil fontified nil 2067 . 2070) (nil fontified nil 2064 . 2067) (nil fontified nil 2058 . 2064) (nil fontified nil 2038 . 2058) (nil fontified nil 2037 . 2038) (nil fontified nil 2036 . 2037) (nil fontified nil 2035 . 2036) (nil fontified nil 2015 . 2035) (nil fontified nil 2014 . 2015) (nil fontified nil 2013 . 2014) (nil fontified nil 2012 . 2013) (nil fontified nil 2006 . 2012) (nil fontified nil 2005 . 2006) (nil fontified nil 2004 . 2005) (nil fontified nil 2000 . 2004) (nil fontified nil 1999 . 2000) (nil fontified nil 1991 . 1999) (nil fontified nil 1989 . 1991) (nil fontified nil 1985 . 1989) (nil fontified nil 1960 . 1985) (nil fontified nil 1959 . 1960) (nil fontified nil 1958 . 1959) (nil fontified nil 1957 . 1958) (nil fontified nil 1951 . 1957) (nil fontified nil 1950 . 1951) (nil fontified nil 1922 . 1950) (nil fontified nil 1921 . 1922) (nil fontified nil 1920 . 1921) (nil fontified nil 1919 . 1920) (nil fontified nil 1913 . 1919) (nil fontified nil 1912 . 1913) (nil fontified nil 1884 . 1912) (nil fontified nil 1883 . 1884) (nil fontified nil 1882 . 1883) (nil fontified nil 1881 . 1882) (nil fontified nil 1878 . 1881) (nil fontified nil 1877 . 1878) (nil fontified nil 1857 . 1877) (nil fontified nil 1855 . 1857) (nil fontified nil 1852 . 1855) (nil fontified nil 1851 . 1852) (nil fontified nil 1847 . 1851) (nil fontified nil 1843 . 1847) (nil fontified nil 1841 . 1843) (nil fontified nil 1837 . 1841) (nil fontified nil 1812 . 1837) (nil fontified nil 1811 . 1812) (nil fontified nil 1810 . 1811) (nil fontified nil 1805 . 1810) (nil fontified nil 1792 . 1805) (nil fontified nil 1790 . 1792) (nil fontified nil 1781 . 1790) (nil fontified nil 1756 . 1781) (nil fontified nil 1755 . 1756) (nil fontified nil 1747 . 1755) (nil fontified nil 1727 . 1747) (nil fontified nil 1725 . 1727) (nil fontified nil 1724 . 1725) (nil fontified nil 1718 . 1724) (nil fontified nil 1717 . 1718) (nil fontified nil 1697 . 1717) (nil fontified nil 1695 . 1697) (nil fontified nil 1692 . 1695) (nil fontified nil 1689 . 1692) (nil fontified nil 1685 . 1689) (nil fontified nil 1684 . 1685) (nil fontified nil 1681 . 1684) (nil fontified nil 1661 . 1681) (nil fontified nil 1659 . 1661) (nil fontified nil 1658 . 1659) (nil fontified nil 1652 . 1658) (nil fontified nil 1651 . 1652) (nil fontified nil 1631 . 1651) (nil fontified nil 1629 . 1631) (nil fontified nil 1626 . 1629) (nil fontified nil 1623 . 1626) (nil fontified nil 1620 . 1623) (nil fontified nil 1619 . 1620) (nil fontified nil 1616 . 1619) (nil fontified nil 1596 . 1616) (nil fontified nil 1595 . 1596) (nil fontified nil 1594 . 1595) (nil fontified nil 1593 . 1594) (nil fontified nil 1592 . 1593) (nil fontified nil 1591 . 1592) (nil fontified nil 1584 . 1591) (nil fontified nil 1583 . 1584) (nil fontified nil 1577 . 1583) (nil fontified nil 1575 . 1577) (nil fontified nil 1570 . 1575) (nil fontified nil 1568 . 1570) (nil fontified nil 1558 . 1568) (nil fontified nil 1557 . 1558) (nil fontified nil 1556 . 1557) (nil fontified nil 1555 . 1556) (nil fontified nil 1554 . 1555) (nil fontified nil 1549 . 1554) (nil fontified nil 1548 . 1549) (nil fontified nil 1525 . 1548) (nil fontified nil 1523 . 1525) (nil fontified nil 1520 . 1523) (nil fontified nil 1517 . 1520) (nil fontified nil 1511 . 1517) (nil fontified nil 1510 . 1511) (nil fontified nil 1507 . 1510) (nil fontified nil 1506 . 1507) (nil fontified nil 1503 . 1506) (nil fontified nil 1487 . 1503) (nil fontified nil 1486 . 1487) (nil fontified nil 1485 . 1486) (nil fontified nil 1483 . 1485) (nil fontified nil 1477 . 1483) (nil fontified nil 1476 . 1477) (nil fontified nil 1471 . 1476) (nil fontified nil 1468 . 1471) (nil fontified nil 1460 . 1468) (nil fontified nil 1459 . 1460) (nil fontified nil 1445 . 1459) (nil fontified nil 1443 . 1445) (nil fontified nil 1440 . 1443) (nil fontified nil 1439 . 1440) (nil fontified nil 1436 . 1439) (nil fontified nil 1433 . 1436) (nil fontified nil 1428 . 1433) (nil fontified nil 1424 . 1428) (nil fontified nil 1411 . 1424) (nil fontified nil 1410 . 1411) (nil fontified nil 1407 . 1410) (nil fontified nil 1399 . 1407) (nil fontified nil 1398 . 1399) (nil fontified nil 1397 . 1398) (nil fontified nil 1389 . 1397) (nil fontified nil 1387 . 1389) (nil fontified nil 1383 . 1387) (nil fontified nil 1381 . 1383) (nil fontified nil 1375 . 1381) (nil fontified nil 1374 . 1375) (nil fontified nil 1371 . 1374) (nil fontified nil 1366 . 1371) (1366 . 2293)) ((#("     use libffi::high::Closure2;
        let image_handler = |image: *mut ffi::zbar_image_t, _userdata: *const c_void| {
                let mut symbol = ffi::zbar_image_first_symbol(image);

            while !symbol.is_null() {
                    let typ = ffi::zbar_symbol_get_type(symbol);
                    let data = ffi::zbar_symbol_get_data(symbol);
                    println!(
                        \"decoded {} symbol \\\"{:?}\\\"\\n\",
                        CStr::from_ptr(ffi::zbar_get_symbol_name(typ))
                            .to_str()
                            .unwrap(),
                        CStr::from_ptr(data).to_str()
                    );
                    symbol = ffi::zbar_symbol_next(symbol);
                }
        };
        let closure = Closure2::new(&image_handler);
        let fun = closure.code_ptr();
        let ptr: ffi::zbar_image_data_handler_t = std::mem::transmute(fun);" 0 5 (fontified nil) 5 8 (face font-lock-keyword-face fontified nil) 8 9 (fontified nil) 9 15 (face font-lock-constant-face fontified nil) 15 17 (fontified nil) 17 21 (face font-lock-constant-face fontified nil) 21 23 (fontified nil) 23 31 (face font-lock-type-face fontified nil) 31 32 (fontified nil) 32 33 (fontified nil) 33 37 (fontified nil) 37 41 (fontified nil) 41 44 (face font-lock-keyword-face fontified nil) 44 45 (fontified nil) 45 58 (face font-lock-variable-name-face fontified nil) 58 62 (fontified nil) 62 67 (face font-lock-variable-name-face fontified nil) 67 70 (fontified nil) 70 73 (face font-lock-keyword-face fontified nil) 73 74 (fontified nil) 74 77 (face font-lock-constant-face fontified nil) 77 79 (fontified nil) 79 93 (fontified nil) 93 94 (face font-lock-variable-name-face fontified nil) 94 102 (face font-lock-variable-name-face fontified nil) 102 105 (fontified nil) 105 110 (face font-lock-keyword-face fontified nil) 110 111 (fontified nil) 111 117 (fontified nil) 117 119 (fontified nil) 119 120 (face (rainbow-delimiters-depth-2-face) fontified nil) 120 121 (fontified nil) 121 129 (fontified nil) 129 137 (fontified nil) 137 140 (face font-lock-keyword-face fontified nil) 140 141 (fontified nil) 141 144 (face font-lock-keyword-face fontified nil) 144 145 (fontified nil) 145 151 (face font-lock-variable-name-face fontified nil) 151 154 (fontified nil) 154 157 (face font-lock-constant-face fontified nil) 157 159 (fontified nil) 159 182 (fontified nil) 182 183 (face (rainbow-delimiters-depth-3-face) fontified nil) 183 188 (fontified nil) 188 189 (face (rainbow-delimiters-depth-3-face) fontified nil) 189 190 (fontified nil) 190 191 (fontified nil) 191 192 (fontified nil) 192 200 (fontified nil) 200 202 (fontified nil) 202 204 (fontified nil) 204 209 (face font-lock-keyword-face fontified nil) 209 211 (fontified nil) 211 217 (fontified nil) 217 218 (fontified nil) 218 225 (fontified nil) 225 226 (face (rainbow-delimiters-depth-3-face) fontified nil) 226 227 (face (rainbow-delimiters-depth-3-face) fontified nil) 227 228 (fontified nil) 228 229 (face (rainbow-delimiters-depth-3-face) fontified nil) 229 230 (fontified nil) 230 242 (fontified nil) 242 250 (fontified nil) 250 253 (face font-lock-keyword-face fontified nil) 253 254 (fontified nil) 254 257 (face font-lock-variable-name-face fontified nil) 257 260 (fontified nil) 260 263 (face font-lock-constant-face fontified nil) 263 265 (fontified nil) 265 285 (fontified nil) 285 286 (face (rainbow-delimiters-depth-4-face) fontified nil) 286 292 (fontified nil) 292 293 (face (rainbow-delimiters-depth-4-face) fontified nil) 293 295 (fontified nil) 295 307 (fontified nil) 307 315 (fontified nil) 315 318 (face font-lock-keyword-face fontified nil) 318 319 (fontified nil) 319 323 (face font-lock-variable-name-face fontified nil) 323 326 (fontified nil) 326 329 (face font-lock-constant-face fontified nil) 329 331 (fontified nil) 331 351 (fontified nil) 351 352 (face (rainbow-delimiters-depth-4-face) fontified nil) 352 358 (fontified nil) 358 359 (face (rainbow-delimiters-depth-4-face) fontified nil) 359 361 (fontified nil) 361 373 (fontified nil) 373 381 (fontified nil) 381 389 (face rust-builtin-formatting-macro fontified nil) 389 390 (face (rainbow-delimiters-depth-4-face) fontified nil) 390 391 (fontified nil) 391 407 (fontified nil) 407 415 (fontified nil) 415 424 (face font-lock-string-face fontified nil) 424 426 (face rust-string-interpolation fontified nil) 426 439 (face font-lock-string-face fontified nil) 439 444 (face font-lock-string-face fontified nil) 444 445 (face font-lock-string-face fontified nil rear-nonsticky t) 445 446 (fontified nil) 446 447 (fontified nil) 447 463 (fontified nil) 463 471 (fontified nil) 471 475 (face font-lock-type-face fontified nil) 475 477 (fontified nil) 477 481 (fontified nil) 481 485 (fontified nil) 485 486 (face (rainbow-delimiters-depth-5-face) fontified nil) 486 489 (face font-lock-constant-face fontified nil) 489 491 (fontified nil) 491 511 (fontified nil) 511 512 (face (rainbow-delimiters-depth-6-face) fontified nil) 512 515 (fontified nil) 515 516 (face (rainbow-delimiters-depth-6-face) fontified nil) 516 517 (face (rainbow-delimiters-depth-5-face) fontified nil) 517 518 (fontified nil) 518 538 (fontified nil) 538 546 (fontified nil) 546 547 (fontified nil) 547 553 (fontified nil) 553 554 (face (rainbow-delimiters-depth-5-face) fontified nil) 554 555 (face (rainbow-delimiters-depth-5-face) fontified nil) 555 556 (fontified nil) 556 576 (fontified nil) 576 584 (fontified nil) 584 585 (fontified nil) 585 591 (fontified nil) 591 592 (face (rainbow-delimiters-depth-5-face) fontified nil) 592 593 (face (rainbow-delimiters-depth-5-face) fontified nil) 593 594 (fontified nil) 594 595 (fontified nil) 595 611 (fontified nil) 611 619 (fontified nil) 619 623 (face font-lock-type-face fontified nil) 623 625 (fontified nil) 625 633 (fontified nil) 633 634 (face (rainbow-delimiters-depth-5-face) fontified nil) 634 638 (fontified nil) 638 639 (face (rainbow-delimiters-depth-5-face) fontified nil) 639 640 (fontified nil) 640 646 (fontified nil) 646 647 (face (rainbow-delimiters-depth-5-face) fontified nil) 647 648 (face (rainbow-delimiters-depth-5-face) fontified nil) 648 649 (fontified nil) 649 661 (fontified nil) 661 669 (fontified nil) 669 670 (face (rainbow-delimiters-depth-4-face) fontified nil) 670 671 (fontified nil) 671 672 (fontified nil) 672 684 (fontified nil) 684 692 (fontified nil) 692 698 (fontified nil) 698 701 (fontified nil) 701 704 (face font-lock-constant-face fontified nil) 704 706 (fontified nil) 706 717 (fontified nil) 717 722 (fontified nil) 722 723 (face (rainbow-delimiters-depth-4-face) fontified nil) 723 729 (fontified nil) 729 730 (face (rainbow-delimiters-depth-4-face) fontified nil) 730 732 (fontified nil) 732 740 (fontified nil) 740 748 (fontified nil) 748 749 (face (rainbow-delimiters-depth-3-face) fontified nil rear-nonsticky t) 749 750 (fontified nil) 750 754 (fontified nil) 754 758 (fontified nil) 758 759 (face (rainbow-delimiters-depth-2-face) fontified nil) 759 760 (fontified nil) 760 761 (fontified nil) 761 765 (fontified nil) 765 769 (fontified nil) 769 772 (face font-lock-keyword-face fontified nil) 772 773 (fontified nil) 773 780 (face font-lock-variable-name-face fontified nil) 780 783 (fontified nil) 783 791 (face font-lock-type-face fontified nil) 791 793 (fontified nil) 793 796 (fontified nil) 796 797 (face (rainbow-delimiters-depth-2-face) fontified nil) 797 798 (face rust-ampersand-face fontified nil) 798 811 (fontified nil) 811 812 (face (rainbow-delimiters-depth-2-face) fontified nil) 812 814 (fontified nil) 814 818 (fontified nil) 818 822 (fontified nil) 822 825 (face font-lock-keyword-face fontified nil) 825 826 (fontified nil) 826 829 (face font-lock-variable-name-face fontified nil) 829 832 (fontified nil) 832 840 (fontified nil) 840 848 (fontified nil) 848 849 (face (rainbow-delimiters-depth-2-face) fontified nil) 849 850 (face (rainbow-delimiters-depth-2-face) fontified nil) 850 852 (fontified nil) 852 856 (fontified nil) 856 860 (fontified nil) 860 863 (face font-lock-keyword-face fontified nil) 863 864 (fontified nil) 864 867 (face font-lock-variable-name-face fontified nil) 867 869 (fontified nil) 869 872 (face font-lock-constant-face fontified nil) 872 874 (fontified nil) 874 899 (fontified nil) 899 902 (fontified nil) 902 905 (face font-lock-constant-face fontified nil) 905 907 (fontified nil) 907 910 (face font-lock-constant-face fontified nil) 910 912 (fontified nil) 912 921 (fontified nil) 921 922 (face (rainbow-delimiters-depth-2-face) fontified nil) 922 925 (fontified nil) 925 926 (face (rainbow-delimiters-depth-2-face) fontified nil) 926 927 (fontified nil rear-nonsticky nil)) . 1366) (undo-tree-id21430 . -927) (undo-tree-id21431 . -927) (undo-tree-id21432 . -927) (undo-tree-id21433 . -927) (undo-tree-id21434 . -927) (undo-tree-id21435 . -927) (undo-tree-id21436 . -927) (nil fontified t 1398 . 1399) (nil fontified t 1486 . 1487) (nil fontified t 1556 . 1557) (nil fontified t 1557 . 1558) (nil fontified t 1595 . 1596) (nil fontified t 1659 . 1661) (nil fontified t 1725 . 1727) (nil fontified t 1756 . 1757) (nil fontified t 1812 . 1813) (nil fontified t 1883 . 1884) (nil fontified t 1921 . 1922) (nil fontified t 1960 . 1961) (nil fontified t 2014 . 2015) (nil fontified t 2037 . 2038) (nil fontified t 2096 . 2098) (nil fontified t 2115 . 2116) (nil fontified t 2126 . 2127) (nil fontified t 2178 . 2180) (nil fontified t 2216 . 2218) (nil rear-nonsticky t 2292 . 2293)) (26041 2740 705291 777000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3317 . 3318) (nil fontified nil 3254 . 3318) (3254 . 3318)) nil (26041 3353 338791 295000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2306 . 2307) (nil fontified nil 2306 . 2307) (nil fontified nil 2305 . 2306) (nil fontified nil 2302 . 2305) (nil fontified nil 2301 . 2302) (nil fontified nil 2292 . 2301) (nil fontified nil 2290 . 2292) (nil fontified nil 2287 . 2290) (nil fontified nil 2285 . 2287) (nil fontified nil 2282 . 2285) (nil fontified nil 2279 . 2282) (nil fontified nil 2254 . 2279) (nil fontified nil 2252 . 2254) (nil fontified nil 2249 . 2252) (nil fontified nil 2247 . 2249) (nil fontified nil 2244 . 2247) (nil fontified nil 2243 . 2244) (nil fontified nil 2240 . 2243) (nil fontified nil 2232 . 2240) (nil fontified nil 2230 . 2232) (nil fontified nil 2229 . 2230) (nil fontified nil 2228 . 2229) (nil fontified nil 2220 . 2228) (nil fontified nil 2212 . 2220) (nil fontified nil 2209 . 2212) (nil fontified nil 2206 . 2209) (nil fontified nil 2205 . 2206) (nil fontified nil 2202 . 2205) (nil fontified nil 2194 . 2202) (nil fontified nil 2192 . 2194) (nil fontified nil 2191 . 2192) (nil fontified nil 2178 . 2191) (nil fontified nil 2177 . 2178) (nil fontified nil 2176 . 2177) (nil fontified nil 2173 . 2176) (nil fontified nil 2171 . 2173) (nil fontified nil 2163 . 2171) (nil fontified nil 2160 . 2163) (nil fontified nil 2153 . 2160) (nil fontified nil 2152 . 2153) (nil fontified nil 2149 . 2152) (nil fontified nil 2141 . 2149) (nil fontified nil 2140 . 2141) (nil fontified nil 2139 . 2140) (nil fontified nil 2138 . 2139) (nil fontified nil 2130 . 2138) (nil fontified nil 2129 . 2130) (nil fontified nil 2128 . 2129) (nil fontified nil 2112 . 2128) (nil fontified nil 2110 . 2112) (nil fontified nil 2109 . 2110) (nil fontified nil 2103 . 2109) (nil fontified nil 2102 . 2103) (nil fontified nil 2097 . 2102) (nil fontified nil 2086 . 2097) (nil fontified nil 2084 . 2086) (nil fontified nil 2081 . 2084) (nil fontified nil 2078 . 2081) (nil fontified nil 2072 . 2078) (nil fontified nil 2052 . 2072) (nil fontified nil 2051 . 2052) (nil fontified nil 2050 . 2051) (nil fontified nil 2049 . 2050) (nil fontified nil 2029 . 2049) (nil fontified nil 2028 . 2029) (nil fontified nil 2027 . 2028) (nil fontified nil 2026 . 2027) (nil fontified nil 2020 . 2026) (nil fontified nil 2019 . 2020) (nil fontified nil 2018 . 2019) (nil fontified nil 2014 . 2018) (nil fontified nil 2013 . 2014) (nil fontified nil 2005 . 2013) (nil fontified nil 2003 . 2005) (nil fontified nil 1999 . 2003) (nil fontified nil 1974 . 1999) (nil fontified nil 1973 . 1974) (nil fontified nil 1972 . 1973) (nil fontified nil 1971 . 1972) (nil fontified nil 1965 . 1971) (nil fontified nil 1964 . 1965) (nil fontified nil 1936 . 1964) (nil fontified nil 1935 . 1936) (nil fontified nil 1934 . 1935) (nil fontified nil 1933 . 1934) (nil fontified nil 1927 . 1933) (nil fontified nil 1926 . 1927) (nil fontified nil 1898 . 1926) (nil fontified nil 1897 . 1898) (nil fontified nil 1896 . 1897) (nil fontified nil 1895 . 1896) (nil fontified nil 1892 . 1895) (nil fontified nil 1891 . 1892) (nil fontified nil 1871 . 1891) (nil fontified nil 1869 . 1871) (nil fontified nil 1866 . 1869) (nil fontified nil 1865 . 1866) (nil fontified nil 1861 . 1865) (nil fontified nil 1857 . 1861) (nil fontified nil 1855 . 1857) (nil fontified nil 1851 . 1855) (nil fontified nil 1826 . 1851) (nil fontified nil 1825 . 1826) (nil fontified nil 1824 . 1825) (nil fontified nil 1819 . 1824) (nil fontified nil 1806 . 1819) (nil fontified nil 1804 . 1806) (nil fontified nil 1795 . 1804) (nil fontified nil 1770 . 1795) (nil fontified nil 1769 . 1770) (nil fontified nil 1761 . 1769) (nil fontified nil 1741 . 1761) (nil fontified nil 1739 . 1741) (nil fontified nil 1738 . 1739) (nil fontified nil 1732 . 1738) (nil fontified nil 1731 . 1732) (nil fontified nil 1711 . 1731) (nil fontified nil 1709 . 1711) (nil fontified nil 1706 . 1709) (nil fontified nil 1703 . 1706) (nil fontified nil 1699 . 1703) (nil fontified nil 1698 . 1699) (nil fontified nil 1695 . 1698) (nil fontified nil 1675 . 1695) (nil fontified nil 1673 . 1675) (nil fontified nil 1672 . 1673) (nil fontified nil 1666 . 1672) (nil fontified nil 1665 . 1666) (nil fontified nil 1645 . 1665) (nil fontified nil 1643 . 1645) (nil fontified nil 1640 . 1643) (nil fontified nil 1637 . 1640) (nil fontified nil 1634 . 1637) (nil fontified nil 1633 . 1634) (nil fontified nil 1630 . 1633) (nil fontified nil 1610 . 1630) (nil fontified nil 1609 . 1610) (nil fontified nil 1608 . 1609) (nil fontified nil 1607 . 1608) (nil fontified nil 1606 . 1607) (nil fontified nil 1605 . 1606) (nil fontified nil 1598 . 1605) (nil fontified nil 1597 . 1598) (nil fontified nil 1591 . 1597) (nil fontified nil 1589 . 1591) (nil fontified nil 1584 . 1589) (nil fontified nil 1582 . 1584) (nil fontified nil 1572 . 1582) (nil fontified nil 1571 . 1572) (nil fontified nil 1570 . 1571) (nil fontified nil 1569 . 1570) (nil fontified nil 1568 . 1569) (nil fontified nil 1563 . 1568) (nil fontified nil 1562 . 1563) (nil fontified nil 1539 . 1562) (nil fontified nil 1537 . 1539) (nil fontified nil 1534 . 1537) (nil fontified nil 1531 . 1534) (nil fontified nil 1525 . 1531) (nil fontified nil 1524 . 1525) (nil fontified nil 1521 . 1524) (nil fontified nil 1520 . 1521) (nil fontified nil 1517 . 1520) (nil fontified nil 1501 . 1517) (nil fontified nil 1500 . 1501) (nil fontified nil 1499 . 1500) (nil fontified nil 1497 . 1499) (nil fontified nil 1491 . 1497) (nil fontified nil 1490 . 1491) (nil fontified nil 1485 . 1490) (nil fontified nil 1482 . 1485) (nil fontified nil 1474 . 1482) (nil fontified nil 1473 . 1474) (nil fontified nil 1459 . 1473) (nil fontified nil 1457 . 1459) (nil fontified nil 1454 . 1457) (nil fontified nil 1453 . 1454) (nil fontified nil 1450 . 1453) (nil fontified nil 1447 . 1450) (nil fontified nil 1442 . 1447) (nil fontified nil 1438 . 1442) (nil fontified nil 1425 . 1438) (nil fontified nil 1424 . 1425) (nil fontified nil 1421 . 1424) (nil fontified nil 1413 . 1421) (nil fontified nil 1412 . 1413) (nil fontified nil 1411 . 1412) (nil fontified nil 1403 . 1411) (nil fontified nil 1401 . 1403) (nil fontified nil 1397 . 1401) (nil fontified nil 1395 . 1397) (nil fontified nil 1389 . 1395) (nil fontified nil 1388 . 1389) (nil fontified nil 1385 . 1388) (nil fontified nil 1380 . 1385) (1380 . 2307)) ((#("     use libffi::high::Closure2;
        let image_handler = |image: *mut ffi::zbar_image_t, _userdata: *const c_void| {
                let mut symbol = ffi::zbar_image_first_symbol(image);

            while !symbol.is_null() {
                    let typ = ffi::zbar_symbol_get_type(symbol);
                    let data = ffi::zbar_symbol_get_data(symbol);
                    println!(
                        \"decoded {} symbol \\\"{:?}\\\"\\n\",
                        CStr::from_ptr(ffi::zbar_get_symbol_name(typ))
                            .to_str()
                            .unwrap(),
                        CStr::from_ptr(data).to_str()
                    );
                    symbol = ffi::zbar_symbol_next(symbol);
                }
        };
        let closure = Closure2::new(&image_handler);
        let fun = closure.code_ptr();
        let ptr: ffi::zbar_image_data_handler_t = std::mem::transmute(fun);" 0 5 (fontified nil) 5 8 (face font-lock-keyword-face fontified nil) 8 9 (fontified nil) 9 15 (face font-lock-constant-face fontified nil) 15 17 (fontified nil) 17 21 (face font-lock-constant-face fontified nil) 21 23 (fontified nil) 23 31 (face font-lock-type-face fontified nil) 31 32 (fontified nil) 32 33 (fontified nil) 33 41 (fontified nil) 41 44 (face font-lock-keyword-face fontified nil) 44 45 (fontified nil) 45 58 (face font-lock-variable-name-face fontified nil) 58 62 (fontified nil) 62 67 (face font-lock-variable-name-face fontified nil) 67 70 (fontified nil) 70 73 (face font-lock-keyword-face fontified nil) 73 74 (fontified nil) 74 77 (face font-lock-constant-face fontified nil) 77 79 (fontified nil) 79 93 (fontified nil) 93 94 (face font-lock-variable-name-face fontified nil) 94 102 (face font-lock-variable-name-face fontified nil) 102 105 (fontified nil) 105 110 (face font-lock-keyword-face fontified nil) 110 111 (fontified nil) 111 117 (fontified nil) 117 119 (fontified nil) 119 120 (face (rainbow-delimiters-depth-3-face) fontified nil) 120 121 (fontified nil) 121 137 (fontified nil) 137 140 (face font-lock-keyword-face fontified nil) 140 141 (fontified nil) 141 144 (face font-lock-keyword-face fontified nil) 144 145 (fontified nil) 145 151 (face font-lock-variable-name-face fontified nil) 151 154 (fontified nil) 154 157 (face font-lock-constant-face fontified nil) 157 159 (fontified nil) 159 182 (fontified nil) 182 183 (face (rainbow-delimiters-depth-4-face) fontified nil) 183 188 (fontified nil) 188 189 (face (rainbow-delimiters-depth-4-face) fontified nil) 189 190 (fontified nil) 190 191 (fontified nil) 191 192 (fontified nil) 192 202 (fontified nil) 202 204 (fontified nil) 204 209 (face font-lock-keyword-face fontified nil) 209 211 (fontified nil) 211 217 (fontified nil) 217 218 (fontified nil) 218 225 (fontified nil) 225 226 (face (rainbow-delimiters-depth-4-face) fontified nil) 226 227 (face (rainbow-delimiters-depth-4-face) fontified nil) 227 228 (fontified nil) 228 229 (face (rainbow-delimiters-depth-4-face) fontified nil) 229 230 (fontified nil) 230 250 (fontified nil) 250 253 (face font-lock-keyword-face fontified nil) 253 254 (fontified nil) 254 257 (face font-lock-variable-name-face fontified nil) 257 260 (fontified nil) 260 263 (face font-lock-constant-face fontified nil) 263 265 (fontified nil) 265 285 (fontified nil) 285 286 (face (rainbow-delimiters-depth-5-face) fontified nil) 286 292 (fontified nil) 292 293 (face (rainbow-delimiters-depth-5-face) fontified nil) 293 295 (fontified nil) 295 315 (fontified nil) 315 318 (face font-lock-keyword-face fontified nil) 318 319 (fontified nil) 319 323 (face font-lock-variable-name-face fontified nil) 323 326 (fontified nil) 326 329 (face font-lock-constant-face fontified nil) 329 331 (fontified nil) 331 351 (fontified nil) 351 352 (face (rainbow-delimiters-depth-5-face) fontified nil) 352 358 (fontified nil) 358 359 (face (rainbow-delimiters-depth-5-face) fontified nil) 359 361 (fontified nil) 361 381 (fontified nil) 381 389 (face rust-builtin-formatting-macro fontified nil) 389 390 (face (rainbow-delimiters-depth-5-face) fontified nil) 390 391 (fontified nil) 391 415 (fontified nil) 415 424 (face font-lock-string-face fontified nil) 424 426 (face rust-string-interpolation fontified nil) 426 439 (face font-lock-string-face fontified nil) 439 444 (face font-lock-string-face fontified nil) 444 445 (face font-lock-string-face fontified nil rear-nonsticky t) 445 446 (fontified nil) 446 447 (fontified nil) 447 471 (fontified nil) 471 475 (face font-lock-type-face fontified nil) 475 477 (fontified nil) 477 481 (fontified nil) 481 485 (fontified nil) 485 486 (face (rainbow-delimiters-depth-6-face) fontified nil) 486 489 (face font-lock-constant-face fontified nil) 489 491 (fontified nil) 491 511 (fontified nil) 511 512 (face (rainbow-delimiters-depth-7-face) fontified nil) 512 515 (fontified nil) 515 516 (face (rainbow-delimiters-depth-7-face) fontified nil) 516 517 (face (rainbow-delimiters-depth-6-face) fontified nil) 517 518 (fontified nil) 518 546 (fontified nil) 546 547 (fontified nil) 547 553 (fontified nil) 553 554 (face (rainbow-delimiters-depth-6-face) fontified nil) 554 555 (face (rainbow-delimiters-depth-6-face) fontified nil) 555 556 (fontified nil) 556 584 (fontified nil) 584 585 (fontified nil) 585 591 (fontified nil) 591 592 (face (rainbow-delimiters-depth-6-face) fontified nil) 592 593 (face (rainbow-delimiters-depth-6-face) fontified nil) 593 594 (fontified nil) 594 595 (fontified nil) 595 619 (fontified nil) 619 623 (face font-lock-type-face fontified nil) 623 625 (fontified nil) 625 633 (fontified nil) 633 634 (face (rainbow-delimiters-depth-6-face) fontified nil) 634 638 (fontified nil) 638 639 (face (rainbow-delimiters-depth-6-face) fontified nil) 639 640 (fontified nil) 640 646 (fontified nil) 646 647 (face (rainbow-delimiters-depth-6-face) fontified nil) 647 648 (face (rainbow-delimiters-depth-6-face) fontified nil) 648 649 (fontified nil) 649 669 (fontified nil) 669 670 (face (rainbow-delimiters-depth-5-face) fontified nil) 670 671 (fontified nil) 671 672 (fontified nil) 672 692 (fontified nil) 692 698 (fontified nil) 698 701 (fontified nil) 701 704 (face font-lock-constant-face fontified nil) 704 706 (fontified nil) 706 717 (fontified nil) 717 722 (fontified nil) 722 723 (face (rainbow-delimiters-depth-5-face) fontified nil) 723 729 (fontified nil) 729 730 (face (rainbow-delimiters-depth-5-face) fontified nil) 730 732 (fontified nil) 732 748 (fontified nil) 748 749 (face (rainbow-delimiters-depth-4-face) fontified nil rear-nonsticky t) 749 750 (fontified nil) 750 758 (fontified nil) 758 759 (face (rainbow-delimiters-depth-3-face) fontified nil) 759 760 (fontified nil) 760 761 (fontified nil) 761 769 (fontified nil) 769 772 (face font-lock-keyword-face fontified nil) 772 773 (fontified nil) 773 780 (face font-lock-variable-name-face fontified nil) 780 783 (fontified nil) 783 791 (face font-lock-type-face fontified nil) 791 793 (fontified nil) 793 796 (fontified nil) 796 797 (face (rainbow-delimiters-depth-3-face) fontified nil) 797 798 (face rust-ampersand-face fontified nil) 798 811 (fontified nil) 811 812 (face (rainbow-delimiters-depth-3-face) fontified nil) 812 814 (fontified nil) 814 822 (fontified nil) 822 825 (face font-lock-keyword-face fontified nil) 825 826 (fontified nil) 826 829 (face font-lock-variable-name-face fontified nil) 829 832 (fontified nil) 832 840 (fontified nil) 840 848 (fontified nil) 848 849 (face (rainbow-delimiters-depth-3-face) fontified nil) 849 850 (face (rainbow-delimiters-depth-3-face) fontified nil) 850 852 (fontified nil) 852 860 (fontified nil) 860 863 (face font-lock-keyword-face fontified nil) 863 864 (fontified nil) 864 867 (face font-lock-variable-name-face fontified nil) 867 869 (fontified nil) 869 872 (face font-lock-constant-face fontified nil) 872 874 (fontified nil) 874 899 (fontified nil) 899 902 (fontified nil) 902 905 (face font-lock-constant-face fontified nil) 905 907 (fontified nil) 907 910 (face font-lock-constant-face fontified nil) 910 912 (fontified nil) 912 921 (fontified nil) 921 922 (face (rainbow-delimiters-depth-3-face) fontified nil) 922 925 (fontified nil) 925 926 (face (rainbow-delimiters-depth-3-face) fontified nil) 926 927 (fontified nil rear-nonsticky nil)) . 1380) (undo-tree-id21763 . -682) (undo-tree-id21764 . -927) (undo-tree-id21765 . -191) (undo-tree-id21766 . -927) (undo-tree-id21767 . -927) (undo-tree-id21768 . -927) (undo-tree-id21769 . -927) (undo-tree-id21770 . -927) (undo-tree-id21771 . -927) (undo-tree-id21772 . -927) (undo-tree-id21773 . -927) (undo-tree-id21774 . -927) (undo-tree-id21775 . -927) (undo-tree-id21776 . -927) (undo-tree-id21777 . -927) (undo-tree-id21778 . -927) (undo-tree-id21779 . -927) (undo-tree-id21780 . -927) (undo-tree-id21781 . -927) (undo-tree-id21782 . -927) (undo-tree-id21783 . -927) (undo-tree-id21784 . -927) (undo-tree-id21785 . -927) (undo-tree-id21786 . -927) (undo-tree-id21787 . -927) (undo-tree-id21788 . -927) (undo-tree-id21789 . -927) (undo-tree-id21790 . -927) (undo-tree-id21791 . -927) (undo-tree-id21792 . -927) (undo-tree-id21793 . -927) (undo-tree-id21794 . -852) (undo-tree-id21795 . -927) (undo-tree-id21796 . -927) (nil fontified t 1412 . 1413) (nil fontified t 1500 . 1501) (nil fontified t 1570 . 1571) (nil fontified t 1571 . 1572) (nil fontified t 1609 . 1610) (nil fontified t 1673 . 1675) (nil fontified t 1739 . 1741) (nil fontified t 1770 . 1771) (nil fontified t 1826 . 1827) (nil fontified t 1897 . 1898) (nil fontified t 1935 . 1936) (nil fontified t 1974 . 1975) (nil fontified t 2028 . 2029) (nil fontified t 2051 . 2052) (nil fontified t 2110 . 2112) (nil fontified t 2129 . 2130) (nil fontified t 2140 . 2141) (nil fontified t 2192 . 2194) (nil fontified t 2230 . 2232) (nil rear-nonsticky t 2306 . 2307)) (26041 2950 377985 303000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2101) (#("    " 0 4 (fontified t)) . -2067) (#("    " 0 4 (fontified t)) . -2018) (#("    " 0 4 (fontified t)) . -2011) (#("        " 0 8 (fontified t)) . -2005) (#("        " 0 8 (fontified t)) . -1957) (#("        " 0 8 (fontified t)) . -1942) (#("        " 0 8 (fontified t)) . -1900) (#("        " 0 8 (fontified t)) . -1873) (#("        " 0 8 (fontified t)) . -1843) (#("        " 0 8 (fontified t)) . -1776) (#("        " 0 8 (fontified t)) . -1728) (#("        " 0 8 (fontified t)) . -1702) (#("        " 0 8 (fontified t)) . -1644) (#("        " 0 8 (fontified t)) . -1587) (undo-tree-id21367 . -7) (undo-tree-id21369 . -5) (#("    " 0 2 (fontified t) 2 4 (fontified t)) . -1549) (#("        " 0 8 (fontified t)) . -1486) (#("    " 0 4 (fontified t)) . -1398) (undo-tree-id21372 . -1) (#("     " 0 5 (fontified t)) . -1366) 1361) ((1366 . 1371) (1398 . 1402) (1486 . 1494) (1549 . 1553) (1587 . 1595) (1644 . 1652) (1702 . 1710) (1728 . 1736) (1776 . 1784) (1843 . 1851) (1873 . 1881) (1900 . 1908) (1942 . 1950) (1957 . 1965) (2005 . 2013) (2011 . 2015) (2018 . 2022) (2067 . 2071) (2101 . 2105) (t 26041 2735 687789 174000)) (26041 2740 364510 490000) 0 nil])
([nil nil ((3318 . 3330)) nil (26041 3353 338789 497000) 0 nil])
([nil nil ((2307 . 2316) (t 26041 2746 571123 175000)) ((#("
        " 0 1 (fontified t) 1 9 (fontified t)) . 2307) (undo-tree-id21733 . -9) (undo-tree-id21734 . -9) (undo-tree-id21735 . -9) (undo-tree-id21736 . -9) (undo-tree-id21737 . -9) (undo-tree-id21738 . -9) (undo-tree-id21739 . -9) (undo-tree-id21740 . -9) (undo-tree-id21741 . -9) (undo-tree-id21742 . -9) (undo-tree-id21743 . -9) (undo-tree-id21744 . -9) (undo-tree-id21745 . -9) (undo-tree-id21746 . -9) (undo-tree-id21747 . -9) (undo-tree-id21748 . -9) (undo-tree-id21749 . -9) (undo-tree-id21750 . -9) (undo-tree-id21751 . -9) (undo-tree-id21752 . -9) (undo-tree-id21753 . -9) (undo-tree-id21754 . -9) (undo-tree-id21755 . -9) (undo-tree-id21756 . -9) (undo-tree-id21757 . -9) (undo-tree-id21758 . -9) (undo-tree-id21759 . -9) (undo-tree-id21760 . -1) (undo-tree-id21761 . -9) (undo-tree-id21762 . -9)) (26041 2950 124072 947000) 0 nil])
([nil nil ((2168 . 2173) (t 26041 2735 687789 174000)) ((#("
    " 0 5 (fontified t)) . 2168)) (26041 2740 364163 737000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3254)) nil (26041 3353 338784 728000) 0 nil])
([nil nil ((2316 . 2320)) ((#("let " 0 1 (face font-lock-keyword-face fontified t) 1 2 (face font-lock-keyword-face fontified t) 2 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . 2316) (undo-tree-id21726 . -4) (undo-tree-id21727 . -1) (undo-tree-id21728 . -1) (undo-tree-id21729 . -1) (undo-tree-id21730 . -1) (undo-tree-id21731 . -4) (undo-tree-id21732 . -4)) (26041 2949 857274 950000) 0 nil])
nil
([nil nil ((3254 . 3255) (t 26041 3353 371160 399000)) nil (26041 3479 86453 701000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -2317) (undo-tree-id21579 . -1) (undo-tree-id21581 . -1) (undo-tree-id21583 . -1) (undo-tree-id21585 . -1) (undo-tree-id21587 . -1) (undo-tree-id21589 . -1) (undo-tree-id21591 . -1) (undo-tree-id21593 . -1) (undo-tree-id21595 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -2318) (undo-tree-id21596 . -1) (undo-tree-id21598 . -1) (undo-tree-id21600 . -1) (undo-tree-id21602 . -1) (undo-tree-id21604 . -1) (undo-tree-id21606 . -1) (#(" " 0 1 (fontified t)) . -2319) (undo-tree-id21608 . -1) (undo-tree-id21610 . -1) (undo-tree-id21612 . -1) (undo-tree-id21614 . -1) 2320) ((2317 . 2320)) (26041 2949 588381 48000) 0 nil])
([nil nil ((3255 . 3267)) nil (26041 3479 86452 921000) 0 nil])
([nil nil ((2317 . 2319)) ((#("st" 0 1 (fontified t) 1 2 (fontified t)) . 2317) (undo-tree-id21723 . -2) (undo-tree-id21724 . -2) (undo-tree-id21725 . -2)) (26041 2949 306212 107000) 0 nil])
([nil nil ((#("let symbols = processor.process_image(&mut image).unwrap();" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 11 (face font-lock-variable-name-face fontified t) 11 37 (fontified t) 37 38 (face (rainbow-delimiters-depth-4-face) fontified t) 38 39 (face rust-ampersand-face fontified t) 39 42 (face font-lock-keyword-face fontified t) 42 48 (fontified t) 48 49 (face (rainbow-delimiters-depth-4-face) fontified t) 49 56 (fontified t) 56 57 (face (rainbow-delimiters-depth-4-face) fontified t) 57 58 (face (rainbow-delimiters-depth-4-face) fontified t) 58 59 (fontified t)) . 3267)) nil (26041 3479 86452 267000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -2316) (undo-tree-id21532 . -1) (undo-tree-id21534 . -1) (undo-tree-id21536 . -1) (undo-tree-id21538 . -1) (undo-tree-id21540 . -1) (undo-tree-id21542 . -1) (undo-tree-id21544 . -1) (undo-tree-id21546 . -1) (undo-tree-id21548 . -1) (undo-tree-id21550 . -1) (undo-tree-id21552 . -1) (undo-tree-id21554 . -1) (undo-tree-id21556 . -1) (undo-tree-id21558 . -1) (undo-tree-id21560 . -1) (undo-tree-id21562 . -1) (undo-tree-id21564 . -1) (#("s" 0 1 (fontified t)) . -2317) (undo-tree-id21565 . -1) (undo-tree-id21567 . -1) (undo-tree-id21569 . -1) (undo-tree-id21571 . -1) (undo-tree-id21573 . -1) (#("t" 0 1 (fontified t)) . -2318) (undo-tree-id21575 . -1) (undo-tree-id21577 . -1) 2319) ((2316 . 2319)) (26041 2949 68537 635000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . 3267)) nil (26041 3479 86451 580000) 0 nil])
([nil nil ((2316 . 2323)) ((#("std::,e" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t)) . 2316) (undo-tree-id21705 . -5) (undo-tree-id21706 . -7) (undo-tree-id21707 . -5) (undo-tree-id21708 . -5) (undo-tree-id21709 . -5) (undo-tree-id21710 . -5) (undo-tree-id21711 . -5) (undo-tree-id21712 . -5) (undo-tree-id21713 . -5) (undo-tree-id21714 . -5) (undo-tree-id21715 . -5) (undo-tree-id21716 . -5) (undo-tree-id21717 . -5) (undo-tree-id21718 . -5) (undo-tree-id21719 . -5) (undo-tree-id21720 . -5) (undo-tree-id21721 . -7) (undo-tree-id21722 . -7)) (26041 2948 817251 484000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3786 . 3787) (nil fontified nil 3786 . 3787) (nil fontified nil 3778 . 3786) (nil fontified nil 3776 . 3778) (nil fontified nil 3775 . 3776) (nil fontified nil 3769 . 3775) (nil fontified nil 3768 . 3769) (nil fontified nil 3763 . 3768) (nil fontified nil 3752 . 3763) (nil fontified nil 3750 . 3752) (nil fontified nil 3747 . 3750) (nil fontified nil 3744 . 3747) (nil fontified nil 3738 . 3744) (nil fontified nil 3734 . 3738) (nil fontified nil 3726 . 3734) (nil fontified nil 3725 . 3726) (nil fontified nil 3724 . 3725) (nil fontified nil 3723 . 3724) (nil fontified nil 3719 . 3723) (nil fontified nil 3711 . 3719) (nil fontified nil 3710 . 3711) (nil fontified nil 3709 . 3710) (nil fontified nil 3708 . 3709) (nil fontified nil 3702 . 3708) (nil fontified nil 3701 . 3702) (nil fontified nil 3700 . 3701) (nil fontified nil 3696 . 3700) (nil fontified nil 3695 . 3696) (nil fontified nil 3687 . 3695) (nil fontified nil 3685 . 3687) (nil fontified nil 3681 . 3685) (nil fontified nil 3677 . 3681) (nil fontified nil 3676 . 3677) (nil fontified nil 3673 . 3676) (nil fontified nil 3665 . 3673) (nil fontified nil 3664 . 3665) (nil fontified nil 3663 . 3664) (nil fontified nil 3662 . 3663) (nil fontified nil 3661 . 3662) (nil fontified nil 3655 . 3661) (nil fontified nil 3654 . 3655) (nil fontified nil 3642 . 3654) (nil fontified nil 3636 . 3642) (nil fontified nil 3634 . 3636) (nil fontified nil 3633 . 3634) (nil fontified nil 3632 . 3633) (nil fontified nil 3631 . 3632) (nil fontified nil 3625 . 3631) (nil fontified nil 3624 . 3625) (nil fontified nil 3612 . 3624) (nil fontified nil 3604 . 3612) (nil fontified nil 3603 . 3604) (nil fontified nil 3602 . 3603) (nil fontified nil 3601 . 3602) (nil fontified nil 3598 . 3601) (nil fontified nil 3597 . 3598) (nil fontified nil 3578 . 3597) (nil fontified nil 3577 . 3578) (nil fontified nil 3575 . 3577) (nil fontified nil 3572 . 3575) (nil fontified nil 3571 . 3572) (nil fontified nil 3563 . 3571) (nil fontified nil 3561 . 3563) (nil fontified nil 3557 . 3561) (nil fontified nil 3556 . 3557) (nil fontified nil 3549 . 3556) (nil fontified nil 3541 . 3549) (nil fontified nil 3540 . 3541) (nil fontified nil 3539 . 3540) (nil fontified nil 3538 . 3539) (nil fontified nil 3533 . 3538) (nil fontified nil 3520 . 3533) (nil fontified nil 3518 . 3520) (nil fontified nil 3509 . 3518) (nil fontified nil 3505 . 3509) (nil fontified nil 3501 . 3505) (nil fontified nil 3493 . 3501) (nil fontified nil 3492 . 3493) (nil fontified nil 3491 . 3492) (nil fontified nil 3486 . 3491) (nil fontified nil 3483 . 3486) (nil fontified nil 3479 . 3483) (nil fontified nil 3471 . 3479) (nil fontified nil 3469 . 3471) (nil fontified nil 3468 . 3469) (nil fontified nil 3462 . 3468) (nil fontified nil 3461 . 3462) (nil fontified nil 3441 . 3461) (nil fontified nil 3439 . 3441) (nil fontified nil 3436 . 3439) (nil fontified nil 3433 . 3436) (nil fontified nil 3429 . 3433) (nil fontified nil 3428 . 3429) (nil fontified nil 3425 . 3428) (nil fontified nil 3421 . 3425) (nil fontified nil 3413 . 3421) (nil fontified nil 3411 . 3413) (nil fontified nil 3410 . 3411) (nil fontified nil 3404 . 3410) (nil fontified nil 3403 . 3404) (nil fontified nil 3383 . 3403) (nil fontified nil 3381 . 3383) (nil fontified nil 3378 . 3381) (nil fontified nil 3375 . 3378) (nil fontified nil 3372 . 3375) (nil fontified nil 3371 . 3372) (nil fontified nil 3368 . 3371) (nil fontified nil 3364 . 3368) (nil fontified nil 3356 . 3364) (nil fontified nil 3355 . 3356) (nil fontified nil 3354 . 3355) (nil fontified nil 3353 . 3354) (nil fontified nil 3352 . 3353) (nil fontified nil 3351 . 3352) (nil fontified nil 3344 . 3351) (nil fontified nil 3343 . 3344) (nil fontified nil 3337 . 3343) (nil fontified nil 3335 . 3337) (nil fontified nil 3330 . 3335) (nil fontified nil 3322 . 3330) (nil fontified nil 3321 . 3322) (nil fontified nil 3320 . 3321) (nil fontified nil 3319 . 3320) (nil fontified nil 3318 . 3319) (nil fontified nil 3308 . 3318) (nil fontified nil 3307 . 3308) (nil fontified nil 3284 . 3307) (nil fontified nil 3282 . 3284) (nil fontified nil 3279 . 3282) (nil fontified nil 3276 . 3279) (nil fontified nil 3270 . 3276) (nil fontified nil 3269 . 3270) (nil fontified nil 3266 . 3269) (nil fontified nil 3265 . 3266) (nil fontified nil 3262 . 3265) (nil fontified nil 3254 . 3262) (3254 . 3787)) nil (26041 3479 86446 567000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -2321) (undo-tree-id21516 . -1) (undo-tree-id21518 . -1) (undo-tree-id21520 . -1) (undo-tree-id21522 . -1) (undo-tree-id21524 . -1) (undo-tree-id21526 . -1) (#("e" 0 1 (fontified t)) . -2322) (undo-tree-id21528 . -1) (undo-tree-id21530 . -1) 2323) ((2321 . 2323)) (26041 2948 572517 44000) 0 nil])
([nil nil ((#("            " 0 12 (fontified t)) . -3840) (3822 . 3826) (3758 . 3774) (#("            " 0 8 (fontified t) 8 12 (fontified t)) . 3758) (3739 . 3755) (#("            " 0 8 (fontified t) 8 12 (fontified t)) . 3739) (3705 . 3709) (3654 . 3678) (#("                    " 0 2 (fontified t) 2 8 (fontified t) 8 20 (fontified t)) . 3654) (3620 . 3644) (#("                    " 0 8 (fontified t) 8 20 (fontified t)) . 3620) (3569 . 3573) (3517 . 3521) (3475 . 3491) (#("            " 0 8 (fontified t) 8 12 (fontified t)) . 3475) (3413 . 3429) (#("            " 0 8 (fontified t) 8 12 (fontified t)) . 3413) (3352 . 3368) (#("            " 0 8 (fontified t) 8 12 (fontified t)) . 3352) (3322 . 3326) (#("        " 0 8 (fontified t)) . -3254) 3226) nil (26041 3479 86427 583000) 0 nil])
([nil nil ((2321 . 2327)) ((#("mem;::" 0 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . 2321) (undo-tree-id21691 . -3) (undo-tree-id21692 . -6) (undo-tree-id21693 . -3) (undo-tree-id21694 . -3) (undo-tree-id21695 . -3) (undo-tree-id21696 . -3) (undo-tree-id21697 . -3) (undo-tree-id21698 . -3) (undo-tree-id21699 . -3) (undo-tree-id21700 . -3) (undo-tree-id21701 . -3) (undo-tree-id21702 . -3) (undo-tree-id21703 . -6) (undo-tree-id21704 . -6)) (26041 2948 343150 123000) 0 nil])
([nil nil ((#("image)" 0 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-4-face) fontified t)) . -3305) (undo-tree-id22565 . -6) (undo-tree-id22566 . -6) (undo-tree-id22567 . -6) (undo-tree-id22568 . -6) 3311) nil (26041 3479 86423 880000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -2324) (undo-tree-id21492 . -1) (undo-tree-id21494 . -1) (undo-tree-id21496 . -1) (undo-tree-id21498 . -1) (undo-tree-id21500 . -1) (undo-tree-id21502 . -1) (undo-tree-id21504 . -1) (#(":" 0 1 (fontified t)) . -2325) (undo-tree-id21505 . -1) (undo-tree-id21507 . -1) (undo-tree-id21509 . -1) (undo-tree-id21511 . -1) (#(":" 0 1 (fontified t)) . -2326) (undo-tree-id21513 . -1) (undo-tree-id21515 . -1) 2327) ((2324 . 2327)) (26041 2948 151836 784000) 0 nil])
([nil nil ((#("zbar_" 0 5 (fontified t)) . -3300) (undo-tree-id22561 . -5) (undo-tree-id22562 . -5) (undo-tree-id22563 . -5) (undo-tree-id22564 . -5) 3305) nil (26041 3479 86420 277000) 0 nil])
([nil nil ((2324 . 2330)) ((#("::fopr" 0 2 (fontified t) 2 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . 2324) (undo-tree-id21681 . -2) (undo-tree-id21682 . -6) (undo-tree-id21683 . -2) (undo-tree-id21684 . -2) (undo-tree-id21685 . -4) (undo-tree-id21686 . -4) (undo-tree-id21687 . -4) (undo-tree-id21688 . -4) (undo-tree-id21689 . -6) (undo-tree-id21690 . -6)) (26041 2947 981187 18000) 0 nil])
([nil nil ((#("symbol(" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-4-face) fontified t)) . -3293) (undo-tree-id22557 . -7) (undo-tree-id22558 . -7) (undo-tree-id22559 . -7) (undo-tree-id22560 . -7) 3300) nil (26041 3479 86416 12000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -2328) (undo-tree-id21480 . -1) (undo-tree-id21482 . -1) (undo-tree-id21484 . -1) (undo-tree-id21486 . -1) (undo-tree-id21488 . -1) (#("r" 0 1 (fontified t)) . -2329) (undo-tree-id21489 . -1) (undo-tree-id21491 . -1) 2330) ((2328 . 2330)) (26041 2947 812921 226000) 0 nil])
([nil nil ((#("first_" 0 6 (fontified t)) . -3287) (undo-tree-id22553 . -6) (undo-tree-id22554 . -6) (undo-tree-id22555 . -6) (undo-tree-id22556 . -6) 3293) nil (26041 3479 86412 304000) 0 nil])
([nil nil ((2328 . 2330)) ((#("rg" 0 2 (fontified t)) . 2328) (undo-tree-id21678 . -2) (undo-tree-id21679 . -2) (undo-tree-id21680 . -2)) (26041 2947 633151 88000) 0 nil])
([nil nil ((#("image_" 0 6 (fontified t)) . -3281) (undo-tree-id22549 . -6) (undo-tree-id22550 . -6) (undo-tree-id22551 . -6) (undo-tree-id22552 . -6) 3287) nil (26041 3479 86408 597000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2333 2333 nil nil nil t #s(yas--exit 2335 nil))) #s(yas--exit 2335 nil) 120 nil #s(yas--field 1 2333 2333 nil nil nil t #s(yas--exit 2335 nil)) nil nil)) (2326 . 2335) (#("forget(${1:t})$0" 0 16 (fontified nil)) . 2326) (2326 . 2342) (#("forg" 0 4 (fontified nil)) . 2326) (2326 . 2330) (#("forget(…)" 0 9 (fontified nil)) . -2326) (2326 . 2335) (#("forg" 0 4 (fontified t)) . -2326) (undo-tree-id21459 . -4) (undo-tree-id21461 . -1) (undo-tree-id21463 . -2) (undo-tree-id21465 . -2) (undo-tree-id21467 . -2) (undo-tree-id21469 . -2) (undo-tree-id21471 . -2) (undo-tree-id21473 . -2) (undo-tree-id21475 . -3) (undo-tree-id21477 . -3) (undo-tree-id21479 . -4) 2330) ((2326 . 2330) (#("forget(…)" 0 9 (fontified nil)) . 2326) (2326 . 2335) (#("forg" 0 4 (fontified nil)) . 2326) (2326 . 2330) (#("forget(${1:t})$0" 0 16 (fontified nil)) . 2326) (2326 . 2342) (#("forget(t)" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-3-face) fontified t) 7 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-3-face) fontified t)) . 2326) (undo-tree-id21674 . -7) (undo-tree-id21675 . -7) (undo-tree-id21676 . -7) (undo-tree-id21677 . -7) (apply yas--snippet-revive 2326 2335 #s(yas--snippet nil (#s(yas--field 1 2333 2333 nil nil nil t #s(yas--exit 2335 nil))) #s(yas--exit 2335 nil) 120 nil #s(yas--field 1 2333 2333 nil nil nil t #s(yas--exit 2335 nil)) nil nil))) (26041 2947 433187 298000) 0 nil])
([nil nil ((#("zbar_" 0 5 (fontified t)) . -3276) (undo-tree-id22545 . -5) (undo-tree-id22546 . -5) (undo-tree-id22547 . -5) (undo-tree-id22548 . -5) 3281) nil (26041 3479 86404 653000) 0 nil])
([nil nil ((2334 . 2335) (#("t" 0 1 (fontified nil)) . 2334) (2333 . 2334)) ((#("i" 0 1 (fontified nil)) . 2333) (2334 . 2335) (#("m" 0 1 (fontified t)) . 2334)) (26041 2947 292271 758000) 0 nil])
([nil nil ((3276 . 3279)) nil (26041 3479 86400 417000) 0 nil])
([nil nil ((apply yas--snippet-revive 2326 2336 #s(yas--snippet nil (#s(yas--field 1 2333 2333 nil nil nil t #s(yas--exit 2335 nil))) #s(yas--exit 2335 nil) 120 nil #s(yas--field 1 2333 2333 nil nil nil t #s(yas--exit 2335 nil)) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2333 2333 nil nil nil t #s(yas--exit 2335 nil))) #s(yas--exit 2335 nil) 120 nil #s(yas--field 1 2333 2333 nil nil nil t #s(yas--exit 2335 nil)) nil nil))) (26041 2947 292231 488000) 0 nil] [nil nil ((2333 . 2346) (#("im" 0 2 (fontified nil)) . 2333) (2333 . 2335) (#("image_handler" 0 13 (fontified nil)) . -2333) (2333 . 2346) (#("im" 0 2 (fontified t)) . -2333) (undo-tree-id21443 . -2) (undo-tree-id21444 . -2) (undo-tree-id21446 . -1) (undo-tree-id21448 . -1) (undo-tree-id21450 . -1) (undo-tree-id21452 . -2) (undo-tree-id21454 . -2) (undo-tree-id21456 . -2) 2335) ((2333 . 2335) (#("image_handler" 0 13 (fontified nil)) . 2333) (2333 . 2346) (#("im" 0 2 (fontified nil)) . 2333) (2333 . 2335) (#("image_handler" 0 13 (fontified t)) . 2333) (undo-tree-id21673 . -13)) (26041 2946 753686 495000) 0 nil])
([nil nil ((3279 . 3283)) nil (26041 3479 86399 691000) 0 nil])
nil
([nil nil ((apply yas--snippet-revive 2326 2347 #s(yas--snippet nil (#s(yas--field 1 2333 2333 nil nil nil t #s(yas--exit 2335 nil))) #s(yas--exit 2335 nil) 120 nil #s(yas--field 1 2333 2333 nil nil nil t #s(yas--exit 2335 nil)) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2333 2333 nil nil nil t #s(yas--exit 2335 nil))) #s(yas--exit 2335 nil) 120 nil #s(yas--field 1 2333 2333 nil nil nil t #s(yas--exit 2335 nil)) nil nil))) (26041 2946 516128 196000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -3277) (undo-tree-id22537 . -1) (undo-tree-id22538 . -1) (#("e" 0 1 (fontified t)) . -3278) (undo-tree-id22539 . -1) (undo-tree-id22540 . -1) (#("c" 0 1 (fontified t)) . -3279) (undo-tree-id22541 . -1) (#("e" 0 1 (fontified t)) . -3280) (undo-tree-id22542 . -1) (#("s" 0 1 (fontified t)) . -3281) (undo-tree-id22543 . -1) (#("s" 0 1 (fontified t)) . -3282) (undo-tree-id22544 . -1) 3283) nil (26041 3479 86398 160000) 0 nil])
([nil nil ((2347 . 2348)) ((#(";" 0 1 (fontified t)) . 2347)) (26041 2946 326033 340000) 0 nil])
([nil nil ((3277 . 3278)) nil (26041 3479 86389 948000) 0 nil])
([nil nil ((#("handler" 0 7 (fontified t)) . -2861) (undo-tree-id21621 . -7) (undo-tree-id21622 . -7) (undo-tree-id21624 . -7) (undo-tree-id21626 . -7) (undo-tree-id21628 . -7) (undo-tree-id21630 . -7) (undo-tree-id21632 . -7) (undo-tree-id21634 . -7) 2868 (t 26041 2800 827793 174000)) ((2861 . 2868)) (26041 2946 132057 51000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -3277) (undo-tree-id22536 . -1) 3278) nil (26041 3479 86389 108000) 0 nil])
([nil nil ((2861 . 2862)) ((#("p" 0 1 (fontified t)) . 2861) (undo-tree-id21670 . -1) (undo-tree-id21671 . -1) (undo-tree-id21672 . -1)) (26041 2945 790425 370000) 0 nil])
([nil nil ((3277 . 3283)) nil (26041 3479 86387 313000) 0 nil])
([nil nil ((2861 . 2864) (#("p" 0 1 (fontified nil)) . 2861) (2861 . 2862) (#("ptr" 0 3 (fontified nil)) . -2861) (2861 . 2864) (#("p" 0 1 (fontified t)) . -2861) (undo-tree-id21615 . -1) (undo-tree-id21617 . -1) (undo-tree-id21619 . -1) 2862) ((2861 . 2862) (#("ptr" 0 3 (fontified nil)) . 2861) (2861 . 2864) (#("p" 0 1 (fontified nil)) . 2861) (2861 . 2862) (#("ptr" 0 3 (fontified t)) . 2861)) (26041 2945 610600 567000) 0 nil])
([nil nil ((#("e" 0 1 (fontified nil)) . -3280) (undo-tree-id22524 . -1) (undo-tree-id22525 . -1) (undo-tree-id22526 . -1) (undo-tree-id22527 . -1) (#("s" 0 1 (fontified nil)) . -3281) (undo-tree-id22528 . -1) (undo-tree-id22529 . -1) (undo-tree-id22530 . -1) (undo-tree-id22531 . -1) (#("s" 0 1 (fontified t)) . -3282) (undo-tree-id22532 . -1) (undo-tree-id22533 . -1) (undo-tree-id22534 . -1) (undo-tree-id22535 . -1) 3283) nil (26041 3479 86385 778000) 0 nil])
([nil nil ((2316 . 2318) (t 26041 2808 674460 322000)) ((#("//" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 2 (face font-lock-comment-delimiter-face fontified t)) . 2316)) (26041 2945 446233 68000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -3278) (undo-tree-id22510 . -1) (undo-tree-id22511 . -1) (undo-tree-id22512 . -1) (undo-tree-id22513 . -1) (undo-tree-id22514 . -1) (undo-tree-id22515 . -1) (undo-tree-id22516 . -1) (undo-tree-id22517 . -1) (#("c" 0 1 (fontified t)) . -3279) (undo-tree-id22518 . -1) (undo-tree-id22519 . -1) (undo-tree-id22520 . -1) (undo-tree-id22521 . -1) (undo-tree-id22522 . -1) (undo-tree-id22523 . -1) 3280) nil (26041 3479 86374 795000) 0 nil])
([nil nil ((apply -39 3635 4523 undo--wrap-and-run-primitive-undo 3635 4523 (("   " . 3635) (4488 . 4491) (4418 . 4421) (4351 . 4354) (4298 . 4301) (4245 . 4248) (4202 . 4205) (4121 . 4124) (4035 . 4038) (3943 . 3946) (3847 . 3850) (3787 . 3790) (3696 . 3699) (3643 . 3646) (3635 . 3638)))) ((apply 39 3635 4484 undo--wrap-and-run-primitive-undo 3635 4484 (("   " . 3635) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3643) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3696) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3787) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3847) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3943) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 4035) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 4121) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 4202) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 4245) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 4298) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 4351) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 4418) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . 4488) (3635 . 3638) 2990))) (26041 2945 255478 487000) 0 nil] [nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . -2177) (undo-tree-id21660 . -1) (undo-tree-id21661 . -1) 2178 (t 26041 2858 571130 53000)) ((2177 . 2178)) (26041 2876 788125 516000) 0 nil])
([nil nil ((3278 . 3283)) nil (26041 3479 86209 751000) 0 nil])
([nil nil ((apply -39 2981 3555 undo--wrap-and-run-primitive-undo 2981 3555 ((3550 . 3553) (3495 . 3498) (3477 . 3480) (3428 . 3431) (3394 . 3397) (3361 . 3364) (3295 . 3298) (3244 . 3247) (3219 . 3222) (3158 . 3161) (3098 . 3101) (3061 . 3064) (2990 . 2993)))) ((apply 39 2981 3516 undo--wrap-and-run-primitive-undo 2981 3516 ((#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 2990) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3061) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3098) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3158) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3219) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3244) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3295) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3361) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3394) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3428) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3477) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3495) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 3550) 2804))) (26041 2945 60671 848000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . 2315) (undo-tree-id21636 . -1) (undo-tree-id21637 . -1) (undo-tree-id21638 . -1) (undo-tree-id21639 . -1) (undo-tree-id21640 . -1) (undo-tree-id21641 . -1) (undo-tree-id21642 . -1) (undo-tree-id21643 . -1) (undo-tree-id21644 . -1) (undo-tree-id21645 . -1) (undo-tree-id21646 . -1) (undo-tree-id21647 . -1) (undo-tree-id21648 . -1) (undo-tree-id21649 . -1) (undo-tree-id21650 . -1) (undo-tree-id21651 . -1) (undo-tree-id21652 . -1) (undo-tree-id21653 . -1) (undo-tree-id21654 . -1) (undo-tree-id21655 . -1) (undo-tree-id21656 . -1) (undo-tree-id21657 . -1) (undo-tree-id21658 . -1) (undo-tree-id21659 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 2315)) ((2315 . 2316) (2315 . 2316) (t 26041 2868 247797 300000)) (26041 2868 213759 516000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -3183) (undo-tree-id22484 . -1) (undo-tree-id22485 . -1) (undo-tree-id22486 . -1) (undo-tree-id22487 . -1) (undo-tree-id22488 . -1) (undo-tree-id22489 . -1) (undo-tree-id22490 . -1) (undo-tree-id22491 . -1) (undo-tree-id22492 . -1) (undo-tree-id22493 . -1) (undo-tree-id22494 . -1) (undo-tree-id22495 . -1) (undo-tree-id22496 . -1) (undo-tree-id22497 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -3184) (undo-tree-id22498 . -1) (undo-tree-id22499 . -1) (undo-tree-id22500 . -1) (undo-tree-id22501 . -1) (undo-tree-id22502 . -1) (undo-tree-id22503 . -1) (undo-tree-id22504 . -1) (undo-tree-id22505 . -1) (undo-tree-id22506 . -1) (undo-tree-id22507 . -1) (undo-tree-id22508 . -1) (undo-tree-id22509 . -1) 3185) nil (26041 3479 86205 165000) 0 nil])
([nil nil ((2806 . 2814) (#("        " 0 8 (fontified nil)) . 2805) (undo-tree-id21666 . -8) (undo-tree-id21668 . -8) (2804 . 2814) (t 26041 2902 237799 389000)) ((#("
        
" 0 1 (fontified t) 1 9 (fontified nil) 9 10 (fontified nil)) . 2804) (2805 . 2813) (#("        " 0 8 (fontified t)) . 2806)) (26041 2944 847317 696000) 0 nil])
nil
([nil nil ((3183 . 3185) (t 26041 3479 117834 777000)) nil (26041 3560 892086 121000) 0 nil])
([nil nil ((2898 . 2906) (#("        " 0 8 (fontified nil)) . 2897) (undo-tree-id21662 . -8) (undo-tree-id21664 . -8) (2896 . 2906)) ((#("
        
" 0 1 (fontified t) 1 9 (fontified nil) 9 10 (fontified nil)) . 2896) (2897 . 2905) (#("        " 0 8 (fontified t)) . 2898)) (26041 2944 608013 29000) 0 nil])
([nil nil ((#("        /* keep scanning until user provides key/mouse input */
        ffi::zbar_processor_user_wait(proc, -1);" 0 1 (fontified t) 1 8 (fontified t) 8 11 (face font-lock-comment-delimiter-face fontified t) 11 60 (face font-lock-comment-face fontified t) 60 63 (face font-lock-comment-face fontified t) 63 64 (fontified t) 64 67 (fontified t) 67 69 (fontified t) 69 72 (fontified t) 72 75 (face font-lock-constant-face fontified t) 75 77 (fontified t) 77 92 (fontified t) 92 101 (fontified t) 101 102 (face (rainbow-delimiters-depth-3-face) fontified t) 102 110 (fontified t) 110 111 (face (rainbow-delimiters-depth-3-face) fontified t) 111 112 (fontified t rear-nonsticky t)) . 3832) (undo-tree-id22576 . -112) (undo-tree-id22577 . -112) (undo-tree-id22578 . -112) (undo-tree-id22579 . -1) (undo-tree-id22580 . -1) (undo-tree-id22581 . -1) (undo-tree-id22582 . -1) (undo-tree-id22583 . -1) (undo-tree-id22584 . -1) (undo-tree-id22585 . -1) (undo-tree-id22586 . -1) (undo-tree-id22587 . -1) (undo-tree-id22588 . -1) (undo-tree-id22589 . -1) (undo-tree-id22590 . -112) (undo-tree-id22591 . -112) (undo-tree-id22592 . -112) (undo-tree-id22593 . -111) (undo-tree-id22594 . -107) (undo-tree-id22595 . -41) (undo-tree-id22596 . -39) (undo-tree-id22597 . -37) (undo-tree-id22598 . -34) (undo-tree-id22599 . -32) (undo-tree-id22600 . -29) (undo-tree-id22601 . -27) (undo-tree-id22602 . -24) (undo-tree-id22603 . -22) (undo-tree-id22604 . -20) (undo-tree-id22605 . -17) (undo-tree-id22606 . -16) (undo-tree-id22607 . -14) (undo-tree-id22608 . -12) (undo-tree-id22609 . -74) (undo-tree-id22610 . -72) (undo-tree-id22611 . -70) (undo-tree-id22612 . -69) (undo-tree-id22613 . -4) (undo-tree-id22614 . -3) (undo-tree-id22615 . -2) (undo-tree-id22616 . -1) (undo-tree-id22617 . -112) (t 26041 3546 57838 886000)) nil (26041 3566 778584 383000) 0 nil] [nil nil ((#("
            
        }
        
 " 0 1 (fontified t) 1 13 (fontified t) 13 14 (fontified t) 14 22 (fontified t) 22 23 (face (rainbow-delimiters-depth-3-face) fontified t) 23 24 (fontified t) 24 32 (fontified t) 32 33 (fontified t) 33 34 (fontified t)) . 3799) (undo-tree-id22569 . -34) (undo-tree-id22570 . -23) (undo-tree-id22571 . -34) (undo-tree-id22572 . -33) (undo-tree-id22573 . -34) (undo-tree-id22574 . -34) (undo-tree-id22575 . -34) 3833 (t 26041 3546 57838 886000)) ((3799 . 3833)) (26041 3560 891305 938000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . 2316) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 2316) (t 26041 2922 34467 270000)) ((2316 . 2317) (2316 . 2317) (t 26041 2933 987801 337000)) (26041 2933 957497 997000) 0 nil])
([nil nil ((nil fontified nil 3923 . 3924) (nil fontified nil 3922 . 3923) (nil fontified nil 3914 . 3922) (nil fontified nil 3913 . 3914) (nil fontified nil 3904 . 3913) (nil fontified nil 3889 . 3904) (nil fontified nil 3887 . 3889) (nil fontified nil 3884 . 3887) (nil fontified nil 3881 . 3884) (nil fontified nil 3879 . 3881) (nil fontified nil 3876 . 3879) (nil fontified nil 3875 . 3876) (nil fontified nil 3872 . 3875) (nil fontified nil 3823 . 3872) (nil fontified nil 3820 . 3823) (nil fontified nil 3813 . 3820) (nil fontified nil 3812 . 3813) (3812 . 3924)) nil (26041 3566 778348 147000) 0 nil])
nil
nil
([nil nil ((#("        " 0 1 (fontified t) 1 8 (fontified t)) . -3812) 3824) nil (26041 3566 778343 613000) 0 nil])
([nil nil ((3876 . 3880) 3889) nil (26041 3566 778339 182000) 0 nil])
([nil nil ((#("process" 0 7 (fontified t)) . -3276) (undo-tree-id22683 . -7) (undo-tree-id22684 . -7) (undo-tree-id22685 . -7) (undo-tree-id22686 . -7) (undo-tree-id22687 . -7) (undo-tree-id22688 . -7) (undo-tree-id22689 . -7) (undo-tree-id22690 . -7) (undo-tree-id22691 . -7) (undo-tree-id22692 . -7) (undo-tree-id22693 . -7) (undo-tree-id22694 . -7) (undo-tree-id22695 . -7) (undo-tree-id22696 . -7) (undo-tree-id22697 . -7) 3283 (t 26041 3566 814506 827000)) nil (26041 3580 594816 694000) 0 nil])
([nil nil ((3276 . 3278)) nil (26041 3580 594803 526000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -3276) (undo-tree-id22669 . -1) (undo-tree-id22670 . -1) (undo-tree-id22671 . -1) (undo-tree-id22672 . -1) (undo-tree-id22673 . -1) (undo-tree-id22674 . -1) (undo-tree-id22675 . -1) (undo-tree-id22676 . -1) (undo-tree-id22677 . -1) (undo-tree-id22678 . -1) (#("r" 0 1 (fontified t)) . -3277) (undo-tree-id22679 . -1) (undo-tree-id22680 . -1) (undo-tree-id22681 . -1) (undo-tree-id22682 . -1) 3278) nil (26041 3580 594802 244000) 0 nil])
([nil nil ((3276 . 3283)) nil (26041 3580 594792 137000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3293 3297 nil nil nil t #s(yas--field 2 3299 3306 nil nil nil nil #s(yas--exit 3307 nil))) #s(yas--field 2 3299 3306 nil nil nil nil #s(yas--exit 3307 nil))) #s(yas--exit 3307 nil) 122 nil #s(yas--field 1 3293 3297 nil nil nil t #s(yas--field 2 3299 3306 nil nil nil nil #s(yas--exit 3307 nil))) nil nil)) (3276 . 3312) (#("zbar_process_one(${1:processor}, ${2:timeout})$0" 0 48 (fontified nil)) . 3276) (3276 . 3324) (#("process" 0 7 (fontified nil)) . 3276) (3276 . 3283) (#("zbar_process_one(…)" 0 19 (fontified nil)) . -3276) (3276 . 3295) (#("process" 0 7 (fontified t)) . -3276) (undo-tree-id22646 . -7) (undo-tree-id22647 . -1) (undo-tree-id22648 . -1) (undo-tree-id22649 . -1) (undo-tree-id22650 . -2) (undo-tree-id22651 . -2) (undo-tree-id22652 . -2) (undo-tree-id22653 . -3) (undo-tree-id22654 . -3) (undo-tree-id22655 . -3) (undo-tree-id22656 . -4) (undo-tree-id22657 . -4) (undo-tree-id22658 . -5) (undo-tree-id22659 . -5) (undo-tree-id22660 . -6) (undo-tree-id22661 . -6) (undo-tree-id22662 . -6) (undo-tree-id22663 . -7) (undo-tree-id22664 . -7) (undo-tree-id22665 . -7) (undo-tree-id22666 . -7) (undo-tree-id22667 . -7) (undo-tree-id22668 . -7) 3283) nil (26041 3580 594789 828000) 0 nil])
([nil nil ((#("processor" 0 9 (fontified nil)) . 3294) (undo-tree-id22645 . -9) (3293 . 3294)) nil (26041 3580 594503 755000) 0 nil])
([nil nil ((3293 . 3297) (#("p" 0 1 (fontified nil)) . 3293) (undo-tree-id22634 . -1) (3293 . 3294) (#("proc" 0 4 (fontified nil)) . -3293) (undo-tree-id22635 . -4) (3293 . 3297) (#("p" 0 1 (fontified t)) . -3293) (undo-tree-id22636 . -1) (undo-tree-id22637 . -1) (undo-tree-id22638 . -1) (undo-tree-id22639 . -1) (undo-tree-id22640 . -1) (undo-tree-id22641 . -1) (undo-tree-id22642 . -1) (undo-tree-id22643 . -1) (undo-tree-id22644 . -1) 3294) nil (26041 3580 594501 63000) 0 nil])
([nil nil ((apply yas--snippet-revive 3276 3307 #s(yas--snippet nil (#s(yas--field 1 3293 3297 nil nil nil t #s(yas--field 2 3299 3306 nil nil nil nil #s(yas--exit 3307 nil))) #s(yas--field 2 3299 3306 nil nil nil nil #s(yas--exit 3307 nil))) #s(yas--exit 3307 nil) 122 nil #s(yas--field 1 3293 3297 nil nil nil t #s(yas--field 2 3299 3306 nil nil nil nil #s(yas--exit 3307 nil))) nil nil))) nil (26041 3580 594491 711000) 0 nil])
([nil nil ((#("timeout" 0 7 (fontified t)) . -3299) (undo-tree-id22624 . -7) (undo-tree-id22625 . -7) (undo-tree-id22626 . -7) (undo-tree-id22627 . -7) (undo-tree-id22628 . -7) (undo-tree-id22629 . -7) (undo-tree-id22630 . -7) (undo-tree-id22631 . -7) (undo-tree-id22632 . -7) (undo-tree-id22633 . -7) 3306) nil (26041 3580 594489 982000) 0 nil])
([nil nil ((3299 . 3302)) nil (26041 3580 594480 968000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -3301) (undo-tree-id22618 . -1) (undo-tree-id22619 . -1) (undo-tree-id22620 . -1) (undo-tree-id22621 . -1) (undo-tree-id22622 . -1) (undo-tree-id22623 . -1) 3302) nil (26041 3580 594476 928000) 0 nil])
([nil nil ((#("   unsafe {
        let proc = ffi::zbar_processor_create(1);
        ffi::zbar_processor_set_config(proc, 0, ffi::zbar_config_e_ZBAR_CFG_ENABLE, 1);
        let path = CString::new(\"/dev/video0\").unwrap();
        ffi::zbar_processor_init(proc, path.as_ptr() as *const c_char, 1);

        //let handler: ffi::zbar_image_data_handler_t = std::mem::transmute(my_handler);
        //let ptr =  my_handler as *const (*mut ffi::zbar_image_t, *const c_void);
        //ffi::zbar_processor_set_data_handler(proc, ptr, std::ptr::null());

        /* enable the preview window */
        ffi::zbar_processor_set_visible(proc, 1);
        //ffi::zbar_processor_set_active(proc, 1);

        loop {
            let mut symbol = ffi::zbar_process_one(proc, 10);

            while !symbol.is_null() {
                let typ = ffi::zbar_symbol_get_type(symbol);
                let data = ffi::zbar_symbol_get_data(symbol);
                println!(
                    \"decoded {} symbol \\\"{:?}\\\"\\n\",
                    CStr::from_ptr(ffi::zbar_get_symbol_name(typ))
                        .to_str()
                        .unwrap(),
                    CStr::from_ptr(data).to_str()
                );
                symbol = ffi::zbar_symbol_next(symbol);
            }
            /* keep scanning until user provides key/mouse input */
            ffi::zbar_processor_user_wait(proc, -1);
        }
        

        
        
        ffi::zbar_processor_destroy(proc);
    }" 0 3 (fontified t) 3 9 (face rust-unsafe fontified t) 9 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-2-face) fontified t) 11 12 (fontified t) 12 15 (fontified t) 15 20 (fontified t) 20 23 (face font-lock-keyword-face fontified t) 23 24 (fontified t) 24 28 (face font-lock-variable-name-face fontified t) 28 31 (fontified t) 31 34 (face font-lock-constant-face fontified t) 34 36 (fontified t) 36 57 (fontified t) 57 58 (face (rainbow-delimiters-depth-3-face) fontified t) 58 59 (fontified t) 59 60 (face (rainbow-delimiters-depth-3-face) fontified t) 60 62 (fontified t) 62 70 (fontified t) 70 73 (face font-lock-constant-face fontified t) 73 74 (fontified t) 74 75 (fontified t) 75 90 (fontified t) 90 100 (fontified t) 100 101 (face (rainbow-delimiters-depth-3-face) fontified t) 101 105 (fontified t) 105 110 (fontified t) 110 113 (face font-lock-constant-face fontified t) 113 115 (fontified t) 115 139 (fontified t) 139 144 (fontified t) 144 146 (fontified t) 146 147 (fontified t) 147 148 (face (rainbow-delimiters-depth-3-face) fontified t) 148 150 (fontified t) 150 158 (fontified t) 158 161 (face font-lock-keyword-face fontified t) 161 162 (fontified t) 162 163 (face font-lock-variable-name-face fontified t) 163 166 (face font-lock-variable-name-face fontified t) 166 169 (fontified t) 169 176 (face font-lock-type-face fontified t) 176 178 (fontified t) 178 181 (fontified t) 181 182 (face (rainbow-delimiters-depth-3-face) fontified t) 182 189 (face font-lock-string-face fontified t) 189 195 (face font-lock-string-face fontified t) 195 196 (face (rainbow-delimiters-depth-3-face) fontified t) 196 197 (fontified t) 197 203 (fontified t) 203 204 (face (rainbow-delimiters-depth-3-face) fontified t) 204 205 (face (rainbow-delimiters-depth-3-face) fontified t) 205 206 (fontified t) 206 207 (fontified t) 207 211 (fontified t) 211 215 (fontified t) 215 218 (face font-lock-constant-face fontified t) 218 220 (fontified t) 220 222 (fontified t) 222 223 (fontified t) 223 226 (fontified t) 226 227 (fontified t) 227 231 (fontified t) 231 235 (fontified t) 235 236 (fontified t) 236 239 (fontified t) 239 240 (face (rainbow-delimiters-depth-3-face) fontified t) 240 244 (fontified t) 244 246 (fontified t) 246 250 (fontified t) 250 251 (fontified t) 251 257 (fontified t) 257 258 (face (rainbow-delimiters-depth-4-face) fontified t) 258 259 (face (rainbow-delimiters-depth-4-face) fontified t) 259 260 (fontified t) 260 262 (face font-lock-keyword-face fontified t) 262 264 (fontified t) 264 269 (face font-lock-keyword-face fontified t) 269 270 (fontified t) 270 276 (fontified t) 276 279 (fontified t) 279 280 (face (rainbow-delimiters-depth-3-face) fontified t) 280 282 (fontified t) 282 283 (fontified t) 283 291 (fontified t) 291 293 (face font-lock-comment-delimiter-face fontified t) 293 296 (face font-lock-comment-face fontified t) 296 297 (face font-lock-comment-face fontified t) 297 304 (face font-lock-comment-face fontified t) 304 306 (face font-lock-comment-face fontified t) 306 309 (face font-lock-comment-face fontified t) 309 311 (face font-lock-comment-face fontified t) 311 336 (face font-lock-comment-face fontified t) 336 339 (face font-lock-comment-face fontified t) 339 342 (face font-lock-comment-face fontified t) 342 344 (face font-lock-comment-face fontified t) 344 347 (face font-lock-comment-face fontified t) 347 349 (face font-lock-comment-face fontified t) 349 358 (face font-lock-comment-face fontified t) 358 359 (face font-lock-comment-face fontified t) 359 369 (face font-lock-comment-face fontified t) 369 370 (face font-lock-comment-face fontified t) 370 372 (face font-lock-comment-face fontified t) 372 380 (fontified t) 380 382 (face font-lock-comment-delimiter-face fontified t) 382 385 (face font-lock-comment-face fontified t) 385 386 (face font-lock-comment-face fontified t) 386 389 (face font-lock-comment-face fontified t) 389 393 (face font-lock-comment-face fontified t) 393 404 (face font-lock-comment-face fontified t) 404 406 (face font-lock-comment-face fontified t) 406 408 (face font-lock-comment-face fontified t) 408 413 (face font-lock-comment-face fontified t) 413 414 (face font-lock-comment-face fontified t) 414 415 (face font-lock-comment-face fontified t) 415 416 (face font-lock-comment-face fontified t) 416 419 (face font-lock-comment-face fontified t) 419 420 (face font-lock-comment-face fontified t) 420 423 (face font-lock-comment-face fontified t) 423 425 (face font-lock-comment-face fontified t) 425 440 (face font-lock-comment-face fontified t) 440 445 (face font-lock-comment-face fontified t) 445 446 (face font-lock-comment-face fontified t) 446 452 (face font-lock-comment-face fontified t) 452 453 (face font-lock-comment-face fontified t) 453 454 (face font-lock-comment-face fontified t) 454 455 (face font-lock-comment-face fontified t) 455 463 (fontified t) 463 465 (face font-lock-comment-delimiter-face fontified t) 465 468 (face font-lock-comment-face fontified t) 468 470 (face font-lock-comment-face fontified t) 470 501 (face font-lock-comment-face fontified t) 501 502 (face font-lock-comment-face fontified t) 502 506 (face font-lock-comment-face fontified t) 506 508 (face font-lock-comment-face fontified t) 508 511 (face font-lock-comment-face fontified t) 511 513 (face font-lock-comment-face fontified t) 513 516 (face font-lock-comment-face fontified t) 516 518 (face font-lock-comment-face fontified t) 518 521 (face font-lock-comment-face fontified t) 521 523 (face font-lock-comment-face fontified t) 523 527 (face font-lock-comment-face fontified t) 527 528 (face font-lock-comment-face fontified t) 528 529 (face font-lock-comment-face fontified t) 529 530 (face font-lock-comment-face fontified t) 530 532 (face font-lock-comment-face fontified t) 532 533 (fontified t) 533 541 (fontified t) 541 544 (face font-lock-comment-delimiter-face fontified t) 544 572 (face font-lock-comment-face fontified t) 572 573 (fontified t) 573 581 (fontified t) 581 584 (face font-lock-constant-face fontified t) 584 586 (fontified t) 586 602 (fontified t) 602 612 (fontified t) 612 613 (face (rainbow-delimiters-depth-3-face) fontified t) 613 620 (fontified t) 620 621 (face (rainbow-delimiters-depth-3-face) fontified t) 621 623 (fontified t) 623 625 (fontified t) 625 631 (fontified t) 631 633 (face font-lock-comment-delimiter-face fontified t) 633 636 (face font-lock-comment-face fontified t) 636 638 (face font-lock-comment-face fontified t) 638 663 (face font-lock-comment-face fontified t) 663 664 (face font-lock-comment-face fontified t) 664 671 (face font-lock-comment-face fontified t) 671 672 (face font-lock-comment-face fontified t) 672 673 (face font-lock-comment-face fontified t) 673 674 (face font-lock-comment-face fontified t) 674 675 (fontified t) 675 683 (fontified t) 683 687 (face font-lock-keyword-face fontified t) 687 688 (fontified t) 688 689 (face (rainbow-delimiters-depth-3-face) fontified t) 689 690 (fontified t) 690 702 (fontified t) 702 705 (face font-lock-keyword-face fontified t) 705 706 (fontified t) 706 709 (face font-lock-keyword-face fontified t) 709 710 (fontified t) 710 716 (face font-lock-variable-name-face fontified t) 716 719 (fontified t) 719 722 (face font-lock-constant-face fontified t) 722 724 (fontified t) 724 740 (fontified t) 740 741 (face (rainbow-delimiters-depth-4-face) fontified t) 741 745 (fontified t) 745 749 (fontified t) 749 750 (face (rainbow-delimiters-depth-4-face) fontified t) 750 751 (fontified t) 751 752 (fontified t) 752 753 (fontified t) 753 765 (fontified t) 765 770 (face font-lock-keyword-face fontified t) 770 772 (fontified t) 772 778 (fontified t) 778 779 (fontified t) 779 786 (fontified t) 786 787 (face (rainbow-delimiters-depth-4-face) fontified t) 787 788 (face (rainbow-delimiters-depth-4-face) fontified t) 788 789 (fontified t) 789 790 (face (rainbow-delimiters-depth-4-face) fontified t) 790 807 (fontified t) 807 810 (face font-lock-keyword-face fontified t) 810 811 (fontified t) 811 814 (face font-lock-variable-name-face fontified t) 814 817 (fontified t) 817 820 (face font-lock-constant-face fontified t) 820 822 (fontified t) 822 842 (fontified t) 842 843 (face (rainbow-delimiters-depth-5-face) fontified t) 843 849 (fontified t) 849 850 (face (rainbow-delimiters-depth-5-face) fontified t) 850 868 (fontified t) 868 871 (face font-lock-keyword-face fontified t) 871 872 (fontified t) 872 876 (face font-lock-variable-name-face fontified t) 876 879 (fontified t) 879 882 (face font-lock-constant-face fontified t) 882 884 (fontified t) 884 904 (fontified t) 904 905 (face (rainbow-delimiters-depth-5-face) fontified t) 905 911 (fontified t) 911 912 (face (rainbow-delimiters-depth-5-face) fontified t) 912 930 (fontified t) 930 933 (face rust-builtin-formatting-macro fontified t) 933 938 (face rust-builtin-formatting-macro fontified t) 938 939 (face (rainbow-delimiters-depth-5-face) fontified t) 939 940 (fontified t) 940 948 (fontified t) 948 952 (fontified t) 952 960 (fontified t) 960 969 (face font-lock-string-face fontified t) 969 971 (face rust-string-interpolation fontified t) 971 984 (face font-lock-string-face fontified t) 984 989 (face font-lock-string-face fontified t) 989 990 (face font-lock-string-face fontified t rear-nonsticky t) 990 991 (fontified t) 991 992 (fontified t) 992 1000 (fontified t) 1000 1007 (fontified t) 1007 1012 (fontified t) 1012 1016 (face font-lock-type-face fontified t) 1016 1018 (fontified t) 1018 1026 (fontified t) 1026 1027 (face (rainbow-delimiters-depth-6-face) fontified t) 1027 1030 (face font-lock-constant-face fontified t) 1030 1032 (fontified t) 1032 1033 (fontified t) 1033 1052 (fontified t) 1052 1053 (face (rainbow-delimiters-depth-7-face) fontified t) 1053 1056 (fontified t) 1056 1057 (face (rainbow-delimiters-depth-7-face) fontified t) 1057 1058 (face (rainbow-delimiters-depth-6-face) fontified t) 1058 1083 (fontified t) 1083 1084 (fontified t) 1084 1090 (fontified t) 1090 1091 (face (rainbow-delimiters-depth-6-face) fontified t) 1091 1092 (face (rainbow-delimiters-depth-6-face) fontified t) 1092 1117 (fontified t) 1117 1118 (fontified t) 1118 1124 (fontified t) 1124 1125 (face (rainbow-delimiters-depth-6-face) fontified t) 1125 1126 (face (rainbow-delimiters-depth-6-face) fontified t) 1126 1127 (fontified t) 1127 1128 (fontified t) 1128 1136 (fontified t) 1136 1139 (fontified t) 1139 1140 (fontified t) 1140 1148 (fontified t) 1148 1152 (face font-lock-type-face fontified t) 1152 1154 (fontified t) 1154 1162 (fontified t) 1162 1163 (face (rainbow-delimiters-depth-6-face) fontified t) 1163 1167 (fontified t) 1167 1168 (face (rainbow-delimiters-depth-6-face) fontified t) 1168 1169 (fontified t) 1169 1175 (fontified t) 1175 1176 (face (rainbow-delimiters-depth-6-face) fontified t) 1176 1177 (face (rainbow-delimiters-depth-6-face) fontified t) 1177 1194 (fontified t) 1194 1195 (face (rainbow-delimiters-depth-5-face) fontified t) 1195 1196 (fontified t) 1196 1213 (fontified t) 1213 1219 (fontified t) 1219 1222 (fontified t) 1222 1225 (face font-lock-constant-face fontified t) 1225 1227 (fontified t) 1227 1238 (fontified t) 1238 1243 (fontified t) 1243 1244 (face (rainbow-delimiters-depth-5-face) fontified t) 1244 1250 (fontified t) 1250 1251 (face (rainbow-delimiters-depth-5-face) fontified t) 1251 1253 (fontified t) 1253 1265 (fontified t) 1265 1266 (face (rainbow-delimiters-depth-4-face) fontified t rear-nonsticky t) 1266 1267 (fontified t) 1267 1279 (fontified t) 1279 1282 (face font-lock-comment-delimiter-face fontified t) 1282 1331 (face font-lock-comment-face fontified t) 1331 1334 (face font-lock-comment-face fontified t) 1334 1335 (fontified t) 1335 1338 (fontified t) 1338 1340 (fontified t) 1340 1347 (fontified t) 1347 1350 (face font-lock-constant-face fontified t) 1350 1352 (fontified t) 1352 1367 (fontified t) 1367 1376 (fontified t) 1376 1377 (face (rainbow-delimiters-depth-4-face) fontified t) 1377 1385 (fontified t) 1385 1386 (face (rainbow-delimiters-depth-4-face) fontified t) 1386 1387 (fontified t rear-nonsticky t) 1387 1388 (fontified t) 1388 1396 (fontified t) 1396 1397 (face (rainbow-delimiters-depth-3-face) fontified t) 1397 1398 (fontified t) 1398 1406 (fontified t) 1406 1407 (fontified t) 1407 1408 (fontified t) 1408 1416 (fontified t) 1416 1417 (fontified t) 1417 1425 (fontified t) 1425 1426 (fontified t) 1426 1430 (fontified t) 1430 1434 (fontified t) 1434 1437 (face font-lock-constant-face fontified t) 1437 1439 (fontified t) 1439 1461 (fontified t) 1461 1462 (face (rainbow-delimiters-depth-3-face) fontified t) 1462 1466 (fontified t) 1466 1467 (face (rainbow-delimiters-depth-3-face) fontified t) 1467 1468 (fontified t) 1468 1469 (fontified t) 1469 1473 (fontified t) 1473 1474 (face (rainbow-delimiters-depth-2-face) fontified t)) . 2552) (undo-tree-id23117 . -1474) (undo-tree-id23118 . -513) (undo-tree-id23119 . -494) (undo-tree-id23120 . -541) (undo-tree-id23121 . -1468) (undo-tree-id23122 . -311) (undo-tree-id23123 . -291) (undo-tree-id23124 . -282) (undo-tree-id23125 . -702) (undo-tree-id23126 . -1397) (undo-tree-id23127 . -1266) (undo-tree-id23128 . -1407) (undo-tree-id23129 . -724) (undo-tree-id23130 . -724) (undo-tree-id23131 . -724) (undo-tree-id23132 . -724) (undo-tree-id23133 . -724) (undo-tree-id23134 . -724) (undo-tree-id23135 . -724) (undo-tree-id23136 . -724) (undo-tree-id23137 . -724) (undo-tree-id23138 . -724) (undo-tree-id23139 . -724) (undo-tree-id23140 . -724) (undo-tree-id23141 . -724) (undo-tree-id23142 . -724) (undo-tree-id23143 . -724) (undo-tree-id23144 . -724) (undo-tree-id23145 . -724) (undo-tree-id23146 . -724) (undo-tree-id23147 . -724) (undo-tree-id23148 . -724) (undo-tree-id23149 . -724) (undo-tree-id23150 . -724) (undo-tree-id23151 . -724) (undo-tree-id23152 . -724) (undo-tree-id23153 . -724) (undo-tree-id23154 . -724) (undo-tree-id23155 . -724) (undo-tree-id23156 . -724) (undo-tree-id23157 . -724) (undo-tree-id23158 . -724) (undo-tree-id23159 . -724) (undo-tree-id23160 . -724) (undo-tree-id23161 . -724) (undo-tree-id23162 . -724) (undo-tree-id23163 . -724) (undo-tree-id23164 . -724) (undo-tree-id23165 . -724) (undo-tree-id23166 . -724) (undo-tree-id23167 . -724) (undo-tree-id23168 . -724) (undo-tree-id23169 . -724) (undo-tree-id23170 . -724) (undo-tree-id23171 . -724) (undo-tree-id23172 . -741) (undo-tree-id23173 . -741) (undo-tree-id23174 . -741) (undo-tree-id23175 . -741) (undo-tree-id23176 . -741) (undo-tree-id23177 . -741) (undo-tree-id23178 . -741) (undo-tree-id23179 . -747) (undo-tree-id23180 . -747) (undo-tree-id23181 . -747) (undo-tree-id23182 . -747) (undo-tree-id23183 . -747) (undo-tree-id23184 . -747) (undo-tree-id23185 . -747) (undo-tree-id23186 . -747) (undo-tree-id23187 . -749) (undo-tree-id23188 . -749) (undo-tree-id23189 . 725) (undo-tree-id23190 . -749) (undo-tree-id23191 . -749) (undo-tree-id23192 . -749) (undo-tree-id23193 . -749) (undo-tree-id23194 . -749) (undo-tree-id23195 . -749) (undo-tree-id23196 . -749) (undo-tree-id23197 . -749) (undo-tree-id23198 . -749) (undo-tree-id23199 . -749) (undo-tree-id23200 . -749) (undo-tree-id23201 . -749) (undo-tree-id23202 . -749) (undo-tree-id23203 . -749) (undo-tree-id23204 . -749) (undo-tree-id23205 . -749) (undo-tree-id23206 . -749) (undo-tree-id23207 . -749) (undo-tree-id23208 . -749) (undo-tree-id23209 . -749) (undo-tree-id23210 . -749) (undo-tree-id23211 . -749) (undo-tree-id23212 . -749) (undo-tree-id23213 . -749) (undo-tree-id23214 . -749) (undo-tree-id23215 . -1474) (undo-tree-id23216 . -1474) (undo-tree-id23217 . -1474) (undo-tree-id23218 . -1474) (undo-tree-id23219 . -1474) (undo-tree-id23220 . -1433) (undo-tree-id23221 . -1407) (undo-tree-id23222 . -1405) (undo-tree-id23223 . -1396) (undo-tree-id23224 . -1344) (undo-tree-id23225 . -1277) (undo-tree-id23226 . -1277) (undo-tree-id23227 . -1277) (undo-tree-id23228 . -1277) (undo-tree-id23229 . -1277) (undo-tree-id23230 . -1253) (undo-tree-id23231 . -1253) (undo-tree-id23232 . -1253) (undo-tree-id23233 . -1253) (undo-tree-id23234 . -1253) (undo-tree-id23235 . -1253) (undo-tree-id23236 . -1253) (undo-tree-id23237 . -1253) (undo-tree-id23238 . -1059) (undo-tree-id23239 . -752) (undo-tree-id23240 . -455) (undo-tree-id23241 . -1279) (undo-tree-id23242 . -1474) (t 26041 3580 631174 335000)) nil (26041 3614 765297 841000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2549) (undo-tree-id22698 . -1) (undo-tree-id22699 . -1) (undo-tree-id22700 . -1) (undo-tree-id22701 . -1) (undo-tree-id22702 . -1) (undo-tree-id22703 . -1) (undo-tree-id22704 . -1) (undo-tree-id22705 . -1) (undo-tree-id22706 . -1) (undo-tree-id22707 . -1) (undo-tree-id22708 . -1) (undo-tree-id22709 . -1) (undo-tree-id22710 . -1) (undo-tree-id22711 . -1) (undo-tree-id22712 . -1) (undo-tree-id22713 . -1) (undo-tree-id22714 . -1) (undo-tree-id22715 . -1) (undo-tree-id22716 . -1) (undo-tree-id22717 . -1) (undo-tree-id22718 . -1) (undo-tree-id22719 . -1) (undo-tree-id22720 . -1) (undo-tree-id22721 . -1) (undo-tree-id22722 . -1) (undo-tree-id22723 . -1) (undo-tree-id22724 . -1) (undo-tree-id22725 . -1) (undo-tree-id22726 . -1) (undo-tree-id22727 . -1) (undo-tree-id22728 . -1) (undo-tree-id22729 . -1) (undo-tree-id22730 . -1) (undo-tree-id22731 . -1) (undo-tree-id22732 . -1) (undo-tree-id22733 . -1) (undo-tree-id22734 . -1) (undo-tree-id22735 . -1) (undo-tree-id22736 . -1) (undo-tree-id22737 . -1) (undo-tree-id22738 . -1) (undo-tree-id22739 . -1) (undo-tree-id22740 . -1) (undo-tree-id22741 . -1) (undo-tree-id22742 . -1) (undo-tree-id22743 . -1) (undo-tree-id22744 . -1) (undo-tree-id22745 . -1) (undo-tree-id22746 . -1) (undo-tree-id22747 . -1) (undo-tree-id22748 . -1) (undo-tree-id22749 . -1) (undo-tree-id22750 . -1) (undo-tree-id22751 . -1) (undo-tree-id22752 . -1) (undo-tree-id22753 . -1) (undo-tree-id22754 . -1) (undo-tree-id22755 . -1) (undo-tree-id22756 . -1) (undo-tree-id22757 . -1) (undo-tree-id22758 . -1) (undo-tree-id22759 . -1) (undo-tree-id22760 . -1) (undo-tree-id22761 . -1) (undo-tree-id22762 . -1) (undo-tree-id22763 . -1) (undo-tree-id22764 . -1) (undo-tree-id22765 . -1) (undo-tree-id22766 . -1) (undo-tree-id22767 . -1) (undo-tree-id22768 . -1) (undo-tree-id22769 . -1) (undo-tree-id22770 . -1) (undo-tree-id22771 . -1) (undo-tree-id22772 . -1) (undo-tree-id22773 . -1) (undo-tree-id22774 . -1) (undo-tree-id22775 . -1) (undo-tree-id22776 . -1) (undo-tree-id22777 . -1) (undo-tree-id22778 . -1) (undo-tree-id22779 . -1) (undo-tree-id22780 . -1) (undo-tree-id22781 . -1) (undo-tree-id22782 . -1) (undo-tree-id22783 . -1) (undo-tree-id22784 . -1) (undo-tree-id22785 . -1) (undo-tree-id22786 . -1) (undo-tree-id22787 . -1) (undo-tree-id22788 . -1) (undo-tree-id22789 . -1) (undo-tree-id22790 . -1) (undo-tree-id22791 . -1) (undo-tree-id22792 . -1) (undo-tree-id22793 . -1) (undo-tree-id22794 . -1) (undo-tree-id22795 . -1) (undo-tree-id22796 . -1) (undo-tree-id22797 . -1) (undo-tree-id22798 . -1) (undo-tree-id22799 . -1) (undo-tree-id22800 . -1) (undo-tree-id22801 . -1) (undo-tree-id22802 . -1) (undo-tree-id22803 . -1) (undo-tree-id22804 . -1) (undo-tree-id22805 . -1) (undo-tree-id22806 . -1) (undo-tree-id22807 . -1) (undo-tree-id22808 . -1) (undo-tree-id22809 . -1) (undo-tree-id22810 . -1) (undo-tree-id22811 . -1) (undo-tree-id22812 . -1) (undo-tree-id22813 . -1) (undo-tree-id22814 . -1) (undo-tree-id22815 . -1) (undo-tree-id22816 . -1) (undo-tree-id22817 . -1) (undo-tree-id22818 . -1) (undo-tree-id22819 . -1) (undo-tree-id22820 . -1) (undo-tree-id22821 . -1) (undo-tree-id22822 . -1) (undo-tree-id22823 . -1) (undo-tree-id22824 . -1) (undo-tree-id22825 . -1) (undo-tree-id22826 . -1) (undo-tree-id22827 . -1) (undo-tree-id22828 . -1) (undo-tree-id22829 . -1) (undo-tree-id22830 . -1) (undo-tree-id22831 . -1) (undo-tree-id22832 . -1) (undo-tree-id22833 . -1) (undo-tree-id22834 . -1) (undo-tree-id22835 . -1) (undo-tree-id22836 . -1) (undo-tree-id22837 . -1) (undo-tree-id22838 . -1) (undo-tree-id22839 . -1) (#("
" 0 1 (fontified t)) . -2550) (undo-tree-id22840 . -1) (undo-tree-id22841 . -1) (undo-tree-id22842 . -1) (undo-tree-id22843 . -1) (undo-tree-id22844 . -1) (undo-tree-id22845 . -1) (undo-tree-id22846 . -1) (undo-tree-id22847 . -1) (undo-tree-id22848 . -1) (undo-tree-id22849 . -1) (undo-tree-id22850 . -1) (undo-tree-id22851 . -1) (undo-tree-id22852 . -1) (undo-tree-id22853 . -1) (undo-tree-id22854 . -1) (undo-tree-id22855 . -1) (undo-tree-id22856 . -1) (undo-tree-id22857 . -1) (undo-tree-id22858 . -1) (undo-tree-id22859 . -1) (undo-tree-id22860 . -1) (undo-tree-id22861 . -1) (undo-tree-id22862 . -1) (undo-tree-id22863 . -1) (undo-tree-id22864 . -1) (undo-tree-id22865 . -1) (undo-tree-id22866 . -1) (undo-tree-id22867 . -1) (undo-tree-id22868 . -1) (undo-tree-id22869 . -1) (undo-tree-id22870 . -1) (undo-tree-id22871 . -1) (undo-tree-id22872 . -1) (undo-tree-id22873 . -1) (undo-tree-id22874 . -1) (undo-tree-id22875 . -1) (undo-tree-id22876 . -1) (undo-tree-id22877 . -1) (undo-tree-id22878 . -1) (undo-tree-id22879 . -1) (undo-tree-id22880 . -1) (undo-tree-id22881 . -1) (undo-tree-id22882 . -1) (undo-tree-id22883 . -1) (undo-tree-id22884 . -1) (undo-tree-id22885 . -1) (undo-tree-id22886 . -1) (undo-tree-id22887 . -1) (undo-tree-id22888 . -1) (undo-tree-id22889 . -1) (undo-tree-id22890 . -1) (undo-tree-id22891 . -1) (undo-tree-id22892 . -1) (undo-tree-id22893 . -1) (undo-tree-id22894 . -1) (undo-tree-id22895 . -1) (undo-tree-id22896 . -1) (undo-tree-id22897 . -1) (undo-tree-id22898 . -1) (undo-tree-id22899 . -1) (undo-tree-id22900 . -1) (undo-tree-id22901 . -1) (undo-tree-id22902 . -1) (undo-tree-id22903 . -1) (undo-tree-id22904 . -1) (undo-tree-id22905 . -1) (undo-tree-id22906 . -1) (undo-tree-id22907 . -1) (undo-tree-id22908 . -1) (undo-tree-id22909 . -1) (undo-tree-id22910 . -1) (undo-tree-id22911 . -1) (undo-tree-id22912 . -1) (undo-tree-id22913 . -1) (undo-tree-id22914 . -1) (undo-tree-id22915 . -1) (undo-tree-id22916 . -1) (undo-tree-id22917 . -1) (undo-tree-id22918 . -1) (undo-tree-id22919 . -1) (undo-tree-id22920 . -1) (undo-tree-id22921 . -1) (undo-tree-id22922 . -1) (undo-tree-id22923 . -1) (undo-tree-id22924 . -1) (undo-tree-id22925 . -1) (undo-tree-id22926 . -1) (undo-tree-id22927 . -1) (undo-tree-id22928 . -1) (undo-tree-id22929 . -1) (undo-tree-id22930 . -1) (undo-tree-id22931 . -1) (undo-tree-id22932 . -1) (undo-tree-id22933 . -1) (undo-tree-id22934 . -1) (undo-tree-id22935 . -1) (undo-tree-id22936 . -1) (undo-tree-id22937 . -1) (undo-tree-id22938 . -1) (undo-tree-id22939 . -1) (undo-tree-id22940 . -1) (undo-tree-id22941 . -1) (undo-tree-id22942 . -1) (undo-tree-id22943 . -1) (undo-tree-id22944 . -1) (undo-tree-id22945 . -1) (undo-tree-id22946 . -1) (undo-tree-id22947 . -1) (undo-tree-id22948 . -1) (undo-tree-id22949 . -1) (undo-tree-id22950 . -1) (undo-tree-id22951 . -1) (undo-tree-id22952 . -1) (undo-tree-id22953 . -1) (undo-tree-id22954 . -1) (undo-tree-id22955 . -1) (undo-tree-id22956 . -1) (undo-tree-id22957 . -1) (undo-tree-id22958 . -1) (undo-tree-id22959 . -1) (undo-tree-id22960 . -1) (undo-tree-id22961 . -1) (undo-tree-id22962 . -1) (undo-tree-id22963 . -1) (undo-tree-id22964 . -1) (undo-tree-id22965 . -1) (undo-tree-id22966 . -1) (undo-tree-id22967 . -1) (undo-tree-id22968 . -1) (undo-tree-id22969 . -1) (undo-tree-id22970 . -1) (undo-tree-id22971 . -1) (undo-tree-id22972 . -1) (undo-tree-id22973 . -1) (undo-tree-id22974 . -1) (undo-tree-id22975 . -1) (undo-tree-id22976 . -1) (undo-tree-id22977 . -1) (undo-tree-id22978 . -1) (undo-tree-id22979 . -1) (#(" " 0 1 (fontified t)) . -2551) (undo-tree-id22980 . -1) (undo-tree-id22981 . -1) (undo-tree-id22982 . -1) (undo-tree-id22983 . -1) (undo-tree-id22984 . -1) (undo-tree-id22985 . -1) (undo-tree-id22986 . -1) (undo-tree-id22987 . -1) (undo-tree-id22988 . -1) (undo-tree-id22989 . -1) (undo-tree-id22990 . -1) (undo-tree-id22991 . -1) (undo-tree-id22992 . -1) (undo-tree-id22993 . -1) (undo-tree-id22994 . -1) (undo-tree-id22995 . -1) (undo-tree-id22996 . -1) (undo-tree-id22997 . -1) (undo-tree-id22998 . -1) (undo-tree-id22999 . -1) (undo-tree-id23000 . -1) (undo-tree-id23001 . -1) (undo-tree-id23002 . -1) (undo-tree-id23003 . -1) (undo-tree-id23004 . -1) (undo-tree-id23005 . -1) (undo-tree-id23006 . -1) (undo-tree-id23007 . -1) (undo-tree-id23008 . -1) (undo-tree-id23009 . -1) (undo-tree-id23010 . -1) (undo-tree-id23011 . -1) (undo-tree-id23012 . -1) (undo-tree-id23013 . -1) (undo-tree-id23014 . -1) (undo-tree-id23015 . -1) (undo-tree-id23016 . -1) (undo-tree-id23017 . -1) (undo-tree-id23018 . -1) (undo-tree-id23019 . -1) (undo-tree-id23020 . -1) (undo-tree-id23021 . -1) (undo-tree-id23022 . -1) (undo-tree-id23023 . -1) (undo-tree-id23024 . -1) (undo-tree-id23025 . -1) (undo-tree-id23026 . -1) (undo-tree-id23027 . -1) (undo-tree-id23028 . -1) (undo-tree-id23029 . -1) (undo-tree-id23030 . -1) (undo-tree-id23031 . -1) (undo-tree-id23032 . -1) (undo-tree-id23033 . -1) (undo-tree-id23034 . -1) (undo-tree-id23035 . -1) (undo-tree-id23036 . -1) (undo-tree-id23037 . -1) (undo-tree-id23038 . -1) (undo-tree-id23039 . -1) (undo-tree-id23040 . -1) (undo-tree-id23041 . -1) (undo-tree-id23042 . -1) (undo-tree-id23043 . -1) (undo-tree-id23044 . -1) (undo-tree-id23045 . -1) (undo-tree-id23046 . -1) (undo-tree-id23047 . -1) (undo-tree-id23048 . -1) (undo-tree-id23049 . -1) (undo-tree-id23050 . -1) (undo-tree-id23051 . -1) (undo-tree-id23052 . -1) (undo-tree-id23053 . -1) (undo-tree-id23054 . -1) (undo-tree-id23055 . -1) (undo-tree-id23056 . -1) (undo-tree-id23057 . -1) (undo-tree-id23058 . -1) (undo-tree-id23059 . -1) (undo-tree-id23060 . -1) (undo-tree-id23061 . -1) (undo-tree-id23062 . -1) (undo-tree-id23063 . -1) (undo-tree-id23064 . -1) (undo-tree-id23065 . -1) (undo-tree-id23066 . -1) (undo-tree-id23067 . -1) (undo-tree-id23068 . -1) (undo-tree-id23069 . -1) (undo-tree-id23070 . -1) (undo-tree-id23071 . -1) (undo-tree-id23072 . -1) (undo-tree-id23073 . -1) (undo-tree-id23074 . -1) (undo-tree-id23075 . -1) (undo-tree-id23076 . -1) (undo-tree-id23077 . -1) (undo-tree-id23078 . -1) (undo-tree-id23079 . -1) (undo-tree-id23080 . -1) (undo-tree-id23081 . -1) (undo-tree-id23082 . -1) (undo-tree-id23083 . -1) (undo-tree-id23084 . -1) (undo-tree-id23085 . -1) (undo-tree-id23086 . -1) (undo-tree-id23087 . -1) (undo-tree-id23088 . -1) (undo-tree-id23089 . -1) (undo-tree-id23090 . -1) (undo-tree-id23091 . -1) (undo-tree-id23092 . -1) (undo-tree-id23093 . -1) (undo-tree-id23094 . -1) (undo-tree-id23095 . -1) (undo-tree-id23096 . -1) (undo-tree-id23097 . -1) (undo-tree-id23098 . -1) (undo-tree-id23099 . -1) (undo-tree-id23100 . -1) (undo-tree-id23101 . -1) (undo-tree-id23102 . -1) (undo-tree-id23103 . -1) (undo-tree-id23104 . -1) (undo-tree-id23105 . -1) (undo-tree-id23106 . -1) (undo-tree-id23107 . -1) (undo-tree-id23108 . -1) (undo-tree-id23109 . -1) (undo-tree-id23110 . -1) (undo-tree-id23111 . -1) (undo-tree-id23112 . -1) (undo-tree-id23113 . -1) (undo-tree-id23114 . -1) (undo-tree-id23115 . -1) (undo-tree-id23116 . -1) 2552) nil (26041 3614 765193 950000) 0 nil])
([nil nil ((2551 . 2555) (#("    " 0 4 (fontified nil)) . 2550) (undo-tree-id23316 . -4) (2549 . 2555) (t 26041 3614 801176 434000)) nil (26041 3986 313975 162000) 0 nil])
([nil nil ((2545 . 2553) (#("        " 0 8 (fontified nil)) . 2544) (undo-tree-id23315 . -8) (2543 . 2553)) nil (26041 3986 313972 849000) 0 nil])
([nil nil ((2561 . 2565) (#("    " 0 4 (fontified nil)) . 2560) (2560 . 2564) (2560 . 2561)) nil (26041 3986 313971 91000) 0 nil])
([nil nil ((2565 . 2568)) nil (26041 3986 313970 76000) 0 nil])
([nil nil ((apply yas--snippet-revive 2565 2571 #s(yas--snippet nil nil nil 123 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 123 nil nil nil nil)) (2565 . 2571) (#("unsafe" 0 6 (fontified nil)) . 2565) (2565 . 2571) (#("uns" 0 3 (fontified nil)) . 2565) (2565 . 2568) (#("unsafe" 0 6 (fontified nil)) . -2565) (2565 . 2571) (#("uns" 0 3 (fontified t)) . -2565) (undo-tree-id23314 . -3) 2568) nil (26041 3986 313968 863000) 0 nil])
([nil nil ((2571 . 2574)) nil (26041 3986 313966 393000) 0 nil])
([nil nil ((2575 . 2579) (#("        " 0 8 (fontified nil)) . 2574) (2574 . 2582) (#("    " 0 4 (fontified nil)) . 2574) (undo-tree-id23313 . -4) (2573 . 2579)) nil (26041 3986 313965 478000) 0 nil])
([nil nil ((2574 . 2582)) nil (26041 3986 313963 574000) 0 nil])
([nil nil ((2582 . 2603)) nil (26041 3986 313963 40000) 0 nil])
([nil nil ((2603 . 2604)) nil (26041 3986 313962 460000) 0 nil])
([nil nil ((2604 . 2612)) nil (26041 3986 313961 842000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2625 2626 nil nil nil t #s(yas--exit 2627 nil))) #s(yas--exit 2627 nil) 124 nil #s(yas--field 1 2625 2626 nil nil nil t #s(yas--exit 2627 nil)) nil nil)) (2603 . 2634) (#("zbar_processor_create(${1:threaded})$0" 0 38 (fontified nil)) . 2603) (2603 . 2641) (#("processor" 0 9 (fontified nil)) . 2603) (2603 . 2612) (#("zbar_processor_create(…)" 0 24 (fontified nil)) . -2603) (2603 . 2627) (#("processor" 0 9 (fontified t)) . -2603) (undo-tree-id23312 . -9) 2612) nil (26041 3986 313960 774000) 0 nil])
([nil nil ((#("threaded" 0 8 (fontified nil)) . 2626) (2625 . 2626)) nil (26041 3986 313958 122000) 0 nil])
([nil nil ((apply yas--snippet-revive 2603 2627 #s(yas--snippet nil (#s(yas--field 1 2625 2626 nil nil nil t #s(yas--exit 2627 nil))) #s(yas--exit 2627 nil) 124 nil #s(yas--field 1 2625 2626 nil nil nil t #s(yas--exit 2627 nil)) nil nil))) nil (26041 3986 313957 257000) 0 nil])
([nil nil ((2627 . 2628)) nil (26041 3986 313956 701000) 0 nil])
([nil nil ((2628 . 2637)) nil (26041 3986 313955 957000) 0 nil])
([nil nil ((2637 . 2638)) nil (26041 3986 313955 407000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -2637) (undo-tree-id23311 . -1) 2638) nil (26041 3986 313954 673000) 0 nil])
([nil nil ((2637 . 2641)) nil (26041 3986 313953 332000) 0 nil])
([nil nil ((2641 . 2655)) nil (26041 3986 313952 760000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2668 2677 nil nil nil nil #s(yas--field 2 2679 2688 nil nil nil nil #s(yas--field 3 2690 2696 nil nil nil nil #s(yas--field 4 2698 2703 nil nil nil nil #s(yas--exit 2704 nil))))) #s(yas--field 2 2679 2688 nil nil nil nil #s(yas--field 3 2690 2696 nil nil nil nil #s(yas--field 4 2698 2703 nil nil nil nil #s(yas--exit 2704 nil)))) #s(yas--field 3 2690 2696 nil nil nil nil #s(yas--field 4 2698 2703 nil nil nil nil #s(yas--exit 2704 nil))) #s(yas--field 4 2698 2703 nil nil nil nil #s(yas--exit 2704 nil))) #s(yas--exit 2704 nil) 125 nil #s(yas--field 1 2668 2677 nil nil nil nil #s(yas--field 2 2679 2688 nil nil nil nil #s(yas--field 3 2690 2696 nil nil nil nil #s(yas--field 4 2698 2703 nil nil nil nil #s(yas--exit 2704 nil))))) nil nil)) (2642 . 2704) (#("zbar_processor_set_config(${1:processor}, ${2:symbology}, ${3:config}, ${4:value})$0" 0 84 (fontified nil)) . 2642) (2642 . 2726) (#("processor_set" 0 13 (fontified nil)) . 2642) (2642 . 2655) (#("zbar_processor_set_config(…)" 0 28 (fontified nil)) . -2642) (2642 . 2670) (#("processor_set" 0 13 (fontified t)) . -2642) (undo-tree-id23310 . -13) 2655) nil (26041 3986 313951 89000) 0 nil])
([nil nil ((apply yas--snippet-revive 2642 2704 #s(yas--snippet nil (#s(yas--field 1 2668 2677 nil nil nil nil #s(yas--field 2 2679 2688 nil nil nil nil #s(yas--field 3 2690 2696 nil nil nil nil #s(yas--field 4 2698 2703 nil nil nil nil #s(yas--exit 2704 nil))))) #s(yas--field 2 2679 2688 nil nil nil nil #s(yas--field 3 2690 2696 nil nil nil nil #s(yas--field 4 2698 2703 nil nil nil nil #s(yas--exit 2704 nil)))) #s(yas--field 3 2690 2696 nil nil nil nil #s(yas--field 4 2698 2703 nil nil nil nil #s(yas--exit 2704 nil))) #s(yas--field 4 2698 2703 nil nil nil nil #s(yas--exit 2704 nil))) #s(yas--exit 2704 nil) 125 nil #s(yas--field 1 2668 2677 nil nil nil nil #s(yas--field 2 2679 2688 nil nil nil nil #s(yas--field 3 2690 2696 nil nil nil nil #s(yas--field 4 2698 2703 nil nil nil nil #s(yas--exit 2704 nil))))) nil nil))) nil (26041 3986 313948 536000) 0 nil])
([nil nil ((#("symbology" 0 9 (fontified t)) . -2679) (undo-tree-id23308 . -9) (undo-tree-id23309 . -9) 2688) nil (26041 3986 313947 761000) 0 nil])
([nil nil ((2679 . 2680)) nil (26041 3986 313945 635000) 0 nil])
([nil nil ((#("config" 0 6 (fontified t)) . -2682) (undo-tree-id23306 . -6) (undo-tree-id23307 . -6) 2688) nil (26041 3986 313944 911000) 0 nil])
([nil nil ((2682 . 2684)) nil (26041 3986 313943 103000) 0 nil])
([nil nil ((#("C" 0 1 (face font-lock-type-face fontified t)) . -2682) (undo-tree-id23302 . -1) (undo-tree-id23303 . -1) (#("F" 0 1 (face font-lock-type-face fontified t)) . -2683) (undo-tree-id23304 . -1) (undo-tree-id23305 . -1) 2684) nil (26041 3986 313942 190000) 0 nil])
([nil nil ((2682 . 2688)) nil (26041 3986 313938 776000) 0 nil])
([nil nil ((#("L" 0 1 (fontified t)) . -2685) (undo-tree-id23296 . -1) (undo-tree-id23297 . -1) (#(":" 0 1 (fontified t)) . -2686) (undo-tree-id23298 . -1) (undo-tree-id23299 . -1) (#("L" 0 1 (face font-lock-type-face fontified t)) . -2687) (undo-tree-id23300 . -1) (undo-tree-id23301 . -1) 2688) nil (26041 3986 313937 793000) 0 nil])
([nil nil ((2685 . 2695)) nil (26041 3986 313932 659000) 0 nil])
([nil nil ((2687 . 2716) (#("CFG_ENAB" 0 8 (fontified nil)) . 2687) (2687 . 2695) (#("zbar_config_e_ZBAR_CFG_ENABLE" 0 29 (fontified nil)) . -2687) (2687 . 2716) (#("CFG_ENAB" 0 8 (face font-lock-type-face fontified t)) . -2687) (undo-tree-id23295 . -8) 2695) nil (26041 3986 313931 749000) 0 nil])
([nil nil ((#("value" 0 5 (fontified t)) . -2718) (undo-tree-id23294 . -5) 2723) nil (26041 3986 313928 637000) 0 nil])
([nil nil ((2718 . 2719)) nil (26041 3986 313926 842000) 0 nil])
([nil nil ((2720 . 2721)) nil (26041 3986 313926 243000) 0 nil])
([nil nil ((2721 . 2730)) nil (26041 3986 313925 669000) 0 nil])
([nil nil ((2730 . 2734)) nil (26041 3986 313925 112000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -2730) (undo-tree-id23290 . -1) (#("r" 0 1 (fontified t)) . -2731) (undo-tree-id23291 . -1) (#("i" 0 1 (fontified t)) . -2732) (undo-tree-id23292 . -1) (#("c" 0 1 (fontified t)) . -2733) (undo-tree-id23293 . -1) 2734) nil (26041 3986 313923 890000) 0 nil])
([nil nil ((2730 . 2735)) nil (26041 3986 313919 873000) 0 nil])
([nil nil ((#("L" 0 1 (fontified t)) . -2733) (undo-tree-id23288 . -1) (#("L" 0 1 (fontified t)) . -2734) (undo-tree-id23289 . -1) 2735) nil (26041 3986 313919 85000) 0 nil])
([nil nil ((2733 . 2735)) nil (26041 3986 313916 849000) 0 nil])
([nil nil ((2735 . 2737)) nil (26041 3986 313916 301000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -2735) (undo-tree-id23286 . -1) (#("p" 0 1 (fontified t)) . -2736) (undo-tree-id23287 . -1) 2737) nil (26041 3986 313915 543000) 0 nil])
([nil nil ((2735 . 2745)) nil (26041 3986 313913 293000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -2744) (undo-tree-id23285 . -1) 2745) nil (26041 3986 313912 404000) 0 nil])
([nil nil ((2744 . 2748)) nil (26041 3986 313910 947000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2755 2764 nil nil nil nil #s(yas--field 2 2766 2778 nil nil nil nil #s(yas--field 3 2780 2794 nil nil nil nil #s(yas--exit 2795 nil)))) #s(yas--field 2 2766 2778 nil nil nil nil #s(yas--field 3 2780 2794 nil nil nil nil #s(yas--exit 2795 nil))) #s(yas--field 3 2780 2794 nil nil nil nil #s(yas--exit 2795 nil))) #s(yas--exit 2795 nil) 126 nil #s(yas--field 1 2755 2764 nil nil nil nil #s(yas--field 2 2766 2778 nil nil nil nil #s(yas--field 3 2780 2794 nil nil nil nil #s(yas--exit 2795 nil)))) nil nil)) (2735 . 2795) (#("zbar_processor_init(${1:processor}, ${2:video_device}, ${3:enable_display})$0" 0 77 (fontified nil)) . 2735) (2735 . 2812) (#("processor_int" 0 13 (fontified nil)) . 2735) (2735 . 2748) (#("zbar_processor_init(…)" 0 22 (fontified nil)) . -2735) (2735 . 2757) (#("processor_int" 0 13 (fontified t)) . -2735) (undo-tree-id23284 . -13) 2748) nil (26041 3986 313909 735000) 0 nil])
([nil nil ((apply yas--snippet-revive 2735 2795 #s(yas--snippet nil (#s(yas--field 1 2755 2764 nil nil nil nil #s(yas--field 2 2766 2778 nil nil nil nil #s(yas--field 3 2780 2794 nil nil nil nil #s(yas--exit 2795 nil)))) #s(yas--field 2 2766 2778 nil nil nil nil #s(yas--field 3 2780 2794 nil nil nil nil #s(yas--exit 2795 nil))) #s(yas--field 3 2780 2794 nil nil nil nil #s(yas--exit 2795 nil))) #s(yas--exit 2795 nil) 126 nil #s(yas--field 1 2755 2764 nil nil nil nil #s(yas--field 2 2766 2778 nil nil nil nil #s(yas--field 3 2780 2794 nil nil nil nil #s(yas--exit 2795 nil)))) nil nil))) nil (26041 3986 313906 998000) 0 nil])
([nil nil ((#("device" 0 6 (fontified t)) . -2772) (undo-tree-id23282 . -6) (undo-tree-id23283 . -6) 2778) nil (26041 3986 313906 219000) 0 nil])
([nil nil ((#("video_" 0 6 (fontified t)) . -2766) (undo-tree-id23280 . -6) (undo-tree-id23281 . -6) 2772) nil (26041 3986 313904 46000) 0 nil])
([nil nil ((2766 . 2767)) nil (26041 3986 313901 932000) 0 nil])
([nil nil ((#("C" 0 1 (face font-lock-type-face fontified t)) . -2766) (undo-tree-id23278 . -1) (undo-tree-id23279 . -1) 2767) nil (26041 3986 313901 124000) 0 nil])
([nil nil ((2721 . 2730)) nil (26041 3986 313899 22000) 0 nil])
([nil nil ((2730 . 2738)) nil (26041 3986 313898 436000) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-variable-name-face fontified t)) . -2736) (undo-tree-id23276 . -1) (#("i" 0 1 (face font-lock-variable-name-face fontified t)) . -2737) (undo-tree-id23277 . -1) 2738) nil (26041 3986 313897 669000) 0 nil])
([nil nil ((2736 . 2744)) nil (26041 3986 313895 320000) 0 nil])
([nil nil ((2743 . 2750) (#("C" 0 1 (fontified nil)) . 2743) (2743 . 2744) (#("CString" 0 7 (fontified nil)) . -2743) (2743 . 2750) (#("C" 0 1 (face font-lock-type-face fontified t)) . -2743) (undo-tree-id23275 . -1) 2744) nil (26041 3986 313894 175000) 0 nil])
([nil nil ((2750 . 2755)) nil (26041 3986 313891 973000) 0 nil])
([nil nil ((2752 . 2755) (#("new" 0 3 (fontified nil)) . 2752) (2752 . 2755) (#("new" 0 3 (fontified t)) . -2752) (undo-tree-id23274 . -3) 2755) nil (26041 3986 313891 113000) 0 nil])
([nil nil ((2755 . 2757)) nil (26041 3986 313888 931000) 0 nil])
([nil nil ((2756 . 2758)) nil (26041 3986 313888 341000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . 2757) (undo-tree-id23272 . -1) (undo-tree-id23273 . -1) 2758) nil (26041 3986 313887 586000) 0 nil])
([nil nil ((2757 . 2761)) nil (26041 3986 313885 447000) 0 nil])
([nil nil ((2761 . 2766)) nil (26041 3986 313884 893000) 0 nil])
([nil nil ((#("o" 0 1 (face font-lock-string-face fontified t)) . -2765) (undo-tree-id23271 . -1) 2766) nil (26041 3986 313884 93000) 0 nil])
([nil nil ((2765 . 2769)) nil (26041 3986 313882 649000) 0 nil])
([nil nil ((#("0" 0 1 (face font-lock-string-face fontified t)) . -2765) (undo-tree-id23263 . -1) (undo-tree-id23264 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -2766) (undo-tree-id23265 . -1) (undo-tree-id23266 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -2767) (undo-tree-id23267 . -1) (undo-tree-id23268 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -2768) (undo-tree-id23269 . -1) (undo-tree-id23270 . -1) 2769) nil (26041 3986 313881 220000) 0 nil])
([nil nil ((2765 . 2769)) nil (26041 3986 313874 759000) 0 nil])
([nil nil ((2770 . 2772)) nil (26041 3986 313874 153000) 0 nil])
([nil nil ((apply yas--snippet-revive 2771 2779 #s(yas--snippet nil nil #s(yas--exit 2779 nil) 127 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2779 nil) 127 nil nil nil nil)) (2771 . 2779) (#("unwrap()$0" 0 10 (fontified nil)) . 2771) (2771 . 2781) (#("u" 0 1 (fontified nil)) . 2771) (2771 . 2772) (#("unwrap()" 0 8 (fontified nil)) . -2771) (2771 . 2779) (#("u" 0 1 (fontified t)) . -2771) (undo-tree-id23262 . -1) 2772) nil (26041 3986 313872 962000) 0 nil])
([nil nil ((2779 . 2780)) nil (26041 3986 313870 352000) 0 nil])
([nil nil ((2825 . 2827)) nil (26041 3986 313869 780000) 0 nil])
([nil nil ((2825 . 2831) (#("de" 0 2 (fontified nil)) . 2825) (2825 . 2827) (#("device" 0 6 (fontified nil)) . -2825) (2825 . 2831) (#("de" 0 2 (fontified t)) . -2825) (undo-tree-id23256 . -2) (undo-tree-id23257 . -1) (undo-tree-id23258 . -1) (undo-tree-id23259 . -1) (undo-tree-id23260 . -2) (undo-tree-id23261 . -2) 2827) nil (26041 3986 313868 546000) 0 nil])
([nil nil ((2831 . 2833)) nil (26041 3986 313862 872000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -2832) (undo-tree-id23250 . -1) (undo-tree-id23251 . -1) (undo-tree-id23252 . -1) (undo-tree-id23253 . -1) (undo-tree-id23254 . -1) (undo-tree-id23255 . -1) 2833) nil (26041 3986 313861 883000) 0 nil])
([nil nil ((apply yas--snippet-revive 2832 2840 #s(yas--snippet nil nil #s(yas--exit 2840 nil) 128 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2840 nil) 128 nil nil nil nil)) (2832 . 2840) (#("as_ptr()$0" 0 10 (fontified nil)) . 2832) (2832 . 2842) (#("as_ptr()" 0 8 (fontified nil)) . -2832) (2832 . 2840)) nil (26041 3986 313856 294000) 0 nil])
([nil nil ((#("display" 0 7 (fontified t)) . -2849) (undo-tree-id23248 . -7) (undo-tree-id23249 . -7) 2856) nil (26041 3986 313854 480000) 0 nil])
([nil nil ((#("enable_" 0 7 (fontified t)) . -2842) (undo-tree-id23243 . -7) (undo-tree-id23244 . -6) (undo-tree-id23245 . -7) (undo-tree-id23246 . -7) (undo-tree-id23247 . -7) 2849) nil (26041 3986 313851 332000) 0 nil])
([nil nil ((2842 . 2843)) nil (26041 3986 313839 482000) 0 nil])
([nil nil ((2844 . 2845)) nil (26041 3986 313835 665000) 0 nil])
([nil nil ((2845 . 2854) (t 26041 3986 347865 899000)) nil (26041 4036 727488 356000) 0 nil])
([nil nil ((2854 . 2855)) nil (26041 4036 727487 473000) 0 nil])
([nil nil ((#("z" 0 1 (fontified t)) . -2854) (undo-tree-id23463 . -1) 2855) nil (26041 4036 727486 718000) 0 nil])
([nil nil ((2854 . 2857)) nil (26041 4036 727485 11000) 0 nil])
([nil nil ((2857 . 2863)) nil (26041 4036 727484 405000) 0 nil])
([nil nil ((#("zbar" 0 4 (fontified t)) . -2859) (undo-tree-id23462 . -4) 2863) nil (26041 4036 727483 592000) 0 nil])
([nil nil ((#("ffi::" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t)) . -2854) (undo-tree-id23461 . -5) 2859) nil (26041 4036 727482 154000) 0 nil])
([nil nil ((2854 . 2856)) nil (26041 4036 727480 757000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -2854) (undo-tree-id23459 . -1) (#("s" 0 1 (fontified t)) . -2855) (undo-tree-id23460 . -1) 2856) nil (26041 4036 727479 859000) 0 nil])
([nil nil ((2854 . 2858)) nil (26041 4036 727477 660000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -2857) (undo-tree-id23458 . -1) 2858) nil (26041 4036 727476 921000) 0 nil])
([nil nil ((2857 . 2858)) nil (26041 4036 727475 582000) 0 nil])
([nil nil ((2858 . 2864)) nil (26041 4036 727474 964000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -2863) (undo-tree-id23457 . -1) 2864) nil (26041 4036 727474 155000) 0 nil])
([nil nil ((2863 . 2867)) nil (26041 4036 727472 724000) 0 nil])
([nil nil ((#("set" 0 3 (fontified t)) . -2864) (undo-tree-id23456 . -3) 2867) nil (26041 4036 727471 790000) 0 nil])
([nil nil ((2864 . 2871)) nil (26041 4036 727470 284000) 0 nil])
([nil nil ((2871 . 2872)) nil (26041 4036 727469 661000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -2871) (undo-tree-id23454 . -1) (undo-tree-id23455 . -1) 2872) nil (26041 4036 727468 829000) 0 nil])
([nil nil ((2871 . 2874)) nil (26041 4036 727466 740000) 0 nil])
([nil nil ((#("+" 0 1 (fontified t)) . -2873) (undo-tree-id23450 . -1) (undo-tree-id23451 . -1) (undo-tree-id23452 . -1) (undo-tree-id23453 . -1) 2874) nil (26041 4036 727465 796000) 0 nil])
([nil nil ((2873 . 2877)) nil (26041 4036 727462 171000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2886 2895 nil nil nil nil #s(yas--field 2 2897 2904 nil nil nil nil #s(yas--exit 2905 nil))) #s(yas--field 2 2897 2904 nil nil nil nil #s(yas--exit 2905 nil))) #s(yas--exit 2905 nil) 129 nil #s(yas--field 1 2886 2895 nil nil nil nil #s(yas--field 2 2897 2904 nil nil nil nil #s(yas--exit 2905 nil))) nil nil)) (2859 . 2905) (#("zbar_processor_set_visible(${1:processor}, ${2:visible})$0" 0 58 (fontified nil)) . 2859) (2859 . 2917) (#("zbar_processor_set" 0 18 (fontified nil)) . 2859) (2859 . 2877) (#("zbar_processor_set_visible(…)" 0 29 (fontified nil)) . -2859) (2859 . 2888) (#("zbar_processor_set" 0 18 (fontified t)) . -2859) (undo-tree-id23425 . -18) (undo-tree-id23426 . -12) (undo-tree-id23427 . -12) (undo-tree-id23428 . -12) (undo-tree-id23429 . -12) (undo-tree-id23430 . -13) (undo-tree-id23431 . -13) (undo-tree-id23432 . -13) (undo-tree-id23433 . -14) (undo-tree-id23434 . -14) (undo-tree-id23435 . -14) (undo-tree-id23436 . -14) (undo-tree-id23437 . -14) (undo-tree-id23438 . -14) (undo-tree-id23439 . -14) (undo-tree-id23440 . -15) (undo-tree-id23441 . -15) (undo-tree-id23442 . -16) (undo-tree-id23443 . -16) (undo-tree-id23444 . -17) (undo-tree-id23445 . -17) (undo-tree-id23446 . -18) (undo-tree-id23447 . -18) (undo-tree-id23448 . -18) (undo-tree-id23449 . -18) 2877) nil (26041 4036 727460 49000) 0 nil])
([nil nil ((apply yas--snippet-revive 2859 2905 #s(yas--snippet nil (#s(yas--field 1 2886 2895 nil nil nil nil #s(yas--field 2 2897 2904 nil nil nil nil #s(yas--exit 2905 nil))) #s(yas--field 2 2897 2904 nil nil nil nil #s(yas--exit 2905 nil))) #s(yas--exit 2905 nil) 129 nil #s(yas--field 1 2886 2895 nil nil nil nil #s(yas--field 2 2897 2904 nil nil nil nil #s(yas--exit 2905 nil))) nil nil))) nil (26041 4036 727439 862000) 0 nil])
([nil nil ((#("visible" 0 7 (fontified t)) . -2897) (undo-tree-id23422 . -7) (undo-tree-id23423 . -7) (undo-tree-id23424 . -7) 2904) nil (26041 4036 727438 974000) 0 nil])
([nil nil ((2897 . 2898)) nil (26041 4036 727436 72000) 0 nil])
([nil nil ((2899 . 2901)) nil (26041 4036 727435 470000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -2900) (undo-tree-id23419 . -1) (undo-tree-id23420 . -1) (undo-tree-id23421 . -1) 2901) nil (26041 4036 727434 609000) 0 nil])
([nil nil ((2902 . 2910) (#("        " 0 8 (fontified nil)) . 2901) (undo-tree-id23414 . -8) (undo-tree-id23415 . -8) (undo-tree-id23416 . -8) (undo-tree-id23417 . -8) (undo-tree-id23418 . -8) (2900 . 2910)) nil (26041 4036 727431 98000) 0 nil])
([nil nil ((2910 . 2915)) nil (26041 4036 727427 15000) 0 nil])
([nil nil ((2915 . 2919)) nil (26041 4036 727426 413000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -2918) (undo-tree-id23410 . -1) (undo-tree-id23411 . -1) (undo-tree-id23412 . -1) (undo-tree-id23413 . -1) 2919) nil (26041 4036 727425 533000) 0 nil])
([nil nil ((#("pri" 0 3 (fontified t)) . -2915) (undo-tree-id23395 . -3) (undo-tree-id23396 . -1) (undo-tree-id23397 . -1) (undo-tree-id23398 . -1) (undo-tree-id23399 . -2) (undo-tree-id23400 . -2) (undo-tree-id23401 . -2) (undo-tree-id23402 . -3) (undo-tree-id23403 . -3) (undo-tree-id23404 . -3) (undo-tree-id23405 . -3) (undo-tree-id23406 . -3) (undo-tree-id23407 . -3) (undo-tree-id23408 . -3) (undo-tree-id23409 . -3) 2918) nil (26041 4036 727421 399000) 0 nil])
([nil nil ((#("ffi::" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t)) . -2910) (undo-tree-id23363 . -5) (undo-tree-id23364 . -1) (undo-tree-id23365 . -1) (undo-tree-id23366 . -2) (undo-tree-id23367 . -2) (undo-tree-id23368 . -3) (undo-tree-id23369 . -3) (undo-tree-id23370 . -3) (undo-tree-id23371 . -4) (undo-tree-id23372 . -4) (undo-tree-id23373 . -4) (undo-tree-id23374 . -5) (undo-tree-id23375 . -5) (undo-tree-id23376 . -5) (undo-tree-id23377 . -5) (undo-tree-id23378 . -5) (undo-tree-id23379 . -5) (undo-tree-id23380 . -5) (undo-tree-id23381 . -5) (undo-tree-id23382 . -5) (undo-tree-id23383 . -5) (undo-tree-id23384 . -5) (undo-tree-id23385 . -5) (undo-tree-id23386 . -5) (undo-tree-id23387 . -5) (undo-tree-id23388 . -5) (undo-tree-id23389 . -5) (undo-tree-id23390 . -5) (undo-tree-id23391 . -5) (undo-tree-id23392 . -5) (undo-tree-id23393 . -5) (undo-tree-id23394 . -5) 2915) nil (26041 4036 727409 306000) 0 nil])
([nil nil ((2910 . 2912)) nil (26041 4036 727384 865000) 0 nil])
([nil nil ((apply yas--snippet-revive 2910 2939 #s(yas--snippet nil nil #s(yas--exit 2929 nil) 130 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2929 nil) 130 nil nil nil nil)) (2910 . 2939) (#("loop {
            $0
        }" 0 31 (fontified nil)) . 2910) (2932 . 2940) (2917 . 2929) (#("    " 0 4 (fontified nil)) . 2917) (2910 . 2925) (#("lo" 0 2 (fontified nil)) . 2910) (2910 . 2912) (#("loop" 0 4 (fontified nil)) . -2910) (2910 . 2914) (#("lo" 0 2 (fontified t)) . -2910) (undo-tree-id23355 . -2) (undo-tree-id23356 . -1) (undo-tree-id23357 . -1) (undo-tree-id23358 . -2) (undo-tree-id23359 . -2) (undo-tree-id23360 . -2) (undo-tree-id23361 . -2) (undo-tree-id23362 . -2) 2912) nil (26041 4036 727383 61000) 0 nil])
([nil nil ((2929 . 2930)) nil (26041 4036 727374 603000) 0 nil])
([nil nil ((2929 . 2938) (#("p" 0 1 (fontified nil)) . 2929) (2929 . 2930) (#("processor" 0 9 (fontified nil)) . -2929) (2929 . 2938) (#("p" 0 1 (fontified t)) . -2929) (undo-tree-id23350 . -1) (undo-tree-id23351 . -1) (undo-tree-id23352 . -1) (undo-tree-id23353 . -1) (undo-tree-id23354 . -1) 2930) nil (26041 4036 727373 67000) 0 nil])
([nil nil ((2938 . 2940)) nil (26041 4036 727367 398000) 0 nil])
([nil nil ((#("processor::" 0 9 (face font-lock-constant-face fontified t) 9 11 (fontified t)) . -2929) (undo-tree-id23339 . -11) (undo-tree-id23340 . -9) (undo-tree-id23341 . -9) (undo-tree-id23342 . -9) (undo-tree-id23343 . -10) (undo-tree-id23344 . -10) (undo-tree-id23345 . -11) (undo-tree-id23346 . -11) (undo-tree-id23347 . -11) (undo-tree-id23348 . -11) (undo-tree-id23349 . -11) 2940) nil (26041 4036 727783 435000) 0 nil])
([nil nil ((2929 . 2935)) nil (26041 4174 273608 690000) 0 nil] [nil nil ((#("loop {
            " 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-3-face) fontified t) 6 7 (fontified t) 7 19 (fontified t)) . -2910) (undo-tree-id23317 . -19) (undo-tree-id23318 . -19) (undo-tree-id23319 . -19) (undo-tree-id23320 . -19) (undo-tree-id23321 . -19) (undo-tree-id23322 . -19) (undo-tree-id23323 . -19) (undo-tree-id23324 . -19) (undo-tree-id23325 . -19) (undo-tree-id23326 . -19) (undo-tree-id23327 . -19) (undo-tree-id23328 . -19) (undo-tree-id23329 . -19) (undo-tree-id23330 . -19) (undo-tree-id23331 . -19) (undo-tree-id23332 . -19) (undo-tree-id23333 . -19) (undo-tree-id23334 . -19) (undo-tree-id23335 . -19) (undo-tree-id23336 . -7) (undo-tree-id23337 . -19) (undo-tree-id23338 . -19) 2929) ((2910 . 2929)) (26041 4036 727351 868000) 0 nil])
([nil nil ((#("L" 0 1 (face font-lock-type-face fontified t)) . -2933) (undo-tree-id23616 . -1) (undo-tree-id23617 . -1) (undo-tree-id23618 . -1) (undo-tree-id23619 . -1) (undo-tree-id23620 . -1) (undo-tree-id23621 . -1) (undo-tree-id23622 . -1) (#(":" 0 1 (fontified t)) . -2934) (undo-tree-id23623 . -1) (undo-tree-id23624 . -1) (undo-tree-id23625 . -1) 2935) nil (26041 4174 273606 562000) 0 nil])
nil
([nil nil ((2933 . 2937)) nil (26041 4174 273593 243000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -2934) (undo-tree-id23588 . -1) (undo-tree-id23589 . -1) (undo-tree-id23590 . -1) (undo-tree-id23591 . -1) (undo-tree-id23592 . -1) (undo-tree-id23593 . -1) (undo-tree-id23594 . -1) (undo-tree-id23595 . -1) (undo-tree-id23596 . -1) (undo-tree-id23597 . -1) (undo-tree-id23598 . -1) (undo-tree-id23599 . -1) (undo-tree-id23600 . -1) (undo-tree-id23601 . -1) (#("e" 0 1 (fontified t)) . -2935) (undo-tree-id23602 . -1) (undo-tree-id23603 . -1) (undo-tree-id23604 . -1) (undo-tree-id23605 . -1) (undo-tree-id23606 . -1) (undo-tree-id23607 . -1) (undo-tree-id23608 . -1) (undo-tree-id23609 . -1) (undo-tree-id23610 . -1) (#("t" 0 1 (fontified t)) . -2936) (undo-tree-id23611 . -1) (undo-tree-id23612 . -1) (undo-tree-id23613 . -1) (undo-tree-id23614 . -1) (undo-tree-id23615 . -1) 2937) nil (26041 4174 273590 108000) 0 nil])
([nil nil ((2934 . 2940)) nil (26041 4174 273554 618000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -2937) (undo-tree-id23563 . -1) (undo-tree-id23564 . -1) (undo-tree-id23565 . -1) (undo-tree-id23566 . -1) (undo-tree-id23567 . -1) (undo-tree-id23568 . -1) (undo-tree-id23569 . -1) (undo-tree-id23570 . -1) (undo-tree-id23571 . -1) (undo-tree-id23572 . -1) (undo-tree-id23573 . -1) (undo-tree-id23574 . -1) (undo-tree-id23575 . -1) (undo-tree-id23576 . -1) (#("c" 0 1 (fontified t)) . -2938) (undo-tree-id23577 . -1) (undo-tree-id23578 . -1) (undo-tree-id23579 . -1) (undo-tree-id23580 . -1) (undo-tree-id23581 . -1) (undo-tree-id23582 . -1) (undo-tree-id23583 . -1) (undo-tree-id23584 . -1) (#("e" 0 1 (fontified t)) . -2939) (undo-tree-id23585 . -1) (undo-tree-id23586 . -1) (undo-tree-id23587 . -1) 2940) nil (26041 4174 273551 590000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2951 2960 nil nil nil nil #s(yas--field 2 2962 2969 nil nil nil nil #s(yas--exit 2970 nil))) #s(yas--field 2 2962 2969 nil nil nil nil #s(yas--exit 2970 nil))) #s(yas--exit 2970 nil) 131 nil #s(yas--field 1 2951 2960 nil nil nil nil #s(yas--field 2 2962 2969 nil nil nil nil #s(yas--exit 2970 nil))) nil nil)) (2934 . 2970) (#("zbar_process_one(${1:processor}, ${2:timeout})$0" 0 48 (fontified nil)) . 2934) (2934 . 2982) (#("pro" 0 3 (fontified nil)) . 2934) (2934 . 2937) (#("zbar_process_one(…)" 0 19 (fontified nil)) . -2934) (2934 . 2953) (#("pro" 0 3 (fontified t)) . -2934) (undo-tree-id23540 . -3) (undo-tree-id23541 . -1) (undo-tree-id23542 . -1) (undo-tree-id23543 . -2) (undo-tree-id23544 . -2) (undo-tree-id23545 . -3) (undo-tree-id23546 . -3) (undo-tree-id23547 . -3) (undo-tree-id23548 . -3) (undo-tree-id23549 . -3) (undo-tree-id23550 . -3) (undo-tree-id23551 . -3) (undo-tree-id23552 . -3) (undo-tree-id23553 . -3) (undo-tree-id23554 . -3) (undo-tree-id23555 . -3) (undo-tree-id23556 . -3) (undo-tree-id23557 . -3) (undo-tree-id23558 . -3) (undo-tree-id23559 . -3) (undo-tree-id23560 . -3) (undo-tree-id23561 . -3) (undo-tree-id23562 . -3) 2937) nil (26041 4174 273517 664000) 0 nil])
([nil nil ((apply yas--snippet-revive 2934 2970 #s(yas--snippet nil (#s(yas--field 1 2951 2960 nil nil nil nil #s(yas--field 2 2962 2969 nil nil nil nil #s(yas--exit 2970 nil))) #s(yas--field 2 2962 2969 nil nil nil nil #s(yas--exit 2970 nil))) #s(yas--exit 2970 nil) 131 nil #s(yas--field 1 2951 2960 nil nil nil nil #s(yas--field 2 2962 2969 nil nil nil nil #s(yas--exit 2970 nil))) nil nil))) nil (26041 4174 273365 286000) 0 nil])
([nil nil ((#("timeout" 0 7 (fontified t)) . -2962) (undo-tree-id23532 . -7) (undo-tree-id23533 . -7) (undo-tree-id23534 . -7) (undo-tree-id23535 . -7) (undo-tree-id23536 . -7) (undo-tree-id23537 . -7) (undo-tree-id23538 . -7) (undo-tree-id23539 . -7) 2969) nil (26041 4174 273363 654000) 0 nil])
([nil nil ((2962 . 2966)) nil (26041 4174 273353 28000) 0 nil])
([nil nil ((2967 . 2968)) nil (26041 4174 273351 852000) 0 nil])
([nil nil ((#("1000" 0 4 (fontified t)) . -2962) (undo-tree-id23522 . -4) (undo-tree-id23523 . -1) (undo-tree-id23524 . -1) (undo-tree-id23525 . -2) (undo-tree-id23526 . -2) (undo-tree-id23527 . -3) (undo-tree-id23528 . -3) (undo-tree-id23529 . -4) (undo-tree-id23530 . -4) (undo-tree-id23531 . -4) 2966) nil (26041 4174 273349 860000) 0 nil])
([nil nil ((2962 . 2965)) nil (26041 4174 273334 337000) 0 nil])
([nil nil ((#("F" 0 1 (face font-lock-type-face fontified t)) . -2962) (undo-tree-id23491 . -1) (undo-tree-id23492 . -1) (undo-tree-id23493 . -1) (undo-tree-id23494 . -1) (undo-tree-id23495 . -1) (undo-tree-id23496 . -1) (undo-tree-id23497 . -1) (undo-tree-id23498 . -1) (undo-tree-id23499 . -1) (undo-tree-id23500 . -1) (undo-tree-id23501 . -1) (undo-tree-id23502 . -1) (undo-tree-id23503 . -1) (undo-tree-id23504 . -1) (undo-tree-id23505 . -1) (undo-tree-id23506 . -1) (undo-tree-id23507 . -1) (#("O" 0 1 (face font-lock-type-face fontified t)) . -2963) (undo-tree-id23508 . -1) (undo-tree-id23509 . -1) (undo-tree-id23510 . -1) (undo-tree-id23511 . -1) (undo-tree-id23512 . -1) (undo-tree-id23513 . -1) (undo-tree-id23514 . -1) (undo-tree-id23515 . -1) (undo-tree-id23516 . -1) (#("R" 0 1 (face font-lock-type-face fontified t)) . -2964) (undo-tree-id23517 . -1) (undo-tree-id23518 . -1) (undo-tree-id23519 . -1) (undo-tree-id23520 . -1) (undo-tree-id23521 . -1) 2965) nil (26041 4174 273330 818000) 0 nil])
([nil nil ((2962 . 2969)) nil (26041 4174 273292 29000) 0 nil])
([nil nil ((#("FO" 0 2 (face font-lock-type-face fontified t)) . -2967) (undo-tree-id23484 . -2) (undo-tree-id23485 . -1) (undo-tree-id23486 . -1) (undo-tree-id23487 . -2) (undo-tree-id23488 . -2) (undo-tree-id23489 . -2) (undo-tree-id23490 . -2) 2969) nil (26041 4174 273290 119000) 0 nil])
([nil nil ((#("ffi::" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t)) . -2962) (undo-tree-id23464 . -5) (undo-tree-id23465 . -1) (undo-tree-id23466 . -1) (undo-tree-id23467 . -2) (undo-tree-id23468 . -2) (undo-tree-id23469 . -3) (undo-tree-id23470 . -3) (undo-tree-id23471 . -4) (undo-tree-id23472 . -4) (undo-tree-id23473 . -4) (undo-tree-id23474 . -5) (undo-tree-id23475 . -5) (undo-tree-id23476 . -5) (undo-tree-id23477 . -5) (undo-tree-id23478 . -5) (undo-tree-id23479 . -5) (undo-tree-id23480 . -5) (undo-tree-id23481 . -5) (undo-tree-id23482 . -5) (undo-tree-id23483 . -5) 2967) nil (26041 4174 273278 414000) 0 nil])
([nil nil ((2962 . 2963)) nil (26041 4174 273246 288000) 0 nil])
([nil nil ((2965 . 2978) (t 26041 4174 307877 428000)) nil (26041 4202 284686 838000) 0 nil])
([nil nil ((2978 . 2986)) nil (26041 4202 284685 751000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -2984) (undo-tree-id23632 . -1) (#("a" 0 1 (fontified t)) . -2985) (undo-tree-id23633 . -1) 2986) nil (26041 4202 284684 423000) 0 nil])
([nil nil ((2984 . 2997)) nil (26041 4202 284681 155000) 0 nil])
([nil nil ((2997 . 2998)) nil (26041 4202 284680 228000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3010 3019 nil nil nil nil #s(yas--exit 3020 nil))) #s(yas--exit 3020 nil) 132 nil #s(yas--field 1 3010 3019 nil nil nil nil #s(yas--exit 3020 nil)) nil nil)) (2983 . 3020) (#("zbar_processor_get_results(${1:processor})$0" 0 44 (fontified nil)) . 2983) (2983 . 3027) (#("zbar_processorg" 0 15 (fontified nil)) . 2983) (2983 . 2998) (#("zbar_processor_get_results(…)" 0 29 (fontified nil)) . -2983) (2983 . 3012) (#("zbar_processorg" 0 15 (fontified t)) . -2983) (undo-tree-id23631 . -15) 2998) nil (26041 4202 284678 272000) 0 nil])
([nil nil ((apply yas--snippet-revive 2983 3020 #s(yas--snippet nil (#s(yas--field 1 3010 3019 nil nil nil nil #s(yas--exit 3020 nil))) #s(yas--exit 3020 nil) 132 nil #s(yas--field 1 3010 3019 nil nil nil nil #s(yas--exit 3020 nil)) nil nil))) nil (26041 4202 284674 66000) 0 nil])
([nil nil ((2978 . 2989)) nil (26041 4202 284672 875000) 0 nil])
([nil nil ((#("k" 0 1 (face font-lock-variable-name-face fontified t)) . -2988) (undo-tree-id23630 . -1) 2989) nil (26041 4202 284671 652000) 0 nil])
([nil nil ((3033 . 3034) (2988 . 2988) (2988 . 2991)) nil (26041 4202 284668 497000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2989) (undo-tree-id23626 . -1) (undo-tree-id23627 . -1) (#("=" 0 1 (fontified t)) . -2990) (undo-tree-id23628 . -1) (undo-tree-id23629 . -1) 2991) nil (26041 4202 284665 185000) 0 nil])
([nil nil ((2989 . 2991)) nil (26041 4202 284653 518000) 0 nil])
([nil nil ((2982 . 2986)) nil (26041 4202 284649 578000) 0 nil])
([nil nil ((3038 . 3051) (t 26041 4202 321212 481000)) nil (26041 4213 610305 817000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3516 . 3517) (nil fontified nil 3516 . 3517) (nil fontified nil 3515 . 3516) (nil fontified nil 3507 . 3515) (nil fontified nil 3505 . 3507) (nil fontified nil 3504 . 3505) (nil fontified nil 3498 . 3504) (nil fontified nil 3497 . 3498) (nil fontified nil 3492 . 3497) (nil fontified nil 3481 . 3492) (nil fontified nil 3479 . 3481) (nil fontified nil 3476 . 3479) (nil fontified nil 3473 . 3476) (nil fontified nil 3467 . 3473) (nil fontified nil 3463 . 3467) (nil fontified nil 3455 . 3463) (nil fontified nil 3454 . 3455) (nil fontified nil 3453 . 3454) (nil fontified nil 3452 . 3453) (nil fontified nil 3448 . 3452) (nil fontified nil 3440 . 3448) (nil fontified nil 3439 . 3440) (nil fontified nil 3438 . 3439) (nil fontified nil 3437 . 3438) (nil fontified nil 3431 . 3437) (nil fontified nil 3430 . 3431) (nil fontified nil 3429 . 3430) (nil fontified nil 3425 . 3429) (nil fontified nil 3424 . 3425) (nil fontified nil 3416 . 3424) (nil fontified nil 3414 . 3416) (nil fontified nil 3410 . 3414) (nil fontified nil 3406 . 3410) (nil fontified nil 3405 . 3406) (nil fontified nil 3402 . 3405) (nil fontified nil 3394 . 3402) (nil fontified nil 3393 . 3394) (nil fontified nil 3392 . 3393) (nil fontified nil 3391 . 3392) (nil fontified nil 3390 . 3391) (nil fontified nil 3384 . 3390) (nil fontified nil 3383 . 3384) (nil fontified nil 3371 . 3383) (nil fontified nil 3365 . 3371) (nil fontified nil 3363 . 3365) (nil fontified nil 3362 . 3363) (nil fontified nil 3361 . 3362) (nil fontified nil 3360 . 3361) (nil fontified nil 3354 . 3360) (nil fontified nil 3353 . 3354) (nil fontified nil 3341 . 3353) (nil fontified nil 3333 . 3341) (nil fontified nil 3332 . 3333) (nil fontified nil 3331 . 3332) (nil fontified nil 3330 . 3331) (nil fontified nil 3327 . 3330) (nil fontified nil 3326 . 3327) (nil fontified nil 3307 . 3326) (nil fontified nil 3306 . 3307) (nil fontified nil 3304 . 3306) (nil fontified nil 3301 . 3304) (nil fontified nil 3300 . 3301) (nil fontified nil 3292 . 3300) (nil fontified nil 3290 . 3292) (nil fontified nil 3286 . 3290) (nil fontified nil 3285 . 3286) (nil fontified nil 3278 . 3285) (nil fontified nil 3270 . 3278) (nil fontified nil 3269 . 3270) (nil fontified nil 3268 . 3269) (nil fontified nil 3267 . 3268) (nil fontified nil 3262 . 3267) (nil fontified nil 3249 . 3262) (nil fontified nil 3247 . 3249) (nil fontified nil 3238 . 3247) (nil fontified nil 3234 . 3238) (nil fontified nil 3230 . 3234) (nil fontified nil 3222 . 3230) (nil fontified nil 3221 . 3222) (nil fontified nil 3220 . 3221) (nil fontified nil 3215 . 3220) (nil fontified nil 3212 . 3215) (nil fontified nil 3208 . 3212) (nil fontified nil 3200 . 3208) (nil fontified nil 3198 . 3200) (nil fontified nil 3197 . 3198) (nil fontified nil 3191 . 3197) (nil fontified nil 3190 . 3191) (nil fontified nil 3170 . 3190) (nil fontified nil 3168 . 3170) (nil fontified nil 3165 . 3168) (nil fontified nil 3162 . 3165) (nil fontified nil 3158 . 3162) (nil fontified nil 3157 . 3158) (nil fontified nil 3154 . 3157) (nil fontified nil 3150 . 3154) (nil fontified nil 3142 . 3150) (nil fontified nil 3140 . 3142) (nil fontified nil 3139 . 3140) (nil fontified nil 3133 . 3139) (nil fontified nil 3132 . 3133) (nil fontified nil 3112 . 3132) (nil fontified nil 3110 . 3112) (nil fontified nil 3107 . 3110) (nil fontified nil 3104 . 3107) (nil fontified nil 3101 . 3104) (nil fontified nil 3100 . 3101) (nil fontified nil 3097 . 3100) (nil fontified nil 3093 . 3097) (nil fontified nil 3085 . 3093) (nil fontified nil 3084 . 3085) (nil fontified nil 3083 . 3084) (nil fontified nil 3082 . 3083) (nil fontified nil 3081 . 3082) (nil fontified nil 3080 . 3081) (nil fontified nil 3073 . 3080) (nil fontified nil 3072 . 3073) (nil fontified nil 3066 . 3072) (nil fontified nil 3064 . 3066) (nil fontified nil 3059 . 3064) (nil fontified nil 3051 . 3059) (3051 . 3517)) nil (26041 4213 610300 369000) 0 nil])
([nil nil ((3547 . 3551) (3483 . 3499) (#("            " 0 8 (fontified t) 8 12 (fontified t)) . 3483) (3464 . 3480) (#("            " 0 8 (fontified t) 8 12 (fontified t)) . 3464) (3430 . 3434) (3379 . 3403) (#("                    " 0 2 (fontified t) 2 8 (fontified t) 8 20 (fontified t)) . 3379) (3345 . 3369) (#("                    " 0 8 (fontified t) 8 20 (fontified t)) . 3345) (3294 . 3298) (3242 . 3246) (3200 . 3216) (#("            " 0 8 (fontified t) 8 12 (fontified t)) . 3200) (undo-tree-id23634 . -3) (3138 . 3154) (#("            " 0 8 (fontified t) 8 12 (fontified t)) . 3138) (undo-tree-id23635 . -2) (3077 . 3093) (#("            " 0 8 (fontified t) 8 12 (fontified t)) . 3077) (#("        " 0 8 (fontified t)) . -3051) 2907) nil (26041 4213 610280 495000) 0 nil])
([nil nil ((2992 . 2997) (t 26041 4213 634546 507000)) nil (26041 4351 223035 157000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2997) (undo-tree-id23681 . -1) (undo-tree-id23682 . -1) 2998) nil (26041 4351 223034 222000) 0 nil])
([nil nil ((3042 . 3055)) nil (26041 4351 223031 937000) 0 nil])
([nil nil ((3055 . 3060)) nil (26041 4351 223031 323000) 0 nil])
([nil nil ((#("L" 0 1 (fontified t)) . -3058) (undo-tree-id23679 . -1) (#(":" 0 1 (fontified t)) . -3059) (undo-tree-id23680 . -1) 3060) nil (26041 4351 223030 482000) 0 nil])
([nil nil ((3058 . 3066)) nil (26041 4351 223028 57000) 0 nil])
([nil nil ((3066 . 3070)) nil (26041 4351 223027 464000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3089 3099 nil nil nil t #s(yas--exit 3100 nil))) #s(yas--exit 3100 nil) 133 nil #s(yas--field 1 3089 3099 nil nil nil t #s(yas--exit 3100 nil)) nil nil)) (3060 . 3097) (#("zbar_symbol_set_first_symbol(${1:symbols})$0" 0 44 (fontified nil)) . 3060) (3060 . 3104) (#("symbol_set" 0 10 (fontified nil)) . 3060) (3060 . 3070) (#("zbar_symbol_set_first_symbol(…)" 0 31 (fontified nil)) . -3060) (3060 . 3091) (#("symbol_set" 0 10 (fontified t)) . -3060) (undo-tree-id23678 . -10) 3070) nil (26041 4351 223026 328000) 0 nil])
([nil nil ((#("symbols" 0 7 (fontified nil)) . 3090) (3089 . 3090)) nil (26041 4351 223023 668000) 0 nil])
([nil nil ((3089 . 3099) (#("s" 0 1 (fontified nil)) . 3089) (3089 . 3090) (#("symbol_set" 0 10 (fontified nil)) . -3089) (3089 . 3099) (#("s" 0 1 (fontified t)) . -3089) (undo-tree-id23676 . -1) (undo-tree-id23677 . -1) 3090) nil (26041 4351 223022 356000) 0 nil])
([nil nil ((apply yas--snippet-revive 3060 3100 #s(yas--snippet nil (#s(yas--field 1 3089 3099 nil nil nil t #s(yas--exit 3100 nil))) #s(yas--exit 3100 nil) 133 nil #s(yas--field 1 3089 3099 nil nil nil t #s(yas--exit 3100 nil)) nil nil))) nil (26041 4351 223019 484000) 0 nil])
([nil nil ((3100 . 3101)) nil (26041 4351 223018 896000) 0 nil])
([nil nil ((3055 . 3070)) nil (26041 4351 223018 210000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -3068) (undo-tree-id23665 . -1) (undo-tree-id23666 . -1) (undo-tree-id23667 . -1) (undo-tree-id23668 . -1) (undo-tree-id23669 . -1) (undo-tree-id23670 . -1) (undo-tree-id23671 . -1) (undo-tree-id23672 . -1) (#("l" 0 1 (face font-lock-constant-face fontified t)) . -3069) (undo-tree-id23673 . -1) (undo-tree-id23674 . -1) (undo-tree-id23675 . -1) 3070) nil (26041 4351 223017 7000) 0 nil])
([nil nil ((3068 . 3072)) nil (26041 4351 223008 456000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -3071) (undo-tree-id23654 . -1) (undo-tree-id23655 . -1) (undo-tree-id23656 . -1) (undo-tree-id23657 . -1) (undo-tree-id23658 . -1) (undo-tree-id23659 . -1) (undo-tree-id23660 . -1) (undo-tree-id23661 . -1) (undo-tree-id23662 . -1) (undo-tree-id23663 . -1) (undo-tree-id23664 . -1) 3072) nil (26041 4351 223007 327000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -3070) (undo-tree-id23639 . -1) (undo-tree-id23640 . -1) (undo-tree-id23641 . -1) (undo-tree-id23642 . -1) (undo-tree-id23643 . -1) (undo-tree-id23644 . -1) (undo-tree-id23645 . -1) (undo-tree-id23646 . -1) (undo-tree-id23647 . -1) (undo-tree-id23648 . -1) (undo-tree-id23649 . -1) (undo-tree-id23650 . -1) (undo-tree-id23651 . -1) (undo-tree-id23652 . -1) (undo-tree-id23653 . -1) 3071) nil (26041 4351 222998 423000) 0 nil])
([nil nil ((3070 . 3072)) nil (26041 4351 222986 809000) 0 nil])
([nil nil ((#("mut " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -2982) (undo-tree-id23636 . -4) (undo-tree-id23637 . -4) (undo-tree-id23638 . -4) 2986) nil (26041 4351 222983 329000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -2962) (undo-tree-id23683 . -1) (undo-tree-id23684 . -1) (undo-tree-id23685 . -1) (undo-tree-id23686 . -1) (undo-tree-id23687 . -1) (undo-tree-id23688 . -1) 2963 (t 26041 4351 257888 283000)) nil (26041 4373 425633 417000) 0 nil])
([nil nil ((2962 . 2965)) nil (26041 4373 425618 162000) 0 nil])
([nil nil ((#("set);" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-4-face) fontified t) 4 5 (fontified t)) . -3111) (undo-tree-id23944 . -5) (undo-tree-id23945 . -5) (undo-tree-id23946 . -5) (undo-tree-id23947 . -5) (undo-tree-id23948 . -5) (undo-tree-id23949 . -5) (undo-tree-id23950 . -5) (undo-tree-id23951 . -5) (undo-tree-id23952 . -5) (undo-tree-id23953 . -5) (undo-tree-id23954 . -5) (undo-tree-id23955 . -5) 3116 (t 26041 4373 494556 316000)) nil (26041 4427 143546 604000) 0 nil])
([nil nil ((#("symbol_" 0 7 (fontified t)) . -3104) (undo-tree-id23930 . -7) (undo-tree-id23931 . -7) (undo-tree-id23932 . -7) (undo-tree-id23933 . -7) (undo-tree-id23934 . -7) (undo-tree-id23935 . -7) (undo-tree-id23936 . -7) (undo-tree-id23937 . -7) (undo-tree-id23938 . -7) (undo-tree-id23939 . -7) (undo-tree-id23940 . -7) (undo-tree-id23941 . -7) (undo-tree-id23942 . -7) (undo-tree-id23943 . -7) 3111) nil (26041 4427 143536 640000) 0 nil])
([nil nil ((#("symbol(" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-4-face) fontified t)) . -3097) (undo-tree-id23913 . -7) (undo-tree-id23914 . -7) (undo-tree-id23915 . -7) (undo-tree-id23916 . -7) (undo-tree-id23917 . -7) (undo-tree-id23918 . -7) (undo-tree-id23919 . -7) (undo-tree-id23920 . -7) (undo-tree-id23921 . -7) (undo-tree-id23922 . -7) (undo-tree-id23923 . -7) (undo-tree-id23924 . -7) (undo-tree-id23925 . -7) (undo-tree-id23926 . -7) (undo-tree-id23927 . -7) (undo-tree-id23928 . -7) (undo-tree-id23929 . -7) 3104) nil (26041 4427 143427 751000) 0 nil])
([nil nil ((#("first_" 0 6 (fontified t)) . -3091) (undo-tree-id23894 . -6) (undo-tree-id23895 . -6) (undo-tree-id23896 . -6) (undo-tree-id23897 . -6) (undo-tree-id23898 . -6) (undo-tree-id23899 . -6) (undo-tree-id23900 . -6) (undo-tree-id23901 . -6) (undo-tree-id23902 . -6) (undo-tree-id23903 . -6) (undo-tree-id23904 . -6) (undo-tree-id23905 . -6) (undo-tree-id23906 . -6) (undo-tree-id23907 . -6) (undo-tree-id23908 . -6) (undo-tree-id23909 . -6) (undo-tree-id23910 . -6) (undo-tree-id23911 . -6) (undo-tree-id23912 . -6) 3097) nil (26041 4427 142287 992000) 0 nil])
([nil nil ((#("set_" 0 4 (fontified t)) . -3087) (undo-tree-id23870 . -4) (undo-tree-id23871 . -4) (undo-tree-id23872 . -4) (undo-tree-id23873 . -4) (undo-tree-id23874 . -4) (undo-tree-id23875 . -4) (undo-tree-id23876 . -4) (undo-tree-id23877 . -4) (undo-tree-id23878 . -4) (undo-tree-id23879 . -4) (undo-tree-id23880 . -4) (undo-tree-id23881 . -4) (undo-tree-id23882 . -4) (undo-tree-id23883 . -4) (undo-tree-id23884 . -4) (undo-tree-id23885 . -4) (undo-tree-id23886 . -4) (undo-tree-id23887 . -4) (undo-tree-id23888 . -4) (undo-tree-id23889 . -4) (undo-tree-id23890 . -4) (undo-tree-id23891 . -4) (undo-tree-id23892 . -4) (undo-tree-id23893 . -4) 3091) nil (26041 4427 142272 511000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -3086) (undo-tree-id23837 . -1) (undo-tree-id23838 . -1) (undo-tree-id23839 . -1) (undo-tree-id23840 . -1) (undo-tree-id23841 . -1) (undo-tree-id23842 . -1) (undo-tree-id23843 . -1) (undo-tree-id23844 . -1) (undo-tree-id23845 . -1) (undo-tree-id23846 . -1) (undo-tree-id23847 . -1) (undo-tree-id23848 . -1) (undo-tree-id23849 . -1) (undo-tree-id23850 . -1) (undo-tree-id23851 . -1) (undo-tree-id23852 . -1) (undo-tree-id23853 . -1) (undo-tree-id23854 . -1) (undo-tree-id23855 . -1) (undo-tree-id23856 . -1) (undo-tree-id23857 . -1) (undo-tree-id23858 . -1) (undo-tree-id23859 . -1) (undo-tree-id23860 . -1) (undo-tree-id23861 . -1) (undo-tree-id23862 . -1) (undo-tree-id23863 . -1) (undo-tree-id23864 . -1) (undo-tree-id23865 . -1) (undo-tree-id23866 . -1) (undo-tree-id23867 . -1) (undo-tree-id23868 . -1) (undo-tree-id23869 . -1) 3087) nil (26041 4427 142254 387000) 0 nil])
([nil nil ((3086 . 3087)) nil (26041 4427 142231 291000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -3086) (undo-tree-id23831 . -1) (undo-tree-id23832 . -1) (undo-tree-id23833 . -1) (undo-tree-id23834 . -1) (undo-tree-id23835 . -1) (undo-tree-id23836 . -1) 3087) nil (26041 4427 142230 264000) 0 nil])
([nil nil ((3086 . 3090)) nil (26041 4427 142225 341000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -3087) (undo-tree-id23794 . -1) (undo-tree-id23795 . -1) (undo-tree-id23796 . -1) (undo-tree-id23797 . -1) (undo-tree-id23798 . -1) (undo-tree-id23799 . -1) (undo-tree-id23800 . -1) (undo-tree-id23801 . -1) (undo-tree-id23802 . -1) (undo-tree-id23803 . -1) (undo-tree-id23804 . -1) (undo-tree-id23805 . -1) (undo-tree-id23806 . -1) (undo-tree-id23807 . -1) (undo-tree-id23808 . -1) (undo-tree-id23809 . -1) (undo-tree-id23810 . -1) (undo-tree-id23811 . -1) (undo-tree-id23812 . -1) (#("e" 0 1 (fontified t)) . -3088) (undo-tree-id23813 . -1) (undo-tree-id23814 . -1) (undo-tree-id23815 . -1) (undo-tree-id23816 . -1) (undo-tree-id23817 . -1) (undo-tree-id23818 . -1) (undo-tree-id23819 . -1) (undo-tree-id23820 . -1) (undo-tree-id23821 . -1) (undo-tree-id23822 . -1) (undo-tree-id23823 . -1) (undo-tree-id23824 . -1) (undo-tree-id23825 . -1) (#("t" 0 1 (fontified t)) . -3089) (undo-tree-id23826 . -1) (undo-tree-id23827 . -1) (undo-tree-id23828 . -1) (undo-tree-id23829 . -1) (undo-tree-id23830 . -1) 3090) nil (26041 4427 142223 20000) 0 nil])
([nil nil ((3087 . 3090)) nil (26041 4427 142196 592000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3100 3110 nil nil nil t #s(yas--exit 3111 nil))) #s(yas--exit 3111 nil) 134 nil #s(yas--field 1 3100 3110 nil nil nil t #s(yas--exit 3111 nil)) nil nil)) (3075 . 3108) (#("zbar_symbol_set_get_size(${1:symbols})$0" 0 40 (fontified nil)) . 3075) (3075 . 3115) (#("zbar_symbol_get" 0 15 (fontified nil)) . 3075) (3075 . 3090) (#("zbar_symbol_set_get_size(…)" 0 27 (fontified nil)) . -3075) (3075 . 3102) (#("zbar_symbol_get" 0 15 (fontified t)) . -3075) (undo-tree-id23717 . -11) (undo-tree-id23718 . -15) (undo-tree-id23719 . -11) (undo-tree-id23720 . -11) (undo-tree-id23721 . -11) (undo-tree-id23722 . -11) (undo-tree-id23723 . -11) (undo-tree-id23724 . -11) (undo-tree-id23725 . -11) (undo-tree-id23726 . -11) (undo-tree-id23727 . -11) (undo-tree-id23728 . -11) (undo-tree-id23729 . -11) (undo-tree-id23730 . -11) (undo-tree-id23731 . -11) (undo-tree-id23732 . -11) (undo-tree-id23733 . -11) (undo-tree-id23734 . -11) (undo-tree-id23735 . -11) (undo-tree-id23736 . -11) (undo-tree-id23737 . -11) (undo-tree-id23738 . -11) (undo-tree-id23739 . -11) (undo-tree-id23740 . -11) (undo-tree-id23741 . -11) (undo-tree-id23742 . -11) (undo-tree-id23743 . -11) (undo-tree-id23744 . -11) (undo-tree-id23745 . -11) (undo-tree-id23746 . -11) (undo-tree-id23747 . -11) (undo-tree-id23748 . -11) (undo-tree-id23749 . -11) (undo-tree-id23750 . -11) (undo-tree-id23751 . -11) (undo-tree-id23752 . -11) (undo-tree-id23753 . -11) (undo-tree-id23754 . -11) (undo-tree-id23755 . -11) (undo-tree-id23756 . -11) (undo-tree-id23757 . -11) (undo-tree-id23758 . -11) (undo-tree-id23759 . -12) (undo-tree-id23760 . -12) (undo-tree-id23761 . -12) (undo-tree-id23762 . -12) (undo-tree-id23763 . -12) (undo-tree-id23764 . -12) (undo-tree-id23765 . -12) (undo-tree-id23766 . -12) (undo-tree-id23767 . -12) (undo-tree-id23768 . -12) (undo-tree-id23769 . -12) (undo-tree-id23770 . -12) (undo-tree-id23771 . -12) (undo-tree-id23772 . -12) (undo-tree-id23773 . -12) (undo-tree-id23774 . -12) (undo-tree-id23775 . -12) (undo-tree-id23776 . -12) (undo-tree-id23777 . -12) (undo-tree-id23778 . -12) (undo-tree-id23779 . -12) (undo-tree-id23780 . -12) (undo-tree-id23781 . -12) (undo-tree-id23782 . -13) (undo-tree-id23783 . -13) (undo-tree-id23784 . -14) (undo-tree-id23785 . -14) (undo-tree-id23786 . -14) (undo-tree-id23787 . -15) (undo-tree-id23788 . -15) (undo-tree-id23789 . -15) (undo-tree-id23790 . -15) (undo-tree-id23791 . -15) (undo-tree-id23792 . -15) (undo-tree-id23793 . -15) 3090) nil (26041 4427 142192 638000) 0 nil])
([nil nil ((#("symbols" 0 7 (fontified nil)) . 3101) (undo-tree-id23716 . -7) (3100 . 3101)) nil (26041 4427 141686 884000) 0 nil])
([nil nil ((3100 . 3110) (#("s" 0 1 (fontified nil)) . 3100) (undo-tree-id23705 . -1) (3100 . 3101) (#("symbol_set" 0 10 (fontified nil)) . -3100) (undo-tree-id23706 . -10) (3100 . 3110) (#("s" 0 1 (fontified t)) . -3100) (undo-tree-id23707 . -1) (undo-tree-id23708 . -1) (undo-tree-id23709 . -1) (undo-tree-id23710 . -1) (undo-tree-id23711 . -1) (undo-tree-id23712 . -1) (undo-tree-id23713 . -1) (undo-tree-id23714 . -1) (undo-tree-id23715 . -1) 3101) nil (26041 4427 141684 394000) 0 nil])
([nil nil ((apply yas--snippet-revive 3075 3111 #s(yas--snippet nil (#s(yas--field 1 3100 3110 nil nil nil t #s(yas--exit 3111 nil))) #s(yas--exit 3111 nil) 134 nil #s(yas--field 1 3100 3110 nil nil nil t #s(yas--exit 3111 nil)) nil nil))) nil (26041 4427 141674 345000) 0 nil])
([nil nil ((3111 . 3112)) nil (26041 4427 141673 611000) 0 nil])
([nil nil ((#("symbol" 0 6 (face font-lock-variable-name-face fontified t)) . -3061) (undo-tree-id23703 . -6) (undo-tree-id23704 . -6) 3067) nil (26041 4427 141671 829000) 0 nil])
([nil nil ((3061 . 3062)) nil (26041 4427 141666 638000) 0 nil])
([nil nil ((#("mut " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -3057) (undo-tree-id23689 . -4) (undo-tree-id23690 . -4) (undo-tree-id23691 . -4) (undo-tree-id23692 . -4) (undo-tree-id23693 . -4) (undo-tree-id23694 . -4) (undo-tree-id23695 . -4) (undo-tree-id23696 . -4) (undo-tree-id23697 . -4) (undo-tree-id23698 . -4) (undo-tree-id23699 . -4) (undo-tree-id23700 . -4) (undo-tree-id23701 . -4) (undo-tree-id23702 . -4) 3061) nil (26041 4427 141660 690000) 0 nil])
([nil nil ((#("           while !symbol.is_null() {
                let typ = ffi::zbar_symbol_get_type(symbol);
                let data = ffi::zbar_symbol_get_data(symbol);
                println!(
                    \"decoded {} symbol \\\"{:?}\\\"\\n\",
                    CStr::from_ptr(ffi::zbar_get_symbol_name(typ))
                        .to_str()
                        .unwrap(),
                    CStr::from_ptr(data).to_str()
                );
                symbol = ffi::zbar_symbol_next(symbol);
            }" 0 11 (fontified t) 11 16 (face font-lock-keyword-face fontified t) 16 18 (fontified t) 18 24 (fontified t) 24 25 (fontified t) 25 32 (fontified t) 32 33 (face (rainbow-delimiters-depth-4-face) fontified t) 33 34 (face (rainbow-delimiters-depth-4-face) fontified t) 34 35 (fontified t) 35 36 (face (rainbow-delimiters-depth-4-face) fontified t) 36 53 (fontified t) 53 56 (face font-lock-keyword-face fontified t) 56 57 (fontified t) 57 60 (face font-lock-variable-name-face fontified t) 60 63 (fontified t) 63 66 (face font-lock-constant-face fontified t) 66 68 (fontified t) 68 88 (fontified t) 88 89 (face (rainbow-delimiters-depth-5-face) fontified t) 89 95 (fontified t) 95 96 (face (rainbow-delimiters-depth-5-face) fontified t) 96 114 (fontified t) 114 117 (face font-lock-keyword-face fontified t) 117 118 (fontified t) 118 122 (face font-lock-variable-name-face fontified t) 122 125 (fontified t) 125 128 (face font-lock-constant-face fontified t) 128 130 (fontified t) 130 150 (fontified t) 150 151 (face (rainbow-delimiters-depth-5-face) fontified t) 151 157 (fontified t) 157 158 (face (rainbow-delimiters-depth-5-face) fontified t) 158 176 (fontified t) 176 179 (face rust-builtin-formatting-macro fontified t) 179 184 (face rust-builtin-formatting-macro fontified t) 184 185 (face (rainbow-delimiters-depth-5-face) fontified t) 185 186 (fontified t) 186 194 (fontified t) 194 198 (fontified t) 198 206 (fontified t) 206 215 (face font-lock-string-face fontified t) 215 217 (face rust-string-interpolation fontified t) 217 230 (face font-lock-string-face fontified t) 230 235 (face font-lock-string-face fontified t) 235 236 (face font-lock-string-face fontified t rear-nonsticky t) 236 237 (fontified t) 237 238 (fontified t) 238 246 (fontified t) 246 253 (fontified t) 253 258 (fontified t) 258 262 (face font-lock-type-face fontified t) 262 264 (fontified t) 264 272 (fontified t) 272 273 (face (rainbow-delimiters-depth-6-face) fontified t) 273 276 (face font-lock-constant-face fontified t) 276 278 (fontified t) 278 279 (fontified t) 279 298 (fontified t) 298 299 (face (rainbow-delimiters-depth-7-face) fontified t) 299 302 (fontified t) 302 303 (face (rainbow-delimiters-depth-7-face) fontified t) 303 304 (face (rainbow-delimiters-depth-6-face) fontified t) 304 329 (fontified t) 329 330 (fontified t) 330 336 (fontified t) 336 337 (face (rainbow-delimiters-depth-6-face) fontified t) 337 338 (face (rainbow-delimiters-depth-6-face) fontified t) 338 363 (fontified t) 363 364 (fontified t) 364 370 (fontified t) 370 371 (face (rainbow-delimiters-depth-6-face) fontified t) 371 372 (face (rainbow-delimiters-depth-6-face) fontified t) 372 373 (fontified t) 373 374 (fontified t) 374 382 (fontified t) 382 385 (fontified t) 385 386 (fontified t) 386 394 (fontified t) 394 398 (face font-lock-type-face fontified t) 398 400 (fontified t) 400 408 (fontified t) 408 409 (face (rainbow-delimiters-depth-6-face) fontified t) 409 413 (fontified t) 413 414 (face (rainbow-delimiters-depth-6-face) fontified t) 414 415 (fontified t) 415 421 (fontified t) 421 422 (face (rainbow-delimiters-depth-6-face) fontified t) 422 423 (face (rainbow-delimiters-depth-6-face) fontified t) 423 440 (fontified t) 440 441 (face (rainbow-delimiters-depth-5-face) fontified t) 441 442 (fontified t) 442 459 (fontified t) 459 465 (fontified t) 465 468 (fontified t) 468 471 (face font-lock-constant-face fontified t) 471 473 (fontified t) 473 484 (fontified t) 484 489 (fontified t) 489 490 (face (rainbow-delimiters-depth-5-face) fontified t) 490 496 (fontified t) 496 497 (face (rainbow-delimiters-depth-5-face) fontified t) 497 499 (fontified t) 499 511 (fontified t) 511 512 (face (rainbow-delimiters-depth-4-face) fontified t)) . 3105) (undo-tree-id23990 . -512) (undo-tree-id23991 . -11) (undo-tree-id23992 . -255) (undo-tree-id23993 . -91) (undo-tree-id23994 . -512) (undo-tree-id23995 . -512) (undo-tree-id23996 . -512) (undo-tree-id23997 . -458) (undo-tree-id23998 . -456) (undo-tree-id23999 . -436) (undo-tree-id24000 . -385) (undo-tree-id24001 . -349) (undo-tree-id24002 . -314) (undo-tree-id24003 . -313) (undo-tree-id24004 . -245) (undo-tree-id24005 . -166) (undo-tree-id24006 . -103) (undo-tree-id24007 . -3) (undo-tree-id24008 . -2) (undo-tree-id24009 . -1) (undo-tree-id24010 . -512) (t 26041 4427 177892 945000)) nil (26041 4433 793214 253000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -3104) (undo-tree-id23956 . -1) (undo-tree-id23957 . -1) (undo-tree-id23958 . -1) (undo-tree-id23959 . -1) (undo-tree-id23960 . -1) (undo-tree-id23961 . -1) (undo-tree-id23962 . -1) (undo-tree-id23963 . -1) (undo-tree-id23964 . -1) (undo-tree-id23965 . -1) (undo-tree-id23966 . -1) (undo-tree-id23967 . -1) (undo-tree-id23968 . -1) (undo-tree-id23969 . -1) (undo-tree-id23970 . -1) (undo-tree-id23971 . -1) (undo-tree-id23972 . -1) (undo-tree-id23973 . -1) (undo-tree-id23974 . -1) (undo-tree-id23975 . -1) (undo-tree-id23976 . -1) (undo-tree-id23977 . -1) (undo-tree-id23978 . -1) (undo-tree-id23979 . -1) (undo-tree-id23980 . -1) (undo-tree-id23981 . -1) (undo-tree-id23982 . -1) (undo-tree-id23983 . -1) (undo-tree-id23984 . -1) (undo-tree-id23985 . -1) (undo-tree-id23986 . -1) (undo-tree-id23987 . -1) (undo-tree-id23988 . -1) (undo-tree-id23989 . -1) 3105) nil (26041 4433 793195 161000) 0 nil])
([nil nil ((3104 . 3116)) nil (26041 4433 793160 108000) 0 nil])
([nil nil ((#("            
" 0 12 (fontified t) 12 13 (fontified t rear-nonsticky t)) . 3104) (undo-tree-id24052 . -12) (undo-tree-id24053 . -12) (undo-tree-id24054 . -12) (undo-tree-id24055 . -12) (undo-tree-id24056 . -12) (undo-tree-id24057 . -12) (undo-tree-id24058 . -12) (undo-tree-id24059 . -12) (undo-tree-id24060 . -12) (undo-tree-id24061 . -12) (undo-tree-id24062 . -12) (undo-tree-id24063 . -13) (t 26041 4433 831226 680000)) nil (26041 4524 911845 36000) 0 nil])
([nil nil ((3104 . 3116)) nil (26041 4524 911836 17000) 0 nil])
([nil nil ((3116 . 3117)) nil (26041 4524 911835 303000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -3116) (undo-tree-id24049 . -1) (undo-tree-id24050 . -1) (undo-tree-id24051 . -1) 3117) nil (26041 4524 911834 400000) 0 nil])
([nil nil ((3116 . 3120)) nil (26041 4524 911831 448000) 0 nil])
([nil nil ((apply yas--snippet-revive 3116 3125 #s(yas--snippet nil nil #s(yas--exit 3124 nil) 135 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 3124 nil) 135 nil nil nil nil)) (3116 . 3125) (#("eprint!($0)" 0 11 (fontified nil)) . 3116) (3116 . 3127) (#("prin" 0 4 (fontified nil)) . 3116) (3116 . 3120) (#("eprint!(…)" 0 10 (fontified nil)) . -3116) (3116 . 3126) (#("prin" 0 4 (fontified t)) . -3116) (undo-tree-id24036 . -4) (undo-tree-id24037 . -1) (undo-tree-id24038 . -1) (undo-tree-id24039 . -2) (undo-tree-id24040 . -2) (undo-tree-id24041 . -2) (undo-tree-id24042 . -3) (undo-tree-id24043 . -3) (undo-tree-id24044 . -3) (undo-tree-id24045 . -4) (undo-tree-id24046 . -4) (undo-tree-id24047 . -4) (undo-tree-id24048 . -4) 3120) nil (26041 4524 911829 605000) 0 nil])
([nil nil ((#("eprint!()" 0 7 (face rust-builtin-formatting-macro fontified t) 7 8 (face (rainbow-delimiters-depth-4-face) fontified t) 8 9 (face (rainbow-delimiters-depth-4-face) fontified t)) . 3116) (undo-tree-id24026 . -8) (undo-tree-id24027 . -8) (undo-tree-id24028 . -8) (undo-tree-id24029 . -8) (undo-tree-id24030 . -8) (undo-tree-id24031 . -8) (undo-tree-id24032 . -8) (undo-tree-id24033 . -8) (undo-tree-id24034 . -8) (undo-tree-id24035 . -9)) nil (26041 4524 911818 209000) 0 nil])
([nil nil ((3116 . 3121)) nil (26041 4524 911810 80000) 0 nil])
([nil nil ((apply yas--snippet-revive 3116 3126 #s(yas--snippet nil nil #s(yas--exit 3125 nil) 136 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 3125 nil) 136 nil nil nil nil)) (3116 . 3126) (#("println!($0)" 0 12 (fontified nil)) . 3116) (3116 . 3128) (#("print" 0 5 (fontified nil)) . 3116) (3116 . 3121) (#("println!(…)" 0 11 (fontified nil)) . -3116) (3116 . 3127) (#("print" 0 5 (fontified t)) . -3116) (undo-tree-id24011 . -5) (undo-tree-id24012 . -1) (undo-tree-id24013 . -1) (undo-tree-id24014 . -2) (undo-tree-id24015 . -2) (undo-tree-id24016 . -3) (undo-tree-id24017 . -3) (undo-tree-id24018 . -3) (undo-tree-id24019 . -4) (undo-tree-id24020 . -4) (undo-tree-id24021 . -5) (undo-tree-id24022 . -5) (undo-tree-id24023 . -5) (undo-tree-id24024 . -5) (undo-tree-id24025 . -5) 3121) nil (26041 4524 911807 152000) 0 nil])
([nil nil ((3125 . 3127)) nil (26041 4524 911789 944000) 0 nil])
([nil nil ((3126 . 3128)) nil (26041 4524 911789 149000) 0 nil])
([nil nil ((3129 . 3132)) nil (26041 4524 911787 653000) 0 nil])
([nil nil ((3133 . 3134)) nil (26041 4524 911783 319000) 0 nil])
([nil nil ((3126 . 3143) (t 26041 4524 947898 941000)) nil (26041 4534 512658 958000) 0 nil])
([nil nil ((#("loop {" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-3-face) fontified t)) . 2910) (undo-tree-id24145 . -6) (undo-tree-id24146 . -6) (undo-tree-id24147 . -6) (undo-tree-id24148 . -6) (undo-tree-id24149 . -6) (undo-tree-id24150 . -6) (undo-tree-id24151 . -6) (t 26041 4534 581232 866000)) nil (26041 4562 307039 437000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2910) (undo-tree-id24144 . -1)) nil (26041 4562 307033 158000) 0 nil])
([nil nil ((#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . 3153) (undo-tree-id24143 . -1)) nil (26041 4562 307031 637000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3085) (undo-tree-id24142 . -4) (#("    " 0 4 (fontified t)) . -3026) (#("    " 0 4 (fontified t)) . -2957) (#("            " 0 12 (fontified t)) . -2910) 2901) nil (26041 4562 307029 820000) 0 nil])
([nil nil ((3122 . 3130) (#("        " 0 8 (fontified nil)) . 3121) (undo-tree-id24116 . -8) (undo-tree-id24117 . -8) (undo-tree-id24118 . -8) (undo-tree-id24119 . -8) (undo-tree-id24120 . -8) (undo-tree-id24121 . -8) (undo-tree-id24122 . -8) (undo-tree-id24123 . -8) (undo-tree-id24124 . -8) (undo-tree-id24125 . -8) (undo-tree-id24126 . -8) (undo-tree-id24127 . -8) (undo-tree-id24128 . -8) (undo-tree-id24129 . -8) (undo-tree-id24130 . -8) (undo-tree-id24131 . -8) (undo-tree-id24132 . -8) (undo-tree-id24133 . -8) (undo-tree-id24134 . -8) (undo-tree-id24135 . -8) (undo-tree-id24136 . -8) (undo-tree-id24137 . -8) (undo-tree-id24138 . -8) (undo-tree-id24139 . -8) (undo-tree-id24140 . -8) (undo-tree-id24141 . -8) (3129 . 3130)) nil (26041 4562 307026 513000) 0 nil])
([nil nil ((3130 . 3132)) nil (26041 4562 307006 795000) 0 nil])
([nil nil ((#("F" 0 1 (face font-lock-type-face fontified t)) . -3130) (undo-tree-id24102 . -1) (undo-tree-id24103 . -1) (undo-tree-id24104 . -1) (undo-tree-id24105 . -1) (undo-tree-id24106 . -1) (undo-tree-id24107 . -1) (undo-tree-id24108 . -1) (undo-tree-id24109 . -1) (undo-tree-id24110 . -1) (#("F" 0 1 (face font-lock-type-face fontified t)) . -3131) (undo-tree-id24111 . -1) (undo-tree-id24112 . -1) (undo-tree-id24113 . -1) (undo-tree-id24114 . -1) (undo-tree-id24115 . -1) 3132) nil (26041 4562 307005 334000) 0 nil])
([nil nil ((3130 . 3139)) nil (26041 4562 306994 12000) 0 nil])
([nil nil ((3139 . 3149)) nil (26041 4562 306993 304000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3158 3167 nil nil nil nil #s(yas--exit 3168 nil))) #s(yas--exit 3168 nil) 137 nil #s(yas--field 1 3158 3167 nil nil nil nil #s(yas--exit 3168 nil)) nil nil)) (3135 . 3168) (#("zbar_processor_destroy(${1:processor})$0" 0 40 (fontified nil)) . 3135) (3135 . 3175) (#("zbar_processor" 0 14 (fontified nil)) . 3135) (3135 . 3149) (#("zbar_processor_destroy(…)" 0 25 (fontified nil)) . -3135) (3135 . 3160) (#("zbar_processor" 0 14 (fontified t)) . -3135) (undo-tree-id24064 . -14) (undo-tree-id24065 . -1) (undo-tree-id24066 . -1) (undo-tree-id24067 . -2) (undo-tree-id24068 . -2) (undo-tree-id24069 . -2) (undo-tree-id24070 . -3) (undo-tree-id24071 . -3) (undo-tree-id24072 . -4) (undo-tree-id24073 . -4) (undo-tree-id24074 . -5) (undo-tree-id24075 . -5) (undo-tree-id24076 . -6) (undo-tree-id24077 . -6) (undo-tree-id24078 . -6) (undo-tree-id24079 . -7) (undo-tree-id24080 . -7) (undo-tree-id24081 . -7) (undo-tree-id24082 . -8) (undo-tree-id24083 . -8) (undo-tree-id24084 . -9) (undo-tree-id24085 . -9) (undo-tree-id24086 . -9) (undo-tree-id24087 . -10) (undo-tree-id24088 . -10) (undo-tree-id24089 . -11) (undo-tree-id24090 . -11) (undo-tree-id24091 . -12) (undo-tree-id24092 . -12) (undo-tree-id24093 . -12) (undo-tree-id24094 . -13) (undo-tree-id24095 . -13) (undo-tree-id24096 . -13) (undo-tree-id24097 . -14) (undo-tree-id24098 . -14) (undo-tree-id24099 . -14) (undo-tree-id24100 . -14) (undo-tree-id24101 . -14) 3149) nil (26041 4562 306989 594000) 0 nil])
([nil nil ((apply yas--snippet-revive 3135 3168 #s(yas--snippet nil (#s(yas--field 1 3158 3167 nil nil nil nil #s(yas--exit 3168 nil))) #s(yas--exit 3168 nil) 137 nil #s(yas--field 1 3158 3167 nil nil nil nil #s(yas--exit 3168 nil)) nil nil))) nil (26041 4562 306953 172000) 0 nil])
([nil nil ((3168 . 3169)) nil (26041 4562 306949 173000) 0 nil])
([nil nil ((2840 . 2841) (t 26041 4562 344567 903000)) nil (26041 4583 6461 344000) 0 nil])
([nil nil ((2841 . 2847)) nil (26041 4583 6460 529000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -2844) (undo-tree-id24188 . -1) (undo-tree-id24189 . -1) (undo-tree-id24190 . -1) (undo-tree-id24191 . -1) (undo-tree-id24192 . -1) (undo-tree-id24193 . -1) (undo-tree-id24194 . -1) (undo-tree-id24195 . -1) (undo-tree-id24196 . -1) (undo-tree-id24197 . -1) (undo-tree-id24198 . -1) (undo-tree-id24199 . -1) (undo-tree-id24200 . -1) (undo-tree-id24201 . -1) (undo-tree-id24202 . -1) (undo-tree-id24203 . -1) (#("o" 0 1 (fontified t)) . -2845) (undo-tree-id24204 . -1) (undo-tree-id24205 . -1) (undo-tree-id24206 . -1) (undo-tree-id24207 . -1) (undo-tree-id24208 . -1) (undo-tree-id24209 . -1) (undo-tree-id24210 . -1) (undo-tree-id24211 . -1) (undo-tree-id24212 . -1) (undo-tree-id24213 . -1) (#("n" 0 1 (fontified t)) . -2846) (undo-tree-id24214 . -1) (undo-tree-id24215 . -1) (undo-tree-id24216 . -1) (undo-tree-id24217 . -1) 2847) nil (26041 4583 6458 766000) 0 nil])
([nil nil ((2844 . 2850)) nil (26041 4583 6437 637000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -2847) (undo-tree-id24157 . -1) (undo-tree-id24158 . -1) (undo-tree-id24159 . -1) (undo-tree-id24160 . -1) (undo-tree-id24161 . -1) (undo-tree-id24162 . -1) (undo-tree-id24163 . -1) (undo-tree-id24164 . -1) (undo-tree-id24165 . -1) (undo-tree-id24166 . -1) (undo-tree-id24167 . -1) (undo-tree-id24168 . -1) (undo-tree-id24169 . -1) (undo-tree-id24170 . -1) (undo-tree-id24171 . -1) (undo-tree-id24172 . -1) (#("n" 0 1 (fontified t)) . -2848) (undo-tree-id24173 . -1) (undo-tree-id24174 . -1) (undo-tree-id24175 . -1) (undo-tree-id24176 . -1) (undo-tree-id24177 . -1) (undo-tree-id24178 . -1) (undo-tree-id24179 . -1) (undo-tree-id24180 . -1) (undo-tree-id24181 . -1) (undo-tree-id24182 . -1) (#("t" 0 1 (fontified t)) . -2849) (undo-tree-id24183 . -1) (undo-tree-id24184 . -1) (undo-tree-id24185 . -1) (undo-tree-id24186 . -1) (undo-tree-id24187 . -1) 2850) nil (26041 4583 6435 612000) 0 nil])
([nil nil ((2847 . 2850)) nil (26041 4583 6414 6000) 0 nil])
([nil nil ((2850 . 2852)) nil (26041 4583 6412 661000) 0 nil])
([nil nil ((2851 . 2857) (#("c" 0 1 (fontified nil)) . 2851) (2851 . 2852) (#("c_char" 0 6 (fontified nil)) . -2851) (2851 . 2857) (#("c" 0 1 (fontified t)) . -2851) (undo-tree-id24152 . -1) (undo-tree-id24153 . -1) (undo-tree-id24154 . -1) (undo-tree-id24155 . -1) (undo-tree-id24156 . -1) 2852) nil (26041 4583 6408 241000) 0 nil])
([nil nil ((#("100" 0 3 (fontified t)) . -2960) (undo-tree-id24218 . -3) (undo-tree-id24219 . -3) (undo-tree-id24220 . -3) (undo-tree-id24221 . -3) (undo-tree-id24222 . -3) (undo-tree-id24223 . -3) (undo-tree-id24224 . -3) (undo-tree-id24225 . -3) 2963 (t 26041 4583 41235 837000)) nil (26041 4661 736778 886000) 0 nil])
([nil nil ((2960 . 2962)) nil (26041 4661 736763 782000) 0 nil])
([nil nil ((3137 . 3145) (t 26041 4661 804574 2000)) nil (26041 4811 978783 609000) 0 nil])
([nil nil ((3139 . 3147) (#("        " 0 8 (fontified nil)) . 3138) (undo-tree-id24298 . -8) (undo-tree-id24299 . -8) (undo-tree-id24300 . -8) (undo-tree-id24301 . -8) (undo-tree-id24302 . -8) (undo-tree-id24303 . -8) (3138 . 3147) (#("        " 0 8 (fontified nil)) . 3137) (undo-tree-id24304 . -8) (undo-tree-id24305 . -8) (undo-tree-id24306 . -8) (undo-tree-id24307 . -8) (undo-tree-id24308 . -8) (undo-tree-id24309 . -8) (3145 . 3146)) nil (26041 4811 978782 86000) 0 nil])
([nil nil ((3138 . 3146)) nil (26041 4811 978772 905000) 0 nil])
([nil nil ((3137 . 3145)) nil (26041 4811 978772 238000) 0 nil])
([nil nil ((3145 . 3146)) nil (26041 4811 978771 612000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -3145) (undo-tree-id24293 . -1) (undo-tree-id24294 . -1) (undo-tree-id24295 . -1) (undo-tree-id24296 . -1) (undo-tree-id24297 . -1) 3146) nil (26041 4811 978770 651000) 0 nil])
([nil nil ((3145 . 3146)) nil (26041 4811 978766 240000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -3145) (undo-tree-id24290 . -1) (undo-tree-id24291 . -1) (undo-tree-id24292 . -1) 3146) nil (26041 4811 978765 309000) 0 nil])
([nil nil ((3145 . 3154)) nil (26041 4811 978762 321000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -3152) (undo-tree-id24276 . -1) (undo-tree-id24277 . -1) (undo-tree-id24278 . -1) (undo-tree-id24279 . -1) (undo-tree-id24280 . -1) (undo-tree-id24281 . -1) (undo-tree-id24282 . -1) (undo-tree-id24283 . -1) (undo-tree-id24284 . -1) (undo-tree-id24285 . -1) (#("s" 0 1 (fontified t)) . -3153) (undo-tree-id24286 . -1) (undo-tree-id24287 . -1) (undo-tree-id24288 . -1) (undo-tree-id24289 . -1) 3154) nil (26041 4811 978760 330000) 0 nil])
([nil nil ((3152 . 3154)) nil (26041 4811 977922 839000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -3153) (undo-tree-id24271 . -1) (undo-tree-id24272 . -1) (undo-tree-id24273 . -1) (undo-tree-id24274 . -1) (undo-tree-id24275 . -1) 3154) nil (26041 4811 977921 868000) 0 nil])
([nil nil ((3153 . 3155)) nil (26041 4811 977917 490000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3179 3186 nil nil nil nil #s(yas--exit 3187 nil))) #s(yas--exit 3187 nil) 138 nil #s(yas--field 1 3179 3186 nil nil nil nil #s(yas--exit 3187 nil)) nil nil)) (3150 . 3187) (#("zbar_symbol_set_first_symbol(${1:symbols})$0" 0 44 (fontified nil)) . 3150) (3150 . 3194) (#("first" 0 5 (fontified nil)) . 3150) (3150 . 3155) (#("zbar_symbol_set_first_symbol(…)" 0 31 (fontified nil)) . -3150) (3150 . 3181) (#("first" 0 5 (fontified t)) . -3150) (undo-tree-id24234 . -5) (undo-tree-id24235 . -1) (undo-tree-id24236 . -1) (undo-tree-id24237 . -1) (undo-tree-id24238 . -2) (undo-tree-id24239 . -2) (undo-tree-id24240 . -2) (undo-tree-id24241 . -2) (undo-tree-id24242 . -2) (undo-tree-id24243 . -2) (undo-tree-id24244 . -2) (undo-tree-id24245 . -2) (undo-tree-id24246 . -2) (undo-tree-id24247 . -2) (undo-tree-id24248 . -2) (undo-tree-id24249 . -2) (undo-tree-id24250 . -2) (undo-tree-id24251 . -2) (undo-tree-id24252 . -2) (undo-tree-id24253 . -3) (undo-tree-id24254 . -3) (undo-tree-id24255 . -3) (undo-tree-id24256 . -3) (undo-tree-id24257 . -3) (undo-tree-id24258 . -3) (undo-tree-id24259 . -3) (undo-tree-id24260 . -3) (undo-tree-id24261 . -3) (undo-tree-id24262 . -4) (undo-tree-id24263 . -4) (undo-tree-id24264 . -4) (undo-tree-id24265 . -5) (undo-tree-id24266 . -5) (undo-tree-id24267 . -5) (undo-tree-id24268 . -5) (undo-tree-id24269 . -5) (undo-tree-id24270 . -5) 3155) nil (26041 4811 977914 930000) 0 nil])
([nil nil ((apply yas--snippet-revive 3150 3187 #s(yas--snippet nil (#s(yas--field 1 3179 3186 nil nil nil nil #s(yas--exit 3187 nil))) #s(yas--exit 3187 nil) 138 nil #s(yas--field 1 3179 3186 nil nil nil nil #s(yas--exit 3187 nil)) nil nil))) nil (26041 4811 977887 757000) 0 nil])
([nil nil ((3157 . 3158) (3199 . 3200) (3145 . 3145) (3145 . 3157)) nil (26041 4811 977886 807000) 0 nil])
([nil nil ((#("symbols" 0 7 (fontified t)) . -3192) (undo-tree-id24232 . -7) (undo-tree-id24233 . -7) 3199) nil (26041 4811 977885 282000) 0 nil])
([nil nil ((3192 . 3194)) nil (26041 4811 977881 760000) 0 nil])
([nil nil ((3192 . 3202) (#("sy" 0 2 (fontified nil)) . 3192) (3192 . 3194) (#("symbol_set" 0 10 (fontified nil)) . -3192) (3192 . 3202) (#("sy" 0 2 (fontified t)) . -3192) (undo-tree-id24226 . -2) (undo-tree-id24227 . -1) (undo-tree-id24228 . -1) (undo-tree-id24229 . -2) (undo-tree-id24230 . -2) (undo-tree-id24231 . -2) 3194) nil (26041 4811 977876 858000) 0 nil])
([nil nil ((3149 . 3153) (t 26041 4812 4583 215000)) nil (26041 4816 101253 920000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3681 . 3682) (nil fontified nil 3681 . 3682) (nil fontified nil 3673 . 3681) (nil fontified nil 3671 . 3673) (nil fontified nil 3670 . 3671) (nil fontified nil 3664 . 3670) (nil fontified nil 3663 . 3664) (nil fontified nil 3658 . 3663) (nil fontified nil 3647 . 3658) (nil fontified nil 3645 . 3647) (nil fontified nil 3642 . 3645) (nil fontified nil 3639 . 3642) (nil fontified nil 3633 . 3639) (nil fontified nil 3629 . 3633) (nil fontified nil 3621 . 3629) (nil fontified nil 3620 . 3621) (nil fontified nil 3619 . 3620) (nil fontified nil 3618 . 3619) (nil fontified nil 3614 . 3618) (nil fontified nil 3606 . 3614) (nil fontified nil 3605 . 3606) (nil fontified nil 3604 . 3605) (nil fontified nil 3603 . 3604) (nil fontified nil 3597 . 3603) (nil fontified nil 3596 . 3597) (nil fontified nil 3595 . 3596) (nil fontified nil 3591 . 3595) (nil fontified nil 3590 . 3591) (nil fontified nil 3582 . 3590) (nil fontified nil 3580 . 3582) (nil fontified nil 3576 . 3580) (nil fontified nil 3572 . 3576) (nil fontified nil 3571 . 3572) (nil fontified nil 3568 . 3571) (nil fontified nil 3560 . 3568) (nil fontified nil 3559 . 3560) (nil fontified nil 3558 . 3559) (nil fontified nil 3557 . 3558) (nil fontified nil 3556 . 3557) (nil fontified nil 3550 . 3556) (nil fontified nil 3549 . 3550) (nil fontified nil 3537 . 3549) (nil fontified nil 3531 . 3537) (nil fontified nil 3529 . 3531) (nil fontified nil 3528 . 3529) (nil fontified nil 3527 . 3528) (nil fontified nil 3526 . 3527) (nil fontified nil 3520 . 3526) (nil fontified nil 3519 . 3520) (nil fontified nil 3507 . 3519) (nil fontified nil 3499 . 3507) (nil fontified nil 3498 . 3499) (nil fontified nil 3497 . 3498) (nil fontified nil 3496 . 3497) (nil fontified nil 3493 . 3496) (nil fontified nil 3492 . 3493) (nil fontified nil 3473 . 3492) (nil fontified nil 3472 . 3473) (nil fontified nil 3470 . 3472) (nil fontified nil 3467 . 3470) (nil fontified nil 3466 . 3467) (nil fontified nil 3458 . 3466) (nil fontified nil 3456 . 3458) (nil fontified nil 3452 . 3456) (nil fontified nil 3451 . 3452) (nil fontified nil 3444 . 3451) (nil fontified nil 3436 . 3444) (nil fontified nil 3435 . 3436) (nil fontified nil 3434 . 3435) (nil fontified nil 3433 . 3434) (nil fontified nil 3428 . 3433) (nil fontified nil 3415 . 3428) (nil fontified nil 3413 . 3415) (nil fontified nil 3404 . 3413) (nil fontified nil 3400 . 3404) (nil fontified nil 3396 . 3400) (nil fontified nil 3388 . 3396) (nil fontified nil 3387 . 3388) (nil fontified nil 3386 . 3387) (nil fontified nil 3381 . 3386) (nil fontified nil 3378 . 3381) (nil fontified nil 3374 . 3378) (nil fontified nil 3366 . 3374) (nil fontified nil 3364 . 3366) (nil fontified nil 3363 . 3364) (nil fontified nil 3357 . 3363) (nil fontified nil 3356 . 3357) (nil fontified nil 3336 . 3356) (nil fontified nil 3334 . 3336) (nil fontified nil 3331 . 3334) (nil fontified nil 3328 . 3331) (nil fontified nil 3324 . 3328) (nil fontified nil 3323 . 3324) (nil fontified nil 3320 . 3323) (nil fontified nil 3316 . 3320) (nil fontified nil 3308 . 3316) (nil fontified nil 3306 . 3308) (nil fontified nil 3305 . 3306) (nil fontified nil 3299 . 3305) (nil fontified nil 3298 . 3299) (nil fontified nil 3278 . 3298) (nil fontified nil 3276 . 3278) (nil fontified nil 3273 . 3276) (nil fontified nil 3270 . 3273) (nil fontified nil 3267 . 3270) (nil fontified nil 3266 . 3267) (nil fontified nil 3263 . 3266) (nil fontified nil 3259 . 3263) (nil fontified nil 3251 . 3259) (nil fontified nil 3250 . 3251) (nil fontified nil 3249 . 3250) (nil fontified nil 3248 . 3249) (nil fontified nil 3247 . 3248) (nil fontified nil 3246 . 3247) (nil fontified nil 3239 . 3246) (nil fontified nil 3238 . 3239) (nil fontified nil 3232 . 3238) (nil fontified nil 3230 . 3232) (nil fontified nil 3225 . 3230) (nil fontified nil 3217 . 3225) (3217 . 3682) (t 26041 4816 167916 804000)) nil (26041 4825 657988 762000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -3217) 3140) nil (26041 4872 741946 183000) 0 nil])
([nil nil ((#("println!(\"symbol set size: {}\", n);" 0 8 (face rust-builtin-formatting-macro fontified t) 8 9 (face (rainbow-delimiters-depth-3-face) fontified t) 9 27 (face font-lock-string-face fontified t) 27 29 (face rust-string-interpolation fontified t) 29 30 (face font-lock-string-face fontified t) 30 33 (fontified t) 33 34 (face (rainbow-delimiters-depth-3-face) fontified t) 34 35 (fontified t)) . 3101) (undo-tree-id24415 . -35) (undo-tree-id24416 . -35) (undo-tree-id24417 . -35) (undo-tree-id24418 . -35) (undo-tree-id24419 . -35) (undo-tree-id24420 . -35) (undo-tree-id24421 . -35) (undo-tree-id24422 . -35) (undo-tree-id24423 . -35) (undo-tree-id24424 . -35) (undo-tree-id24425 . -35) (undo-tree-id24426 . -35) (undo-tree-id24427 . -35) (undo-tree-id24428 . -35) (undo-tree-id24429 . -35) (undo-tree-id24430 . -35) (undo-tree-id24431 . -35) (undo-tree-id24432 . -35) (t 26041 4873 431253 648000)) nil (26041 4884 463238 737000) 0 nil] [nil nil ((3046 . 3047) (t 26041 4825 694584 55000)) ((#("_" 0 1 (face font-lock-variable-name-face fontified t)) . 3046) (undo-tree-id24310 . -1) (undo-tree-id24311 . -1) (undo-tree-id24312 . -1) (undo-tree-id24313 . -1) (undo-tree-id24314 . -1) (undo-tree-id24315 . -1) (undo-tree-id24316 . -1) (undo-tree-id24317 . -1) (undo-tree-id24318 . -1) (t 26041 4865 421253 157000)) (26041 4865 352770 65000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 3101) (undo-tree-id24414 . -1)) nil (26041 4884 463225 195000) 0 nil])
nil
([nil nil ((#("        " 0 8 (fontified t)) . -3101)) nil (26041 4884 463222 858000) 0 nil])
([nil nil ((#("let n = ffi::zbar_symbol_set_get_size(symbol_set);" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 5 (face font-lock-variable-name-face fontified t) 5 8 (fontified t) 8 11 (face font-lock-constant-face fontified t) 11 13 (fontified t) 13 37 (fontified t) 37 38 (face (rainbow-delimiters-depth-3-face) fontified t) 38 48 (fontified t) 48 49 (face (rainbow-delimiters-depth-3-face) fontified t) 49 50 (fontified t)) . 3042) (undo-tree-id24319 . -43) (undo-tree-id24320 . -43) (undo-tree-id24321 . -4) (undo-tree-id24322 . 46) (undo-tree-id24323 . -4) (undo-tree-id24324 . -4) (undo-tree-id24325 . -4) (undo-tree-id24326 . -4) (undo-tree-id24327 . -4) (undo-tree-id24328 . -4) (undo-tree-id24329 . -4) (undo-tree-id24330 . -4) (undo-tree-id24331 . -4) (undo-tree-id24332 . -8) (undo-tree-id24333 . -8) (undo-tree-id24334 . -8) (undo-tree-id24335 . -8) (undo-tree-id24336 . -8) (undo-tree-id24337 . -8) (undo-tree-id24338 . -8) (undo-tree-id24339 . -8) (undo-tree-id24340 . -8) (undo-tree-id24341 . -8) (undo-tree-id24342 . -8) (undo-tree-id24343 . -8) (undo-tree-id24344 . -8) (undo-tree-id24345 . -8) (undo-tree-id24346 . -8) (undo-tree-id24347 . -8) (undo-tree-id24348 . -8) (undo-tree-id24349 . -8) (undo-tree-id24350 . -8) (undo-tree-id24351 . -8) (undo-tree-id24352 . -8) (undo-tree-id24353 . -8) (undo-tree-id24354 . -8) (undo-tree-id24355 . -8) (undo-tree-id24356 . -8) (undo-tree-id24357 . -8) (undo-tree-id24358 . -8) (undo-tree-id24359 . -8) (undo-tree-id24360 . -8) (undo-tree-id24361 . -8) (undo-tree-id24362 . -8) (undo-tree-id24363 . -4) (undo-tree-id24364 . -4) (undo-tree-id24365 . -4) (undo-tree-id24366 . -4) (undo-tree-id24367 . -4) (undo-tree-id24368 . -4) (undo-tree-id24369 . -4) (undo-tree-id24370 . -4) (undo-tree-id24371 . -4) (undo-tree-id24372 . -4) (undo-tree-id24373 . -4) (undo-tree-id24374 . -4) (undo-tree-id24375 . -4) (undo-tree-id24376 . -4) (undo-tree-id24377 . -4) (undo-tree-id24378 . -4) (undo-tree-id24379 . -4) (undo-tree-id24380 . -4) (undo-tree-id24381 . -4) (undo-tree-id24382 . -4) (undo-tree-id24383 . -1) (undo-tree-id24384 . -2) (undo-tree-id24385 . -3) (undo-tree-id24386 . -4) (undo-tree-id24387 . -4) (undo-tree-id24388 . -4) (undo-tree-id24389 . -4) (undo-tree-id24390 . -4) (undo-tree-id24391 . -4) (undo-tree-id24392 . -4) (undo-tree-id24393 . -4) (undo-tree-id24394 . -4) (undo-tree-id24395 . -4) (undo-tree-id24396 . -4) (undo-tree-id24397 . -4) (undo-tree-id24398 . -4) (undo-tree-id24399 . -4) (undo-tree-id24400 . -4) (undo-tree-id24401 . -4) (undo-tree-id24402 . -4) (undo-tree-id24403 . -4) (undo-tree-id24404 . -4) (undo-tree-id24405 . -4) (undo-tree-id24406 . -4) (undo-tree-id24407 . -50) (undo-tree-id24408 . -50) (undo-tree-id24409 . -50) (undo-tree-id24410 . -50) (undo-tree-id24411 . -50) (undo-tree-id24412 . -50) (undo-tree-id24413 . -50)) nil (26041 4884 463216 30000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 3042) (undo-tree-id24449 . -1) (undo-tree-id24450 . 1) (undo-tree-id24451 . -1) (t 26041 4884 531254 327000)) nil (26041 4886 949305 602000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -3042) (undo-tree-id24433 . 8) (undo-tree-id24434 . -8) (undo-tree-id24435 . -8) (undo-tree-id24436 . -8) (undo-tree-id24437 . -8) (undo-tree-id24438 . -8) (undo-tree-id24439 . -8) (undo-tree-id24440 . -8) (undo-tree-id24441 . -8) (undo-tree-id24442 . -8) (undo-tree-id24443 . -8) (undo-tree-id24444 . -8) (undo-tree-id24445 . -8) (undo-tree-id24446 . -8) (undo-tree-id24447 . -8) (undo-tree-id24448 . -8)) nil (26041 4886 949298 589000) 0 nil])
([nil nil ((2919 . 2927) (#("        " 0 8 (fontified nil)) . 2918) (2918 . 2926) (2918 . 2919) (t 26041 4886 984587 811000)) nil (26041 5018 114865 761000) 0 nil])
([nil nil ((3263 . 3276)) nil (26041 5018 114864 583000) 0 nil])
([nil nil ((3276 . 3283)) nil (26041 5018 114863 929000) 0 nil])
([nil nil ((3283 . 3291)) nil (26041 5018 114863 363000) 0 nil])
([nil nil ((#("get" 0 3 (fontified t)) . -3288) (undo-tree-id24577 . -3) 3291) nil (26041 5018 114862 441000) 0 nil])
([nil nil ((#("symbol_" 0 7 (fontified t)) . -3281) (undo-tree-id24576 . -7) 3288) nil (26041 5018 114860 955000) 0 nil])
([nil nil ((#("ffi::" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t)) . -3276) (undo-tree-id24575 . -5) 3281) nil (26041 5018 114859 521000) 0 nil])
([nil nil ((#("            
" 0 12 (fontified t) 12 13 (fontified t)) . 3264) (undo-tree-id24574 . -12)) nil (26041 5018 114857 990000) 0 nil])
([nil nil ((3263 . 3276)) nil (26041 5018 114856 598000) 0 nil])
([nil nil ((3276 . 3280)) nil (26041 5018 114856 11000) 0 nil])
([nil nil ((3280 . 3301)) nil (26041 5018 114855 418000) 0 nil])
([nil nil ((3301 . 3304)) nil (26041 5018 114854 818000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -3303) (undo-tree-id24573 . -1) 3304) nil (26041 5018 114854 158000) 0 nil])
([nil nil ((3303 . 3306)) nil (26041 5018 114852 706000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -3303) (undo-tree-id24570 . -1) (#("e" 0 1 (fontified t)) . -3304) (undo-tree-id24571 . -1) (#("t" 0 1 (fontified t)) . -3305) (undo-tree-id24572 . -1) 3306) nil (26041 5018 114851 603000) 0 nil])
([nil nil ((3303 . 3304)) nil (26041 5018 114848 789000) 0 nil])
([nil nil ((3304 . 3306)) nil (26041 5018 114848 183000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3316 3322 nil nil nil nil #s(yas--exit 3323 nil))) #s(yas--exit 3323 nil) 139 nil #s(yas--field 1 3316 3322 nil nil nil nil #s(yas--exit 3323 nil)) nil nil)) (3291 . 3323) (#("zbar_symbol_get_loc_size(${1:symbol})$0" 0 39 (fontified nil)) . 3291) (3291 . 3330) (#("zbar_symbol_get" 0 15 (fontified nil)) . 3291) (3291 . 3306) (#("zbar_symbol_get_loc_size(…)" 0 27 (fontified nil)) . -3291) (3291 . 3318) (#("zbar_symbol_get" 0 15 (fontified t)) . -3291) (undo-tree-id24569 . -15) 3306) nil (26041 5018 114846 885000) 0 nil])
([nil nil ((apply yas--snippet-revive 3291 3323 #s(yas--snippet nil (#s(yas--field 1 3316 3322 nil nil nil nil #s(yas--exit 3323 nil))) #s(yas--exit 3323 nil) 139 nil #s(yas--field 1 3316 3322 nil nil nil nil #s(yas--exit 3323 nil)) nil nil))) nil (26041 5018 114844 527000) 0 nil])
([nil nil ((3323 . 3324)) nil (26041 5018 114844 4000) 0 nil])
([nil nil ((3324 . 3337)) nil (26041 5018 114843 485000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3384 . 3385) (nil fontified nil 3384 . 3385) (nil fontified nil 3383 . 3384) (nil fontified nil 3377 . 3383) (nil fontified nil 3376 . 3377) (nil fontified nil 3352 . 3376) (nil fontified nil 3350 . 3352) (nil fontified nil 3347 . 3350) (nil fontified nil 3344 . 3347) (nil fontified nil 3341 . 3344) (nil fontified nil 3340 . 3341) (nil fontified nil 3337 . 3340) (3337 . 3385)) nil (26041 5018 114842 438000) 0 nil])
([nil nil ((3385 . 3386)) nil (26041 5018 114840 200000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3433 . 3434) (nil fontified nil 3433 . 3434) (nil fontified nil 3432 . 3433) (nil fontified nil 3426 . 3432) (nil fontified nil 3425 . 3426) (nil fontified nil 3401 . 3425) (nil fontified nil 3399 . 3401) (nil fontified nil 3396 . 3399) (nil fontified nil 3393 . 3396) (nil fontified nil 3390 . 3393) (nil fontified nil 3389 . 3390) (nil fontified nil 3386 . 3389) (3386 . 3434)) nil (26041 5018 114839 126000) 0 nil])
([nil nil ((3386 . 3398) 3434) nil (26041 5018 114836 938000) 0 nil])
([nil nil ((3344 . 3346)) nil (26041 5018 114836 152000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -3374) (undo-tree-id24562 . -1) (undo-tree-id24563 . -1) (#("i" 0 1 (fontified t)) . -3375) (undo-tree-id24564 . -1) (undo-tree-id24565 . -1) (#("z" 0 1 (fontified t)) . -3376) (undo-tree-id24566 . -1) (undo-tree-id24567 . -1) (#("e" 0 1 (fontified t)) . -3377) (undo-tree-id24568 . -1) 3378) nil (26041 5018 114834 963000) 0 nil])
([nil nil ((3374 . 3375)) nil (26041 5018 114828 635000) 0 nil])
([nil nil ((3354 . 3375) (#("zbar_symbol_get_loc_x" 0 21 (fontified nil)) . 3354) (3354 . 3375) (#("zbar_symbol_get_loc_x" 0 21 (fontified t)) . -3354) (undo-tree-id24560 . -21) (undo-tree-id24561 . -21) 3375) nil (26041 5018 114827 675000) 0 nil])
([nil nil ((3404 . 3405)) nil (26041 5018 114825 89000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -3404) (undo-tree-id24558 . -1) (undo-tree-id24559 . -1) 3405) nil (26041 5018 114824 216000) 0 nil])
([nil nil ((3404 . 3406)) nil (26041 5018 114821 832000) 0 nil])
([nil nil ((3438 . 3439)) nil (26041 5018 114821 177000) 0 nil])
([nil nil ((3439 . 3440)) nil (26041 5018 114820 305000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -3434) (undo-tree-id24452 . -1) (undo-tree-id24453 . -1) (undo-tree-id24454 . -1) (undo-tree-id24455 . -1) (undo-tree-id24456 . -1) (undo-tree-id24457 . -1) (undo-tree-id24458 . -1) (undo-tree-id24459 . -1) (undo-tree-id24460 . -1) (undo-tree-id24461 . -1) (undo-tree-id24462 . -1) (undo-tree-id24463 . -1) (undo-tree-id24464 . -1) (undo-tree-id24465 . -1) (undo-tree-id24466 . -1) (undo-tree-id24467 . -1) (undo-tree-id24468 . -1) (undo-tree-id24469 . -1) (undo-tree-id24470 . -1) (undo-tree-id24471 . -1) (undo-tree-id24472 . -1) (undo-tree-id24473 . -1) (undo-tree-id24474 . -1) (undo-tree-id24475 . -1) (#("i" 0 1 (fontified t)) . -3435) (undo-tree-id24476 . -1) (undo-tree-id24477 . -1) (undo-tree-id24478 . -1) (undo-tree-id24479 . -1) (undo-tree-id24480 . -1) (undo-tree-id24481 . -1) (undo-tree-id24482 . -1) (undo-tree-id24483 . -1) (undo-tree-id24484 . -1) (undo-tree-id24485 . -1) (undo-tree-id24486 . -1) (undo-tree-id24487 . -1) (undo-tree-id24488 . -1) (undo-tree-id24489 . -1) (undo-tree-id24490 . -1) (undo-tree-id24491 . -1) (undo-tree-id24492 . -1) (undo-tree-id24493 . -1) (undo-tree-id24494 . -1) (undo-tree-id24495 . -1) (undo-tree-id24496 . -1) (undo-tree-id24497 . -1) (#("z" 0 1 (fontified t)) . -3436) (undo-tree-id24498 . -1) (undo-tree-id24499 . -1) (undo-tree-id24500 . -1) (undo-tree-id24501 . -1) (undo-tree-id24502 . -1) (undo-tree-id24503 . -1) (undo-tree-id24504 . -1) (undo-tree-id24505 . -1) (undo-tree-id24506 . -1) (undo-tree-id24507 . -1) (undo-tree-id24508 . -1) (undo-tree-id24509 . -1) (undo-tree-id24510 . -1) (undo-tree-id24511 . -1) (undo-tree-id24512 . -1) (undo-tree-id24513 . -1) (undo-tree-id24514 . -1) (undo-tree-id24515 . -1) (undo-tree-id24516 . -1) (undo-tree-id24517 . -1) (#("e" 0 1 (fontified t)) . -3437) (undo-tree-id24518 . -1) (undo-tree-id24519 . -1) (undo-tree-id24520 . -1) (undo-tree-id24521 . -1) (undo-tree-id24522 . -1) (undo-tree-id24523 . -1) (undo-tree-id24524 . -1) (undo-tree-id24525 . -1) (undo-tree-id24526 . -1) (undo-tree-id24527 . -1) (undo-tree-id24528 . -1) (undo-tree-id24529 . -1) (undo-tree-id24530 . -1) (undo-tree-id24531 . -1) (undo-tree-id24532 . -1) (undo-tree-id24533 . -1) (undo-tree-id24534 . -1) (undo-tree-id24535 . -1) (#("_" 0 1 (fontified t)) . -3438) (undo-tree-id24536 . -1) (undo-tree-id24537 . -1) (undo-tree-id24538 . -1) (undo-tree-id24539 . -1) (undo-tree-id24540 . -1) (undo-tree-id24541 . -1) (undo-tree-id24542 . -1) (undo-tree-id24543 . -1) (undo-tree-id24544 . -1) (undo-tree-id24545 . -1) (undo-tree-id24546 . -1) (undo-tree-id24547 . -1) (undo-tree-id24548 . -1) (undo-tree-id24549 . -1) (undo-tree-id24550 . -1) (undo-tree-id24551 . -1) (#("y" 0 1 (fontified t)) . -3439) (undo-tree-id24552 . -1) (undo-tree-id24553 . -1) (undo-tree-id24554 . -1) (undo-tree-id24555 . -1) (undo-tree-id24556 . -1) (undo-tree-id24557 . -1) 3440) nil (26041 5018 114813 764000) 0 nil])
([nil nil ((3434 . 3435)) nil (26041 5018 114604 377000) 0 nil])
([nil nil ((3382 . 3385) (t 26041 5018 151262 525000)) nil (26041 5099 735705 527000) 0 nil])
([nil nil ((3445 . 3448)) nil (26041 5099 735701 731000) 0 nil])
([nil nil ((3705 . 3718) (t 26041 5099 771267 533000)) nil (26041 5139 59884 905000) 0 nil])
([nil nil ((3718 . 3722)) nil (26041 5139 59884 104000) 0 nil])
([nil nil ((apply yas--snippet-revive 3718 3728 #s(yas--snippet nil nil #s(yas--exit 3727 nil) 140 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 3727 nil) 140 nil nil nil nil)) (3718 . 3728) (#("println!($0)" 0 12 (fontified nil)) . 3718) (3718 . 3730) (#("prin" 0 4 (fontified nil)) . 3718) (3718 . 3722) (#("println!(…)" 0 11 (fontified nil)) . -3718) (3718 . 3729) (#("prin" 0 4 (fontified t)) . -3718) (undo-tree-id24642 . -4) (undo-tree-id24643 . -1) (undo-tree-id24644 . -1) (undo-tree-id24645 . -2) (undo-tree-id24646 . -2) (undo-tree-id24647 . -2) (undo-tree-id24648 . -3) (undo-tree-id24649 . -3) (undo-tree-id24650 . -3) (undo-tree-id24651 . -4) (undo-tree-id24652 . -4) (undo-tree-id24653 . -4) (undo-tree-id24654 . -4) (undo-tree-id24655 . -4) 3722) nil (26041 5139 59882 595000) 0 nil])
([nil nil ((3727 . 3728)) nil (26041 5139 59869 765000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -3727) (undo-tree-id24636 . -1) (undo-tree-id24637 . -1) (undo-tree-id24638 . -1) (undo-tree-id24639 . -1) (undo-tree-id24640 . -1) (undo-tree-id24641 . -1) 3728) nil (26041 5139 59868 909000) 0 nil])
([nil nil ((3727 . 3729)) nil (26041 5139 59864 180000) 0 nil])
([nil nil ((3728 . 3736)) nil (26041 5139 59863 605000) 0 nil])
([nil nil ((#("," 0 1 (face font-lock-string-face fontified t)) . -3735) (undo-tree-id24622 . -1) (undo-tree-id24623 . -1) (undo-tree-id24624 . -1) (undo-tree-id24625 . -1) (undo-tree-id24626 . -1) (undo-tree-id24627 . -1) (undo-tree-id24628 . -1) (undo-tree-id24629 . -1) (undo-tree-id24630 . -1) (undo-tree-id24631 . -1) (undo-tree-id24632 . -1) (undo-tree-id24633 . -1) (undo-tree-id24634 . -1) (undo-tree-id24635 . -1) 3736) nil (26041 5139 59862 309000) 0 nil])
([nil nil ((3735 . 3737)) nil (26041 5139 59851 884000) 0 nil])
([nil nil ((#("l" 0 1 (face font-lock-string-face fontified t)) . -3736) (undo-tree-id24611 . -1) (undo-tree-id24612 . -1) (undo-tree-id24613 . -1) (undo-tree-id24614 . -1) (undo-tree-id24615 . -1) (undo-tree-id24616 . -1) (undo-tree-id24617 . -1) (undo-tree-id24618 . -1) (undo-tree-id24619 . -1) (undo-tree-id24620 . -1) (undo-tree-id24621 . -1) 3737) nil (26041 5139 59850 803000) 0 nil])
([nil nil ((3736 . 3747)) nil (26041 5139 59842 623000) 0 nil])
([nil nil ((3748 . 3751)) nil (26041 5139 59842 11000) 0 nil])
([nil nil ((3750 . 3753) (#("l" 0 1 (fontified nil)) . 3750) (3750 . 3751) (#("loc" 0 3 (fontified nil)) . -3750) (3750 . 3753) (#("l" 0 1 (fontified t)) . -3750) (undo-tree-id24601 . -1) (undo-tree-id24602 . -1) (undo-tree-id24603 . -1) (undo-tree-id24604 . -1) (undo-tree-id24605 . -1) (undo-tree-id24606 . -1) (undo-tree-id24607 . -1) (undo-tree-id24608 . -1) (undo-tree-id24609 . -1) (undo-tree-id24610 . -1) 3751) nil (26041 5139 59840 733000) 0 nil])
([nil nil ((3753 . 3756)) nil (26041 5139 59832 560000) 0 nil])
([nil nil ((3755 . 3760) (#("l" 0 1 (fontified nil)) . 3755) (3755 . 3756) (#("loc_x" 0 5 (fontified nil)) . -3755) (3755 . 3760) (#("l" 0 1 (fontified t)) . -3755) (undo-tree-id24589 . -1) (undo-tree-id24590 . -1) (undo-tree-id24591 . -1) (undo-tree-id24592 . -1) (undo-tree-id24593 . -1) (undo-tree-id24594 . -1) (undo-tree-id24595 . -1) (undo-tree-id24596 . -1) (undo-tree-id24597 . -1) (undo-tree-id24598 . -1) (undo-tree-id24599 . -1) (undo-tree-id24600 . -1) 3756) nil (26041 5139 59831 180000) 0 nil])
([nil nil ((3760 . 3763)) nil (26041 5139 59821 303000) 0 nil])
([nil nil ((3762 . 3767) (#("l" 0 1 (fontified nil)) . 3762) (3762 . 3763) (#("loc_y" 0 5 (fontified nil)) . -3762) (3762 . 3767) (#("l" 0 1 (fontified t)) . -3762) (undo-tree-id24578 . -1) (undo-tree-id24579 . -1) (undo-tree-id24580 . -1) (undo-tree-id24581 . -1) (undo-tree-id24582 . -1) (undo-tree-id24583 . -1) (undo-tree-id24584 . -1) (undo-tree-id24585 . -1) (undo-tree-id24586 . -1) (undo-tree-id24587 . -1) (undo-tree-id24588 . -1) 3763) nil (26041 5139 59818 611000) 0 nil])
([nil nil ((3768 . 3769)) nil (26041 5139 59800 809000) 0 nil])
([nil nil ((3283 . 3285) (t 26041 5139 97936 612000)) nil (26041 5209 692086 270000) 0 nil])
([nil nil ((#("n" 0 1 (face font-lock-variable-name-face fontified t)) . -3284) (undo-tree-id24656 . -1) (undo-tree-id24657 . -1) (undo-tree-id24658 . -1) (undo-tree-id24659 . -1) (undo-tree-id24660 . -1) (undo-tree-id24661 . -1) (undo-tree-id24662 . -1) 3285) nil (26041 5209 692083 747000) 0 nil])
([nil nil ((3284 . 3285)) nil (26041 5209 692067 771000) 0 nil])
([nil nil ((3755 . 3756) (t 26041 5209 727940 946000)) nil (26041 5218 465277 903000) 0 nil])
([nil nil ((3752 . 3757) (#("loc_" 0 4 (fontified nil)) . 3752) (3752 . 3756) (#("loc_n" 0 5 (fontified nil)) . -3752) (3752 . 3757) (#("loc_" 0 4 (fontified t)) . -3752) (undo-tree-id24663 . -4) (undo-tree-id24664 . -3) (undo-tree-id24665 . -3) (undo-tree-id24666 . -3) (undo-tree-id24667 . -3) (undo-tree-id24668 . -3) (undo-tree-id24669 . -4) (undo-tree-id24670 . -4) (undo-tree-id24671 . -4) (undo-tree-id24672 . -4) (undo-tree-id24673 . -4) 3756) nil (26041 5218 465273 489000) 0 nil])
([nil nil ((3707 . 3720) (t 26041 5218 501274 817000)) nil (26041 5263 884200 107000) 0 nil])
([nil nil ((3720 . 3732)) nil (26041 5263 884199 386000) 0 nil])
([nil nil ((3732 . 3733)) nil (26041 5263 884198 751000) 0 nil])
([nil nil ((3732 . 3737) (#("l" 0 1 (fontified nil)) . 3732) (3732 . 3733) (#("loc_n" 0 5 (fontified nil)) . -3732) (3732 . 3737) (#("l" 0 1 (fontified t)) . -3732) (undo-tree-id24744 . -1) (undo-tree-id24745 . -1) (undo-tree-id24746 . -1) (undo-tree-id24747 . -1) (undo-tree-id24748 . -1) 3733) nil (26041 5263 884197 611000) 0 nil])
([nil nil ((3737 . 3739)) nil (26041 5263 884193 1000) 0 nil])
([nil nil ((#("{" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -3737) (undo-tree-id24727 . -1) (undo-tree-id24728 . -1) (undo-tree-id24729 . -1) (undo-tree-id24730 . -1) (undo-tree-id24731 . -1) (undo-tree-id24732 . -1) (undo-tree-id24733 . -1) (undo-tree-id24734 . -1) (undo-tree-id24735 . -1) (undo-tree-id24736 . -1) (undo-tree-id24737 . -1) (undo-tree-id24738 . -1) (undo-tree-id24739 . -1) (undo-tree-id24740 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -3738) (undo-tree-id24741 . -1) (undo-tree-id24742 . -1) (undo-tree-id24743 . -1) 3739) nil (26041 5263 884191 523000) 0 nil])
([nil nil ((3737 . 3740)) nil (26041 5263 884178 488000) 0 nil])
([nil nil ((3741 . 3753) (#("                " 0 16 (fontified nil)) . 3740) (3740 . 3756) (#("            " 0 12 (fontified nil)) . 3740) (undo-tree-id24723 . -12) (undo-tree-id24724 . -12) (undo-tree-id24725 . -12) (undo-tree-id24726 . -12) (3739 . 3753)) nil (26041 5263 884177 359000) 0 nil])
([nil nil ((#("println!(\"loc: {} x: {} y: {}\", loc_n, loc_x, loc_y);" 0 8 (face rust-builtin-formatting-macro fontified t) 8 9 (face (rainbow-delimiters-depth-4-face) fontified t) 9 15 (face font-lock-string-face fontified t) 15 17 (face rust-string-interpolation fontified t) 17 21 (face font-lock-string-face fontified t) 21 23 (face rust-string-interpolation fontified t) 23 27 (face font-lock-string-face fontified t) 27 29 (face rust-string-interpolation fontified t) 29 30 (face font-lock-string-face fontified t) 30 32 (fontified t) 32 37 (fontified t) 37 39 (fontified t) 39 46 (fontified t) 46 51 (fontified t) 51 52 (face (rainbow-delimiters-depth-4-face) fontified t) 52 53 (fontified t)) . 3767) (undo-tree-id24702 . -45) (undo-tree-id24703 . -32) (undo-tree-id24704 . -32) (undo-tree-id24705 . -32) (undo-tree-id24706 . -32) (undo-tree-id24707 . -32) (undo-tree-id24708 . -32) (undo-tree-id24709 . -32) (undo-tree-id24710 . -32) (undo-tree-id24711 . -32) (undo-tree-id24712 . -32) (undo-tree-id24713 . -37) (undo-tree-id24714 . -37) (undo-tree-id24715 . -37) (undo-tree-id24716 . -37) (undo-tree-id24717 . -37) (undo-tree-id24718 . -37) (undo-tree-id24719 . -37) (undo-tree-id24720 . -37) (undo-tree-id24721 . -37) (undo-tree-id24722 . -53)) nil (26041 5263 884172 470000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3792 . 3793) (nil fontified nil 3792 . 3793) (nil fontified nil 3791 . 3792) (nil fontified nil 3786 . 3791) (nil fontified nil 3779 . 3786) (nil fontified nil 3777 . 3779) (nil fontified nil 3772 . 3777) (nil fontified nil 3770 . 3772) (nil fontified nil 3769 . 3770) (nil fontified nil 3767 . 3769) (nil fontified nil 3763 . 3767) (nil fontified nil 3761 . 3763) (nil fontified nil 3757 . 3761) (nil fontified nil 3755 . 3757) (nil fontified nil 3749 . 3755) (nil fontified nil 3748 . 3749) (nil fontified nil 3740 . 3748) (3740 . 3793)) nil (26041 5263 884157 689000) 0 nil])
([nil nil ((3740 . 3756) 3793) nil (26041 5263 884154 868000) 0 nil])
([nil nil ((#("let loc_n = ffi::zbar_symbol_get_loc_size(symbol);
            let loc_x = ffi::zbar_symbol_get_loc_x(symbol, 0);
            let loc_y = ffi::zbar_symbol_get_loc_y(symbol, 0);" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 9 (face font-lock-variable-name-face fontified t) 9 12 (fontified t) 12 15 (face font-lock-constant-face fontified t) 15 17 (fontified t) 17 41 (fontified t) 41 42 (face (rainbow-delimiters-depth-4-face) fontified t) 42 48 (fontified t) 48 49 (face (rainbow-delimiters-depth-4-face) fontified t) 49 51 (fontified t) 51 63 (fontified t) 63 66 (face font-lock-keyword-face fontified t) 66 67 (fontified t) 67 72 (face font-lock-variable-name-face fontified t) 72 75 (fontified t) 75 78 (face font-lock-constant-face fontified t) 78 80 (fontified t) 80 101 (fontified t) 101 102 (face (rainbow-delimiters-depth-4-face) fontified t) 102 111 (fontified t) 111 112 (face (rainbow-delimiters-depth-4-face) fontified t) 112 113 (fontified t rear-nonsticky t) 113 114 (fontified t) 114 126 (fontified t) 126 129 (face font-lock-keyword-face fontified t) 129 130 (fontified t) 130 135 (face font-lock-variable-name-face fontified t) 135 138 (fontified t) 138 141 (face font-lock-constant-face fontified t) 141 143 (fontified t) 143 164 (fontified t) 164 165 (face (rainbow-delimiters-depth-4-face) fontified t) 165 174 (fontified t) 174 175 (face (rainbow-delimiters-depth-4-face) fontified t) 175 176 (fontified t rear-nonsticky t)) . 3276) (undo-tree-id24687 . -99) (undo-tree-id24688 . -63) (undo-tree-id24689 . -114) (undo-tree-id24690 . -176) (undo-tree-id24691 . -99) (undo-tree-id24692 . -108) (undo-tree-id24693 . -176) (undo-tree-id24694 . -176) (undo-tree-id24695 . -50) (undo-tree-id24696 . -114) (undo-tree-id24697 . -176) (undo-tree-id24698 . -176) (undo-tree-id24699 . -176) (undo-tree-id24700 . -176) (undo-tree-id24701 . -176) 3452) nil (26041 5263 884153 205000) 0 nil])
([nil nil ((3531 . 3544)) nil (26041 5263 884142 248000) 0 nil])
([nil nil ((nil fontified nil 3719 . 3720) (nil fontified nil 3718 . 3719) (nil fontified nil 3709 . 3718) (nil fontified nil 3708 . 3709) (nil fontified nil 3687 . 3708) (nil fontified nil 3685 . 3687) (nil fontified nil 3682 . 3685) (nil fontified nil 3679 . 3682) (nil fontified nil 3674 . 3679) (nil fontified nil 3673 . 3674) (nil fontified nil 3670 . 3673) (nil fontified nil 3658 . 3670) (nil fontified nil 3657 . 3658) (nil fontified nil 3656 . 3657) (nil fontified nil 3655 . 3656) (nil fontified nil 3646 . 3655) (nil fontified nil 3645 . 3646) (nil fontified nil 3624 . 3645) (nil fontified nil 3622 . 3624) (nil fontified nil 3619 . 3622) (nil fontified nil 3616 . 3619) (nil fontified nil 3611 . 3616) (nil fontified nil 3610 . 3611) (nil fontified nil 3607 . 3610) (nil fontified nil 3595 . 3607) (nil fontified nil 3593 . 3595) (nil fontified nil 3592 . 3593) (nil fontified nil 3586 . 3592) (nil fontified nil 3585 . 3586) (nil fontified nil 3561 . 3585) (nil fontified nil 3559 . 3561) (nil fontified nil 3556 . 3559) (nil fontified nil 3553 . 3556) (nil fontified nil 3548 . 3553) (nil fontified nil 3547 . 3548) (nil fontified nil 3544 . 3547) (3544 . 3720)) nil (26041 5263 884140 374000) 0 nil])
([nil nil ((#("            let loc_x = ffi::zbar_symbol_get_loc_x(symbol, 0);
            let loc_y = ffi::zbar_symbol_get_loc_y(symbol, 0);" 0 12 (fontified t) 12 15 (face font-lock-keyword-face fontified t) 15 16 (fontified t) 16 21 (face font-lock-variable-name-face fontified t) 21 24 (fontified t) 24 27 (face font-lock-constant-face fontified t) 27 29 (fontified t) 29 50 (fontified t) 50 51 (face (rainbow-delimiters-depth-4-face) fontified t) 51 60 (fontified t) 60 61 (face (rainbow-delimiters-depth-4-face) fontified t) 61 62 (fontified t rear-nonsticky t) 62 63 (fontified t) 63 75 (fontified t) 75 78 (face font-lock-keyword-face fontified t) 78 79 (fontified t) 79 84 (face font-lock-variable-name-face fontified t) 84 87 (fontified t) 87 90 (face font-lock-constant-face fontified t) 90 92 (fontified t) 92 113 (fontified t) 113 114 (face (rainbow-delimiters-depth-4-face) fontified t) 114 123 (fontified t) 123 124 (face (rainbow-delimiters-depth-4-face) fontified t) 124 125 (fontified t rear-nonsticky t)) . 3595) (undo-tree-id24675 . -125) (undo-tree-id24676 . -125) (undo-tree-id24677 . -125) (undo-tree-id24678 . -125) (undo-tree-id24679 . -125) (undo-tree-id24680 . -62) (undo-tree-id24681 . -62) (undo-tree-id24682 . -62) (undo-tree-id24683 . -62) (undo-tree-id24684 . -62) (undo-tree-id24685 . -63) (undo-tree-id24686 . -125) 3720) nil (26041 5263 884134 402000) 0 nil])
([nil nil ((3627 . 3628)) nil (26041 5263 884124 66000) 0 nil])
([nil nil ((nil fontified nil 3752 . 3753) (nil fontified nil 3751 . 3752) (nil fontified nil 3742 . 3751) (nil fontified nil 3741 . 3742) (nil fontified nil 3720 . 3741) (nil fontified nil 3718 . 3720) (nil fontified nil 3715 . 3718) (nil fontified nil 3712 . 3715) (nil fontified nil 3707 . 3712) (nil fontified nil 3706 . 3707) (nil fontified nil 3703 . 3706) (nil fontified nil 3691 . 3703) (nil fontified nil 3690 . 3691) (nil fontified nil 3689 . 3690) (nil fontified nil 3688 . 3689) (nil fontified nil 3679 . 3688) (nil fontified nil 3678 . 3679) (nil fontified nil 3657 . 3678) (nil fontified nil 3655 . 3657) (nil fontified nil 3652 . 3655) (nil fontified nil 3649 . 3652) (nil fontified nil 3644 . 3649) (nil fontified nil 3643 . 3644) (nil fontified nil 3640 . 3643) (nil fontified nil 3628 . 3640) (3628 . 3753)) nil (26041 5263 884121 690000) 0 nil])
([nil nil ((3695 . 3711) (#("            " 0 12 (fontified t)) . 3695) (3628 . 3644) (#("            " 0 12 (fontified t)) . 3628) (undo-tree-id24674 . -10) 3445) nil (26041 5263 884114 742000) 0 nil])
([nil nil ((2927 . 2933) (t 26041 5263 921277 605000)) nil (26041 5283 31867 278000) 0 nil])
([nil nil ((3935 . 3936)) nil (26041 5283 31865 750000) 0 nil])
([nil nil ((4013 . 4017) (3949 . 3965) (#("            " 0 8 (fontified t) 8 12 (fontified t)) . 3949) (undo-tree-id24749 . -12) (3932 . 3948) (#("            " 0 12 (fontified t)) . 3932) (undo-tree-id24750 . -12) (undo-tree-id24751 . -12) (undo-tree-id24752 . -12) (undo-tree-id24753 . -12) (undo-tree-id24754 . -12) (undo-tree-id24755 . -12) (undo-tree-id24756 . -12) (undo-tree-id24757 . -12) (undo-tree-id24758 . -12) (undo-tree-id24759 . -12) (undo-tree-id24760 . -12) (undo-tree-id24761 . -12) (undo-tree-id24762 . -12) (undo-tree-id24763 . -12) (undo-tree-id24764 . -12) (undo-tree-id24765 . -12) (undo-tree-id24766 . -12) (undo-tree-id24767 . -12) (undo-tree-id24768 . -12) (undo-tree-id24769 . -12) (3914 . 3930) (#("            " 0 12 (fontified t)) . 3914) (3856 . 3860) (3785 . 3789) (3714 . 3718) (3662 . 3678) (#("            " 0 12 (fontified t)) . 3662) (3594 . 3610) (#("            " 0 12 (fontified t)) . 3594) (undo-tree-id24770 . -12) (undo-tree-id24771 . -12) (3575 . 3591) (#("            " 0 8 (fontified t) 8 12 (fontified t)) . 3575) (3541 . 3545) (3490 . 3514) (#("                    " 0 2 (fontified t) 2 8 (fontified t) 8 20 (fontified t)) . 3490) (3456 . 3480) (#("                    " 0 8 (fontified t) 8 20 (fontified t)) . 3456) (3405 . 3409) (3353 . 3357) (3311 . 3327) (#("            " 0 8 (fontified t) 8 12 (fontified t)) . 3311) (3294 . 3310) (#("            " 0 12 (fontified t)) . 3294) (undo-tree-id24772 . -12) (undo-tree-id24773 . -12) (undo-tree-id24774 . -12) (undo-tree-id24775 . -12) (undo-tree-id24776 . -12) (undo-tree-id24777 . -12) (undo-tree-id24778 . -12) (undo-tree-id24779 . -12) (undo-tree-id24780 . -12) (undo-tree-id24781 . -12) (undo-tree-id24782 . -12) (undo-tree-id24783 . -12) (undo-tree-id24784 . -12) (3232 . 3248) (#("            " 0 8 (fontified t) 8 12 (fontified t)) . 3232) (3171 . 3187) (#("            " 0 8 (fontified t) 8 12 (fontified t)) . 3171) (3141 . 3145) (3065 . 3069) (2992 . 2996) (2942 . 2946) 2918) nil (26041 5283 31858 517000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -3765) (undo-tree-id24799 . -1) (undo-tree-id24800 . -1) (undo-tree-id24801 . -1) (undo-tree-id24802 . -1) (undo-tree-id24803 . -1) (undo-tree-id24804 . -1) (undo-tree-id24805 . -1) (undo-tree-id24806 . -1) (undo-tree-id24807 . -1) (undo-tree-id24808 . -1) (undo-tree-id24809 . -1) (undo-tree-id24810 . -1) (undo-tree-id24811 . -1) (undo-tree-id24812 . -1) (undo-tree-id24813 . -1) (undo-tree-id24814 . -1) 3766 (t 26041 5283 101278 783000)) nil (26041 5324 482090 587000) 0 nil])
([nil nil ((#("_" 0 1 (face font-lock-variable-name-face fontified t)) . -3682) (undo-tree-id24787 . -1) (undo-tree-id24788 . -1) (undo-tree-id24789 . -1) (undo-tree-id24790 . -1) (undo-tree-id24791 . -1) (undo-tree-id24792 . -1) (undo-tree-id24793 . -1) (undo-tree-id24794 . -1) (undo-tree-id24795 . -1) (undo-tree-id24796 . -1) (undo-tree-id24797 . -1) (undo-tree-id24798 . -1) 3683) nil (26041 5324 482077 227000) 0 nil])
([nil nil ((3682 . 3683)) nil (26041 5324 482066 722000) 0 nil])
([nil nil ((3765 . 3766)) nil (26041 5324 482065 789000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -3836) (undo-tree-id24785 . -1) (undo-tree-id24786 . -1) 3837) nil (26041 5324 482063 420000) 0 nil])
([nil nil ((3836 . 3837)) nil (26041 5324 482051 898000) 0 nil])
([nil nil ((2918 . 2926) (t 26041 5324 517947 991000)) nil (26041 5369 160129 717000) 0 nil])
([nil nil ((2926 . 2936)) nil (26041 5369 160128 886000) 0 nil])
([nil nil ((#("+" 0 1 (fontified t)) . -2935) (undo-tree-id24934 . -1) (undo-tree-id24935 . -1) (undo-tree-id24936 . -1) (undo-tree-id24937 . -1) 2936) nil (26041 5369 160128 20000) 0 nil])
([nil nil ((2935 . 2945)) nil (26041 5369 160124 591000) 0 nil])
([nil nil ((2945 . 2946)) nil (26041 5369 160123 976000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -2944) (undo-tree-id24903 . -1) (undo-tree-id24904 . -1) (undo-tree-id24905 . -1) (undo-tree-id24906 . -1) (undo-tree-id24907 . -1) (undo-tree-id24908 . -1) (undo-tree-id24909 . -1) (undo-tree-id24910 . -1) (undo-tree-id24911 . -1) (undo-tree-id24912 . -1) (undo-tree-id24913 . -1) (undo-tree-id24914 . -1) (undo-tree-id24915 . -1) (undo-tree-id24916 . -1) (undo-tree-id24917 . -1) (undo-tree-id24918 . -1) (undo-tree-id24919 . -1) (undo-tree-id24920 . -1) (undo-tree-id24921 . -1) (undo-tree-id24922 . -1) (#("a" 0 1 (fontified t)) . -2945) (undo-tree-id24923 . -1) (undo-tree-id24924 . -1) (undo-tree-id24925 . -1) (undo-tree-id24926 . -1) (undo-tree-id24927 . -1) (undo-tree-id24928 . -1) (undo-tree-id24929 . -1) (undo-tree-id24930 . -1) (undo-tree-id24931 . -1) (undo-tree-id24932 . -1) (undo-tree-id24933 . -1) 2946) nil (26041 5369 160122 59000) 0 nil])
([nil nil ((2944 . 2949)) nil (26041 5369 160100 139000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2957 2966 nil nil nil nil #s(yas--field 2 2968 2974 nil nil nil nil #s(yas--exit 2975 nil))) #s(yas--field 2 2968 2974 nil nil nil nil #s(yas--exit 2975 nil))) #s(yas--exit 2975 nil) 141 nil #s(yas--field 1 2957 2966 nil nil nil nil #s(yas--field 2 2968 2974 nil nil nil nil #s(yas--exit 2975 nil))) nil nil)) (2931 . 2975) (#("zbar_processor_set_active(${1:processor}, ${2:active})$0" 0 56 (fontified nil)) . 2931) (2931 . 2987) (#("zbar_processor_set" 0 18 (fontified nil)) . 2931) (2931 . 2949) (#("zbar_processor_set_active(…)" 0 28 (fontified nil)) . -2931) (2931 . 2959) (#("zbar_processor_set" 0 18 (fontified t)) . -2931) (undo-tree-id24818 . -18) (undo-tree-id24819 . -1) (undo-tree-id24820 . -1) (undo-tree-id24821 . -1) (undo-tree-id24822 . -2) (undo-tree-id24823 . -2) (undo-tree-id24824 . -2) (undo-tree-id24825 . -3) (undo-tree-id24826 . -3) (undo-tree-id24827 . -3) (undo-tree-id24828 . -4) (undo-tree-id24829 . -4) (undo-tree-id24830 . -4) (undo-tree-id24831 . -4) (undo-tree-id24832 . -4) (undo-tree-id24833 . -4) (undo-tree-id24834 . -4) (undo-tree-id24835 . -4) (undo-tree-id24836 . -5) (undo-tree-id24837 . -5) (undo-tree-id24838 . -6) (undo-tree-id24839 . -6) (undo-tree-id24840 . -6) (undo-tree-id24841 . -7) (undo-tree-id24842 . -7) (undo-tree-id24843 . -7) (undo-tree-id24844 . -7) (undo-tree-id24845 . -7) (undo-tree-id24846 . -8) (undo-tree-id24847 . -8) (undo-tree-id24848 . -8) (undo-tree-id24849 . -9) (undo-tree-id24850 . -9) (undo-tree-id24851 . -9) (undo-tree-id24852 . -10) (undo-tree-id24853 . -10) (undo-tree-id24854 . -11) (undo-tree-id24855 . -11) (undo-tree-id24856 . -11) (undo-tree-id24857 . -12) (undo-tree-id24858 . -12) (undo-tree-id24859 . -13) (undo-tree-id24860 . -13) (undo-tree-id24861 . -13) (undo-tree-id24862 . -13) (undo-tree-id24863 . -13) (undo-tree-id24864 . -13) (undo-tree-id24865 . -13) (undo-tree-id24866 . -13) (undo-tree-id24867 . -13) (undo-tree-id24868 . -13) (undo-tree-id24869 . -13) (undo-tree-id24870 . -13) (undo-tree-id24871 . -13) (undo-tree-id24872 . -13) (undo-tree-id24873 . -13) (undo-tree-id24874 . -13) (undo-tree-id24875 . -13) (undo-tree-id24876 . -13) (undo-tree-id24877 . -13) (undo-tree-id24878 . -13) (undo-tree-id24879 . -13) (undo-tree-id24880 . -13) (undo-tree-id24881 . -13) (undo-tree-id24882 . -13) (undo-tree-id24883 . -13) (undo-tree-id24884 . -13) (undo-tree-id24885 . -13) (undo-tree-id24886 . -14) (undo-tree-id24887 . -14) (undo-tree-id24888 . -14) (undo-tree-id24889 . -15) (undo-tree-id24890 . -15) (undo-tree-id24891 . -15) (undo-tree-id24892 . -16) (undo-tree-id24893 . -16) (undo-tree-id24894 . -16) (undo-tree-id24895 . -17) (undo-tree-id24896 . -17) (undo-tree-id24897 . -17) (undo-tree-id24898 . -18) (undo-tree-id24899 . -18) (undo-tree-id24900 . -18) (undo-tree-id24901 . -18) (undo-tree-id24902 . -18) 2949) nil (26041 5369 160095 514000) 0 nil])
([nil nil ((apply yas--snippet-revive 2931 2975 #s(yas--snippet nil (#s(yas--field 1 2957 2966 nil nil nil nil #s(yas--field 2 2968 2974 nil nil nil nil #s(yas--exit 2975 nil))) #s(yas--field 2 2968 2974 nil nil nil nil #s(yas--exit 2975 nil))) #s(yas--exit 2975 nil) 141 nil #s(yas--field 1 2957 2966 nil nil nil nil #s(yas--field 2 2968 2974 nil nil nil nil #s(yas--exit 2975 nil))) nil nil))) nil (26041 5369 159963 680000) 0 nil])
([nil nil ((#("active" 0 6 (fontified t)) . -2968) (undo-tree-id24815 . -6) (undo-tree-id24816 . -6) (undo-tree-id24817 . -6) 2974) nil (26041 5369 159961 797000) 0 nil])
([nil nil ((2968 . 2969)) nil (26041 5369 159951 764000) 0 nil])
([nil nil ((2970 . 2971)) nil (26041 5369 159947 428000) 0 nil])
([nil nil ((2999 . 3001) (t 26041 5369 194617 399000)) nil (26041 5371 395255 207000) 0 nil])
([nil nil ((3111 . 3124) (t 26041 5371 431284 203000)) nil (26041 5473 644122 991000) 0 nil])
([nil nil ((3124 . 3128)) nil (26041 5473 644122 178000) 0 nil])
([nil nil ((3127 . 3137) (#("s" 0 1 (fontified nil)) . 3127) (3127 . 3128) (#("symbol_set" 0 10 (fontified nil)) . -3127) (3127 . 3137) (#("s" 0 1 (fontified t)) . -3127) (undo-tree-id24993 . -1) (undo-tree-id24994 . -1) (undo-tree-id24995 . -1) (undo-tree-id24996 . -1) (undo-tree-id24997 . -1) (undo-tree-id24998 . -1) 3128) nil (26041 5473 644120 811000) 0 nil])
([nil nil ((3137 . 3140)) nil (26041 5473 644115 301000) 0 nil])
([nil nil ((apply yas--snippet-revive 3138 3147 #s(yas--snippet nil nil #s(yas--exit 3147 nil) 142 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 3147 nil) 142 nil nil nil nil)) (3138 . 3147) (#("is_null()$0" 0 11 (fontified nil)) . 3138) (3138 . 3149) (#("is" 0 2 (fontified nil)) . 3138) (3138 . 3140) (#("is_null()" 0 9 (fontified nil)) . -3138) (3138 . 3147) (#("is" 0 2 (fontified t)) . -3138) (undo-tree-id24984 . -2) (undo-tree-id24985 . -1) (undo-tree-id24986 . -1) (undo-tree-id24987 . -1) (undo-tree-id24988 . -2) (undo-tree-id24989 . -2) (undo-tree-id24990 . -2) (undo-tree-id24991 . -2) (undo-tree-id24992 . -2) 3140) nil (26041 5473 644113 353000) 0 nil])
([nil nil ((3147 . 3150)) nil (26041 5473 644089 336000) 0 nil])
([nil nil ((3151 . 3163) (#("                " 0 16 (fontified nil)) . 3150) (3150 . 3166) (#("            " 0 12 (fontified nil)) . 3150) (undo-tree-id24979 . -12) (undo-tree-id24980 . -12) (undo-tree-id24981 . -12) (undo-tree-id24982 . -12) (undo-tree-id24983 . -12) (3149 . 3163)) nil (26041 5473 644088 131000) 0 nil])
([nil nil ((3150 . 3166)) nil (26041 5473 644082 824000) 0 nil])
([nil nil ((3166 . 3169)) nil (26041 5473 644082 181000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -3167) (undo-tree-id24964 . -1) (undo-tree-id24965 . -1) (undo-tree-id24966 . -1) (undo-tree-id24967 . -1) (undo-tree-id24968 . -1) (undo-tree-id24969 . -1) (undo-tree-id24970 . -1) (undo-tree-id24971 . -1) (undo-tree-id24972 . -1) (undo-tree-id24973 . -1) (#("o" 0 1 (fontified t)) . -3168) (undo-tree-id24974 . -1) (undo-tree-id24975 . -1) (undo-tree-id24976 . -1) (undo-tree-id24977 . -1) (undo-tree-id24978 . -1) 3169) nil (26041 5473 644080 466000) 0 nil])
([nil nil ((3167 . 3171)) nil (26041 5473 644067 844000) 0 nil])
([nil nil ((apply yas--snippet-revive 3166 3175 #s(yas--snippet nil nil nil 143 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 143 nil nil nil nil)) (3166 . 3175) (#("continue;" 0 9 (fontified nil)) . 3166) (3166 . 3175) (#("conti" 0 5 (fontified nil)) . 3166) (3166 . 3171) (#("continue" 0 8 (fontified nil)) . -3166) (3166 . 3174) (#("conti" 0 5 (fontified t)) . -3166) (undo-tree-id24938 . -5) (undo-tree-id24939 . -1) (undo-tree-id24940 . -1) (undo-tree-id24941 . -1) (undo-tree-id24942 . -1) (undo-tree-id24943 . -1) (undo-tree-id24944 . -1) (undo-tree-id24945 . -1) (undo-tree-id24946 . -1) (undo-tree-id24947 . -1) (undo-tree-id24948 . -1) (undo-tree-id24949 . -1) (undo-tree-id24950 . -1) (undo-tree-id24951 . -1) (undo-tree-id24952 . -1) (undo-tree-id24953 . -2) (undo-tree-id24954 . -2) (undo-tree-id24955 . -3) (undo-tree-id24956 . -3) (undo-tree-id24957 . -4) (undo-tree-id24958 . -4) (undo-tree-id24959 . -4) (undo-tree-id24960 . -5) (undo-tree-id24961 . -5) (undo-tree-id24962 . -5) (undo-tree-id24963 . -5) 3171) nil (26041 5639 580539 220000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -4029) (undo-tree-id25144 . -1) (undo-tree-id25145 . -1) (undo-tree-id25146 . -1) (undo-tree-id25147 . -1) (undo-tree-id25148 . -1) (undo-tree-id25149 . -1) (undo-tree-id25150 . -1) (undo-tree-id25151 . -1) (undo-tree-id25152 . -1) (undo-tree-id25153 . -1) (undo-tree-id25154 . -1) (undo-tree-id25155 . -1) (undo-tree-id25156 . -1) (undo-tree-id25157 . -1) 4030) nil (26041 5643 110307 94000) 0 nil] [nil nil ((#("n" 0 1 (fontified t)) . -4029) (undo-tree-id25078 . -1) (undo-tree-id25079 . -1) (undo-tree-id25080 . -1) (undo-tree-id25081 . -1) (undo-tree-id25082 . -1) (undo-tree-id25083 . -1) (undo-tree-id25084 . -1) (undo-tree-id25085 . -1) (undo-tree-id25086 . -1) 4030 (t 26041 5473 714623 813000)) ((4029 . 4030)) (26041 5638 810059 322000) 0 nil])
([nil nil ((#("loc_" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -4025) (undo-tree-id25109 . -4) (undo-tree-id25110 . -4) (undo-tree-id25111 . -3) (undo-tree-id25112 . -4) (undo-tree-id25113 . -4) (undo-tree-id25114 . -4) (undo-tree-id25115 . -4) (undo-tree-id25116 . -4) (undo-tree-id25117 . -4) (undo-tree-id25118 . -4) (undo-tree-id25119 . -4) (undo-tree-id25120 . -4) (undo-tree-id25121 . -4) (undo-tree-id25122 . -4) (undo-tree-id25123 . -4) (undo-tree-id25124 . -4) (undo-tree-id25125 . -4) (undo-tree-id25126 . -3) (undo-tree-id25127 . -3) (undo-tree-id25128 . -2) (undo-tree-id25129 . -2) (undo-tree-id25130 . -1) (undo-tree-id25131 . -1) (undo-tree-id25132 . -4) (undo-tree-id25133 . -4) (undo-tree-id25134 . -4) (undo-tree-id25135 . -4) (undo-tree-id25136 . -4) (undo-tree-id25137 . -4) (undo-tree-id25138 . -4) (undo-tree-id25139 . -4) (undo-tree-id25140 . -4) (undo-tree-id25141 . -4) (undo-tree-id25142 . -4) (undo-tree-id25143 . -4) 4029) nil (26041 5643 110293 189000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -4025) (undo-tree-id24999 . -1) (undo-tree-id25000 . -1) (undo-tree-id25001 . -1) (undo-tree-id25002 . -1) (undo-tree-id25003 . -1) (undo-tree-id25004 . -1) (undo-tree-id25005 . -1) (undo-tree-id25006 . -1) (undo-tree-id25007 . -1) (undo-tree-id25008 . -1) (undo-tree-id25009 . -1) (undo-tree-id25010 . -1) (undo-tree-id25011 . -1) (undo-tree-id25012 . -1) (undo-tree-id25013 . -1) (undo-tree-id25014 . -1) (undo-tree-id25015 . -1) (undo-tree-id25016 . -1) (undo-tree-id25017 . -1) (undo-tree-id25018 . -1) (undo-tree-id25019 . -1) (undo-tree-id25020 . -1) (undo-tree-id25021 . -1) (#("o" 0 1 (fontified t)) . -4026) (undo-tree-id25022 . -1) (undo-tree-id25023 . -1) (undo-tree-id25024 . -1) (undo-tree-id25025 . -1) (undo-tree-id25026 . -1) (undo-tree-id25027 . -1) (undo-tree-id25028 . -1) (undo-tree-id25029 . -1) (undo-tree-id25030 . -1) (undo-tree-id25031 . -1) (undo-tree-id25032 . -1) (undo-tree-id25033 . -1) (undo-tree-id25034 . -1) (undo-tree-id25035 . -1) (undo-tree-id25036 . -1) (undo-tree-id25037 . -1) (undo-tree-id25038 . -1) (undo-tree-id25039 . -1) (undo-tree-id25040 . -1) (undo-tree-id25041 . -1) (undo-tree-id25042 . -1) (#("c" 0 1 (fontified t)) . -4027) (undo-tree-id25043 . -1) (undo-tree-id25044 . -1) (undo-tree-id25045 . -1) (undo-tree-id25046 . -1) (undo-tree-id25047 . -1) (undo-tree-id25048 . -1) (undo-tree-id25049 . -1) (undo-tree-id25050 . -1) (undo-tree-id25051 . -1) (undo-tree-id25052 . -1) (undo-tree-id25053 . -1) (undo-tree-id25054 . -1) (undo-tree-id25055 . -1) (undo-tree-id25056 . -1) (undo-tree-id25057 . -1) (undo-tree-id25058 . -1) (undo-tree-id25059 . -1) (undo-tree-id25060 . -1) (undo-tree-id25061 . -1) (#("_" 0 1 (fontified t)) . -4028) (undo-tree-id25062 . -1) (undo-tree-id25063 . -1) (undo-tree-id25064 . -1) (undo-tree-id25065 . -1) (undo-tree-id25066 . -1) (undo-tree-id25067 . -1) (undo-tree-id25068 . -1) (undo-tree-id25069 . -1) (undo-tree-id25070 . -1) (undo-tree-id25071 . -1) (undo-tree-id25072 . -1) (undo-tree-id25073 . -1) (undo-tree-id25074 . -1) (undo-tree-id25075 . -1) (undo-tree-id25076 . -1) (undo-tree-id25077 . -1) 4029) ((4025 . 4029)) (26041 5636 316206 127000) 0 nil])
([nil nil ((4025 . 4026)) nil (26041 5643 110256 869000) 0 nil])
([nil nil ((4025 . 4026)) ((#("i" 0 1 (fontified t)) . 4025) (undo-tree-id25087 . -1) (undo-tree-id25088 . -1) (undo-tree-id25089 . -1) (undo-tree-id25090 . -1) (undo-tree-id25091 . -1) (undo-tree-id25092 . -1) (undo-tree-id25093 . -1) (undo-tree-id25094 . -1) (undo-tree-id25095 . -1) (undo-tree-id25096 . -1) (undo-tree-id25097 . -1) (undo-tree-id25098 . -1) (undo-tree-id25099 . -1) (undo-tree-id25100 . -1) (undo-tree-id25101 . -1) (undo-tree-id25102 . -1) (undo-tree-id25103 . -1) (undo-tree-id25104 . -1) (undo-tree-id25105 . -1) (undo-tree-id25106 . -1) (undo-tree-id25107 . -1) (undo-tree-id25108 . -1) (t 26041 5508 214625 930000)) (26041 5508 146800 417000) 0 nil])
([nil nil ((2871 . 2873) (t 26041 5643 134634 208000)) nil (26041 5648 477819 812000) 0 nil])
nil
([nil nil ((#("/" 0 1 (fontified t)) . -2871) (undo-tree-id25158 . -1) (undo-tree-id25159 . -1) (undo-tree-id25160 . -1) (undo-tree-id25161 . -1) (undo-tree-id25162 . -1) (undo-tree-id25163 . -1) (undo-tree-id25164 . -1) (undo-tree-id25165 . -1) (undo-tree-id25166 . -1) (undo-tree-id25167 . -1) (undo-tree-id25168 . -1) (undo-tree-id25169 . -1) (undo-tree-id25170 . -1) (undo-tree-id25171 . -1) (undo-tree-id25172 . -1) (undo-tree-id25173 . -1) (undo-tree-id25174 . -1) (undo-tree-id25175 . -1) (undo-tree-id25176 . -1) (undo-tree-id25177 . -1) (undo-tree-id25178 . -1) (undo-tree-id25179 . -1) (undo-tree-id25180 . -1) (undo-tree-id25181 . -1) (undo-tree-id25182 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -2872) (undo-tree-id25183 . -1) (undo-tree-id25184 . -1) (undo-tree-id25185 . -1) (undo-tree-id25186 . -1) (undo-tree-id25187 . -1) (undo-tree-id25188 . -1) (undo-tree-id25189 . -1) (undo-tree-id25190 . -1) (undo-tree-id25191 . -1) (undo-tree-id25192 . -1) (undo-tree-id25193 . -1) (undo-tree-id25194 . -1) (undo-tree-id25195 . -1) (undo-tree-id25196 . -1) (undo-tree-id25197 . -1) (undo-tree-id25198 . -1) (undo-tree-id25199 . -1) (undo-tree-id25200 . -1) (undo-tree-id25201 . -1) (undo-tree-id25202 . -1) (undo-tree-id25203 . -1) (undo-tree-id25204 . -1) (undo-tree-id25205 . -1) 2873 (t 26041 5648 547967 875000)) nil (26041 5675 687300 557000) 0 nil])
([nil nil ((2926 . 2928) (t 26041 5675 757969 545000)) nil (26041 5680 307575 575000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -2926) (undo-tree-id25206 . -1) (undo-tree-id25207 . -1) (undo-tree-id25208 . -1) (undo-tree-id25209 . -1) (undo-tree-id25210 . -1) (undo-tree-id25211 . -1) (undo-tree-id25212 . -1) (undo-tree-id25213 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -2927) (undo-tree-id25214 . -1) (undo-tree-id25215 . -1) (undo-tree-id25216 . -1) 2928) nil (26041 5680 307571 47000) 0 nil])
([nil nil ((2926 . 2928) (t 26041 5680 377969 828000)) nil (26041 5780 360260 443000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 2999)) nil (26041 5780 360259 273000) 0 nil])
([nil nil ((3000 . 3001) 2999) nil (26041 5780 360257 659000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . 3001) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 3001)) nil (26041 5780 360253 76000) 0 nil])
([nil nil ((2871 . 2873) (t 26041 5780 431309 302000)) nil (26041 5838 200616 441000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -2871) (undo-tree-id25217 . -1) (undo-tree-id25218 . -1) (undo-tree-id25219 . -1) (undo-tree-id25220 . -1) (undo-tree-id25221 . -1) (undo-tree-id25222 . -1) (undo-tree-id25223 . -1) (undo-tree-id25224 . -1) (undo-tree-id25225 . -1) (undo-tree-id25226 . -1) (undo-tree-id25227 . -1) (undo-tree-id25228 . -1) (undo-tree-id25229 . -1) (undo-tree-id25230 . -1) (undo-tree-id25231 . -1) (undo-tree-id25232 . -1) (undo-tree-id25233 . -1) (undo-tree-id25234 . -1) (undo-tree-id25235 . -1) (undo-tree-id25236 . -1) (undo-tree-id25237 . -1) (undo-tree-id25238 . -1) (undo-tree-id25239 . -1) (undo-tree-id25240 . -1) (undo-tree-id25241 . -1) (undo-tree-id25242 . -1) (undo-tree-id25243 . -1) (undo-tree-id25244 . -1) (undo-tree-id25245 . -1) (undo-tree-id25246 . -1) (undo-tree-id25247 . -1) (undo-tree-id25248 . -1) (undo-tree-id25249 . -1) (undo-tree-id25250 . -1) (undo-tree-id25251 . -1) (undo-tree-id25252 . -1) (undo-tree-id25253 . -1) (undo-tree-id25254 . -1) (undo-tree-id25255 . -1) (undo-tree-id25256 . -1) (undo-tree-id25257 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -2872) (undo-tree-id25258 . -1) (undo-tree-id25259 . -1) (undo-tree-id25260 . -1) (undo-tree-id25261 . -1) (undo-tree-id25262 . -1) (undo-tree-id25263 . -1) (undo-tree-id25264 . -1) (undo-tree-id25265 . -1) (undo-tree-id25266 . -1) (undo-tree-id25267 . -1) (undo-tree-id25268 . -1) (undo-tree-id25269 . -1) (undo-tree-id25270 . -1) (undo-tree-id25271 . -1) (undo-tree-id25272 . -1) (undo-tree-id25273 . -1) (undo-tree-id25274 . -1) (undo-tree-id25275 . -1) (undo-tree-id25276 . -1) (undo-tree-id25277 . -1) (undo-tree-id25278 . -1) (undo-tree-id25279 . -1) (undo-tree-id25280 . -1) (undo-tree-id25281 . -1) (undo-tree-id25282 . -1) (undo-tree-id25283 . -1) (undo-tree-id25284 . -1) (undo-tree-id25285 . -1) (undo-tree-id25286 . -1) (undo-tree-id25287 . -1) (undo-tree-id25288 . -1) (undo-tree-id25289 . -1) (undo-tree-id25290 . -1) (undo-tree-id25291 . -1) (undo-tree-id25292 . -1) (undo-tree-id25293 . -1) (undo-tree-id25294 . -1) (undo-tree-id25295 . -1) (undo-tree-id25296 . -1) 2873 (t 26041 5838 237979 516000)) nil (26041 5874 821658 323000) 0 nil])
([nil nil ((4166 . 4168) (t 26041 5874 887981 768000)) nil (26041 6043 918897 435000) 0 nil])
([nil nil ((2871 . 2873) (t 26041 6043 954658 818000)) nil (26041 6325 257981 658000) 0 nil])
([nil nil ((#("unsafe" 0 6 (face rust-unsafe fontified t)) . -648) (undo-tree-id25350 . -6) (undo-tree-id25351 . -6) (undo-tree-id25352 . -6) (undo-tree-id25353 . -6) (undo-tree-id25354 . -6) (undo-tree-id25355 . -6) (undo-tree-id25356 . -6) (undo-tree-id25357 . -6) (undo-tree-id25358 . -6) (undo-tree-id25359 . -6) (undo-tree-id25360 . -6) (undo-tree-id25361 . -6) (undo-tree-id25362 . -6) (undo-tree-id25363 . -6) 654 (t 26041 6325 294676 93000)) nil (26041 6805 269430 172000) 0 nil])
([nil nil ((648 . 650)) nil (26041 6805 269418 767000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -649) (undo-tree-id25344 . -1) (undo-tree-id25345 . -1) (undo-tree-id25346 . -1) (undo-tree-id25347 . -1) (undo-tree-id25348 . -1) (undo-tree-id25349 . -1) 650) nil (26041 6805 269417 828000) 0 nil])
([nil nil ((649 . 650)) nil (26041 6805 269413 94000) 0 nil])
([nil nil ((apply yas--snippet-revive 648 655 #s(yas--snippet nil nil #s(yas--exit 655 nil) 144 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 655 nil) 144 nil nil nil nil)) (648 . 655) (#("extern $0" 0 9 (fontified nil)) . 648) (648 . 657) (#("ex" 0 2 (fontified nil)) . 648) (648 . 650) (#("extern" 0 6 (fontified nil)) . -648) (648 . 654) (#("ex" 0 2 (fontified t)) . -648) (undo-tree-id25325 . -2) (undo-tree-id25326 . -1) (undo-tree-id25327 . -1) (undo-tree-id25328 . -1) (undo-tree-id25329 . -1) (undo-tree-id25330 . -1) (undo-tree-id25331 . -1) (undo-tree-id25332 . -1) (undo-tree-id25333 . -1) (undo-tree-id25334 . -1) (undo-tree-id25335 . -1) (undo-tree-id25336 . -1) (undo-tree-id25337 . -1) (undo-tree-id25338 . -1) (undo-tree-id25339 . -2) (undo-tree-id25340 . -2) (undo-tree-id25341 . -2) (undo-tree-id25342 . -2) (undo-tree-id25343 . -2) 650) nil (26041 6805 269411 103000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -654) (undo-tree-id25314 . -1) (undo-tree-id25315 . -1) (undo-tree-id25316 . -1) (undo-tree-id25317 . -1) (undo-tree-id25318 . -1) (undo-tree-id25319 . -1) (undo-tree-id25320 . -1) (undo-tree-id25321 . -1) (undo-tree-id25322 . -1) (undo-tree-id25323 . -1) (undo-tree-id25324 . -1) 655) nil (26041 6805 269394 265000) 0 nil])
([nil nil ((738 . 743)) nil (26041 6805 269385 596000) 0 nil])
([nil nil ((743 . 747)) nil (26041 6805 269384 988000) 0 nil])
([nil nil ((apply yas--snippet-revive 743 749 #s(yas--snippet nil nil nil 145 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 145 nil nil nil nil)) (743 . 749) (#("unsafe" 0 6 (fontified nil)) . 743) (743 . 749) (#("unsa" 0 4 (fontified nil)) . 743) (743 . 747) (#("unsafe" 0 6 (fontified nil)) . -743) (743 . 749) (#("unsa" 0 4 (fontified t)) . -743) (undo-tree-id25302 . -4) (undo-tree-id25303 . -1) (undo-tree-id25304 . -1) (undo-tree-id25305 . -2) (undo-tree-id25306 . -2) (undo-tree-id25307 . -2) (undo-tree-id25308 . -3) (undo-tree-id25309 . -3) (undo-tree-id25310 . -3) (undo-tree-id25311 . -4) (undo-tree-id25312 . -4) (undo-tree-id25313 . -4) 747) nil (26041 6805 269383 113000) 0 nil])
([nil nil ((749 . 751)) nil (26041 6805 269372 239000) 0 nil])
([nil nil ((1227 . 1236)) nil (26041 6805 269371 520000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -1232) (undo-tree-id25298 . -4) (undo-tree-id25299 . -4) (undo-tree-id25300 . -4) (undo-tree-id25301 . -4) (1236 . 1237)) nil (26041 6805 269369 762000) 0 nil])
([nil nil ((1271 . 1279) (#("    " 0 4 (fontified t)) . 1271) (1227 . 1231) (1212 . 1216) (1158 . 1174) (#("            " 0 11 (fontified t) 11 12 (fontified t)) . 1158) (1143 . 1147) (1113 . 1117) (1034 . 1050) (#("            " 0 12 (fontified t)) . 1034) (986 . 1002) (#("            " 0 12 (fontified t)) . 986) (undo-tree-id25297 . -5) (972 . 976) (914 . 918) (857 . 861) (815 . 823) (#("    " 0 4 (fontified t)) . 815) (752 . 760) (#("   " 0 3 (fontified t)) . 752) 647) nil (26041 6805 269361 237000) 0 nil])
([nil nil ((710 . 711) (t 26041 6805 308038 882000)) nil (26041 6822 950072 796000) 0 nil])
([nil nil ((2935 . 2944) (t 26041 6822 984706 635000)) nil (26041 6884 792061 492000) 0 nil])
([nil nil ((2944 . 2954)) nil (26041 6884 792060 721000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -2950) (undo-tree-id25472 . -1) (#("b" 0 1 (fontified t)) . -2951) (undo-tree-id25473 . -1) (#("a" 0 1 (fontified t)) . -2952) (undo-tree-id25474 . -1) (#("r" 0 1 (fontified t)) . -2953) (undo-tree-id25475 . -1) 2954) nil (26041 6884 792059 704000) 0 nil])
([nil nil ((2950 . 2954)) nil (26041 6884 792055 699000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2951) (undo-tree-id25469 . -1) (#("a" 0 1 (fontified t)) . -2952) (undo-tree-id25470 . -1) (#("r" 0 1 (fontified t)) . -2953) (undo-tree-id25471 . -1) 2954) nil (26041 6884 792054 769000) 0 nil])
([nil nil ((2951 . 2956)) nil (26041 6884 792051 947000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -2954) (undo-tree-id25467 . -1) (#("p" 0 1 (fontified t)) . -2955) (undo-tree-id25468 . -1) 2956) nil (26041 6884 792051 115000) 0 nil])
([nil nil ((2954 . 2956)) nil (26041 6884 792048 562000) 0 nil])
([nil nil ((#("P" 0 1 (fontified t)) . -2954) (undo-tree-id25465 . -1) (#("r" 0 1 (fontified t)) . -2955) (undo-tree-id25466 . -1) 2956) nil (26041 6884 792047 702000) 0 nil])
([nil nil ((2954 . 2967)) nil (26041 6884 792044 836000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2981 2990 nil nil nil nil #s(yas--field 2 2992 2999 nil nil nil nil #s(yas--field 3 3001 3009 nil nil nil nil #s(yas--exit 3010 nil)))) #s(yas--field 2 2992 2999 nil nil nil nil #s(yas--field 3 3001 3009 nil nil nil nil #s(yas--exit 3010 nil))) #s(yas--field 3 3001 3009 nil nil nil nil #s(yas--exit 3010 nil))) #s(yas--exit 3010 nil) 146 nil #s(yas--field 1 2981 2990 nil nil nil nil #s(yas--field 2 2992 2999 nil nil nil nil #s(yas--field 3 3001 3009 nil nil nil nil #s(yas--exit 3010 nil)))) nil nil)) (2949 . 3010) (#("zbar_processor_set_data_handler(${1:processor}, ${2:handler}, ${3:userdata})$0" 0 78 (fontified nil)) . 2949) (2949 . 3027) (#("zbar_processor_set" 0 18 (fontified nil)) . 2949) (2949 . 2967) (#("zbar_processor_set_data_handler(…)" 0 34 (fontified nil)) . -2949) (2949 . 2983) (#("zbar_processor_set" 0 18 (fontified t)) . -2949) (undo-tree-id25434 . -18) (undo-tree-id25435 . -9) (undo-tree-id25436 . -9) (undo-tree-id25437 . -10) (undo-tree-id25438 . -10) (undo-tree-id25439 . -11) (undo-tree-id25440 . -11) (undo-tree-id25441 . -11) (undo-tree-id25442 . -12) (undo-tree-id25443 . -12) (undo-tree-id25444 . -12) (undo-tree-id25445 . -13) (undo-tree-id25446 . -13) (undo-tree-id25447 . -13) (undo-tree-id25448 . -14) (undo-tree-id25449 . -14) (undo-tree-id25450 . -14) (undo-tree-id25451 . -15) (undo-tree-id25452 . -15) (undo-tree-id25453 . -15) (undo-tree-id25454 . -16) (undo-tree-id25455 . -16) (undo-tree-id25456 . -16) (undo-tree-id25457 . -17) (undo-tree-id25458 . -17) (undo-tree-id25459 . -17) (undo-tree-id25460 . -18) (undo-tree-id25461 . -18) (undo-tree-id25462 . -18) (undo-tree-id25463 . -18) (undo-tree-id25464 . -18) 2967) nil (26041 6884 792042 404000) 0 nil])
([nil nil ((apply yas--snippet-revive 2949 3010 #s(yas--snippet nil (#s(yas--field 1 2981 2990 nil nil nil nil #s(yas--field 2 2992 2999 nil nil nil nil #s(yas--field 3 3001 3009 nil nil nil nil #s(yas--exit 3010 nil)))) #s(yas--field 2 2992 2999 nil nil nil nil #s(yas--field 3 3001 3009 nil nil nil nil #s(yas--exit 3010 nil))) #s(yas--field 3 3001 3009 nil nil nil nil #s(yas--exit 3010 nil))) #s(yas--exit 3010 nil) 146 nil #s(yas--field 1 2981 2990 nil nil nil nil #s(yas--field 2 2992 2999 nil nil nil nil #s(yas--field 3 3001 3009 nil nil nil nil #s(yas--exit 3010 nil)))) nil nil))) nil (26041 6884 792018 440000) 0 nil])
([nil nil ((#("userdata" 0 8 (fontified t)) . -3001) (undo-tree-id25431 . -8) (undo-tree-id25432 . -8) (undo-tree-id25433 . -8) 3009) nil (26041 6884 792017 625000) 0 nil])
([nil nil ((3001 . 3007)) nil (26041 6884 792014 720000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -3006) (undo-tree-id25422 . -1) (undo-tree-id25423 . -1) (undo-tree-id25424 . -1) (undo-tree-id25425 . -1) (undo-tree-id25426 . -1) (undo-tree-id25427 . -1) (undo-tree-id25428 . -1) (undo-tree-id25429 . -1) (undo-tree-id25430 . -1) 3007) nil (26041 6884 792013 493000) 0 nil])
([nil nil ((3006 . 3012)) nil (26041 6884 792005 217000) 0 nil])
([nil nil ((apply yas--snippet-revive 3011 3017 #s(yas--snippet nil nil #s(yas--exit 3017 nil) 147 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 3017 nil) 147 nil nil nil nil)) (3011 . 3017) (#("null()$0" 0 8 (fontified nil)) . 3011) (3011 . 3019) (#("n" 0 1 (fontified nil)) . 3011) (3011 . 3012) (#("null()" 0 6 (fontified nil)) . -3011) (3011 . 3017) (#("n" 0 1 (fontified t)) . -3011) (undo-tree-id25415 . -1) (undo-tree-id25416 . -1) (undo-tree-id25417 . -1) (undo-tree-id25418 . -1) (undo-tree-id25419 . -1) (undo-tree-id25420 . -1) (undo-tree-id25421 . -1) 3012) nil (26041 6884 792003 544000) 0 nil])
([nil nil ((3018 . 3019)) nil (26041 6884 791996 863000) 0 nil])
([nil nil ((#("handler" 0 7 (fontified t)) . -2992) (undo-tree-id25408 . -7) (undo-tree-id25409 . -7) (undo-tree-id25410 . -7) (undo-tree-id25411 . -7) (undo-tree-id25412 . -7) (undo-tree-id25413 . -7) (undo-tree-id25414 . -7) 2999) nil (26041 6884 791995 762000) 0 nil])
([nil nil ((2992 . 2993)) nil (26041 6884 791990 87000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 3003 3003 nil nil nil t #s(yas--field 2 3003 3003 nil nil nil nil #s(yas--exit 3004 nil))) #s(yas--field 2 3003 3003 nil nil nil nil #s(yas--exit 3004 nil))) #s(yas--exit 3004 nil) 148 nil #s(yas--field 1 3003 3003 nil nil nil t #s(yas--field 2 3003 3003 nil nil nil nil #s(yas--exit 3004 nil))) nil nil)) (2992 . 3019) (#("my_handler(${1:image}, ${2:userdata})$0" 0 39 (fontified nil)) . 2992) (2992 . 3031) (#("m" 0 1 (fontified nil)) . 2992) (2992 . 2993) (#("my_handler(…)" 0 13 (fontified nil)) . -2992) (2992 . 3005) (#("m" 0 1 (fontified t)) . -2992) (undo-tree-id25402 . -1) (undo-tree-id25403 . -1) (undo-tree-id25404 . -1) (undo-tree-id25405 . -1) (undo-tree-id25406 . -1) (undo-tree-id25407 . -1) 2993) nil (26041 6884 791988 634000) 0 nil])
([nil nil ((#("image" 0 5 (fontified t)) . 3003) (undo-tree-id25400 . -5) (undo-tree-id25401 . -5)) nil (26041 6884 791981 786000) 0 nil])
([nil nil ((#(", userdata" 0 10 (fontified t)) . 3003) (undo-tree-id25397 . -2) (undo-tree-id25398 . -10) (undo-tree-id25399 . -10)) nil (26041 6884 791978 260000) 0 nil])
([nil nil ((apply yas--snippet-revive 2992 3004 #s(yas--snippet nil (#s(yas--field 1 3003 3003 nil nil nil t #s(yas--field 2 3003 3003 nil nil nil nil #s(yas--exit 3004 nil))) #s(yas--field 2 3003 3003 nil nil nil nil #s(yas--exit 3004 nil))) #s(yas--exit 3004 nil) 148 nil #s(yas--field 1 3003 3003 nil nil nil t #s(yas--field 2 3003 3003 nil nil nil nil #s(yas--exit 3004 nil))) nil nil))) nil (26041 6884 791972 88000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -3002) (undo-tree-id25364 . -1) (undo-tree-id25365 . -1) (undo-tree-id25366 . -1) (undo-tree-id25367 . -1) (undo-tree-id25368 . -1) (undo-tree-id25369 . -1) (undo-tree-id25370 . -1) (undo-tree-id25371 . -1) (undo-tree-id25372 . -1) (undo-tree-id25373 . -1) (undo-tree-id25374 . -1) (undo-tree-id25375 . -1) (undo-tree-id25376 . -1) (undo-tree-id25377 . -1) (undo-tree-id25378 . -1) (undo-tree-id25379 . -1) (undo-tree-id25380 . -1) (undo-tree-id25381 . -1) (undo-tree-id25382 . -1) (undo-tree-id25383 . -1) (undo-tree-id25384 . -1) (undo-tree-id25385 . -1) (undo-tree-id25386 . -1) (undo-tree-id25387 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -3003) (undo-tree-id25388 . -1) (undo-tree-id25389 . -1) (undo-tree-id25390 . -1) (undo-tree-id25391 . -1) (undo-tree-id25392 . -1) (undo-tree-id25393 . -1) (undo-tree-id25394 . -1) (undo-tree-id25395 . -1) (undo-tree-id25396 . -1) 3004) nil (26041 6884 791964 994000) 0 nil])
([nil nil ((2995 . 2996) (t 26041 6884 861377 99000)) nil (26041 6895 175874 638000) 0 nil])
([nil nil ((#("S" 0 1 (fontified t)) . -2995) (undo-tree-id25577 . -1) (undo-tree-id25578 . -1) (undo-tree-id25579 . -1) (undo-tree-id25580 . -1) (undo-tree-id25581 . -1) (undo-tree-id25582 . -1) (undo-tree-id25583 . -1) (undo-tree-id25584 . -1) (undo-tree-id25585 . -1) (undo-tree-id25586 . -1) (undo-tree-id25587 . -1) 2996) nil (26041 6895 175873 266000) 0 nil])
([nil nil ((2992 . 2993)) nil (26041 6895 175865 999000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 2997 3007 nil nil nil t #s(yas--exit 3008 nil))) #s(yas--exit 3008 nil) 149 nil #s(yas--field 1 2997 3007 nil nil nil t #s(yas--exit 3008 nil)) nil nil)) (2992 . 3000) (#("Some(${1:()})$0" 0 15 (fontified nil)) . 2992) (2992 . 3007) (#("Smy_handler" 0 1 (fontified nil) 1 11 (face font-lock-type-face fontified nil)) . 2992) (undo-tree-id25514 . -11) (undo-tree-id25515 . -11) (undo-tree-id25516 . -11) (undo-tree-id25517 . -11) (undo-tree-id25518 . -11) (undo-tree-id25519 . -11) (undo-tree-id25520 . -11) (undo-tree-id25521 . -11) (undo-tree-id25522 . -11) (undo-tree-id25523 . -11) (undo-tree-id25524 . -11) (undo-tree-id25525 . -11) (undo-tree-id25526 . -11) (undo-tree-id25527 . -11) (undo-tree-id25528 . -11) (undo-tree-id25529 . -11) (undo-tree-id25530 . -11) (undo-tree-id25531 . -11) (undo-tree-id25532 . -11) (undo-tree-id25533 . -11) (undo-tree-id25534 . -11) (undo-tree-id25535 . -11) (undo-tree-id25536 . -11) (undo-tree-id25537 . -11) (undo-tree-id25538 . -11) (undo-tree-id25539 . -11) (undo-tree-id25540 . -11) (undo-tree-id25541 . -11) (undo-tree-id25542 . -11) (undo-tree-id25543 . -11) (undo-tree-id25544 . -11) (undo-tree-id25545 . -11) (undo-tree-id25546 . -11) (undo-tree-id25547 . -11) (undo-tree-id25548 . -11) (undo-tree-id25549 . -4) (undo-tree-id25550 . -4) (undo-tree-id25551 . -4) (undo-tree-id25552 . -4) (undo-tree-id25553 . -4) (undo-tree-id25554 . -4) (undo-tree-id25555 . -4) (undo-tree-id25556 . -4) (undo-tree-id25557 . -4) (undo-tree-id25558 . -4) (undo-tree-id25559 . -4) (undo-tree-id25560 . -4) (undo-tree-id25561 . -3) (undo-tree-id25562 . -3) (undo-tree-id25563 . -3) (undo-tree-id25564 . 10) (2992 . 2993) (#("Some(…)" 0 7 (fontified nil)) . -2992) (2992 . 2999) (#("S" 0 1 (face font-lock-type-face fontified t)) . -2992) (undo-tree-id25565 . -1) (undo-tree-id25566 . -1) (undo-tree-id25567 . -1) (undo-tree-id25568 . -1) (undo-tree-id25569 . -1) (undo-tree-id25570 . -1) (undo-tree-id25571 . -1) (undo-tree-id25572 . -1) (undo-tree-id25573 . -1) (undo-tree-id25574 . -1) (undo-tree-id25575 . -1) (undo-tree-id25576 . -1) 2993) nil (26041 6895 175862 254000) 0 nil])
([nil nil ((2998 . 3003) (#("()" 0 1 (face (rainbow-delimiters-depth-5-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-5-face) fontified nil)) . 2998) (undo-tree-id25513 . -2) (2997 . 2998)) nil (26041 6895 175815 985000) 0 nil])
([nil nil ((2997 . 3007) (#("my_han" 0 6 (fontified nil)) . 2997) (undo-tree-id25476 . -6) (2997 . 3003) (#("my_handler" 0 10 (fontified nil)) . -2997) (undo-tree-id25477 . -10) (2997 . 3007) (#("my_han" 0 6 (fontified t)) . -2997) (undo-tree-id25478 . -6) (undo-tree-id25479 . -6) (undo-tree-id25480 . -6) (undo-tree-id25481 . -1) (undo-tree-id25482 . -1) (undo-tree-id25483 . -1) (undo-tree-id25484 . -1) (undo-tree-id25485 . -1) (undo-tree-id25486 . -1) (undo-tree-id25487 . -1) (undo-tree-id25488 . -1) (undo-tree-id25489 . -1) (undo-tree-id25490 . -1) (undo-tree-id25491 . -1) (undo-tree-id25492 . -1) (undo-tree-id25493 . -2) (undo-tree-id25494 . -2) (undo-tree-id25495 . -2) (undo-tree-id25496 . -2) (undo-tree-id25497 . -2) (undo-tree-id25498 . -2) (undo-tree-id25499 . -2) (undo-tree-id25500 . -3) (undo-tree-id25501 . -3) (undo-tree-id25502 . -4) (undo-tree-id25503 . -4) (undo-tree-id25504 . -4) (undo-tree-id25505 . -5) (undo-tree-id25506 . -5) (undo-tree-id25507 . -5) (undo-tree-id25508 . -6) (undo-tree-id25509 . -6) (undo-tree-id25510 . -6) (undo-tree-id25511 . -6) (undo-tree-id25512 . -6) 3003) nil (26041 6895 175809 438000) 0 nil])
([nil nil ((apply yas--snippet-revive 2992 3008 #s(yas--snippet nil (#s(yas--field 1 2997 3007 nil nil nil t #s(yas--exit 3008 nil))) #s(yas--exit 3008 nil) 149 nil #s(yas--field 1 2997 3007 nil nil nil t #s(yas--exit 3008 nil)) nil nil))) nil (26041 6909 184727 843000) 0 nil])
([nil nil ((apply -78 3142 4404 undo--wrap-and-run-primitive-undo 3142 4404 ((4399 . 4402) (4382 . 4385) (4323 . 4326) (4285 . 4288) (4212 . 4215) (4138 . 4141) (4064 . 4067) (4025 . 4028) (3954 . 3957) (3932 . 3935) (3879 . 3882) (3841 . 3844) (3804 . 3807) (3734 . 3737) (3679 . 3682) (3650 . 3653) (3568 . 3571) (3504 . 3507) (3463 . 3466) (3384 . 3387) (3367 . 3370) (3338 . 3341) (3297 . 3300) (3221 . 3224) (3168 . 3171) (3150 . 3153)))) nil (26041 6909 184723 469000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -3037) (undo-tree-id25588 . -1) (undo-tree-id25589 . -1) (undo-tree-id25590 . -1) (undo-tree-id25591 . -1) (undo-tree-id25592 . -1) (undo-tree-id25593 . -1) (undo-tree-id25594 . -1) (undo-tree-id25595 . -1) (undo-tree-id25596 . -1) (undo-tree-id25597 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -3038) (undo-tree-id25598 . -1) (undo-tree-id25599 . -1) (undo-tree-id25600 . -1) (undo-tree-id25601 . -1) (undo-tree-id25602 . -1) (undo-tree-id25603 . -1) (undo-tree-id25604 . -1) (undo-tree-id25605 . -1) 3039 (t 26041 6909 224711 927000)) nil (26041 6912 174485 412000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . 3092) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 3092)) nil (26041 6912 174334 363000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -4408) (undo-tree-id25632 . -1) (undo-tree-id25633 . -1) (undo-tree-id25634 . -1) (undo-tree-id25635 . -1) (undo-tree-id25636 . -1) (undo-tree-id25637 . -1) (undo-tree-id25638 . -1) (undo-tree-id25639 . -1) (undo-tree-id25640 . -1) (undo-tree-id25641 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -4409) (undo-tree-id25642 . -1) (undo-tree-id25643 . -1) (undo-tree-id25644 . -1) (undo-tree-id25645 . -1) (undo-tree-id25646 . -1) (undo-tree-id25647 . -1) (undo-tree-id25648 . -1) (undo-tree-id25649 . -1) 4410 (t 26041 6912 211378 778000)) nil (26041 6934 357979 532000) 0 nil])
([nil nil ((4401 . 4409) (#("        " 0 8 (fontified nil)) . 4400) (undo-tree-id25628 . -8) (undo-tree-id25629 . -8) (undo-tree-id25630 . -8) (undo-tree-id25631 . -8) (4399 . 4409)) nil (26041 6934 357964 976000) 0 nil])
([nil nil ((4409 . 4423)) nil (26041 6934 357961 178000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 4439 4448 nil nil nil nil #s(yas--field 2 4450 4457 nil nil nil nil #s(yas--exit 4458 nil))) #s(yas--field 2 4450 4457 nil nil nil nil #s(yas--exit 4458 nil))) #s(yas--exit 4458 nil) 150 nil #s(yas--field 1 4439 4448 nil nil nil nil #s(yas--field 2 4450 4457 nil nil nil nil #s(yas--exit 4458 nil))) nil nil)) (4414 . 4458) (#("zbar_processor_user_wait(${1:processor}, ${2:timeout})$0" 0 56 (fontified nil)) . 4414) (4414 . 4470) (#("zbar_user" 0 9 (fontified nil)) . 4414) (4414 . 4423) (#("zbar_processor_user_wait(…)" 0 27 (fontified nil)) . -4414) (4414 . 4441) (#("zbar_user" 0 9 (fontified t)) . -4414) (undo-tree-id25609 . -9) (undo-tree-id25610 . -1) (undo-tree-id25611 . -1) (undo-tree-id25612 . -1) (undo-tree-id25613 . -1) (undo-tree-id25614 . -2) (undo-tree-id25615 . -2) (undo-tree-id25616 . -3) (undo-tree-id25617 . -4) (undo-tree-id25618 . -5) (undo-tree-id25619 . -5) (undo-tree-id25620 . -6) (undo-tree-id25621 . -7) (undo-tree-id25622 . -7) (undo-tree-id25623 . -8) (undo-tree-id25624 . -9) (undo-tree-id25625 . -9) (undo-tree-id25626 . -9) (undo-tree-id25627 . -9) 4423) nil (26041 6934 357959 140000) 0 nil])
([nil nil ((apply yas--snippet-revive 4414 4458 #s(yas--snippet nil (#s(yas--field 1 4439 4448 nil nil nil nil #s(yas--field 2 4450 4457 nil nil nil nil #s(yas--exit 4458 nil))) #s(yas--field 2 4450 4457 nil nil nil nil #s(yas--exit 4458 nil))) #s(yas--exit 4458 nil) 150 nil #s(yas--field 1 4439 4448 nil nil nil nil #s(yas--field 2 4450 4457 nil nil nil nil #s(yas--exit 4458 nil))) nil nil))) nil (26041 6934 357943 695000) 0 nil])
([nil nil ((#("timeout" 0 7 (fontified t)) . -4450) (undo-tree-id25606 . -7) (undo-tree-id25607 . -7) (undo-tree-id25608 . -7) 4457) nil (26041 6934 357942 51000) 0 nil])
([nil nil ((4450 . 4452)) nil (26041 6934 357931 993000) 0 nil])
([nil nil ((4453 . 4454)) nil (26041 6934 357927 725000) 0 nil])
([nil nil ((#("extern " 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t)) . -648) (undo-tree-id25650 . -7) (undo-tree-id25651 . -7) (undo-tree-id25652 . -7) (undo-tree-id25653 . -7) (undo-tree-id25654 . -7) (undo-tree-id25655 . -7) (undo-tree-id25656 . -7) (undo-tree-id25657 . -7) (undo-tree-id25658 . -7) (undo-tree-id25659 . -7) (undo-tree-id25660 . -7) (undo-tree-id25661 . -7) (undo-tree-id25662 . -7) (undo-tree-id25663 . -7) 655 (t 26041 6934 398046 807000)) nil (26041 6984 766965 97000) 0 nil])
([nil nil ((2990 . 2992) (t 26041 6984 804716 571000)) nil (26041 6995 155578 887000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -2990) (undo-tree-id25664 . -1) (undo-tree-id25665 . -1) (undo-tree-id25666 . -1) (undo-tree-id25667 . -1) (undo-tree-id25668 . -1) (undo-tree-id25669 . -1) (undo-tree-id25670 . -1) (undo-tree-id25671 . -1) (undo-tree-id25672 . -1) (undo-tree-id25673 . -1) (undo-tree-id25674 . -1) (undo-tree-id25675 . -1) (undo-tree-id25676 . -1) (undo-tree-id25677 . -1) (#("x" 0 1 (fontified t)) . -2991) (undo-tree-id25678 . -1) (undo-tree-id25679 . -1) (undo-tree-id25680 . -1) (undo-tree-id25681 . -1) (undo-tree-id25682 . -1) (undo-tree-id25683 . -1) (undo-tree-id25684 . -1) (undo-tree-id25685 . -1) 2992) nil (26041 6995 155576 145000) 0 nil])
([nil nil ((2990 . 2991)) nil (26041 6995 155553 461000) 0 nil])
([nil nil ((2990 . 2992)) nil (26041 6995 155552 178000) 0 nil])
([nil nil ((2992 . 2996)) nil (26041 6995 155548 219000) 0 nil])
([nil nil ((#("extern" 0 6 (face font-lock-keyword-face fontified t)) . -2990) (undo-tree-id25691 . -6) (undo-tree-id25692 . -6) (undo-tree-id25693 . -6) (undo-tree-id25694 . -6) (undo-tree-id25695 . -6) (undo-tree-id25696 . -6) (undo-tree-id25697 . -6) (undo-tree-id25698 . -6) (undo-tree-id25699 . -6) (undo-tree-id25700 . -6) (undo-tree-id25701 . -6) (undo-tree-id25702 . -6) (undo-tree-id25703 . -6) 2996 (t 26041 6995 221383 877000)) nil (26041 7000 793629 760000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2990) (undo-tree-id25686 . -1) (undo-tree-id25687 . 1) (undo-tree-id25688 . -1) (undo-tree-id25689 . -1) (undo-tree-id25690 . -1) 2991) nil (26041 7000 793615 831000) 0 nil])
([nil nil ((648 . 649) (t 26041 7000 831384 220000)) nil (26041 7007 62017 672000) 0 nil])
([nil nil ((649 . 655)) nil (26041 7047 339286 506000) 0 nil])
([nil nil ((#("        let mut symbol = ffi::zbar_image_first_symbol(image);

        while !symbol.is_null() {
            let typ = ffi::zbar_symbol_get_type(symbol);
            let data = ffi::zbar_symbol_get_data(symbol);
            println!(
                \"decoded {} symbol \\\"{:?}\\\"\\n\",
                CStr::from_ptr(ffi::zbar_get_symbol_name(typ))
                    .to_str()
                    .unwrap(),
                CStr::from_ptr(data).to_str()
            );
            symbol = ffi::zbar_symbol_next(symbol);
        }" 0 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 15 (face font-lock-keyword-face fontified t) 15 16 (fontified t) 16 22 (face font-lock-variable-name-face fontified t) 22 25 (fontified t) 25 28 (face font-lock-constant-face fontified t) 28 30 (fontified t) 30 53 (fontified t) 53 54 (face (rainbow-delimiters-depth-3-face) fontified t) 54 59 (fontified t) 59 60 (face (rainbow-delimiters-depth-3-face) fontified t) 60 61 (fontified t) 61 62 (fontified t) 62 63 (fontified t) 63 71 (fontified t) 71 76 (face font-lock-keyword-face fontified t) 76 78 (fontified t) 78 84 (fontified t) 84 85 (fontified t) 85 92 (fontified t) 92 93 (face (rainbow-delimiters-depth-3-face) fontified t) 93 94 (face (rainbow-delimiters-depth-3-face) fontified t) 94 95 (fontified t) 95 96 (face (rainbow-delimiters-depth-3-face) fontified t) 96 97 (fontified t) 97 109 (fontified t) 109 112 (face font-lock-keyword-face fontified t) 112 113 (fontified t) 113 116 (face font-lock-variable-name-face fontified t) 116 119 (fontified t) 119 122 (face font-lock-constant-face fontified t) 122 124 (fontified t) 124 144 (fontified t) 144 145 (face (rainbow-delimiters-depth-4-face) fontified t) 145 151 (fontified t) 151 152 (face (rainbow-delimiters-depth-4-face) fontified t) 152 154 (fontified t) 154 166 (fontified t) 166 169 (face font-lock-keyword-face fontified t) 169 170 (fontified t) 170 174 (face font-lock-variable-name-face fontified t) 174 177 (fontified t) 177 180 (face font-lock-constant-face fontified t) 180 182 (fontified t) 182 202 (fontified t) 202 203 (face (rainbow-delimiters-depth-4-face) fontified t) 203 209 (fontified t) 209 210 (face (rainbow-delimiters-depth-4-face) fontified t) 210 212 (fontified t) 212 224 (fontified t) 224 232 (face rust-builtin-formatting-macro fontified t) 232 233 (face (rainbow-delimiters-depth-4-face) fontified t) 233 250 (fontified t) 250 259 (face font-lock-string-face fontified t) 259 261 (face rust-string-interpolation fontified t) 261 274 (face font-lock-string-face fontified t) 274 279 (face font-lock-string-face fontified t) 279 280 (face font-lock-string-face fontified t rear-nonsticky t) 280 281 (fontified t) 281 282 (fontified t) 282 298 (fontified t) 298 302 (face font-lock-type-face fontified t) 302 304 (fontified t) 304 312 (fontified t) 312 313 (face (rainbow-delimiters-depth-5-face) fontified t) 313 316 (face font-lock-constant-face fontified t) 316 318 (fontified t) 318 338 (fontified t) 338 339 (face (rainbow-delimiters-depth-6-face) fontified t) 339 342 (fontified t) 342 343 (face (rainbow-delimiters-depth-6-face) fontified t) 343 344 (face (rainbow-delimiters-depth-5-face) fontified t) 344 345 (fontified t) 345 365 (fontified t) 365 366 (fontified t) 366 372 (fontified t) 372 373 (face (rainbow-delimiters-depth-5-face) fontified t) 373 374 (face (rainbow-delimiters-depth-5-face) fontified t) 374 375 (fontified t) 375 395 (fontified t) 395 396 (fontified t) 396 402 (fontified t) 402 403 (face (rainbow-delimiters-depth-5-face) fontified t) 403 404 (face (rainbow-delimiters-depth-5-face) fontified t) 404 405 (fontified t) 405 422 (fontified t) 422 426 (face font-lock-type-face fontified t) 426 428 (fontified t) 428 436 (fontified t) 436 437 (face (rainbow-delimiters-depth-5-face) fontified t) 437 441 (fontified t) 441 442 (face (rainbow-delimiters-depth-5-face) fontified t) 442 443 (fontified t) 443 449 (fontified t) 449 450 (face (rainbow-delimiters-depth-5-face) fontified t) 450 451 (face (rainbow-delimiters-depth-5-face) fontified t) 451 452 (fontified t) 452 464 (fontified t) 464 465 (face (rainbow-delimiters-depth-4-face) fontified t) 465 466 (fontified t) 466 467 (fontified t) 467 479 (fontified t) 479 485 (fontified t) 485 488 (fontified t) 488 491 (face font-lock-constant-face fontified t) 491 493 (fontified t) 493 504 (fontified t) 504 509 (fontified t) 509 510 (face (rainbow-delimiters-depth-4-face) fontified t) 510 516 (fontified t) 516 517 (face (rainbow-delimiters-depth-4-face) fontified t) 517 527 (fontified t) 527 528 (face (rainbow-delimiters-depth-3-face) fontified t rear-nonsticky t)) . 753)) ((753 . 1281)) (26041 7058 941958 960000) 0 nil])
([nil nil ((nil fontified nil 1765 . 1766) (nil fontified nil 1748 . 1750) (nil fontified nil 1690 . 1691) (nil fontified nil 1673 . 1674) (nil fontified nil 1652 . 1653) (nil fontified nil 1579 . 1580) (nil fontified nil 1505 . 1506) (nil fontified nil 1431 . 1432) (nil fontified nil 1392 . 1393) (nil fontified nil 1390 . 1392) (nil fontified nil 1320 . 1322) (nil fontified nil 1299 . 1300) (nil fontified nil 1246 . 1247) (nil fontified nil 1208 . 1209) (nil fontified nil 1171 . 1172) (nil fontified nil 1101 . 1102) (nil fontified nil 1046 . 1047) (nil fontified nil 1017 . 1018) (nil fontified nil 999 . 1001) (nil fontified nil 934 . 936) (nil fontified nil 871 . 872) (nil fontified nil 830 . 831) (753 . 1766)) ((#("       //     let mut symbol = ffi::zbar_symbol_set_first_symbol(symbol_set);
        //     while !symbol.is_null() {
        //         let typ = ffi::zbar_symbol_get_type(symbol);
        //         let data = ffi::zbar_symbol_get_data(symbol);
                
        //         println!(
        //             \"decoded {} symbol \\\"{:?}\\\"\\n\",
        //             CStr::from_ptr(ffi::zbar_get_symbol_name(typ))
        //                 .to_str()
        //                 .unwrap(),
        //             CStr::from_ptr(data).to_str()
        //         );
        //         let loc_n = ffi::zbar_symbol_get_loc_size(symbol);

        //         for i in 0..loc_n {
        //             let loc_x = ffi::zbar_symbol_get_loc_x(symbol, i);
        //             let loc_y = ffi::zbar_symbol_get_loc_y(symbol, i);
        //             println!(\"loc: {} x: {} y: {}\", i, loc_x, loc_y);
        //         }
                
        //         symbol = ffi::zbar_symbol_next(symbol);
        //     }" 0 7 (fontified nil) 7 10 (face font-lock-comment-delimiter-face fontified nil) 10 11 (face font-lock-comment-delimiter-face fontified nil) 11 14 (face font-lock-comment-delimiter-face fontified nil) 14 17 (face font-lock-comment-face fontified nil) 17 18 (face font-lock-comment-face fontified nil) 18 21 (face font-lock-comment-face fontified nil) 21 22 (face font-lock-comment-face fontified nil) 22 28 (face font-lock-comment-face fontified nil) 28 31 (face font-lock-comment-face fontified nil) 31 34 (face font-lock-comment-face fontified nil) 34 36 (face font-lock-comment-face fontified nil) 36 64 (face font-lock-comment-face fontified nil) 64 65 (face font-lock-comment-face fontified nil) 65 75 (face font-lock-comment-face fontified nil) 75 76 (face font-lock-comment-face fontified nil) 76 77 (face font-lock-comment-face fontified nil) 77 78 (face font-lock-comment-face fontified nil) 78 86 (fontified nil) 86 89 (face font-lock-comment-delimiter-face fontified nil) 89 93 (face font-lock-comment-delimiter-face fontified nil) 93 98 (face font-lock-comment-face fontified nil) 98 100 (face font-lock-comment-face fontified nil) 100 106 (face font-lock-comment-face fontified nil) 106 107 (face font-lock-comment-face fontified nil) 107 114 (face font-lock-comment-face fontified nil) 114 115 (face font-lock-comment-face fontified nil) 115 116 (face font-lock-comment-face fontified nil) 116 117 (face font-lock-comment-face fontified nil) 117 118 (face font-lock-comment-face fontified nil) 118 119 (face font-lock-comment-face fontified nil) 119 127 (fontified nil) 127 130 (face font-lock-comment-delimiter-face fontified nil) 130 134 (face font-lock-comment-delimiter-face fontified nil) 134 138 (face font-lock-comment-delimiter-face fontified nil) 138 141 (face font-lock-comment-face fontified nil) 141 142 (face font-lock-comment-face fontified nil) 142 145 (face font-lock-comment-face fontified nil) 145 148 (face font-lock-comment-face fontified nil) 148 151 (face font-lock-comment-face fontified nil) 151 153 (face font-lock-comment-face fontified nil) 153 173 (face font-lock-comment-face fontified nil) 173 174 (face font-lock-comment-face fontified nil) 174 180 (face font-lock-comment-face fontified nil) 180 181 (face font-lock-comment-face fontified nil) 181 183 (face font-lock-comment-face fontified nil) 183 191 (fontified nil) 191 194 (face font-lock-comment-delimiter-face fontified nil) 194 198 (face font-lock-comment-delimiter-face fontified nil) 198 202 (face font-lock-comment-delimiter-face fontified nil) 202 205 (face font-lock-comment-face fontified nil) 205 206 (face font-lock-comment-face fontified nil) 206 210 (face font-lock-comment-face fontified nil) 210 213 (face font-lock-comment-face fontified nil) 213 216 (face font-lock-comment-face fontified nil) 216 218 (face font-lock-comment-face fontified nil) 218 238 (face font-lock-comment-face fontified nil) 238 239 (face font-lock-comment-face fontified nil) 239 245 (face font-lock-comment-face fontified nil) 245 246 (face font-lock-comment-face fontified nil) 246 248 (face font-lock-comment-face fontified nil) 248 260 (fontified nil) 260 264 (fontified nil) 264 265 (fontified nil) 265 273 (fontified nil) 273 276 (face font-lock-comment-delimiter-face fontified nil) 276 280 (face font-lock-comment-delimiter-face fontified nil) 280 284 (face font-lock-comment-delimiter-face fontified nil) 284 287 (face font-lock-comment-face fontified nil) 287 292 (face font-lock-comment-face fontified nil) 292 293 (face font-lock-comment-face fontified nil) 293 294 (face font-lock-comment-face fontified nil) 294 302 (fontified nil) 302 305 (face font-lock-comment-delimiter-face fontified nil) 305 309 (face font-lock-comment-delimiter-face fontified nil) 309 313 (face font-lock-comment-delimiter-face fontified nil) 313 317 (face font-lock-comment-delimiter-face fontified nil) 317 326 (face font-lock-comment-face fontified nil) 326 328 (face font-lock-comment-face fontified nil) 328 331 (face font-lock-comment-face fontified nil) 331 341 (face font-lock-comment-face fontified nil) 341 346 (face font-lock-comment-face fontified nil) 346 347 (face font-lock-comment-face fontified nil rear-nonsticky t) 347 348 (face font-lock-comment-face fontified nil) 348 349 (face font-lock-comment-face fontified nil) 349 357 (fontified nil) 357 360 (face font-lock-comment-delimiter-face fontified nil) 360 367 (face font-lock-comment-delimiter-face fontified nil) 367 368 (face font-lock-comment-delimiter-face fontified nil) 368 372 (face font-lock-comment-delimiter-face fontified nil) 372 376 (face font-lock-comment-face fontified nil) 376 378 (face font-lock-comment-face fontified nil) 378 386 (face font-lock-comment-face fontified nil) 386 387 (face font-lock-comment-face fontified nil) 387 390 (face font-lock-comment-face fontified nil) 390 392 (face font-lock-comment-face fontified nil) 392 393 (face font-lock-comment-face fontified nil) 393 412 (face font-lock-comment-face fontified nil) 412 413 (face font-lock-comment-face fontified nil) 413 416 (face font-lock-comment-face fontified nil) 416 417 (face font-lock-comment-face fontified nil) 417 418 (face font-lock-comment-face fontified nil) 418 419 (face font-lock-comment-face fontified nil) 419 427 (fontified nil) 427 430 (face font-lock-comment-delimiter-face fontified nil) 430 442 (face font-lock-comment-delimiter-face fontified nil) 442 446 (face font-lock-comment-delimiter-face fontified nil) 446 447 (face font-lock-comment-face fontified nil) 447 453 (face font-lock-comment-face fontified nil) 453 454 (face font-lock-comment-face fontified nil) 454 455 (face font-lock-comment-face fontified nil) 455 456 (face font-lock-comment-face fontified nil) 456 464 (fontified nil) 464 467 (face font-lock-comment-delimiter-face fontified nil) 467 479 (face font-lock-comment-delimiter-face fontified nil) 479 483 (face font-lock-comment-delimiter-face fontified nil) 483 484 (face font-lock-comment-face fontified nil) 484 490 (face font-lock-comment-face fontified nil) 490 491 (face font-lock-comment-face fontified nil) 491 492 (face font-lock-comment-face fontified nil) 492 493 (face font-lock-comment-face fontified nil) 493 494 (face font-lock-comment-face fontified nil) 494 502 (fontified nil) 502 505 (face font-lock-comment-delimiter-face fontified nil) 505 508 (face font-lock-comment-delimiter-face fontified nil) 508 509 (face font-lock-comment-delimiter-face fontified nil) 509 513 (face font-lock-comment-delimiter-face fontified nil) 513 517 (face font-lock-comment-delimiter-face fontified nil) 517 521 (face font-lock-comment-face fontified nil) 521 523 (face font-lock-comment-face fontified nil) 523 531 (face font-lock-comment-face fontified nil) 531 532 (face font-lock-comment-face fontified nil) 532 536 (face font-lock-comment-face fontified nil) 536 537 (face font-lock-comment-face fontified nil) 537 538 (face font-lock-comment-face fontified nil) 538 544 (face font-lock-comment-face fontified nil) 544 545 (face font-lock-comment-face fontified nil) 545 546 (face font-lock-comment-face fontified nil) 546 547 (face font-lock-comment-face fontified nil) 547 555 (fontified nil) 555 558 (face font-lock-comment-delimiter-face fontified nil) 558 562 (face font-lock-comment-delimiter-face fontified nil) 562 566 (face font-lock-comment-delimiter-face fontified nil) 566 567 (face font-lock-comment-face fontified nil) 567 569 (face font-lock-comment-face fontified nil) 569 577 (fontified nil) 577 580 (face font-lock-comment-delimiter-face fontified nil) 580 584 (face font-lock-comment-delimiter-face fontified nil) 584 588 (face font-lock-comment-delimiter-face fontified nil) 588 591 (face font-lock-comment-face fontified nil) 591 592 (face font-lock-comment-face fontified nil) 592 597 (face font-lock-comment-face fontified nil) 597 600 (face font-lock-comment-face fontified nil) 600 603 (face font-lock-comment-face fontified nil) 603 605 (face font-lock-comment-face fontified nil) 605 629 (face font-lock-comment-face fontified nil) 629 630 (face font-lock-comment-face fontified nil) 630 636 (face font-lock-comment-face fontified nil) 636 637 (face font-lock-comment-face fontified nil) 637 639 (face font-lock-comment-face fontified nil) 639 640 (fontified nil) 640 648 (fontified nil) 648 651 (face font-lock-comment-delimiter-face fontified nil) 651 655 (face font-lock-comment-delimiter-face fontified nil) 655 659 (face font-lock-comment-delimiter-face fontified nil) 659 662 (face font-lock-comment-face fontified nil) 662 663 (face font-lock-comment-face fontified nil) 663 664 (face font-lock-comment-face fontified nil) 664 665 (face font-lock-comment-face fontified nil) 665 667 (face font-lock-comment-face fontified nil) 667 671 (face font-lock-comment-face fontified nil) 671 677 (face font-lock-comment-face fontified nil) 677 678 (face font-lock-comment-face fontified nil) 678 679 (face font-lock-comment-face fontified nil) 679 687 (fontified nil) 687 690 (face font-lock-comment-delimiter-face fontified nil) 690 698 (face font-lock-comment-delimiter-face fontified nil) 698 702 (face font-lock-comment-delimiter-face fontified nil) 702 705 (face font-lock-comment-face fontified nil) 705 706 (face font-lock-comment-face fontified nil) 706 711 (face font-lock-comment-face fontified nil) 711 714 (face font-lock-comment-face fontified nil) 714 717 (face font-lock-comment-face fontified nil) 717 719 (face font-lock-comment-face fontified nil) 719 740 (face font-lock-comment-face fontified nil) 740 741 (face font-lock-comment-face fontified nil) 741 745 (face font-lock-comment-face fontified nil) 745 750 (face font-lock-comment-face fontified nil) 750 751 (face font-lock-comment-face fontified nil) 751 752 (face font-lock-comment-face fontified nil rear-nonsticky t) 752 753 (face font-lock-comment-face fontified nil) 753 761 (fontified nil) 761 764 (face font-lock-comment-delimiter-face fontified nil) 764 772 (face font-lock-comment-delimiter-face fontified nil) 772 776 (face font-lock-comment-delimiter-face fontified nil) 776 779 (face font-lock-comment-face fontified nil) 779 780 (face font-lock-comment-face fontified nil) 780 785 (face font-lock-comment-face fontified nil) 785 788 (face font-lock-comment-face fontified nil) 788 791 (face font-lock-comment-face fontified nil) 791 793 (face font-lock-comment-face fontified nil) 793 814 (face font-lock-comment-face fontified nil) 814 815 (face font-lock-comment-face fontified nil) 815 824 (face font-lock-comment-face fontified nil) 824 825 (face font-lock-comment-face fontified nil) 825 826 (face font-lock-comment-face fontified nil rear-nonsticky t) 826 827 (face font-lock-comment-face fontified nil) 827 835 (fontified nil) 835 838 (face font-lock-comment-delimiter-face fontified nil) 838 846 (face font-lock-comment-delimiter-face fontified nil) 846 850 (face font-lock-comment-delimiter-face fontified nil) 850 858 (face font-lock-comment-face fontified nil) 858 859 (face font-lock-comment-face fontified nil) 859 865 (face font-lock-comment-face fontified nil) 865 867 (face font-lock-comment-face fontified nil) 867 871 (face font-lock-comment-face fontified nil) 871 873 (face font-lock-comment-face fontified nil) 873 877 (face font-lock-comment-face fontified nil) 877 879 (face font-lock-comment-face fontified nil) 879 880 (face font-lock-comment-face fontified nil) 880 883 (face font-lock-comment-face fontified nil) 883 885 (face font-lock-comment-face fontified nil) 885 892 (face font-lock-comment-face fontified nil) 892 897 (face font-lock-comment-face fontified nil) 897 898 (face font-lock-comment-face fontified nil) 898 899 (face font-lock-comment-face fontified nil rear-nonsticky t) 899 900 (face font-lock-comment-face fontified nil) 900 908 (fontified nil) 908 911 (face font-lock-comment-delimiter-face fontified nil) 911 915 (face font-lock-comment-delimiter-face fontified nil) 915 919 (face font-lock-comment-delimiter-face fontified nil) 919 920 (face font-lock-comment-face fontified nil) 920 921 (face font-lock-comment-face fontified nil) 921 933 (fontified nil) 933 937 (fontified nil) 937 938 (fontified nil) 938 946 (fontified nil) 946 949 (face font-lock-comment-delimiter-face fontified nil) 949 953 (face font-lock-comment-delimiter-face fontified nil) 953 957 (face font-lock-comment-delimiter-face fontified nil) 957 963 (face font-lock-comment-face fontified nil) 963 966 (face font-lock-comment-face fontified nil) 966 969 (face font-lock-comment-face fontified nil) 969 971 (face font-lock-comment-face fontified nil) 971 982 (face font-lock-comment-face fontified nil) 982 987 (face font-lock-comment-face fontified nil) 987 988 (face font-lock-comment-face fontified nil) 988 994 (face font-lock-comment-face fontified nil) 994 995 (face font-lock-comment-face fontified nil) 995 997 (face font-lock-comment-face fontified nil) 997 1005 (fontified nil) 1005 1008 (face font-lock-comment-delimiter-face fontified nil) 1008 1012 (face font-lock-comment-delimiter-face fontified nil) 1012 1013 (face font-lock-comment-face fontified nil rear-nonsticky t)) . 753) (undo-tree-id25741 . -2) (undo-tree-id25742 . -651) (undo-tree-id25743 . -579) (undo-tree-id25744 . -556) (undo-tree-id25745 . -2) (undo-tree-id25746 . -2) (undo-tree-id25747 . -10) (undo-tree-id25748 . -10) (undo-tree-id25749 . -1013) (undo-tree-id25750 . -288) (undo-tree-id25751 . -288) (undo-tree-id25752 . -288) (undo-tree-id25753 . -288) (undo-tree-id25754 . -288) (undo-tree-id25755 . -288) (undo-tree-id25756 . -288) (undo-tree-id25757 . -288) (undo-tree-id25758 . -288) (undo-tree-id25759 . -288) (undo-tree-id25760 . -288) (undo-tree-id25761 . -288) (undo-tree-id25762 . -288) (undo-tree-id25763 . -288) (undo-tree-id25764 . -288) (undo-tree-id25765 . -288) (undo-tree-id25766 . -288) (undo-tree-id25767 . -75) (undo-tree-id25768 . -75) (undo-tree-id25769 . -75) (undo-tree-id25770 . -75) (undo-tree-id25771 . -75) (undo-tree-id25772 . -75) (undo-tree-id25773 . -75) (undo-tree-id25774 . -75) (undo-tree-id25775 . -75) (undo-tree-id25776 . -75) (undo-tree-id25777 . -75) (undo-tree-id25778 . -75) (undo-tree-id25779 . -11) (undo-tree-id25780 . -11) (undo-tree-id25781 . -11) (undo-tree-id25782 . -11) (undo-tree-id25783 . -11) (undo-tree-id25784 . -11) (nil fontified t 830 . 831) (nil fontified t 871 . 872) (nil fontified t 934 . 936) (nil fontified t 999 . 1001) (nil fontified t 1017 . 1018) (nil fontified t 1046 . 1047) (nil fontified t 1101 . 1102) (nil fontified t 1171 . 1172) (nil fontified t 1208 . 1209) (nil fontified t 1246 . 1247) (nil fontified t 1299 . 1300) (nil fontified t 1320 . 1322) (nil fontified t 1390 . 1392) (nil fontified t 1392 . 1393) (nil fontified t 1431 . 1432) (nil fontified t 1505 . 1506) (nil fontified t 1579 . 1580) (nil fontified t 1652 . 1653) (nil fontified t 1673 . 1674) (nil fontified t 1690 . 1691) (nil fontified t 1748 . 1750) (nil fontified t 1765 . 1766)) (26041 7059 134287 824000) 0 nil])
([nil nil ((apply 57 755 1709 undo--wrap-and-run-primitive-undo 755 1709 ((#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 1704) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 1648) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 1613) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 1543) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 1472) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 1401) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 1365) (#<marker at 1297 in main.rs> . -3) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 1297) (#<marker at 1233 in main.rs> . -2) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 1278) (#<marker at 1218 in main.rs> . -1) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 1228) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 1193) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 1159) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 1092) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 1040) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 1014) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 935) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 874) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 836) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 760)))) ((apply -57 755 1766 undo--wrap-and-run-primitive-undo 755 1766 ((760 . 763) (836 . 839) (874 . 877) (935 . 938) (1014 . 1017) (1040 . 1043) (1092 . 1095) (1159 . 1162) (1193 . 1196) (1228 . 1231) (1278 . 1281) (1297 . 1300) (1365 . 1368) (1401 . 1404) (1472 . 1475) (1543 . 1546) (1613 . 1616) (1648 . 1651) (1704 . 1707)))) (26041 7062 644123 881000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . 1625) (#("    " 0 4 (fontified t)) . 1577) (#("    " 0 4 (fontified t)) . 1564) (#("    " 0 4 (fontified t)) . 1550) (#("    " 0 4 (fontified t)) . 1488) (#("    " 0 4 (fontified t)) . 1421) (#("    " 0 4 (fontified t)) . 1354) (#("    " 0 4 (fontified t)) . 1318) (#("    " 0 4 (fontified t)) . 1254) (#("    " 0 4 (fontified t)) . 1239) (#("    " 0 4 (fontified t)) . 1197) (#("    " 0 4 (fontified t)) . 1170) (#("    " 0 4 (fontified t)) . 1140) (#("    " 0 4 (fontified t)) . 1073) (#("    " 0 4 (fontified t)) . 1025) (#("    " 0 4 (fontified t)) . 999) (#("    " 0 4 (fontified t)) . 986) (#("    " 0 4 (fontified t)) . 928) (#("    " 0 4 (fontified t)) . 871) (#("    " 0 4 (fontified t)) . 833) (#("   " 0 3 (fontified t)) . 761)) ((761 . 764) (833 . 837) (871 . 875) (928 . 932) (986 . 990) (999 . 1003) (1025 . 1029) (1073 . 1077) (1140 . 1144) (1170 . 1174) (1197 . 1201) (1239 . 1243) (1254 . 1258) (1318 . 1322) (1354 . 1358) (1421 . 1425) (1488 . 1492) (1550 . 1554) (1564 . 1568) (1577 . 1581) (1625 . 1629) (t 26041 7036 561386 414000)) (26041 7062 957617 459000) 0 nil])
([nil nil ((#("set)" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-3-face) fontified t)) . -819) (undo-tree-id26019 . -3) (undo-tree-id26020 . -4) (undo-tree-id26021 . -3) (undo-tree-id26022 . -3) (undo-tree-id26023 . -3) (undo-tree-id26024 . -3) (undo-tree-id26025 . -3) (undo-tree-id26026 . -3) (undo-tree-id26027 . -3) (undo-tree-id26028 . -3) (undo-tree-id26029 . -3) (undo-tree-id26030 . -3) (undo-tree-id26031 . -3) (undo-tree-id26032 . -3) (undo-tree-id26033 . -3) (undo-tree-id26034 . -3) (undo-tree-id26035 . -3) (undo-tree-id26036 . -3) (undo-tree-id26037 . -3) (undo-tree-id26038 . -3) (undo-tree-id26039 . -3) (undo-tree-id26040 . -3) (undo-tree-id26041 . -3) (undo-tree-id26042 . -3) (undo-tree-id26043 . -3) (undo-tree-id26044 . -3) (undo-tree-id26045 . -3) (undo-tree-id26046 . -4) 823 (t 26041 7036 561386 414000)) nil (26041 7075 139224 178000) 0 nil])
([nil nil ((#("symbol_" 0 7 (fontified t)) . -812) (undo-tree-id25989 . -7) (undo-tree-id25990 . -7) (undo-tree-id25991 . -7) (undo-tree-id25992 . -7) (undo-tree-id25993 . -7) (undo-tree-id25994 . -7) (undo-tree-id25995 . -7) (undo-tree-id25996 . -7) (undo-tree-id25997 . -7) (undo-tree-id25998 . -7) (undo-tree-id25999 . -7) (undo-tree-id26000 . -7) (undo-tree-id26001 . -7) (undo-tree-id26002 . -7) (undo-tree-id26003 . -7) (undo-tree-id26004 . -7) (undo-tree-id26005 . -7) (undo-tree-id26006 . -7) (undo-tree-id26007 . -7) (undo-tree-id26008 . -7) (undo-tree-id26009 . -7) (undo-tree-id26010 . -7) (undo-tree-id26011 . -7) (undo-tree-id26012 . -7) (undo-tree-id26013 . -7) (undo-tree-id26014 . -7) (undo-tree-id26015 . -7) (undo-tree-id26016 . -7) (undo-tree-id26017 . -7) (undo-tree-id26018 . -7) 819) nil (26041 7075 139202 510000) 0 nil])
([nil nil ((#("symbol(" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-3-face) fontified t)) . -805) (undo-tree-id25957 . -7) (undo-tree-id25958 . -7) (undo-tree-id25959 . -7) (undo-tree-id25960 . -7) (undo-tree-id25961 . -7) (undo-tree-id25962 . -7) (undo-tree-id25963 . -7) (undo-tree-id25964 . -7) (undo-tree-id25965 . -7) (undo-tree-id25966 . -7) (undo-tree-id25967 . -7) (undo-tree-id25968 . -7) (undo-tree-id25969 . -7) (undo-tree-id25970 . -7) (undo-tree-id25971 . -7) (undo-tree-id25972 . -7) (undo-tree-id25973 . -7) (undo-tree-id25974 . -7) (undo-tree-id25975 . -7) (undo-tree-id25976 . -7) (undo-tree-id25977 . -7) (undo-tree-id25978 . -7) (undo-tree-id25979 . -7) (undo-tree-id25980 . -7) (undo-tree-id25981 . -7) (undo-tree-id25982 . -7) (undo-tree-id25983 . -7) (undo-tree-id25984 . -7) (undo-tree-id25985 . -7) (undo-tree-id25986 . -7) (undo-tree-id25987 . -7) (undo-tree-id25988 . -7) 812) nil (26041 7075 138779 764000) 0 nil])
([nil nil ((#("first_" 0 6 (fontified t)) . -799) (undo-tree-id25923 . -6) (undo-tree-id25924 . -6) (undo-tree-id25925 . -6) (undo-tree-id25926 . -6) (undo-tree-id25927 . -6) (undo-tree-id25928 . -6) (undo-tree-id25929 . -6) (undo-tree-id25930 . -6) (undo-tree-id25931 . -6) (undo-tree-id25932 . -6) (undo-tree-id25933 . -6) (undo-tree-id25934 . -6) (undo-tree-id25935 . -6) (undo-tree-id25936 . -6) (undo-tree-id25937 . -6) (undo-tree-id25938 . -6) (undo-tree-id25939 . -6) (undo-tree-id25940 . -6) (undo-tree-id25941 . -6) (undo-tree-id25942 . -6) (undo-tree-id25943 . -6) (undo-tree-id25944 . -6) (undo-tree-id25945 . -6) (undo-tree-id25946 . -6) (undo-tree-id25947 . -6) (undo-tree-id25948 . -6) (undo-tree-id25949 . -6) (undo-tree-id25950 . -6) (undo-tree-id25951 . -6) (undo-tree-id25952 . -6) (undo-tree-id25953 . -6) (undo-tree-id25954 . -6) (undo-tree-id25955 . -6) (undo-tree-id25956 . -6) 805) nil (26041 7075 138757 164000) 0 nil])
([nil nil ((#("set_" 0 4 (fontified t)) . -795) (undo-tree-id25887 . -4) (undo-tree-id25888 . -4) (undo-tree-id25889 . -4) (undo-tree-id25890 . -4) (undo-tree-id25891 . -4) (undo-tree-id25892 . -4) (undo-tree-id25893 . -4) (undo-tree-id25894 . -4) (undo-tree-id25895 . -4) (undo-tree-id25896 . -4) (undo-tree-id25897 . -4) (undo-tree-id25898 . -4) (undo-tree-id25899 . -4) (undo-tree-id25900 . -4) (undo-tree-id25901 . -4) (undo-tree-id25902 . -4) (undo-tree-id25903 . -4) (undo-tree-id25904 . -4) (undo-tree-id25905 . -4) (undo-tree-id25906 . -4) (undo-tree-id25907 . -4) (undo-tree-id25908 . -4) (undo-tree-id25909 . -4) (undo-tree-id25910 . -4) (undo-tree-id25911 . -4) (undo-tree-id25912 . -4) (undo-tree-id25913 . -4) (undo-tree-id25914 . -4) (undo-tree-id25915 . -4) (undo-tree-id25916 . -4) (undo-tree-id25917 . -4) (undo-tree-id25918 . -4) (undo-tree-id25919 . -4) (undo-tree-id25920 . -4) (undo-tree-id25921 . -4) (undo-tree-id25922 . -4) 799) nil (26041 7075 138732 234000) 0 nil])
([nil nil ((#("symbol_" 0 7 (fontified t)) . -788) (undo-tree-id25849 . -7) (undo-tree-id25850 . -7) (undo-tree-id25851 . -7) (undo-tree-id25852 . -7) (undo-tree-id25853 . -7) (undo-tree-id25854 . -7) (undo-tree-id25855 . -7) (undo-tree-id25856 . -7) (undo-tree-id25857 . -7) (undo-tree-id25858 . -7) (undo-tree-id25859 . -7) (undo-tree-id25860 . -7) (undo-tree-id25861 . -7) (undo-tree-id25862 . -7) (undo-tree-id25863 . -7) (undo-tree-id25864 . -7) (undo-tree-id25865 . -7) (undo-tree-id25866 . -7) (undo-tree-id25867 . -7) (undo-tree-id25868 . -7) (undo-tree-id25869 . -7) (undo-tree-id25870 . -7) (undo-tree-id25871 . -7) (undo-tree-id25872 . -7) (undo-tree-id25873 . -7) (undo-tree-id25874 . -7) (undo-tree-id25875 . -7) (undo-tree-id25876 . -7) (undo-tree-id25877 . -7) (undo-tree-id25878 . -7) (undo-tree-id25879 . -7) (undo-tree-id25880 . -7) (undo-tree-id25881 . -7) (undo-tree-id25882 . -7) (undo-tree-id25883 . -7) (undo-tree-id25884 . -7) (undo-tree-id25885 . -7) (undo-tree-id25886 . -7) 795) nil (26041 7075 138691 579000) 0 nil])
([nil nil ((788 . 796)) nil (26041 7075 138663 590000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 807 812 nil nil nil nil #s(yas--exit 813 nil))) #s(yas--exit 813 nil) 151 nil #s(yas--field 1 807 812 nil nil nil nil #s(yas--exit 813 nil)) nil nil)) (783 . 813) (#("zbar_image_first_symbol(${1:image})$0" 0 37 (fontified nil)) . 783) (783 . 820) (#("zbar_image_fi" 0 13 (fontified nil)) . 783) (783 . 796) (#("zbar_image_first_symbol(…)" 0 26 (fontified nil)) . -783) (783 . 809) (#("zbar_image_fi" 0 13 (fontified t)) . -783) (undo-tree-id25785 . -5) (undo-tree-id25786 . -13) (undo-tree-id25787 . -5) (undo-tree-id25788 . -5) (undo-tree-id25789 . -5) (undo-tree-id25790 . -5) (undo-tree-id25791 . -5) (undo-tree-id25792 . -5) (undo-tree-id25793 . -5) (undo-tree-id25794 . -5) (undo-tree-id25795 . -5) (undo-tree-id25796 . -5) (undo-tree-id25797 . -5) (undo-tree-id25798 . -5) (undo-tree-id25799 . -5) (undo-tree-id25800 . -5) (undo-tree-id25801 . -5) (undo-tree-id25802 . -5) (undo-tree-id25803 . -5) (undo-tree-id25804 . -5) (undo-tree-id25805 . -5) (undo-tree-id25806 . -5) (undo-tree-id25807 . -5) (undo-tree-id25808 . -5) (undo-tree-id25809 . -5) (undo-tree-id25810 . -5) (undo-tree-id25811 . -5) (undo-tree-id25812 . -5) (undo-tree-id25813 . -5) (undo-tree-id25814 . -5) (undo-tree-id25815 . -5) (undo-tree-id25816 . -5) (undo-tree-id25817 . -5) (undo-tree-id25818 . -5) (undo-tree-id25819 . -5) (undo-tree-id25820 . -5) (undo-tree-id25821 . -5) (undo-tree-id25822 . -5) (undo-tree-id25823 . -5) (undo-tree-id25824 . -5) (undo-tree-id25825 . -6) (undo-tree-id25826 . -6) (undo-tree-id25827 . -6) (undo-tree-id25828 . -7) (undo-tree-id25829 . -7) (undo-tree-id25830 . -7) (undo-tree-id25831 . -8) (undo-tree-id25832 . -8) (undo-tree-id25833 . -8) (undo-tree-id25834 . -9) (undo-tree-id25835 . -9) (undo-tree-id25836 . -9) (undo-tree-id25837 . -10) (undo-tree-id25838 . -10) (undo-tree-id25839 . -11) (undo-tree-id25840 . -11) (undo-tree-id25841 . -12) (undo-tree-id25842 . -12) (undo-tree-id25843 . -12) (undo-tree-id25844 . -13) (undo-tree-id25845 . -13) (undo-tree-id25846 . -13) (undo-tree-id25847 . -13) (undo-tree-id25848 . -13) 796) nil (26041 7075 138656 584000) 0 nil])
([nil nil ((apply yas--snippet-revive 783 813 #s(yas--snippet nil (#s(yas--field 1 807 812 nil nil nil nil #s(yas--exit 813 nil))) #s(yas--exit 813 nil) 151 nil #s(yas--field 1 807 812 nil nil nil nil #s(yas--exit 813 nil)) nil nil))) nil (26041 7294 575687 83000) 0 nil])
([nil nil ((654 . 657) (t 26041 7075 168055 453000)) nil (26041 7294 575685 606000) 0 nil])
([nil nil ((656 . 657)) nil (26041 7294 575681 257000) 0 nil])
([nil nil ((#("C\"" 0 2 (face font-lock-string-face fontified t)) . -656) (undo-tree-id26145 . -2) (undo-tree-id26146 . -2) (undo-tree-id26147 . 1) (undo-tree-id26148 . -1) (undo-tree-id26149 . -1) (undo-tree-id26150 . -1) (undo-tree-id26151 . -1) (undo-tree-id26152 . -1) (undo-tree-id26153 . -1) (undo-tree-id26154 . -1) (undo-tree-id26155 . -1) (undo-tree-id26156 . -1) (undo-tree-id26157 . -1) (undo-tree-id26158 . -1) (undo-tree-id26159 . -1) (undo-tree-id26160 . -1) (undo-tree-id26161 . -1) (undo-tree-id26162 . -1) (undo-tree-id26163 . -2) (undo-tree-id26164 . -2) (undo-tree-id26165 . -2) (undo-tree-id26166 . -2) (undo-tree-id26167 . -2) (undo-tree-id26168 . -2) (undo-tree-id26169 . -2) (undo-tree-id26170 . -2) (undo-tree-id26171 . -2) (undo-tree-id26172 . -2) (undo-tree-id26173 . -2) (undo-tree-id26174 . -2) (undo-tree-id26175 . -2) (undo-tree-id26176 . -2) (undo-tree-id26177 . -2) (undo-tree-id26178 . -2) (undo-tree-id26179 . -2) (undo-tree-id26180 . -2) (undo-tree-id26181 . -2) (undo-tree-id26182 . -2) (undo-tree-id26183 . -2) (undo-tree-id26184 . -2) (undo-tree-id26185 . -2) (undo-tree-id26186 . -2) (undo-tree-id26187 . -2) (undo-tree-id26188 . -2) (undo-tree-id26189 . -2) (undo-tree-id26190 . -2) (undo-tree-id26191 . -2) 658 (t 26041 7294 611402 258000)) nil (26041 7380 525024 849000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -654) (undo-tree-id26047 . -1) (undo-tree-id26048 . -1) (undo-tree-id26049 . -1) (undo-tree-id26050 . -1) (undo-tree-id26051 . -1) (undo-tree-id26052 . -1) (undo-tree-id26053 . -1) (undo-tree-id26054 . -1) (undo-tree-id26055 . -1) (undo-tree-id26056 . -1) (undo-tree-id26057 . -1) (undo-tree-id26058 . -1) (undo-tree-id26059 . -1) (undo-tree-id26060 . -1) (undo-tree-id26061 . -1) (undo-tree-id26062 . -1) (undo-tree-id26063 . -1) (undo-tree-id26064 . -1) (undo-tree-id26065 . -1) (undo-tree-id26066 . -1) (undo-tree-id26067 . -1) (undo-tree-id26068 . -1) (undo-tree-id26069 . -1) (undo-tree-id26070 . -1) (undo-tree-id26071 . -1) (undo-tree-id26072 . -1) (undo-tree-id26073 . -1) (undo-tree-id26074 . -1) (undo-tree-id26075 . -1) (undo-tree-id26076 . -1) (undo-tree-id26077 . -1) (undo-tree-id26078 . -1) (undo-tree-id26079 . -1) (undo-tree-id26080 . -1) (undo-tree-id26081 . -1) (undo-tree-id26082 . -1) (undo-tree-id26083 . -1) (undo-tree-id26084 . -1) (undo-tree-id26085 . -1) (undo-tree-id26086 . -1) (undo-tree-id26087 . -1) (undo-tree-id26088 . -1) (undo-tree-id26089 . -1) (undo-tree-id26090 . -1) (undo-tree-id26091 . -1) (undo-tree-id26092 . -1) (undo-tree-id26093 . -1) (undo-tree-id26094 . -1) (undo-tree-id26095 . -1) (undo-tree-id26096 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -655) (undo-tree-id26097 . -1) (undo-tree-id26098 . -1) (undo-tree-id26099 . -1) (undo-tree-id26100 . -1) (undo-tree-id26101 . -1) (undo-tree-id26102 . -1) (undo-tree-id26103 . -1) (undo-tree-id26104 . -1) (undo-tree-id26105 . -1) (undo-tree-id26106 . -1) (undo-tree-id26107 . -1) (undo-tree-id26108 . -1) (undo-tree-id26109 . -1) (undo-tree-id26110 . -1) (undo-tree-id26111 . -1) (undo-tree-id26112 . -1) (undo-tree-id26113 . -1) (undo-tree-id26114 . -1) (undo-tree-id26115 . -1) (undo-tree-id26116 . -1) (undo-tree-id26117 . -1) (undo-tree-id26118 . -1) (undo-tree-id26119 . -1) (undo-tree-id26120 . -1) (undo-tree-id26121 . -1) (undo-tree-id26122 . -1) (undo-tree-id26123 . -1) (undo-tree-id26124 . -1) (undo-tree-id26125 . -1) (undo-tree-id26126 . -1) (undo-tree-id26127 . -1) (undo-tree-id26128 . -1) (undo-tree-id26129 . -1) (undo-tree-id26130 . -1) (undo-tree-id26131 . -1) (undo-tree-id26132 . -1) (undo-tree-id26133 . -1) (undo-tree-id26134 . -1) (undo-tree-id26135 . -1) (undo-tree-id26136 . -1) (undo-tree-id26137 . -1) (undo-tree-id26138 . -1) (undo-tree-id26139 . -1) (undo-tree-id26140 . -1) (undo-tree-id26141 . -1) (undo-tree-id26142 . -1) (undo-tree-id26143 . -1) (undo-tree-id26144 . -1) 656) nil (26041 7380 524979 170000) 0 nil])
([nil nil ((654 . 657) (t 26041 7380 561407 536000)) nil (26041 7540 428145 797000) 0 nil])
([nil nil ((656 . 657)) nil (26041 7540 428141 422000) 0 nil])
([nil nil ((#("       // loop {
        //     ffi::zbar_process_one(processor, -1);
        //     let symbol_set = ffi::zbar_processor_get_results(processor);
        //     if symbol_set.is_null() {
        //         continue;
        //     }
        //     let mut symbol = ffi::zbar_symbol_set_first_symbol(symbol_set);
        //     while !symbol.is_null() {
        //         let typ = ffi::zbar_symbol_get_type(symbol);
        //         let data = ffi::zbar_symbol_get_data(symbol);
                
        //         println!(
        //             \"decoded {} symbol \\\"{:?}\\\"\\n\",
        //             CStr::from_ptr(ffi::zbar_get_symbol_name(typ))
        //                 .to_str()
        //                 .unwrap(),
        //             CStr::from_ptr(data).to_str()
        //         );
        //         let loc_n = ffi::zbar_symbol_get_loc_size(symbol);

        //         for i in 0..loc_n {
        //             let loc_x = ffi::zbar_symbol_get_loc_x(symbol, i);
        //             let loc_y = ffi::zbar_symbol_get_loc_y(symbol, i);
        //             println!(\"loc: {} x: {} y: {}\", i, loc_x, loc_y);
        //         }
                
        //         symbol = ffi::zbar_symbol_next(symbol);
        //     }
        // }
" 0 7 (fontified t) 7 10 (face font-lock-comment-delimiter-face fontified t) 10 14 (face font-lock-comment-face fontified t) 14 15 (face font-lock-comment-face fontified t) 15 16 (face font-lock-comment-face fontified t) 16 17 (face font-lock-comment-face fontified t) 17 25 (fontified t) 25 28 (face font-lock-comment-delimiter-face fontified t) 28 32 (face font-lock-comment-delimiter-face fontified t) 32 35 (face font-lock-comment-face fontified t) 35 37 (face font-lock-comment-face fontified t) 37 53 (face font-lock-comment-face fontified t) 53 54 (face font-lock-comment-face fontified t) 54 67 (face font-lock-comment-face fontified t) 67 68 (face font-lock-comment-face fontified t) 68 70 (face font-lock-comment-face fontified t) 70 78 (fontified t) 78 81 (face font-lock-comment-delimiter-face fontified t) 81 85 (face font-lock-comment-delimiter-face fontified t) 85 88 (face font-lock-comment-face fontified t) 88 89 (face font-lock-comment-face fontified t) 89 99 (face font-lock-comment-face fontified t) 99 100 (face font-lock-comment-face fontified t) 100 102 (face font-lock-comment-face fontified t) 102 105 (face font-lock-comment-face fontified t) 105 107 (face font-lock-comment-face fontified t) 107 133 (face font-lock-comment-face fontified t) 133 134 (face font-lock-comment-face fontified t) 134 143 (face font-lock-comment-face fontified t) 143 144 (face font-lock-comment-face fontified t) 144 146 (face font-lock-comment-face fontified t) 146 154 (fontified t) 154 157 (face font-lock-comment-delimiter-face fontified t) 157 161 (face font-lock-comment-delimiter-face fontified t) 161 163 (face font-lock-comment-face fontified t) 163 164 (face font-lock-comment-face fontified t) 164 175 (face font-lock-comment-face fontified t) 175 182 (face font-lock-comment-face fontified t) 182 183 (face font-lock-comment-face fontified t) 183 184 (face font-lock-comment-face fontified t) 184 185 (face font-lock-comment-face fontified t) 185 186 (face font-lock-comment-face fontified t) 186 187 (face font-lock-comment-face fontified t) 187 195 (fontified t) 195 198 (face font-lock-comment-delimiter-face fontified t) 198 206 (face font-lock-comment-delimiter-face fontified t) 206 214 (face font-lock-comment-face fontified t) 214 215 (face font-lock-comment-face fontified t) 215 216 (face font-lock-comment-face fontified t) 216 224 (fontified t) 224 227 (fontified t face font-lock-comment-delimiter-face) 227 231 (fontified t face font-lock-comment-delimiter-face) 231 232 (fontified t face font-lock-comment-face) 232 233 (fontified t face font-lock-comment-face) 233 241 (fontified t) 241 244 (face font-lock-comment-delimiter-face fontified t) 244 248 (face font-lock-comment-delimiter-face fontified t) 248 251 (face font-lock-comment-face fontified t) 251 252 (face font-lock-comment-face fontified t) 252 255 (face font-lock-comment-face fontified t) 255 256 (face font-lock-comment-face fontified t) 256 262 (face font-lock-comment-face fontified t) 262 265 (face font-lock-comment-face fontified t) 265 268 (face font-lock-comment-face fontified t) 268 270 (face font-lock-comment-face fontified t) 270 298 (face font-lock-comment-face fontified t) 298 299 (face font-lock-comment-face fontified t) 299 309 (face font-lock-comment-face fontified t) 309 310 (face font-lock-comment-face fontified t) 310 311 (face font-lock-comment-face fontified t) 311 312 (face font-lock-comment-face fontified t) 312 320 (fontified t) 320 323 (face font-lock-comment-delimiter-face fontified t) 323 327 (face font-lock-comment-delimiter-face fontified t) 327 332 (face font-lock-comment-face fontified t) 332 334 (face font-lock-comment-face fontified t) 334 340 (face font-lock-comment-face fontified t) 340 341 (face font-lock-comment-face fontified t) 341 348 (face font-lock-comment-face fontified t) 348 349 (face font-lock-comment-face fontified t) 349 350 (face font-lock-comment-face fontified t) 350 351 (face font-lock-comment-face fontified t) 351 352 (face font-lock-comment-face fontified t) 352 353 (face font-lock-comment-face fontified t) 353 361 (fontified t) 361 364 (face font-lock-comment-delimiter-face fontified t) 364 372 (face font-lock-comment-delimiter-face fontified t) 372 375 (face font-lock-comment-face fontified t) 375 376 (face font-lock-comment-face fontified t) 376 379 (face font-lock-comment-face fontified t) 379 382 (face font-lock-comment-face fontified t) 382 385 (face font-lock-comment-face fontified t) 385 387 (face font-lock-comment-face fontified t) 387 407 (face font-lock-comment-face fontified t) 407 408 (face font-lock-comment-face fontified t) 408 414 (face font-lock-comment-face fontified t) 414 415 (face font-lock-comment-face fontified t) 415 417 (face font-lock-comment-face fontified t) 417 425 (fontified t) 425 428 (face font-lock-comment-delimiter-face fontified t) 428 436 (face font-lock-comment-delimiter-face fontified t) 436 439 (face font-lock-comment-face fontified t) 439 440 (face font-lock-comment-face fontified t) 440 444 (face font-lock-comment-face fontified t) 444 447 (face font-lock-comment-face fontified t) 447 450 (face font-lock-comment-face fontified t) 450 452 (face font-lock-comment-face fontified t) 452 472 (face font-lock-comment-face fontified t) 472 473 (face font-lock-comment-face fontified t) 473 479 (face font-lock-comment-face fontified t) 479 480 (face font-lock-comment-face fontified t) 480 482 (face font-lock-comment-face fontified t) 482 498 (fontified t) 498 507 (fontified t) 507 510 (face font-lock-comment-delimiter-face fontified t) 510 518 (face font-lock-comment-delimiter-face fontified t) 518 521 (face font-lock-comment-face fontified t) 521 526 (face font-lock-comment-face fontified t) 526 527 (face font-lock-comment-face fontified t) 527 528 (face font-lock-comment-face fontified t) 528 536 (fontified t) 536 539 (face font-lock-comment-delimiter-face fontified t) 539 543 (face font-lock-comment-delimiter-face fontified t) 543 551 (face font-lock-comment-delimiter-face fontified t) 551 560 (face font-lock-comment-face fontified t) 560 562 (face font-lock-comment-face fontified t) 562 565 (face font-lock-comment-face fontified t) 565 575 (face font-lock-comment-face fontified t) 575 580 (face font-lock-comment-face fontified t) 580 581 (face font-lock-comment-face fontified t rear-nonsticky t) 581 582 (face font-lock-comment-face fontified t) 582 583 (face font-lock-comment-face fontified t) 583 591 (fontified t) 591 594 (face font-lock-comment-delimiter-face fontified t) 594 601 (face font-lock-comment-delimiter-face fontified t) 601 606 (face font-lock-comment-delimiter-face fontified t) 606 610 (face font-lock-comment-face fontified t) 610 612 (face font-lock-comment-face fontified t) 612 620 (face font-lock-comment-face fontified t) 620 621 (face font-lock-comment-face fontified t) 621 624 (face font-lock-comment-face fontified t) 624 626 (face font-lock-comment-face fontified t) 626 627 (face font-lock-comment-face fontified t) 627 646 (face font-lock-comment-face fontified t) 646 647 (face font-lock-comment-face fontified t) 647 650 (face font-lock-comment-face fontified t) 650 651 (face font-lock-comment-face fontified t) 651 652 (face font-lock-comment-face fontified t) 652 653 (face font-lock-comment-face fontified t) 653 661 (fontified t) 661 664 (face font-lock-comment-delimiter-face fontified t) 664 680 (face font-lock-comment-delimiter-face fontified t) 680 681 (face font-lock-comment-face fontified t) 681 687 (face font-lock-comment-face fontified t) 687 688 (face font-lock-comment-face fontified t) 688 689 (face font-lock-comment-face fontified t) 689 690 (face font-lock-comment-face fontified t) 690 698 (fontified t) 698 701 (face font-lock-comment-delimiter-face fontified t) 701 717 (face font-lock-comment-delimiter-face fontified t) 717 718 (face font-lock-comment-face fontified t) 718 724 (face font-lock-comment-face fontified t) 724 725 (face font-lock-comment-face fontified t) 725 726 (face font-lock-comment-face fontified t) 726 727 (face font-lock-comment-face fontified t) 727 728 (face font-lock-comment-face fontified t) 728 736 (fontified t) 736 739 (face font-lock-comment-delimiter-face fontified t) 739 742 (face font-lock-comment-delimiter-face fontified t) 742 743 (face font-lock-comment-delimiter-face fontified t) 743 751 (face font-lock-comment-delimiter-face fontified t) 751 755 (face font-lock-comment-face fontified t) 755 757 (face font-lock-comment-face fontified t) 757 765 (face font-lock-comment-face fontified t) 765 766 (face font-lock-comment-face fontified t) 766 770 (face font-lock-comment-face fontified t) 770 771 (face font-lock-comment-face fontified t) 771 772 (face font-lock-comment-face fontified t) 772 778 (face font-lock-comment-face fontified t) 778 779 (face font-lock-comment-face fontified t) 779 780 (face font-lock-comment-face fontified t) 780 781 (face font-lock-comment-face fontified t) 781 789 (fontified t) 789 792 (face font-lock-comment-delimiter-face fontified t) 792 800 (face font-lock-comment-delimiter-face fontified t) 800 801 (face font-lock-comment-face fontified t) 801 803 (face font-lock-comment-face fontified t) 803 811 (fontified t) 811 814 (face font-lock-comment-delimiter-face fontified t) 814 822 (face font-lock-comment-delimiter-face fontified t) 822 825 (face font-lock-comment-face fontified t) 825 826 (face font-lock-comment-face fontified t) 826 831 (face font-lock-comment-face fontified t) 831 834 (face font-lock-comment-face fontified t) 834 837 (face font-lock-comment-face fontified t) 837 839 (face font-lock-comment-face fontified t) 839 863 (face font-lock-comment-face fontified t) 863 864 (face font-lock-comment-face fontified t) 864 870 (face font-lock-comment-face fontified t) 870 871 (face font-lock-comment-face fontified t) 871 873 (face font-lock-comment-face fontified t) 873 874 (fontified t) 874 882 (fontified t) 882 885 (face font-lock-comment-delimiter-face fontified t) 885 893 (face font-lock-comment-delimiter-face fontified t) 893 896 (face font-lock-comment-face fontified t) 896 897 (face font-lock-comment-face fontified t) 897 898 (face font-lock-comment-face fontified t) 898 899 (face font-lock-comment-face fontified t) 899 901 (face font-lock-comment-face fontified t) 901 905 (face font-lock-comment-face fontified t) 905 911 (face font-lock-comment-face fontified t) 911 912 (face font-lock-comment-face fontified t) 912 913 (face font-lock-comment-face fontified t) 913 921 (fontified t) 921 924 (face font-lock-comment-delimiter-face fontified t) 924 936 (face font-lock-comment-delimiter-face fontified t) 936 939 (face font-lock-comment-face fontified t) 939 940 (face font-lock-comment-face fontified t) 940 945 (face font-lock-comment-face fontified t) 945 948 (face font-lock-comment-face fontified t) 948 951 (face font-lock-comment-face fontified t) 951 953 (face font-lock-comment-face fontified t) 953 974 (face font-lock-comment-face fontified t) 974 975 (face font-lock-comment-face fontified t) 975 979 (face font-lock-comment-face fontified t) 979 984 (face font-lock-comment-face fontified t) 984 985 (face font-lock-comment-face fontified t) 985 986 (face font-lock-comment-face fontified t rear-nonsticky t) 986 987 (face font-lock-comment-face fontified t) 987 995 (fontified t) 995 998 (face font-lock-comment-delimiter-face fontified t) 998 1010 (face font-lock-comment-delimiter-face fontified t) 1010 1013 (face font-lock-comment-face fontified t) 1013 1014 (face font-lock-comment-face fontified t) 1014 1019 (face font-lock-comment-face fontified t) 1019 1022 (face font-lock-comment-face fontified t) 1022 1025 (face font-lock-comment-face fontified t) 1025 1027 (face font-lock-comment-face fontified t) 1027 1048 (face font-lock-comment-face fontified t) 1048 1049 (face font-lock-comment-face fontified t) 1049 1058 (face font-lock-comment-face fontified t) 1058 1059 (face font-lock-comment-face fontified t) 1059 1060 (face font-lock-comment-face fontified t rear-nonsticky t) 1060 1061 (face font-lock-comment-face fontified t) 1061 1069 (fontified t) 1069 1072 (face font-lock-comment-delimiter-face fontified t) 1072 1084 (face font-lock-comment-delimiter-face fontified t) 1084 1092 (face font-lock-comment-face fontified t) 1092 1093 (face font-lock-comment-face fontified t) 1093 1099 (face font-lock-comment-face fontified t) 1099 1101 (face font-lock-comment-face fontified t) 1101 1105 (face font-lock-comment-face fontified t) 1105 1107 (face font-lock-comment-face fontified t) 1107 1111 (face font-lock-comment-face fontified t) 1111 1113 (face font-lock-comment-face fontified t) 1113 1114 (face font-lock-comment-face fontified t) 1114 1117 (face font-lock-comment-face fontified t) 1117 1119 (face font-lock-comment-face fontified t) 1119 1126 (face font-lock-comment-face fontified t) 1126 1131 (face font-lock-comment-face fontified t) 1131 1132 (face font-lock-comment-face fontified t) 1132 1133 (face font-lock-comment-face fontified t rear-nonsticky t) 1133 1134 (face font-lock-comment-face fontified t) 1134 1142 (fontified t) 1142 1145 (face font-lock-comment-delimiter-face fontified t) 1145 1153 (face font-lock-comment-delimiter-face fontified t) 1153 1154 (face font-lock-comment-face fontified t) 1154 1155 (face font-lock-comment-face fontified t) 1155 1171 (fontified t) 1171 1180 (fontified t) 1180 1183 (face font-lock-comment-delimiter-face fontified t) 1183 1191 (face font-lock-comment-delimiter-face fontified t) 1191 1197 (face font-lock-comment-face fontified t) 1197 1200 (face font-lock-comment-face fontified t) 1200 1203 (face font-lock-comment-face fontified t) 1203 1205 (face font-lock-comment-face fontified t) 1205 1216 (face font-lock-comment-face fontified t) 1216 1221 (face font-lock-comment-face fontified t) 1221 1222 (face font-lock-comment-face fontified t) 1222 1228 (face font-lock-comment-face fontified t) 1228 1229 (face font-lock-comment-face fontified t) 1229 1231 (face font-lock-comment-face fontified t) 1231 1239 (fontified t) 1239 1242 (face font-lock-comment-delimiter-face fontified t) 1242 1246 (face font-lock-comment-delimiter-face fontified t) 1246 1247 (face font-lock-comment-face fontified t rear-nonsticky t) 1247 1248 (face font-lock-comment-face fontified t) 1248 1256 (fontified t) 1256 1259 (face font-lock-comment-delimiter-face fontified t) 1259 1261 (face font-lock-comment-face fontified t)) . 3478) (undo-tree-id26192 . -1261) (undo-tree-id26193 . -241) (undo-tree-id26194 . -482) (undo-tree-id26195 . -803) (undo-tree-id26196 . -873) (undo-tree-id26197 . -913) (undo-tree-id26198 . -42) (undo-tree-id26199 . -17) (undo-tree-id26200 . -1117) (undo-tree-id26201 . -247) (undo-tree-id26202 . -1247) (undo-tree-id26203 . -1260) (undo-tree-id26204 . -17) (undo-tree-id26205 . -1261) (undo-tree-id26206 . -1261) (undo-tree-id26207 . -1261) (undo-tree-id26208 . -1260) (undo-tree-id26209 . -1244) (undo-tree-id26210 . -1184) (undo-tree-id26211 . -1145) (undo-tree-id26212 . -997) (undo-tree-id26213 . -924) (undo-tree-id26214 . -873) (undo-tree-id26215 . -873) (undo-tree-id26216 . -873) (undo-tree-id26217 . -873) (undo-tree-id26218 . -873) (undo-tree-id26219 . -873) (undo-tree-id26220 . -803) (undo-tree-id26221 . -1261) (t 26041 7540 464750 682000)) nil (26041 7561 453125 905000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -3476) (undo-tree-id26222 . -1) (undo-tree-id26223 . -1) (undo-tree-id26224 . -1) (undo-tree-id26225 . -1) (undo-tree-id26226 . -1) (undo-tree-id26227 . -1) (undo-tree-id26228 . -1) (undo-tree-id26229 . -1) (undo-tree-id26230 . -1) (undo-tree-id26231 . -1) (undo-tree-id26232 . -1) (undo-tree-id26233 . -1) (undo-tree-id26234 . -1) (undo-tree-id26235 . -1) (undo-tree-id26236 . -1) (undo-tree-id26237 . -1) (undo-tree-id26238 . -1) (undo-tree-id26239 . -1) (undo-tree-id26240 . -1) (undo-tree-id26241 . -1) (undo-tree-id26242 . -1) (undo-tree-id26243 . -1) (undo-tree-id26244 . -1) (undo-tree-id26245 . -1) (undo-tree-id26246 . -1) (undo-tree-id26247 . -1) (undo-tree-id26248 . -1) (undo-tree-id26249 . -1) (undo-tree-id26250 . -1) (undo-tree-id26251 . -1) (undo-tree-id26252 . -1) (undo-tree-id26253 . -1) (undo-tree-id26254 . -1) (undo-tree-id26255 . -1) (undo-tree-id26256 . -1) (undo-tree-id26257 . -1) (undo-tree-id26258 . -1) (undo-tree-id26259 . -1) (undo-tree-id26260 . -1) (undo-tree-id26261 . -1) (undo-tree-id26262 . -1) (undo-tree-id26263 . -1) (undo-tree-id26264 . -1) (undo-tree-id26265 . -1) (undo-tree-id26266 . -1) (undo-tree-id26267 . -1) (undo-tree-id26268 . -1) (undo-tree-id26269 . -1) (#(" " 0 1 (fontified t)) . -3477) (undo-tree-id26270 . -1) (undo-tree-id26271 . -1) (undo-tree-id26272 . -1) (undo-tree-id26273 . -1) (undo-tree-id26274 . -1) (undo-tree-id26275 . -1) (undo-tree-id26276 . -1) (undo-tree-id26277 . -1) (undo-tree-id26278 . -1) (undo-tree-id26279 . -1) (undo-tree-id26280 . -1) (undo-tree-id26281 . -1) (undo-tree-id26282 . -1) (undo-tree-id26283 . -1) (undo-tree-id26284 . -1) (undo-tree-id26285 . -1) (undo-tree-id26286 . -1) (undo-tree-id26287 . -1) (undo-tree-id26288 . -1) (undo-tree-id26289 . -1) (undo-tree-id26290 . -1) (undo-tree-id26291 . -1) (undo-tree-id26292 . -1) (undo-tree-id26293 . -1) (undo-tree-id26294 . -1) (undo-tree-id26295 . -1) (undo-tree-id26296 . -1) (undo-tree-id26297 . -1) (undo-tree-id26298 . -1) (undo-tree-id26299 . -1) (undo-tree-id26300 . -1) (undo-tree-id26301 . -1) (undo-tree-id26302 . -1) (undo-tree-id26303 . -1) (undo-tree-id26304 . -1) (undo-tree-id26305 . -1) (undo-tree-id26306 . -1) (undo-tree-id26307 . -1) (undo-tree-id26308 . -1) (undo-tree-id26309 . -1) (undo-tree-id26310 . -1) (undo-tree-id26311 . -1) (undo-tree-id26312 . -1) (undo-tree-id26313 . -1) (undo-tree-id26314 . -1) 3478 (t 26041 7561 491418 640000)) nil (26041 7563 743902 822000) 0 nil])
([nil nil ((#("null" 0 4 (fontified t)) . -92) (undo-tree-id26513 . -4) (undo-tree-id26514 . -4) (undo-tree-id26515 . -2) (undo-tree-id26516 . -2) (undo-tree-id26517 . -2) (undo-tree-id26518 . -2) (undo-tree-id26519 . -2) (undo-tree-id26520 . -2) (undo-tree-id26521 . -2) (undo-tree-id26522 . -2) (undo-tree-id26523 . -2) (undo-tree-id26524 . -2) (undo-tree-id26525 . -2) (undo-tree-id26526 . -2) (undo-tree-id26527 . -2) (undo-tree-id26528 . -2) (undo-tree-id26529 . -2) (undo-tree-id26530 . -2) (undo-tree-id26531 . -2) (undo-tree-id26532 . -2) (undo-tree-id26533 . -2) (undo-tree-id26534 . -2) (undo-tree-id26535 . -2) (undo-tree-id26536 . -2) (undo-tree-id26537 . -2) (undo-tree-id26538 . -4) (undo-tree-id26539 . -4) (undo-tree-id26540 . -4) (undo-tree-id26541 . -4) (undo-tree-id26542 . -4) (undo-tree-id26543 . -4) (undo-tree-id26544 . -4) (undo-tree-id26545 . -4) (undo-tree-id26546 . -4) (undo-tree-id26547 . -4) (undo-tree-id26548 . -4) (undo-tree-id26549 . -4) (undo-tree-id26550 . -4) (undo-tree-id26551 . -4) 96 (t 26041 7563 778085 447000)) nil (26041 7825 38268 286000) 0 nil])
([nil nil ((#("ptr::" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t)) . -87) (undo-tree-id26449 . -5) (undo-tree-id26450 . -5) (undo-tree-id26451 . -4) (undo-tree-id26452 . -4) (undo-tree-id26453 . -4) (undo-tree-id26454 . -4) (undo-tree-id26455 . -4) (undo-tree-id26456 . -4) (undo-tree-id26457 . -4) (undo-tree-id26458 . -4) (undo-tree-id26459 . -4) (undo-tree-id26460 . -4) (undo-tree-id26461 . -4) (undo-tree-id26462 . -4) (undo-tree-id26463 . -4) (undo-tree-id26464 . -4) (undo-tree-id26465 . -4) (undo-tree-id26466 . -4) (undo-tree-id26467 . -4) (undo-tree-id26468 . -4) (undo-tree-id26469 . -4) (undo-tree-id26470 . -4) (undo-tree-id26471 . -4) (undo-tree-id26472 . -4) (undo-tree-id26473 . -4) (undo-tree-id26474 . -5) (undo-tree-id26475 . -5) (undo-tree-id26476 . -5) (undo-tree-id26477 . -5) (undo-tree-id26478 . -5) (undo-tree-id26479 . -5) (undo-tree-id26480 . -5) (undo-tree-id26481 . -5) (undo-tree-id26482 . -5) (undo-tree-id26483 . -5) (undo-tree-id26484 . -5) (undo-tree-id26485 . -5) (undo-tree-id26486 . -5) (undo-tree-id26487 . -5) (undo-tree-id26488 . -5) (undo-tree-id26489 . -5) (undo-tree-id26490 . -5) (undo-tree-id26491 . -5) (undo-tree-id26492 . -5) (undo-tree-id26493 . -5) (undo-tree-id26494 . -5) (undo-tree-id26495 . -5) (undo-tree-id26496 . -5) (undo-tree-id26497 . -5) (undo-tree-id26498 . -5) (undo-tree-id26499 . -5) (undo-tree-id26500 . -5) (undo-tree-id26501 . -5) (undo-tree-id26502 . -5) (undo-tree-id26503 . -5) (undo-tree-id26504 . -5) (undo-tree-id26505 . -5) (undo-tree-id26506 . -5) (undo-tree-id26507 . -5) (undo-tree-id26508 . -5) (undo-tree-id26509 . -5) (undo-tree-id26510 . -5) (undo-tree-id26511 . -5) (undo-tree-id26512 . -5) 92) nil (26041 7825 38237 679000) 0 nil])
([nil current ((#("," 0 1 (fontified t)) . -85) (undo-tree-id26315 . -1) (undo-tree-id26316 . -1) (undo-tree-id26317 . -1) (undo-tree-id26318 . -1) (undo-tree-id26319 . -1) (undo-tree-id26320 . -1) (undo-tree-id26321 . -1) (undo-tree-id26322 . -1) (undo-tree-id26323 . -1) (undo-tree-id26324 . -1) (undo-tree-id26325 . -1) (undo-tree-id26326 . -1) (undo-tree-id26327 . -1) (undo-tree-id26328 . -1) (undo-tree-id26329 . -1) (undo-tree-id26330 . -1) (undo-tree-id26331 . -1) (undo-tree-id26332 . -1) (undo-tree-id26333 . -1) (undo-tree-id26334 . -1) (undo-tree-id26335 . -1) (undo-tree-id26336 . -1) (undo-tree-id26337 . -1) (undo-tree-id26338 . -1) (undo-tree-id26339 . -1) (undo-tree-id26340 . -1) (undo-tree-id26341 . -1) (undo-tree-id26342 . -1) (undo-tree-id26343 . -1) (undo-tree-id26344 . -1) (undo-tree-id26345 . -1) (undo-tree-id26346 . -1) (undo-tree-id26347 . -1) (undo-tree-id26348 . -1) (undo-tree-id26349 . -1) (undo-tree-id26350 . -1) (undo-tree-id26351 . -1) (undo-tree-id26352 . -1) (undo-tree-id26353 . -1) (undo-tree-id26354 . -1) (undo-tree-id26355 . -1) (undo-tree-id26356 . -1) (undo-tree-id26357 . -1) (undo-tree-id26358 . -1) (undo-tree-id26359 . -1) (undo-tree-id26360 . -1) (undo-tree-id26361 . -1) (undo-tree-id26362 . -1) (undo-tree-id26363 . -1) (undo-tree-id26364 . -1) (undo-tree-id26365 . -1) (undo-tree-id26366 . -1) (undo-tree-id26367 . -1) (undo-tree-id26368 . -1) (undo-tree-id26369 . -1) (undo-tree-id26370 . -1) (undo-tree-id26371 . -1) (undo-tree-id26372 . -1) (undo-tree-id26373 . -1) (undo-tree-id26374 . -1) (undo-tree-id26375 . -1) (undo-tree-id26376 . -1) (undo-tree-id26377 . -1) (undo-tree-id26378 . -1) (undo-tree-id26379 . -1) (undo-tree-id26380 . -1) (undo-tree-id26381 . -1) (undo-tree-id26382 . -1) (#(" " 0 1 (fontified t)) . -86) (undo-tree-id26383 . -1) (undo-tree-id26384 . -1) (undo-tree-id26385 . -1) (undo-tree-id26386 . -1) (undo-tree-id26387 . -1) (undo-tree-id26388 . -1) (undo-tree-id26389 . -1) (undo-tree-id26390 . -1) (undo-tree-id26391 . -1) (undo-tree-id26392 . -1) (undo-tree-id26393 . -1) (undo-tree-id26394 . -1) (undo-tree-id26395 . -1) (undo-tree-id26396 . -1) (undo-tree-id26397 . -1) (undo-tree-id26398 . -1) (undo-tree-id26399 . -1) (undo-tree-id26400 . -1) (undo-tree-id26401 . -1) (undo-tree-id26402 . -1) (undo-tree-id26403 . -1) (undo-tree-id26404 . -1) (undo-tree-id26405 . -1) (undo-tree-id26406 . -1) (undo-tree-id26407 . -1) (undo-tree-id26408 . -1) (undo-tree-id26409 . -1) (undo-tree-id26410 . -1) (undo-tree-id26411 . -1) (undo-tree-id26412 . -1) (undo-tree-id26413 . -1) (undo-tree-id26414 . -1) (undo-tree-id26415 . -1) (undo-tree-id26416 . -1) (undo-tree-id26417 . -1) (undo-tree-id26418 . -1) (undo-tree-id26419 . -1) (undo-tree-id26420 . -1) (undo-tree-id26421 . -1) (undo-tree-id26422 . -1) (undo-tree-id26423 . -1) (undo-tree-id26424 . -1) (undo-tree-id26425 . -1) (undo-tree-id26426 . -1) (undo-tree-id26427 . -1) (undo-tree-id26428 . -1) (undo-tree-id26429 . -1) (undo-tree-id26430 . -1) (undo-tree-id26431 . -1) (undo-tree-id26432 . -1) (undo-tree-id26433 . -1) (undo-tree-id26434 . -1) (undo-tree-id26435 . -1) (undo-tree-id26436 . -1) (undo-tree-id26437 . -1) (undo-tree-id26438 . -1) (undo-tree-id26439 . -1) (undo-tree-id26440 . -1) (undo-tree-id26441 . -1) (undo-tree-id26442 . -1) (undo-tree-id26443 . -1) (undo-tree-id26444 . -1) (undo-tree-id26445 . -1) (undo-tree-id26446 . -1) (undo-tree-id26447 . -1) (undo-tree-id26448 . -1) 87) nil (26041 7825 38185 832000) 0 nil])
nil
