(undo-tree-save-format-version . 1)
"c7e8d8dff9b7f1d263423a95e56e3c13432b5b61"
[nil nil nil nil (26116 22799 662119 628000) 0 nil]
([nil nil ((1 . 7) (t 26116 22394 585453 216000)) nil (26116 22799 662118 574000) 0 nil])
([nil nil ((7 . 11)) nil (26116 22799 662117 781000) 0 nil])
([nil nil ((11 . 26)) nil (26116 22799 662117 232000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . 26) (26 . 30) (25 . 27)) nil (26116 22799 662116 534000) 0 nil])
([nil nil ((26 . 30)) nil (26116 22799 662115 710000) 0 nil])
([nil nil ((30 . 39)) nil (26116 22799 662115 150000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -36) (undo-tree-id116 . -1) (#("n" 0 1 (fontified t)) . -37) (undo-tree-id117 . -1) (#("b" 0 1 (fontified t)) . -38) (undo-tree-id118 . -1) 39) nil (26116 22799 662114 156000) 0 nil])
([nil nil ((36 . 38)) nil (26116 22799 662111 12000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -37) (undo-tree-id115 . -1) 38) nil (26116 22799 662110 263000) 0 nil])
([nil nil ((37 . 45)) nil (26116 22799 662108 924000) 0 nil])
([nil nil ((45 . 46)) nil (26116 22799 662108 307000) 0 nil])
([nil nil ((44 . 49) (#("us" 0 2 (fontified nil)) . 44) (44 . 46) (#("usize" 0 5 (fontified nil)) . -44) (44 . 49) (#("us" 0 2 (fontified t)) . -44) (undo-tree-id114 . -2) 46) nil (26116 22799 662107 324000) 0 nil])
([nil nil ((49 . 50)) nil (26116 22799 662105 434000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -49) (undo-tree-id113 . -1) 50) nil (26116 22799 662104 294000) 0 nil])
([nil nil ((49 . 50)) nil (26116 22799 662102 886000) 0 nil])
([nil nil ((50 . 55)) nil (26116 22799 662102 348000) 0 nil])
([nil nil ((55 . 63)) nil (26116 22799 662101 710000) 0 nil])
([nil nil ((63 . 65)) nil (26116 22799 662101 165000) 0 nil])
([nil nil ((64 . 68) (#("b" 0 1 (fontified nil)) . 64) (64 . 65) (#("bool" 0 4 (fontified nil)) . -64) (64 . 68) (#("b" 0 1 (fontified t)) . -64) (undo-tree-id112 . -1) 65) nil (26116 22799 662100 35000) 0 nil])
([nil nil ((68 . 69)) nil (26116 22799 662097 937000) 0 nil])
([nil nil ((69 . 74)) nil (26116 22799 662097 415000) 0 nil])
([nil nil ((74 . 80)) nil (26116 22799 662096 841000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -79) (undo-tree-id111 . -1) 80) nil (26116 22799 662096 140000) 0 nil])
([nil nil ((79 . 89)) nil (26116 22799 662094 815000) 0 nil])
([nil nil ((88 . 92) (#("b" 0 1 (fontified nil)) . 88) (88 . 89) (#("bool" 0 4 (fontified nil)) . -88) (88 . 92) (#("b" 0 1 (fontified t)) . -88) (undo-tree-id110 . -1) 89) nil (26116 22799 662093 858000) 0 nil])
([nil nil ((92 . 93)) nil (26116 22799 662091 953000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -92) (undo-tree-id109 . -1) 93) nil (26116 22799 662091 292000) 0 nil])
([nil nil ((92 . 93)) nil (26116 22799 662089 994000) 0 nil])
([nil nil ((93 . 98)) nil (26116 22799 662089 372000) 0 nil])
([nil nil ((98 . 101)) nil (26116 22799 662088 741000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -99) (undo-tree-id107 . -1) (#("s" 0 1 (fontified t)) . -100) (undo-tree-id108 . -1) 101) nil (26116 22799 662087 871000) 0 nil])
([nil nil ((99 . 102)) nil (26116 22799 662085 775000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -101) (undo-tree-id106 . -1) 102) nil (26116 22799 662085 99000) 0 nil])
([nil nil ((101 . 111)) nil (26116 22799 662083 794000) 0 nil])
([nil nil ((110 . 114) (#("b" 0 1 (fontified nil)) . 110) (110 . 111) (#("bool" 0 4 (fontified nil)) . -110) (110 . 114) (#("b" 0 1 (fontified t)) . -110) (undo-tree-id105 . -1) 111) nil (26116 22799 662082 812000) 0 nil])
([nil nil ((114 . 115)) nil (26116 22799 662080 630000) 0 nil])
([nil nil ((115 . 120)) nil (26116 22799 662080 64000) 0 nil])
([nil nil ((120 . 123)) nil (26116 22799 662079 506000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -122) (undo-tree-id104 . -1) 123) nil (26116 22799 662078 708000) 0 nil])
([nil nil ((122 . 133)) nil (26116 22799 662077 387000) 0 nil])
([nil nil ((132 . 136) (#("b" 0 1 (fontified nil)) . 132) (132 . 133) (#("bool" 0 4 (fontified nil)) . -132) (132 . 136) (#("b" 0 1 (fontified t)) . -132) (undo-tree-id103 . -1) 133) nil (26116 22799 662076 353000) 0 nil])
([nil nil ((136 . 137)) nil (26116 22799 662074 396000) 0 nil])
([nil nil ((137 . 142)) nil (26116 22799 662073 653000) 0 nil])
([nil nil ((142 . 148)) nil (26116 22799 662073 121000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -147) (undo-tree-id102 . -1) 148) nil (26116 22799 662072 314000) 0 nil])
([nil nil ((147 . 152)) nil (26116 22799 662070 982000) 0 nil])
([nil nil ((151 . 155) (#("b" 0 1 (fontified nil)) . 151) (151 . 152) (#("bool" 0 4 (fontified nil)) . -151) (151 . 155) (#("b" 0 1 (fontified t)) . -151) (undo-tree-id101 . -1) 152) nil (26116 22799 662070 26000) 0 nil])
([nil nil ((155 . 156)) nil (26116 22799 662067 919000) 0 nil])
([nil nil ((158 . 162) (#("    " 0 4 (fontified nil)) . 157) (undo-tree-id100 . -4) (156 . 162)) nil (26116 22799 662067 112000) 0 nil])
([nil nil ((162 . 163)) nil (26116 22799 662065 333000) 0 nil])
([nil nil ((#("T" 0 1 (face font-lock-type-face fontified t)) . -162) (undo-tree-id99 . -1) 163) nil (26116 22799 662064 625000) 0 nil])
([nil nil ((162 . 170)) nil (26116 22799 662063 188000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -169) (undo-tree-id98 . -1) 170) nil (26116 22799 662062 414000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -168) (undo-tree-id97 . -1) 169) nil (26116 22799 662059 932000) 0 nil])
([nil nil ((168 . 169)) nil (26116 22799 661675 800000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -168) (undo-tree-id96 . -1) 169) nil (26116 22799 661675 42000) 0 nil])
([nil nil ((168 . 171)) nil (26116 22799 661673 707000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -168) (undo-tree-id93 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -169) (undo-tree-id94 . -1) (#("t" 0 1 (fontified t)) . -170) (undo-tree-id95 . -1) 171) nil (26116 22799 661672 733000) 0 nil])
([nil nil ((168 . 172)) nil (26116 22799 661669 941000) 0 nil])
([nil nil ((172 . 177)) nil (26116 22799 661669 356000) 0 nil])
([nil nil ((179 . 181)) nil (26116 22799 661668 852000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -179) (undo-tree-id91 . -1) (#("o" 0 1 (fontified t)) . -180) (undo-tree-id92 . -1) 181) nil (26116 22799 661668 24000) 0 nil])
([nil nil ((177 . 182)) nil (26116 22799 661665 829000) 0 nil])
([nil nil ((182 . 185)) nil (26116 22799 661665 260000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -183) (undo-tree-id89 . -1) (#("o" 0 1 (fontified t)) . -184) (undo-tree-id90 . -1) 185) nil (26116 22799 661664 384000) 0 nil])
([nil nil ((183 . 192)) nil (26116 22799 661661 946000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -189) (undo-tree-id86 . -1) (#("=" 0 1 (fontified t)) . -190) (undo-tree-id87 . -1) (#(" " 0 1 (fontified t)) . -191) (undo-tree-id88 . -1) 192) nil (26116 22799 661660 916000) 0 nil])
([nil nil ((189 . 197)) nil (26116 22799 661657 726000) 0 nil])
([nil nil ((1 . 23) (apply yas--snippet-revive 191 200 #s(yas--snippet nil nil #s(yas--exit 199 nil) 115 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 199 nil) 115 nil nil nil nil)) (191 . 200) (#("Vector3<$0>" 0 11 (fontified nil)) . 191) (191 . 202) (#("Vector" 0 6 (fontified nil)) . 191) (191 . 197) (#("Vector3<…> (use cgmath::Vector3)" 0 32 (fontified nil)) . -191) (191 . 223) (#("Vector" 0 6 (face font-lock-type-face fontified t)) . -191) (undo-tree-id85 . -6) 197) nil (26116 22799 661656 277000) 0 nil])
([nil nil ((221 . 222)) nil (26116 22799 661653 566000) 0 nil])
([nil nil ((221 . 224) (#("f" 0 1 (fontified nil)) . 221) (221 . 222) (#("f32" 0 3 (fontified nil)) . -221) (221 . 224) (#("f" 0 1 (fontified t)) . -221) (undo-tree-id84 . -1) 222) nil (26116 22799 661652 427000) 0 nil])
([nil nil ((225 . 226)) nil (26116 22799 661649 779000) 0 nil])
([nil nil ((226 . 231)) nil (26116 22799 661649 140000) 0 nil])
([nil nil ((231 . 249)) nil (26116 22799 661648 331000) 0 nil])
([nil nil ((apply yas--snippet-revive 248 257 #s(yas--snippet nil nil #s(yas--exit 256 nil) 116 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 256 nil) 116 nil nil nil nil)) (248 . 257) (#("Vector3<$0>" 0 11 (fontified nil)) . 248) (248 . 259) (#("V" 0 1 (fontified nil)) . 248) (248 . 249) (#("Vector3<…>" 0 10 (fontified nil)) . -248) (248 . 258) (#("V" 0 1 (face font-lock-type-face fontified t)) . -248) (undo-tree-id83 . -1) 249) nil (26116 22799 661645 643000) 0 nil])
([nil nil ((256 . 259)) nil (26116 22799 661501 560000) 0 nil])
([nil nil ((#("f32>" 0 3 (face font-lock-type-face fontified t) 3 4 (face (rainbow-delimiters-depth-2-face) fontified t)) . -221) (undo-tree-id82 . -4) 225) nil (26116 22799 661500 734000) 0 nil])
([nil nil ((#("<" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -220) (undo-tree-id81 . -1) 221) nil (26116 22799 661499 159000) 0 nil])
([nil nil ((220 . 221)) nil (26116 22799 661497 736000) 0 nil])
([nil nil ((#("3" 0 1 (face font-lock-type-face fontified t)) . -219) (undo-tree-id79 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -220) (undo-tree-id80 . -1) 221) nil (26116 22799 661496 817000) 0 nil])
([nil nil ((219 . 220)) nil (26116 22799 661494 451000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-type-face fontified t)) . -219) (undo-tree-id78 . -1) 220) nil (26116 22799 661493 615000) 0 nil])
([nil nil ((219 . 220)) nil (26116 22799 661492 232000) 0 nil])
([nil nil ((apply yas--snippet-revive 213 222 #s(yas--snippet nil nil #s(yas--exit 221 nil) 117 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 221 nil) 117 nil nil nil nil)) (213 . 222) (#("Vector3<$0>" 0 11 (fontified nil)) . 213) (213 . 224) (#("Vector3" 0 7 (fontified nil)) . 213) (213 . 220) (#("Vector3<…>" 0 10 (fontified nil)) . -213) (213 . 223) (#("Vector3" 0 7 (face font-lock-type-face fontified t)) . -213) (undo-tree-id76 . -7) (undo-tree-id77 . -7) 220) nil (26116 22799 661490 782000) 0 nil])
([nil nil ((221 . 224)) nil (26116 22799 661487 670000) 0 nil])
([nil nil ((260 . 261)) nil (26116 22799 661486 926000) 0 nil])
([nil nil ((263 . 267) (#("    " 0 4 (fontified nil)) . 262) (undo-tree-id75 . -4) (261 . 267)) nil (26116 22799 661486 148000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -262) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (#(" " 0 1 (fontified t)) . -263) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (#(" " 0 1 (fontified t)) . -264) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (#(" " 0 1 (fontified t)) . -265) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (#(" " 0 1 (fontified t)) . -266) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) 267) nil (26116 22799 661483 0) 0 nil])
([nil nil ((22 . 23)) nil (26116 22799 661165 101000) 0 nil])
([nil nil ((23 . 26)) nil (26116 22799 661164 539000) 0 nil])
([nil nil ((25 . 26)) nil (26116 22799 661163 895000) 0 nil])
([nil nil ((#("Debug" 0 5 (face font-lock-preprocessor-face fontified t)) . 32) (undo-tree-id53 . -5) (apply yas--snippet-revive 25 38 #s(yas--snippet nil (#s(yas--field 0 32 37 nil nil nil nil nil)) nil 118 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 0 32 37 nil nil nil nil nil)) nil 118 nil nil nil nil)) (25 . 38) (#("derive(${0:Debug})" 0 18 (fontified nil)) . 25) (25 . 43) (#("d" 0 1 (fontified nil)) . 25) (25 . 26) (#("derive(…)" 0 9 (fontified nil)) . -25) (25 . 34) (#("d" 0 1 (face font-lock-preprocessor-face fontified t)) . -25) (undo-tree-id54 . -1) 26) nil (26116 22799 661162 564000) 0 nil])
([nil nil ((32 . 34)) nil (26116 22799 661159 384000) 0 nil])
([nil nil ((32 . 39) (#("De" 0 2 (fontified nil)) . 32) (32 . 34) (#("Default" 0 7 (fontified nil)) . -32) (32 . 39) (#("De" 0 2 (face font-lock-preprocessor-face fontified t)) . -32) (undo-tree-id51 . -2) (undo-tree-id52 . -2) 34) nil (26116 22799 661158 450000) 0 nil])
([nil nil ((283 . 285)) nil (26116 22799 661155 652000) 0 nil])
([nil nil ((285 . 287)) nil (26116 22799 661155 27000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 290 301 nil nil nil t #s(yas--exit 308 nil))) #s(yas--exit 308 nil) 119 nil #s(yas--field 1 290 301 nil nil nil t #s(yas--exit 308 nil)) nil nil)) (285 . 299) (#("impl $1 {
    $0
}" 0 18 (fontified nil)) . 285) (285 . 303) (#("im" 0 2 (fontified nil)) . 285) (285 . 287) (#("impl" 0 4 (fontified nil)) . -285) (285 . 289) (#("im" 0 2 (fontified t)) . -285) (undo-tree-id44 . -2) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -2) (undo-tree-id48 . -2) (undo-tree-id49 . -2) (undo-tree-id50 . -2) 287) nil (26116 22799 661153 403000) 0 nil])
([nil nil ((290 . 291)) nil (26116 22799 661147 351000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -290) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) 291) nil (26116 22799 661146 556000) 0 nil])
([nil nil ((290 . 291)) nil (26116 22799 661144 71000) 0 nil])
([nil nil ((290 . 301) (#("L" 0 1 (fontified nil)) . 290) (undo-tree-id35 . -1) (290 . 291) (#("LocalPlayer" 0 11 (fontified nil)) . -290) (undo-tree-id36 . -11) (290 . 301) (#("L" 0 1 (face font-lock-type-face fontified t)) . -290) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) 291) nil (26116 22799 661142 839000) 0 nil])
([nil nil ((apply yas--snippet-revive 285 310 #s(yas--snippet nil (#s(yas--field 1 290 301 nil nil nil t #s(yas--exit 308 nil))) #s(yas--exit 308 nil) 119 nil #s(yas--field 1 290 301 nil nil nil t #s(yas--exit 308 nil)) nil nil))) nil (26116 22799 661137 691000) 0 nil])
([nil nil ((308 . 310)) nil (26116 22799 661136 994000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -308) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -309) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) 310) nil (26116 22799 661135 698000) 0 nil])
([nil nil ((308 . 323)) nil (26116 22799 661126 251000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -322) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) 323) nil (26116 22799 661125 281000) 0 nil])
([nil nil ((322 . 325)) nil (26116 22799 661121 1000) 0 nil])
([nil nil ((324 . 335) (#("P" 0 1 (fontified nil)) . 324) (324 . 325) (#("LocalPlayer" 0 11 (fontified nil)) . -324) (324 . 335) (#("P" 0 1 (face font-lock-type-face fontified t)) . -324) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) 325) nil (26116 22799 661119 693000) 0 nil])
([nil nil ((335 . 338)) nil (26116 22799 661114 600000) 0 nil])
([nil nil ((339 . 343) (#("        " 0 8 (fontified nil)) . 338) (338 . 346) (#("    " 0 4 (fontified nil)) . 338) (undo-tree-id6 . -4) (undo-tree-id7 . -4) (undo-tree-id8 . -4) (337 . 343)) nil (26116 22799 661113 522000) 0 nil])
([nil nil ((338 . 346)) nil (26116 22799 661110 122000) 0 nil])
([nil nil ((346 . 348)) nil (26116 22799 661109 352000) 0 nil])
([nil nil ((346 . 353) (#("De" 0 2 (fontified nil)) . 346) (346 . 348) (#("Default" 0 7 (fontified nil)) . -346) (346 . 353) (#("De" 0 2 (face font-lock-type-face fontified t)) . -346) (undo-tree-id2 . -2) (undo-tree-id3 . -1) (undo-tree-id4 . -2) (undo-tree-id5 . -2) 348) nil (26116 22799 661107 882000) 0 nil])
([nil nil ((353 . 356)) nil (26116 22799 661103 752000) 0 nil])
([nil nil ((apply yas--snippet-revive 355 364 #s(yas--snippet nil nil #s(yas--exit 364 nil) 120 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 364 nil) 120 nil nil nil nil)) (355 . 364) (#("default()$0" 0 11 (fontified nil)) . 355) (355 . 366) (#("d" 0 1 (fontified nil)) . 355) (355 . 356) (#("default() (as Default)" 0 22 (fontified nil)) . -355) (355 . 377) (#("d" 0 1 (fontified t)) . -355) (undo-tree-id0 . -1) (undo-tree-id1 . -1) 356) nil (26116 22799 661101 622000) 0 nil])
([nil nil ((370 . 375)) nil (26116 22799 661078 768000) 0 nil])
([nil nil ((377 . 378) 375) nil (26116 22799 661074 114000) 0 nil])
([nil nil ((#("default()" 0 7 (fontified t) 7 8 (face (rainbow-delimiters-depth-3-face) fontified t) 8 9 (face (rainbow-delimiters-depth-3-face) fontified t)) . -355) (undo-tree-id139 . -9) (undo-tree-id140 . -9) (undo-tree-id141 . -9) (undo-tree-id142 . -9) (undo-tree-id143 . -9) (undo-tree-id144 . -9) (undo-tree-id145 . -9) (undo-tree-id146 . -9) (undo-tree-id147 . -9) (undo-tree-id148 . -9) (undo-tree-id149 . -9) (undo-tree-id150 . -9) 364 (t 26116 22799 705478 27000)) nil (26116 22817 143587 897000) 0 nil])
([nil nil ((#("Default::" 0 7 (face font-lock-type-face fontified t) 7 9 (fontified t)) . -346) (undo-tree-id124 . -9) (undo-tree-id125 . -9) (undo-tree-id126 . -9) (undo-tree-id127 . -9) (undo-tree-id128 . -9) (undo-tree-id129 . -9) (undo-tree-id130 . -9) (undo-tree-id131 . -9) (undo-tree-id132 . -9) (undo-tree-id133 . -9) (undo-tree-id134 . -9) (undo-tree-id135 . -9) (undo-tree-id136 . -9) (undo-tree-id137 . -9) (undo-tree-id138 . -9) 355) nil (26116 22817 143579 906000) 0 nil])
([nil nil ((346 . 347)) nil (26116 22817 145077 776000) 0 nil])
([nil nil ((347 . 348)) nil (26116 22863 310118 152000) 0 nil] [nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 374 376 nil nil nil nil #s(yas--field 2 387 389 nil nil nil nil #s(yas--field 3 405 407 nil nil nil nil #s(yas--field 4 421 423 nil nil nil nil #s(yas--field 5 437 439 nil nil nil nil #s(yas--field 6 450 452 nil nil nil nil #s(yas--field 7 460 462 nil nil nil nil #s(yas--field 8 478 480 nil nil nil nil #s(yas--field 9 499 501 nil nil nil nil #s(yas--exit 503 nil)))))))))) #s(yas--field 2 387 389 nil nil nil nil #s(yas--field 3 405 407 nil nil nil nil #s(yas--field 4 421 423 nil nil nil nil #s(yas--field 5 437 439 nil nil nil nil #s(yas--field 6 450 452 nil nil nil nil #s(yas--field 7 460 462 nil nil nil nil #s(yas--field 8 478 480 nil nil nil nil #s(yas--field 9 499 501 nil nil nil nil #s(yas--exit 503 nil))))))))) #s(yas--field 3 405 407 nil nil nil nil #s(yas--field 4 421 423 nil nil nil nil #s(yas--field 5 437 439 nil nil nil nil #s(yas--field 6 450 452 nil nil nil nil #s(yas--field 7 460 462 nil nil nil nil #s(yas--field 8 478 480 nil nil nil nil #s(yas--field 9 499 501 nil nil nil nil #s(yas--exit 503 nil)))))))) #s(yas--field 4 421 423 nil nil nil nil #s(yas--field 5 437 439 nil nil nil nil #s(yas--field 6 450 452 nil nil nil nil #s(yas--field 7 460 462 nil nil nil nil #s(yas--field 8 478 480 nil nil nil nil #s(yas--field 9 499 501 nil nil nil nil #s(yas--exit 503 nil))))))) #s(yas--field 5 437 439 nil nil nil nil #s(yas--field 6 450 452 nil nil nil nil #s(yas--field 7 460 462 nil nil nil nil #s(yas--field 8 478 480 nil nil nil nil #s(yas--field 9 499 501 nil nil nil nil #s(yas--exit 503 nil)))))) #s(yas--field 6 450 452 nil nil nil nil #s(yas--field 7 460 462 nil nil nil nil #s(yas--field 8 478 480 nil nil nil nil #s(yas--field 9 499 501 nil nil nil nil #s(yas--exit 503 nil))))) #s(yas--field 7 460 462 nil nil nil nil #s(yas--field 8 478 480 nil nil nil nil #s(yas--field 9 499 501 nil nil nil nil #s(yas--exit 503 nil)))) #s(yas--field 8 478 480 nil nil nil nil #s(yas--field 9 499 501 nil nil nil nil #s(yas--exit 503 nil))) #s(yas--field 9 499 501 nil nil nil nil #s(yas--exit 503 nil))) #s(yas--exit 503 nil) 121 nil #s(yas--field 1 374 376 nil nil nil nil #s(yas--field 2 387 389 nil nil nil nil #s(yas--field 3 405 407 nil nil nil nil #s(yas--field 4 421 423 nil nil nil nil #s(yas--field 5 437 439 nil nil nil nil #s(yas--field 6 450 452 nil nil nil nil #s(yas--field 7 460 462 nil nil nil nil #s(yas--field 8 478 480 nil nil nil nil #s(yas--field 9 499 501 nil nil nil nil #s(yas--exit 503 nil)))))))))) nil nil)) (346 . 503) (#("LocalPlayer { base_pointer: ${1:()}, is_dead: ${2:()}, is_in_attack: ${3:()}, is_knocked: ${4:()}, is_zooming: ${5:()}, in_jump: ${6:()}, team: ${7:()}, local_origin: ${8:()}, camera_position: ${9:()} }$0" 0 204 (fontified nil)) . 346) (346 . 550) (#("L" 0 1 (fontified nil)) . 346) (346 . 347) (#("LocalPlayer {…}" 0 15 (fontified nil)) . -346) (346 . 361) (#("L" 0 1 (face font-lock-type-face fontified t)) . -346) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) 347) ((346 . 347) (#("LocalPlayer {…}" 0 15 (fontified nil)) . 346) (346 . 361) (#("L" 0 1 (fontified nil)) . 346) (346 . 347) (#("LocalPlayer { base_pointer: ${1:()}, is_dead: ${2:()}, is_in_attack: ${3:()}, is_knocked: ${4:()}, is_zooming: ${5:()}, in_jump: ${6:()}, team: ${7:()}, local_origin: ${8:()}, camera_position: ${9:()} }$0" 0 204 (fontified nil)) . 346) (346 . 550) (#("LocalPlayer { base_pointer: (), is_dead: (), is_in_attack: (), is_knocked: (), is_zooming: (), in_jump: (), team: (), local_origin: (), camera_position: () }" 0 11 (face font-lock-type-face fontified t) 11 12 (fontified t) 12 13 (face (rainbow-delimiters-depth-3-face) fontified t) 13 14 (fontified t) 14 26 (face font-lock-variable-name-face fontified t) 26 28 (fontified t) 28 29 (face (rainbow-delimiters-depth-4-face) fontified t) 29 30 (face (rainbow-delimiters-depth-4-face) fontified t) 30 32 (fontified t) 32 39 (face font-lock-variable-name-face fontified t) 39 41 (fontified t) 41 42 (face (rainbow-delimiters-depth-4-face) fontified t) 42 43 (face (rainbow-delimiters-depth-4-face) fontified t) 43 45 (fontified t) 45 57 (face font-lock-variable-name-face fontified t) 57 59 (fontified t) 59 60 (face (rainbow-delimiters-depth-4-face) fontified t) 60 61 (face (rainbow-delimiters-depth-4-face) fontified t) 61 63 (fontified t) 63 73 (face font-lock-variable-name-face fontified t) 73 75 (fontified t) 75 76 (face (rainbow-delimiters-depth-4-face) fontified t) 76 77 (face (rainbow-delimiters-depth-4-face) fontified t) 77 79 (fontified t) 79 89 (face font-lock-variable-name-face fontified t) 89 91 (fontified t) 91 92 (face (rainbow-delimiters-depth-4-face) fontified t) 92 93 (face (rainbow-delimiters-depth-4-face) fontified t) 93 95 (fontified t) 95 102 (face font-lock-variable-name-face fontified t) 102 104 (fontified t) 104 105 (face (rainbow-delimiters-depth-4-face) fontified t) 105 106 (face (rainbow-delimiters-depth-4-face) fontified t) 106 108 (fontified t) 108 112 (face font-lock-variable-name-face fontified t) 112 114 (fontified t) 114 115 (face (rainbow-delimiters-depth-4-face) fontified t) 115 116 (face (rainbow-delimiters-depth-4-face) fontified t) 116 118 (fontified t) 118 130 (face font-lock-variable-name-face fontified t) 130 132 (fontified t) 132 133 (face (rainbow-delimiters-depth-4-face) fontified t) 133 134 (face (rainbow-delimiters-depth-4-face) fontified t) 134 136 (fontified t) 136 151 (face font-lock-variable-name-face fontified t) 151 153 (fontified t) 153 154 (face (rainbow-delimiters-depth-4-face) fontified t) 154 155 (face (rainbow-delimiters-depth-4-face) fontified t) 155 156 (fontified t) 156 157 (face (rainbow-delimiters-depth-3-face) fontified t)) . 346) (undo-tree-id151 . -28) (undo-tree-id152 . -28) (undo-tree-id153 . -28) (apply yas--snippet-revive 346 503 #s(yas--snippet nil (#s(yas--field 1 374 376 nil nil nil nil #s(yas--field 2 387 389 nil nil nil nil #s(yas--field 3 405 407 nil nil nil nil #s(yas--field 4 421 423 nil nil nil nil #s(yas--field 5 437 439 nil nil nil nil #s(yas--field 6 450 452 nil nil nil nil #s(yas--field 7 460 462 nil nil nil nil #s(yas--field 8 478 480 nil nil nil nil #s(yas--field 9 499 501 nil nil nil nil #s(yas--exit 503 nil)))))))))) #s(yas--field 2 387 389 nil nil nil nil #s(yas--field 3 405 407 nil nil nil nil #s(yas--field 4 421 423 nil nil nil nil #s(yas--field 5 437 439 nil nil nil nil #s(yas--field 6 450 452 nil nil nil nil #s(yas--field 7 460 462 nil nil nil nil #s(yas--field 8 478 480 nil nil nil nil #s(yas--field 9 499 501 nil nil nil nil #s(yas--exit 503 nil))))))))) #s(yas--field 3 405 407 nil nil nil nil #s(yas--field 4 421 423 nil nil nil nil #s(yas--field 5 437 439 nil nil nil nil #s(yas--field 6 450 452 nil nil nil nil #s(yas--field 7 460 462 nil nil nil nil #s(yas--field 8 478 480 nil nil nil nil #s(yas--field 9 499 501 nil nil nil nil #s(yas--exit 503 nil)))))))) #s(yas--field 4 421 423 nil nil nil nil #s(yas--field 5 437 439 nil nil nil nil #s(yas--field 6 450 452 nil nil nil nil #s(yas--field 7 460 462 nil nil nil nil #s(yas--field 8 478 480 nil nil nil nil #s(yas--field 9 499 501 nil nil nil nil #s(yas--exit 503 nil))))))) #s(yas--field 5 437 439 nil nil nil nil #s(yas--field 6 450 452 nil nil nil nil #s(yas--field 7 460 462 nil nil nil nil #s(yas--field 8 478 480 nil nil nil nil #s(yas--field 9 499 501 nil nil nil nil #s(yas--exit 503 nil)))))) #s(yas--field 6 450 452 nil nil nil nil #s(yas--field 7 460 462 nil nil nil nil #s(yas--field 8 478 480 nil nil nil nil #s(yas--field 9 499 501 nil nil nil nil #s(yas--exit 503 nil))))) #s(yas--field 7 460 462 nil nil nil nil #s(yas--field 8 478 480 nil nil nil nil #s(yas--field 9 499 501 nil nil nil nil #s(yas--exit 503 nil)))) #s(yas--field 8 478 480 nil nil nil nil #s(yas--field 9 499 501 nil nil nil nil #s(yas--exit 503 nil))) #s(yas--field 9 499 501 nil nil nil nil #s(yas--exit 503 nil))) #s(yas--exit 503 nil) 121 nil #s(yas--field 1 374 376 nil nil nil nil #s(yas--field 2 387 389 nil nil nil nil #s(yas--field 3 405 407 nil nil nil nil #s(yas--field 4 421 423 nil nil nil nil #s(yas--field 5 437 439 nil nil nil nil #s(yas--field 6 450 452 nil nil nil nil #s(yas--field 7 460 462 nil nil nil nil #s(yas--field 8 478 480 nil nil nil nil #s(yas--field 9 499 501 nil nil nil nil #s(yas--exit 503 nil)))))))))) nil nil))) (26116 22817 143565 178000) 0 nil])
([nil nil ((346 . 357) (#("Lo" 0 2 (fontified nil)) . 346) (346 . 348) (#("LocalPlayer" 0 11 (fontified nil)) . -346) (346 . 357) (#("Lo" 0 2 (face font-lock-type-face fontified t)) . -346) (undo-tree-id175 . -1) (undo-tree-id176 . -2) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -2) (undo-tree-id193 . -2) (undo-tree-id194 . -2) (undo-tree-id195 . -2) 348) nil (26116 22863 310116 313000) 0 nil])
nil
([nil nil ((357 . 360)) nil (26116 22863 310101 149000) 0 nil])
([nil nil ((359 . 361)) nil (26116 22863 310100 555000) 0 nil])
([nil nil ((361 . 379) (#("..Default::default()" 0 20 (fontified nil)) . -361) (361 . 381)) nil (26116 22863 310099 670000) 0 nil])
([nil nil ((379 . 382)) nil (26116 22863 310098 734000) 0 nil])
([nil nil ((381 . 393) (#("l" 0 1 (fontified nil)) . 381) (381 . 382) (#("local_origin" 0 12 (fontified nil)) . -381) (381 . 393) (#("l" 0 1 (fontified t)) . -381) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) 382) nil (26116 22863 310097 485000) 0 nil])
([nil nil ((393 . 394)) nil (26116 22863 310091 840000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -393) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) 394) nil (26116 22863 310090 777000) 0 nil])
([nil nil ((393 . 394)) nil (26116 22863 310085 52000) 0 nil])
([nil nil ((394 . 395)) nil (26116 22863 310084 392000) 0 nil])
([nil nil ((395 . 397)) nil (26116 22863 310083 695000) 0 nil])
([nil nil ((396 . 407)) nil (26116 22863 310082 967000) 0 nil])
([nil nil ((408 . 411)) nil (26116 22863 310082 298000) 0 nil])
([nil nil ((410 . 425) (#("c" 0 1 (fontified nil)) . 410) (410 . 411) (#("camera_position" 0 15 (fontified nil)) . -410) (410 . 425) (#("c" 0 1 (fontified t)) . -410) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) 411) nil (26116 22863 310080 771000) 0 nil])
([nil nil ((425 . 427)) nil (26116 22863 310075 2000) 0 nil])
([nil nil ((425 . 426)) nil (26116 22863 310074 324000) 0 nil])
([nil nil ((427 . 435)) nil (26116 22863 310073 206000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -434) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) 435) nil (26116 22863 310070 424000) 0 nil])
([nil nil ((434 . 438)) nil (26116 22863 309588 389000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -379) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) 380 (t 26116 22863 322148 592000)) nil (26116 22869 779111 98000) 0 nil])
([nil nil ((#("..Default::default() " 0 2 (fontified t) 2 9 (face font-lock-type-face fontified t) 9 18 (fontified t) 18 19 (face (rainbow-delimiters-depth-4-face) fontified t) 19 20 (face (rainbow-delimiters-depth-4-face) fontified t) 20 21 (fontified t)) . 359) (undo-tree-id208 . -18) (undo-tree-id209 . -21) (undo-tree-id210 . -20) (undo-tree-id211 . -20) (undo-tree-id212 . -20) (undo-tree-id213 . -20) (undo-tree-id214 . -20) (undo-tree-id215 . -20) (undo-tree-id216 . -20) (undo-tree-id217 . -20) (undo-tree-id218 . -20) (undo-tree-id219 . -20) (undo-tree-id220 . -20) (undo-tree-id221 . -20) (undo-tree-id222 . -20) (undo-tree-id223 . -20) (undo-tree-id224 . -20) (undo-tree-id225 . -20) (undo-tree-id226 . -20) (undo-tree-id227 . -20) (undo-tree-id228 . -20) (undo-tree-id229 . -20) (undo-tree-id230 . -20) (undo-tree-id231 . -1) (undo-tree-id232 . -2) (undo-tree-id233 . -3) (undo-tree-id234 . -4) (undo-tree-id235 . -5) (undo-tree-id236 . -6) (undo-tree-id237 . -7) (undo-tree-id238 . -8) (undo-tree-id239 . -9) (undo-tree-id240 . -10) (undo-tree-id241 . -11) (undo-tree-id242 . -12) (undo-tree-id243 . -13) (undo-tree-id244 . -14) (undo-tree-id245 . -15) (undo-tree-id246 . -16) (undo-tree-id247 . -17) (undo-tree-id248 . -18) (undo-tree-id249 . -19) (undo-tree-id250 . -20) (undo-tree-id251 . -21) (undo-tree-id252 . -21) (undo-tree-id253 . -21) (undo-tree-id254 . -21) 380 (t 26116 22869 788815 652000)) nil (26116 22882 60117 117000) 0 nil])
([nil nil ((417 . 419)) nil (26116 22882 59565 972000) 0 nil])
([nil nil ((nil rear-nonsticky nil 439 . 440) (nil fontified nil 439 . 440) (nil fontified nil 438 . 439) (nil fontified nil 437 . 438) (nil fontified nil 428 . 437) (nil fontified nil 421 . 428) (nil fontified nil 419 . 421) (419 . 440)) nil (26116 22882 59561 80000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -281) (359 . 372) (378 . 379) (382 . 383) (387 . 399) (404 . 405) (409 . 410) (413 . 414) (418 . 430) (#(" }" 0 1 (rear-nonsticky t fontified t) 1 2 (face (rainbow-delimiters-depth-3-face) fontified t)) . 439) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (442 . 444) (446 . 448) (452 . 453) 454 (t 26116 22882 58816 405000)) nil (26116 22934 350816 949000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -385) (undo-tree-id315 . -1) (undo-tree-id316 . -1) 386) nil (26116 22934 350806 429000) 0 nil])
([nil nil ((385 . 386)) nil (26116 22934 350804 274000) 0 nil])
([nil nil ((385 . 387)) nil (26116 22934 350803 634000) 0 nil])
([nil nil ((#("B" 0 1 (face font-lock-type-face fontified t)) . -386) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) 387) nil (26116 22934 350802 726000) 0 nil])
([nil nil ((386 . 387)) nil (26116 22934 350799 805000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 398 400 nil nil nil nil #s(yas--field 2 405 407 nil nil nil nil #s(yas--field 3 412 414 nil nil nil nil #s(yas--exit 416 nil)))) #s(yas--field 2 405 407 nil nil nil nil #s(yas--field 3 412 414 nil nil nil nil #s(yas--exit 416 nil))) #s(yas--field 3 412 414 nil nil nil nil #s(yas--exit 416 nil))) #s(yas--exit 416 nil) 122 nil #s(yas--field 1 398 400 nil nil nil nil #s(yas--field 2 405 407 nil nil nil nil #s(yas--field 3 412 414 nil nil nil nil #s(yas--exit 416 nil)))) nil nil)) (385 . 416) (#("Vector3 { x: ${1:()}, y: ${2:()}, z: ${3:()} }$0" 0 48 (fontified nil)) . 385) (385 . 433) (#("Ve" 0 2 (fontified nil)) . 385) (385 . 387) (#("Vector3 {…}" 0 11 (fontified nil)) . -385) (385 . 396) (#("Ve" 0 2 (face font-lock-type-face fontified t)) . -385) (undo-tree-id301 . -2) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -2) (undo-tree-id308 . -2) (undo-tree-id309 . -2) (undo-tree-id310 . -2) (undo-tree-id311 . -2) 387) nil (26116 22934 350798 25000) 0 nil])
([nil nil ((apply yas--snippet-revive 385 416 #s(yas--snippet nil (#s(yas--field 1 398 400 nil nil nil nil #s(yas--field 2 405 407 nil nil nil nil #s(yas--field 3 412 414 nil nil nil nil #s(yas--exit 416 nil)))) #s(yas--field 2 405 407 nil nil nil nil #s(yas--field 3 412 414 nil nil nil nil #s(yas--exit 416 nil))) #s(yas--field 3 412 414 nil nil nil nil #s(yas--exit 416 nil))) #s(yas--exit 416 nil) 122 nil #s(yas--field 1 398 400 nil nil nil nil #s(yas--field 2 405 407 nil nil nil nil #s(yas--field 3 412 414 nil nil nil nil #s(yas--exit 416 nil)))) nil nil))) nil (26116 22934 350788 638000) 0 nil])
([nil nil ((#("z: () }" 0 1 (face font-lock-variable-name-face fontified t) 1 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-5-face) fontified t) 4 5 (face (rainbow-delimiters-depth-5-face) fontified t) 5 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-4-face) fontified t)) . -409) (undo-tree-id295 . -7) (undo-tree-id296 . -7) (undo-tree-id297 . -7) (undo-tree-id298 . -7) (undo-tree-id299 . -1) (undo-tree-id300 . -7) 416) nil (26116 22934 350787 252000) 0 nil])
([nil nil ((#("y: (), " 0 1 (face font-lock-variable-name-face fontified t) 1 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-5-face) fontified t) 4 5 (face (rainbow-delimiters-depth-5-face) fontified t) 5 7 (fontified t)) . -402) (undo-tree-id284 . -7) (undo-tree-id285 . -7) (undo-tree-id286 . -7) (undo-tree-id287 . -7) (undo-tree-id288 . -1) (undo-tree-id289 . -7) (undo-tree-id290 . -7) (undo-tree-id291 . -7) (undo-tree-id292 . -7) (undo-tree-id293 . -7) (undo-tree-id294 . -7) 409) nil (26116 22934 350650 554000) 0 nil])
([nil nil ((#("x: (), " 0 1 (face font-lock-variable-name-face fontified t) 1 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-5-face) fontified t) 4 5 (face (rainbow-delimiters-depth-5-face) fontified t) 5 7 (fontified t)) . -395) (undo-tree-id258 . -7) (undo-tree-id259 . -7) (undo-tree-id260 . -7) (undo-tree-id261 . -7) (undo-tree-id262 . -3) (undo-tree-id263 . -3) (undo-tree-id264 . -3) (undo-tree-id265 . -3) (undo-tree-id266 . -3) (undo-tree-id267 . -3) (undo-tree-id268 . -3) (undo-tree-id269 . -3) (undo-tree-id270 . -3) (undo-tree-id271 . -3) (undo-tree-id272 . -3) (undo-tree-id273 . -3) (undo-tree-id274 . -3) (undo-tree-id275 . -7) (undo-tree-id276 . -7) (undo-tree-id277 . -7) (undo-tree-id278 . -7) (undo-tree-id279 . -7) (undo-tree-id280 . -7) (undo-tree-id281 . -7) (undo-tree-id282 . -7) (undo-tree-id283 . -7) 402) nil (26116 22934 350641 431000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -409) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) 410) nil (26116 22934 350620 572000) 0 nil])
([nil nil ((409 . 410)) nil (26116 22934 350607 151000) 0 nil])
([nil nil ((#("0}" 0 1 (fontified t) 1 2 (face (rainbow-delimiters-depth-4-face) fontified t)) . -408) (undo-tree-id488 . -2) (undo-tree-id489 . -2) (undo-tree-id490 . -1) (undo-tree-id491 . -2) (undo-tree-id492 . -2) (undo-tree-id493 . -2) (undo-tree-id494 . -2) (undo-tree-id495 . -2) (undo-tree-id496 . -2) (undo-tree-id497 . -2) (undo-tree-id498 . -2) (undo-tree-id499 . -2) (undo-tree-id500 . -2) (undo-tree-id501 . -2) 410 (t 26116 22934 362152 940000)) nil (26116 22953 296327 377000) 0 nil])
([nil nil ((#("0." 0 2 (fontified t)) . -406) (undo-tree-id470 . -2) (undo-tree-id471 . -2) (undo-tree-id472 . -2) (undo-tree-id473 . -2) (undo-tree-id474 . -2) (undo-tree-id475 . -2) (undo-tree-id476 . -2) (undo-tree-id477 . -2) (undo-tree-id478 . -2) (undo-tree-id479 . -2) (undo-tree-id480 . -2) (undo-tree-id481 . -2) (undo-tree-id482 . -2) (undo-tree-id483 . -2) (undo-tree-id484 . -2) (undo-tree-id485 . -2) (undo-tree-id486 . -2) (undo-tree-id487 . -2) 408) nil (26116 22953 296317 434000) 0 nil])
([nil nil ((#("0, " 0 2 (fontified t) 2 3 (fontified t)) . -403) (undo-tree-id450 . -3) (undo-tree-id451 . -3) (undo-tree-id452 . -3) (undo-tree-id453 . -3) (undo-tree-id454 . -3) (undo-tree-id455 . -3) (undo-tree-id456 . -3) (undo-tree-id457 . -3) (undo-tree-id458 . -3) (undo-tree-id459 . -3) (undo-tree-id460 . -3) (undo-tree-id461 . -3) (undo-tree-id462 . -3) (undo-tree-id463 . -3) (undo-tree-id464 . -3) (undo-tree-id465 . -3) (undo-tree-id466 . -3) (undo-tree-id467 . -3) (undo-tree-id468 . -3) (undo-tree-id469 . -3) 406) nil (26116 22953 296304 582000) 0 nil])
([nil nil ((#("0." 0 2 (fontified t)) . -401) (undo-tree-id428 . -2) (undo-tree-id429 . -2) (undo-tree-id430 . -2) (undo-tree-id431 . -2) (undo-tree-id432 . -2) (undo-tree-id433 . -2) (undo-tree-id434 . -2) (undo-tree-id435 . -2) (undo-tree-id436 . -2) (undo-tree-id437 . -2) (undo-tree-id438 . -2) (undo-tree-id439 . -2) (undo-tree-id440 . -2) (undo-tree-id441 . -2) (undo-tree-id442 . -2) (undo-tree-id443 . -2) (undo-tree-id444 . -2) (undo-tree-id445 . -2) (undo-tree-id446 . -2) (undo-tree-id447 . -2) (undo-tree-id448 . -2) (undo-tree-id449 . -2) 403) nil (26116 22953 296289 985000) 0 nil])
([nil nil ((#("0, " 0 2 (fontified t) 2 3 (fontified t)) . -398) (undo-tree-id404 . -3) (undo-tree-id405 . -3) (undo-tree-id406 . -3) (undo-tree-id407 . -3) (undo-tree-id408 . -3) (undo-tree-id409 . -3) (undo-tree-id410 . -3) (undo-tree-id411 . -3) (undo-tree-id412 . -3) (undo-tree-id413 . -3) (undo-tree-id414 . -3) (undo-tree-id415 . -3) (undo-tree-id416 . -3) (undo-tree-id417 . -3) (undo-tree-id418 . -3) (undo-tree-id419 . -3) (undo-tree-id420 . -3) (undo-tree-id421 . -3) (undo-tree-id422 . -3) (undo-tree-id423 . -3) (undo-tree-id424 . -3) (undo-tree-id425 . -3) (undo-tree-id426 . -3) (undo-tree-id427 . -3) 401) nil (26116 22953 295216 965000) 0 nil])
([nil nil ((#("0." 0 2 (fontified t)) . -396) (undo-tree-id378 . -2) (undo-tree-id379 . -2) (undo-tree-id380 . -2) (undo-tree-id381 . -2) (undo-tree-id382 . -2) (undo-tree-id383 . -2) (undo-tree-id384 . -2) (undo-tree-id385 . -2) (undo-tree-id386 . -2) (undo-tree-id387 . -2) (undo-tree-id388 . -2) (undo-tree-id389 . -2) (undo-tree-id390 . -2) (undo-tree-id391 . -2) (undo-tree-id392 . -2) (undo-tree-id393 . -2) (undo-tree-id394 . -2) (undo-tree-id395 . -2) (undo-tree-id396 . -2) (undo-tree-id397 . -2) (undo-tree-id398 . -2) (undo-tree-id399 . -2) (undo-tree-id400 . -2) (undo-tree-id401 . -2) (undo-tree-id402 . -2) (undo-tree-id403 . -2) 398) nil (26116 22953 295195 414000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -395) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) 396) nil (26116 22953 295177 276000) 0 nil])
([nil nil ((395 . 396)) nil (26116 22953 295156 655000) 0 nil])
([nil nil ((394 . 400)) nil (26116 22953 295155 890000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -398) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (#("0" 0 1 (fontified t)) . -399) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) 400) nil (26116 22953 295153 583000) 0 nil])
([nil nil ((398 . 411)) nil (26116 22953 295134 679000) 0 nil])
([nil nil ((411 . 415)) nil (26116 22953 295130 460000) 0 nil])
([nil nil ((#("[0.0, 0.0, 0.0]" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t) 1 5 (fontified t) 5 6 (fontified t) 6 10 (fontified t) 10 11 (fontified t) 11 14 (fontified t) 14 15 (face (rainbow-delimiters-depth-4-face) fontified t)) . -448) (undo-tree-id502 . -15) (undo-tree-id503 . -15) (undo-tree-id504 . -1) (undo-tree-id505 . -2) (undo-tree-id506 . -3) (undo-tree-id507 . -4) (undo-tree-id508 . -5) (undo-tree-id509 . -6) (undo-tree-id510 . -7) (undo-tree-id511 . -8) (undo-tree-id512 . -9) (undo-tree-id513 . -10) (undo-tree-id514 . -11) (undo-tree-id515 . -12) (undo-tree-id516 . -13) (undo-tree-id517 . -14) (undo-tree-id518 . -15) (undo-tree-id519 . -15) (undo-tree-id520 . -15) (undo-tree-id521 . -15) (undo-tree-id522 . -15) (undo-tree-id523 . -15) (undo-tree-id524 . -15) 463 (t 26116 22953 305487 436000)) nil (26116 22959 769756 994000) 0 nil])
([nil nil ((nil rear-nonsticky nil 479 . 480) (nil fontified nil 479 . 480) (nil fontified nil 478 . 479) (nil fontified nil 474 . 478) (nil fontified nil 473 . 474) (nil fontified nil 466 . 473) (nil fontified nil 465 . 466) (nil fontified nil 458 . 465) (nil fontified nil 457 . 458) (nil fontified nil 456 . 457) (nil fontified nil 455 . 456) (nil fontified nil 448 . 455) (448 . 480)) nil (26116 22959 769402 448000) 0 nil])
([nil nil ((#("        LocalPlayer {
            local_origin: Vector3 {x: 0.0, y: 0.0, z:0.0 },
            camera_position: Vector3 {x: 0.0, y: 0.0, z:0.0 },
            ..Default::default()
        }" 0 8 (fontified t) 8 19 (face font-lock-type-face fontified t) 19 20 (fontified t) 20 21 (face (rainbow-delimiters-depth-3-face) fontified t) 21 22 (fontified t) 22 34 (fontified t) 34 46 (face font-lock-variable-name-face fontified t) 46 48 (fontified t) 48 55 (face font-lock-type-face fontified t) 55 56 (fontified t) 56 57 (face (rainbow-delimiters-depth-4-face) fontified t) 57 58 (face font-lock-variable-name-face fontified t) 58 65 (fontified t) 65 66 (face font-lock-variable-name-face fontified t) 66 73 (fontified t) 73 74 (face font-lock-variable-name-face fontified t) 74 78 (fontified t) 78 79 (fontified t) 79 80 (face (rainbow-delimiters-depth-4-face) fontified t) 80 81 (fontified t) 81 82 (fontified t) 82 93 (fontified t) 93 94 (fontified t) 94 109 (face font-lock-variable-name-face fontified t) 109 110 (fontified t) 110 111 (fontified t) 111 118 (face font-lock-type-face fontified t) 118 119 (fontified t) 119 120 (face (rainbow-delimiters-depth-4-face) fontified t) 120 121 (face font-lock-variable-name-face fontified t) 121 128 (fontified t) 128 129 (face font-lock-variable-name-face fontified t) 129 136 (fontified t) 136 137 (face font-lock-variable-name-face fontified t) 137 141 (fontified t) 141 142 (fontified t) 142 143 (face (rainbow-delimiters-depth-4-face) rear-nonsticky t fontified t) 143 144 (fontified t) 144 145 (fontified t) 145 156 (fontified t) 156 157 (fontified t) 157 159 (fontified t) 159 166 (face font-lock-type-face fontified t) 166 175 (fontified t) 175 176 (face (rainbow-delimiters-depth-4-face) fontified t) 176 177 (face (rainbow-delimiters-depth-4-face) fontified t) 177 178 (fontified t) 178 180 (fontified t) 180 184 (fontified t) 184 186 (fontified t) 186 187 (face (rainbow-delimiters-depth-3-face) fontified t)) . 337) (undo-tree-id530 . -187) (undo-tree-id531 . -21) (undo-tree-id532 . -157) (undo-tree-id533 . -44) (undo-tree-id534 . -79) (undo-tree-id535 . 109) (undo-tree-id536 . -111) (undo-tree-id537 . -111) (undo-tree-id538 . -111) (undo-tree-id539 . -111) (undo-tree-id540 . -111) (undo-tree-id541 . -111) (undo-tree-id542 . -111) (undo-tree-id543 . -111) (undo-tree-id544 . -111) (undo-tree-id545 . -111) (undo-tree-id546 . -111) (undo-tree-id547 . -111) (undo-tree-id548 . -111) (undo-tree-id549 . -111) (undo-tree-id550 . -111) (undo-tree-id551 . -48) (undo-tree-id552 . -111) (undo-tree-id553 . -111) (undo-tree-id554 . -111) (undo-tree-id555 . -111) (undo-tree-id556 . -111) (undo-tree-id557 . -111) (undo-tree-id558 . -111) (undo-tree-id559 . -111) (undo-tree-id560 . -143) (undo-tree-id561 . -143) (undo-tree-id562 . -143) (undo-tree-id563 . -143) (undo-tree-id564 . -143) (undo-tree-id565 . -143) (undo-tree-id566 . -143) (undo-tree-id567 . -177) (undo-tree-id568 . -177) (undo-tree-id569 . -177) (undo-tree-id570 . -177) (undo-tree-id571 . -177) (undo-tree-id572 . -177) (undo-tree-id573 . -177) (undo-tree-id574 . -177) (undo-tree-id575 . -177) (undo-tree-id576 . -187) (undo-tree-id577 . -187) (undo-tree-id578 . -187) (undo-tree-id579 . -144) (undo-tree-id580 . -144) (undo-tree-id581 . -144) (undo-tree-id582 . -144) (undo-tree-id583 . -144) (undo-tree-id584 . -144) (undo-tree-id585 . -144) (undo-tree-id586 . -143) (undo-tree-id587 . -140) (undo-tree-id588 . -137) (undo-tree-id589 . -135) (undo-tree-id590 . -132) (undo-tree-id591 . -130) (undo-tree-id592 . -127) (undo-tree-id593 . -125) (undo-tree-id594 . -122) (undo-tree-id595 . -120) (undo-tree-id596 . -117) (undo-tree-id597 . -115) (undo-tree-id598 . -113) (undo-tree-id599 . -111) (undo-tree-id600 . -109) (undo-tree-id601 . -108) (undo-tree-id602 . -106) (undo-tree-id603 . -105) (undo-tree-id604 . -104) (undo-tree-id605 . -103) (undo-tree-id606 . -102) (undo-tree-id607 . -101) (undo-tree-id608 . -100) (undo-tree-id609 . -99) (undo-tree-id610 . -98) (undo-tree-id611 . -97) (undo-tree-id612 . -96) (undo-tree-id613 . -95) (undo-tree-id614 . -94) (undo-tree-id615 . -93) (undo-tree-id616 . -92) (undo-tree-id617 . -31) (undo-tree-id618 . -30) (undo-tree-id619 . -29) (undo-tree-id620 . -28) (undo-tree-id621 . -27) (undo-tree-id622 . -26) (undo-tree-id623 . -111) (undo-tree-id624 . -144) (undo-tree-id625 . -26) (undo-tree-id626 . -26) (undo-tree-id627 . -187) (undo-tree-id628 . -187) (undo-tree-id629 . -187) (undo-tree-id630 . -156) (undo-tree-id631 . -154) (undo-tree-id632 . -153) (undo-tree-id633 . -89) (undo-tree-id634 . -88) (undo-tree-id635 . -87) (undo-tree-id636 . -86) (undo-tree-id637 . -25) (undo-tree-id638 . -24) (undo-tree-id639 . -23) (undo-tree-id640 . -22) (undo-tree-id641 . -144) (undo-tree-id642 . -187) (t 26116 22959 778821 168000)) nil (26116 23026 455888 605000) 0 nil])
([nil nil ((337 . 345)) nil (26116 23026 455810 996000) 0 nil])
([nil nil ((345 . 346)) nil (26116 23026 455810 382000) 0 nil])
([nil nil ((345 . 352) (#("D" 0 1 (fontified nil)) . 345) (345 . 346) (#("Default" 0 7 (fontified nil)) . -345) (345 . 352) (#("D" 0 1 (face font-lock-type-face fontified t)) . -345) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) 346) nil (26116 23026 455808 801000) 0 nil])
([nil nil ((352 . 354)) nil (26116 23026 455798 951000) 0 nil])
([nil nil ((apply yas--snippet-revive 354 363 #s(yas--snippet nil nil #s(yas--exit 363 nil) 123 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 363 nil) 123 nil nil nil nil)) (354 . 363) (#("default()$0" 0 11 (fontified nil)) . 354) (354 . 365) (#("default() (as Default)" 0 22 (fontified nil)) . -354) (354 . 376)) nil (26116 23026 455793 699000) 0 nil])
([nil nil ((22 . 24) (t 26116 23026 498825 260000)) nil (26116 23070 483836 504000) 0 nil])
([nil nil ((23 . 26)) nil (26116 23070 483835 630000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -25) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) 26) nil (26116 23070 483834 582000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 28 52 nil nil nil t #s(yas--exit 59 nil))) #s(yas--exit 59 nil) 124 nil #s(yas--field 1 28 52 nil nil nil t #s(yas--exit 59 nil)) nil nil)) (23 . 37) (#("impl $1 {
    $0
}" 0 18 (fontified nil)) . 23) (23 . 41) (#("im" 0 2 (fontified nil)) . 23) (23 . 25) (#("impl" 0 4 (fontified nil)) . -23) (23 . 27) (#("im" 0 2 (fontified t)) . -23) (undo-tree-id788 . -2) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -2) (undo-tree-id793 . -2) (undo-tree-id794 . -2) (undo-tree-id795 . -2) (undo-tree-id796 . -2) (undo-tree-id797 . -2) (undo-tree-id798 . -2) (undo-tree-id799 . -2) (undo-tree-id800 . -2) 25) nil (26116 23070 483829 423000) 0 nil])
([nil nil ((28 . 29)) nil (26116 23070 483818 874000) 0 nil])
([nil nil ((28 . 35) (#("D" 0 1 (fontified nil)) . 28) (undo-tree-id779 . -1) (28 . 29) (#("Default" 0 7 (fontified nil)) . -28) (undo-tree-id780 . -7) (28 . 35) (#("D" 0 1 (face font-lock-type-face fontified t)) . -28) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) 29) nil (26116 23070 483817 582000) 0 nil])
([nil nil ((35 . 41)) nil (26116 23070 483810 582000) 0 nil])
([nil nil ((apply yas--snippet-revive 40 49 #s(yas--snippet nil nil #s(yas--exit 48 nil) 125 nil nil #s(yas--field 1 28 52 nil nil nil t #s(yas--exit 59 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 48 nil) 125 nil nil #s(yas--field 1 28 52 nil nil nil t #s(yas--exit 59 nil)) nil)) (40 . 49) (#("Vector3<$0>" 0 11 (fontified nil)) . 40) (undo-tree-id768 . -11) (40 . 51) (#("V" 0 1 (fontified nil)) . 40) (undo-tree-id769 . -1) (40 . 41) (#("Vector3<…>" 0 10 (fontified nil)) . -40) (undo-tree-id770 . -10) (40 . 50) (#("V" 0 1 (face font-lock-type-face fontified t)) . -40) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) 41) nil (26116 23070 483809 44000) 0 nil])
([nil nil ((48 . 51)) nil (26116 23070 483799 551000) 0 nil])
([nil nil ((apply yas--snippet-revive 23 61 #s(yas--snippet nil (#s(yas--field 1 28 52 nil nil nil t #s(yas--exit 59 nil))) #s(yas--exit 59 nil) 124 nil #s(yas--field 1 28 52 nil nil nil t #s(yas--exit 59 nil)) nil nil))) nil (26116 23070 483798 955000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -48) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (#("3" 0 1 (fontified t)) . -49) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (#("2" 0 1 (face font-lock-type-face fontified t)) . -50) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) 51) nil (26116 23070 483794 950000) 0 nil])
([nil nil ((48 . 49)) nil (26116 23070 483733 464000) 0 nil])
([nil nil ((49 . 52)) nil (26116 23070 483732 887000) 0 nil])
([nil nil ((51 . 58) (#("D" 0 1 (fontified nil)) . 51) (51 . 52) (#("Default" 0 7 (fontified nil)) . -51) (51 . 58) (#("D" 0 1 (face font-lock-type-face fontified t)) . -51) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) 52) nil (26116 23070 483731 662000) 0 nil])
([nil nil ((66 . 67)) nil (26116 23070 483725 952000) 0 nil])
([nil nil ((apply yas--snippet-revive 66 103 #s(yas--snippet nil nil #s(yas--exit 97 nil) 126 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 97 nil) 126 nil nil nil nil)) (66 . 103) (#("fn default() -> Self {
        $0
    }" 0 14 (fontified nil) 14 15 (syntax-table (1) fontified nil) 15 39 (fontified nil)) . 66) (100 . 104) (89 . 97) (#("    " 0 4 (fontified nil)) . 89) (66 . 97) (#("f" 0 1 (fontified nil)) . 66) (66 . 67) (#("fn default()" 0 12 (fontified nil)) . -66) (66 . 78) (#("f" 0 1 (fontified t)) . -66) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) 67) nil (26116 23070 483724 453000) 0 nil])
([nil nil ((97 . 98)) nil (26116 23070 483718 70000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 107 125 nil nil nil t #s(yas--field 2 130 132 nil nil nil nil #s(yas--field 3 137 139 nil nil nil nil #s(yas--exit 141 nil)))) #s(yas--field 2 130 132 nil nil nil nil #s(yas--field 3 137 139 nil nil nil nil #s(yas--exit 141 nil))) #s(yas--field 3 137 139 nil nil nil nil #s(yas--exit 141 nil))) #s(yas--exit 141 nil) 127 nil #s(yas--field 1 107 125 nil nil nil t #s(yas--field 2 130 132 nil nil nil nil #s(yas--field 3 137 139 nil nil nil nil #s(yas--exit 141 nil)))) nil nil)) (97 . 125) (#("Self { x: ${1:()}, y: ${2:()}, z: ${3:()} }$0" 0 45 (fontified nil)) . 97) (97 . 142) (#("S" 0 1 (fontified nil)) . 97) (97 . 98) (#("Self {…}" 0 8 (fontified nil)) . -97) (97 . 105) (#("S" 0 1 (face font-lock-type-face fontified t)) . -97) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) 98) nil (26116 23070 483716 112000) 0 nil])
([nil nil ((#("()" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 108) (undo-tree-id661 . -2) (107 . 108)) nil (26116 23070 483373 55000) 0 nil])
([nil nil ((107 . 114) (#("D" 0 1 (fontified nil)) . 107) (undo-tree-id652 . -1) (107 . 108) (#("Default" 0 7 (fontified nil)) . -107) (undo-tree-id653 . -7) (107 . 114) (#("D" 0 1 (face font-lock-type-face fontified t)) . -107) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) 108) nil (26116 23070 483370 746000) 0 nil])
([nil nil ((114 . 115)) nil (26116 23070 483362 924000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -114) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) 115) nil (26116 23070 483361 214000) 0 nil])
([nil nil ((114 . 116)) nil (26116 23070 483349 920000) 0 nil])
([nil nil ((apply yas--snippet-revive 116 125 #s(yas--snippet nil nil #s(yas--exit 125 nil) 128 nil nil #s(yas--field 1 107 125 nil nil nil t #s(yas--field 2 130 132 nil nil nil nil #s(yas--field 3 137 139 nil nil nil nil #s(yas--exit 141 nil)))) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 125 nil) 128 nil nil #s(yas--field 1 107 125 nil nil nil t #s(yas--field 2 130 132 nil nil nil nil #s(yas--field 3 137 139 nil nil nil nil #s(yas--exit 141 nil)))) nil)) (116 . 125) (#("default()$0" 0 11 (fontified nil)) . 116) (undo-tree-id643 . -11) (116 . 127) (#("default() (as Default)" 0 22 (fontified nil)) . -116) (undo-tree-id644 . -22) (116 . 138)) nil (26116 23070 483344 852000) 0 nil])
([nil nil ((apply yas--snippet-revive 97 141 #s(yas--snippet nil (#s(yas--field 1 107 125 nil nil nil t #s(yas--field 2 130 132 nil nil nil nil #s(yas--field 3 137 139 nil nil nil nil #s(yas--exit 141 nil)))) #s(yas--field 2 130 132 nil nil nil nil #s(yas--field 3 137 139 nil nil nil nil #s(yas--exit 141 nil))) #s(yas--field 3 137 139 nil nil nil nil #s(yas--exit 141 nil))) #s(yas--exit 141 nil) 127 nil #s(yas--field 1 107 125 nil nil nil t #s(yas--field 2 130 132 nil nil nil nil #s(yas--field 3 137 139 nil nil nil nil #s(yas--exit 141 nil)))) nil nil))) nil (26116 23080 838839 37000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -130) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -131) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) 132 (t 26116 23070 495494 614000)) nil (26116 23080 838837 367000) 0 nil])
([nil nil ((130 . 131)) nil (26116 23080 838824 619000) 0 nil])
([nil nil ((130 . 137) (#("D" 0 1 (fontified nil)) . 130) (130 . 131) (#("Default" 0 7 (fontified nil)) . -130) (130 . 137) (#("D" 0 1 (face font-lock-type-face fontified t)) . -130) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) 131) nil (26116 23080 838823 386000) 0 nil])
([nil nil ((137 . 139)) nil (26116 23080 838817 798000) 0 nil])
([nil nil ((apply yas--snippet-revive 139 148 #s(yas--snippet nil nil #s(yas--exit 148 nil) 129 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 148 nil) 129 nil nil nil nil)) (139 . 148) (#("default()$0" 0 11 (fontified nil)) . 139) (139 . 150) (#("default() (as Default)" 0 22 (fontified nil)) . -139) (139 . 161)) nil (26116 23080 838816 870000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -153) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -154) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) 155) nil (26116 23080 838814 519000) 0 nil])
([nil nil ((153 . 154)) nil (26116 23080 838803 535000) 0 nil])
([nil nil ((153 . 160) (#("D" 0 1 (fontified nil)) . 153) (153 . 154) (#("Default" 0 7 (fontified nil)) . -153) (153 . 160) (#("D" 0 1 (face font-lock-type-face fontified t)) . -153) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) 154) nil (26116 23080 838801 930000) 0 nil])
([nil nil ((160 . 163)) nil (26116 23080 838795 151000) 0 nil])
([nil nil ((apply yas--snippet-revive 162 171 #s(yas--snippet nil nil #s(yas--exit 171 nil) 130 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 171 nil) 130 nil nil nil nil)) (162 . 171) (#("default()$0" 0 11 (fontified nil)) . 162) (162 . 173) (#("d" 0 1 (fontified nil)) . 162) (162 . 163) (#("default() (as Default)" 0 22 (fontified nil)) . -162) (162 . 184) (#("d" 0 1 (fontified t)) . -162) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) 163) nil (26116 23080 838790 578000) 0 nil])
([nil nil ((#("Default" 0 7 (face font-lock-type-face fontified t)) . -51) (undo-tree-id924 . -7) (undo-tree-id925 . -7) (undo-tree-id926 . -7) (undo-tree-id927 . -7) (undo-tree-id928 . -7) (undo-tree-id929 . -7) (undo-tree-id930 . -7) (undo-tree-id931 . -7) (undo-tree-id932 . -7) (undo-tree-id933 . -7) (undo-tree-id934 . -7) (undo-tree-id935 . -7) (undo-tree-id936 . -7) (undo-tree-id937 . -7) (undo-tree-id938 . -7) (undo-tree-id939 . -7) (undo-tree-id940 . -7) (undo-tree-id941 . -7) (undo-tree-id942 . -7) (undo-tree-id943 . -7) (undo-tree-id944 . -7) (undo-tree-id945 . -7) (undo-tree-id946 . -7) 58 (t 26116 23080 852161 912000)) nil (26116 23112 212891 872000) 0 nil])
([nil nil ((#("T: " 0 1 (face font-lock-variable-name-face fontified t) 1 3 (fontified t)) . -48) (undo-tree-id899 . -3) (undo-tree-id900 . -3) (undo-tree-id901 . -3) (undo-tree-id902 . -3) (undo-tree-id903 . -3) (undo-tree-id904 . -3) (undo-tree-id905 . -3) (undo-tree-id906 . -3) (undo-tree-id907 . -3) (undo-tree-id908 . -3) (undo-tree-id909 . -3) (undo-tree-id910 . -3) (undo-tree-id911 . -3) (undo-tree-id912 . -3) (undo-tree-id913 . -3) (undo-tree-id914 . -3) (undo-tree-id915 . -3) (undo-tree-id916 . -3) (undo-tree-id917 . -3) (undo-tree-id918 . -3) (undo-tree-id919 . -3) (undo-tree-id920 . -3) (undo-tree-id921 . -3) (undo-tree-id922 . -3) (undo-tree-id923 . -3) 51) nil (26116 23112 212483 320000) 0 nil])
([nil nil ((#("<" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -47) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (#(">" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -48) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) 49) nil (26116 23112 212461 179000) 0 nil])
([nil nil ((47 . 49) (t 26116 23112 255497 164000)) nil (26116 23116 711491 819000) 0 nil])
([nil nil ((48 . 49)) nil (26116 23116 711486 983000) 0 nil])
([nil nil ((#("default()" 0 7 (fontified t) 7 8 (face (rainbow-delimiters-depth-4-face) fontified t) 8 9 (face (rainbow-delimiters-depth-4-face) fontified t)) . -107) (undo-tree-id1089 . -9) (undo-tree-id1090 . -7) (undo-tree-id1091 . -9) 116 (t 26116 23116 722164 104000)) nil (26116 23138 126993 380000) 0 nil])
([nil nil ((#("Default::" 0 7 (face font-lock-type-face fontified t) 7 9 (fontified t)) . -98) (undo-tree-id1076 . -9) (undo-tree-id1077 . -8) (undo-tree-id1078 . -8) (undo-tree-id1079 . -8) (undo-tree-id1080 . -8) (undo-tree-id1081 . -8) (undo-tree-id1082 . -8) (undo-tree-id1083 . -8) (undo-tree-id1084 . -8) (undo-tree-id1085 . -9) (undo-tree-id1086 . -9) (undo-tree-id1087 . -9) (undo-tree-id1088 . -9) 107) nil (26116 23138 126990 335000) 0 nil])
([nil nil ((98 . 102)) nil (26116 23138 126981 283000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -99) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (#(":" 0 1 (fontified t)) . -100) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (#("d" 0 1 (fontified t)) . -101) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) 102) nil (26116 23138 126979 261000) 0 nil])
([nil nil ((99 . 102)) nil (26116 23138 126960 294000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -100) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (#("d" 0 1 (fontified t)) . -101) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) 102) nil (26116 23138 126958 781000) 0 nil])
([nil nil ((100 . 101)) nil (26116 23138 126941 665000) 0 nil])
([nil nil ((#("S" 0 1 (face font-lock-type-face fontified t)) . -98) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (#(":" 0 1 (fontified t)) . -99) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (#("d" 0 1 (fontified t)) . -100) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) 101) nil (26116 23138 126938 126000) 0 nil])
([nil nil ((98 . 99)) nil (26116 23138 126536 92000) 0 nil])
([nil nil ((98 . 105) (#("D" 0 1 (fontified nil)) . 98) (98 . 99) (#("Default" 0 7 (fontified nil)) . -98) (98 . 105) (#("D" 0 1 (face font-lock-type-face fontified t)) . -98) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) 99) nil (26116 23138 126534 679000) 0 nil])
([nil nil ((105 . 107)) nil (26116 23138 126524 102000) 0 nil])
([nil nil ((apply yas--snippet-revive 107 116 #s(yas--snippet nil nil #s(yas--exit 116 nil) 131 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 116 nil) 131 nil nil nil nil)) (107 . 116) (#("default()$0" 0 11 (fontified nil)) . 107) (107 . 118) (#("default() (as Default)" 0 22 (fontified nil)) . -107) (107 . 129)) nil (26116 23138 126522 548000) 0 nil])
([nil nil ((107 . 109)) nil (26116 23138 126520 351000) 0 nil])
([nil nil ((108 . 109)) nil (26116 23138 126516 131000) 0 nil])
([nil nil ((110 . 112) (t 26116 23138 138832 82000)) nil (26116 23143 533030 542000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -105) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (#(":" 0 1 (fontified t)) . -106) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (#("<" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -107) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (#("S" 0 1 (face font-lock-type-face fontified t)) . -108) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (#(">" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -109) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) 110 (t 26116 23143 545499 78000)) nil (26116 23149 665443 474000) 0 nil])
([nil nil ((27 . 29) (t 26116 23149 675499 451000)) nil (26116 23163 971223 552000) 0 nil])
([nil nil ((#(">" 0 1 (syntax-table (1) fontified t)) . -27) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (#("?" 0 1 (face rust-question-mark fontified t)) . -28) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) 29) nil (26116 23163 971221 949000) 0 nil])
([nil nil ((27 . 29)) nil (26116 23163 971214 217000) 0 nil])
([nil nil ((28 . 32)) nil (26116 23163 971212 842000) 0 nil])
([nil nil ((31 . 38) (#("D" 0 1 (fontified nil)) . 31) (31 . 32) (#("Default" 0 7 (fontified nil)) . -31) (31 . 38) (#("D" 0 1 (face font-lock-type-face fontified t)) . -31) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) 32) nil (26116 23163 971208 385000) 0 nil])
([nil nil ((#("impl<S: Default> Default for Vector3<S> {" 0 4 (face font-lock-keyword-face fontified t) 4 5 (face (rainbow-delimiters-depth-1-face) fontified t) 5 6 (face font-lock-variable-name-face fontified t) 6 8 (fontified t) 8 15 (face font-lock-type-face fontified t) 15 16 (face (rainbow-delimiters-depth-1-face) fontified t) 16 17 (fontified t) 17 24 (face font-lock-type-face fontified t) 24 25 (fontified t) 25 28 (face font-lock-keyword-face fontified t) 28 29 (fontified t) 29 36 (face font-lock-type-face fontified t) 36 37 (face (rainbow-delimiters-depth-1-face) fontified t) 37 38 (face font-lock-type-face fontified t) 38 39 (face (rainbow-delimiters-depth-1-face) fontified t) 39 40 (fontified t) 40 41 (face (rainbow-delimiters-depth-1-face) fontified t)) . 23) (undo-tree-id1168 . -36) (undo-tree-id1169 . -36) (undo-tree-id1170 . -4) (undo-tree-id1171 . -4) (undo-tree-id1172 . -4) (undo-tree-id1173 . -4) (undo-tree-id1174 . -4) (undo-tree-id1175 . -4) (undo-tree-id1176 . -8) (undo-tree-id1177 . -8) (undo-tree-id1178 . -8) (undo-tree-id1179 . -8) (undo-tree-id1180 . -8) (undo-tree-id1181 . -15) (undo-tree-id1182 . -15) (undo-tree-id1183 . -15) (undo-tree-id1184 . -15) (undo-tree-id1185 . -15) (undo-tree-id1186 . -15) (undo-tree-id1187 . -15) (undo-tree-id1188 . -15) (undo-tree-id1189 . -15) (undo-tree-id1190 . -15) (undo-tree-id1191 . -15) (undo-tree-id1192 . -15) (undo-tree-id1193 . -24) (undo-tree-id1194 . -24) (undo-tree-id1195 . -24) (undo-tree-id1196 . -24) (undo-tree-id1197 . -24) (undo-tree-id1198 . -28) (undo-tree-id1199 . -36) (undo-tree-id1200 . -29) (undo-tree-id1201 . -25) (undo-tree-id1202 . -17) (undo-tree-id1203 . -17) (undo-tree-id1204 . -17) (undo-tree-id1205 . -17) (undo-tree-id1206 . -17) (undo-tree-id1207 . -17) (undo-tree-id1208 . -17) (undo-tree-id1209 . -16) (undo-tree-id1210 . -15) (undo-tree-id1211 . -15) (undo-tree-id1212 . -15) (undo-tree-id1213 . -15) (undo-tree-id1214 . -15) (undo-tree-id1215 . -41) (t 26116 23163 982166 993000)) nil (26116 23177 789518 692000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 23) (undo-tree-id1167 . -1)) nil (26116 23177 789305 283000) 0 nil])
([nil nil ((#("    fn default() -> Self {" 0 4 (fontified t) 4 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 14 (face font-lock-function-name-face fontified t) 14 15 (face (rainbow-delimiters-depth-1-face) fontified t) 15 16 (face (rainbow-delimiters-depth-1-face) fontified t) 16 18 (fontified t) 18 19 (syntax-table (1) fontified t) 19 20 (fontified t) 20 24 (face font-lock-type-face fontified t) 24 25 (fontified t) 25 26 (face (rainbow-delimiters-depth-1-face) fontified t)) . 23) (undo-tree-id1166 . -26)) nil (26116 23177 789303 675000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 23) (undo-tree-id1165 . -1)) nil (26116 23177 789301 759000) 0 nil])
([nil nil ((#("        Self { x: Default::default(), y: Default::default(), z: Default::default() }" 0 8 (fontified t) 8 12 (face font-lock-type-face fontified t) 12 13 (fontified t) 13 14 (face (rainbow-delimiters-depth-1-face) fontified t) 14 15 (fontified t) 15 16 (face font-lock-variable-name-face fontified t) 16 18 (fontified t) 18 25 (face font-lock-type-face fontified t) 25 27 (fontified t) 27 34 (fontified t) 34 35 (face (rainbow-delimiters-depth-2-face) fontified t) 35 36 (face (rainbow-delimiters-depth-2-face) fontified t) 36 38 (fontified t) 38 39 (face font-lock-variable-name-face fontified t) 39 41 (fontified t) 41 48 (face font-lock-type-face fontified t) 48 50 (fontified t) 50 57 (fontified t) 57 58 (face (rainbow-delimiters-depth-2-face) fontified t) 58 59 (face (rainbow-delimiters-depth-2-face) fontified t) 59 61 (fontified t) 61 62 (face font-lock-variable-name-face fontified t) 62 64 (fontified t) 64 71 (face font-lock-type-face fontified t) 71 73 (fontified t) 73 80 (fontified t) 80 81 (face (rainbow-delimiters-depth-2-face) fontified t) 81 82 (face (rainbow-delimiters-depth-2-face) fontified t) 82 83 (fontified t) 83 84 (face (rainbow-delimiters-depth-1-face) fontified t)) . 23) (undo-tree-id1163 . -25) (undo-tree-id1164 . -84)) nil (26116 23177 789300 50000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 23) (undo-tree-id1162 . -1)) nil (26116 23177 789297 792000) 0 nil])
([nil nil ((#("    }" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-unmatched-face) fontified t)) . 23) (undo-tree-id1161 . -5)) nil (26116 23177 789296 428000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 23) (undo-tree-id1160 . -1)) nil (26116 23177 789294 657000) 0 nil])
([nil nil ((#("}" 0 1 (face (rainbow-delimiters-unmatched-face) fontified t)) . 23) (undo-tree-id1159 . -1)) nil (26116 23177 789292 317000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 23) (undo-tree-id1158 . -1)) nil (26116 23177 789287 457000) 0 nil])
([nil nil ((#("#[derive(Default)]" 0 1 (face font-lock-preprocessor-face fontified t) 1 2 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t) 2 8 (face font-lock-preprocessor-face fontified t) 8 9 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 9 16 (face font-lock-preprocessor-face fontified t) 16 17 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 17 18 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t)) . 24) (undo-tree-id1217 . -9) (undo-tree-id1218 . -18) (undo-tree-id1219 . -18) (undo-tree-id1220 . -18) (undo-tree-id1221 . -18) (undo-tree-id1222 . -18) (undo-tree-id1223 . -18) (undo-tree-id1224 . -18) (undo-tree-id1225 . -18) (undo-tree-id1226 . -18) (undo-tree-id1227 . -18) (undo-tree-id1228 . -18) (undo-tree-id1229 . -18) (undo-tree-id1230 . -18) (undo-tree-id1231 . -18) (t 26116 23177 802167 840000)) nil (26116 23188 493143 644000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 24) (undo-tree-id1216 . -1)) nil (26116 23188 493128 81000) 0 nil])
([nil nil ((#("default()" 0 7 (fontified t) 7 8 (face (rainbow-delimiters-depth-3-face) fontified t) 8 9 (face (rainbow-delimiters-depth-3-face) fontified t)) . -336) (undo-tree-id1332 . -9) (undo-tree-id1333 . -9) (undo-tree-id1334 . -9) (undo-tree-id1335 . -9) (undo-tree-id1336 . -9) (undo-tree-id1337 . -9) (undo-tree-id1338 . -9) (undo-tree-id1339 . -9) (undo-tree-id1340 . -9) (undo-tree-id1341 . -9) (undo-tree-id1342 . -9) (undo-tree-id1343 . -9) (undo-tree-id1344 . -9) (undo-tree-id1345 . -9) (undo-tree-id1346 . -9) (undo-tree-id1347 . -9) 345 (t 26116 23188 535501 828000)) nil (26116 23234 587065 63000) 0 nil])
([nil nil ((#("Default::" 0 7 (face font-lock-type-face fontified t) 7 9 (fontified t)) . -327) (undo-tree-id1314 . -9) (undo-tree-id1315 . -9) (undo-tree-id1316 . -9) (undo-tree-id1317 . -9) (undo-tree-id1318 . -9) (undo-tree-id1319 . -9) (undo-tree-id1320 . -9) (undo-tree-id1321 . -9) (undo-tree-id1322 . -9) (undo-tree-id1323 . -9) (undo-tree-id1324 . -9) (undo-tree-id1325 . -9) (undo-tree-id1326 . -9) (undo-tree-id1327 . -9) (undo-tree-id1328 . -9) (undo-tree-id1329 . -9) (undo-tree-id1330 . -9) (undo-tree-id1331 . -9) 336) nil (26116 23234 587053 350000) 0 nil])
([nil nil ((327 . 328)) nil (26116 23234 587040 972000) 0 nil])
([nil nil ((327 . 338) (#("L" 0 1 (fontified nil)) . 327) (327 . 328) (#("LocalPlayer" 0 11 (fontified nil)) . -327) (327 . 338) (#("L" 0 1 (face font-lock-type-face fontified t)) . -327) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) 328) nil (26116 23234 587039 713000) 0 nil])
([nil nil ((338 . 341)) nil (26116 23234 587033 848000) 0 nil])
([nil nil ((342 . 350) (#("            " 0 12 (fontified nil)) . 341) (undo-tree-id1303 . -8) (undo-tree-id1304 . -8) (undo-tree-id1305 . -8) (undo-tree-id1306 . -8) (349 . 353) (340 . 350)) nil (26116 23234 587032 877000) 0 nil])
([nil nil ((341 . 353)) nil (26116 23234 587029 489000) 0 nil])
([nil nil ((353 . 356)) nil (26116 23234 587028 943000) 0 nil])
([nil nil ((355 . 362) (#("D" 0 1 (fontified nil)) . 355) (355 . 356) (#("Default" 0 7 (fontified nil)) . -355) (355 . 362) (#("D" 0 1 (face font-lock-type-face fontified t)) . -355) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) 356) nil (26116 23234 587027 635000) 0 nil])
([nil nil ((362 . 364)) nil (26116 23234 587022 793000) 0 nil])
([nil nil ((apply yas--snippet-revive 364 373 #s(yas--snippet nil nil #s(yas--exit 373 nil) 132 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 373 nil) 132 nil nil nil nil)) (364 . 373) (#("default()$0" 0 11 (fontified nil)) . 364) (364 . 375) (#("default() (as Default)" 0 22 (fontified nil)) . -364) (364 . 386)) nil (26116 23234 587021 936000) 0 nil])
([nil nil ((340 . 353)) nil (26116 23234 587020 513000) 0 nil])
([nil nil ((353 . 354)) nil (26116 23234 587019 864000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -353) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) 354) nil (26116 23234 587019 72000) 0 nil])
([nil nil ((353 . 354)) nil (26116 23234 587016 528000) 0 nil])
([nil nil ((353 . 365) (#("l" 0 1 (fontified nil)) . 353) (353 . 354) (#("local_origin" 0 12 (fontified nil)) . -353) (353 . 365) (#("l" 0 1 (fontified t)) . -353) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) 354) nil (26116 23234 587015 365000) 0 nil])
([nil nil ((365 . 368)) nil (26116 23234 587011 353000) 0 nil])
([nil nil ((367 . 374) (#("V" 0 1 (fontified nil)) . 367) (367 . 368) (#("Vector3" 0 7 (fontified nil)) . -367) (367 . 374) (#("V" 0 1 (face font-lock-type-face fontified t)) . -367) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) 368) nil (26116 23234 587010 175000) 0 nil])
([nil nil ((374 . 377)) nil (26116 23234 587005 473000) 0 nil])
([nil nil ((377 . 378)) nil (26116 23234 587004 826000) 0 nil])
([nil nil ((378 . 391)) nil (26116 23234 587003 998000) 0 nil])
([nil nil ((391 . 392)) nil (26116 23234 587003 372000) 0 nil])
([nil nil ((391 . 406) (#("c" 0 1 (fontified nil)) . 391) (391 . 392) (#("camera_position" 0 15 (fontified nil)) . -391) (391 . 406) (#("c" 0 1 (fontified t)) . -391) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) 392) nil (26116 23234 587002 96000) 0 nil])
([nil nil ((406 . 409)) nil (26116 23234 586996 782000) 0 nil])
([nil nil ((408 . 415) (#("V" 0 1 (fontified nil)) . 408) (408 . 409) (#("Vector3" 0 7 (fontified nil)) . -408) (408 . 415) (#("V" 0 1 (face font-lock-type-face fontified t)) . -408) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) 409) nil (26116 23234 586995 364000) 0 nil])
([nil nil ((415 . 419)) nil (26116 23234 586986 750000) 0 nil])
([nil nil ((376 . 382)) nil (26116 23234 586986 22000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -380) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (#("0" 0 1 (fontified t)) . -381) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) 382) nil (26116 23234 586984 368000) 0 nil])
([nil nil ((380 . 382)) nil (26116 23234 586975 818000) 0 nil])
([nil nil ((382 . 395)) nil (26116 23234 586974 841000) 0 nil])
([nil nil ((nil rear-nonsticky nil 456 . 457) (nil fontified nil 456 . 457) (nil fontified nil 455 . 456) (nil fontified nil 451 . 455) (nil fontified nil 450 . 451) (nil fontified nil 445 . 450) (nil fontified nil 444 . 445) (nil fontified nil 437 . 444) (nil fontified nil 436 . 437) (nil fontified nil 435 . 436) (nil fontified nil 434 . 435) (nil fontified nil 427 . 434) (427 . 457)) nil (26116 23234 586973 64000) 0 nil])
([nil nil ((#("Vector3 {}," 0 7 (face font-lock-type-face fontified t) 7 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-4-face) fontified t) 9 10 (face (rainbow-delimiters-depth-4-face) fontified t) 10 11 (fontified t)) . 457) (undo-tree-id1232 . -7) (undo-tree-id1233 . -7) (undo-tree-id1234 . -7) (undo-tree-id1235 . -8) (undo-tree-id1236 . -8) (undo-tree-id1237 . -9) (undo-tree-id1238 . -9) (undo-tree-id1239 . -10) (undo-tree-id1240 . -10) (undo-tree-id1241 . -11) (undo-tree-id1242 . -11) (undo-tree-id1243 . -11) (undo-tree-id1244 . -11) (undo-tree-id1245 . -11) (undo-tree-id1246 . -11) (undo-tree-id1247 . -11) (undo-tree-id1248 . -11) (undo-tree-id1249 . -11) (undo-tree-id1250 . -11) (undo-tree-id1251 . -11) (undo-tree-id1252 . -11) (undo-tree-id1253 . -11) (undo-tree-id1254 . -11) (undo-tree-id1255 . -11) (undo-tree-id1256 . -11) (undo-tree-id1257 . -11) (undo-tree-id1258 . -11)) nil (26116 23234 586966 564000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -23) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (376 . 393) (383 . 399) (386 . 387) (390 . 407) (392 . 393) (395 . 409) (436 . 453) (443 . 459) (446 . 447) (450 . 467) (452 . 453) (455 . 469) 500 (t 26116 23234 598837 983000)) nil (26116 23245 890897 47000) 0 nil])
([nil nil ((22 . 23) (t 26116 23245 932172 13000)) nil (26116 23261 898719 660000) 0 nil])
([nil nil ((23 . 25)) nil (26116 23261 898718 928000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -24) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) 25) nil (26116 23261 898717 799000) 0 nil])
([nil nil ((24 . 27)) nil (26116 23261 898709 645000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -24) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -25) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -26) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) 27) nil (26116 23261 898708 4000) 0 nil])
([nil nil ((24 . 26)) nil (26116 23261 898694 641000) 0 nil])
([nil nil ((25 . 26)) nil (26116 23261 898694 52000) 0 nil])
([nil nil ((#("Debug" 0 5 (face font-lock-preprocessor-face fontified t)) . 32) (undo-tree-id1361 . -5) (apply yas--snippet-revive 25 38 #s(yas--snippet nil (#s(yas--field 0 32 37 nil nil nil nil nil)) nil 133 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 0 32 37 nil nil nil nil nil)) nil 133 nil nil nil nil)) (25 . 38) (#("derive(${0:Debug})" 0 18 (fontified nil)) . 25) (25 . 43) (#("d" 0 1 (fontified nil)) . 25) (25 . 26) (#("derive(…)" 0 9 (fontified nil)) . -25) (25 . 34) (#("d" 0 1 (face font-lock-preprocessor-face fontified t)) . -25) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) 26) nil (26116 23261 898692 286000) 0 nil])
([nil nil ((32 . 33)) nil (26116 23261 898682 791000) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-preprocessor-face fontified t)) . -32) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) 33) nil (26116 23261 898681 624000) 0 nil])
([nil nil ((32 . 33)) nil (26116 23261 898675 618000) 0 nil])
([nil nil ((32 . 39) (#("D" 0 1 (fontified nil)) . 32) (32 . 33) (#("Default" 0 7 (fontified nil)) . -32) (32 . 39) (#("D" 0 1 (face font-lock-preprocessor-face fontified t)) . -32) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) 33) nil (26116 23368 498759 704000) 0 nil])
([nil nil ((39 . 42) (t 26116 23368 935512 875000)) nil (26116 23407 308186 595000) 0 nil] [nil nil ((#("default()" 0 7 (fontified t) 7 8 (face (rainbow-delimiters-depth-4-face) fontified t) 8 9 (face (rainbow-delimiters-depth-4-face) fontified t)) . -631) (undo-tree-id1417 . -9) (undo-tree-id1418 . -9) (undo-tree-id1419 . -9) (undo-tree-id1420 . -9) (undo-tree-id1421 . -9) (undo-tree-id1422 . -9) (undo-tree-id1423 . -9) (undo-tree-id1424 . -9) (undo-tree-id1425 . -9) (undo-tree-id1426 . -9) (undo-tree-id1427 . -9) (undo-tree-id1428 . -9) (undo-tree-id1429 . -9) 640 (t 26116 23261 942172 992000)) ((631 . 640)) (26116 23367 920278 249000) 0 nil])
([nil nil ((41 . 45)) nil (26116 23418 543155 659000) 0 nil])
([nil nil ((#("Default::" 0 7 (face font-lock-type-face fontified t) 7 9 (fontified t)) . -622) (undo-tree-id1403 . -9) (undo-tree-id1404 . -9) (undo-tree-id1405 . -9) (undo-tree-id1406 . -9) (undo-tree-id1407 . -9) (undo-tree-id1408 . -9) (undo-tree-id1409 . -9) (undo-tree-id1410 . -9) (undo-tree-id1411 . -9) (undo-tree-id1412 . -9) (undo-tree-id1413 . -9) (undo-tree-id1414 . -9) (undo-tree-id1415 . -9) (undo-tree-id1416 . -9) 631) ((622 . 631) (t 26116 23364 208845 918000)) (26116 23364 197008 546000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-preprocessor-face fontified t)) . -43) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (#("e" 0 1 (face font-lock-preprocessor-face fontified t)) . -44) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) 45) nil (26116 23422 884324 279000) 0 nil] [nil nil ((#("b" 0 1 (face font-lock-preprocessor-face fontified t)) . -41) (undo-tree-id1430 . -1) (undo-tree-id1432 . -1) (undo-tree-id1434 . -1) (undo-tree-id1436 . -1) (undo-tree-id1438 . -1) (undo-tree-id1440 . -1) (undo-tree-id1442 . -1) (undo-tree-id1444 . -1) (undo-tree-id1446 . -1) (#("a" 0 1 (face font-lock-preprocessor-face fontified t)) . -42) (undo-tree-id1448 . -1) (undo-tree-id1450 . -1) (undo-tree-id1452 . -1) (undo-tree-id1454 . -1) (undo-tree-id1456 . -1) (undo-tree-id1458 . -1) (undo-tree-id1460 . -1) (#("s" 0 1 (face font-lock-preprocessor-face fontified t)) . -43) (undo-tree-id1462 . -1) (undo-tree-id1464 . -1) (undo-tree-id1466 . -1) (undo-tree-id1468 . -1) (undo-tree-id1470 . -1) (#("e" 0 1 (face font-lock-preprocessor-face fontified t)) . -44) (undo-tree-id1472 . -1) (undo-tree-id1474 . -1) (undo-tree-id1476 . -1) 45) ((41 . 45)) (26116 23418 86619 153000) 0 nil])
nil
([nil nil ((#("t" 0 1 (face font-lock-preprocessor-face fontified t)) . -38) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (#("." 0 1 (face font-lock-preprocessor-face fontified t)) . -39) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-3-face font-lock-preprocessor-face) fontified t)) . -40) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (#("b" 0 1 (face font-lock-preprocessor-face fontified t)) . -41) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (#("a" 0 1 (face font-lock-preprocessor-face fontified t)) . -42) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) 43) nil (26116 23422 884309 727000) 0 nil])
([nil nil ((41 . 48)) ((#("is_dead" 0 7 (face font-lock-preprocessor-face fontified t)) . 41)) (26116 23417 761317 673000) 0 nil])
([nil nil ((#("}" 0 1 (face (rainbow-delimiters-mismatched-face font-lock-preprocessor-face) fontified t)) . -38) (undo-tree-id1557 . -1) (undo-tree-id1558 . 1) (undo-tree-id1559 . -1) 39) nil (26116 23422 884152 838000) 0 nil])
([nil nil ((#("." 0 1 (face font-lock-preprocessor-face fontified t)) . -39) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) 40 (t 26116 23407 322181 898000)) ((39 . 40) (t 26116 23416 205515 775000)) (26116 23416 160610 705000) 0 nil])
([nil nil ((38 . 39)) nil (26116 23422 884149 236000) 0 nil])
nil
([nil nil ((#("#[derive(Default)]" 0 1 (face font-lock-preprocessor-face fontified t) 1 2 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t) 2 8 (face font-lock-preprocessor-face fontified t) 8 9 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 9 16 (face font-lock-preprocessor-face fontified t) 16 17 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 17 18 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t)) . 23) (undo-tree-id1488 . -9) (undo-tree-id1489 . -15) (undo-tree-id1490 . -15) (undo-tree-id1491 . -15) (undo-tree-id1492 . -15) (undo-tree-id1493 . -15) (undo-tree-id1494 . -15) (undo-tree-id1495 . -15) (undo-tree-id1496 . -15) (undo-tree-id1497 . -15) (undo-tree-id1498 . -15) (undo-tree-id1499 . -15) (undo-tree-id1500 . -15) (undo-tree-id1501 . -15) (undo-tree-id1502 . -15) (undo-tree-id1503 . -15) (undo-tree-id1504 . -15) (undo-tree-id1505 . -15) (undo-tree-id1506 . -15) (undo-tree-id1507 . -15) (undo-tree-id1508 . -15) (undo-tree-id1509 . -15) (undo-tree-id1510 . -15) (undo-tree-id1511 . -15) (undo-tree-id1512 . -15) (undo-tree-id1513 . -15) (undo-tree-id1514 . -15) (undo-tree-id1515 . -15) (undo-tree-id1516 . -15) (undo-tree-id1517 . -15) (undo-tree-id1518 . -15) (undo-tree-id1519 . -15) (undo-tree-id1520 . -15) (undo-tree-id1521 . -15) (undo-tree-id1522 . -15) (undo-tree-id1523 . -15) (undo-tree-id1524 . -15) (undo-tree-id1525 . -15) (undo-tree-id1526 . -15) (undo-tree-id1527 . -15) (undo-tree-id1528 . -15) (undo-tree-id1529 . -15) (undo-tree-id1530 . -15) (undo-tree-id1531 . -15) (undo-tree-id1532 . -15) (undo-tree-id1533 . -15) (undo-tree-id1534 . -15) (undo-tree-id1535 . -15) (undo-tree-id1536 . -15) (undo-tree-id1537 . -15) (undo-tree-id1538 . -15) (undo-tree-id1539 . -15) (undo-tree-id1540 . -15) (undo-tree-id1541 . -15) (undo-tree-id1542 . -15) (undo-tree-id1543 . -15) (undo-tree-id1544 . -15) (undo-tree-id1545 . -15) (undo-tree-id1546 . -16) (undo-tree-id1547 . -16) (undo-tree-id1548 . 2) (undo-tree-id1549 . -16) (undo-tree-id1550 . -16) (undo-tree-id1551 . -16) (undo-tree-id1552 . -16) (undo-tree-id1553 . -16) (undo-tree-id1554 . -16) (undo-tree-id1555 . -16) (undo-tree-id1556 . -18)) nil (26116 23422 884143 470000) 0 nil])
([nil nil ((#("        LocalPlayer {
            local_origin: Vector3 {
                x: 0.0,
                y: 0.0,
                z: 0.0,
            },
            camera_position: Vector3 {
                x: 0.0,
                y: 0.0,
                z: 0.0,
            },
            ..Default::default()
        }" 0 8 (fontified t) 8 19 (face font-lock-type-face fontified t) 19 20 (fontified t) 20 21 (face (rainbow-delimiters-depth-3-face) fontified t) 21 22 (fontified t) 22 34 (fontified t) 34 46 (face font-lock-variable-name-face fontified t) 46 48 (fontified t) 48 55 (face font-lock-type-face fontified t) 55 56 (fontified t) 56 57 (face (rainbow-delimiters-depth-4-face) fontified t) 57 74 (fontified t) 74 75 (face font-lock-variable-name-face fontified t) 75 81 (fontified t) 81 97 (fontified t) 97 98 (fontified t) 98 99 (face font-lock-variable-name-face fontified t) 99 100 (fontified t) 100 101 (fontified t) 101 105 (fontified t) 105 106 (fontified t) 106 122 (fontified t) 122 123 (face font-lock-variable-name-face fontified t) 123 124 (fontified t) 124 125 (fontified t) 125 128 (fontified t) 128 130 (fontified t) 130 142 (fontified t) 142 143 (face (rainbow-delimiters-depth-4-face) fontified t) 143 145 (fontified t) 145 157 (fontified t) 157 172 (face font-lock-variable-name-face fontified t) 172 174 (fontified t) 174 181 (face font-lock-type-face fontified t) 181 182 (fontified t) 182 183 (face (rainbow-delimiters-depth-4-face) fontified t) 183 200 (fontified t) 200 201 (face font-lock-variable-name-face fontified t) 201 207 (fontified t) 207 223 (fontified t) 223 224 (fontified t) 224 225 (face font-lock-variable-name-face fontified t) 225 226 (fontified t) 226 227 (fontified t) 227 231 (fontified t) 231 232 (fontified t) 232 248 (fontified t) 248 249 (face font-lock-variable-name-face fontified t) 249 250 (fontified t) 250 251 (fontified t) 251 254 (fontified t) 254 256 (fontified t) 256 268 (fontified t) 268 269 (face (rainbow-delimiters-depth-4-face) fontified t) 269 270 (fontified t rear-nonsticky t) 270 271 (fontified t) 271 285 (fontified t) 285 292 (face font-lock-type-face fontified t) 292 294 (fontified t) 294 301 (fontified t) 301 302 (face (rainbow-delimiters-depth-4-face) fontified t) 302 303 (face (rainbow-delimiters-depth-4-face) fontified t) 303 304 (fontified t) 304 312 (fontified t) 312 313 (face (rainbow-delimiters-depth-3-face) fontified t)) . 319) (undo-tree-id1709 . -313) (undo-tree-id1710 . -270) (undo-tree-id1711 . -48) (undo-tree-id1712 . -255) (undo-tree-id1713 . -255) (undo-tree-id1714 . -255) (undo-tree-id1715 . -255) (undo-tree-id1716 . -255) (undo-tree-id1717 . -297) (undo-tree-id1718 . -297) (undo-tree-id1719 . -297) (undo-tree-id1720 . -297) (undo-tree-id1721 . -297) (undo-tree-id1722 . -297) (undo-tree-id1723 . -297) (undo-tree-id1724 . -297) (undo-tree-id1725 . -297) (undo-tree-id1726 . -297) (undo-tree-id1727 . -297) (undo-tree-id1728 . -297) (undo-tree-id1729 . -297) (undo-tree-id1730 . -297) (undo-tree-id1731 . -297) (undo-tree-id1732 . -297) (undo-tree-id1733 . -297) (undo-tree-id1734 . -297) (undo-tree-id1735 . -297) (undo-tree-id1736 . -297) (undo-tree-id1737 . -303) (undo-tree-id1738 . -303) (undo-tree-id1739 . -303) (undo-tree-id1740 . -303) (undo-tree-id1741 . -303) (undo-tree-id1742 . -303) (undo-tree-id1743 . -303) (undo-tree-id1744 . -303) (undo-tree-id1745 . -303) (undo-tree-id1746 . -303) (undo-tree-id1747 . -303) (undo-tree-id1748 . -303) (undo-tree-id1749 . -303) (undo-tree-id1750 . -303) (undo-tree-id1751 . -303) (undo-tree-id1752 . -303) (undo-tree-id1753 . -303) (undo-tree-id1754 . -303) (undo-tree-id1755 . -303) (undo-tree-id1756 . -303) (undo-tree-id1757 . -303) (undo-tree-id1758 . -303) (undo-tree-id1759 . -303) (undo-tree-id1760 . -303) (undo-tree-id1761 . -303) (undo-tree-id1762 . -303) (undo-tree-id1763 . -303) (undo-tree-id1764 . -303) (undo-tree-id1765 . -303) (undo-tree-id1766 . -303) (undo-tree-id1767 . -303) (undo-tree-id1768 . -303) (undo-tree-id1769 . -303) (undo-tree-id1770 . -303) (undo-tree-id1771 . -303) (undo-tree-id1772 . -303) (undo-tree-id1773 . -303) (undo-tree-id1774 . -303) (undo-tree-id1775 . -303) (undo-tree-id1776 . -303) (undo-tree-id1777 . -303) (undo-tree-id1778 . -303) (undo-tree-id1779 . -302) (undo-tree-id1780 . -300) (undo-tree-id1781 . -299) (undo-tree-id1782 . -270) (undo-tree-id1783 . -269) (undo-tree-id1784 . -268) (undo-tree-id1785 . -282) (undo-tree-id1786 . -282) (undo-tree-id1787 . -282) (undo-tree-id1788 . -282) (undo-tree-id1789 . -282) (undo-tree-id1790 . -303) (undo-tree-id1791 . -282) (undo-tree-id1792 . -282) (undo-tree-id1793 . -313) (undo-tree-id1794 . -313) (undo-tree-id1795 . -313) (undo-tree-id1796 . -282) (undo-tree-id1797 . -281) (undo-tree-id1798 . -265) (undo-tree-id1799 . -240) (undo-tree-id1800 . -239) (undo-tree-id1801 . -214) (undo-tree-id1802 . -189) (undo-tree-id1803 . -149) (undo-tree-id1804 . -133) (undo-tree-id1805 . -108) (undo-tree-id1806 . -83) (undo-tree-id1807 . -82) (undo-tree-id1808 . -303) (undo-tree-id1809 . -313) (t 26116 23422 895516 184000)) nil (26116 23479 213921 750000) 0 nil])
([nil nil ((#("use cgmath::Vector3;" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 10 (face font-lock-constant-face fontified t) 10 12 (fontified t) 12 19 (face font-lock-type-face fontified t) 19 20 (fontified t)) . 1) (undo-tree-id1903 . -20) (t 26116 23479 225519 625000)) nil (26116 23564 330184 12000) 0 nil])
([nil nil ((1 . 6)) nil (26116 23564 330182 46000) 0 nil])
([nil nil ((5 . 13) (#("n" 0 1 (fontified nil)) . 5) (5 . 6) (#("nalgebra" 0 8 (fontified nil)) . -5) (5 . 13) (#("n" 0 1 (face font-lock-constant-face fontified t)) . -5) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) 6) nil (26116 23564 330180 148000) 0 nil])
([nil nil ((13 . 18)) nil (26116 23564 330170 669000) 0 nil])
([nil nil ((15 . 22) (#("Vec" 0 3 (fontified nil)) . 15) (15 . 18) (#("Vector3" 0 7 (fontified nil)) . -15) (15 . 22) (#("Vec" 0 3 (face font-lock-type-face fontified t)) . -15) (undo-tree-id1881 . -3) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -2) (undo-tree-id1886 . -2) (undo-tree-id1887 . -2) (undo-tree-id1888 . -2) (undo-tree-id1889 . -2) (undo-tree-id1890 . -3) (undo-tree-id1891 . -3) (undo-tree-id1892 . -3) (undo-tree-id1893 . -3) (undo-tree-id1894 . -3) 18) nil (26116 23564 330168 607000) 0 nil])
([nil nil ((22 . 23)) nil (26116 23564 330150 884000) 0 nil])
([nil nil ((25 . 26)) nil (26116 23564 330150 114000) 0 nil])
([nil nil ((26 . 27)) nil (26116 23564 330149 233000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -26) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) 27) nil (26116 23564 330147 750000) 0 nil])
([nil nil ((26 . 27)) nil (26116 23564 330141 93000) 0 nil])
([nil nil ((#("D" 0 1 (face font-lock-type-face fontified t)) . -26) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) 27) nil (26116 23564 330139 791000) 0 nil])
([nil nil ((26 . 28)) nil (26116 23564 330135 771000) 0 nil])
([nil nil ((27 . 28)) nil (26116 23564 330134 810000) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-preprocessor-face fontified t)) . -27) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) 28) nil (26116 23564 330133 259000) 0 nil])
([nil nil ((27 . 28)) nil (26116 23564 330124 968000) 0 nil])
([nil nil ((#("D" 0 1 (face font-lock-preprocessor-face fontified t)) . -27) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) 28) nil (26116 23564 330122 285000) 0 nil])
([nil nil ((#("#[]" 0 1 (fontified t) 1 2 (face (rainbow-delimiters-depth-1-face) fontified t) 2 3 (face (rainbow-delimiters-depth-1-face) fontified t)) . 25) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -2) (undo-tree-id1828 . -2) (undo-tree-id1829 . -3) (undo-tree-id1830 . -3) (undo-tree-id1831 . -2) (undo-tree-id1832 . -2) (undo-tree-id1833 . -2) (undo-tree-id1834 . -2) (undo-tree-id1835 . -2) (undo-tree-id1836 . -2) (undo-tree-id1837 . -2) (undo-tree-id1838 . -2) (undo-tree-id1839 . -2) (undo-tree-id1840 . -2) (undo-tree-id1841 . -2) (undo-tree-id1842 . 1) (undo-tree-id1843 . -2) (undo-tree-id1844 . -2) (undo-tree-id1845 . -2) (undo-tree-id1846 . -2) (undo-tree-id1847 . -2) (undo-tree-id1848 . -2) (undo-tree-id1849 . -2) (undo-tree-id1850 . -2) (undo-tree-id1851 . -2) (undo-tree-id1852 . -3) (undo-tree-id1853 . -3) (undo-tree-id1854 . -3) (undo-tree-id1855 . -3)) nil (26116 23564 330104 509000) 0 nil])
([nil nil ((25 . 27) (t 26116 23564 342191 513000)) nil (26116 23576 581155 685000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -26) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) 27) nil (26116 23576 581154 574000) 0 nil])
([nil nil ((26 . 28)) nil (26116 23576 581151 580000) 0 nil])
([nil nil ((27 . 28)) nil (26116 23576 581150 810000) 0 nil])
([nil nil ((#("Debug" 0 5 (face font-lock-preprocessor-face fontified t)) . 34) (undo-tree-id1910 . -5) (apply yas--snippet-revive 27 40 #s(yas--snippet nil (#s(yas--field 0 34 39 nil nil nil nil nil)) nil 134 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 0 34 39 nil nil nil nil nil)) nil 134 nil nil nil nil)) (27 . 40) (#("derive(${0:Debug})" 0 18 (fontified nil)) . 27) (27 . 45) (#("d" 0 1 (fontified nil)) . 27) (27 . 28) (#("derive(…)" 0 9 (fontified nil)) . -27) (27 . 36) (#("d" 0 1 (face font-lock-preprocessor-face fontified t)) . -27) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) 28) nil (26116 23576 581148 753000) 0 nil])
([nil nil ((34 . 35)) nil (26116 23576 581141 171000) 0 nil])
([nil nil ((34 . 41) (#("D" 0 1 (fontified nil)) . 34) (34 . 35) (#("Default" 0 7 (fontified nil)) . -34) (34 . 41) (#("D" 0 1 (face font-lock-preprocessor-face fontified t)) . -34) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) 35) nil (26116 23576 581136 707000) 0 nil])
([nil nil ((339 . 340) (t 26116 23576 625525 597000)) nil (26116 23583 149360 80000) 0 nil])
([nil nil ((339 . 346) (#("D" 0 1 (fontified nil)) . 339) (339 . 340) (#("Default" 0 7 (fontified nil)) . -339) (339 . 346) (#("D" 0 1 (face font-lock-type-face fontified t)) . -339) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) 340) nil (26116 23583 149358 481000) 0 nil])
([nil nil ((346 . 348)) nil (26116 23583 149346 683000) 0 nil])
([nil nil ((apply yas--snippet-revive 348 357 #s(yas--snippet nil nil #s(yas--exit 357 nil) 135 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 357 nil) 135 nil nil nil nil)) (348 . 357) (#("default()$0" 0 11 (fontified nil)) . 348) (348 . 359) (#("default() (as Default)" 0 22 (fontified nil)) . -348) (348 . 370)) nil (26116 23583 149344 449000) 0 nil])
([nil nil ((339 . 347) 357) nil (26116 23583 149338 834000) 0 nil])
([nil nil ((373 . 377) (#("    " 0 4 (fontified nil)) . 372) (undo-tree-id1971 . -4) (undo-tree-id1972 . -4) (undo-tree-id1973 . -4) (undo-tree-id1974 . -4) (371 . 377) (t 26116 23583 162192 663000)) nil (26116 23707 140391 124000) 0 nil])
([nil nil ((377 . 388)) nil (26116 23707 140386 290000) 0 nil])
([nil nil ((388 . 393)) nil (26116 23707 140385 713000) 0 nil])
([nil nil ((389 . 395)) nil (26116 23707 140385 13000) 0 nil])
([nil nil ((389 . 398) (#("&mut s" 0 1 (face rust-ampersand-face fontified nil) 1 4 (face font-lock-keyword-face fontified nil) 4 5 (fontified nil) 5 6 (fontified nil)) . 389) (undo-tree-id1932 . -5) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (undo-tree-id1942 . -2) (undo-tree-id1943 . -2) (undo-tree-id1944 . -2) (undo-tree-id1945 . -2) (undo-tree-id1946 . -2) (undo-tree-id1947 . -3) (undo-tree-id1948 . -3) (undo-tree-id1949 . -4) (undo-tree-id1950 . -4) (undo-tree-id1951 . -4) (undo-tree-id1952 . -5) (undo-tree-id1953 . -5) (undo-tree-id1954 . -5) (undo-tree-id1955 . -5) (undo-tree-id1956 . -5) (undo-tree-id1957 . -5) (undo-tree-id1958 . -5) (undo-tree-id1959 . -5) (undo-tree-id1960 . -5) (undo-tree-id1961 . -5) (undo-tree-id1962 . -5) (undo-tree-id1963 . -5) (undo-tree-id1964 . -5) (undo-tree-id1965 . -5) (394 . 395) (#("&mut self" 0 9 (fontified nil)) . -394) (394 . 403) (#("s" 0 1 (fontified t)) . -394) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (undo-tree-id1970 . -1) 395) nil (26116 23707 140382 75000) 0 nil])
([nil nil ((404 . 408) (#("        " 0 8 (fontified nil)) . 403) (403 . 411) (#("    " 0 4 (fontified nil)) . 403) (undo-tree-id1924 . -4) (undo-tree-id1925 . -4) (undo-tree-id1926 . -4) (undo-tree-id1927 . -4) (403 . 408) (#("        " 0 8 (fontified nil)) . 402) (402 . 410) (#("    " 0 4 (fontified nil)) . 402) (undo-tree-id1928 . -4) (undo-tree-id1929 . -4) (undo-tree-id1930 . -4) (undo-tree-id1931 . -4) (401 . 407)) nil (26116 23707 140350 630000) 0 nil])
([nil nil ((403 . 411)) nil (26116 23707 140333 951000) 0 nil])
([nil nil ((402 . 410) (t 26116 23707 192200 263000)) nil (26116 23774 67604 321000) 0 nil])
([nil nil ((410 . 411)) nil (26116 23774 67603 470000) 0 nil])
([nil nil ((410 . 414) (#("s" 0 1 (fontified nil)) . 410) (410 . 411) (#("self" 0 4 (fontified nil)) . -410) (410 . 414) (#("s" 0 1 (fontified t)) . -410) (undo-tree-id2428 . -1) (undo-tree-id2429 . -1) (undo-tree-id2430 . -1) (undo-tree-id2431 . -1) (undo-tree-id2432 . -1) 411) nil (26116 23774 67602 188000) 0 nil])
([nil nil ((414 . 416)) nil (26116 23774 67597 371000) 0 nil])
([nil nil ((415 . 427) (#("b" 0 1 (fontified nil)) . 415) (415 . 416) (#("base_pointer" 0 12 (fontified nil)) . -415) (415 . 427) (#("b" 0 1 (fontified t)) . -415) (undo-tree-id2424 . -1) (undo-tree-id2425 . -1) (undo-tree-id2426 . -1) (undo-tree-id2427 . -1) 416) nil (26116 23774 67596 245000) 0 nil])
([nil nil ((427 . 431)) nil (26116 23774 67592 263000) 0 nil])
([nil nil ((431 . 432)) nil (26116 23774 67591 564000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -427) (undo-tree-id2328 . -1) (undo-tree-id2329 . -1) (undo-tree-id2330 . -1) (undo-tree-id2331 . -1) (undo-tree-id2332 . -1) (undo-tree-id2333 . -1) (undo-tree-id2334 . -1) (undo-tree-id2335 . -1) (undo-tree-id2336 . -1) (undo-tree-id2337 . -1) (undo-tree-id2338 . -1) (undo-tree-id2339 . -1) (undo-tree-id2340 . -1) (undo-tree-id2341 . -1) (undo-tree-id2342 . -1) (undo-tree-id2343 . -1) (undo-tree-id2344 . -1) (undo-tree-id2345 . -1) (undo-tree-id2346 . -1) (undo-tree-id2347 . -1) (undo-tree-id2348 . -1) (undo-tree-id2349 . -1) (undo-tree-id2350 . -1) (undo-tree-id2351 . -1) (undo-tree-id2352 . -1) (undo-tree-id2353 . -1) (undo-tree-id2354 . -1) (undo-tree-id2355 . -1) (undo-tree-id2356 . -1) (undo-tree-id2357 . -1) (undo-tree-id2358 . -1) (#("r" 0 1 (fontified t)) . -428) (undo-tree-id2359 . -1) (undo-tree-id2360 . -1) (undo-tree-id2361 . -1) (undo-tree-id2362 . -1) (undo-tree-id2363 . -1) (undo-tree-id2364 . -1) (undo-tree-id2365 . -1) (undo-tree-id2366 . -1) (undo-tree-id2367 . -1) (undo-tree-id2368 . -1) (undo-tree-id2369 . -1) (undo-tree-id2370 . -1) (undo-tree-id2371 . -1) (undo-tree-id2372 . -1) (undo-tree-id2373 . -1) (undo-tree-id2374 . -1) (undo-tree-id2375 . -1) (undo-tree-id2376 . -1) (undo-tree-id2377 . -1) (undo-tree-id2378 . -1) (undo-tree-id2379 . -1) (undo-tree-id2380 . -1) (undo-tree-id2381 . -1) (undo-tree-id2382 . -1) (undo-tree-id2383 . -1) (#("e" 0 1 (fontified t)) . -429) (undo-tree-id2384 . -1) (undo-tree-id2385 . -1) (undo-tree-id2386 . -1) (undo-tree-id2387 . -1) (undo-tree-id2388 . -1) (undo-tree-id2389 . -1) (undo-tree-id2390 . -1) (undo-tree-id2391 . -1) (undo-tree-id2392 . -1) (undo-tree-id2393 . -1) (undo-tree-id2394 . -1) (undo-tree-id2395 . -1) (undo-tree-id2396 . -1) (undo-tree-id2397 . -1) (undo-tree-id2398 . -1) (undo-tree-id2399 . -1) (undo-tree-id2400 . -1) (undo-tree-id2401 . -1) (undo-tree-id2402 . -1) (#("a" 0 1 (fontified t)) . -430) (undo-tree-id2403 . -1) (undo-tree-id2404 . -1) (undo-tree-id2405 . -1) (undo-tree-id2406 . -1) (undo-tree-id2407 . -1) (undo-tree-id2408 . -1) (undo-tree-id2409 . -1) (undo-tree-id2410 . -1) (undo-tree-id2411 . -1) (undo-tree-id2412 . -1) (undo-tree-id2413 . -1) (undo-tree-id2414 . -1) (undo-tree-id2415 . -1) (undo-tree-id2416 . -1) (undo-tree-id2417 . -1) (undo-tree-id2418 . -1) (#("d" 0 1 (fontified t)) . -431) (undo-tree-id2419 . -1) (undo-tree-id2420 . -1) (undo-tree-id2421 . -1) (undo-tree-id2422 . -1) (undo-tree-id2423 . -1) 432) nil (26116 23774 67587 142000) 0 nil])
([nil nil ((427 . 434)) nil (26116 23774 67522 283000) 0 nil])
([nil nil ((23 . 53) (430 . 430) (430 . 438) (#("Read" 0 4 (fontified nil)) . 430) (430 . 434) (#("Readable (use crate::memory::Readable)" 0 38 (fontified nil)) . -430) (430 . 468) (#("Read" 0 4 (face font-lock-type-face fontified t)) . -430) (undo-tree-id2316 . -4) (undo-tree-id2317 . -1) (undo-tree-id2318 . -1) (undo-tree-id2319 . -1) (undo-tree-id2320 . -2) (undo-tree-id2321 . -2) (undo-tree-id2322 . -2) (undo-tree-id2323 . -3) (undo-tree-id2324 . -3) (undo-tree-id2325 . -4) (undo-tree-id2326 . -4) (undo-tree-id2327 . -4) 434) nil (26116 23774 67520 682000) 0 nil])
([nil nil ((468 . 470)) nil (26116 23774 67510 929000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 475 484 nil nil nil nil #s(yas--field 2 486 493 nil nil nil nil #s(yas--exit 494 nil))) #s(yas--field 2 486 493 nil nil nil nil #s(yas--exit 494 nil))) #s(yas--exit 494 nil) 136 nil #s(yas--field 1 475 484 nil nil nil nil #s(yas--field 2 486 493 nil nil nil nil #s(yas--exit 494 nil))) nil nil)) (470 . 494) (#("read(${1:&mut self}, ${2:address})$0" 0 36 (fontified nil)) . 470) (470 . 506) (#("read(…) (as Readable)" 0 21 (fontified nil)) . -470) (470 . 491)) nil (26116 23774 67509 817000) 0 nil])
([nil nil ((apply yas--snippet-revive 470 494 #s(yas--snippet nil (#s(yas--field 1 475 484 nil nil nil nil #s(yas--field 2 486 493 nil nil nil nil #s(yas--exit 494 nil))) #s(yas--field 2 486 493 nil nil nil nil #s(yas--exit 494 nil))) #s(yas--exit 494 nil) 136 nil #s(yas--field 1 475 484 nil nil nil nil #s(yas--field 2 486 493 nil nil nil nil #s(yas--exit 494 nil))) nil nil))) nil (26116 23774 67508 415000) 0 nil])
([nil nil ((#("address)" 0 7 (fontified t) 7 8 (face (rainbow-delimiters-depth-3-face) fontified t)) . -486) (undo-tree-id2308 . -8) (undo-tree-id2309 . -8) (undo-tree-id2310 . -8) (undo-tree-id2311 . -8) (undo-tree-id2312 . -8) (undo-tree-id2313 . -8) (undo-tree-id2314 . -8) (undo-tree-id2315 . -8) 494) nil (26116 23774 67507 68000) 0 nil])
([nil nil ((#("self, " 0 4 (face font-lock-keyword-face fontified t) 4 6 (fontified t)) . -480) (undo-tree-id2298 . -6) (undo-tree-id2299 . -6) (undo-tree-id2300 . -6) (undo-tree-id2301 . -6) (undo-tree-id2302 . -6) (undo-tree-id2303 . -6) (undo-tree-id2304 . -6) (undo-tree-id2305 . -6) (undo-tree-id2306 . -6) (undo-tree-id2307 . -6) 486) nil (26116 23774 67500 180000) 0 nil])
([nil nil ((#("mut " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -476) (undo-tree-id2286 . -4) (undo-tree-id2287 . -4) (undo-tree-id2288 . -4) (undo-tree-id2289 . -4) (undo-tree-id2290 . -4) (undo-tree-id2291 . -4) (undo-tree-id2292 . -4) (undo-tree-id2293 . -4) (undo-tree-id2294 . -4) (undo-tree-id2295 . -4) (undo-tree-id2296 . -4) (undo-tree-id2297 . -4) 480) nil (26116 23774 67492 728000) 0 nil])
([nil nil ((#("read(&" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-3-face) fontified t) 5 6 (fontified t)) . -470) (undo-tree-id2259 . -6) (undo-tree-id2260 . -6) (undo-tree-id2261 . -6) (undo-tree-id2262 . -5) (undo-tree-id2263 . -5) (undo-tree-id2264 . -5) (undo-tree-id2265 . -5) (undo-tree-id2266 . -5) (undo-tree-id2267 . -5) (undo-tree-id2268 . -5) (undo-tree-id2269 . -5) (undo-tree-id2270 . -5) (undo-tree-id2271 . -5) (undo-tree-id2272 . -5) (undo-tree-id2273 . -5) (undo-tree-id2274 . -5) (undo-tree-id2275 . -6) (undo-tree-id2276 . -6) (undo-tree-id2277 . -6) (undo-tree-id2278 . -6) (undo-tree-id2279 . -6) (undo-tree-id2280 . -6) (undo-tree-id2281 . -6) (undo-tree-id2282 . -6) (undo-tree-id2283 . -6) (undo-tree-id2284 . -6) (undo-tree-id2285 . -6) 476) nil (26116 23774 67482 938000) 0 nil])
([nil nil ((#("Readable::" 0 8 (face font-lock-type-face fontified t) 8 10 (fontified t)) . -460) (undo-tree-id2215 . -10) (undo-tree-id2216 . -8) (undo-tree-id2217 . -8) (undo-tree-id2218 . -8) (undo-tree-id2219 . -8) (undo-tree-id2220 . -8) (undo-tree-id2221 . -8) (undo-tree-id2222 . -8) (undo-tree-id2223 . -8) (undo-tree-id2224 . -8) (undo-tree-id2225 . -9) (undo-tree-id2226 . -9) (undo-tree-id2227 . -10) (undo-tree-id2228 . -10) (undo-tree-id2229 . -10) (undo-tree-id2230 . -10) (undo-tree-id2231 . -10) (undo-tree-id2232 . -10) (undo-tree-id2233 . -10) (undo-tree-id2234 . -10) (undo-tree-id2235 . -10) (undo-tree-id2236 . -10) (undo-tree-id2237 . -10) (undo-tree-id2238 . -10) (undo-tree-id2239 . -10) (undo-tree-id2240 . -10) (undo-tree-id2241 . -10) (undo-tree-id2242 . -10) (undo-tree-id2243 . -10) (undo-tree-id2244 . -10) (undo-tree-id2245 . -10) (undo-tree-id2246 . -10) (undo-tree-id2247 . -10) (undo-tree-id2248 . -10) (undo-tree-id2249 . -10) (undo-tree-id2250 . -10) (undo-tree-id2251 . -10) (undo-tree-id2252 . -10) (undo-tree-id2253 . -10) (undo-tree-id2254 . -10) (undo-tree-id2255 . -10) (undo-tree-id2256 . -10) (undo-tree-id2257 . -10) (undo-tree-id2258 . -10) 470) nil (26116 23774 67462 607000) 0 nil])
([nil nil ((#("pointer = " 0 10 (fontified t)) . -450) (undo-tree-id2100 . -10) (undo-tree-id2101 . -7) (undo-tree-id2102 . -7) (undo-tree-id2103 . -7) (undo-tree-id2104 . -7) (undo-tree-id2105 . -7) (undo-tree-id2106 . -7) (undo-tree-id2107 . -7) (undo-tree-id2108 . -7) (undo-tree-id2109 . -7) (undo-tree-id2110 . -7) (undo-tree-id2111 . -7) (undo-tree-id2112 . -7) (undo-tree-id2113 . -7) (undo-tree-id2114 . -7) (undo-tree-id2115 . -7) (undo-tree-id2116 . -7) (undo-tree-id2117 . -7) (undo-tree-id2118 . -7) (undo-tree-id2119 . -7) (undo-tree-id2120 . -7) (undo-tree-id2121 . -7) (undo-tree-id2122 . -7) (undo-tree-id2123 . -7) (undo-tree-id2124 . -7) (undo-tree-id2125 . -7) (undo-tree-id2126 . -7) (undo-tree-id2127 . -7) (undo-tree-id2128 . -7) (undo-tree-id2129 . -7) (undo-tree-id2130 . -7) (undo-tree-id2131 . -7) (undo-tree-id2132 . -7) (undo-tree-id2133 . -7) (undo-tree-id2134 . -7) (undo-tree-id2135 . -7) (undo-tree-id2136 . -7) (undo-tree-id2137 . -7) (undo-tree-id2138 . -7) (undo-tree-id2139 . -7) (undo-tree-id2140 . -7) (undo-tree-id2141 . -7) (undo-tree-id2142 . -7) (undo-tree-id2143 . -8) (undo-tree-id2144 . -8) (undo-tree-id2145 . -9) (undo-tree-id2146 . -9) (undo-tree-id2147 . -9) (undo-tree-id2148 . -9) (undo-tree-id2149 . -10) (undo-tree-id2150 . -10) (undo-tree-id2151 . -10) (undo-tree-id2152 . -10) (undo-tree-id2153 . -10) (undo-tree-id2154 . -10) (undo-tree-id2155 . -10) (undo-tree-id2156 . -10) (undo-tree-id2157 . -10) (undo-tree-id2158 . -10) (undo-tree-id2159 . -10) (undo-tree-id2160 . -10) (undo-tree-id2161 . -10) (undo-tree-id2162 . -10) (undo-tree-id2163 . -10) (undo-tree-id2164 . -10) (undo-tree-id2165 . -10) (undo-tree-id2166 . -10) (undo-tree-id2167 . -10) (undo-tree-id2168 . -10) (undo-tree-id2169 . -10) (undo-tree-id2170 . -10) (undo-tree-id2171 . -10) (undo-tree-id2172 . -10) (undo-tree-id2173 . -10) (undo-tree-id2174 . -10) (undo-tree-id2175 . -10) (undo-tree-id2176 . -10) (undo-tree-id2177 . -10) (undo-tree-id2178 . -10) (undo-tree-id2179 . -10) (undo-tree-id2180 . -10) (undo-tree-id2181 . -10) (undo-tree-id2182 . -10) (undo-tree-id2183 . -10) (undo-tree-id2184 . -10) (undo-tree-id2185 . -10) (undo-tree-id2186 . -10) (undo-tree-id2187 . -10) (undo-tree-id2188 . -10) (undo-tree-id2189 . -10) (undo-tree-id2190 . -10) (undo-tree-id2191 . -10) (undo-tree-id2192 . -10) (undo-tree-id2193 . -10) (undo-tree-id2194 . -10) (undo-tree-id2195 . -10) (undo-tree-id2196 . -10) (undo-tree-id2197 . -10) (undo-tree-id2198 . -10) (undo-tree-id2199 . -10) (undo-tree-id2200 . -10) (undo-tree-id2201 . -10) (undo-tree-id2202 . -10) (undo-tree-id2203 . -10) (undo-tree-id2204 . -10) (undo-tree-id2205 . -10) (undo-tree-id2206 . -10) (undo-tree-id2207 . -10) (undo-tree-id2208 . -10) (undo-tree-id2209 . -10) (undo-tree-id2210 . -10) (undo-tree-id2211 . -10) (undo-tree-id2212 . -10) (undo-tree-id2213 . -10) (undo-tree-id2214 . -10) 460) nil (26116 23774 67427 680000) 0 nil])
([nil nil ((#("self.base_" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 10 (fontified t)) . 440) (undo-tree-id1975 . -4) (undo-tree-id1976 . -4) (undo-tree-id1977 . -4) (undo-tree-id1978 . -5) (undo-tree-id1979 . -5) (undo-tree-id1980 . -5) (undo-tree-id1981 . -5) (undo-tree-id1982 . -5) (undo-tree-id1983 . -10) (undo-tree-id1984 . -10) (undo-tree-id1985 . -10) (undo-tree-id1986 . -10) (undo-tree-id1987 . -10) (undo-tree-id1988 . -10) (undo-tree-id1989 . -10) (undo-tree-id1990 . -10) (undo-tree-id1991 . -10) (undo-tree-id1992 . -10) (undo-tree-id1993 . -10) (undo-tree-id1994 . -10) (undo-tree-id1995 . -10) (undo-tree-id1996 . -10) (undo-tree-id1997 . -10) (undo-tree-id1998 . -10) (undo-tree-id1999 . -10) (undo-tree-id2000 . -10) (undo-tree-id2001 . -10) (undo-tree-id2002 . -10) (undo-tree-id2003 . -10) (undo-tree-id2004 . -10) (undo-tree-id2005 . -10) (undo-tree-id2006 . -10) (undo-tree-id2007 . -10) (undo-tree-id2008 . -10) (undo-tree-id2009 . -10) (undo-tree-id2010 . -10) (undo-tree-id2011 . -10) (undo-tree-id2012 . -10) (undo-tree-id2013 . -10) (undo-tree-id2014 . -10) (undo-tree-id2015 . -10) (undo-tree-id2016 . -10) (undo-tree-id2017 . -10) (undo-tree-id2018 . -10) (undo-tree-id2019 . -10) (undo-tree-id2020 . -10) (undo-tree-id2021 . -10) (undo-tree-id2022 . -10) (undo-tree-id2023 . -10) (undo-tree-id2024 . -10) (undo-tree-id2025 . -10) (undo-tree-id2026 . -10) (undo-tree-id2027 . -10) (undo-tree-id2028 . -10) (undo-tree-id2029 . -10) (undo-tree-id2030 . -10) (undo-tree-id2031 . -10) (undo-tree-id2032 . -10) (undo-tree-id2033 . -10) (undo-tree-id2034 . -10) (undo-tree-id2035 . -10) (undo-tree-id2036 . -10) (undo-tree-id2037 . -10) (undo-tree-id2038 . -10) (undo-tree-id2039 . -10) (undo-tree-id2040 . -10) (undo-tree-id2041 . -10) (undo-tree-id2042 . -10) (undo-tree-id2043 . -10) (undo-tree-id2044 . -10) (undo-tree-id2045 . -10) (undo-tree-id2046 . -10) (undo-tree-id2047 . -10) (undo-tree-id2048 . -10) (undo-tree-id2049 . -10) (undo-tree-id2050 . -10) (undo-tree-id2051 . -10) (undo-tree-id2052 . -10) (undo-tree-id2053 . -10) (undo-tree-id2054 . -10) (undo-tree-id2055 . -10) (undo-tree-id2056 . -10) (undo-tree-id2057 . -10) (undo-tree-id2058 . -10) (undo-tree-id2059 . -10) (undo-tree-id2060 . -10) (undo-tree-id2061 . -10) (undo-tree-id2062 . -10) (undo-tree-id2063 . -10) (undo-tree-id2064 . -10) (undo-tree-id2065 . -10) (undo-tree-id2066 . -10) (undo-tree-id2067 . -10) (undo-tree-id2068 . -10) (undo-tree-id2069 . -10) (undo-tree-id2070 . -10) (undo-tree-id2071 . -10) (undo-tree-id2072 . -10) (undo-tree-id2073 . -10) (undo-tree-id2074 . -10) (undo-tree-id2075 . -10) (undo-tree-id2076 . -10) (undo-tree-id2077 . -10) (undo-tree-id2078 . -10) (undo-tree-id2079 . -10) (undo-tree-id2080 . -10) (undo-tree-id2081 . -10) (undo-tree-id2082 . -10) (undo-tree-id2083 . -10) (undo-tree-id2084 . -10) (undo-tree-id2085 . -10) (undo-tree-id2086 . -10) (undo-tree-id2087 . -10) (undo-tree-id2088 . -10) (undo-tree-id2089 . -10) (undo-tree-id2090 . -10) (undo-tree-id2091 . -10) (undo-tree-id2092 . -10) (undo-tree-id2093 . -10) (undo-tree-id2094 . -10) (undo-tree-id2095 . -10) (undo-tree-id2096 . -10) (undo-tree-id2097 . -10) (undo-tree-id2098 . -10) (undo-tree-id2099 . -10)) nil (26116 23774 66724 795000) 0 nil])
([nil nil ((440 . 441) (t 26116 23774 78871 1000)) nil (26116 23924 117564 194000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -440) (undo-tree-id2506 . -1) (undo-tree-id2507 . -1) (undo-tree-id2508 . -1) (undo-tree-id2509 . -1) (undo-tree-id2510 . -1) 441) nil (26116 23924 117563 201000) 0 nil])
([nil nil ((440 . 442)) nil (26116 23924 117559 372000) 0 nil])
([nil nil ((440 . 444) (#("se" 0 2 (fontified nil)) . 440) (440 . 442) (#("self" 0 4 (fontified nil)) . -440) (440 . 444) (#("se" 0 2 (fontified t)) . -440) (undo-tree-id2502 . -2) (undo-tree-id2503 . -1) (undo-tree-id2504 . -1) (undo-tree-id2505 . -2) 442) nil (26116 23924 117558 244000) 0 nil])
([nil nil ((444 . 447)) nil (26116 23924 117554 459000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -446) (undo-tree-id2500 . -1) (undo-tree-id2501 . -1) 447) nil (26116 23924 117553 729000) 0 nil])
([nil nil ((445 . 457) (#("b" 0 1 (fontified nil)) . 445) (445 . 446) (#("base_pointer" 0 12 (fontified nil)) . -445) (445 . 457) (#("b" 0 1 (fontified t)) . -445) (undo-tree-id2494 . -1) (undo-tree-id2495 . -1) (undo-tree-id2496 . -1) (undo-tree-id2497 . -1) (undo-tree-id2498 . -1) (undo-tree-id2499 . -1) 446) nil (26116 23924 117551 219000) 0 nil])
([nil nil ((457 . 462)) nil (26116 23924 117545 750000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 506 533 nil nil nil t #s(yas--exit 534 nil))) #s(yas--exit 534 nil) 137 nil #s(yas--field 1 506 533 nil nil nil t #s(yas--exit 534 nil)) nil nil)) (458 . 471) (#("read(${1:address})$0" 0 20 (fontified nil)) . 458) (458 . 478) (#("read" 0 4 (fontified nil)) . 458) (458 . 462) (#("read(…) (as Readable)" 0 21 (fontified nil)) . -458) (458 . 479) (#("read" 0 4 (fontified t)) . -458) (undo-tree-id2484 . -4) (undo-tree-id2485 . -1) (undo-tree-id2486 . -1) (undo-tree-id2487 . -2) (undo-tree-id2488 . -3) (undo-tree-id2489 . -3) (undo-tree-id2490 . -4) (undo-tree-id2491 . -4) (undo-tree-id2492 . -4) (undo-tree-id2493 . -4) 462) nil (26116 23924 117544 105000) 0 nil])
([nil nil ((#("address" 0 7 (fontified nil)) . 464) (undo-tree-id2483 . -7) (463 . 464)) nil (26116 23924 117536 63000) 0 nil])
([nil nil ((#("P" 0 1 (face font-lock-type-face fontified t)) . -463) (undo-tree-id2476 . -1) (undo-tree-id2477 . -1) (undo-tree-id2478 . -1) (undo-tree-id2479 . -1) (undo-tree-id2480 . -1) (undo-tree-id2481 . -1) (undo-tree-id2482 . -1) 464) nil (26116 23924 117534 312000) 0 nil])
([nil nil ((463 . 469)) nil (26116 23924 117528 950000) 0 nil])
([nil nil ((36 . 37) (51 . 58) (52 . 67) (463 . 463) (463 . 473) (#("OFF_RE" 0 6 (fontified nil)) . 463) (undo-tree-id2455 . -6) (463 . 469) (#("OFF_REGION (use crate::offsets::OFF_REGION)" 0 43 (fontified nil)) . -463) (undo-tree-id2456 . -43) (463 . 506) (#("OFF_RE" 0 6 (face font-lock-type-face fontified t)) . -463) (undo-tree-id2457 . -6) (undo-tree-id2458 . -6) (undo-tree-id2459 . -6) (undo-tree-id2460 . -1) (undo-tree-id2461 . -1) (undo-tree-id2462 . -2) (undo-tree-id2463 . -2) (undo-tree-id2464 . -2) (undo-tree-id2465 . -3) (undo-tree-id2466 . -3) (undo-tree-id2467 . -3) (undo-tree-id2468 . -3) (undo-tree-id2469 . -4) (undo-tree-id2470 . -5) (undo-tree-id2471 . -5) (undo-tree-id2472 . -5) (undo-tree-id2473 . -6) (undo-tree-id2474 . -6) (undo-tree-id2475 . -6) 469) nil (26116 23924 117527 52000) 0 nil])
([nil nil ((496 . 502)) nil (26116 23924 117510 912000) 0 nil])
([nil nil ((64 . 65) (74 . 93) (497 . 497) (497 . 513) (#("OFF_L" 0 5 (fontified nil)) . 497) (undo-tree-id2433 . -5) (497 . 502) (#("OFF_LOCAL_PLAYER (use crate::offsets::OFF_LOCAL_PLAYER)" 0 55 (fontified nil)) . -497) (undo-tree-id2434 . -55) (497 . 552) (#("OFF_L" 0 5 (face font-lock-type-face fontified t)) . -497) (undo-tree-id2435 . -5) (undo-tree-id2436 . -5) (undo-tree-id2437 . -5) (undo-tree-id2438 . -1) (undo-tree-id2439 . -1) (undo-tree-id2440 . -1) (undo-tree-id2441 . -2) (undo-tree-id2442 . -2) (undo-tree-id2443 . -3) (undo-tree-id2444 . -3) (undo-tree-id2445 . -3) (undo-tree-id2446 . -3) (undo-tree-id2447 . -3) (undo-tree-id2448 . -3) (undo-tree-id2449 . -3) (undo-tree-id2450 . -3) (undo-tree-id2451 . -4) (undo-tree-id2452 . -5) (undo-tree-id2453 . -5) (undo-tree-id2454 . -5) 502) nil (26116 23924 117508 101000) 0 nil])
([nil nil ((apply yas--snippet-revive 501 534 #s(yas--snippet nil (#s(yas--field 1 506 533 nil nil nil t #s(yas--exit 534 nil))) #s(yas--exit 534 nil) 137 nil #s(yas--field 1 506 533 nil nil nil t #s(yas--exit 534 nil)) nil nil))) nil (26116 23924 117484 727000) 0 nil])
([nil nil ((534 . 535)) nil (26116 23924 117480 343000) 0 nil])
([nil nil ((535 . 544) (t 26116 23924 132213 524000)) nil (26116 23941 56779 962000) 0 nil])
([nil nil ((544 . 548)) nil (26116 23941 56779 174000) 0 nil])
([nil nil ((547 . 551) (#("s" 0 1 (fontified nil)) . 547) (547 . 548) (#("self" 0 4 (fontified nil)) . -547) (547 . 551) (#("s" 0 1 (fontified t)) . -547) (undo-tree-id2526 . -1) (undo-tree-id2527 . -1) (undo-tree-id2528 . -1) (undo-tree-id2529 . -1) (undo-tree-id2530 . -1) 548) nil (26116 23941 56778 11000) 0 nil])
([nil nil ((551 . 553)) nil (26116 23941 56773 534000) 0 nil])
([nil nil ((552 . 564) (#("b" 0 1 (fontified nil)) . 552) (552 . 553) (#("base_pointer" 0 12 (fontified nil)) . -552) (552 . 564) (#("b" 0 1 (fontified t)) . -552) (undo-tree-id2521 . -1) (undo-tree-id2522 . -1) (undo-tree-id2523 . -1) (undo-tree-id2524 . -1) (undo-tree-id2525 . -1) 553) nil (26116 23941 56772 210000) 0 nil])
([nil nil ((564 . 567)) nil (26116 23941 56767 492000) 0 nil])
([nil nil ((567 . 572)) nil (26116 23941 56766 889000) 0 nil])
([nil nil ((571 . 572)) nil (26116 23941 56766 220000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -571) (undo-tree-id2518 . -1) (undo-tree-id2519 . -1) (undo-tree-id2520 . -1) 572) nil (26116 23941 56765 320000) 0 nil])
([nil nil ((571 . 572)) nil (26116 23941 56762 198000) 0 nil])
([nil nil ((apply yas--snippet-revive 571 578 #s(yas--snippet nil nil nil 138 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 138 nil nil nil nil)) (571 . 578) (#("return;" 0 7 (fontified nil)) . 571) (571 . 578) (#("r" 0 1 (fontified nil)) . 571) (571 . 572) (#("return" 0 6 (fontified nil)) . -571) (571 . 577) (#("r" 0 1 (fontified t)) . -571) (undo-tree-id2513 . -1) (undo-tree-id2514 . -1) (undo-tree-id2515 . -1) (undo-tree-id2516 . -1) (undo-tree-id2517 . -1) 572) nil (26116 23941 56759 903000) 0 nil])
([nil current ((37 . 42) (54 . 58) (#("REGION, OFF_" 0 6 (face font-lock-type-face fontified t) 6 8 (fontified t) 8 12 (face font-lock-type-face fontified t)) . 69) (92 . 99) (93 . 98) (94 . 96) (516 . 517) (517 . 518) (571 . 584) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -578) (undo-tree-id2511 . -1) (undo-tree-id2512 . -1) (588 . 589)) nil (26116 23941 56750 310000) 0 nil])
nil
