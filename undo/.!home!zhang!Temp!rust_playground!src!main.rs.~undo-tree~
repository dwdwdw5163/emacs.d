(undo-tree-save-format-version . 1)
"7d78df7bebb96a2fbc8562fc9be24c6a4850eaa5"
[nil nil nil nil (26046 838 401179 423000) 0 nil]
([nil nil ((1 . 3) (t 26046 674 199930 670000)) nil (26046 838 401178 564000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2) (undo-tree-id85 . 1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1)) nil (26046 838 401177 486000) 0 nil])
([nil nil ((1 . 2)) nil (26046 838 401174 701000) 0 nil])
([nil nil ((1 . 5)) nil (26046 838 401174 134000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -4) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) 5) nil (26046 838 401173 347000) 0 nil])
([nil nil ((4 . 12)) nil (26046 838 401170 705000) 0 nil])
([nil nil ((10 . 16) (#("th" 0 2 (fontified nil)) . 10) (10 . 12) (#("thread" 0 6 (fontified nil)) . -10) (10 . 16) (#("th" 0 2 (fontified t)) . -10) (undo-tree-id74 . -2) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -2) (undo-tree-id79 . -2) (undo-tree-id80 . -2) (undo-tree-id81 . -2) 12) nil (26046 838 401169 306000) 0 nil])
([nil nil ((16 . 17)) nil (26046 838 401163 779000) 0 nil])
([nil nil ((32 . 36) (#("    " 0 4 (fontified nil)) . 31) (undo-tree-id70 . -4) (undo-tree-id71 . -4) (undo-tree-id72 . -4) (undo-tree-id73 . -4) (30 . 36)) nil (26046 838 401162 926000) 0 nil])
([nil nil ((31 . 35)) nil (26046 838 401159 756000) 0 nil])
([nil nil ((35 . 40)) nil (26046 838 401159 243000) 0 nil])
([nil nil ((35 . 41) (#("threa" 0 5 (fontified nil)) . 35) (35 . 40) (#("thread" 0 6 (fontified nil)) . -35) (35 . 41) (#("threa" 0 5 (fontified t)) . -35) (undo-tree-id56 . -5) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -2) (undo-tree-id60 . -2) (undo-tree-id61 . -3) (undo-tree-id62 . -3) (undo-tree-id63 . -4) (undo-tree-id64 . -4) (undo-tree-id65 . -4) (undo-tree-id66 . -5) (undo-tree-id67 . -5) (undo-tree-id68 . -5) (undo-tree-id69 . -5) 40) nil (26046 838 401158 11000) 0 nil])
([nil nil ((41 . 45)) nil (26046 838 401147 309000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 49 59 nil nil nil t #s(yas--exit 60 nil))) #s(yas--exit 60 nil) 0 nil #s(yas--field 1 49 59 nil nil nil t #s(yas--exit 60 nil)) nil nil)) (43 . 51) (#("spawn(${1:f})$0" 0 15 (fontified nil)) . 43) (43 . 58) (#("sp" 0 2 (fontified nil)) . 43) (43 . 45) (#("spawn(…)" 0 8 (fontified nil)) . -43) (43 . 51) (#("sp" 0 2 (fontified t)) . -43) (undo-tree-id48 . -2) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -2) (undo-tree-id53 . -2) (undo-tree-id54 . -2) (undo-tree-id55 . -2) 45) nil (26046 838 401145 811000) 0 nil])
([nil nil ((50 . 54) (#("f" 0 1 (fontified nil)) . 50) (undo-tree-id47 . -1) (49 . 50)) nil (26046 838 401139 198000) 0 nil])
([nil nil ((49 . 54)) nil (26046 838 401137 716000) 0 nil])
([nil nil ((apply yas--snippet-revive 43 60 #s(yas--snippet nil (#s(yas--field 1 49 59 nil nil nil t #s(yas--exit 60 nil))) #s(yas--exit 60 nil) 0 nil #s(yas--field 1 49 59 nil nil nil t #s(yas--exit 60 nil)) nil nil))) nil (26046 838 401137 6000) 0 nil])
([nil nil ((60 . 61)) nil (26046 838 401136 521000) 0 nil])
([nil nil ((32 . 36) (#("    " 0 4 (fontified nil)) . 31) (undo-tree-id43 . -4) (undo-tree-id44 . -4) (undo-tree-id45 . -4) (undo-tree-id46 . -4) (30 . 36)) nil (26046 838 401135 615000) 0 nil])
([nil nil ((31 . 35)) nil (26046 838 401132 448000) 0 nil])
([nil nil ((35 . 48)) nil (26046 838 401131 801000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -47) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) 48) nil (26046 838 401130 928000) 0 nil])
([nil nil ((47 . 52)) nil (26046 838 401127 432000) 0 nil])
([nil nil ((10 . 11) (16 . 24) (47 . 47) (47 . 52) (#("array" 0 5 (fontified nil)) . 47) (47 . 52) (#("array (use std::array)" 0 22 (fontified nil)) . -47) (47 . 69) (#("array" 0 5 (fontified t)) . -47) (undo-tree-id25 . -5) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -2) (undo-tree-id29 . -2) (undo-tree-id30 . -3) (undo-tree-id31 . -3) (undo-tree-id32 . -4) (undo-tree-id33 . -4) (undo-tree-id34 . -5) (undo-tree-id35 . -5) (undo-tree-id36 . -5) (undo-tree-id37 . -5) 52) nil (26046 838 401125 854000) 0 nil])
([nil nil ((61 . 64)) nil (26046 838 401116 418000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -63) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) 64) nil (26046 838 401115 544000) 0 nil])
([nil nil ((#("array::" 0 5 (face font-lock-constant-face fontified t) 5 7 (fontified t)) . -56) (undo-tree-id0 . -7) (undo-tree-id1 . -5) (undo-tree-id2 . -5) (undo-tree-id3 . -5) (undo-tree-id4 . -5) (undo-tree-id5 . -6) (undo-tree-id6 . -6) (undo-tree-id7 . -7) (undo-tree-id8 . -7) (undo-tree-id9 . -7) (undo-tree-id10 . -7) (undo-tree-id11 . -7) (undo-tree-id12 . -7) (undo-tree-id13 . -7) (undo-tree-id14 . -7) (undo-tree-id15 . -7) (undo-tree-id16 . -7) (undo-tree-id17 . -7) (undo-tree-id18 . -7) 63) nil (26046 838 401110 401000) 0 nil])
([nil nil ((56 . 58)) nil (26046 838 401083 823000) 0 nil])
([nil nil ((57 . 62)) nil (26046 838 401083 187000) 0 nil])
([nil nil ((63 . 64)) nil (26046 838 401081 990000) 0 nil])
([nil nil ((58 . 60)) nil (26046 838 401077 722000) 0 nil])
([nil nil ((#("array}" 0 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-1-face) fontified t)) . -19) (undo-tree-id125 . -6) (undo-tree-id126 . -5) (undo-tree-id127 . -6) 25 (t 26046 838 466607 344000)) nil (26046 844 851587 359000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -17) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (#(" " 0 1 (fontified t)) . -18) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) 19) nil (26046 844 851940 253000) 0 nil])
([nil nil ((#("{" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -10) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) 11) nil (26046 845 640067 260000) 0 nil] [nil nil ((#("std::{" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-1-face) fontified t)) . -5) (undo-tree-id89 . -6) (undo-tree-id90 . -5) (undo-tree-id91 . -5) (undo-tree-id92 . -5) (undo-tree-id93 . -5) (undo-tree-id94 . -5) (undo-tree-id95 . -5) (undo-tree-id96 . -5) (undo-tree-id97 . -6) (undo-tree-id98 . -6) (undo-tree-id99 . -6) 11) ((5 . 11)) (26046 844 851563 300000) 0 nil])
([nil nil ((60 . 64) (#("    " 0 4 (fontified nil)) . 59) (undo-tree-id199 . -4) (undo-tree-id200 . -4) (undo-tree-id201 . -4) (undo-tree-id202 . -4) (59 . 64) (#("    " 0 4 (fontified nil)) . 58) (undo-tree-id203 . -4) (undo-tree-id204 . -4) (undo-tree-id205 . -4) (undo-tree-id206 . -4) (undo-tree-id207 . -4) (undo-tree-id208 . -4) (undo-tree-id209 . -4) (62 . 63) (t 26046 845 649941 116000)) nil (26046 902 569884 372000) 0 nil])
nil
([nil nil ((58 . 62)) nil (26046 902 569876 185000) 0 nil])
([nil nil ((62 . 74)) nil (26046 902 569875 421000) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-variable-name-face fontified t)) . -72) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (#("p" 0 1 (face font-lock-variable-name-face fontified t)) . -73) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) 74) nil (26046 902 569873 726000) 0 nil])
([nil nil ((#("println!(\"Hello, world!\");" 0 8 (face rust-builtin-formatting-macro fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t) 9 24 (face font-lock-string-face fontified t) 24 25 (face (rainbow-delimiters-depth-2-face) fontified t) 25 26 (fontified t)) . 119) (undo-tree-id169 . -10) (undo-tree-id170 . -10) (undo-tree-id171 . -10) (undo-tree-id172 . -10) (undo-tree-id173 . -10) (undo-tree-id174 . -26)) nil (26046 902 569858 480000) 0 nil])
([nil nil ((119 . 126)) nil (26046 902 569854 375000) 0 nil])
([nil nil ((127 . 131) (#("        " 0 8 (fontified nil)) . 126) (126 . 134) (#("    " 0 4 (fontified nil)) . 126) (undo-tree-id165 . -4) (undo-tree-id166 . -4) (undo-tree-id167 . -4) (undo-tree-id168 . -4) (125 . 131)) nil (26046 902 569853 382000) 0 nil])
([nil nil ((126 . 134)) nil (26046 902 569849 886000) 0 nil])
([nil nil ((134 . 135)) nil (26046 902 569849 310000) 0 nil])
([nil nil ((apply yas--snippet-revive 134 144 #s(yas--snippet nil nil #s(yas--exit 143 nil) 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 143 nil) 1 nil nil nil nil)) (134 . 144) (#("println!($0)" 0 12 (fontified nil)) . 134) (134 . 146) (#("p" 0 1 (fontified nil)) . 134) (134 . 135) (#("println!(…)" 0 11 (fontified nil)) . -134) (134 . 145) (#("p" 0 1 (fontified t)) . -134) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) 135) nil (26046 902 569847 646000) 0 nil])
([nil nil ((143 . 145)) nil (26046 902 569842 722000) 0 nil])
([nil nil ((#("{" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -143) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -144) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) 145) nil (26046 902 570570 765000) 0 nil])
([nil nil ((143 . 145)) nil (26046 938 153566 306000) 0 nil] [nil nil ((145 . 153) (#("            " 0 12 (fontified nil)) . 144) (undo-tree-id134 . -8) (undo-tree-id135 . -8) (undo-tree-id136 . -8) (undo-tree-id137 . -8) (152 . 156) (143 . 153)) ((#("
        
" 0 1 (fontified t) 1 9 (fontified nil) 9 10 (fontified nil)) . 143) (undo-tree-id210 . -10) (undo-tree-id211 . -9) (undo-tree-id212 . -9) (undo-tree-id213 . -9) (undo-tree-id214 . -10) (#("    " 0 4 (fontified nil)) . 152) (144 . 156) (#("        " 0 8 (fontified t)) . 145) (undo-tree-id215 . -8)) (26046 902 569822 449000) 0 nil])
([nil nil ((144 . 146)) nil (26046 938 153565 594000) 0 nil])
nil
([nil nil ((#("[" 0 1 (face font-lock-string-face fontified t)) . -144) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (#("]" 0 1 (face font-lock-string-face fontified t)) . -145) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) 146) nil (26046 938 153564 243000) 0 nil])
([nil nil ((144 . 146)) nil (26046 938 153375 878000) 0 nil])
([nil nil ((145 . 147)) nil (26046 938 153375 243000) 0 nil])
([nil nil ((#("/" 0 1 (face rust-string-interpolation fontified t)) . -146) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) 147) nil (26046 938 153374 415000) 0 nil])
([nil nil ((146 . 147)) nil (26046 938 153371 517000) 0 nil])
([nil nil ((149 . 150)) nil (26046 938 153370 805000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -149) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) 150) nil (26046 938 153369 743000) 0 nil])
([nil nil ((149 . 152)) nil (26046 938 153248 139000) 0 nil])
([nil nil ((151 . 156) (#("a" 0 1 (fontified nil)) . 151) (151 . 152) (#("array" 0 5 (fontified nil)) . -151) (151 . 156) (#("a" 0 1 (fontified t)) . -151) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) 152) nil (26046 938 153246 781000) 0 nil])
([nil nil ((156 . 158)) nil (26046 938 153239 72000) 0 nil])
([nil nil ((157 . 161)) nil (26046 938 153238 408000) 0 nil])
([nil nil ((163 . 164)) nil (26046 938 153237 736000) 0 nil])
([nil nil ((125 . 134)) nil (26046 938 153237 161000) 0 nil])
([nil nil ((134 . 138)) nil (26046 938 153236 515000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -135) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (#("e" 0 1 (fontified t)) . -136) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (#("a" 0 1 (fontified t)) . -137) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) 138) nil (26046 938 153234 522000) 0 nil])
([nil nil ((135 . 136)) nil (26046 938 153214 998000) 0 nil])
([nil nil ((134 . 140) (#("th" 0 2 (fontified nil)) . 134) (134 . 136) (#("thread" 0 6 (fontified nil)) . -134) (134 . 140) (#("th" 0 2 (fontified t)) . -134) (undo-tree-id268 . -2) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -2) (undo-tree-id290 . -2) 136) nil (26046 938 153212 745000) 0 nil])
([nil nil ((140 . 144)) nil (26046 938 153072 259000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 166 188 nil nil nil t #s(yas--exit 189 nil))) #s(yas--exit 189 nil) 2 nil #s(yas--field 1 166 188 nil nil nil t #s(yas--exit 189 nil)) nil nil)) (142 . 152) (#("sleep(${1:dur})$0" 0 17 (fontified nil)) . 142) (142 . 159) (#("sp" 0 2 (fontified nil)) . 142) (142 . 144) (#("sleep(…)" 0 8 (fontified nil)) . -142) (142 . 150) (#("sp" 0 2 (fontified t)) . -142) (undo-tree-id260 . -2) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -2) (undo-tree-id264 . -2) (undo-tree-id265 . -2) (undo-tree-id266 . -2) (undo-tree-id267 . -2) 144) nil (26046 938 153070 590000) 0 nil])
([nil nil ((149 . 150) (#("dur" 0 3 (fontified nil)) . 149) (undo-tree-id259 . -3) (148 . 149)) nil (26046 938 153063 189000) 0 nil])
([nil nil ((150 . 155)) nil (26046 938 153061 614000) 0 nil])
([nil nil ((10 . 11) (16 . 33) (148 . 148) (148 . 156) (#("Duation" 0 7 (fontified nil)) . 148) (undo-tree-id235 . -7) (148 . 155) (#("Duration (use std::time::Duration)" 0 34 (fontified nil)) . -148) (undo-tree-id236 . -34) (148 . 182) (#("Duation" 0 7 (face font-lock-type-face fontified t)) . -148) (undo-tree-id237 . -7) (undo-tree-id238 . -7) (undo-tree-id239 . -7) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -2) (undo-tree-id246 . -2) (undo-tree-id247 . -2) (undo-tree-id248 . -2) (undo-tree-id249 . -3) (undo-tree-id250 . -3) (undo-tree-id251 . -4) (undo-tree-id252 . -5) (undo-tree-id253 . -6) (undo-tree-id254 . -6) (undo-tree-id255 . -7) (undo-tree-id256 . -7) (undo-tree-id257 . -7) (undo-tree-id258 . -7) 155) nil (26046 938 153059 393000) 0 nil])
([nil nil ((174 . 180)) nil (26046 938 153041 302000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 186 187 nil nil nil t #s(yas--exit 188 nil))) #s(yas--exit 188 nil) 3 nil #s(yas--field 1 186 187 nil nil nil t #s(yas--exit 188 nil)) #s(yas--field 1 166 188 nil nil nil t #s(yas--exit 189 nil)) nil)) (176 . 191) (#("from_secs(${1:secs})$0" 0 22 (fontified nil)) . 176) (undo-tree-id217 . -22) (176 . 198) (#("from" 0 4 (fontified nil)) . 176) (undo-tree-id218 . -4) (176 . 180) (#("from_secs(…)" 0 12 (fontified nil)) . -176) (undo-tree-id219 . -12) (176 . 188) (#("from" 0 4 (fontified t)) . -176) (undo-tree-id220 . -4) (undo-tree-id221 . -4) (undo-tree-id222 . -4) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -2) (undo-tree-id226 . -3) (undo-tree-id227 . -4) (undo-tree-id228 . -4) (undo-tree-id229 . -4) (undo-tree-id230 . -4) (undo-tree-id231 . -4) (undo-tree-id232 . -4) (undo-tree-id233 . -4) (undo-tree-id234 . -4) 180) nil (26046 938 153038 932000) 0 nil])
([nil nil ((#("secs" 0 4 (fontified nil)) . 187) (undo-tree-id216 . -4) (186 . 187)) nil (26046 938 153023 106000) 0 nil])
([nil nil ((apply yas--snippet-revive 160 189 #s(yas--snippet nil (#s(yas--field 1 166 188 nil nil nil t #s(yas--exit 189 nil))) #s(yas--exit 189 nil) 2 nil #s(yas--field 1 166 188 nil nil nil t #s(yas--exit 189 nil)) nil nil)) (apply yas--snippet-revive 176 188 #s(yas--snippet nil (#s(yas--field 1 186 187 nil nil nil t #s(yas--exit 188 nil))) #s(yas--exit 188 nil) 3 nil #s(yas--field 1 186 187 nil nil nil t #s(yas--exit 188 nil)) #s(yas--field 1 166 188 nil nil nil t #s(yas--exit 189 nil)) nil))) nil (26046 938 153016 399000) 0 nil])
([nil nil ((189 . 190)) nil (26046 938 153011 495000) 0 nil])
([nil nil ((90 . 93) (t 26046 938 193280 95000)) nil (26046 965 780385 884000) 0 nil])
([nil nil ((#("_" 0 1 (face font-lock-variable-name-face fontified t)) . -89) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (#("p" 0 1 (face font-lock-variable-name-face fontified t)) . -90) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -91) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (#("r" 0 1 (face font-lock-variable-name-face fontified t)) . -92) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) 93) nil (26046 965 780383 370000) 0 nil])
([nil nil ((89 . 92)) nil (26046 965 780354 670000) 0 nil])
([nil nil ((#("p" 0 1 (face font-lock-variable-name-face fontified t)) . -91) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) 92) nil (26046 965 780353 902000) 0 nil])
([nil nil ((91 . 92)) nil (26046 965 780351 561000) 0 nil])
([nil nil ((#("o" 0 1 (face font-lock-variable-name-face fontified t)) . -91) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) 92) nil (26046 965 780350 730000) 0 nil])
([nil nil ((91 . 100)) nil (26046 965 780348 265000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -97) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (#("r" 0 1 (fontified t)) . -98) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (#("c" 0 1 (fontified t)) . -99) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) 100) nil (26046 965 780346 334000) 0 nil])
([nil nil ((97 . 98)) nil (26046 965 780328 40000) 0 nil])
([nil nil ((98 . 100)) nil (26046 965 780327 454000) 0 nil])
([nil nil ((33 . 44) (97 . 97) (97 . 100) (#("Arc" 0 3 (fontified nil)) . 97) (97 . 100) (#("Arc (use std::sync::Arc)" 0 24 (fontified nil)) . -97) (97 . 121) (#("Arc" 0 3 (face font-lock-type-face fontified t)) . -97) (undo-tree-id389 . -3) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -2) (undo-tree-id393 . -2) (undo-tree-id394 . -2) (undo-tree-id395 . -2) (undo-tree-id396 . -2) (undo-tree-id397 . -3) (undo-tree-id398 . -3) (undo-tree-id399 . -3) (undo-tree-id400 . -3) (undo-tree-id401 . -3) 100) nil (26046 965 780326 4000) 0 nil])
([nil nil ((111 . 114)) nil (26046 965 780317 26000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 132 151 nil nil nil t #s(yas--exit 152 nil))) #s(yas--exit 152 nil) 4 nil #s(yas--field 1 132 151 nil nil nil t #s(yas--exit 152 nil)) nil nil)) (113 . 122) (#("new(${1:data})$0" 0 16 (fontified nil)) . 113) (113 . 129) (#("n" 0 1 (fontified nil)) . 113) (113 . 114) (#("new(…)" 0 6 (fontified nil)) . -113) (113 . 119) (#("n" 0 1 (fontified t)) . -113) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) 114) nil (26046 965 780315 727000) 0 nil])
([nil nil ((118 . 120) (#("data" 0 4 (fontified nil)) . 118) (undo-tree-id382 . -4) (117 . 118)) nil (26046 965 780310 524000) 0 nil])
([nil nil ((44 . 59) (117 . 117) (117 . 124) (#("Ref" 0 3 (fontified nil)) . 117) (undo-tree-id364 . -3) (117 . 120) (#("RefCell (use std::cell::RefCell)" 0 32 (fontified nil)) . -117) (undo-tree-id365 . -32) (117 . 149) (#("Ref" 0 3 (face font-lock-type-face fontified t)) . -117) (undo-tree-id366 . -3) (undo-tree-id367 . -3) (undo-tree-id368 . -3) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -2) (undo-tree-id375 . -2) (undo-tree-id376 . -2) (undo-tree-id377 . -3) (undo-tree-id378 . -3) (undo-tree-id379 . -3) (undo-tree-id380 . -3) (undo-tree-id381 . -3) 120) nil (26046 965 780307 937000) 0 nil])
([nil nil ((139 . 142)) nil (26046 965 780295 9000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 145 150 nil nil nil t #s(yas--exit 151 nil))) #s(yas--exit 151 nil) 5 nil #s(yas--field 1 145 150 nil nil nil t #s(yas--exit 151 nil)) #s(yas--field 1 132 151 nil nil nil t #s(yas--exit 152 nil)) nil)) (141 . 151) (#("new(${1:value})$0" 0 17 (fontified nil)) . 141) (undo-tree-id353 . -17) (141 . 158) (#("n" 0 1 (fontified nil)) . 141) (undo-tree-id354 . -1) (141 . 142) (#("new(…)" 0 6 (fontified nil)) . -141) (undo-tree-id355 . -6) (141 . 147) (#("n" 0 1 (fontified t)) . -141) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) 142) nil (26046 965 780293 351000) 0 nil])
([nil nil ((#("value" 0 5 (fontified nil)) . 146) (undo-tree-id352 . -5) (145 . 146)) nil (26046 965 780284 19000) 0 nil])
([nil nil ((145 . 150) (#("a" 0 1 (fontified nil)) . 145) (undo-tree-id342 . -1) (145 . 146) (#("array" 0 5 (fontified nil)) . -145) (undo-tree-id343 . -5) (145 . 150) (#("a" 0 1 (fontified t)) . -145) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) 146) nil (26046 965 780280 967000) 0 nil])
([nil nil ((apply yas--snippet-revive 128 152 #s(yas--snippet nil (#s(yas--field 1 132 151 nil nil nil t #s(yas--exit 152 nil))) #s(yas--exit 152 nil) 4 nil #s(yas--field 1 132 151 nil nil nil t #s(yas--exit 152 nil)) nil nil)) (apply yas--snippet-revive 141 151 #s(yas--snippet nil (#s(yas--field 1 145 150 nil nil nil t #s(yas--exit 151 nil))) #s(yas--exit 151 nil) 5 nil #s(yas--field 1 145 150 nil nil nil t #s(yas--exit 151 nil)) #s(yas--field 1 132 151 nil nil nil t #s(yas--exit 152 nil)) nil))) nil (26046 965 780266 89000) 0 nil])
([nil nil ((152 . 153)) nil (26046 965 780261 708000) 0 nil])
([nil nil ((189 . 193) (#("        " 0 8 (fontified nil)) . 188) (188 . 196) (#("    " 0 4 (fontified nil)) . 188) (undo-tree-id485 . -4) (undo-tree-id486 . -4) (undo-tree-id487 . -4) (undo-tree-id488 . -4) (187 . 193) (t 26046 965 819948 440000)) nil (26046 973 362245 663000) 0 nil])
([nil nil ((188 . 196)) nil (26046 973 362230 749000) 0 nil])
([nil nil ((88 . 89) (t 26046 973 363282 227000)) nil (26046 994 239694 778000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -88) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) 89) nil (26046 994 239692 651000) 0 nil])
([nil nil ((88 . 92)) nil (26046 994 239677 58000) 0 nil])
([nil nil ((91 . 97)) nil (26046 1006 715239 885000) 0 nil])
([nil nil ((#("4]" 0 1 (fontified t) 1 2 (face (rainbow-delimiters-depth-4-face) fontified t)) . -312) (undo-tree-id595 . -2) (undo-tree-id596 . -1) (undo-tree-id597 . -2) (undo-tree-id598 . -2) (undo-tree-id599 . -2) (undo-tree-id600 . -2) (undo-tree-id601 . -2) 314) nil (26046 1020 877369 227000) 0 nil] [nil nil ((#(":" 0 1 (face rust-string-interpolation fontified t)) . -297) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (#("?" 0 1 (face rust-string-interpolation fontified t)) . -298) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) 299 (t 26046 994 279950 165000)) ((297 . 299) (t 26046 1003 963284 89000)) (26046 1003 921539 746000) 0 nil])
([nil nil ((#("0.." 0 3 (fontified t)) . -309) (undo-tree-id579 . -3) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -2) (undo-tree-id586 . -3) (undo-tree-id587 . -3) (undo-tree-id588 . -3) (undo-tree-id589 . -3) (undo-tree-id590 . -3) (undo-tree-id591 . -3) (undo-tree-id592 . -3) (undo-tree-id593 . -3) (undo-tree-id594 . -3) 312) nil (26046 1020 877364 89000) 0 nil])
nil
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -308) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) 309) nil (26046 1020 877352 914000) 0 nil])
([nil nil ((308 . 313)) nil (26046 1020 877340 282000) 0 nil])
([nil nil ((313 . 314)) nil (26046 1020 877339 737000) 0 nil])
([nil nil ((#("slice" 0 5 (fontified t)) . -309) (undo-tree-id541 . -5) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -2) (undo-tree-id548 . -2) (undo-tree-id549 . -2) (undo-tree-id550 . -3) (undo-tree-id551 . -3) (undo-tree-id552 . -3) (undo-tree-id553 . -3) (undo-tree-id554 . -4) (undo-tree-id555 . -4) (undo-tree-id556 . -4) (undo-tree-id557 . -5) (undo-tree-id558 . -5) (undo-tree-id559 . -5) (undo-tree-id560 . -5) 314) nil (26046 1020 877338 352000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -308) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) 309) nil (26046 1020 877324 263000) 0 nil])
([nil nil ((303 . 304)) nil (26046 1020 877286 203000) 0 nil])
([nil nil ((309 . 311)) nil (26046 1020 877284 946000) 0 nil])
([nil nil ((310 . 314)) nil (26046 1020 877281 206000) 0 nil])
([nil nil ((206 . 207) (t 26046 1020 916618 454000)) nil (26046 1117 20038 559000) 0 nil])
([nil nil ((206 . 216) (#("a" 0 1 (fontified nil)) . 206) (206 . 207) (#("array_copy" 0 10 (fontified nil)) . -206) (206 . 216) (#("a" 0 1 (fontified t)) . -206) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) 207) nil (26046 1117 20037 246000) 0 nil])
([nil nil ((#("copy" 0 4 (fontified t)) . -212) (undo-tree-id983 . -4) (undo-tree-id984 . -4) (undo-tree-id985 . -4) (undo-tree-id986 . -4) (undo-tree-id987 . -4) (undo-tree-id988 . -4) (undo-tree-id989 . -4) (undo-tree-id990 . -4) (undo-tree-id991 . -4) (undo-tree-id992 . -4) (undo-tree-id993 . -4) 216) nil (26046 1117 20032 637000) 0 nil])
([nil nil ((#("array_" 0 6 (fontified t)) . -206) (undo-tree-id970 . -6) (undo-tree-id971 . -6) (undo-tree-id972 . -6) (undo-tree-id973 . -6) (undo-tree-id974 . -6) (undo-tree-id975 . -6) (undo-tree-id976 . -6) (undo-tree-id977 . -6) (undo-tree-id978 . -6) (undo-tree-id979 . -6) (undo-tree-id980 . -6) (undo-tree-id981 . -6) (undo-tree-id982 . -6) 212) nil (26046 1117 20024 858000) 0 nil])
([nil nil ((206 . 207)) nil (26046 1117 20015 974000) 0 nil])
([nil nil ((apply yas--snippet-revive 206 235 #s(yas--snippet nil nil #s(yas--exit 225 nil) 6 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 225 nil) 6 nil nil nil nil)) (206 . 235) (#("loop {
            $0
        }" 0 31 (fontified nil)) . 206) (228 . 236) (213 . 225) (#("    " 0 4 (fontified nil)) . 213) (206 . 221) (#("l" 0 1 (fontified nil)) . 206) (206 . 207) (#("loop" 0 4 (fontified nil)) . -206) (206 . 210) (#("l" 0 1 (fontified t)) . -206) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) 207) nil (26046 1117 20014 606000) 0 nil])
([nil nil ((225 . 226)) nil (26046 1117 20009 509000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -225) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) 226) nil (26046 1117 20008 733000) 0 nil])
([nil nil ((225 . 227)) nil (26046 1117 20005 178000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -225) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (#("l" 0 1 (fontified t)) . -226) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) 227) nil (26046 1117 20003 944000) 0 nil])
([nil nil ((225 . 228)) nil (26046 1117 19995 961000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -227) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) 228) nil (26046 1117 19995 266000) 0 nil])
([nil nil ((227 . 228)) nil (26046 1117 19991 560000) 0 nil])
([nil nil ((225 . 231) (#("thr" 0 3 (fontified nil)) . 225) (225 . 228) (#("thread" 0 6 (fontified nil)) . -225) (225 . 231) (#("thr" 0 3 (fontified t)) . -225) (undo-tree-id928 . -3) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -2) (undo-tree-id932 . -2) (undo-tree-id933 . -2) (undo-tree-id934 . -2) (undo-tree-id935 . -2) (undo-tree-id936 . -2) (undo-tree-id937 . -2) (undo-tree-id938 . -2) (undo-tree-id939 . -3) (undo-tree-id940 . -3) (undo-tree-id941 . -3) (undo-tree-id942 . -3) 228) nil (26046 1117 19990 154000) 0 nil])
([nil nil ((231 . 234)) nil (26046 1117 19979 832000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 239 265 nil nil nil t #s(yas--exit 266 nil))) #s(yas--exit 266 nil) 7 nil #s(yas--field 1 239 265 nil nil nil t #s(yas--exit 266 nil)) nil nil)) (233 . 243) (#("sleep(${1:dur})$0" 0 17 (fontified nil)) . 233) (233 . 250) (#("s" 0 1 (fontified nil)) . 233) (233 . 234) (#("sleep(…)" 0 8 (fontified nil)) . -233) (233 . 241) (#("s" 0 1 (fontified t)) . -233) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) 234) nil (26046 1117 19978 536000) 0 nil])
([nil nil ((#("dur" 0 3 (fontified nil)) . 240) (undo-tree-id922 . -3) (239 . 240)) nil (26046 1117 19974 62000) 0 nil])
([nil nil ((239 . 247) (#("D" 0 1 (fontified nil)) . 239) (undo-tree-id913 . -1) (239 . 240) (#("Duration" 0 8 (fontified nil)) . -239) (undo-tree-id914 . -8) (239 . 247) (#("D" 0 1 (face font-lock-type-face fontified t)) . -239) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) 240) nil (26046 1117 19972 92000) 0 nil])
([nil nil ((247 . 253)) nil (26046 1117 19965 646000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 261 264 nil nil nil t #s(yas--exit 265 nil))) #s(yas--exit 265 nil) 8 nil #s(yas--field 1 261 264 nil nil nil t #s(yas--exit 265 nil)) #s(yas--field 1 239 265 nil nil nil t #s(yas--exit 266 nil)) nil)) (249 . 268) (#("from_millis(${1:millis})$0" 0 26 (fontified nil)) . 249) (undo-tree-id896 . -26) (249 . 275) (#("from" 0 4 (fontified nil)) . 249) (undo-tree-id897 . -4) (249 . 253) (#("from_millis(…)" 0 14 (fontified nil)) . -249) (undo-tree-id898 . -14) (249 . 263) (#("from" 0 4 (fontified t)) . -249) (undo-tree-id899 . -4) (undo-tree-id900 . -4) (undo-tree-id901 . -4) (undo-tree-id902 . -1) (undo-tree-id903 . -2) (undo-tree-id904 . -3) (undo-tree-id905 . -4) (undo-tree-id906 . -4) (undo-tree-id907 . -4) (undo-tree-id908 . -4) (undo-tree-id909 . -4) (undo-tree-id910 . -4) (undo-tree-id911 . -4) (undo-tree-id912 . -4) 253) nil (26046 1117 19964 136000) 0 nil])
([nil nil ((262 . 264) (#("millis" 0 6 (fontified nil)) . 262) (undo-tree-id895 . -6) (261 . 262)) nil (26046 1117 19952 474000) 0 nil])
([nil nil ((apply yas--snippet-revive 233 266 #s(yas--snippet nil (#s(yas--field 1 239 265 nil nil nil t #s(yas--exit 266 nil))) #s(yas--exit 266 nil) 7 nil #s(yas--field 1 239 265 nil nil nil t #s(yas--exit 266 nil)) nil nil)) (apply yas--snippet-revive 249 265 #s(yas--snippet nil (#s(yas--field 1 261 264 nil nil nil t #s(yas--exit 265 nil))) #s(yas--exit 265 nil) 8 nil #s(yas--field 1 261 264 nil nil nil t #s(yas--exit 265 nil)) #s(yas--field 1 239 265 nil nil nil t #s(yas--exit 266 nil)) nil))) nil (26046 1117 19950 806000) 0 nil])
([nil nil ((266 . 267)) nil (26046 1117 19950 104000) 0 nil])
([nil nil ((267 . 280)) nil (26046 1117 19949 617000) 0 nil])
([nil nil ((280 . 281)) nil (26046 1117 19949 67000) 0 nil])
([nil nil ((280 . 290) (#("a" 0 1 (fontified nil)) . 280) (280 . 281) (#("array_copy" 0 10 (fontified nil)) . -280) (280 . 290) (#("a" 0 1 (fontified t)) . -280) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) 281) nil (26046 1117 19947 997000) 0 nil])
([nil nil ((290 . 291)) nil (26046 1117 19943 605000) 0 nil])
([nil nil ((apply yas--snippet-revive 291 303 #s(yas--snippet nil nil #s(yas--exit 303 nil) 9 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 303 nil) 9 nil nil nil nil)) (291 . 303) (#("borrow_mut()$0" 0 14 (fontified nil)) . 291) (291 . 305) (#("borrow_mut()" 0 12 (fontified nil)) . -291) (291 . 303)) nil (26046 1117 19942 711000) 0 nil])
([nil nil ((303 . 304)) nil (26046 1117 19941 501000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -303) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) 304) nil (26046 1117 19940 741000) 0 nil])
([nil nil ((303 . 305)) nil (26046 1117 19936 734000) 0 nil])
([nil nil ((apply yas--snippet-revive 304 314 #s(yas--snippet nil nil #s(yas--exit 314 nil) 10 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 314 nil) 10 nil nil nil nil)) (304 . 314) (#("iter_mut()$0" 0 12 (fontified nil)) . 304) (304 . 316) (#("i" 0 1 (fontified nil)) . 304) (304 . 305) (#("iter_mut()" 0 10 (fontified nil)) . -304) (304 . 314) (#("i" 0 1 (fontified t)) . -304) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) 305) nil (26046 1117 19935 372000) 0 nil])
([nil nil ((314 . 316)) nil (26046 1117 19930 238000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -314) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (#("," 0 1 (fontified t)) . -315) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) 316) nil (26046 1117 19928 819000) 0 nil])
([nil nil ((314 . 318)) nil (26046 1117 19916 892000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 324 332 nil nil nil t #s(yas--exit 333 nil))) #s(yas--exit 333 nil) 11 nil #s(yas--field 1 324 332 nil nil nil t #s(yas--exit 333 nil)) nil nil)) (315 . 326) (#("for_each(${1:f})$0" 0 18 (fontified nil)) . 315) (315 . 333) (#("for" 0 3 (fontified nil)) . 315) (315 . 318) (#("for_each(…) (as Iterator)" 0 25 (fontified nil)) . -315) (315 . 340) (#("for" 0 3 (face font-lock-keyword-face fontified t)) . -315) (undo-tree-id850 . -3) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -2) (undo-tree-id855 . -2) (undo-tree-id856 . -3) (undo-tree-id857 . -3) (undo-tree-id858 . -3) (undo-tree-id859 . -3) (undo-tree-id860 . -3) 318) nil (26046 1117 19915 71000) 0 nil])
([nil nil ((325 . 326) (#("f" 0 1 (fontified nil)) . 325) (undo-tree-id849 . -1) (324 . 325)) nil (26046 1117 19898 504000) 0 nil])
([nil nil ((325 . 326)) nil (26046 1117 19896 849000) 0 nil])
([nil nil ((327 . 332)) nil (26046 1117 19896 344000) 0 nil])
([nil nil ((apply yas--snippet-revive 315 333 #s(yas--snippet nil (#s(yas--field 1 324 332 nil nil nil t #s(yas--exit 333 nil))) #s(yas--exit 333 nil) 11 nil #s(yas--field 1 324 332 nil nil nil t #s(yas--exit 333 nil)) nil nil))) nil (26046 1117 19895 810000) 0 nil])
([nil nil ((332 . 333)) nil (26046 1117 19895 44000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . -328) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (#("x" 0 1 (fontified t)) . -329) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (#("+" 0 1 (fontified t)) . -330) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (#("+" 0 1 (fontified t)) . -331) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (#(";" 0 1 (fontified t)) . -332) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) 333) nil (26046 1117 19887 597000) 0 nil])
([nil nil ((328 . 331)) nil (26046 1117 19144 263000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -328) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (#("+" 0 1 (fontified t)) . -329) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (#("+" 0 1 (fontified t)) . -330) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) 331) nil (26046 1117 19142 229000) 0 nil])
([nil nil ((328 . 329)) nil (26046 1117 19118 595000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . -328) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) 329) nil (26046 1117 19117 173000) 0 nil])
([nil nil ((328 . 330)) nil (26046 1117 19110 279000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -328) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (#("*" 0 1 (fontified t)) . -329) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) 330) nil (26046 1117 19107 953000) 0 nil])
([nil nil ((328 . 335)) nil (26046 1117 19076 232000) 0 nil])
([nil nil ((162 . 163) (t 26046 1117 59957 650000)) nil (26046 1143 691168 2000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -162) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) 163) nil (26046 1143 691166 711000) 0 nil])
([nil nil ((#("let array: [u8; 64] = [0u8; 64];" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 9 (face font-lock-variable-name-face fontified t) 9 11 (fontified t) 11 12 (face (rainbow-delimiters-depth-2-face) fontified t) 12 14 (face font-lock-type-face fontified t) 14 18 (fontified t) 18 19 (face (rainbow-delimiters-depth-2-face) fontified t) 19 22 (fontified t) 22 23 (face (rainbow-delimiters-depth-2-face) fontified t) 23 24 (fontified t) 24 26 (face font-lock-type-face fontified t) 26 30 (fontified t) 30 31 (face (rainbow-delimiters-depth-2-face) fontified t) 31 32 (fontified t)) . 79) (undo-tree-id1013 . -32) (undo-tree-id1014 . -32) (undo-tree-id1015 . -32)) nil (26046 1143 691158 766000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 79) (undo-tree-id1012 . -1)) nil (26046 1143 691155 670000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -79)) nil (26046 1143 691154 143000) 0 nil])
([nil nil ((#("copy" 0 4 (face font-lock-variable-name-face fontified t)) . -89) (undo-tree-id1010 . -4) (undo-tree-id1011 . -4) 93) nil (26046 1143 691153 190000) 0 nil])
([nil nil ((#("_" 0 1 (face font-lock-variable-name-face fontified t)) . -88) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) 89) nil (26046 1143 691150 612000) 0 nil])
([nil nil ((#("array" 0 5 (fontified t)) . -113) (undo-tree-id999 . -5) (undo-tree-id1000 . -5) (undo-tree-id1001 . -5) (undo-tree-id1002 . -5) (undo-tree-id1003 . -5) (undo-tree-id1004 . -5) (undo-tree-id1005 . -5) 118) nil (26046 1143 691146 108000) 0 nil])
([nil nil ((113 . 115)) nil (26046 1143 691132 804000) 0 nil])
([nil nil ((114 . 121)) nil (26046 1143 691128 519000) 0 nil])
([nil nil ((126 . 130) (t 26046 1143 703292 584000)) nil (26046 1155 11985 28000) 0 nil])
([nil nil ((130 . 134)) nil (26046 1155 11984 177000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t)) . -131) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (#("e" 0 1 (fontified t)) . -132) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (#("t" 0 1 (fontified t)) . -133) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) 134) nil (26046 1155 11982 245000) 0 nil])
([nil nil ((131 . 148)) nil (26046 1155 11964 823000) 0 nil])
([nil nil ((147 . 152) (#("a" 0 1 (fontified nil)) . 147) (147 . 148) (#("array" 0 5 (fontified nil)) . -147) (147 . 152) (#("a" 0 1 (fontified t)) . -147) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) 148) nil (26046 1155 11963 252000) 0 nil])
([nil nil ((152 . 154)) nil (26046 1155 11958 716000) 0 nil])
([nil nil ((apply yas--snippet-revive 153 160 #s(yas--snippet nil nil #s(yas--exit 160 nil) 12 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 160 nil) 12 nil nil nil nil)) (153 . 160) (#("clone()$0" 0 9 (fontified nil)) . 153) (153 . 162) (#("c" 0 1 (fontified nil)) . 153) (153 . 154) (#("clone() (as Clone)" 0 18 (fontified nil)) . -153) (153 . 171) (#("c" 0 1 (fontified t)) . -153) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) 154) nil (26046 1155 11955 590000) 0 nil])
([nil nil ((160 . 161)) nil (26046 1155 11840 79000) 0 nil])
([nil nil ((446 . 447) (t 26046 1155 23293 277000)) nil (26046 1165 421094 74000) 0 nil])
([nil nil ((446 . 447)) nil (26046 1165 421093 31000) 0 nil])
([nil nil ((apply yas--snippet-revive 447 455 #s(yas--snippet nil nil #s(yas--exit 455 nil) 13 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 455 nil) 13 nil nil nil nil)) (447 . 455) (#("borrow()$0" 0 10 (fontified nil)) . 447) (447 . 457) (#("borrow()" 0 8 (fontified nil)) . -447) (447 . 455)) nil (26046 1165 421091 66000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -455) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) 456) nil (26046 1165 421086 191000) 0 nil])
([nil nil ((#("move " 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t)) . -185) (undo-tree-id1064 . -4) (undo-tree-id1065 . -5) (undo-tree-id1066 . -4) (undo-tree-id1067 . -4) (undo-tree-id1068 . -4) (undo-tree-id1069 . -4) (undo-tree-id1070 . -4) (undo-tree-id1071 . -4) (undo-tree-id1072 . -4) (undo-tree-id1073 . -5) 190 (t 26046 1165 419960 578000)) nil (26046 1174 498747 443000) 0 nil])
([nil nil ((185 . 189) (t 26046 1174 509961 135000)) nil (26046 1180 473221 341000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -187) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (#("e" 0 1 (fontified t)) . -188) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) 189) nil (26046 1180 473218 493000) 0 nil])
([nil nil ((187 . 190)) nil (26046 1180 473202 323000) 0 nil])
([nil nil ((288 . 289) (t 26046 1180 496628 168000)) nil (26046 1190 777183 587000) 0 nil])
([nil nil ((288 . 289)) nil (26046 1190 777182 625000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -288) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) 289) nil (26046 1190 777180 987000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -288) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . 1) (undo-tree-id1088 . -1) 289) nil (26046 1190 777171 960000) 0 nil])
([nil nil ((287 . 288) (t 26046 1190 819962 136000)) nil (26046 1239 507091 984000) 0 nil])
([nil nil ((287 . 288)) nil (26046 1239 507090 967000) 0 nil])
([nil nil ((288 . 290)) nil (26046 1239 507090 243000) 0 nil])
([nil nil ((59 . 71) (apply yas--snippet-revive 288 295 #s(yas--snippet nil nil #s(yas--exit 295 nil) 14 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 295 nil) 14 nil nil nil nil)) (288 . 295) (#("deref()$0" 0 9 (fontified nil)) . 288) (288 . 297) (#("de" 0 2 (fontified nil)) . 288) (288 . 290) (#("deref() (use std::ops::Deref)" 0 29 (fontified nil)) . -288) (288 . 317) (#("de" 0 2 (fontified t)) . -288) (undo-tree-id1108 . -2) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -2) (undo-tree-id1112 . -2) (undo-tree-id1113 . -2) (undo-tree-id1114 . -2) 290) nil (26046 1239 507088 38000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -307) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) 308) nil (26046 1239 507078 186000) 0 nil])
([nil nil ((#("deref()" 0 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-5-face) fontified t) 6 7 (face (rainbow-delimiters-depth-5-face) fontified t)) . -300) (undo-tree-id1154 . -7) (undo-tree-id1155 . -7) (undo-tree-id1156 . -7) (undo-tree-id1157 . -7) (undo-tree-id1158 . -7) (undo-tree-id1159 . -7) (undo-tree-id1160 . -7) (undo-tree-id1161 . -7) (undo-tree-id1162 . -7) (undo-tree-id1163 . -7) (undo-tree-id1164 . -7) (undo-tree-id1165 . -7) (undo-tree-id1166 . -7) (undo-tree-id1167 . -7) (undo-tree-id1168 . -7) (undo-tree-id1169 . -7) (undo-tree-id1170 . -7) (undo-tree-id1171 . -7) (undo-tree-id1172 . -7) (undo-tree-id1173 . -7) (undo-tree-id1174 . -7) (undo-tree-id1175 . -7) (undo-tree-id1176 . -7) (undo-tree-id1177 . -7) 307 (t 26046 1239 549965 106000)) nil (26046 1246 216350 175000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -299) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) 300) nil (26046 1246 216331 108000) 0 nil])
([nil nil ((#("Deref" 0 5 (face font-lock-type-face fontified t)) . -66) (undo-tree-id1196 . -5) (undo-tree-id1197 . -5) 71 (t 26046 1246 226632 177000)) nil (26046 1252 749331 11000) 0 nil])
([nil nil ((#("ops::" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t)) . -61) (undo-tree-id1192 . -5) (undo-tree-id1193 . -5) (undo-tree-id1194 . -5) (undo-tree-id1195 . -5) 66) nil (26046 1252 749327 358000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -59) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (#(" " 0 1 (fontified t)) . -60) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) 61) nil (26046 1252 749319 508000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -122) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -123) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) 124 (t 26046 1252 759965 909000)) nil (26046 1396 770605 614000) 0 nil])
([nil nil ((#("new(" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-3-face) fontified t)) . -109) (undo-tree-id1216 . -4) (undo-tree-id1217 . -4) 113) nil (26046 1396 770588 438000) 0 nil])
([nil nil ((#("RefCell::" 0 7 (face font-lock-type-face fontified t) 7 9 (fontified t)) . -100) (undo-tree-id1212 . -9) (undo-tree-id1213 . -9) (undo-tree-id1214 . -9) (undo-tree-id1215 . -9) 109) nil (26046 1396 770585 834000) 0 nil])
([nil nil ((#("new(" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-2-face) fontified t)) . -96) (undo-tree-id1206 . -4) (undo-tree-id1207 . -4) (undo-tree-id1208 . -4) (undo-tree-id1209 . -4) (undo-tree-id1210 . -4) (undo-tree-id1211 . -4) 100) nil (26046 1396 771561 633000) 0 nil])
([nil nil ((#("Arc::" 0 3 (face font-lock-type-face fontified t) 3 5 (fontified t)) . -91) (undo-tree-id1317 . -5) (undo-tree-id1318 . -5) (undo-tree-id1319 . -5) (undo-tree-id1320 . -5) (undo-tree-id1321 . -5) (undo-tree-id1322 . -5) (undo-tree-id1323 . -5) (undo-tree-id1324 . -5) (undo-tree-id1325 . -5) (undo-tree-id1326 . -5) (undo-tree-id1327 . -5) (undo-tree-id1328 . -5) (undo-tree-id1329 . -5) (undo-tree-id1330 . -5) (undo-tree-id1331 . -5) (undo-tree-id1332 . -5) (undo-tree-id1333 . -5) (undo-tree-id1334 . -5) 96) nil (26046 1414 831635 133000) 0 nil] [nil nil ((#("Arc::" 0 3 (face font-lock-type-face fontified t) 3 5 (fontified t)) . -91) (undo-tree-id1198 . -5) (undo-tree-id1199 . -5) (undo-tree-id1200 . -5) (undo-tree-id1201 . -5) (undo-tree-id1202 . -5) (undo-tree-id1203 . -5) (undo-tree-id1204 . -5) (undo-tree-id1205 . -5) 96) ((91 . 96)) (26046 1396 770572 520000) 0 nil])
([nil nil ((#("clone()" 0 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-2-face) fontified t) 6 7 (face (rainbow-delimiters-depth-2-face) fontified t)) . -129) (undo-tree-id1307 . -7) (undo-tree-id1308 . -7) (undo-tree-id1309 . -5) (undo-tree-id1310 . -7) (undo-tree-id1311 . -7) (undo-tree-id1312 . -7) (undo-tree-id1313 . -7) (undo-tree-id1314 . -7) (undo-tree-id1315 . -7) (undo-tree-id1316 . -7) 136) nil (26046 1414 831458 865000) 0 nil])
nil
([nil nil ((#("." 0 1 (fontified t)) . -128) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) 129) nil (26046 1414 831451 165000) 0 nil])
([nil nil ((#("array" 0 5 (fontified t)) . -123) (undo-tree-id1260 . -5) (undo-tree-id1261 . -5) (undo-tree-id1262 . -2) (undo-tree-id1263 . -5) (undo-tree-id1264 . -5) (undo-tree-id1265 . -5) (undo-tree-id1266 . -5) (undo-tree-id1267 . -5) (undo-tree-id1268 . -5) (undo-tree-id1269 . -5) (undo-tree-id1270 . -5) (undo-tree-id1271 . -5) (undo-tree-id1272 . -5) (undo-tree-id1273 . -5) (undo-tree-id1274 . -5) (undo-tree-id1275 . -5) (undo-tree-id1276 . -5) (undo-tree-id1277 . -5) (undo-tree-id1278 . -5) (undo-tree-id1279 . -5) (undo-tree-id1280 . -5) (undo-tree-id1281 . -5) (undo-tree-id1282 . -5) (undo-tree-id1283 . -5) (undo-tree-id1284 . -5) (undo-tree-id1285 . -5) (undo-tree-id1286 . -5) (undo-tree-id1287 . -5) (undo-tree-id1288 . -5) 128) nil (26046 1414 831436 818000) 0 nil])
([nil nil ((123 . 129)) nil (26046 1414 831416 788000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -128) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) 129) nil (26046 1414 831415 386000) 0 nil])
([nil nil ((128 . 130)) nil (26046 1414 831406 725000) 0 nil])
([nil nil ((128 . 133) (#("ar" 0 2 (fontified nil)) . 128) (128 . 130) (#("array" 0 5 (fontified nil)) . -128) (128 . 133) (#("ar" 0 2 (fontified t)) . -128) (undo-tree-id1244 . -2) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -2) (undo-tree-id1249 . -2) 130) nil (26046 1414 831402 840000) 0 nil])
([nil nil ((120 . 121) (t 26046 1414 833309 106000)) nil (26046 1435 511467 867000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -120) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) 121) nil (26046 1435 511466 603000) 0 nil])
([nil nil ((120 . 124)) nil (26046 1435 511459 312000) 0 nil])
([nil nil ((122 . 129)) nil (26046 1435 511458 792000) 0 nil])
([nil nil ((#("const" 0 5 (face font-lock-keyword-face fontified t)) . -123) (undo-tree-id1346 . -5) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -2) (undo-tree-id1353 . -2) (undo-tree-id1354 . -2) (undo-tree-id1355 . -3) (undo-tree-id1356 . -3) (undo-tree-id1357 . -4) (undo-tree-id1358 . -4) (undo-tree-id1359 . -4) (undo-tree-id1360 . -4) (undo-tree-id1361 . -5) (undo-tree-id1362 . -5) (undo-tree-id1363 . -5) 128) nil (26046 1435 511457 404000) 0 nil])
([nil nil ((123 . 127)) nil (26046 1435 511444 489000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -126) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) 127) nil (26046 1435 511442 182000) 0 nil])
([nil nil ((128 . 130)) nil (26046 1435 511424 165000) 0 nil])
([nil nil ((#("borrow()" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-4-face) fontified t) 7 8 (face (rainbow-delimiters-depth-4-face) fontified t)) . -431) (undo-tree-id1374 . -8) (undo-tree-id1375 . -6) (undo-tree-id1376 . -7) (undo-tree-id1377 . -8) 439 (t 26046 1435 523310 361000)) nil (26046 1440 823065 752000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -430) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) 431 (t 26046 1440 823310 683000)) nil (26046 1442 712532 86000) 0 nil])
([nil nil ((#("array_copy.borrow_mut().iter_mut().for_each(|x| *x += 1)" 0 10 (fontified t) 10 11 (fontified t) 11 21 (fontified t) 21 22 (face (rainbow-delimiters-depth-5-face) fontified t) 22 23 (face (rainbow-delimiters-depth-5-face) fontified t) 23 24 (fontified t) 24 32 (fontified t) 32 33 (face (rainbow-delimiters-depth-5-face) fontified t) 33 34 (face (rainbow-delimiters-depth-5-face) fontified t) 34 35 (fontified t) 35 43 (fontified t) 43 44 (face (rainbow-delimiters-depth-5-face) fontified t) 44 55 (fontified t) 55 56 (face (rainbow-delimiters-depth-5-face) fontified t)) . 261) (undo-tree-id1648 . -44) (undo-tree-id1649 . -5) (undo-tree-id1650 . -10) (undo-tree-id1651 . -19) (undo-tree-id1652 . -19) (undo-tree-id1653 . -19) (undo-tree-id1654 . -19) (undo-tree-id1655 . -19) (undo-tree-id1656 . -19) (undo-tree-id1657 . -56) (t 26046 1442 723310 797000)) nil (26046 1520 338096 666000) 0 nil])
([nil nil ((261 . 264)) nil (26046 1520 338089 723000) 0 nil])
([nil nil ((apply yas--snippet-revive 261 267 #s(yas--snippet nil nil nil 15 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 15 nil nil nil nil)) (261 . 267) (#("unsafe" 0 6 (fontified nil)) . 261) (261 . 267) (#("uns" 0 3 (fontified nil)) . 261) (261 . 264) (#("unsafe" 0 6 (fontified nil)) . -261) (261 . 267) (#("uns" 0 3 (fontified t)) . -261) (undo-tree-id1635 . -3) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -2) (undo-tree-id1640 . -2) (undo-tree-id1641 . -2) (undo-tree-id1642 . -2) (undo-tree-id1643 . -3) (undo-tree-id1644 . -3) (undo-tree-id1645 . -3) (undo-tree-id1646 . -3) (undo-tree-id1647 . -3) 264) nil (26046 1520 338088 243000) 0 nil])
([nil nil ((267 . 268)) nil (26046 1520 338079 122000) 0 nil])
([nil nil ((268 . 270)) nil (26046 1520 338078 591000) 0 nil])
([nil nil ((271 . 283) (#("                " 0 16 (fontified nil)) . 270) (270 . 286) (#("            " 0 12 (fontified nil)) . 270) (undo-tree-id1631 . -12) (undo-tree-id1632 . -12) (undo-tree-id1633 . -12) (undo-tree-id1634 . -12) (269 . 283)) nil (26046 1520 338077 631000) 0 nil])
([nil nil ((270 . 286)) nil (26046 1520 338073 935000) 0 nil])
([nil nil ((300 . 301)) nil (26046 1520 338073 397000) 0 nil])
([nil nil ((286 . 287)) nil (26046 1520 338072 857000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -286) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) 287) nil (26046 1520 338072 155000) 0 nil])
([nil nil ((286 . 288)) nil (26046 1520 338069 766000) 0 nil])
([nil nil ((286 . 296) (#("ar" 0 2 (fontified nil)) . 286) (286 . 288) (#("array_copy" 0 10 (fontified nil)) . -286) (286 . 296) (#("ar" 0 2 (fontified t)) . -286) (undo-tree-id1621 . -2) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -2) (undo-tree-id1625 . -2) (undo-tree-id1626 . -2) (undo-tree-id1627 . -2) 288) nil (26046 1520 338068 444000) 0 nil])
([nil nil ((296 . 299)) nil (26046 1520 338059 400000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -296) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (#("d" 0 1 (fontified t)) . -297) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (#("e" 0 1 (fontified t)) . -298) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) 299) nil (26046 1520 338057 18000) 0 nil])
([nil nil ((286 . 287)) nil (26046 1520 338032 278000) 0 nil])
([nil nil ((297 . 298)) nil (26046 1520 338031 736000) 0 nil])
([nil nil ((298 . 299)) nil (26046 1520 338031 125000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -298) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) 299) nil (26046 1520 338030 144000) 0 nil])
([nil nil ((298 . 302)) nil (26046 1520 338002 478000) 0 nil])
([nil nil ((#("iter" 0 4 (fontified t)) . -298) (undo-tree-id1569 . -4) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -2) (undo-tree-id1574 . -2) (undo-tree-id1575 . -3) (undo-tree-id1576 . -3) (undo-tree-id1577 . -4) (undo-tree-id1578 . -4) (undo-tree-id1579 . -4) (undo-tree-id1580 . -4) (undo-tree-id1581 . -4) (undo-tree-id1582 . -4) (undo-tree-id1583 . -4) (undo-tree-id1584 . -4) (undo-tree-id1585 . -4) (undo-tree-id1586 . -4) (undo-tree-id1587 . -4) 302) nil (26046 1520 338001 337000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -297) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) 298) nil (26046 1520 337988 708000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . -286) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) 287) nil (26046 1520 337964 250000) 0 nil])
([nil nil ((296 . 297)) nil (26046 1520 337961 294000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -296) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) 297) nil (26046 1520 337960 330000) 0 nil])
([nil nil ((296 . 297)) nil (26046 1520 337953 982000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -296) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) 297) nil (26046 1520 337953 109000) 0 nil])
([nil nil ((296 . 297)) nil (26046 1520 337949 649000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -296) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) 297) nil (26046 1520 337948 825000) 0 nil])
([nil nil ((286 . 295)) nil (26046 1520 337942 913000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-variable-name-face fontified t)) . -294) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) 295) nil (26046 1520 337941 949000) 0 nil])
([nil nil ((308 . 309) (294 . 294) (294 . 298)) nil (26046 1520 337935 741000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -296) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (#("=" 0 1 (fontified t)) . -297) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) 298) nil (26046 1520 337933 707000) 0 nil])
([nil nil ((296 . 298)) nil (26046 1520 337916 995000) 0 nil])
([nil nil ((298 . 306)) nil (26046 1520 338447 631000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . -303) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) (#("*" 0 1 (fontified t)) . -304) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (#("*" 0 1 (fontified t)) . -305) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) 306) nil (26046 1522 330986 140000) 0 nil] [nil nil ((#("array = ********" 0 5 (face font-lock-variable-name-face fontified t) 5 16 (fontified t)) . -290) (undo-tree-id1393 . -16) (undo-tree-id1394 . -16) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -2) (undo-tree-id1398 . -2) (undo-tree-id1399 . -3) (undo-tree-id1400 . -3) (undo-tree-id1401 . -3) (undo-tree-id1402 . -3) (undo-tree-id1403 . -4) (undo-tree-id1404 . -4) (undo-tree-id1405 . -4) (undo-tree-id1406 . -4) (undo-tree-id1407 . -4) (undo-tree-id1408 . -4) (undo-tree-id1409 . -4) (undo-tree-id1410 . -4) (undo-tree-id1411 . -4) (undo-tree-id1412 . -4) (undo-tree-id1413 . -4) (undo-tree-id1414 . -4) (undo-tree-id1415 . -4) (undo-tree-id1416 . -5) (undo-tree-id1417 . -5) (undo-tree-id1418 . -6) (undo-tree-id1419 . -6) (undo-tree-id1420 . -6) (undo-tree-id1421 . -6) (undo-tree-id1422 . -6) (undo-tree-id1423 . -6) (undo-tree-id1424 . -6) (undo-tree-id1425 . -6) (undo-tree-id1426 . -6) (undo-tree-id1427 . -6) (undo-tree-id1428 . -6) (undo-tree-id1429 . -6) (undo-tree-id1430 . -6) (undo-tree-id1431 . -6) (undo-tree-id1432 . -6) (undo-tree-id1433 . -6) (undo-tree-id1434 . -6) (undo-tree-id1435 . -6) (undo-tree-id1436 . -7) (undo-tree-id1437 . -7) (undo-tree-id1438 . -8) (undo-tree-id1439 . -8) (undo-tree-id1440 . -8) (undo-tree-id1441 . -8) (undo-tree-id1442 . -8) (undo-tree-id1443 . -8) (undo-tree-id1444 . -8) (undo-tree-id1445 . -8) (undo-tree-id1446 . -8) (undo-tree-id1447 . -8) (undo-tree-id1448 . -8) (undo-tree-id1449 . -8) (undo-tree-id1450 . -8) (undo-tree-id1451 . -8) (undo-tree-id1452 . -8) (undo-tree-id1453 . -8) (undo-tree-id1454 . -8) (undo-tree-id1455 . -8) (undo-tree-id1456 . -16) (undo-tree-id1457 . -16) (undo-tree-id1458 . -16) (undo-tree-id1459 . -16) (undo-tree-id1460 . -16) (undo-tree-id1461 . -16) (undo-tree-id1462 . -16) (undo-tree-id1463 . -16) 306) ((290 . 306)) (26046 1520 337910 228000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . -299) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (#("*" 0 1 (fontified t)) . -300) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (#("*" 0 1 (fontified t)) . -301) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (#("*" 0 1 (fontified t)) . -302) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) 303) nil (26046 1522 330813 418000) 0 nil])
nil
([nil nil ((130 . 131) (t 26046 1522 343315 627000)) nil (26046 1533 496346 723000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -130) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) 131) nil (26046 1533 496344 414000) 0 nil])
([nil nil ((130 . 131)) nil (26046 1533 496328 901000) 0 nil])
([nil nil ((131 . 134)) nil (26046 1533 496325 14000) 0 nil])
([nil nil ((#("RefCell" 0 7 (face font-lock-type-face fontified t)) . -52) (undo-tree-id1923 . -7) (undo-tree-id1924 . -7) (undo-tree-id1925 . -7) (undo-tree-id1926 . -7) (undo-tree-id1927 . -7) (undo-tree-id1928 . -7) (undo-tree-id1929 . -7) (undo-tree-id1930 . -7) (undo-tree-id1931 . -7) (undo-tree-id1932 . -7) 59 (t 26046 1533 539982 978000)) nil (26046 1584 630576 240000) 0 nil])
([nil nil ((#("cell::" 0 4 (face font-lock-constant-face fontified t) 4 6 (fontified t)) . -46) (undo-tree-id1911 . -6) (undo-tree-id1912 . -6) (undo-tree-id1913 . -6) (undo-tree-id1914 . -6) (undo-tree-id1915 . -6) (undo-tree-id1916 . -6) (undo-tree-id1917 . -6) (undo-tree-id1918 . -6) (undo-tree-id1919 . -6) (undo-tree-id1920 . -6) (undo-tree-id1921 . -6) (undo-tree-id1922 . -6) 52) nil (26046 1584 630568 455000) 0 nil])
([nil nil ((#("Arc, " 0 3 (face font-lock-type-face fontified t) 3 5 (fontified t)) . -41) (undo-tree-id1897 . -5) (undo-tree-id1898 . -5) (undo-tree-id1899 . -5) (undo-tree-id1900 . -5) (undo-tree-id1901 . -5) (undo-tree-id1902 . -5) (undo-tree-id1903 . -5) (undo-tree-id1904 . -5) (undo-tree-id1905 . -5) (undo-tree-id1906 . -5) (undo-tree-id1907 . -5) (undo-tree-id1908 . -5) (undo-tree-id1909 . -5) (undo-tree-id1910 . -5) 46) nil (26046 1584 630558 854000) 0 nil])
([nil nil ((#("sync::" 0 4 (face font-lock-constant-face fontified t) 4 6 (fontified t)) . -35) (undo-tree-id1881 . -6) (undo-tree-id1882 . -6) (undo-tree-id1883 . -6) (undo-tree-id1884 . -6) (undo-tree-id1885 . -6) (undo-tree-id1886 . -6) (undo-tree-id1887 . -6) (undo-tree-id1888 . -6) (undo-tree-id1889 . -6) (undo-tree-id1890 . -6) (undo-tree-id1891 . -6) (undo-tree-id1892 . -6) (undo-tree-id1893 . -6) (undo-tree-id1894 . -6) (undo-tree-id1895 . -6) (undo-tree-id1896 . -6) 41) nil (26046 1622 654233 904000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -33) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (#(" " 0 1 (fontified t)) . -34) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) 35) nil (26046 1723 180451 556000) 0 nil] [nil nil ((#("," 0 1 (fontified t)) . -33) (undo-tree-id1958 . -1) (undo-tree-id1960 . -1) (undo-tree-id1962 . -1) (undo-tree-id1964 . -1) (undo-tree-id1966 . -1) (undo-tree-id1968 . -1) (undo-tree-id1970 . -1) (undo-tree-id1972 . -1) (#(" " 0 1 (fontified t)) . -34) (undo-tree-id1973 . -1) (undo-tree-id1975 . -1) (undo-tree-id1977 . -1) (undo-tree-id1979 . -1) (undo-tree-id1981 . -1) (undo-tree-id1983 . -1) (undo-tree-id1985 . -1) 35) ((33 . 35)) (26046 1622 248926 713000) 0 nil] [nil nil ((#("," 0 1 (fontified t)) . -33) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1850 . -1) (undo-tree-id1852 . -1) (undo-tree-id1854 . -1) (undo-tree-id1856 . -1) (undo-tree-id1858 . -1) (undo-tree-id1860 . -1) (undo-tree-id1862 . -1) (#(" " 0 1 (fontified t)) . -34) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1870 . -1) (undo-tree-id1872 . -1) (undo-tree-id1874 . -1) (undo-tree-id1876 . -1) (undo-tree-id1878 . -1) (undo-tree-id1880 . -1) 35) ((33 . 35) (t 26046 1584 673319 420000)) (26046 1589 709914 668000) 0 nil])
([nil nil ((36 . 38) (t 26046 1723 776661 183000)) nil (26046 1862 768132 889000) 0 nil] [nil nil ((#("mut" 0 3 (face font-lock-keyword-face fontified t)) . -97) (undo-tree-id2057 . -3) (undo-tree-id2058 . -3) (undo-tree-id2059 . -3) (undo-tree-id2060 . -3) (undo-tree-id2061 . -3) (undo-tree-id2062 . -3) (undo-tree-id2063 . -3) (undo-tree-id2064 . -3) (undo-tree-id2065 . -3) (undo-tree-id2066 . -3) (undo-tree-id2067 . -3) (undo-tree-id2068 . -3) (undo-tree-id2069 . -3) (undo-tree-id2070 . -3) 100 (t 26046 1659 809990 623000)) ((97 . 100)) (26046 1722 994750 453000) 0 nil] [nil nil ((#("move " 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t)) . -147) (undo-tree-id2051 . -5) (undo-tree-id2052 . -1) (undo-tree-id2053 . -2) (undo-tree-id2054 . -3) (undo-tree-id2055 . -4) (undo-tree-id2056 . -5) 152 (t 26046 1624 733321 833000)) ((147 . 152) (t 26046 1656 29990 389000)) (26046 1656 27723 620000) 0 nil])
([nil nil ((#("unsafe {" 0 6 (face rust-unsafe fontified t) 6 7 (fontified t) 7 8 (face (rainbow-delimiters-depth-5-face) fontified t)) . 239) (undo-tree-id1956 . -8)) ((239 . 247)) (26046 1621 830583 220000) 0 nil])
([nil nil ((239 . 241) (t 26046 1584 673319 420000)) ((#("

" 0 1 (fontified t) 1 2 (fontified t)) . 239) (undo-tree-id1933 . -2) (undo-tree-id1934 . -2)) (26046 1589 709588 957000) 0 nil])
([nil nil ((37 . 40)) nil (26046 1862 768132 17000) 0 nil])
([nil nil ((97 . 102)) ((#("const" 0 5 (face font-lock-keyword-face fontified t)) . 97) (undo-tree-id2071 . -5) (undo-tree-id2072 . -5) (undo-tree-id2073 . -5) (undo-tree-id2074 . -5) (undo-tree-id2075 . -5) (undo-tree-id2076 . -5) (undo-tree-id2077 . -5) (undo-tree-id2078 . -5) (undo-tree-id2079 . -5) (undo-tree-id2080 . -5) (undo-tree-id2081 . -5) (t 26046 1720 116660 959000)) (26046 1720 75769 930000) 0 nil])
nil
([nil nil ((#("
" 0 1 (fontified t)) . 239)) ((239 . 240)) (26046 1621 562257 676000) 0 nil])
nil
([nil nil ((apply yas--snippet-revive 37 44 #s(yas--snippet nil nil #s(yas--exit 44 nil) 16 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 44 nil) 16 nil nil nil nil)) (37 . 44) (#("struct $0" 0 9 (fontified nil)) . 37) (37 . 46) (#("str" 0 3 (fontified nil)) . 37) (37 . 40) (#("struct" 0 6 (fontified nil)) . -37) (37 . 43) (#("str" 0 3 (face font-lock-type-face fontified t)) . -37) (undo-tree-id2082 . -3) (undo-tree-id2083 . -1) (undo-tree-id2084 . -1) (undo-tree-id2085 . -2) (undo-tree-id2086 . -2) (undo-tree-id2087 . -3) (undo-tree-id2088 . -3) (undo-tree-id2089 . -3) (undo-tree-id2090 . -3) (undo-tree-id2091 . -3) 40) nil (26046 1862 768129 552000) 0 nil])
nil
([nil nil ((#("                " 0 16 (fontified t)) . -239)) ((239 . 255)) (26046 1621 90852 601000) 0 nil])
([nil nil ((44 . 49)) nil (26046 1862 768113 781000) 0 nil])
([nil nil ((#("};" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t) 1 2 (fontified t)) . 276)) ((276 . 278)) (26046 1620 586282 327000) 0 nil])
([nil nil ((49 . 51)) nil (26046 1862 768112 942000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 276)) ((276 . 277)) (26046 1620 324769 626000) 0 nil])
([nil nil ((50 . 57)) nil (26046 1862 768112 200000) 0 nil])
([nil nil ((#("            " 0 4 (fontified t) 4 12 (fontified t)) . -272) (undo-tree-id1935 . -4) (undo-tree-id1936 . -4) (undo-tree-id1938 . -4) (undo-tree-id1940 . -4) (undo-tree-id1942 . -4) (undo-tree-id1944 . -4) (undo-tree-id1946 . -4) (undo-tree-id1948 . -4) (undo-tree-id1950 . -4) (undo-tree-id1952 . -4) 276) ((272 . 284)) (26046 1620 112344 0) 0 nil])
([nil nil ((56 . 58)) nil (26046 1862 768110 660000) 0 nil])
([nil nil ((133 . 140)) ((#("unsafe " 0 6 (face rust-unsafe fontified t) 6 7 (fontified t)) . 133) (undo-tree-id2012 . -7) (undo-tree-id2013 . -7) (undo-tree-id2014 . -7) (undo-tree-id2015 . -7) (undo-tree-id2016 . -7) (undo-tree-id2017 . -7) (undo-tree-id2018 . -7) (undo-tree-id2019 . -7) (undo-tree-id2020 . -7) (undo-tree-id2021 . -7) (undo-tree-id2022 . -7) (undo-tree-id2023 . -7) (undo-tree-id2024 . -7) (undo-tree-id2025 . -7) (undo-tree-id2026 . -7) (undo-tree-id2027 . -7) (undo-tree-id2028 . -7)) (26046 1619 782739 845000) 0 nil])
([nil nil ((60 . 61)) nil (26046 1862 768106 800000) 0 nil])
([nil nil ((140 . 141) (t 26046 1601 446653 768000)) ((#("{" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . 140) (undo-tree-id1997 . -1) (undo-tree-id1998 . -1) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (undo-tree-id2005 . -1) (undo-tree-id2006 . -1) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (undo-tree-id2011 . -1)) (26046 1619 199371 800000) 0 nil])
([nil nil ((61 . 63) (t 26046 1862 780002 947000)) nil (26046 1880 994475 88000) 0 nil])
([nil nil ((141 . 150)) ((#("
        " 0 9 (fontified t)) . 141) (undo-tree-id1992 . -1) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1)) (26046 1618 813879 263000) 0 nil])
([nil nil ((#("u8]" 0 2 (face font-lock-type-face fontified t) 2 3 (face (rainbow-delimiters-depth-2-face) fontified t)) . -56) (undo-tree-id2111 . -3) (undo-tree-id2112 . 1) (undo-tree-id2113 . -1) (undo-tree-id2114 . -2) (undo-tree-id2115 . -3) 59) nil (26046 1880 994473 959000) 0 nil])
([nil nil ((303 . 304)) ((#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . 303) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1)) (26046 1618 390956 780000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -55) (undo-tree-id2092 . -1) (undo-tree-id2093 . -1) (undo-tree-id2094 . -1) (undo-tree-id2095 . -1) (undo-tree-id2096 . -1) (undo-tree-id2097 . -1) (undo-tree-id2098 . -1) (undo-tree-id2099 . -1) (undo-tree-id2100 . -1) (undo-tree-id2101 . -1) (undo-tree-id2102 . -1) (undo-tree-id2103 . -1) (undo-tree-id2104 . -1) (undo-tree-id2105 . -1) (undo-tree-id2106 . -1) (undo-tree-id2107 . -1) (undo-tree-id2108 . -1) (undo-tree-id2109 . -1) (undo-tree-id2110 . -1) 56) nil (26046 1880 994467 943000) 0 nil])
([nil nil ((307 . 315) (#("    " 0 4 (fontified t)) . 307) (301 . 305) (252 . 268) (#("            " 0 12 (fontified t)) . 252) (undo-tree-id1986 . -12) (undo-tree-id1987 . -12) (undo-tree-id1988 . -12) (undo-tree-id1989 . -12) (193 . 209) (#("            " 0 12 (fontified t)) . 193) (182 . 186) 124) ((#("    " 0 4 (fontified t)) . 182) (193 . 205) (#("                " 0 16 (fontified t)) . 193) (252 . 264) (#("                " 0 16 (fontified t)) . 252) (#("    " 0 4 (fontified t)) . 301) (307 . 311) (#("        " 0 8 (fontified t)) . 307) (t 26046 1610 453320 975000)) (26046 1610 441870 189000) 0 nil])
([nil nil ((55 . 56)) nil (26046 1880 994447 325000) 0 nil])
nil
([nil nil ((49 . 51)) nil (26046 1880 994445 714000) 0 nil])
([nil nil ((50 . 51)) nil (26046 1880 994441 613000) 0 nil])
([nil nil ((62 . 63) (t 26046 1881 6670 727000)) nil (26046 1919 696092 475000) 0 nil])
([nil nil ((63 . 66)) nil (26046 1919 696091 688000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -64) (undo-tree-id2193 . -1) (undo-tree-id2194 . -1) (undo-tree-id2195 . -1) (undo-tree-id2196 . -1) (undo-tree-id2197 . -1) (undo-tree-id2198 . -1) (undo-tree-id2199 . -1) (#("n" 0 1 (fontified t)) . -65) (undo-tree-id2200 . -1) (undo-tree-id2201 . -1) (undo-tree-id2202 . -1) (undo-tree-id2203 . -1) (undo-tree-id2204 . -1) 66) nil (26046 1919 696090 554000) 0 nil])
([nil nil ((64 . 66)) nil (26046 1919 696082 700000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -65) (undo-tree-id2189 . -1) (undo-tree-id2190 . -1) (undo-tree-id2191 . -1) (undo-tree-id2192 . -1) 66) nil (26046 1919 696081 786000) 0 nil])
([nil nil ((65 . 67)) nil (26046 1919 696078 379000) 0 nil])
([nil nil ((apply yas--snippet-revive 63 69 #s(yas--snippet nil nil nil 17 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 17 nil nil nil nil)) (63 . 69) (#("unsafe" 0 6 (fontified nil)) . 63) (63 . 69) (#("unsa" 0 4 (fontified nil)) . 63) (63 . 67) (#("unsafe" 0 6 (fontified nil)) . -63) (63 . 69) (#("unsa" 0 4 (fontified t)) . -63) (undo-tree-id2165 . -4) (undo-tree-id2166 . -1) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) (undo-tree-id2173 . -1) (undo-tree-id2174 . -1) (undo-tree-id2175 . -1) (undo-tree-id2176 . -2) (undo-tree-id2177 . -2) (undo-tree-id2178 . -2) (undo-tree-id2179 . -2) (undo-tree-id2180 . -2) (undo-tree-id2181 . -2) (undo-tree-id2182 . -2) (undo-tree-id2183 . -2) (undo-tree-id2184 . -2) (undo-tree-id2185 . -3) (undo-tree-id2186 . -3) (undo-tree-id2187 . -4) (undo-tree-id2188 . -4) 67) nil (26046 1919 696076 443000) 0 nil])
([nil nil ((69 . 72)) nil (26046 1919 696059 827000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 75 95 nil nil nil t #s(yas--exit 95 nil))) #s(yas--exit 95 nil) 18 nil #s(yas--field 1 75 95 nil nil nil t #s(yas--exit 95 nil)) nil nil)) (70 . 84) (#("impl $1 {
    $0
}" 0 18 (fontified nil)) . 70) (70 . 88) (#("im" 0 2 (fontified nil)) . 70) (70 . 72) (#("impl" 0 4 (fontified nil)) . -70) (70 . 74) (#("im" 0 2 (fontified t)) . -70) (undo-tree-id2157 . -2) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (undo-tree-id2161 . -2) (undo-tree-id2162 . -2) (undo-tree-id2163 . -2) (undo-tree-id2164 . -2) 72) nil (26046 1919 696058 572000) 0 nil])
([nil nil ((75 . 76)) nil (26046 1919 696051 642000) 0 nil])
([nil nil ((76 . 77)) nil (26046 1919 696051 86000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -76) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) 77) nil (26046 1919 696050 273000) 0 nil])
([nil nil ((76 . 79)) nil (26046 1919 696047 89000) 0 nil])
([nil nil ((75 . 79) (#("send" 0 4 (fontified nil)) . 75) (undo-tree-id2130 . -4) (75 . 79) (#("Send" 0 4 (fontified nil)) . -75) (undo-tree-id2131 . -4) (75 . 79) (#("send" 0 4 (fontified t)) . -75) (undo-tree-id2132 . -4) (undo-tree-id2133 . -4) (undo-tree-id2134 . -1) (undo-tree-id2135 . -1) (undo-tree-id2136 . -1) (undo-tree-id2137 . -1) (undo-tree-id2138 . -1) (undo-tree-id2139 . -1) (undo-tree-id2140 . -1) (undo-tree-id2141 . -1) (undo-tree-id2142 . -1) (undo-tree-id2143 . -2) (undo-tree-id2144 . -2) (undo-tree-id2145 . -3) (undo-tree-id2146 . -3) (undo-tree-id2147 . -4) (undo-tree-id2148 . -4) (undo-tree-id2149 . -4) (undo-tree-id2150 . -4) (undo-tree-id2151 . -4) (undo-tree-id2152 . -4) 79) nil (26046 1919 696045 255000) 0 nil])
([nil nil ((79 . 85)) nil (26046 1919 696028 916000) 0 nil])
([nil nil ((apply yas--snippet-revive 84 91 #s(yas--snippet nil nil #s(yas--exit 90 nil) 19 nil nil #s(yas--field 1 75 95 nil nil nil t #s(yas--exit 95 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 90 nil) 19 nil nil #s(yas--field 1 75 95 nil nil nil t #s(yas--exit 95 nil)) nil)) (84 . 91) (#("MyBox<$0>" 0 9 (fontified nil)) . 84) (undo-tree-id2120 . -9) (84 . 93) (#("M" 0 1 (fontified nil)) . 84) (undo-tree-id2121 . -1) (84 . 85) (#("MyBox<…>" 0 8 (fontified nil)) . -84) (undo-tree-id2122 . -8) (84 . 92) (#("M" 0 1 (face font-lock-type-face fontified t)) . -84) (undo-tree-id2123 . -1) (undo-tree-id2124 . -1) (undo-tree-id2125 . -1) (undo-tree-id2126 . -1) (undo-tree-id2127 . -1) (undo-tree-id2128 . -1) (undo-tree-id2129 . -1) 85) nil (26046 1919 696027 121000) 0 nil])
([nil nil ((#(" {
    
}" 0 1 (fontified t) 1 2 (face (rainbow-delimiters-depth-1-face) fontified t) 2 3 (fontified t) 3 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-1-face) fontified t)) . 91) (undo-tree-id2116 . -7) (undo-tree-id2117 . -9) (undo-tree-id2118 . -9) (undo-tree-id2119 . -9)) nil (26046 1919 696017 341000) 0 nil])
([nil nil ((91 . 92)) nil (26046 1919 696007 447000) 0 nil])
([nil nil ((90 . 91)) nil (26046 1919 696003 713000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -92) (undo-tree-id2205 . -1) (undo-tree-id2206 . -1) (undo-tree-id2207 . -1) (undo-tree-id2208 . -1) (undo-tree-id2209 . -1) (undo-tree-id2210 . -1) (undo-tree-id2211 . -1) (undo-tree-id2212 . -1) (undo-tree-id2213 . -1) (undo-tree-id2214 . -1) (undo-tree-id2215 . -1) (undo-tree-id2216 . -1) (undo-tree-id2217 . -1) (undo-tree-id2218 . -1) (undo-tree-id2219 . -1) (undo-tree-id2220 . -1) (undo-tree-id2221 . -1) (undo-tree-id2222 . -1) (undo-tree-id2223 . -1) (undo-tree-id2224 . -1) (undo-tree-id2225 . -1) (undo-tree-id2226 . -1) (undo-tree-id2227 . -1) (undo-tree-id2228 . -1) (undo-tree-id2229 . -1) 93 (t 26046 1919 740006 410000)) nil (26046 1925 89015 517000) 0 nil])
([nil nil ((92 . 95)) nil (26046 1925 88989 560000) 0 nil])
([nil nil ((apply yas--snippet-revive 70 95 #s(yas--snippet nil (#s(yas--field 1 75 95 nil nil nil t #s(yas--exit 95 nil))) #s(yas--exit 95 nil) 18 nil #s(yas--field 1 75 95 nil nil nil t #s(yas--exit 95 nil)) nil nil))) nil (26046 1931 143885 98000) 0 nil])
([nil nil ((74 . 76) (t 26046 1925 130006 738000)) nil (26046 1931 143883 414000) 0 nil])
([nil nil ((75 . 76)) nil (26046 1931 143878 699000) 0 nil])
([nil nil ((98 . 99) (t 26046 1931 156673 771000)) nil (26046 1939 178671 710000) 0 nil])
([nil nil ((nil rear-nonsticky nil 133 . 134) (nil fontified nil 133 . 134) (nil fontified nil 132 . 133) (nil fontified nil 131 . 132) (nil fontified nil 130 . 131) (nil fontified nil 129 . 130) (nil fontified nil 128 . 129) (nil fontified nil 123 . 128) (nil fontified nil 122 . 123) (nil fontified nil 119 . 122) (nil fontified nil 118 . 119) (nil fontified nil 114 . 118) (nil fontified nil 113 . 114) (nil fontified nil 112 . 113) (nil fontified nil 111 . 112) (nil fontified nil 110 . 111) (nil fontified nil 106 . 110) (nil fontified nil 105 . 106) (nil fontified nil 99 . 105) (99 . 134)) nil (26046 1939 178670 333000) 0 nil])
([nil nil ((#("Send" 0 4 (face font-lock-type-face fontified t)) . -114) (undo-tree-id2239 . -4) (undo-tree-id2240 . -4) (undo-tree-id2241 . -4) (undo-tree-id2242 . -4) (undo-tree-id2243 . -4) (undo-tree-id2244 . -4) (undo-tree-id2245 . -4) (undo-tree-id2246 . -4) 118) nil (26046 1939 178666 856000) 0 nil])
([nil nil ((114 . 116)) nil (26046 1939 178659 631000) 0 nil])
([nil nil ((114 . 118) (#("Sy" 0 2 (fontified nil)) . 114) (114 . 116) (#("Sync" 0 4 (fontified nil)) . -114) (114 . 118) (#("Sy" 0 2 (face font-lock-type-face fontified t)) . -114) (undo-tree-id2230 . -2) (undo-tree-id2231 . -1) (undo-tree-id2232 . -1) (undo-tree-id2233 . -1) (undo-tree-id2234 . -2) (undo-tree-id2235 . -2) (undo-tree-id2236 . -2) (undo-tree-id2237 . -2) (undo-tree-id2238 . -2) 116) nil (26046 1939 178655 533000) 0 nil])
([nil nil ((#("array" 0 5 (fontified t)) . -217) (undo-tree-id2328 . -5) (undo-tree-id2329 . -5) 222 (t 26046 1939 190007 591000)) nil (26046 2119 419567 392000) 0 nil])
([nil nil ((#("mut " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -213) (undo-tree-id2326 . -4) (undo-tree-id2327 . -4) 217) nil (26046 2119 419505 996000) 0 nil])
([nil nil ((#("&" 0 1 (fontified t)) . -212) (undo-tree-id2324 . -1) (undo-tree-id2325 . -1) 213) nil (26046 2119 419503 717000) 0 nil])
([nil nil ((135 . 136)) nil (26046 2119 419501 740000) 0 nil])
([nil nil ((136 . 138)) nil (26046 2119 419501 211000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 141 141 nil nil nil nil #s(yas--exit 148 nil))) #s(yas--exit 148 nil) 20 nil #s(yas--field 1 141 141 nil nil nil nil #s(yas--exit 148 nil)) nil nil)) (136 . 150) (#("impl $1 {
    $0
}" 0 18 (fontified nil)) . 136) (136 . 154) (#("im" 0 2 (fontified nil)) . 136) (136 . 138) (#("impl" 0 4 (fontified nil)) . -136) (136 . 140) (#("im" 0 2 (fontified t)) . -136) (undo-tree-id2323 . -2) 138) nil (26046 2119 419500 126000) 0 nil])
([nil nil ((apply yas--snippet-revive 136 150 #s(yas--snippet nil (#s(yas--field 1 141 141 nil nil nil nil #s(yas--exit 148 nil))) #s(yas--exit 148 nil) 20 nil #s(yas--field 1 141 141 nil nil nil nil #s(yas--exit 148 nil)) nil nil))) nil (26046 2119 419497 597000) 0 nil])
([nil nil ((140 . 142)) nil (26046 2119 419497 22000) 0 nil])
([nil nil ((141 . 142)) nil (26046 2119 419496 517000) 0 nil])
([nil nil ((#("D" 0 1 (face font-lock-type-face fontified t)) . -141) (undo-tree-id2322 . -1) 142) nil (26046 2119 419495 860000) 0 nil])
([nil nil ((141 . 142)) nil (26046 2119 419494 567000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -141) (undo-tree-id2321 . -1) 142) nil (26046 2119 419493 903000) 0 nil])
([nil nil ((141 . 142)) nil (26046 2119 419492 628000) 0 nil])
([nil nil ((144 . 145)) nil (26046 2119 419492 65000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -144) (undo-tree-id2320 . -1) 145) nil (26046 2119 419491 431000) 0 nil])
([nil nil ((144 . 149)) nil (26046 2119 419490 152000) 0 nil])
([nil nil ((#("f" 0 1 (face font-lock-type-face fontified t)) . -146) (undo-tree-id2317 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -147) (undo-tree-id2318 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -148) (undo-tree-id2319 . -1) 149) nil (26046 2119 419489 376000) 0 nil])
([nil nil ((146 . 147)) nil (26046 2119 419486 761000) 0 nil])
([nil nil ((147 . 148)) nil (26046 2119 419486 251000) 0 nil])
([nil nil ((#("f" 0 1 (face font-lock-type-face fontified t)) . -146) (undo-tree-id2315 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -147) (undo-tree-id2316 . -1) 148) nil (26046 2119 419485 493000) 0 nil])
([nil nil ((146 . 147)) nil (26046 2119 419483 429000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-type-face fontified t)) . -146) (undo-tree-id2314 . -1) 147) nil (26046 2119 419482 758000) 0 nil])
([nil nil ((146 . 149)) nil (26046 2119 419481 262000) 0 nil])
([nil nil ((#("D" 0 1 (face font-lock-type-face fontified t)) . -144) (undo-tree-id2309 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -145) (undo-tree-id2310 . -1) (#("R" 0 1 (face font-lock-type-face fontified t)) . -146) (undo-tree-id2311 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -147) (undo-tree-id2312 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -148) (undo-tree-id2313 . -1) 149) nil (26046 2119 419480 117000) 0 nil])
([nil nil ((144 . 149)) nil (26046 2119 419469 925000) 0 nil])
([nil nil ((#("Deref" 0 5 (face font-lock-type-face fontified t)) . -144) (undo-tree-id2308 . -5) 149) nil (26046 2119 419469 280000) 0 nil])
([nil nil ((144 . 146)) nil (26046 2119 419467 953000) 0 nil])
([nil nil ((146 . 147)) nil (26046 2119 419467 386000) 0 nil])
([nil nil ((#("D" 0 1 (face font-lock-type-face fontified t)) . -144) (undo-tree-id2305 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -145) (undo-tree-id2306 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -146) (undo-tree-id2307 . -1) 147) nil (26046 2119 419466 496000) 0 nil])
([nil nil ((144 . 147)) nil (26046 2119 419463 723000) 0 nil])
([nil nil ((#("def" 0 3 (fontified t)) . -144) (undo-tree-id2304 . -3) 147) nil (26046 2119 419463 38000) 0 nil])
([nil nil ((144 . 149)) nil (26046 2119 419461 704000) 0 nil])
([nil nil ((#("Deref" 0 5 (face font-lock-type-face fontified t)) . -144) (undo-tree-id2303 . -5) 149) nil (26046 2119 419460 957000) 0 nil])
([nil nil ((144 . 155)) nil (26046 2119 419459 653000) 0 nil])
([nil nil ((apply yas--snippet-revive 154 161 #s(yas--snippet nil nil #s(yas--exit 160 nil) 21 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 160 nil) 21 nil nil nil nil)) (154 . 161) (#("MyBox<$0>" 0 9 (fontified nil)) . 154) (154 . 163) (#("M" 0 1 (fontified nil)) . 154) (154 . 155) (#("MyBox<…>" 0 8 (fontified nil)) . -154) (154 . 162) (#("M" 0 1 (face font-lock-type-face fontified t)) . -154) (undo-tree-id2302 . -1) 155) nil (26046 2119 419458 389000) 0 nil])
([nil nil ((160 . 161)) nil (26046 2119 419456 31000) 0 nil])
([nil nil ((160 . 161) (#("T" 0 1 (fontified nil)) . 160) (160 . 161) (#("T" 0 1 (face font-lock-type-face fontified t)) . -160) (undo-tree-id2301 . -1) 161) nil (26046 2119 419455 263000) 0 nil])
([nil nil ((169 . 173)) nil (26046 2119 419453 540000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -171) (undo-tree-id2290 . -1) (undo-tree-id2291 . -1) (undo-tree-id2292 . -1) (undo-tree-id2293 . -1) (undo-tree-id2294 . -1) (undo-tree-id2295 . -1) (undo-tree-id2296 . -1) (#("e" 0 1 (fontified t)) . -172) (undo-tree-id2297 . -1) (undo-tree-id2298 . -1) (undo-tree-id2299 . -1) (undo-tree-id2300 . -1) 173) nil (26046 2119 419452 428000) 0 nil])
([nil nil ((171 . 180)) nil (26046 2119 419444 36000) 0 nil])
([nil nil ((180 . 185)) nil (26046 2119 419443 459000) 0 nil])
([nil nil ((187 . 191) (#("    " 0 4 (fontified nil)) . 186) (undo-tree-id2286 . -4) (undo-tree-id2287 . -4) (undo-tree-id2288 . -4) (undo-tree-id2289 . -4) (185 . 191)) nil (26046 2119 419442 760000) 0 nil])
([nil nil ((191 . 196)) nil (26046 2119 419439 399000) 0 nil])
([nil nil ((196 . 199)) nil (26046 2119 419438 830000) 0 nil])
([nil nil ((199 . 201)) nil (26046 2119 419438 278000) 0 nil])
([nil nil ((200 . 205)) nil (26046 2119 419437 674000) 0 nil])
([nil nil ((206 . 208)) nil (26046 2119 419437 136000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -207) (undo-tree-id2283 . -1) (undo-tree-id2284 . -1) (undo-tree-id2285 . -1) 208) nil (26046 2119 419436 264000) 0 nil])
([nil nil ((207 . 211)) nil (26046 2119 419433 712000) 0 nil])
([nil nil ((#("T" 0 1 (face font-lock-type-face fontified t)) . -210) (undo-tree-id2275 . -1) (undo-tree-id2276 . -1) (undo-tree-id2277 . -1) (undo-tree-id2278 . -1) (undo-tree-id2279 . -1) (undo-tree-id2280 . -1) (undo-tree-id2281 . -1) (undo-tree-id2282 . -1) 211) nil (26046 2119 419432 767000) 0 nil])
([nil nil ((210 . 212)) nil (26046 2119 419427 289000) 0 nil])
([nil nil ((212 . 213)) nil (26046 2119 419426 741000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -211) (undo-tree-id2265 . -1) (undo-tree-id2266 . -1) (undo-tree-id2267 . -1) (undo-tree-id2268 . -1) (undo-tree-id2269 . -1) (undo-tree-id2270 . -1) (undo-tree-id2271 . -1) (#("e" 0 1 (fontified t)) . -212) (undo-tree-id2272 . -1) (undo-tree-id2273 . -1) (undo-tree-id2274 . -1) 213) nil (26046 2119 419425 721000) 0 nil])
([nil nil ((211 . 213)) nil (26046 2119 419418 289000) 0 nil])
([nil nil ((211 . 215) (#("Se" 0 2 (fontified nil)) . 211) (211 . 213) (#("Self" 0 4 (fontified nil)) . -211) (211 . 215) (#("Se" 0 2 (face font-lock-type-face fontified t)) . -211) (undo-tree-id2259 . -2) (undo-tree-id2260 . -1) (undo-tree-id2261 . -1) (undo-tree-id2262 . -2) (undo-tree-id2263 . -2) (undo-tree-id2264 . -2) 213) nil (26046 2119 419417 166000) 0 nil])
([nil nil ((215 . 217)) nil (26046 2119 419411 376000) 0 nil])
([nil nil ((217 . 226)) nil (26046 2119 419410 817000) 0 nil])
([nil nil ((227 . 231) (#("        " 0 8 (fontified nil)) . 226) (226 . 234) (#("    " 0 4 (fontified nil)) . 226) (undo-tree-id2255 . -4) (undo-tree-id2256 . -4) (undo-tree-id2257 . -4) (undo-tree-id2258 . -4) (225 . 231)) nil (26046 2119 419409 913000) 0 nil])
([nil nil ((226 . 234)) nil (26046 2119 419406 73000) 0 nil])
([nil nil ((234 . 236)) nil (26046 2119 419405 469000) 0 nil])
([nil nil ((235 . 239) (#("s" 0 1 (fontified nil)) . 235) (235 . 236) (#("self" 0 4 (fontified nil)) . -235) (235 . 239) (#("s" 0 1 (fontified t)) . -235) (undo-tree-id2250 . -1) (undo-tree-id2251 . -1) (undo-tree-id2252 . -1) (undo-tree-id2253 . -1) (undo-tree-id2254 . -1) 236) nil (26046 2119 419404 322000) 0 nil])
([nil nil ((239 . 240)) nil (26046 2119 419399 175000) 0 nil])
([nil nil ((240 . 241) (#("0" 0 1 (fontified nil)) . -240) (240 . 241)) nil (26046 2119 419398 245000) 0 nil])
([nil nil ((241 . 242)) nil (26046 2119 419396 605000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -241) (undo-tree-id2247 . -1) (undo-tree-id2248 . -1) (undo-tree-id2249 . -1) 242) nil (26046 2119 419392 519000) 0 nil])
([nil nil ((36 . 51) (t 26046 2119 430018 518000)) nil (26046 2138 637198 473000) 0 nil])
([nil nil ((50 . 55) (#("D" 0 1 (fontified nil)) . 50) (50 . 51) (#("Deref (alias *, &*)" 0 19 (fontified nil)) . -50) (50 . 69) (#("D" 0 1 (face font-lock-type-face fontified t)) . -50) (undo-tree-id2330 . -1) (undo-tree-id2331 . -1) (undo-tree-id2332 . -1) (undo-tree-id2333 . -1) 51) nil (26046 2138 637195 209000) 0 nil])
([nil nil ((55 . 56)) nil (26046 2138 637008 544000) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . -230) (undo-tree-id2348 . -1) (undo-tree-id2349 . -1) (undo-tree-id2350 . -1) (undo-tree-id2351 . -1) (undo-tree-id2352 . -1) (undo-tree-id2353 . -1) 231 (t 26046 2138 640019 686000)) nil (26046 2156 155357 215000) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . -253) (undo-tree-id2334 . -1) (undo-tree-id2335 . -1) (undo-tree-id2336 . -1) (undo-tree-id2337 . -1) (undo-tree-id2338 . -1) (undo-tree-id2339 . -1) (undo-tree-id2340 . -1) (undo-tree-id2341 . -1) (undo-tree-id2342 . -1) (undo-tree-id2343 . -1) (undo-tree-id2344 . -1) (undo-tree-id2345 . -1) (undo-tree-id2346 . -1) (undo-tree-id2347 . -1) 254) nil (26046 2156 155347 587000) 0 nil])
([nil nil ((253 . 254)) nil (26046 2156 155326 376000) 0 nil])
([nil nil ((230 . 231) (t 26046 2156 196687 423000)) nil (26046 2164 870098 217000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . -254) (undo-tree-id2354 . -1) (undo-tree-id2355 . -1) (undo-tree-id2356 . -1) (undo-tree-id2357 . -1) (undo-tree-id2358 . -1) (undo-tree-id2359 . -1) (undo-tree-id2360 . -1) 255 (t 26046 2164 883354 618000)) nil (26046 2168 485499 35000) 0 nil])
([nil nil ((260 . 261) (t 26046 2168 500021 503000)) nil (26046 2175 303240 468000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -260) (undo-tree-id2361 . -1) (undo-tree-id2362 . -1) (undo-tree-id2363 . -1) (undo-tree-id2364 . -1) (undo-tree-id2365 . -1) (undo-tree-id2366 . -1) (undo-tree-id2367 . -1) (undo-tree-id2368 . -1) (undo-tree-id2369 . -1) (undo-tree-id2370 . -1) (undo-tree-id2371 . -1) 261) nil (26046 2175 303237 851000) 0 nil])
([nil nil ((254 . 255)) nil (26046 2175 303219 742000) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . -254) (undo-tree-id2372 . -1) (undo-tree-id2373 . -1) (undo-tree-id2374 . -1) (undo-tree-id2375 . -1) (undo-tree-id2376 . -1) (undo-tree-id2377 . -1) (undo-tree-id2378 . -1) (undo-tree-id2379 . -1) (undo-tree-id2380 . -1) (undo-tree-id2381 . -1) (undo-tree-id2382 . -1) (undo-tree-id2383 . -1) (undo-tree-id2384 . -1) (undo-tree-id2385 . -1) 255 (t 26046 2175 306688 577000)) nil (26046 2178 265305 561000) 0 nil])
([nil nil ((254 . 255)) nil (26046 2178 265285 682000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . -254) (undo-tree-id2386 . -1) (undo-tree-id2387 . -1) (undo-tree-id2388 . -1) (undo-tree-id2389 . -1) (undo-tree-id2390 . -1) (undo-tree-id2391 . -1) (undo-tree-id2392 . -1) (undo-tree-id2393 . -1) (undo-tree-id2394 . -1) (undo-tree-id2395 . -1) (undo-tree-id2396 . -1) (undo-tree-id2397 . -1) (undo-tree-id2398 . -1) (undo-tree-id2399 . -1) 255 (t 26046 2178 306688 763000)) nil (26046 2185 776909 185000) 0 nil])
([nil nil ((203 . 204) (t 26046 2185 790022 550000)) nil (26046 2233 597109 881000) 0 nil])
([nil nil ((204 . 208) (t 26046 2233 610025 448000)) nil (26046 2241 451101 546000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -206) (undo-tree-id2400 . -1) (undo-tree-id2401 . -1) (undo-tree-id2402 . -1) (undo-tree-id2403 . -1) (undo-tree-id2404 . -1) (undo-tree-id2405 . -1) (undo-tree-id2406 . -1) (undo-tree-id2407 . -1) (undo-tree-id2408 . -1) (undo-tree-id2409 . -1) (undo-tree-id2410 . -1) (undo-tree-id2411 . -1) (undo-tree-id2412 . -1) (undo-tree-id2413 . -1) (undo-tree-id2414 . -1) (undo-tree-id2415 . -1) (undo-tree-id2416 . -1) (undo-tree-id2417 . -1) (undo-tree-id2418 . -1) (#("t" 0 1 (fontified t)) . -207) (undo-tree-id2419 . -1) (undo-tree-id2420 . -1) (undo-tree-id2421 . -1) (undo-tree-id2422 . -1) (undo-tree-id2423 . -1) (undo-tree-id2424 . -1) (undo-tree-id2425 . -1) (undo-tree-id2426 . -1) (undo-tree-id2427 . -1) (undo-tree-id2428 . -1) 208) nil (26046 2241 451098 153000) 0 nil])
([nil nil ((206 . 209)) nil (26046 2241 451068 13000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -206) (undo-tree-id2429 . -1) (undo-tree-id2430 . -1) (undo-tree-id2431 . -1) (undo-tree-id2432 . -1) (undo-tree-id2433 . -1) (undo-tree-id2434 . -1) (undo-tree-id2435 . -1) (undo-tree-id2436 . -1) (undo-tree-id2437 . -1) (undo-tree-id2438 . -1) (undo-tree-id2439 . -1) (undo-tree-id2440 . -1) (#("t" 0 1 (fontified t)) . -207) (undo-tree-id2441 . -1) (undo-tree-id2442 . -1) (undo-tree-id2443 . -1) (undo-tree-id2444 . -1) (undo-tree-id2445 . -1) (undo-tree-id2446 . -1) (undo-tree-id2447 . -1) (undo-tree-id2448 . -1) (undo-tree-id2449 . -1) (undo-tree-id2450 . -1) (#(" " 0 1 (fontified t)) . -208) (undo-tree-id2451 . -1) (undo-tree-id2452 . -1) (undo-tree-id2453 . -1) (undo-tree-id2454 . -1) (undo-tree-id2455 . -1) (undo-tree-id2456 . -1) (undo-tree-id2457 . -1) (undo-tree-id2458 . -1) 209 (t 26046 2241 463359 265000)) nil (26046 2243 344466 512000) 0 nil])
([nil nil ((206 . 208)) nil (26046 2243 344433 947000) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . -235) (undo-tree-id2459 . -1) (undo-tree-id2460 . -1) 236 (t 26046 2243 356692 715000)) nil (26046 2249 457012 908000) 0 nil])
([nil nil ((258 . 259)) nil (26046 2249 457001 787000) 0 nil])
([nil nil ((#("impl<T> Deref for MyBox<T> {
    type Target = *mut T;

    fn deref(&self) -> Self::Target {
        *self.0
    }
}" 0 4 (face font-lock-keyword-face fontified t) 4 5 (face (rainbow-delimiters-depth-1-face) fontified t) 5 6 (face font-lock-type-face fontified t) 6 7 (face (rainbow-delimiters-depth-1-face) fontified t) 7 8 (fontified t) 8 13 (face font-lock-type-face fontified t) 13 14 (fontified t) 14 17 (face font-lock-keyword-face fontified t) 17 18 (fontified t) 18 23 (face font-lock-type-face fontified t) 23 24 (face (rainbow-delimiters-depth-1-face) fontified t) 24 25 (face font-lock-type-face fontified t) 25 26 (face (rainbow-delimiters-depth-1-face) fontified t) 26 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-1-face) fontified t) 28 29 (fontified t) 29 33 (fontified t) 33 37 (face font-lock-keyword-face fontified t) 37 38 (fontified t) 38 44 (face font-lock-type-face fontified t) 44 48 (fontified t) 48 51 (face font-lock-keyword-face fontified t) 51 52 (fontified t) 52 53 (face font-lock-type-face fontified t) 53 55 (fontified t) 55 56 (fontified t) 56 60 (fontified t) 60 62 (face font-lock-keyword-face fontified t) 62 63 (fontified t) 63 68 (face font-lock-function-name-face fontified t) 68 69 (face (rainbow-delimiters-depth-2-face) fontified t) 69 70 (face rust-ampersand-face fontified t) 70 74 (face font-lock-keyword-face fontified t) 74 75 (face (rainbow-delimiters-depth-2-face) fontified t) 75 77 (fontified t) 77 78 (syntax-table (1) fontified t) 78 79 (fontified t) 79 83 (face font-lock-type-face fontified t) 83 85 (fontified t) 85 91 (face font-lock-type-face fontified t) 91 92 (fontified t) 92 93 (face (rainbow-delimiters-depth-2-face) fontified t) 93 94 (fontified t) 94 103 (fontified t) 103 107 (face font-lock-keyword-face fontified t) 107 108 (fontified t) 108 109 (fontified t) 109 110 (fontified t) 110 114 (fontified t) 114 115 (face (rainbow-delimiters-depth-2-face) fontified t) 115 116 (fontified t) 116 117 (face (rainbow-delimiters-depth-1-face) fontified t)) . 156) (undo-tree-id2548 . -117) (undo-tree-id2549 . -24) (undo-tree-id2550 . 65) (undo-tree-id2551 . -79) (undo-tree-id2552 . -103) (undo-tree-id2553 . -103) (undo-tree-id2554 . -103) (undo-tree-id2555 . -103) (undo-tree-id2556 . -103) (undo-tree-id2557 . -103) (undo-tree-id2558 . -103) (undo-tree-id2559 . -103) (undo-tree-id2560 . -103) (undo-tree-id2561 . -103) (undo-tree-id2562 . -103) (undo-tree-id2563 . -103) (undo-tree-id2564 . -65) (undo-tree-id2565 . -68) (undo-tree-id2566 . -74) (undo-tree-id2567 . -83) (undo-tree-id2568 . -83) (undo-tree-id2569 . -83) (undo-tree-id2570 . -83) (undo-tree-id2571 . -83) (undo-tree-id2572 . -83) (undo-tree-id2573 . -83) (undo-tree-id2574 . -91) (undo-tree-id2575 . -85) (undo-tree-id2576 . -85) (undo-tree-id2577 . -85) (undo-tree-id2578 . -85) (undo-tree-id2579 . -85) (undo-tree-id2580 . -109) (undo-tree-id2581 . -109) (undo-tree-id2582 . -109) (undo-tree-id2583 . -109) (undo-tree-id2584 . -109) (undo-tree-id2585 . -109) (undo-tree-id2586 . -109) (undo-tree-id2587 . -85) (undo-tree-id2588 . -85) (undo-tree-id2589 . -85) (undo-tree-id2590 . -85) (undo-tree-id2591 . -85) (undo-tree-id2592 . -85) (undo-tree-id2593 . -85) (undo-tree-id2594 . -79) (undo-tree-id2595 . -79) (undo-tree-id2596 . -79) (undo-tree-id2597 . -79) (undo-tree-id2598 . -79) (undo-tree-id2599 . -109) (undo-tree-id2600 . -109) (undo-tree-id2601 . -109) (undo-tree-id2602 . -109) (undo-tree-id2603 . -109) (undo-tree-id2604 . -109) (undo-tree-id2605 . -109) (undo-tree-id2606 . -117) (undo-tree-id2607 . -117) (undo-tree-id2608 . -117) (undo-tree-id2609 . -112) (undo-tree-id2610 . -95) (undo-tree-id2611 . -94) (undo-tree-id2612 . -117) (undo-tree-id2613 . -117) (t 26046 2249 500026 423000)) nil (26046 2273 579254 772000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -155) (undo-tree-id2468 . -1) (undo-tree-id2469 . -1) (undo-tree-id2470 . -1) (undo-tree-id2471 . -1) (undo-tree-id2472 . -1) (undo-tree-id2473 . -1) (undo-tree-id2474 . -1) (undo-tree-id2475 . -1) (undo-tree-id2476 . -1) (undo-tree-id2477 . -1) (undo-tree-id2478 . -1) (undo-tree-id2479 . -1) (undo-tree-id2480 . -1) (undo-tree-id2481 . -1) (undo-tree-id2482 . -1) (undo-tree-id2483 . -1) (undo-tree-id2484 . -1) (undo-tree-id2485 . -1) (undo-tree-id2486 . -1) (undo-tree-id2487 . -1) (undo-tree-id2488 . -1) (undo-tree-id2489 . -1) (undo-tree-id2490 . -1) (undo-tree-id2491 . -1) (undo-tree-id2492 . -1) (undo-tree-id2493 . -1) (undo-tree-id2494 . -1) (undo-tree-id2495 . -1) (undo-tree-id2496 . -1) (undo-tree-id2497 . -1) (undo-tree-id2498 . -1) (undo-tree-id2499 . -1) (undo-tree-id2500 . -1) (undo-tree-id2501 . -1) (undo-tree-id2502 . -1) (undo-tree-id2503 . -1) (undo-tree-id2504 . -1) (undo-tree-id2505 . -1) (undo-tree-id2506 . -1) (undo-tree-id2507 . -1) (undo-tree-id2508 . -1) (undo-tree-id2509 . -1) (undo-tree-id2510 . -1) (undo-tree-id2511 . -1) (undo-tree-id2512 . -1) (undo-tree-id2513 . -1) (undo-tree-id2514 . -1) (undo-tree-id2515 . -1) (undo-tree-id2516 . -1) (undo-tree-id2517 . -1) (undo-tree-id2518 . -1) (undo-tree-id2519 . -1) (undo-tree-id2520 . -1) (undo-tree-id2521 . -1) (undo-tree-id2522 . -1) (undo-tree-id2523 . -1) (undo-tree-id2524 . -1) (undo-tree-id2525 . -1) (undo-tree-id2526 . -1) (undo-tree-id2527 . -1) (undo-tree-id2528 . -1) (undo-tree-id2529 . -1) (undo-tree-id2530 . -1) (undo-tree-id2531 . -1) (undo-tree-id2532 . -1) (undo-tree-id2533 . -1) (undo-tree-id2534 . -1) (undo-tree-id2535 . -1) (undo-tree-id2536 . -1) (undo-tree-id2537 . -1) (undo-tree-id2538 . -1) (undo-tree-id2539 . -1) (undo-tree-id2540 . -1) (undo-tree-id2541 . -1) (undo-tree-id2542 . -1) (undo-tree-id2543 . -1) (undo-tree-id2544 . -1) (undo-tree-id2545 . -1) (undo-tree-id2546 . -1) (undo-tree-id2547 . -1) 156) nil (26046 2273 579207 718000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -155) (undo-tree-id2461 . -1) (undo-tree-id2462 . 1) (undo-tree-id2463 . -1) (undo-tree-id2464 . -1) (undo-tree-id2465 . -1) (undo-tree-id2466 . -1) (undo-tree-id2467 . -1) 156) nil (26046 2273 578984 561000) 0 nil])
([nil nil ((155 . 156)) nil (26046 2273 578968 524000) 0 nil])
([nil nil ((156 . 157) (t 26046 2273 593361 202000)) nil (26046 2277 886506 953000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -156) (undo-tree-id2614 . -1) (undo-tree-id2615 . 1) (undo-tree-id2616 . -1) (undo-tree-id2617 . -1) (undo-tree-id2618 . -1) (undo-tree-id2619 . -1) 157) nil (26046 2277 886503 81000) 0 nil])
([nil nil ((#("64] = ;" 0 2 (fontified t) 2 3 (face (rainbow-delimiters-depth-2-face) fontified t) 3 6 (fontified t) 6 7 (fontified t)) . -226) (undo-tree-id2786 . -7) (undo-tree-id2787 . -7) (undo-tree-id2788 . -6) (undo-tree-id2789 . -7) (undo-tree-id2790 . -7) (undo-tree-id2791 . -7) (undo-tree-id2792 . -7) (undo-tree-id2793 . -7) 233 (t 26046 2277 930028 126000)) nil (26046 2293 909053 415000) 0 nil])
([nil nil ((#("u8; " 0 2 (face font-lock-type-face fontified t) 2 4 (fontified t)) . -222) (undo-tree-id2774 . -4) (undo-tree-id2775 . -4) (undo-tree-id2776 . -2) (undo-tree-id2777 . -4) (undo-tree-id2778 . -4) (undo-tree-id2779 . -4) (undo-tree-id2780 . -4) (undo-tree-id2781 . -4) (undo-tree-id2782 . -4) (undo-tree-id2783 . -4) (undo-tree-id2784 . -4) (undo-tree-id2785 . -4) 226) nil (26046 2293 909047 265000) 0 nil])
([nil nil ((#("mut [" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-2-face) fontified t)) . -217) (undo-tree-id2759 . -5) (undo-tree-id2760 . -5) (undo-tree-id2761 . -5) (undo-tree-id2762 . -5) (undo-tree-id2763 . -5) (undo-tree-id2764 . -3) (undo-tree-id2765 . -5) (undo-tree-id2766 . -5) (undo-tree-id2767 . -5) (undo-tree-id2768 . -5) (undo-tree-id2769 . -5) (undo-tree-id2770 . -5) (undo-tree-id2771 . -5) (undo-tree-id2772 . -5) (undo-tree-id2773 . -5) 222) nil (26046 2293 908869 939000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -214) (undo-tree-id2700 . -1) (undo-tree-id2701 . -1) (undo-tree-id2702 . -1) (undo-tree-id2703 . -1) (undo-tree-id2704 . -1) (undo-tree-id2705 . -1) (undo-tree-id2706 . -1) (undo-tree-id2707 . -1) (undo-tree-id2708 . -1) (undo-tree-id2709 . -1) (undo-tree-id2710 . -1) (undo-tree-id2711 . -1) (undo-tree-id2712 . -1) (undo-tree-id2713 . -1) (undo-tree-id2714 . -1) (undo-tree-id2715 . -1) (undo-tree-id2716 . -1) (undo-tree-id2717 . -1) (undo-tree-id2718 . -1) (undo-tree-id2719 . -1) (undo-tree-id2720 . -1) (undo-tree-id2721 . -1) (#(" " 0 1 (fontified t)) . -215) (undo-tree-id2722 . -1) (undo-tree-id2723 . -1) (undo-tree-id2724 . -1) (undo-tree-id2725 . -1) (undo-tree-id2726 . -1) (undo-tree-id2727 . -1) (undo-tree-id2728 . -1) (undo-tree-id2729 . -1) (undo-tree-id2730 . -1) (undo-tree-id2731 . -1) (undo-tree-id2732 . -1) (undo-tree-id2733 . -1) (undo-tree-id2734 . -1) (undo-tree-id2735 . -1) (undo-tree-id2736 . -1) (undo-tree-id2737 . -1) (undo-tree-id2738 . -1) (undo-tree-id2739 . -1) (undo-tree-id2740 . -1) (undo-tree-id2741 . -1) (#("*" 0 1 (fontified t)) . -216) (undo-tree-id2742 . -1) (undo-tree-id2743 . -1) (undo-tree-id2744 . -1) (undo-tree-id2745 . -1) (undo-tree-id2746 . -1) (undo-tree-id2747 . -1) (undo-tree-id2748 . -1) (undo-tree-id2749 . -1) (undo-tree-id2750 . -1) (undo-tree-id2751 . -1) (undo-tree-id2752 . -1) (undo-tree-id2753 . -1) (undo-tree-id2754 . -1) (undo-tree-id2755 . -1) (undo-tree-id2756 . -1) (undo-tree-id2757 . -1) (undo-tree-id2758 . -1) 217) nil (26046 2293 908858 478000) 0 nil])
([nil nil ((214 . 218)) nil (26046 2293 908821 278000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -215) (undo-tree-id2671 . -1) (undo-tree-id2672 . -1) (undo-tree-id2673 . -1) (undo-tree-id2674 . -1) (undo-tree-id2675 . -1) (undo-tree-id2676 . -1) (undo-tree-id2677 . -1) (undo-tree-id2678 . -1) (undo-tree-id2679 . -1) (undo-tree-id2680 . -1) (undo-tree-id2681 . -1) (undo-tree-id2682 . -1) (undo-tree-id2683 . -1) (undo-tree-id2684 . -1) (#("=" 0 1 (fontified t)) . -216) (undo-tree-id2685 . -1) (undo-tree-id2686 . -1) (undo-tree-id2687 . -1) (undo-tree-id2688 . -1) (undo-tree-id2689 . -1) (undo-tree-id2690 . -1) (undo-tree-id2691 . -1) (undo-tree-id2692 . -1) (undo-tree-id2693 . -1) (undo-tree-id2694 . -1) (undo-tree-id2695 . -1) (#(" " 0 1 (fontified t)) . -217) (undo-tree-id2696 . -1) (undo-tree-id2697 . -1) (undo-tree-id2698 . -1) (undo-tree-id2699 . -1) 218) nil (26046 2293 908819 576000) 0 nil])
([nil nil ((215 . 218)) nil (26046 2293 908801 419000) 0 nil])
([nil nil ((217 . 222) (#("M" 0 1 (fontified nil)) . 217) (217 . 218) (#("MyBox" 0 5 (fontified nil)) . -217) (217 . 222) (#("M" 0 1 (face font-lock-type-face fontified t)) . -217) (undo-tree-id2665 . -1) (undo-tree-id2666 . -1) (undo-tree-id2667 . -1) (undo-tree-id2668 . -1) (undo-tree-id2669 . -1) (undo-tree-id2670 . -1) 218) nil (26046 2293 908800 277000) 0 nil])
([nil nil ((222 . 224)) nil (26046 2293 908794 673000) 0 nil])
([nil nil ((#("{" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -222) (undo-tree-id2641 . -1) (undo-tree-id2642 . -1) (undo-tree-id2643 . -1) (undo-tree-id2644 . -1) (undo-tree-id2645 . -1) (undo-tree-id2646 . -1) (undo-tree-id2647 . -1) (undo-tree-id2648 . -1) (undo-tree-id2649 . -1) (undo-tree-id2650 . -1) (undo-tree-id2651 . -1) (undo-tree-id2652 . -1) (undo-tree-id2653 . -1) (undo-tree-id2654 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -223) (undo-tree-id2655 . -1) (undo-tree-id2656 . -1) (undo-tree-id2657 . -1) (undo-tree-id2658 . -1) (undo-tree-id2659 . -1) (undo-tree-id2660 . -1) (undo-tree-id2661 . -1) (undo-tree-id2662 . -1) (undo-tree-id2663 . -1) (undo-tree-id2664 . -1) 224) nil (26046 2293 908792 968000) 0 nil])
([nil nil ((222 . 223)) nil (26046 2293 908687 82000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -222) (undo-tree-id2631 . -1) (undo-tree-id2632 . -1) (undo-tree-id2633 . -1) (undo-tree-id2634 . -1) (undo-tree-id2635 . -1) (undo-tree-id2636 . -1) (undo-tree-id2637 . -1) (undo-tree-id2638 . -1) (undo-tree-id2639 . -1) (undo-tree-id2640 . -1) 223) nil (26046 2293 908685 953000) 0 nil])
([nil nil ((222 . 224)) nil (26046 2293 908678 696000) 0 nil])
([nil nil ((223 . 225)) nil (26046 2293 908677 979000) 0 nil])
([nil nil ((224 . 229) (#("a" 0 1 (fontified nil)) . 224) (224 . 225) (#("array" 0 5 (fontified nil)) . -224) (224 . 229) (#("a" 0 1 (fontified t)) . -224) (undo-tree-id2620 . -1) (undo-tree-id2621 . -1) (undo-tree-id2622 . -1) (undo-tree-id2623 . -1) (undo-tree-id2624 . -1) (undo-tree-id2625 . -1) (undo-tree-id2626 . -1) (undo-tree-id2627 . -1) (undo-tree-id2628 . -1) (undo-tree-id2629 . -1) (undo-tree-id2630 . -1) 225) nil (26046 2293 908675 479000) 0 nil])
([nil nil ((230 . 231)) nil (26046 2293 908657 258000) 0 nil])
([nil nil ((#("array)" 0 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-2-face) fontified t)) . -224) (undo-tree-id2847 . -4) (undo-tree-id2848 . -6) (undo-tree-id2849 . -6) (undo-tree-id2850 . -6) (undo-tree-id2851 . -6) (undo-tree-id2852 . -6) (undo-tree-id2853 . -6) (undo-tree-id2854 . -6) (undo-tree-id2855 . -6) (undo-tree-id2856 . -5) (undo-tree-id2857 . -4) (undo-tree-id2858 . -4) (undo-tree-id2859 . -4) (undo-tree-id2860 . -4) (undo-tree-id2861 . -4) (undo-tree-id2862 . -5) (undo-tree-id2863 . -6) (undo-tree-id2864 . -6) (undo-tree-id2865 . -6) 230 (t 26046 2293 920029 90000)) nil (26046 2299 10074 681000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -222) (undo-tree-id3403 . -1) (undo-tree-id3404 . -1) (undo-tree-id3405 . -1) (undo-tree-id3406 . -1) (undo-tree-id3407 . -1) (undo-tree-id3408 . -1) (undo-tree-id3409 . -1) (undo-tree-id3410 . -1) (undo-tree-id3411 . -1) (undo-tree-id3412 . -1) (undo-tree-id3413 . -1) (undo-tree-id3414 . -1) (undo-tree-id3415 . -1) (undo-tree-id3416 . -1) (undo-tree-id3417 . -1) (undo-tree-id3418 . -1) (undo-tree-id3419 . -1) (undo-tree-id3420 . -1) (undo-tree-id3421 . -1) (undo-tree-id3422 . -1) (undo-tree-id3423 . -1) (undo-tree-id3424 . -1) (undo-tree-id3425 . -1) (undo-tree-id3426 . -1) (undo-tree-id3427 . -1) (undo-tree-id3428 . -1) (undo-tree-id3429 . -1) (undo-tree-id3430 . -1) (undo-tree-id3431 . -1) (undo-tree-id3432 . -1) (undo-tree-id3433 . -1) (undo-tree-id3434 . -1) (undo-tree-id3435 . -1) (undo-tree-id3436 . -1) (undo-tree-id3437 . -1) (undo-tree-id3438 . -1) (undo-tree-id3439 . -1) (undo-tree-id3440 . -1) (undo-tree-id3441 . -1) (undo-tree-id3442 . -1) (undo-tree-id3443 . -1) (undo-tree-id3444 . -1) (#("&" 0 1 (fontified t)) . -223) (undo-tree-id3445 . -1) (undo-tree-id3446 . -1) (undo-tree-id3447 . -1) (undo-tree-id3448 . -1) (undo-tree-id3449 . -1) (undo-tree-id3450 . -1) (undo-tree-id3451 . -1) (undo-tree-id3452 . -1) (undo-tree-id3453 . -1) (undo-tree-id3454 . -1) (undo-tree-id3455 . -1) (undo-tree-id3456 . -1) (undo-tree-id3457 . -1) (undo-tree-id3458 . -1) (undo-tree-id3459 . -1) (undo-tree-id3460 . -1) (undo-tree-id3461 . -1) (undo-tree-id3462 . -1) (undo-tree-id3463 . -1) (undo-tree-id3464 . -1) (undo-tree-id3465 . -1) (undo-tree-id3466 . -1) (undo-tree-id3467 . -1) (undo-tree-id3468 . -1) (undo-tree-id3469 . -1) (undo-tree-id3470 . -1) (undo-tree-id3471 . -1) (undo-tree-id3472 . -1) (undo-tree-id3473 . -1) (undo-tree-id3474 . -1) (undo-tree-id3475 . -1) (undo-tree-id3476 . -1) (undo-tree-id3477 . -1) (undo-tree-id3478 . -1) (undo-tree-id3479 . -1) (undo-tree-id3480 . -1) (undo-tree-id3481 . -1) (undo-tree-id3482 . -1) (undo-tree-id3483 . -1) 224) nil (26046 2402 22692 289000) 0 nil] [nil nil ((#("MyBox(&" 0 5 (face font-lock-type-face fontified t) 5 6 (face (rainbow-delimiters-depth-2-face) fontified t) 6 7 (fontified t)) . -217) (undo-tree-id2794 . -7) (undo-tree-id2795 . -7) (undo-tree-id2796 . -5) (undo-tree-id2797 . -5) (undo-tree-id2798 . -5) (undo-tree-id2799 . -5) (undo-tree-id2800 . -5) (undo-tree-id2801 . -5) (undo-tree-id2802 . -5) (undo-tree-id2803 . -5) (undo-tree-id2804 . -5) (undo-tree-id2805 . -5) (undo-tree-id2806 . -5) (undo-tree-id2807 . -5) (undo-tree-id2808 . -5) (undo-tree-id2809 . -5) (undo-tree-id2810 . -5) (undo-tree-id2811 . -5) (undo-tree-id2812 . -5) (undo-tree-id2813 . -5) (undo-tree-id2814 . -5) (undo-tree-id2815 . -5) (undo-tree-id2816 . -5) (undo-tree-id2817 . -5) (undo-tree-id2818 . -6) (undo-tree-id2819 . -7) (undo-tree-id2820 . -7) (undo-tree-id2821 . -7) (undo-tree-id2822 . -7) (undo-tree-id2823 . -7) (undo-tree-id2824 . -7) (undo-tree-id2825 . -7) (undo-tree-id2826 . -7) (undo-tree-id2827 . -7) (undo-tree-id2828 . -7) (undo-tree-id2829 . -7) (undo-tree-id2830 . -7) (undo-tree-id2831 . -7) (undo-tree-id2832 . -7) (undo-tree-id2833 . -7) (undo-tree-id2834 . -7) (undo-tree-id2835 . -7) (undo-tree-id2836 . -7) (undo-tree-id2837 . -7) (undo-tree-id2838 . -7) (undo-tree-id2839 . -7) (undo-tree-id2840 . -7) (undo-tree-id2841 . -7) (undo-tree-id2842 . -7) (undo-tree-id2843 . -7) (undo-tree-id2844 . -7) (undo-tree-id2845 . -7) (undo-tree-id2846 . -7) 224) ((217 . 224)) (26046 2299 9822 312000) 0 nil])
([nil nil ((222 . 224)) nil (26046 2402 22615 342000) 0 nil])
nil
([nil nil ((223 . 225)) nil (26046 2402 22614 711000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -224) (undo-tree-id3393 . -1) (undo-tree-id3394 . -1) (undo-tree-id3395 . -1) (undo-tree-id3396 . -1) (undo-tree-id3397 . -1) (undo-tree-id3398 . -1) (undo-tree-id3399 . -1) (undo-tree-id3400 . -1) (undo-tree-id3401 . -1) (undo-tree-id3402 . -1) 225) nil (26046 2402 22613 663000) 0 nil])
([nil nil ((#("&" 0 1 (fontified t)) . -223) (undo-tree-id3378 . -1) (undo-tree-id3379 . -1) (undo-tree-id3380 . -1) (undo-tree-id3381 . -1) (undo-tree-id3382 . -1) (undo-tree-id3383 . -1) (undo-tree-id3384 . -1) (undo-tree-id3385 . -1) (undo-tree-id3386 . -1) (undo-tree-id3387 . -1) (undo-tree-id3388 . -1) (undo-tree-id3389 . -1) (undo-tree-id3390 . -1) (undo-tree-id3391 . -1) (undo-tree-id3392 . -1) 224) nil (26046 2402 22605 931000) 0 nil])
([nil nil ((223 . 225)) nil (26046 2402 22595 454000) 0 nil])
([nil nil ((#("{" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -222) (undo-tree-id3231 . -1) (undo-tree-id3232 . -1) (undo-tree-id3233 . -1) (undo-tree-id3234 . -1) (undo-tree-id3235 . -1) (undo-tree-id3236 . -1) (undo-tree-id3237 . -1) (undo-tree-id3238 . -1) (undo-tree-id3239 . -1) (undo-tree-id3240 . -1) (undo-tree-id3241 . -1) (undo-tree-id3242 . -1) (undo-tree-id3243 . -1) (undo-tree-id3244 . -1) (undo-tree-id3245 . -1) (undo-tree-id3246 . -1) (undo-tree-id3247 . -1) (undo-tree-id3248 . -1) (undo-tree-id3249 . -1) (undo-tree-id3250 . -1) (undo-tree-id3251 . -1) (undo-tree-id3252 . -1) (undo-tree-id3253 . -1) (undo-tree-id3254 . -1) (undo-tree-id3255 . -1) (undo-tree-id3256 . -1) (undo-tree-id3257 . -1) (undo-tree-id3258 . -1) (undo-tree-id3259 . -1) (undo-tree-id3260 . -1) (undo-tree-id3261 . -1) (undo-tree-id3262 . -1) (undo-tree-id3263 . -1) (undo-tree-id3264 . -1) (undo-tree-id3265 . -1) (undo-tree-id3266 . -1) (undo-tree-id3267 . -1) (undo-tree-id3268 . -1) (undo-tree-id3269 . -1) (undo-tree-id3270 . -1) (undo-tree-id3271 . -1) (undo-tree-id3272 . -1) (undo-tree-id3273 . -1) (undo-tree-id3274 . -1) (undo-tree-id3275 . -1) (undo-tree-id3276 . -1) (undo-tree-id3277 . -1) (undo-tree-id3278 . -1) (undo-tree-id3279 . -1) (undo-tree-id3280 . -1) (undo-tree-id3281 . -1) (undo-tree-id3282 . -1) (undo-tree-id3283 . -1) (undo-tree-id3284 . -1) (undo-tree-id3285 . -1) (undo-tree-id3286 . -1) (undo-tree-id3287 . -1) (undo-tree-id3288 . -1) (undo-tree-id3289 . -1) (undo-tree-id3290 . -1) (undo-tree-id3291 . -1) (undo-tree-id3292 . -1) (undo-tree-id3293 . -1) (undo-tree-id3294 . -1) (undo-tree-id3295 . -1) (undo-tree-id3296 . -1) (undo-tree-id3297 . -1) (undo-tree-id3298 . -1) (undo-tree-id3299 . -1) (undo-tree-id3300 . -1) (undo-tree-id3301 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -223) (undo-tree-id3302 . -1) (undo-tree-id3303 . -1) (undo-tree-id3304 . -1) (undo-tree-id3305 . -1) (undo-tree-id3306 . -1) (undo-tree-id3307 . -1) (undo-tree-id3308 . -1) (undo-tree-id3309 . -1) (undo-tree-id3310 . -1) (undo-tree-id3311 . -1) (undo-tree-id3312 . -1) (undo-tree-id3313 . -1) (undo-tree-id3314 . -1) (undo-tree-id3315 . -1) (undo-tree-id3316 . -1) (undo-tree-id3317 . -1) (undo-tree-id3318 . -1) (undo-tree-id3319 . -1) (undo-tree-id3320 . -1) (undo-tree-id3321 . -1) (undo-tree-id3322 . -1) (undo-tree-id3323 . -1) (undo-tree-id3324 . -1) (undo-tree-id3325 . -1) (undo-tree-id3326 . -1) (undo-tree-id3327 . -1) (undo-tree-id3328 . -1) (undo-tree-id3329 . -1) (undo-tree-id3330 . -1) (undo-tree-id3331 . -1) (undo-tree-id3332 . -1) (undo-tree-id3333 . -1) (undo-tree-id3334 . -1) (undo-tree-id3335 . -1) (undo-tree-id3336 . -1) (undo-tree-id3337 . -1) (undo-tree-id3338 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -224) (undo-tree-id3339 . -1) (undo-tree-id3340 . -1) (undo-tree-id3341 . -1) (undo-tree-id3342 . -1) (undo-tree-id3343 . -1) (undo-tree-id3344 . -1) (undo-tree-id3345 . -1) (undo-tree-id3346 . -1) (undo-tree-id3347 . -1) (undo-tree-id3348 . -1) (undo-tree-id3349 . -1) (undo-tree-id3350 . -1) (undo-tree-id3351 . -1) (undo-tree-id3352 . -1) (undo-tree-id3353 . -1) (undo-tree-id3354 . -1) (undo-tree-id3355 . -1) (undo-tree-id3356 . -1) (undo-tree-id3357 . -1) (undo-tree-id3358 . -1) (undo-tree-id3359 . -1) (undo-tree-id3360 . -1) (undo-tree-id3361 . -1) (undo-tree-id3362 . -1) (undo-tree-id3363 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -225) (undo-tree-id3364 . -1) (undo-tree-id3365 . -1) (undo-tree-id3366 . -1) (undo-tree-id3367 . -1) (undo-tree-id3368 . -1) (undo-tree-id3369 . -1) (undo-tree-id3370 . -1) (undo-tree-id3371 . -1) (undo-tree-id3372 . -1) (undo-tree-id3373 . -1) (undo-tree-id3374 . 1) (undo-tree-id3375 . -1) (undo-tree-id3376 . -1) (undo-tree-id3377 . -1) 226) nil (26046 2402 22589 494000) 0 nil])
([nil nil ((222 . 224)) nil (26046 2402 22492 293000) 0 nil])
([nil nil ((#("MyBox::" 0 5 (face font-lock-type-face fontified t) 5 7 (fontified t)) . -217) (undo-tree-id3075 . -5) (undo-tree-id3076 . -7) (undo-tree-id3077 . -5) (undo-tree-id3078 . -5) (undo-tree-id3079 . -5) (undo-tree-id3080 . -5) (undo-tree-id3081 . -5) (undo-tree-id3082 . -5) (undo-tree-id3083 . -5) (undo-tree-id3084 . -5) (undo-tree-id3085 . -5) (undo-tree-id3086 . -5) (undo-tree-id3087 . -5) (undo-tree-id3088 . -5) (undo-tree-id3089 . -5) (undo-tree-id3090 . -5) (undo-tree-id3091 . -5) (undo-tree-id3092 . -5) (undo-tree-id3093 . -5) (undo-tree-id3094 . -5) (undo-tree-id3095 . -5) (undo-tree-id3096 . -5) (undo-tree-id3097 . -5) (undo-tree-id3098 . -5) (undo-tree-id3099 . -5) (undo-tree-id3100 . -5) (undo-tree-id3101 . -5) (undo-tree-id3102 . -5) (undo-tree-id3103 . -5) (undo-tree-id3104 . -5) (undo-tree-id3105 . -5) (undo-tree-id3106 . -5) (undo-tree-id3107 . -5) (undo-tree-id3108 . -5) (undo-tree-id3109 . -5) (undo-tree-id3110 . -5) (undo-tree-id3111 . -5) (undo-tree-id3112 . -5) (undo-tree-id3113 . -5) (undo-tree-id3114 . -5) (undo-tree-id3115 . -5) (undo-tree-id3116 . -5) (undo-tree-id3117 . -5) (undo-tree-id3118 . -5) (undo-tree-id3119 . -5) (undo-tree-id3120 . -5) (undo-tree-id3121 . -5) (undo-tree-id3122 . -5) (undo-tree-id3123 . -5) (undo-tree-id3124 . -5) (undo-tree-id3125 . -5) (undo-tree-id3126 . -5) (undo-tree-id3127 . -5) (undo-tree-id3128 . -5) (undo-tree-id3129 . -5) (undo-tree-id3130 . -5) (undo-tree-id3131 . -5) (undo-tree-id3132 . -5) (undo-tree-id3133 . -5) (undo-tree-id3134 . -5) (undo-tree-id3135 . -5) (undo-tree-id3136 . -5) (undo-tree-id3137 . -5) (undo-tree-id3138 . -5) (undo-tree-id3139 . -5) (undo-tree-id3140 . -5) (undo-tree-id3141 . -5) (undo-tree-id3142 . -5) (undo-tree-id3143 . -5) (undo-tree-id3144 . -5) (undo-tree-id3145 . -5) (undo-tree-id3146 . -5) (undo-tree-id3147 . -5) (undo-tree-id3148 . -5) (undo-tree-id3149 . -5) (undo-tree-id3150 . -5) (undo-tree-id3151 . -5) (undo-tree-id3152 . -5) (undo-tree-id3153 . -5) (undo-tree-id3154 . -5) (undo-tree-id3155 . -5) (undo-tree-id3156 . -5) (undo-tree-id3157 . -5) (undo-tree-id3158 . -5) (undo-tree-id3159 . -5) (undo-tree-id3160 . -5) (undo-tree-id3161 . -5) (undo-tree-id3162 . -5) (undo-tree-id3163 . -5) (undo-tree-id3164 . -5) (undo-tree-id3165 . -5) (undo-tree-id3166 . -5) (undo-tree-id3167 . -5) (undo-tree-id3168 . -5) (undo-tree-id3169 . -5) (undo-tree-id3170 . -5) (undo-tree-id3171 . -5) (undo-tree-id3172 . -5) (undo-tree-id3173 . -5) (undo-tree-id3174 . -5) (undo-tree-id3175 . -5) (undo-tree-id3176 . -5) (undo-tree-id3177 . -5) (undo-tree-id3178 . -5) (undo-tree-id3179 . -5) (undo-tree-id3180 . -5) (undo-tree-id3181 . -5) (undo-tree-id3182 . -5) (undo-tree-id3183 . -5) (undo-tree-id3184 . -5) (undo-tree-id3185 . -5) (undo-tree-id3186 . -5) (undo-tree-id3187 . -5) (undo-tree-id3188 . -5) (undo-tree-id3189 . -5) (undo-tree-id3190 . -5) (undo-tree-id3191 . -5) (undo-tree-id3192 . -5) (undo-tree-id3193 . -5) (undo-tree-id3194 . -5) (undo-tree-id3195 . -5) (undo-tree-id3196 . -5) (undo-tree-id3197 . -5) (undo-tree-id3198 . -5) (undo-tree-id3199 . -5) (undo-tree-id3200 . -5) (undo-tree-id3201 . -5) (undo-tree-id3202 . -5) (undo-tree-id3203 . -5) (undo-tree-id3204 . -5) (undo-tree-id3205 . -5) (undo-tree-id3206 . -5) (undo-tree-id3207 . -5) (undo-tree-id3208 . -5) (undo-tree-id3209 . -5) (undo-tree-id3210 . -5) (undo-tree-id3211 . -5) (undo-tree-id3212 . -5) (undo-tree-id3213 . -5) (undo-tree-id3214 . -5) (undo-tree-id3215 . -5) (undo-tree-id3216 . -5) (undo-tree-id3217 . -5) (undo-tree-id3218 . -5) (undo-tree-id3219 . -5) (undo-tree-id3220 . -5) (undo-tree-id3221 . -5) (undo-tree-id3222 . -5) (undo-tree-id3223 . -5) (undo-tree-id3224 . -6) (undo-tree-id3225 . -6) (undo-tree-id3226 . -7) (undo-tree-id3227 . -7) (undo-tree-id3228 . -7) (undo-tree-id3229 . -7) (undo-tree-id3230 . -7) 224) nil (26046 2402 22485 900000) 0 nil])
([nil nil ((217 . 221)) nil (26046 2402 22001 125000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -219) (undo-tree-id3050 . -1) (undo-tree-id3051 . -1) (undo-tree-id3052 . -1) (undo-tree-id3053 . -1) (undo-tree-id3054 . -1) (undo-tree-id3055 . -1) (undo-tree-id3056 . -1) (undo-tree-id3057 . -1) (undo-tree-id3058 . -1) (undo-tree-id3059 . -1) (undo-tree-id3060 . -1) (undo-tree-id3061 . -1) (undo-tree-id3062 . -1) (undo-tree-id3063 . -1) (undo-tree-id3064 . -1) (undo-tree-id3065 . -1) (undo-tree-id3066 . -1) (#("o" 0 1 (fontified t)) . -220) (undo-tree-id3067 . -1) (undo-tree-id3068 . -1) (undo-tree-id3069 . -1) (undo-tree-id3070 . -1) (undo-tree-id3071 . -1) (undo-tree-id3072 . -1) (undo-tree-id3073 . -1) (undo-tree-id3074 . -1) 221) nil (26046 2402 21999 557000) 0 nil])
([nil nil ((#("m" 0 1 (fontified nil)) . -217) (undo-tree-id2985 . -1) (undo-tree-id2986 . -1) (undo-tree-id2987 . -1) (undo-tree-id2988 . -1) (undo-tree-id2989 . -1) (undo-tree-id2990 . -1) (undo-tree-id2991 . -1) (undo-tree-id2992 . -1) (undo-tree-id2993 . -1) (undo-tree-id2994 . -1) (undo-tree-id2995 . -1) (undo-tree-id2996 . -1) (undo-tree-id2997 . -1) (undo-tree-id2998 . -1) (undo-tree-id2999 . -1) (undo-tree-id3000 . -1) (undo-tree-id3001 . -1) (undo-tree-id3002 . -1) (undo-tree-id3003 . -1) (undo-tree-id3004 . -1) (undo-tree-id3005 . -1) (undo-tree-id3006 . -1) (undo-tree-id3007 . -1) (undo-tree-id3008 . -1) (undo-tree-id3009 . -1) (undo-tree-id3010 . -1) (undo-tree-id3011 . -1) (undo-tree-id3012 . -1) (undo-tree-id3013 . -1) (undo-tree-id3014 . -1) (undo-tree-id3015 . -1) (undo-tree-id3016 . -1) (undo-tree-id3017 . -1) (undo-tree-id3018 . -1) (#("y" 0 1 (fontified t)) . -218) (undo-tree-id3019 . -1) (undo-tree-id3020 . -1) (undo-tree-id3021 . -1) (undo-tree-id3022 . -1) (undo-tree-id3023 . -1) (undo-tree-id3024 . -1) (undo-tree-id3025 . -1) (undo-tree-id3026 . -1) (undo-tree-id3027 . -1) (undo-tree-id3028 . -1) (undo-tree-id3029 . -1) (undo-tree-id3030 . -1) (undo-tree-id3031 . -1) (undo-tree-id3032 . -1) (undo-tree-id3033 . -1) (undo-tree-id3034 . -1) (undo-tree-id3035 . -1) (undo-tree-id3036 . -1) (undo-tree-id3037 . -1) (undo-tree-id3038 . -1) (undo-tree-id3039 . -1) (undo-tree-id3040 . -1) (undo-tree-id3041 . -1) (undo-tree-id3042 . -1) (undo-tree-id3043 . -1) (undo-tree-id3044 . -1) (undo-tree-id3045 . -1) (undo-tree-id3046 . -1) (undo-tree-id3047 . -1) (undo-tree-id3048 . -1) (undo-tree-id3049 . -1) 219) nil (26046 2402 21980 126000) 0 nil])
([nil nil ((217 . 218)) nil (26046 2402 21935 188000) 0 nil])
([nil nil ((217 . 222) (#("M" 0 1 (fontified nil)) . 217) (217 . 218) (#("MyBox" 0 5 (fontified nil)) . -217) (217 . 222) (#("M" 0 1 (face font-lock-type-face fontified t)) . -217) (undo-tree-id2979 . -1) (undo-tree-id2980 . -1) (undo-tree-id2981 . -1) (undo-tree-id2982 . -1) (undo-tree-id2983 . -1) (undo-tree-id2984 . -1) 218) nil (26046 2402 21933 906000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -222) (undo-tree-id2976 . -1) (undo-tree-id2977 . -1) (undo-tree-id2978 . -1) 223) nil (26046 2402 21927 589000) 0 nil])
([nil nil ((222 . 224)) nil (26046 2402 21924 776000) 0 nil])
([nil nil ((#("{" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -222) (undo-tree-id2945 . -1) (undo-tree-id2946 . -1) (undo-tree-id2947 . -1) (undo-tree-id2948 . -1) (undo-tree-id2949 . -1) (undo-tree-id2950 . -1) (undo-tree-id2951 . -1) (undo-tree-id2952 . -1) (undo-tree-id2953 . -1) (undo-tree-id2954 . -1) (undo-tree-id2955 . -1) (undo-tree-id2956 . -1) (undo-tree-id2957 . -1) (undo-tree-id2958 . -1) (undo-tree-id2959 . -1) (undo-tree-id2960 . -1) (undo-tree-id2961 . -1) (undo-tree-id2962 . -1) (undo-tree-id2963 . -1) (undo-tree-id2964 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -223) (undo-tree-id2965 . -1) (undo-tree-id2966 . -1) (undo-tree-id2967 . -1) (undo-tree-id2968 . -1) (undo-tree-id2969 . -1) (undo-tree-id2970 . -1) (undo-tree-id2971 . -1) (undo-tree-id2972 . -1) (undo-tree-id2973 . -1) (undo-tree-id2974 . -1) (undo-tree-id2975 . -1) 224) nil (26046 2402 21922 792000) 0 nil])
([nil nil ((156 . 158)) nil (26046 2402 21901 131000) 0 nil])
([nil nil ((156 . 158)) nil (26046 2402 21900 612000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -156) (undo-tree-id2935 . -1) (undo-tree-id2936 . -1) (undo-tree-id2937 . -1) (undo-tree-id2938 . -1) (undo-tree-id2939 . -1) (undo-tree-id2940 . -1) (undo-tree-id2941 . -1) (#("m" 0 1 (fontified t)) . -157) (undo-tree-id2942 . -1) (undo-tree-id2943 . -1) (undo-tree-id2944 . -1) 158) nil (26046 2402 21899 559000) 0 nil])
([nil nil ((156 . 159)) nil (26046 2402 21892 314000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 161 169 nil nil nil t #s(yas--exit 176 nil))) #s(yas--exit 176 nil) 22 nil #s(yas--field 1 161 169 nil nil nil t #s(yas--exit 176 nil)) nil nil)) (156 . 170) (#("impl $1 {
    $0
}" 0 18 (fontified nil)) . 156) (156 . 174) (#("imp" 0 3 (fontified nil)) . 156) (156 . 159) (#("impl" 0 4 (fontified nil)) . -156) (156 . 160) (#("imp" 0 3 (fontified t)) . -156) (undo-tree-id2927 . -3) (undo-tree-id2928 . -1) (undo-tree-id2929 . -1) (undo-tree-id2930 . -2) (undo-tree-id2931 . -2) (undo-tree-id2932 . -3) (undo-tree-id2933 . -3) (undo-tree-id2934 . -3) 159) nil (26046 2402 21890 954000) 0 nil])
([nil nil ((161 . 162)) nil (26046 2402 21883 982000) 0 nil])
([nil nil ((apply yas--snippet-revive 161 168 #s(yas--snippet nil nil #s(yas--exit 167 nil) 23 nil nil #s(yas--field 1 161 169 nil nil nil t #s(yas--exit 176 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 167 nil) 23 nil nil #s(yas--field 1 161 169 nil nil nil t #s(yas--exit 176 nil)) nil)) (161 . 168) (#("MyBox<$0>" 0 9 (fontified nil)) . 161) (undo-tree-id2917 . -9) (161 . 170) (#("M" 0 1 (fontified nil)) . 161) (undo-tree-id2918 . -1) (161 . 162) (#("MyBox<…>" 0 8 (fontified nil)) . -161) (undo-tree-id2919 . -8) (161 . 169) (#("M" 0 1 (face font-lock-type-face fontified t)) . -161) (undo-tree-id2920 . -1) (undo-tree-id2921 . -1) (undo-tree-id2922 . -1) (undo-tree-id2923 . -1) (undo-tree-id2924 . -1) (undo-tree-id2925 . -1) (undo-tree-id2926 . -1) 162) nil (26046 2402 21882 257000) 0 nil])
([nil nil ((167 . 168)) nil (26046 2402 21873 818000) 0 nil])
([nil nil ((apply yas--snippet-revive 156 178 #s(yas--snippet nil (#s(yas--field 1 161 169 nil nil nil t #s(yas--exit 176 nil))) #s(yas--exit 176 nil) 22 nil #s(yas--field 1 161 169 nil nil nil t #s(yas--exit 176 nil)) nil nil))) nil (26046 2402 21873 255000) 0 nil])
([nil nil ((160 . 162)) nil (26046 2402 21872 677000) 0 nil])
([nil nil ((161 . 162)) nil (26046 2402 21872 71000) 0 nil])
([nil nil ((179 . 187)) nil (26046 2402 21871 513000) 0 nil])
([nil nil ((186 . 191)) nil (26046 2402 21870 929000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -190) (undo-tree-id2903 . -1) (undo-tree-id2904 . -1) (undo-tree-id2905 . -1) (undo-tree-id2906 . -1) (undo-tree-id2907 . -1) (undo-tree-id2908 . -1) (undo-tree-id2909 . -1) (undo-tree-id2910 . -1) (undo-tree-id2911 . -1) (undo-tree-id2912 . -1) (undo-tree-id2913 . -1) (undo-tree-id2914 . -1) (undo-tree-id2915 . -1) (undo-tree-id2916 . -1) 191) nil (26046 2402 21869 716000) 0 nil])
([nil nil ((191 . 194)) nil (26046 2402 21859 868000) 0 nil])
([nil nil ((#("?" 0 1 (face rust-question-mark fontified t)) . -193) (undo-tree-id2900 . -1) (undo-tree-id2901 . -1) (undo-tree-id2902 . -1) 194) nil (26046 2402 21859 45000) 0 nil])
([nil nil ((193 . 196)) nil (26046 2402 21856 46000) 0 nil])
([nil nil ((195 . 199) (#("S" 0 1 (fontified nil)) . 195) (195 . 196) (#("Self" 0 4 (fontified nil)) . -195) (195 . 199) (#("S" 0 1 (face font-lock-type-face fontified t)) . -195) (undo-tree-id2895 . -1) (undo-tree-id2896 . -1) (undo-tree-id2897 . -1) (undo-tree-id2898 . -1) (undo-tree-id2899 . -1) 196) nil (26046 2402 21854 924000) 0 nil])
([nil nil ((199 . 202)) nil (26046 2402 21849 923000) 0 nil])
([nil nil ((203 . 207) (#("        " 0 8 (fontified nil)) . 202) (202 . 210) (#("    " 0 4 (fontified nil)) . 202) (undo-tree-id2891 . -4) (undo-tree-id2892 . -4) (undo-tree-id2893 . -4) (undo-tree-id2894 . -4) (201 . 207)) nil (26046 2402 21848 850000) 0 nil])
([nil nil ((202 . 210)) nil (26046 2402 21844 705000) 0 nil])
([nil nil ((#("Self" 0 4 (face font-lock-type-face fontified t)) . -195) (undo-tree-id2882 . -4) (undo-tree-id2883 . -4) (undo-tree-id2884 . -4) (undo-tree-id2885 . -4) (undo-tree-id2886 . -4) (undo-tree-id2887 . -4) (undo-tree-id2888 . -4) (undo-tree-id2889 . -4) (undo-tree-id2890 . -4) 199) nil (26046 2402 21843 544000) 0 nil])
([nil nil ((195 . 196)) nil (26046 2402 21797 563000) 0 nil])
([nil nil ((apply yas--snippet-revive 195 202 #s(yas--snippet nil nil #s(yas--exit 201 nil) 24 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 201 nil) 24 nil nil nil nil)) (195 . 202) (#("MyBox<$0>" 0 9 (fontified nil)) . 195) (195 . 204) (#("M" 0 1 (fontified nil)) . 195) (195 . 196) (#("MyBox<…>" 0 8 (fontified nil)) . -195) (195 . 203) (#("M" 0 1 (face font-lock-type-face fontified t)) . -195) (undo-tree-id2877 . -1) (undo-tree-id2878 . -1) (undo-tree-id2879 . -1) (undo-tree-id2880 . -1) (undo-tree-id2881 . -1) 196) nil (26046 2402 21796 137000) 0 nil])
([nil nil ((201 . 202)) nil (26046 2402 21790 322000) 0 nil])
([nil nil ((214 . 215)) nil (26046 2402 21789 579000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -214) (undo-tree-id2872 . -1) (undo-tree-id2873 . -1) (undo-tree-id2874 . -1) (undo-tree-id2875 . -1) (undo-tree-id2876 . -1) 215) nil (26046 2402 21788 540000) 0 nil])
([nil nil ((214 . 215)) nil (26046 2402 21783 457000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 220 221 nil nil nil t #s(yas--exit 222 nil))) #s(yas--exit 222 nil) 25 nil #s(yas--field 1 220 221 nil nil nil t #s(yas--exit 222 nil)) nil nil)) (214 . 223) (#("MyBox(${1:()})$0" 0 16 (fontified nil)) . 214) (214 . 230) (#("M" 0 1 (fontified nil)) . 214) (214 . 215) (#("MyBox(…)" 0 8 (fontified nil)) . -214) (214 . 222) (#("M" 0 1 (face font-lock-type-face fontified t)) . -214) (undo-tree-id2867 . -1) (undo-tree-id2868 . -1) (undo-tree-id2869 . -1) (undo-tree-id2870 . -1) (undo-tree-id2871 . -1) 215) nil (26046 2402 21780 883000) 0 nil])
([nil nil ((#("()" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 221) (undo-tree-id2866 . -2) (220 . 221)) nil (26046 2402 21771 115000) 0 nil])
([nil nil ((apply yas--snippet-revive 214 222 #s(yas--snippet nil (#s(yas--field 1 220 221 nil nil nil t #s(yas--exit 222 nil))) #s(yas--exit 222 nil) 25 nil #s(yas--field 1 220 221 nil nil nil t #s(yas--exit 222 nil)) nil nil))) nil (26046 2407 870670 74000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t)) . -220) (undo-tree-id3484 . -1) (undo-tree-id3485 . -1) (undo-tree-id3486 . -1) (undo-tree-id3487 . -1) (undo-tree-id3488 . -1) (undo-tree-id3489 . -1) (undo-tree-id3490 . -1) (undo-tree-id3491 . -1) (undo-tree-id3492 . -1) (undo-tree-id3493 . -1) (undo-tree-id3494 . -1) (undo-tree-id3495 . -1) (undo-tree-id3496 . -1) 221 (t 26046 2402 66702 309000)) nil (26046 2407 870668 149000) 0 nil])
([nil nil ((220 . 222)) nil (26046 2407 870651 37000) 0 nil])
([nil nil ((221 . 222)) nil (26046 2407 870647 95000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -222) (undo-tree-id3503 . -1) (undo-tree-id3504 . -1) (undo-tree-id3505 . 1) (undo-tree-id3506 . -1) (undo-tree-id3507 . -1) (undo-tree-id3508 . -1) (undo-tree-id3509 . -1) (undo-tree-id3510 . -1) (undo-tree-id3511 . -1) (undo-tree-id3512 . -1) 223 (t 26046 2407 883369 329000)) nil (26046 2412 85211 697000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -220) (undo-tree-id3497 . -1) (undo-tree-id3498 . -1) (undo-tree-id3499 . -1) (undo-tree-id3500 . -1) (undo-tree-id3501 . -1) (undo-tree-id3502 . -1) 221) nil (26046 2412 85201 327000) 0 nil])
([nil nil ((220 . 221) (t 26046 2412 96702 918000)) nil (26046 2416 487551 23000) 0 nil])
([nil nil ((189 . 194) (t 26046 2416 500036 514000)) nil (26046 2437 995043 26000) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . -225) (undo-tree-id3513 . -1) (undo-tree-id3514 . -1) (undo-tree-id3515 . -1) 226 (t 26046 2438 10037 808000)) nil (26046 2440 550786 30000) 0 nil])
([nil nil ((#("MyBox" 0 5 (face font-lock-type-face fontified t)) . -298) (undo-tree-id3623 . -5) (undo-tree-id3624 . -5) (undo-tree-id3625 . -5) (undo-tree-id3626 . -5) (undo-tree-id3627 . -5) (undo-tree-id3628 . -5) (undo-tree-id3629 . -5) 303 (t 26046 2440 593371 299000)) nil (26046 2458 718656 238000) 0 nil])
([nil nil ((298 . 299)) nil (26046 2458 718650 577000) 0 nil])
([nil nil ((298 . 303) (#("M" 0 1 (fontified nil)) . 298) (298 . 299) (#("MyBox" 0 5 (fontified nil)) . -298) (298 . 303) (#("M" 0 1 (face font-lock-type-face fontified t)) . -298) (undo-tree-id3617 . -1) (undo-tree-id3618 . -1) (undo-tree-id3619 . -1) (undo-tree-id3620 . -1) (undo-tree-id3621 . -1) (undo-tree-id3622 . -1) 299) nil (26046 2458 718649 322000) 0 nil])
([nil nil ((303 . 306)) nil (26046 2458 718643 755000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 309 319 nil nil nil t #s(yas--exit 320 nil))) #s(yas--exit 320 nil) 26 nil #s(yas--field 1 309 319 nil nil nil t #s(yas--exit 320 nil)) nil nil)) (305 . 311) (#("new(${1:v})$0" 0 13 (fontified nil)) . 305) (305 . 318) (#("n" 0 1 (fontified nil)) . 305) (305 . 306) (#("new(…)" 0 6 (fontified nil)) . -305) (305 . 311) (#("n" 0 1 (fontified t)) . -305) (undo-tree-id3611 . -1) (undo-tree-id3612 . -1) (undo-tree-id3613 . -1) (undo-tree-id3614 . -1) (undo-tree-id3615 . -1) (undo-tree-id3616 . -1) 306) nil (26046 2458 718642 385000) 0 nil])
([nil nil ((310 . 314) (#("v" 0 1 (fontified nil)) . 310) (undo-tree-id3610 . -1) (309 . 310)) nil (26046 2458 718635 858000) 0 nil])
([nil nil ((#("mut " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -310) (undo-tree-id3588 . -4) (undo-tree-id3589 . -4) (undo-tree-id3590 . -4) (undo-tree-id3591 . -1) (undo-tree-id3592 . -1) (undo-tree-id3593 . -1) (undo-tree-id3594 . -2) (undo-tree-id3595 . -2) (undo-tree-id3596 . -3) (undo-tree-id3597 . -3) (undo-tree-id3598 . -4) (undo-tree-id3599 . -4) (undo-tree-id3600 . -4) (undo-tree-id3601 . -4) (undo-tree-id3602 . -4) (undo-tree-id3603 . -4) (undo-tree-id3604 . -4) (undo-tree-id3605 . -4) (undo-tree-id3606 . -4) (undo-tree-id3607 . -4) (undo-tree-id3608 . -4) (undo-tree-id3609 . -4) 314) nil (26046 2458 718633 235000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . -309) (undo-tree-id3562 . -1) (undo-tree-id3563 . -1) (undo-tree-id3564 . -1) (undo-tree-id3565 . -1) (undo-tree-id3566 . -1) (undo-tree-id3567 . -1) (undo-tree-id3568 . -1) (undo-tree-id3569 . -1) (undo-tree-id3570 . -1) (undo-tree-id3571 . -1) (undo-tree-id3572 . -1) (undo-tree-id3573 . -1) (undo-tree-id3574 . -1) (undo-tree-id3575 . -1) (undo-tree-id3576 . -1) (undo-tree-id3577 . -1) (undo-tree-id3578 . -1) (undo-tree-id3579 . -1) (undo-tree-id3580 . -1) (undo-tree-id3581 . -1) (undo-tree-id3582 . -1) (undo-tree-id3583 . -1) (undo-tree-id3584 . -1) (undo-tree-id3585 . -1) (undo-tree-id3586 . -1) (undo-tree-id3587 . -1) 310) nil (26046 2458 718479 302000) 0 nil])
([nil nil ((309 . 310)) nil (26046 2458 718461 428000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . -309) (undo-tree-id3557 . -1) (undo-tree-id3558 . -1) (undo-tree-id3559 . -1) (undo-tree-id3560 . -1) (undo-tree-id3561 . -1) 310) nil (26046 2458 718460 468000) 0 nil])
([nil nil ((309 . 314)) nil (26046 2458 718456 370000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -311) (undo-tree-id3524 . -1) (undo-tree-id3525 . -1) (undo-tree-id3526 . -1) (undo-tree-id3527 . -1) (undo-tree-id3528 . -1) (undo-tree-id3529 . -1) (undo-tree-id3530 . -1) (undo-tree-id3531 . -1) (undo-tree-id3532 . -1) (undo-tree-id3533 . -1) (undo-tree-id3534 . -1) (undo-tree-id3535 . -1) (undo-tree-id3536 . -1) (undo-tree-id3537 . -1) (undo-tree-id3538 . -1) (undo-tree-id3539 . -1) (undo-tree-id3540 . -1) (#("t" 0 1 (fontified t)) . -312) (undo-tree-id3541 . -1) (undo-tree-id3542 . -1) (undo-tree-id3543 . -1) (undo-tree-id3544 . -1) (undo-tree-id3545 . -1) (undo-tree-id3546 . -1) (undo-tree-id3547 . -1) (undo-tree-id3548 . -1) (undo-tree-id3549 . -1) (undo-tree-id3550 . -1) (#(" " 0 1 (fontified t)) . -313) (undo-tree-id3551 . -1) (undo-tree-id3552 . -1) (undo-tree-id3553 . -1) (undo-tree-id3554 . -1) (undo-tree-id3555 . -1) (undo-tree-id3556 . -1) 314) nil (26046 2458 718453 960000) 0 nil])
([nil nil ((311 . 315)) nil (26046 2458 718431 469000) 0 nil])
([nil nil ((314 . 319) (#("a" 0 1 (fontified nil)) . 314) (undo-tree-id3516 . -1) (314 . 315) (#("array" 0 5 (fontified nil)) . -314) (undo-tree-id3517 . -5) (314 . 319) (#("a" 0 1 (fontified t)) . -314) (undo-tree-id3518 . -1) (undo-tree-id3519 . -1) (undo-tree-id3520 . -1) (undo-tree-id3521 . -1) (undo-tree-id3522 . -1) (undo-tree-id3523 . -1) 315) nil (26046 2458 718429 172000) 0 nil])
([nil nil ((apply yas--snippet-revive 305 320 #s(yas--snippet nil (#s(yas--field 1 309 319 nil nil nil t #s(yas--exit 320 nil))) #s(yas--exit 320 nil) 26 nil #s(yas--field 1 309 319 nil nil nil t #s(yas--exit 320 nil)) nil nil))) nil (26046 2458 718415 139000) 0 nil])
([nil nil ((320 . 321)) nil (26046 2458 718410 688000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . -474) (undo-tree-id3648 . -1) (undo-tree-id3649 . -1) 475 (t 26046 2458 763372 401000)) nil (26046 2500 934194 734000) 0 nil])
([nil nil ((484 . 486)) nil (26046 2500 934192 332000) 0 nil])
([nil nil ((485 . 487) (#("0" 0 1 (fontified t)) . -485) (undo-tree-id3642 . -1) (undo-tree-id3643 . -1) (undo-tree-id3644 . -1) (undo-tree-id3645 . -1) (undo-tree-id3646 . -1) (undo-tree-id3647 . -1) 486) nil (26046 2500 934191 23000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -486) (undo-tree-id3630 . -1) (undo-tree-id3631 . -1) (undo-tree-id3632 . -1) (undo-tree-id3633 . -1) (undo-tree-id3634 . -1) (undo-tree-id3635 . -1) (undo-tree-id3636 . -1) (undo-tree-id3637 . -1) (undo-tree-id3638 . -1) (undo-tree-id3639 . -1) (undo-tree-id3640 . -1) (undo-tree-id3641 . -1) 487) nil (26046 2500 934183 989000) 0 nil])
([nil nil ((474 . 475)) nil (26046 2500 934166 431000) 0 nil])
([nil nil ((#("mut " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -74) (undo-tree-id3701 . -4) (undo-tree-id3702 . -4) (undo-tree-id3703 . -3) (undo-tree-id3704 . -3) (undo-tree-id3705 . -3) (undo-tree-id3706 . -3) (undo-tree-id3707 . -3) (undo-tree-id3708 . -4) (undo-tree-id3709 . -4) (undo-tree-id3710 . -4) (undo-tree-id3711 . -4) (undo-tree-id3712 . -4) (undo-tree-id3713 . -4) (undo-tree-id3714 . -4) (undo-tree-id3715 . -4) (undo-tree-id3716 . -4) 78 (t 26046 2500 946708 287000)) nil (26046 2551 108965 642000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . -73) (undo-tree-id3674 . -1) (undo-tree-id3675 . -1) (undo-tree-id3676 . -1) (undo-tree-id3677 . -1) (undo-tree-id3678 . -1) (undo-tree-id3679 . -1) (undo-tree-id3680 . -1) (undo-tree-id3681 . -1) (undo-tree-id3682 . -1) (undo-tree-id3683 . -1) (undo-tree-id3684 . -1) (undo-tree-id3685 . -1) (undo-tree-id3686 . -1) (undo-tree-id3687 . -1) (undo-tree-id3688 . -1) (undo-tree-id3689 . -1) (undo-tree-id3690 . -1) (undo-tree-id3691 . -1) (undo-tree-id3692 . -1) (undo-tree-id3693 . -1) (undo-tree-id3694 . -1) (undo-tree-id3695 . -1) (undo-tree-id3696 . -1) (undo-tree-id3697 . -1) (undo-tree-id3698 . -1) (undo-tree-id3699 . -1) (undo-tree-id3700 . -1) 74) nil (26046 2551 108952 625000) 0 nil])
([nil nil ((#("mut " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -185) (undo-tree-id3663 . -1) (undo-tree-id3664 . -4) (undo-tree-id3665 . -1) (undo-tree-id3666 . -1) (undo-tree-id3667 . -1) (undo-tree-id3668 . -1) (undo-tree-id3669 . -1) (undo-tree-id3670 . -1) (undo-tree-id3671 . -2) (undo-tree-id3672 . -3) (undo-tree-id3673 . -4) 189) nil (26046 2551 108932 291000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . -184) (undo-tree-id3650 . -1) (undo-tree-id3651 . -1) (undo-tree-id3652 . -1) (undo-tree-id3653 . -1) (undo-tree-id3654 . -1) (undo-tree-id3655 . -1) (undo-tree-id3656 . -1) (undo-tree-id3657 . -1) (undo-tree-id3658 . -1) (undo-tree-id3659 . -1) (undo-tree-id3660 . -1) (undo-tree-id3661 . -1) (undo-tree-id3662 . -1) 185) nil (26046 2551 108920 835000) 0 nil])
([nil nil ((248 . 252) (t 26046 2551 123377 985000)) nil (26046 2585 985122 274000) 0 nil])
([nil nil ((#("struct MyBox<T>(T);

unsafe impl<T> Send for MyBox<T> {}
unsafe impl<T> Sync for MyBox<T> {}

impl<T> MyBox<T> {
    fn new(v: T) -> MyBox<T> {
        MyBox(v)
    }
}
" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 12 (face font-lock-type-face fontified t) 12 13 (face (rainbow-delimiters-depth-1-face) fontified t) 13 14 (face font-lock-type-face fontified t) 14 15 (face (rainbow-delimiters-depth-1-face) fontified t) 15 16 (face (rainbow-delimiters-depth-1-face) fontified t) 16 17 (face font-lock-type-face fontified t) 17 18 (face (rainbow-delimiters-depth-1-face) fontified t) 18 20 (fontified t) 20 21 (fontified t) 21 27 (face rust-unsafe fontified t) 27 28 (fontified t) 28 32 (face font-lock-keyword-face fontified t) 32 33 (face (rainbow-delimiters-depth-1-face) fontified t) 33 34 (face font-lock-type-face fontified t) 34 35 (face (rainbow-delimiters-depth-1-face) fontified t) 35 36 (fontified t) 36 40 (face font-lock-type-face fontified t) 40 41 (fontified t) 41 44 (face font-lock-keyword-face fontified t) 44 45 (fontified t) 45 50 (face font-lock-type-face fontified t) 50 51 (face (rainbow-delimiters-depth-1-face) fontified t) 51 52 (face font-lock-type-face fontified t) 52 53 (face (rainbow-delimiters-depth-1-face) fontified t) 53 54 (fontified t) 54 55 (face (rainbow-delimiters-depth-1-face) fontified t) 55 56 (face (rainbow-delimiters-depth-1-face) fontified t) 56 57 (fontified t) 57 63 (face rust-unsafe fontified t) 63 64 (fontified t) 64 68 (face font-lock-keyword-face fontified t) 68 69 (face (rainbow-delimiters-depth-1-face) fontified t) 69 70 (face font-lock-type-face fontified t) 70 71 (face (rainbow-delimiters-depth-1-face) fontified t) 71 72 (fontified t) 72 76 (face font-lock-type-face fontified t) 76 77 (fontified t) 77 80 (face font-lock-keyword-face fontified t) 80 81 (fontified t) 81 86 (face font-lock-type-face fontified t) 86 87 (face (rainbow-delimiters-depth-1-face) fontified t) 87 88 (face font-lock-type-face fontified t) 88 89 (face (rainbow-delimiters-depth-1-face) fontified t) 89 90 (fontified t) 90 91 (face (rainbow-delimiters-depth-1-face) fontified t) 91 92 (face (rainbow-delimiters-depth-1-face) fontified t rear-nonsticky t) 92 93 (fontified t) 93 94 (fontified t) 94 98 (face font-lock-keyword-face fontified t) 98 99 (face (rainbow-delimiters-depth-1-face) fontified t) 99 100 (face font-lock-type-face fontified t) 100 101 (face (rainbow-delimiters-depth-1-face) fontified t) 101 102 (fontified t) 102 107 (face font-lock-type-face fontified t) 107 108 (face (rainbow-delimiters-depth-1-face) fontified t) 108 109 (face font-lock-type-face fontified t) 109 110 (face (rainbow-delimiters-depth-1-face) fontified t) 110 111 (fontified t) 111 112 (face (rainbow-delimiters-depth-1-face) fontified t) 112 113 (fontified t) 113 117 (fontified t) 117 119 (face font-lock-keyword-face fontified t) 119 120 (fontified t) 120 123 (face font-lock-function-name-face fontified t) 123 124 (face (rainbow-delimiters-depth-2-face) fontified t) 124 125 (face font-lock-variable-name-face fontified t) 125 127 (fontified t) 127 128 (face font-lock-type-face fontified t) 128 129 (face (rainbow-delimiters-depth-2-face) fontified t) 129 131 (fontified t) 131 132 (syntax-table (1) fontified t) 132 133 (fontified t) 133 138 (face font-lock-type-face fontified t) 138 139 (face (rainbow-delimiters-depth-2-face) fontified t) 139 140 (face font-lock-type-face fontified t) 140 141 (face (rainbow-delimiters-depth-2-face) fontified t) 141 142 (fontified t) 142 143 (face (rainbow-delimiters-depth-2-face) fontified t) 143 144 (fontified t) 144 152 (fontified t) 152 157 (face font-lock-type-face fontified t) 157 158 (face (rainbow-delimiters-depth-3-face) fontified t) 158 159 (fontified t) 159 160 (face (rainbow-delimiters-depth-3-face) fontified t) 160 161 (fontified t) 161 165 (fontified t) 165 166 (face (rainbow-delimiters-depth-2-face) fontified t) 166 167 (fontified t) 167 168 (face (rainbow-delimiters-depth-1-face) fontified t) 168 169 (fontified t)) . 57) (undo-tree-id3863 . -169) (undo-tree-id3864 . -53) (undo-tree-id3865 . -21) (undo-tree-id3866 . -57) (undo-tree-id3867 . -93) (undo-tree-id3868 . -168) (undo-tree-id3869 . -169) (undo-tree-id3870 . -169) (undo-tree-id3871 . -169) (undo-tree-id3872 . -169) (undo-tree-id3873 . -168) (undo-tree-id3874 . -166) (undo-tree-id3875 . -165) (undo-tree-id3876 . -147) (undo-tree-id3877 . -146) (undo-tree-id3878 . -114) (undo-tree-id3879 . -93) (undo-tree-id3880 . -58) (undo-tree-id3881 . -57) (undo-tree-id3882 . -169) (t 26046 2586 30046 764000)) nil (26046 2639 393701 302000) 0 nil])
([nil nil ((57 . 58)) nil (26046 2639 393688 121000) 0 nil])
([nil nil ((58 . 60)) nil (26046 2639 393687 630000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -59) (undo-tree-id3860 . -1) (undo-tree-id3861 . -1) (undo-tree-id3862 . -1) 60) nil (26046 2639 393686 846000) 0 nil])
([nil nil ((59 . 66)) nil (26046 2639 393684 263000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-type-face fontified t)) . -65) (undo-tree-id3850 . -1) (undo-tree-id3851 . -1) (undo-tree-id3852 . -1) (undo-tree-id3853 . -1) (undo-tree-id3854 . -1) (undo-tree-id3855 . -1) (undo-tree-id3856 . -1) (undo-tree-id3857 . -1) (undo-tree-id3858 . -1) (undo-tree-id3859 . -1) 66) nil (26046 2639 393683 218000) 0 nil])
([nil nil ((65 . 67)) nil (26046 2639 393676 151000) 0 nil])
([nil nil ((#("O" 0 1 (face font-lock-type-face fontified t)) . -66) (undo-tree-id3847 . -1) (undo-tree-id3848 . -1) (undo-tree-id3849 . -1) 67) nil (26046 2639 393675 306000) 0 nil])
([nil nil ((66 . 70)) nil (26046 2639 393672 589000) 0 nil])
([nil nil ((69 . 70)) nil (26046 2639 393671 926000) 0 nil])
([nil nil ((71 . 72)) nil (26046 2639 393671 224000) 0 nil])
([nil nil ((#(">" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -70) (undo-tree-id3820 . -1) (undo-tree-id3821 . -1) (undo-tree-id3822 . 1) (undo-tree-id3823 . -1) (undo-tree-id3824 . -1) (undo-tree-id3825 . -1) (undo-tree-id3826 . -1) (undo-tree-id3827 . -1) (undo-tree-id3828 . -1) (undo-tree-id3829 . -1) (undo-tree-id3830 . -1) (undo-tree-id3831 . -1) (undo-tree-id3832 . -1) (undo-tree-id3833 . -1) (undo-tree-id3834 . -1) (undo-tree-id3835 . -1) (undo-tree-id3836 . -1) (#(" " 0 1 (fontified t)) . -71) (undo-tree-id3837 . -1) (undo-tree-id3838 . -1) (undo-tree-id3839 . -1) (undo-tree-id3840 . -1) (undo-tree-id3841 . -1) (undo-tree-id3842 . -1) (undo-tree-id3843 . -1) (undo-tree-id3844 . -1) (undo-tree-id3845 . -1) (undo-tree-id3846 . -1) 72) nil (26046 2639 393669 200000) 0 nil])
([nil nil ((#("type MyBox<T" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 10 (face font-lock-type-face fontified t) 10 11 (face (rainbow-delimiters-depth-1-face) fontified t) 11 12 (face font-lock-type-face fontified t)) . 58) (undo-tree-id3719 . -1) (undo-tree-id3720 . -1) (undo-tree-id3721 . -1) (undo-tree-id3722 . -1) (undo-tree-id3723 . -1) (undo-tree-id3724 . -1) (undo-tree-id3725 . -2) (undo-tree-id3726 . -2) (undo-tree-id3727 . -3) (undo-tree-id3728 . -3) (undo-tree-id3729 . -4) (undo-tree-id3730 . -4) (undo-tree-id3731 . -5) (undo-tree-id3732 . -5) (undo-tree-id3733 . -6) (undo-tree-id3734 . -6) (undo-tree-id3735 . -6) (undo-tree-id3736 . -6) (undo-tree-id3737 . -6) (undo-tree-id3738 . -6) (undo-tree-id3739 . -6) (undo-tree-id3740 . -6) (undo-tree-id3741 . -7) (undo-tree-id3742 . -7) (undo-tree-id3743 . -7) (undo-tree-id3744 . -7) (undo-tree-id3745 . -7) (undo-tree-id3746 . -7) (undo-tree-id3747 . -7) (undo-tree-id3748 . -7) (undo-tree-id3749 . -7) (undo-tree-id3750 . -7) (undo-tree-id3751 . -7) (undo-tree-id3752 . -7) (undo-tree-id3753 . -7) (undo-tree-id3754 . -7) (undo-tree-id3755 . -7) (undo-tree-id3756 . -7) (undo-tree-id3757 . -7) (undo-tree-id3758 . -7) (undo-tree-id3759 . -7) (undo-tree-id3760 . -7) (undo-tree-id3761 . -8) (undo-tree-id3762 . -8) (undo-tree-id3763 . -8) (undo-tree-id3764 . -8) (undo-tree-id3765 . -8) (undo-tree-id3766 . -8) (undo-tree-id3767 . -8) (undo-tree-id3768 . -8) (undo-tree-id3769 . -8) (undo-tree-id3770 . -8) (undo-tree-id3771 . -8) (undo-tree-id3772 . -8) (undo-tree-id3773 . -8) (undo-tree-id3774 . -9) (undo-tree-id3775 . -9) (undo-tree-id3776 . -10) (undo-tree-id3777 . -10) (undo-tree-id3778 . -10) (undo-tree-id3779 . -10) (undo-tree-id3780 . -10) (undo-tree-id3781 . -10) (undo-tree-id3782 . -10) (undo-tree-id3783 . -10) (undo-tree-id3784 . -10) (undo-tree-id3785 . -11) (undo-tree-id3786 . -11) (undo-tree-id3787 . -11) (undo-tree-id3788 . -11) (undo-tree-id3789 . -11) (undo-tree-id3790 . -12) (undo-tree-id3791 . -11) (undo-tree-id3792 . -11) (undo-tree-id3793 . -11) (undo-tree-id3794 . -12) (undo-tree-id3795 . -12) (undo-tree-id3796 . -12) (undo-tree-id3797 . -12) (undo-tree-id3798 . -12) (undo-tree-id3799 . -12) (undo-tree-id3800 . -12) (undo-tree-id3801 . -12) (undo-tree-id3802 . -12) (undo-tree-id3803 . -12) (undo-tree-id3804 . -12) (undo-tree-id3805 . -12) (undo-tree-id3806 . -12) (undo-tree-id3807 . -12) (undo-tree-id3808 . -12) (undo-tree-id3809 . -12) (undo-tree-id3810 . -12) (undo-tree-id3811 . -12) (undo-tree-id3812 . -12) (undo-tree-id3813 . -12) (undo-tree-id3814 . -12) (undo-tree-id3815 . -12) (undo-tree-id3816 . -12) (undo-tree-id3817 . -12) (undo-tree-id3818 . -12) (undo-tree-id3819 . -12)) nil (26046 2639 393645 843000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 58) (undo-tree-id3717 . 1) (undo-tree-id3718 . -1)) nil (26046 2639 393257 388000) 0 nil])
([nil nil ((58 . 59) (t 26046 2639 406716 646000)) nil (26046 2694 673390 217000) 0 nil])
([nil nil ((58 . 64)) nil (26046 2694 673389 530000) 0 nil])
([nil nil ((#("M" 0 1 (face font-lock-type-face fontified t)) . -63) (undo-tree-id3887 . -1) (undo-tree-id3888 . -1) 64) nil (26046 2694 673388 717000) 0 nil])
([nil nil ((63 . 68)) nil (26046 2694 673386 260000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -67) (undo-tree-id3883 . -1) (undo-tree-id3884 . -1) (undo-tree-id3885 . -1) (undo-tree-id3886 . -1) 68) nil (26046 2694 673384 511000) 0 nil])
([nil nil ((67 . 72)) nil (26046 2694 673374 552000) 0 nil])
([nil nil ((71 . 78)) nil (26046 2694 673373 41000) 0 nil])
([nil nil ((79 . 80)) nil (26046 2694 673368 767000) 0 nil])
([nil nil ((80 . 81) (t 26046 2694 686720 12000)) nil (26046 2698 600657 224000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -71) (undo-tree-id3889 . -1) (undo-tree-id3890 . -1) 72) nil (26046 2698 600651 713000) 0 nil])
([nil nil ((80 . 83) (t 26046 2698 643386 921000)) nil (26046 2723 778113 283000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -80) (undo-tree-id4044 . -1) (undo-tree-id4045 . -1) (undo-tree-id4046 . -1) (undo-tree-id4047 . -1) (undo-tree-id4048 . -1) (undo-tree-id4049 . -1) (undo-tree-id4050 . -1) (undo-tree-id4051 . -1) (undo-tree-id4052 . -1) (undo-tree-id4053 . -1) (undo-tree-id4054 . -1) (undo-tree-id4055 . -1) (undo-tree-id4056 . -1) (undo-tree-id4057 . -1) (undo-tree-id4058 . -1) (#("m" 0 1 (fontified t)) . -81) (undo-tree-id4059 . -1) (undo-tree-id4060 . -1) (undo-tree-id4061 . -1) (undo-tree-id4062 . -1) (undo-tree-id4063 . -1) (undo-tree-id4064 . -1) (undo-tree-id4065 . -1) (undo-tree-id4066 . -1) (undo-tree-id4067 . -1) (undo-tree-id4068 . -1) (undo-tree-id4069 . -1) (#("p" 0 1 (fontified t)) . -82) (undo-tree-id4070 . -1) (undo-tree-id4071 . -1) (undo-tree-id4072 . -1) (undo-tree-id4073 . -1) (undo-tree-id4074 . -1) (undo-tree-id4075 . -1) 83) nil (26046 2723 778111 493000) 0 nil])
([nil nil ((80 . 83)) nil (26046 2723 778092 846000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -81) (undo-tree-id4033 . -1) (undo-tree-id4034 . -1) (undo-tree-id4035 . -1) (undo-tree-id4036 . -1) (undo-tree-id4037 . -1) (undo-tree-id4038 . -1) (undo-tree-id4039 . -1) (undo-tree-id4040 . -1) (#("n" 0 1 (fontified t)) . -82) (undo-tree-id4041 . -1) (undo-tree-id4042 . -1) (undo-tree-id4043 . -1) 83) nil (26046 2723 778091 953000) 0 nil])
([nil nil ((81 . 83)) nil (26046 2723 778085 163000) 0 nil])
([nil nil ((apply yas--snippet-revive 80 86 #s(yas--snippet nil nil nil 27 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 27 nil nil nil nil)) (80 . 86) (#("unsafe" 0 6 (fontified nil)) . 80) (80 . 86) (#("uns" 0 3 (fontified nil)) . 80) (80 . 83) (#("unsafe" 0 6 (fontified nil)) . -80) (80 . 86) (#("uns" 0 3 (fontified t)) . -80) (undo-tree-id4017 . -3) (undo-tree-id4018 . -1) (undo-tree-id4019 . -1) (undo-tree-id4020 . -1) (undo-tree-id4021 . -1) (undo-tree-id4022 . -1) (undo-tree-id4023 . -1) (undo-tree-id4024 . -1) (undo-tree-id4025 . -1) (undo-tree-id4026 . -1) (undo-tree-id4027 . -2) (undo-tree-id4028 . -2) (undo-tree-id4029 . -3) (undo-tree-id4030 . -3) (undo-tree-id4031 . -3) (undo-tree-id4032 . -3) 83) nil (26046 2723 778083 754000) 0 nil])
([nil nil ((86 . 90)) nil (26046 2723 778073 267000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 92 105 nil nil nil t #s(yas--exit 112 nil))) #s(yas--exit 112 nil) 28 nil #s(yas--field 1 92 105 nil nil nil t #s(yas--exit 112 nil)) nil nil)) (87 . 101) (#("impl $1 {
    $0
}" 0 18 (fontified nil)) . 87) (87 . 105) (#("imp" 0 3 (fontified nil)) . 87) (87 . 90) (#("impl" 0 4 (fontified nil)) . -87) (87 . 91) (#("imp" 0 3 (fontified t)) . -87) (undo-tree-id4007 . -3) (undo-tree-id4008 . -1) (undo-tree-id4009 . -1) (undo-tree-id4010 . -1) (undo-tree-id4011 . -2) (undo-tree-id4012 . -2) (undo-tree-id4013 . -3) (undo-tree-id4014 . -3) (undo-tree-id4015 . -3) (undo-tree-id4016 . -3) 90) nil (26046 2723 778072 28000) 0 nil])
([nil nil ((92 . 93)) nil (26046 2723 778064 384000) 0 nil])
([nil nil ((92 . 96) (#("S" 0 1 (fontified nil)) . 92) (undo-tree-id3998 . -1) (92 . 93) (#("Send" 0 4 (fontified nil)) . -92) (undo-tree-id3999 . -4) (92 . 96) (#("S" 0 1 (face font-lock-type-face fontified t)) . -92) (undo-tree-id4000 . -1) (undo-tree-id4001 . -1) (undo-tree-id4002 . -1) (undo-tree-id4003 . -1) (undo-tree-id4004 . -1) (undo-tree-id4005 . -1) (undo-tree-id4006 . -1) 93) nil (26046 2723 778063 125000) 0 nil])
([nil nil ((96 . 102)) nil (26046 2723 778057 31000) 0 nil])
([nil nil ((101 . 105) (#("D" 0 1 (fontified nil)) . 101) (undo-tree-id3991 . -1) (101 . 102) (#("Data" 0 4 (fontified nil)) . -101) (undo-tree-id3992 . -4) (101 . 105) (#("D" 0 1 (face font-lock-type-face fontified t)) . -101) (undo-tree-id3993 . -1) (undo-tree-id3994 . -1) (undo-tree-id3995 . -1) (undo-tree-id3996 . -1) (undo-tree-id3997 . -1) 102) nil (26046 2723 778055 647000) 0 nil])
([nil nil ((apply yas--snippet-revive 87 114 #s(yas--snippet nil (#s(yas--field 1 92 105 nil nil nil t #s(yas--exit 112 nil))) #s(yas--exit 112 nil) 28 nil #s(yas--field 1 92 105 nil nil nil t #s(yas--exit 112 nil)) nil nil))) nil (26046 2723 778050 234000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -107) (undo-tree-id3902 . -1) (undo-tree-id3903 . -1) (undo-tree-id3904 . -1) (undo-tree-id3905 . -1) (undo-tree-id3906 . -1) (undo-tree-id3907 . -1) (undo-tree-id3908 . -1) (undo-tree-id3909 . -1) (undo-tree-id3910 . -1) (undo-tree-id3911 . -1) (undo-tree-id3912 . -1) (undo-tree-id3913 . -1) (undo-tree-id3914 . -1) (undo-tree-id3915 . -1) (undo-tree-id3916 . -1) (undo-tree-id3917 . -1) (undo-tree-id3918 . -1) (undo-tree-id3919 . -1) (undo-tree-id3920 . -1) (undo-tree-id3921 . -1) (undo-tree-id3922 . -1) (undo-tree-id3923 . -1) (#(" " 0 1 (fontified t)) . -108) (undo-tree-id3924 . -1) (undo-tree-id3925 . -1) (undo-tree-id3926 . -1) (undo-tree-id3927 . -1) (undo-tree-id3928 . -1) (undo-tree-id3929 . -1) (undo-tree-id3930 . -1) (undo-tree-id3931 . -1) (undo-tree-id3932 . -1) (undo-tree-id3933 . -1) (undo-tree-id3934 . -1) (undo-tree-id3935 . -1) (undo-tree-id3936 . -1) (undo-tree-id3937 . -1) (undo-tree-id3938 . -1) (undo-tree-id3939 . -1) (undo-tree-id3940 . -1) (undo-tree-id3941 . -1) (undo-tree-id3942 . -1) (#(" " 0 1 (fontified t)) . -109) (undo-tree-id3943 . -1) (undo-tree-id3944 . -1) (undo-tree-id3945 . -1) (undo-tree-id3946 . -1) (undo-tree-id3947 . -1) (undo-tree-id3948 . -1) (undo-tree-id3949 . -1) (undo-tree-id3950 . -1) (undo-tree-id3951 . -1) (undo-tree-id3952 . -1) (undo-tree-id3953 . -1) (undo-tree-id3954 . -1) (undo-tree-id3955 . -1) (undo-tree-id3956 . -1) (undo-tree-id3957 . -1) (undo-tree-id3958 . -1) (undo-tree-id3959 . -1) (#(" " 0 1 (fontified t)) . -110) (undo-tree-id3960 . -1) (undo-tree-id3961 . -1) (undo-tree-id3962 . -1) (undo-tree-id3963 . -1) (undo-tree-id3964 . -1) (undo-tree-id3965 . -1) (undo-tree-id3966 . -1) (undo-tree-id3967 . -1) (undo-tree-id3968 . -1) (undo-tree-id3969 . -1) (undo-tree-id3970 . -1) (undo-tree-id3971 . -1) (undo-tree-id3972 . -1) (undo-tree-id3973 . -1) (undo-tree-id3974 . -1) (#(" " 0 1 (fontified t)) . -111) (undo-tree-id3975 . -1) (undo-tree-id3976 . -1) (undo-tree-id3977 . -1) (undo-tree-id3978 . -1) (undo-tree-id3979 . -1) (undo-tree-id3980 . -1) (undo-tree-id3981 . -1) (undo-tree-id3982 . -1) (undo-tree-id3983 . -1) (undo-tree-id3984 . -1) (undo-tree-id3985 . -1) (undo-tree-id3986 . -1) (undo-tree-id3987 . -1) (#("
" 0 1 (fontified t)) . -112) (undo-tree-id3988 . -1) (undo-tree-id3989 . -1) (undo-tree-id3990 . -1) 113) nil (26046 2723 778046 490000) 0 nil])
([nil nil ((108 . 109)) nil (26046 2723 777922 504000) 0 nil])
([nil nil ((nil rear-nonsticky nil 136 . 137) (nil fontified nil 136 . 137) (nil fontified nil 135 . 136) (nil fontified nil 134 . 135) (nil fontified nil 130 . 134) (nil fontified nil 129 . 130) (nil fontified nil 126 . 129) (nil fontified nil 125 . 126) (nil fontified nil 121 . 125) (nil fontified nil 120 . 121) (nil fontified nil 116 . 120) (nil fontified nil 115 . 116) (nil fontified nil 109 . 115) (109 . 137)) nil (26046 2723 777921 504000) 0 nil])
([nil nil ((#("Send" 0 4 (face font-lock-type-face fontified t)) . -121) (undo-tree-id3900 . -4) (undo-tree-id3901 . -4) 125) nil (26046 2723 777919 202000) 0 nil])
([nil nil ((121 . 123)) nil (26046 2723 777916 128000) 0 nil])
([nil nil ((121 . 125) (#("Sy" 0 2 (fontified nil)) . 121) (121 . 123) (#("Sync" 0 4 (fontified nil)) . -121) (121 . 125) (#("Sy" 0 2 (face font-lock-type-face fontified t)) . -121) (undo-tree-id3891 . -2) (undo-tree-id3892 . -1) (undo-tree-id3893 . -1) (undo-tree-id3894 . -1) (undo-tree-id3895 . -1) (undo-tree-id3896 . -2) (undo-tree-id3897 . -2) (undo-tree-id3898 . -2) (undo-tree-id3899 . -2) 123) nil (26046 2723 777912 180000) 0 nil])
([nil nil ((#("unsafe " 0 6 (face rust-unsafe fontified t) 6 7 (fontified t)) . -80) (undo-tree-id4076 . -7) (undo-tree-id4077 . -7) (undo-tree-id4078 . -7) (undo-tree-id4079 . -7) (undo-tree-id4080 . -7) (undo-tree-id4081 . -7) (undo-tree-id4082 . -7) (undo-tree-id4083 . -7) (undo-tree-id4084 . -7) (undo-tree-id4085 . -7) (undo-tree-id4086 . -7) 87 (t 26046 2723 783388 447000)) nil (26046 2759 461675 433000) 0 nil])
([nil nil ((80 . 81) (t 26046 2759 506723 961000)) nil (26046 2765 905673 369000) 0 nil])
([nil nil ((80 . 83)) nil (26046 2765 905671 758000) 0 nil])
([nil nil ((apply yas--snippet-revive 80 86 #s(yas--snippet nil nil nil 29 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 29 nil nil nil nil)) (80 . 86) (#("unsafe" 0 6 (fontified nil)) . 80) (80 . 86) (#("uns" 0 3 (fontified nil)) . 80) (80 . 83) (#("unsafe" 0 6 (fontified nil)) . -80) (80 . 86) (#("uns" 0 3 (fontified t)) . -80) (undo-tree-id4087 . -3) (undo-tree-id4088 . -1) (undo-tree-id4089 . -1) (undo-tree-id4090 . -1) (undo-tree-id4091 . -2) (undo-tree-id4092 . -2) (undo-tree-id4093 . -3) (undo-tree-id4094 . -3) (undo-tree-id4095 . -3) (undo-tree-id4096 . -3) (undo-tree-id4097 . -3) (undo-tree-id4098 . -3) 83) nil (26046 2765 905667 489000) 0 nil])
([nil nil ((#("type Data = [u8; 64];" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 9 (face font-lock-type-face fontified t) 9 12 (fontified t) 12 13 (face (rainbow-delimiters-depth-1-face) fontified t) 13 15 (face font-lock-type-face fontified t) 15 19 (fontified t) 19 20 (face (rainbow-delimiters-depth-1-face) fontified t) 20 21 (fontified t)) . 58) (undo-tree-id4130 . -6) (undo-tree-id4131 . -6) (undo-tree-id4132 . -6) (undo-tree-id4133 . -6) (undo-tree-id4134 . -6) (undo-tree-id4135 . -6) (undo-tree-id4136 . -6) (undo-tree-id4137 . -9) (undo-tree-id4138 . -15) (undo-tree-id4139 . -19) (undo-tree-id4140 . -19) (undo-tree-id4141 . -19) (undo-tree-id4142 . -19) (undo-tree-id4143 . -19) (undo-tree-id4144 . -19) (undo-tree-id4145 . -19) (undo-tree-id4146 . -20) (undo-tree-id4147 . -21) (undo-tree-id4148 . -21) (t 26046 2765 920057 684000)) nil (26046 2773 109297 439000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 58) (undo-tree-id4117 . -1) (undo-tree-id4118 . -1) (undo-tree-id4119 . -1) (undo-tree-id4120 . -1) (undo-tree-id4121 . -1) (undo-tree-id4122 . -1) (undo-tree-id4123 . -1) (undo-tree-id4124 . -1) (undo-tree-id4125 . -1) (undo-tree-id4126 . -1) (undo-tree-id4127 . -1) (undo-tree-id4128 . -1) (undo-tree-id4129 . -1)) nil (26046 2773 109284 205000) 0 nil])
([nil nil ((#("unsafe impl Send for Data {}" 0 6 (face rust-unsafe fontified t) 6 7 (fontified t) 7 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 16 (face font-lock-type-face fontified t) 16 17 (fontified t) 17 20 (face font-lock-keyword-face fontified t) 20 21 (fontified t) 21 25 (face font-lock-type-face fontified t) 25 26 (fontified t) 26 27 (face (rainbow-delimiters-depth-1-face) fontified t) 27 28 (face (rainbow-delimiters-depth-1-face) fontified t)) . 58) (undo-tree-id4105 . -6) (undo-tree-id4106 . -6) (undo-tree-id4107 . -6) (undo-tree-id4108 . -6) (undo-tree-id4109 . -6) (undo-tree-id4110 . -6) (undo-tree-id4111 . -6) (undo-tree-id4112 . -6) (undo-tree-id4113 . -6) (undo-tree-id4114 . -6) (undo-tree-id4115 . -6) (undo-tree-id4116 . -28)) nil (26046 2773 109275 553000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 58) (undo-tree-id4102 . -1) (undo-tree-id4103 . -1) (undo-tree-id4104 . -1)) nil (26046 2773 109267 20000) 0 nil])
([nil nil ((#("unsafe impl Sync for Data {}" 0 6 (face rust-unsafe fontified t) 6 7 (fontified t) 7 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 16 (face font-lock-type-face fontified t) 16 17 (fontified t) 17 20 (face font-lock-keyword-face fontified t) 20 21 (fontified t) 21 25 (face font-lock-type-face fontified t) 25 26 (fontified t) 26 27 (face (rainbow-delimiters-depth-1-face) fontified t) 27 28 (face (rainbow-delimiters-depth-1-face) fontified t rear-nonsticky t)) . 58) (undo-tree-id4101 . -28)) nil (26046 2773 109263 729000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 58) (undo-tree-id4100 . -1)) nil (26046 2773 109261 431000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 58) (undo-tree-id4099 . -1)) nil (26046 2773 109256 632000) 0 nil])
([nil nil ((57 . 58) (t 26046 2773 153391 448000)) nil (26046 2855 373359 968000) 0 nil])
([nil nil ((#("let array = *array_copy.0;" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 9 (face font-lock-variable-name-face fontified t) 9 13 (fontified t) 13 24 (fontified t) 24 25 (fontified t) 25 26 (fontified t)) . 287) (undo-tree-id4153 . -15) (undo-tree-id4154 . -26)) nil (26046 2857 263655 633000) 0 nil] [nil nil ((287 . 288)) ((#("
" 0 1 (fontified t)) . 287) (undo-tree-id4149 . -1) (undo-tree-id4150 . -1) (undo-tree-id4151 . -1)) (26046 2855 373172 690000) 0 nil])
([nil nil ((#("let array_copy = MyBox::new(&mut array);" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 14 (face font-lock-variable-name-face fontified t) 14 17 (fontified t) 17 22 (face font-lock-type-face fontified t) 22 24 (fontified t) 24 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-2-face) fontified t) 28 29 (face rust-ampersand-face fontified t) 29 32 (face font-lock-keyword-face fontified t) 32 33 (fontified t) 33 38 (fontified t) 38 39 (face (rainbow-delimiters-depth-2-face) fontified t) 39 40 (fontified t)) . 106) (undo-tree-id4155 . -14) (undo-tree-id4156 . -14) (undo-tree-id4157 . -14) (undo-tree-id4158 . -14) (undo-tree-id4159 . -28) (undo-tree-id4160 . -34) (undo-tree-id4161 . -12) (undo-tree-id4162 . -40) (t 26046 2857 690063 237000)) nil (26046 2860 921365 493000) 0 nil] [nil nil ((#("
" 0 1 (fontified t)) . 287) (undo-tree-id4152 . -1)) ((287 . 288)) (26046 2857 263448 484000) 0 nil])
nil
([nil nil ((106 . 107)) nil (26046 2860 921349 373000) 0 nil])
nil
([nil nil ((#("use std::ops::Deref;" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 7 (face font-lock-constant-face fontified t) 7 9 (fontified t) 9 12 (face font-lock-constant-face fontified t) 12 14 (fontified t) 14 19 (face font-lock-type-face fontified t) 19 20 (fontified t)) . 36) (undo-tree-id4433 . -20) (t 26046 2860 933396 762000)) nil (26046 2913 478850 257000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 36) (undo-tree-id4430 . -1) (undo-tree-id4431 . -1) (undo-tree-id4432 . -1)) nil (26046 2913 478848 656000) 0 nil])
([nil nil ((36 . 38)) nil (26046 2913 478845 843000) 0 nil])
([nil nil ((37 . 39)) nil (26046 2913 478845 292000) 0 nil])
([nil nil ((apply yas--snippet-revive 37 44 #s(yas--snippet nil nil #s(yas--exit 44 nil) 30 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 44 nil) 30 nil nil nil nil)) (37 . 44) (#("struct $0" 0 9 (fontified nil)) . 37) (37 . 46) (#("st" 0 2 (fontified nil)) . 37) (37 . 39) (#("struct" 0 6 (fontified nil)) . -37) (37 . 43) (#("st" 0 2 (fontified t)) . -37) (undo-tree-id4417 . -2) (undo-tree-id4418 . -2) (undo-tree-id4419 . -1) (undo-tree-id4420 . -1) (undo-tree-id4421 . -2) (undo-tree-id4422 . -2) (undo-tree-id4423 . -2) (undo-tree-id4424 . -2) (undo-tree-id4425 . -2) (undo-tree-id4426 . -2) (undo-tree-id4427 . -2) (undo-tree-id4428 . -2) (undo-tree-id4429 . -2) 39) nil (26046 2913 478843 697000) 0 nil])
([nil nil ((44 . 50)) nil (26046 2913 478834 88000) 0 nil])
([nil nil ((#("{" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -48) (undo-tree-id4393 . -1) (undo-tree-id4394 . -1) (undo-tree-id4395 . -1) (undo-tree-id4396 . -1) (undo-tree-id4397 . -1) (undo-tree-id4398 . -1) (undo-tree-id4399 . -1) (undo-tree-id4400 . -1) (undo-tree-id4401 . -1) (undo-tree-id4402 . -1) (undo-tree-id4403 . -1) (undo-tree-id4404 . -1) (undo-tree-id4405 . -1) (undo-tree-id4406 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -49) (undo-tree-id4407 . -1) (undo-tree-id4408 . -1) (undo-tree-id4409 . -1) (undo-tree-id4410 . -1) (undo-tree-id4411 . -1) (undo-tree-id4412 . -1) (undo-tree-id4413 . -1) (undo-tree-id4414 . -1) (undo-tree-id4415 . -1) (undo-tree-id4416 . -1) 50) nil (26046 2913 478832 571000) 0 nil])
([nil nil ((48 . 51)) nil (26046 2913 478816 835000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -48) (undo-tree-id4372 . -1) (undo-tree-id4373 . -1) (undo-tree-id4374 . -1) (undo-tree-id4375 . -1) (undo-tree-id4376 . -1) (undo-tree-id4377 . -1) (undo-tree-id4378 . -1) (undo-tree-id4379 . -1) (undo-tree-id4380 . -1) (undo-tree-id4381 . -1) (undo-tree-id4382 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -49) (undo-tree-id4383 . -1) (undo-tree-id4384 . -1) (undo-tree-id4385 . -1) (undo-tree-id4386 . -1) (undo-tree-id4387 . -1) (undo-tree-id4388 . -1) (undo-tree-id4389 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -50) (undo-tree-id4390 . -1) (undo-tree-id4391 . -1) (undo-tree-id4392 . -1) 51) nil (26046 2913 478815 281000) 0 nil])
([nil nil ((48 . 50)) nil (26046 2913 478801 462000) 0 nil])
([nil nil ((49 . 53)) nil (26046 2913 478800 905000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . -49) (undo-tree-id4317 . -1) (undo-tree-id4318 . -1) (undo-tree-id4319 . -1) (undo-tree-id4320 . -1) (undo-tree-id4321 . -1) (undo-tree-id4322 . -1) (undo-tree-id4323 . -1) (undo-tree-id4324 . -1) (undo-tree-id4325 . -1) (undo-tree-id4326 . -1) (undo-tree-id4327 . -1) (undo-tree-id4328 . -1) (undo-tree-id4329 . -1) (undo-tree-id4330 . -1) (undo-tree-id4331 . -1) (undo-tree-id4332 . -1) (undo-tree-id4333 . -1) (undo-tree-id4334 . -1) (undo-tree-id4335 . -1) (undo-tree-id4336 . -1) (undo-tree-id4337 . -1) (undo-tree-id4338 . -1) (undo-tree-id4339 . -1) (undo-tree-id4340 . -1) (undo-tree-id4341 . -1) (undo-tree-id4342 . -1) (undo-tree-id4343 . -1) (undo-tree-id4344 . -1) (#("m" 0 1 (fontified t)) . -50) (undo-tree-id4345 . -1) (undo-tree-id4346 . -1) (undo-tree-id4347 . -1) (undo-tree-id4348 . -1) (undo-tree-id4349 . -1) (undo-tree-id4350 . -1) (undo-tree-id4351 . -1) (undo-tree-id4352 . -1) (undo-tree-id4353 . -1) (undo-tree-id4354 . -1) (undo-tree-id4355 . -1) (undo-tree-id4356 . -1) (undo-tree-id4357 . -1) (undo-tree-id4358 . -1) (#("u" 0 1 (fontified t)) . -51) (undo-tree-id4359 . -1) (undo-tree-id4360 . -1) (undo-tree-id4361 . -1) (undo-tree-id4362 . -1) (undo-tree-id4363 . -1) (undo-tree-id4364 . -1) (undo-tree-id4365 . -1) (undo-tree-id4366 . -1) (undo-tree-id4367 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -52) (undo-tree-id4368 . -1) (undo-tree-id4369 . -1) (undo-tree-id4370 . -1) (undo-tree-id4371 . -1) 53) nil (26046 2913 478798 280000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -48) (undo-tree-id4258 . -1) (undo-tree-id4259 . -1) (undo-tree-id4260 . -1) (undo-tree-id4261 . -1) (undo-tree-id4262 . -1) (undo-tree-id4263 . -1) (undo-tree-id4264 . -1) (undo-tree-id4265 . -1) (undo-tree-id4266 . -1) (undo-tree-id4267 . -1) (undo-tree-id4268 . -1) (undo-tree-id4269 . -1) (undo-tree-id4270 . -1) (undo-tree-id4271 . -1) (undo-tree-id4272 . -1) (undo-tree-id4273 . -1) (undo-tree-id4274 . -1) (undo-tree-id4275 . -1) (undo-tree-id4276 . -1) (undo-tree-id4277 . -1) (undo-tree-id4278 . -1) (undo-tree-id4279 . -1) (undo-tree-id4280 . -1) (undo-tree-id4281 . -1) (undo-tree-id4282 . -1) (undo-tree-id4283 . -1) (undo-tree-id4284 . -1) (undo-tree-id4285 . -1) (undo-tree-id4286 . -1) (undo-tree-id4287 . -1) (undo-tree-id4288 . -1) (undo-tree-id4289 . -1) (undo-tree-id4290 . -1) (undo-tree-id4291 . -1) (undo-tree-id4292 . -1) (undo-tree-id4293 . -1) (undo-tree-id4294 . -1) (undo-tree-id4295 . -1) (undo-tree-id4296 . -1) (undo-tree-id4297 . -1) (undo-tree-id4298 . -1) (undo-tree-id4299 . -1) (undo-tree-id4300 . -1) (undo-tree-id4301 . -1) (undo-tree-id4302 . -1) (undo-tree-id4303 . -1) (undo-tree-id4304 . -1) (undo-tree-id4305 . -1) (undo-tree-id4306 . -1) (undo-tree-id4307 . -1) (undo-tree-id4308 . -1) (undo-tree-id4309 . -1) (undo-tree-id4310 . -1) (undo-tree-id4311 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -49) (undo-tree-id4312 . -1) (undo-tree-id4313 . -1) (undo-tree-id4314 . -1) (undo-tree-id4315 . 1) (undo-tree-id4316 . -1) 50) nil (26046 2913 478747 396000) 0 nil])
([nil nil ((48 . 50)) nil (26046 2913 478709 755000) 0 nil])
([nil nil ((48 . 49)) nil (26046 2913 478709 145000) 0 nil])
([nil nil ((51 . 52)) nil (26046 2913 478708 576000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -51) (undo-tree-id4247 . -1) (undo-tree-id4248 . 1) (undo-tree-id4249 . -1) (undo-tree-id4250 . -1) (undo-tree-id4251 . -1) (undo-tree-id4252 . -1) (undo-tree-id4253 . -1) (undo-tree-id4254 . -1) (undo-tree-id4255 . -1) (undo-tree-id4256 . -1) (undo-tree-id4257 . -1) 52) nil (26046 2913 478707 628000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . 51) (51 . 55) (50 . 52)) nil (26046 2913 478700 215000) 0 nil])
([nil nil ((51 . 55)) nil (26046 2913 478699 288000) 0 nil])
([nil nil ((55 . 59)) nil (26046 2913 478698 656000) 0 nil])
([nil nil ((#("D" 0 1 (face font-lock-type-face fontified t)) . -55) (undo-tree-id4183 . -1) (undo-tree-id4184 . -1) (undo-tree-id4185 . -1) (undo-tree-id4186 . -1) (undo-tree-id4187 . -1) (undo-tree-id4188 . -1) (undo-tree-id4189 . -1) (undo-tree-id4190 . -1) (undo-tree-id4191 . -1) (undo-tree-id4192 . -1) (undo-tree-id4193 . -1) (undo-tree-id4194 . -1) (undo-tree-id4195 . -1) (undo-tree-id4196 . -1) (undo-tree-id4197 . -1) (undo-tree-id4198 . -1) (undo-tree-id4199 . -1) (undo-tree-id4200 . -1) (undo-tree-id4201 . -1) (undo-tree-id4202 . -1) (undo-tree-id4203 . -1) (undo-tree-id4204 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -56) (undo-tree-id4205 . -1) (undo-tree-id4206 . -1) (undo-tree-id4207 . -1) (undo-tree-id4208 . -1) (undo-tree-id4209 . -1) (undo-tree-id4210 . -1) (undo-tree-id4211 . -1) (undo-tree-id4212 . -1) (undo-tree-id4213 . -1) (undo-tree-id4214 . -1) (undo-tree-id4215 . -1) (undo-tree-id4216 . -1) (undo-tree-id4217 . -1) (undo-tree-id4218 . -1) (undo-tree-id4219 . -1) (undo-tree-id4220 . -1) (undo-tree-id4221 . -1) (undo-tree-id4222 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -57) (undo-tree-id4223 . -1) (undo-tree-id4224 . -1) (undo-tree-id4225 . -1) (undo-tree-id4226 . -1) (undo-tree-id4227 . -1) (undo-tree-id4228 . -1) (undo-tree-id4229 . -1) (undo-tree-id4230 . -1) (undo-tree-id4231 . -1) (undo-tree-id4232 . -1) (undo-tree-id4233 . -1) (undo-tree-id4234 . -1) (undo-tree-id4235 . -1) (undo-tree-id4236 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -58) (undo-tree-id4237 . -1) (undo-tree-id4238 . -1) (undo-tree-id4239 . -1) (undo-tree-id4240 . -1) (undo-tree-id4241 . -1) (undo-tree-id4242 . -1) (undo-tree-id4243 . -1) (undo-tree-id4244 . -1) (undo-tree-id4245 . -1) (undo-tree-id4246 . -1) 59) nil (26046 2913 478695 465000) 0 nil])
([nil nil ((55 . 60)) nil (26046 2913 478480 229000) 0 nil])
([nil nil ((#("W" 0 1 (fontified t)) . -59) (undo-tree-id4173 . -1) (undo-tree-id4174 . -1) (undo-tree-id4175 . -1) (undo-tree-id4176 . -1) (undo-tree-id4177 . -1) (undo-tree-id4178 . -1) (undo-tree-id4179 . -1) (undo-tree-id4180 . -1) (undo-tree-id4181 . -1) (undo-tree-id4182 . -1) 60) nil (26046 2913 478479 92000) 0 nil])
([nil nil ((59 . 66)) nil (26046 2913 478471 716000) 0 nil])
([nil nil ((66 . 70)) nil (26046 2913 478471 138000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -68) (undo-tree-id4163 . -1) (undo-tree-id4164 . -1) (undo-tree-id4165 . -1) (undo-tree-id4166 . -1) (undo-tree-id4167 . -1) (undo-tree-id4168 . -1) (undo-tree-id4169 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -69) (undo-tree-id4170 . -1) (undo-tree-id4171 . -1) (undo-tree-id4172 . -1) 70) nil (26046 2913 478469 105000) 0 nil])
([nil nil ((68 . 69)) nil (26046 2913 478455 838000) 0 nil])
([nil nil ((69 . 70)) nil (26046 2913 478452 14000) 0 nil])
([nil nil ((48 . 50) (t 26046 2913 523399 913000)) nil (26046 2916 759345 72000) 0 nil])
([nil nil ((49 . 50)) nil (26046 2916 759341 216000) 0 nil])
([nil nil ((75 . 77) (t 26046 2916 803400 116000)) nil (26046 2930 916773 667000) 0 nil])
([nil nil ((77 . 80)) nil (26046 2930 916772 948000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -77) (undo-tree-id4480 . -1) (undo-tree-id4481 . -1) (undo-tree-id4482 . -1) (undo-tree-id4483 . -1) (undo-tree-id4484 . -1) (undo-tree-id4485 . -1) (undo-tree-id4486 . -1) (undo-tree-id4487 . -1) (undo-tree-id4488 . -1) (undo-tree-id4489 . -1) (undo-tree-id4490 . -1) (undo-tree-id4491 . -1) (#("u" 0 1 (fontified t)) . -78) (undo-tree-id4492 . -1) (undo-tree-id4493 . -1) (undo-tree-id4494 . -1) (undo-tree-id4495 . -1) (undo-tree-id4496 . -1) (undo-tree-id4497 . -1) (undo-tree-id4498 . -1) (undo-tree-id4499 . -1) (undo-tree-id4500 . -1) (#("n" 0 1 (fontified t)) . -79) (undo-tree-id4501 . -1) (undo-tree-id4502 . -1) (undo-tree-id4503 . -1) (undo-tree-id4504 . -1) (undo-tree-id4505 . -1) 80) nil (26046 2930 916771 154000) 0 nil])
([nil nil ((77 . 80)) nil (26046 2930 916752 631000) 0 nil])
([nil nil ((apply yas--snippet-revive 77 83 #s(yas--snippet nil nil nil 31 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 31 nil nil nil nil)) (77 . 83) (#("unsafe" 0 6 (fontified nil)) . 77) (77 . 83) (#("uns" 0 3 (fontified nil)) . 77) (77 . 80) (#("unsafe" 0 6 (fontified nil)) . -77) (77 . 83) (#("uns" 0 3 (fontified t)) . -77) (undo-tree-id4471 . -3) (undo-tree-id4472 . -1) (undo-tree-id4473 . -1) (undo-tree-id4474 . -2) (undo-tree-id4475 . -2) (undo-tree-id4476 . -3) (undo-tree-id4477 . -3) (undo-tree-id4478 . -3) (undo-tree-id4479 . -3) 80) nil (26046 2930 916751 271000) 0 nil])
([nil nil ((83 . 86)) nil (26046 2930 916743 408000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 89 105 nil nil nil t #s(yas--exit 112 nil))) #s(yas--exit 112 nil) 32 nil #s(yas--field 1 89 105 nil nil nil t #s(yas--exit 112 nil)) nil nil)) (84 . 98) (#("impl $1 {
    $0
}" 0 18 (fontified nil)) . 84) (84 . 102) (#("im" 0 2 (fontified nil)) . 84) (84 . 86) (#("impl" 0 4 (fontified nil)) . -84) (84 . 88) (#("im" 0 2 (fontified t)) . -84) (undo-tree-id4464 . -2) (undo-tree-id4465 . -1) (undo-tree-id4466 . -1) (undo-tree-id4467 . -2) (undo-tree-id4468 . -2) (undo-tree-id4469 . -2) (undo-tree-id4470 . -2) 86) nil (26046 2930 916742 18000) 0 nil])
([nil nil ((89 . 90)) nil (26046 2930 916736 32000) 0 nil])
([nil nil ((89 . 93) (#("S" 0 1 (fontified nil)) . 89) (undo-tree-id4455 . -1) (89 . 90) (#("Send" 0 4 (fontified nil)) . -89) (undo-tree-id4456 . -4) (89 . 93) (#("S" 0 1 (face font-lock-type-face fontified t)) . -89) (undo-tree-id4457 . -1) (undo-tree-id4458 . -1) (undo-tree-id4459 . -1) (undo-tree-id4460 . -1) (undo-tree-id4461 . -1) (undo-tree-id4462 . -1) (undo-tree-id4463 . -1) 90) nil (26046 2930 916734 730000) 0 nil])
([nil nil ((93 . 95)) nil (26046 2930 916727 293000) 0 nil])
([nil nil ((#("F" 0 1 (face font-lock-type-face fontified t)) . -94) (undo-tree-id4444 . -1) (undo-tree-id4445 . -1) (undo-tree-id4446 . -1) (undo-tree-id4447 . -1) (undo-tree-id4448 . -1) (undo-tree-id4449 . -1) (undo-tree-id4450 . -1) (undo-tree-id4451 . -1) (undo-tree-id4452 . -1) (undo-tree-id4453 . -1) (undo-tree-id4454 . -1) 95) nil (26046 2930 916726 5000) 0 nil])
([nil nil ((94 . 99)) nil (26046 2930 916717 812000) 0 nil])
([nil nil ((apply yas--snippet-revive 98 104 #s(yas--snippet nil nil #s(yas--exit 103 nil) 33 nil nil #s(yas--field 1 89 105 nil nil nil t #s(yas--exit 112 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 103 nil) 33 nil nil #s(yas--field 1 89 105 nil nil nil t #s(yas--exit 112 nil)) nil)) (98 . 104) (#("Data<$0>" 0 8 (fontified nil)) . 98) (undo-tree-id4434 . -8) (98 . 106) (#("D" 0 1 (fontified nil)) . 98) (undo-tree-id4435 . -1) (98 . 99) (#("Data<…>" 0 7 (fontified nil)) . -98) (undo-tree-id4436 . -7) (98 . 105) (#("D" 0 1 (face font-lock-type-face fontified t)) . -98) (undo-tree-id4437 . -1) (undo-tree-id4438 . -1) (undo-tree-id4439 . -1) (undo-tree-id4440 . -1) (undo-tree-id4441 . -1) (undo-tree-id4442 . -1) (undo-tree-id4443 . -1) 99) nil (26046 2930 916714 741000) 0 nil])
([nil nil ((103 . 104)) nil (26046 2930 916696 160000) 0 nil])
([nil nil ((apply yas--snippet-revive 84 114 #s(yas--snippet nil (#s(yas--field 1 89 105 nil nil nil t #s(yas--exit 112 nil))) #s(yas--exit 112 nil) 32 nil #s(yas--field 1 89 105 nil nil nil t #s(yas--exit 112 nil)) nil nil))) nil (26046 2940 42483 107000) 0 nil])
([nil nil ((88 . 90) (t 26046 2930 930067 629000)) nil (26046 2940 42482 403000) 0 nil])
([nil nil ((89 . 90)) nil (26046 2940 42481 290000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -114) (undo-tree-id4583 . -1) (undo-tree-id4584 . -1) (undo-tree-id4585 . -1) (undo-tree-id4586 . -1) (undo-tree-id4587 . -1) (undo-tree-id4588 . -1) (undo-tree-id4589 . -1) (undo-tree-id4590 . -1) (undo-tree-id4591 . -1) (undo-tree-id4592 . -1) (undo-tree-id4593 . -1) (undo-tree-id4594 . -1) (undo-tree-id4595 . -1) (undo-tree-id4596 . -1) (#("
" 0 1 (fontified t)) . -115) (undo-tree-id4597 . -1) (undo-tree-id4598 . -1) (undo-tree-id4599 . -1) 116) nil (26046 2940 42479 7000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -110) (undo-tree-id4506 . -1) (undo-tree-id4507 . -1) (undo-tree-id4508 . -1) (undo-tree-id4509 . -1) (undo-tree-id4510 . -1) (undo-tree-id4511 . -1) (undo-tree-id4512 . -1) (undo-tree-id4513 . -1) (undo-tree-id4514 . -1) (undo-tree-id4515 . -1) (undo-tree-id4516 . -1) (undo-tree-id4517 . -1) (undo-tree-id4518 . -1) (undo-tree-id4519 . -1) (undo-tree-id4520 . -1) (undo-tree-id4521 . -1) (undo-tree-id4522 . -1) (undo-tree-id4523 . -1) (undo-tree-id4524 . -1) (undo-tree-id4525 . -1) (undo-tree-id4526 . -1) (undo-tree-id4527 . -1) (undo-tree-id4528 . -1) (#(" " 0 1 (fontified t)) . -111) (undo-tree-id4529 . -1) (undo-tree-id4530 . -1) (undo-tree-id4531 . -1) (undo-tree-id4532 . -1) (undo-tree-id4533 . -1) (undo-tree-id4534 . -1) (undo-tree-id4535 . -1) (undo-tree-id4536 . -1) (undo-tree-id4537 . -1) (undo-tree-id4538 . -1) (undo-tree-id4539 . -1) (undo-tree-id4540 . -1) (undo-tree-id4541 . -1) (undo-tree-id4542 . -1) (undo-tree-id4543 . -1) (undo-tree-id4544 . -1) (undo-tree-id4545 . -1) (undo-tree-id4546 . -1) (undo-tree-id4547 . -1) (undo-tree-id4548 . -1) (#(" " 0 1 (fontified t)) . -112) (undo-tree-id4549 . -1) (undo-tree-id4550 . -1) (undo-tree-id4551 . -1) (undo-tree-id4552 . -1) (undo-tree-id4553 . -1) (undo-tree-id4554 . -1) (undo-tree-id4555 . -1) (undo-tree-id4556 . -1) (undo-tree-id4557 . -1) (undo-tree-id4558 . -1) (undo-tree-id4559 . -1) (undo-tree-id4560 . -1) (undo-tree-id4561 . -1) (undo-tree-id4562 . -1) (undo-tree-id4563 . -1) (undo-tree-id4564 . -1) (undo-tree-id4565 . -1) (undo-tree-id4566 . -1) (#(" " 0 1 (fontified t)) . -113) (undo-tree-id4567 . -1) (undo-tree-id4568 . -1) (undo-tree-id4569 . -1) (undo-tree-id4570 . -1) (undo-tree-id4571 . -1) (undo-tree-id4572 . -1) (undo-tree-id4573 . -1) (undo-tree-id4574 . -1) (undo-tree-id4575 . -1) (undo-tree-id4576 . -1) (undo-tree-id4577 . -1) (undo-tree-id4578 . -1) (undo-tree-id4579 . -1) (undo-tree-id4580 . -1) (undo-tree-id4581 . -1) (undo-tree-id4582 . -1) 114) nil (26046 2940 42459 808000) 0 nil])
([nil nil ((111 . 112) (t 26046 2940 56734 848000)) nil (26046 2946 703032 943000) 0 nil])
([nil nil ((nil rear-nonsticky nil 145 . 146) (nil fontified nil 145 . 146) (nil fontified nil 144 . 145) (nil fontified nil 143 . 144) (nil fontified nil 142 . 143) (nil fontified nil 141 . 142) (nil fontified nil 140 . 141) (nil fontified nil 136 . 140) (nil fontified nil 135 . 136) (nil fontified nil 132 . 135) (nil fontified nil 131 . 132) (nil fontified nil 127 . 131) (nil fontified nil 126 . 127) (nil fontified nil 125 . 126) (nil fontified nil 124 . 125) (nil fontified nil 123 . 124) (nil fontified nil 119 . 123) (nil fontified nil 118 . 119) (nil fontified nil 112 . 118) (112 . 146)) nil (26046 2946 703031 431000) 0 nil])
([nil nil ((#("Send" 0 4 (face font-lock-type-face fontified t)) . -127) (undo-tree-id4614 . -4) (undo-tree-id4615 . -4) 131) nil (26046 2946 703027 936000) 0 nil])
([nil nil ((127 . 129)) nil (26046 2946 703024 763000) 0 nil])
([nil nil ((127 . 131) (#("Sy" 0 2 (fontified nil)) . 127) (127 . 129) (#("Sync" 0 4 (fontified nil)) . -127) (127 . 131) (#("Sy" 0 2 (face font-lock-type-face fontified t)) . -127) (undo-tree-id4600 . -1) (undo-tree-id4601 . -2) (undo-tree-id4602 . -1) (undo-tree-id4603 . -1) (undo-tree-id4604 . -1) (undo-tree-id4605 . -1) (undo-tree-id4606 . -1) (undo-tree-id4607 . -1) (undo-tree-id4608 . -1) (undo-tree-id4609 . -1) (undo-tree-id4610 . -2) (undo-tree-id4611 . -2) (undo-tree-id4612 . -2) (undo-tree-id4613 . -2) 129) nil (26046 2946 703020 430000) 0 nil])
([nil nil ((196 . 200) (t 26046 2946 716735 242000)) nil (26046 2987 946458 983000) 0 nil])
([nil nil ((#("mut" 0 3 (face font-lock-keyword-face fontified t)) . -169) (undo-tree-id4783 . -3) (undo-tree-id4784 . -3) (undo-tree-id4785 . -1) (undo-tree-id4786 . -2) (undo-tree-id4787 . -3) (undo-tree-id4788 . -3) (undo-tree-id4789 . -3) (undo-tree-id4790 . -3) (undo-tree-id4791 . -3) (undo-tree-id4792 . -3) (undo-tree-id4793 . -3) 172) nil (26046 2987 946457 820000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -168) (undo-tree-id4764 . -1) (undo-tree-id4765 . -1) (undo-tree-id4766 . -1) (undo-tree-id4767 . -1) (undo-tree-id4768 . -1) (undo-tree-id4769 . -1) (undo-tree-id4770 . -1) (undo-tree-id4771 . -1) (undo-tree-id4772 . -1) (undo-tree-id4773 . -1) (undo-tree-id4774 . -1) (undo-tree-id4775 . -1) (undo-tree-id4776 . -1) (undo-tree-id4777 . -1) (undo-tree-id4778 . -1) (undo-tree-id4779 . -1) (undo-tree-id4780 . -1) (undo-tree-id4781 . -1) (undo-tree-id4782 . -1) 169) nil (26046 2987 946449 33000) 0 nil])
([nil nil ((195 . 201)) nil (26046 2987 946436 39000) 0 nil])
([nil nil ((#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -196) (undo-tree-id4675 . -1) (undo-tree-id4676 . -1) (undo-tree-id4677 . -1) (undo-tree-id4678 . -1) (undo-tree-id4679 . -1) (undo-tree-id4680 . -1) (undo-tree-id4681 . -1) (undo-tree-id4682 . -1) (undo-tree-id4683 . -1) (undo-tree-id4684 . -1) (undo-tree-id4685 . -1) (undo-tree-id4686 . -1) (undo-tree-id4687 . -1) (undo-tree-id4688 . -1) (undo-tree-id4689 . -1) (undo-tree-id4690 . -1) (undo-tree-id4691 . -1) (undo-tree-id4692 . -1) (undo-tree-id4693 . -1) (undo-tree-id4694 . -1) (undo-tree-id4695 . -1) (undo-tree-id4696 . -1) (undo-tree-id4697 . -1) (undo-tree-id4698 . -1) (undo-tree-id4699 . -1) (undo-tree-id4700 . -1) (undo-tree-id4701 . -1) (undo-tree-id4702 . -1) (#("r" 0 1 (face font-lock-variable-name-face fontified t)) . -197) (undo-tree-id4703 . -1) (undo-tree-id4704 . -1) (undo-tree-id4705 . -1) (undo-tree-id4706 . -1) (undo-tree-id4707 . -1) (undo-tree-id4708 . -1) (undo-tree-id4709 . -1) (undo-tree-id4710 . -1) (undo-tree-id4711 . -1) (undo-tree-id4712 . -1) (undo-tree-id4713 . -1) (undo-tree-id4714 . -1) (undo-tree-id4715 . -1) (undo-tree-id4716 . -1) (undo-tree-id4717 . -1) (undo-tree-id4718 . -1) (undo-tree-id4719 . -1) (undo-tree-id4720 . -1) (undo-tree-id4721 . -1) (undo-tree-id4722 . -1) (undo-tree-id4723 . -1) (undo-tree-id4724 . -1) (undo-tree-id4725 . -1) (undo-tree-id4726 . -1) (#("r" 0 1 (face font-lock-variable-name-face fontified t)) . -198) (undo-tree-id4727 . -1) (undo-tree-id4728 . -1) (undo-tree-id4729 . -1) (undo-tree-id4730 . -1) (undo-tree-id4731 . -1) (undo-tree-id4732 . -1) (undo-tree-id4733 . -1) (undo-tree-id4734 . -1) (undo-tree-id4735 . -1) (undo-tree-id4736 . -1) (undo-tree-id4737 . -1) (undo-tree-id4738 . -1) (undo-tree-id4739 . -1) (undo-tree-id4740 . -1) (undo-tree-id4741 . -1) (undo-tree-id4742 . -1) (undo-tree-id4743 . -1) (undo-tree-id4744 . -1) (undo-tree-id4745 . -1) (undo-tree-id4746 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -199) (undo-tree-id4747 . -1) (undo-tree-id4748 . -1) (undo-tree-id4749 . -1) (undo-tree-id4750 . -1) (undo-tree-id4751 . -1) (undo-tree-id4752 . -1) (undo-tree-id4753 . -1) (undo-tree-id4754 . -1) (undo-tree-id4755 . -1) (undo-tree-id4756 . -1) (undo-tree-id4757 . -1) (undo-tree-id4758 . -1) (#("u" 0 1 (face font-lock-variable-name-face fontified t)) . -200) (undo-tree-id4759 . -1) (undo-tree-id4760 . -1) (undo-tree-id4761 . -1) (undo-tree-id4762 . -1) (undo-tree-id4763 . -1) 201) nil (26046 2987 946431 873000) 0 nil])
([nil nil ((196 . 203)) nil (26046 2987 946371 973000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -201) (undo-tree-id4664 . -1) (undo-tree-id4665 . -1) (undo-tree-id4666 . -1) (undo-tree-id4667 . -1) (undo-tree-id4668 . -1) (undo-tree-id4669 . -1) (undo-tree-id4670 . -1) (undo-tree-id4671 . -1) (#("=" 0 1 (fontified t)) . -202) (undo-tree-id4672 . -1) (undo-tree-id4673 . -1) (undo-tree-id4674 . -1) 203) nil (26046 2987 946370 600000) 0 nil])
([nil nil ((201 . 202)) nil (26046 2987 946361 886000) 0 nil])
([nil nil ((202 . 204)) nil (26046 2987 946361 262000) 0 nil])
([nil nil ((203 . 207) (#("D" 0 1 (fontified nil)) . 203) (203 . 204) (#("Data" 0 4 (fontified nil)) . -203) (203 . 207) (#("D" 0 1 (face font-lock-type-face fontified t)) . -203) (undo-tree-id4659 . -1) (undo-tree-id4660 . -1) (undo-tree-id4661 . -1) (undo-tree-id4662 . -1) (undo-tree-id4663 . -1) 204) nil (26046 2987 946360 159000) 0 nil])
([nil nil ((207 . 210)) nil (26046 2987 946354 409000) 0 nil])
([nil nil ((209 . 211)) nil (26046 2987 946353 882000) 0 nil])
([nil nil ((210 . 216) (#("a" 0 1 (fontified nil)) . 210) (210 . 211) (#("data_p" 0 6 (fontified nil)) . -210) (210 . 216) (#("a" 0 1 (fontified t)) . -210) (undo-tree-id4653 . -1) (undo-tree-id4654 . -1) (undo-tree-id4655 . -1) (undo-tree-id4656 . -1) (undo-tree-id4657 . -1) (undo-tree-id4658 . -1) 211) nil (26046 2987 946352 615000) 0 nil])
([nil nil ((216 . 219)) nil (26046 2987 946347 42000) 0 nil])
([nil nil ((#("A" 0 1 (face font-lock-type-face fontified t)) . -218) (undo-tree-id4647 . -1) (undo-tree-id4648 . -1) (undo-tree-id4649 . -1) (undo-tree-id4650 . -1) (undo-tree-id4651 . -1) (undo-tree-id4652 . -1) 219) nil (26046 2987 946346 88000) 0 nil])
([nil nil ((218 . 219)) nil (26046 2987 946341 322000) 0 nil])
([nil nil ((218 . 223) (#("a" 0 1 (fontified nil)) . 218) (218 . 219) (#("array" 0 5 (fontified nil)) . -218) (218 . 223) (#("a" 0 1 (fontified t)) . -218) (undo-tree-id4643 . -1) (undo-tree-id4644 . -1) (undo-tree-id4645 . -1) (undo-tree-id4646 . -1) 219) nil (26046 2987 946340 0) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -209) (undo-tree-id4630 . -1) (undo-tree-id4631 . -1) (undo-tree-id4632 . -1) (undo-tree-id4633 . -1) (undo-tree-id4634 . -1) (undo-tree-id4635 . -1) (undo-tree-id4636 . -1) (undo-tree-id4637 . -1) (undo-tree-id4638 . -1) (undo-tree-id4639 . -1) (undo-tree-id4640 . -1) (undo-tree-id4641 . -1) (undo-tree-id4642 . -1) 210) nil (26046 2987 946334 964000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -207) (undo-tree-id4626 . -1) (undo-tree-id4627 . -1) (undo-tree-id4628 . -1) (undo-tree-id4629 . -1) 208) nil (26046 2987 946324 716000) 0 nil])
([nil nil ((222 . 224)) nil (26046 2987 946320 325000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -223) (undo-tree-id4616 . -1) (undo-tree-id4617 . -1) (undo-tree-id4618 . -1) (undo-tree-id4619 . -1) (undo-tree-id4620 . -1) (undo-tree-id4621 . -1) (undo-tree-id4622 . -1) (undo-tree-id4623 . -1) (undo-tree-id4624 . -1) (undo-tree-id4625 . -1) 224) nil (26046 2987 946316 420000) 0 nil])
([nil nil ((216 . 221) (t 26046 2987 960071 76000)) nil (26046 2996 806236 993000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . -216) (undo-tree-id4794 . -1) (undo-tree-id4795 . -1) (undo-tree-id4796 . -1) (undo-tree-id4797 . -1) (undo-tree-id4798 . -1) (undo-tree-id4799 . -1) (undo-tree-id4800 . -1) (undo-tree-id4801 . -1) (undo-tree-id4802 . -1) (undo-tree-id4803 . -1) (undo-tree-id4804 . -1) (undo-tree-id4805 . -1) (undo-tree-id4806 . -1) (undo-tree-id4807 . -1) 217) nil (26046 2996 806234 418000) 0 nil])
([nil nil ((216 . 217)) nil (26046 2996 806215 464000) 0 nil])
([nil nil ((169 . 173) (t 26046 2996 810071 608000)) nil (26046 3003 244145 864000) 0 nil])
([nil nil ((375 . 377) (t 26046 3003 260071 999000)) nil (26046 3032 829896 791000) 0 nil])
([nil nil ((375 . 379) (#("da" 0 2 (fontified nil)) . 375) (375 . 377) (#("data" 0 4 (fontified nil)) . -375) (375 . 379) (#("da" 0 2 (fontified t)) . -375) (undo-tree-id4887 . -2) (undo-tree-id4888 . -1) (undo-tree-id4889 . -1) (undo-tree-id4890 . -2) (undo-tree-id4891 . -2) (undo-tree-id4892 . -2) (undo-tree-id4893 . -2) 377) nil (26046 3032 829895 520000) 0 nil])
([nil nil ((379 . 380)) nil (26046 3032 829889 447000) 0 nil])
([nil nil ((380 . 386) (#("data_p" 0 6 (fontified nil)) . -380) (380 . 386)) nil (26046 3032 829888 673000) 0 nil])
([nil nil ((386 . 387)) nil (26046 3032 829887 786000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -386) (undo-tree-id4881 . -1) (undo-tree-id4882 . -1) (undo-tree-id4883 . -1) (undo-tree-id4884 . -1) (undo-tree-id4885 . -1) (undo-tree-id4886 . -1) 387) nil (26046 3032 829886 986000) 0 nil])
([nil nil ((375 . 376)) nil (26046 3032 829882 117000) 0 nil])
([nil nil ((387 . 392)) nil (26046 3032 829881 413000) 0 nil])
([nil nil ((#("iter" 0 4 (fontified t)) . -388) (undo-tree-id4860 . -4) (undo-tree-id4861 . -1) (undo-tree-id4862 . -1) (undo-tree-id4863 . -1) (undo-tree-id4864 . -2) (undo-tree-id4865 . -2) (undo-tree-id4866 . -2) (undo-tree-id4867 . -2) (undo-tree-id4868 . -3) (undo-tree-id4869 . -3) (undo-tree-id4870 . -4) (undo-tree-id4871 . -4) (undo-tree-id4872 . -4) (undo-tree-id4873 . -4) (undo-tree-id4874 . -4) (undo-tree-id4875 . -4) (undo-tree-id4876 . -4) (undo-tree-id4877 . -4) (undo-tree-id4878 . -4) (undo-tree-id4879 . -4) (undo-tree-id4880 . -4) 392) nil (26046 3032 829879 904000) 0 nil])
([nil nil ((#("p." 0 2 (fontified t)) . -386) (undo-tree-id4816 . -1) (undo-tree-id4817 . -2) (undo-tree-id4818 . -1) (undo-tree-id4819 . -1) (undo-tree-id4820 . -1) (undo-tree-id4821 . -1) (undo-tree-id4822 . -1) (undo-tree-id4823 . -1) (undo-tree-id4824 . -1) (undo-tree-id4825 . -1) (undo-tree-id4826 . -1) (undo-tree-id4827 . -1) (undo-tree-id4828 . -1) (undo-tree-id4829 . -1) (undo-tree-id4830 . -1) (undo-tree-id4831 . -1) (undo-tree-id4832 . -1) (undo-tree-id4833 . -1) (undo-tree-id4834 . -2) (undo-tree-id4835 . -2) (undo-tree-id4836 . -2) (undo-tree-id4837 . -2) (undo-tree-id4838 . -2) (undo-tree-id4839 . -2) (undo-tree-id4840 . -2) (undo-tree-id4841 . -2) (undo-tree-id4842 . -2) (undo-tree-id4843 . -2) (undo-tree-id4844 . -2) (undo-tree-id4845 . -2) (undo-tree-id4846 . -2) (undo-tree-id4847 . -2) (undo-tree-id4848 . -2) (undo-tree-id4849 . -2) (undo-tree-id4850 . -2) (undo-tree-id4851 . -2) (undo-tree-id4852 . -2) (undo-tree-id4853 . -2) (undo-tree-id4854 . -2) (undo-tree-id4855 . -2) (undo-tree-id4856 . -2) (undo-tree-id4857 . -2) (undo-tree-id4858 . -2) (undo-tree-id4859 . -2) 388) nil (26046 3032 829865 46000) 0 nil])
([nil nil ((386 . 387)) nil (26046 3032 829836 253000) 0 nil])
([nil nil ((399 . 400) (375 . 375) (375 . 387)) nil (26046 3032 829835 397000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -399) (undo-tree-id4812 . -1) (undo-tree-id4813 . -1) (undo-tree-id4814 . -1) (undo-tree-id4815 . -1) 400) nil (26046 3032 829834 296000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -385) (undo-tree-id4808 . -1) (undo-tree-id4809 . -1) (undo-tree-id4810 . -1) (undo-tree-id4811 . -1) 386) nil (26046 3032 829829 731000) 0 nil])
([nil nil ((386 . 387)) nil (26046 3032 829819 370000) 0 nil])
([nil nil ((399 . 400)) nil (26046 3032 829815 736000) 0 nil])
([nil nil ((#("mut " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -67) (undo-tree-id4907 . -4) (undo-tree-id4908 . -4) (undo-tree-id4909 . -4) (undo-tree-id4910 . -4) (undo-tree-id4911 . -4) (undo-tree-id4912 . -4) (undo-tree-id4913 . -4) (undo-tree-id4914 . -4) (undo-tree-id4915 . -4) (undo-tree-id4916 . -4) (undo-tree-id4917 . -4) 71 (t 26046 3032 843407 119000)) nil (26046 3081 161422 196000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . -66) (undo-tree-id4894 . -1) (undo-tree-id4895 . -1) (undo-tree-id4896 . -1) (undo-tree-id4897 . -1) (undo-tree-id4898 . -1) (undo-tree-id4899 . -1) (undo-tree-id4900 . -1) (undo-tree-id4901 . -1) (undo-tree-id4902 . -1) (undo-tree-id4903 . -1) (undo-tree-id4904 . -1) (undo-tree-id4905 . -1) (undo-tree-id4906 . -1) 67) nil (26046 3081 161409 923000) 0 nil])
([nil nil ((#("<" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -48) (undo-tree-id4918 . -1) (undo-tree-id4919 . -1) (undo-tree-id4920 . -1) (undo-tree-id4921 . -1) (undo-tree-id4922 . -1) (undo-tree-id4923 . -1) (undo-tree-id4924 . -1) (undo-tree-id4925 . -1) (undo-tree-id4926 . -1) (undo-tree-id4927 . -1) (#("T" 0 1 (face font-lock-type-face fontified t)) . -49) (undo-tree-id4928 . -1) (undo-tree-id4929 . -1) (undo-tree-id4930 . -1) (undo-tree-id4931 . -1) (undo-tree-id4932 . -1) (undo-tree-id4933 . -1) (undo-tree-id4934 . -1) (undo-tree-id4935 . -1) (#(">" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -50) (undo-tree-id4936 . -1) (undo-tree-id4937 . -1) (undo-tree-id4938 . -1) (undo-tree-id4939 . -1) (undo-tree-id4940 . -1) (undo-tree-id4941 . -1) 51 (t 26046 3081 176743 391000)) nil (26046 3096 331675 626000) 0 nil])
([nil nil ((#("T" 0 1 (face font-lock-type-face fontified t)) . -63) (undo-tree-id4959 . -1) (undo-tree-id4960 . -1) 64 (t 26046 3096 346744 316000)) nil (26046 3113 819792 344000) 0 nil])
([nil nil ((63 . 66)) nil (26046 3113 819789 742000) 0 nil])
([nil nil ((33 . 58) (apply yas--snippet-revive 63 74 #s(yas--snippet nil nil #s(yas--exit 73 nil) 34 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 73 nil) 34 nil nil nil nil)) (63 . 74) (#("AtomicPtr<$0>" 0 13 (fontified nil)) . 63) (63 . 76) (#("Ato" 0 3 (fontified nil)) . 63) (63 . 66) (#("AtomicPtr<…> (use std::sync::atomic::AtomicPtr)" 0 47 (fontified nil)) . -63) (63 . 110) (#("Ato" 0 3 (face font-lock-type-face fontified t)) . -63) (undo-tree-id4942 . -3) (undo-tree-id4943 . -1) (undo-tree-id4944 . -1) (undo-tree-id4945 . -1) (undo-tree-id4946 . -1) (undo-tree-id4947 . -1) (undo-tree-id4948 . -2) (undo-tree-id4949 . -2) (undo-tree-id4950 . -2) (undo-tree-id4951 . -2) (undo-tree-id4952 . -2) (undo-tree-id4953 . -3) (undo-tree-id4954 . -3) (undo-tree-id4955 . -3) (undo-tree-id4956 . -3) (undo-tree-id4957 . -3) (undo-tree-id4958 . -3) 66) nil (26046 3113 819786 768000) 0 nil])
([nil nil ((98 . 99)) nil (26046 3113 819642 619000) 0 nil])
([nil nil ((73 . 75)) nil (26046 3113 819641 89000) 0 nil])
([nil nil ((74 . 75)) nil (26046 3113 819637 85000) 0 nil])
([nil nil ((#("struct Data<T> {" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 11 (face font-lock-type-face fontified t) 11 12 (face (rainbow-delimiters-depth-1-face) fontified t) 12 13 (face font-lock-type-face fontified t) 13 14 (face (rainbow-delimiters-depth-1-face) fontified t) 14 15 (fontified t) 15 16 (face (rainbow-delimiters-depth-1-face) fontified t)) . 62) (undo-tree-id5410 . 3) (undo-tree-id5411 . -13) (undo-tree-id5412 . -13) (undo-tree-id5413 . -13) (undo-tree-id5414 . -13) (undo-tree-id5415 . -13) (undo-tree-id5416 . -13) (undo-tree-id5417 . -13) (undo-tree-id5418 . -13) (undo-tree-id5419 . -13) (undo-tree-id5420 . -13) (undo-tree-id5421 . -13) (undo-tree-id5422 . -13) (undo-tree-id5423 . -16) (t 26046 3113 833412 36000)) nil (26046 3152 19020 338000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 62) (undo-tree-id5408 . 1) (undo-tree-id5409 . -1)) nil (26046 3152 19010 596000) 0 nil])
([nil nil ((#("    data_p: AtomicPtr<T>," 0 4 (fontified t) 4 10 (face font-lock-variable-name-face fontified t) 10 12 (fontified t) 12 21 (face font-lock-type-face fontified t) 21 22 (face (rainbow-delimiters-depth-1-face) fontified t) 22 23 (face font-lock-type-face fontified t) 23 24 (face (rainbow-delimiters-depth-1-face) fontified t) 24 25 (fontified t)) . 62) (undo-tree-id5388 . -12) (undo-tree-id5389 . -12) (undo-tree-id5390 . -12) (undo-tree-id5391 . -12) (undo-tree-id5392 . -12) (undo-tree-id5393 . -12) (undo-tree-id5394 . -12) (undo-tree-id5395 . -12) (undo-tree-id5396 . -12) (undo-tree-id5397 . -12) (undo-tree-id5398 . -12) (undo-tree-id5399 . -12) (undo-tree-id5400 . -12) (undo-tree-id5401 . -12) (undo-tree-id5402 . -12) (undo-tree-id5403 . -12) (undo-tree-id5404 . -12) (undo-tree-id5405 . 25) (undo-tree-id5406 . -13) (undo-tree-id5407 . -25)) nil (26046 3152 19008 166000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 62) (undo-tree-id5386 . 1) (undo-tree-id5387 . -1)) nil (26046 3152 18995 68000) 0 nil])
([nil nil ((#("}" 0 1 (face (rainbow-delimiters-unmatched-face) fontified t)) . 62) (undo-tree-id5382 . 1) (undo-tree-id5383 . -1) (undo-tree-id5384 . -1) (undo-tree-id5385 . -1)) nil (26046 3152 18992 952000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 62) (undo-tree-id5373 . 1) (undo-tree-id5374 . -1) (undo-tree-id5375 . -1) (undo-tree-id5376 . -1) (undo-tree-id5377 . -1) (undo-tree-id5378 . -1) (undo-tree-id5379 . -1) (undo-tree-id5380 . -1) (undo-tree-id5381 . -1)) nil (26046 3152 18989 96000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 62) (undo-tree-id5370 . -1) (undo-tree-id5371 . 1) (undo-tree-id5372 . -1)) nil (26046 3152 18982 152000) 0 nil])
([nil nil ((#("unsafe impl<T> Send for Data<T> {}" 0 6 (face rust-unsafe fontified t) 6 7 (fontified t) 7 11 (face font-lock-keyword-face fontified t) 11 12 (face (rainbow-delimiters-depth-1-face) fontified t) 12 13 (face font-lock-type-face fontified t) 13 14 (face (rainbow-delimiters-depth-1-face) fontified t) 14 15 (fontified t) 15 19 (face font-lock-type-face fontified t) 19 20 (fontified t) 20 23 (face font-lock-keyword-face fontified t) 23 24 (fontified t) 24 28 (face font-lock-type-face fontified t) 28 29 (face (rainbow-delimiters-depth-1-face) fontified t) 29 30 (face font-lock-type-face fontified t) 30 31 (face (rainbow-delimiters-depth-1-face) fontified t) 31 32 (fontified t) 32 33 (face (rainbow-delimiters-depth-1-face) fontified t) 33 34 (face (rainbow-delimiters-depth-1-face) fontified t)) . 62) (undo-tree-id5359 . -29) (undo-tree-id5360 . 34) (undo-tree-id5361 . -13) (undo-tree-id5362 . -13) (undo-tree-id5363 . -13) (undo-tree-id5364 . -13) (undo-tree-id5365 . -13) (undo-tree-id5366 . -13) (undo-tree-id5367 . -13) (undo-tree-id5368 . -13) (undo-tree-id5369 . -34)) nil (26046 3152 18979 190000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 62) (undo-tree-id5356 . -1) (undo-tree-id5357 . 1) (undo-tree-id5358 . -1)) nil (26046 3152 18971 624000) 0 nil])
([nil nil ((#("unsafe impl<T> Sync for Data<T> {}" 0 6 (face rust-unsafe fontified t) 6 7 (fontified t) 7 11 (face font-lock-keyword-face fontified t) 11 12 (face (rainbow-delimiters-depth-1-face) fontified t) 12 13 (face font-lock-type-face fontified t) 13 14 (face (rainbow-delimiters-depth-1-face) fontified t) 14 15 (fontified t) 15 19 (face font-lock-type-face fontified t) 19 20 (fontified t) 20 23 (face font-lock-keyword-face fontified t) 23 24 (fontified t) 24 28 (face font-lock-type-face fontified t) 28 29 (face (rainbow-delimiters-depth-1-face) fontified t) 29 30 (face font-lock-type-face fontified t) 30 31 (face (rainbow-delimiters-depth-1-face) fontified t) 31 32 (fontified t) 32 33 (face (rainbow-delimiters-depth-1-face) fontified t) 33 34 (face (rainbow-delimiters-depth-1-face) fontified t rear-nonsticky t)) . 62) (undo-tree-id5353 . 34) (undo-tree-id5354 . -13) (undo-tree-id5355 . -34)) nil (26046 3152 18969 161000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 62) (undo-tree-id5350 . 1) (undo-tree-id5351 . -1) (undo-tree-id5352 . -1)) nil (26046 3152 18966 215000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 62) (undo-tree-id5347 . 1) (undo-tree-id5348 . -1) (undo-tree-id5349 . -1)) nil (26046 3152 18963 598000) 0 nil])
([nil nil ((#("array}" 0 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-2-face) fontified t)) . -139) (undo-tree-id5342 . -6) (undo-tree-id5343 . -5) (undo-tree-id5344 . -5) (undo-tree-id5345 . -5) (undo-tree-id5346 . -6) 145) nil (26046 3152 18960 658000) 0 nil])
([nil nil ((#("mut " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -135) (undo-tree-id5334 . -4) (undo-tree-id5335 . -4) (undo-tree-id5336 . -4) (undo-tree-id5337 . -3) (undo-tree-id5338 . -4) (undo-tree-id5339 . -4) (undo-tree-id5340 . -4) (undo-tree-id5341 . -4) 139) nil (26046 3152 18956 309000) 0 nil])
([nil nil ((#("p: &" 0 1 (face font-lock-variable-name-face fontified t) 1 3 (fontified t) 3 4 (fontified t)) . -131) (undo-tree-id5323 . -4) (undo-tree-id5324 . -4) (undo-tree-id5325 . -4) (undo-tree-id5326 . -1) (undo-tree-id5327 . -4) (undo-tree-id5328 . -4) (undo-tree-id5329 . -4) (undo-tree-id5330 . -4) (undo-tree-id5331 . -4) (undo-tree-id5332 . -4) (undo-tree-id5333 . -4) 135) nil (26046 3152 18950 229000) 0 nil])
([nil nil ((#("data_" 0 5 (fontified t)) . -126) (undo-tree-id5309 . -5) (undo-tree-id5310 . -5) (undo-tree-id5311 . -5) (undo-tree-id5312 . -4) (undo-tree-id5313 . -5) (undo-tree-id5314 . -5) (undo-tree-id5315 . -5) (undo-tree-id5316 . -5) (undo-tree-id5317 . -5) (undo-tree-id5318 . -5) (undo-tree-id5319 . -5) (undo-tree-id5320 . -5) (undo-tree-id5321 . -5) (undo-tree-id5322 . -5) 131) nil (26046 3152 18941 761000) 0 nil])
([nil nil ((#("Data{" 0 4 (face font-lock-type-face fontified t) 4 5 (face (rainbow-delimiters-depth-2-face) fontified t)) . -121) (undo-tree-id5292 . -5) (undo-tree-id5293 . -5) (undo-tree-id5294 . -5) (undo-tree-id5295 . -4) (undo-tree-id5296 . -5) (undo-tree-id5297 . -5) (undo-tree-id5298 . -5) (undo-tree-id5299 . -5) (undo-tree-id5300 . -5) (undo-tree-id5301 . -5) (undo-tree-id5302 . -5) (undo-tree-id5303 . -5) (undo-tree-id5304 . -5) (undo-tree-id5305 . -5) (undo-tree-id5306 . -5) (undo-tree-id5307 . -5) (undo-tree-id5308 . -5) 126) nil (26046 3152 18930 898000) 0 nil])
([nil nil ((121 . 122)) nil (26046 3152 18866 467000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -121) (undo-tree-id5288 . -1) (undo-tree-id5289 . -1) (undo-tree-id5290 . -1) (undo-tree-id5291 . -1) 122) nil (26046 3152 18865 691000) 0 nil])
([nil nil ((121 . 122)) nil (26046 3152 18862 190000) 0 nil])
([nil nil ((122 . 123)) nil (26046 3152 18861 587000) 0 nil])
([nil nil ((122 . 127) (#("a" 0 1 (fontified nil)) . 122) (122 . 123) (#("array" 0 5 (fontified nil)) . -122) (122 . 127) (#("a" 0 1 (fontified t)) . -122) (undo-tree-id5282 . -1) (undo-tree-id5283 . -1) (undo-tree-id5284 . -1) (undo-tree-id5285 . -1) (undo-tree-id5286 . -1) (undo-tree-id5287 . -1) 123) nil (26046 3152 18860 531000) 0 nil])
([nil nil ((122 . 126)) nil (26046 3152 18855 484000) 0 nil])
([nil nil ((131 . 136)) nil (26046 3152 18854 888000) 0 nil])
([nil nil ((apply yas--snippet-revive 135 146 #s(yas--snippet nil nil #s(yas--exit 145 nil) 35 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 145 nil) 35 nil nil nil nil)) (135 . 146) (#("AtomicPtr<$0>" 0 13 (fontified nil)) . 135) (135 . 148) (#("A" 0 1 (fontified nil)) . 135) (135 . 136) (#("AtomicPtr<…>" 0 12 (fontified nil)) . -135) (135 . 147) (#("A" 0 1 (face font-lock-type-face fontified t)) . -135) (undo-tree-id5275 . -1) (undo-tree-id5276 . -1) (undo-tree-id5277 . -1) (undo-tree-id5278 . -1) (undo-tree-id5279 . -1) (undo-tree-id5280 . -1) (undo-tree-id5281 . -1) 136) nil (26046 3152 18853 483000) 0 nil])
([nil nil ((#("AtomicPtr<>" 0 9 (face font-lock-type-face fontified t) 9 10 (face (rainbow-delimiters-depth-2-face) fontified t) 10 11 (face (rainbow-delimiters-depth-2-face) fontified t)) . -135) (undo-tree-id5253 . -11) (undo-tree-id5254 . -11) (undo-tree-id5255 . -10) (undo-tree-id5256 . -10) (undo-tree-id5257 . -10) (undo-tree-id5258 . -10) (undo-tree-id5259 . -10) (undo-tree-id5260 . -10) (undo-tree-id5261 . -10) (undo-tree-id5262 . -10) (undo-tree-id5263 . -10) (undo-tree-id5264 . -10) (undo-tree-id5265 . -10) (undo-tree-id5266 . -10) (undo-tree-id5267 . -10) (undo-tree-id5268 . -10) (undo-tree-id5269 . -10) (undo-tree-id5270 . -11) (undo-tree-id5271 . -11) (undo-tree-id5272 . -11) (undo-tree-id5273 . -11) (undo-tree-id5274 . -11) 146) nil (26046 3152 18846 686000) 0 nil])
([nil nil ((#("as " 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t)) . -132) (undo-tree-id5215 . -3) (undo-tree-id5216 . -3) (undo-tree-id5217 . -1) (undo-tree-id5218 . -1) (undo-tree-id5219 . -1) (undo-tree-id5220 . -2) (undo-tree-id5221 . -2) (undo-tree-id5222 . -3) (undo-tree-id5223 . -3) (undo-tree-id5224 . -3) (undo-tree-id5225 . -3) (undo-tree-id5226 . -3) (undo-tree-id5227 . -3) (undo-tree-id5228 . -3) (undo-tree-id5229 . -3) (undo-tree-id5230 . -3) (undo-tree-id5231 . -3) (undo-tree-id5232 . -3) (undo-tree-id5233 . -3) (undo-tree-id5234 . -3) (undo-tree-id5235 . -3) (undo-tree-id5236 . -3) (undo-tree-id5237 . -3) (undo-tree-id5238 . -3) (undo-tree-id5239 . -3) (undo-tree-id5240 . -3) (undo-tree-id5241 . -3) (undo-tree-id5242 . -3) (undo-tree-id5243 . -3) (undo-tree-id5244 . -3) (undo-tree-id5245 . -3) (undo-tree-id5246 . -3) (undo-tree-id5247 . -3) (undo-tree-id5248 . -3) (undo-tree-id5249 . -3) (undo-tree-id5250 . -3) (undo-tree-id5251 . -3) (undo-tree-id5252 . -3) 135) nil (26046 3152 18830 827000) 0 nil])
([nil nil ((#("array " 0 6 (fontified t)) . -126) (undo-tree-id5162 . -6) (undo-tree-id5163 . -6) (undo-tree-id5164 . -5) (undo-tree-id5165 . -5) (undo-tree-id5166 . -5) (undo-tree-id5167 . -5) (undo-tree-id5168 . -5) (undo-tree-id5169 . -5) (undo-tree-id5170 . -5) (undo-tree-id5171 . -5) (undo-tree-id5172 . -5) (undo-tree-id5173 . -5) (undo-tree-id5174 . -5) (undo-tree-id5175 . -6) (undo-tree-id5176 . -6) (undo-tree-id5177 . -6) (undo-tree-id5178 . -6) (undo-tree-id5179 . -6) (undo-tree-id5180 . -6) (undo-tree-id5181 . -6) (undo-tree-id5182 . -6) (undo-tree-id5183 . -6) (undo-tree-id5184 . -6) (undo-tree-id5185 . -6) (undo-tree-id5186 . -6) (undo-tree-id5187 . -6) (undo-tree-id5188 . -6) (undo-tree-id5189 . -6) (undo-tree-id5190 . -6) (undo-tree-id5191 . -6) (undo-tree-id5192 . -6) (undo-tree-id5193 . -6) (undo-tree-id5194 . -6) (undo-tree-id5195 . -6) (undo-tree-id5196 . -6) (undo-tree-id5197 . -6) (undo-tree-id5198 . -6) (undo-tree-id5199 . -6) (undo-tree-id5200 . -6) (undo-tree-id5201 . -6) (undo-tree-id5202 . -6) (undo-tree-id5203 . -6) (undo-tree-id5204 . -6) (undo-tree-id5205 . -6) (undo-tree-id5206 . -6) (undo-tree-id5207 . -6) (undo-tree-id5208 . -6) (undo-tree-id5209 . -6) (undo-tree-id5210 . -6) (undo-tree-id5211 . -6) (undo-tree-id5212 . -6) (undo-tree-id5213 . -6) (undo-tree-id5214 . -6) 132) nil (26046 3152 18804 456000) 0 nil])
([nil nil ((#("mut " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -122) (undo-tree-id5098 . -4) (undo-tree-id5099 . -4) (undo-tree-id5100 . -4) (undo-tree-id5101 . -4) (undo-tree-id5102 . -4) (undo-tree-id5103 . -4) (undo-tree-id5104 . -4) (undo-tree-id5105 . -4) (undo-tree-id5106 . -4) (undo-tree-id5107 . -4) (undo-tree-id5108 . -4) (undo-tree-id5109 . -4) (undo-tree-id5110 . -1) (undo-tree-id5111 . -1) (undo-tree-id5112 . -2) (undo-tree-id5113 . -2) (undo-tree-id5114 . -3) (undo-tree-id5115 . -3) (undo-tree-id5116 . -4) (undo-tree-id5117 . -4) (undo-tree-id5118 . -4) (undo-tree-id5119 . -4) (undo-tree-id5120 . -4) (undo-tree-id5121 . -4) (undo-tree-id5122 . -4) (undo-tree-id5123 . -4) (undo-tree-id5124 . -4) (undo-tree-id5125 . -4) (undo-tree-id5126 . -4) (undo-tree-id5127 . -4) (undo-tree-id5128 . -4) (undo-tree-id5129 . -4) (undo-tree-id5130 . -4) (undo-tree-id5131 . -4) (undo-tree-id5132 . -4) (undo-tree-id5133 . -4) (undo-tree-id5134 . -4) (undo-tree-id5135 . -4) (undo-tree-id5136 . -4) (undo-tree-id5137 . -4) (undo-tree-id5138 . -4) (undo-tree-id5139 . -4) (undo-tree-id5140 . -4) (undo-tree-id5141 . -4) (undo-tree-id5142 . -4) (undo-tree-id5143 . -4) (undo-tree-id5144 . -4) (undo-tree-id5145 . -4) (undo-tree-id5146 . -4) (undo-tree-id5147 . -4) (undo-tree-id5148 . -4) (undo-tree-id5149 . -4) (undo-tree-id5150 . -4) (undo-tree-id5151 . -4) (undo-tree-id5152 . -4) (undo-tree-id5153 . -4) (undo-tree-id5154 . -4) (undo-tree-id5155 . -4) (undo-tree-id5156 . -4) (undo-tree-id5157 . -4) (undo-tree-id5158 . -4) (undo-tree-id5159 . -4) (undo-tree-id5160 . -4) (undo-tree-id5161 . -4) 126) nil (26046 3152 18474 930000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . -121) (undo-tree-id5011 . -1) (undo-tree-id5012 . -1) (undo-tree-id5013 . -1) (undo-tree-id5014 . -1) (undo-tree-id5015 . -1) (undo-tree-id5016 . -1) (undo-tree-id5017 . -1) (undo-tree-id5018 . -1) (undo-tree-id5019 . -1) (undo-tree-id5020 . -1) (undo-tree-id5021 . -1) (undo-tree-id5022 . -1) (undo-tree-id5023 . -1) (undo-tree-id5024 . -1) (undo-tree-id5025 . -1) (undo-tree-id5026 . -1) (undo-tree-id5027 . -1) (undo-tree-id5028 . -1) (undo-tree-id5029 . -1) (undo-tree-id5030 . -1) (undo-tree-id5031 . -1) (undo-tree-id5032 . -1) (undo-tree-id5033 . -1) (undo-tree-id5034 . -1) (undo-tree-id5035 . -1) (undo-tree-id5036 . -1) (undo-tree-id5037 . -1) (undo-tree-id5038 . -1) (undo-tree-id5039 . -1) (undo-tree-id5040 . -1) (undo-tree-id5041 . -1) (undo-tree-id5042 . -1) (undo-tree-id5043 . -1) (undo-tree-id5044 . -1) (undo-tree-id5045 . -1) (undo-tree-id5046 . -1) (undo-tree-id5047 . -1) (undo-tree-id5048 . -1) (undo-tree-id5049 . -1) (undo-tree-id5050 . -1) (undo-tree-id5051 . -1) (undo-tree-id5052 . -1) (undo-tree-id5053 . -1) (undo-tree-id5054 . -1) (undo-tree-id5055 . -1) (undo-tree-id5056 . -1) (undo-tree-id5057 . -1) (undo-tree-id5058 . -1) (undo-tree-id5059 . -1) (undo-tree-id5060 . -1) (undo-tree-id5061 . -1) (undo-tree-id5062 . -1) (undo-tree-id5063 . -1) (undo-tree-id5064 . -1) (undo-tree-id5065 . -1) (undo-tree-id5066 . -1) (undo-tree-id5067 . -1) (undo-tree-id5068 . -1) (undo-tree-id5069 . -1) (undo-tree-id5070 . -1) (undo-tree-id5071 . -1) (undo-tree-id5072 . -1) (undo-tree-id5073 . -1) (undo-tree-id5074 . -1) (undo-tree-id5075 . -1) (undo-tree-id5076 . -1) (undo-tree-id5077 . -1) (undo-tree-id5078 . -1) (undo-tree-id5079 . -1) (undo-tree-id5080 . -1) (undo-tree-id5081 . -1) (undo-tree-id5082 . -1) (undo-tree-id5083 . -1) (undo-tree-id5084 . -1) (undo-tree-id5085 . -1) (undo-tree-id5086 . -1) (undo-tree-id5087 . -1) (undo-tree-id5088 . -1) (undo-tree-id5089 . -1) (undo-tree-id5090 . -1) (undo-tree-id5091 . -1) (undo-tree-id5092 . -1) (undo-tree-id5093 . -1) (undo-tree-id5094 . -1) (undo-tree-id5095 . -1) (undo-tree-id5096 . -1) (undo-tree-id5097 . -1) 122) nil (26046 3152 18431 273000) 0 nil])
([nil nil ((121 . 122)) nil (26046 3152 18326 330000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -121) (undo-tree-id5005 . -1) (undo-tree-id5006 . -1) (undo-tree-id5007 . -1) (undo-tree-id5008 . -1) (undo-tree-id5009 . -1) (undo-tree-id5010 . -1) 122) nil (26046 3152 18325 359000) 0 nil])
([nil nil ((121 . 123)) nil (26046 3152 18320 779000) 0 nil])
([nil nil ((121 . 130) (#("At" 0 2 (fontified nil)) . 121) (121 . 123) (#("AtomicPtr" 0 9 (fontified nil)) . -121) (121 . 130) (#("At" 0 2 (face font-lock-type-face fontified t)) . -121) (undo-tree-id4998 . -2) (undo-tree-id4999 . -1) (undo-tree-id5000 . -1) (undo-tree-id5001 . -2) (undo-tree-id5002 . -2) (undo-tree-id5003 . -2) (undo-tree-id5004 . -2) 123) nil (26046 3152 18319 453000) 0 nil])
([nil nil ((130 . 133)) nil (26046 3152 18313 370000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 136 146 nil nil nil t #s(yas--exit 147 nil))) #s(yas--exit 147 nil) 36 nil #s(yas--field 1 136 146 nil nil nil t #s(yas--exit 147 nil)) nil nil)) (132 . 138) (#("new(${1:p})$0" 0 13 (fontified nil)) . 132) (132 . 145) (#("n" 0 1 (fontified nil)) . 132) (132 . 133) (#("new(…)" 0 6 (fontified nil)) . -132) (132 . 138) (#("n" 0 1 (fontified t)) . -132) (undo-tree-id4993 . -1) (undo-tree-id4994 . -1) (undo-tree-id4995 . -1) (undo-tree-id4996 . -1) (undo-tree-id4997 . -1) 133) nil (26046 3152 18311 806000) 0 nil])
([nil nil ((137 . 141) (#("p" 0 1 (fontified nil)) . 137) (undo-tree-id4992 . -1) (136 . 137)) nil (26046 3152 18306 576000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -139) (undo-tree-id4973 . -1) (undo-tree-id4974 . -1) (undo-tree-id4975 . -1) (undo-tree-id4976 . -1) (undo-tree-id4977 . -1) (undo-tree-id4978 . -1) (undo-tree-id4979 . -1) (undo-tree-id4980 . -1) (undo-tree-id4981 . -1) (undo-tree-id4982 . -1) (undo-tree-id4983 . -1) (undo-tree-id4984 . -1) (#("t" 0 1 (fontified t)) . -140) (undo-tree-id4985 . -1) (undo-tree-id4986 . -1) (undo-tree-id4987 . -1) (undo-tree-id4988 . -1) (undo-tree-id4989 . -1) (undo-tree-id4990 . -1) (undo-tree-id4991 . -1) 141) nil (26046 3152 18303 849000) 0 nil])
([nil nil ((139 . 142)) nil (26046 3152 18289 832000) 0 nil])
([nil nil ((141 . 146) (#("a" 0 1 (fontified nil)) . 141) (undo-tree-id4961 . -1) (141 . 142) (#("array" 0 5 (fontified nil)) . -141) (undo-tree-id4962 . -5) (141 . 146) (#("a" 0 1 (fontified t)) . -141) (undo-tree-id4963 . -1) (undo-tree-id4964 . -1) (undo-tree-id4965 . -1) (undo-tree-id4966 . -1) (undo-tree-id4967 . -1) (undo-tree-id4968 . -1) (undo-tree-id4969 . -1) (undo-tree-id4970 . -1) (undo-tree-id4971 . -1) (undo-tree-id4972 . -1) 142) nil (26046 3152 18287 181000) 0 nil])
([nil nil ((apply yas--snippet-revive 132 147 #s(yas--snippet nil (#s(yas--field 1 136 146 nil nil nil t #s(yas--exit 147 nil))) #s(yas--exit 147 nil) 36 nil #s(yas--field 1 136 146 nil nil nil t #s(yas--exit 147 nil)) nil nil))) nil (26046 3152 18268 591000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -314) (undo-tree-id5440 . -1) (undo-tree-id5441 . -1) 315 (t 26046 3152 63414 359000)) nil (26046 3158 41733 864000) 0 nil])
([nil nil ((#("data_" 0 5 (fontified t)) . -309) (undo-tree-id5436 . -5) (undo-tree-id5437 . -5) (undo-tree-id5438 . -5) (undo-tree-id5439 . -5) 314) nil (26046 3158 41731 274000) 0 nil])
([nil nil ((#("data." 0 5 (fontified t)) . -304) (undo-tree-id5430 . -5) (undo-tree-id5431 . -5) (undo-tree-id5432 . -5) (undo-tree-id5433 . -5) (undo-tree-id5434 . -5) (undo-tree-id5435 . -5) 309) nil (26046 3158 41727 194000) 0 nil])
([nil nil ((304 . 306)) nil (26046 3158 41721 615000) 0 nil])
([nil nil ((304 . 308) (#("da" 0 2 (fontified nil)) . 304) (304 . 306) (#("data" 0 4 (fontified nil)) . -304) (304 . 308) (#("da" 0 2 (fontified t)) . -304) (undo-tree-id5424 . -2) (undo-tree-id5425 . -1) (undo-tree-id5426 . -1) (undo-tree-id5427 . -1) (undo-tree-id5428 . -2) (undo-tree-id5429 . -2) 306) nil (26046 3158 41717 551000) 0 nil])
([nil nil ((308 . 309) (t 26046 3158 56748 57000)) nil (26046 3171 408183 736000) 0 nil])
([nil nil ((apply yas--snippet-revive 309 317 #s(yas--snippet nil nil #s(yas--exit 317 nil) 37 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 317 nil) 37 nil nil nil nil)) (309 . 317) (#("as_ptr()$0" 0 10 (fontified nil)) . 309) (309 . 319) (#("as_ptr()" 0 8 (fontified nil)) . -309) (309 . 317)) nil (26046 3171 408178 434000) 0 nil])
([nil nil ((#("unsafe {" 0 6 (face rust-unsafe fontified t) 6 7 (fontified t) 7 8 (face (rainbow-delimiters-depth-5-face) fontified t)) . 266) (undo-tree-id5459 . -8) (undo-tree-id5460 . -8) (undo-tree-id5461 . -8) (undo-tree-id5462 . -8) (undo-tree-id5463 . -8) (undo-tree-id5464 . -8) (undo-tree-id5465 . -8) (undo-tree-id5466 . -8) (undo-tree-id5467 . -8) (undo-tree-id5468 . -8) (undo-tree-id5469 . -8) (undo-tree-id5470 . -8) (undo-tree-id5471 . -8) (t 26046 3171 423415 539000)) nil (26046 3203 737767 682000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 266) (undo-tree-id5458 . -1)) nil (26046 3203 737757 840000) 0 nil])
([nil nil ((#("};" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t) 1 2 (fontified t)) . 322) (undo-tree-id5456 . -2) (undo-tree-id5457 . -2)) nil (26046 3203 737756 330000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 322) (undo-tree-id5455 . -1)) nil (26046 3203 737754 226000) 0 nil])
([nil nil ((#("            " 0 4 (fontified t) 4 12 (fontified t)) . -318) (undo-tree-id5443 . -4) (undo-tree-id5444 . -4) (undo-tree-id5445 . -4) (undo-tree-id5446 . -4) (undo-tree-id5447 . -4) (undo-tree-id5448 . -4) (undo-tree-id5449 . -4) (undo-tree-id5450 . -4) (undo-tree-id5451 . -4) (undo-tree-id5452 . -4) (undo-tree-id5453 . -4) (undo-tree-id5454 . -4) 322) nil (26046 3203 737751 526000) 0 nil])
([nil nil ((#("                " 0 16 (fontified t)) . -266) (undo-tree-id5442 . -16) 262) nil (26046 3203 737738 900000) 0 nil])
([nil nil ((266 . 267) (t 26046 3203 753417 492000)) nil (26046 3230 38218 88000) 0 nil])
([nil nil ((266 . 267)) nil (26046 3230 38217 388000) 0 nil])
([nil nil ((266 . 267)) nil (26046 3230 38216 822000) 0 nil])
([nil nil ((267 . 269)) nil (26046 3230 38216 221000) 0 nil])
([nil nil ((apply yas--snippet-revive 266 272 #s(yas--snippet nil nil nil 38 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 38 nil nil nil nil)) (266 . 272) (#("unsafe" 0 6 (fontified nil)) . 266) (266 . 272) (#("uns" 0 3 (fontified nil)) . 266) (266 . 269) (#("unsafe" 0 6 (fontified nil)) . -266) (266 . 272) (#("uns" 0 3 (fontified t)) . -266) (undo-tree-id5619 . -3) (undo-tree-id5620 . -3) (undo-tree-id5621 . -1) (undo-tree-id5622 . -1) (undo-tree-id5623 . -1) (undo-tree-id5624 . -1) (undo-tree-id5625 . -1) (undo-tree-id5626 . -1) (undo-tree-id5627 . -1) (undo-tree-id5628 . -2) (undo-tree-id5629 . -2) (undo-tree-id5630 . -2) (undo-tree-id5631 . -3) (undo-tree-id5632 . -3) (undo-tree-id5633 . -3) (undo-tree-id5634 . -3) (undo-tree-id5635 . -3) (undo-tree-id5636 . -3) (undo-tree-id5637 . -3) (undo-tree-id5638 . -3) 269) nil (26046 3230 38214 428000) 0 nil])
([nil nil ((#("unsafe" 0 6 (face rust-unsafe fontified t)) . -266) (undo-tree-id5608 . -6) (undo-tree-id5609 . -6) (undo-tree-id5610 . -6) (undo-tree-id5611 . -6) (undo-tree-id5612 . -6) (undo-tree-id5613 . -6) (undo-tree-id5614 . -6) (undo-tree-id5615 . -6) (undo-tree-id5616 . -6) (undo-tree-id5617 . -6) (undo-tree-id5618 . -6) 272) nil (26046 3230 38199 484000) 0 nil])
([nil nil ((280 . 281)) nil (26046 3230 38039 373000) 0 nil])
([nil nil ((280 . 283)) nil (26046 3230 38038 810000) 0 nil])
([nil nil ((apply yas--snippet-revive 280 323 #s(yas--snippet nil nil #s(yas--exit 307 nil) 39 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 307 nil) 39 nil nil nil nil)) (280 . 323) (#("unsafe {
                  $0
              }" 0 45 (fontified nil)) . 280) (310 . 324) (289 . 307) (#("    " 0 4 (fontified nil)) . 289) (280 . 297) (#("uns" 0 3 (fontified nil)) . 280) (280 . 283) (#("unsafe" 0 6 (fontified nil)) . -280) (280 . 286) (#("uns" 0 3 (fontified t)) . -280) (undo-tree-id5591 . -3) (undo-tree-id5592 . -1) (undo-tree-id5593 . -1) (undo-tree-id5594 . -1) (undo-tree-id5595 . -2) (undo-tree-id5596 . -2) (undo-tree-id5597 . -2) (undo-tree-id5598 . -2) (undo-tree-id5599 . -2) (undo-tree-id5600 . -2) (undo-tree-id5601 . -3) (undo-tree-id5602 . -3) (undo-tree-id5603 . -3) (undo-tree-id5604 . -3) (undo-tree-id5605 . -3) (undo-tree-id5606 . -3) (undo-tree-id5607 . -3) 283) nil (26046 3230 38037 70000) 0 nil])
([nil nil ((#("*data.as_ptr();" 0 1 (fontified t) 1 6 (fontified t) 6 12 (fontified t) 12 13 (face (rainbow-delimiters-depth-5-face) fontified t) 13 14 (face (rainbow-delimiters-depth-5-face) fontified t) 14 15 (fontified t)) . 324) (undo-tree-id5576 . -5) (undo-tree-id5577 . -5) (undo-tree-id5578 . -5) (undo-tree-id5579 . -5) (undo-tree-id5580 . -5) (undo-tree-id5581 . -5) (undo-tree-id5582 . -5) (undo-tree-id5583 . -1) (undo-tree-id5584 . -1) (undo-tree-id5585 . -1) (undo-tree-id5586 . -1) (undo-tree-id5587 . -1) (undo-tree-id5588 . -2) (undo-tree-id5589 . -1) (undo-tree-id5590 . -15)) nil (26046 3230 38024 278000) 0 nil])
([nil nil ((nil rear-nonsticky nil 319 . 320) (nil fontified nil 319 . 320) (nil fontified nil 318 . 319) (nil fontified nil 317 . 318) (nil fontified nil 311 . 317) (nil fontified nil 306 . 311) (nil fontified nil 305 . 306) (305 . 320)) nil (26046 3230 38014 244000) 0 nil])
([nil nil ((#(";" 0 1 (rear-nonsticky t fontified t)) . -319) (undo-tree-id5533 . -1) (undo-tree-id5534 . -1) (undo-tree-id5535 . -1) (undo-tree-id5536 . -1) (undo-tree-id5537 . -1) (undo-tree-id5538 . -1) (undo-tree-id5539 . -1) (undo-tree-id5540 . -1) (undo-tree-id5541 . -1) (undo-tree-id5542 . -1) (undo-tree-id5543 . -1) (undo-tree-id5544 . -1) (undo-tree-id5545 . -1) (undo-tree-id5546 . -1) (undo-tree-id5547 . -1) (undo-tree-id5548 . -1) (undo-tree-id5549 . -1) (undo-tree-id5550 . -1) (undo-tree-id5551 . -1) (undo-tree-id5552 . -1) (undo-tree-id5553 . -1) (#(" " 0 1 (fontified t)) . -320) (undo-tree-id5554 . -1) (undo-tree-id5555 . -1) (undo-tree-id5556 . -1) (undo-tree-id5557 . -1) (undo-tree-id5558 . -1) (undo-tree-id5559 . -1) (undo-tree-id5560 . -1) (undo-tree-id5561 . -1) (undo-tree-id5562 . -1) (undo-tree-id5563 . -1) (undo-tree-id5564 . -1) (undo-tree-id5565 . -1) (#(" " 0 1 (fontified t)) . -321) (undo-tree-id5566 . -1) (undo-tree-id5567 . -1) (undo-tree-id5568 . -1) (undo-tree-id5569 . -1) (undo-tree-id5570 . -1) (undo-tree-id5571 . -1) (undo-tree-id5572 . -1) (undo-tree-id5573 . -1) (undo-tree-id5574 . -1) (undo-tree-id5575 . -1) 322) nil (26046 3230 38011 191000) 0 nil])
([nil nil ((319 . 320)) nil (26046 3230 37984 758000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -319) (undo-tree-id5524 . -1) (undo-tree-id5525 . -1) (undo-tree-id5526 . -1) (undo-tree-id5527 . -1) (undo-tree-id5528 . -1) (undo-tree-id5529 . -1) (undo-tree-id5530 . -1) (undo-tree-id5531 . -1) (undo-tree-id5532 . -1) 320) nil (26046 3230 37983 678000) 0 nil])
([nil nil ((336 . 337)) nil (26046 3230 37977 99000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -335) (undo-tree-id5482 . -1) (undo-tree-id5483 . -1) (undo-tree-id5484 . -1) (undo-tree-id5485 . -1) (undo-tree-id5486 . -1) (undo-tree-id5487 . -1) (undo-tree-id5488 . -1) (undo-tree-id5489 . -1) (undo-tree-id5490 . -1) (undo-tree-id5491 . -1) (undo-tree-id5492 . -1) (undo-tree-id5493 . -1) (undo-tree-id5494 . -1) (undo-tree-id5495 . -1) (undo-tree-id5496 . -1) (undo-tree-id5497 . -1) (undo-tree-id5498 . -1) (undo-tree-id5499 . -1) (undo-tree-id5500 . -1) (undo-tree-id5501 . -1) (undo-tree-id5502 . -1) (undo-tree-id5503 . -1) (undo-tree-id5504 . -1) (undo-tree-id5505 . -1) (undo-tree-id5506 . -1) (undo-tree-id5507 . -1) (undo-tree-id5508 . -1) (undo-tree-id5509 . -1) (undo-tree-id5510 . -1) (undo-tree-id5511 . -1) (undo-tree-id5512 . -1) (undo-tree-id5513 . -1) (undo-tree-id5514 . -1) (undo-tree-id5515 . -1) (undo-tree-id5516 . -1) (undo-tree-id5517 . -1) (undo-tree-id5518 . -1) (undo-tree-id5519 . -1) (undo-tree-id5520 . -1) (undo-tree-id5521 . -1) (undo-tree-id5522 . -1) (undo-tree-id5523 . -1) 336) nil (26046 3230 37974 836000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -332) (undo-tree-id5472 . -1) (undo-tree-id5473 . -1) (undo-tree-id5474 . -1) (undo-tree-id5475 . -1) (undo-tree-id5476 . -1) (undo-tree-id5477 . -1) (#(" " 0 1 (fontified t)) . -333) (undo-tree-id5478 . -1) (undo-tree-id5479 . -1) (undo-tree-id5480 . -1) (undo-tree-id5481 . -1) 334) nil (26046 3230 37944 843000) 0 nil])
([nil nil ((332 . 334)) nil (26046 3230 37928 690000) 0 nil])
([nil nil ((#("thread, time::Duration, " 0 6 (fontified t) 6 8 (fontified t) 8 12 (face font-lock-constant-face fontified t) 12 14 (fontified t) 14 22 (face font-lock-type-face fontified t) 22 24 (fontified t)) . 11) (undo-tree-id5639 . -22) (58 . 82) (#("
" 0 1 (fontified t)) . -62) (undo-tree-id5640 . -1) (#(" " 0 1 (fontified t)) . -148) (#("    
" 0 4 (fontified t) 4 5 (fontified t)) . -151) (#(" {
       " 0 1 (fontified t) 1 2 (face (rainbow-delimiters-depth-3-face) fontified t) 2 3 (fontified t) 3 10 (fontified t)) . -181) (#("    " 0 4 (fontified t)) . -207) (#("      " 0 6 (fontified t)) . -254) (#("
          " 0 1 (fontified t) 1 11 (fontified t)) . 288) (#("     " 0 5 (fontified t)) . 300) (undo-tree-id5641 . -5) (undo-tree-id5642 . -5) (undo-tree-id5643 . -3) (undo-tree-id5644 . -3) (undo-tree-id5645 . -3) (undo-tree-id5646 . -3) (undo-tree-id5647 . -3) (undo-tree-id5648 . -3) (undo-tree-id5649 . -3) (undo-tree-id5650 . -3) (#("
     " 0 1 (fontified t) 1 6 (fontified t)) . 319) (undo-tree-id5651 . -1) (#("        " 0 8 (fontified t)) . 326) (undo-tree-id5652 . -8) (undo-tree-id5653 . -6) (undo-tree-id5654 . -6) (undo-tree-id5655 . -6) (undo-tree-id5656 . -6) (undo-tree-id5657 . -6) (undo-tree-id5658 . -8) (undo-tree-id5659 . -8) (undo-tree-id5660 . -8) (undo-tree-id5661 . -8) (undo-tree-id5662 . -8) (undo-tree-id5663 . -8) (undo-tree-id5664 . -8) (undo-tree-id5665 . -8) (undo-tree-id5666 . -8) (undo-tree-id5667 . -8) (undo-tree-id5668 . -8) (undo-tree-id5669 . -8) (undo-tree-id5670 . -8) (undo-tree-id5671 . -8) (undo-tree-id5672 . -8) (#("
        }" 0 1 (fontified t) 1 9 (fontified t) 9 10 (face (rainbow-delimiters-depth-4-face) fontified t)) . 336) (undo-tree-id5673 . -9) (#("    " 0 4 (fontified t)) . 355) (undo-tree-id5674 . -4) 336 (t 26046 3230 53419 90000)) nil (26046 3236 857189 151000) 0 nil])
([nil nil ((279 . 288) (t 26046 3236 873419 508000)) nil (26046 3260 251632 430000) 0 nil])
([nil nil ((288 . 289)) nil (26046 3260 251631 646000) 0 nil])
([nil nil ((288 . 293) (#("a" 0 1 (fontified nil)) . 288) (288 . 289) (#("array" 0 5 (fontified nil)) . -288) (288 . 293) (#("a" 0 1 (fontified t)) . -288) (undo-tree-id5962 . -1) (undo-tree-id5963 . -1) (undo-tree-id5964 . -1) (undo-tree-id5965 . -1) (undo-tree-id5966 . -1) 289) nil (26046 3260 251630 388000) 0 nil])
([nil nil ((293 . 295)) nil (26046 3260 251624 783000) 0 nil])
([nil nil ((295 . 298)) nil (26046 3260 251624 65000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -293) (undo-tree-id5854 . -1) (undo-tree-id5855 . -1) (undo-tree-id5856 . -1) (undo-tree-id5857 . -1) (undo-tree-id5858 . -1) (undo-tree-id5859 . -1) (undo-tree-id5860 . -1) (undo-tree-id5861 . -1) (undo-tree-id5862 . -1) (undo-tree-id5863 . -1) (undo-tree-id5864 . -1) (undo-tree-id5865 . -1) (undo-tree-id5866 . -1) (undo-tree-id5867 . -1) (undo-tree-id5868 . -1) (undo-tree-id5869 . -1) (undo-tree-id5870 . -1) (undo-tree-id5871 . -1) (undo-tree-id5872 . -1) (undo-tree-id5873 . -1) (undo-tree-id5874 . -1) (undo-tree-id5875 . -1) (undo-tree-id5876 . -1) (undo-tree-id5877 . -1) (undo-tree-id5878 . -1) (undo-tree-id5879 . -1) (undo-tree-id5880 . -1) (undo-tree-id5881 . -1) (undo-tree-id5882 . -1) (undo-tree-id5883 . -1) (undo-tree-id5884 . -1) (undo-tree-id5885 . -1) (undo-tree-id5886 . -1) (#("i" 0 1 (fontified t)) . -294) (undo-tree-id5887 . -1) (undo-tree-id5888 . -1) (undo-tree-id5889 . -1) (undo-tree-id5890 . -1) (undo-tree-id5891 . -1) (undo-tree-id5892 . -1) (undo-tree-id5893 . -1) (undo-tree-id5894 . -1) (undo-tree-id5895 . -1) (undo-tree-id5896 . -1) (undo-tree-id5897 . -1) (undo-tree-id5898 . -1) (undo-tree-id5899 . -1) (undo-tree-id5900 . -1) (undo-tree-id5901 . -1) (undo-tree-id5902 . -1) (undo-tree-id5903 . -1) (undo-tree-id5904 . -1) (undo-tree-id5905 . -1) (undo-tree-id5906 . -1) (undo-tree-id5907 . -1) (undo-tree-id5908 . -1) (undo-tree-id5909 . -1) (undo-tree-id5910 . -1) (undo-tree-id5911 . -1) (undo-tree-id5912 . -1) (undo-tree-id5913 . -1) (#("t" 0 1 (fontified t)) . -295) (undo-tree-id5914 . -1) (undo-tree-id5915 . -1) (undo-tree-id5916 . -1) (undo-tree-id5917 . -1) (undo-tree-id5918 . -1) (undo-tree-id5919 . -1) (undo-tree-id5920 . -1) (undo-tree-id5921 . -1) (undo-tree-id5922 . -1) (undo-tree-id5923 . -1) (undo-tree-id5924 . -1) (undo-tree-id5925 . -1) (undo-tree-id5926 . -1) (undo-tree-id5927 . -1) (undo-tree-id5928 . -1) (undo-tree-id5929 . -1) (undo-tree-id5930 . -1) (undo-tree-id5931 . -1) (undo-tree-id5932 . -1) (undo-tree-id5933 . -1) (#("e" 0 1 (fontified t)) . -296) (undo-tree-id5934 . -1) (undo-tree-id5935 . -1) (undo-tree-id5936 . -1) (undo-tree-id5937 . -1) (undo-tree-id5938 . -1) (undo-tree-id5939 . -1) (undo-tree-id5940 . -1) (undo-tree-id5941 . -1) (undo-tree-id5942 . -1) (undo-tree-id5943 . -1) (undo-tree-id5944 . -1) (undo-tree-id5945 . -1) (undo-tree-id5946 . -1) (undo-tree-id5947 . -1) (undo-tree-id5948 . -1) (undo-tree-id5949 . -1) (#("r" 0 1 (fontified t)) . -297) (undo-tree-id5950 . -1) (undo-tree-id5951 . -1) (undo-tree-id5952 . -1) (undo-tree-id5953 . -1) (undo-tree-id5954 . -1) (undo-tree-id5955 . -1) (undo-tree-id5956 . -1) (undo-tree-id5957 . -1) (undo-tree-id5958 . -1) (undo-tree-id5959 . -1) (undo-tree-id5960 . -1) (undo-tree-id5961 . -1) 298) nil (26046 3260 251619 63000) 0 nil])
([nil nil ((293 . 294)) nil (26046 3260 251363 220000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -293) (undo-tree-id5849 . -1) (undo-tree-id5850 . -1) (undo-tree-id5851 . -1) (undo-tree-id5852 . -1) (undo-tree-id5853 . -1) 294) nil (26046 3260 251361 872000) 0 nil])
([nil nil ((#("array" 0 5 (fontified t)) . -288) (undo-tree-id5788 . -5) (undo-tree-id5789 . -5) (undo-tree-id5790 . -5) (undo-tree-id5791 . -5) (undo-tree-id5792 . -5) (undo-tree-id5793 . -5) (undo-tree-id5794 . -5) (undo-tree-id5795 . -5) (undo-tree-id5796 . -5) (undo-tree-id5797 . -5) (undo-tree-id5798 . -5) (undo-tree-id5799 . -5) (undo-tree-id5800 . -5) (undo-tree-id5801 . -5) (undo-tree-id5802 . -5) (undo-tree-id5803 . -5) (undo-tree-id5804 . -5) (undo-tree-id5805 . -5) (undo-tree-id5806 . -5) (undo-tree-id5807 . -5) (undo-tree-id5808 . -5) (undo-tree-id5809 . -5) (undo-tree-id5810 . -5) (undo-tree-id5811 . -5) (undo-tree-id5812 . -5) (undo-tree-id5813 . -5) (undo-tree-id5814 . -5) (undo-tree-id5815 . -5) (undo-tree-id5816 . -5) (undo-tree-id5817 . -5) (undo-tree-id5818 . -5) (undo-tree-id5819 . -5) (undo-tree-id5820 . -5) (undo-tree-id5821 . -5) (undo-tree-id5822 . -5) (undo-tree-id5823 . -5) (undo-tree-id5824 . -5) (undo-tree-id5825 . -5) (undo-tree-id5826 . -5) (undo-tree-id5827 . -5) (undo-tree-id5828 . -5) (undo-tree-id5829 . -5) (undo-tree-id5830 . -5) (undo-tree-id5831 . -5) (undo-tree-id5832 . -5) (undo-tree-id5833 . -5) (undo-tree-id5834 . -5) (undo-tree-id5835 . -5) (undo-tree-id5836 . -5) (undo-tree-id5837 . -5) (undo-tree-id5838 . -5) (undo-tree-id5839 . -5) (undo-tree-id5840 . -5) (undo-tree-id5841 . -5) (undo-tree-id5842 . -5) (undo-tree-id5843 . -5) (undo-tree-id5844 . -5) (undo-tree-id5845 . -5) (undo-tree-id5846 . -5) (undo-tree-id5847 . -5) (undo-tree-id5848 . -5) 293) nil (26046 3264 944739 152000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . -262) (undo-tree-id5982 . -1) (undo-tree-id5983 . -1) (undo-tree-id5984 . -1) (undo-tree-id5985 . -1) (undo-tree-id5986 . -1) (undo-tree-id5987 . -1) (undo-tree-id5988 . -1) (undo-tree-id5989 . -1) (undo-tree-id5990 . -1) (undo-tree-id5991 . -1) (undo-tree-id5992 . -1) (undo-tree-id5993 . -1) (undo-tree-id5994 . -1) (undo-tree-id5995 . -1) (undo-tree-id5996 . -1) (undo-tree-id5997 . -1) (undo-tree-id5998 . -1) (undo-tree-id5999 . -1) (undo-tree-id6000 . -1) (undo-tree-id6001 . -1) 263) nil (26046 3265 935269 988000) 0 nil] [nil nil ((#("unsafe { *" 0 6 (face rust-unsafe fontified t) 6 7 (fontified t) 7 8 (face (rainbow-delimiters-depth-4-face) fontified t) 8 9 (fontified t) 9 10 (fontified t)) . -253) (undo-tree-id5967 . -10) (undo-tree-id5968 . -10) (undo-tree-id5969 . -9) (undo-tree-id5970 . -10) (undo-tree-id5971 . -10) (undo-tree-id5972 . -10) (undo-tree-id5973 . -10) (undo-tree-id5974 . -10) (undo-tree-id5975 . -10) (undo-tree-id5976 . -10) (undo-tree-id5977 . -10) (undo-tree-id5978 . -10) (undo-tree-id5979 . -10) (undo-tree-id5980 . -10) (undo-tree-id5981 . -10) 263) ((253 . 263)) (26046 3264 944518 972000) 0 nil] [nil nil ((#("ptr() };
        " 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-5-face) fontified t) 4 5 (face (rainbow-delimiters-depth-5-face) fontified t) 5 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-4-face) fontified t) 7 9 (fontified t) 9 17 (fontified t)) . -271) (undo-tree-id5675 . -17) (undo-tree-id5676 . -17) (undo-tree-id5677 . -8) (undo-tree-id5678 . -6) (undo-tree-id5679 . -6) (undo-tree-id5680 . -6) (undo-tree-id5681 . -6) (undo-tree-id5682 . -6) (undo-tree-id5683 . -6) (undo-tree-id5684 . -6) (undo-tree-id5685 . -6) (undo-tree-id5686 . -6) (undo-tree-id5687 . -6) (undo-tree-id5688 . -6) (undo-tree-id5689 . -6) (undo-tree-id5690 . -6) (undo-tree-id5691 . -6) (undo-tree-id5692 . -6) (undo-tree-id5693 . -6) (undo-tree-id5694 . -6) (undo-tree-id5695 . -6) (undo-tree-id5696 . -6) (undo-tree-id5697 . -6) (undo-tree-id5698 . -8) (undo-tree-id5699 . -8) (undo-tree-id5700 . -8) (undo-tree-id5701 . -8) (undo-tree-id5702 . -8) (undo-tree-id5703 . -8) (undo-tree-id5704 . -8) (undo-tree-id5705 . -8) (undo-tree-id5706 . -8) (undo-tree-id5707 . -8) (undo-tree-id5708 . -8) (undo-tree-id5709 . 9) (undo-tree-id5710 . -17) (undo-tree-id5711 . -17) (undo-tree-id5712 . -17) (undo-tree-id5713 . -17) (undo-tree-id5714 . -17) (undo-tree-id5715 . -17) (undo-tree-id5716 . -17) (undo-tree-id5717 . -17) (undo-tree-id5718 . -17) (undo-tree-id5719 . -17) (undo-tree-id5720 . -17) (undo-tree-id5721 . -17) (undo-tree-id5722 . -17) (undo-tree-id5723 . -17) (undo-tree-id5724 . -17) (undo-tree-id5725 . -17) (undo-tree-id5726 . -17) (undo-tree-id5727 . -17) (undo-tree-id5728 . -17) (undo-tree-id5729 . -9) (undo-tree-id5730 . -17) (undo-tree-id5731 . -17) (undo-tree-id5732 . -17) (undo-tree-id5733 . -17) (undo-tree-id5734 . -17) (undo-tree-id5735 . -9) (undo-tree-id5736 . -17) (undo-tree-id5737 . -17) (undo-tree-id5738 . -9) (undo-tree-id5739 . -17) (undo-tree-id5740 . -17) (undo-tree-id5741 . -9) (undo-tree-id5742 . -17) (undo-tree-id5743 . -17) (undo-tree-id5744 . -17) (undo-tree-id5745 . -17) (undo-tree-id5746 . -17) (undo-tree-id5747 . -17) (undo-tree-id5748 . -17) (undo-tree-id5749 . -17) (undo-tree-id5750 . -17) (undo-tree-id5751 . -17) (undo-tree-id5752 . -17) (undo-tree-id5753 . -17) (undo-tree-id5754 . -17) (undo-tree-id5755 . -17) (undo-tree-id5756 . -17) (undo-tree-id5757 . -17) (undo-tree-id5758 . -17) (undo-tree-id5759 . -17) (undo-tree-id5760 . -17) (undo-tree-id5761 . -17) (undo-tree-id5762 . -17) (undo-tree-id5763 . -17) (undo-tree-id5764 . -17) (undo-tree-id5765 . -17) (undo-tree-id5766 . -17) (undo-tree-id5767 . -17) (undo-tree-id5768 . -17) (undo-tree-id5769 . -17) (undo-tree-id5770 . -17) (undo-tree-id5771 . -17) (undo-tree-id5772 . -17) (undo-tree-id5773 . -17) (undo-tree-id5774 . -17) (undo-tree-id5775 . -17) (undo-tree-id5776 . -17) (undo-tree-id5777 . -17) (undo-tree-id5778 . -17) (undo-tree-id5779 . -17) (undo-tree-id5780 . -17) (undo-tree-id5781 . -17) (undo-tree-id5782 . -17) (undo-tree-id5783 . -17) (undo-tree-id5784 . -17) (undo-tree-id5785 . -9) (undo-tree-id5786 . -17) (undo-tree-id5787 . -17) 288) ((271 . 288)) (26046 3260 251055 102000) 0 nil])
([nil nil ((#("ptr()" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-5-face) fontified t) 4 5 (face (rainbow-delimiters-depth-5-face) fontified t)) . -270) (undo-tree-id6104 . -5) (undo-tree-id6105 . -5) (undo-tree-id6106 . -5) (undo-tree-id6107 . -5) (undo-tree-id6108 . -5) (undo-tree-id6109 . -5) (undo-tree-id6110 . -5) (undo-tree-id6111 . -5) (undo-tree-id6112 . -5) (undo-tree-id6113 . -5) 275 (t 26046 3265 950087 924000)) nil (26046 3286 267944 17000) 0 nil])
nil
nil
([nil nil ((#("as_" 0 3 (fontified t)) . -267) (undo-tree-id6092 . -3) (undo-tree-id6093 . -3) (undo-tree-id6094 . -3) (undo-tree-id6095 . -3) (undo-tree-id6096 . -3) (undo-tree-id6097 . -3) (undo-tree-id6098 . -3) (undo-tree-id6099 . -3) (undo-tree-id6100 . -3) (undo-tree-id6101 . -3) (undo-tree-id6102 . -3) (undo-tree-id6103 . -3) 270) nil (26046 3286 267936 477000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -266) (undo-tree-id6078 . -1) (undo-tree-id6079 . -1) (undo-tree-id6080 . -1) (undo-tree-id6081 . -1) (undo-tree-id6082 . -1) (undo-tree-id6083 . -1) (undo-tree-id6084 . -1) (undo-tree-id6085 . -1) (undo-tree-id6086 . -1) (undo-tree-id6087 . -1) (undo-tree-id6088 . -1) (undo-tree-id6089 . -1) (undo-tree-id6090 . -1) (undo-tree-id6091 . -1) 267) nil (26046 3286 267927 630000) 0 nil])
([nil nil ((266 . 267)) nil (26046 3286 267917 341000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -266) (undo-tree-id6074 . -1) (undo-tree-id6075 . -1) (undo-tree-id6076 . -1) (undo-tree-id6077 . -1) 267) nil (26046 3286 267916 520000) 0 nil])
([nil nil ((266 . 269)) nil (26046 3286 267913 93000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -267) (undo-tree-id6058 . -1) (undo-tree-id6059 . -1) (undo-tree-id6060 . -1) (undo-tree-id6061 . -1) (undo-tree-id6062 . -1) (undo-tree-id6063 . -1) (undo-tree-id6064 . -1) (undo-tree-id6065 . -1) (undo-tree-id6066 . -1) (undo-tree-id6067 . -1) (undo-tree-id6068 . -1) (#("e" 0 1 (fontified t)) . -268) (undo-tree-id6069 . -1) (undo-tree-id6070 . -1) (undo-tree-id6071 . -1) (undo-tree-id6072 . -1) (undo-tree-id6073 . -1) 269) nil (26046 3286 267911 815000) 0 nil])
([nil nil ((267 . 269)) nil (26046 3286 267900 690000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -267) (undo-tree-id6038 . -1) (undo-tree-id6039 . -1) (undo-tree-id6040 . -1) (undo-tree-id6041 . -1) (undo-tree-id6042 . -1) (undo-tree-id6043 . -1) (undo-tree-id6044 . -1) (undo-tree-id6045 . -1) (undo-tree-id6046 . -1) (undo-tree-id6047 . -1) (undo-tree-id6048 . -1) (undo-tree-id6049 . -1) (undo-tree-id6050 . -1) (undo-tree-id6051 . -1) (#("s" 0 1 (face font-lock-keyword-face fontified t)) . -268) (undo-tree-id6052 . -1) (undo-tree-id6053 . -1) (undo-tree-id6054 . -1) (undo-tree-id6055 . -1) (undo-tree-id6056 . -1) (undo-tree-id6057 . -1) 269) nil (26046 3286 267898 933000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -266) (undo-tree-id6002 . -1) (undo-tree-id6003 . -1) (undo-tree-id6004 . -1) (undo-tree-id6005 . -1) (undo-tree-id6006 . -1) (undo-tree-id6007 . -1) (undo-tree-id6008 . -1) (undo-tree-id6009 . -1) (undo-tree-id6010 . -1) (undo-tree-id6011 . -1) (undo-tree-id6012 . -1) (undo-tree-id6013 . -1) (undo-tree-id6014 . -1) (undo-tree-id6015 . -1) (undo-tree-id6016 . -1) (undo-tree-id6017 . -1) (undo-tree-id6018 . -1) (undo-tree-id6019 . -1) (undo-tree-id6020 . -1) (undo-tree-id6021 . -1) (undo-tree-id6022 . -1) (undo-tree-id6023 . -1) (undo-tree-id6024 . -1) (undo-tree-id6025 . -1) (undo-tree-id6026 . -1) (undo-tree-id6027 . -1) (undo-tree-id6028 . -1) (undo-tree-id6029 . -1) (undo-tree-id6030 . -1) (undo-tree-id6031 . -1) (undo-tree-id6032 . -1) (undo-tree-id6033 . -1) (undo-tree-id6034 . -1) (undo-tree-id6035 . -1) (undo-tree-id6036 . -1) (undo-tree-id6037 . -1) 267) nil (26046 3286 267882 118000) 0 nil])
([nil nil ((262 . 263)) nil (26046 3286 267699 929000) 0 nil])
([nil nil ((232 . 241) (t 26046 3286 283422 506000)) nil (26046 3404 875762 997000) 0 nil])
([nil nil ((241 . 243)) nil (26046 3404 875762 169000) 0 nil])
([nil nil ((241 . 245) (#("da" 0 2 (fontified nil)) . 241) (241 . 243) (#("data" 0 4 (fontified nil)) . -241) (241 . 245) (#("da" 0 2 (fontified t)) . -241) (undo-tree-id6335 . -2) (undo-tree-id6336 . -1) (undo-tree-id6337 . -1) (undo-tree-id6338 . -1) (undo-tree-id6339 . -2) (undo-tree-id6340 . -2) (undo-tree-id6341 . -2) (undo-tree-id6342 . -2) (undo-tree-id6343 . -2) (undo-tree-id6344 . -2) 243) nil (26046 3404 875760 724000) 0 nil])
([nil nil ((245 . 246)) nil (26046 3404 875752 319000) 0 nil])
([nil nil ((#("data" 0 4 (fontified t)) . -241) (undo-tree-id6321 . -4) (undo-tree-id6322 . -4) (undo-tree-id6323 . -4) (undo-tree-id6324 . -4) (undo-tree-id6325 . -4) (undo-tree-id6326 . -4) (undo-tree-id6327 . -4) (undo-tree-id6328 . -4) (undo-tree-id6329 . -4) (undo-tree-id6330 . -4) (undo-tree-id6331 . -4) (undo-tree-id6332 . -4) (undo-tree-id6333 . -4) (undo-tree-id6334 . -4) 245) nil (26046 3404 875751 120000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -239) (undo-tree-id6222 . -1) (undo-tree-id6223 . -1) (undo-tree-id6224 . -1) (undo-tree-id6225 . -1) (undo-tree-id6226 . -1) (undo-tree-id6227 . -1) (undo-tree-id6228 . -1) (undo-tree-id6229 . -1) (undo-tree-id6230 . -1) (undo-tree-id6231 . -1) (undo-tree-id6232 . -1) (undo-tree-id6233 . -1) (undo-tree-id6234 . -1) (undo-tree-id6235 . -1) (undo-tree-id6236 . -1) (undo-tree-id6237 . -1) (undo-tree-id6238 . -1) (undo-tree-id6239 . -1) (undo-tree-id6240 . -1) (undo-tree-id6241 . -1) (undo-tree-id6242 . -1) (undo-tree-id6243 . -1) (undo-tree-id6244 . -1) (undo-tree-id6245 . -1) (undo-tree-id6246 . -1) (undo-tree-id6247 . -1) (undo-tree-id6248 . -1) (undo-tree-id6249 . -1) (undo-tree-id6250 . -1) (undo-tree-id6251 . -1) (undo-tree-id6252 . -1) (undo-tree-id6253 . -1) (undo-tree-id6254 . -1) (undo-tree-id6255 . -1) (undo-tree-id6256 . -1) (undo-tree-id6257 . -1) (undo-tree-id6258 . -1) (undo-tree-id6259 . -1) (undo-tree-id6260 . -1) (undo-tree-id6261 . -1) (undo-tree-id6262 . -1) (undo-tree-id6263 . -1) (undo-tree-id6264 . -1) (undo-tree-id6265 . -1) (undo-tree-id6266 . -1) (undo-tree-id6267 . -1) (#(" " 0 1 (fontified t)) . -240) (undo-tree-id6268 . -1) (undo-tree-id6269 . -1) (undo-tree-id6270 . -1) (undo-tree-id6271 . -1) (undo-tree-id6272 . -1) (undo-tree-id6273 . -1) (undo-tree-id6274 . -1) (undo-tree-id6275 . -1) (undo-tree-id6276 . -1) (undo-tree-id6277 . -1) (undo-tree-id6278 . -1) (undo-tree-id6279 . -1) (undo-tree-id6280 . -1) (undo-tree-id6281 . -1) (undo-tree-id6282 . -1) (undo-tree-id6283 . -1) (undo-tree-id6284 . -1) (undo-tree-id6285 . -1) (undo-tree-id6286 . -1) (undo-tree-id6287 . -1) (undo-tree-id6288 . -1) (undo-tree-id6289 . -1) (undo-tree-id6290 . -1) (undo-tree-id6291 . -1) (undo-tree-id6292 . -1) (undo-tree-id6293 . -1) (undo-tree-id6294 . -1) (undo-tree-id6295 . -1) (undo-tree-id6296 . -1) (undo-tree-id6297 . -1) (undo-tree-id6298 . -1) (undo-tree-id6299 . -1) (undo-tree-id6300 . -1) (undo-tree-id6301 . -1) (undo-tree-id6302 . -1) (undo-tree-id6303 . -1) (undo-tree-id6304 . -1) (undo-tree-id6305 . -1) (undo-tree-id6306 . -1) (undo-tree-id6307 . -1) (undo-tree-id6308 . -1) (undo-tree-id6309 . -1) (undo-tree-id6310 . -1) (undo-tree-id6311 . -1) (#("." 0 1 (fontified t)) . -241) (undo-tree-id6312 . -1) (undo-tree-id6313 . -1) (undo-tree-id6314 . -1) (undo-tree-id6315 . -1) (undo-tree-id6316 . -1) (undo-tree-id6317 . -1) (undo-tree-id6318 . -1) (undo-tree-id6319 . -1) (undo-tree-id6320 . -1) 242) nil (26046 3404 875735 196000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -232) (undo-tree-id6215 . -1) (undo-tree-id6216 . 1) (undo-tree-id6217 . -1) (undo-tree-id6218 . -1) (undo-tree-id6219 . -1) (undo-tree-id6220 . -1) (undo-tree-id6221 . -1) 233) nil (26046 3404 875459 469000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . -268) (undo-tree-id6130 . -1) (undo-tree-id6131 . -1) (undo-tree-id6132 . -1) (undo-tree-id6133 . -1) (undo-tree-id6134 . -1) (undo-tree-id6135 . -1) (undo-tree-id6136 . -1) (undo-tree-id6137 . -1) (undo-tree-id6138 . -1) (undo-tree-id6139 . -1) (undo-tree-id6140 . -1) (undo-tree-id6141 . -1) (undo-tree-id6142 . -1) (undo-tree-id6143 . -1) (undo-tree-id6144 . -1) (undo-tree-id6145 . -1) (undo-tree-id6146 . -1) (undo-tree-id6147 . -1) (undo-tree-id6148 . -1) (undo-tree-id6149 . -1) (undo-tree-id6150 . -1) (undo-tree-id6151 . -1) (undo-tree-id6152 . -1) (undo-tree-id6153 . -1) (undo-tree-id6154 . -1) (undo-tree-id6155 . -1) (undo-tree-id6156 . -1) (undo-tree-id6157 . -1) (undo-tree-id6158 . -1) (undo-tree-id6159 . -1) (undo-tree-id6160 . -1) (undo-tree-id6161 . -1) (undo-tree-id6162 . -1) (undo-tree-id6163 . -1) (undo-tree-id6164 . -1) (undo-tree-id6165 . -1) (undo-tree-id6166 . -1) (undo-tree-id6167 . -1) (undo-tree-id6168 . -1) (undo-tree-id6169 . -1) (undo-tree-id6170 . -1) (undo-tree-id6171 . -1) (undo-tree-id6172 . -1) (undo-tree-id6173 . -1) (undo-tree-id6174 . -1) (undo-tree-id6175 . -1) (undo-tree-id6176 . -1) (undo-tree-id6177 . -1) (undo-tree-id6178 . -1) (undo-tree-id6179 . -1) (undo-tree-id6180 . -1) (undo-tree-id6181 . -1) (undo-tree-id6182 . -1) (undo-tree-id6183 . -1) (undo-tree-id6184 . -1) (undo-tree-id6185 . -1) (undo-tree-id6186 . -1) (undo-tree-id6187 . -1) (undo-tree-id6188 . -1) (undo-tree-id6189 . -1) (undo-tree-id6190 . -1) (undo-tree-id6191 . -1) (undo-tree-id6192 . -1) (undo-tree-id6193 . -1) (undo-tree-id6194 . -1) (undo-tree-id6195 . -1) (undo-tree-id6196 . -1) (undo-tree-id6197 . -1) (undo-tree-id6198 . -1) (undo-tree-id6199 . -1) (undo-tree-id6200 . -1) (undo-tree-id6201 . -1) (undo-tree-id6202 . -1) (undo-tree-id6203 . -1) (undo-tree-id6204 . -1) (undo-tree-id6205 . -1) (undo-tree-id6206 . -1) (undo-tree-id6207 . -1) (undo-tree-id6208 . -1) (undo-tree-id6209 . -1) (undo-tree-id6210 . -1) (undo-tree-id6211 . -1) (undo-tree-id6212 . -1) (undo-tree-id6213 . -1) (undo-tree-id6214 . -1) 269) nil (26046 3404 875451 331000) 0 nil])
([nil nil ((272 . 274)) nil (26046 3404 875391 319000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -273) (undo-tree-id6124 . -1) (undo-tree-id6125 . -1) (undo-tree-id6126 . -1) (undo-tree-id6127 . -1) (undo-tree-id6128 . -1) (undo-tree-id6129 . -1) 274) nil (26046 3404 875390 243000) 0 nil])
([nil nil ((273 . 274)) nil (26046 3404 875384 993000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -273) (undo-tree-id6119 . -1) (undo-tree-id6120 . -1) (undo-tree-id6121 . -1) (undo-tree-id6122 . -1) (undo-tree-id6123 . -1) 274) nil (26046 3404 875383 719000) 0 nil])
([nil nil ((273 . 274)) nil (26046 3404 875378 952000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 278 283 nil nil nil nil #s(yas--exit 284 nil))) #s(yas--exit 284 nil) 40 nil #s(yas--field 1 278 283 nil nil nil nil #s(yas--exit 284 nil)) nil nil)) (273 . 284) (#("load(${1:order})$0" 0 18 (fontified nil)) . 273) (273 . 291) (#("l" 0 1 (fontified nil)) . 273) (273 . 274) (#("load(…)" 0 7 (fontified nil)) . -273) (273 . 280) (#("l" 0 1 (fontified t)) . -273) (undo-tree-id6114 . -1) (undo-tree-id6115 . -1) (undo-tree-id6116 . -1) (undo-tree-id6117 . -1) (undo-tree-id6118 . -1) 274) nil (26046 3404 875376 509000) 0 nil])
([nil nil ((apply yas--snippet-revive 273 284 #s(yas--snippet nil (#s(yas--field 1 278 283 nil nil nil nil #s(yas--exit 284 nil))) #s(yas--exit 284 nil) 40 nil #s(yas--field 1 278 283 nil nil nil nil #s(yas--exit 284 nil)) nil nil))) nil (26046 3404 875363 783000) 0 nil])
([nil nil ((268 . 269)) nil (26046 3404 875359 321000) 0 nil])
([nil nil ((#("order" 0 5 (fontified t)) . -279) (undo-tree-id6359 . -5) (undo-tree-id6360 . -5) (undo-tree-id6361 . -5) (undo-tree-id6362 . -5) (undo-tree-id6363 . -5) (undo-tree-id6364 . -5) (undo-tree-id6365 . -5) 284 (t 26046 3404 923429 709000)) nil (26046 3419 316328 902000) 0 nil])
([nil nil ((279 . 283)) nil (26046 3419 316322 495000) 0 nil])
([nil nil ((apply yas--snippet-revive 279 315 #s(yas--snippet nil nil #s(yas--exit 315 nil) 41 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 315 nil) 41 nil nil nil nil)) (279 . 315) (#("std::sync::atomic::Ordering::Relaxed$0" 0 38 (fontified nil)) . 279) (279 . 317) (#("Oder" 0 4 (fontified nil)) . 279) (279 . 283) (#("std::sync::atomic::Ordering::Relaxed" 0 36 (fontified nil)) . -279) (279 . 315) (#("Oder" 0 4 (face font-lock-type-face fontified t)) . -279) (undo-tree-id6345 . -4) (undo-tree-id6346 . -1) (undo-tree-id6347 . -1) (undo-tree-id6348 . -1) (undo-tree-id6349 . -2) (undo-tree-id6350 . -2) (undo-tree-id6351 . -2) (undo-tree-id6352 . -3) (undo-tree-id6353 . -3) (undo-tree-id6354 . -4) (undo-tree-id6355 . -4) (undo-tree-id6356 . -4) (undo-tree-id6357 . -4) (undo-tree-id6358 . -4) 283) nil (26046 3419 316317 870000) 0 nil])
([nil nil ((328 . 330) (t 26046 3419 363430 589000)) nil (26046 3452 666515 835000) 0 nil])
([nil nil ((328 . 333) (#("ar" 0 2 (fontified nil)) . 328) (328 . 330) (#("array" 0 5 (fontified nil)) . -328) (328 . 333) (#("ar" 0 2 (fontified t)) . -328) (undo-tree-id6397 . -2) (undo-tree-id6398 . -1) (undo-tree-id6399 . -1) (undo-tree-id6400 . -1) (undo-tree-id6401 . -1) (undo-tree-id6402 . -2) (undo-tree-id6403 . -2) (undo-tree-id6404 . -2) (undo-tree-id6405 . -2) 330) nil (26046 3452 666514 365000) 0 nil])
([nil nil ((333 . 334)) nil (26046 3452 666506 775000) 0 nil])
([nil nil ((334 . 335)) nil (26046 3452 666506 234000) 0 nil])
([nil nil ((335 . 338)) nil (26046 3452 666505 643000) 0 nil])
([nil nil ((apply yas--snippet-revive 334 344 #s(yas--snippet nil nil #s(yas--exit 344 nil) 42 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 344 nil) 42 nil nil nil nil)) (334 . 344) (#("iter_mut()$0" 0 12 (fontified nil)) . 334) (334 . 346) (#("iter" 0 4 (fontified nil)) . 334) (334 . 338) (#("iter_mut()" 0 10 (fontified nil)) . -334) (334 . 344) (#("iter" 0 4 (fontified t)) . -334) (undo-tree-id6384 . -4) (undo-tree-id6385 . -1) (undo-tree-id6386 . -1) (undo-tree-id6387 . -2) (undo-tree-id6388 . -2) (undo-tree-id6389 . -2) (undo-tree-id6390 . -2) (undo-tree-id6391 . -3) (undo-tree-id6392 . -3) (undo-tree-id6393 . -4) (undo-tree-id6394 . -4) (undo-tree-id6395 . -4) (undo-tree-id6396 . -4) 338) nil (26046 3452 666504 44000) 0 nil])
([nil nil ((344 . 346)) nil (26046 3452 666492 744000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -345) (undo-tree-id6378 . -1) (undo-tree-id6379 . -1) (undo-tree-id6380 . -1) (undo-tree-id6381 . -1) (undo-tree-id6382 . -1) (undo-tree-id6383 . -1) 346) nil (26046 3452 666491 879000) 0 nil])
([nil nil ((345 . 349)) nil (26046 3452 666486 331000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 354 365 nil nil nil t #s(yas--exit 366 nil))) #s(yas--exit 366 nil) 43 nil #s(yas--field 1 354 365 nil nil nil t #s(yas--exit 366 nil)) nil nil)) (345 . 356) (#("for_each(${1:f})$0" 0 18 (fontified nil)) . 345) (345 . 363) (#("fore" 0 4 (fontified nil)) . 345) (345 . 349) (#("for_each(…) (as Iterator)" 0 25 (fontified nil)) . -345) (345 . 370) (#("fore" 0 4 (fontified t)) . -345) (undo-tree-id6367 . -4) (undo-tree-id6368 . -1) (undo-tree-id6369 . -1) (undo-tree-id6370 . -2) (undo-tree-id6371 . -2) (undo-tree-id6372 . -3) (undo-tree-id6373 . -3) (undo-tree-id6374 . -4) (undo-tree-id6375 . -4) (undo-tree-id6376 . -4) (undo-tree-id6377 . -4) 349) nil (26046 3452 666484 644000) 0 nil])
([nil nil ((355 . 356) (#("f" 0 1 (fontified nil)) . 355) (undo-tree-id6366 . -1) (354 . 355)) nil (26046 3452 666473 898000) 0 nil])
([nil nil ((355 . 356)) nil (26046 3452 666466 14000) 0 nil])
([nil nil ((357 . 365)) nil (26046 3452 666465 282000) 0 nil])
([nil nil ((apply yas--snippet-revive 345 366 #s(yas--snippet nil (#s(yas--field 1 354 365 nil nil nil t #s(yas--exit 366 nil))) #s(yas--exit 366 nil) 43 nil #s(yas--field 1 354 365 nil nil nil t #s(yas--exit 366 nil)) nil nil))) nil (26046 3452 666463 802000) 0 nil])
([nil nil ((366 . 367)) nil (26046 3452 666459 442000) 0 nil])
([nil nil ((251 . 256) (t 26046 3452 683432 634000)) nil (26046 3460 730654 266000) 0 nil])
([nil nil ((#("m" 0 1 (face font-lock-variable-name-face fontified t)) . -252) (undo-tree-id6406 . -1) (undo-tree-id6407 . -1) (undo-tree-id6408 . -1) (undo-tree-id6409 . -1) (undo-tree-id6410 . -1) (undo-tree-id6411 . -1) (undo-tree-id6412 . -1) (undo-tree-id6413 . -1) (undo-tree-id6414 . -1) (undo-tree-id6415 . -1) (undo-tree-id6416 . -1) (undo-tree-id6417 . -1) (undo-tree-id6418 . -1) (undo-tree-id6419 . -1) (undo-tree-id6420 . -1) (undo-tree-id6421 . -1) (undo-tree-id6422 . -1) (#("u" 0 1 (face font-lock-variable-name-face fontified t)) . -253) (undo-tree-id6423 . -1) (undo-tree-id6424 . -1) (undo-tree-id6425 . -1) (undo-tree-id6426 . -1) (undo-tree-id6427 . -1) (undo-tree-id6428 . -1) (undo-tree-id6429 . -1) (undo-tree-id6430 . -1) (undo-tree-id6431 . -1) (undo-tree-id6432 . -1) (undo-tree-id6433 . -1) (undo-tree-id6434 . -1) (undo-tree-id6435 . -1) (#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -254) (undo-tree-id6436 . -1) (undo-tree-id6437 . -1) (undo-tree-id6438 . -1) (undo-tree-id6439 . -1) (undo-tree-id6440 . -1) (undo-tree-id6441 . -1) (undo-tree-id6442 . -1) (#(" " 0 1 (fontified t)) . -255) (undo-tree-id6443 . -1) (undo-tree-id6444 . -1) (undo-tree-id6445 . -1) 256) nil (26046 3460 730650 553000) 0 nil])
([nil nil ((252 . 255)) nil (26046 3460 730609 793000) 0 nil])
([nil nil ((#("array = " 0 5 (face font-lock-variable-name-face fontified t) 5 8 (fontified t)) . -255) (undo-tree-id6638 . -8) (undo-tree-id6639 . -8) (undo-tree-id6640 . 8) (undo-tree-id6641 . -5) (undo-tree-id6642 . -5) (undo-tree-id6643 . -5) (undo-tree-id6644 . -5) (undo-tree-id6645 . -5) (undo-tree-id6646 . -6) (undo-tree-id6647 . -7) (undo-tree-id6648 . -8) (undo-tree-id6649 . -8) (undo-tree-id6650 . -8) (undo-tree-id6651 . -8) (undo-tree-id6652 . -8) (undo-tree-id6653 . -8) (undo-tree-id6654 . -8) (undo-tree-id6655 . -7) (undo-tree-id6656 . -6) (undo-tree-id6657 . -6) (undo-tree-id6658 . -6) (undo-tree-id6659 . -6) (undo-tree-id6660 . -6) (undo-tree-id6661 . -6) (undo-tree-id6662 . -6) (undo-tree-id6663 . -7) (undo-tree-id6664 . -8) (undo-tree-id6665 . -8) (undo-tree-id6666 . -8) (undo-tree-id6667 . -8) (undo-tree-id6668 . -8) (undo-tree-id6669 . -8) (undo-tree-id6670 . -8) 263 (t 26046 3460 746766 463000)) nil (26046 3489 921252 4000) 0 nil])
([nil nil ((#("mut " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -251) (undo-tree-id6544 . -4) (undo-tree-id6545 . -4) (undo-tree-id6546 . -1) (undo-tree-id6547 . -1) (undo-tree-id6548 . -1) (undo-tree-id6549 . -1) (undo-tree-id6550 . -1) (undo-tree-id6551 . -1) (undo-tree-id6552 . -1) (undo-tree-id6553 . -1) (undo-tree-id6554 . -1) (undo-tree-id6555 . -1) (undo-tree-id6556 . -1) (undo-tree-id6557 . -1) (undo-tree-id6558 . -1) (undo-tree-id6559 . -1) (undo-tree-id6560 . -1) (undo-tree-id6561 . -1) (undo-tree-id6562 . -4) (undo-tree-id6563 . -4) (undo-tree-id6564 . -4) (undo-tree-id6565 . -4) (undo-tree-id6566 . -4) (undo-tree-id6567 . -4) (undo-tree-id6568 . -4) (undo-tree-id6569 . -4) (undo-tree-id6570 . -4) (undo-tree-id6571 . -4) (undo-tree-id6572 . -4) (undo-tree-id6573 . -4) (undo-tree-id6574 . -4) (undo-tree-id6575 . -4) (undo-tree-id6576 . -4) (undo-tree-id6577 . -4) (undo-tree-id6578 . -4) (undo-tree-id6579 . -4) (undo-tree-id6580 . -4) (undo-tree-id6581 . -4) (undo-tree-id6582 . -4) (undo-tree-id6583 . -4) (undo-tree-id6584 . -4) (undo-tree-id6585 . -4) (undo-tree-id6586 . -4) (undo-tree-id6587 . -4) (undo-tree-id6588 . -4) (undo-tree-id6589 . -4) (undo-tree-id6590 . -4) (undo-tree-id6591 . -4) (undo-tree-id6592 . -4) (undo-tree-id6593 . -4) (undo-tree-id6594 . -4) (undo-tree-id6595 . -4) (undo-tree-id6596 . -4) (undo-tree-id6597 . -4) (undo-tree-id6598 . -4) (undo-tree-id6599 . -4) (undo-tree-id6600 . -4) (undo-tree-id6601 . -4) (undo-tree-id6602 . -4) (undo-tree-id6603 . -4) (undo-tree-id6604 . -4) (undo-tree-id6605 . -4) (undo-tree-id6606 . -4) (undo-tree-id6607 . -4) (undo-tree-id6608 . -4) (undo-tree-id6609 . -4) (undo-tree-id6610 . -4) (undo-tree-id6611 . -4) (undo-tree-id6612 . -4) (undo-tree-id6613 . -4) (undo-tree-id6614 . -4) (undo-tree-id6615 . -4) (undo-tree-id6616 . -4) (undo-tree-id6617 . -4) (undo-tree-id6618 . -4) (undo-tree-id6619 . -4) (undo-tree-id6620 . -4) (undo-tree-id6621 . -4) (undo-tree-id6622 . -4) (undo-tree-id6623 . -4) (undo-tree-id6624 . -4) (undo-tree-id6625 . -4) (undo-tree-id6626 . -4) (undo-tree-id6627 . -4) (undo-tree-id6628 . -4) (undo-tree-id6629 . -4) (undo-tree-id6630 . -4) (undo-tree-id6631 . -4) (undo-tree-id6632 . -4) (undo-tree-id6633 . -4) (undo-tree-id6634 . -4) (undo-tree-id6635 . -4) (undo-tree-id6636 . -4) (undo-tree-id6637 . -4) 255) nil (26046 3489 921082 985000) 0 nil])
([nil nil ((#("let " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -247) (undo-tree-id6446 . -4) (undo-tree-id6447 . -4) (undo-tree-id6448 . -4) (undo-tree-id6449 . -4) (undo-tree-id6450 . -4) (undo-tree-id6451 . -4) (undo-tree-id6452 . -4) (undo-tree-id6453 . -4) (undo-tree-id6454 . -4) (undo-tree-id6455 . -4) (undo-tree-id6456 . -4) (undo-tree-id6457 . -4) (undo-tree-id6458 . -4) (undo-tree-id6459 . -4) (undo-tree-id6460 . -4) (undo-tree-id6461 . -4) (undo-tree-id6462 . -4) (undo-tree-id6463 . -4) (undo-tree-id6464 . -4) (undo-tree-id6465 . -4) (undo-tree-id6466 . -4) (undo-tree-id6467 . -4) (undo-tree-id6468 . -4) (undo-tree-id6469 . -4) (undo-tree-id6470 . -4) (undo-tree-id6471 . -4) (undo-tree-id6472 . -4) (undo-tree-id6473 . -4) (undo-tree-id6474 . -4) (undo-tree-id6475 . -4) (undo-tree-id6476 . -4) (undo-tree-id6477 . -4) (undo-tree-id6478 . -4) (undo-tree-id6479 . -4) (undo-tree-id6480 . -4) (undo-tree-id6481 . -4) (undo-tree-id6482 . -4) (undo-tree-id6483 . -4) (undo-tree-id6484 . -4) (undo-tree-id6485 . -4) (undo-tree-id6486 . -4) (undo-tree-id6487 . -4) (undo-tree-id6488 . -4) (undo-tree-id6489 . -4) (undo-tree-id6490 . -4) (undo-tree-id6491 . -4) (undo-tree-id6492 . -4) (undo-tree-id6493 . -4) (undo-tree-id6494 . -4) (undo-tree-id6495 . -4) (undo-tree-id6496 . -4) (undo-tree-id6497 . -4) (undo-tree-id6498 . -4) (undo-tree-id6499 . -4) (undo-tree-id6500 . -4) (undo-tree-id6501 . -4) (undo-tree-id6502 . -4) (undo-tree-id6503 . -4) (undo-tree-id6504 . -4) (undo-tree-id6505 . -4) (undo-tree-id6506 . -4) (undo-tree-id6507 . -4) (undo-tree-id6508 . -4) (undo-tree-id6509 . -4) (undo-tree-id6510 . -4) (undo-tree-id6511 . -4) (undo-tree-id6512 . -4) (undo-tree-id6513 . -4) (undo-tree-id6514 . -4) (undo-tree-id6515 . -4) (undo-tree-id6516 . -4) (undo-tree-id6517 . -4) (undo-tree-id6518 . -4) (undo-tree-id6519 . -4) (undo-tree-id6520 . -4) (undo-tree-id6521 . -4) (undo-tree-id6522 . -4) (undo-tree-id6523 . -4) (undo-tree-id6524 . -4) (undo-tree-id6525 . -4) (undo-tree-id6526 . -4) (undo-tree-id6527 . -4) (undo-tree-id6528 . -4) (undo-tree-id6529 . -4) (undo-tree-id6530 . -4) (undo-tree-id6531 . -4) (undo-tree-id6532 . -4) (undo-tree-id6533 . -4) (undo-tree-id6534 . -4) (undo-tree-id6535 . -4) (undo-tree-id6536 . -4) (undo-tree-id6537 . -4) (undo-tree-id6538 . -4) (undo-tree-id6539 . -4) (undo-tree-id6540 . -4) (undo-tree-id6541 . -4) (undo-tree-id6542 . -4) (undo-tree-id6543 . -4) 251) nil (26046 3489 921433 850000) 0 nil])
([nil nil ((#("array.iter_mut().for_each(|v| *v += 1);" 0 6 (fontified t) 6 14 (fontified t) 14 15 (face (rainbow-delimiters-depth-4-face) fontified t) 15 16 (face (rainbow-delimiters-depth-4-face) fontified t) 16 17 (fontified t) 17 25 (fontified t) 25 26 (face (rainbow-delimiters-depth-4-face) fontified t) 26 37 (fontified t) 37 38 (face (rainbow-delimiters-depth-4-face) fontified t) 38 39 (fontified t)) . 316) (undo-tree-id6917 . -26) (undo-tree-id6918 . -39)) nil (26046 3525 718178 305000) 0 nil] [nil nil ((316 . 317)) ((#("
" 0 1 (fontified t)) . 316) (undo-tree-id6671 . -1) (undo-tree-id6672 . -1) (undo-tree-id6673 . -1)) (26046 3489 920940 711000) 0 nil])
([nil nil ((304 . 306)) nil (26046 3525 718176 477000) 0 nil])
nil
([nil nil ((#("a" 0 1 (fontified t)) . -305) (undo-tree-id6913 . -1) (undo-tree-id6914 . -1) (undo-tree-id6915 . -1) (undo-tree-id6916 . -1) 306) nil (26046 3525 718175 642000) 0 nil])
([nil nil ((305 . 309)) nil (26046 3525 718172 353000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -304) (undo-tree-id6821 . -1) (undo-tree-id6822 . -1) (undo-tree-id6823 . -1) (undo-tree-id6824 . -1) (undo-tree-id6825 . -1) (undo-tree-id6826 . -1) (undo-tree-id6827 . -1) (undo-tree-id6828 . -1) (undo-tree-id6829 . -1) (undo-tree-id6830 . -1) (undo-tree-id6831 . -1) (undo-tree-id6832 . -1) (undo-tree-id6833 . -1) (undo-tree-id6834 . -1) (undo-tree-id6835 . -1) (undo-tree-id6836 . -1) (undo-tree-id6837 . -1) (undo-tree-id6838 . -1) (undo-tree-id6839 . -1) (undo-tree-id6840 . -1) (undo-tree-id6841 . -1) (undo-tree-id6842 . -1) (undo-tree-id6843 . -1) (undo-tree-id6844 . -1) (undo-tree-id6845 . -1) (undo-tree-id6846 . -1) (undo-tree-id6847 . -1) (undo-tree-id6848 . -1) (undo-tree-id6849 . -1) (undo-tree-id6850 . -1) (undo-tree-id6851 . -1) (undo-tree-id6852 . -1) (#("i" 0 1 (fontified t)) . -305) (undo-tree-id6853 . -1) (undo-tree-id6854 . -1) (undo-tree-id6855 . -1) (undo-tree-id6856 . -1) (undo-tree-id6857 . -1) (undo-tree-id6858 . -1) (undo-tree-id6859 . -1) (undo-tree-id6860 . -1) (undo-tree-id6861 . -1) (undo-tree-id6862 . -1) (undo-tree-id6863 . -1) (undo-tree-id6864 . -1) (undo-tree-id6865 . -1) (undo-tree-id6866 . -1) (undo-tree-id6867 . -1) (undo-tree-id6868 . -1) (undo-tree-id6869 . -1) (undo-tree-id6870 . -1) (undo-tree-id6871 . -1) (undo-tree-id6872 . -1) (undo-tree-id6873 . -1) (#("t" 0 1 (fontified t)) . -306) (undo-tree-id6874 . -1) (undo-tree-id6875 . -1) (undo-tree-id6876 . -1) (undo-tree-id6877 . -1) (undo-tree-id6878 . -1) (undo-tree-id6879 . -1) (undo-tree-id6880 . -1) (undo-tree-id6881 . -1) (undo-tree-id6882 . -1) (undo-tree-id6883 . -1) (undo-tree-id6884 . -1) (undo-tree-id6885 . -1) (undo-tree-id6886 . -1) (undo-tree-id6887 . -1) (undo-tree-id6888 . -1) (undo-tree-id6889 . -1) (undo-tree-id6890 . -1) (#("e" 0 1 (fontified t)) . -307) (undo-tree-id6891 . -1) (undo-tree-id6892 . -1) (undo-tree-id6893 . -1) (undo-tree-id6894 . -1) (undo-tree-id6895 . -1) (undo-tree-id6896 . -1) (undo-tree-id6897 . -1) (undo-tree-id6898 . -1) (undo-tree-id6899 . -1) (undo-tree-id6900 . -1) (undo-tree-id6901 . -1) (undo-tree-id6902 . -1) (undo-tree-id6903 . -1) (#("r" 0 1 (fontified t)) . -308) (undo-tree-id6904 . -1) (undo-tree-id6905 . -1) (undo-tree-id6906 . -1) (undo-tree-id6907 . -1) (undo-tree-id6908 . -1) (undo-tree-id6909 . -1) (undo-tree-id6910 . -1) (undo-tree-id6911 . -1) (undo-tree-id6912 . -1) 309) nil (26046 3525 718168 298000) 0 nil])
([nil nil ((304 . 305)) nil (26046 3525 717827 440000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -304) (undo-tree-id6812 . -1) (undo-tree-id6813 . -1) (undo-tree-id6814 . -1) (undo-tree-id6815 . -1) (undo-tree-id6816 . -1) (undo-tree-id6817 . -1) (undo-tree-id6818 . -1) (undo-tree-id6819 . -1) (undo-tree-id6820 . -1) 305) nil (26046 3525 717826 367000) 0 nil])
([nil nil ((304 . 305)) nil (26046 3525 717820 229000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -304) (undo-tree-id6806 . -1) (undo-tree-id6807 . -1) (undo-tree-id6808 . -1) (undo-tree-id6809 . -1) (undo-tree-id6810 . -1) (undo-tree-id6811 . -1) 305) nil (26046 3525 717819 276000) 0 nil])
([nil nil ((304 . 309)) nil (26046 3525 717815 143000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -304) (undo-tree-id6736 . -1) (undo-tree-id6737 . -1) (undo-tree-id6738 . -1) (undo-tree-id6739 . -1) (undo-tree-id6740 . -1) (undo-tree-id6741 . -1) (undo-tree-id6742 . -1) (undo-tree-id6743 . -1) (undo-tree-id6744 . -1) (undo-tree-id6745 . -1) (undo-tree-id6746 . -1) (undo-tree-id6747 . -1) (undo-tree-id6748 . -1) (undo-tree-id6749 . -1) (undo-tree-id6750 . -1) (undo-tree-id6751 . -1) (undo-tree-id6752 . -1) (undo-tree-id6753 . -1) (undo-tree-id6754 . -1) (undo-tree-id6755 . -1) (undo-tree-id6756 . -1) (undo-tree-id6757 . -1) (undo-tree-id6758 . -1) (undo-tree-id6759 . -1) (undo-tree-id6760 . -1) (#("i" 0 1 (fontified t)) . -305) (undo-tree-id6761 . -1) (undo-tree-id6762 . -1) (undo-tree-id6763 . -1) (undo-tree-id6764 . -1) (undo-tree-id6765 . -1) (undo-tree-id6766 . -1) (undo-tree-id6767 . -1) (undo-tree-id6768 . -1) (undo-tree-id6769 . -1) (undo-tree-id6770 . -1) (undo-tree-id6771 . -1) (undo-tree-id6772 . -1) (undo-tree-id6773 . -1) (undo-tree-id6774 . -1) (undo-tree-id6775 . -1) (undo-tree-id6776 . -1) (undo-tree-id6777 . -1) (undo-tree-id6778 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -306) (undo-tree-id6779 . -1) (undo-tree-id6780 . -1) (undo-tree-id6781 . -1) (undo-tree-id6782 . -1) (undo-tree-id6783 . -1) (undo-tree-id6784 . -1) (undo-tree-id6785 . -1) (undo-tree-id6786 . -1) (undo-tree-id6787 . -1) (undo-tree-id6788 . -1) (undo-tree-id6789 . -1) (undo-tree-id6790 . -1) (undo-tree-id6791 . -1) (#("t" 0 1 (fontified t)) . -307) (undo-tree-id6792 . -1) (undo-tree-id6793 . -1) (undo-tree-id6794 . -1) (undo-tree-id6795 . -1) (undo-tree-id6796 . -1) (undo-tree-id6797 . -1) (undo-tree-id6798 . -1) (undo-tree-id6799 . -1) (undo-tree-id6800 . -1) (#("o" 0 1 (fontified t)) . -308) (undo-tree-id6801 . -1) (undo-tree-id6802 . -1) (undo-tree-id6803 . -1) (undo-tree-id6804 . -1) (undo-tree-id6805 . -1) 309) nil (26046 3525 717812 67000) 0 nil])
([nil nil ((306 . 309)) nil (26046 3525 717770 129000) 0 nil])
([nil nil ((apply yas--snippet-revive 307 317 #s(yas--snippet nil nil #s(yas--exit 317 nil) 44 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 317 nil) 44 nil nil nil nil)) (307 . 317) (#("iter_mut()$0" 0 12 (fontified nil)) . 307) (307 . 319) (#("it" 0 2 (fontified nil)) . 307) (307 . 309) (#("iter_mut()" 0 10 (fontified nil)) . -307) (307 . 317) (#("it" 0 2 (fontified t)) . -307) (undo-tree-id6728 . -2) (undo-tree-id6729 . -1) (undo-tree-id6730 . -1) (undo-tree-id6731 . -1) (undo-tree-id6732 . -2) (undo-tree-id6733 . -2) (undo-tree-id6734 . -2) (undo-tree-id6735 . -2) 309) nil (26046 3525 717768 682000) 0 nil])
([nil nil ((#("mut()" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-4-face) fontified t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t)) . -312) (undo-tree-id6720 . -5) (undo-tree-id6721 . -5) (undo-tree-id6722 . -5) (undo-tree-id6723 . -5) (undo-tree-id6724 . -5) (undo-tree-id6725 . -5) (undo-tree-id6726 . -5) (undo-tree-id6727 . -5) 317) nil (26046 3525 717761 79000) 0 nil])
([nil nil ((#("iter_" 0 5 (fontified t)) . -307) (undo-tree-id6707 . -5) (undo-tree-id6708 . -5) (undo-tree-id6709 . -5) (undo-tree-id6710 . -5) (undo-tree-id6711 . -5) (undo-tree-id6712 . -5) (undo-tree-id6713 . -5) (undo-tree-id6714 . -5) (undo-tree-id6715 . -5) (undo-tree-id6716 . -5) (undo-tree-id6717 . -5) (undo-tree-id6718 . -5) (undo-tree-id6719 . -5) 312) nil (26046 3525 717754 678000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -306) (undo-tree-id6674 . -1) (undo-tree-id6675 . -1) (undo-tree-id6676 . -1) (undo-tree-id6677 . -1) (undo-tree-id6678 . -1) (undo-tree-id6679 . -1) (undo-tree-id6680 . -1) (undo-tree-id6681 . -1) (undo-tree-id6682 . -1) (undo-tree-id6683 . -1) (undo-tree-id6684 . -1) (undo-tree-id6685 . -1) (undo-tree-id6686 . -1) (undo-tree-id6687 . -1) (undo-tree-id6688 . -1) (undo-tree-id6689 . -1) (undo-tree-id6690 . -1) (undo-tree-id6691 . -1) (undo-tree-id6692 . -1) (undo-tree-id6693 . -1) (undo-tree-id6694 . -1) (undo-tree-id6695 . -1) (undo-tree-id6696 . -1) (undo-tree-id6697 . -1) (undo-tree-id6698 . -1) (undo-tree-id6699 . -1) (undo-tree-id6700 . -1) (undo-tree-id6701 . -1) (undo-tree-id6702 . -1) (undo-tree-id6703 . -1) (undo-tree-id6704 . -1) (undo-tree-id6705 . -1) (undo-tree-id6706 . -1) 307) nil (26046 3630 166357 21000) 0 nil])
([nil nil ((247 . 259)) ((#("let array = " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 9 (face font-lock-variable-name-face fontified t) 9 12 (fontified t)) . 247) (undo-tree-id7671 . -4) (undo-tree-id7672 . -4) (undo-tree-id7673 . 3) (undo-tree-id7674 . -9) (undo-tree-id7675 . -9) (undo-tree-id7676 . -4) (undo-tree-id7677 . -4) (undo-tree-id7678 . -4) (undo-tree-id7679 . -4) (undo-tree-id7680 . -4) (undo-tree-id7681 . -4) (undo-tree-id7682 . -4) (undo-tree-id7683 . -4) (undo-tree-id7684 . -4) (undo-tree-id7685 . -4) (undo-tree-id7686 . -4)) (26046 3632 107960 797000) 0 nil])
([nil nil ((251 . 255)) ((#("mut " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . 251) (undo-tree-id7668 . -4) (undo-tree-id7669 . -4) (undo-tree-id7670 . -4)) (26046 3632 768087 797000) 0 nil])
([nil nil ((#("mut " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . 251) (undo-tree-id7687 . -4) (undo-tree-id7688 . -4)) ((251 . 255)) (26046 3632 797119 801000) 0 nil])
([nil nil ((#("let " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . 247) (undo-tree-id7689 . -4) (undo-tree-id7690 . -4) (undo-tree-id7691 . -4) (undo-tree-id7692 . -4) (undo-tree-id7693 . -4) (undo-tree-id7694 . -4) (undo-tree-id7695 . -4) (undo-tree-id7696 . -4) (undo-tree-id7697 . -4) (undo-tree-id7698 . -4) (undo-tree-id7699 . -4) (undo-tree-id7700 . -4) (undo-tree-id7701 . -4)) ((247 . 251)) (26046 3632 837265 939000) 0 nil])
([nil nil ((247 . 248)) ((#("p" 0 1 (fontified t)) . 247) (undo-tree-id7665 . -1) (undo-tree-id7666 . -1) (undo-tree-id7667 . -1)) (26046 3632 878459 497000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . 247) (undo-tree-id7702 . -1) (undo-tree-id7703 . -1)) ((247 . 248)) (26046 3632 919809 966000) 0 nil])
([nil nil ((247 . 257)) ((#("let ptr = " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 7 (face font-lock-variable-name-face fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t)) . 247) (undo-tree-id7632 . -7) (undo-tree-id7633 . -7) (undo-tree-id7634 . -7) (undo-tree-id7635 . -7) (undo-tree-id7636 . -7) (undo-tree-id7637 . -4) (undo-tree-id7638 . -4) (undo-tree-id7639 . -4) (undo-tree-id7640 . -4) (undo-tree-id7641 . -4) (undo-tree-id7642 . -4) (undo-tree-id7643 . -4) (undo-tree-id7644 . -4) (undo-tree-id7645 . -4) (undo-tree-id7646 . -4) (undo-tree-id7647 . -4) (undo-tree-id7648 . -4) (undo-tree-id7649 . -4) (undo-tree-id7650 . -4) (undo-tree-id7651 . -4) (undo-tree-id7652 . -4) (undo-tree-id7653 . -4) (undo-tree-id7654 . -4) (undo-tree-id7655 . -4) (undo-tree-id7656 . -4) (undo-tree-id7657 . -4) (undo-tree-id7658 . -4) (undo-tree-id7659 . -4) (undo-tree-id7660 . -4) (undo-tree-id7661 . -7) (undo-tree-id7662 . -7) (undo-tree-id7663 . -10) (undo-tree-id7664 . -10)) (26046 3632 962198 212000) 0 nil])
([nil nil ((#("array" 0 5 (fontified t)) . 257) (undo-tree-id7704 . -5) (undo-tree-id7705 . -5)) ((257 . 262)) (26046 3633 689 625000) 0 nil])
([nil nil ((#(" = " 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 254) (undo-tree-id7706 . -3) (undo-tree-id7707 . -3) (undo-tree-id7708 . -3) (undo-tree-id7709 . -3) (undo-tree-id7710 . -3) (undo-tree-id7711 . -3)) ((254 . 257)) (26046 3633 40808 271000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . 266) (undo-tree-id7712 . -1) (undo-tree-id7713 . -1)) ((266 . 267)) (26046 3634 835811 379000) 1 nil])
([nil nil ((#("ptr" 0 3 (face font-lock-variable-name-face fontified t)) . 251) (undo-tree-id7714 . -3) (undo-tree-id7715 . -3) (undo-tree-id7716 . -3) (undo-tree-id7717 . -3) (undo-tree-id7718 . -3) (undo-tree-id7719 . -3) (undo-tree-id7720 . -3) (undo-tree-id7721 . -3) (undo-tree-id7722 . -3) (undo-tree-id7723 . -3) (undo-tree-id7724 . -3)) ((251 . 254)) (26046 3634 504767 448000) 0 nil] [nil nil ((#("unsafe { " 0 6 (face rust-unsafe fontified t) 6 7 (fontified t) 7 8 (face (rainbow-delimiters-depth-4-face) fontified t) 8 9 (fontified t)) . 257) (undo-tree-id7763 . -9) (undo-tree-id7764 . -1) (undo-tree-id7765 . -1) (undo-tree-id7766 . -9) (undo-tree-id7767 . -9)) ((257 . 266)) (26046 3635 989118 463000) 0 nil])
([nil nil ((251 . 254)) ((#("arr" 0 3 (face font-lock-variable-name-face fontified t)) . 251) (undo-tree-id7744 . -1) (undo-tree-id7745 . -1) (undo-tree-id7746 . -1) (undo-tree-id7747 . -2) (undo-tree-id7748 . -2) (undo-tree-id7749 . -2) (undo-tree-id7750 . -3) (undo-tree-id7751 . -3) (undo-tree-id7752 . -3) (undo-tree-id7753 . -3) (undo-tree-id7754 . -3) (undo-tree-id7755 . -3) (undo-tree-id7756 . -3) (undo-tree-id7757 . -3) (undo-tree-id7758 . -3) (undo-tree-id7759 . -3) (undo-tree-id7760 . -3) (undo-tree-id7761 . -3) (undo-tree-id7762 . -3)) (26046 3634 114296 378000) 0 nil])
([nil nil ((#(" }" 0 1 (fontified t) 1 2 (face (rainbow-delimiters-depth-3-face) fontified t)) . 304)) ((304 . 306) (t 26046 3569 976773 76000)) (26046 3636 193654 783000) 0 nil])
([nil nil ((#("arr" 0 3 (face font-lock-variable-name-face fontified t)) . 251) (undo-tree-id7725 . -1) (undo-tree-id7726 . -1) (undo-tree-id7727 . -1) (undo-tree-id7728 . -2) (undo-tree-id7729 . -2) (undo-tree-id7730 . -2) (undo-tree-id7731 . -3) (undo-tree-id7732 . -3) (undo-tree-id7733 . -3) (undo-tree-id7734 . -3) (undo-tree-id7735 . -3) (undo-tree-id7736 . -3) (undo-tree-id7737 . -3) (undo-tree-id7738 . -3) (undo-tree-id7739 . -3) (undo-tree-id7740 . -3) (undo-tree-id7741 . -3) (undo-tree-id7742 . -3) (undo-tree-id7743 . -3)) ((251 . 254)) (26046 3633 771501 290000) 0 nil])
([nil nil ((314 . 315) (t 26046 3569 976773 76000)) ((#("p" 0 1 (fontified t)) . 314) (undo-tree-id7580 . -1) (undo-tree-id7582 . -1) (undo-tree-id7584 . -1) (undo-tree-id7586 . -1)) (26046 3636 404700 323000) 0 nil])
([nil nil ((251 . 254)) ((#("prt" 0 3 (face font-lock-variable-name-face fontified t)) . 251)) (26046 3633 241501 657000) 0 nil])
([nil nil ((314 . 317) (#("p" 0 1 (fontified nil)) . 314) (314 . 315) (#("ptr" 0 3 (fontified nil)) . 314) (314 . 317) (#("p" 0 1 (fontified t)) . 314)) ((314 . 315) (#("ptr" 0 3 (fontified nil)) . 314) (314 . 317) (#("p" 0 1 (fontified nil)) . 314) (314 . 315) (#("ptr" 0 3 (fontified t)) . 314) (undo-tree-id7467 . -3) (undo-tree-id7468 . -3) (undo-tree-id7470 . -3) (undo-tree-id7472 . -3) (undo-tree-id7474 . -3) (undo-tree-id7476 . -3) (undo-tree-id7478 . -3) (undo-tree-id7480 . -3) (undo-tree-id7482 . -3) (undo-tree-id7484 . -3) (undo-tree-id7486 . -3) (undo-tree-id7488 . -3) (undo-tree-id7490 . -3) (undo-tree-id7492 . -3) (undo-tree-id7494 . -3) (undo-tree-id7496 . -3) (undo-tree-id7498 . -3) (undo-tree-id7500 . -3) (undo-tree-id7502 . -3) (undo-tree-id7504 . -3) (undo-tree-id7506 . -3) (undo-tree-id7508 . -3) (undo-tree-id7510 . -3) (undo-tree-id7512 . -3) (undo-tree-id7514 . -3) (undo-tree-id7516 . -3) (undo-tree-id7518 . -3) (undo-tree-id7520 . -3) (undo-tree-id7522 . -3) (undo-tree-id7524 . -3) (undo-tree-id7526 . -3) (undo-tree-id7528 . -3) (undo-tree-id7530 . -3) (undo-tree-id7532 . -3) (undo-tree-id7534 . -3) (undo-tree-id7536 . -3) (undo-tree-id7538 . -3) (undo-tree-id7540 . -3) (undo-tree-id7542 . -3) (undo-tree-id7544 . -3) (undo-tree-id7546 . -3) (undo-tree-id7548 . -3) (undo-tree-id7550 . -3) (undo-tree-id7552 . -3) (undo-tree-id7554 . -3) (undo-tree-id7556 . -3) (undo-tree-id7558 . -3) (undo-tree-id7560 . -3) (undo-tree-id7562 . -3) (undo-tree-id7564 . -3) (undo-tree-id7566 . -3) (undo-tree-id7568 . -3) (undo-tree-id7570 . -3) (undo-tree-id7572 . -3) (undo-tree-id7574 . -3) (undo-tree-id7576 . -3) (undo-tree-id7578 . -3)) (26046 3636 626210 407000) 0 nil])
nil
([nil nil ((317 . 322)) ((#(".iter" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . 317) (undo-tree-id7406 . -1) (undo-tree-id7407 . -5) (undo-tree-id7409 . -1) (undo-tree-id7411 . -1) (undo-tree-id7413 . -2) (undo-tree-id7415 . -3) (undo-tree-id7417 . -3) (undo-tree-id7419 . -4) (undo-tree-id7421 . -5) (undo-tree-id7423 . -5) (undo-tree-id7425 . -5) (undo-tree-id7427 . -5) (undo-tree-id7429 . -5) (undo-tree-id7431 . -5) (undo-tree-id7433 . -4) (undo-tree-id7435 . -3) (undo-tree-id7437 . -2) (undo-tree-id7439 . -1) (undo-tree-id7441 . -1) (undo-tree-id7443 . -1) (undo-tree-id7445 . -1) (undo-tree-id7447 . -1) (undo-tree-id7449 . -1) (undo-tree-id7451 . -1) (undo-tree-id7453 . -1) (undo-tree-id7455 . -1) (undo-tree-id7457 . -1) (undo-tree-id7459 . -1) (undo-tree-id7461 . -1) (undo-tree-id7463 . -1) (undo-tree-id7465 . -5)) (26046 3636 903919 237000) 0 nil])
([nil nil ((#("iter" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . 318)) ((318 . 322)) (26046 3637 915243 58000) 0 nil])
([nil nil ((#("ptr." 0 3 (fontified t) 3 4 (fontified t)) . -314) (undo-tree-id7770 . -4) (undo-tree-id7771 . -4) (undo-tree-id7772 . -3) (undo-tree-id7773 . -3) (undo-tree-id7774 . -3) (undo-tree-id7775 . -3) (undo-tree-id7776 . -3) (undo-tree-id7777 . -3) (undo-tree-id7778 . -3) (undo-tree-id7779 . -3) (undo-tree-id7780 . -3) (undo-tree-id7781 . -3) (undo-tree-id7782 . -3) (undo-tree-id7783 . -4) (undo-tree-id7784 . -4) (undo-tree-id7785 . -4) (undo-tree-id7786 . -4) (undo-tree-id7787 . -4) (undo-tree-id7788 . -4) (undo-tree-id7789 . -4) 318) nil (26046 3642 836046 70000) 0 nil] [nil nil ((#("." 0 1 (fontified t)) . 317) (undo-tree-id7768 . -1) (undo-tree-id7769 . -1)) ((317 . 318)) (26046 3637 487139 979000) 0 nil])
([nil nil ((314 . 319) (t 26046 3642 853444 184000)) nil (26046 3691 645381 743000) 0 nil])
([nil nil ((317 . 318)) ((#("." 0 1 (fontified t)) . 317) (undo-tree-id7398 . -1) (undo-tree-id7399 . -1) (undo-tree-id7400 . -1) (undo-tree-id7401 . -1) (undo-tree-id7402 . -1) (undo-tree-id7403 . -1) (undo-tree-id7404 . -1) (undo-tree-id7405 . -1)) (26046 3603 412620 348000) 0 nil])
([nil nil ((#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -318) (undo-tree-id7886 . -1) (undo-tree-id7887 . -1) (undo-tree-id7888 . -1) (undo-tree-id7889 . -1) (undo-tree-id7890 . -1) (undo-tree-id7891 . -1) 319) nil (26046 3691 645380 695000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -317) (undo-tree-id7245 . -1) (undo-tree-id7246 . -1) (undo-tree-id7247 . -1) (undo-tree-id7248 . -1) (undo-tree-id7249 . -1) (undo-tree-id7250 . -1) 318) ((317 . 318)) (26046 3603 221279 708000) 0 nil])
([nil nil ((318 . 319)) nil (26046 3691 645376 121000) 0 nil])
([nil nil ((317 . 318)) ((#("." 0 1 (fontified t)) . 317) (undo-tree-id7390 . -1) (undo-tree-id7391 . -1) (undo-tree-id7392 . -1) (undo-tree-id7393 . -1) (undo-tree-id7394 . -1) (undo-tree-id7395 . -1) (undo-tree-id7396 . -1) (undo-tree-id7397 . -1)) (26046 3602 998884 129000) 0 nil])
([nil nil ((#("v" 0 1 (face font-lock-variable-name-face fontified t)) . -318) (undo-tree-id7880 . -1) (undo-tree-id7881 . -1) (undo-tree-id7882 . -1) (undo-tree-id7883 . -1) (undo-tree-id7884 . -1) (undo-tree-id7885 . -1) 319) nil (26046 3691 645375 187000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -317) (undo-tree-id7239 . -1) (undo-tree-id7240 . -1) (undo-tree-id7241 . -1) (undo-tree-id7242 . -1) (undo-tree-id7243 . -1) (undo-tree-id7244 . -1) 318) ((317 . 318)) (26046 3602 834266 322000) 0 nil])
([nil nil ((318 . 322)) nil (26046 3691 645370 444000) 0 nil])
([nil nil ((#("ptr" 0 3 (fontified t)) . -314) (undo-tree-id7142 . -3) (undo-tree-id7143 . -3) (undo-tree-id7144 . -3) (undo-tree-id7145 . -3) (undo-tree-id7146 . -3) (undo-tree-id7147 . -3) (undo-tree-id7148 . -3) (undo-tree-id7149 . -3) (undo-tree-id7150 . -3) (undo-tree-id7151 . -3) (undo-tree-id7152 . -3) (undo-tree-id7153 . -3) (undo-tree-id7154 . -3) (undo-tree-id7155 . -3) (undo-tree-id7156 . -3) (undo-tree-id7157 . -3) (undo-tree-id7158 . -3) (undo-tree-id7159 . -3) (undo-tree-id7160 . -3) (undo-tree-id7161 . -3) (undo-tree-id7162 . -3) (undo-tree-id7163 . -3) (undo-tree-id7164 . -3) (undo-tree-id7165 . -3) (undo-tree-id7166 . -3) (undo-tree-id7167 . -3) (undo-tree-id7168 . -3) (undo-tree-id7169 . -3) (undo-tree-id7170 . -3) (undo-tree-id7171 . -3) (undo-tree-id7172 . -3) (undo-tree-id7173 . -3) (undo-tree-id7174 . -3) (undo-tree-id7175 . -3) (undo-tree-id7176 . -3) (undo-tree-id7177 . -3) (undo-tree-id7178 . -3) (undo-tree-id7179 . -3) (undo-tree-id7180 . -3) (undo-tree-id7181 . -3) (undo-tree-id7182 . -3) (undo-tree-id7183 . -3) (undo-tree-id7184 . -3) (undo-tree-id7185 . -3) (undo-tree-id7186 . -3) (undo-tree-id7187 . -3) (undo-tree-id7188 . -3) (undo-tree-id7189 . -3) (undo-tree-id7190 . -3) (undo-tree-id7191 . -3) (undo-tree-id7192 . -3) (undo-tree-id7193 . -3) (undo-tree-id7194 . -3) (undo-tree-id7195 . -3) (undo-tree-id7196 . -3) (undo-tree-id7197 . -3) (undo-tree-id7198 . -3) (undo-tree-id7199 . -3) (undo-tree-id7200 . -3) (undo-tree-id7201 . -3) (undo-tree-id7202 . -3) (undo-tree-id7203 . -3) (undo-tree-id7204 . -3) (undo-tree-id7205 . -3) (undo-tree-id7206 . -3) (undo-tree-id7207 . -3) (undo-tree-id7208 . -3) (undo-tree-id7209 . -3) (undo-tree-id7210 . -3) (undo-tree-id7211 . -3) (undo-tree-id7212 . -3) (undo-tree-id7213 . -3) (undo-tree-id7214 . -3) (undo-tree-id7215 . -3) (undo-tree-id7216 . -3) (undo-tree-id7217 . -3) (undo-tree-id7218 . -3) (undo-tree-id7219 . -3) (undo-tree-id7220 . -3) (undo-tree-id7221 . -3) (undo-tree-id7222 . -3) (undo-tree-id7223 . -3) (undo-tree-id7224 . -3) (undo-tree-id7225 . -3) (undo-tree-id7226 . -3) (undo-tree-id7227 . -3) (undo-tree-id7228 . -3) (undo-tree-id7229 . -3) (undo-tree-id7230 . -3) (undo-tree-id7231 . -3) (undo-tree-id7232 . -3) (undo-tree-id7233 . -3) (undo-tree-id7234 . -3) (undo-tree-id7235 . -3) (undo-tree-id7236 . -3) (undo-tree-id7237 . -3) (undo-tree-id7238 . -3) 317) ((314 . 317)) (26046 3602 833619 260000) 0 nil])
([nil nil ((#("m" 0 1 (face font-lock-variable-name-face fontified t)) . -321) (undo-tree-id7873 . -1) (undo-tree-id7874 . -1) (undo-tree-id7875 . -1) (undo-tree-id7876 . -1) (undo-tree-id7877 . -1) (undo-tree-id7878 . -1) (undo-tree-id7879 . -1) 322) nil (26046 3691 645369 518000) 0 nil])
nil
([nil nil ((321 . 324)) nil (26046 3691 645363 771000) 0 nil])
([nil nil ((324 . 331)) nil (26046 3691 645363 99000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . -329) (undo-tree-id7856 . -1) (undo-tree-id7857 . -1) (undo-tree-id7858 . -1) (undo-tree-id7859 . -1) (undo-tree-id7860 . -1) (undo-tree-id7861 . -1) (undo-tree-id7862 . -1) (undo-tree-id7863 . -1) (undo-tree-id7864 . -1) (undo-tree-id7865 . -1) (undo-tree-id7866 . -1) (#("p" 0 1 (fontified t)) . -330) (undo-tree-id7867 . -1) (undo-tree-id7868 . -1) (undo-tree-id7869 . -1) (undo-tree-id7870 . -1) (undo-tree-id7871 . -1) (undo-tree-id7872 . -1) 331) nil (26046 3691 645361 640000) 0 nil])
([nil nil ((329 . 331)) nil (26046 3691 645349 344000) 0 nil])
([nil nil ((apply yas--snippet-revive 329 360 #s(yas--snippet nil nil #s(yas--exit 350 nil) 45 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 350 nil) 45 nil nil nil nil)) (329 . 360) (#("unsafe {
            $0
        }" 0 33 (fontified nil)) . 329) (353 . 361) (338 . 350) (#("    " 0 4 (fontified nil)) . 338) (329 . 346) (#("un" 0 2 (fontified nil)) . 329) (329 . 331) (#("unsafe" 0 6 (fontified nil)) . -329) (329 . 335) (#("un" 0 2 (fontified t)) . -329) (undo-tree-id7847 . -2) (undo-tree-id7848 . -1) (undo-tree-id7849 . -1) (undo-tree-id7850 . -1) (undo-tree-id7851 . -2) (undo-tree-id7852 . -2) (undo-tree-id7853 . -2) (undo-tree-id7854 . -2) (undo-tree-id7855 . -2) 331) nil (26046 3691 645347 723000) 0 nil])
([nil nil ((350 . 351)) nil (26046 3691 645338 745000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -350) (undo-tree-id7844 . -1) (undo-tree-id7845 . -1) (undo-tree-id7846 . -1) 351) nil (26046 3691 645337 911000) 0 nil])
([nil nil ((350 . 352)) nil (26046 3691 645335 45000) 0 nil])
([nil nil ((351 . 354) (#("p" 0 1 (fontified nil)) . 351) (351 . 352) (#("ptr" 0 3 (fontified nil)) . -351) (351 . 354) (#("p" 0 1 (fontified t)) . -351) (undo-tree-id7839 . -1) (undo-tree-id7840 . -1) (undo-tree-id7841 . -1) (undo-tree-id7842 . -1) (undo-tree-id7843 . -1) 352) nil (26046 3691 645333 792000) 0 nil])
([nil nil ((364 . 367)) nil (26046 3691 645328 996000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -232) (#("
         " 0 1 (fontified t) 1 10 (fontified t)) . 337) (#("  " 0 2 (fontified t)) . 348) (undo-tree-id7816 . -2) (undo-tree-id7817 . -2) (undo-tree-id7818 . -2) (undo-tree-id7819 . -2) (undo-tree-id7820 . -2) (undo-tree-id7821 . -2) (undo-tree-id7822 . -2) (undo-tree-id7823 . -2) (undo-tree-id7824 . -2) (undo-tree-id7825 . -2) (undo-tree-id7826 . -2) (undo-tree-id7827 . -2) (undo-tree-id7828 . -2) (undo-tree-id7829 . -2) (undo-tree-id7830 . -2) (undo-tree-id7831 . -2) (undo-tree-id7832 . -2) (undo-tree-id7833 . -2) (#("
       " 0 1 (fontified t) 1 8 (fontified t)) . -354) (undo-tree-id7834 . -7) (undo-tree-id7835 . -7) (undo-tree-id7836 . -7) (undo-tree-id7837 . -7) (undo-tree-id7838 . -8) 362) nil (26046 3691 645326 834000) 0 nil])
([nil nil ((342 . 350) (#("            " 0 12 (fontified nil)) . 341) (undo-tree-id7812 . -8) (undo-tree-id7813 . -8) (undo-tree-id7814 . -8) (undo-tree-id7815 . -8) (349 . 353) (340 . 350)) nil (26046 3691 645167 442000) 0 nil])
([nil nil ((341 . 353)) nil (26046 3691 645163 838000) 0 nil])
([nil nil ((353 . 354)) nil (26046 3691 645163 145000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -353) (undo-tree-id7807 . -1) (undo-tree-id7808 . -1) (undo-tree-id7809 . -1) (undo-tree-id7810 . -1) (undo-tree-id7811 . -1) 354) nil (26046 3691 645162 276000) 0 nil])
([nil nil ((353 . 355)) nil (26046 3691 645157 988000) 0 nil])
([nil nil ((354 . 361) (#("e" 0 1 (fontified nil)) . 354) (354 . 355) (#("element" 0 7 (fontified nil)) . -354) (354 . 361) (#("e" 0 1 (fontified t)) . -354) (undo-tree-id7802 . -1) (undo-tree-id7803 . -1) (undo-tree-id7804 . -1) (undo-tree-id7805 . -1) (undo-tree-id7806 . -1) 355) nil (26046 3691 645156 646000) 0 nil])
([nil nil ((361 . 364)) nil (26046 3691 645151 466000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -362) (undo-tree-id7790 . -1) (undo-tree-id7791 . -1) (undo-tree-id7792 . -1) (undo-tree-id7793 . -1) (undo-tree-id7794 . -1) (undo-tree-id7795 . -1) (undo-tree-id7796 . -1) (undo-tree-id7797 . -1) (#(" " 0 1 (fontified t)) . -363) (undo-tree-id7798 . -1) (undo-tree-id7799 . -1) (undo-tree-id7800 . -1) (undo-tree-id7801 . -1) 364) nil (26046 3691 645148 905000) 0 nil])
([nil nil ((362 . 367)) nil (26046 3691 645128 962000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . -353) (undo-tree-id7892 . -1) (undo-tree-id7893 . -1) (undo-tree-id7894 . -1) (undo-tree-id7895 . -1) (undo-tree-id7896 . -1) (undo-tree-id7897 . -1) (undo-tree-id7898 . -1) (undo-tree-id7899 . -1) 354 (t 26046 3691 693447 134000)) nil (26046 3695 726322 832000) 0 nil])
([nil nil ((312 . 316) (t 26046 3695 743447 373000)) nil (26046 3711 181702 83000) 0 nil])
([nil nil ((#("        for mut element in unsafe { *ptr } {
            element += 1;
        }" 0 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 15 (face font-lock-keyword-face fontified t) 15 16 (fontified t) 16 23 (face font-lock-variable-name-face fontified t) 23 24 (fontified t) 24 26 (face font-lock-keyword-face fontified t) 26 27 (fontified t) 27 33 (face rust-unsafe fontified t) 33 34 (fontified t) 34 35 (face (rainbow-delimiters-depth-4-face) fontified t) 35 37 (fontified t) 37 40 (fontified t) 40 41 (fontified t) 41 42 (face (rainbow-delimiters-depth-4-face) fontified t) 42 43 (fontified t) 43 44 (face (rainbow-delimiters-depth-4-face) fontified t) 44 45 (fontified t) 45 57 (fontified t) 57 70 (fontified t) 70 71 (fontified t) 71 79 (fontified t) 79 80 (face (rainbow-delimiters-depth-4-face) fontified t)) . 300) (undo-tree-id7925 . -80) (undo-tree-id7926 . -8) (undo-tree-id7927 . -43) (undo-tree-id7928 . 64) (undo-tree-id7929 . -16) (undo-tree-id7930 . -16) (undo-tree-id7931 . -16) (undo-tree-id7932 . -16) (undo-tree-id7933 . -16) (undo-tree-id7934 . -16) (undo-tree-id7935 . -16) (undo-tree-id7936 . -16) (undo-tree-id7937 . -16) (undo-tree-id7938 . -16) (undo-tree-id7939 . -16) (undo-tree-id7940 . -16) (undo-tree-id7941 . -61) (undo-tree-id7942 . -61) (undo-tree-id7943 . -61) (undo-tree-id7944 . -61) (undo-tree-id7945 . -61) (undo-tree-id7946 . -61) (undo-tree-id7947 . -61) (undo-tree-id7948 . -57) (undo-tree-id7949 . -57) (undo-tree-id7950 . -57) (undo-tree-id7951 . -57) (undo-tree-id7952 . -57) (undo-tree-id7953 . -57) (undo-tree-id7954 . -57) (undo-tree-id7955 . -57) (undo-tree-id7956 . -57) (undo-tree-id7957 . -57) (undo-tree-id7958 . -57) (undo-tree-id7959 . -57) (undo-tree-id7960 . -57) (undo-tree-id7961 . -57) (undo-tree-id7962 . -57) (undo-tree-id7963 . -57) (undo-tree-id7964 . -57) (undo-tree-id7965 . -57) (undo-tree-id7966 . -80) (undo-tree-id7967 . -80) (undo-tree-id7968 . -80) (undo-tree-id7969 . -55) (undo-tree-id7970 . -54) (undo-tree-id7971 . -53) (undo-tree-id7972 . -52) (undo-tree-id7973 . -6) (undo-tree-id7974 . -5) (undo-tree-id7975 . -4) (undo-tree-id7976 . -80) (undo-tree-id7977 . -2) (undo-tree-id7978 . -2) (undo-tree-id7979 . -2) (undo-tree-id7980 . -2) (undo-tree-id7981 . -2) (undo-tree-id7982 . -2) (undo-tree-id7983 . -80) (undo-tree-id7984 . -78) (undo-tree-id7985 . -76) (undo-tree-id7986 . -48) (undo-tree-id7987 . -47) (undo-tree-id7988 . -46) (undo-tree-id7989 . -45) (undo-tree-id7990 . -80) (undo-tree-id7991 . -45) (undo-tree-id7992 . -45) (undo-tree-id7993 . -80) (undo-tree-id7994 . -80) (undo-tree-id7995 . -80) (undo-tree-id7996 . -53) (undo-tree-id7997 . -50) (undo-tree-id7998 . -47) (undo-tree-id7999 . -1) (undo-tree-id8000 . -80) (t 26046 3711 200114 972000)) nil (26046 3747 662267 977000) 0 nil])
([nil nil ((300 . 302)) nil (26046 3747 662216 400000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -300) (undo-tree-id7915 . -1) (undo-tree-id7916 . -1) (undo-tree-id7917 . -1) (undo-tree-id7918 . -1) (undo-tree-id7919 . -1) (undo-tree-id7920 . -1) (undo-tree-id7921 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -301) (undo-tree-id7922 . -1) (undo-tree-id7923 . -1) (undo-tree-id7924 . -1) 302) nil (26046 3747 662215 159000) 0 nil])
([nil nil ((300 . 303)) nil (26046 3747 662207 254000) 0 nil])
([nil nil ((apply yas--snippet-revive 300 306 #s(yas--snippet nil nil nil 46 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 46 nil nil nil nil)) (300 . 306) (#("unsafe" 0 6 (fontified nil)) . 300) (300 . 306) (#("uns" 0 3 (fontified nil)) . 300) (300 . 303) (#("unsafe" 0 6 (fontified nil)) . -300) (300 . 306) (#("uns" 0 3 (fontified t)) . -300) (undo-tree-id7905 . -3) (undo-tree-id7906 . -1) (undo-tree-id7907 . -1) (undo-tree-id7908 . -1) (undo-tree-id7909 . -2) (undo-tree-id7910 . -2) (undo-tree-id7911 . -3) (undo-tree-id7912 . -3) (undo-tree-id7913 . -3) (undo-tree-id7914 . -3) 303) nil (26046 3747 662205 578000) 0 nil])
([nil nil ((300 . 308) (306 . 309)) nil (26046 3747 662196 176000) 0 nil])
([nil nil ((318 . 326) (#("            " 0 12 (fontified nil)) . 317) (undo-tree-id7900 . -8) (undo-tree-id7901 . -8) (undo-tree-id7902 . -8) (undo-tree-id7903 . -8) (undo-tree-id7904 . -8) (325 . 329) (316 . 326)) nil (26046 3747 662194 181000) 0 nil])
([nil nil ((317 . 329)) nil (26046 3747 662182 207000) 0 nil])
([nil nil ((329 . 338)) nil (26046 3747 662177 604000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -333) (undo-tree-id8004 . -1) (undo-tree-id8005 . -1) (undo-tree-id8006 . -1) (undo-tree-id8007 . -1) (undo-tree-id8008 . -1) (undo-tree-id8009 . -1) (undo-tree-id8010 . -1) (undo-tree-id8011 . -1) (undo-tree-id8012 . -1) (undo-tree-id8013 . -1) (undo-tree-id8014 . -1) (undo-tree-id8015 . -1) (undo-tree-id8016 . -1) (undo-tree-id8017 . -1) (undo-tree-id8018 . -1) (undo-tree-id8019 . -1) (undo-tree-id8020 . -1) (undo-tree-id8021 . -1) (undo-tree-id8022 . -1) (undo-tree-id8023 . -1) (undo-tree-id8024 . -1) (#("=" 0 1 (fontified t)) . -334) (undo-tree-id8025 . -1) (undo-tree-id8026 . -1) (undo-tree-id8027 . -1) (undo-tree-id8028 . -1) (undo-tree-id8029 . -1) (undo-tree-id8030 . -1) (undo-tree-id8031 . -1) (undo-tree-id8032 . -1) (undo-tree-id8033 . -1) (undo-tree-id8034 . -1) (undo-tree-id8035 . -1) (undo-tree-id8036 . -1) (undo-tree-id8037 . -1) (undo-tree-id8038 . -1) (undo-tree-id8039 . -1) (undo-tree-id8040 . -1) (undo-tree-id8041 . -1) (undo-tree-id8042 . -1) (undo-tree-id8043 . -1) (#(" " 0 1 (fontified t)) . -335) (undo-tree-id8044 . -1) (undo-tree-id8045 . -1) (undo-tree-id8046 . -1) (undo-tree-id8047 . -1) (undo-tree-id8048 . -1) (undo-tree-id8049 . -1) (undo-tree-id8050 . -1) (undo-tree-id8051 . -1) (undo-tree-id8052 . -1) (undo-tree-id8053 . -1) (undo-tree-id8054 . -1) (undo-tree-id8055 . -1) (undo-tree-id8056 . -1) (undo-tree-id8057 . -1) (undo-tree-id8058 . -1) (undo-tree-id8059 . -1) (undo-tree-id8060 . -1) (#("1" 0 1 (fontified t)) . -336) (undo-tree-id8061 . -1) (undo-tree-id8062 . -1) (undo-tree-id8063 . -1) (undo-tree-id8064 . -1) (undo-tree-id8065 . -1) (undo-tree-id8066 . -1) (undo-tree-id8067 . -1) (undo-tree-id8068 . -1) (undo-tree-id8069 . -1) (undo-tree-id8070 . -1) (undo-tree-id8071 . -1) (undo-tree-id8072 . -1) (undo-tree-id8073 . -1) (undo-tree-id8074 . -1) (undo-tree-id8075 . -1) 337 (t 26046 3747 680117 210000)) nil (26046 3758 481928 825000) 0 nil])
([nil nil ((333 . 335)) nil (26046 3758 481726 60000) 0 nil])
([nil nil ((334 . 335)) nil (26046 3758 481725 384000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -334) (undo-tree-id8001 . -1) (undo-tree-id8002 . -1) (undo-tree-id8003 . -1) 335) nil (26046 3758 481723 647000) 0 nil])
([nil nil ((334 . 335)) nil (26046 3758 481713 386000) 0 nil])
([nil nil ((336 . 340)) nil (26046 3758 481709 588000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -333) (undo-tree-id8119 . -1) (undo-tree-id8120 . -1) (undo-tree-id8121 . -1) (undo-tree-id8122 . -1) (undo-tree-id8123 . -1) (undo-tree-id8124 . -1) (undo-tree-id8125 . -1) (undo-tree-id8126 . -1) (undo-tree-id8127 . -1) (undo-tree-id8128 . -1) (undo-tree-id8129 . -1) (undo-tree-id8130 . -1) (#("0" 0 1 (fontified t)) . -334) (undo-tree-id8131 . -1) (undo-tree-id8132 . -1) (undo-tree-id8133 . -1) (undo-tree-id8134 . -1) (undo-tree-id8135 . -1) (undo-tree-id8136 . -1) (undo-tree-id8137 . -1) (undo-tree-id8138 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -335) (undo-tree-id8139 . -1) (undo-tree-id8140 . -1) (undo-tree-id8141 . -1) (undo-tree-id8142 . -1) (undo-tree-id8143 . -1) (undo-tree-id8144 . -1) 336 (t 26046 3758 530117 875000)) nil (26046 3775 25765 888000) 0 nil])
([nil nil ((333 . 336)) nil (26046 3775 25748 541000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -335) (undo-tree-id8116 . -1) (undo-tree-id8117 . -1) (undo-tree-id8118 . -1) 336) nil (26046 3775 25747 638000) 0 nil])
([nil nil ((335 . 336)) nil (26046 3775 25744 906000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -333) (undo-tree-id8076 . -1) (undo-tree-id8077 . -1) (undo-tree-id8078 . -1) (undo-tree-id8079 . -1) (undo-tree-id8080 . -1) (undo-tree-id8081 . -1) (undo-tree-id8082 . -1) (undo-tree-id8083 . -1) (undo-tree-id8084 . -1) (undo-tree-id8085 . -1) (undo-tree-id8086 . -1) (undo-tree-id8087 . -1) (undo-tree-id8088 . -1) (undo-tree-id8089 . -1) (undo-tree-id8090 . -1) (undo-tree-id8091 . -1) (undo-tree-id8092 . -1) (undo-tree-id8093 . -1) (undo-tree-id8094 . -1) (undo-tree-id8095 . -1) (#("a" 0 1 (fontified t)) . -334) (undo-tree-id8096 . -1) (undo-tree-id8097 . -1) (undo-tree-id8098 . -1) (undo-tree-id8099 . -1) (undo-tree-id8100 . -1) (undo-tree-id8101 . -1) (undo-tree-id8102 . -1) (undo-tree-id8103 . -1) (undo-tree-id8104 . -1) (undo-tree-id8105 . -1) (undo-tree-id8106 . -1) (undo-tree-id8107 . -1) (undo-tree-id8108 . -1) (undo-tree-id8109 . -1) (undo-tree-id8110 . -1) (#("t" 0 1 (fontified t)) . -335) (undo-tree-id8111 . -1) (undo-tree-id8112 . -1) (undo-tree-id8113 . -1) (undo-tree-id8114 . -1) (undo-tree-id8115 . -1) 336) nil (26046 3775 25741 982000) 0 nil])
([nil nil ((333 . 335)) nil (26046 3775 25706 814000) 0 nil])
([nil nil ((334 . 335)) nil (26046 3775 25702 957000) 0 nil])
([nil nil ((232 . 241) (t 26046 3775 43452 220000)) nil (26046 3791 706691 898000) 0 nil])
([nil nil ((241 . 242)) nil (26046 3791 706691 77000) 0 nil])
([nil nil ((apply yas--snippet-revive 241 251 #s(yas--snippet nil nil #s(yas--exit 250 nil) 47 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 250 nil) 47 nil nil nil nil)) (241 . 251) (#("println!($0)" 0 12 (fontified nil)) . 241) (241 . 253) (#("p" 0 1 (fontified nil)) . 241) (241 . 242) (#("println!(…)" 0 11 (fontified nil)) . -241) (241 . 252) (#("p" 0 1 (fontified t)) . -241) (undo-tree-id8165 . -1) (undo-tree-id8166 . -1) (undo-tree-id8167 . -1) (undo-tree-id8168 . -1) (undo-tree-id8169 . -1) (undo-tree-id8170 . -1) 242) nil (26046 3791 706689 744000) 0 nil])
([nil nil ((250 . 252)) nil (26046 3791 706683 441000) 0 nil])
([nil nil ((251 . 252)) nil (26046 3791 706682 818000) 0 nil])
([nil nil ((#("P" 0 1 (face font-lock-string-face fontified t)) . -251) (undo-tree-id8162 . -1) (undo-tree-id8163 . -1) (undo-tree-id8164 . -1) 252) nil (26046 3791 706681 997000) 0 nil])
([nil nil ((251 . 253)) nil (26046 3791 706678 851000) 0 nil])
([nil nil ((#("{" 0 1 (face font-lock-string-face fontified t)) . -251) (undo-tree-id8152 . -1) (undo-tree-id8153 . -1) (undo-tree-id8154 . -1) (undo-tree-id8155 . -1) (undo-tree-id8156 . -1) (undo-tree-id8157 . -1) (undo-tree-id8158 . -1) (#("}" 0 1 (face rust-string-interpolation fontified t)) . -252) (undo-tree-id8159 . -1) (undo-tree-id8160 . -1) (undo-tree-id8161 . -1) 253) nil (26046 3791 706677 599000) 0 nil])
([nil nil ((251 . 256)) nil (26046 3791 706669 706000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-string-face fontified t)) . -255) (undo-tree-id8149 . -1) (undo-tree-id8150 . -1) (undo-tree-id8151 . -1) 256) nil (26046 3791 706668 695000) 0 nil])
([nil nil ((255 . 261)) nil (26046 3791 706665 437000) 0 nil])
([nil nil ((263 . 265)) nil (26046 3791 706664 95000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -264) (undo-tree-id8145 . -1) (undo-tree-id8146 . -1) (undo-tree-id8147 . -1) (undo-tree-id8148 . -1) 265) nil (26046 3791 706660 99000) 0 nil])
([nil nil ((#("ops" 0 3 (face font-lock-string-face fontified t)) . -258) (undo-tree-id8201 . -3) (undo-tree-id8202 . -3) (undo-tree-id8203 . -3) (undo-tree-id8204 . -3) (undo-tree-id8205 . -3) (undo-tree-id8206 . -3) (undo-tree-id8207 . -3) 261 (t 26046 3791 753453 245000)) nil (26046 3799 326344 578000) 0 nil])
([nil nil ((258 . 268)) nil (26046 3799 326338 34000) 0 nil])
([nil nil ((#("o" 0 1 (face font-lock-string-face fontified t)) . -265) (undo-tree-id8171 . -1) (undo-tree-id8172 . -1) (undo-tree-id8173 . -1) (undo-tree-id8174 . -1) (undo-tree-id8175 . -1) (undo-tree-id8176 . -1) (undo-tree-id8177 . -1) (undo-tree-id8178 . -1) (undo-tree-id8179 . -1) (undo-tree-id8180 . -1) (undo-tree-id8181 . -1) (undo-tree-id8182 . -1) (undo-tree-id8183 . -1) (undo-tree-id8184 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -266) (undo-tree-id8185 . -1) (undo-tree-id8186 . -1) (undo-tree-id8187 . -1) (undo-tree-id8188 . -1) (undo-tree-id8189 . -1) (undo-tree-id8190 . -1) (undo-tree-id8191 . -1) (undo-tree-id8192 . -1) (undo-tree-id8193 . -1) (undo-tree-id8194 . -1) (#("g" 0 1 (face font-lock-string-face fontified t)) . -267) (undo-tree-id8195 . -1) (undo-tree-id8196 . -1) (undo-tree-id8197 . -1) (undo-tree-id8198 . -1) (undo-tree-id8199 . -1) (undo-tree-id8200 . -1) 268) nil (26046 3799 326334 513000) 0 nil])
([nil nil ((265 . 267)) nil (26046 3799 326304 751000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -371) (undo-tree-id8208 . -1) (undo-tree-id8209 . -1) (undo-tree-id8210 . -1) (undo-tree-id8211 . -1) (undo-tree-id8212 . -1) (undo-tree-id8213 . -1) (#("0" 0 1 (fontified t)) . -372) (undo-tree-id8214 . -1) (undo-tree-id8215 . -1) (undo-tree-id8216 . -1) (undo-tree-id8217 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -373) (undo-tree-id8218 . -1) (undo-tree-id8219 . -1) 374 (t 26046 3799 343453 699000)) nil (26046 3807 157146 70000) 0 nil])
([nil nil ((367 . 368) (t 26046 3807 173454 174000)) nil (26046 3817 228312 771000) 0 nil])
([nil nil ((372 . 374)) nil (26046 3817 228311 872000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -373) (undo-tree-id8226 . -1) (undo-tree-id8227 . -1) (undo-tree-id8228 . -1) 374) nil (26046 3817 228310 846000) 0 nil])
([nil nil ((373 . 374)) nil (26046 3817 228307 304000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -373) (undo-tree-id8220 . -1) (undo-tree-id8221 . -1) (undo-tree-id8222 . -1) (undo-tree-id8223 . -1) (undo-tree-id8224 . -1) (undo-tree-id8225 . -1) 374) nil (26046 3817 228305 333000) 0 nil])
([nil nil ((373 . 375)) nil (26046 3817 228293 199000) 0 nil])
([nil nil ((374 . 375)) nil (26046 3817 228289 552000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -373) (undo-tree-id8564 . -1) (undo-tree-id8565 . -1) (undo-tree-id8566 . -1) (undo-tree-id8567 . -1) (undo-tree-id8568 . -1) (undo-tree-id8569 . -1) (undo-tree-id8570 . -1) (undo-tree-id8571 . -1) (undo-tree-id8572 . -1) (undo-tree-id8573 . -1) (undo-tree-id8574 . -1) (undo-tree-id8575 . -1) (undo-tree-id8576 . -1) (undo-tree-id8577 . -1) (undo-tree-id8578 . -1) (undo-tree-id8579 . -1) (undo-tree-id8580 . -1) (undo-tree-id8581 . -1) (undo-tree-id8582 . -1) (undo-tree-id8583 . -1) (undo-tree-id8584 . -1) (undo-tree-id8585 . -1) (undo-tree-id8586 . -1) (undo-tree-id8587 . -1) (undo-tree-id8588 . -1) (undo-tree-id8589 . -1) (undo-tree-id8590 . -1) (undo-tree-id8591 . -1) (undo-tree-id8592 . -1) (undo-tree-id8593 . -1) (#("0" 0 1 (fontified t)) . -374) (undo-tree-id8594 . -1) (undo-tree-id8595 . -1) (undo-tree-id8596 . -1) (undo-tree-id8597 . -1) (undo-tree-id8598 . -1) (undo-tree-id8599 . -1) (undo-tree-id8600 . -1) (undo-tree-id8601 . -1) (undo-tree-id8602 . -1) (undo-tree-id8603 . -1) (undo-tree-id8604 . -1) (undo-tree-id8605 . -1) (undo-tree-id8606 . -1) (undo-tree-id8607 . -1) (undo-tree-id8608 . -1) (undo-tree-id8609 . -1) (undo-tree-id8610 . -1) (undo-tree-id8611 . -1) (undo-tree-id8612 . -1) (undo-tree-id8613 . -1) (undo-tree-id8614 . -1) (undo-tree-id8615 . -1) (undo-tree-id8616 . -1) (undo-tree-id8617 . -1) (undo-tree-id8618 . -1) (undo-tree-id8619 . -1) (undo-tree-id8620 . -1) (undo-tree-id8621 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -375) (undo-tree-id8622 . -1) (undo-tree-id8623 . 1) (undo-tree-id8624 . -1) 376 (t 26046 3817 276788 119000)) nil (26046 3861 431797 643000) 0 nil])
([nil nil ((373 . 377)) nil (26046 3861 431194 677000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -374) (undo-tree-id8536 . -1) (undo-tree-id8537 . -1) (undo-tree-id8538 . -1) (undo-tree-id8539 . -1) (undo-tree-id8540 . -1) (undo-tree-id8541 . -1) (undo-tree-id8542 . -1) (undo-tree-id8543 . -1) (undo-tree-id8544 . -1) (undo-tree-id8545 . -1) (undo-tree-id8546 . -1) (undo-tree-id8547 . -1) (undo-tree-id8548 . -1) (undo-tree-id8549 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -375) (undo-tree-id8550 . -1) (undo-tree-id8551 . -1) (undo-tree-id8552 . -1) (undo-tree-id8553 . -1) (undo-tree-id8554 . -1) (undo-tree-id8555 . -1) (undo-tree-id8556 . -1) (undo-tree-id8557 . -1) (undo-tree-id8558 . -1) (#("t" 0 1 (fontified t)) . -376) (undo-tree-id8559 . -1) (undo-tree-id8560 . -1) (undo-tree-id8561 . -1) (undo-tree-id8562 . -1) (undo-tree-id8563 . -1) 377) nil (26046 3861 431192 880000) 0 nil])
([nil nil ((374 . 375)) nil (26046 3861 431173 487000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -374) (undo-tree-id8533 . -1) (undo-tree-id8534 . -1) (undo-tree-id8535 . -1) 375) nil (26046 3861 431172 670000) 0 nil])
([nil nil ((374 . 378)) nil (26046 3861 431170 105000) 0 nil])
([nil nil ((apply yas--snippet-revive 374 384 #s(yas--snippet nil nil #s(yas--exit 384 nil) 48 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 384 nil) 48 nil nil nil nil)) (374 . 384) (#("iter_mut()$0" 0 12 (fontified nil)) . 374) (374 . 386) (#("iter" 0 4 (fontified nil)) . 374) (374 . 378) (#("iter_mut()" 0 10 (fontified nil)) . -374) (374 . 384) (#("iter" 0 4 (fontified t)) . -374) (undo-tree-id8522 . -4) (undo-tree-id8523 . -1) (undo-tree-id8524 . -1) (undo-tree-id8525 . -2) (undo-tree-id8526 . -2) (undo-tree-id8527 . -3) (undo-tree-id8528 . -3) (undo-tree-id8529 . -4) (undo-tree-id8530 . -4) (undo-tree-id8531 . -4) (undo-tree-id8532 . -4) 378) nil (26046 3861 431168 482000) 0 nil])
([nil nil ((#("1;" 0 1 (fontified t) 1 2 (fontified t)) . -387) (undo-tree-id8515 . -2) (undo-tree-id8516 . -1) (undo-tree-id8517 . -1) (undo-tree-id8518 . -1) (undo-tree-id8519 . -1) (undo-tree-id8520 . -1) (undo-tree-id8521 . -2) 389) nil (26046 3861 431159 80000) 0 nil])
([nil nil ((#("mut() = " 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-5-face) fontified t) 4 5 (face (rainbow-delimiters-depth-5-face) fontified t) 5 8 (fontified t)) . -379) (undo-tree-id8489 . -6) (undo-tree-id8490 . -8) (undo-tree-id8491 . -6) (undo-tree-id8492 . -6) (undo-tree-id8493 . -6) (undo-tree-id8494 . -6) (undo-tree-id8495 . -6) (undo-tree-id8496 . -6) (undo-tree-id8497 . -6) (undo-tree-id8498 . -6) (undo-tree-id8499 . -6) (undo-tree-id8500 . -6) (undo-tree-id8501 . -5) (undo-tree-id8502 . -5) (undo-tree-id8503 . -5) (undo-tree-id8504 . -5) (undo-tree-id8505 . -5) (undo-tree-id8506 . -5) (undo-tree-id8507 . -8) (undo-tree-id8508 . -8) (undo-tree-id8509 . -8) (undo-tree-id8510 . -8) (undo-tree-id8511 . -8) (undo-tree-id8512 . -8) (undo-tree-id8513 . -8) (undo-tree-id8514 . -8) 387) nil (26046 3861 431152 723000) 0 nil])
([nil nil ((379 . 380)) nil (26046 3861 431135 741000) 0 nil])
([nil nil ((apply yas--snippet-revive 374 384 #s(yas--snippet nil nil #s(yas--exit 384 nil) 49 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 384 nil) 49 nil nil nil nil)) (374 . 384) (#("iter_mut()$0" 0 12 (fontified nil)) . 374) (374 . 386) (#("iter_m" 0 6 (fontified nil)) . 374) (374 . 380) (#("iter_mut()" 0 10 (fontified nil)) . -374) (374 . 384) (#("iter_m" 0 6 (fontified t)) . -374) (undo-tree-id8454 . -5) (undo-tree-id8455 . -6) (undo-tree-id8456 . -5) (undo-tree-id8457 . -5) (undo-tree-id8458 . -5) (undo-tree-id8459 . -5) (undo-tree-id8460 . -5) (undo-tree-id8461 . -5) (undo-tree-id8462 . -5) (undo-tree-id8463 . -5) (undo-tree-id8464 . -5) (undo-tree-id8465 . -5) (undo-tree-id8466 . -5) (undo-tree-id8467 . -5) (undo-tree-id8468 . -5) (undo-tree-id8469 . -5) (undo-tree-id8470 . -5) (undo-tree-id8471 . -5) (undo-tree-id8472 . -5) (undo-tree-id8473 . -5) (undo-tree-id8474 . -5) (undo-tree-id8475 . -5) (undo-tree-id8476 . -5) (undo-tree-id8477 . -5) (undo-tree-id8478 . -5) (undo-tree-id8479 . -5) (undo-tree-id8480 . -5) (undo-tree-id8481 . -5) (undo-tree-id8482 . -5) (undo-tree-id8483 . -5) (undo-tree-id8484 . -5) (undo-tree-id8485 . -6) (undo-tree-id8486 . -6) (undo-tree-id8487 . -6) (undo-tree-id8488 . -6) 380) nil (26046 3861 431133 13000) 0 nil])
([nil nil ((384 . 388)) nil (26046 3861 431103 291000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -384) (undo-tree-id8405 . -1) (undo-tree-id8406 . -1) (undo-tree-id8407 . -1) (undo-tree-id8408 . -1) (undo-tree-id8409 . -1) (undo-tree-id8410 . -1) (undo-tree-id8411 . -1) (undo-tree-id8412 . -1) (undo-tree-id8413 . -1) (undo-tree-id8414 . -1) (undo-tree-id8415 . -1) (undo-tree-id8416 . -1) (undo-tree-id8417 . -1) (undo-tree-id8418 . -1) (undo-tree-id8419 . -1) (undo-tree-id8420 . -1) (undo-tree-id8421 . -1) (undo-tree-id8422 . -1) (undo-tree-id8423 . -1) (undo-tree-id8424 . -1) (#("f" 0 1 (fontified t)) . -385) (undo-tree-id8425 . -1) (undo-tree-id8426 . -1) (undo-tree-id8427 . -1) (undo-tree-id8428 . -1) (undo-tree-id8429 . -1) (undo-tree-id8430 . -1) (undo-tree-id8431 . -1) (undo-tree-id8432 . -1) (undo-tree-id8433 . -1) (undo-tree-id8434 . -1) (undo-tree-id8435 . -1) (undo-tree-id8436 . -1) (undo-tree-id8437 . -1) (undo-tree-id8438 . -1) (#("o" 0 1 (fontified t)) . -386) (undo-tree-id8439 . -1) (undo-tree-id8440 . -1) (undo-tree-id8441 . -1) (undo-tree-id8442 . -1) (undo-tree-id8443 . -1) (undo-tree-id8444 . -1) (undo-tree-id8445 . -1) (undo-tree-id8446 . -1) (undo-tree-id8447 . -1) (undo-tree-id8448 . -1) (#("r" 0 1 (face font-lock-keyword-face fontified t)) . -387) (undo-tree-id8449 . -1) (undo-tree-id8450 . -1) (undo-tree-id8451 . -1) (undo-tree-id8452 . -1) (undo-tree-id8453 . -1) 388) nil (26046 3861 431098 641000) 0 nil])
([nil nil ((#("mut()" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-5-face) fontified t) 4 5 (face (rainbow-delimiters-depth-5-face) fontified t)) . -379) (undo-tree-id8379 . -5) (undo-tree-id8380 . -5) (undo-tree-id8381 . -5) (undo-tree-id8382 . -5) (undo-tree-id8383 . -5) (undo-tree-id8384 . -5) (undo-tree-id8385 . -5) (undo-tree-id8386 . -5) (undo-tree-id8387 . -5) (undo-tree-id8388 . -5) (undo-tree-id8389 . -5) (undo-tree-id8390 . -5) (undo-tree-id8391 . -5) (undo-tree-id8392 . -5) (undo-tree-id8393 . -5) (undo-tree-id8394 . -5) (undo-tree-id8395 . -5) (undo-tree-id8396 . -5) (undo-tree-id8397 . -5) (undo-tree-id8398 . -5) (undo-tree-id8399 . -5) (undo-tree-id8400 . -5) (undo-tree-id8401 . -5) (undo-tree-id8402 . -5) (undo-tree-id8403 . -5) (undo-tree-id8404 . -5) 384) nil (26046 3861 431025 347000) 0 nil])
([nil nil ((#("iter_" 0 5 (fontified t)) . -374) (undo-tree-id8351 . -5) (undo-tree-id8352 . -5) (undo-tree-id8353 . -5) (undo-tree-id8354 . -5) (undo-tree-id8355 . -5) (undo-tree-id8356 . -5) (undo-tree-id8357 . -5) (undo-tree-id8358 . -5) (undo-tree-id8359 . -5) (undo-tree-id8360 . -5) (undo-tree-id8361 . -5) (undo-tree-id8362 . -5) (undo-tree-id8363 . -5) (undo-tree-id8364 . -5) (undo-tree-id8365 . -5) (undo-tree-id8366 . -5) (undo-tree-id8367 . -5) (undo-tree-id8368 . -5) (undo-tree-id8369 . -5) (undo-tree-id8370 . -5) (undo-tree-id8371 . -5) (undo-tree-id8372 . -5) (undo-tree-id8373 . -5) (undo-tree-id8374 . -5) (undo-tree-id8375 . -5) (undo-tree-id8376 . -5) (undo-tree-id8377 . -5) (undo-tree-id8378 . -5) 379) nil (26046 3861 430801 289000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -373) (undo-tree-id8254 . -1) (undo-tree-id8255 . -1) (undo-tree-id8256 . -1) (undo-tree-id8257 . -1) (undo-tree-id8258 . -1) (undo-tree-id8259 . -1) (undo-tree-id8260 . -1) (undo-tree-id8261 . -1) (undo-tree-id8262 . -1) (undo-tree-id8263 . -1) (undo-tree-id8264 . -1) (undo-tree-id8265 . -1) (undo-tree-id8266 . -1) (undo-tree-id8267 . -1) (undo-tree-id8268 . -1) (undo-tree-id8269 . -1) (undo-tree-id8270 . -1) (undo-tree-id8271 . -1) (undo-tree-id8272 . -1) (undo-tree-id8273 . -1) (undo-tree-id8274 . -1) (undo-tree-id8275 . -1) (undo-tree-id8276 . -1) (undo-tree-id8277 . -1) (undo-tree-id8278 . -1) (undo-tree-id8279 . -1) (undo-tree-id8280 . -1) (undo-tree-id8281 . -1) (undo-tree-id8282 . -1) (undo-tree-id8283 . -1) (undo-tree-id8284 . -1) (undo-tree-id8285 . -1) (undo-tree-id8286 . -1) (undo-tree-id8287 . -1) (undo-tree-id8288 . -1) (undo-tree-id8289 . -1) (undo-tree-id8290 . -1) (undo-tree-id8291 . -1) (undo-tree-id8292 . -1) (undo-tree-id8293 . -1) (undo-tree-id8294 . -1) (undo-tree-id8295 . -1) (undo-tree-id8296 . -1) (undo-tree-id8297 . -1) (undo-tree-id8298 . -1) (undo-tree-id8299 . -1) (undo-tree-id8300 . -1) (undo-tree-id8301 . -1) (undo-tree-id8302 . -1) (undo-tree-id8303 . -1) (undo-tree-id8304 . -1) (undo-tree-id8305 . -1) (undo-tree-id8306 . -1) (undo-tree-id8307 . -1) (undo-tree-id8308 . -1) (undo-tree-id8309 . -1) (undo-tree-id8310 . -1) (undo-tree-id8311 . -1) (undo-tree-id8312 . -1) (undo-tree-id8313 . -1) (undo-tree-id8314 . -1) (undo-tree-id8315 . -1) (undo-tree-id8316 . -1) (undo-tree-id8317 . -1) (undo-tree-id8318 . -1) (undo-tree-id8319 . -1) (undo-tree-id8320 . -1) (undo-tree-id8321 . -1) (undo-tree-id8322 . -1) (undo-tree-id8323 . -1) (undo-tree-id8324 . -1) (undo-tree-id8325 . -1) (undo-tree-id8326 . -1) (undo-tree-id8327 . -1) (undo-tree-id8328 . -1) (undo-tree-id8329 . -1) (undo-tree-id8330 . -1) (undo-tree-id8331 . -1) (undo-tree-id8332 . -1) (undo-tree-id8333 . -1) (undo-tree-id8334 . -1) (undo-tree-id8335 . -1) (undo-tree-id8336 . -1) (undo-tree-id8337 . -1) (undo-tree-id8338 . -1) (undo-tree-id8339 . -1) (undo-tree-id8340 . -1) (undo-tree-id8341 . -1) (undo-tree-id8342 . -1) (undo-tree-id8343 . -1) (undo-tree-id8344 . -1) (undo-tree-id8345 . -1) (undo-tree-id8346 . -1) (undo-tree-id8347 . -1) (undo-tree-id8348 . -1) (undo-tree-id8349 . -1) (undo-tree-id8350 . -1) 374) nil (26046 3861 430778 525000) 0 nil])
([nil nil ((363 . 364)) nil (26046 3861 430711 781000) 0 nil])
([nil nil ((367 . 381)) nil (26046 3861 430710 956000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -379) (undo-tree-id8245 . -1) (undo-tree-id8246 . -1) (undo-tree-id8247 . -1) (undo-tree-id8248 . -1) (undo-tree-id8249 . -1) (undo-tree-id8250 . -1) (#("=" 0 1 (fontified t)) . -380) (undo-tree-id8251 . -1) (undo-tree-id8252 . -1) (undo-tree-id8253 . -1) 381) nil (26046 3861 430709 678000) 0 nil])
([nil nil ((379 . 380)) nil (26046 3861 430702 240000) 0 nil])
([nil nil ((380 . 382)) nil (26046 3861 430701 576000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -381) (undo-tree-id8238 . -1) (undo-tree-id8239 . -1) (undo-tree-id8240 . -1) (undo-tree-id8241 . -1) (undo-tree-id8242 . -1) (undo-tree-id8243 . -1) (undo-tree-id8244 . -1) 382) nil (26046 3861 430700 498000) 0 nil])
([nil nil ((388 . 391)) nil (26046 3861 430694 564000) 0 nil])
([nil nil ((392 . 404) (#("                " 0 16 (fontified nil)) . 391) (391 . 407) (#("            " 0 12 (fontified nil)) . 391) (undo-tree-id8234 . -12) (undo-tree-id8235 . -12) (undo-tree-id8236 . -12) (undo-tree-id8237 . -12) (390 . 404)) nil (26046 3861 430693 320000) 0 nil])
([nil nil ((391 . 407)) nil (26046 3861 430689 380000) 0 nil])
([nil nil ((407 . 408)) nil (26046 3861 430688 455000) 0 nil])
([nil nil ((407 . 414) (#("e" 0 1 (fontified nil)) . 407) (407 . 408) (#("element" 0 7 (fontified nil)) . -407) (407 . 414) (#("e" 0 1 (fontified t)) . -407) (undo-tree-id8229 . -1) (undo-tree-id8230 . -1) (undo-tree-id8231 . -1) (undo-tree-id8232 . -1) (undo-tree-id8233 . -1) 408) nil (26046 3861 430685 788000) 0 nil])
([nil nil ((414 . 420)) nil (26046 3861 430670 927000) 0 nil])
([nil nil ((371 . 375) (t 26046 3861 480124 119000)) nil (26046 3866 443222 761000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -391) (undo-tree-id8628 . -1) (undo-tree-id8629 . -1) (undo-tree-id8630 . -1) (undo-tree-id8631 . -1) (undo-tree-id8632 . -1) 392 (t 26046 3866 493457 754000)) nil (26046 3875 970170 638000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t)) . -386) (undo-tree-id8625 . -1) (undo-tree-id8626 . -1) (undo-tree-id8627 . -1) 387) nil (26046 3875 970162 469000) 0 nil])
([nil nil ((409 . 410) (t 26046 3875 986791 663000)) nil (26046 3893 982586 860000) 0 nil])
([nil nil ((386 . 387) (t 26046 3894 126 94000)) nil (26046 3963 71456 662000) 0 nil])
([nil nil ((391 . 394)) nil (26046 3963 71455 640000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -392) (undo-tree-id8649 . -1) (undo-tree-id8650 . -1) (undo-tree-id8651 . -1) (undo-tree-id8652 . -1) (undo-tree-id8653 . -1) (undo-tree-id8654 . -1) (undo-tree-id8655 . -1) (undo-tree-id8656 . -1) (undo-tree-id8657 . -1) (undo-tree-id8658 . -1) (#("." 0 1 (fontified t)) . -393) (undo-tree-id8659 . -1) (undo-tree-id8660 . -1) (undo-tree-id8661 . -1) (undo-tree-id8662 . -1) (undo-tree-id8663 . -1) 394) nil (26046 3963 71454 192000) 0 nil])
([nil nil ((392 . 393)) nil (26046 3963 71443 292000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -392) (undo-tree-id8641 . -1) (undo-tree-id8642 . -1) (undo-tree-id8643 . -1) (undo-tree-id8644 . -1) (undo-tree-id8645 . -1) (undo-tree-id8646 . -1) (undo-tree-id8647 . -1) (undo-tree-id8648 . -1) 393) nil (26046 3963 71442 12000) 0 nil])
([nil nil ((392 . 395)) nil (26046 3963 71434 949000) 0 nil])
([nil nil ((apply yas--snippet-revive 393 403 #s(yas--snippet nil nil #s(yas--exit 403 nil) 50 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 403 nil) 50 nil nil nil nil)) (393 . 403) (#("iter_mut()$0" 0 12 (fontified nil)) . 393) (393 . 405) (#("it" 0 2 (fontified nil)) . 393) (393 . 395) (#("iter_mut()" 0 10 (fontified nil)) . -393) (393 . 403) (#("it" 0 2 (fontified t)) . -393) (undo-tree-id8633 . -2) (undo-tree-id8634 . -1) (undo-tree-id8635 . -1) (undo-tree-id8636 . -1) (undo-tree-id8637 . -2) (undo-tree-id8638 . -2) (undo-tree-id8639 . -2) (undo-tree-id8640 . -2) 395) nil (26046 3963 71431 62000) 0 nil])
([nil nil ((#("mut " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -371) (undo-tree-id8664 . -4) (undo-tree-id8665 . -4) 375 (t 26046 3963 76796 998000)) nil (26046 4190 124131 567000) 0 nil])
([nil nil ((109 . 111) (t 26046 3965 570130 480000)) nil (26046 4218 436636 357000) 0 nil] [nil nil ((#("mut " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -136) (undo-tree-id8692 . -3) (undo-tree-id8693 . -4) (undo-tree-id8694 . -3) (undo-tree-id8695 . -3) (undo-tree-id8696 . -3) (undo-tree-id8697 . -3) (undo-tree-id8698 . -3) (undo-tree-id8699 . -3) (undo-tree-id8700 . -3) (undo-tree-id8701 . -4) 140 (t 26046 3965 570130 480000)) ((136 . 140)) (26046 4189 632550 536000) 0 nil])
([nil nil ((151 . 155) (#("    " 0 4 (face font-lock-comment-face fontified nil)) . 150) (150 . 154) (150 . 151)) nil (26046 4218 436635 453000) 0 nil])
([nil nil ((#("new(" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-2-face) fontified t)) . -131) (undo-tree-id8682 . -4) (undo-tree-id8683 . -3) (undo-tree-id8684 . -4) (undo-tree-id8685 . -4) (undo-tree-id8686 . -4) (undo-tree-id8687 . -4) (undo-tree-id8688 . -4) (undo-tree-id8689 . -4) (undo-tree-id8690 . -4) (undo-tree-id8691 . -4) 135) ((131 . 135)) (26046 4189 468300 158000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -109) (undo-tree-id8800 . -1) (undo-tree-id8801 . -1) (undo-tree-id8802 . -1) (undo-tree-id8803 . -1) (undo-tree-id8804 . -1) (undo-tree-id8805 . -1) (undo-tree-id8806 . -1) (undo-tree-id8807 . -1) (undo-tree-id8808 . -1) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -110) (undo-tree-id8809 . -1) (undo-tree-id8810 . -1) (undo-tree-id8811 . -1) (undo-tree-id8812 . -1) 111) nil (26046 4218 436633 645000) 0 nil])
([nil nil ((#("AtomicPtr::" 0 9 (face font-lock-type-face fontified t) 9 11 (fontified t)) . -120) (undo-tree-id8668 . -5) (undo-tree-id8669 . -11) (undo-tree-id8670 . -9) (undo-tree-id8671 . -11) (undo-tree-id8672 . -11) (undo-tree-id8673 . -11) (undo-tree-id8674 . -11) (undo-tree-id8675 . -11) (undo-tree-id8676 . -11) (undo-tree-id8677 . -11) (undo-tree-id8678 . -11) (undo-tree-id8679 . -11) (undo-tree-id8680 . -11) (undo-tree-id8681 . -11) 131) ((120 . 131)) (26046 4189 305680 624000) 0 nil])
([nil nil ((148 . 150)) nil (26046 4218 436623 969000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -126) (undo-tree-id8666 . -1) (undo-tree-id8667 . -1) 127) ((126 . 127)) (26046 4189 187914 7000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -148) (undo-tree-id8790 . -1) (undo-tree-id8791 . -1) (undo-tree-id8792 . -1) (undo-tree-id8793 . -1) (undo-tree-id8794 . -1) (undo-tree-id8795 . -1) (undo-tree-id8796 . -1) (#("e" 0 1 (fontified t)) . -149) (undo-tree-id8797 . -1) (undo-tree-id8798 . -1) (undo-tree-id8799 . -1) 150) nil (26046 4218 436622 818000) 0 nil])
([nil nil ((126 . 130)) ((#(" as " 0 1 (fontified t) 1 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . 126) (undo-tree-id8702 . -4)) (26046 4189 187537 285000) 0 nil])
([nil nil ((148 . 152)) nil (26046 4218 436615 111000) 0 nil])
nil
([nil nil ((152 . 158)) nil (26046 4218 436614 526000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-variable-name-face fontified t)) . -157) (undo-tree-id8787 . -1) (undo-tree-id8788 . -1) (undo-tree-id8789 . -1) 158) nil (26046 4218 436613 812000) 0 nil])
([nil nil ((157 . 162)) nil (26046 4218 436611 167000) 0 nil])
([nil nil ((162 . 164)) nil (26046 4218 436610 534000) 0 nil])
([nil nil ((163 . 168) (#("a" 0 1 (fontified nil)) . 163) (163 . 164) (#("array" 0 5 (fontified nil)) . -163) (163 . 168) (#("a" 0 1 (fontified t)) . -163) (undo-tree-id8784 . -1) (undo-tree-id8785 . -1) (undo-tree-id8786 . -1) 164) nil (26046 4218 436609 461000) 0 nil])
([nil nil ((168 . 181)) nil (26046 4218 436605 974000) 0 nil])
([nil nil ((179 . 184) (#("us" 0 2 (fontified nil)) . 179) (179 . 181) (#("usize" 0 5 (fontified nil)) . -179) (179 . 184) (#("us" 0 2 (fontified t)) . -179) (undo-tree-id8777 . -2) (undo-tree-id8778 . -1) (undo-tree-id8779 . -1) (undo-tree-id8780 . -2) (undo-tree-id8781 . -2) (undo-tree-id8782 . -2) (undo-tree-id8783 . -2) 181) nil (26046 4218 436604 357000) 0 nil])
([nil nil ((184 . 185)) nil (26046 4218 436597 989000) 0 nil])
([nil nil ((#("const " 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t)) . -173) (undo-tree-id8742 . -6) (undo-tree-id8743 . -6) (undo-tree-id8744 . -1) (undo-tree-id8745 . -1) (undo-tree-id8746 . -2) (undo-tree-id8747 . -2) (undo-tree-id8748 . -3) (undo-tree-id8749 . -3) (undo-tree-id8750 . -4) (undo-tree-id8751 . -4) (undo-tree-id8752 . -4) (undo-tree-id8753 . -4) (undo-tree-id8754 . -5) (undo-tree-id8755 . -5) (undo-tree-id8756 . -5) (undo-tree-id8757 . -5) (undo-tree-id8758 . -6) (undo-tree-id8759 . -6) (undo-tree-id8760 . -6) (undo-tree-id8761 . -6) (undo-tree-id8762 . -6) (undo-tree-id8763 . -6) (undo-tree-id8764 . -6) (undo-tree-id8765 . -6) (undo-tree-id8766 . -6) (undo-tree-id8767 . -6) (undo-tree-id8768 . -6) (undo-tree-id8769 . -6) (undo-tree-id8770 . -6) (undo-tree-id8771 . -6) (undo-tree-id8772 . -6) (undo-tree-id8773 . -6) (undo-tree-id8774 . -6) (undo-tree-id8775 . -6) (undo-tree-id8776 . -6) 179) nil (26046 4218 436595 68000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . -172) (undo-tree-id8703 . -1) (undo-tree-id8704 . -1) (undo-tree-id8705 . -1) (undo-tree-id8706 . -1) (undo-tree-id8707 . -1) (undo-tree-id8708 . -1) (undo-tree-id8709 . -1) (undo-tree-id8710 . -1) (undo-tree-id8711 . -1) (undo-tree-id8712 . -1) (undo-tree-id8713 . -1) (undo-tree-id8714 . -1) (undo-tree-id8715 . -1) (undo-tree-id8716 . -1) (undo-tree-id8717 . -1) (undo-tree-id8718 . -1) (undo-tree-id8719 . -1) (undo-tree-id8720 . -1) (undo-tree-id8721 . -1) (undo-tree-id8722 . -1) (undo-tree-id8723 . -1) (undo-tree-id8724 . -1) (undo-tree-id8725 . -1) (undo-tree-id8726 . -1) (undo-tree-id8727 . -1) (undo-tree-id8728 . -1) (undo-tree-id8729 . -1) (undo-tree-id8730 . -1) (undo-tree-id8731 . -1) (undo-tree-id8732 . -1) (undo-tree-id8733 . -1) (undo-tree-id8734 . -1) (undo-tree-id8735 . -1) (undo-tree-id8736 . -1) (undo-tree-id8737 . -1) (undo-tree-id8738 . -1) (undo-tree-id8739 . -1) (undo-tree-id8740 . -1) (undo-tree-id8741 . -1) 173) nil (26046 4218 436565 138000) 0 nil])
([nil nil ((#("usize" 0 5 (face font-lock-type-face fontified t)) . -172) (undo-tree-id8813 . -5) (undo-tree-id8814 . -5) (undo-tree-id8815 . -5) (undo-tree-id8816 . -5) (undo-tree-id8817 . -5) (undo-tree-id8818 . -5) (undo-tree-id8819 . -5) (undo-tree-id8820 . -5) (undo-tree-id8821 . -5) 177 (t 26046 4218 486812 537000)) nil (26046 4252 234430 341000) 0 nil])
([nil nil ((172 . 173)) nil (26046 4252 234415 10000) 0 nil])
([nil nil ((173 . 181)) nil (26046 4252 234413 482000) 0 nil])
([nil nil ((180 . 186)) nil (26046 4252 234408 866000) 0 nil])
([nil nil ((399 . 412) (t 26046 4252 253481 274000)) nil (26046 4275 920597 49000) 0 nil])
([nil nil ((412 . 415)) nil (26046 4275 920595 847000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -412) (undo-tree-id8826 . -1) (undo-tree-id8827 . -1) (undo-tree-id8828 . -1) (undo-tree-id8829 . -1) (undo-tree-id8830 . -1) (undo-tree-id8831 . -1) (undo-tree-id8832 . -1) (undo-tree-id8833 . -1) (undo-tree-id8834 . -1) (undo-tree-id8835 . -1) (undo-tree-id8836 . -1) (undo-tree-id8837 . -1) (undo-tree-id8838 . -1) (undo-tree-id8839 . -1) (undo-tree-id8840 . -1) (undo-tree-id8841 . -1) (undo-tree-id8842 . -1) (#("t" 0 1 (fontified t)) . -413) (undo-tree-id8843 . -1) (undo-tree-id8844 . -1) (undo-tree-id8845 . -1) (undo-tree-id8846 . -1) (undo-tree-id8847 . -1) (undo-tree-id8848 . -1) (undo-tree-id8849 . -1) (undo-tree-id8850 . -1) (undo-tree-id8851 . -1) (undo-tree-id8852 . -1) (undo-tree-id8853 . -1) (undo-tree-id8854 . -1) (undo-tree-id8855 . -1) (#("r" 0 1 (fontified t)) . -414) (undo-tree-id8856 . -1) (undo-tree-id8857 . -1) (undo-tree-id8858 . -1) (undo-tree-id8859 . -1) (undo-tree-id8860 . -1) (undo-tree-id8861 . -1) 415) nil (26046 4275 920593 245000) 0 nil])
([nil nil ((156 . 157)) nil (26046 4275 920565 974000) 0 nil])
([nil nil ((157 . 158)) nil (26046 4275 920565 76000) 0 nil])
([nil nil ((#("+" 0 1 (fontified t)) . -157) (undo-tree-id8822 . -1) (undo-tree-id8823 . -1) (undo-tree-id8824 . -1) (undo-tree-id8825 . -1) 158) nil (26046 4275 920562 108000) 0 nil])
([nil nil ((157 . 158)) nil (26046 4275 920287 772000) 0 nil])
([nil nil ((413 . 414) (t 26046 4275 940149 396000)) nil (26046 4287 858674 582000) 0 nil])
([nil nil ((413 . 418) (#("a" 0 1 (fontified nil)) . 413) (413 . 414) (#("a_ptr" 0 5 (fontified nil)) . -413) (413 . 418) (#("a" 0 1 (fontified t)) . -413) (undo-tree-id8922 . -1) (undo-tree-id8923 . -1) (undo-tree-id8924 . -1) (undo-tree-id8925 . -1) (undo-tree-id8926 . -1) (undo-tree-id8927 . -1) 414) nil (26046 4287 858673 234000) 0 nil])
([nil nil ((418 . 422)) nil (26046 4287 858667 849000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -420) (undo-tree-id8907 . -1) (undo-tree-id8908 . -1) (undo-tree-id8909 . -1) (undo-tree-id8910 . -1) (undo-tree-id8911 . -1) (undo-tree-id8912 . -1) (undo-tree-id8913 . -1) (undo-tree-id8914 . -1) (undo-tree-id8915 . -1) (#("s" 0 1 (fontified t)) . -421) (undo-tree-id8916 . -1) (undo-tree-id8917 . -1) (undo-tree-id8918 . -1) (undo-tree-id8919 . -1) (undo-tree-id8920 . -1) (undo-tree-id8921 . -1) 422) nil (26046 4287 858666 233000) 0 nil])
([nil nil ((420 . 421)) nil (26046 4287 858654 358000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -418) (undo-tree-id8862 . -1) (undo-tree-id8863 . -1) (undo-tree-id8864 . -1) (undo-tree-id8865 . -1) (undo-tree-id8866 . -1) (undo-tree-id8867 . -1) (undo-tree-id8868 . -1) (undo-tree-id8869 . -1) (undo-tree-id8870 . -1) (undo-tree-id8871 . -1) (undo-tree-id8872 . -1) (undo-tree-id8873 . -1) (undo-tree-id8874 . -1) (undo-tree-id8875 . -1) (undo-tree-id8876 . -1) (undo-tree-id8877 . -1) (undo-tree-id8878 . -1) (undo-tree-id8879 . -1) (undo-tree-id8880 . -1) (undo-tree-id8881 . -1) (undo-tree-id8882 . -1) (#("a" 0 1 (fontified t)) . -419) (undo-tree-id8883 . -1) (undo-tree-id8884 . -1) (undo-tree-id8885 . -1) (undo-tree-id8886 . -1) (undo-tree-id8887 . -1) (undo-tree-id8888 . -1) (undo-tree-id8889 . -1) (undo-tree-id8890 . -1) (undo-tree-id8891 . -1) (undo-tree-id8892 . -1) (undo-tree-id8893 . -1) (undo-tree-id8894 . -1) (undo-tree-id8895 . -1) (undo-tree-id8896 . -1) (undo-tree-id8897 . -1) (undo-tree-id8898 . -1) (undo-tree-id8899 . -1) (undo-tree-id8900 . -1) (#("s" 0 1 (face font-lock-keyword-face fontified t)) . -420) (undo-tree-id8901 . -1) (undo-tree-id8902 . -1) (undo-tree-id8903 . -1) (undo-tree-id8904 . -1) (undo-tree-id8905 . -1) (undo-tree-id8906 . -1) 421) nil (26046 4287 858650 553000) 0 nil])
([nil nil ((413 . 414)) nil (26046 4287 858607 729000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -419) (undo-tree-id8948 . -1) (undo-tree-id8949 . -1) (undo-tree-id8950 . 1) (undo-tree-id8951 . -1) (undo-tree-id8952 . -1) (undo-tree-id8953 . -1) (undo-tree-id8954 . -1) (undo-tree-id8955 . -1) (undo-tree-id8956 . -1) (undo-tree-id8957 . -1) (undo-tree-id8958 . -1) (undo-tree-id8959 . -1) (undo-tree-id8960 . -1) (undo-tree-id8961 . -1) (undo-tree-id8962 . -1) 420 (t 26046 4287 876816 795000)) nil (26046 4307 260024 574000) 0 nil])
([nil nil ((419 . 420)) nil (26046 4307 260013 290000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -419) (undo-tree-id8942 . -1) (undo-tree-id8943 . -1) (undo-tree-id8944 . -1) (undo-tree-id8945 . -1) (undo-tree-id8946 . -1) (undo-tree-id8947 . -1) 420) nil (26046 4307 260012 250000) 0 nil])
([nil nil ((419 . 420)) nil (26046 4307 260007 264000) 0 nil])
([nil nil ((413 . 414)) nil (26046 4307 260006 668000) 0 nil])
([nil nil ((421 . 422)) nil (26046 4307 260006 96000) 0 nil])
([nil nil ((422 . 423)) nil (26046 4307 260005 538000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -422) (undo-tree-id8937 . -1) (undo-tree-id8938 . -1) (undo-tree-id8939 . -1) (undo-tree-id8940 . -1) (undo-tree-id8941 . -1) 423) nil (26046 4307 260004 407000) 0 nil])
([nil nil ((422 . 424)) nil (26046 4307 259999 549000) 0 nil])
([nil nil ((apply yas--snippet-revive 422 432 #s(yas--snippet nil nil #s(yas--exit 432 nil) 51 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 432 nil) 51 nil nil nil nil)) (422 . 432) (#("iter_mut()$0" 0 12 (fontified nil)) . 422) (422 . 434) (#("it" 0 2 (fontified nil)) . 422) (422 . 424) (#("iter_mut()" 0 10 (fontified nil)) . -422) (422 . 432) (#("it" 0 2 (fontified t)) . -422) (undo-tree-id8928 . -2) (undo-tree-id8929 . -1) (undo-tree-id8930 . -1) (undo-tree-id8931 . -1) (undo-tree-id8932 . -2) (undo-tree-id8933 . -2) (undo-tree-id8934 . -2) (undo-tree-id8935 . -2) (undo-tree-id8936 . -2) 424) nil (26046 4307 259996 607000) 0 nil])
([nil nil ((432 . 433)) nil (26046 4307 259978 424000) 0 nil])
([nil nil ((413 . 414) 433 (t 26046 4307 310151 300000)) nil (26046 4319 482882 483000) 0 nil])
([nil nil ((#("(*a_ptr).iter_mut();" 0 1 (face (rainbow-delimiters-depth-5-face) fontified t) 1 2 (fontified t) 2 7 (fontified t) 7 8 (face (rainbow-delimiters-depth-5-face) fontified t) 8 9 (fontified t) 9 17 (fontified t) 17 18 (face (rainbow-delimiters-depth-5-face) fontified t) 18 19 (face (rainbow-delimiters-depth-5-face) fontified t) 19 20 (fontified t)) . 414) (undo-tree-id8964 . -20) (undo-tree-id8965 . -7) (undo-tree-id8966 . -7) (undo-tree-id8967 . -7) (undo-tree-id8968 . -7) (undo-tree-id8969 . -7) (undo-tree-id8970 . -7) (undo-tree-id8971 . -7) (undo-tree-id8972 . -7) (undo-tree-id8973 . -7) (undo-tree-id8974 . -7) (undo-tree-id8975 . -7) (undo-tree-id8976 . -7) (undo-tree-id8977 . -7) (undo-tree-id8978 . -7) (undo-tree-id8979 . -7) (undo-tree-id8980 . -7) (undo-tree-id8981 . -7) (undo-tree-id8982 . -9) (undo-tree-id8983 . -9) (undo-tree-id8984 . -9) (undo-tree-id8985 . -9) (undo-tree-id8986 . -9) (undo-tree-id8987 . -9) (undo-tree-id8988 . -9) (undo-tree-id8989 . -9) (undo-tree-id8990 . -9) (undo-tree-id8991 . -9) (undo-tree-id8992 . -9) (undo-tree-id8993 . -9) (undo-tree-id8994 . -20) (undo-tree-id8995 . -20) (undo-tree-id8996 . -20) (undo-tree-id8997 . -20) (undo-tree-id8998 . -20) (undo-tree-id8999 . -20) (undo-tree-id9000 . -20) (undo-tree-id9001 . -20) (undo-tree-id9002 . -20) (undo-tree-id9003 . -20) (undo-tree-id9004 . -20) (undo-tree-id9005 . -20) (undo-tree-id9006 . -20) (undo-tree-id9007 . -20) (undo-tree-id9008 . -20) (undo-tree-id9009 . -20) (undo-tree-id9010 . -20) (undo-tree-id9011 . -20) (undo-tree-id9012 . -20) (undo-tree-id9013 . -20) (undo-tree-id9014 . -20)) nil (26046 4319 482878 640000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 414) (undo-tree-id8963 . -1)) nil (26046 4319 482836 820000) 0 nil])
([nil nil ((#("            " 0 12 (fontified t)) . -414) (t 26046 4319 500152 32000)) nil (26046 4320 488748 796000) 0 nil])
([nil nil ((#("let a_ptr = &array as *const [u8; 64];" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 6 (face font-lock-variable-name-face fontified t) 6 9 (face font-lock-variable-name-face fontified t) 9 12 (fontified t) 12 13 (face rust-ampersand-face fontified t) 13 19 (fontified t) 19 21 (face font-lock-keyword-face fontified t) 21 23 (fontified t) 23 28 (face font-lock-keyword-face fontified t) 28 29 (fontified t) 29 30 (face (rainbow-delimiters-depth-2-face) fontified t) 30 32 (face font-lock-type-face fontified t) 32 36 (fontified t) 36 37 (face (rainbow-delimiters-depth-2-face) fontified t) 37 38 (fontified t)) . 152) (undo-tree-id9016 . -8) (undo-tree-id9017 . -8) (undo-tree-id9018 . -8) (undo-tree-id9019 . -8) (undo-tree-id9020 . -8) (undo-tree-id9021 . -8) (undo-tree-id9022 . -8) (undo-tree-id9023 . -8) (undo-tree-id9024 . -8) (undo-tree-id9025 . -38) (t 26046 4320 506818 761000)) nil (26046 4326 123923 794000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 152) (undo-tree-id9015 . -1)) nil (26046 4326 123911 633000) 0 nil])
([nil nil ((#("println!(\"Thread operating\");" 0 8 (face rust-builtin-formatting-macro fontified t) 8 9 (face (rainbow-delimiters-depth-4-face) fontified t) 9 26 (face font-lock-string-face fontified t) 26 27 (face font-lock-string-face fontified t) 27 28 (face (rainbow-delimiters-depth-4-face) fontified t) 28 29 (fontified t)) . 249) (undo-tree-id9029 . -29) (t 26046 4326 143485 769000)) nil (26046 4361 815458 432000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 249) (undo-tree-id9028 . -1)) nil (26046 4361 815455 898000) 0 nil])
([nil nil ((#("        " 0 6 (fontified t) 6 8 (fontified t)) . -249) (undo-tree-id9026 . -6) (undo-tree-id9027 . -6)) nil (26046 4361 815451 36000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -396) (undo-tree-id9222 . -1) (undo-tree-id9223 . -1) (undo-tree-id9224 . -1) (undo-tree-id9225 . -1) (undo-tree-id9226 . -1) (undo-tree-id9227 . -1) (undo-tree-id9228 . -1) (undo-tree-id9229 . -1) (undo-tree-id9230 . -1) (undo-tree-id9231 . -1) (undo-tree-id9232 . -1) (#("+" 0 1 (fontified t)) . -397) (undo-tree-id9233 . -1) (undo-tree-id9234 . -1) (undo-tree-id9235 . -1) (undo-tree-id9236 . -1) (undo-tree-id9237 . -1) (undo-tree-id9238 . -1) (undo-tree-id9239 . -1) (undo-tree-id9240 . -1) (undo-tree-id9241 . -1) (#("=" 0 1 (fontified t)) . -398) (undo-tree-id9242 . -1) (undo-tree-id9243 . -1) (undo-tree-id9244 . -1) (undo-tree-id9245 . -1) (undo-tree-id9246 . -1) (undo-tree-id9247 . -1) (undo-tree-id9248 . -1) (#(" " 0 1 (fontified nil)) . -399) (undo-tree-id9249 . -1) (undo-tree-id9250 . -1) (undo-tree-id9251 . -1) (undo-tree-id9252 . -1) (undo-tree-id9253 . -1) (undo-tree-id9254 . -1) (#("1" 0 1 (fontified t)) . -400) (undo-tree-id9255 . -1) (undo-tree-id9256 . -1) (undo-tree-id9257 . -1) (undo-tree-id9258 . -1) (undo-tree-id9259 . -1) (undo-tree-id9260 . -1) 401 (t 26046 4361 833487 956000)) nil (26046 4442 461223 987000) 0 nil])
([nil nil ((396 . 401)) nil (26046 4442 461164 864000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -397) (undo-tree-id9149 . -1) (undo-tree-id9150 . -1) (undo-tree-id9151 . -1) (undo-tree-id9152 . -1) (undo-tree-id9153 . -1) (undo-tree-id9154 . -1) (undo-tree-id9155 . -1) (undo-tree-id9156 . -1) (undo-tree-id9157 . -1) (undo-tree-id9158 . -1) (undo-tree-id9159 . -1) (undo-tree-id9160 . -1) (undo-tree-id9161 . -1) (undo-tree-id9162 . -1) (undo-tree-id9163 . -1) (undo-tree-id9164 . -1) (undo-tree-id9165 . -1) (undo-tree-id9166 . -1) (undo-tree-id9167 . -1) (undo-tree-id9168 . -1) (undo-tree-id9169 . -1) (undo-tree-id9170 . -1) (undo-tree-id9171 . -1) (undo-tree-id9172 . -1) (undo-tree-id9173 . -1) (#("n" 0 1 (fontified t)) . -398) (undo-tree-id9174 . -1) (undo-tree-id9175 . -1) (undo-tree-id9176 . -1) (undo-tree-id9177 . -1) (undo-tree-id9178 . -1) (undo-tree-id9179 . -1) (undo-tree-id9180 . -1) (undo-tree-id9181 . -1) (undo-tree-id9182 . -1) (undo-tree-id9183 . -1) (undo-tree-id9184 . -1) (undo-tree-id9185 . -1) (undo-tree-id9186 . -1) (undo-tree-id9187 . -1) (undo-tree-id9188 . -1) (undo-tree-id9189 . -1) (undo-tree-id9190 . -1) (undo-tree-id9191 . -1) (undo-tree-id9192 . -1) (undo-tree-id9193 . -1) (#("c" 0 1 (fontified t)) . -399) (undo-tree-id9194 . -1) (undo-tree-id9195 . -1) (undo-tree-id9196 . -1) (undo-tree-id9197 . -1) (undo-tree-id9198 . -1) (undo-tree-id9199 . -1) (undo-tree-id9200 . -1) (undo-tree-id9201 . -1) (undo-tree-id9202 . -1) (undo-tree-id9203 . -1) (undo-tree-id9204 . -1) (undo-tree-id9205 . -1) (undo-tree-id9206 . -1) (undo-tree-id9207 . -1) (undo-tree-id9208 . -1) (undo-tree-id9209 . -1) (#("h" 0 1 (fontified t)) . -400) (undo-tree-id9210 . -1) (undo-tree-id9211 . -1) (undo-tree-id9212 . -1) (undo-tree-id9213 . -1) (undo-tree-id9214 . -1) (undo-tree-id9215 . -1) (undo-tree-id9216 . -1) (undo-tree-id9217 . -1) (undo-tree-id9218 . -1) (undo-tree-id9219 . -1) (undo-tree-id9220 . -1) (undo-tree-id9221 . -1) 401) nil (26046 4442 461160 724000) 0 nil])
([nil nil ((397 . 400)) nil (26046 4442 461037 919000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t)) . -399) (undo-tree-id9144 . -1) (undo-tree-id9145 . -1) (undo-tree-id9146 . -1) (undo-tree-id9147 . -1) (undo-tree-id9148 . -1) 400) nil (26046 4442 461036 865000) 0 nil])
([nil nil ((399 . 400)) nil (26046 4442 461032 938000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t)) . -399) (undo-tree-id9139 . -1) (undo-tree-id9140 . -1) (undo-tree-id9141 . -1) (undo-tree-id9142 . -1) (undo-tree-id9143 . -1) 400) nil (26046 4442 461031 977000) 0 nil])
([nil nil ((399 . 401)) nil (26046 4442 461027 818000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -397) (undo-tree-id9040 . -1) (undo-tree-id9041 . -1) (undo-tree-id9042 . -1) (undo-tree-id9043 . -1) (undo-tree-id9044 . -1) (undo-tree-id9045 . -1) (undo-tree-id9046 . -1) (undo-tree-id9047 . -1) (undo-tree-id9048 . -1) (undo-tree-id9049 . -1) (undo-tree-id9050 . -1) (undo-tree-id9051 . -1) (undo-tree-id9052 . -1) (undo-tree-id9053 . -1) (undo-tree-id9054 . -1) (undo-tree-id9055 . -1) (undo-tree-id9056 . -1) (undo-tree-id9057 . -1) (undo-tree-id9058 . -1) (undo-tree-id9059 . -1) (undo-tree-id9060 . -1) (undo-tree-id9061 . -1) (undo-tree-id9062 . -1) (undo-tree-id9063 . -1) (undo-tree-id9064 . -1) (undo-tree-id9065 . -1) (undo-tree-id9066 . -1) (undo-tree-id9067 . -1) (undo-tree-id9068 . -1) (undo-tree-id9069 . -1) (undo-tree-id9070 . -1) (undo-tree-id9071 . -1) (undo-tree-id9072 . -1) (undo-tree-id9073 . -1) (undo-tree-id9074 . -1) (undo-tree-id9075 . -1) (undo-tree-id9076 . -1) (undo-tree-id9077 . -1) (undo-tree-id9078 . -1) (undo-tree-id9079 . -1) (undo-tree-id9080 . -1) (undo-tree-id9081 . -1) (#("n" 0 1 (fontified t)) . -398) (undo-tree-id9082 . -1) (undo-tree-id9083 . -1) (undo-tree-id9084 . -1) (undo-tree-id9085 . -1) (undo-tree-id9086 . -1) (undo-tree-id9087 . -1) (undo-tree-id9088 . -1) (undo-tree-id9089 . -1) (undo-tree-id9090 . -1) (undo-tree-id9091 . -1) (undo-tree-id9092 . -1) (undo-tree-id9093 . -1) (undo-tree-id9094 . -1) (undo-tree-id9095 . -1) (undo-tree-id9096 . -1) (undo-tree-id9097 . -1) (undo-tree-id9098 . -1) (undo-tree-id9099 . -1) (undo-tree-id9100 . -1) (undo-tree-id9101 . -1) (undo-tree-id9102 . -1) (undo-tree-id9103 . -1) (undo-tree-id9104 . -1) (undo-tree-id9105 . -1) (undo-tree-id9106 . -1) (undo-tree-id9107 . -1) (undo-tree-id9108 . -1) (undo-tree-id9109 . -1) (undo-tree-id9110 . -1) (undo-tree-id9111 . -1) (undo-tree-id9112 . -1) (undo-tree-id9113 . -1) (undo-tree-id9114 . -1) (undo-tree-id9115 . -1) (undo-tree-id9116 . -1) (#("c" 0 1 (fontified t)) . -399) (undo-tree-id9117 . -1) (undo-tree-id9118 . -1) (undo-tree-id9119 . -1) (undo-tree-id9120 . -1) (undo-tree-id9121 . -1) (undo-tree-id9122 . -1) (undo-tree-id9123 . -1) (undo-tree-id9124 . -1) (undo-tree-id9125 . -1) (undo-tree-id9126 . -1) (undo-tree-id9127 . -1) (undo-tree-id9128 . -1) (undo-tree-id9129 . -1) (#("h" 0 1 (fontified t)) . -400) (undo-tree-id9130 . -1) (undo-tree-id9131 . -1) (undo-tree-id9132 . -1) (undo-tree-id9133 . -1) (undo-tree-id9134 . -1) (undo-tree-id9135 . -1) (undo-tree-id9136 . -1) (undo-tree-id9137 . -1) (undo-tree-id9138 . -1) 401) nil (26046 4442 461023 275000) 0 nil])
([nil nil ((397 . 400)) nil (26046 4442 460952 29000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 410 411 nil nil nil t #s(yas--exit 412 nil))) #s(yas--exit 412 nil) 52 nil #s(yas--field 1 410 411 nil nil nil t #s(yas--exit 412 nil)) nil nil)) (397 . 414) (#("wrapping_add(${1:rhs})$0" 0 24 (fontified nil)) . 397) (397 . 421) (#("add" 0 3 (fontified nil)) . 397) (397 . 400) (#("wrapping_add(…)" 0 15 (fontified nil)) . -397) (397 . 412) (#("add" 0 3 (fontified t)) . -397) (undo-tree-id9031 . -3) (undo-tree-id9032 . -1) (undo-tree-id9033 . -1) (undo-tree-id9034 . -2) (undo-tree-id9035 . -2) (undo-tree-id9036 . -3) (undo-tree-id9037 . -3) (undo-tree-id9038 . -3) (undo-tree-id9039 . -3) 400) nil (26046 4442 460948 934000) 0 nil])
([nil nil ((#("rhs" 0 3 (fontified nil)) . 411) (undo-tree-id9030 . -3) (410 . 411)) nil (26046 4442 460783 265000) 0 nil])
([nil nil ((apply yas--snippet-revive 397 412 #s(yas--snippet nil (#s(yas--field 1 410 411 nil nil nil t #s(yas--exit 412 nil))) #s(yas--exit 412 nil) 52 nil #s(yas--field 1 410 411 nil nil nil t #s(yas--exit 412 nil)) nil nil))) nil (26046 4449 229373 771000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . -388) (undo-tree-id9261 . -1) (undo-tree-id9262 . -1) (undo-tree-id9263 . -1) (undo-tree-id9264 . -1) (undo-tree-id9265 . -1) (undo-tree-id9266 . -1) (undo-tree-id9267 . -1) (undo-tree-id9268 . -1) (undo-tree-id9269 . -1) (undo-tree-id9270 . -1) (undo-tree-id9271 . -1) (undo-tree-id9272 . -1) (undo-tree-id9273 . -1) (undo-tree-id9274 . -1) 389 (t 26046 4442 480159 570000)) nil (26046 4449 229369 566000) 0 nil])
([nil nil ((388 . 389) (t 26046 4449 250159 985000)) nil (26046 4464 265662 757000) 0 nil])
([nil nil ((396 . 400)) nil (26046 4464 265661 161000) 0 nil])
([nil nil ((399 . 406) (#("e" 0 1 (fontified nil)) . 399) (399 . 400) (#("element" 0 7 (fontified nil)) . -399) (399 . 406) (#("e" 0 1 (fontified t)) . -399) (undo-tree-id9275 . -1) (undo-tree-id9276 . -1) (undo-tree-id9277 . -1) (undo-tree-id9278 . -1) (undo-tree-id9279 . -1) (undo-tree-id9280 . -1) 400) nil (26046 4464 265656 804000) 0 nil])
([nil nil ((149 . 153) (#("    " 0 4 (fontified nil)) . 148) (undo-tree-id9328 . -4) (undo-tree-id9329 . -4) (undo-tree-id9330 . -4) (undo-tree-id9331 . -4) (undo-tree-id9332 . -4) (147 . 153) (t 26046 4464 283494 222000)) nil (26046 4751 343762 780000) 0 nil])
([nil nil ((153 . 154)) nil (26046 4751 343758 122000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -153) (undo-tree-id9319 . -1) (undo-tree-id9320 . -1) (undo-tree-id9321 . -1) (undo-tree-id9322 . -1) (undo-tree-id9323 . -1) (undo-tree-id9324 . -1) (undo-tree-id9325 . -1) (undo-tree-id9326 . -1) (undo-tree-id9327 . -1) 154) nil (26046 4751 343757 57000) 0 nil])
([nil nil ((153 . 158)) nil (26046 4751 343750 8000) 0 nil])
([nil nil ((apply yas--snippet-revive 153 163 #s(yas--snippet nil nil #s(yas--exit 162 nil) 53 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 162 nil) 53 nil nil nil nil)) (153 . 163) (#("println!($0)" 0 12 (fontified nil)) . 153) (153 . 165) (#("print" 0 5 (fontified nil)) . 153) (153 . 158) (#("println!(…)" 0 11 (fontified nil)) . -153) (153 . 164) (#("print" 0 5 (fontified t)) . -153) (undo-tree-id9304 . -5) (undo-tree-id9305 . -1) (undo-tree-id9306 . -1) (undo-tree-id9307 . -2) (undo-tree-id9308 . -2) (undo-tree-id9309 . -3) (undo-tree-id9310 . -3) (undo-tree-id9311 . -4) (undo-tree-id9312 . -4) (undo-tree-id9313 . -5) (undo-tree-id9314 . -5) (undo-tree-id9315 . -5) (undo-tree-id9316 . -5) (undo-tree-id9317 . -5) (undo-tree-id9318 . -5) 158) nil (26046 4751 343748 215000) 0 nil])
([nil nil ((162 . 164)) nil (26046 4751 343735 693000) 0 nil])
([nil nil ((#("{" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -162) (undo-tree-id9294 . -1) (undo-tree-id9295 . -1) (undo-tree-id9296 . -1) (undo-tree-id9297 . -1) (undo-tree-id9298 . -1) (undo-tree-id9299 . -1) (undo-tree-id9300 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -163) (undo-tree-id9301 . -1) (undo-tree-id9302 . -1) (undo-tree-id9303 . -1) 164) nil (26046 4751 343734 69000) 0 nil])
([nil nil ((162 . 164)) nil (26046 4751 343577 233000) 0 nil])
([nil nil ((163 . 165)) nil (26046 4751 343576 524000) 0 nil])
([nil nil ((166 . 170)) nil (26046 4751 343575 417000) 0 nil])
([nil nil ((168 . 172) (#("da" 0 2 (fontified nil)) . 168) (168 . 170) (#("data" 0 4 (fontified nil)) . -168) (168 . 172) (#("da" 0 2 (fontified t)) . -168) (undo-tree-id9281 . -2) (undo-tree-id9282 . -2) (undo-tree-id9283 . -1) (undo-tree-id9284 . -1) (undo-tree-id9285 . -1) (undo-tree-id9286 . -1) (undo-tree-id9287 . -1) (undo-tree-id9288 . -2) (undo-tree-id9289 . -2) (undo-tree-id9290 . -2) (undo-tree-id9291 . -2) (undo-tree-id9292 . -2) (undo-tree-id9293 . -2) 170) nil (26046 4751 343572 709000) 0 nil])
([nil nil ((173 . 174)) nil (26046 4751 343551 364000) 0 nil])
([nil nil ((164 . 166) (t 26046 4751 363511 763000)) nil (26046 4756 182292 654000) 0 nil])
([nil nil ((149 . 153) (#("    " 0 4 (fontified nil)) . 148) (148 . 152) (148 . 149) (t 26046 4756 200178 727000)) nil (26046 4831 48134 663000) 0 nil])
([nil nil ((148 . 152)) nil (26046 4831 48133 628000) 0 nil])
([nil nil ((152 . 154)) nil (26046 4831 48133 62000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -152) (undo-tree-id9409 . -1) (#("e" 0 1 (fontified t)) . -153) (undo-tree-id9410 . -1) 154) nil (26046 4831 48132 45000) 0 nil])
([nil nil ((172 . 175)) nil (26046 4831 48129 951000) 0 nil])
([nil nil ((175 . 178)) nil (26046 4831 48129 386000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-string-face fontified t)) . -175) (undo-tree-id9406 . -1) (#("m" 0 1 (face font-lock-string-face fontified t)) . -176) (undo-tree-id9407 . -1) (#("c" 0 1 (face font-lock-string-face fontified t)) . -177) (undo-tree-id9408 . -1) 178) nil (26046 4831 48128 395000) 0 nil])
([nil nil ((175 . 182)) nil (26046 4831 48125 567000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t)) . -178) (undo-tree-id9402 . -1) (#("P" 0 1 (face font-lock-string-face fontified t)) . -179) (undo-tree-id9403 . -1) (#("T" 0 1 (face font-lock-string-face fontified t)) . -180) (undo-tree-id9404 . -1) (#("R" 0 1 (face font-lock-string-face fontified t)) . -181) (undo-tree-id9405 . -1) 182) nil (26046 4831 48124 414000) 0 nil])
([nil nil ((178 . 183)) nil (26046 4831 48120 767000) 0 nil])
([nil nil ((196 . 201)) nil (26046 4831 48120 294000) 0 nil])
([nil nil ((201 . 203)) nil (26046 4831 48119 766000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -201) (undo-tree-id9400 . -1) (#("p" 0 1 (fontified t)) . -202) (undo-tree-id9401 . -1) 203) nil (26046 4831 48118 955000) 0 nil])
([nil nil ((201 . 202)) nil (26046 4831 48116 922000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -201) (undo-tree-id9399 . -1) 202) nil (26046 4831 48116 259000) 0 nil])
([nil nil ((201 . 202)) nil (26046 4831 48114 507000) 0 nil])
([nil nil ((202 . 203)) nil (26046 4831 48113 952000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -201) (undo-tree-id9397 . -1) (#("r" 0 1 (fontified t)) . -202) (undo-tree-id9398 . -1) 203) nil (26046 4831 48113 126000) 0 nil])
([nil nil ((152 . 162)) nil (26046 4831 48111 148000) 0 nil])
([nil nil ((#("u" 0 1 (face font-lock-variable-name-face fontified t)) . -161) (undo-tree-id9396 . -1) 162) nil (26046 4831 48110 379000) 0 nil])
([nil nil ((161 . 163)) nil (26046 4831 48109 10000) 0 nil])
([nil nil ((#("+" 0 1 (fontified t)) . -161) (undo-tree-id9394 . -1) (#("p" 0 1 (fontified t)) . -162) (undo-tree-id9395 . -1) 163) nil (26046 4831 48108 238000) 0 nil])
([nil nil ((161 . 163)) nil (26046 4831 48106 189000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -162) (undo-tree-id9393 . -1) 163) nil (26046 4831 48105 519000) 0 nil])
([nil nil ((162 . 166)) nil (26046 4831 48104 222000) 0 nil])
([nil nil ((166 . 169)) nil (26046 4831 48103 695000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -168) (undo-tree-id9392 . -1) 169) nil (26046 4831 48103 76000) 0 nil])
([nil nil ((168 . 171)) nil (26046 4831 48101 745000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -170) (undo-tree-id9391 . -1) 171) nil (26046 4831 48101 101000) 0 nil])
([nil nil ((170 . 171)) nil (26046 4831 48099 773000) 0 nil])
([nil nil ((169 . 174) (#("aa" 0 2 (fontified nil)) . 169) (169 . 171) (#("array" 0 5 (fontified nil)) . -169) (169 . 174) (#("aa" 0 2 (fontified t)) . -169) (undo-tree-id9390 . -2) 171) nil (26046 4831 48098 678000) 0 nil])
([nil nil ((174 . 179)) nil (26046 4831 48096 716000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -178) (undo-tree-id9389 . -1) 179) nil (26046 4831 48095 970000) 0 nil])
([nil nil ((178 . 182)) nil (26046 4831 48094 750000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -174) (undo-tree-id9381 . -1) (#("a" 0 1 (fontified t)) . -175) (undo-tree-id9382 . -1) (#("s" 0 1 (face font-lock-keyword-face fontified nil)) . -176) (undo-tree-id9383 . -1) (#(" " 0 1 (fontified nil)) . -177) (undo-tree-id9384 . -1) (#("*" 0 1 (fontified nil)) . -178) (undo-tree-id9385 . -1) (#("c" 0 1 (fontified t)) . -179) (undo-tree-id9386 . -1) (#("o" 0 1 (fontified t)) . -180) (undo-tree-id9387 . -1) (#("n" 0 1 (fontified t)) . -181) (undo-tree-id9388 . -1) 182) nil (26046 4831 48093 169000) 0 nil])
([nil nil ((174 . 175)) nil (26046 4831 48086 849000) 0 nil])
([nil nil ((168 . 169)) nil (26046 4831 48086 341000) 0 nil])
([nil nil ((168 . 172)) nil (26046 4831 48085 715000) 0 nil])
([nil nil ((#("L" 0 1 (fontified t)) . -171) (undo-tree-id9380 . -1) 172) nil (26046 4831 48084 944000) 0 nil])
([nil nil ((171 . 181)) nil (26046 4831 48083 691000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 188 191 nil nil nil nil #s(yas--exit 192 nil))) #s(yas--exit 192 nil) 54 nil #s(yas--field 1 188 191 nil nil nil nil #s(yas--exit 192 nil)) nil nil)) (178 . 192) (#("transmute(${1:src})$0" 0 21 (fontified nil)) . 178) (178 . 199) (#("tra" 0 3 (fontified nil)) . 178) (178 . 181) (#("transmute(…)" 0 12 (fontified nil)) . -178) (178 . 190) (#("tra" 0 3 (fontified t)) . -178) (undo-tree-id9379 . -3) 181) nil (26046 4831 48082 461000) 0 nil])
([nil nil ((apply yas--snippet-revive 178 192 #s(yas--snippet nil (#s(yas--field 1 188 191 nil nil nil nil #s(yas--exit 192 nil))) #s(yas--exit 192 nil) 54 nil #s(yas--field 1 188 191 nil nil nil nil #s(yas--exit 192 nil)) nil nil))) nil (26046 4831 48080 190000) 0 nil])
([nil nil ((165 . 169)) nil (26046 4831 48079 445000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -168) (undo-tree-id9378 . -1) 169) nil (26046 4831 48078 805000) 0 nil])
([nil nil ((168 . 169)) nil (26046 4831 48076 766000) 0 nil])
([nil nil ((167 . 172) (#("us" 0 2 (fontified nil)) . 167) (167 . 169) (#("usize" 0 5 (fontified nil)) . -167) (167 . 172) (#("us" 0 2 (fontified t)) . -167) (undo-tree-id9376 . -1) (undo-tree-id9377 . -2) 169) nil (26046 4831 48075 753000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -194) (undo-tree-id9338 . -1) (undo-tree-id9339 . -1) (undo-tree-id9340 . -1) (undo-tree-id9341 . -1) (undo-tree-id9342 . -1) (undo-tree-id9343 . -1) (undo-tree-id9344 . -1) (undo-tree-id9345 . -1) (undo-tree-id9346 . -1) (undo-tree-id9347 . -1) (undo-tree-id9348 . -1) (undo-tree-id9349 . -1) (undo-tree-id9350 . -1) (undo-tree-id9351 . -1) (undo-tree-id9352 . -1) (#("s" 0 1 (fontified t)) . -195) (undo-tree-id9353 . -1) (undo-tree-id9354 . -1) (undo-tree-id9355 . -1) (undo-tree-id9356 . -1) (undo-tree-id9357 . -1) (undo-tree-id9358 . -1) (undo-tree-id9359 . -1) (undo-tree-id9360 . -1) (undo-tree-id9361 . -1) (#("r" 0 1 (fontified t)) . -196) (undo-tree-id9362 . -1) (undo-tree-id9363 . -1) (undo-tree-id9364 . -1) (undo-tree-id9365 . -1) (undo-tree-id9366 . -1) (undo-tree-id9367 . -1) (undo-tree-id9368 . -1) (#("c" 0 1 (fontified t)) . -197) (undo-tree-id9369 . -1) (undo-tree-id9370 . -1) (undo-tree-id9371 . -1) (undo-tree-id9372 . -1) (undo-tree-id9373 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -198) (undo-tree-id9374 . -1) (undo-tree-id9375 . -1) 199) nil (26046 4831 48071 365000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -194) (undo-tree-id9336 . -1) (undo-tree-id9337 . -1) 195) nil (26046 4831 48045 782000) 0 nil])
([nil nil ((194 . 195)) nil (26046 4831 48043 593000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -194) (undo-tree-id9333 . -1) (undo-tree-id9334 . -1) (undo-tree-id9335 . -1) 195) nil (26046 4831 48042 121000) 0 nil])
([nil nil ((194 . 195)) nil (26046 4831 48032 482000) 0 nil])
([nil nil ((201 . 202)) nil (26046 4831 48028 679000) 0 nil])
([nil nil ((175 . 182) (t 26046 4831 66849 966000)) nil (26046 4845 479815 91000) 0 nil])
([nil nil ((182 . 183) (t 26046 4845 496850 854000)) nil (26046 4853 918671 119000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -210) (undo-tree-id9411 . -1) (undo-tree-id9412 . -1) (undo-tree-id9413 . -1) (undo-tree-id9414 . -1) (undo-tree-id9415 . -1) (undo-tree-id9416 . -1) (undo-tree-id9417 . -1) 211) nil (26046 4853 918668 807000) 0 nil])
([nil nil ((210 . 211)) nil (26046 4853 918653 344000) 0 nil])
([nil nil ((211 . 212) (t 26046 4853 936851 372000)) nil (26046 4855 452749 436000) 0 nil])
([nil nil ((258 . 262) (#("    " 0 4 (fontified nil)) . 257) (undo-tree-id9528 . -4) (undo-tree-id9529 . -4) (undo-tree-id9530 . -4) (undo-tree-id9531 . -4) (undo-tree-id9532 . -4) (undo-tree-id9533 . -4) (261 . 262) (t 26046 4855 470184 799000)) nil (26046 4878 998911 830000) 0 nil])
([nil nil ((257 . 261)) nil (26046 4878 998906 796000) 0 nil])
([nil nil ((261 . 262)) nil (26046 4878 998906 170000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -261) (undo-tree-id9525 . -1) (undo-tree-id9526 . -1) (undo-tree-id9527 . -1) 262) nil (26046 4878 998905 308000) 0 nil])
([nil nil ((261 . 263)) nil (26046 4878 998902 452000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -261) (undo-tree-id9515 . -1) (undo-tree-id9516 . -1) (undo-tree-id9517 . -1) (undo-tree-id9518 . -1) (undo-tree-id9519 . -1) (undo-tree-id9520 . -1) (undo-tree-id9521 . -1) (#("p" 0 1 (fontified t)) . -262) (undo-tree-id9522 . -1) (undo-tree-id9523 . -1) (undo-tree-id9524 . -1) 263) nil (26046 4878 998901 425000) 0 nil])
([nil nil ((261 . 262)) nil (26046 4878 998893 650000) 0 nil])
([nil nil ((apply yas--snippet-revive 261 271 #s(yas--snippet nil nil #s(yas--exit 270 nil) 55 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 270 nil) 55 nil nil nil nil)) (261 . 271) (#("println!($0)" 0 12 (fontified nil)) . 261) (261 . 273) (#("p" 0 1 (fontified nil)) . 261) (261 . 262) (#("println!(…)" 0 11 (fontified nil)) . -261) (261 . 272) (#("p" 0 1 (fontified t)) . -261) (undo-tree-id9509 . -1) (undo-tree-id9510 . -1) (undo-tree-id9511 . -1) (undo-tree-id9512 . -1) (undo-tree-id9513 . -1) (undo-tree-id9514 . -1) 262) nil (26046 4878 998892 281000) 0 nil])
([nil nil ((270 . 271)) nil (26046 4878 998886 199000) 0 nil])
([nil nil ((271 . 272)) nil (26046 4878 998885 528000) 0 nil])
([nil nil ((271 . 272)) nil (26046 4878 998884 901000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-string-face fontified t)) . -271) (undo-tree-id9506 . -1) (undo-tree-id9507 . -1) (undo-tree-id9508 . -1) 272) nil (26046 4878 998884 120000) 0 nil])
([nil nil ((271 . 278)) nil (26046 4878 998881 228000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-string-face fontified t)) . -277) (undo-tree-id9501 . -1) (undo-tree-id9502 . -1) (undo-tree-id9503 . -1) (undo-tree-id9504 . -1) (undo-tree-id9505 . -1) 278) nil (26046 4878 998880 398000) 0 nil])
([nil nil ((277 . 285)) nil (26046 4878 998875 791000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t)) . -284) (undo-tree-id9495 . -1) (undo-tree-id9496 . -1) (undo-tree-id9497 . -1) (undo-tree-id9498 . -1) (undo-tree-id9499 . -1) (undo-tree-id9500 . -1) 285) nil (26046 4878 998874 818000) 0 nil])
([nil nil ((284 . 288)) nil (26046 4878 998869 924000) 0 nil])
([nil nil ((289 . 292)) nil (26046 4878 998869 253000) 0 nil])
([nil nil ((291 . 296) (#("a" 0 1 (fontified nil)) . 291) (291 . 292) (#("array" 0 5 (fontified nil)) . -291) (291 . 296) (#("a" 0 1 (fontified t)) . -291) (undo-tree-id9486 . -1) (undo-tree-id9487 . -1) (undo-tree-id9488 . -1) (undo-tree-id9489 . -1) (undo-tree-id9490 . -1) (undo-tree-id9491 . -1) (undo-tree-id9492 . -1) (undo-tree-id9493 . -1) (undo-tree-id9494 . -1) 292) nil (26046 4878 998867 830000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -295) (undo-tree-id9480 . -1) (undo-tree-id9481 . -1) (undo-tree-id9482 . -1) (undo-tree-id9483 . -1) (undo-tree-id9484 . -1) (undo-tree-id9485 . -1) 296) nil (26046 4878 998859 811000) 0 nil])
([nil nil ((295 . 297)) nil (26046 4878 998854 57000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -295) (undo-tree-id9471 . -1) (undo-tree-id9472 . -1) (undo-tree-id9473 . -1) (undo-tree-id9474 . -1) (undo-tree-id9475 . -1) (undo-tree-id9476 . -1) (#("y" 0 1 (fontified t)) . -296) (undo-tree-id9477 . -1) (undo-tree-id9478 . -1) (undo-tree-id9479 . -1) 297) nil (26046 4878 998852 881000) 0 nil])
([nil nil ((295 . 296)) nil (26046 4878 998846 90000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -295) (undo-tree-id9465 . -1) (undo-tree-id9466 . -1) (undo-tree-id9467 . -1) (undo-tree-id9468 . -1) (undo-tree-id9469 . -1) (undo-tree-id9470 . -1) 296) nil (26046 4878 998845 111000) 0 nil])
([nil nil ((295 . 296)) nil (26046 4878 998840 622000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -295) (undo-tree-id9462 . -1) (undo-tree-id9463 . -1) (undo-tree-id9464 . -1) 296) nil (26046 4878 998839 718000) 0 nil])
([nil nil ((295 . 296)) nil (26046 4878 998836 570000) 0 nil])
([nil nil ((291 . 300) (#("array" 0 5 (fontified nil)) . 291) (291 . 296) (#("array_ptr" 0 9 (fontified nil)) . -291) (291 . 300) (#("array" 0 5 (fontified t)) . -291) (undo-tree-id9418 . -5) (undo-tree-id9419 . -5) (undo-tree-id9420 . -4) (undo-tree-id9421 . -4) (undo-tree-id9422 . -4) (undo-tree-id9423 . -4) (undo-tree-id9424 . -4) (undo-tree-id9425 . -4) (undo-tree-id9426 . -4) (undo-tree-id9427 . -4) (undo-tree-id9428 . -4) (undo-tree-id9429 . -4) (undo-tree-id9430 . -4) (undo-tree-id9431 . -4) (undo-tree-id9432 . -4) (undo-tree-id9433 . -4) (undo-tree-id9434 . -4) (undo-tree-id9435 . -4) (undo-tree-id9436 . -4) (undo-tree-id9437 . -4) (undo-tree-id9438 . -4) (undo-tree-id9439 . -4) (undo-tree-id9440 . -4) (undo-tree-id9441 . -4) (undo-tree-id9442 . -4) (undo-tree-id9443 . -4) (undo-tree-id9444 . -4) (undo-tree-id9445 . -4) (undo-tree-id9446 . -4) (undo-tree-id9447 . -4) (undo-tree-id9448 . -4) (undo-tree-id9449 . -4) (undo-tree-id9450 . -4) (undo-tree-id9451 . -4) (undo-tree-id9452 . -4) (undo-tree-id9453 . -5) (undo-tree-id9454 . -5) (undo-tree-id9455 . -5) (undo-tree-id9456 . -5) (undo-tree-id9457 . -5) (undo-tree-id9458 . -5) (undo-tree-id9459 . -5) (undo-tree-id9460 . -5) (undo-tree-id9461 . -5) 296) nil (26046 4878 998832 814000) 0 nil])
([nil nil ((301 . 302)) nil (26046 4878 998791 418000) 0 nil])
([nil nil ((287 . 289) (t 26046 4879 16852 912000)) nil (26046 4909 6472 799000) 0 nil])
([nil nil ((#("x" 0 1 (face rust-string-interpolation fontified t)) . -288) (undo-tree-id9550 . -1) (undo-tree-id9551 . -1) 289) nil (26046 4911 457258 741000) 0 nil] [nil nil ((287 . 289) (t 26046 4888 876853 514000)) ((#("0x" 0 2 (face rust-string-interpolation fontified t)) . 287) (undo-tree-id9534 . -2) (undo-tree-id9535 . -2) (undo-tree-id9536 . -2) (undo-tree-id9537 . -2) (undo-tree-id9538 . -2) (undo-tree-id9539 . -2) (undo-tree-id9540 . -2) (undo-tree-id9541 . -2) (undo-tree-id9542 . -2) (undo-tree-id9543 . -2) (undo-tree-id9544 . -2) (undo-tree-id9545 . -2) (undo-tree-id9546 . -2) (undo-tree-id9547 . -2) (undo-tree-id9548 . -2) (undo-tree-id9549 . -2) (t 26046 4897 276854 31000)) (26046 4897 227752 176000) 0 nil])
([nil nil ((288 . 289)) nil (26046 4911 457246 65000) 0 nil])
nil
([nil nil ((#("X" 0 1 (face rust-string-interpolation fontified t)) . -288) (undo-tree-id9570 . -1) (undo-tree-id9571 . -1) (undo-tree-id9572 . -1) (undo-tree-id9573 . -1) (undo-tree-id9574 . -1) (undo-tree-id9575 . -1) (undo-tree-id9576 . -1) (undo-tree-id9577 . -1) (undo-tree-id9578 . -1) (undo-tree-id9579 . -1) (undo-tree-id9580 . -1) (undo-tree-id9581 . -1) (undo-tree-id9582 . -1) (undo-tree-id9583 . -1) (undo-tree-id9584 . -1) (undo-tree-id9585 . -1) (undo-tree-id9586 . -1) (undo-tree-id9587 . -1) (undo-tree-id9588 . -1) (undo-tree-id9589 . -1) (undo-tree-id9590 . -1) 289 (t 26046 4911 476854 900000)) nil (26046 4922 656217 841000) 0 nil])
([nil nil ((288 . 290)) nil (26046 4922 656202 958000) 0 nil])
([nil nil ((#("0" 0 1 (face rust-string-interpolation fontified t)) . -288) (undo-tree-id9562 . -1) (undo-tree-id9563 . -1) (undo-tree-id9564 . -1) (undo-tree-id9565 . -1) (undo-tree-id9566 . -1) (undo-tree-id9567 . -1) (undo-tree-id9568 . -1) (undo-tree-id9569 . -1) 289) nil (26046 4922 656201 842000) 0 nil])
([nil nil ((286 . 288)) nil (26046 4922 656195 63000) 0 nil])
([nil nil ((#("9" 0 1 (face font-lock-string-face fontified t)) . -286) (undo-tree-id9552 . -1) (undo-tree-id9553 . -1) (undo-tree-id9554 . -1) (undo-tree-id9555 . -1) (undo-tree-id9556 . -1) (undo-tree-id9557 . -1) (undo-tree-id9558 . -1) (#("x" 0 1 (face font-lock-string-face fontified t)) . -287) (undo-tree-id9559 . -1) (undo-tree-id9560 . -1) (undo-tree-id9561 . -1) 288) nil (26046 4922 656192 630000) 0 nil])
([nil nil ((286 . 288)) nil (26046 4922 656174 627000) 0 nil])
([nil nil ((214 . 218) (#("    " 0 4 (fontified nil)) . 213) (undo-tree-id9632 . -4) (undo-tree-id9633 . -4) (undo-tree-id9634 . -4) (undo-tree-id9635 . -4) (217 . 218) (t 26046 4922 673522 251000)) nil (26046 5078 963255 229000) 0 nil])
([nil nil ((218 . 220)) nil (26046 5078 963249 13000) 0 nil])
([nil nil ((apply yas--snippet-revive 218 228 #s(yas--snippet nil nil #s(yas--exit 227 nil) 56 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 227 nil) 56 nil nil nil nil)) (218 . 228) (#("println!($0)" 0 12 (fontified nil)) . 218) (218 . 230) (#("pr" 0 2 (fontified nil)) . 218) (218 . 220) (#("println!(…)" 0 11 (fontified nil)) . -218) (218 . 229) (#("pr" 0 2 (fontified t)) . -218) (undo-tree-id9624 . -2) (undo-tree-id9625 . -1) (undo-tree-id9626 . -1) (undo-tree-id9627 . -2) (undo-tree-id9628 . -2) (undo-tree-id9629 . -2) (undo-tree-id9630 . -2) (undo-tree-id9631 . -2) 220) nil (26046 5078 963246 681000) 0 nil])
([nil nil ((227 . 229)) nil (26046 5078 963234 310000) 0 nil])
([nil nil ((228 . 238)) nil (26046 5078 963233 333000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t)) . -237) (undo-tree-id9621 . -1) (undo-tree-id9622 . -1) (undo-tree-id9623 . -1) 238) nil (26046 5078 963231 947000) 0 nil])
([nil nil ((237 . 241)) nil (26046 5078 963227 82000) 0 nil])
([nil nil ((240 . 241)) nil (26046 5078 963226 169000) 0 nil])
([nil nil ((241 . 242)) nil (26046 5078 963225 302000) 0 nil])
([nil nil ((244 . 248)) nil (26046 5078 963224 390000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -247) (undo-tree-id9615 . -1) (undo-tree-id9616 . -1) (undo-tree-id9617 . -1) (undo-tree-id9618 . -1) (undo-tree-id9619 . -1) (undo-tree-id9620 . -1) 248) nil (26046 5078 963223 86000) 0 nil])
([nil nil ((247 . 248)) nil (26046 5078 963215 914000) 0 nil])
([nil nil ((247 . 252) (#("a" 0 1 (fontified nil)) . 247) (247 . 248) (#("array" 0 5 (fontified nil)) . -247) (247 . 252) (#("a" 0 1 (fontified t)) . -247) (undo-tree-id9609 . -1) (undo-tree-id9610 . -1) (undo-tree-id9611 . -1) (undo-tree-id9612 . -1) (undo-tree-id9613 . -1) (undo-tree-id9614 . -1) 248) nil (26046 5078 963214 673000) 0 nil])
([nil nil ((252 . 263)) nil (26046 5078 963209 136000) 0 nil])
([nil nil ((263 . 265)) nil (26046 5078 963208 492000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -263) (undo-tree-id9591 . -1) (undo-tree-id9592 . -1) (undo-tree-id9593 . -1) (undo-tree-id9594 . -1) (undo-tree-id9595 . -1) (undo-tree-id9596 . -1) (undo-tree-id9597 . -1) (undo-tree-id9598 . -1) (undo-tree-id9599 . -1) (undo-tree-id9600 . -1) (undo-tree-id9601 . -1) (undo-tree-id9602 . -1) (undo-tree-id9603 . -1) (undo-tree-id9604 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -264) (undo-tree-id9605 . -1) (undo-tree-id9606 . -1) (undo-tree-id9607 . -1) (undo-tree-id9608 . -1) 265) nil (26046 5078 963206 390000) 0 nil])
([nil nil ((263 . 265)) nil (26046 5078 963188 237000) 0 nil])
([nil nil ((264 . 270)) nil (26046 5078 963186 938000) 0 nil])
([nil nil ((272 . 273)) nil (26046 5078 963182 976000) 0 nil])
([nil nil ((#(":" 0 1 (face rust-string-interpolation fontified t)) . -240) (undo-tree-id9636 . -1) (undo-tree-id9637 . -1) (undo-tree-id9638 . -1) (undo-tree-id9639 . -1) (undo-tree-id9640 . -1) (undo-tree-id9641 . -1) (undo-tree-id9642 . -1) (undo-tree-id9643 . -1) (undo-tree-id9644 . -1) (undo-tree-id9645 . -1) (undo-tree-id9646 . -1) (undo-tree-id9647 . -1) (#("x" 0 1 (face rust-string-interpolation fontified t)) . -241) (undo-tree-id9648 . -1) (undo-tree-id9649 . -1) 242 (t 26046 5078 983531 843000)) nil (26046 5086 439601 791000) 0 nil])
([nil nil ((240 . 242) (t 26046 5086 460198 969000)) nil (26046 5091 128105 203000) 0 nil])
([nil nil ((#("/" 0 1 (face rust-string-interpolation fontified t)) . -241) (undo-tree-id9653 . -1) (undo-tree-id9654 . -1) (undo-tree-id9655 . -1) 242) nil (26046 5091 128104 135000) 0 nil])
([nil nil ((241 . 242)) nil (26046 5091 128100 729000) 0 nil])
([nil nil ((#(">" 0 1 (face rust-string-interpolation syntax-table (1) fontified t)) . -241) (undo-tree-id9650 . -1) (undo-tree-id9651 . -1) (undo-tree-id9652 . -1) 242) nil (26046 5091 128098 627000) 0 nil])
([nil nil ((241 . 242)) nil (26046 5091 128086 689000) 0 nil])
([nil nil ((271 . 273) (t 26046 5091 146865 923000)) nil (26046 5121 571639 930000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -271) (undo-tree-id9675 . -1) (undo-tree-id9676 . -1) (undo-tree-id9677 . -1) (undo-tree-id9678 . -1) (undo-tree-id9679 . -1) (#("." 0 1 (fontified t)) . -272) (undo-tree-id9680 . -1) (undo-tree-id9681 . -1) (undo-tree-id9682 . -1) 273) nil (26046 5121 571637 902000) 0 nil])
([nil nil ((271 . 272)) nil (26046 5121 571629 310000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -271) (undo-tree-id9669 . -1) (undo-tree-id9670 . -1) (undo-tree-id9671 . -1) (undo-tree-id9672 . -1) (undo-tree-id9673 . -1) (undo-tree-id9674 . -1) 272) nil (26046 5121 571627 852000) 0 nil])
([nil nil ((246 . 247)) nil (26046 5121 571620 946000) 0 nil])
([nil nil ((272 . 274)) nil (26046 5121 571619 712000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -273) (undo-tree-id9662 . -1) (undo-tree-id9663 . -1) (undo-tree-id9664 . -1) (undo-tree-id9665 . -1) (undo-tree-id9666 . -1) (undo-tree-id9667 . -1) (undo-tree-id9668 . -1) 274) nil (26046 5121 571617 137000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -246) (undo-tree-id9656 . -1) (undo-tree-id9657 . -1) (undo-tree-id9658 . -1) (undo-tree-id9659 . -1) (undo-tree-id9660 . -1) (undo-tree-id9661 . -1) 247) nil (26046 5121 571605 973000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -272) (undo-tree-id9683 . -1) (undo-tree-id9684 . 1) (undo-tree-id9685 . -1) 273 (t 26046 5121 590201 125000)) nil (26046 5198 334639 441000) 0 nil])
([nil nil ((#("64]" 0 2 (fontified t) 2 3 (face (rainbow-delimiters-depth-3-face) fontified t)) . -268) (undo-tree-id10234 . -3) (undo-tree-id10235 . -3) (undo-tree-id10236 . -3) (undo-tree-id10237 . -3) (undo-tree-id10238 . -3) (undo-tree-id10239 . -3) (undo-tree-id10240 . -3) (undo-tree-id10241 . -3) (undo-tree-id10242 . -3) (undo-tree-id10243 . -3) (undo-tree-id10244 . -3) (undo-tree-id10245 . -3) (undo-tree-id10246 . -3) (undo-tree-id10247 . -3) (undo-tree-id10248 . -3) (undo-tree-id10249 . -3) (undo-tree-id10250 . -3) (undo-tree-id10251 . -3) (undo-tree-id10252 . -3) (undo-tree-id10253 . -3) (undo-tree-id10254 . -3) (undo-tree-id10255 . -3) (undo-tree-id10256 . -3) (undo-tree-id10257 . -3) (undo-tree-id10258 . -3) (undo-tree-id10259 . -3) (undo-tree-id10260 . -3) (undo-tree-id10261 . -3) (undo-tree-id10262 . -3) (undo-tree-id10263 . -3) (undo-tree-id10264 . -3) (undo-tree-id10265 . -3) (undo-tree-id10266 . -3) (undo-tree-id10267 . -3) (undo-tree-id10268 . -3) (undo-tree-id10269 . -3) (undo-tree-id10270 . -3) (undo-tree-id10271 . -3) (undo-tree-id10272 . -3) (undo-tree-id10273 . -3) (undo-tree-id10274 . -3) (undo-tree-id10275 . -3) (undo-tree-id10276 . -3) (undo-tree-id10277 . -3) (undo-tree-id10278 . -3) (undo-tree-id10279 . -3) (undo-tree-id10280 . -3) (undo-tree-id10281 . -3) (undo-tree-id10282 . -3) (undo-tree-id10283 . -3) (undo-tree-id10284 . -3) (undo-tree-id10285 . -3) (undo-tree-id10286 . -3) (undo-tree-id10287 . -3) (undo-tree-id10288 . -3) (undo-tree-id10289 . -3) 271 (t 26046 5199 273539 227000)) nil (26046 5262 236863 994000) 0 nil] [nil nil ((#("64]" 0 2 (fontified t) 2 3 (face (rainbow-delimiters-depth-3-face) fontified t)) . -268) (undo-tree-id9727 . -3) (undo-tree-id9728 . -3) (undo-tree-id9729 . -3) (undo-tree-id9730 . -3) (undo-tree-id9731 . -3) (undo-tree-id9732 . -3) 271 (t 26046 5125 376868 25000)) ((268 . 271)) (26046 5197 456482 661000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -263) (undo-tree-id9823 . -1) (undo-tree-id9824 . -1) (undo-tree-id9825 . -1) (undo-tree-id9826 . -1) (undo-tree-id9827 . -1) (undo-tree-id9828 . -1) (undo-tree-id9829 . -1) (undo-tree-id9830 . -1) (undo-tree-id9831 . -1) (undo-tree-id9832 . -1) (undo-tree-id9833 . -1) (undo-tree-id9834 . -1) (undo-tree-id9835 . -1) (undo-tree-id9836 . -1) (undo-tree-id9837 . -1) (undo-tree-id9838 . -1) (undo-tree-id9839 . -1) (undo-tree-id9840 . -1) (undo-tree-id9841 . -1) (undo-tree-id9842 . -1) (undo-tree-id9843 . -1) (undo-tree-id9844 . -1) (undo-tree-id9845 . -1) (undo-tree-id9846 . -1) (undo-tree-id9847 . -1) (undo-tree-id9848 . -1) (undo-tree-id9849 . -1) (undo-tree-id9850 . -1) (undo-tree-id9851 . -1) (undo-tree-id9852 . -1) (undo-tree-id9853 . -1) (undo-tree-id9854 . -1) (undo-tree-id9855 . -1) (undo-tree-id9856 . -1) (undo-tree-id9857 . -1) (undo-tree-id9858 . -1) (undo-tree-id9859 . -1) (undo-tree-id9860 . -1) (undo-tree-id9861 . -1) (undo-tree-id9862 . -1) (undo-tree-id9863 . -1) (undo-tree-id9864 . -1) (undo-tree-id9865 . -1) (undo-tree-id9866 . -1) (undo-tree-id9867 . -1) (undo-tree-id9868 . -1) (undo-tree-id9869 . -1) (undo-tree-id9870 . -1) (undo-tree-id9871 . -1) (undo-tree-id9872 . -1) (undo-tree-id9873 . -1) (undo-tree-id9874 . -1) (undo-tree-id9875 . -1) (undo-tree-id9876 . -1) (undo-tree-id9877 . -1) (undo-tree-id9878 . -1) (undo-tree-id9879 . -1) (undo-tree-id9880 . -1) (undo-tree-id9881 . -1) (undo-tree-id9882 . -1) (undo-tree-id9883 . -1) (undo-tree-id9884 . -1) (undo-tree-id9885 . -1) (undo-tree-id9886 . -1) (undo-tree-id9887 . -1) (undo-tree-id9888 . -1) (undo-tree-id9889 . -1) (undo-tree-id9890 . -1) (undo-tree-id9891 . -1) (undo-tree-id9892 . -1) (undo-tree-id9893 . -1) (undo-tree-id9894 . -1) (undo-tree-id9895 . -1) (undo-tree-id9896 . -1) (undo-tree-id9897 . -1) (undo-tree-id9898 . -1) (undo-tree-id9899 . -1) (undo-tree-id9900 . -1) (undo-tree-id9901 . -1) (undo-tree-id9902 . -1) (undo-tree-id9903 . -1) (undo-tree-id9904 . -1) (undo-tree-id9905 . -1) (undo-tree-id9906 . -1) (undo-tree-id9907 . -1) (undo-tree-id9908 . -1) (undo-tree-id9909 . -1) (undo-tree-id9910 . -1) (undo-tree-id9911 . -1) (undo-tree-id9912 . -1) (undo-tree-id9913 . -1) (undo-tree-id9914 . -1) (undo-tree-id9915 . -1) (undo-tree-id9916 . -1) (undo-tree-id9917 . -1) (#("u" 0 1 (fontified t)) . -264) (undo-tree-id9918 . -1) (undo-tree-id9919 . -1) (undo-tree-id9920 . -1) (undo-tree-id9921 . -1) (undo-tree-id9922 . -1) (undo-tree-id9923 . -1) (undo-tree-id9924 . -1) (undo-tree-id9925 . -1) (undo-tree-id9926 . -1) (undo-tree-id9927 . -1) (undo-tree-id9928 . -1) (undo-tree-id9929 . -1) (undo-tree-id9930 . -1) (undo-tree-id9931 . -1) (undo-tree-id9932 . -1) (undo-tree-id9933 . -1) (undo-tree-id9934 . -1) (undo-tree-id9935 . -1) (undo-tree-id9936 . -1) (undo-tree-id9937 . -1) (undo-tree-id9938 . -1) (undo-tree-id9939 . -1) (undo-tree-id9940 . -1) (undo-tree-id9941 . -1) (undo-tree-id9942 . -1) (undo-tree-id9943 . -1) (undo-tree-id9944 . -1) (undo-tree-id9945 . -1) (undo-tree-id9946 . -1) (undo-tree-id9947 . -1) (undo-tree-id9948 . -1) (undo-tree-id9949 . -1) (undo-tree-id9950 . -1) (undo-tree-id9951 . -1) (undo-tree-id9952 . -1) (undo-tree-id9953 . -1) (undo-tree-id9954 . -1) (undo-tree-id9955 . -1) (undo-tree-id9956 . -1) (undo-tree-id9957 . -1) (undo-tree-id9958 . -1) (undo-tree-id9959 . -1) (undo-tree-id9960 . -1) (undo-tree-id9961 . -1) (undo-tree-id9962 . -1) (undo-tree-id9963 . -1) (undo-tree-id9964 . -1) (undo-tree-id9965 . -1) (undo-tree-id9966 . -1) (undo-tree-id9967 . -1) (undo-tree-id9968 . -1) (undo-tree-id9969 . -1) (undo-tree-id9970 . -1) (undo-tree-id9971 . -1) (undo-tree-id9972 . -1) (undo-tree-id9973 . -1) (undo-tree-id9974 . -1) (undo-tree-id9975 . -1) (undo-tree-id9976 . -1) (undo-tree-id9977 . -1) (undo-tree-id9978 . -1) (undo-tree-id9979 . -1) (undo-tree-id9980 . -1) (undo-tree-id9981 . -1) (undo-tree-id9982 . -1) (undo-tree-id9983 . -1) (undo-tree-id9984 . -1) (undo-tree-id9985 . -1) (undo-tree-id9986 . -1) (undo-tree-id9987 . -1) (undo-tree-id9988 . -1) (undo-tree-id9989 . -1) (undo-tree-id9990 . -1) (undo-tree-id9991 . -1) (undo-tree-id9992 . -1) (undo-tree-id9993 . -1) (undo-tree-id9994 . -1) (undo-tree-id9995 . -1) (undo-tree-id9996 . -1) (undo-tree-id9997 . -1) (undo-tree-id9998 . -1) (undo-tree-id9999 . -1) (#("8" 0 1 (face font-lock-type-face fontified t)) . -265) (undo-tree-id10000 . -1) (undo-tree-id10001 . -1) (undo-tree-id10002 . -1) (undo-tree-id10003 . -1) (undo-tree-id10004 . -1) (undo-tree-id10005 . -1) (undo-tree-id10006 . -1) (undo-tree-id10007 . -1) (undo-tree-id10008 . -1) (undo-tree-id10009 . -1) (undo-tree-id10010 . -1) (undo-tree-id10011 . -1) (undo-tree-id10012 . -1) (undo-tree-id10013 . -1) (undo-tree-id10014 . -1) (undo-tree-id10015 . -1) (undo-tree-id10016 . -1) (undo-tree-id10017 . -1) (undo-tree-id10018 . -1) (undo-tree-id10019 . -1) (undo-tree-id10020 . -1) (undo-tree-id10021 . -1) (undo-tree-id10022 . -1) (undo-tree-id10023 . -1) (undo-tree-id10024 . -1) (undo-tree-id10025 . -1) (undo-tree-id10026 . -1) (undo-tree-id10027 . -1) (undo-tree-id10028 . -1) (undo-tree-id10029 . -1) (undo-tree-id10030 . -1) (undo-tree-id10031 . -1) (undo-tree-id10032 . -1) (undo-tree-id10033 . -1) (undo-tree-id10034 . -1) (undo-tree-id10035 . -1) (undo-tree-id10036 . -1) (undo-tree-id10037 . -1) (undo-tree-id10038 . -1) (undo-tree-id10039 . -1) (undo-tree-id10040 . -1) (undo-tree-id10041 . -1) (undo-tree-id10042 . -1) (undo-tree-id10043 . -1) (undo-tree-id10044 . -1) (undo-tree-id10045 . -1) (undo-tree-id10046 . -1) (undo-tree-id10047 . -1) (undo-tree-id10048 . -1) (undo-tree-id10049 . -1) (undo-tree-id10050 . -1) (undo-tree-id10051 . -1) (undo-tree-id10052 . -1) (undo-tree-id10053 . -1) (undo-tree-id10054 . -1) (undo-tree-id10055 . -1) (undo-tree-id10056 . -1) (undo-tree-id10057 . -1) (undo-tree-id10058 . -1) (undo-tree-id10059 . -1) (undo-tree-id10060 . -1) (undo-tree-id10061 . -1) (undo-tree-id10062 . -1) (undo-tree-id10063 . -1) (undo-tree-id10064 . -1) (undo-tree-id10065 . -1) (undo-tree-id10066 . -1) (undo-tree-id10067 . -1) (undo-tree-id10068 . -1) (undo-tree-id10069 . -1) (undo-tree-id10070 . -1) (undo-tree-id10071 . -1) (undo-tree-id10072 . -1) (undo-tree-id10073 . -1) (undo-tree-id10074 . -1) (undo-tree-id10075 . -1) (undo-tree-id10076 . -1) (undo-tree-id10077 . -1) (undo-tree-id10078 . -1) (undo-tree-id10079 . -1) (#(";" 0 1 (fontified t)) . -266) (undo-tree-id10080 . -1) (undo-tree-id10081 . -1) (undo-tree-id10082 . -1) (undo-tree-id10083 . -1) (undo-tree-id10084 . -1) (undo-tree-id10085 . -1) (undo-tree-id10086 . -1) (undo-tree-id10087 . -1) (undo-tree-id10088 . -1) (undo-tree-id10089 . -1) (undo-tree-id10090 . -1) (undo-tree-id10091 . -1) (undo-tree-id10092 . -1) (undo-tree-id10093 . -1) (undo-tree-id10094 . -1) (undo-tree-id10095 . -1) (undo-tree-id10096 . -1) (undo-tree-id10097 . -1) (undo-tree-id10098 . -1) (undo-tree-id10099 . -1) (undo-tree-id10100 . -1) (undo-tree-id10101 . -1) (undo-tree-id10102 . -1) (undo-tree-id10103 . -1) (undo-tree-id10104 . -1) (undo-tree-id10105 . -1) (undo-tree-id10106 . -1) (undo-tree-id10107 . -1) (undo-tree-id10108 . -1) (undo-tree-id10109 . -1) (undo-tree-id10110 . -1) (undo-tree-id10111 . -1) (undo-tree-id10112 . -1) (undo-tree-id10113 . -1) (undo-tree-id10114 . -1) (undo-tree-id10115 . -1) (undo-tree-id10116 . -1) (undo-tree-id10117 . -1) (undo-tree-id10118 . -1) (undo-tree-id10119 . -1) (undo-tree-id10120 . -1) (undo-tree-id10121 . -1) (undo-tree-id10122 . -1) (undo-tree-id10123 . -1) (undo-tree-id10124 . -1) (undo-tree-id10125 . -1) (undo-tree-id10126 . -1) (undo-tree-id10127 . -1) (undo-tree-id10128 . -1) (undo-tree-id10129 . -1) (undo-tree-id10130 . -1) (undo-tree-id10131 . -1) (undo-tree-id10132 . -1) (undo-tree-id10133 . -1) (undo-tree-id10134 . -1) (undo-tree-id10135 . -1) (undo-tree-id10136 . -1) (undo-tree-id10137 . -1) (undo-tree-id10138 . -1) (undo-tree-id10139 . -1) (undo-tree-id10140 . -1) (undo-tree-id10141 . -1) (undo-tree-id10142 . -1) (undo-tree-id10143 . -1) (undo-tree-id10144 . -1) (undo-tree-id10145 . -1) (undo-tree-id10146 . -1) (undo-tree-id10147 . -1) (undo-tree-id10148 . -1) (undo-tree-id10149 . -1) (undo-tree-id10150 . -1) (undo-tree-id10151 . -1) (undo-tree-id10152 . -1) (undo-tree-id10153 . -1) (undo-tree-id10154 . -1) (undo-tree-id10155 . -1) (undo-tree-id10156 . -1) (undo-tree-id10157 . -1) (#(" " 0 1 (fontified t)) . -267) (undo-tree-id10158 . -1) (undo-tree-id10159 . -1) (undo-tree-id10160 . -1) (undo-tree-id10161 . -1) (undo-tree-id10162 . -1) (undo-tree-id10163 . -1) (undo-tree-id10164 . -1) (undo-tree-id10165 . -1) (undo-tree-id10166 . -1) (undo-tree-id10167 . -1) (undo-tree-id10168 . -1) (undo-tree-id10169 . -1) (undo-tree-id10170 . -1) (undo-tree-id10171 . -1) (undo-tree-id10172 . -1) (undo-tree-id10173 . -1) (undo-tree-id10174 . -1) (undo-tree-id10175 . -1) (undo-tree-id10176 . -1) (undo-tree-id10177 . -1) (undo-tree-id10178 . -1) (undo-tree-id10179 . -1) (undo-tree-id10180 . -1) (undo-tree-id10181 . -1) (undo-tree-id10182 . -1) (undo-tree-id10183 . -1) (undo-tree-id10184 . -1) (undo-tree-id10185 . -1) (undo-tree-id10186 . -1) (undo-tree-id10187 . -1) (undo-tree-id10188 . -1) (undo-tree-id10189 . -1) (undo-tree-id10190 . -1) (undo-tree-id10191 . -1) (undo-tree-id10192 . -1) (undo-tree-id10193 . -1) (undo-tree-id10194 . -1) (undo-tree-id10195 . -1) (undo-tree-id10196 . -1) (undo-tree-id10197 . -1) (undo-tree-id10198 . -1) (undo-tree-id10199 . -1) (undo-tree-id10200 . -1) (undo-tree-id10201 . -1) (undo-tree-id10202 . -1) (undo-tree-id10203 . -1) (undo-tree-id10204 . -1) (undo-tree-id10205 . -1) (undo-tree-id10206 . -1) (undo-tree-id10207 . -1) (undo-tree-id10208 . -1) (undo-tree-id10209 . -1) (undo-tree-id10210 . -1) (undo-tree-id10211 . -1) (undo-tree-id10212 . -1) (undo-tree-id10213 . -1) (undo-tree-id10214 . -1) (undo-tree-id10215 . -1) (undo-tree-id10216 . -1) (undo-tree-id10217 . -1) (undo-tree-id10218 . -1) (undo-tree-id10219 . -1) (undo-tree-id10220 . -1) (undo-tree-id10221 . -1) (undo-tree-id10222 . -1) (undo-tree-id10223 . -1) (undo-tree-id10224 . -1) (undo-tree-id10225 . -1) (undo-tree-id10226 . -1) (undo-tree-id10227 . -1) (undo-tree-id10228 . -1) (undo-tree-id10229 . -1) (undo-tree-id10230 . -1) (undo-tree-id10231 . -1) (undo-tree-id10232 . -1) (undo-tree-id10233 . -1) 268) nil (26046 5265 227854 471000) 0 nil])
([nil nil ((#("u8; " 0 2 (face font-lock-type-face fontified t) 2 4 (fontified t)) . -264) (undo-tree-id9719 . -4) (undo-tree-id9720 . -4) (undo-tree-id9721 . -4) (undo-tree-id9722 . -4) (undo-tree-id9723 . -4) (undo-tree-id9724 . -4) (undo-tree-id9725 . -4) (undo-tree-id9726 . -4) 268) ((264 . 268)) (26046 5196 897618 546000) 0 nil])
([nil nil ((263 . 264)) nil (26046 5266 974414 612000) 0 nil] [nil nil ((263 . 265)) ((#("()" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t) 1 2 (face (rainbow-delimiters-depth-3-face) fontified t)) . 263) (undo-tree-id10290 . -2) (undo-tree-id10291 . -2) (undo-tree-id10292 . -2) (undo-tree-id10293 . -2) (undo-tree-id10294 . -2) (undo-tree-id10295 . -2) (undo-tree-id10296 . -2) (undo-tree-id10297 . -2) (undo-tree-id10298 . -2) (undo-tree-id10299 . -2) (undo-tree-id10300 . -2) (undo-tree-id10301 . -2) (undo-tree-id10302 . -2) (t 26046 5262 256876 427000)) (26046 5262 236322 70000) 0 nil])
([nil nil ((#("const [" 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-3-face) fontified t)) . -257) (undo-tree-id9709 . -7) (undo-tree-id9710 . -7) (undo-tree-id9711 . -7) (undo-tree-id9712 . -7) (undo-tree-id9713 . -7) (undo-tree-id9714 . -7) (undo-tree-id9715 . -7) (undo-tree-id9716 . -7) (undo-tree-id9717 . -7) (undo-tree-id9718 . -7) 264) ((257 . 264)) (26046 5196 566863 176000) 0 nil])
([nil nil ((775 . 779) (#("    " 0 4 (fontified nil)) . 774) (undo-tree-id10311 . -4) (undo-tree-id10312 . -4) (undo-tree-id10313 . -4) (undo-tree-id10314 . -4) (773 . 779) (t 26046 5266 993543 384000)) nil (26046 5290 155490 162000) 0 nil])
nil
([nil nil ((#("*" 0 1 (fontified t)) . -256) (undo-tree-id9694 . -1) (undo-tree-id9695 . -1) (undo-tree-id9696 . -1) (undo-tree-id9697 . -1) (undo-tree-id9698 . -1) (undo-tree-id9699 . -1) (undo-tree-id9700 . -1) (undo-tree-id9701 . -1) (undo-tree-id9702 . -1) (undo-tree-id9703 . -1) (undo-tree-id9704 . -1) (undo-tree-id9705 . -1) (undo-tree-id9706 . -1) (undo-tree-id9707 . -1) (undo-tree-id9708 . -1) 257) ((256 . 257)) (26046 5196 265061 311000) 0 nil])
([nil nil ((374 . 388)) nil (26046 5290 155485 120000) 0 nil])
([nil nil ((256 . 257)) ((#("*" 0 1 (fontified t)) . 256) (undo-tree-id9818 . -1) (undo-tree-id9819 . -1) (undo-tree-id9820 . -1) (undo-tree-id9821 . -1) (undo-tree-id9822 . -1)) (26046 5195 871987 997000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -387) (undo-tree-id10303 . -1) (undo-tree-id10304 . -1) (undo-tree-id10305 . -1) (undo-tree-id10306 . -1) (undo-tree-id10307 . -1) (undo-tree-id10308 . -1) (undo-tree-id10309 . -1) (undo-tree-id10310 . -1) 388) nil (26046 5290 155481 599000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . -256) (undo-tree-id9691 . -1) (undo-tree-id9692 . -1) (undo-tree-id9693 . -1) 257) ((256 . 257)) (26046 5195 509148 452000) 0 nil])
([nil nil ((792 . 794) (t 26046 5290 173544 809000)) nil (26046 5297 697075 416000) 0 nil])
([nil nil ((256 . 259)) ((#("&[]" 0 1 (face rust-ampersand-face fontified t) 1 2 (face (rainbow-delimiters-depth-3-face) fontified t) 2 3 (face (rainbow-delimiters-depth-3-face) fontified t)) . 256) (undo-tree-id9771 . -2) (undo-tree-id9772 . -2) (undo-tree-id9773 . -2) (undo-tree-id9774 . -2) (undo-tree-id9775 . -2) (undo-tree-id9776 . -2) (undo-tree-id9777 . -2) (undo-tree-id9778 . -2) (undo-tree-id9779 . -2) (undo-tree-id9780 . -2) (undo-tree-id9781 . -2) (undo-tree-id9782 . -2) (undo-tree-id9783 . -2) (undo-tree-id9784 . -2) (undo-tree-id9785 . -2) (undo-tree-id9786 . -2) (undo-tree-id9787 . -2) (undo-tree-id9788 . -2) (undo-tree-id9789 . -2) (undo-tree-id9790 . -2) (undo-tree-id9791 . -2) (undo-tree-id9792 . -2) (undo-tree-id9793 . -2) (undo-tree-id9794 . -2) (undo-tree-id9795 . -2) (undo-tree-id9796 . -2) (undo-tree-id9797 . -2) (undo-tree-id9798 . -2) (undo-tree-id9799 . -2) (undo-tree-id9800 . -2) (undo-tree-id9801 . -2) (undo-tree-id9802 . -2) (undo-tree-id9803 . -2) (undo-tree-id9804 . -2) (undo-tree-id9805 . -2) (undo-tree-id9806 . -2) (undo-tree-id9807 . -3) (undo-tree-id9808 . -3) (undo-tree-id9809 . -3) (undo-tree-id9810 . -3) (undo-tree-id9811 . -3) (undo-tree-id9812 . -2) (undo-tree-id9813 . -2) (undo-tree-id9814 . -2) (undo-tree-id9815 . -2) (undo-tree-id9816 . -2) (undo-tree-id9817 . -2)) (26046 5195 235040 430000) 0 nil])
([nil nil ((794 . 795)) nil (26046 5297 697074 765000) 0 nil])
([nil nil ((258 . 259)) ((#("u" 0 1 (fontified t)) . 258) (undo-tree-id9764 . -1) (undo-tree-id9765 . -1) (undo-tree-id9766 . -1) (undo-tree-id9767 . -1) (undo-tree-id9768 . -1) (undo-tree-id9769 . -1) (undo-tree-id9770 . -1)) (26046 5194 897941 220000) 0 nil])
([nil nil ((792 . 798) (#("han" 0 3 (fontified nil)) . 792) (792 . 795) (#("handle" 0 6 (fontified nil)) . -792) (792 . 798) (#("han" 0 3 (fontified t)) . -792) (undo-tree-id10319 . -3) (undo-tree-id10320 . -3) (undo-tree-id10321 . -1) (undo-tree-id10322 . -1) (undo-tree-id10323 . -2) (undo-tree-id10324 . -3) (undo-tree-id10325 . -3) (undo-tree-id10326 . -3) (undo-tree-id10327 . -3) (undo-tree-id10328 . -3) (undo-tree-id10329 . -3) (undo-tree-id10330 . -3) 795) nil (26046 5297 697073 222000) 0 nil])
([nil nil ((258 . 260) (#("u" 0 1 (fontified nil)) . 258) (258 . 259) (#("u8" 0 2 (fontified nil)) . -258) (258 . 260) (#("u" 0 1 (fontified t)) . -258) (undo-tree-id9686 . -1) (undo-tree-id9687 . -1) (undo-tree-id9688 . -1) (undo-tree-id9689 . -1) (undo-tree-id9690 . -1) 259) ((258 . 259) (#("u8" 0 2 (fontified nil)) . 258) (258 . 260) (#("u" 0 1 (fontified nil)) . 258) (258 . 259) (#("u8" 0 2 (face font-lock-type-face fontified t)) . 258) (undo-tree-id9733 . -1) (undo-tree-id9734 . -2) (undo-tree-id9735 . -2) (undo-tree-id9736 . -2) (undo-tree-id9737 . -2) (undo-tree-id9738 . -2) (undo-tree-id9739 . -2) (undo-tree-id9740 . -2) (undo-tree-id9741 . -2) (undo-tree-id9742 . -2) (undo-tree-id9743 . -2) (undo-tree-id9744 . -2) (undo-tree-id9745 . -2) (undo-tree-id9746 . -2) (undo-tree-id9747 . -1) (undo-tree-id9748 . -1) (undo-tree-id9749 . -1) (undo-tree-id9750 . -1) (undo-tree-id9751 . -1) (undo-tree-id9752 . -1) (undo-tree-id9753 . -1) (undo-tree-id9754 . -1) (undo-tree-id9755 . -1) (undo-tree-id9756 . -1) (undo-tree-id9757 . -1) (undo-tree-id9758 . -1) (undo-tree-id9759 . -1) (undo-tree-id9760 . -1) (undo-tree-id9761 . -1) (undo-tree-id9762 . -1) (undo-tree-id9763 . -2) (t 26046 5186 513538 444000)) (26046 5186 505483 48000) 0 nil])
([nil nil ((798 . 800)) nil (26046 5297 697063 331000) 0 nil])
nil
([nil nil ((apply yas--snippet-revive 799 805 #s(yas--snippet nil nil #s(yas--exit 805 nil) 57 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 805 nil) 57 nil nil nil nil)) (799 . 805) (#("join()$0" 0 8 (fontified nil)) . 799) (799 . 807) (#("j" 0 1 (fontified nil)) . 799) (799 . 800) (#("join()" 0 6 (fontified nil)) . -799) (799 . 805) (#("j" 0 1 (fontified t)) . -799) (undo-tree-id10315 . -1) (undo-tree-id10316 . -1) (undo-tree-id10317 . -1) (undo-tree-id10318 . -1) 800) nil (26046 5297 697060 748000) 0 nil])
([nil nil ((805 . 806)) nil (26046 5297 697046 421000) 0 nil])
([nil nil ((#("handle.join();" 0 7 (fontified t) 7 11 (fontified t) 11 12 (face (rainbow-delimiters-depth-2-face) fontified t) 12 13 (face (rainbow-delimiters-depth-2-face) fontified t) 13 14 (fontified t)) . 792) (undo-tree-id10331 . -7) (undo-tree-id10332 . -7) (undo-tree-id10333 . -7) (undo-tree-id10334 . -14) (undo-tree-id10335 . -14) (undo-tree-id10336 . -14) (undo-tree-id10337 . -14) (undo-tree-id10338 . -14) (undo-tree-id10339 . -14) (undo-tree-id10340 . -14) (undo-tree-id10341 . -14) (undo-tree-id10342 . -14) (undo-tree-id10343 . -14) (undo-tree-id10344 . -14) (undo-tree-id10345 . -14) (undo-tree-id10346 . -14) (undo-tree-id10347 . -14) (undo-tree-id10348 . -14) (undo-tree-id10349 . -14) (undo-tree-id10350 . -14) (undo-tree-id10351 . -14) (undo-tree-id10352 . -14) (undo-tree-id10353 . -14) (undo-tree-id10354 . -14) (undo-tree-id10355 . -14) (undo-tree-id10356 . -14) (undo-tree-id10357 . -14) (undo-tree-id10358 . -14) (undo-tree-id10359 . -14) (undo-tree-id10360 . -14) (undo-tree-id10361 . -14) (undo-tree-id10362 . -14) (undo-tree-id10363 . -14) (undo-tree-id10364 . -14) (undo-tree-id10365 . -14) (t 26046 5297 716878 606000)) nil (26046 5307 723326 176000) 0 nil])
([nil nil ((683 . 687) (#("    " 0 4 (fontified nil)) . 682) (682 . 686) (682 . 683)) nil (26046 5307 723287 876000) 0 nil])
([nil nil ((nil rear-nonsticky nil 700 . 701) (nil fontified nil 700 . 701) (nil fontified nil 699 . 700) (nil fontified nil 698 . 699) (nil fontified nil 694 . 698) (nil fontified nil 687 . 694) (687 . 701) (t 26046 5307 733545 887000)) nil (26046 5309 515697 955000) 0 nil])
([nil nil ((701 . 706)) nil (26046 5309 515692 639000) 0 nil])
([nil nil ((#("handle.join();" 0 7 (fontified t) 7 11 (fontified t) 11 12 (face (rainbow-delimiters-depth-2-face) fontified t) 12 13 (face (rainbow-delimiters-depth-2-face) fontified t) 13 14 (rear-nonsticky t fontified t)) . 687) (undo-tree-id10367 . -14) (t 26046 5309 533545 997000)) nil (26046 5326 57045 924000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 687) (undo-tree-id10366 . -1)) nil (26046 5326 57040 852000) 0 nil])
([nil nil ((378 . 379) (t 26046 5326 76880 344000)) nil (26046 5333 608045 399000) 0 nil])
([nil nil ((#(":" 0 1 (face rust-string-interpolation fontified t)) . -240) (undo-tree-id10368 . -1) (undo-tree-id10369 . -1) (undo-tree-id10370 . -1) (undo-tree-id10371 . -1) (undo-tree-id10372 . -1) (undo-tree-id10373 . -1) (undo-tree-id10374 . -1) (undo-tree-id10375 . -1) (undo-tree-id10376 . -1) (undo-tree-id10377 . -1) (undo-tree-id10378 . -1) (undo-tree-id10379 . -1) (undo-tree-id10380 . -1) (undo-tree-id10381 . -1) (#("?" 0 1 (face rust-string-interpolation fontified t)) . -241) (undo-tree-id10382 . -1) (undo-tree-id10383 . -1) (undo-tree-id10384 . -1) (undo-tree-id10385 . -1) (undo-tree-id10386 . -1) (undo-tree-id10387 . -1) (undo-tree-id10388 . -1) (undo-tree-id10389 . -1) (undo-tree-id10390 . -1) (undo-tree-id10391 . -1) (undo-tree-id10392 . -1) (undo-tree-id10393 . -1) 242 (t 26046 5333 626880 807000)) nil (26046 6368 97872 195000) 0 nil])
([nil current ((240 . 242) (t 26046 6368 150277 594000)) nil (26046 6379 510261 726000) 0 nil])
nil
