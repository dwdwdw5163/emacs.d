(undo-tree-save-format-version . 1)
"3f51c1941672098cd591a3a6bf91d58fdcc89119"
[nil nil nil nil (26052 52733 19084 515000) 0 nil]
([nil nil ((1 . 3) (t 26052 52667 879785 671000)) nil (26052 52733 19083 398000) 0 nil])
([nil nil ((1 . 3)) nil (26052 52733 19082 387000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (#("e" 0 1 (fontified t)) . -2) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) 3) nil (26052 52733 19080 592000) 0 nil])
([nil nil ((nil rear-nonsticky nil 44 . 45) (nil fontified nil 1 . 45) (1 . 45)) nil (26052 52733 19063 992000) 0 nil])
([nil nil ((#("let world = World::default();" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 9 (face font-lock-variable-name-face fontified t) 9 12 (fontified t) 12 17 (face font-lock-type-face fontified t) 17 26 (fontified t) 26 27 (face (rainbow-delimiters-depth-1-face) fontified t) 27 28 (face (rainbow-delimiters-depth-1-face) fontified t) 28 29 (rear-nonsticky t fontified t)) . 16) (undo-tree-id26 . -29) (undo-tree-id27 . -29) (undo-tree-id28 . -29) (undo-tree-id29 . -29) (undo-tree-id30 . -29) (undo-tree-id31 . -29) (undo-tree-id32 . -29) (undo-tree-id33 . -29)) nil (26052 52733 19061 901000) 0 nil])
([nil nil ((29 . 34)) nil (26052 52733 18809 848000) 0 nil])
([nil nil ((nil fontified nil 62 . 63) (nil fontified nil 61 . 62) (nil fontified nil 60 . 61) (nil fontified nil 51 . 60) (nil fontified nil 46 . 51) (nil fontified nil 43 . 46) (nil fontified nil 38 . 43) (nil fontified nil 37 . 38) (nil fontified nil 34 . 37) (34 . 63)) nil (26052 52733 18808 687000) 0 nil])
([nil nil ((#("    println!(\"Hello, world!\");" 0 4 (fontified t) 4 12 (face rust-builtin-formatting-macro fontified t) 12 13 (face (rainbow-delimiters-depth-2-face) fontified t) 13 28 (face font-lock-string-face fontified t) 28 29 (face (rainbow-delimiters-depth-2-face) fontified t) 29 30 (fontified t)) . 64) (undo-tree-id2 . -30) (undo-tree-id3 . -30) (undo-tree-id4 . -30) (undo-tree-id5 . -30) (undo-tree-id6 . -28) (undo-tree-id7 . -27) (undo-tree-id8 . -26) (undo-tree-id9 . -24) (undo-tree-id10 . -22) (undo-tree-id11 . -21) (undo-tree-id12 . -19) (undo-tree-id13 . -17) (undo-tree-id14 . -15) (undo-tree-id15 . -14) (undo-tree-id16 . -12) (undo-tree-id17 . -11) (undo-tree-id18 . -9) (undo-tree-id19 . -8) (undo-tree-id20 . -7) (undo-tree-id21 . -6) (undo-tree-id22 . -5) (undo-tree-id23 . -4) (undo-tree-id24 . -30) (undo-tree-id25 . -30)) nil (26052 52733 18805 449000) 0 nil])
([nil nil ((nil rear-nonsticky nil 785 . 786) (nil fontified nil 64 . 786) (64 . 786)) nil (26052 52733 18786 970000) 0 nil])
([nil nil ((855 . 859) (785 . 793) (#("    " 0 4 (fontified t)) . 785) (undo-tree-id0 . -4) (715 . 723) (#("    " 0 4 (fontified t)) . 715) (645 . 653) (#("    " 0 4 (fontified t)) . 645) (596 . 600) (512 . 516) (412 . 416) (347 . 351) (340 . 344) (323 . 331) (#("    " 0 4 (fontified t)) . 323) (undo-tree-id1 . -3) (306 . 314) (#("    " 0 4 (fontified t)) . 306) (284 . 288) (239 . 243) (232 . 236) (216 . 224) (#("    " 0 4 (fontified t)) . 216) (200 . 208) (#("    " 0 4 (fontified t)) . 200) (178 . 182) (133 . 137) (64 . 68) 17) nil (26052 52733 18781 73000) 0 nil])
([nil nil ((38 . 42) (t 26052 52733 29789 652000)) nil (26052 52736 963243 532000) 0 nil])
([nil nil ((868 . 872) (#("    " 0 4 (fontified nil)) . 867) (undo-tree-id55 . -4) (undo-tree-id56 . -4) (undo-tree-id57 . -4) (undo-tree-id58 . -4) (866 . 872) (t 26052 52736 973123 228000)) nil (26052 52814 215232 811000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1149 . 1150) (nil fontified nil 872 . 1150) (872 . 1150)) nil (26052 52814 215221 739000) 0 nil])
([nil nil ((1165 . 1169) (1129 . 1137) (#("    " 0 4 (fontified t)) . 1129) (1088 . 1092) (1018 . 1022) (970 . 974) 859) nil (26052 52814 215216 197000) 0 nil])
([nil nil ((#("    // or extend via an IntoIterator of tuples to add many at once (this is faster)
    let entities: &[Entity] = world.extend(vec![
        (Position { x: 0.0, y: 0.0 }, Velocity { dx: 0.0, dy: 0.0 }),
        (Position { x: 1.0, y: 1.0 }, Velocity { dx: 0.0, dy: 0.0 }),
        (Position { x: 2.0, y: 2.0 }, Velocity { dx: 0.0, dy: 0.0 }),
    ]);" 0 4 (fontified t) 4 7 (face font-lock-comment-delimiter-face fontified t) 7 84 (face font-lock-comment-face fontified t) 84 88 (fontified t) 88 91 (face font-lock-keyword-face fontified t) 91 92 (fontified t) 92 100 (face font-lock-variable-name-face fontified t) 100 102 (fontified t) 102 103 (face rust-ampersand-face fontified t) 103 104 (face (rainbow-delimiters-depth-2-face) fontified t) 104 110 (face font-lock-type-face fontified t) 110 111 (face (rainbow-delimiters-depth-2-face) fontified t) 111 126 (fontified t) 126 127 (face (rainbow-delimiters-depth-2-face) fontified t) 127 131 (face font-lock-preprocessor-face fontified t) 131 132 (face (rainbow-delimiters-depth-3-face) fontified t) 132 141 (fontified t) 141 142 (face (rainbow-delimiters-depth-4-face) fontified t) 142 150 (face font-lock-type-face fontified t) 150 151 (fontified t) 151 152 (face (rainbow-delimiters-depth-5-face) fontified t) 152 153 (fontified t) 153 154 (face font-lock-variable-name-face fontified t) 154 161 (fontified t) 161 162 (face font-lock-variable-name-face fontified t) 162 168 (fontified t) 168 169 (face (rainbow-delimiters-depth-5-face) fontified t) 169 171 (fontified t) 171 179 (face font-lock-type-face fontified t) 179 180 (fontified t) 180 181 (face (rainbow-delimiters-depth-5-face) fontified t) 181 182 (fontified t) 182 184 (face font-lock-variable-name-face fontified t) 184 191 (fontified t) 191 193 (face font-lock-variable-name-face fontified t) 193 199 (fontified t) 199 200 (face (rainbow-delimiters-depth-5-face) fontified t) 200 201 (face (rainbow-delimiters-depth-4-face) fontified t) 201 211 (fontified t) 211 212 (face (rainbow-delimiters-depth-4-face) fontified t) 212 220 (face font-lock-type-face fontified t) 220 221 (fontified t) 221 222 (face (rainbow-delimiters-depth-5-face) fontified t) 222 223 (fontified t) 223 224 (face font-lock-variable-name-face fontified t) 224 231 (fontified t) 231 232 (face font-lock-variable-name-face fontified t) 232 238 (fontified t) 238 239 (face (rainbow-delimiters-depth-5-face) fontified t) 239 241 (fontified t) 241 249 (face font-lock-type-face fontified t) 249 250 (fontified t) 250 251 (face (rainbow-delimiters-depth-5-face) fontified t) 251 252 (fontified t) 252 254 (face font-lock-variable-name-face fontified t) 254 261 (fontified t) 261 263 (face font-lock-variable-name-face fontified t) 263 269 (fontified t) 269 270 (face (rainbow-delimiters-depth-5-face) fontified t) 270 271 (face (rainbow-delimiters-depth-4-face) fontified t) 271 281 (fontified t) 281 282 (face (rainbow-delimiters-depth-4-face) fontified t) 282 290 (face font-lock-type-face fontified t) 290 291 (fontified t) 291 292 (face (rainbow-delimiters-depth-5-face) fontified t) 292 293 (fontified t) 293 294 (face font-lock-variable-name-face fontified t) 294 301 (fontified t) 301 302 (face font-lock-variable-name-face fontified t) 302 308 (fontified t) 308 309 (face (rainbow-delimiters-depth-5-face) fontified t) 309 311 (fontified t) 311 319 (face font-lock-type-face fontified t) 319 320 (fontified t) 320 321 (face (rainbow-delimiters-depth-5-face) fontified t) 321 322 (fontified t) 322 324 (face font-lock-variable-name-face fontified t) 324 331 (fontified t) 331 333 (face font-lock-variable-name-face fontified t) 333 339 (fontified t) 339 340 (face (rainbow-delimiters-depth-5-face) fontified t) 340 341 (face (rainbow-delimiters-depth-4-face) fontified t) 341 343 (fontified t) 343 347 (fontified t) 347 348 (face (rainbow-delimiters-depth-3-face) fontified t) 348 349 (face (rainbow-delimiters-depth-2-face) fontified t) 349 350 (fontified t rear-nonsticky t)) . 516) (undo-tree-id59 . -350) (undo-tree-id60 . -350) (undo-tree-id61 . -343) (undo-tree-id62 . -343) (undo-tree-id63 . -343) (undo-tree-id64 . -343) (undo-tree-id65 . -343) (undo-tree-id66 . -343) (undo-tree-id67 . -343) (undo-tree-id68 . -343) (undo-tree-id69 . -343) (undo-tree-id70 . -343) (undo-tree-id71 . -343) (undo-tree-id72 . -343) (undo-tree-id73 . -343) (undo-tree-id74 . -343) (undo-tree-id75 . -343) (undo-tree-id76 . -343) (undo-tree-id77 . -343) (undo-tree-id78 . -343) (undo-tree-id79 . -343) (undo-tree-id80 . -343) (undo-tree-id81 . -343) (undo-tree-id82 . -343) (undo-tree-id83 . -343) (undo-tree-id84 . -343) (undo-tree-id85 . -343) (undo-tree-id86 . -343) (undo-tree-id87 . -343) (undo-tree-id88 . -343) (undo-tree-id89 . -343) (undo-tree-id90 . -95) (undo-tree-id91 . -95) (undo-tree-id92 . -95) (undo-tree-id93 . -95) (undo-tree-id94 . -95) (undo-tree-id95 . -95) (undo-tree-id96 . -95) (undo-tree-id97 . -95) (undo-tree-id98 . -95) (undo-tree-id99 . -95) (undo-tree-id100 . -95) (undo-tree-id101 . -95) (undo-tree-id102 . -95) (undo-tree-id103 . -95) (undo-tree-id104 . -95) (undo-tree-id105 . -95) (undo-tree-id106 . -95) (undo-tree-id107 . -95) (undo-tree-id108 . -95) (undo-tree-id109 . -95) (undo-tree-id110 . -95) (undo-tree-id111 . -95) (undo-tree-id112 . -350) (undo-tree-id113 . -350) (undo-tree-id114 . -350) (undo-tree-id115 . -350) (undo-tree-id116 . -350) (undo-tree-id117 . -350) (undo-tree-id118 . -350) (undo-tree-id119 . -285) (undo-tree-id120 . -284) (undo-tree-id121 . -283) (undo-tree-id122 . -212) (undo-tree-id123 . -211) (undo-tree-id124 . -140) (undo-tree-id125 . -139) (undo-tree-id126 . -89) (undo-tree-id127 . -88) (undo-tree-id128 . -3) (undo-tree-id129 . -2) (undo-tree-id130 . -1) (undo-tree-id131 . -350) (undo-tree-id132 . -350) (t 26052 52814 223127 882000)) nil (26052 52825 480820 954000) 0 nil])
([nil nil ((667 . 671) (t 26052 52825 489795 229000)) nil (26052 52867 398162 828000) 0 nil])
([nil nil ((668 . 672) (#("    " 0 4 (fontified nil)) . 667) (undo-tree-id218 . -4) (undo-tree-id219 . -4) (undo-tree-id220 . -4) (undo-tree-id221 . -4) (undo-tree-id222 . -4) (undo-tree-id223 . -4) (undo-tree-id224 . -4) (undo-tree-id225 . -4) (undo-tree-id226 . -4) (undo-tree-id227 . -4) (671 . 672)) nil (26052 52867 398161 274000) 0 nil])
([nil nil ((667 . 671)) nil (26052 52867 397773 783000) 0 nil])
([nil nil ((671 . 684)) nil (26052 52867 397773 164000) 0 nil])
([nil nil ((683 . 688) (#("q" 0 1 (fontified nil)) . 683) (683 . 684) (#("query" 0 5 (fontified nil)) . -683) (683 . 688) (#("q" 0 1 (fontified t)) . -683) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) 684) nil (26052 52867 397771 686000) 0 nil])
([nil nil ((688 . 693)) nil (26052 52867 397766 295000) 0 nil])
([nil nil ((#("let query = query.coll" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 9 (face font-lock-variable-name-face fontified t) 9 12 (fontified t) 12 22 (fontified t)) . 671) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -2) (undo-tree-id139 . -2) (undo-tree-id140 . -3) (undo-tree-id141 . -3) (undo-tree-id142 . -4) (undo-tree-id143 . -4) (undo-tree-id144 . -4) (undo-tree-id145 . -4) (undo-tree-id146 . -4) (undo-tree-id147 . -4) (undo-tree-id148 . -4) (undo-tree-id149 . -4) (undo-tree-id150 . -4) (undo-tree-id151 . -4) (undo-tree-id152 . -5) (undo-tree-id153 . -5) (undo-tree-id154 . -6) (undo-tree-id155 . -6) (undo-tree-id156 . -7) (undo-tree-id157 . -7) (undo-tree-id158 . -8) (undo-tree-id159 . -8) (undo-tree-id160 . -9) (undo-tree-id161 . -9) (undo-tree-id162 . -9) (undo-tree-id163 . -9) (undo-tree-id164 . -10) (undo-tree-id165 . -10) (undo-tree-id166 . -10) (undo-tree-id167 . -10) (undo-tree-id168 . -10) (undo-tree-id169 . -10) (undo-tree-id170 . -10) (undo-tree-id171 . -10) (undo-tree-id172 . -10) (undo-tree-id173 . -10) (undo-tree-id174 . -11) (undo-tree-id175 . -11) (undo-tree-id176 . -11) (undo-tree-id177 . -12) (undo-tree-id178 . -12) (undo-tree-id179 . -12) (undo-tree-id180 . -12) (undo-tree-id181 . -12) (undo-tree-id182 . -12) (undo-tree-id183 . -12) (undo-tree-id184 . -12) (undo-tree-id185 . -12) (undo-tree-id186 . -12) (undo-tree-id187 . -12) (undo-tree-id188 . -17) (undo-tree-id189 . -17) (undo-tree-id190 . -17) (undo-tree-id191 . -18) (undo-tree-id192 . -18) (undo-tree-id193 . -18) (undo-tree-id194 . -19) (undo-tree-id195 . -19) (undo-tree-id196 . -19) (undo-tree-id197 . -20) (undo-tree-id198 . -20) (undo-tree-id199 . -20) (undo-tree-id200 . -20) (undo-tree-id201 . -21) (undo-tree-id202 . -21) (undo-tree-id203 . -22) (undo-tree-id204 . -22) (undo-tree-id205 . -22) (undo-tree-id206 . -22) (undo-tree-id207 . -22) (undo-tree-id208 . -22) (undo-tree-id209 . -22) (undo-tree-id210 . -22) (undo-tree-id211 . -22) (undo-tree-id212 . -22)) nil (26052 52867 397762 246000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 671) (undo-tree-id133 . 1) (undo-tree-id134 . 1) (undo-tree-id135 . -1)) nil (26052 52867 397708 604000) 0 nil])
([nil nil ((665 . 666) (t 26052 52867 406464 442000)) nil (26052 52909 619952 574000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -665) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) 666) nil (26052 52909 619948 588000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . 667) (undo-tree-id346 . -4) (671 . 672) (t 26052 52909 659800 333000)) nil (26052 52948 205980 387000) 0 nil])
([nil nil ((672 . 676)) nil (26052 52948 205978 925000) 0 nil])
([nil nil ((#("let " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . 672) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -2) (undo-tree-id332 . -2) (undo-tree-id333 . -3) (undo-tree-id334 . -3) (undo-tree-id335 . -4) (undo-tree-id336 . -4) (undo-tree-id337 . -4) (undo-tree-id338 . -4) (undo-tree-id339 . -4) (undo-tree-id340 . -4) (undo-tree-id341 . -4) (undo-tree-id342 . -4) (undo-tree-id343 . -4) (undo-tree-id344 . -4) (undo-tree-id345 . -4)) nil (26052 52948 205977 695000) 0 nil])
([nil nil ((#("in " 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t)) . -760) (undo-tree-id319 . -3) (undo-tree-id320 . -3) (undo-tree-id321 . -2) (undo-tree-id322 . -3) (undo-tree-id323 . -3) (undo-tree-id324 . -3) (undo-tree-id325 . -3) (undo-tree-id326 . -3) (undo-tree-id327 . -3) (undo-tree-id328 . -3) 763) nil (26052 52948 205965 120000) 0 nil])
([nil nil ((#("position " 0 8 (face font-lock-variable-name-face fontified t) 8 9 (fontified t)) . -751) (undo-tree-id306 . -9) (undo-tree-id307 . -9) (undo-tree-id308 . -8) (undo-tree-id309 . -9) (undo-tree-id310 . -9) (undo-tree-id311 . -9) (undo-tree-id312 . -9) (undo-tree-id313 . -9) (undo-tree-id314 . -9) (undo-tree-id315 . -9) (undo-tree-id316 . -9) (undo-tree-id317 . -9) (undo-tree-id318 . -9) 760) nil (26052 52948 205957 249000) 0 nil])
([nil nil ((#("for " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -747) (undo-tree-id290 . -4) (undo-tree-id291 . -4) (undo-tree-id292 . -3) (undo-tree-id293 . -4) (undo-tree-id294 . -4) (undo-tree-id295 . -4) (undo-tree-id296 . -4) (undo-tree-id297 . -4) (undo-tree-id298 . -4) (undo-tree-id299 . -4) (undo-tree-id300 . -4) (undo-tree-id301 . -4) (undo-tree-id302 . -4) (undo-tree-id303 . -4) (undo-tree-id304 . -4) (undo-tree-id305 . -4) 751) nil (26052 52948 205947 267000) 0 nil])
([nil nil ((#("{" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . 766) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1)) nil (26052 52948 205935 803000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 766) (undo-tree-id282 . -1)) nil (26052 52948 205924 203000) 0 nil])
([nil nil ((#("        println!(\"{:?}\", position);" 0 8 (fontified t) 8 16 (face rust-builtin-formatting-macro fontified t) 16 17 (face (rainbow-delimiters-depth-2-face) fontified t) 17 18 (face font-lock-string-face fontified t) 18 22 (face rust-string-interpolation fontified t) 22 23 (face font-lock-string-face fontified t) 23 33 (fontified t) 33 34 (face (rainbow-delimiters-depth-2-face) fontified t) 34 35 (fontified t)) . 766) (undo-tree-id281 . -35)) nil (26052 52948 205922 752000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 766) (undo-tree-id280 . -1)) nil (26052 52948 205921 429000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 773) (undo-tree-id278 . -1) (undo-tree-id279 . -1)) nil (26052 52948 205919 755000) 0 nil])
([nil nil ((#("     }" 0 1 (fontified t) 1 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-1-face) fontified t rear-nonsticky t)) . 765) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -6) (undo-tree-id272 . -5) (undo-tree-id273 . -4) (undo-tree-id274 . -3) (undo-tree-id275 . -2) (undo-tree-id276 . -1) (undo-tree-id277 . -6)) nil (26052 52948 205916 557000) 0 nil])
([nil nil ((765 . 768)) nil (26052 52948 205893 689000) 0 nil])
([nil nil ((apply yas--snippet-revive 766 775 #s(yas--snippet nil nil #s(yas--exit 775 nil) 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 775 nil) 0 nil nil nil nil)) (766 . 775) (#("collect()$0" 0 11 (fontified nil)) . 766) (766 . 777) (#("co" 0 2 (fontified nil)) . 766) (766 . 768) (#("collect() (as Iterator)" 0 23 (fontified nil)) . -766) (766 . 789) (#("co" 0 2 (fontified t)) . -766) (undo-tree-id236 . -2) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -2) (undo-tree-id243 . -2) (undo-tree-id244 . -2) (undo-tree-id245 . -2) 768) nil (26052 52948 205891 172000) 0 nil])
([nil nil ((754 . 755) (782 . 783) (747 . 747) (747 . 754)) nil (26052 52948 205875 486000) 0 nil])
([nil nil ((786 . 787) 784) nil (26052 52948 205870 702000) 0 nil])
([nil nil ((781 . 785) (t 26052 52948 216469 329000)) nil (26052 52957 30010 518000) 0 nil])
([nil nil ((784 . 787)) nil (26052 52957 30009 311000) 0 nil])
([nil nil ((apply yas--snippet-revive 784 789 #s(yas--snippet nil nil #s(yas--exit 788 nil) 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 788 nil) 1 nil nil nil nil)) (784 . 789) (#("Vec<$0>" 0 7 (fontified nil)) . 784) (784 . 791) (#("Vec" 0 3 (fontified nil)) . 784) (784 . 787) (#("Vec<…>" 0 6 (fontified nil)) . -784) (784 . 790) (#("Vec" 0 3 (face font-lock-type-face fontified t)) . -784) (undo-tree-id347 . -3) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -2) (undo-tree-id352 . -2) (undo-tree-id353 . -2) (undo-tree-id354 . -3) (undo-tree-id355 . -3) 787) nil (26052 52957 30006 253000) 0 nil])
([nil nil ((788 . 789)) nil (26052 52957 29986 903000) 0 nil])
([nil nil ((742 . 747) (t 26052 52957 63136 532000)) nil (26052 52993 557200 636000) 0 nil])
([nil nil ((747 . 755)) nil (26052 52993 557199 925000) 0 nil])
([nil nil ((#("m" 0 1 (face font-lock-variable-name-face fontified t)) . -753) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -754) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) 755) nil (26052 52993 557198 470000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -751) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (#("i" 0 1 (face font-lock-variable-name-face fontified t)) . -752) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) 753) nil (26052 52993 557028 637000) 0 nil])
([nil nil ((751 . 770)) nil (26052 52993 557007 494000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -769) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) 770) nil (26052 52993 557006 485000) 0 nil])
([nil nil ((769 . 774)) nil (26052 52993 557002 274000) 0 nil])
([nil nil ((773 . 780) (#("I" 0 1 (fontified nil)) . 773) (773 . 774) (#("Instant" 0 7 (fontified nil)) . -773) (773 . 780) (#("I" 0 1 (face font-lock-type-face fontified t)) . -773) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) 774) nil (26052 52993 557001 266000) 0 nil])
([nil nil ((780 . 783)) nil (26052 52993 556996 435000) 0 nil])
([nil nil ((apply yas--snippet-revive 782 787 #s(yas--snippet nil nil #s(yas--exit 787 nil) 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 787 nil) 2 nil nil nil nil)) (782 . 787) (#("now()$0" 0 7 (fontified nil)) . 782) (782 . 789) (#("n" 0 1 (fontified nil)) . 782) (782 . 783) (#("now()" 0 5 (fontified nil)) . -782) (782 . 787) (#("n" 0 1 (fontified t)) . -782) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) 783) nil (26052 52993 556995 251000) 0 nil])
([nil nil ((787 . 788)) nil (26052 52993 556990 143000) 0 nil])
([nil nil ((840 . 845)) nil (26052 52993 556989 621000) 0 nil])
([nil nil ((845 . 847)) nil (26052 52993 556989 10000) 0 nil])
([nil nil ((apply yas--snippet-revive 845 855 #s(yas--snippet nil nil #s(yas--exit 854 nil) 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 854 nil) 3 nil nil nil nil)) (845 . 855) (#("println!($0)" 0 12 (fontified nil)) . 845) (845 . 857) (#("pr" 0 2 (fontified nil)) . 845) (845 . 847) (#("println!(…)" 0 11 (fontified nil)) . -845) (845 . 856) (#("pr" 0 2 (fontified t)) . -845) (undo-tree-id425 . -2) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -2) (undo-tree-id429 . -2) (undo-tree-id430 . -2) (undo-tree-id431 . -2) 847) nil (26052 52993 556987 638000) 0 nil])
([nil nil ((854 . 856)) nil (26052 52993 556981 390000) 0 nil])
([nil nil ((855 . 858)) nil (26052 52993 556980 765000) 0 nil])
([nil nil ((#("o" 0 1 (face font-lock-string-face fontified t)) . -856) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (#("," 0 1 (face font-lock-string-face fontified t)) . -857) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) 858) nil (26052 52993 556979 301000) 0 nil])
([nil nil ((856 . 859)) nil (26052 52993 556966 341000) 0 nil])
([nil nil ((#("o" 0 1 (face font-lock-string-face fontified t)) . -856) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (#("m" 0 1 (face font-lock-string-face fontified t)) . -857) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -858) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) 859) nil (26052 52993 556964 284000) 0 nil])
([nil nil ((856 . 863)) nil (26052 52993 556943 58000) 0 nil])
([nil nil ((864 . 868)) nil (26052 52993 556942 546000) 0 nil])
([nil nil ((866 . 874) (#("in" 0 2 (fontified nil)) . 866) (866 . 868) (#("instance" 0 8 (fontified nil)) . -866) (866 . 874) (#("in" 0 2 (face font-lock-keyword-face fontified t)) . -866) (undo-tree-id361 . -2) (undo-tree-id362 . -2) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -2) (undo-tree-id368 . -2) (undo-tree-id369 . -2) (undo-tree-id370 . -2) 868) nil (26052 52993 556941 252000) 0 nil])
([nil nil ((874 . 875)) nil (26052 52993 556933 506000) 0 nil])
([nil nil ((875 . 876)) nil (26052 52993 556932 881000) 0 nil])
([nil nil ((apply yas--snippet-revive 875 884 #s(yas--snippet nil nil #s(yas--exit 884 nil) 4 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 884 nil) 4 nil nil nil nil)) (875 . 884) (#("elapsed()$0" 0 11 (fontified nil)) . 875) (875 . 886) (#("e" 0 1 (fontified nil)) . 875) (875 . 876) (#("elapsed()" 0 9 (fontified nil)) . -875) (875 . 884) (#("e" 0 1 (fontified t)) . -875) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) 876) nil (26052 52993 556931 313000) 0 nil])
([nil nil ((884 . 885)) nil (26052 52993 556921 166000) 0 nil])
([nil nil ((apply yas--snippet-revive 885 896 #s(yas--snippet nil nil #s(yas--exit 896 nil) 5 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 896 nil) 5 nil nil nil nil)) (885 . 896) (#("as_millis()$0" 0 13 (fontified nil)) . 885) (885 . 898) (#("as_millis()" 0 11 (fontified nil)) . -885) (885 . 896)) nil (26052 52993 556919 554000) 0 nil])
([nil nil ((897 . 898)) nil (26052 52993 556917 413000) 0 nil])
([nil nil ((863 . 865)) nil (26052 52993 556913 57000) 0 nil])
([nil nil ((#("        dx: f32,
        dy: f32," 0 8 (fontified t) 8 10 (face font-lock-variable-name-face fontified t) 10 12 (fontified t) 12 15 (face font-lock-type-face fontified t) 15 25 (fontified t) 25 27 (face font-lock-variable-name-face fontified t) 27 29 (fontified t) 29 32 (face font-lock-type-face fontified t) 32 33 (fontified t)) . 310) (undo-tree-id515 . -33) (undo-tree-id516 . -33) (undo-tree-id517 . -33) (undo-tree-id518 . -33) (undo-tree-id519 . -32) (undo-tree-id520 . -31) (undo-tree-id521 . -30) (undo-tree-id522 . -29) (undo-tree-id523 . -27) (undo-tree-id524 . -9) (undo-tree-id525 . -8) (undo-tree-id526 . -7) (undo-tree-id527 . -6) (undo-tree-id528 . -5) (undo-tree-id529 . -4) (undo-tree-id530 . -3) (undo-tree-id531 . -2) (undo-tree-id532 . -1) (undo-tree-id533 . -33) (undo-tree-id534 . -33) (t 26052 52993 566472 66000)) nil (26052 53010 570413 34000) 0 nil])
([nil nil ((#("        x: f32,
        y: f32," 0 8 (fontified t) 8 9 (face font-lock-variable-name-face fontified t) 9 11 (fontified t) 11 14 (face font-lock-type-face fontified t) 14 24 (fontified t) 24 25 (face font-lock-variable-name-face fontified t) 25 27 (fontified t) 27 30 (face font-lock-type-face fontified t) 30 31 (fontified t)) . 204) (undo-tree-id495 . -31) (undo-tree-id496 . -31) (undo-tree-id497 . -31) (undo-tree-id498 . -31) (undo-tree-id499 . -30) (undo-tree-id500 . -28) (undo-tree-id501 . -10) (undo-tree-id502 . -9) (undo-tree-id503 . -8) (undo-tree-id504 . -7) (undo-tree-id505 . -6) (undo-tree-id506 . -5) (undo-tree-id507 . -4) (undo-tree-id508 . -3) (undo-tree-id509 . -2) (undo-tree-id510 . -2) (undo-tree-id511 . -2) (undo-tree-id512 . -1) (undo-tree-id513 . -31) (undo-tree-id514 . -31)) nil (26052 53010 570069 388000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -413) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) 414 (t 26052 53010 579806 426000)) nil (26052 53018 237299 440000) 0 nil])
([nil nil ((#("0." 0 2 (fontified t)) . -411) (undo-tree-id708 . -2) (undo-tree-id709 . -2) (undo-tree-id710 . -2) (undo-tree-id711 . -2) (undo-tree-id712 . -2) (undo-tree-id713 . -2) (undo-tree-id714 . -2) (undo-tree-id715 . -2) (undo-tree-id716 . -2) (undo-tree-id717 . -2) (undo-tree-id718 . -2) (undo-tree-id719 . -2) (undo-tree-id720 . -2) (undo-tree-id721 . -2) (undo-tree-id722 . -2) (undo-tree-id723 . -2) (undo-tree-id724 . -2) 413) nil (26052 53018 237288 621000) 0 nil])
([nil nil ((#("y: " 0 1 (face font-lock-variable-name-face fontified t) 1 3 (fontified t)) . -408) (undo-tree-id689 . -3) (undo-tree-id690 . -3) (undo-tree-id691 . -3) (undo-tree-id692 . -3) (undo-tree-id693 . -3) (undo-tree-id694 . -3) (undo-tree-id695 . -3) (undo-tree-id696 . -3) (undo-tree-id697 . -3) (undo-tree-id698 . -3) (undo-tree-id699 . -3) (undo-tree-id700 . -3) (undo-tree-id701 . -3) (undo-tree-id702 . -3) (undo-tree-id703 . -3) (undo-tree-id704 . -3) (undo-tree-id705 . -3) (undo-tree-id706 . -3) (undo-tree-id707 . -3) 411) nil (26052 53018 237277 252000) 0 nil])
([nil nil ((#("0, " 0 3 (fontified t)) . -405) (undo-tree-id668 . -3) (undo-tree-id669 . -3) (undo-tree-id670 . -3) (undo-tree-id671 . -3) (undo-tree-id672 . -3) (undo-tree-id673 . -3) (undo-tree-id674 . -3) (undo-tree-id675 . -3) (undo-tree-id676 . -3) (undo-tree-id677 . -3) (undo-tree-id678 . -3) (undo-tree-id679 . -3) (undo-tree-id680 . -3) (undo-tree-id681 . -3) (undo-tree-id682 . -3) (undo-tree-id683 . -3) (undo-tree-id684 . -3) (undo-tree-id685 . -3) (undo-tree-id686 . -3) (undo-tree-id687 . -3) (undo-tree-id688 . -3) 408) nil (26052 53018 237255 330000) 0 nil])
([nil nil ((#("0." 0 2 (fontified t)) . -403) (undo-tree-id645 . -2) (undo-tree-id646 . -2) (undo-tree-id647 . -2) (undo-tree-id648 . -2) (undo-tree-id649 . -2) (undo-tree-id650 . -2) (undo-tree-id651 . -2) (undo-tree-id652 . -2) (undo-tree-id653 . -2) (undo-tree-id654 . -2) (undo-tree-id655 . -2) (undo-tree-id656 . -2) (undo-tree-id657 . -2) (undo-tree-id658 . -2) (undo-tree-id659 . -2) (undo-tree-id660 . -2) (undo-tree-id661 . -2) (undo-tree-id662 . -2) (undo-tree-id663 . -2) (undo-tree-id664 . -2) (undo-tree-id665 . -2) (undo-tree-id666 . -2) (undo-tree-id667 . -2) 405) nil (26052 53018 237240 630000) 0 nil])
([nil nil ((#("x: " 0 1 (face font-lock-variable-name-face fontified t) 1 3 (fontified t)) . -400) (undo-tree-id618 . -3) (undo-tree-id619 . -3) (undo-tree-id620 . -3) (undo-tree-id621 . -3) (undo-tree-id622 . -3) (undo-tree-id623 . -3) (undo-tree-id624 . -3) (undo-tree-id625 . -3) (undo-tree-id626 . -3) (undo-tree-id627 . -3) (undo-tree-id628 . -3) (undo-tree-id629 . -3) (undo-tree-id630 . -3) (undo-tree-id631 . -3) (undo-tree-id632 . -3) (undo-tree-id633 . -3) (undo-tree-id634 . -3) (undo-tree-id635 . -3) (undo-tree-id636 . -3) (undo-tree-id637 . -3) (undo-tree-id638 . -3) (undo-tree-id639 . -3) (undo-tree-id640 . -3) (undo-tree-id641 . -3) (undo-tree-id642 . -3) (undo-tree-id643 . -3) (undo-tree-id644 . -3) 403) nil (26052 53018 237140 324000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -430) (undo-tree-id616 . -1) (undo-tree-id617 . -1) 431) nil (26052 53018 237122 984000) 0 nil])
([nil nil ((#("0." 0 2 (fontified t)) . -428) (undo-tree-id611 . -2) (undo-tree-id612 . -1) (undo-tree-id613 . -2) (undo-tree-id614 . -2) (undo-tree-id615 . -2) 430) nil (26052 53018 237120 828000) 0 nil])
([nil nil ((#("dy: " 0 2 (face font-lock-variable-name-face fontified t) 2 4 (fontified t)) . -424) (undo-tree-id603 . -4) (undo-tree-id604 . -2) (undo-tree-id605 . -4) (undo-tree-id606 . -4) (undo-tree-id607 . -4) (undo-tree-id608 . -4) (undo-tree-id609 . -4) (undo-tree-id610 . -4) 428) nil (26052 53018 237116 812000) 0 nil])
([nil nil ((#("0, " 0 3 (fontified t)) . -421) (undo-tree-id592 . -3) (undo-tree-id593 . -1) (undo-tree-id594 . -3) (undo-tree-id595 . -3) (undo-tree-id596 . -3) (undo-tree-id597 . -3) (undo-tree-id598 . -3) (undo-tree-id599 . -3) (undo-tree-id600 . -3) (undo-tree-id601 . -3) (undo-tree-id602 . -3) 424) nil (26052 53018 237110 627000) 0 nil])
([nil nil ((#("0." 0 2 (fontified t)) . -419) (undo-tree-id578 . -2) (undo-tree-id579 . -1) (undo-tree-id580 . -2) (undo-tree-id581 . -2) (undo-tree-id582 . -2) (undo-tree-id583 . -2) (undo-tree-id584 . -2) (undo-tree-id585 . -2) (undo-tree-id586 . -2) (undo-tree-id587 . -2) (undo-tree-id588 . -2) (undo-tree-id589 . -2) (undo-tree-id590 . -2) (undo-tree-id591 . -2) 421) nil (26052 53018 237101 338000) 0 nil])
([nil nil ((#("dx: " 0 2 (face font-lock-variable-name-face fontified t) 2 4 (fontified t)) . -415) (undo-tree-id561 . -4) (undo-tree-id562 . -2) (undo-tree-id563 . -4) (undo-tree-id564 . -4) (undo-tree-id565 . -4) (undo-tree-id566 . -4) (undo-tree-id567 . -4) (undo-tree-id568 . -4) (undo-tree-id569 . -4) (undo-tree-id570 . -4) (undo-tree-id571 . -4) (undo-tree-id572 . -4) (undo-tree-id573 . -4) (undo-tree-id574 . -4) (undo-tree-id575 . -4) (undo-tree-id576 . -4) (undo-tree-id577 . -4) 419) nil (26052 53018 236934 83000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -414) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) 415) nil (26052 53018 236919 798000) 0 nil])
([nil nil ((#("Entity = " 0 6 (face font-lock-type-face fontified t) 6 9 (fontified t)) . -368) (undo-tree-id916 . -9) (undo-tree-id917 . -9) (undo-tree-id918 . -9) (undo-tree-id919 . -9) (undo-tree-id920 . -9) 377 (t 26052 53018 246473 560000)) nil (26052 53042 492626 144000) 0 nil])
([nil nil ((#("entity: " 0 6 (face font-lock-variable-name-face fontified nil) 6 8 (fontified nil)) . -360) (undo-tree-id910 . -8) (undo-tree-id911 . -8) (undo-tree-id912 . -3) (undo-tree-id913 . -8) (undo-tree-id914 . -8) (undo-tree-id915 . -8) 368) nil (26052 53042 492621 552000) 0 nil])
([nil nil ((#("let " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -356) (undo-tree-id895 . -4) (undo-tree-id896 . -4) (undo-tree-id897 . -4) (undo-tree-id898 . -4) (undo-tree-id899 . -4) (undo-tree-id900 . -4) (undo-tree-id901 . -4) (undo-tree-id902 . -4) (undo-tree-id903 . -4) (undo-tree-id904 . -4) (undo-tree-id905 . -4) (undo-tree-id906 . -4) (undo-tree-id907 . -4) (undo-tree-id908 . -4) (undo-tree-id909 . -4) 360) nil (26052 53042 492616 799000) 0 nil])
([nil nil ((353 . 357) (#("    " 0 4 (fontified nil)) . 352) (undo-tree-id871 . -4) (undo-tree-id872 . -4) (undo-tree-id873 . -4) (undo-tree-id874 . -4) (undo-tree-id875 . -4) (undo-tree-id876 . -4) (undo-tree-id877 . -4) (undo-tree-id878 . -4) (undo-tree-id879 . -4) (undo-tree-id880 . -4) (undo-tree-id881 . -4) (undo-tree-id882 . -4) (undo-tree-id883 . -4) (undo-tree-id884 . -4) (undo-tree-id885 . -4) (undo-tree-id886 . -4) (undo-tree-id887 . -4) (undo-tree-id888 . -4) (undo-tree-id889 . -4) (undo-tree-id890 . -4) (undo-tree-id891 . -4) (undo-tree-id892 . -4) (undo-tree-id893 . -4) (undo-tree-id894 . -4) (356 . 357)) nil (26052 53042 492606 103000) 0 nil])
([nil nil ((352 . 356)) nil (26052 53042 492577 463000) 0 nil])
([nil nil ((356 . 366)) nil (26052 53042 492576 991000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -363) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (#("n" 0 1 (fontified t)) . -364) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (#(" " 0 1 (fontified t)) . -365) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) 366) nil (26052 53042 492575 447000) 0 nil])
([nil nil ((363 . 365)) nil (26052 53042 492560 347000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -363) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (#("n" 0 1 (fontified t)) . -364) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) 365) nil (26052 53504 562523 302000) 0 nil])
([nil nil ((363 . 368)) ((#("n 0.." 0 1 (face font-lock-keyword-face fontified t) 1 5 (fontified t)) . 363) (undo-tree-id3629 . -5) (undo-tree-id3630 . -5) (undo-tree-id3631 . -5) (undo-tree-id3632 . -5) (undo-tree-id3633 . -5)) (26052 53504 839835 466000) 0 nil])
([nil nil ((368 . 370)) ((#("!_" 0 1 (fontified t) 1 2 (fontified t)) . 368) (undo-tree-id3627 . -2) (undo-tree-id3628 . -2)) (26052 53505 500111 245000) 0 nil])
([nil nil ((#("!_" 0 1 (fontified t) 1 2 (fontified t)) . 368)) ((368 . 370)) (26052 53505 531080 803000) 0 nil])
([nil nil ((368 . 380)) ((#("1_000_000 {}" 0 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-2-face) fontified t) 11 12 (face (rainbow-delimiters-depth-2-face) fontified t)) . 368) (undo-tree-id3622 . -11) (undo-tree-id3623 . -11) (undo-tree-id3624 . -11) (undo-tree-id3625 . -11) (undo-tree-id3626 . -11)) (26052 53505 573330 184000) 0 nil])
([nil nil ((381 . 385) (#("        " 0 8 (fontified nil)) . 380) (380 . 388) (#("    " 0 4 (fontified nil)) . 380) (379 . 385)) ((#("
    
" 0 1 (fontified t) 1 5 (fontified nil) 5 6 (fontified nil)) . 379) (undo-tree-id3619 . -1) (undo-tree-id3620 . -1) (undo-tree-id3621 . -1) (380 . 384) (#("        " 0 8 (fontified nil)) . 380) (380 . 388) (#("    " 0 4 (fontified t)) . 381)) (26052 53505 624966 512000) 0 nil])
([nil nil ((#("    world.push((Position {  }, Velocity { }));" 0 4 (fontified t) 4 9 (fontified t) 9 14 (fontified t) 14 15 (face (rainbow-delimiters-depth-2-face) fontified t) 15 16 (face (rainbow-delimiters-depth-3-face) fontified t) 16 24 (face font-lock-type-face fontified t) 24 25 (fontified t) 25 26 (face (rainbow-delimiters-depth-4-face) fontified t) 26 27 (fontified t) 27 28 (fontified t) 28 29 (face (rainbow-delimiters-depth-4-face) fontified t) 29 31 (fontified t) 31 39 (face font-lock-type-face fontified t) 39 40 (fontified t) 40 41 (face (rainbow-delimiters-depth-4-face) fontified t) 41 42 (fontified t) 42 43 (face (rainbow-delimiters-depth-4-face) fontified t) 43 44 (face (rainbow-delimiters-depth-3-face) fontified t) 44 45 (face (rainbow-delimiters-depth-2-face) fontified t) 45 46 (fontified t)) . 387) (undo-tree-id3634 . -27)) ((387 . 433)) (26052 53505 657954 114000) 0 nil])
([nil nil ((nil rear-nonsticky nil 425 . 426) (380 . 426)) ((#("    world.push((Position {  }, Velocity { }));" 0 4 (fontified nil) 4 9 (fontified nil) 9 14 (fontified nil) 14 15 (face (rainbow-delimiters-depth-3-face) fontified nil) 15 16 (face (rainbow-delimiters-depth-4-face) fontified nil) 16 24 (face font-lock-type-face fontified nil) 24 25 (fontified nil) 25 26 (face (rainbow-delimiters-depth-5-face) fontified nil) 26 27 (fontified nil) 27 28 (fontified nil) 28 29 (face (rainbow-delimiters-depth-5-face) fontified nil) 29 31 (fontified nil) 31 39 (face font-lock-type-face fontified nil) 39 40 (fontified nil) 40 41 (face (rainbow-delimiters-depth-5-face) fontified nil) 41 42 (fontified nil) 42 43 (face (rainbow-delimiters-depth-5-face) fontified nil) 43 44 (face (rainbow-delimiters-depth-4-face) fontified nil) 44 45 (face (rainbow-delimiters-depth-3-face) fontified nil) 45 46 (rear-nonsticky nil fontified nil)) . 380) (undo-tree-id3616 . -46) (undo-tree-id3617 . -46) (undo-tree-id3618 . -46) (nil rear-nonsticky t 425 . 426)) (26052 53510 259986 849000) 0 nil])
([nil nil ((380 . 388) (#("    " 0 4 (fontified t)) . 380)) ((380 . 384) (#("        " 0 8 (fontified t)) . 380)) (26052 53510 701710 317000) 0 nil])
([nil nil ((#("iter" 0 4 (fontified t)) . 730) (undo-tree-id3642 . -4)) ((730 . 734)) (26052 53511 250151 823000) 0 nil])
([nil nil ((730 . 731) (t 26052 53515 973170 321000)) nil (26052 53533 217874 135000) 0 nil] [nil nil ((730 . 731)) ((#(" " 0 1 (fontified t)) . 730)) (26052 53508 951053 505000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -730) (undo-tree-id3643 . -1) (undo-tree-id3644 . -1) (undo-tree-id3645 . -1) (undo-tree-id3646 . -1) (undo-tree-id3647 . -1) (undo-tree-id3648 . -1) (undo-tree-id3649 . -1) 731) nil (26052 53533 217871 703000) 0 nil])
([nil nil ((730 . 731)) ((#("o" 0 1 (fontified t)) . 730)) (26052 53508 910145 284000) 0 nil])
([nil current ((730 . 734)) nil (26052 53533 217857 679000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 730)) ((730 . 731)) (26052 53508 871923 151000) 0 nil])
nil
([nil nil ((730 . 731)) ((#("p" 0 1 (fontified t)) . 730)) (26052 53508 829157 860000) 0 nil])
([nil nil ((730 . 738) (#("p" 0 1 (fontified nil)) . 730) (730 . 731) (#("par_iter" 0 8 (fontified nil)) . 730) (730 . 738) (#("p" 0 1 (fontified t)) . 730)) ((730 . 731) (#("par_iter" 0 8 (fontified nil)) . 730) (730 . 738) (#("p" 0 1 (fontified nil)) . 730) (730 . 731) (#("par_iter" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 8 (fontified t)) . 730) (undo-tree-id3640 . -8) (undo-tree-id3641 . -8)) (26052 53508 790134 142000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 738)) ((738 . 739)) (26052 53508 746417 776000) 0 nil])
([nil nil ((746 . 747)) ((#(" " 0 1 (fontified t)) . 746)) (26052 53508 710148 489000) 0 nil])
([nil nil ((746 . 748)) ((#(".c" 0 1 (fontified t) 1 2 (fontified t)) . 746) (undo-tree-id3638 . -1) (undo-tree-id3639 . -1)) (26052 53508 671392 476000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . 747)) ((747 . 748)) (26052 53508 9604 548000) 0 nil])
([nil nil ((#(". " 0 1 (fontified t) 1 2 (fontified t)) . 746) (undo-tree-id3636 . -1) (undo-tree-id3637 . -1)) ((746 . 748)) (26052 53507 681981 203000) 0 nil])
([nil nil ((#(".collect::<Vec<_>>();" 0 1 (fontified t) 1 8 (fontified t) 8 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-2-face) fontified t) 11 14 (face font-lock-type-face fontified t) 14 15 (face (rainbow-delimiters-depth-3-face) fontified t) 15 16 (fontified t) 16 17 (face (rainbow-delimiters-depth-3-face) fontified t) 17 18 (face (rainbow-delimiters-depth-2-face) fontified t) 18 19 (face (rainbow-delimiters-depth-2-face) fontified t) 19 20 (face (rainbow-delimiters-depth-2-face) fontified t) 20 21 (fontified t)) . 746) (undo-tree-id1226 . -21) (t 26052 53110 106479 129000)) ((746 . 767)) (26052 53503 749162 792000) 0 nil])
([nil nil ((746 . 749)) ((#("for" 0 1 (face font-lock-keyword-face fontified t) 1 2 (face font-lock-keyword-face fontified t) 2 3 (face font-lock-keyword-face fontified t)) . 746) (undo-tree-id3608 . -3) (undo-tree-id3609 . -3)) (26052 53503 712158 708000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -746) (undo-tree-id1207 . -1) (undo-tree-id1209 . -1) (undo-tree-id1211 . -1) (undo-tree-id1213 . -1) (undo-tree-id1215 . -1) (#("o" 0 1 (fontified t)) . -747) (undo-tree-id1217 . -1) (undo-tree-id1219 . -1) (undo-tree-id1221 . -1) (#("r" 0 1 (face font-lock-keyword-face fontified t)) . -748) (undo-tree-id1222 . -1) (undo-tree-id1224 . -1) 749) ((746 . 749)) (26052 53503 668368 605000) 0 nil])
([nil nil ((746 . 748)) ((#(".f" 0 1 (fontified t) 1 2 (fontified t)) . 746) (undo-tree-id3606 . -2) (undo-tree-id3607 . -2)) (26052 53503 631409 296000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -746) (undo-tree-id1193 . -1) (undo-tree-id1195 . -1) (undo-tree-id1197 . -1) (undo-tree-id1199 . -1) (undo-tree-id1201 . -1) (#("f" 0 1 (fontified t)) . -747) (undo-tree-id1203 . -1) (undo-tree-id1205 . -1) 748) ((746 . 748)) (26052 53503 590316 948000) 0 nil])
([nil nil ((746 . 747)) ((#("." 0 1 (fontified t)) . 746) (undo-tree-id3604 . -1) (undo-tree-id3605 . -1)) (26052 53503 552061 557000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -746) (undo-tree-id1187 . -1) (undo-tree-id1189 . -1) (undo-tree-id1191 . -1) 747) ((746 . 747)) (26052 53503 511482 494000) 0 nil])
([nil nil ((746 . 747)) ((#("." 0 1 (fontified t)) . 746) (undo-tree-id3602 . -1) (undo-tree-id3603 . -1)) (26052 53503 466334 951000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -746) (undo-tree-id1180 . -1) (undo-tree-id1182 . -1) (undo-tree-id1184 . -1) (undo-tree-id1186 . -1) 747) ((746 . 747)) (26052 53503 430590 677000) 0 nil])
([nil nil ((#("iter" 0 4 (fontified t)) . -734) (undo-tree-id1169 . -4) (undo-tree-id1170 . -4) (undo-tree-id1172 . -4) (undo-tree-id1174 . -4) (undo-tree-id1176 . -4) (undo-tree-id1178 . -4) 738) ((734 . 738)) (26052 53503 388498 341000) 0 nil])
([nil nil ((734 . 735)) ((#(" " 0 1 (fontified t)) . 734)) (26052 53503 347791 795000) 0 nil])
([nil nil ((734 . 735)) ((#("i" 0 1 (fontified t)) . 734) (undo-tree-id3600 . -1) (undo-tree-id3601 . -1)) (26052 53503 311637 720000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -730) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1006 . -1) (undo-tree-id1008 . -1) (undo-tree-id1010 . -1) (undo-tree-id1012 . -1) (undo-tree-id1014 . -1) (undo-tree-id1016 . -1) (undo-tree-id1018 . -1) (undo-tree-id1020 . -1) (undo-tree-id1022 . -1) (undo-tree-id1024 . -1) (undo-tree-id1026 . -1) (undo-tree-id1028 . -1) (undo-tree-id1030 . -1) (undo-tree-id1032 . -1) (undo-tree-id1034 . -1) (undo-tree-id1036 . -1) (undo-tree-id1038 . -1) (undo-tree-id1040 . -1) (undo-tree-id1042 . -1) (#("a" 0 1 (fontified t)) . -731) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1047 . -1) (undo-tree-id1049 . -1) (undo-tree-id1051 . -1) (undo-tree-id1053 . -1) (undo-tree-id1055 . -1) (undo-tree-id1057 . -1) (undo-tree-id1059 . -1) (undo-tree-id1061 . -1) (undo-tree-id1063 . -1) (undo-tree-id1065 . -1) (undo-tree-id1067 . -1) (undo-tree-id1069 . -1) (undo-tree-id1071 . -1) (undo-tree-id1073 . -1) (undo-tree-id1075 . -1) (undo-tree-id1077 . -1) (undo-tree-id1079 . -1) (undo-tree-id1081 . -1) (undo-tree-id1083 . -1) (#("r" 0 1 (fontified t)) . -732) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1087 . -1) (undo-tree-id1089 . -1) (undo-tree-id1091 . -1) (undo-tree-id1093 . -1) (undo-tree-id1095 . -1) (undo-tree-id1097 . -1) (undo-tree-id1099 . -1) (undo-tree-id1101 . -1) (undo-tree-id1103 . -1) (undo-tree-id1105 . -1) (undo-tree-id1107 . -1) (undo-tree-id1109 . -1) (undo-tree-id1111 . -1) (undo-tree-id1113 . -1) (undo-tree-id1115 . -1) (undo-tree-id1117 . -1) (undo-tree-id1119 . -1) (undo-tree-id1121 . -1) (#("_" 0 1 (fontified t)) . -733) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1126 . -1) (undo-tree-id1128 . -1) (undo-tree-id1130 . -1) (undo-tree-id1132 . -1) (undo-tree-id1134 . -1) (undo-tree-id1136 . -1) (undo-tree-id1138 . -1) (undo-tree-id1140 . -1) (undo-tree-id1142 . -1) (undo-tree-id1144 . -1) (undo-tree-id1146 . -1) (undo-tree-id1148 . -1) (undo-tree-id1150 . -1) (undo-tree-id1152 . -1) (undo-tree-id1154 . -1) (undo-tree-id1156 . -1) (undo-tree-id1158 . -1) (undo-tree-id1160 . -1) (#("i" 0 1 (fontified t)) . -734) (undo-tree-id1161 . -1) (undo-tree-id1163 . -1) (undo-tree-id1165 . -1) (undo-tree-id1167 . -1) 735) ((730 . 735)) (26052 53503 268223 350000) 0 nil])
([nil nil ((730 . 732)) ((#("in" 0 2 (face font-lock-keyword-face fontified t)) . 730) (undo-tree-id3598 . -2) (undo-tree-id3599 . -2)) (26052 53503 226930 484000) 0 nil])
([nil nil ((730 . 744) (#("in" 0 2 (fontified nil)) . 730) (730 . 732) (#("iter_unchecked" 0 14 (fontified nil)) . -730) (730 . 744) (#("in" 0 2 (face font-lock-keyword-face fontified t)) . -730) (undo-tree-id992 . -2) (undo-tree-id993 . -2) (undo-tree-id995 . -2) (undo-tree-id997 . -2) (undo-tree-id999 . -2) (undo-tree-id1001 . -2) 732) ((730 . 732) (#("iter_unchecked" 0 14 (fontified nil)) . 730) (730 . 744) (#("in" 0 2 (fontified nil)) . 730) (730 . 732) (#("iter_unchecked" 0 14 (fontified t)) . 730)) (26052 53503 190351 479000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -744) (undo-tree-id988 . -1) (undo-tree-id990 . -1) 745) ((744 . 745)) (26052 53503 146252 913000) 0 nil])
([nil nil ((752 . 753) (t 26052 53155 563148 533000)) ((#(";" 0 1 (fontified t)) . 752)) (26052 53503 107665 793000) 0 nil])
([nil nil ((#("let _ = query.iter_unchecked(&world);" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 5 (face font-lock-variable-name-face fontified t) 5 8 (fontified t) 8 13 (fontified t) 13 14 (fontified t) 14 28 (fontified t) 28 29 (face (rainbow-delimiters-depth-2-face) fontified t) 29 30 (face rust-ampersand-face fontified t) 30 35 (fontified t) 35 36 (face (rainbow-delimiters-depth-2-face) fontified t) 36 37 (fontified t)) . 716) (undo-tree-id1311 . -14) (undo-tree-id1313 . -37) (undo-tree-id1315 . -37) (undo-tree-id1317 . -37) (undo-tree-id1319 . -37) (undo-tree-id1321 . -37) (undo-tree-id1323 . -30) (undo-tree-id1325 . -30) (undo-tree-id1327 . -30) (undo-tree-id1329 . -30) (undo-tree-id1331 . -30) (undo-tree-id1333 . -28) (undo-tree-id1335 . -28) (undo-tree-id1337 . -28) (undo-tree-id1339 . -28) (t 26052 53158 213148 692000)) ((716 . 753)) (26052 53503 64072 84000) 0 nil])
([nil nil ((716 . 718)) ((#("qu" 0 2 (fontified t)) . 716) (undo-tree-id3596 . -2) (undo-tree-id3597 . -2)) (26052 53503 36588 761000) 0 nil])
([nil nil ((716 . 721) (#("qu" 0 2 (fontified nil)) . 716) (716 . 718) (#("query" 0 5 (fontified nil)) . -716) (716 . 721) (#("qu" 0 2 (fontified t)) . -716) (undo-tree-id1298 . -2) (undo-tree-id1299 . -2) (undo-tree-id1301 . -1) (undo-tree-id1303 . -2) (undo-tree-id1305 . -2) (undo-tree-id1307 . -2) (undo-tree-id1309 . -2) 718) ((716 . 718) (#("query" 0 5 (fontified nil)) . 716) (716 . 721) (#("qu" 0 2 (fontified nil)) . 716) (716 . 718) (#("query" 0 5 (fontified t)) . 716) (undo-tree-id3550 . -5) (undo-tree-id3551 . -5) (undo-tree-id3552 . -5) (undo-tree-id3553 . -5) (undo-tree-id3554 . -5) (undo-tree-id3555 . -5) (undo-tree-id3556 . -5) (undo-tree-id3557 . -5) (undo-tree-id3558 . -5) (undo-tree-id3559 . -5) (undo-tree-id3560 . -5) (undo-tree-id3561 . -5) (undo-tree-id3562 . -5) (undo-tree-id3563 . -5) (undo-tree-id3564 . -5) (undo-tree-id3565 . -5) (undo-tree-id3566 . -5) (undo-tree-id3567 . -5) (undo-tree-id3568 . -5) (undo-tree-id3569 . -5) (undo-tree-id3570 . -5) (undo-tree-id3571 . -5) (undo-tree-id3572 . -5) (undo-tree-id3573 . -5) (undo-tree-id3574 . -5) (undo-tree-id3575 . -5) (undo-tree-id3576 . -5) (undo-tree-id3577 . -5) (undo-tree-id3578 . -5) (undo-tree-id3579 . -5) (undo-tree-id3580 . -5) (undo-tree-id3581 . -5) (undo-tree-id3582 . -5) (undo-tree-id3583 . -5) (undo-tree-id3584 . -5) (undo-tree-id3585 . -5) (undo-tree-id3586 . -5) (undo-tree-id3587 . -5) (undo-tree-id3588 . -5) (undo-tree-id3589 . -5) (undo-tree-id3590 . -5) (undo-tree-id3591 . -5) (undo-tree-id3592 . -5) (undo-tree-id3593 . -5) (undo-tree-id3594 . -5) (undo-tree-id3595 . -5)) (26052 53502 981446 644000) 0 nil])
([nil nil ((721 . 726)) ((#(".iter" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . 721) (undo-tree-id3504 . -5) (undo-tree-id3505 . -5) (undo-tree-id3506 . -1) (undo-tree-id3507 . -1) (undo-tree-id3508 . -1) (undo-tree-id3509 . -1) (undo-tree-id3510 . -1) (undo-tree-id3511 . -1) (undo-tree-id3512 . -1) (undo-tree-id3513 . -1) (undo-tree-id3514 . -1) (undo-tree-id3515 . -1) (undo-tree-id3516 . -1) (undo-tree-id3517 . -1) (undo-tree-id3518 . -1) (undo-tree-id3519 . -1) (undo-tree-id3520 . -1) (undo-tree-id3521 . -1) (undo-tree-id3522 . -1) (undo-tree-id3523 . -1) (undo-tree-id3524 . -1) (undo-tree-id3525 . -1) (undo-tree-id3526 . -1) (undo-tree-id3527 . -1) (undo-tree-id3528 . -1) (undo-tree-id3529 . -1) (undo-tree-id3530 . -1) (undo-tree-id3531 . -1) (undo-tree-id3532 . -1) (undo-tree-id3533 . -1) (undo-tree-id3534 . -1) (undo-tree-id3535 . -1) (undo-tree-id3536 . -1) (undo-tree-id3537 . -1) (undo-tree-id3538 . -1) (undo-tree-id3539 . -1) (undo-tree-id3540 . -1) (undo-tree-id3541 . -1) (undo-tree-id3542 . -1) (undo-tree-id3543 . -1) (undo-tree-id3544 . -1) (undo-tree-id3545 . -1) (undo-tree-id3546 . -1) (undo-tree-id3547 . -1) (undo-tree-id3548 . -1) (undo-tree-id3549 . -1)) (26052 53502 950033 272000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -722) (undo-tree-id1258 . -1) (undo-tree-id1260 . -1) (undo-tree-id1262 . -1) (undo-tree-id1264 . -1) (undo-tree-id1266 . -1) (undo-tree-id1268 . -1) (undo-tree-id1270 . -1) (undo-tree-id1272 . -1) (#("t" 0 1 (fontified t)) . -723) (undo-tree-id1273 . -1) (undo-tree-id1275 . -1) (undo-tree-id1277 . -1) (undo-tree-id1279 . -1) (undo-tree-id1281 . -1) (undo-tree-id1283 . -1) (#("e" 0 1 (fontified t)) . -724) (undo-tree-id1285 . -1) (undo-tree-id1287 . -1) (undo-tree-id1289 . -1) (undo-tree-id1291 . -1) (#("r" 0 1 (fontified t)) . -725) (undo-tree-id1293 . -1) (undo-tree-id1295 . -1) (undo-tree-id1297 . -1) 726) ((722 . 726)) (26052 53502 901238 993000) 0 nil])
([nil nil ((722 . 725)) ((#("par" 0 3 (fontified t)) . 722) (undo-tree-id3502 . -3) (undo-tree-id3503 . -3)) (26052 53502 871419 203000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 735 735 nil nil nil t #s(yas--field 2 742 743 nil nil nil nil #s(yas--exit 744 nil))) #s(yas--field 2 742 743 nil nil nil nil #s(yas--exit 744 nil))) #s(yas--exit 744 nil) 6 nil #s(yas--field 1 735 735 nil nil nil t #s(yas--field 2 742 743 nil nil nil nil #s(yas--exit 744 nil))) nil nil)) (722 . 744) (#("par_for_each(${1:world}, ${2:f})$0" 0 34 (fontified nil)) . 722) (722 . 756) (#("par" 0 3 (fontified nil)) . 722) (722 . 725) (#("par_for_each(…)" 0 15 (fontified nil)) . -722) (722 . 737) (#("par" 0 3 (fontified t)) . -722) (undo-tree-id1251 . -3) (undo-tree-id1253 . -2) (undo-tree-id1255 . -3) (undo-tree-id1257 . -3) 725) ((722 . 725) (#("par_for_each(…)" 0 15 (fontified nil)) . 722) (722 . 737) (#("par" 0 3 (fontified nil)) . 722) (722 . 725) (#("par_for_each(${1:world}, ${2:f})$0" 0 34 (fontified nil)) . 722) (722 . 756) (#("par_for_each(world, f)" 0 3 (fontified t) 3 4 (fontified t) 4 8 (fontified t) 8 12 (fontified t) 12 13 (face (rainbow-delimiters-depth-2-face) fontified t) 13 18 (fontified t) 18 20 (fontified t) 20 21 (fontified t) 21 22 (face (rainbow-delimiters-depth-2-face) fontified t)) . 722) (undo-tree-id3500 . -13) (undo-tree-id3501 . -13) (apply yas--snippet-revive 722 744 #s(yas--snippet nil (#s(yas--field 1 735 735 nil nil nil t #s(yas--field 2 742 743 nil nil nil nil #s(yas--exit 744 nil))) #s(yas--field 2 742 743 nil nil nil nil #s(yas--exit 744 nil))) #s(yas--exit 744 nil) 6 nil #s(yas--field 1 735 735 nil nil nil t #s(yas--field 2 742 743 nil nil nil nil #s(yas--exit 744 nil))) nil nil))) (26052 53502 821901 457000) 0 nil])
([nil nil ((736 . 737) (#("world" 0 5 (fontified nil)) . 736) (735 . 736)) ((#("&" 0 1 (face rust-ampersand-face fontified nil)) . 735) (undo-tree-id3495 . -1) (undo-tree-id3496 . -1) (undo-tree-id3497 . -1) (736 . 741) (#("w" 0 1 (fontified t)) . 736) (undo-tree-id3498 . -1) (undo-tree-id3499 . -1)) (26052 53502 791850 314000) 0 nil])
([nil nil ((736 . 741) (#("w" 0 1 (fontified nil)) . 736) (736 . 737) (#("world" 0 5 (fontified nil)) . -736) (736 . 741) (#("w" 0 1 (fontified t)) . -736) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1239 . -1) (undo-tree-id1241 . -1) (undo-tree-id1243 . -1) (undo-tree-id1245 . -1) (undo-tree-id1247 . -1) (undo-tree-id1249 . -1) 737) ((736 . 737) (#("world" 0 5 (fontified nil)) . 736) (736 . 741) (#("w" 0 1 (fontified nil)) . 736) (736 . 737) (#("world" 0 5 (fontified t)) . 736) (undo-tree-id3494 . -5)) (26052 53502 744812 366000) 0 nil])
([nil nil ((apply yas--snippet-revive 722 745 #s(yas--snippet nil (#s(yas--field 1 735 735 nil nil nil t #s(yas--field 2 742 743 nil nil nil nil #s(yas--exit 744 nil))) #s(yas--field 2 742 743 nil nil nil nil #s(yas--exit 744 nil))) #s(yas--exit 744 nil) 6 nil #s(yas--field 1 735 735 nil nil nil t #s(yas--field 2 742 743 nil nil nil nil #s(yas--exit 744 nil))) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 735 735 nil nil nil t #s(yas--field 2 742 743 nil nil nil nil #s(yas--exit 744 nil))) #s(yas--field 2 742 743 nil nil nil nil #s(yas--exit 744 nil))) #s(yas--exit 744 nil) 6 nil #s(yas--field 1 735 735 nil nil nil t #s(yas--field 2 742 743 nil nil nil nil #s(yas--exit 744 nil))) nil nil))) (26052 53502 707526 940000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -743) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1230 . -1) (undo-tree-id1232 . -1) 744) ((743 . 744)) (26052 53502 667484 72000) 0 nil])
([nil nil ((743 . 747)) ((#("||{}" 0 1 (fontified t) 1 2 (fontified t) 2 3 (face (rainbow-delimiters-depth-3-face) fontified t) 3 4 (face (rainbow-delimiters-depth-3-face) fontified t)) . 743)) (26052 53502 627503 427000) 0 nil])
([nil nil ((748 . 749)) ((#(";" 0 1 (fontified t)) . 748) (undo-tree-id3493 . 1)) (26052 53502 588549 47000) 0 nil])
([nil nil ((744 . 745) (t 26052 53191 786484 52000)) ((#("_" 0 1 (fontified t)) . 744)) (26052 53502 541801 546000) 0 nil])
([nil nil ((747 . 748) (t 26052 53195 993150 973000)) ((#(" " 0 1 (fontified t)) . 747)) (26052 53502 508655 278000) 0 nil])
([nil nil ((711 . 716)) ((#("
    " 0 1 (fontified t) 1 5 (fontified t)) . 711) (undo-tree-id3477 . -5) (undo-tree-id3478 . -5) (undo-tree-id3479 . -5) (undo-tree-id3480 . -5) (undo-tree-id3481 . -5) (undo-tree-id3482 . -5) (undo-tree-id3483 . -5) (undo-tree-id3484 . -5) (undo-tree-id3485 . -5) (undo-tree-id3486 . -5) (undo-tree-id3487 . -5) (undo-tree-id3488 . -5) (undo-tree-id3489 . -5) (undo-tree-id3490 . -5) (undo-tree-id3491 . -5) (undo-tree-id3492 . -1)) (26052 53502 461505 833000) 0 nil])
([nil nil ((716 . 718)) ((#("l;" 0 1 (fontified t) 1 2 (fontified t)) . 716) (undo-tree-id3475 . -2) (undo-tree-id3476 . -2)) (26052 53502 427197 909000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -717) (undo-tree-id1375 . -1) (undo-tree-id1377 . -1) 718) ((717 . 718)) (26052 53502 381399 862000) 0 nil])
([nil nil ((717 . 723)) ((#("et vec" 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t) 3 5 (face font-lock-variable-name-face fontified t) 5 6 (face font-lock-variable-name-face fontified t)) . 717) (undo-tree-id3473 . -6) (undo-tree-id3474 . -6)) (26052 53502 346213 98000) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-variable-name-face fontified t)) . -722) (undo-tree-id1370 . -1) (undo-tree-id1372 . -1) (undo-tree-id1374 . -1) 723) ((722 . 723)) (26052 53502 299967 139000) 0 nil])
([nil nil ((#("let ve" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 6 (face font-lock-variable-name-face fontified t)) . 716) (undo-tree-id1347 . -1) (undo-tree-id1349 . -1) (undo-tree-id1351 . -2) (undo-tree-id1353 . -3) (undo-tree-id1355 . -4) (undo-tree-id1357 . -4) (undo-tree-id1359 . -5) (undo-tree-id1361 . -6) (undo-tree-id1363 . -6) (undo-tree-id1365 . -6) (undo-tree-id1367 . -6) (undo-tree-id1369 . -6)) ((716 . 722)) (26052 53502 264815 948000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 716) (undo-tree-id1345 . -1)) ((716 . 717)) (26052 53502 226279 399000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -716) (undo-tree-id1342 . -4)) ((716 . 720)) (26052 53502 186185 857000) 0 nil])
([nil nil ((711 . 716) (t 26052 53210 246485 166000)) ((#("
    " 0 1 (fontified t) 1 5 (fontified t)) . 711) (undo-tree-id3470 . -5) (undo-tree-id3471 . -5) (undo-tree-id3472 . -5)) (26052 53502 144322 603000) 0 nil])
([nil nil ((716 . 729)) ((#("let mut vecyp" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 9 (face font-lock-variable-name-face fontified t) 9 10 (face font-lock-variable-name-face fontified t) 10 11 (face font-lock-variable-name-face fontified t) 11 12 (face font-lock-variable-name-face fontified t) 12 13 (face font-lock-variable-name-face fontified t)) . 716) (undo-tree-id3467 . -13) (undo-tree-id3468 . -13) (undo-tree-id3469 . -8)) (26052 53502 99238 255000) 0 nil])
([nil nil ((#("v" 0 1 (face font-lock-variable-name-face fontified t)) . -724) (undo-tree-id1384 . -1) (undo-tree-id1386 . -1) (undo-tree-id1388 . -1) (undo-tree-id1390 . -1) (undo-tree-id1392 . -1) (undo-tree-id1394 . -1) (undo-tree-id1396 . -1) (undo-tree-id1398 . -1) (undo-tree-id1400 . -1) (undo-tree-id1402 . -1) (undo-tree-id1404 . -1) (undo-tree-id1406 . -1) (undo-tree-id1408 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -725) (undo-tree-id1410 . -1) (undo-tree-id1412 . -1) (undo-tree-id1414 . -1) (undo-tree-id1416 . -1) (undo-tree-id1418 . -1) (undo-tree-id1420 . -1) (undo-tree-id1422 . -1) (undo-tree-id1424 . -1) (undo-tree-id1426 . -1) (undo-tree-id1428 . -1) (#("c" 0 1 (face font-lock-variable-name-face fontified t)) . -726) (undo-tree-id1430 . -1) (undo-tree-id1432 . -1) (undo-tree-id1434 . -1) (undo-tree-id1436 . -1) (undo-tree-id1438 . -1) (undo-tree-id1440 . -1) (undo-tree-id1442 . -1) (undo-tree-id1444 . -1) (#("y" 0 1 (face font-lock-variable-name-face fontified t)) . -727) (undo-tree-id1445 . -1) (undo-tree-id1447 . -1) (undo-tree-id1449 . -1) (undo-tree-id1451 . -1) (undo-tree-id1453 . -1) (undo-tree-id1455 . -1) (#("p" 0 1 (face font-lock-variable-name-face fontified t)) . -728) (undo-tree-id1456 . -1) (undo-tree-id1458 . -1) (undo-tree-id1460 . -1) 729) ((724 . 729)) (26052 53502 64161 472000) 0 nil])
([nil nil ((724 . 731)) ((#("ens = v" 0 3 (face font-lock-variable-name-face fontified t) 3 6 (fontified t) 6 7 (fontified t)) . 724) (undo-tree-id3464 . -7) (undo-tree-id3465 . -7) (undo-tree-id3466 . -6)) (26052 53502 18706 461000) 0 nil])
([nil nil ((apply yas--snippet-revive 730 736 #s(yas--snippet nil nil #s(yas--exit #<marker at 711 in main.rs> nil) 7 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 711 in main.rs> nil) 7 nil nil nil nil)) (730 . 736) (#("vec![$0]" 0 8 (fontified nil)) . 730) (730 . 738) (#("v" 0 1 (fontified nil)) . 730) (730 . 731) (#("vec![…]" 0 7 (fontified nil)) . -730) (730 . 737) (#("v" 0 1 (fontified t)) . -730) (undo-tree-id1378 . -1) (undo-tree-id1380 . -1) (undo-tree-id1382 . -1) 731) ((730 . 731) (#("vec![…]" 0 7 (fontified nil)) . 730) (730 . 737) (#("v" 0 1 (fontified nil)) . 730) (730 . 731) (#("vec![$0]" 0 8 (fontified nil)) . 730) (730 . 738) (#("vec![]" 0 4 (face font-lock-preprocessor-face fontified t) 4 5 (face (rainbow-delimiters-depth-2-face) fontified t) 5 6 (face (rainbow-delimiters-depth-2-face) fontified t)) . 730) (undo-tree-id3461 . -6) (undo-tree-id3462 . -6) (undo-tree-id3463 . -5)) (26052 53501 982787 858000) 0 nil])
([nil nil ((736 . 737) (t 26052 53247 576487 404000)) ((#(";" 0 1 (fontified t)) . 736)) (26052 53501 948681 808000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -770) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1476 . -1) (undo-tree-id1478 . -1) (undo-tree-id1480 . -1) 771 (t 26052 53248 556487 465000)) ((770 . 771)) (26052 53501 896994 956000) 0 nil])
([nil nil ((770 . 771)) ((#("v" 0 1 (fontified t)) . 770)) (26052 53501 864887 678000) 0 nil])
([nil nil ((773 . 774)) ((#("e" 0 1 (fontified t)) . 773) (undo-tree-id3459 . -1) (undo-tree-id3460 . -1)) (26052 53501 819167 212000) 0 nil])
([nil nil ((773 . 776) (#("e" 0 1 (fontified nil)) . 773) (773 . 774) (#("ens" 0 3 (fontified nil)) . -773) (773 . 776) (#("e" 0 1 (fontified t)) . -773) (undo-tree-id1468 . -1) (undo-tree-id1470 . -1) (undo-tree-id1472 . -1) 774) ((773 . 774) (#("ens" 0 3 (fontified nil)) . 773) (773 . 776) (#("e" 0 1 (fontified nil)) . 773) (773 . 774) (#("ens" 0 3 (fontified t)) . 773) (undo-tree-id3457 . -3) (undo-tree-id3458 . -3)) (26052 53501 775302 87000) 0 nil])
([nil nil ((776 . 778)) ((#(".p" 0 1 (fontified t) 1 2 (fontified t)) . 776) (undo-tree-id3455 . -2) (undo-tree-id3456 . -2)) (26052 53501 749761 146000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 782 782 nil nil nil t #s(yas--exit 788 nil))) #s(yas--exit 788 nil) 8 nil #s(yas--field 1 782 782 nil nil nil t #s(yas--exit 788 nil)) nil nil)) (777 . 788) (#("push(${1:value})$0" 0 18 (fontified nil)) . 777) (777 . 795) (#("p" 0 1 (fontified nil)) . 777) (777 . 778) (#("push(…)" 0 7 (fontified nil)) . -777) (777 . 784) (#("p" 0 1 (fontified t)) . -777) (undo-tree-id1462 . -1) (undo-tree-id1464 . -1) (undo-tree-id1466 . -1) 778) ((777 . 778) (#("push(…)" 0 7 (fontified nil)) . 777) (777 . 784) (#("p" 0 1 (fontified nil)) . 777) (777 . 778) (#("push(${1:value})$0" 0 18 (fontified nil)) . 777) (777 . 795) (#("push(value)" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t) 5 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-4-face) fontified t)) . 777) (undo-tree-id3453 . -5) (undo-tree-id3454 . -5) (apply yas--snippet-revive 777 788 #s(yas--snippet nil (#s(yas--field 1 782 782 nil nil nil t #s(yas--exit 788 nil))) #s(yas--exit 788 nil) 8 nil #s(yas--field 1 782 782 nil nil nil t #s(yas--exit 788 nil)) nil nil))) (26052 53501 699804 207000) 0 nil])
([nil nil ((#("value" 0 5 (fontified nil)) . 783) (782 . 783)) ((#("v" 0 1 (fontified nil)) . 782) (undo-tree-id3452 . -1) (783 . 788)) (26052 53501 662901 680000) 0 nil])
([nil nil ((apply yas--snippet-revive 777 784 #s(yas--snippet nil (#s(yas--field 1 782 782 nil nil nil t #s(yas--exit 788 nil))) #s(yas--exit 788 nil) 8 nil #s(yas--field 1 782 782 nil nil nil t #s(yas--exit 788 nil)) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 782 782 nil nil nil t #s(yas--exit 788 nil))) #s(yas--exit 788 nil) 8 nil #s(yas--field 1 782 782 nil nil nil t #s(yas--exit 788 nil)) nil nil))) (26052 53501 614255 895000) 0 nil])
([nil nil ((#("v) })" 0 1 (fontified t) 1 2 (face (rainbow-delimiters-depth-4-face) fontified t) 2 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-3-face) fontified t) 4 5 (face (rainbow-delimiters-depth-2-face) fontified t)) . -782) (undo-tree-id2270 . -5) (undo-tree-id2271 . -5) (undo-tree-id2273 . 4) (undo-tree-id2275 . -1) (undo-tree-id2277 . -1) (undo-tree-id2279 . -1) (undo-tree-id2281 . -1) (undo-tree-id2283 . -1) (undo-tree-id2285 . -1) (undo-tree-id2287 . -1) (undo-tree-id2289 . -1) (undo-tree-id2291 . -1) (undo-tree-id2293 . -1) (undo-tree-id2295 . -1) (undo-tree-id2297 . -1) (undo-tree-id2299 . -1) (undo-tree-id2301 . -1) (undo-tree-id2303 . -2) (undo-tree-id2305 . -2) (undo-tree-id2307 . -2) (undo-tree-id2309 . -2) (undo-tree-id2311 . -4) (undo-tree-id2313 . -5) (undo-tree-id2315 . -5) (undo-tree-id2317 . -5) (undo-tree-id2319 . -5) (undo-tree-id2321 . -5) (undo-tree-id2323 . -5) (undo-tree-id2325 . -5) (undo-tree-id2327 . -5) 787 (t 26052 53257 973154 700000)) ((782 . 787)) (26052 53501 581245 488000) 0 nil])
([nil nil ((#("push(" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t)) . -777) (undo-tree-id2206 . -5) (undo-tree-id2207 . -5) (undo-tree-id2209 . -5) (undo-tree-id2211 . -5) (undo-tree-id2213 . -5) (undo-tree-id2215 . -5) (undo-tree-id2217 . -5) (undo-tree-id2219 . -5) (undo-tree-id2221 . -5) (undo-tree-id2223 . -5) (undo-tree-id2225 . -5) (undo-tree-id2227 . -5) (undo-tree-id2229 . -5) (undo-tree-id2231 . -5) (undo-tree-id2233 . -5) (undo-tree-id2235 . -4) (undo-tree-id2237 . -5) (undo-tree-id2239 . -5) (undo-tree-id2241 . -5) (undo-tree-id2243 . -5) (undo-tree-id2245 . -5) (undo-tree-id2247 . -5) (undo-tree-id2249 . -5) (undo-tree-id2251 . -5) (undo-tree-id2253 . -5) (undo-tree-id2255 . -5) (undo-tree-id2257 . -5) (undo-tree-id2259 . -5) (undo-tree-id2261 . -5) (undo-tree-id2263 . -5) (undo-tree-id2265 . -5) (undo-tree-id2267 . -5) (undo-tree-id2269 . -5) 782) ((777 . 782)) (26052 53501 539934 29000) 0 nil])
([nil nil ((#("ens." 0 4 (fontified t)) . -773) (undo-tree-id2131 . -4) (undo-tree-id2132 . -4) (undo-tree-id2134 . -4) (undo-tree-id2136 . -4) (undo-tree-id2138 . -4) (undo-tree-id2140 . -4) (undo-tree-id2142 . -4) (undo-tree-id2144 . -4) (undo-tree-id2146 . -4) (undo-tree-id2148 . -4) (undo-tree-id2150 . -4) (undo-tree-id2152 . -4) (undo-tree-id2154 . -4) (undo-tree-id2156 . -4) (undo-tree-id2158 . -4) (undo-tree-id2160 . -4) (undo-tree-id2162 . -4) (undo-tree-id2164 . -4) (undo-tree-id2166 . -4) (undo-tree-id2168 . -3) (undo-tree-id2170 . -4) (undo-tree-id2172 . -4) (undo-tree-id2174 . -4) (undo-tree-id2176 . -4) (undo-tree-id2178 . -4) (undo-tree-id2180 . -4) (undo-tree-id2182 . -4) (undo-tree-id2184 . -4) (undo-tree-id2186 . -4) (undo-tree-id2188 . -4) (undo-tree-id2190 . -4) (undo-tree-id2192 . -4) (undo-tree-id2194 . -4) (undo-tree-id2196 . -4) (undo-tree-id2198 . -4) (undo-tree-id2200 . -4) (undo-tree-id2202 . -4) (undo-tree-id2204 . -4) 777) ((773 . 777)) (26052 53501 503121 875000) 0 nil])
([nil nil ((#("v|{" 0 2 (fontified t) 2 3 (face (rainbow-delimiters-depth-3-face) fontified t)) . -770) (undo-tree-id2043 . -3) (undo-tree-id2044 . -3) (undo-tree-id2046 . -3) (undo-tree-id2048 . -3) (undo-tree-id2050 . -3) (undo-tree-id2052 . -3) (undo-tree-id2054 . -3) (undo-tree-id2056 . -3) (undo-tree-id2058 . -3) (undo-tree-id2060 . -3) (undo-tree-id2062 . -3) (undo-tree-id2064 . -3) (undo-tree-id2066 . -3) (undo-tree-id2068 . -3) (undo-tree-id2070 . -3) (undo-tree-id2072 . -3) (undo-tree-id2074 . -3) (undo-tree-id2076 . -3) (undo-tree-id2078 . -3) (undo-tree-id2080 . -3) (undo-tree-id2082 . -3) (undo-tree-id2084 . -3) (undo-tree-id2086 . -3) (undo-tree-id2088 . -3) (undo-tree-id2090 . -3) (undo-tree-id2092 . -3) (undo-tree-id2094 . -3) (undo-tree-id2096 . -3) (undo-tree-id2098 . -3) (undo-tree-id2100 . -3) (undo-tree-id2102 . -3) (undo-tree-id2104 . -3) (undo-tree-id2106 . -3) (undo-tree-id2108 . -3) (undo-tree-id2110 . -3) (undo-tree-id2112 . -3) (undo-tree-id2114 . -3) (undo-tree-id2116 . -3) (undo-tree-id2118 . -3) (undo-tree-id2120 . -3) (undo-tree-id2122 . -3) (undo-tree-id2124 . -3) (undo-tree-id2126 . -3) (undo-tree-id2128 . -3) (undo-tree-id2130 . -3) 773) ((770 . 773)) (26052 53501 458292 539000) 0 nil])
([nil nil ((#("world, |" 0 5 (fontified t) 5 8 (fontified t)) . -762) (undo-tree-id1947 . -8) (undo-tree-id1948 . -8) (undo-tree-id1950 . -8) (undo-tree-id1952 . -8) (undo-tree-id1954 . -8) (undo-tree-id1956 . -8) (undo-tree-id1958 . -8) (undo-tree-id1960 . -8) (undo-tree-id1962 . -8) (undo-tree-id1964 . -8) (undo-tree-id1966 . -8) (undo-tree-id1968 . -8) (undo-tree-id1970 . -8) (undo-tree-id1972 . -8) (undo-tree-id1974 . -8) (undo-tree-id1976 . -8) (undo-tree-id1978 . -8) (undo-tree-id1980 . -8) (undo-tree-id1982 . -8) (undo-tree-id1984 . -8) (undo-tree-id1986 . -8) (undo-tree-id1988 . -8) (undo-tree-id1990 . -8) (undo-tree-id1992 . -8) (undo-tree-id1994 . -8) (undo-tree-id1996 . -8) (undo-tree-id1998 . -8) (undo-tree-id2000 . -8) (undo-tree-id2002 . -8) (undo-tree-id2004 . -8) (undo-tree-id2006 . -8) (undo-tree-id2008 . -8) (undo-tree-id2010 . -8) (undo-tree-id2012 . -8) (undo-tree-id2014 . -8) (undo-tree-id2016 . -8) (undo-tree-id2018 . -8) (undo-tree-id2020 . -8) (undo-tree-id2022 . -8) (undo-tree-id2024 . -8) (undo-tree-id2026 . -8) (undo-tree-id2028 . -8) (undo-tree-id2030 . -8) (undo-tree-id2032 . -8) (undo-tree-id2034 . -8) (undo-tree-id2036 . -8) (undo-tree-id2038 . -8) (undo-tree-id2040 . -8) (undo-tree-id2042 . -8) 770) ((762 . 770)) (26052 53501 422530 289000) 0 nil])
([nil nil ((#("each(&" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-2-face) fontified t) 5 6 (fontified t)) . -756) (undo-tree-id1849 . -6) (undo-tree-id1850 . -6) (undo-tree-id1852 . -6) (undo-tree-id1854 . -6) (undo-tree-id1856 . -6) (undo-tree-id1858 . -6) (undo-tree-id1860 . -6) (undo-tree-id1862 . -6) (undo-tree-id1864 . -6) (undo-tree-id1866 . -6) (undo-tree-id1868 . -6) (undo-tree-id1870 . -6) (undo-tree-id1872 . -6) (undo-tree-id1874 . -6) (undo-tree-id1876 . -6) (undo-tree-id1878 . -6) (undo-tree-id1880 . -6) (undo-tree-id1882 . -6) (undo-tree-id1884 . -6) (undo-tree-id1886 . -6) (undo-tree-id1888 . -6) (undo-tree-id1890 . -6) (undo-tree-id1892 . -6) (undo-tree-id1894 . -6) (undo-tree-id1896 . -6) (undo-tree-id1898 . -6) (undo-tree-id1900 . -6) (undo-tree-id1902 . -6) (undo-tree-id1904 . -6) (undo-tree-id1906 . -6) (undo-tree-id1908 . -6) (undo-tree-id1910 . -6) (undo-tree-id1912 . -6) (undo-tree-id1914 . -6) (undo-tree-id1916 . -6) (undo-tree-id1918 . -6) (undo-tree-id1920 . -6) (undo-tree-id1922 . -6) (undo-tree-id1924 . -6) (undo-tree-id1926 . -6) (undo-tree-id1928 . -6) (undo-tree-id1930 . -6) (undo-tree-id1932 . -6) (undo-tree-id1934 . -6) (undo-tree-id1936 . -6) (undo-tree-id1938 . -6) (undo-tree-id1940 . -6) (undo-tree-id1942 . -6) (undo-tree-id1944 . -6) (undo-tree-id1946 . -6) 762) ((756 . 762)) (26052 53501 375738 329000) 0 nil])
([nil nil ((#("for_" 0 4 (fontified t)) . -752) (undo-tree-id1749 . -4) (undo-tree-id1750 . -4) (undo-tree-id1752 . -4) (undo-tree-id1754 . -4) (undo-tree-id1756 . -4) (undo-tree-id1758 . -4) (undo-tree-id1760 . -4) (undo-tree-id1762 . -4) (undo-tree-id1764 . -4) (undo-tree-id1766 . -4) (undo-tree-id1768 . -4) (undo-tree-id1770 . -4) (undo-tree-id1772 . -4) (undo-tree-id1774 . -4) (undo-tree-id1776 . -4) (undo-tree-id1778 . -4) (undo-tree-id1780 . -4) (undo-tree-id1782 . -4) (undo-tree-id1784 . -4) (undo-tree-id1786 . -4) (undo-tree-id1788 . -4) (undo-tree-id1790 . -4) (undo-tree-id1792 . -4) (undo-tree-id1794 . -4) (undo-tree-id1796 . -4) (undo-tree-id1798 . -4) (undo-tree-id1800 . -4) (undo-tree-id1802 . -4) (undo-tree-id1804 . -4) (undo-tree-id1806 . -4) (undo-tree-id1808 . -4) (undo-tree-id1810 . -4) (undo-tree-id1812 . -4) (undo-tree-id1814 . -4) (undo-tree-id1816 . -4) (undo-tree-id1818 . -4) (undo-tree-id1820 . -4) (undo-tree-id1822 . -4) (undo-tree-id1824 . -4) (undo-tree-id1826 . -4) (undo-tree-id1828 . -4) (undo-tree-id1830 . -4) (undo-tree-id1832 . -4) (undo-tree-id1834 . -4) (undo-tree-id1836 . -4) (undo-tree-id1838 . -4) (undo-tree-id1840 . -4) (undo-tree-id1842 . -4) (undo-tree-id1844 . -4) (undo-tree-id1846 . -4) (undo-tree-id1848 . -4) 756) ((752 . 756)) (26052 53501 339549 980000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -751) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1643 . -1) (undo-tree-id1645 . -1) (undo-tree-id1647 . -1) (undo-tree-id1649 . -1) (undo-tree-id1651 . -1) (undo-tree-id1653 . -1) (undo-tree-id1655 . -1) (undo-tree-id1657 . -1) (undo-tree-id1659 . -1) (undo-tree-id1661 . -1) (undo-tree-id1663 . -1) (undo-tree-id1665 . -1) (undo-tree-id1667 . -1) (undo-tree-id1669 . -1) (undo-tree-id1671 . -1) (undo-tree-id1673 . -1) (undo-tree-id1675 . -1) (undo-tree-id1677 . -1) (undo-tree-id1679 . -1) (undo-tree-id1681 . -1) (undo-tree-id1683 . -1) (undo-tree-id1685 . -1) (undo-tree-id1687 . -1) (undo-tree-id1689 . -1) (undo-tree-id1691 . -1) (undo-tree-id1693 . -1) (undo-tree-id1695 . -1) (undo-tree-id1697 . -1) (undo-tree-id1699 . -1) (undo-tree-id1701 . -1) (undo-tree-id1703 . -1) (undo-tree-id1705 . -1) (undo-tree-id1707 . -1) (undo-tree-id1709 . -1) (undo-tree-id1711 . -1) (undo-tree-id1713 . -1) (undo-tree-id1715 . -1) (undo-tree-id1717 . -1) (undo-tree-id1719 . -1) (undo-tree-id1721 . -1) (undo-tree-id1723 . -1) (undo-tree-id1725 . -1) (undo-tree-id1727 . -1) (undo-tree-id1729 . -1) (undo-tree-id1731 . -1) (undo-tree-id1733 . -1) (undo-tree-id1735 . -1) (undo-tree-id1737 . -1) (undo-tree-id1739 . -1) (undo-tree-id1741 . -1) (undo-tree-id1743 . -1) (undo-tree-id1745 . -1) (undo-tree-id1747 . -1) 752) ((751 . 752)) (26052 53501 298049 976000) 0 nil])
([nil nil ((751 . 752)) ((#("_" 0 1 (fontified t)) . 751) (undo-tree-id3450 . -1) (undo-tree-id3451 . -1)) (26052 53501 262535 718000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 765 765 nil nil nil t #s(yas--field 2 772 773 nil nil nil nil #s(yas--exit 774 nil))) #s(yas--field 2 772 773 nil nil nil nil #s(yas--exit 774 nil))) #s(yas--exit 774 nil) 9 nil #s(yas--field 1 765 765 nil nil nil t #s(yas--field 2 772 773 nil nil nil nil #s(yas--exit 774 nil))) nil nil)) (748 . 774) (#("par_for_each_mut(${1:world}, ${2:f})$0" 0 38 (fontified nil)) . 748) (748 . 786) (#("par_" 0 4 (fontified nil)) . 748) (748 . 752) (#("par_for_each_mut(…)" 0 19 (fontified nil)) . -748) (748 . 767) (#("par_" 0 4 (fontified t)) . -748) (undo-tree-id1516 . -3) (undo-tree-id1517 . -4) (undo-tree-id1519 . -3) (undo-tree-id1521 . -3) (undo-tree-id1523 . -3) (undo-tree-id1525 . -3) (undo-tree-id1527 . -3) (undo-tree-id1529 . -3) (undo-tree-id1531 . -3) (undo-tree-id1533 . -3) (undo-tree-id1535 . -3) (undo-tree-id1537 . -3) (undo-tree-id1539 . -3) (undo-tree-id1541 . -3) (undo-tree-id1543 . -3) (undo-tree-id1545 . -3) (undo-tree-id1547 . -3) (undo-tree-id1549 . -3) (undo-tree-id1551 . -3) (undo-tree-id1553 . -3) (undo-tree-id1555 . -3) (undo-tree-id1557 . -3) (undo-tree-id1559 . -3) (undo-tree-id1561 . -3) (undo-tree-id1563 . -3) (undo-tree-id1565 . -3) (undo-tree-id1567 . -3) (undo-tree-id1569 . -3) (undo-tree-id1571 . -3) (undo-tree-id1573 . -3) (undo-tree-id1575 . -3) (undo-tree-id1577 . -3) (undo-tree-id1579 . -3) (undo-tree-id1581 . -3) (undo-tree-id1583 . -3) (undo-tree-id1585 . -3) (undo-tree-id1587 . -3) (undo-tree-id1589 . -3) (undo-tree-id1591 . -3) (undo-tree-id1593 . -3) (undo-tree-id1595 . -3) (undo-tree-id1597 . -3) (undo-tree-id1599 . -3) (undo-tree-id1601 . -3) (undo-tree-id1603 . -3) (undo-tree-id1605 . -3) (undo-tree-id1607 . -3) (undo-tree-id1609 . -3) (undo-tree-id1611 . -3) (undo-tree-id1613 . -3) (undo-tree-id1615 . -3) (undo-tree-id1617 . -3) (undo-tree-id1619 . -3) (undo-tree-id1621 . -3) (undo-tree-id1623 . -3) (undo-tree-id1625 . -3) (undo-tree-id1627 . -3) (undo-tree-id1629 . -3) (undo-tree-id1631 . -3) (undo-tree-id1633 . -3) (undo-tree-id1635 . -4) (undo-tree-id1637 . -4) (undo-tree-id1639 . -4) 752) ((748 . 752) (#("par_for_each_mut(…)" 0 19 (fontified nil)) . 748) (748 . 767) (#("par_" 0 4 (fontified nil)) . 748) (748 . 752) (#("par_for_each_mut(${1:world}, ${2:f})$0" 0 38 (fontified nil)) . 748) (748 . 786) (#("par_for_each_mut(world, f)" 0 16 (fontified t) 16 17 (face (rainbow-delimiters-depth-2-face) fontified t) 17 22 (fontified t) 22 24 (fontified t) 24 25 (fontified t) 25 26 (face (rainbow-delimiters-depth-2-face) fontified t)) . 748) (undo-tree-id3403 . -22) (undo-tree-id3404 . -22) (undo-tree-id3405 . 1) (undo-tree-id3406 . -24) (undo-tree-id3407 . -24) (undo-tree-id3408 . -24) (undo-tree-id3409 . -24) (undo-tree-id3410 . -24) (undo-tree-id3411 . -24) (undo-tree-id3412 . -24) (undo-tree-id3413 . -24) (undo-tree-id3414 . -24) (undo-tree-id3415 . -24) (undo-tree-id3416 . -24) (undo-tree-id3417 . -24) (undo-tree-id3418 . -24) (undo-tree-id3419 . -24) (undo-tree-id3420 . -24) (undo-tree-id3421 . -24) (undo-tree-id3422 . -24) (undo-tree-id3423 . -24) (undo-tree-id3424 . -24) (undo-tree-id3425 . -24) (undo-tree-id3426 . -24) (undo-tree-id3427 . -24) (undo-tree-id3428 . -24) (undo-tree-id3429 . -24) (undo-tree-id3430 . -17) (undo-tree-id3431 . -17) (undo-tree-id3432 . -17) (undo-tree-id3433 . -17) (undo-tree-id3434 . -17) (undo-tree-id3435 . -17) (undo-tree-id3436 . -17) (undo-tree-id3437 . -17) (undo-tree-id3438 . -17) (undo-tree-id3439 . -24) (undo-tree-id3440 . -24) (undo-tree-id3441 . -24) (undo-tree-id3442 . -24) (undo-tree-id3443 . -24) (undo-tree-id3444 . -24) (undo-tree-id3445 . -24) (undo-tree-id3446 . -24) (undo-tree-id3447 . -24) (undo-tree-id3448 . -24) (undo-tree-id3449 . -24) (apply yas--snippet-revive 748 774 #s(yas--snippet nil (#s(yas--field 1 765 765 nil nil nil t #s(yas--field 2 772 773 nil nil nil nil #s(yas--exit 774 nil))) #s(yas--field 2 772 773 nil nil nil nil #s(yas--exit 774 nil))) #s(yas--exit 774 nil) 9 nil #s(yas--field 1 765 765 nil nil nil t #s(yas--field 2 772 773 nil nil nil nil #s(yas--exit 774 nil))) nil nil))) (26052 53501 220814 915000) 0 nil])
([nil nil ((#("world" 0 5 (fontified t)) . -765) (undo-tree-id1510 . -5) (undo-tree-id1511 . -5) (undo-tree-id1513 . -1) (undo-tree-id1515 . -5) 770) ((765 . 770)) (26052 53501 175299 552000) 0 nil])
([nil nil ((765 . 767)) ((#("&m" 0 1 (face rust-ampersand-face fontified t) 1 2 (fontified t)) . 765) (undo-tree-id3391 . -2) (undo-tree-id3392 . -2) (undo-tree-id3393 . -1) (undo-tree-id3394 . -1) (undo-tree-id3395 . -1) (undo-tree-id3396 . -1) (undo-tree-id3397 . -1) (undo-tree-id3398 . -1) (undo-tree-id3399 . -1) (undo-tree-id3400 . -1) (undo-tree-id3401 . -1) (undo-tree-id3402 . -1)) (26052 53501 139591 259000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -766) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1499 . -1) (undo-tree-id1501 . -1) (undo-tree-id1503 . -1) (undo-tree-id1505 . -1) (undo-tree-id1507 . -1) (undo-tree-id1509 . -1) 767) ((766 . 767)) (26052 53501 93099 876000) 0 nil])
([nil nil ((766 . 767)) ((#("w" 0 1 (fontified t)) . 766) (undo-tree-id3389 . -1) (undo-tree-id3390 . -1)) (26052 53501 63276 81000) 0 nil])
([nil nil ((766 . 771) (#("w" 0 1 (fontified nil)) . 766) (766 . 767) (#("world" 0 5 (fontified nil)) . -766) (766 . 771) (#("w" 0 1 (fontified t)) . -766) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1491 . -1) (undo-tree-id1493 . -1) (undo-tree-id1495 . -1) 767) ((766 . 767) (#("world" 0 5 (fontified nil)) . 766) (766 . 771) (#("w" 0 1 (fontified nil)) . 766) (766 . 767) (#("world" 0 5 (fontified t)) . 766) (undo-tree-id3388 . -5)) (26052 53501 13259 317000) 0 nil])
([nil nil ((apply yas--snippet-revive 748 775 #s(yas--snippet nil (#s(yas--field 1 765 765 nil nil nil t #s(yas--field 2 772 773 nil nil nil nil #s(yas--exit 774 nil))) #s(yas--field 2 772 773 nil nil nil nil #s(yas--exit 774 nil))) #s(yas--exit 774 nil) 9 nil #s(yas--field 1 765 765 nil nil nil t #s(yas--field 2 772 773 nil nil nil nil #s(yas--exit 774 nil))) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 765 765 nil nil nil t #s(yas--field 2 772 773 nil nil nil nil #s(yas--exit 774 nil))) #s(yas--field 2 772 773 nil nil nil nil #s(yas--exit 774 nil))) #s(yas--exit 774 nil) 9 nil #s(yas--field 1 765 765 nil nil nil t #s(yas--field 2 772 773 nil nil nil nil #s(yas--exit 774 nil))) nil nil))) (26052 53500 979447 617000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -773) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1484 . -1) 774) ((773 . 774)) (26052 53500 931360 735000) 0 nil])
([nil nil ((773 . 775)) ((#("||" 0 2 (fontified t)) . 773) (undo-tree-id3351 . -1) (undo-tree-id3352 . -1) (undo-tree-id3353 . -2) (undo-tree-id3354 . -2) (undo-tree-id3355 . -2) (undo-tree-id3356 . -2) (undo-tree-id3357 . -2) (undo-tree-id3358 . -2) (undo-tree-id3359 . -2) (undo-tree-id3360 . -2) (undo-tree-id3361 . -2) (undo-tree-id3362 . -2) (undo-tree-id3363 . -2) (undo-tree-id3364 . -2) (undo-tree-id3365 . -2) (undo-tree-id3366 . -2) (undo-tree-id3367 . -2) (undo-tree-id3368 . -2) (undo-tree-id3369 . -2) (undo-tree-id3370 . -2) (undo-tree-id3371 . -2) (undo-tree-id3372 . -2) (undo-tree-id3373 . -2) (undo-tree-id3374 . -2) (undo-tree-id3375 . -2) (undo-tree-id3376 . -1) (undo-tree-id3377 . -2) (undo-tree-id3378 . -2) (undo-tree-id3379 . -2) (undo-tree-id3380 . -2) (undo-tree-id3381 . -2) (undo-tree-id3382 . -2) (undo-tree-id3383 . -2) (undo-tree-id3384 . -2) (undo-tree-id3385 . -2) (undo-tree-id3386 . -2) (undo-tree-id3387 . -2)) (26052 53500 896065 752000) 0 nil])
([nil nil ((774 . 775)) ((#("v" 0 1 (fontified t)) . 774)) (26052 53500 851473 968000) 0 nil])
([nil nil ((776 . 779)) ((#(" {}" 0 1 (fontified t) 1 2 (face (rainbow-delimiters-depth-3-face) fontified t) 2 3 (face (rainbow-delimiters-depth-3-face) fontified t)) . 776) (undo-tree-id3314 . -2) (undo-tree-id3315 . -2) (undo-tree-id3316 . 1) (undo-tree-id3317 . -2) (undo-tree-id3318 . -2) (undo-tree-id3319 . -2) (undo-tree-id3320 . -2) (undo-tree-id3321 . -2) (undo-tree-id3322 . -2) (undo-tree-id3323 . -2) (undo-tree-id3324 . -2) (undo-tree-id3325 . -2) (undo-tree-id3326 . -2) (undo-tree-id3327 . -2) (undo-tree-id3328 . -2) (undo-tree-id3329 . -2) (undo-tree-id3330 . -2) (undo-tree-id3331 . -2) (undo-tree-id3332 . -2) (undo-tree-id3333 . -2) (undo-tree-id3334 . -2) (undo-tree-id3335 . -2) (undo-tree-id3336 . -2) (undo-tree-id3337 . -2) (undo-tree-id3338 . -2) (undo-tree-id3339 . -2) (undo-tree-id3340 . -2) (undo-tree-id3341 . -2) (undo-tree-id3342 . -2) (undo-tree-id3343 . -2) (undo-tree-id3344 . -2) (undo-tree-id3345 . -2) (undo-tree-id3346 . -2) (undo-tree-id3347 . -2) (undo-tree-id3348 . -2) (undo-tree-id3349 . -2) (undo-tree-id3350 . -2)) (26052 53500 819531 34000) 0 nil])
([nil nil ((778 . 780) (t 26052 53317 753158 319000)) ((#("w." 0 1 (fontified t) 1 2 (fontified t)) . 778) (undo-tree-id3312 . -2) (undo-tree-id3313 . -2)) (26052 53500 766518 659000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -779) (undo-tree-id2365 . -1) (undo-tree-id2367 . -1) (undo-tree-id2369 . -1) (undo-tree-id2371 . -1) 780) ((779 . 780)) (26052 53500 736193 99000) 0 nil])
([nil nil ((779 . 780)) ((#("w" 0 1 (fontified t)) . 779) (undo-tree-id3310 . -1) (undo-tree-id3311 . -1)) (26052 53500 689992 819000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t)) . -778) (undo-tree-id2338 . -1) (undo-tree-id2340 . -1) (undo-tree-id2342 . -1) (undo-tree-id2344 . -1) (undo-tree-id2346 . -1) (undo-tree-id2348 . -1) (undo-tree-id2350 . -1) (undo-tree-id2352 . -1) (undo-tree-id2354 . -1) (undo-tree-id2356 . -1) (undo-tree-id2358 . -1) (undo-tree-id2360 . -1) (#("w" 0 1 (fontified t)) . -779) (undo-tree-id2362 . -1) (undo-tree-id2364 . -1) 780) ((778 . 780)) (26052 53500 653698 403000) 0 nil])
([nil nil ((766 . 768)) ((#("jm" 0 1 (fontified t) 1 2 (fontified t)) . 766) (undo-tree-id3308 . -2) (undo-tree-id3309 . -2)) (26052 53500 609798 291000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -766) (undo-tree-id2328 . -1) (undo-tree-id2330 . -1) (undo-tree-id2332 . -1) (undo-tree-id2334 . -1) (#("m" 0 1 (fontified t)) . -767) (undo-tree-id2335 . -1) (undo-tree-id2337 . -1) 768) ((766 . 768)) (26052 53500 573054 761000) 0 nil])
([nil nil ((766 . 770)) ((#("mut " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . 766) (undo-tree-id3299 . -4) (undo-tree-id3300 . -4) (undo-tree-id3301 . -4) (undo-tree-id3302 . -4) (undo-tree-id3303 . -4) (undo-tree-id3304 . -4) (undo-tree-id3305 . -4) (undo-tree-id3306 . -4) (undo-tree-id3307 . -4)) (26052 53500 525352 651000) 0 nil])
([nil nil ((782 . 783) (t 26052 53339 576492 968000)) ((#("e" 0 1 (fontified t)) . 782) (undo-tree-id3297 . -1) (undo-tree-id3298 . -1)) (26052 53500 494033 203000) 0 nil])
([nil nil ((782 . 785) (#("e" 0 1 (fontified nil)) . 782) (782 . 783) (#("ens" 0 3 (fontified nil)) . -782) (782 . 785) (#("e" 0 1 (fontified t)) . -782) (undo-tree-id2379 . -1) (undo-tree-id2381 . -1) (undo-tree-id2383 . -1) 783) ((782 . 783) (#("ens" 0 3 (fontified nil)) . 782) (782 . 785) (#("e" 0 1 (fontified nil)) . 782) (782 . 783) (#("ens" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 782) (undo-tree-id3295 . -3) (undo-tree-id3296 . -3)) (26052 53500 450635 410000) 0 nil])
([nil nil ((785 . 787)) ((#(".p" 0 1 (fontified t) 1 2 (fontified t)) . 785) (undo-tree-id3293 . -2) (undo-tree-id3294 . -2)) (26052 53500 413065 570000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 791 791 nil nil nil t #s(yas--exit 797 nil))) #s(yas--exit 797 nil) 10 nil #s(yas--field 1 791 791 nil nil nil t #s(yas--exit 797 nil)) nil nil)) (786 . 797) (#("push(${1:value})$0" 0 18 (fontified nil)) . 786) (786 . 804) (#("p" 0 1 (fontified nil)) . 786) (786 . 787) (#("push(…)" 0 7 (fontified nil)) . -786) (786 . 793) (#("p" 0 1 (fontified t)) . -786) (undo-tree-id2373 . -1) (undo-tree-id2375 . -1) (undo-tree-id2377 . -1) 787) ((786 . 787) (#("push(…)" 0 7 (fontified nil)) . 786) (786 . 793) (#("p" 0 1 (fontified nil)) . 786) (786 . 787) (#("push(${1:value})$0" 0 18 (fontified nil)) . 786) (786 . 804) (#("push(value)" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t) 5 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-4-face) fontified t)) . 786) (undo-tree-id3291 . -5) (undo-tree-id3292 . -5) (apply yas--snippet-revive 786 797 #s(yas--snippet nil (#s(yas--field 1 791 791 nil nil nil t #s(yas--exit 797 nil))) #s(yas--exit 797 nil) 10 nil #s(yas--field 1 791 791 nil nil nil t #s(yas--exit 797 nil)) nil nil))) (26052 53500 370124 60000) 0 nil])
([nil nil ((#("value" 0 5 (fontified nil)) . 792) (791 . 792)) ((#("v" 0 1 (fontified nil)) . 791) (undo-tree-id3290 . -1) (792 . 797)) (26052 53500 329666 616000) 0 nil])
([nil nil ((apply yas--snippet-revive 786 793 #s(yas--snippet nil (#s(yas--field 1 791 791 nil nil nil t #s(yas--exit 797 nil))) #s(yas--exit 797 nil) 10 nil #s(yas--field 1 791 791 nil nil nil t #s(yas--exit 797 nil)) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 791 791 nil nil nil t #s(yas--exit 797 nil))) #s(yas--exit 797 nil) 10 nil #s(yas--field 1 791 791 nil nil nil t #s(yas--exit 797 nil)) nil nil))) (26052 53500 284354 305000) 0 nil])
([nil nil ((439 . 443) (t 26052 53348 86493 482000)) ((#("    " 0 4 (fontified t)) . 439) (undo-tree-id3281 . -4) (undo-tree-id3282 . -4) (undo-tree-id3283 . -4) (undo-tree-id3284 . -4) (undo-tree-id3285 . -4) (undo-tree-id3286 . -4) (undo-tree-id3287 . -4) (undo-tree-id3288 . -4) (undo-tree-id3289 . -4)) (26052 53500 251596 93000) 0 nil])
([nil nil ((443 . 444)) ((#("w" 0 1 (fontified t)) . 443) (undo-tree-id3279 . -1) (undo-tree-id3280 . -1)) (26052 53500 206843 267000) 0 nil])
([nil nil ((443 . 448) (#("w" 0 1 (fontified nil)) . 443) (443 . 444) (#("world" 0 5 (fontified nil)) . -443) (443 . 448) (#("w" 0 1 (fontified t)) . -443) (undo-tree-id2420 . -1) (undo-tree-id2422 . -1) (undo-tree-id2424 . -1) 444) ((443 . 444) (#("world" 0 5 (fontified nil)) . 443) (443 . 448) (#("w" 0 1 (fontified nil)) . 443) (443 . 444) (#("world" 0 5 (fontified t)) . 443) (undo-tree-id3270 . -5) (undo-tree-id3271 . -5) (undo-tree-id3272 . -5) (undo-tree-id3273 . -5) (undo-tree-id3274 . -5) (undo-tree-id3275 . -5) (undo-tree-id3276 . -5) (undo-tree-id3277 . -5) (undo-tree-id3278 . -5)) (26052 53500 169720 67000) 0 nil])
([nil nil ((448 . 450)) ((#("./" 0 1 (fontified t) 1 2 (fontified t)) . 448) (undo-tree-id3268 . -2) (undo-tree-id3269 . -2)) (26052 53500 124169 734000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -448) (undo-tree-id2411 . -1) (undo-tree-id2413 . -1) (undo-tree-id2415 . -1) (#("/" 0 1 (fontified t)) . -449) (undo-tree-id2417 . -1) (undo-tree-id2419 . -1) 450) ((448 . 450)) (26052 53500 89643 357000) 0 nil])
([nil nil ((448 . 450)) ((#(".r" 0 1 (fontified t) 1 2 (fontified t)) . 448) (undo-tree-id3265 . -2) (undo-tree-id3266 . -2) (undo-tree-id3267 . -1)) (26052 53500 49015 677000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -449) (undo-tree-id2405 . -1) (undo-tree-id2407 . -1) (undo-tree-id2409 . -1) 450) ((449 . 450)) (26052 53500 7638 815000) 0 nil])
([nil nil ((449 . 450)) ((#("p" 0 1 (fontified t)) . 449) (undo-tree-id3263 . -1) (undo-tree-id3264 . -1)) (26052 53499 973606 788000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 454 454 nil nil nil t #s(yas--exit 465 nil))) #s(yas--exit 465 nil) 11 nil #s(yas--field 1 454 454 nil nil nil t #s(yas--exit 465 nil)) nil nil)) (449 . 465) (#("push(${1:components})$0" 0 23 (fontified nil)) . 449) (449 . 472) (#("p" 0 1 (fontified nil)) . 449) (449 . 450) (#("push(…)" 0 7 (fontified nil)) . -449) (449 . 456) (#("p" 0 1 (fontified t)) . -449) (undo-tree-id2398 . -1) (undo-tree-id2400 . -1) (undo-tree-id2402 . -1) (undo-tree-id2404 . -1) 450) ((449 . 450) (#("push(…)" 0 7 (fontified nil)) . 449) (449 . 456) (#("p" 0 1 (fontified nil)) . 449) (449 . 450) (#("push(${1:components})$0" 0 23 (fontified nil)) . 449) (449 . 472) (#("push(components)" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-2-face) fontified t) 5 15 (fontified t) 15 16 (face (rainbow-delimiters-depth-2-face) fontified t)) . 449) (undo-tree-id3260 . -5) (undo-tree-id3261 . -5) (undo-tree-id3262 . -5) (apply yas--snippet-revive 449 465 #s(yas--snippet nil (#s(yas--field 1 454 454 nil nil nil t #s(yas--exit 465 nil))) #s(yas--exit 465 nil) 11 nil #s(yas--field 1 454 454 nil nil nil t #s(yas--exit 465 nil)) nil nil))) (26052 53499 311367 195000) 0 nil])
([nil nil ((#("components" 0 10 (fontified nil)) . 455) (454 . 455)) ((#("v" 0 1 (fontified nil)) . 454) (undo-tree-id3258 . -1) (undo-tree-id3259 . -1) (455 . 465)) (26052 53499 546 570000) 0 nil])
([nil nil ((apply yas--snippet-revive 454 460 #s(yas--snippet nil nil #s(yas--exit #<marker at 439 in main.rs> nil) 12 nil nil #s(yas--field 1 454 454 nil nil nil t #s(yas--exit 465 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 439 in main.rs> nil) 12 nil nil #s(yas--field 1 454 454 nil nil nil t #s(yas--exit 465 nil)) nil)) (454 . 460) (#("vec![$0]" 0 8 (fontified nil)) . 454) (454 . 462) (#("v" 0 1 (fontified nil)) . 454) (454 . 455) (#("vec![…]" 0 7 (fontified nil)) . -454) (454 . 461) (#("v" 0 1 (fontified t)) . -454) (undo-tree-id2387 . -1) (undo-tree-id2388 . -1) (undo-tree-id2390 . -1) (undo-tree-id2392 . -1) (undo-tree-id2394 . -1) (undo-tree-id2396 . -1) 455) ((454 . 455) (#("vec![…]" 0 7 (fontified nil)) . 454) (454 . 461) (#("v" 0 1 (fontified nil)) . 454) (454 . 455) (#("vec![$0]" 0 8 (fontified nil)) . 454) (454 . 462) (#("vec![]" 0 4 (face font-lock-preprocessor-face fontified t) 4 5 (face (rainbow-delimiters-depth-3-face) fontified t) 5 6 (face (rainbow-delimiters-depth-3-face) fontified t)) . 454) (undo-tree-id3256 . -6) (undo-tree-id3257 . -5)) (26052 53498 947426 569000) 0 nil])
([nil nil ((apply yas--snippet-revive 449 461 #s(yas--snippet nil (#s(yas--field 1 454 454 nil nil nil t #s(yas--exit 465 nil))) #s(yas--exit 465 nil) 11 nil #s(yas--field 1 454 454 nil nil nil t #s(yas--exit 465 nil)) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 454 454 nil nil nil t #s(yas--exit 465 nil))) #s(yas--exit 465 nil) 11 nil #s(yas--field 1 454 454 nil nil nil t #s(yas--exit 465 nil)) nil nil))) (26052 53498 912419 256000) 0 nil])
([nil nil ((461 . 462) (t 26052 53368 583161 383000)) ((#(";" 0 1 (fontified t)) . 461) (undo-tree-id3254 . -1) (undo-tree-id3255 . -1)) (26052 53498 866649 571000) 0 nil])
([nil nil ((#("vec![]);" 0 4 (face font-lock-preprocessor-face fontified t) 4 5 (face (rainbow-delimiters-depth-3-face) fontified t) 5 6 (face (rainbow-delimiters-depth-3-face) fontified t) 6 7 (face (rainbow-delimiters-depth-2-face) fontified t) 7 8 (fontified t)) . -454) (undo-tree-id2763 . -8) (undo-tree-id2764 . -8) (undo-tree-id2766 . -8) (undo-tree-id2768 . -8) (undo-tree-id2770 . -8) (undo-tree-id2772 . -8) (undo-tree-id2774 . -8) 462 (t 26052 53369 926494 797000)) ((454 . 462)) (26052 53498 832125 56000) 0 nil])
([nil nil ((#("push(" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-2-face) fontified t)) . -449) (undo-tree-id2747 . -5) (undo-tree-id2748 . -5) (undo-tree-id2750 . -5) (undo-tree-id2752 . -5) (undo-tree-id2754 . -5) (undo-tree-id2756 . -5) (undo-tree-id2758 . -5) (undo-tree-id2760 . -5) (undo-tree-id2762 . -5) 454) ((449 . 454)) (26052 53498 787348 516000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -448) (undo-tree-id2710 . -1) (undo-tree-id2711 . -1) (undo-tree-id2713 . -1) (undo-tree-id2715 . -1) (undo-tree-id2717 . -1) (undo-tree-id2719 . -1) (undo-tree-id2721 . -1) (undo-tree-id2723 . -1) (undo-tree-id2725 . -1) (undo-tree-id2727 . -1) (undo-tree-id2729 . -1) (undo-tree-id2731 . -1) (undo-tree-id2733 . -1) (undo-tree-id2735 . -1) (undo-tree-id2737 . -1) (undo-tree-id2739 . -1) (undo-tree-id2741 . -1) (undo-tree-id2743 . -1) (undo-tree-id2745 . -1) 449) ((448 . 449)) (26052 53498 753408 695000) 0 nil])
([nil nil ((448 . 452)) ((#(".res" 0 1 (fontified t) 1 4 (fontified t)) . 448) (undo-tree-id3246 . -1) (undo-tree-id3247 . -1) (undo-tree-id3248 . -1) (undo-tree-id3249 . -4) (undo-tree-id3250 . -4) (undo-tree-id3251 . -1) (undo-tree-id3252 . -1) (undo-tree-id3253 . -1)) (26052 53498 708011 109000) 0 nil])
([nil nil ((#("res" 0 3 (fontified t)) . -449) (undo-tree-id2692 . -3) (undo-tree-id2694 . -1) (undo-tree-id2696 . -2) (undo-tree-id2698 . -2) (undo-tree-id2700 . -3) (undo-tree-id2702 . -3) (undo-tree-id2704 . -3) (undo-tree-id2706 . -3) (undo-tree-id2708 . -3) 452) ((449 . 452)) (26052 53498 673177 546000) 0 nil])
([nil nil ((449 . 450)) ((#("p" 0 1 (fontified t)) . 449) (undo-tree-id3244 . -1) (undo-tree-id3245 . -1)) (26052 53498 630853 167000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 454 454 nil nil nil t #s(yas--exit 465 nil))) #s(yas--exit 465 nil) 13 nil #s(yas--field 1 454 454 nil nil nil t #s(yas--exit 465 nil)) nil nil)) (449 . 465) (#("push(${1:components})$0" 0 23 (fontified nil)) . 449) (449 . 472) (#("p" 0 1 (fontified nil)) . 449) (449 . 450) (#("push(…)" 0 7 (fontified nil)) . -449) (449 . 456) (#("p" 0 1 (fontified t)) . -449) (undo-tree-id2685 . -1) (undo-tree-id2687 . -1) (undo-tree-id2689 . -1) (undo-tree-id2691 . -1) 450) ((449 . 450) (#("push(…)" 0 7 (fontified nil)) . 449) (449 . 456) (#("p" 0 1 (fontified nil)) . 449) (449 . 450) (#("push(${1:components})$0" 0 23 (fontified nil)) . 449) (449 . 472) (#("push(components)" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-2-face) fontified t) 5 15 (fontified t) 15 16 (face (rainbow-delimiters-depth-2-face) fontified t)) . 449) (undo-tree-id3236 . -5) (undo-tree-id3237 . -5) (undo-tree-id3238 . -5) (undo-tree-id3239 . -5) (undo-tree-id3240 . -5) (undo-tree-id3241 . -5) (undo-tree-id3242 . -5) (undo-tree-id3243 . -5) (apply yas--snippet-revive 449 465 #s(yas--snippet nil (#s(yas--field 1 454 454 nil nil nil t #s(yas--exit 465 nil))) #s(yas--exit 465 nil) 13 nil #s(yas--field 1 454 454 nil nil nil t #s(yas--exit 465 nil)) nil nil))) (26052 53498 593866 240000) 0 nil])
([nil nil ((455 . 457) (#("components" 0 10 (fontified nil)) . 455) (454 . 455)) ((#("r" 0 1 (fontified nil)) . 454) (undo-tree-id3232 . -1) (undo-tree-id3233 . -1) (455 . 465) (#("es" 0 2 (fontified t)) . 455) (undo-tree-id3234 . -2) (undo-tree-id3235 . -2)) (26052 53498 545946 981000) 0 nil])
([nil nil ((454 . 463) (#("res" 0 3 (fontified nil)) . 454) (454 . 457) (#("Resources" 0 9 (fontified nil)) . -454) (454 . 463) (#("res" 0 3 (fontified t)) . -454) (undo-tree-id2666 . -3) (undo-tree-id2667 . -3) (undo-tree-id2669 . -1) (undo-tree-id2671 . -1) (undo-tree-id2673 . -1) (undo-tree-id2675 . -1) (undo-tree-id2677 . -2) (undo-tree-id2679 . -2) (undo-tree-id2681 . -3) (undo-tree-id2683 . -3) 457) ((454 . 457) (#("Resources" 0 9 (fontified nil)) . 454) (454 . 463) (#("res" 0 3 (fontified nil)) . 454) (454 . 457) (#("Resources" 0 9 (face font-lock-type-face fontified t)) . 454) (undo-tree-id3225 . -4) (undo-tree-id3226 . -3) (undo-tree-id3227 . -9) (undo-tree-id3228 . -9) (undo-tree-id3229 . -3) (undo-tree-id3230 . -4) (undo-tree-id3231 . -9)) (26052 53498 513988 129000) 0 nil])
([nil nil ((463 . 466)) ((#("::n" 0 2 (fontified t) 2 3 (fontified t)) . 463) (undo-tree-id3222 . -3) (undo-tree-id3223 . -3) (undo-tree-id3224 . -2)) (26052 53498 464825 879000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -465) (undo-tree-id2653 . -1) (undo-tree-id2654 . -1) (undo-tree-id2656 . -1) (undo-tree-id2658 . -1) (undo-tree-id2660 . -1) (undo-tree-id2662 . -1) 466) ((465 . 466)) (26052 53498 431353 126000) 0 nil])
([nil nil ((#("world.push(Resources::)" 0 6 (fontified t) 6 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-2-face) fontified t) 11 20 (face font-lock-type-face fontified t) 20 22 (fontified t) 22 23 (face (rainbow-delimiters-depth-2-face) fontified t)) . 443) (undo-tree-id2425 . -15) (undo-tree-id2427 . -5) (undo-tree-id2429 . -5) (undo-tree-id2431 . -5) (undo-tree-id2433 . -5) (undo-tree-id2435 . -5) (undo-tree-id2437 . -5) (undo-tree-id2439 . -5) (undo-tree-id2441 . -5) (undo-tree-id2443 . -5) (undo-tree-id2445 . -5) (undo-tree-id2447 . -5) (undo-tree-id2449 . -5) (undo-tree-id2451 . -5) (undo-tree-id2453 . -5) (undo-tree-id2455 . -5) (undo-tree-id2457 . -5) (undo-tree-id2459 . -5) (undo-tree-id2461 . -5) (undo-tree-id2463 . -5) (undo-tree-id2465 . -5) (undo-tree-id2467 . -5) (undo-tree-id2469 . -5) (undo-tree-id2471 . -6) (undo-tree-id2473 . -6) (undo-tree-id2475 . -6) (undo-tree-id2477 . -6) (undo-tree-id2479 . -6) (undo-tree-id2481 . -6) (undo-tree-id2483 . -6) (undo-tree-id2485 . -6) (undo-tree-id2487 . -6) (undo-tree-id2489 . -6) (undo-tree-id2491 . -6) (undo-tree-id2493 . -6) (undo-tree-id2495 . -6) (undo-tree-id2497 . -6) (undo-tree-id2499 . -6) (undo-tree-id2501 . -6) (undo-tree-id2503 . -6) (undo-tree-id2505 . -6) (undo-tree-id2507 . -6) (undo-tree-id2509 . -6) (undo-tree-id2511 . -6) (undo-tree-id2513 . -6) (undo-tree-id2515 . -6) (undo-tree-id2517 . -6) (undo-tree-id2519 . -6) (undo-tree-id2521 . -6) (undo-tree-id2523 . -6) (undo-tree-id2525 . -6) (undo-tree-id2527 . -6) (undo-tree-id2529 . -6) (undo-tree-id2531 . -6) (undo-tree-id2533 . -6) (undo-tree-id2535 . -6) (undo-tree-id2537 . -6) (undo-tree-id2539 . -23) (undo-tree-id2541 . -11) (undo-tree-id2543 . -11) (undo-tree-id2545 . -11) (undo-tree-id2547 . -11) (undo-tree-id2549 . -11) (undo-tree-id2551 . -11) (undo-tree-id2553 . -11) (undo-tree-id2555 . -11) (undo-tree-id2557 . -11) (undo-tree-id2559 . -11) (undo-tree-id2561 . -11) (undo-tree-id2563 . -11) (undo-tree-id2565 . -11) (undo-tree-id2567 . -11) (undo-tree-id2569 . -11) (undo-tree-id2571 . -20) (undo-tree-id2573 . -20) (undo-tree-id2575 . -20) (undo-tree-id2577 . -20) (undo-tree-id2579 . -20) (undo-tree-id2581 . -20) (undo-tree-id2583 . -20) (undo-tree-id2585 . -20) (undo-tree-id2587 . -20) (undo-tree-id2589 . -20) (undo-tree-id2591 . -20) (undo-tree-id2593 . -14) (undo-tree-id2594 . -22) (undo-tree-id2596 . -14) (undo-tree-id2598 . -14) (undo-tree-id2600 . -14) (undo-tree-id2602 . -14) (undo-tree-id2604 . -14) (undo-tree-id2606 . -14) (undo-tree-id2608 . -14) (undo-tree-id2610 . -14) (undo-tree-id2612 . -14) (undo-tree-id2614 . -14) (undo-tree-id2616 . -14) (undo-tree-id2618 . -14) (undo-tree-id2619 . -15) (undo-tree-id2621 . -16) (undo-tree-id2623 . -20) (undo-tree-id2625 . -21) (undo-tree-id2627 . -22) (undo-tree-id2629 . -22) (undo-tree-id2631 . -22) (undo-tree-id2633 . -22) (undo-tree-id2635 . -22) (undo-tree-id2637 . -22) (undo-tree-id2639 . -22) (undo-tree-id2641 . -22) (undo-tree-id2643 . -22) (undo-tree-id2645 . -22) (undo-tree-id2647 . -22) (undo-tree-id2649 . -22) (undo-tree-id2651 . -23) (apply yas--snippet-revive 449 466 #s(yas--snippet nil (#s(yas--field 1 454 454 nil nil nil t #s(yas--exit 465 nil))) #s(yas--exit 465 nil) 13 nil #s(yas--field 1 454 454 nil nil nil t #s(yas--exit 465 nil)) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 454 454 nil nil nil t #s(yas--exit 465 nil))) #s(yas--exit 465 nil) 13 nil #s(yas--field 1 454 454 nil nil nil t #s(yas--exit 465 nil)) nil nil)) (443 . 466)) (26052 53498 388201 765000) 0 nil])
([nil nil ((#("let mut ens = vec![];" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 11 (face font-lock-variable-name-face fontified t) 11 14 (fontified t) 14 18 (face font-lock-preprocessor-face fontified t) 18 19 (face (rainbow-delimiters-depth-2-face) fontified t) 19 20 (face (rainbow-delimiters-depth-2-face) fontified t) 20 21 (fontified t)) . 720) (t 26052 53454 669833 275000)) ((720 . 741)) (26052 53498 361339 184000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -765) (undo-tree-id2825 . -1) (undo-tree-id2826 . -1) (undo-tree-id2828 . -1) (undo-tree-id2830 . -1) (undo-tree-id2832 . -1) (undo-tree-id2834 . -1) (undo-tree-id2836 . -1) (undo-tree-id2838 . -1) (undo-tree-id2840 . -1) (undo-tree-id2842 . -1) (undo-tree-id2844 . -1) (undo-tree-id2846 . -1) (undo-tree-id2848 . -1) (undo-tree-id2850 . -1) (undo-tree-id2852 . -1) (undo-tree-id2854 . -1) (undo-tree-id2856 . -1) (undo-tree-id2858 . -1) (undo-tree-id2860 . -1) (#("n" 0 1 (fontified t)) . -766) (undo-tree-id2862 . -1) (undo-tree-id2863 . -1) (undo-tree-id2865 . -1) (undo-tree-id2867 . -1) (undo-tree-id2869 . -1) (undo-tree-id2871 . -1) (undo-tree-id2873 . -1) (undo-tree-id2875 . -1) (undo-tree-id2877 . -1) (undo-tree-id2879 . -1) (undo-tree-id2881 . -1) (undo-tree-id2883 . -1) (undo-tree-id2885 . -1) (undo-tree-id2887 . -1) (undo-tree-id2889 . -1) (undo-tree-id2891 . -1) (undo-tree-id2893 . -1) (undo-tree-id2895 . -1) (#("s" 0 1 (fontified t)) . -767) (undo-tree-id2897 . -1) (undo-tree-id2898 . -1) (undo-tree-id2900 . -1) (undo-tree-id2902 . -1) (undo-tree-id2904 . -1) (undo-tree-id2906 . -1) (undo-tree-id2908 . -1) (undo-tree-id2910 . -1) (undo-tree-id2912 . -1) (undo-tree-id2914 . -1) (undo-tree-id2916 . -1) (undo-tree-id2918 . -1) (undo-tree-id2920 . -1) (undo-tree-id2922 . -1) (undo-tree-id2924 . -1) (undo-tree-id2926 . -1) (undo-tree-id2928 . -1) (#("." 0 1 (fontified t)) . -768) (undo-tree-id2930 . -1) (undo-tree-id2931 . -1) (undo-tree-id2933 . -1) (undo-tree-id2935 . -1) (undo-tree-id2937 . -1) (undo-tree-id2939 . -1) (undo-tree-id2941 . -1) (undo-tree-id2943 . -1) (undo-tree-id2945 . -1) (undo-tree-id2947 . -1) (undo-tree-id2949 . -1) (undo-tree-id2951 . -1) (undo-tree-id2953 . -1) (undo-tree-id2955 . -1) (undo-tree-id2957 . -1) (undo-tree-id2959 . -1) (#("p" 0 1 (fontified t)) . -769) (undo-tree-id2960 . -1) (undo-tree-id2961 . -1) (undo-tree-id2963 . -1) (undo-tree-id2965 . -1) (undo-tree-id2967 . -1) (undo-tree-id2969 . -1) (undo-tree-id2971 . -1) (undo-tree-id2973 . -1) (undo-tree-id2975 . -1) (undo-tree-id2977 . -1) (undo-tree-id2979 . -1) (undo-tree-id2981 . -1) (undo-tree-id2983 . -1) (undo-tree-id2985 . -1) (undo-tree-id2987 . -1) (#("u" 0 1 (fontified t)) . -770) (undo-tree-id2988 . -1) (undo-tree-id2989 . -1) (undo-tree-id2991 . -1) (undo-tree-id2993 . -1) (undo-tree-id2995 . -1) (undo-tree-id2997 . -1) (undo-tree-id2999 . -1) (undo-tree-id3001 . -1) (undo-tree-id3003 . -1) (undo-tree-id3005 . -1) (undo-tree-id3007 . -1) (undo-tree-id3009 . -1) (undo-tree-id3011 . -1) (undo-tree-id3013 . -1) (#("s" 0 1 (fontified t)) . -771) (undo-tree-id3014 . -1) (undo-tree-id3015 . -1) (undo-tree-id3017 . -1) (undo-tree-id3019 . -1) (undo-tree-id3021 . -1) (undo-tree-id3023 . -1) (undo-tree-id3025 . -1) (undo-tree-id3027 . -1) (undo-tree-id3029 . -1) (undo-tree-id3031 . -1) (undo-tree-id3033 . -1) (undo-tree-id3035 . -1) (undo-tree-id3037 . -1) (#("h" 0 1 (fontified t)) . -772) (undo-tree-id3038 . -1) (undo-tree-id3039 . -1) (undo-tree-id3041 . -1) (undo-tree-id3043 . -1) (undo-tree-id3045 . -1) (undo-tree-id3047 . -1) (undo-tree-id3049 . -1) (undo-tree-id3051 . -1) (undo-tree-id3053 . -1) (undo-tree-id3055 . -1) (undo-tree-id3057 . -1) (undo-tree-id3059 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -773) (undo-tree-id3060 . -1) (undo-tree-id3061 . -1) (undo-tree-id3063 . -1) (undo-tree-id3065 . -1) (undo-tree-id3067 . -1) (undo-tree-id3069 . -1) (undo-tree-id3071 . -1) (undo-tree-id3073 . -1) (undo-tree-id3075 . -1) (undo-tree-id3077 . -1) (#("v" 0 1 (fontified t)) . -774) (undo-tree-id3079 . -1) (undo-tree-id3080 . -1) (undo-tree-id3082 . -1) (undo-tree-id3084 . -1) (undo-tree-id3086 . -1) (undo-tree-id3088 . -1) (undo-tree-id3090 . -1) (undo-tree-id3092 . -1) (undo-tree-id3094 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -775) (undo-tree-id3096 . -1) 776 (t 26052 53458 163166 820000)) ((765 . 776)) (26052 53498 311864 883000) 0 nil])
([nil nil ((765 . 770)) ((#("llket" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . 765) (undo-tree-id3187 . -5) (undo-tree-id3188 . -5) (undo-tree-id3189 . -1) (undo-tree-id3190 . -1) (undo-tree-id3191 . -1) (undo-tree-id3192 . -1) (undo-tree-id3193 . -1) (undo-tree-id3194 . -1) (undo-tree-id3195 . -1) (undo-tree-id3196 . -1) (undo-tree-id3197 . -1) (undo-tree-id3198 . -1) (undo-tree-id3199 . -1) (undo-tree-id3200 . -1) (undo-tree-id3201 . -1) (undo-tree-id3202 . -1) (undo-tree-id3203 . -1) (undo-tree-id3204 . -1) (undo-tree-id3205 . -1) (undo-tree-id3206 . -1) (undo-tree-id3207 . -1) (undo-tree-id3208 . -1) (undo-tree-id3209 . -1) (undo-tree-id3210 . -1) (undo-tree-id3211 . -1) (undo-tree-id3212 . -1) (undo-tree-id3213 . -1) (undo-tree-id3214 . -1) (undo-tree-id3215 . -1) (undo-tree-id3216 . -1) (undo-tree-id3217 . -1) (undo-tree-id3218 . -1) (undo-tree-id3219 . -1) (undo-tree-id3220 . -1) (undo-tree-id3221 . -1)) (26052 53498 264502 430000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -766) (undo-tree-id2789 . -1) (undo-tree-id2791 . -1) (undo-tree-id2793 . -1) (undo-tree-id2795 . -1) (undo-tree-id2797 . -1) (undo-tree-id2799 . -1) (undo-tree-id2801 . -1) (undo-tree-id2803 . -1) (#("k" 0 1 (fontified t)) . -767) (undo-tree-id2804 . -1) (undo-tree-id2806 . -1) (undo-tree-id2808 . -1) (undo-tree-id2810 . -1) (undo-tree-id2812 . -1) (undo-tree-id2814 . -1) (#("e" 0 1 (fontified t)) . -768) (undo-tree-id2815 . -1) (undo-tree-id2817 . -1) (undo-tree-id2819 . -1) (undo-tree-id2821 . -1) (#("t" 0 1 (fontified t)) . -769) (undo-tree-id2822 . -1) (undo-tree-id2824 . -1) 770) ((766 . 770)) (26052 53498 231123 550000) 0 nil])
([nil nil ((766 . 770)) ((#("et 1" 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t) 3 4 (face font-lock-variable-name-face fontified t)) . 766) (undo-tree-id3152 . -4) (undo-tree-id3153 . -4) (undo-tree-id3154 . -3) (undo-tree-id3155 . -3) (undo-tree-id3156 . -3) (undo-tree-id3157 . -3) (undo-tree-id3158 . -3) (undo-tree-id3159 . -3) (undo-tree-id3160 . -3) (undo-tree-id3161 . -3) (undo-tree-id3162 . -3) (undo-tree-id3163 . -3) (undo-tree-id3164 . -3) (undo-tree-id3165 . -3) (undo-tree-id3166 . -3) (undo-tree-id3167 . -3) (undo-tree-id3168 . -3) (undo-tree-id3169 . -3) (undo-tree-id3170 . -3) (undo-tree-id3171 . -3) (undo-tree-id3172 . -3) (undo-tree-id3173 . -3) (undo-tree-id3174 . -3) (undo-tree-id3175 . -3) (undo-tree-id3176 . -3) (undo-tree-id3177 . -3) (undo-tree-id3178 . -3) (undo-tree-id3179 . -3) (undo-tree-id3180 . -3) (undo-tree-id3181 . -3) (undo-tree-id3182 . -3) (undo-tree-id3183 . -3) (undo-tree-id3184 . -3) (undo-tree-id3185 . -3) (undo-tree-id3186 . -3)) (26052 53498 186950 373000) 0 nil])
([nil nil ((#("1" 0 1 (face font-lock-variable-name-face fontified t)) . -769) (undo-tree-id2786 . -1) (undo-tree-id2788 . -1) 770) ((769 . 770)) (26052 53498 150713 589000) 0 nil])
([nil nil ((769 . 775)) ((#("x = 1 " 0 1 (face font-lock-variable-name-face fontified t) 1 5 (fontified t) 5 6 (fontified t)) . 769) (undo-tree-id3140 . -6) (undo-tree-id3141 . -6) (undo-tree-id3142 . 6) (undo-tree-id3143 . -5) (undo-tree-id3144 . -5) (undo-tree-id3145 . -5) (undo-tree-id3146 . -5) (undo-tree-id3147 . -5) (undo-tree-id3148 . -5) (undo-tree-id3149 . -5) (undo-tree-id3150 . -5) (undo-tree-id3151 . -5)) (26052 53498 109614 618000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -774) (undo-tree-id2783 . -1) (undo-tree-id2785 . -1) 775) ((774 . 775)) (26052 53498 70214 638000) 0 nil])
([nil nil ((774 . 777)) ((#("; 1" 0 2 (fontified t) 2 3 (fontified t)) . 774) (undo-tree-id3129 . -3) (undo-tree-id3130 . -3) (undo-tree-id3131 . -2) (undo-tree-id3132 . -2) (undo-tree-id3133 . -2) (undo-tree-id3134 . -2) (undo-tree-id3135 . -2) (undo-tree-id3136 . -2) (undo-tree-id3137 . -2) (undo-tree-id3138 . -2) (undo-tree-id3139 . -2)) (26052 53498 33317 587000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . -776) (undo-tree-id2780 . -1) (undo-tree-id2782 . -1) 777) ((776 . 777)) (26052 53497 372886 99000) 0 nil])
([nil nil ((776 . 777)) ((#("X" 0 1 (face font-lock-type-face fontified t)) . 776) (undo-tree-id3122 . -1) (undo-tree-id3123 . -1) (undo-tree-id3124 . -1) (undo-tree-id3125 . -1) (undo-tree-id3126 . -1) (undo-tree-id3127 . -1) (undo-tree-id3128 . -1)) (26052 53496 111546 386000) 0 nil])
([nil nil ((#("X" 0 1 (face font-lock-type-face fontified t)) . -776) (undo-tree-id2777 . -1) (undo-tree-id2779 . -1) 777) ((776 . 777)) (26052 53495 793388 29000) 0 nil])
([nil nil ((776 . 780)) ((#("x+=1" 0 4 (fontified t)) . 776) (undo-tree-id3119 . -4) (undo-tree-id3120 . -4) (undo-tree-id3121 . -4)) (26052 53495 616127 265000) 0 nil])
([nil nil ((780 . 781) (t 26052 53473 319834 396000)) ((#(";" 0 1 (fontified t)) . 780)) (26052 53495 421340 449000) 0 nil])
([nil nil ((769 . 773) (t 26052 53474 526501 135000)) ((#("mut " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . 769) (undo-tree-id3098 . -4) (undo-tree-id3099 . -4) (undo-tree-id3100 . -4) (undo-tree-id3101 . -4) (undo-tree-id3102 . -4) (undo-tree-id3103 . -4) (undo-tree-id3104 . -4) (undo-tree-id3105 . -4) (undo-tree-id3106 . -4) (undo-tree-id3107 . -4) (undo-tree-id3108 . -4) (undo-tree-id3109 . -4) (undo-tree-id3110 . -4) (undo-tree-id3111 . -4) (undo-tree-id3112 . -4) (undo-tree-id3113 . -4) (undo-tree-id3114 . -4) (undo-tree-id3115 . -4) (undo-tree-id3116 . -4) (undo-tree-id3117 . -4) (undo-tree-id3118 . -4) (t 26052 53479 809834 791000)) (26052 53479 797969 839000) 0 nil])
nil
