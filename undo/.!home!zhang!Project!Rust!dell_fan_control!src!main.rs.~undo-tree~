(undo-tree-save-format-version . 1)
"61fd1573e458b2090dff7506b84a40f181c41863"
[nil nil nil nil (26131 65001 442645 927000) 0 nil]
([nil nil ((1 . 3) (t 26131 64881 897086 940000)) nil (26131 65001 442645 46000) 0 nil])
([nil nil ((1 . 3)) nil (26131 65001 442644 165000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (#("s" 0 1 (fontified t)) . -2) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) 3) nil (26131 65001 442642 964000) 0 nil])
([nil nil ((14 . 19)) nil (26131 65001 442633 21000) 0 nil])
([nil nil ((19 . 21)) nil (26131 65001 442632 397000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -19) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (#("s" 0 1 (fontified t)) . -20) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) 21) nil (26131 65001 442631 236000) 0 nil])
([nil nil ((19 . 21)) nil (26131 65001 442619 775000) 0 nil])
([nil nil ((19 . 37) (#("tr" 0 2 (fontified nil)) . 19) (19 . 21) (#("tracing_subscriber" 0 18 (fontified nil)) . -19) (19 . 37) (#("tr" 0 2 (fontified t)) . -19) (undo-tree-id43 . -2) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -2) (undo-tree-id47 . -2) (undo-tree-id48 . -2) (undo-tree-id49 . -2) (undo-tree-id50 . -2) 21) nil (26131 65001 442618 566000) 0 nil])
([nil nil ((37 . 38)) nil (26131 65001 442612 791000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -37) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) 38) nil (26131 65001 442611 676000) 0 nil])
([nil nil ((#("tracing_subscriber" 0 18 (fontified t)) . 19) (undo-tree-id27 . -18) (undo-tree-id28 . -18) (undo-tree-id29 . -18) (undo-tree-id30 . -18) (undo-tree-id31 . -18) (undo-tree-id32 . -18) (undo-tree-id33 . -18) (undo-tree-id34 . -18) (undo-tree-id35 . -18) (undo-tree-id36 . -18) (undo-tree-id37 . -18)) nil (26131 65001 442608 13000) 0 nil])
([nil nil ((1 . 6)) nil (26131 65001 442601 367000) 0 nil])
([nil nil ((5 . 23) (#("t" 0 1 (fontified nil)) . 5) (5 . 6) (#("tracing_subscriber" 0 18 (fontified nil)) . -5) (5 . 23) (#("t" 0 1 (face font-lock-constant-face fontified t)) . -5) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) 6) nil (26131 65001 442600 61000) 0 nil])
([nil nil ((23 . 24)) nil (26131 65001 442595 628000) 0 nil])
([nil nil ((42 . 44)) nil (26131 65001 442595 60000) 0 nil])
([nil nil ((42 . 60) (#("tr" 0 2 (fontified nil)) . 42) (42 . 44) (#("tracing_subscriber" 0 18 (fontified nil)) . -42) (42 . 60) (#("tr" 0 2 (fontified t)) . -42) (undo-tree-id13 . -2) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -2) (undo-tree-id17 . -2) (undo-tree-id18 . -2) (undo-tree-id19 . -2) (undo-tree-id20 . -2) 44) nil (26131 65001 442593 906000) 0 nil])
([nil nil ((60 . 63)) nil (26131 65001 442587 736000) 0 nil])
([nil nil ((62 . 65) (#("f" 0 1 (fontified nil)) . 62) (62 . 63) (#("fmt" 0 3 (fontified nil)) . -62) (62 . 65) (#("f" 0 1 (fontified t)) . -62) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) 63) nil (26131 65001 442586 393000) 0 nil])
([nil nil ((65 . 68)) nil (26131 65001 442581 13000) 0 nil])
([nil nil ((apply yas--snippet-revive 67 73 #s(yas--snippet nil nil #s(yas--exit 73 nil) 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 73 nil) 0 nil nil nil nil)) (67 . 73) (#("init()$0" 0 8 (fontified nil)) . 67) (67 . 75) (#("i" 0 1 (fontified nil)) . 67) (67 . 68) (#("init()" 0 6 (fontified nil)) . -67) (67 . 73) (#("i" 0 1 (fontified t)) . -67) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) 68) nil (26131 65001 442578 698000) 0 nil])
([nil nil ((73 . 74)) nil (26131 65001 442553 462000) 0 nil])
([nil nil ((25 . 31) (t 26131 65001 483760 947000)) nil (26131 65008 669488 508000) 0 nil])
([nil nil ((29 . 36) (#("tr" 0 2 (fontified nil)) . 29) (29 . 31) (#("tracing" 0 7 (fontified nil)) . -29) (29 . 36) (#("tr" 0 2 (face font-lock-constant-face fontified t)) . -29) (undo-tree-id93 . -2) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -2) (undo-tree-id98 . -2) 31) nil (26131 65008 669487 203000) 0 nil])
([nil nil ((36 . 39)) nil (26131 65008 669481 975000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -38) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) 39) nil (26131 65008 669480 888000) 0 nil])
([nil nil ((38 . 41)) nil (26131 65008 669477 147000) 0 nil])
([nil nil ((38 . 42) (#("inf" 0 3 (fontified nil)) . 38) (38 . 41) (#("info" 0 4 (fontified nil)) . -38) (38 . 42) (#("inf" 0 3 (fontified t)) . -38) (undo-tree-id83 . -3) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -2) (undo-tree-id87 . -3) (undo-tree-id88 . -3) 41) nil (26131 65008 669474 956000) 0 nil])
([nil nil ((42 . 43)) nil (26131 65008 669460 606000) 0 nil])
([nil nil ((43 . 45) (t 26131 65008 677094 722000)) nil (26131 65009 620893 19000) 0 nil])
([nil nil ((99 . 100) (t 26131 65009 630428 114000)) nil (26131 65014 745968 207000) 0 nil])
([nil nil ((#("println!(\"Hello, world!\");" 0 8 (face rust-builtin-formatting-macro fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t) 9 24 (face font-lock-string-face fontified t) 24 25 (face (rainbow-delimiters-depth-2-face) fontified t) 25 26 (fontified t)) . 100) (undo-tree-id99 . -26)) nil (26131 65014 745966 43000) 0 nil])
([nil nil ((100 . 104)) nil (26131 65014 745957 930000) 0 nil])
([nil nil ((104 . 105) (t 26131 65014 753761 762000)) nil (26131 65194 216719 765000) 0 nil])
([nil nil ((apply yas--snippet-revive 104 125 #s(yas--snippet nil nil #s(yas--exit 119 nil) 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 119 nil) 1 nil nil nil nil)) (104 . 125) (#("loop {
        $0
    }" 0 23 (fontified nil)) . 104) (122 . 126) (111 . 119) (#("    " 0 4 (fontified nil)) . 111) (104 . 119) (#("l" 0 1 (fontified nil)) . 104) (104 . 105) (#("loop" 0 4 (fontified nil)) . -104) (104 . 108) (#("l" 0 1 (fontified t)) . -104) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) 105) nil (26131 65194 216717 228000) 0 nil])
([nil nil ((119 . 122)) nil (26131 65194 216708 670000) 0 nil])
([nil nil ((apply yas--snippet-revive 119 126 #s(yas--snippet nil nil #s(yas--exit 125 nil) 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 125 nil) 2 nil nil nil nil)) (119 . 126) (#("info!($0)" 0 9 (fontified nil)) . 119) (119 . 128) (#("inf" 0 3 (fontified nil)) . 119) (119 . 122) (#("info!(…)" 0 8 (fontified nil)) . -119) (119 . 127) (#("inf" 0 3 (fontified t)) . -119) (undo-tree-id117 . -3) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -2) (undo-tree-id121 . -2) (undo-tree-id122 . -2) (undo-tree-id123 . -2) (undo-tree-id124 . -3) (undo-tree-id125 . -3) (undo-tree-id126 . -3) (undo-tree-id127 . -3) (undo-tree-id128 . -3) 122) nil (26131 65194 216706 303000) 0 nil])
([nil nil ((110 . 119)) nil (26131 65194 216662 985000) 0 nil])
([nil nil ((119 . 127)) nil (26131 65194 216661 822000) 0 nil])
([nil nil ((124 . 130) (#("thr" 0 3 (fontified nil)) . 124) (124 . 127) (#("thread" 0 6 (fontified nil)) . -124) (124 . 130) (#("thr" 0 3 (fontified t)) . -124) (undo-tree-id110 . -3) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -2) (undo-tree-id114 . -2) (undo-tree-id115 . -3) (undo-tree-id116 . -3) 127) nil (26131 65194 216660 452000) 0 nil])
([nil nil ((130 . 133)) nil (26131 65194 216651 357000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 138 157 nil nil nil t #s(yas--exit 158 nil))) #s(yas--exit 158 nil) 3 nil #s(yas--field 1 138 157 nil nil nil t #s(yas--exit 158 nil)) nil nil)) (132 . 142) (#("sleep(${1:dur})$0" 0 17 (fontified nil)) . 132) (132 . 149) (#("s" 0 1 (fontified nil)) . 132) (132 . 133) (#("sleep(…)" 0 8 (fontified nil)) . -132) (132 . 140) (#("s" 0 1 (fontified t)) . -132) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) 133) nil (26131 65194 216649 422000) 0 nil])
([nil nil ((139 . 144) (#("dur" 0 3 (fontified nil)) . 139) (undo-tree-id103 . -3) (138 . 139)) nil (26131 65194 216640 210000) 0 nil])
([nil nil ((144 . 149)) nil (26131 65194 216637 867000) 0 nil])
([nil nil ((149 . 157) (#("Duration" 0 8 (fontified nil)) . -149) (undo-tree-id102 . -8) (149 . 157)) nil (26131 65194 216636 669000) 0 nil])
([nil nil ((apply yas--snippet-revive 132 158 #s(yas--snippet nil (#s(yas--field 1 138 157 nil nil nil t #s(yas--exit 158 nil))) #s(yas--exit 158 nil) 3 nil #s(yas--field 1 138 157 nil nil nil t #s(yas--exit 158 nil)) nil nil))) nil (26131 65194 216634 235000) 0 nil])
([nil nil ((44 . 60)) nil (26131 65194 216633 330000) 0 nil])
([nil nil ((59 . 67) (#("D" 0 1 (fontified nil)) . 59) (59 . 60) (#("Duration" 0 8 (fontified nil)) . -59) (59 . 67) (#("D" 0 1 (face font-lock-type-face fontified t)) . -59) (undo-tree-id100 . -1) (undo-tree-id101 . -1) 60) nil (26131 65194 216630 194000) 0 nil])
([nil nil ((67 . 68)) nil (26131 65194 216561 391000) 0 nil])
([nil nil ((#("Duration" 0 8 (face font-lock-type-face fontified t)) . -173) (undo-tree-id201 . -8) (undo-tree-id202 . -8) 181 (t 26131 65194 240439 446000)) nil (26131 65207 444140 719000) 0 nil])
([nil nil ((#("time::" 0 4 (face font-lock-constant-face fontified t) 4 6 (fontified t)) . -167) (undo-tree-id196 . -6) (undo-tree-id197 . -4) (undo-tree-id198 . -6) (undo-tree-id199 . -6) (undo-tree-id200 . -6) 173) nil (26131 65207 444138 345000) 0 nil])
([nil nil ((#("std::" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t)) . -162) (undo-tree-id187 . -3) (undo-tree-id188 . -5) (undo-tree-id189 . -3) (undo-tree-id190 . -5) (undo-tree-id191 . -5) (undo-tree-id192 . -5) (undo-tree-id193 . -5) (undo-tree-id194 . -5) (undo-tree-id195 . -5) 167) nil (26131 65207 444134 395000) 0 nil])
([nil nil ((162 . 163)) nil (26131 65207 444125 931000) 0 nil])
([nil nil ((162 . 170) (#("D" 0 1 (fontified nil)) . 162) (162 . 163) (#("Duration" 0 8 (fontified nil)) . -162) (162 . 170) (#("D" 0 1 (face font-lock-type-face fontified t)) . -162) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) 163) nil (26131 65207 444123 703000) 0 nil])
([nil nil ((170 . 175)) nil (26131 65207 444109 678000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -173) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (#("r" 0 1 (face font-lock-keyword-face fontified t)) . -174) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) 175) nil (26131 65207 444108 522000) 0 nil])
([nil nil ((173 . 176)) nil (26131 65207 444100 749000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 182 183 nil nil nil t #s(yas--exit 184 nil))) #s(yas--exit 184 nil) 4 nil #s(yas--field 1 182 183 nil nil nil t #s(yas--exit 184 nil)) nil nil)) (172 . 187) (#("from_secs(${1:secs})$0" 0 22 (fontified nil)) . 172) (172 . 194) (#("from" 0 4 (fontified nil)) . 172) (172 . 176) (#("from_secs(…)" 0 12 (fontified nil)) . -172) (172 . 184) (#("from" 0 4 (fontified t)) . -172) (undo-tree-id135 . -4) (undo-tree-id136 . -4) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -2) (undo-tree-id151 . -2) (undo-tree-id152 . -3) (undo-tree-id153 . -3) (undo-tree-id154 . -4) (undo-tree-id155 . -4) (undo-tree-id156 . -4) (undo-tree-id157 . -4) (undo-tree-id158 . -4) (undo-tree-id159 . -4) (undo-tree-id160 . -4) (undo-tree-id161 . -4) (undo-tree-id162 . -4) 176) nil (26131 65207 444098 487000) 0 nil])
([nil nil ((#("secs" 0 4 (fontified nil)) . 183) (undo-tree-id134 . -4) (182 . 183)) nil (26131 65207 444079 904000) 0 nil])
([nil nil ((apply yas--snippet-revive 172 184 #s(yas--snippet nil (#s(yas--field 1 182 183 nil nil nil t #s(yas--exit 184 nil))) #s(yas--exit 184 nil) 4 nil #s(yas--field 1 182 183 nil nil nil t #s(yas--exit 184 nil)) nil nil))) nil (26131 65207 444073 624000) 0 nil])
([nil nil ((185 . 186)) nil (26131 65207 444069 485000) 0 nil])
([nil nil ((188 . 196) (#("        " 0 8 (fontified nil)) . 187) (undo-tree-id246 . -8) (undo-tree-id247 . -8) (195 . 196) (t 26131 65207 443773 590000)) nil (26131 65250 187327 33000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 187) (undo-tree-id244 . 1) (undo-tree-id245 . -1)) nil (26131 65250 187323 340000) 0 nil])
([nil nil ((202 . 203)) nil (26131 65250 187320 510000) 0 nil])
([nil nil ((201 . 203)) nil (26131 65250 187319 701000) 0 nil])
([nil nil ((69 . 71)) nil (26131 65250 187318 766000) 0 nil])
([nil nil ((69 . 73)) nil (26131 65250 187318 4000) 0 nil])
([nil nil ((73 . 74)) nil (26131 65250 187317 176000) 0 nil])
([nil nil ((73 . 80) (#("s" 0 1 (fontified nil)) . 73) (73 . 74) (#("sensors" 0 7 (fontified nil)) . -73) (73 . 80) (#("s" 0 1 (face font-lock-constant-face fontified t)) . -73) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) 74) nil (26131 65250 187315 237000) 0 nil])
([nil nil ((80 . 83)) nil (26131 65250 187306 534000) 0 nil])
([nil nil ((82 . 89) (#("S" 0 1 (fontified nil)) . 82) (82 . 83) (#("Sensors" 0 7 (fontified nil)) . -82) (82 . 89) (#("S" 0 1 (face font-lock-type-face fontified t)) . -82) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) 83) nil (26131 65250 187304 993000) 0 nil])
([nil nil ((89 . 90)) nil (26131 65250 187299 486000) 0 nil])
([nil nil ((143 . 147) (#("    " 0 4 (fontified nil)) . 142) (undo-tree-id219 . -4) (undo-tree-id220 . -4) (undo-tree-id221 . -4) (undo-tree-id222 . -4) (undo-tree-id223 . -4) (undo-tree-id224 . -4) (undo-tree-id225 . -4) (undo-tree-id226 . -4) (undo-tree-id227 . -4) (undo-tree-id228 . -4) (undo-tree-id229 . -4) (undo-tree-id230 . -4) (undo-tree-id231 . -4) (undo-tree-id232 . -4) (146 . 147)) nil (26131 65250 187297 666000) 0 nil])
([nil nil ((142 . 146)) nil (26131 65250 187282 258000) 0 nil])
([nil nil ((146 . 149)) nil (26131 65250 187281 159000) 0 nil])
([nil nil ((143 . 147) (#("    " 0 4 (fontified nil)) . 142) (undo-tree-id214 . -4) (undo-tree-id215 . -4) (undo-tree-id216 . -4) (undo-tree-id217 . -4) (undo-tree-id218 . -4) (146 . 147)) nil (26131 65250 187279 822000) 0 nil])
([nil nil ((150 . 162)) nil (26131 65250 187272 646000) 0 nil])
([nil nil ((161 . 168) (#("S" 0 1 (fontified nil)) . 161) (161 . 162) (#("Sensors" 0 7 (fontified nil)) . -161) (161 . 168) (#("S" 0 1 (face font-lock-type-face fontified t)) . -161) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) 162) nil (26131 65250 187270 392000) 0 nil])
([nil nil ((168 . 171)) nil (26131 65250 187259 933000) 0 nil])
([nil nil ((apply yas--snippet-revive 170 175 #s(yas--snippet nil nil #s(yas--exit 175 nil) 5 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 175 nil) 5 nil nil nil nil)) (170 . 175) (#("new()$0" 0 7 (fontified nil)) . 170) (170 . 177) (#("n" 0 1 (fontified nil)) . 170) (170 . 171) (#("new()" 0 5 (fontified nil)) . -170) (170 . 175) (#("n" 0 1 (fontified t)) . -170) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) 171) nil (26131 65250 187256 686000) 0 nil])
([nil nil ((175 . 176)) nil (26131 65250 187240 28000) 0 nil])
([nil nil ((92 . 93) (t 26131 65250 197109 548000)) nil (26131 65375 650401 385000) 0 nil])
([nil nil ((92 . 101)) nil (26131 65375 650400 736000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-unmatched-face) fontified t)) . -98) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (#("v" 0 1 (fontified t)) . -99) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (#("a" 0 1 (fontified t)) . -100) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) 101) nil (26131 65375 650399 266000) 0 nil])
([nil nil ((98 . 100)) nil (26131 65375 650386 653000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-unmatched-face) fontified t)) . -98) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (#("_" 0 1 (fontified t)) . -99) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) 100) nil (26131 65375 650385 213000) 0 nil])
([nil nil ((98 . 100)) nil (26131 65375 650159 952000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-unmatched-face) fontified t)) . -98) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (#("v" 0 1 (fontified t)) . -99) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) 100) nil (26131 65375 650158 962000) 0 nil])
([nil nil ((98 . 103)) nil (26131 65375 650152 137000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -102) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) 103) nil (26131 65375 650151 151000) 0 nil])
([nil nil ((102 . 104)) nil (26131 65375 650146 433000) 0 nil])
([nil nil ((104 . 106)) nil (26131 65375 650145 939000) 0 nil])
([nil nil ((105 . 107)) nil (26131 65375 650145 471000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -106) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) 107) nil (26131 65375 650144 776000) 0 nil])
([nil nil ((106 . 114)) nil (26131 65375 650141 562000) 0 nil])
([nil nil ((114 . 115)) nil (26131 65375 650141 91000) 0 nil])
([nil nil ((114 . 121) (#("S" 0 1 (fontified nil)) . 114) (114 . 115) (#("Sensors" 0 7 (fontified nil)) . -114) (114 . 121) (#("S" 0 1 (face font-lock-type-face fontified t)) . -114) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) 115) nil (26131 65375 650140 15000) 0 nil])
([nil nil ((122 . 132)) nil (26131 65375 650052 579000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . 132) (132 . 136) (131 . 133)) nil (26131 65375 650051 940000) 0 nil])
([nil nil ((132 . 136)) nil (26131 65375 650051 265000) 0 nil])
([nil nil ((136 . 137)) nil (26131 65375 650050 766000) 0 nil])
([nil nil ((136 . 143) (#("s" 0 1 (fontified nil)) . 136) (136 . 137) (#("sensors" 0 7 (fontified nil)) . -136) (136 . 143) (#("s" 0 1 (fontified t)) . -136) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) 137) nil (26131 65375 650049 632000) 0 nil])
([nil nil ((#("sensors" 0 7 (fontified t)) . -136) (undo-tree-id387 . -7) (undo-tree-id388 . -7) (undo-tree-id389 . -7) (undo-tree-id390 . -7) 143) nil (26131 65375 650045 222000) 0 nil])
([nil nil ((136 . 143)) nil (26131 65375 650042 271000) 0 nil])
([nil nil ((#("j" 0 1 (face font-lock-variable-name-face fontified t)) . -141) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (#("h" 0 1 (face font-lock-variable-name-face fontified t)) . -142) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) 143) nil (26131 65375 650041 190000) 0 nil])
([nil nil ((141 . 149)) nil (26131 65375 650033 345000) 0 nil])
([nil nil ((148 . 155) (#("s" 0 1 (fontified nil)) . 148) (148 . 149) (#("sensors" 0 7 (fontified nil)) . -148) (148 . 155) (#("s" 0 1 (fontified t)) . -148) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) 149) nil (26131 65375 650032 247000) 0 nil])
([nil nil ((155 . 158)) nil (26131 65375 650027 199000) 0 nil])
([nil nil ((159 . 163) (#("        " 0 8 (fontified nil)) . 158) (158 . 166) (#("    " 0 4 (fontified nil)) . 158) (undo-tree-id365 . -4) (undo-tree-id366 . -4) (undo-tree-id367 . -4) (undo-tree-id368 . -4) (157 . 163)) nil (26131 65375 650026 152000) 0 nil])
([nil nil ((158 . 166)) nil (26131 65375 650022 524000) 0 nil])
([nil nil ((nil rear-nonsticky nil 573 . 574) (nil fontified nil 166 . 574) (166 . 574)) nil (26131 65375 650021 908000) 0 nil])
([nil nil ((597 . 605) (#("    " 0 4 (fontified t)) . 597) (undo-tree-id363 . -3) (591 . 595) (504 . 520) (#("            " 0 12 (fontified t)) . 504) (436 . 452) (#("            " 0 12 (fontified t)) . 436) (undo-tree-id364 . -1) (404 . 408) (353 . 357) (292 . 296) (254 . 262) (#("    " 0 4 (fontified t)) . 254) (209 . 217) (#("    " 0 4 (fontified t)) . 209) (#("    " 0 4 (fontified t)) . -166) 92) nil (26131 65375 650020 103000) 0 nil])
([nil nil ((91 . 92)) nil (26131 65375 650016 616000) 0 nil])
([nil nil ((92 . 95)) nil (26131 65375 650016 88000) 0 nil])
([nil nil ((94 . 101)) nil (26131 65375 650015 387000) 0 nil])
([nil nil ((#("#[instrum]" 0 1 (face font-lock-preprocessor-face fontified t) 1 2 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t) 2 9 (face font-lock-preprocessor-face fontified t) 9 10 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t)) . 92) (undo-tree-id312 . -5) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -2) (undo-tree-id323 . -2) (undo-tree-id324 . -10) (undo-tree-id325 . -10) (undo-tree-id326 . -10) (undo-tree-id327 . -2) (undo-tree-id328 . -3) (undo-tree-id329 . -3) (undo-tree-id330 . -3) (undo-tree-id331 . -4) (undo-tree-id332 . -4) (undo-tree-id333 . -5) (undo-tree-id334 . -5) (undo-tree-id335 . -5) (undo-tree-id336 . -5) (undo-tree-id337 . -5) (undo-tree-id338 . -5) (undo-tree-id339 . -5) (undo-tree-id340 . -5) (undo-tree-id341 . -6) (undo-tree-id342 . -6) (undo-tree-id343 . -7) (undo-tree-id344 . -7) (undo-tree-id345 . -7) (undo-tree-id346 . -7) (undo-tree-id347 . -7) (undo-tree-id348 . -7) (undo-tree-id349 . -7) (undo-tree-id350 . -7) (undo-tree-id351 . -7) (undo-tree-id352 . -7) (undo-tree-id353 . -7) (undo-tree-id354 . -8) (undo-tree-id355 . -8) (undo-tree-id356 . -9) (undo-tree-id357 . -9) (undo-tree-id358 . 1) (undo-tree-id359 . -9) (undo-tree-id360 . -9) (undo-tree-id361 . -9) (undo-tree-id362 . -10)) nil (26131 65375 650012 864000) 0 nil])
([nil nil ((23 . 28)) nil (26131 65375 649846 667000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -23) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (#(":" 0 1 (fontified t)) . -24) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (#("i" 0 1 (fontified t)) . -25) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -26) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (#("s" 0 1 (fontified t)) . -27) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) 28) nil (26131 65375 649840 334000) 0 nil])
([nil nil ((92 . 93) (t 26131 65375 690450 585000)) nil (26131 65386 453729 395000) 0 nil])
([nil nil ((93 . 95)) nil (26131 65386 453728 553000) 0 nil])
([nil nil ((94 . 96)) nil (26131 65386 453727 911000) 0 nil])
([nil nil ((94 . 101) (#("tr" 0 2 (fontified nil)) . 94) (94 . 96) (#("tracing" 0 7 (fontified nil)) . -94) (94 . 101) (#("tr" 0 2 (face font-lock-preprocessor-face fontified t)) . -94) (undo-tree-id462 . -2) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -2) (undo-tree-id467 . -2) 96) nil (26131 65386 453726 583000) 0 nil])
([nil nil ((101 . 105)) nil (26131 65386 453720 424000) 0 nil])
([nil nil ((103 . 113) (#("im" 0 2 (fontified nil)) . 103) (103 . 105) (#("instrument" 0 10 (fontified nil)) . -103) (103 . 113) (#("im" 0 2 (face font-lock-preprocessor-face fontified t)) . -103) (undo-tree-id454 . -2) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -2) (undo-tree-id459 . -2) (undo-tree-id460 . -2) (undo-tree-id461 . -2) 105) nil (26131 65386 453716 477000) 0 nil])
([nil nil ((#("println" 0 7 (face rust-builtin-formatting-macro fontified t)) . 240) (undo-tree-id468 . -7) (t 26131 65386 463784 580000)) nil (26131 65395 836357 360000) 0 nil])
([nil nil ((240 . 244)) nil (26131 65395 836347 93000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -146) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (#(">" 0 1 (syntax-table (1) fontified t)) . -147) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (#(" " 0 1 (fontified t)) . -148) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (#("f" 0 1 (fontified t)) . -149) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (#("3" 0 1 (fontified t)) . -150) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (#("2" 0 1 (face font-lock-type-face fontified t)) . -151) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (#(" " 0 1 (fontified t)) . -152) (undo-tree-id523 . -1) (undo-tree-id524 . -1) 153 (t 26131 65395 877118 491000)) nil (26131 65403 159581 177000) 0 nil])
([nil nil ((#("p" 0 1 (face rust-builtin-formatting-macro fontified t)) . 370) (t 26131 65403 160452 271000)) nil (26131 65410 223761 694000) 0 nil])
([nil nil ((#("rintln" 0 6 (face font-lock-preprocessor-face fontified t)) . 370) (undo-tree-id525 . -6)) nil (26131 65410 223759 604000) 0 nil])
([nil nil ((370 . 374)) nil (26131 65410 223750 773000) 0 nil])
([nil nil ((#("println" 0 7 (face rust-builtin-formatting-macro fontified t)) . 530) (undo-tree-id543 . -7) (t 26131 65410 267119 374000)) nil (26131 65413 258018 820000) 0 nil])
([nil nil ((530 . 535)) nil (26131 65413 258017 51000) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-preprocessor-face fontified t)) . -533) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (#("o" 0 1 (face font-lock-preprocessor-face fontified t)) . -534) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) 535) nil (26131 65413 258014 490000) 0 nil])
([nil nil ((533 . 534)) nil (26131 65413 257885 70000) 0 nil])
([nil nil ((#("info!(\"\");" 0 5 (face font-lock-preprocessor-face fontified t) 5 6 (face (rainbow-delimiters-depth-3-face) fontified t) 6 8 (face font-lock-string-face fontified t) 8 9 (face (rainbow-delimiters-depth-3-face) fontified t) 9 10 (fontified t)) . 783) (undo-tree-id551 . -10) (undo-tree-id552 . -10) (t 26131 65413 270452 892000)) nil (26131 65418 386627 234000) 0 nil])
([nil nil ((783 . 785)) nil (26131 65418 386623 94000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 793 800 nil nil nil nil #s(yas--exit 801 nil))) #s(yas--exit 801 nil) 6 nil #s(yas--field 1 793 800 nil nil nil nil #s(yas--exit 801 nil)) nil nil)) (783 . 801) (#("get_value(${1:sensors})$0" 0 25 (fontified nil)) . 783) (783 . 808) (#("ge" 0 2 (fontified nil)) . 783) (783 . 785) (#("get_value(…)" 0 12 (fontified nil)) . -783) (783 . 795) (#("ge" 0 2 (fontified t)) . -783) (undo-tree-id544 . -2) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -2) (undo-tree-id548 . -2) (undo-tree-id549 . -2) (undo-tree-id550 . -2) 785) nil (26131 65418 386619 113000) 0 nil])
([nil nil ((apply yas--snippet-revive 783 801 #s(yas--snippet nil (#s(yas--field 1 793 800 nil nil nil nil #s(yas--exit 801 nil))) #s(yas--exit 801 nil) 6 nil #s(yas--field 1 793 800 nil nil nil nil #s(yas--exit 801 nil)) nil nil))) nil (26131 65419 854080 587000) 0 nil])
([nil nil ((801 . 802) (t 26131 65418 397119 873000)) nil (26131 65419 854076 852000) 0 nil])
([nil nil ((#("for feature in chip {" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 11 (face font-lock-variable-name-face fontified t) 11 12 (fontified t) 12 14 (face font-lock-keyword-face fontified t) 14 20 (fontified t) 20 21 (face (rainbow-delimiters-depth-3-face) fontified t)) . 275) (undo-tree-id703 . -19) (undo-tree-id704 . -19) (undo-tree-id705 . -19) (undo-tree-id706 . -19) (undo-tree-id707 . -19) (undo-tree-id708 . -19) (undo-tree-id709 . -19) (undo-tree-id710 . -19) (undo-tree-id711 . -21) (t 26131 65419 863786 630000)) nil (26132 146 822859 609000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 275) (undo-tree-id702 . -1)) nil (26132 146 822853 135000) 0 nil])
([nil nil ((#("            let label = feature.get_label().expect(\"label\");" 0 12 (fontified t) 12 15 (face font-lock-keyword-face fontified t) 15 16 (fontified t) 16 21 (face font-lock-variable-name-face fontified t) 21 41 (fontified t) 41 42 (face (rainbow-delimiters-depth-3-face) fontified t) 42 43 (face (rainbow-delimiters-depth-3-face) fontified t) 43 50 (fontified t) 50 51 (face (rainbow-delimiters-depth-3-face) fontified t) 51 58 (face font-lock-string-face fontified t) 58 59 (face (rainbow-delimiters-depth-3-face) fontified t) 59 60 (fontified t)) . 275) (undo-tree-id693 . -27) (undo-tree-id694 . -27) (undo-tree-id695 . -27) (undo-tree-id696 . -27) (undo-tree-id697 . -27) (undo-tree-id698 . -27) (undo-tree-id699 . -27) (undo-tree-id700 . -27) (undo-tree-id701 . -60)) nil (26132 146 822851 615000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 275) (undo-tree-id692 . -1)) nil (26132 146 822845 494000) 0 nil])
([nil nil ((#("            info!(\"Found feature: {}\", &label);" 0 12 (fontified t) 12 16 (face font-lock-preprocessor-face fontified t) 16 17 (face font-lock-preprocessor-face fontified t) 17 18 (face (rainbow-delimiters-depth-3-face) fontified t) 18 34 (face font-lock-string-face fontified t) 34 36 (face font-lock-string-face fontified t) 36 37 (face font-lock-string-face fontified t) 37 39 (fontified t) 39 40 (face rust-ampersand-face fontified t) 40 45 (fontified t) 45 46 (face (rainbow-delimiters-depth-3-face) fontified t) 46 47 (fontified t)) . 275) (undo-tree-id682 . -27) (undo-tree-id683 . -27) (undo-tree-id684 . -27) (undo-tree-id685 . -27) (undo-tree-id686 . -27) (undo-tree-id687 . -27) (undo-tree-id688 . -27) (undo-tree-id689 . -27) (undo-tree-id690 . -27) (undo-tree-id691 . -47)) nil (26132 146 822843 911000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 275) (undo-tree-id681 . -1)) nil (26132 146 822836 928000) 0 nil])
([nil nil ((#("            for subfeature in feature {" 0 12 (fontified t) 12 15 (face font-lock-keyword-face fontified t) 15 16 (fontified t) 16 26 (face font-lock-variable-name-face fontified t) 26 27 (fontified t) 27 29 (face font-lock-keyword-face fontified t) 29 38 (fontified t) 38 39 (face (rainbow-delimiters-depth-3-face) fontified t)) . 275) (undo-tree-id680 . -39)) nil (26132 146 822835 554000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 275) (undo-tree-id679 . -1)) nil (26132 146 822834 322000) 0 nil])
([nil nil ((#("                let value = subfeature.get_value().expect(\"value\");" 0 16 (fontified t) 16 19 (face font-lock-keyword-face fontified t) 19 20 (fontified t) 20 25 (face font-lock-variable-name-face fontified t) 25 48 (fontified t) 48 49 (face (rainbow-delimiters-depth-3-face) fontified t) 49 50 (face (rainbow-delimiters-depth-3-face) fontified t) 50 57 (fontified t) 57 58 (face (rainbow-delimiters-depth-3-face) fontified t) 58 65 (face font-lock-string-face fontified t) 65 66 (face (rainbow-delimiters-depth-3-face) fontified t) 66 67 (fontified t)) . 275) (undo-tree-id678 . -67)) nil (26132 146 822832 967000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 275) (undo-tree-id677 . -1)) nil (26132 146 822831 602000) 0 nil])
([nil nil ((#("                info!(\"Found subfeature {}: {}\", subfeature.name(), value);" 0 16 (fontified t) 16 20 (face font-lock-preprocessor-face fontified t) 20 21 (face font-lock-preprocessor-face fontified t) 21 22 (face (rainbow-delimiters-depth-3-face) fontified t) 22 40 (face font-lock-string-face fontified t) 40 42 (face font-lock-string-face fontified t) 42 44 (face font-lock-string-face fontified t) 44 46 (face font-lock-string-face fontified t) 46 47 (face font-lock-string-face fontified t) 47 64 (fontified t) 64 65 (face (rainbow-delimiters-depth-4-face) fontified t) 65 66 (face (rainbow-delimiters-depth-4-face) fontified t) 66 73 (fontified t) 73 74 (face (rainbow-delimiters-depth-3-face) fontified t) 74 75 (fontified t)) . 275) (undo-tree-id648 . -27) (undo-tree-id649 . -27) (undo-tree-id650 . -27) (undo-tree-id651 . -27) (undo-tree-id652 . -27) (undo-tree-id653 . -27) (undo-tree-id654 . -27) (undo-tree-id655 . -27) (undo-tree-id656 . -27) (undo-tree-id657 . -27) (undo-tree-id658 . -27) (undo-tree-id659 . -27) (undo-tree-id660 . -27) (undo-tree-id661 . -27) (undo-tree-id662 . -27) (undo-tree-id663 . -27) (undo-tree-id664 . -27) (undo-tree-id665 . -27) (undo-tree-id666 . -27) (undo-tree-id667 . -27) (undo-tree-id668 . -27) (undo-tree-id669 . -27) (undo-tree-id670 . -27) (undo-tree-id671 . -27) (undo-tree-id672 . -27) (undo-tree-id673 . -27) (undo-tree-id674 . -27) (undo-tree-id675 . -27) (undo-tree-id676 . -75)) nil (26132 146 822829 347000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 275) (undo-tree-id647 . -1)) nil (26132 146 822811 845000) 0 nil])
([nil nil ((#("            }" 0 12 (fontified t) 12 13 (face (rainbow-delimiters-depth-2-face) fontified t)) . 275) (undo-tree-id645 . -13) (undo-tree-id646 . -13)) nil (26132 146 822810 224000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 275) (undo-tree-id644 . -1)) nil (26132 146 822808 453000) 0 nil])
([nil nil ((#("        }" 0 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t rear-nonsticky t)) . 275) (undo-tree-id642 . -9) (undo-tree-id643 . -9)) nil (26132 146 822807 23000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 275) (undo-tree-id641 . -1)) nil (26132 146 822804 232000) 0 nil])
([nil nil ((#("        " 0 4 (fontified t) 4 8 (fontified t)) . -271) (undo-tree-id553 . -4) (undo-tree-id554 . -4) (undo-tree-id555 . -4) (undo-tree-id556 . -4) (undo-tree-id557 . -4) (undo-tree-id558 . -4) (undo-tree-id559 . -4) (undo-tree-id560 . -4) (undo-tree-id561 . -4) (undo-tree-id562 . -4) (undo-tree-id563 . -4) (undo-tree-id564 . -4) (undo-tree-id565 . -4) (undo-tree-id566 . -4) (undo-tree-id567 . -4) (undo-tree-id568 . -4) (undo-tree-id569 . -4) (undo-tree-id570 . -4) (undo-tree-id571 . -4) (undo-tree-id572 . -4) (undo-tree-id573 . -4) (undo-tree-id574 . -4) (undo-tree-id575 . -4) (undo-tree-id576 . -4) (undo-tree-id577 . -4) (undo-tree-id578 . -4) (undo-tree-id579 . -4) (undo-tree-id580 . -4) (undo-tree-id581 . -4) (undo-tree-id582 . -4) (undo-tree-id583 . -4) (undo-tree-id584 . -4) (undo-tree-id585 . -4) (undo-tree-id586 . -4) (undo-tree-id587 . -4) (undo-tree-id588 . -4) (undo-tree-id589 . -4) (undo-tree-id590 . -4) (undo-tree-id591 . -4) (undo-tree-id592 . -4) (undo-tree-id593 . -4) (undo-tree-id594 . -4) (undo-tree-id595 . -4) (undo-tree-id596 . -4) (undo-tree-id597 . -4) (undo-tree-id598 . -4) (undo-tree-id599 . -4) (undo-tree-id600 . -4) (undo-tree-id601 . -4) (undo-tree-id602 . -4) (undo-tree-id603 . -4) (undo-tree-id604 . -4) (undo-tree-id605 . -4) (undo-tree-id606 . -4) (undo-tree-id607 . -4) (undo-tree-id608 . -4) (undo-tree-id609 . -4) (undo-tree-id610 . -4) (undo-tree-id611 . -4) (undo-tree-id612 . -4) (undo-tree-id613 . -4) (undo-tree-id614 . -4) (undo-tree-id615 . -4) (undo-tree-id616 . -4) (undo-tree-id617 . -4) (undo-tree-id618 . -4) (undo-tree-id619 . -4) (undo-tree-id620 . -4) (undo-tree-id621 . -4) (undo-tree-id622 . -4) (undo-tree-id623 . -4) (undo-tree-id624 . -4) (undo-tree-id625 . -4) (undo-tree-id626 . -4) (undo-tree-id627 . -4) (undo-tree-id628 . -4) (undo-tree-id629 . -4) (undo-tree-id630 . -4) (undo-tree-id631 . -4) (undo-tree-id632 . -4) (undo-tree-id633 . -4) (undo-tree-id634 . -4) (undo-tree-id635 . -4) (undo-tree-id636 . -4) (undo-tree-id637 . -4) (undo-tree-id638 . -4) (undo-tree-id639 . -4) (undo-tree-id640 . -4) 275) nil (26132 146 822797 443000) 0 nil])
([nil nil ((182 . 185) (t 26132 146 833802 773000)) nil (26132 220 353216 202000) 0 nil])
([nil nil ((#("name\")" 0 5 (face font-lock-string-face fontified t) 5 6 (face (rainbow-delimiters-depth-3-face) fontified t)) . -220) (undo-tree-id1062 . -6) (undo-tree-id1063 . -6) (undo-tree-id1064 . -6) (undo-tree-id1065 . -6) (undo-tree-id1066 . -6) (undo-tree-id1067 . -6) (undo-tree-id1068 . -6) (undo-tree-id1069 . -6) (undo-tree-id1070 . -6) (undo-tree-id1071 . -6) (undo-tree-id1072 . -6) (undo-tree-id1073 . -6) (undo-tree-id1074 . -6) (undo-tree-id1075 . -6) (undo-tree-id1076 . -6) (undo-tree-id1077 . -6) (undo-tree-id1078 . -6) (undo-tree-id1079 . -6) (undo-tree-id1080 . -6) (undo-tree-id1081 . -6) (undo-tree-id1082 . -6) (undo-tree-id1083 . -6) (undo-tree-id1084 . -6) (undo-tree-id1085 . -6) 226) nil (26132 220 353214 429000) 0 nil])
([nil nil ((#("expect(\"" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-3-face) fontified t) 7 8 (face font-lock-string-face fontified t)) . -212) (undo-tree-id1020 . -8) (undo-tree-id1021 . -8) (undo-tree-id1022 . -6) (undo-tree-id1023 . -6) (undo-tree-id1024 . -6) (undo-tree-id1025 . -6) (undo-tree-id1026 . -6) (undo-tree-id1027 . -6) (undo-tree-id1028 . -6) (undo-tree-id1029 . -6) (undo-tree-id1030 . -6) (undo-tree-id1031 . -6) (undo-tree-id1032 . -8) (undo-tree-id1033 . -8) (undo-tree-id1034 . -8) (undo-tree-id1035 . -8) (undo-tree-id1036 . -8) (undo-tree-id1037 . -8) (undo-tree-id1038 . -8) (undo-tree-id1039 . -8) (undo-tree-id1040 . -8) (undo-tree-id1041 . -8) (undo-tree-id1042 . -8) (undo-tree-id1043 . -8) (undo-tree-id1044 . -8) (undo-tree-id1045 . -8) (undo-tree-id1046 . -8) (undo-tree-id1047 . -8) (undo-tree-id1048 . -8) (undo-tree-id1049 . -8) (undo-tree-id1050 . -8) (undo-tree-id1051 . -8) (undo-tree-id1052 . -8) (undo-tree-id1053 . -8) (undo-tree-id1054 . -8) (undo-tree-id1055 . -8) (undo-tree-id1056 . -8) (undo-tree-id1057 . -8) (undo-tree-id1058 . -8) (undo-tree-id1059 . -8) (undo-tree-id1060 . -8) (undo-tree-id1061 . -8) 220) nil (26132 220 353198 829000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -211) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) 212) nil (26132 220 353171 932000) 0 nil])
([nil nil ((#("name" 0 4 (face font-lock-variable-name-face fontified t)) . -189) (undo-tree-id958 . -4) (undo-tree-id959 . -4) (undo-tree-id960 . -4) (undo-tree-id961 . -4) (undo-tree-id962 . -4) (undo-tree-id963 . -4) (undo-tree-id964 . -4) (undo-tree-id965 . -4) (undo-tree-id966 . -4) (undo-tree-id967 . -4) (undo-tree-id968 . -4) (undo-tree-id969 . -4) (undo-tree-id970 . -4) (undo-tree-id971 . -4) (undo-tree-id972 . -4) (undo-tree-id973 . -4) 193) nil (26132 220 353142 832000) 0 nil])
([nil nil ((189 . 190)) nil (26132 220 352803 215000) 0 nil])
([nil nil ((#("if let S = chip.get_name();" 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t) 3 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 8 (face font-lock-type-face fontified t) 8 24 (fontified t) 24 25 (face (rainbow-delimiters-depth-3-face) fontified t) 25 26 (face (rainbow-delimiters-depth-3-face) fontified t) 26 27 (fontified t)) . 182) (undo-tree-id838 . -7) (undo-tree-id839 . -26) (undo-tree-id840 . -26) (undo-tree-id841 . -26) (undo-tree-id842 . -26) (undo-tree-id843 . -26) (undo-tree-id844 . -26) (undo-tree-id845 . -26) (undo-tree-id846 . -26) (undo-tree-id847 . -26) (undo-tree-id848 . -26) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -2) (undo-tree-id852 . -2) (undo-tree-id853 . -3) (undo-tree-id854 . -3) (undo-tree-id855 . -3) (undo-tree-id856 . -3) (undo-tree-id857 . -3) (undo-tree-id858 . -3) (undo-tree-id859 . -3) (undo-tree-id860 . -3) (undo-tree-id861 . -3) (undo-tree-id862 . -3) (undo-tree-id863 . -6) (undo-tree-id864 . -7) (undo-tree-id865 . -7) (undo-tree-id866 . -7) (undo-tree-id867 . -7) (undo-tree-id868 . -7) (undo-tree-id869 . -7) (undo-tree-id870 . -7) (undo-tree-id871 . -9) (undo-tree-id872 . -10) (undo-tree-id873 . -10) (undo-tree-id874 . -10) (undo-tree-id875 . -10) (undo-tree-id876 . -10) (undo-tree-id877 . -11) (undo-tree-id878 . -11) (undo-tree-id879 . -11) (undo-tree-id880 . -11) (undo-tree-id881 . -11) (undo-tree-id882 . -11) (undo-tree-id883 . -11) (undo-tree-id884 . -11) (undo-tree-id885 . -11) (undo-tree-id886 . -27) (undo-tree-id887 . -27) (undo-tree-id888 . -27) (undo-tree-id889 . -27) (undo-tree-id890 . -27) (undo-tree-id891 . -26) (undo-tree-id892 . -26) (undo-tree-id893 . -26) (undo-tree-id894 . -26) (undo-tree-id895 . -26) (undo-tree-id896 . -26) (undo-tree-id897 . -26) (undo-tree-id898 . -26) (undo-tree-id899 . -26) (undo-tree-id900 . -26) (undo-tree-id901 . -26) (undo-tree-id902 . -26) (undo-tree-id903 . -26) (undo-tree-id904 . -26) (undo-tree-id905 . -26) (undo-tree-id906 . -26) (undo-tree-id907 . -26) (undo-tree-id908 . -26) (undo-tree-id909 . -26) (undo-tree-id910 . -26) (undo-tree-id911 . -26) (undo-tree-id912 . -26) (undo-tree-id913 . -26) (undo-tree-id914 . -26) (undo-tree-id915 . -26) (undo-tree-id916 . -26) (undo-tree-id917 . -26) (undo-tree-id918 . -26) (undo-tree-id919 . -26) (undo-tree-id920 . -26) (undo-tree-id921 . -26) (undo-tree-id922 . -26) (undo-tree-id923 . -26) (undo-tree-id924 . -26) (undo-tree-id925 . -26) (undo-tree-id926 . -26) (undo-tree-id927 . -20) (undo-tree-id928 . -16) (undo-tree-id929 . -16) (undo-tree-id930 . -16) (undo-tree-id931 . -11) (undo-tree-id932 . -11) (undo-tree-id933 . -11) (undo-tree-id934 . -10) (undo-tree-id935 . -10) (undo-tree-id936 . -10) (undo-tree-id937 . -10) (undo-tree-id938 . -10) (undo-tree-id939 . -10) (undo-tree-id940 . -10) (undo-tree-id941 . -9) (undo-tree-id942 . -7) (undo-tree-id943 . -7) (undo-tree-id944 . -7) (undo-tree-id945 . -7) (undo-tree-id946 . -7) (undo-tree-id947 . -7) (undo-tree-id948 . -7) (undo-tree-id949 . -7) (undo-tree-id950 . -7) (undo-tree-id951 . -8) (undo-tree-id952 . -8) (undo-tree-id953 . 19) (undo-tree-id954 . -8) (undo-tree-id955 . -8) (undo-tree-id956 . -8) (undo-tree-id957 . -27)) nil (26132 220 352798 512000) 0 nil])
([nil nil ((182 . 185)) nil (26132 220 352631 731000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 188 200 nil nil nil t #s(yas--exit 215 nil))) #s(yas--exit 215 nil) 7 nil #s(yas--field 1 188 200 nil nil nil t #s(yas--exit 215 nil)) nil nil)) (182 . 213) (#("while $1 {
            $0
        }" 0 35 (fontified nil)) . 182) (208 . 216) (193 . 205) (#("    " 0 4 (fontified nil)) . 193) (182 . 201) (#("whi" 0 3 (fontified nil)) . 182) (182 . 185) (#("while" 0 5 (fontified nil)) . -182) (182 . 187) (#("whi" 0 3 (fontified t)) . -182) (undo-tree-id826 . -3) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -2) (undo-tree-id831 . -2) (undo-tree-id832 . -2) (undo-tree-id833 . -3) (undo-tree-id834 . -3) (undo-tree-id835 . -3) (undo-tree-id836 . -3) (undo-tree-id837 . -3) 185) nil (26132 220 352630 17000) 0 nil])
([nil nil ((188 . 191)) nil (26132 220 352620 628000) 0 nil])
([nil nil ((191 . 193)) nil (26132 220 352619 853000) 0 nil])
([nil nil ((apply yas--snippet-revive 192 196 #s(yas--snippet nil nil #s(yas--exit 196 nil) 8 nil nil #s(yas--field 1 188 200 nil nil nil t #s(yas--exit 215 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 196 nil) 8 nil nil #s(yas--field 1 188 200 nil nil nil t #s(yas--exit 215 nil)) nil)) (192 . 196) (#("Some$0" 0 6 (fontified nil)) . 192) (undo-tree-id816 . -6) (192 . 198) (#("S" 0 1 (fontified nil)) . 192) (undo-tree-id817 . -1) (192 . 193) (#("Some" 0 4 (fontified nil)) . -192) (undo-tree-id818 . -4) (192 . 196) (#("S" 0 1 (face font-lock-type-face fontified t)) . -192) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) 193) nil (26132 220 352618 398000) 0 nil])
([nil nil ((196 . 198)) nil (26132 220 352610 611000) 0 nil])
([nil nil ((197 . 199)) nil (26132 220 352610 92000) 0 nil])
([nil nil ((apply yas--snippet-revive 182 225 #s(yas--snippet nil (#s(yas--field 1 188 200 nil nil nil t #s(yas--exit 215 nil))) #s(yas--exit 215 nil) 7 nil #s(yas--field 1 188 200 nil nil nil t #s(yas--exit 215 nil)) nil nil))) nil (26132 220 352609 448000) 0 nil])
([nil nil ((nil rear-nonsticky nil 224 . 225) (nil fontified nil 224 . 225) (nil fontified nil 223 . 224) (nil fontified nil 222 . 223) (nil fontified nil 206 . 222) (nil fontified nil 205 . 206) (nil fontified nil 204 . 205) (nil fontified nil 201 . 204) (nil fontified nil 200 . 201) (nil fontified nil 198 . 200) (198 . 225)) nil (26132 220 352608 442000) 0 nil])
([nil nil ((#("name();" 0 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t) 5 6 (face font-lock-string-face fontified t) 6 7 (face font-lock-string-face rear-nonsticky t fontified t)) . -218) (undo-tree-id806 . -7) (undo-tree-id807 . -7) (undo-tree-id808 . -7) (undo-tree-id809 . -7) (undo-tree-id810 . -7) (undo-tree-id811 . -7) (undo-tree-id812 . -7) (undo-tree-id813 . -7) (undo-tree-id814 . -7) (undo-tree-id815 . -7) 225) nil (26132 220 352606 182000) 0 nil])
([nil nil ((#("get_" 0 4 (face font-lock-string-face fontified t)) . -214) (undo-tree-id794 . -4) (undo-tree-id795 . -4) (undo-tree-id796 . -4) (undo-tree-id797 . -4) (undo-tree-id798 . -4) (undo-tree-id799 . -4) (undo-tree-id800 . -4) (undo-tree-id801 . -4) (undo-tree-id802 . -4) (undo-tree-id803 . -4) (undo-tree-id804 . -4) (undo-tree-id805 . -4) 218) nil (26132 220 352598 774000) 0 nil])
([nil nil ((#("chip." 0 5 (face font-lock-string-face fontified t)) . -209) (undo-tree-id780 . -5) (undo-tree-id781 . -5) (undo-tree-id782 . -5) (undo-tree-id783 . -5) (undo-tree-id784 . -5) (undo-tree-id785 . -5) (undo-tree-id786 . -5) (undo-tree-id787 . -5) (undo-tree-id788 . -5) (undo-tree-id789 . -5) (undo-tree-id790 . -5) (undo-tree-id791 . -5) (undo-tree-id792 . -5) (undo-tree-id793 . -5) 214) nil (26132 220 352590 220000) 0 nil])
([nil nil ((#("S = " 0 1 (face font-lock-string-face fontified t) 1 4 (face font-lock-string-face fontified t)) . -205) (undo-tree-id764 . -4) (undo-tree-id765 . -4) (undo-tree-id766 . -4) (undo-tree-id767 . -4) (undo-tree-id768 . -4) (undo-tree-id769 . -4) (undo-tree-id770 . -4) (undo-tree-id771 . -4) (undo-tree-id772 . -4) (undo-tree-id773 . -4) (undo-tree-id774 . -4) (undo-tree-id775 . -4) (undo-tree-id776 . -4) (undo-tree-id777 . -4) (undo-tree-id778 . -4) (undo-tree-id779 . -4) 209) nil (26132 220 352575 164000) 0 nil])
([nil nil ((#("let " 0 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t)) . -201) (undo-tree-id746 . -4) (undo-tree-id747 . -4) (undo-tree-id748 . -4) (undo-tree-id749 . -4) (undo-tree-id750 . -4) (undo-tree-id751 . -4) (undo-tree-id752 . -4) (undo-tree-id753 . -4) (undo-tree-id754 . -4) (undo-tree-id755 . -4) (undo-tree-id756 . -4) (undo-tree-id757 . -4) (undo-tree-id758 . -4) (undo-tree-id759 . -4) (undo-tree-id760 . -4) (undo-tree-id761 . -4) (undo-tree-id762 . -4) (undo-tree-id763 . -4) 205) nil (26132 220 352564 454000) 0 nil])
([nil nil ((#("if " 0 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t)) . -198) (undo-tree-id723 . -3) (undo-tree-id724 . -3) (undo-tree-id725 . -3) (undo-tree-id726 . -3) (undo-tree-id727 . -3) (undo-tree-id728 . -3) (undo-tree-id729 . -3) (undo-tree-id730 . -3) (undo-tree-id731 . -3) (undo-tree-id732 . -3) (undo-tree-id733 . -3) (undo-tree-id734 . -3) (undo-tree-id735 . -3) (undo-tree-id736 . -3) (undo-tree-id737 . -3) (undo-tree-id738 . -3) (undo-tree-id739 . -3) (undo-tree-id740 . -3) (undo-tree-id741 . -3) (undo-tree-id742 . -3) (undo-tree-id743 . -3) (undo-tree-id744 . -3) (undo-tree-id745 . -3) 201) nil (26132 220 352552 323000) 0 nil])
([nil nil ((nil rear-nonsticky nil 214 . 215) (nil fontified nil 198 . 215) (198 . 215)) nil (26132 220 352536 768000) 0 nil])
([nil nil ((217 . 220)) nil (26132 220 352535 873000) 0 nil])
([nil nil ((220 . 221)) nil (26132 220 352535 270000) 0 nil])
([nil nil ((220 . 224) (#("c" 0 1 (fontified nil)) . 220) (220 . 221) (#("chip" 0 4 (fontified nil)) . -220) (220 . 224) (#("c" 0 1 (fontified t)) . -220) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) 221) nil (26132 220 352533 919000) 0 nil])
([nil nil ((224 . 226)) nil (26132 220 352528 477000) 0 nil])
([nil nil ((apply yas--snippet-revive 225 235 #s(yas--snippet nil nil #s(yas--exit 235 nil) 9 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 235 nil) 9 nil nil nil nil)) (225 . 235) (#("get_name()$0" 0 12 (fontified nil)) . 225) (225 . 237) (#("n" 0 1 (fontified nil)) . 225) (225 . 226) (#("get_name()" 0 10 (fontified nil)) . -225) (225 . 235) (#("n" 0 1 (fontified t)) . -225) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) 226) nil (26132 220 352524 303000) 0 nil])
([nil nil ((216 . 218) (t 26132 220 393807 288000)) nil (26132 243 332271 852000) 0 nil])
([nil nil ((218 . 219)) nil (26132 243 332271 192000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -216) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (#("t" 0 1 (fontified t)) . -217) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (#("o" 0 1 (fontified t)) . -218) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) 219) nil (26132 243 332268 390000) 0 nil])
([nil nil ((216 . 217)) nil (26132 243 332091 355000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -216) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) 217) nil (26132 243 332090 443000) 0 nil])
([nil nil ((216 . 219)) nil (26132 243 332083 784000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -217) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (#("o" 0 1 (fontified t)) . -218) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) 219) nil (26132 243 332082 487000) 0 nil])
([nil nil ((217 . 223)) nil (26132 243 332071 74000) 0 nil])
([nil nil ((#("string" 0 6 (fontified t)) . -217) (undo-tree-id1127 . -6) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -2) (undo-tree-id1132 . -2) (undo-tree-id1133 . -2) (undo-tree-id1134 . -3) (undo-tree-id1135 . -3) (undo-tree-id1136 . -3) (undo-tree-id1137 . -4) (undo-tree-id1138 . -4) (undo-tree-id1139 . -4) (undo-tree-id1140 . -5) (undo-tree-id1141 . -5) (undo-tree-id1142 . -6) (undo-tree-id1143 . -6) (undo-tree-id1144 . -6) (undo-tree-id1145 . -6) 223) nil (26132 243 332069 85000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -216) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) 217) nil (26132 243 332052 839000) 0 nil])
([nil nil ((216 . 217) (t 26132 243 343808 696000)) nil (26132 263 205242 819000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -216) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) 217) nil (26132 264 609331 915000) 0 nil])
([nil nil ((#("0000\"" 0 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face rear-nonsticky t fontified t) 4 5 (face font-lock-string-face fontified t)) . -211) (undo-tree-id1758 . -5) (undo-tree-id1759 . -5) (undo-tree-id1760 . -5) (undo-tree-id1761 . -5) (undo-tree-id1762 . -5) (undo-tree-id1763 . -5) (undo-tree-id1764 . -5) (undo-tree-id1765 . -5) (undo-tree-id1766 . -5) (undo-tree-id1767 . -5) (undo-tree-id1768 . -5) (undo-tree-id1769 . -5) (undo-tree-id1770 . -5) (undo-tree-id1771 . -5) (undo-tree-id1772 . -5) (undo-tree-id1773 . -5) (undo-tree-id1774 . -5) (undo-tree-id1775 . -5) (undo-tree-id1776 . -5) (undo-tree-id1777 . -5) (undo-tree-id1778 . -5) (undo-tree-id1779 . -5) (undo-tree-id1780 . -5) (undo-tree-id1781 . -5) (undo-tree-id1782 . -5) (undo-tree-id1783 . -5) (undo-tree-id1784 . -5) (undo-tree-id1785 . -5) (undo-tree-id1786 . -5) (undo-tree-id1787 . -5) (undo-tree-id1788 . -5) (undo-tree-id1789 . -5) (undo-tree-id1790 . -5) (undo-tree-id1791 . -5) (undo-tree-id1792 . -5) (undo-tree-id1793 . -5) (undo-tree-id1794 . -5) (undo-tree-id1795 . -5) (undo-tree-id1796 . -5) (undo-tree-id1797 . -5) (undo-tree-id1798 . -5) (undo-tree-id1799 . -5) (undo-tree-id1800 . -5) (undo-tree-id1801 . -5) (undo-tree-id1802 . -5) (undo-tree-id1803 . -5) (undo-tree-id1804 . -5) (undo-tree-id1805 . -5) (undo-tree-id1806 . -5) (undo-tree-id1807 . -5) (undo-tree-id1808 . -5) (undo-tree-id1809 . -5) (undo-tree-id1810 . -5) (undo-tree-id1811 . -5) (undo-tree-id1812 . -5) (undo-tree-id1813 . -5) (undo-tree-id1814 . -5) (undo-tree-id1815 . -5) (undo-tree-id1816 . -5) (undo-tree-id1817 . -5) (undo-tree-id1818 . -5) (undo-tree-id1819 . -5) (undo-tree-id1820 . -5) (undo-tree-id1821 . -5) (undo-tree-id1822 . -5) (undo-tree-id1823 . -5) (undo-tree-id1824 . -5) (undo-tree-id1825 . -5) (undo-tree-id1826 . -5) (undo-tree-id1827 . -5) (undo-tree-id1828 . -5) (undo-tree-id1829 . -5) (undo-tree-id1830 . -5) (undo-tree-id1831 . -5) (undo-tree-id1832 . -5) (undo-tree-id1833 . -5) (undo-tree-id1834 . -5) (undo-tree-id1835 . -5) (undo-tree-id1836 . -5) (undo-tree-id1837 . -5) (undo-tree-id1838 . -5) (undo-tree-id1839 . -5) (undo-tree-id1840 . -5) (undo-tree-id1841 . -5) (undo-tree-id1842 . -5) (undo-tree-id1843 . -5) (undo-tree-id1844 . -5) (undo-tree-id1845 . -5) (undo-tree-id1846 . -5) (undo-tree-id1847 . -5) (undo-tree-id1848 . -5) (undo-tree-id1849 . -5) (undo-tree-id1850 . -5) (undo-tree-id1851 . -5) (undo-tree-id1852 . -5) (undo-tree-id1853 . -5) (undo-tree-id1854 . -5) (undo-tree-id1855 . -5) (undo-tree-id1856 . -5) (undo-tree-id1857 . -5) (undo-tree-id1858 . -5) (undo-tree-id1859 . -5) (undo-tree-id1860 . -5) (undo-tree-id1861 . -5) (undo-tree-id1862 . -5) (undo-tree-id1863 . -5) (undo-tree-id1864 . -5) (undo-tree-id1865 . -4) (undo-tree-id1866 . -5) 216) nil (26132 274 642604 729000) 0 nil] [nil nil ((#("while let Some(\"coretemp-isa-0000\") = chip.get_name() {" 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 9 (face font-lock-keyword-face fontified t) 9 10 (fontified t) 10 14 (face font-lock-type-face fontified t) 14 15 (face (rainbow-delimiters-depth-3-face) fontified t) 15 16 (face font-lock-string-face fontified t) 16 32 (face font-lock-string-face fontified t) 32 33 (face font-lock-string-face rear-nonsticky t fontified t) 33 34 (face font-lock-string-face fontified t) 34 35 (face (rainbow-delimiters-depth-3-face) fontified t) 35 38 (fontified t) 38 43 (fontified t) 43 51 (fontified t) 51 52 (face (rainbow-delimiters-depth-3-face) fontified t) 52 53 (face (rainbow-delimiters-depth-3-face) fontified t) 53 54 (fontified t) 54 55 (face (rainbow-delimiters-depth-3-face) fontified t)) . 182) (undo-tree-id1228 . -44) (undo-tree-id1229 . -44) (undo-tree-id1230 . -14) (undo-tree-id1231 . -34) (undo-tree-id1232 . -16) (undo-tree-id1233 . -16) (undo-tree-id1234 . -34) (undo-tree-id1235 . -34) (undo-tree-id1236 . -34) (undo-tree-id1237 . -34) (undo-tree-id1238 . -34) (undo-tree-id1239 . -34) (undo-tree-id1240 . -34) (undo-tree-id1241 . -34) (undo-tree-id1242 . -34) (undo-tree-id1243 . -34) (undo-tree-id1244 . -34) (undo-tree-id1245 . -34) (undo-tree-id1246 . -34) (undo-tree-id1247 . -34) (undo-tree-id1248 . -34) (undo-tree-id1249 . -34) (undo-tree-id1250 . -34) (undo-tree-id1251 . -34) (undo-tree-id1252 . -34) (undo-tree-id1253 . -34) (undo-tree-id1254 . -34) (undo-tree-id1255 . -34) (undo-tree-id1256 . -34) (undo-tree-id1257 . -34) (undo-tree-id1258 . -34) (undo-tree-id1259 . -34) (undo-tree-id1260 . -34) (undo-tree-id1261 . -34) (undo-tree-id1262 . -34) (undo-tree-id1263 . -34) (undo-tree-id1264 . -34) (undo-tree-id1265 . -34) (undo-tree-id1266 . -34) (undo-tree-id1267 . -34) (undo-tree-id1268 . -34) (undo-tree-id1269 . -34) (undo-tree-id1270 . -34) (undo-tree-id1271 . -34) (undo-tree-id1272 . -34) (undo-tree-id1273 . -34) (undo-tree-id1274 . -34) (undo-tree-id1275 . -34) (undo-tree-id1276 . -34) (undo-tree-id1277 . -34) (undo-tree-id1278 . -34) (undo-tree-id1279 . -34) (undo-tree-id1280 . -34) (undo-tree-id1281 . -34) (undo-tree-id1282 . -34) (undo-tree-id1283 . -34) (undo-tree-id1284 . -34) (undo-tree-id1285 . -34) (undo-tree-id1286 . -34) (undo-tree-id1287 . -34) (undo-tree-id1288 . -34) (undo-tree-id1289 . -34) (undo-tree-id1290 . -34) (undo-tree-id1291 . -34) (undo-tree-id1292 . -34) (undo-tree-id1293 . -34) (undo-tree-id1294 . -34) (undo-tree-id1295 . -34) (undo-tree-id1296 . -34) (undo-tree-id1297 . -34) (undo-tree-id1298 . -34) (undo-tree-id1299 . -34) (undo-tree-id1300 . -34) (undo-tree-id1301 . -34) (undo-tree-id1302 . -34) (undo-tree-id1303 . -34) (undo-tree-id1304 . -34) (undo-tree-id1305 . -34) (undo-tree-id1306 . -34) (undo-tree-id1307 . -34) (undo-tree-id1308 . -34) (undo-tree-id1309 . -34) (undo-tree-id1310 . -34) (undo-tree-id1311 . -34) (undo-tree-id1312 . -34) (undo-tree-id1313 . -34) (undo-tree-id1314 . -34) (undo-tree-id1315 . -34) (undo-tree-id1316 . -34) (undo-tree-id1317 . -34) (undo-tree-id1318 . -34) (undo-tree-id1319 . -34) (undo-tree-id1320 . -34) (undo-tree-id1321 . -34) (undo-tree-id1322 . -34) (undo-tree-id1323 . -34) (undo-tree-id1324 . -34) (undo-tree-id1325 . -34) (undo-tree-id1326 . -34) (undo-tree-id1327 . -34) (undo-tree-id1328 . -34) (undo-tree-id1329 . -34) (undo-tree-id1330 . -16) (undo-tree-id1331 . -44) (undo-tree-id1332 . -44) (undo-tree-id1333 . -44) (undo-tree-id1334 . -44) (undo-tree-id1335 . -44) (undo-tree-id1336 . -44) (undo-tree-id1337 . -44) (undo-tree-id1338 . -44) (undo-tree-id1339 . -44) (undo-tree-id1340 . -44) (undo-tree-id1341 . -44) (undo-tree-id1342 . -44) (undo-tree-id1343 . -44) (undo-tree-id1344 . -44) (undo-tree-id1345 . -44) (undo-tree-id1346 . -44) (undo-tree-id1347 . -44) (undo-tree-id1348 . -44) (undo-tree-id1349 . -44) (undo-tree-id1350 . -44) (undo-tree-id1351 . -44) (undo-tree-id1352 . -44) (undo-tree-id1353 . -44) (undo-tree-id1354 . -44) (undo-tree-id1355 . -44) (undo-tree-id1356 . -44) (undo-tree-id1357 . -44) (undo-tree-id1358 . -44) (undo-tree-id1359 . -44) (undo-tree-id1360 . -44) (undo-tree-id1361 . -43) (undo-tree-id1362 . -38) (undo-tree-id1363 . -37) (undo-tree-id1364 . -36) (undo-tree-id1365 . -35) (undo-tree-id1366 . -34) (undo-tree-id1367 . -34) (undo-tree-id1368 . 21) (undo-tree-id1369 . -34) (undo-tree-id1370 . -34) (undo-tree-id1371 . -34) (undo-tree-id1372 . -34) (undo-tree-id1373 . -34) (undo-tree-id1374 . -34) (undo-tree-id1375 . -35) (undo-tree-id1376 . -35) (undo-tree-id1377 . -35) (undo-tree-id1378 . -36) (undo-tree-id1379 . -37) (undo-tree-id1380 . -38) (undo-tree-id1381 . -37) (undo-tree-id1382 . -36) (undo-tree-id1383 . -36) (undo-tree-id1384 . -36) (undo-tree-id1385 . -55)) ((182 . 237)) (26132 264 276468 433000) 0 nil])
([nil nil ((#("isa-" 0 4 (face font-lock-string-face fontified t)) . -207) (undo-tree-id1645 . -4) (undo-tree-id1646 . -4) (undo-tree-id1647 . -4) (undo-tree-id1648 . -4) (undo-tree-id1649 . -4) (undo-tree-id1650 . -4) (undo-tree-id1651 . -4) (undo-tree-id1652 . -4) (undo-tree-id1653 . -4) (undo-tree-id1654 . -4) (undo-tree-id1655 . -4) (undo-tree-id1656 . -4) (undo-tree-id1657 . -4) (undo-tree-id1658 . -4) (undo-tree-id1659 . -4) (undo-tree-id1660 . -4) (undo-tree-id1661 . -4) (undo-tree-id1662 . -4) (undo-tree-id1663 . -4) (undo-tree-id1664 . -4) (undo-tree-id1665 . -4) (undo-tree-id1666 . -4) (undo-tree-id1667 . -4) (undo-tree-id1668 . -4) (undo-tree-id1669 . -4) (undo-tree-id1670 . -4) (undo-tree-id1671 . -4) (undo-tree-id1672 . -4) (undo-tree-id1673 . -4) (undo-tree-id1674 . -4) (undo-tree-id1675 . -4) (undo-tree-id1676 . -4) (undo-tree-id1677 . -4) (undo-tree-id1678 . -4) (undo-tree-id1679 . -4) (undo-tree-id1680 . -4) (undo-tree-id1681 . -4) (undo-tree-id1682 . -4) (undo-tree-id1683 . -4) (undo-tree-id1684 . -4) (undo-tree-id1685 . -4) (undo-tree-id1686 . -4) (undo-tree-id1687 . -4) (undo-tree-id1688 . -4) (undo-tree-id1689 . -4) (undo-tree-id1690 . -4) (undo-tree-id1691 . -4) (undo-tree-id1692 . -4) (undo-tree-id1693 . -4) (undo-tree-id1694 . -4) (undo-tree-id1695 . -4) (undo-tree-id1696 . -4) (undo-tree-id1697 . -4) (undo-tree-id1698 . -4) (undo-tree-id1699 . -4) (undo-tree-id1700 . -4) (undo-tree-id1701 . -4) (undo-tree-id1702 . -4) (undo-tree-id1703 . -4) (undo-tree-id1704 . -4) (undo-tree-id1705 . -4) (undo-tree-id1706 . -4) (undo-tree-id1707 . -4) (undo-tree-id1708 . -4) (undo-tree-id1709 . -4) (undo-tree-id1710 . -4) (undo-tree-id1711 . -4) (undo-tree-id1712 . -4) (undo-tree-id1713 . -4) (undo-tree-id1714 . -4) (undo-tree-id1715 . -4) (undo-tree-id1716 . -4) (undo-tree-id1717 . -4) (undo-tree-id1718 . -4) (undo-tree-id1719 . -4) (undo-tree-id1720 . -4) (undo-tree-id1721 . -4) (undo-tree-id1722 . -4) (undo-tree-id1723 . -4) (undo-tree-id1724 . -4) (undo-tree-id1725 . -4) (undo-tree-id1726 . -4) (undo-tree-id1727 . -4) (undo-tree-id1728 . -4) (undo-tree-id1729 . -4) (undo-tree-id1730 . -4) (undo-tree-id1731 . -4) (undo-tree-id1732 . -4) (undo-tree-id1733 . -4) (undo-tree-id1734 . -4) (undo-tree-id1735 . -4) (undo-tree-id1736 . -4) (undo-tree-id1737 . -4) (undo-tree-id1738 . -4) (undo-tree-id1739 . -4) (undo-tree-id1740 . -4) (undo-tree-id1741 . -4) (undo-tree-id1742 . -4) (undo-tree-id1743 . -4) (undo-tree-id1744 . -4) (undo-tree-id1745 . -4) (undo-tree-id1746 . -4) (undo-tree-id1747 . -4) (undo-tree-id1748 . -4) (undo-tree-id1749 . -4) (undo-tree-id1750 . -4) (undo-tree-id1751 . -4) (undo-tree-id1752 . -4) (undo-tree-id1753 . -4) (undo-tree-id1754 . -4) (undo-tree-id1755 . -4) (undo-tree-id1756 . -4) (undo-tree-id1757 . -4) 211) nil (26132 274 642512 678000) 0 nil])
([nil nil ((182 . 184)) ((#("if" 0 1 (face font-lock-keyword-face fontified t) 1 2 (face font-lock-keyword-face fontified t)) . 182) (undo-tree-id1391 . -2) (undo-tree-id1392 . -2) (undo-tree-id1393 . -2) (undo-tree-id1394 . -2) (undo-tree-id1395 . -2) (undo-tree-id1396 . -2) (undo-tree-id1397 . -2) (undo-tree-id1398 . -2) (undo-tree-id1399 . -2) (undo-tree-id1400 . -2) (undo-tree-id1401 . -2) (undo-tree-id1402 . -2) (undo-tree-id1403 . -2) (undo-tree-id1404 . -2)) (26132 263 205558 765000) 0 nil])
([nil nil ((#("coretemp-" 0 9 (face font-lock-string-face fontified t)) . -198) (undo-tree-id1529 . -9) (undo-tree-id1530 . -9) (undo-tree-id1531 . -9) (undo-tree-id1532 . -9) (undo-tree-id1533 . -9) (undo-tree-id1534 . -9) (undo-tree-id1535 . -9) (undo-tree-id1536 . -9) (undo-tree-id1537 . -9) (undo-tree-id1538 . -9) (undo-tree-id1539 . -9) (undo-tree-id1540 . -9) (undo-tree-id1541 . -9) (undo-tree-id1542 . -9) (undo-tree-id1543 . -9) (undo-tree-id1544 . -9) (undo-tree-id1545 . -9) (undo-tree-id1546 . -9) (undo-tree-id1547 . -9) (undo-tree-id1548 . -9) (undo-tree-id1549 . -9) (undo-tree-id1550 . -9) (undo-tree-id1551 . -9) (undo-tree-id1552 . -9) (undo-tree-id1553 . -9) (undo-tree-id1554 . -9) (undo-tree-id1555 . -9) (undo-tree-id1556 . -9) (undo-tree-id1557 . -9) (undo-tree-id1558 . -9) (undo-tree-id1559 . -9) (undo-tree-id1560 . -9) (undo-tree-id1561 . -9) (undo-tree-id1562 . -9) (undo-tree-id1563 . -9) (undo-tree-id1564 . -9) (undo-tree-id1565 . -9) (undo-tree-id1566 . -9) (undo-tree-id1567 . -9) (undo-tree-id1568 . -9) (undo-tree-id1569 . -9) (undo-tree-id1570 . -9) (undo-tree-id1571 . -9) (undo-tree-id1572 . -9) (undo-tree-id1573 . -9) (undo-tree-id1574 . -9) (undo-tree-id1575 . -9) (undo-tree-id1576 . -9) (undo-tree-id1577 . -9) (undo-tree-id1578 . -9) (undo-tree-id1579 . -9) (undo-tree-id1580 . -9) (undo-tree-id1581 . -9) (undo-tree-id1582 . -9) (undo-tree-id1583 . -9) (undo-tree-id1584 . -9) (undo-tree-id1585 . -9) (undo-tree-id1586 . -9) (undo-tree-id1587 . -9) (undo-tree-id1588 . -9) (undo-tree-id1589 . -9) (undo-tree-id1590 . -9) (undo-tree-id1591 . -9) (undo-tree-id1592 . -9) (undo-tree-id1593 . -9) (undo-tree-id1594 . -9) (undo-tree-id1595 . -9) (undo-tree-id1596 . -9) (undo-tree-id1597 . -9) (undo-tree-id1598 . -9) (undo-tree-id1599 . -9) (undo-tree-id1600 . -9) (undo-tree-id1601 . -9) (undo-tree-id1602 . -9) (undo-tree-id1603 . -9) (undo-tree-id1604 . -9) (undo-tree-id1605 . -9) (undo-tree-id1606 . -9) (undo-tree-id1607 . -9) (undo-tree-id1608 . -9) (undo-tree-id1609 . -9) (undo-tree-id1610 . -9) (undo-tree-id1611 . -9) (undo-tree-id1612 . -9) (undo-tree-id1613 . -9) (undo-tree-id1614 . -9) (undo-tree-id1615 . -9) (undo-tree-id1616 . -9) (undo-tree-id1617 . -9) (undo-tree-id1618 . -9) (undo-tree-id1619 . -9) (undo-tree-id1620 . -9) (undo-tree-id1621 . -9) (undo-tree-id1622 . -9) (undo-tree-id1623 . -9) (undo-tree-id1624 . -9) (undo-tree-id1625 . -9) (undo-tree-id1626 . -9) (undo-tree-id1627 . -9) (undo-tree-id1628 . -9) (undo-tree-id1629 . -9) (undo-tree-id1630 . -9) (undo-tree-id1631 . -9) (undo-tree-id1632 . -9) (undo-tree-id1633 . -9) (undo-tree-id1634 . -9) (undo-tree-id1635 . -9) (undo-tree-id1636 . -9) (undo-tree-id1637 . -9) (undo-tree-id1638 . -9) (undo-tree-id1639 . -9) (undo-tree-id1640 . -9) (undo-tree-id1641 . -9) (undo-tree-id1642 . -9) (undo-tree-id1643 . -9) (undo-tree-id1644 . -9) 207) nil (26132 274 642438 875000) 0 nil])
([nil nil ((#("f" 0 1 (face font-lock-keyword-face fontified t)) . -183) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) 184) ((183 . 184)) (26132 263 205128 556000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -197) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) 198) nil (26132 274 642138 826000) 0 nil])
nil
([nil nil ((197 . 198)) nil (26132 274 642055 566000) 0 nil])
([nil nil ((198 . 201)) nil (26132 274 642051 367000) 0 nil])
([nil nil ((#("name)" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-3-face) fontified t)) . -197) (undo-tree-id2075 . -5) (undo-tree-id2076 . 1) (undo-tree-id2077 . -5) 202 (t 26132 274 683810 620000)) nil (26132 294 721004 832000) 0 nil])
([nil nil ((#("Some(" 0 4 (face font-lock-type-face fontified t) 4 5 (face (rainbow-delimiters-depth-3-face) fontified t)) . -192) (undo-tree-id1945 . -4) (undo-tree-id1946 . -5) (undo-tree-id1947 . -5) (undo-tree-id1948 . -5) (undo-tree-id1949 . -5) (undo-tree-id1950 . -5) (undo-tree-id1951 . -5) (undo-tree-id1952 . -5) (undo-tree-id1953 . -5) (undo-tree-id1954 . -5) (undo-tree-id1955 . -5) (undo-tree-id1956 . -5) (undo-tree-id1957 . -5) (undo-tree-id1958 . -5) (undo-tree-id1959 . -5) (undo-tree-id1960 . -5) (undo-tree-id1961 . -5) (undo-tree-id1962 . -5) (undo-tree-id1963 . -5) (undo-tree-id1964 . -5) (undo-tree-id1965 . -5) (undo-tree-id1966 . -5) (undo-tree-id1967 . -5) (undo-tree-id1968 . -5) (undo-tree-id1969 . -5) (undo-tree-id1970 . -5) (undo-tree-id1971 . -5) (undo-tree-id1972 . -5) (undo-tree-id1973 . -5) (undo-tree-id1974 . -5) (undo-tree-id1975 . -5) (undo-tree-id1976 . -5) (undo-tree-id1977 . -5) (undo-tree-id1978 . -5) (undo-tree-id1979 . -5) (undo-tree-id1980 . -5) (undo-tree-id1981 . -5) (undo-tree-id1982 . -5) (undo-tree-id1983 . -5) (undo-tree-id1984 . -5) (undo-tree-id1985 . -5) (undo-tree-id1986 . -5) (undo-tree-id1987 . -5) (undo-tree-id1988 . -5) (undo-tree-id1989 . -5) (undo-tree-id1990 . -5) (undo-tree-id1991 . -5) (undo-tree-id1992 . -5) (undo-tree-id1993 . -5) (undo-tree-id1994 . -5) (undo-tree-id1995 . -5) (undo-tree-id1996 . -5) (undo-tree-id1997 . -5) (undo-tree-id1998 . -5) (undo-tree-id1999 . -5) (undo-tree-id2000 . -5) (undo-tree-id2001 . -5) (undo-tree-id2002 . -5) (undo-tree-id2003 . -5) (undo-tree-id2004 . -5) (undo-tree-id2005 . -5) (undo-tree-id2006 . -5) (undo-tree-id2007 . -5) (undo-tree-id2008 . -5) (undo-tree-id2009 . -5) (undo-tree-id2010 . -5) (undo-tree-id2011 . -5) (undo-tree-id2012 . -5) (undo-tree-id2013 . -5) (undo-tree-id2014 . -5) (undo-tree-id2015 . -5) (undo-tree-id2016 . -5) (undo-tree-id2017 . -5) (undo-tree-id2018 . -5) (undo-tree-id2019 . -5) (undo-tree-id2020 . -5) (undo-tree-id2021 . -5) (undo-tree-id2022 . -5) (undo-tree-id2023 . -5) (undo-tree-id2024 . -5) (undo-tree-id2025 . -5) (undo-tree-id2026 . -5) (undo-tree-id2027 . -5) (undo-tree-id2028 . -5) (undo-tree-id2029 . -5) (undo-tree-id2030 . -5) (undo-tree-id2031 . -5) (undo-tree-id2032 . -5) (undo-tree-id2033 . -5) (undo-tree-id2034 . -5) (undo-tree-id2035 . -5) (undo-tree-id2036 . -5) (undo-tree-id2037 . -5) (undo-tree-id2038 . -5) (undo-tree-id2039 . -5) (undo-tree-id2040 . -5) (undo-tree-id2041 . -5) (undo-tree-id2042 . -5) (undo-tree-id2043 . -5) (undo-tree-id2044 . -5) (undo-tree-id2045 . -5) (undo-tree-id2046 . -5) (undo-tree-id2047 . -5) (undo-tree-id2048 . -5) (undo-tree-id2049 . -5) (undo-tree-id2050 . -5) (undo-tree-id2051 . -5) (undo-tree-id2052 . -5) (undo-tree-id2053 . -5) (undo-tree-id2054 . -5) (undo-tree-id2055 . -5) (undo-tree-id2056 . -5) (undo-tree-id2057 . -5) (undo-tree-id2058 . -5) (undo-tree-id2059 . -5) (undo-tree-id2060 . -5) (undo-tree-id2061 . -5) (undo-tree-id2062 . -5) (undo-tree-id2063 . -5) (undo-tree-id2064 . -5) (undo-tree-id2065 . -5) (undo-tree-id2066 . -5) (undo-tree-id2067 . -5) (undo-tree-id2068 . -5) (undo-tree-id2069 . -5) (undo-tree-id2070 . -5) (undo-tree-id2071 . -5) (undo-tree-id2072 . -5) (undo-tree-id2073 . -5) (undo-tree-id2074 . -5) 197) nil (26132 294 720997 267000) 0 nil])
([nil nil ((192 . 196)) nil (26132 294 720641 694000) 0 nil])
([nil nil ((195 . 197)) nil (26132 294 720641 11000) 0 nil])
([nil nil ((nil rear-nonsticky nil 205 . 206) (nil fontified nil 205 . 206) (nil fontified nil 201 . 205) (nil fontified nil 200 . 201) (nil fontified nil 196 . 200) (196 . 206)) nil (26132 294 720640 92000) 0 nil])
([nil nil ((#("name)" 0 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face rear-nonsticky t fontified t)) . -201) (undo-tree-id1935 . -5) (undo-tree-id1936 . -5) (undo-tree-id1937 . -5) (undo-tree-id1938 . -5) (undo-tree-id1939 . -5) (undo-tree-id1940 . -5) (undo-tree-id1941 . -5) (undo-tree-id1942 . -5) (undo-tree-id1943 . -5) (undo-tree-id1944 . -5) 206) nil (26132 294 720638 305000) 0 nil])
([nil nil ((#("Some(" 0 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t)) . -196) (undo-tree-id1923 . -5) (undo-tree-id1924 . -5) (undo-tree-id1925 . -5) (undo-tree-id1926 . -5) (undo-tree-id1927 . -5) (undo-tree-id1928 . -5) (undo-tree-id1929 . -5) (undo-tree-id1930 . -5) (undo-tree-id1931 . -5) (undo-tree-id1932 . -5) (undo-tree-id1933 . -5) (undo-tree-id1934 . -5) 201) nil (26132 294 720630 673000) 0 nil])
([nil nil ((nil rear-nonsticky nil 212 . 213) (nil fontified nil 196 . 213) (196 . 213)) nil (26132 294 720621 803000) 0 nil])
([nil nil ((214 . 216)) nil (26132 294 720620 915000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -214) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (#("," 0 1 (fontified t)) . -215) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) 216) nil (26132 294 720619 500000) 0 nil])
([nil nil ((214 . 217)) nil (26132 294 720605 947000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -214) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (#("t" 0 1 (fontified t)) . -215) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (#("o" 0 1 (fontified t)) . -216) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) 217) nil (26132 294 720601 316000) 0 nil])
([nil nil ((195 . 196) (t 26132 294 733811 851000)) nil (26132 316 363340 732000) 0 nil])
([nil nil ((195 . 198)) nil (26132 316 363339 947000) 0 nil])
([nil nil ((195 . 201) (#("Str" 0 3 (fontified nil)) . 195) (195 . 198) (#("String" 0 6 (fontified nil)) . -195) (195 . 201) (#("Str" 0 3 (face font-lock-type-face fontified t)) . -195) (undo-tree-id2407 . -3) (undo-tree-id2408 . -3) (undo-tree-id2409 . -1) (undo-tree-id2410 . -1) (undo-tree-id2411 . -1) (undo-tree-id2412 . -1) (undo-tree-id2413 . -1) (undo-tree-id2414 . -1) (undo-tree-id2415 . -2) (undo-tree-id2416 . -2) (undo-tree-id2417 . -2) (undo-tree-id2418 . -3) (undo-tree-id2419 . -3) (undo-tree-id2420 . -3) (undo-tree-id2421 . -3) 198) nil (26132 316 363338 505000) 0 nil])
([nil nil ((201 . 204)) nil (26132 316 363328 29000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -203) (undo-tree-id2400 . -1) (undo-tree-id2401 . -1) (undo-tree-id2402 . -1) (undo-tree-id2403 . -1) (undo-tree-id2404 . -1) (undo-tree-id2405 . -1) (undo-tree-id2406 . -1) 204) nil (26132 316 363327 93000) 0 nil])
([nil nil ((#("0000\"" 0 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face rear-nonsticky t fontified t) 4 5 (face font-lock-string-face fontified t)) . -218) (undo-tree-id2352 . -5) (undo-tree-id2353 . -5) (undo-tree-id2354 . -5) (undo-tree-id2355 . -5) (undo-tree-id2356 . -5) (undo-tree-id2357 . -5) (undo-tree-id2358 . -5) (undo-tree-id2359 . -5) (undo-tree-id2360 . -5) (undo-tree-id2361 . -5) (undo-tree-id2362 . -5) (undo-tree-id2363 . -5) (undo-tree-id2364 . -5) (undo-tree-id2365 . -5) (undo-tree-id2366 . -5) (undo-tree-id2367 . -5) (undo-tree-id2368 . -5) (undo-tree-id2369 . -5) (undo-tree-id2370 . -5) (undo-tree-id2371 . -5) (undo-tree-id2372 . -5) (undo-tree-id2373 . -5) (undo-tree-id2374 . -5) (undo-tree-id2375 . -5) (undo-tree-id2376 . -5) (undo-tree-id2377 . -5) (undo-tree-id2378 . -5) (undo-tree-id2379 . -5) (undo-tree-id2380 . -5) (undo-tree-id2381 . -5) (undo-tree-id2382 . -5) (undo-tree-id2383 . -5) (undo-tree-id2384 . -5) (undo-tree-id2385 . -5) (undo-tree-id2386 . -5) (undo-tree-id2387 . -5) (undo-tree-id2388 . -5) (undo-tree-id2389 . -5) (undo-tree-id2390 . -5) (undo-tree-id2391 . -5) (undo-tree-id2392 . -5) (undo-tree-id2393 . -5) (undo-tree-id2394 . -5) (undo-tree-id2395 . -5) (undo-tree-id2396 . -5) (undo-tree-id2397 . -5) (undo-tree-id2398 . -4) (undo-tree-id2399 . -5) 223) nil (26132 316 363320 770000) 0 nil])
([nil nil ((#("isa-" 0 4 (face font-lock-string-face fontified t)) . -214) (undo-tree-id2298 . -4) (undo-tree-id2299 . -4) (undo-tree-id2300 . -4) (undo-tree-id2301 . -4) (undo-tree-id2302 . -4) (undo-tree-id2303 . -4) (undo-tree-id2304 . -4) (undo-tree-id2305 . -4) (undo-tree-id2306 . -4) (undo-tree-id2307 . -4) (undo-tree-id2308 . -4) (undo-tree-id2309 . -4) (undo-tree-id2310 . -4) (undo-tree-id2311 . -4) (undo-tree-id2312 . -4) (undo-tree-id2313 . -4) (undo-tree-id2314 . -4) (undo-tree-id2315 . -4) (undo-tree-id2316 . -4) (undo-tree-id2317 . -4) (undo-tree-id2318 . -4) (undo-tree-id2319 . -4) (undo-tree-id2320 . -4) (undo-tree-id2321 . -4) (undo-tree-id2322 . -4) (undo-tree-id2323 . -4) (undo-tree-id2324 . -4) (undo-tree-id2325 . -4) (undo-tree-id2326 . -4) (undo-tree-id2327 . -4) (undo-tree-id2328 . -4) (undo-tree-id2329 . -4) (undo-tree-id2330 . -4) (undo-tree-id2331 . -4) (undo-tree-id2332 . -4) (undo-tree-id2333 . -4) (undo-tree-id2334 . -4) (undo-tree-id2335 . -4) (undo-tree-id2336 . -4) (undo-tree-id2337 . -4) (undo-tree-id2338 . -4) (undo-tree-id2339 . -4) (undo-tree-id2340 . -4) (undo-tree-id2341 . -4) (undo-tree-id2342 . -4) (undo-tree-id2343 . -4) (undo-tree-id2344 . -4) (undo-tree-id2345 . -3) (undo-tree-id2346 . -4) (undo-tree-id2347 . -4) (undo-tree-id2348 . -4) (undo-tree-id2349 . -4) (undo-tree-id2350 . -4) (undo-tree-id2351 . -4) 218) nil (26132 316 363291 313000) 0 nil])
([nil nil ((#("coretemp-" 0 9 (face font-lock-string-face fontified t)) . -205) (undo-tree-id2239 . -9) (undo-tree-id2240 . -9) (undo-tree-id2241 . -9) (undo-tree-id2242 . -9) (undo-tree-id2243 . -9) (undo-tree-id2244 . -9) (undo-tree-id2245 . -9) (undo-tree-id2246 . -9) (undo-tree-id2247 . -9) (undo-tree-id2248 . -9) (undo-tree-id2249 . -9) (undo-tree-id2250 . -9) (undo-tree-id2251 . -9) (undo-tree-id2252 . -9) (undo-tree-id2253 . -9) (undo-tree-id2254 . -9) (undo-tree-id2255 . -9) (undo-tree-id2256 . -9) (undo-tree-id2257 . -9) (undo-tree-id2258 . -9) (undo-tree-id2259 . -9) (undo-tree-id2260 . -9) (undo-tree-id2261 . -9) (undo-tree-id2262 . -9) (undo-tree-id2263 . -9) (undo-tree-id2264 . -9) (undo-tree-id2265 . -9) (undo-tree-id2266 . -9) (undo-tree-id2267 . -9) (undo-tree-id2268 . -9) (undo-tree-id2269 . -9) (undo-tree-id2270 . -9) (undo-tree-id2271 . -9) (undo-tree-id2272 . -9) (undo-tree-id2273 . -9) (undo-tree-id2274 . -9) (undo-tree-id2275 . -9) (undo-tree-id2276 . -9) (undo-tree-id2277 . -9) (undo-tree-id2278 . -9) (undo-tree-id2279 . -9) (undo-tree-id2280 . -9) (undo-tree-id2281 . -9) (undo-tree-id2282 . -9) (undo-tree-id2283 . -9) (undo-tree-id2284 . -9) (undo-tree-id2285 . -9) (undo-tree-id2286 . -9) (undo-tree-id2287 . -8) (undo-tree-id2288 . -9) (undo-tree-id2289 . -9) (undo-tree-id2290 . -9) (undo-tree-id2291 . -9) (undo-tree-id2292 . -9) (undo-tree-id2293 . -9) (undo-tree-id2294 . -9) (undo-tree-id2295 . -9) (undo-tree-id2296 . -9) (undo-tree-id2297 . -9) 214) nil (26132 316 363237 443000) 0 nil])
([nil nil ((#("String:: \"" 0 6 (face font-lock-type-face fontified t) 6 8 (fontified t) 8 9 (fontified t) 9 10 (face font-lock-string-face fontified t)) . -195) (undo-tree-id2137 . -10) (undo-tree-id2138 . -10) (undo-tree-id2139 . -10) (undo-tree-id2140 . -10) (undo-tree-id2141 . -10) (undo-tree-id2142 . -10) (undo-tree-id2143 . -10) (undo-tree-id2144 . -10) (undo-tree-id2145 . -10) (undo-tree-id2146 . -10) (undo-tree-id2147 . -10) (undo-tree-id2148 . -10) (undo-tree-id2149 . -10) (undo-tree-id2150 . -10) (undo-tree-id2151 . -10) (undo-tree-id2152 . -10) (undo-tree-id2153 . -10) (undo-tree-id2154 . -10) (undo-tree-id2155 . -10) (undo-tree-id2156 . -10) (undo-tree-id2157 . -10) (undo-tree-id2158 . -10) (undo-tree-id2159 . -10) (undo-tree-id2160 . -10) (undo-tree-id2161 . -10) (undo-tree-id2162 . -10) (undo-tree-id2163 . -10) (undo-tree-id2164 . -10) (undo-tree-id2165 . -10) (undo-tree-id2166 . -10) (undo-tree-id2167 . -10) (undo-tree-id2168 . -10) (undo-tree-id2169 . -10) (undo-tree-id2170 . -10) (undo-tree-id2171 . -10) (undo-tree-id2172 . -10) (undo-tree-id2173 . -10) (undo-tree-id2174 . -10) (undo-tree-id2175 . -10) (undo-tree-id2176 . -10) (undo-tree-id2177 . -10) (undo-tree-id2178 . -10) (undo-tree-id2179 . -10) (undo-tree-id2180 . -10) (undo-tree-id2181 . -10) (undo-tree-id2182 . -10) (undo-tree-id2183 . -10) (undo-tree-id2184 . -10) (undo-tree-id2185 . -10) (undo-tree-id2186 . -10) (undo-tree-id2187 . -10) (undo-tree-id2188 . -10) (undo-tree-id2189 . -10) (undo-tree-id2190 . -10) (undo-tree-id2191 . -10) (undo-tree-id2192 . -10) (undo-tree-id2193 . -10) (undo-tree-id2194 . -10) (undo-tree-id2195 . -10) (undo-tree-id2196 . -10) (undo-tree-id2197 . -10) (undo-tree-id2198 . -10) (undo-tree-id2199 . -10) (undo-tree-id2200 . -9) (undo-tree-id2201 . -9) (undo-tree-id2202 . -6) (undo-tree-id2203 . -6) (undo-tree-id2204 . -6) (undo-tree-id2205 . -6) (undo-tree-id2206 . -6) (undo-tree-id2207 . -7) (undo-tree-id2208 . -8) (undo-tree-id2209 . -8) (undo-tree-id2210 . -8) (undo-tree-id2211 . -8) (undo-tree-id2212 . 2) (undo-tree-id2213 . -8) (undo-tree-id2214 . -8) (undo-tree-id2215 . -8) (undo-tree-id2216 . -8) (undo-tree-id2217 . -8) (undo-tree-id2218 . -8) (undo-tree-id2219 . -8) (undo-tree-id2220 . -8) (undo-tree-id2221 . -8) (undo-tree-id2222 . -8) (undo-tree-id2223 . -8) (undo-tree-id2224 . -8) (undo-tree-id2225 . -10) (undo-tree-id2226 . -10) (undo-tree-id2227 . -10) (undo-tree-id2228 . -10) (undo-tree-id2229 . -10) (undo-tree-id2230 . -10) (undo-tree-id2231 . -10) (undo-tree-id2232 . -10) (undo-tree-id2233 . -10) (undo-tree-id2234 . -10) (undo-tree-id2235 . -10) (undo-tree-id2236 . -10) (undo-tree-id2237 . -10) (undo-tree-id2238 . -10) 205) nil (26132 316 363162 209000) 0 nil])
([nil nil ((195 . 198)) nil (26132 316 363099 84000) 0 nil])
([nil nil ((195 . 201) (#("Str" 0 3 (fontified nil)) . 195) (195 . 198) (#("String" 0 6 (fontified nil)) . -195) (195 . 201) (#("Str" 0 3 (face font-lock-type-face fontified t)) . -195) (undo-tree-id2119 . -3) (undo-tree-id2120 . -3) (undo-tree-id2121 . -1) (undo-tree-id2122 . -1) (undo-tree-id2123 . -1) (undo-tree-id2124 . -1) (undo-tree-id2125 . -1) (undo-tree-id2126 . -2) (undo-tree-id2127 . -2) (undo-tree-id2128 . -2) (undo-tree-id2129 . -3) (undo-tree-id2130 . -3) (undo-tree-id2131 . -3) (undo-tree-id2132 . -3) (undo-tree-id2133 . -3) (undo-tree-id2134 . -3) (undo-tree-id2135 . -3) (undo-tree-id2136 . -3) 198) nil (26132 316 363097 472000) 0 nil])
([nil nil ((201 . 206)) nil (26132 316 363083 470000) 0 nil])
([nil nil ((#("new" 0 3 (fontified t)) . -203) (undo-tree-id2104 . -3) (undo-tree-id2105 . -3) (undo-tree-id2106 . -1) (undo-tree-id2107 . -1) (undo-tree-id2108 . -2) (undo-tree-id2109 . -2) (undo-tree-id2110 . -3) (undo-tree-id2111 . -3) (undo-tree-id2112 . -3) (undo-tree-id2113 . -3) (undo-tree-id2114 . -3) (undo-tree-id2115 . -3) (undo-tree-id2116 . -3) (undo-tree-id2117 . -3) (undo-tree-id2118 . -3) 206) nil (26132 316 363082 36000) 0 nil])
([nil nil ((#("String::" 0 6 (face font-lock-type-face fontified t) 6 8 (fontified t)) . -195) (undo-tree-id2078 . -8) (undo-tree-id2079 . -8) (undo-tree-id2080 . -6) (undo-tree-id2081 . -6) (undo-tree-id2082 . -6) (undo-tree-id2083 . -6) (undo-tree-id2084 . -6) (undo-tree-id2085 . -7) (undo-tree-id2086 . -7) (undo-tree-id2087 . -8) (undo-tree-id2088 . -8) (undo-tree-id2089 . -8) (undo-tree-id2090 . -8) (undo-tree-id2091 . -8) (undo-tree-id2092 . -8) (undo-tree-id2093 . -8) (undo-tree-id2094 . -8) (undo-tree-id2095 . -8) (undo-tree-id2096 . -8) (undo-tree-id2097 . -8) (undo-tree-id2098 . -8) (undo-tree-id2099 . -8) (undo-tree-id2100 . -8) (undo-tree-id2101 . -8) (undo-tree-id2102 . -8) (undo-tree-id2103 . -8) 203) nil (26132 316 363068 511000) 0 nil])
([nil nil ((195 . 199)) nil (26132 316 362921 233000) 0 nil])
([nil nil ((#("info!(\"Found sensor: {}\", &name);" 0 4 (face font-lock-preprocessor-face fontified t) 4 5 (face font-lock-preprocessor-face fontified t) 5 6 (face (rainbow-delimiters-depth-3-face) fontified t) 6 21 (face font-lock-string-face fontified t) 21 23 (face font-lock-string-face fontified t) 23 24 (face font-lock-string-face fontified t) 24 26 (fontified t) 26 27 (face rust-ampersand-face fontified t) 27 31 (fontified t) 31 32 (face (rainbow-delimiters-depth-3-face) fontified t) 32 33 (fontified t)) . 252) (undo-tree-id2422 . -17) (undo-tree-id2423 . -33) (t 26132 316 377146 512000)) nil (26132 334 947819 471000) 0 nil])
([nil nil ((233 . 240)) nil (26132 334 947812 0) 0 nil])
([nil nil ((240 . 245)) nil (26132 334 948198 955000) 0 nil])
([nil nil ((nil rear-nonsticky nil 260 . 261) (nil fontified nil 244 . 261) (244 . 261)) nil (26132 371 627307 204000) 0 nil] [nil nil ((nil rear-nonsticky nil 276 . 277) (nil fontified nil 276 . 277) (nil fontified nil 275 . 276) (nil fontified nil 271 . 275) (nil fontified nil 270 . 271) (nil fontified nil 268 . 270) (nil fontified nil 267 . 268) (nil fontified nil 265 . 267) (nil fontified nil 250 . 265) (nil fontified nil 249 . 250) (nil fontified nil 248 . 249) (nil fontified nil 244 . 248) (244 . 277)) ((#("info!(\"Found sensor: {}\", &name);" 0 4 (face font-lock-string-face fontified nil) 4 5 (face font-lock-string-face fontified nil) 5 6 (face font-lock-string-face fontified nil) 6 7 (face font-lock-string-face fontified nil) 7 12 (face font-lock-type-face fontified nil) 12 13 (fontified nil) 13 19 (face font-lock-variable-name-face fontified nil) 19 21 (fontified nil) 21 22 (face (rainbow-delimiters-depth-4-face) fontified nil) 22 23 (face (rainbow-delimiters-depth-4-face) fontified nil) 23 24 (face font-lock-string-face fontified nil) 24 26 (face font-lock-string-face fontified nil) 26 27 (face font-lock-string-face fontified nil) 27 31 (face font-lock-string-face fontified nil) 31 32 (face font-lock-string-face fontified nil) 32 33 (face font-lock-string-face rear-nonsticky nil fontified nil)) . 244) (undo-tree-id2424 . -33) (undo-tree-id2425 . -33) (undo-tree-id2426 . -33) (nil rear-nonsticky t 276 . 277)) (26132 334 947806 32000) 0 nil])
([nil nil ((241 . 242)) nil (26132 371 627306 291000) 0 nil])
nil
([nil nil ((240 . 242)) nil (26132 371 627305 759000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -240) (undo-tree-id2468 . -1) (undo-tree-id2469 . -1) (undo-tree-id2470 . -1) (undo-tree-id2471 . -1) (undo-tree-id2472 . -1) (undo-tree-id2473 . -1) (undo-tree-id2474 . -1) (undo-tree-id2475 . -1) (undo-tree-id2476 . -1) (undo-tree-id2477 . -1) (undo-tree-id2478 . -1) (#("." 0 1 (fontified t)) . -241) (undo-tree-id2479 . -1) (undo-tree-id2480 . -1) (undo-tree-id2481 . -1) (undo-tree-id2482 . -1) (undo-tree-id2483 . -1) (undo-tree-id2484 . -1) 242) nil (26132 371 627304 444000) 0 nil])
([nil nil ((240 . 241)) nil (26132 371 627293 471000) 0 nil])
([nil nil ((241 . 243)) nil (26132 371 627292 862000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 262 267 nil nil nil nil #s(yas--exit 268 nil))) #s(yas--exit 268 nil) 10 nil #s(yas--field 1 262 267 nil nil nil nil #s(yas--exit 268 nil)) nil nil)) (241 . 268) (#("eq_ignore_ascii_case(${1:other})$0" 0 34 (fontified nil)) . 241) (241 . 275) (#("eq" 0 2 (fontified nil)) . 241) (241 . 243) (#("eq_ignore_ascii_case(…)" 0 23 (fontified nil)) . -241) (241 . 264) (#("eq" 0 2 (fontified t)) . -241) (undo-tree-id2459 . -2) (undo-tree-id2460 . -1) (undo-tree-id2461 . -1) (undo-tree-id2462 . -1) (undo-tree-id2463 . -2) (undo-tree-id2464 . -2) (undo-tree-id2465 . -2) (undo-tree-id2466 . -2) (undo-tree-id2467 . -2) 243) nil (26132 371 627291 31000) 0 nil])
([nil nil ((apply yas--snippet-revive 241 268 #s(yas--snippet nil (#s(yas--field 1 262 267 nil nil nil nil #s(yas--exit 268 nil))) #s(yas--exit 268 nil) 10 nil #s(yas--field 1 262 267 nil nil nil nil #s(yas--exit 268 nil)) nil nil))) nil (26132 371 627283 237000) 0 nil])
([nil nil ((#("other) == " 0 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-4-face) fontified t) 6 10 (fontified t)) . -262) (undo-tree-id2431 . -10) (undo-tree-id2432 . -10) (undo-tree-id2433 . -7) (undo-tree-id2434 . -8) (undo-tree-id2435 . -8) (undo-tree-id2436 . -8) (undo-tree-id2437 . -7) (undo-tree-id2438 . -7) (undo-tree-id2439 . -7) (undo-tree-id2440 . -7) (undo-tree-id2441 . -6) (undo-tree-id2442 . -6) (undo-tree-id2443 . -1) (undo-tree-id2444 . -2) (undo-tree-id2445 . -2) (undo-tree-id2446 . -2) (undo-tree-id2447 . -2) (undo-tree-id2448 . -2) (undo-tree-id2449 . -3) (undo-tree-id2450 . -4) (undo-tree-id2451 . -5) (undo-tree-id2452 . -6) (undo-tree-id2453 . -6) (undo-tree-id2454 . -6) (undo-tree-id2455 . -7) (undo-tree-id2456 . -8) (undo-tree-id2457 . -9) (undo-tree-id2458 . -10) 272) nil (26132 371 627281 398000) 0 nil])
([nil nil ((281 . 285)) nil (26132 371 627261 463000) 0 nil])
([nil nil ((286 . 298) (#("                " 0 16 (fontified nil)) . 285) (285 . 301) (#("            " 0 12 (fontified nil)) . 285) (undo-tree-id2427 . -12) (undo-tree-id2428 . -12) (undo-tree-id2429 . -12) (undo-tree-id2430 . -12) (284 . 298)) nil (26132 371 627257 864000) 0 nil])
([nil nil ((285 . 301) (t 26132 371 670483 240000)) nil (26132 383 495979 672000) 0 nil])
([nil nil ((301 . 304)) nil (26132 383 495978 788000) 0 nil])
([nil nil ((apply yas--snippet-revive 301 308 #s(yas--snippet nil nil #s(yas--exit 307 nil) 11 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 307 nil) 11 nil nil nil nil)) (301 . 308) (#("info!($0)" 0 9 (fontified nil)) . 301) (301 . 310) (#("inf" 0 3 (fontified nil)) . 301) (301 . 304) (#("info!(…)" 0 8 (fontified nil)) . -301) (301 . 309) (#("inf" 0 3 (fontified t)) . -301) (undo-tree-id2505 . -3) (undo-tree-id2506 . -1) (undo-tree-id2507 . -1) (undo-tree-id2508 . -2) (undo-tree-id2509 . -2) (undo-tree-id2510 . -3) (undo-tree-id2511 . -3) (undo-tree-id2512 . -3) (undo-tree-id2513 . -3) (undo-tree-id2514 . -3) 304) nil (26132 383 495977 382000) 0 nil])
([nil nil ((307 . 309)) nil (26132 383 495966 963000) 0 nil])
([nil nil ((308 . 312)) nil (26132 383 495965 785000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -312) (undo-tree-id2501 . -1) (undo-tree-id2502 . -1) (undo-tree-id2503 . 1) (undo-tree-id2504 . -1) 313) nil (26132 383 495963 815000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -307) (undo-tree-id2485 . -1) (undo-tree-id2486 . -1) (undo-tree-id2487 . -1) (undo-tree-id2488 . -1) (undo-tree-id2489 . -1) (undo-tree-id2490 . -1) (undo-tree-id2491 . -1) (undo-tree-id2492 . -1) (undo-tree-id2493 . -1) (undo-tree-id2494 . -1) (undo-tree-id2495 . -1) (undo-tree-id2496 . -1) (undo-tree-id2497 . -1) (undo-tree-id2498 . -1) (undo-tree-id2499 . -1) (undo-tree-id2500 . -1) 308) nil (26132 383 495923 862000) 0 nil])
([nil nil ((312 . 313)) nil (26132 384 346602 284000) 0 nil])
([nil nil ((#("case" 0 4 (fontified t)) . -257) (undo-tree-id2631 . -4) (undo-tree-id2632 . -4) 261 (t 26132 383 507150 634000)) nil (26132 403 178592 4000) 0 nil] [nil nil ((#("coretemp-isa-0000\") {
                info!(name);" 0 16 (face font-lock-string-face fontified t) 16 17 (face font-lock-string-face rear-nonsticky t fontified t) 17 18 (face font-lock-string-face fontified t) 18 19 (face (rainbow-delimiters-depth-4-face) fontified t) 19 20 (fontified t) 20 21 (face (rainbow-delimiters-depth-4-face) fontified t) 21 22 (fontified t) 22 38 (fontified t) 38 43 (face font-lock-preprocessor-face fontified t) 43 44 (face (rainbow-delimiters-depth-5-face) fontified t) 44 48 (fontified t) 48 49 (face (rainbow-delimiters-depth-5-face) fontified t) 49 50 (fontified t)) . 263) (undo-tree-id2515 . -38) (undo-tree-id2516 . -50) (undo-tree-id2517 . -38) (undo-tree-id2518 . -38) (undo-tree-id2519 . -38) (undo-tree-id2520 . -38) (undo-tree-id2521 . -38) (undo-tree-id2522 . -38) (undo-tree-id2523 . -38) (undo-tree-id2524 . -38) (undo-tree-id2525 . -38) (undo-tree-id2526 . -44) (undo-tree-id2527 . -44) (undo-tree-id2528 . -44) (undo-tree-id2529 . -44) (undo-tree-id2530 . -48) (undo-tree-id2531 . -44) (undo-tree-id2532 . -44) (undo-tree-id2533 . -44) (undo-tree-id2534 . -44) (undo-tree-id2535 . -44) (undo-tree-id2536 . -44) (undo-tree-id2537 . -44) (undo-tree-id2538 . -44) (undo-tree-id2539 . 2) (undo-tree-id2540 . -48) (undo-tree-id2541 . -44) (undo-tree-id2542 . -44) (undo-tree-id2543 . -44) (undo-tree-id2544 . -22) (undo-tree-id2545 . -50) (undo-tree-id2546 . -50) (undo-tree-id2547 . -50) 313 (t 26132 383 507150 634000)) ((263 . 313)) (26132 384 346209 835000) 0 nil])
([nil nil ((#("ascii_" 0 6 (fontified t)) . -251) (undo-tree-id2626 . -6) (undo-tree-id2627 . -5) (undo-tree-id2628 . -6) (undo-tree-id2629 . -6) (undo-tree-id2630 . -6) 257) nil (26132 403 178587 829000) 0 nil])
nil
([nil nil ((#("ignore_" 0 7 (fontified t)) . -244) (undo-tree-id2618 . -7) (undo-tree-id2619 . -6) (undo-tree-id2620 . -7) (undo-tree-id2621 . -7) (undo-tree-id2622 . -7) (undo-tree-id2623 . -7) (undo-tree-id2624 . -7) (undo-tree-id2625 . -7) 251) nil (26132 403 178580 881000) 0 nil])
([nil nil ((#("eq_" 0 3 (fontified t)) . -241) (undo-tree-id2599 . -2) (undo-tree-id2600 . -3) (undo-tree-id2601 . -2) (undo-tree-id2602 . -2) (undo-tree-id2603 . -2) (undo-tree-id2604 . -2) (undo-tree-id2605 . -2) (undo-tree-id2606 . -2) (undo-tree-id2607 . -2) (undo-tree-id2608 . -2) (undo-tree-id2609 . -3) (undo-tree-id2610 . -3) (undo-tree-id2611 . -3) (undo-tree-id2612 . -3) (undo-tree-id2613 . -3) (undo-tree-id2614 . -3) (undo-tree-id2615 . -3) (undo-tree-id2616 . -3) (undo-tree-id2617 . -3) 244) nil (26132 403 178569 265000) 0 nil])
([nil nil ((241 . 242)) nil (26132 403 178335 655000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -240) (undo-tree-id2560 . -1) (undo-tree-id2561 . -1) (undo-tree-id2562 . -1) (undo-tree-id2563 . -1) (undo-tree-id2564 . -1) (undo-tree-id2565 . -1) (undo-tree-id2566 . -1) (undo-tree-id2567 . -1) (undo-tree-id2568 . -1) (undo-tree-id2569 . -1) (undo-tree-id2570 . -1) (undo-tree-id2571 . -1) (undo-tree-id2572 . -1) (undo-tree-id2573 . -1) (undo-tree-id2574 . -1) (undo-tree-id2575 . -1) (undo-tree-id2576 . -1) (undo-tree-id2577 . -1) (undo-tree-id2578 . -1) (undo-tree-id2579 . -1) (undo-tree-id2580 . -1) (undo-tree-id2581 . -1) (undo-tree-id2582 . -1) (undo-tree-id2583 . -1) (undo-tree-id2584 . -1) (undo-tree-id2585 . -1) (undo-tree-id2586 . -1) (undo-tree-id2587 . -1) (undo-tree-id2588 . -1) (undo-tree-id2589 . -1) (undo-tree-id2590 . -1) (undo-tree-id2591 . -1) (undo-tree-id2592 . -1) (undo-tree-id2593 . -1) (undo-tree-id2594 . -1) (#("=" 0 1 (fontified t)) . -241) (undo-tree-id2595 . -1) (undo-tree-id2596 . -1) (undo-tree-id2597 . -1) (undo-tree-id2598 . -1) 242) nil (26132 403 178333 674000) 0 nil])
([nil nil ((240 . 243)) nil (26132 403 178308 928000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -242) (undo-tree-id2556 . -1) (undo-tree-id2557 . -1) (undo-tree-id2558 . -1) (undo-tree-id2559 . -1) 243) nil (26132 403 178307 643000) 0 nil])
([nil nil ((242 . 244)) nil (26132 403 178304 233000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -244) (undo-tree-id2550 . -1) (undo-tree-id2551 . -1) (undo-tree-id2552 . 1) (undo-tree-id2553 . -1) (undo-tree-id2554 . -1) (undo-tree-id2555 . -1) 245) nil (26132 403 178302 661000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -263) (undo-tree-id2548 . -1) (undo-tree-id2549 . -1) 264) nil (26132 403 178294 850000) 0 nil])
([nil nil ((#("while let Ok(name) = chip.get_name() {" 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 9 (face font-lock-keyword-face fontified t) 9 10 (fontified t) 10 12 (face font-lock-type-face fontified t) 12 13 (face (rainbow-delimiters-depth-3-face) fontified t) 13 17 (fontified t) 17 18 (face (rainbow-delimiters-depth-3-face) fontified t) 18 21 (fontified t) 21 26 (fontified t) 26 34 (fontified t) 34 35 (face (rainbow-delimiters-depth-3-face) fontified t) 35 36 (face (rainbow-delimiters-depth-3-face) fontified t) 36 37 (fontified t) 37 38 (face (rainbow-delimiters-depth-3-face) fontified t)) . 182) (undo-tree-id2636 . -10) (undo-tree-id2637 . -10) (undo-tree-id2638 . -27) (undo-tree-id2639 . -13) (undo-tree-id2640 . -20) (undo-tree-id2641 . -20) (undo-tree-id2642 . -20) (undo-tree-id2643 . -20) (undo-tree-id2644 . -5) (undo-tree-id2645 . -9) (undo-tree-id2646 . -12) (undo-tree-id2647 . -17) (undo-tree-id2648 . -25) (undo-tree-id2649 . -29) (undo-tree-id2650 . -29) (undo-tree-id2651 . -29) (undo-tree-id2652 . -29) (undo-tree-id2653 . -29) (undo-tree-id2654 . -29) (undo-tree-id2655 . -29) (undo-tree-id2656 . -29) (undo-tree-id2657 . -29) (undo-tree-id2658 . -5) (undo-tree-id2659 . -9) (undo-tree-id2660 . -12) (undo-tree-id2661 . -17) (undo-tree-id2662 . -17) (undo-tree-id2663 . -17) (undo-tree-id2664 . -17) (undo-tree-id2665 . -17) (undo-tree-id2666 . -17) (undo-tree-id2667 . -17) (undo-tree-id2668 . -17) (undo-tree-id2669 . -17) (undo-tree-id2670 . -18) (undo-tree-id2671 . -18) (undo-tree-id2672 . -18) (undo-tree-id2673 . -18) (undo-tree-id2674 . -18) (undo-tree-id2675 . -18) (undo-tree-id2676 . -18) (undo-tree-id2677 . -38) (t 26132 403 190485 175000)) nil (26132 446 62292 629000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 182) (undo-tree-id2634 . -1) (undo-tree-id2635 . -1)) nil (26132 446 62004 82000) 0 nil])
([nil nil ((#("            " 0 12 (fontified t)) . -182)) nil (26132 446 770600 36000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -252)) nil (26132 452 665224 591000) 0 nil] [nil nil ((#("    }" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-3-face) fontified t)) . 252) (undo-tree-id2633 . -5)) ((252 . 257)) (26132 446 236486 500000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -227) (undo-tree-id2694 . -4) (undo-tree-id2695 . -4) 223) nil (26132 452 665223 796000) 0 nil])
([nil nil ((252 . 256)) ((#("    " 0 4 (fontified t)) . 252)) (26132 446 62534 785000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -254) 259) nil (26132 452 665220 893000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -227)) ((227 . 231)) (26132 446 61987 964000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -265) 270) nil (26132 452 665219 700000) 0 nil])
nil
([nil nil ((267 . 268)) nil (26132 452 665218 311000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t)) . -267) (undo-tree-id2687 . -1) (undo-tree-id2688 . -1) (undo-tree-id2689 . -1) (undo-tree-id2690 . -1) (undo-tree-id2691 . -1) (undo-tree-id2692 . -1) (undo-tree-id2693 . -1) 268) nil (26132 452 665215 977000) 0 nil])
([nil nil ((#("}" 0 1 (face (rainbow-delimiters-unmatched-face) fontified t)) . -267) (undo-tree-id2678 . -1) (undo-tree-id2679 . -1) (undo-tree-id2680 . -1) (undo-tree-id2681 . -1) (undo-tree-id2682 . -1) (undo-tree-id2683 . -1) (undo-tree-id2684 . -1) (undo-tree-id2685 . 1) (undo-tree-id2686 . -1) 268) nil (26132 452 665203 386000) 0 nil])
([nil nil ((#("0000\" {" 0 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t rear-nonsticky t) 4 5 (face font-lock-string-face fontified t) 5 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-3-face) fontified t)) . -207) (undo-tree-id2992 . -7) (undo-tree-id2993 . -7) 214 (t 26132 452 677154 879000)) nil (26132 498 613122 280000) 0 nil])
([nil nil ((#("isa-" 0 4 (face font-lock-string-face fontified t)) . -203) (undo-tree-id2985 . -4) (undo-tree-id2986 . -4) (undo-tree-id2987 . -4) (undo-tree-id2988 . -4) (undo-tree-id2989 . -4) (undo-tree-id2990 . -4) (undo-tree-id2991 . -4) 207) nil (26132 498 613119 902000) 0 nil])
([nil nil ((#("coretemp-" 0 9 (face font-lock-string-face fontified t)) . -194) (undo-tree-id2975 . -9) (undo-tree-id2976 . -9) (undo-tree-id2977 . -9) (undo-tree-id2978 . -9) (undo-tree-id2979 . -9) (undo-tree-id2980 . -9) (undo-tree-id2981 . -9) (undo-tree-id2982 . -9) (undo-tree-id2983 . -9) (undo-tree-id2984 . -9) 203) nil (26132 498 613114 330000) 0 nil])
([nil nil ((#("name == \"" 0 8 (fontified t) 8 9 (face font-lock-string-face fontified t)) . -185) (undo-tree-id2956 . -9) (undo-tree-id2957 . -9) (undo-tree-id2958 . -9) (undo-tree-id2959 . -9) (undo-tree-id2960 . -9) (undo-tree-id2961 . -9) (undo-tree-id2962 . -8) (undo-tree-id2963 . -9) (undo-tree-id2964 . -9) (undo-tree-id2965 . -9) (undo-tree-id2966 . -9) (undo-tree-id2967 . -9) (undo-tree-id2968 . -9) (undo-tree-id2969 . -9) (undo-tree-id2970 . -9) (undo-tree-id2971 . -9) (undo-tree-id2972 . -9) (undo-tree-id2973 . -9) (undo-tree-id2974 . -9) 194) nil (26132 498 613107 400000) 0 nil])
([nil nil ((185 . 186)) nil (26132 498 613095 333000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -185) (undo-tree-id2952 . -1) (undo-tree-id2953 . -1) (undo-tree-id2954 . -1) (undo-tree-id2955 . -1) 186) nil (26132 498 613094 593000) 0 nil])
([nil nil ((185 . 186)) nil (26132 498 613091 590000) 0 nil])
([nil nil ((185 . 189) (#("c" 0 1 (fontified nil)) . 185) (185 . 186) (#("chip" 0 4 (fontified nil)) . -185) (185 . 189) (#("c" 0 1 (fontified t)) . -185) (undo-tree-id2946 . -1) (undo-tree-id2947 . -1) (undo-tree-id2948 . -1) (undo-tree-id2949 . -1) (undo-tree-id2950 . -1) (undo-tree-id2951 . -1) 186) nil (26132 498 613090 522000) 0 nil])
([nil nil ((189 . 191)) nil (26132 498 613085 446000) 0 nil])
([nil nil ((apply yas--snippet-revive 190 200 #s(yas--snippet nil nil #s(yas--exit 200 nil) 12 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 200 nil) 12 nil nil nil nil)) (190 . 200) (#("get_name()$0" 0 12 (fontified nil)) . 190) (190 . 202) (#("g" 0 1 (fontified nil)) . 190) (190 . 191) (#("get_name()" 0 10 (fontified nil)) . -190) (190 . 200) (#("g" 0 1 (fontified t)) . -190) (undo-tree-id2940 . -1) (undo-tree-id2941 . -1) (undo-tree-id2942 . -1) (undo-tree-id2943 . -1) (undo-tree-id2944 . -1) (undo-tree-id2945 . -1) 191) nil (26132 498 613084 113000) 0 nil])
([nil nil ((200 . 203)) nil (26132 498 613078 760000) 0 nil])
([nil nil ((#("7" 0 1 (fontified t)) . -201) (undo-tree-id2925 . -1) (undo-tree-id2926 . -1) (undo-tree-id2927 . -1) (undo-tree-id2928 . -1) (undo-tree-id2929 . -1) (undo-tree-id2930 . -1) (undo-tree-id2931 . -1) (undo-tree-id2932 . -1) (undo-tree-id2933 . -1) (undo-tree-id2934 . -1) (#("u" 0 1 (fontified t)) . -202) (undo-tree-id2935 . -1) (undo-tree-id2936 . -1) (undo-tree-id2937 . -1) (undo-tree-id2938 . -1) (undo-tree-id2939 . -1) 203) nil (26132 498 613077 501000) 0 nil])
([nil nil ((201 . 203)) nil (26132 498 613067 476000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -201) (undo-tree-id2913 . -1) (undo-tree-id2914 . -1) (undo-tree-id2915 . -1) (undo-tree-id2916 . -1) (undo-tree-id2917 . -1) (undo-tree-id2918 . -1) (undo-tree-id2919 . -1) (#("u" 0 1 (fontified t)) . -202) (undo-tree-id2920 . -1) (undo-tree-id2921 . -1) (undo-tree-id2922 . -1) (undo-tree-id2923 . -1) (undo-tree-id2924 . -1) 203) nil (26132 498 613066 288000) 0 nil])
([nil nil ((201 . 202)) nil (26132 498 613058 779000) 0 nil])
([nil nil ((apply yas--snippet-revive 201 209 #s(yas--snippet nil nil #s(yas--exit 209 nil) 13 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 209 nil) 13 nil nil nil nil)) (201 . 209) (#("unwrap()$0" 0 10 (fontified nil)) . 201) (201 . 211) (#("u" 0 1 (fontified nil)) . 201) (201 . 202) (#("unwrap()" 0 8 (fontified nil)) . -201) (201 . 209) (#("u" 0 1 (fontified t)) . -201) (undo-tree-id2907 . -1) (undo-tree-id2908 . -1) (undo-tree-id2909 . -1) (undo-tree-id2910 . -1) (undo-tree-id2911 . -1) (undo-tree-id2912 . -1) 202) nil (26132 498 613057 507000) 0 nil])
([nil nil ((209 . 212)) nil (26132 498 613051 758000) 0 nil])
([nil nil ((#("unwrap() ==" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-3-face) fontified t) 7 8 (face (rainbow-delimiters-depth-3-face) fontified t) 8 11 (fontified t)) . -201) (undo-tree-id2883 . -11) (undo-tree-id2884 . -8) (undo-tree-id2885 . -8) (undo-tree-id2886 . -8) (undo-tree-id2887 . -8) (undo-tree-id2888 . -8) (undo-tree-id2889 . -8) (undo-tree-id2890 . -8) (undo-tree-id2891 . -8) (undo-tree-id2892 . -8) (undo-tree-id2893 . -8) (undo-tree-id2894 . -9) (undo-tree-id2895 . -9) (undo-tree-id2896 . -9) (undo-tree-id2897 . -9) (undo-tree-id2898 . -9) (undo-tree-id2899 . -10) (undo-tree-id2900 . -10) (undo-tree-id2901 . -10) (undo-tree-id2902 . -11) (undo-tree-id2903 . -11) (undo-tree-id2904 . -11) (undo-tree-id2905 . -11) (undo-tree-id2906 . -11) 212) nil (26132 498 613050 218000) 0 nil])
([nil nil ((#("name()." 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-3-face) fontified t) 5 6 (face (rainbow-delimiters-depth-3-face) fontified t) 6 7 (fontified t)) . -194) (undo-tree-id2824 . -7) (undo-tree-id2825 . -6) (undo-tree-id2826 . -6) (undo-tree-id2827 . -6) (undo-tree-id2828 . -7) (undo-tree-id2829 . -7) (undo-tree-id2830 . -7) (undo-tree-id2831 . -7) (undo-tree-id2832 . -7) (undo-tree-id2833 . -7) (undo-tree-id2834 . -7) (undo-tree-id2835 . -7) (undo-tree-id2836 . -7) (undo-tree-id2837 . -7) (undo-tree-id2838 . -7) (undo-tree-id2839 . -7) (undo-tree-id2840 . -7) (undo-tree-id2841 . -7) (undo-tree-id2842 . -7) (undo-tree-id2843 . -7) (undo-tree-id2844 . -7) (undo-tree-id2845 . -7) (undo-tree-id2846 . -7) (undo-tree-id2847 . -7) (undo-tree-id2848 . -7) (undo-tree-id2849 . -7) (undo-tree-id2850 . -7) (undo-tree-id2851 . -7) (undo-tree-id2852 . -7) (undo-tree-id2853 . -7) (undo-tree-id2854 . -7) (undo-tree-id2855 . -7) (undo-tree-id2856 . -7) (undo-tree-id2857 . -7) (undo-tree-id2858 . -7) (undo-tree-id2859 . -7) (undo-tree-id2860 . -7) (undo-tree-id2861 . -7) (undo-tree-id2862 . -7) (undo-tree-id2863 . -7) (undo-tree-id2864 . -7) (undo-tree-id2865 . -7) (undo-tree-id2866 . -7) (undo-tree-id2867 . -7) (undo-tree-id2868 . -7) (undo-tree-id2869 . -7) (undo-tree-id2870 . -7) (undo-tree-id2871 . -7) (undo-tree-id2872 . -7) (undo-tree-id2873 . -7) (undo-tree-id2874 . -7) (undo-tree-id2875 . -7) (undo-tree-id2876 . -7) (undo-tree-id2877 . -7) (undo-tree-id2878 . -7) (undo-tree-id2879 . -7) (undo-tree-id2880 . -7) (undo-tree-id2881 . -7) (undo-tree-id2882 . -7) 201) nil (26132 498 612815 43000) 0 nil])
([nil nil ((194 . 195)) nil (26132 498 612779 730000) 0 nil])
([nil nil ((apply yas--snippet-revive 190 200 #s(yas--snippet nil nil #s(yas--exit 200 nil) 14 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 200 nil) 14 nil nil nil nil)) (190 . 200) (#("get_name()$0" 0 12 (fontified nil)) . 190) (190 . 202) (#("get_n" 0 5 (fontified nil)) . 190) (190 . 195) (#("get_name()" 0 10 (fontified nil)) . -190) (190 . 200) (#("get_n" 0 5 (fontified t)) . -190) (undo-tree-id2757 . -5) (undo-tree-id2758 . -4) (undo-tree-id2759 . -4) (undo-tree-id2760 . -4) (undo-tree-id2761 . -4) (undo-tree-id2762 . -4) (undo-tree-id2763 . -4) (undo-tree-id2764 . -4) (undo-tree-id2765 . -4) (undo-tree-id2766 . -4) (undo-tree-id2767 . -4) (undo-tree-id2768 . -4) (undo-tree-id2769 . -4) (undo-tree-id2770 . -4) (undo-tree-id2771 . -4) (undo-tree-id2772 . -4) (undo-tree-id2773 . -4) (undo-tree-id2774 . -4) (undo-tree-id2775 . -4) (undo-tree-id2776 . -4) (undo-tree-id2777 . -4) (undo-tree-id2778 . -4) (undo-tree-id2779 . -4) (undo-tree-id2780 . -4) (undo-tree-id2781 . -4) (undo-tree-id2782 . -4) (undo-tree-id2783 . -4) (undo-tree-id2784 . -4) (undo-tree-id2785 . -4) (undo-tree-id2786 . -4) (undo-tree-id2787 . -4) (undo-tree-id2788 . -4) (undo-tree-id2789 . -4) (undo-tree-id2790 . -4) (undo-tree-id2791 . -4) (undo-tree-id2792 . -4) (undo-tree-id2793 . -4) (undo-tree-id2794 . -4) (undo-tree-id2795 . -4) (undo-tree-id2796 . -4) (undo-tree-id2797 . -4) (undo-tree-id2798 . -4) (undo-tree-id2799 . -4) (undo-tree-id2800 . -4) (undo-tree-id2801 . -4) (undo-tree-id2802 . -4) (undo-tree-id2803 . -4) (undo-tree-id2804 . -4) (undo-tree-id2805 . -4) (undo-tree-id2806 . -4) (undo-tree-id2807 . -4) (undo-tree-id2808 . -4) (undo-tree-id2809 . -4) (undo-tree-id2810 . -4) (undo-tree-id2811 . -4) (undo-tree-id2812 . -4) (undo-tree-id2813 . -4) (undo-tree-id2814 . -4) (undo-tree-id2815 . -4) (undo-tree-id2816 . -4) (undo-tree-id2817 . -4) (undo-tree-id2818 . -4) (undo-tree-id2819 . -4) (undo-tree-id2820 . -4) (undo-tree-id2821 . -5) (undo-tree-id2822 . -5) (undo-tree-id2823 . -5) 195) nil (26132 498 612776 561000) 0 nil])
([nil nil ((200 . 201)) nil (26132 498 612733 347000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -200) (undo-tree-id2753 . -1) (undo-tree-id2754 . -1) (undo-tree-id2755 . -1) (undo-tree-id2756 . -1) 201) nil (26132 498 612732 642000) 0 nil])
([nil nil ((200 . 201)) nil (26132 498 612729 453000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -200) (undo-tree-id2748 . -1) (undo-tree-id2749 . -1) (undo-tree-id2750 . -1) (undo-tree-id2751 . -1) (undo-tree-id2752 . -1) 201) nil (26132 498 612728 710000) 0 nil])
([nil nil ((200 . 201)) nil (26132 498 612725 242000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -200) (undo-tree-id2742 . -1) (undo-tree-id2743 . -1) (undo-tree-id2744 . -1) (undo-tree-id2745 . -1) (undo-tree-id2746 . -1) (undo-tree-id2747 . -1) 201) nil (26132 498 612724 94000) 0 nil])
([nil nil ((200 . 203)) nil (26132 498 612719 811000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -201) (undo-tree-id2722 . -1) (undo-tree-id2723 . -1) (undo-tree-id2724 . -1) (undo-tree-id2725 . -1) (undo-tree-id2726 . -1) (undo-tree-id2727 . -1) (undo-tree-id2728 . -1) (undo-tree-id2729 . -1) (undo-tree-id2730 . -1) (undo-tree-id2731 . -1) (undo-tree-id2732 . -1) (undo-tree-id2733 . -1) (undo-tree-id2734 . -1) (undo-tree-id2735 . -1) (#("x" 0 1 (fontified t)) . -202) (undo-tree-id2736 . -1) (undo-tree-id2737 . -1) (undo-tree-id2738 . -1) (undo-tree-id2739 . -1) (undo-tree-id2740 . -1) (undo-tree-id2741 . -1) 203) nil (26132 498 612718 401000) 0 nil])
([nil nil ((201 . 203)) nil (26132 498 612705 222000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -201) (undo-tree-id2707 . -1) (undo-tree-id2708 . -1) (undo-tree-id2709 . -1) (undo-tree-id2710 . -1) (undo-tree-id2711 . -1) (undo-tree-id2712 . -1) (undo-tree-id2713 . -1) (undo-tree-id2714 . -1) (undo-tree-id2715 . -1) (undo-tree-id2716 . -1) (#("b" 0 1 (fontified t)) . -202) (undo-tree-id2717 . -1) (undo-tree-id2718 . -1) (undo-tree-id2719 . -1) (undo-tree-id2720 . -1) (undo-tree-id2721 . -1) 203) nil (26132 498 612703 883000) 0 nil])
([nil nil ((201 . 203)) nil (26132 498 612693 717000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 211 217 nil nil nil t #s(yas--exit 218 nil))) #s(yas--exit 218 nil) 15 nil #s(yas--field 1 211 217 nil nil nil t #s(yas--exit 218 nil)) nil nil)) (201 . 219) (#("unwrap_or(${1:default})$0" 0 25 (fontified nil)) . 201) (201 . 226) (#("un" 0 2 (fontified nil)) . 201) (201 . 203) (#("unwrap_or(…)" 0 12 (fontified nil)) . -201) (201 . 213) (#("un" 0 2 (fontified t)) . -201) (undo-tree-id2697 . -2) (undo-tree-id2698 . -1) (undo-tree-id2699 . -1) (undo-tree-id2700 . -1) (undo-tree-id2701 . -2) (undo-tree-id2702 . -2) (undo-tree-id2703 . -2) (undo-tree-id2704 . -2) (undo-tree-id2705 . -2) (undo-tree-id2706 . -2) 203) nil (26132 498 612692 72000) 0 nil])
([nil nil ((212 . 213) (#("default" 0 7 (fontified nil)) . 212) (undo-tree-id2696 . -7) (211 . 212)) nil (26132 498 612682 295000) 0 nil])
([nil nil ((212 . 216)) nil (26132 498 612676 180000) 0 nil])
([nil nil ((apply yas--snippet-revive 201 218 #s(yas--snippet nil (#s(yas--field 1 211 217 nil nil nil t #s(yas--exit 218 nil))) #s(yas--exit 218 nil) 15 nil #s(yas--field 1 211 217 nil nil nil t #s(yas--exit 218 nil)) nil nil))) nil (26132 498 612675 595000) 0 nil])
([nil nil ((218 . 224)) nil (26132 498 612674 479000) 0 nil])
([nil nil ((nil rear-nonsticky nil 239 . 240) (nil fontified nil 223 . 240) (223 . 240)) nil (26132 507 202108 869000) 0 nil])
([nil nil ((#("if chip.get_name().unwrap_or(\"None\") == \"coretemp-isa-0000\"" 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t) 3 8 (fontified t) 8 16 (fontified t) 16 17 (face (rainbow-delimiters-depth-3-face) fontified t) 17 18 (face (rainbow-delimiters-depth-3-face) fontified t) 18 19 (fontified t) 19 28 (fontified t) 28 29 (face (rainbow-delimiters-depth-3-face) fontified t) 29 35 (face font-lock-string-face fontified t) 35 36 (face (rainbow-delimiters-depth-3-face) fontified t) 36 40 (fontified t) 40 41 (face font-lock-string-face fontified t) 41 57 (face font-lock-string-face fontified t) 57 58 (face font-lock-string-face rear-nonsticky t fontified t) 58 59 (face font-lock-string-face fontified t)) . 182) (undo-tree-id3022 . -41) (undo-tree-id3023 . -3) (undo-tree-id3024 . -3) (undo-tree-id3025 . -3) (undo-tree-id3026 . -29) (undo-tree-id3027 . -41) (undo-tree-id3028 . -41) (undo-tree-id3029 . -41) (undo-tree-id3030 . -59) (undo-tree-id3031 . -59) (undo-tree-id3032 . -59) (undo-tree-id3033 . -59) (undo-tree-id3034 . -59) (undo-tree-id3035 . -59) (undo-tree-id3036 . -59) (undo-tree-id3037 . -59) (undo-tree-id3038 . -59) (undo-tree-id3039 . -59) (undo-tree-id3040 . -59) (undo-tree-id3041 . -59) (undo-tree-id3042 . -59) (undo-tree-id3043 . -59) (undo-tree-id3044 . -59) (undo-tree-id3045 . -59) (undo-tree-id3046 . -59) (undo-tree-id3047 . -59) (undo-tree-id3048 . -59) (undo-tree-id3049 . -59) (undo-tree-id3050 . -59) (undo-tree-id3051 . -59) (undo-tree-id3052 . -59) (undo-tree-id3053 . -59)) nil (26132 511 725180 443000) 0 nil] [nil nil ((241 . 243) (t 26132 498 627157 699000)) ((#(" {" 0 1 (fontified t) 1 2 (face (rainbow-delimiters-depth-3-face) fontified t)) . 241) (undo-tree-id2994 . -2) (undo-tree-id2995 . -2) (undo-tree-id2996 . -2) (undo-tree-id2997 . -2) (undo-tree-id2998 . -2) (undo-tree-id2999 . -2) (undo-tree-id3000 . -2) (undo-tree-id3001 . -2) (undo-tree-id3002 . -2) (undo-tree-id3003 . -2) (undo-tree-id3004 . -2) (undo-tree-id3005 . -2) (undo-tree-id3006 . -2) (undo-tree-id3007 . -2) (undo-tree-id3008 . -2) (undo-tree-id3009 . -2) (undo-tree-id3010 . -2) (undo-tree-id3011 . -2) (undo-tree-id3012 . -2) (undo-tree-id3013 . -2)) (26132 506 989046 366000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 182) (undo-tree-id3020 . 1) (undo-tree-id3021 . -1)) nil (26132 511 725159 915000) 0 nil])
([nil nil ((243 . 244) (t 26132 501 790491 226000)) ((#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . 243) (t 26132 504 663824 736000)) (26132 504 619915 697000) 0 nil])
([nil nil ((#("            info!(name);" 0 12 (fontified t) 12 17 (face font-lock-preprocessor-face fontified t) 17 18 (face (rainbow-delimiters-depth-3-face) fontified t) 18 22 (fontified t) 22 23 (face (rainbow-delimiters-depth-3-face) fontified t) 23 24 (fontified t)) . 182) (undo-tree-id3018 . 24) (undo-tree-id3019 . -24)) nil (26132 511 725157 753000) 0 nil])
nil
([nil nil ((#("
" 0 1 (fontified t)) . 182) (undo-tree-id3016 . 1) (undo-tree-id3017 . -1)) nil (26132 511 725155 128000) 0 nil])
([nil nil ((#("        }" 0 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t)) . 182) (undo-tree-id3014 . 9) (undo-tree-id3015 . -9)) nil (26132 511 725150 434000) 0 nil])
([nil nil ((#("        
" 0 8 (fontified t) 8 9 (fontified t)) . 189) (undo-tree-id3054 . -8) (undo-tree-id3055 . -8) (undo-tree-id3056 . -8) (undo-tree-id3057 . -9) (t 26132 511 737158 504000)) nil (26132 516 809286 640000) 0 nil])
([nil nil ((#("fn get_value(sensors: Sensors) {" 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t) 3 12 (face font-lock-function-name-face fontified t) 12 13 (face (rainbow-delimiters-depth-1-face) fontified t) 13 20 (face font-lock-variable-name-face fontified t) 20 22 (fontified t) 22 29 (face font-lock-type-face fontified t) 29 30 (face (rainbow-delimiters-depth-1-face) fontified t) 30 31 (fontified t) 31 32 (face (rainbow-delimiters-depth-1-face) fontified t)) . 115) (undo-tree-id3152 . -23) (undo-tree-id3153 . -32) (t 26132 516 820492 149000)) nil (26132 567 258720 229000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 115) (undo-tree-id3151 . -1)) nil (26132 567 258718 289000) 0 nil])
([nil nil ((#("    for chip in sensors {" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 12 (face font-lock-variable-name-face fontified t) 12 13 (fontified t) 13 15 (face font-lock-keyword-face fontified t) 15 16 (fontified t) 16 24 (fontified t) 24 25 (face (rainbow-delimiters-depth-1-face) fontified t)) . 115) (undo-tree-id3150 . -25)) nil (26132 567 258716 817000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 115) (undo-tree-id3149 . -1)) nil (26132 567 258715 371000) 0 nil])
([nil nil ((#("        
" 0 8 (fontified t) 8 9 (fontified t)) . 115) (undo-tree-id3117 . -8) (undo-tree-id3118 . -8) (undo-tree-id3119 . -8) (undo-tree-id3120 . -8) (undo-tree-id3121 . -8) (undo-tree-id3122 . -8) (undo-tree-id3123 . -8) (undo-tree-id3124 . -8) (undo-tree-id3125 . -8) (undo-tree-id3126 . -8) (undo-tree-id3127 . -8) (undo-tree-id3128 . 1) (undo-tree-id3129 . -8) (undo-tree-id3130 . -8) (undo-tree-id3131 . -8) (undo-tree-id3132 . -8) (undo-tree-id3133 . -8) (undo-tree-id3134 . -8) (undo-tree-id3135 . -8) (undo-tree-id3136 . -8) (undo-tree-id3137 . -8) (undo-tree-id3138 . -8) (undo-tree-id3139 . -8) (undo-tree-id3140 . -8) (undo-tree-id3141 . -8) (undo-tree-id3142 . -8) (undo-tree-id3143 . -8) (undo-tree-id3144 . -8) (undo-tree-id3145 . -8) (undo-tree-id3146 . -8) (undo-tree-id3147 . -8) (undo-tree-id3148 . -9)) nil (26132 567 258712 811000) 0 nil])
([nil nil ((#("    }" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-unmatched-face) fontified t)) . 115) (undo-tree-id3114 . -5) (undo-tree-id3115 . 5) (undo-tree-id3116 . -5)) nil (26132 567 258691 17000) 0 nil])
([nil nil ((#("#[tracing::instrument]" 0 1 (face font-lock-preprocessor-face fontified t) 1 2 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t) 2 11 (face font-lock-preprocessor-face fontified t) 11 21 (face font-lock-preprocessor-face fontified t) 21 22 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t)) . 92) (undo-tree-id3113 . -22)) nil (26132 567 258687 731000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 92) (undo-tree-id3069 . -1) (undo-tree-id3070 . -1) (undo-tree-id3071 . -1) (undo-tree-id3072 . -1) (undo-tree-id3073 . -1) (undo-tree-id3074 . -1) (undo-tree-id3075 . -1) (undo-tree-id3076 . -1) (undo-tree-id3077 . -1) (undo-tree-id3078 . -1) (undo-tree-id3079 . -1) (undo-tree-id3080 . -1) (undo-tree-id3081 . -1) (undo-tree-id3082 . -1) (undo-tree-id3083 . -1) (undo-tree-id3084 . -1) (undo-tree-id3085 . -1) (undo-tree-id3086 . -1) (undo-tree-id3087 . -1) (undo-tree-id3088 . -1) (undo-tree-id3089 . -1) (undo-tree-id3090 . -1) (undo-tree-id3091 . -1) (undo-tree-id3092 . -1) (undo-tree-id3093 . -1) (undo-tree-id3094 . -1) (undo-tree-id3095 . -1) (undo-tree-id3096 . -1) (undo-tree-id3097 . -1) (undo-tree-id3098 . -1) (undo-tree-id3099 . -1) (undo-tree-id3100 . -1) (undo-tree-id3101 . -1) (undo-tree-id3102 . -1) (undo-tree-id3103 . -1) (undo-tree-id3104 . -1) (undo-tree-id3105 . -1) (undo-tree-id3106 . -1) (undo-tree-id3107 . -1) (undo-tree-id3108 . -1) (undo-tree-id3109 . -1) (undo-tree-id3110 . -1) (undo-tree-id3111 . -1) (undo-tree-id3112 . -1)) nil (26132 567 258553 234000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 92) (undo-tree-id3065 . 1) (undo-tree-id3066 . -1) (undo-tree-id3067 . -1) (undo-tree-id3068 . -1)) nil (26132 567 258523 511000) 0 nil])
([nil nil ((#("}" 0 1 (face (rainbow-delimiters-unmatched-face) fontified t)) . 92) (undo-tree-id3063 . 1) (undo-tree-id3064 . -1)) nil (26132 567 258519 597000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 92) (undo-tree-id3060 . -1) (undo-tree-id3061 . 1) (undo-tree-id3062 . -1)) nil (26132 567 258516 319000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 92) (undo-tree-id3058 . 1) (undo-tree-id3059 . -1)) nil (26132 567 258510 267000) 0 nil])
([nil nil ((142 . 146) (t 26132 567 270495 247000)) nil (26132 629 629877 666000) 0 nil])
([nil nil ((185 . 197)) nil (26132 629 629876 981000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -194) (undo-tree-id3228 . -1) (undo-tree-id3229 . -1) (undo-tree-id3230 . -1) (undo-tree-id3231 . -1) (undo-tree-id3232 . -1) (undo-tree-id3233 . -1) (undo-tree-id3234 . -1) (undo-tree-id3235 . -1) (undo-tree-id3236 . -1) (undo-tree-id3237 . -1) (undo-tree-id3238 . -1) (undo-tree-id3239 . -1) (#("p" 0 1 (fontified t)) . -195) (undo-tree-id3240 . -1) (undo-tree-id3241 . -1) (undo-tree-id3242 . -1) (undo-tree-id3243 . -1) (undo-tree-id3244 . -1) (undo-tree-id3245 . -1) (undo-tree-id3246 . -1) (undo-tree-id3247 . -1) (#(" " 0 1 (fontified t)) . -196) (undo-tree-id3248 . -1) (undo-tree-id3249 . -1) (undo-tree-id3250 . -1) (undo-tree-id3251 . -1) 197) nil (26132 629 629875 247000) 0 nil])
([nil nil ((194 . 196)) nil (26132 629 629860 205000) 0 nil])
([nil nil ((196 . 199)) nil (26132 629 629859 746000) 0 nil])
([nil nil ((196 . 203) (#("sen" 0 3 (fontified nil)) . 196) (196 . 199) (#("sensors" 0 7 (fontified nil)) . -196) (196 . 203) (#("sen" 0 3 (fontified t)) . -196) (undo-tree-id3219 . -3) (undo-tree-id3220 . -1) (undo-tree-id3221 . -1) (undo-tree-id3222 . -2) (undo-tree-id3223 . -2) (undo-tree-id3224 . -3) (undo-tree-id3225 . -3) (undo-tree-id3226 . -3) (undo-tree-id3227 . -3) 199) nil (26132 629 629858 590000) 0 nil])
([nil nil ((203 . 206)) nil (26132 629 629852 575000) 0 nil])
([nil nil ((apply yas--snippet-revive 204 215 #s(yas--snippet nil nil #s(yas--exit 215 nil) 16 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 215 nil) 16 nil nil nil nil)) (204 . 215) (#("into_iter()$0" 0 13 (fontified nil)) . 204) (204 . 217) (#("it" 0 2 (fontified nil)) . 204) (204 . 206) (#("into_iter() (as IntoIterator)" 0 29 (fontified nil)) . -204) (204 . 233) (#("it" 0 2 (fontified t)) . -204) (undo-tree-id3210 . -2) (undo-tree-id3211 . -1) (undo-tree-id3212 . -1) (undo-tree-id3213 . -1) (undo-tree-id3214 . -2) (undo-tree-id3215 . -2) (undo-tree-id3216 . -2) (undo-tree-id3217 . -2) (undo-tree-id3218 . -2) 206) nil (26132 629 629851 158000) 0 nil])
([nil nil ((215 . 217)) nil (26132 629 629843 889000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -216) (undo-tree-id3204 . -1) (undo-tree-id3205 . -1) (undo-tree-id3206 . -1) (undo-tree-id3207 . -1) (undo-tree-id3208 . -1) (undo-tree-id3209 . -1) 217) nil (26132 629 629842 925000) 0 nil])
([nil nil ((216 . 217)) nil (26132 629 629838 620000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 223 254 nil nil nil t #s(yas--exit 255 nil))) #s(yas--exit 255 nil) 17 nil #s(yas--field 1 223 254 nil nil nil t #s(yas--exit 255 nil)) nil nil)) (216 . 233) (#("filter(${1:predicate})$0" 0 24 (fontified nil)) . 216) (216 . 240) (#("f" 0 1 (fontified nil)) . 216) (216 . 217) (#("filter(…) (as Iterator)" 0 23 (fontified nil)) . -216) (216 . 239) (#("f" 0 1 (fontified t)) . -216) (undo-tree-id3198 . -1) (undo-tree-id3199 . -1) (undo-tree-id3200 . -1) (undo-tree-id3201 . -1) (undo-tree-id3202 . -1) (undo-tree-id3203 . -1) 217) nil (26132 629 629837 275000) 0 nil])
([nil nil ((224 . 225) (#("predicate" 0 9 (fontified nil)) . 224) (undo-tree-id3197 . -9) (223 . 224)) nil (26132 629 629831 788000) 0 nil])
([nil nil ((224 . 225)) nil (26132 629 629830 208000) 0 nil])
([nil nil ((226 . 230)) nil (26132 629 629829 674000) 0 nil])
([nil nil ((apply yas--snippet-revive 229 239 #s(yas--snippet nil nil #s(yas--exit 239 nil) 18 nil nil #s(yas--field 1 223 254 nil nil nil t #s(yas--exit 255 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 239 nil) 18 nil nil #s(yas--field 1 223 254 nil nil nil t #s(yas--exit 255 nil)) nil)) (229 . 239) (#("get_name()$0" 0 12 (fontified nil)) . 229) (undo-tree-id3182 . -12) (229 . 241) (#("g" 0 1 (fontified nil)) . 229) (undo-tree-id3183 . -1) (229 . 230) (#("get_name()" 0 10 (fontified nil)) . -229) (undo-tree-id3184 . -10) (229 . 239) (#("g" 0 1 (fontified t)) . -229) (undo-tree-id3185 . -1) (undo-tree-id3186 . -1) (undo-tree-id3187 . -1) (undo-tree-id3188 . -1) (undo-tree-id3189 . -1) (undo-tree-id3190 . -1) (undo-tree-id3191 . -1) (undo-tree-id3192 . -1) (undo-tree-id3193 . -1) (undo-tree-id3194 . -1) (undo-tree-id3195 . -1) (undo-tree-id3196 . -1) 230) nil (26132 629 629828 13000) 0 nil])
([nil nil ((239 . 241)) nil (26132 629 629817 364000) 0 nil])
([nil nil ((apply yas--snippet-revive 240 248 #s(yas--snippet nil nil #s(yas--exit 248 nil) 19 nil nil #s(yas--field 1 223 254 nil nil nil t #s(yas--exit 255 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 248 nil) 19 nil nil #s(yas--field 1 223 254 nil nil nil t #s(yas--exit 255 nil)) nil)) (240 . 248) (#("unwrap()$0" 0 10 (fontified nil)) . 240) (undo-tree-id3167 . -10) (240 . 250) (#("u" 0 1 (fontified nil)) . 240) (undo-tree-id3168 . -1) (240 . 241) (#("unwrap()" 0 8 (fontified nil)) . -240) (undo-tree-id3169 . -8) (240 . 248) (#("u" 0 1 (fontified t)) . -240) (undo-tree-id3170 . -1) (undo-tree-id3171 . -1) (undo-tree-id3172 . -1) (undo-tree-id3173 . -1) (undo-tree-id3174 . -1) (undo-tree-id3175 . -1) (undo-tree-id3176 . -1) (undo-tree-id3177 . -1) (undo-tree-id3178 . -1) (undo-tree-id3179 . -1) (undo-tree-id3180 . -1) (undo-tree-id3181 . -1) 241) nil (26132 629 629815 799000) 0 nil])
([nil nil ((248 . 252)) nil (26132 629 629804 933000) 0 nil])
([nil nil ((252 . 254)) nil (26132 629 629804 393000) 0 nil])
([nil nil ((apply yas--snippet-revive 216 255 #s(yas--snippet nil (#s(yas--field 1 223 254 nil nil nil t #s(yas--exit 255 nil))) #s(yas--exit 255 nil) 17 nil #s(yas--field 1 223 254 nil nil nil t #s(yas--exit 255 nil)) nil nil))) nil (26132 629 629803 889000) 0 nil])
([nil nil ((nil rear-nonsticky nil 269 . 270) (nil fontified nil 253 . 270) (253 . 270)) nil (26132 629 629803 237000) 0 nil])
([nil nil ((272 . 275)) nil (26132 629 629802 291000) 0 nil])
([nil nil ((apply yas--snippet-revive 273 282 #s(yas--snippet nil nil #s(yas--exit 282 nil) 20 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 282 nil) 20 nil nil nil nil)) (273 . 282) (#("collect()$0" 0 11 (fontified nil)) . 273) (273 . 284) (#("co" 0 2 (fontified nil)) . 273) (273 . 275) (#("collect() (as Iterator)" 0 23 (fontified nil)) . -273) (273 . 296) (#("co" 0 2 (fontified t)) . -273) (undo-tree-id3154 . -2) (undo-tree-id3155 . -1) (undo-tree-id3156 . -1) (undo-tree-id3157 . -1) (undo-tree-id3158 . -1) (undo-tree-id3159 . -1) (undo-tree-id3160 . -2) (undo-tree-id3161 . -2) (undo-tree-id3162 . -2) (undo-tree-id3163 . -2) (undo-tree-id3164 . -2) (undo-tree-id3165 . -2) (undo-tree-id3166 . -2) 275) nil (26132 629 629799 642000) 0 nil])
([nil nil ((282 . 283)) nil (26132 629 629780 164000) 0 nil])
([nil nil ((355 . 356) (t 26132 629 673832 409000)) nil (26132 635 877398 377000) 0 nil])
([nil nil ((#("get_value(sensors);" 0 9 (fontified t) 9 10 (face (rainbow-delimiters-depth-3-face) fontified t) 10 17 (fontified t) 17 18 (face (rainbow-delimiters-depth-3-face) fontified t) 18 19 (fontified t)) . 356) (undo-tree-id3272 . -19) (undo-tree-id3273 . -19) (undo-tree-id3274 . -19) (undo-tree-id3275 . -19) (undo-tree-id3276 . -19) (undo-tree-id3277 . -19) (undo-tree-id3278 . -19) (undo-tree-id3279 . -19) (undo-tree-id3280 . -19) (undo-tree-id3281 . -19)) nil (26132 637 471884 729000) 0 nil] [nil nil ((#("1));
        
" 0 1 (fontified t) 1 2 (face (rainbow-delimiters-depth-4-face) fontified t) 2 3 (face (rainbow-delimiters-depth-3-face) fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 14 (fontified t)) . -342) (undo-tree-id3262 . -14) (undo-tree-id3263 . -13) (undo-tree-id3264 . -13) (undo-tree-id3265 . -13) (undo-tree-id3266 . -13) (undo-tree-id3267 . -13) (undo-tree-id3268 . -14) (undo-tree-id3269 . -14) (undo-tree-id3270 . -14) (undo-tree-id3271 . -14) 356) ((342 . 356)) (26132 635 572430 419000) 0 nil])
([nil nil ((193 . 196) (t 26132 637 483832 889000)) nil (26132 704 426146 919000) 0 nil])
([nil nil ((#("get_value(sensors);" 0 9 (fontified t) 9 10 (face (rainbow-delimiters-depth-5-face) fontified t) 10 17 (fontified t) 17 18 (face (rainbow-delimiters-depth-5-face) fontified t) 18 19 (fontified t)) . 342) (undo-tree-id3252 . -19) (undo-tree-id3253 . -19) (undo-tree-id3254 . -19) (undo-tree-id3255 . -19) (undo-tree-id3256 . -19) (undo-tree-id3257 . -19) (undo-tree-id3258 . -19) (undo-tree-id3259 . -19) (undo-tree-id3260 . -19) (undo-tree-id3261 . -19)) ((342 . 361)) (26132 635 572182 913000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -193) (undo-tree-id3620 . -1) (undo-tree-id3621 . -1) (undo-tree-id3622 . -1) (undo-tree-id3623 . -1) (undo-tree-id3624 . -1) (undo-tree-id3625 . -1) (undo-tree-id3626 . -1) (undo-tree-id3627 . -1) (undo-tree-id3628 . -1) (undo-tree-id3629 . -1) (undo-tree-id3630 . -1) (undo-tree-id3631 . -1) (undo-tree-id3632 . -1) (undo-tree-id3633 . -1) (undo-tree-id3634 . -1) (undo-tree-id3635 . -1) (undo-tree-id3636 . -1) (undo-tree-id3637 . -1) (undo-tree-id3638 . -1) (undo-tree-id3639 . -1) (undo-tree-id3640 . -1) (undo-tree-id3641 . -1) (#(" " 0 1 (fontified t)) . -194) (undo-tree-id3642 . -1) (undo-tree-id3643 . -1) (undo-tree-id3644 . -1) (undo-tree-id3645 . -1) (undo-tree-id3646 . -1) (undo-tree-id3647 . -1) (undo-tree-id3648 . -1) (undo-tree-id3649 . -1) (undo-tree-id3650 . -1) (undo-tree-id3651 . -1) (undo-tree-id3652 . -1) (#("V" 0 1 (face font-lock-type-face fontified t)) . -195) (undo-tree-id3653 . -1) (undo-tree-id3654 . -1) (undo-tree-id3655 . -1) (undo-tree-id3656 . -1) (undo-tree-id3657 . -1) (undo-tree-id3658 . -1) 196) nil (26132 704 426144 824000) 0 nil])
nil
([nil nil ((#("collect();" 0 7 (fontified t) 7 8 (face (rainbow-delimiters-depth-2-face) fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t) 9 10 (fontified t)) . -273) (undo-tree-id3606 . -10) (undo-tree-id3607 . -10) (undo-tree-id3608 . -10) (undo-tree-id3609 . -10) (undo-tree-id3610 . -10) (undo-tree-id3611 . -10) (undo-tree-id3612 . -10) (undo-tree-id3613 . -10) (undo-tree-id3614 . -10) (undo-tree-id3615 . -10) (undo-tree-id3616 . -10) (undo-tree-id3617 . -10) (undo-tree-id3618 . -10) (undo-tree-id3619 . -10) 283) nil (26132 704 426120 251000) 0 nil])
([nil nil ((#("0000\")." 0 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face rear-nonsticky t fontified t) 4 5 (face font-lock-string-face fontified t) 5 6 (face (rainbow-delimiters-depth-2-face) fontified t) 6 7 (fontified t)) . -266) (undo-tree-id3589 . -7) (undo-tree-id3590 . -7) (undo-tree-id3591 . -7) (undo-tree-id3592 . -7) (undo-tree-id3593 . -7) (undo-tree-id3594 . -7) (undo-tree-id3595 . -7) (undo-tree-id3596 . -7) (undo-tree-id3597 . -7) (undo-tree-id3598 . -7) (undo-tree-id3599 . -7) (undo-tree-id3600 . -7) (undo-tree-id3601 . -7) (undo-tree-id3602 . -7) (undo-tree-id3603 . -7) (undo-tree-id3604 . -7) (undo-tree-id3605 . -7) 273) nil (26132 704 426110 938000) 0 nil])
([nil nil ((#("isa-" 0 4 (face font-lock-string-face fontified t)) . -262) (undo-tree-id3570 . -4) (undo-tree-id3571 . -4) (undo-tree-id3572 . -4) (undo-tree-id3573 . -4) (undo-tree-id3574 . -4) (undo-tree-id3575 . -4) (undo-tree-id3576 . -4) (undo-tree-id3577 . -4) (undo-tree-id3578 . -4) (undo-tree-id3579 . -4) (undo-tree-id3580 . -4) (undo-tree-id3581 . -4) (undo-tree-id3582 . -4) (undo-tree-id3583 . -4) (undo-tree-id3584 . -4) (undo-tree-id3585 . -4) (undo-tree-id3586 . -4) (undo-tree-id3587 . -4) (undo-tree-id3588 . -4) 266) nil (26132 704 426100 268000) 0 nil])
([nil nil ((#("coretemp-" 0 9 (face font-lock-string-face fontified t)) . -253) (undo-tree-id3549 . -9) (undo-tree-id3550 . -9) (undo-tree-id3551 . -9) (undo-tree-id3552 . -9) (undo-tree-id3553 . -9) (undo-tree-id3554 . -9) (undo-tree-id3555 . -9) (undo-tree-id3556 . -9) (undo-tree-id3557 . -9) (undo-tree-id3558 . -9) (undo-tree-id3559 . -9) (undo-tree-id3560 . -9) (undo-tree-id3561 . -9) (undo-tree-id3562 . -9) (undo-tree-id3563 . -9) (undo-tree-id3564 . -9) (undo-tree-id3565 . -9) (undo-tree-id3566 . -9) (undo-tree-id3567 . -9) (undo-tree-id3568 . -9) (undo-tree-id3569 . -9) 262) nil (26132 704 426078 866000) 0 nil])
([nil nil ((#("unwrap() == \"" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-3-face) fontified t) 7 8 (face (rainbow-delimiters-depth-3-face) fontified t) 8 12 (fontified t) 12 13 (face font-lock-string-face fontified t)) . -240) (undo-tree-id3523 . -13) (undo-tree-id3524 . -13) (undo-tree-id3525 . -13) (undo-tree-id3526 . -13) (undo-tree-id3527 . -13) (undo-tree-id3528 . -13) (undo-tree-id3529 . -13) (undo-tree-id3530 . -13) (undo-tree-id3531 . -13) (undo-tree-id3532 . -13) (undo-tree-id3533 . -13) (undo-tree-id3534 . -13) (undo-tree-id3535 . -13) (undo-tree-id3536 . -13) (undo-tree-id3537 . -13) (undo-tree-id3538 . -13) (undo-tree-id3539 . -13) (undo-tree-id3540 . -13) (undo-tree-id3541 . -13) (undo-tree-id3542 . -13) (undo-tree-id3543 . -13) (undo-tree-id3544 . -13) (undo-tree-id3545 . -13) (undo-tree-id3546 . -13) (undo-tree-id3547 . -13) (undo-tree-id3548 . -13) 253) nil (26132 704 426065 686000) 0 nil])
([nil nil ((#("name()." 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-3-face) fontified t) 5 6 (face (rainbow-delimiters-depth-3-face) fontified t) 6 7 (fontified t)) . -233) (undo-tree-id3495 . -7) (undo-tree-id3496 . -7) (undo-tree-id3497 . -7) (undo-tree-id3498 . -7) (undo-tree-id3499 . -7) (undo-tree-id3500 . -7) (undo-tree-id3501 . -7) (undo-tree-id3502 . -7) (undo-tree-id3503 . -7) (undo-tree-id3504 . -7) (undo-tree-id3505 . -7) (undo-tree-id3506 . -7) (undo-tree-id3507 . -7) (undo-tree-id3508 . -7) (undo-tree-id3509 . -7) (undo-tree-id3510 . -7) (undo-tree-id3511 . -7) (undo-tree-id3512 . -7) (undo-tree-id3513 . -7) (undo-tree-id3514 . -7) (undo-tree-id3515 . -7) (undo-tree-id3516 . -7) (undo-tree-id3517 . -7) (undo-tree-id3518 . -7) (undo-tree-id3519 . -7) (undo-tree-id3520 . -7) (undo-tree-id3521 . -7) (undo-tree-id3522 . -7) 240) nil (26132 704 426049 972000) 0 nil])
([nil nil ((#("get_" 0 4 (fontified t)) . -229) (undo-tree-id3465 . -4) (undo-tree-id3466 . -4) (undo-tree-id3467 . -4) (undo-tree-id3468 . -4) (undo-tree-id3469 . -4) (undo-tree-id3470 . -4) (undo-tree-id3471 . -4) (undo-tree-id3472 . -4) (undo-tree-id3473 . -4) (undo-tree-id3474 . -4) (undo-tree-id3475 . -4) (undo-tree-id3476 . -4) (undo-tree-id3477 . -4) (undo-tree-id3478 . -4) (undo-tree-id3479 . -4) (undo-tree-id3480 . -4) (undo-tree-id3481 . -4) (undo-tree-id3482 . -4) (undo-tree-id3483 . -4) (undo-tree-id3484 . -4) (undo-tree-id3485 . -4) (undo-tree-id3486 . -4) (undo-tree-id3487 . -4) (undo-tree-id3488 . -4) (undo-tree-id3489 . -4) (undo-tree-id3490 . -4) (undo-tree-id3491 . -4) (undo-tree-id3492 . -4) (undo-tree-id3493 . -4) (undo-tree-id3494 . -4) 233) nil (26132 704 426002 937000) 0 nil])
([nil nil ((#("x." 0 2 (fontified t)) . -227) (undo-tree-id3433 . -2) (undo-tree-id3434 . -2) (undo-tree-id3435 . -2) (undo-tree-id3436 . -2) (undo-tree-id3437 . -2) (undo-tree-id3438 . -2) (undo-tree-id3439 . -2) (undo-tree-id3440 . -2) (undo-tree-id3441 . -2) (undo-tree-id3442 . -2) (undo-tree-id3443 . -2) (undo-tree-id3444 . -2) (undo-tree-id3445 . -2) (undo-tree-id3446 . -2) (undo-tree-id3447 . -2) (undo-tree-id3448 . -2) (undo-tree-id3449 . -2) (undo-tree-id3450 . -2) (undo-tree-id3451 . -2) (undo-tree-id3452 . -2) (undo-tree-id3453 . -2) (undo-tree-id3454 . -2) (undo-tree-id3455 . -2) (undo-tree-id3456 . -2) (undo-tree-id3457 . -2) (undo-tree-id3458 . -2) (undo-tree-id3459 . -2) (undo-tree-id3460 . -2) (undo-tree-id3461 . -2) (undo-tree-id3462 . -2) (undo-tree-id3463 . -2) (undo-tree-id3464 . -2) 229) nil (26132 704 425985 353000) 0 nil])
([nil nil ((#("x| " 0 3 (fontified t)) . -224) (undo-tree-id3399 . -3) (undo-tree-id3400 . -3) (undo-tree-id3401 . -3) (undo-tree-id3402 . -3) (undo-tree-id3403 . -3) (undo-tree-id3404 . -3) (undo-tree-id3405 . -3) (undo-tree-id3406 . -3) (undo-tree-id3407 . -3) (undo-tree-id3408 . -3) (undo-tree-id3409 . -3) (undo-tree-id3410 . -3) (undo-tree-id3411 . -3) (undo-tree-id3412 . -3) (undo-tree-id3413 . -3) (undo-tree-id3414 . -3) (undo-tree-id3415 . -3) (undo-tree-id3416 . -3) (undo-tree-id3417 . -3) (undo-tree-id3418 . -3) (undo-tree-id3419 . -3) (undo-tree-id3420 . -3) (undo-tree-id3421 . -3) (undo-tree-id3422 . -3) (undo-tree-id3423 . -3) (undo-tree-id3424 . -3) (undo-tree-id3425 . -3) (undo-tree-id3426 . -3) (undo-tree-id3427 . -3) (undo-tree-id3428 . -3) (undo-tree-id3429 . -3) (undo-tree-id3430 . -3) (undo-tree-id3431 . -3) (undo-tree-id3432 . -3) 227) nil (26132 704 425966 411000) 0 nil])
([nil nil ((#("filter(|" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-2-face) fontified t) 7 8 (fontified t)) . -216) (undo-tree-id3362 . -8) (undo-tree-id3363 . -7) (undo-tree-id3364 . -8) (undo-tree-id3365 . -8) (undo-tree-id3366 . -8) (undo-tree-id3367 . -8) (undo-tree-id3368 . -8) (undo-tree-id3369 . -8) (undo-tree-id3370 . -8) (undo-tree-id3371 . -8) (undo-tree-id3372 . -8) (undo-tree-id3373 . -8) (undo-tree-id3374 . -8) (undo-tree-id3375 . -8) (undo-tree-id3376 . -8) (undo-tree-id3377 . -8) (undo-tree-id3378 . -8) (undo-tree-id3379 . -8) (undo-tree-id3380 . -8) (undo-tree-id3381 . -8) (undo-tree-id3382 . -8) (undo-tree-id3383 . -8) (undo-tree-id3384 . -8) (undo-tree-id3385 . -8) (undo-tree-id3386 . -8) (undo-tree-id3387 . -8) (undo-tree-id3388 . -8) (undo-tree-id3389 . -8) (undo-tree-id3390 . -8) (undo-tree-id3391 . -8) (undo-tree-id3392 . -8) (undo-tree-id3393 . -8) (undo-tree-id3394 . -8) (undo-tree-id3395 . -8) (undo-tree-id3396 . -8) (undo-tree-id3397 . -8) (undo-tree-id3398 . -8) 224) nil (26132 704 425946 120000) 0 nil])
([nil nil ((216 . 217)) nil (26132 704 425924 594000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t)) . -216) (undo-tree-id3356 . -1) (undo-tree-id3357 . -1) (undo-tree-id3358 . -1) (undo-tree-id3359 . -1) (undo-tree-id3360 . -1) (undo-tree-id3361 . -1) 217) nil (26132 704 425923 805000) 0 nil])
([nil nil ((216 . 217)) nil (26132 704 425919 332000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -216) (undo-tree-id3351 . -1) (undo-tree-id3352 . -1) (undo-tree-id3353 . -1) (undo-tree-id3354 . -1) (undo-tree-id3355 . -1) 217) nil (26132 704 425918 566000) 0 nil])
([nil nil ((216 . 218)) nil (26132 704 425914 614000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -216) (undo-tree-id3335 . -1) (undo-tree-id3336 . -1) (undo-tree-id3337 . -1) (undo-tree-id3338 . -1) (undo-tree-id3339 . -1) (undo-tree-id3340 . -1) (undo-tree-id3341 . -1) (undo-tree-id3342 . -1) (undo-tree-id3343 . -1) (undo-tree-id3344 . -1) (undo-tree-id3345 . -1) (#("a" 0 1 (fontified t)) . -217) (undo-tree-id3346 . -1) (undo-tree-id3347 . -1) (undo-tree-id3348 . -1) (undo-tree-id3349 . -1) (undo-tree-id3350 . -1) 218) nil (26132 704 425913 334000) 0 nil])
([nil nil ((216 . 219)) nil (26132 704 425902 411000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 223 269 nil nil nil t #s(yas--exit 270 nil))) #s(yas--exit 270 nil) 21 nil #s(yas--field 1 223 269 nil nil nil t #s(yas--exit 270 nil)) nil nil)) (216 . 233) (#("filter(${1:predicate})$0" 0 24 (fontified nil)) . 216) (216 . 240) (#("fil" 0 3 (fontified nil)) . 216) (216 . 219) (#("filter(…) (as Iterator)" 0 23 (fontified nil)) . -216) (216 . 239) (#("fil" 0 3 (fontified t)) . -216) (undo-tree-id3325 . -3) (undo-tree-id3326 . -1) (undo-tree-id3327 . -1) (undo-tree-id3328 . -2) (undo-tree-id3329 . -2) (undo-tree-id3330 . -3) (undo-tree-id3331 . -3) (undo-tree-id3332 . -3) (undo-tree-id3333 . -3) (undo-tree-id3334 . -3) 219) nil (26132 704 425900 891000) 0 nil])
([nil nil ((224 . 225) (#("predicate" 0 9 (fontified nil)) . 224) (undo-tree-id3324 . -9) (223 . 224)) nil (26132 704 425893 132000) 0 nil])
([nil nil ((224 . 225)) nil (26132 704 425891 536000) 0 nil])
([nil nil ((226 . 230)) nil (26132 704 425890 984000) 0 nil])
([nil nil ((apply yas--snippet-revive 229 239 #s(yas--snippet nil nil #s(yas--exit 239 nil) 22 nil nil #s(yas--field 1 223 269 nil nil nil t #s(yas--exit 270 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 239 nil) 22 nil nil #s(yas--field 1 223 269 nil nil nil t #s(yas--exit 270 nil)) nil)) (229 . 239) (#("get_name()$0" 0 12 (fontified nil)) . 229) (undo-tree-id3309 . -12) (229 . 241) (#("g" 0 1 (fontified nil)) . 229) (undo-tree-id3310 . -1) (229 . 230) (#("get_name()" 0 10 (fontified nil)) . -229) (undo-tree-id3311 . -10) (229 . 239) (#("g" 0 1 (fontified t)) . -229) (undo-tree-id3312 . -1) (undo-tree-id3313 . -1) (undo-tree-id3314 . -1) (undo-tree-id3315 . -1) (undo-tree-id3316 . -1) (undo-tree-id3317 . -1) (undo-tree-id3318 . -1) (undo-tree-id3319 . -1) (undo-tree-id3320 . -1) (undo-tree-id3321 . -1) (undo-tree-id3322 . -1) (undo-tree-id3323 . -1) 230) nil (26132 704 425888 827000) 0 nil])
([nil nil ((239 . 241)) nil (26132 704 425818 82000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -239) (undo-tree-id3291 . -1) (undo-tree-id3292 . -1) (undo-tree-id3293 . -1) (undo-tree-id3294 . -1) (undo-tree-id3295 . -1) (undo-tree-id3296 . -1) (undo-tree-id3297 . -1) (undo-tree-id3298 . -1) (undo-tree-id3299 . -1) (undo-tree-id3300 . -1) (undo-tree-id3301 . -1) (#("." 0 1 (fontified t)) . -240) (undo-tree-id3302 . -1) (undo-tree-id3303 . -1) (undo-tree-id3304 . -1) (undo-tree-id3305 . -1) (undo-tree-id3306 . -1) (undo-tree-id3307 . -1) (undo-tree-id3308 . -1) 241) nil (26132 704 425816 617000) 0 nil])
([nil nil ((239 . 241)) nil (26132 704 425805 481000) 0 nil])
([nil nil ((apply yas--snippet-revive 240 248 #s(yas--snippet nil nil #s(yas--exit 248 nil) 23 nil nil #s(yas--field 1 223 269 nil nil nil t #s(yas--exit 270 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 248 nil) 23 nil nil #s(yas--field 1 223 269 nil nil nil t #s(yas--exit 270 nil)) nil)) (240 . 248) (#("unwrap()$0" 0 10 (fontified nil)) . 240) (undo-tree-id3282 . -10) (240 . 250) (#("u" 0 1 (fontified nil)) . 240) (undo-tree-id3283 . -1) (240 . 241) (#("unwrap()" 0 8 (fontified nil)) . -240) (undo-tree-id3284 . -8) (240 . 248) (#("u" 0 1 (fontified t)) . -240) (undo-tree-id3285 . -1) (undo-tree-id3286 . -1) (undo-tree-id3287 . -1) (undo-tree-id3288 . -1) (undo-tree-id3289 . -1) (undo-tree-id3290 . -1) 241) nil (26132 704 425803 400000) 0 nil])
([nil nil ((248 . 252)) nil (26132 704 425788 912000) 0 nil])
([nil nil ((nil rear-nonsticky nil 267 . 268) (nil fontified nil 251 . 268) (251 . 268)) nil (26132 704 425784 362000) 0 nil])
([nil nil ((apply yas--snippet-revive 216 270 #s(yas--snippet nil (#s(yas--field 1 223 269 nil nil nil t #s(yas--exit 270 nil))) #s(yas--exit 270 nil) 21 nil #s(yas--field 1 223 269 nil nil nil t #s(yas--exit 270 nil)) nil nil))) nil (26132 715 532779 139000) 0 nil])
([nil nil ((270 . 272) (t 26132 704 440503 666000)) nil (26132 715 532778 499000) 0 nil])
([nil nil ((apply yas--snippet-revive 271 280 #s(yas--snippet nil nil #s(yas--exit 280 nil) 24 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 280 nil) 24 nil nil nil nil)) (271 . 280) (#("collect()$0" 0 11 (fontified nil)) . 271) (271 . 282) (#("c" 0 1 (fontified nil)) . 271) (271 . 272) (#("collect() (as Iterator)" 0 23 (fontified nil)) . -271) (271 . 294) (#("c" 0 1 (fontified t)) . -271) (undo-tree-id3686 . -1) (undo-tree-id3687 . -1) (undo-tree-id3688 . -1) (undo-tree-id3689 . -1) (undo-tree-id3690 . -1) (undo-tree-id3691 . -1) (undo-tree-id3692 . -1) (undo-tree-id3693 . -1) 272) nil (26132 715 532777 40000) 0 nil])
([nil nil ((278 . 282)) nil (26132 715 532770 282000) 0 nil])
([nil nil ((#(">" 0 1 (syntax-table (1) fontified t)) . -280) (undo-tree-id3665 . -1) (undo-tree-id3666 . -1) (undo-tree-id3667 . -1) (undo-tree-id3668 . -1) (undo-tree-id3669 . -1) (undo-tree-id3670 . -1) (undo-tree-id3671 . -1) (undo-tree-id3672 . -1) (undo-tree-id3673 . -1) (undo-tree-id3674 . -1) (undo-tree-id3675 . -1) (undo-tree-id3676 . -1) (undo-tree-id3677 . -1) (#("<" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -281) (undo-tree-id3678 . -1) (undo-tree-id3679 . -1) (undo-tree-id3680 . -1) (undo-tree-id3681 . -1) (undo-tree-id3682 . -1) (undo-tree-id3683 . -1) (undo-tree-id3684 . -1) (undo-tree-id3685 . -1) 282) nil (26132 715 532768 576000) 0 nil])
([nil nil ((280 . 282)) nil (26132 715 532616 209000) 0 nil])
([nil nil ((281 . 282)) nil (26132 715 532615 646000) 0 nil])
([nil nil ((apply yas--snippet-revive 281 286 #s(yas--snippet nil nil #s(yas--exit 285 nil) 25 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 285 nil) 25 nil nil nil nil)) (281 . 286) (#("Vec<$0>" 0 7 (fontified nil)) . 281) (281 . 288) (#("V" 0 1 (fontified nil)) . 281) (281 . 282) (#("Vec<…>" 0 6 (fontified nil)) . -281) (281 . 287) (#("V" 0 1 (face font-lock-type-face fontified t)) . -281) (undo-tree-id3659 . -1) (undo-tree-id3660 . -1) (undo-tree-id3661 . -1) (undo-tree-id3662 . -1) (undo-tree-id3663 . -1) (undo-tree-id3664 . -1) 282) nil (26132 715 532613 253000) 0 nil])
([nil nil ((285 . 286)) nil (26132 715 532602 842000) 0 nil])
([nil nil ((290 . 291)) nil (26132 715 532598 888000) 0 nil])
([nil nil ((290 . 292) (t 26132 715 547171 14000)) nil (26132 725 774407 192000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -290) (undo-tree-id3694 . -1) (undo-tree-id3695 . -1) (undo-tree-id3696 . -1) (undo-tree-id3697 . -1) (undo-tree-id3698 . -1) (undo-tree-id3699 . -1) (undo-tree-id3700 . -1) (undo-tree-id3701 . -1) (undo-tree-id3702 . -1) (undo-tree-id3703 . -1) (undo-tree-id3704 . -1) (undo-tree-id3705 . -1) (undo-tree-id3706 . -1) (undo-tree-id3707 . -1) (#("g" 0 1 (fontified t)) . -291) (undo-tree-id3708 . -1) (undo-tree-id3709 . -1) (undo-tree-id3710 . -1) (undo-tree-id3711 . -1) (undo-tree-id3712 . -1) (undo-tree-id3713 . -1) 292) nil (26132 725 774402 993000) 0 nil])
([nil nil ((290 . 292) (t 26132 725 787171 643000)) nil (26132 729 361935 442000) 0 nil])
([nil nil ((291 . 292)) nil (26132 729 361931 449000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -290) (undo-tree-id3714 . -1) (undo-tree-id3715 . -1) (undo-tree-id3716 . -1) (undo-tree-id3717 . -1) (undo-tree-id3718 . -1) (undo-tree-id3719 . -1) (undo-tree-id3720 . -1) (undo-tree-id3721 . -1) (undo-tree-id3722 . -1) (undo-tree-id3723 . -1) (undo-tree-id3724 . -1) (undo-tree-id3725 . -1) (undo-tree-id3726 . -1) (undo-tree-id3727 . -1) (undo-tree-id3728 . -1) (undo-tree-id3729 . -1) (undo-tree-id3730 . -1) (undo-tree-id3731 . -1) (undo-tree-id3732 . -1) (undo-tree-id3733 . -1) (undo-tree-id3734 . -1) (undo-tree-id3735 . -1) (undo-tree-id3736 . -1) (undo-tree-id3737 . -1) (undo-tree-id3738 . -1) (undo-tree-id3739 . -1) (undo-tree-id3740 . -1) (undo-tree-id3741 . -1) (#("0" 0 1 (fontified t)) . -291) (undo-tree-id3742 . -1) (undo-tree-id3743 . -1) (undo-tree-id3744 . -1) (undo-tree-id3745 . -1) (undo-tree-id3746 . -1) (undo-tree-id3747 . -1) (undo-tree-id3748 . -1) (undo-tree-id3749 . -1) (undo-tree-id3750 . -1) (undo-tree-id3751 . -1) (undo-tree-id3752 . -1) (undo-tree-id3753 . -1) (undo-tree-id3754 . -1) (undo-tree-id3755 . -1) (undo-tree-id3756 . -1) (undo-tree-id3757 . -1) (undo-tree-id3758 . -1) (undo-tree-id3759 . -1) (undo-tree-id3760 . -1) (undo-tree-id3761 . -1) (undo-tree-id3762 . -1) (undo-tree-id3763 . -1) (undo-tree-id3764 . -1) (undo-tree-id3765 . -1) (undo-tree-id3766 . -1) (undo-tree-id3767 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -292) (undo-tree-id3768 . -1) (undo-tree-id3769 . -1) (undo-tree-id3770 . 1) (undo-tree-id3771 . -1) (undo-tree-id3772 . -1) (undo-tree-id3773 . -1) (undo-tree-id3774 . -1) (undo-tree-id3775 . -1) (undo-tree-id3776 . -1) (undo-tree-id3777 . -1) 293 (t 26132 729 407171 865000)) nil (26132 734 440263 567000) 0 nil])
([nil nil ((291 . 296) (t 26132 734 453838 842000)) nil (26132 745 137222 587000) 0 nil])
([nil nil ((368 . 370) (t 26132 745 150506 165000)) nil (26132 760 858148 405000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -368) (undo-tree-id3851 . -1) (undo-tree-id3852 . -1) (undo-tree-id3853 . -1) (undo-tree-id3854 . -1) (undo-tree-id3855 . -1) (undo-tree-id3856 . -1) (undo-tree-id3857 . -1) (undo-tree-id3858 . -1) (#("r" 0 1 (fontified t)) . -369) (undo-tree-id3859 . -1) (undo-tree-id3860 . -1) (undo-tree-id3861 . -1) (undo-tree-id3862 . -1) 370) nil (26132 760 858146 948000) 0 nil])
([nil nil ((368 . 370)) nil (26132 760 858138 576000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -368) (undo-tree-id3837 . -1) (undo-tree-id3838 . -1) (undo-tree-id3839 . -1) (undo-tree-id3840 . -1) (undo-tree-id3841 . -1) (undo-tree-id3842 . -1) (undo-tree-id3843 . -1) (undo-tree-id3844 . -1) (undo-tree-id3845 . -1) (#("r" 0 1 (fontified t)) . -369) (undo-tree-id3846 . -1) (undo-tree-id3847 . -1) (undo-tree-id3848 . -1) (undo-tree-id3849 . -1) (undo-tree-id3850 . -1) 370) nil (26132 760 858137 356000) 0 nil])
([nil nil ((368 . 370)) nil (26132 760 858127 596000) 0 nil])
([nil nil ((apply yas--snippet-revive 368 376 #s(yas--snippet nil nil #s(yas--exit 375 nil) 26 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 375 nil) 26 nil nil nil nil)) (368 . 376) (#("print!($0)" 0 10 (fontified nil)) . 368) (368 . 378) (#("pr" 0 2 (fontified nil)) . 368) (368 . 370) (#("print!(…)" 0 9 (fontified nil)) . -368) (368 . 377) (#("pr" 0 2 (fontified t)) . -368) (undo-tree-id3828 . -2) (undo-tree-id3829 . -1) (undo-tree-id3830 . -1) (undo-tree-id3831 . -1) (undo-tree-id3832 . -1) (undo-tree-id3833 . -2) (undo-tree-id3834 . -2) (undo-tree-id3835 . -2) (undo-tree-id3836 . -2) 370) nil (26132 760 858126 231000) 0 nil])
([nil nil ((#("print!()" 0 6 (face rust-builtin-formatting-macro fontified t) 6 7 (face (rainbow-delimiters-depth-3-face) fontified t) 7 8 (face (rainbow-delimiters-depth-3-face) fontified t)) . 368) (undo-tree-id3819 . -7) (undo-tree-id3820 . -7) (undo-tree-id3821 . -7) (undo-tree-id3822 . -7) (undo-tree-id3823 . -7) (undo-tree-id3824 . -7) (undo-tree-id3825 . -7) (undo-tree-id3826 . -7) (undo-tree-id3827 . -8)) nil (26132 760 858118 723000) 0 nil])
([nil nil ((368 . 372)) nil (26132 760 858112 191000) 0 nil])
([nil nil ((apply yas--snippet-revive 368 375 #s(yas--snippet nil nil #s(yas--exit 374 nil) 27 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 374 nil) 27 nil nil nil nil)) (368 . 375) (#("info!($0)" 0 9 (fontified nil)) . 368) (368 . 377) (#("info" 0 4 (fontified nil)) . 368) (368 . 372) (#("info!(…)" 0 8 (fontified nil)) . -368) (368 . 376) (#("info" 0 4 (fontified t)) . -368) (undo-tree-id3808 . -4) (undo-tree-id3809 . -1) (undo-tree-id3810 . -1) (undo-tree-id3811 . -2) (undo-tree-id3812 . -2) (undo-tree-id3813 . -3) (undo-tree-id3814 . -3) (undo-tree-id3815 . -4) (undo-tree-id3816 . -4) (undo-tree-id3817 . -4) (undo-tree-id3818 . -4) 372) nil (26132 760 858110 570000) 0 nil])
([nil nil ((374 . 379)) nil (26132 760 858101 21000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -378) (undo-tree-id3805 . -1) (undo-tree-id3806 . -1) (undo-tree-id3807 . -1) 379) nil (26132 760 858100 214000) 0 nil])
([nil nil ((378 . 382)) nil (26132 760 858097 383000) 0 nil])
([nil nil ((#("get" 0 3 (fontified t)) . -379) (undo-tree-id3795 . -3) (undo-tree-id3796 . -1) (undo-tree-id3797 . -1) (undo-tree-id3798 . -2) (undo-tree-id3799 . -2) (undo-tree-id3800 . -3) (undo-tree-id3801 . -3) (undo-tree-id3802 . -3) (undo-tree-id3803 . -3) (undo-tree-id3804 . -3) 382) nil (26132 760 858095 702000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -378) (undo-tree-id3778 . -1) (undo-tree-id3779 . -1) (undo-tree-id3780 . -1) (undo-tree-id3781 . -1) (undo-tree-id3782 . -1) (undo-tree-id3783 . -1) (undo-tree-id3784 . -1) (undo-tree-id3785 . -1) (undo-tree-id3786 . -1) (undo-tree-id3787 . -1) (undo-tree-id3788 . -1) (undo-tree-id3789 . -1) (undo-tree-id3790 . -1) (undo-tree-id3791 . -1) (undo-tree-id3792 . -1) (undo-tree-id3793 . -1) (undo-tree-id3794 . -1) 379) nil (26132 760 858085 111000) 0 nil])
([nil nil ((379 . 380) (t 26132 760 870507 130000)) nil (26132 762 157509 775000) 0 nil])
([nil nil ((378 . 389) (t 26132 762 170507 210000)) nil (26132 778 136920 381000) 0 nil])
([nil nil ((374 . 376) (t 26132 778 150508 191000)) nil (26132 784 574335 173000) 0 nil])
([nil nil ((375 . 377)) nil (26132 784 574334 419000) 0 nil])
([nil nil ((378 . 379)) nil (26132 784 574333 684000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -378) (undo-tree-id3863 . -1) (undo-tree-id3864 . -1) (undo-tree-id3865 . -1) 379) nil (26132 784 574331 513000) 0 nil])
([nil nil ((378 . 380)) nil (26132 784 574319 855000) 0 nil])
([nil nil ((384 . 386) (t 26132 784 587175 252000)) nil (26132 800 913053 344000) 0 nil])
([nil nil ((385 . 386)) nil (26132 800 913049 196000) 0 nil])
([nil nil ((398 . 401) (t 26132 800 957176 258000)) nil (26132 813 815273 763000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -400) (undo-tree-id3886 . -1) (undo-tree-id3887 . -1) (undo-tree-id3888 . -1) 401) nil (26132 813 815272 799000) 0 nil])
([nil nil ((400 . 401)) nil (26132 813 815270 368000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -400) (undo-tree-id3880 . -1) (undo-tree-id3881 . -1) (undo-tree-id3882 . -1) (undo-tree-id3883 . -1) (undo-tree-id3884 . -1) (undo-tree-id3885 . -1) 401) nil (26132 813 815269 397000) 0 nil])
([nil nil ((400 . 404)) nil (26132 813 815264 535000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -402) (undo-tree-id3866 . -1) (undo-tree-id3867 . -1) (undo-tree-id3868 . -1) (undo-tree-id3869 . -1) (undo-tree-id3870 . -1) (undo-tree-id3871 . -1) (undo-tree-id3872 . -1) (undo-tree-id3873 . -1) (undo-tree-id3874 . -1) (#("r" 0 1 (fontified t)) . -403) (undo-tree-id3875 . -1) (undo-tree-id3876 . -1) (undo-tree-id3877 . -1) (undo-tree-id3878 . -1) (undo-tree-id3879 . -1) 404) nil (26132 813 815262 132000) 0 nil])
([nil nil ((402 . 407)) nil (26132 813 815242 558000) 0 nil])
([nil nil ((#("info!(\"{}\", chip[0].get_name().unwrap());" 0 5 (face font-lock-preprocessor-face fontified t) 5 6 (face (rainbow-delimiters-depth-3-face) fontified t) 6 10 (face font-lock-string-face fontified t) 10 12 (fontified t) 12 16 (fontified t) 16 17 (face (rainbow-delimiters-depth-4-face) fontified t) 17 18 (fontified t) 18 19 (face (rainbow-delimiters-depth-4-face) fontified t) 19 28 (fontified t) 28 29 (face (rainbow-delimiters-depth-4-face) fontified t) 29 30 (face (rainbow-delimiters-depth-4-face) fontified t) 30 37 (fontified t) 37 38 (face (rainbow-delimiters-depth-4-face) fontified t) 38 39 (face (rainbow-delimiters-depth-4-face) fontified t) 39 40 (face (rainbow-delimiters-depth-3-face) fontified t) 40 41 (fontified t)) . 368) (undo-tree-id3953 . -39) (undo-tree-id3954 . -32) (undo-tree-id3955 . -32) (undo-tree-id3956 . -32) (undo-tree-id3957 . -32) (undo-tree-id3958 . -32) (undo-tree-id3959 . -32) (undo-tree-id3960 . -32) (undo-tree-id3961 . -34) (undo-tree-id3962 . -34) (undo-tree-id3963 . -34) (undo-tree-id3964 . -34) (undo-tree-id3965 . -34) (undo-tree-id3966 . -34) (undo-tree-id3967 . -34) (undo-tree-id3968 . -34) (undo-tree-id3969 . 2) (undo-tree-id3970 . -39) (undo-tree-id3971 . -39) (undo-tree-id3972 . -39) (undo-tree-id3973 . -39) (undo-tree-id3974 . -39) (undo-tree-id3975 . -39) (undo-tree-id3976 . -39) (undo-tree-id3977 . -39) (undo-tree-id3978 . -39) (undo-tree-id3979 . -39) (undo-tree-id3980 . -39) (undo-tree-id3981 . -39) (undo-tree-id3982 . -39) (undo-tree-id3983 . -39) (undo-tree-id3984 . -39) (undo-tree-id3985 . -39) (undo-tree-id3986 . -39) (undo-tree-id3987 . -39) (undo-tree-id3988 . -39) (undo-tree-id3989 . -39) (undo-tree-id3990 . -39) (undo-tree-id3991 . -39) (undo-tree-id3992 . -39) (undo-tree-id3993 . -39) (undo-tree-id3994 . -39) (undo-tree-id3995 . -39) (undo-tree-id3996 . -39) (undo-tree-id3997 . -39) (undo-tree-id3998 . -39) (undo-tree-id3999 . -39) (undo-tree-id4000 . -39) (undo-tree-id4001 . -39) (undo-tree-id4002 . -39) (undo-tree-id4003 . -39) (undo-tree-id4004 . -39) (undo-tree-id4005 . -39) (undo-tree-id4006 . -39) (undo-tree-id4007 . -39) (undo-tree-id4008 . -39) (undo-tree-id4009 . -39) (undo-tree-id4010 . -39) (undo-tree-id4011 . -41) (t 26132 813 830510 381000)) nil (26132 848 728365 83000) 0 nil])
([nil nil ((296 . 302)) nil (26132 848 728318 870000) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-variable-name-face fontified t)) . -300) (undo-tree-id3937 . -1) (undo-tree-id3938 . -1) (undo-tree-id3939 . -1) (undo-tree-id3940 . -1) (undo-tree-id3941 . -1) (undo-tree-id3942 . -1) (undo-tree-id3943 . -1) (undo-tree-id3944 . -1) (undo-tree-id3945 . -1) (undo-tree-id3946 . -1) (undo-tree-id3947 . -1) (#("h" 0 1 (face font-lock-variable-name-face fontified t)) . -301) (undo-tree-id3948 . -1) (undo-tree-id3949 . -1) (undo-tree-id3950 . -1) (undo-tree-id3951 . -1) (undo-tree-id3952 . -1) 302) nil (26132 848 728317 35000) 0 nil])
([nil nil ((300 . 308)) nil (26132 848 728304 747000) 0 nil])
([nil nil ((307 . 311) (#("c" 0 1 (fontified nil)) . 307) (307 . 308) (#("chip" 0 4 (fontified nil)) . -307) (307 . 311) (#("c" 0 1 (fontified t)) . -307) (undo-tree-id3932 . -1) (undo-tree-id3933 . -1) (undo-tree-id3934 . -1) (undo-tree-id3935 . -1) (undo-tree-id3936 . -1) 308) nil (26132 848 728303 768000) 0 nil])
([nil nil ((311 . 312)) nil (26132 848 728299 567000) 0 nil])
([nil nil ((312 . 313)) nil (26132 848 728299 52000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 316 321 nil nil nil nil #s(yas--exit 322 nil))) #s(yas--exit 322 nil) 28 nil #s(yas--field 1 316 321 nil nil nil nil #s(yas--exit 322 nil)) nil nil)) (312 . 322) (#("get(${1:index})$0" 0 17 (fontified nil)) . 312) (312 . 329) (#("g" 0 1 (fontified nil)) . 312) (312 . 313) (#("get(…)" 0 6 (fontified nil)) . -312) (312 . 318) (#("g" 0 1 (fontified t)) . -312) (undo-tree-id3926 . -1) (undo-tree-id3927 . -1) (undo-tree-id3928 . -1) (undo-tree-id3929 . -1) (undo-tree-id3930 . -1) (undo-tree-id3931 . -1) 313) nil (26132 848 728297 904000) 0 nil])
([nil nil ((apply yas--snippet-revive 312 322 #s(yas--snippet nil (#s(yas--field 1 316 321 nil nil nil nil #s(yas--exit 322 nil))) #s(yas--exit 322 nil) 28 nil #s(yas--field 1 316 321 nil nil nil nil #s(yas--exit 322 nil)) nil nil))) nil (26132 848 728292 497000) 0 nil])
([nil nil ((#("index" 0 5 (fontified t)) . -316) (undo-tree-id3920 . -5) (undo-tree-id3921 . -1) (undo-tree-id3922 . -2) (undo-tree-id3923 . -3) (undo-tree-id3924 . -4) (undo-tree-id3925 . -5) 321) nil (26132 848 728291 660000) 0 nil])
([nil nil ((316 . 317)) nil (26132 848 728287 9000) 0 nil])
([nil nil ((318 . 320)) nil (26132 848 728286 448000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -318) (undo-tree-id3904 . -1) (undo-tree-id3905 . -1) (undo-tree-id3906 . -1) (undo-tree-id3907 . -1) (undo-tree-id3908 . -1) (undo-tree-id3909 . -1) (undo-tree-id3910 . -1) (undo-tree-id3911 . -1) (undo-tree-id3912 . -1) (undo-tree-id3913 . -1) (undo-tree-id3914 . -1) (undo-tree-id3915 . -1) (#("." 0 1 (fontified t)) . -319) (undo-tree-id3916 . -1) (undo-tree-id3917 . -1) (undo-tree-id3918 . -1) (undo-tree-id3919 . -1) 320) nil (26132 848 728285 154000) 0 nil])
([nil nil ((318 . 319)) nil (26132 848 728273 790000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -318) (undo-tree-id3895 . -1) (undo-tree-id3896 . -1) (undo-tree-id3897 . -1) (undo-tree-id3898 . -1) (undo-tree-id3899 . -1) (undo-tree-id3900 . -1) (undo-tree-id3901 . -1) (undo-tree-id3902 . -1) (undo-tree-id3903 . -1) 319) nil (26132 848 728272 781000) 0 nil])
([nil nil ((318 . 320)) nil (26132 848 728265 573000) 0 nil])
([nil nil ((apply yas--snippet-revive 319 327 #s(yas--snippet nil nil #s(yas--exit 327 nil) 29 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 327 nil) 29 nil nil nil nil)) (319 . 327) (#("unwrap()$0" 0 10 (fontified nil)) . 319) (319 . 329) (#("u" 0 1 (fontified nil)) . 319) (319 . 320) (#("unwrap()" 0 8 (fontified nil)) . -319) (319 . 327) (#("u" 0 1 (fontified t)) . -319) (undo-tree-id3889 . -1) (undo-tree-id3890 . -1) (undo-tree-id3891 . -1) (undo-tree-id3892 . -1) (undo-tree-id3893 . -1) (undo-tree-id3894 . -1) 320) nil (26132 848 728263 164000) 0 nil])
([nil nil ((327 . 328)) nil (26132 848 728246 390000) 0 nil])
([nil nil ((328 . 333) (t 26132 848 743845 857000)) nil (26132 849 823558 948000) 0 nil])
([nil nil ((222 . 223) (t 26132 849 837179 258000)) nil (26132 1026 974750 779000) 0 nil])
([nil nil ((216 . 226) (#("filter_" 0 7 (fontified nil)) . 216) (216 . 223) (#("filter_map (as Iterator)" 0 24 (fontified nil)) . -216) (216 . 240) (#("filter_" 0 7 (fontified t)) . -216) (undo-tree-id4288 . -7) (undo-tree-id4289 . -7) (undo-tree-id4290 . -6) (undo-tree-id4291 . -6) (undo-tree-id4292 . -6) (undo-tree-id4293 . -6) (undo-tree-id4294 . -6) (undo-tree-id4295 . -6) (undo-tree-id4296 . -7) (undo-tree-id4297 . -7) (undo-tree-id4298 . -7) (undo-tree-id4299 . -7) (undo-tree-id4300 . -7) (undo-tree-id4301 . -7) (undo-tree-id4302 . -7) (undo-tree-id4303 . -7) 223) nil (26132 1026 974749 233000) 0 nil])
([nil nil ((#("0000\"" 0 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face rear-nonsticky t fontified t) 4 5 (face font-lock-string-face fontified t)) . -268) (undo-tree-id4274 . -5) (undo-tree-id4275 . -5) (undo-tree-id4276 . -5) (undo-tree-id4277 . -5) (undo-tree-id4278 . -5) (undo-tree-id4279 . -5) (undo-tree-id4280 . -5) (undo-tree-id4281 . -5) (undo-tree-id4282 . -5) (undo-tree-id4283 . -5) (undo-tree-id4284 . -5) (undo-tree-id4285 . -5) (undo-tree-id4286 . -5) (undo-tree-id4287 . -5) 273) nil (26132 1026 974738 399000) 0 nil])
([nil nil ((#("isa-" 0 4 (face font-lock-string-face fontified t)) . -264) (undo-tree-id4258 . -4) (undo-tree-id4259 . -4) (undo-tree-id4260 . -4) (undo-tree-id4261 . -4) (undo-tree-id4262 . -4) (undo-tree-id4263 . -4) (undo-tree-id4264 . -4) (undo-tree-id4265 . -4) (undo-tree-id4266 . -4) (undo-tree-id4267 . -4) (undo-tree-id4268 . -4) (undo-tree-id4269 . -4) (undo-tree-id4270 . -4) (undo-tree-id4271 . -4) (undo-tree-id4272 . -4) (undo-tree-id4273 . -4) 268) nil (26132 1026 974729 485000) 0 nil])
([nil nil ((#("coretemp-" 0 9 (face font-lock-string-face fontified t)) . -255) (undo-tree-id4240 . -9) (undo-tree-id4241 . -9) (undo-tree-id4242 . -9) (undo-tree-id4243 . -9) (undo-tree-id4244 . -9) (undo-tree-id4245 . -9) (undo-tree-id4246 . -9) (undo-tree-id4247 . -9) (undo-tree-id4248 . -9) (undo-tree-id4249 . -9) (undo-tree-id4250 . -9) (undo-tree-id4251 . -9) (undo-tree-id4252 . -9) (undo-tree-id4253 . -9) (undo-tree-id4254 . -9) (undo-tree-id4255 . -9) (undo-tree-id4256 . -9) (undo-tree-id4257 . -9) 264) nil (26132 1026 974719 105000) 0 nil])
([nil nil ((#("unwrap()==\"" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-3-face) fontified t) 7 8 (face (rainbow-delimiters-depth-3-face) fontified t) 8 10 (fontified t) 10 11 (face font-lock-string-face fontified t)) . -244) (undo-tree-id4214 . -11) (undo-tree-id4215 . -11) (undo-tree-id4216 . -11) (undo-tree-id4217 . -11) (undo-tree-id4218 . -11) (undo-tree-id4219 . -11) (undo-tree-id4220 . -11) (undo-tree-id4221 . -11) (undo-tree-id4222 . -11) (undo-tree-id4223 . -11) (undo-tree-id4224 . -11) (undo-tree-id4225 . -11) (undo-tree-id4226 . -11) (undo-tree-id4227 . -11) (undo-tree-id4228 . -11) (undo-tree-id4229 . -11) (undo-tree-id4230 . -11) (undo-tree-id4231 . -11) (undo-tree-id4232 . -11) (undo-tree-id4233 . -11) (undo-tree-id4234 . -11) (undo-tree-id4235 . -11) (undo-tree-id4236 . -11) (undo-tree-id4237 . -11) (undo-tree-id4238 . -11) (undo-tree-id4239 . -11) 255) nil (26132 1026 974707 94000) 0 nil])
([nil nil ((#("name()." 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-3-face) fontified t) 5 6 (face (rainbow-delimiters-depth-3-face) fontified t) 6 7 (fontified t)) . -237) (undo-tree-id4181 . -7) (undo-tree-id4182 . -7) (undo-tree-id4183 . -7) (undo-tree-id4184 . -7) (undo-tree-id4185 . -7) (undo-tree-id4186 . -7) (undo-tree-id4187 . -4) (undo-tree-id4188 . -4) (undo-tree-id4189 . -4) (undo-tree-id4190 . -4) (undo-tree-id4191 . -4) (undo-tree-id4192 . -7) (undo-tree-id4193 . -7) (undo-tree-id4194 . -7) (undo-tree-id4195 . -7) (undo-tree-id4196 . -7) (undo-tree-id4197 . -7) (undo-tree-id4198 . -7) (undo-tree-id4199 . -7) (undo-tree-id4200 . -7) (undo-tree-id4201 . -7) (undo-tree-id4202 . -7) (undo-tree-id4203 . -7) (undo-tree-id4204 . -7) (undo-tree-id4205 . -7) (undo-tree-id4206 . -7) (undo-tree-id4207 . -7) (undo-tree-id4208 . -7) (undo-tree-id4209 . -7) (undo-tree-id4210 . -7) (undo-tree-id4211 . -7) (undo-tree-id4212 . -7) (undo-tree-id4213 . -7) 244) nil (26132 1026 974669 268000) 0 nil])
([nil nil ((#("get_" 0 4 (fontified t)) . -233) (undo-tree-id4144 . -4) (undo-tree-id4145 . -4) (undo-tree-id4146 . -4) (undo-tree-id4147 . -4) (undo-tree-id4148 . -4) (undo-tree-id4149 . -4) (undo-tree-id4150 . -3) (undo-tree-id4151 . -4) (undo-tree-id4152 . -4) (undo-tree-id4153 . -4) (undo-tree-id4154 . -4) (undo-tree-id4155 . -4) (undo-tree-id4156 . -4) (undo-tree-id4157 . -4) (undo-tree-id4158 . -4) (undo-tree-id4159 . -4) (undo-tree-id4160 . -4) (undo-tree-id4161 . -4) (undo-tree-id4162 . -4) (undo-tree-id4163 . -4) (undo-tree-id4164 . -4) (undo-tree-id4165 . -4) (undo-tree-id4166 . -4) (undo-tree-id4167 . -4) (undo-tree-id4168 . -4) (undo-tree-id4169 . -4) (undo-tree-id4170 . -4) (undo-tree-id4171 . -4) (undo-tree-id4172 . -4) (undo-tree-id4173 . -4) (undo-tree-id4174 . -4) (undo-tree-id4175 . -4) (undo-tree-id4176 . -4) (undo-tree-id4177 . -4) (undo-tree-id4178 . -4) (undo-tree-id4179 . -4) (undo-tree-id4180 . -4) 237) nil (26132 1026 974649 239000) 0 nil])
([nil nil ((#("x." 0 2 (fontified t)) . -231) (undo-tree-id4103 . -2) (undo-tree-id4104 . -2) (undo-tree-id4105 . -2) (undo-tree-id4106 . -2) (undo-tree-id4107 . -2) (undo-tree-id4108 . -2) (undo-tree-id4109 . -1) (undo-tree-id4110 . -2) (undo-tree-id4111 . -2) (undo-tree-id4112 . -2) (undo-tree-id4113 . -2) (undo-tree-id4114 . -2) (undo-tree-id4115 . -2) (undo-tree-id4116 . -2) (undo-tree-id4117 . -2) (undo-tree-id4118 . -2) (undo-tree-id4119 . -2) (undo-tree-id4120 . -2) (undo-tree-id4121 . -2) (undo-tree-id4122 . -2) (undo-tree-id4123 . -2) (undo-tree-id4124 . -2) (undo-tree-id4125 . -2) (undo-tree-id4126 . -2) (undo-tree-id4127 . -2) (undo-tree-id4128 . -2) (undo-tree-id4129 . -2) (undo-tree-id4130 . -2) (undo-tree-id4131 . -2) (undo-tree-id4132 . -2) (undo-tree-id4133 . -2) (undo-tree-id4134 . -2) (undo-tree-id4135 . -2) (undo-tree-id4136 . -2) (undo-tree-id4137 . -2) (undo-tree-id4138 . -2) (undo-tree-id4139 . -2) (undo-tree-id4140 . -2) (undo-tree-id4141 . -2) (undo-tree-id4142 . -2) (undo-tree-id4143 . -2) 233) nil (26132 1026 974626 551000) 0 nil])
([nil nil ((231 . 238)) nil (26132 1026 974601 437000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -237) (undo-tree-id4092 . -1) (undo-tree-id4093 . -1) (undo-tree-id4094 . -1) (undo-tree-id4095 . -1) (undo-tree-id4096 . -1) (undo-tree-id4097 . -1) (undo-tree-id4098 . -1) (undo-tree-id4099 . -1) (undo-tree-id4100 . -1) (undo-tree-id4101 . -1) (undo-tree-id4102 . -1) 238) nil (26132 1026 974600 454000) 0 nil])
([nil nil ((237 . 240)) nil (26132 1026 974593 386000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -238) (undo-tree-id4078 . -1) (undo-tree-id4079 . -1) (undo-tree-id4080 . -1) (undo-tree-id4081 . -1) (undo-tree-id4082 . -1) (undo-tree-id4083 . -1) (undo-tree-id4084 . -1) (undo-tree-id4085 . -1) (undo-tree-id4086 . -1) (undo-tree-id4087 . -1) (#("g" 0 1 (fontified t)) . -239) (undo-tree-id4088 . -1) (undo-tree-id4089 . -1) (undo-tree-id4090 . -1) (undo-tree-id4091 . -1) 240) nil (26132 1026 974592 90000) 0 nil])
([nil nil ((238 . 240)) nil (26132 1026 974510 70000) 0 nil])
([nil nil ((apply yas--snippet-revive 239 249 #s(yas--snippet nil nil #s(yas--exit 249 nil) 30 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 249 nil) 30 nil nil nil nil)) (239 . 249) (#("get_name()$0" 0 12 (fontified nil)) . 239) (239 . 251) (#("g" 0 1 (fontified nil)) . 239) (239 . 240) (#("get_name()" 0 10 (fontified nil)) . -239) (239 . 249) (#("g" 0 1 (fontified t)) . -239) (undo-tree-id4073 . -1) (undo-tree-id4074 . -1) (undo-tree-id4075 . -1) (undo-tree-id4076 . -1) (undo-tree-id4077 . -1) 240) nil (26132 1026 974508 814000) 0 nil])
([nil nil ((249 . 252)) nil (26132 1026 974504 250000) 0 nil])
([nil nil ((253 . 257) (#("        " 0 8 (fontified nil)) . 252) (252 . 260) (#("    " 0 4 (fontified nil)) . 252) (undo-tree-id4069 . -4) (undo-tree-id4070 . -4) (undo-tree-id4071 . -4) (undo-tree-id4072 . -4) (251 . 257)) nil (26132 1026 974503 295000) 0 nil])
([nil nil ((252 . 260)) nil (26132 1026 974499 959000) 0 nil])
([nil nil ((260 . 262)) nil (26132 1026 974499 498000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 263 267 nil nil nil t #s(yas--exit 268 nil))) #s(yas--exit 268 nil) 31 nil #s(yas--field 1 263 267 nil nil nil t #s(yas--exit 268 nil)) nil nil)) (260 . 264) (#("Ok($1)$0" 0 8 (fontified nil)) . 260) (260 . 268) (#("Ok" 0 2 (fontified nil)) . 260) (260 . 262) (#("Ok(…)" 0 5 (fontified nil)) . -260) (260 . 265) (#("Ok" 0 2 (face font-lock-type-face fontified t)) . -260) (undo-tree-id4059 . -2) (undo-tree-id4060 . -1) (undo-tree-id4061 . -1) (undo-tree-id4062 . -1) (undo-tree-id4063 . -2) (undo-tree-id4064 . -2) (undo-tree-id4065 . -2) (undo-tree-id4066 . -2) (undo-tree-id4067 . -2) (undo-tree-id4068 . -2) 262) nil (26132 1026 974497 937000) 0 nil])
([nil nil ((263 . 267)) nil (26132 1026 974490 2000) 0 nil])
([nil nil ((apply yas--snippet-revive 260 268 #s(yas--snippet nil (#s(yas--field 1 263 267 nil nil nil t #s(yas--exit 268 nil))) #s(yas--exit 268 nil) 31 nil #s(yas--field 1 263 267 nil nil nil t #s(yas--exit 268 nil)) nil nil))) nil (26132 1026 974489 462000) 0 nil])
([nil nil ((268 . 269)) nil (26132 1026 974488 867000) 0 nil])
([nil nil ((269 . 285)) nil (26132 1026 974488 409000) 0 nil])
([nil nil ((nil rear-nonsticky nil 300 . 301) (nil fontified nil 284 . 301) (284 . 301)) nil (26132 1026 974487 754000) 0 nil])
([nil nil ((302 . 304)) nil (26132 1026 974486 870000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -303) (undo-tree-id4049 . -1) (undo-tree-id4050 . -1) (undo-tree-id4051 . -1) (undo-tree-id4052 . -1) (undo-tree-id4053 . -1) (undo-tree-id4054 . -1) (undo-tree-id4055 . -1) (undo-tree-id4056 . -1) (undo-tree-id4057 . -1) (undo-tree-id4058 . -1) 304) nil (26132 1026 974485 775000) 0 nil])
([nil nil ((303 . 308)) nil (26132 1026 974479 185000) 0 nil])
([nil nil ((#("{" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -306) (undo-tree-id4024 . -1) (undo-tree-id4025 . -1) (undo-tree-id4026 . -1) (undo-tree-id4027 . -1) (undo-tree-id4028 . -1) (undo-tree-id4029 . -1) (undo-tree-id4030 . -1) (undo-tree-id4031 . -1) (undo-tree-id4032 . -1) (undo-tree-id4033 . -1) (undo-tree-id4034 . -1) (undo-tree-id4035 . -1) (undo-tree-id4036 . -1) (undo-tree-id4037 . -1) (undo-tree-id4038 . -1) (undo-tree-id4039 . -1) (undo-tree-id4040 . -1) (undo-tree-id4041 . -1) (undo-tree-id4042 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -307) (undo-tree-id4043 . -1) (undo-tree-id4044 . -1) (undo-tree-id4045 . -1) (undo-tree-id4046 . -1) (undo-tree-id4047 . -1) (undo-tree-id4048 . -1) 308) nil (26132 1026 974477 705000) 0 nil])
([nil nil ((306 . 308)) nil (26132 1026 974462 145000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 309 309 nil nil nil nil #s(yas--exit 310 nil))) #s(yas--exit 310 nil) 32 nil #s(yas--field 1 309 309 nil nil nil nil #s(yas--exit 310 nil)) nil nil)) (306 . 310) (#("Ok($1)$0" 0 8 (fontified nil)) . 306) (306 . 314) (#("Ok" 0 2 (fontified nil)) . 306) (306 . 308) (#("Ok(…)" 0 5 (fontified nil)) . -306) (306 . 311) (#("Ok" 0 2 (face font-lock-type-face fontified t)) . -306) (undo-tree-id4012 . -2) (undo-tree-id4013 . -1) (undo-tree-id4014 . -1) (undo-tree-id4015 . -1) (undo-tree-id4016 . -1) (undo-tree-id4017 . -1) (undo-tree-id4018 . -2) (undo-tree-id4019 . -2) (undo-tree-id4020 . -2) (undo-tree-id4021 . -2) (undo-tree-id4022 . -2) (undo-tree-id4023 . -2) 308) nil (26132 1026 974459 933000) 0 nil])
([nil nil ((apply yas--snippet-revive 306 310 #s(yas--snippet nil (#s(yas--field 1 309 309 nil nil nil nil #s(yas--exit 310 nil))) #s(yas--exit 310 nil) 32 nil #s(yas--field 1 309 309 nil nil nil nil #s(yas--exit 310 nil)) nil nil))) nil (26132 1026 974443 987000) 0 nil])
([nil nil ((309 . 310)) nil (26132 1026 974442 621000) 0 nil])
([nil nil ((311 . 312)) nil (26132 1026 974439 150000) 0 nil])
([nil nil ((312 . 321) (t 26132 1027 20523 467000)) nil (26132 1042 672812 324000) 0 nil])
([nil nil ((#("Ok(name) => if name == \"coretemp-isa-0000\" => Ok(x)," 0 2 (face font-lock-type-face fontified t) 2 3 (face (rainbow-delimiters-depth-4-face) fontified t) 3 7 (fontified t) 7 8 (face (rainbow-delimiters-depth-4-face) fontified t) 8 10 (fontified t) 10 11 (syntax-table (1) fontified t) 11 12 (fontified t) 12 14 (face font-lock-keyword-face fontified t) 14 23 (fontified t) 23 24 (face font-lock-string-face fontified t) 24 40 (face font-lock-string-face fontified t) 40 41 (face font-lock-string-face rear-nonsticky t fontified t) 41 42 (face font-lock-string-face fontified t) 42 44 (fontified t) 44 45 (syntax-table (1) fontified t) 45 46 (fontified t) 46 48 (face font-lock-type-face fontified t) 48 49 (face (rainbow-delimiters-depth-4-face) fontified t) 49 50 (fontified t) 50 51 (face (rainbow-delimiters-depth-4-face) fontified t) 51 52 (fontified t)) . 260) (undo-tree-id4510 . -24) (undo-tree-id4511 . -24) (undo-tree-id4512 . -24) (undo-tree-id4513 . -24) (undo-tree-id4514 . -43) (undo-tree-id4515 . -43) (undo-tree-id4516 . -43) (undo-tree-id4517 . -43) (undo-tree-id4518 . -43) (undo-tree-id4519 . -43) (undo-tree-id4520 . -43) (undo-tree-id4521 . -43) (undo-tree-id4522 . -43) (undo-tree-id4523 . -46) (undo-tree-id4524 . -46) (undo-tree-id4525 . -46) (undo-tree-id4526 . -46) (undo-tree-id4527 . -46) (undo-tree-id4528 . -46) (undo-tree-id4529 . -46) (undo-tree-id4530 . -46) (undo-tree-id4531 . -46) (undo-tree-id4532 . -46) (undo-tree-id4533 . -46) (undo-tree-id4534 . -46) (undo-tree-id4535 . -46) (undo-tree-id4536 . -46) (undo-tree-id4537 . -46) (undo-tree-id4538 . -46) (undo-tree-id4539 . -46) (undo-tree-id4540 . -46) (undo-tree-id4541 . -46) (undo-tree-id4542 . -46) (undo-tree-id4543 . -46) (undo-tree-id4544 . -46) (undo-tree-id4545 . -46) (undo-tree-id4546 . -46) (undo-tree-id4547 . -46) (undo-tree-id4548 . -46) (undo-tree-id4549 . -46) (undo-tree-id4550 . -46) (undo-tree-id4551 . -46) (undo-tree-id4552 . -49) (undo-tree-id4553 . 2) (undo-tree-id4554 . -52) (undo-tree-id4555 . -52) (undo-tree-id4556 . -52) (undo-tree-id4557 . -52) (undo-tree-id4558 . -52) (undo-tree-id4559 . -52) (undo-tree-id4560 . -52) (undo-tree-id4561 . -52) (undo-tree-id4562 . -52) (undo-tree-id4563 . -52) (undo-tree-id4564 . -52) (undo-tree-id4565 . -52) (undo-tree-id4566 . -52) (undo-tree-id4567 . -52) (undo-tree-id4568 . -52) (undo-tree-id4569 . -2) (undo-tree-id4570 . -7) (undo-tree-id4571 . -14) (undo-tree-id4572 . -19) (undo-tree-id4573 . -32) (undo-tree-id4574 . -36) (undo-tree-id4575 . -41) (undo-tree-id4576 . -48) (undo-tree-id4577 . -50) (undo-tree-id4578 . -50) (undo-tree-id4579 . -50) (undo-tree-id4580 . -50) (undo-tree-id4581 . -50) (undo-tree-id4582 . -52)) nil (26132 1045 418322 664000) 0 nil])
([nil nil ((#("let chip = sensors.into_iter().filter_map(|x| match x.get_name() {" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 8 (face font-lock-variable-name-face fontified t) 8 11 (fontified t) 11 19 (fontified t) 19 28 (fontified t) 28 29 (face (rainbow-delimiters-depth-2-face) fontified t) 29 30 (face (rainbow-delimiters-depth-2-face) fontified t) 30 31 (fontified t) 31 41 (fontified t) 41 42 (face (rainbow-delimiters-depth-2-face) fontified t) 42 46 (fontified t) 46 51 (face font-lock-keyword-face fontified t) 51 54 (fontified t) 54 62 (fontified t) 62 63 (face (rainbow-delimiters-depth-3-face) fontified t) 63 64 (face (rainbow-delimiters-depth-3-face) fontified t) 64 65 (fontified t) 65 66 (face (rainbow-delimiters-depth-3-face) fontified t)) . 185) (undo-tree-id4761 . -6) (undo-tree-id4762 . -9) (undo-tree-id4763 . -46) (undo-tree-id4764 . -46) (undo-tree-id4765 . -31) (undo-tree-id4766 . -46) (undo-tree-id4767 . -31) (undo-tree-id4768 . -46) (undo-tree-id4769 . -46) (undo-tree-id4770 . -46) (undo-tree-id4771 . -46) (undo-tree-id4772 . -46) (undo-tree-id4773 . -46) (undo-tree-id4774 . -46) (undo-tree-id4775 . -46) (undo-tree-id4776 . -46) (undo-tree-id4777 . -31) (undo-tree-id4778 . -31) (undo-tree-id4779 . -31) (undo-tree-id4780 . -31) (undo-tree-id4781 . -31) (undo-tree-id4782 . -31) (undo-tree-id4783 . -31) (undo-tree-id4784 . -31) (undo-tree-id4785 . -31) (undo-tree-id4786 . -31) (undo-tree-id4787 . -31) (undo-tree-id4788 . -31) (undo-tree-id4789 . -31) (undo-tree-id4790 . -46) (undo-tree-id4791 . -46) (undo-tree-id4792 . -46) (undo-tree-id4793 . -46) (undo-tree-id4794 . -46) (undo-tree-id4795 . -46) (undo-tree-id4796 . -46) (undo-tree-id4797 . -46) (undo-tree-id4798 . -46) (undo-tree-id4799 . -46) (undo-tree-id4800 . -46) (undo-tree-id4801 . -46) (undo-tree-id4802 . -46) (undo-tree-id4803 . -46) (undo-tree-id4804 . -46) (undo-tree-id4805 . -46) (undo-tree-id4806 . -46) (undo-tree-id4807 . -46) (undo-tree-id4808 . -46) (undo-tree-id4809 . -46) (undo-tree-id4810 . -46) (undo-tree-id4811 . -46) (undo-tree-id4812 . -46) (undo-tree-id4813 . -46) (undo-tree-id4814 . -46) (undo-tree-id4815 . -46) (undo-tree-id4816 . -52) (undo-tree-id4817 . -52) (undo-tree-id4818 . -52) (undo-tree-id4819 . -52) (undo-tree-id4820 . -52) (undo-tree-id4821 . -52) (undo-tree-id4822 . -52) (undo-tree-id4823 . -52) (undo-tree-id4824 . -52) (undo-tree-id4825 . -53) (undo-tree-id4826 . -53) (undo-tree-id4827 . -53) (undo-tree-id4828 . -53) (undo-tree-id4829 . -53) (undo-tree-id4830 . -53) (undo-tree-id4831 . -53) (undo-tree-id4832 . -53) (undo-tree-id4833 . -53) (undo-tree-id4834 . -54) (undo-tree-id4835 . -54) (undo-tree-id4836 . -54) (undo-tree-id4837 . -54) (undo-tree-id4838 . -46) (undo-tree-id4839 . -4) (undo-tree-id4840 . -66)) nil (26132 1072 154681 943000) 0 nil] [nil nil ((185 . 186)) ((#("
" 0 1 (fontified t)) . 185) (undo-tree-id4595 . -1) (undo-tree-id4596 . -1) (undo-tree-id4597 . -1) (undo-tree-id4598 . -1) (undo-tree-id4599 . -1) (undo-tree-id4600 . -1) (undo-tree-id4601 . -1) (undo-tree-id4602 . -1) (undo-tree-id4603 . -1) (undo-tree-id4604 . -1) (undo-tree-id4605 . -1) (undo-tree-id4606 . -1) (undo-tree-id4607 . -1) (undo-tree-id4608 . -1) (undo-tree-id4609 . -1) (undo-tree-id4610 . -1) (undo-tree-id4611 . -1) (undo-tree-id4612 . -1) (undo-tree-id4613 . -1) (undo-tree-id4614 . -1) (undo-tree-id4615 . -1) (undo-tree-id4616 . -1) (undo-tree-id4617 . -1) (undo-tree-id4618 . -1) (undo-tree-id4619 . -1) (undo-tree-id4620 . -1) (undo-tree-id4621 . -1) (undo-tree-id4622 . -1) (undo-tree-id4623 . -1) (undo-tree-id4624 . -1)) (26132 1044 892726 434000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 185) (undo-tree-id4757 . -1) (undo-tree-id4758 . -1) (undo-tree-id4759 . -1) (undo-tree-id4760 . -1)) nil (26132 1072 154183 310000) 0 nil])
([nil nil ((#("let chip = sensors.into_iter().filter_map(|x| match x.get_name() {" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 8 (face font-lock-variable-name-face fontified t) 8 11 (fontified t) 11 19 (fontified t) 19 28 (fontified t) 28 29 (face (rainbow-delimiters-depth-2-face) fontified t) 29 30 (face (rainbow-delimiters-depth-2-face) fontified t) 30 31 (fontified t) 31 41 (fontified t) 41 42 (face (rainbow-delimiters-depth-2-face) fontified t) 42 46 (fontified t) 46 51 (face font-lock-keyword-face fontified t) 51 54 (fontified t) 54 62 (fontified t) 62 63 (face (rainbow-delimiters-depth-3-face) fontified t) 63 64 (face (rainbow-delimiters-depth-3-face) fontified t) 64 65 (fontified t) 65 66 (face (rainbow-delimiters-depth-3-face) fontified t)) . 186) (undo-tree-id4430 . -6) (undo-tree-id4431 . -9) (undo-tree-id4432 . -46) (undo-tree-id4433 . -46) (undo-tree-id4434 . -31) (undo-tree-id4435 . -46) (undo-tree-id4436 . -31) (undo-tree-id4437 . -46) (undo-tree-id4438 . -46) (undo-tree-id4439 . -46) (undo-tree-id4440 . -46) (undo-tree-id4441 . -46) (undo-tree-id4442 . -46) (undo-tree-id4443 . -46) (undo-tree-id4444 . -46) (undo-tree-id4445 . -46) (undo-tree-id4446 . -31) (undo-tree-id4447 . -31) (undo-tree-id4448 . -31) (undo-tree-id4449 . -31) (undo-tree-id4450 . -31) (undo-tree-id4451 . -31) (undo-tree-id4452 . -31) (undo-tree-id4453 . -31) (undo-tree-id4454 . -31) (undo-tree-id4455 . -31) (undo-tree-id4456 . -31) (undo-tree-id4457 . -31) (undo-tree-id4458 . -31) (undo-tree-id4459 . -46) (undo-tree-id4460 . -46) (undo-tree-id4461 . -46) (undo-tree-id4462 . -46) (undo-tree-id4463 . -46) (undo-tree-id4464 . -46) (undo-tree-id4465 . -46) (undo-tree-id4466 . -46) (undo-tree-id4467 . -46) (undo-tree-id4468 . -46) (undo-tree-id4469 . -46) (undo-tree-id4470 . -46) (undo-tree-id4471 . -46) (undo-tree-id4472 . -46) (undo-tree-id4473 . -46) (undo-tree-id4474 . -46) (undo-tree-id4475 . -46) (undo-tree-id4476 . -46) (undo-tree-id4477 . -46) (undo-tree-id4478 . -46) (undo-tree-id4479 . -46) (undo-tree-id4480 . -46) (undo-tree-id4481 . -46) (undo-tree-id4482 . -46) (undo-tree-id4483 . -46) (undo-tree-id4484 . -46) (undo-tree-id4485 . -52) (undo-tree-id4486 . -52) (undo-tree-id4487 . -52) (undo-tree-id4488 . -52) (undo-tree-id4489 . -52) (undo-tree-id4490 . -52) (undo-tree-id4491 . -52) (undo-tree-id4492 . -52) (undo-tree-id4493 . -52) (undo-tree-id4494 . -53) (undo-tree-id4495 . -53) (undo-tree-id4496 . -53) (undo-tree-id4497 . -53) (undo-tree-id4498 . -53) (undo-tree-id4499 . -53) (undo-tree-id4500 . -53) (undo-tree-id4501 . -53) (undo-tree-id4502 . -53) (undo-tree-id4503 . -54) (undo-tree-id4504 . -54) (undo-tree-id4505 . -54) (undo-tree-id4506 . -54) (undo-tree-id4507 . -46) (undo-tree-id4508 . -4) (undo-tree-id4509 . -66)) ((186 . 252)) (26132 1044 571115 382000) 0 nil])
([nil nil ((#("        
" 0 8 (fontified t) 8 9 (fontified t)) . 185) (undo-tree-id4653 . -8) (undo-tree-id4654 . -8) (undo-tree-id4655 . -8) (undo-tree-id4656 . -8) (undo-tree-id4657 . -8) (undo-tree-id4658 . -8) (undo-tree-id4659 . -8) (undo-tree-id4660 . -8) (undo-tree-id4661 . -8) (undo-tree-id4662 . -8) (undo-tree-id4663 . -8) (undo-tree-id4664 . -8) (undo-tree-id4665 . -8) (undo-tree-id4666 . -8) (undo-tree-id4667 . -8) (undo-tree-id4668 . -8) (undo-tree-id4669 . -8) (undo-tree-id4670 . -8) (undo-tree-id4671 . -8) (undo-tree-id4672 . -8) (undo-tree-id4673 . -8) (undo-tree-id4674 . -8) (undo-tree-id4675 . -8) (undo-tree-id4676 . -8) (undo-tree-id4677 . -8) (undo-tree-id4678 . -8) (undo-tree-id4679 . -8) (undo-tree-id4680 . -8) (undo-tree-id4681 . -8) (undo-tree-id4682 . -8) (undo-tree-id4683 . -8) (undo-tree-id4684 . -8) (undo-tree-id4685 . -8) (undo-tree-id4686 . -8) (undo-tree-id4687 . -8) (undo-tree-id4688 . -8) (undo-tree-id4689 . -8) (undo-tree-id4690 . -8) (undo-tree-id4691 . -8) (undo-tree-id4692 . -8) (undo-tree-id4693 . -8) (undo-tree-id4694 . -8) (undo-tree-id4695 . -8) (undo-tree-id4696 . -8) (undo-tree-id4697 . -8) (undo-tree-id4698 . -8) (undo-tree-id4699 . -8) (undo-tree-id4700 . -8) (undo-tree-id4701 . -8) (undo-tree-id4702 . -8) (undo-tree-id4703 . -8) (undo-tree-id4704 . -8) (undo-tree-id4705 . 1) (undo-tree-id4706 . -8) (undo-tree-id4707 . -8) (undo-tree-id4708 . -8) (undo-tree-id4709 . -8) (undo-tree-id4710 . -8) (undo-tree-id4711 . -8) (undo-tree-id4712 . -8) (undo-tree-id4713 . -8) (undo-tree-id4714 . -8) (undo-tree-id4715 . -8) (undo-tree-id4716 . -8) (undo-tree-id4717 . -8) (undo-tree-id4718 . -8) (undo-tree-id4719 . -8) (undo-tree-id4720 . -8) (undo-tree-id4721 . 1) (undo-tree-id4722 . -8) (undo-tree-id4723 . -8) (undo-tree-id4724 . -8) (undo-tree-id4725 . -8) (undo-tree-id4726 . -8) (undo-tree-id4727 . -8) (undo-tree-id4728 . -8) (undo-tree-id4729 . -8) (undo-tree-id4730 . -8) (undo-tree-id4731 . -8) (undo-tree-id4732 . -8) (undo-tree-id4733 . -8) (undo-tree-id4734 . -8) (undo-tree-id4735 . -8) (undo-tree-id4736 . -8) (undo-tree-id4737 . -8) (undo-tree-id4738 . -8) (undo-tree-id4739 . -8) (undo-tree-id4740 . -8) (undo-tree-id4741 . -8) (undo-tree-id4742 . -8) (undo-tree-id4743 . -8) (undo-tree-id4744 . -8) (undo-tree-id4745 . -8) (undo-tree-id4746 . -8) (undo-tree-id4747 . -8) (undo-tree-id4748 . -8) (undo-tree-id4749 . -8) (undo-tree-id4750 . -8) (undo-tree-id4751 . -8) (undo-tree-id4752 . -8) (undo-tree-id4753 . -8) (undo-tree-id4754 . -8) (undo-tree-id4755 . -8) (undo-tree-id4756 . -9)) nil (26132 1072 154172 760000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 186) (undo-tree-id4426 . -1) (undo-tree-id4427 . -1) (undo-tree-id4428 . -1) (undo-tree-id4429 . -1)) ((186 . 187)) (26132 1044 242378 986000) 0 nil])
([nil nil ((#("        
" 0 8 (fontified t) 8 9 (fontified t)) . 185) (undo-tree-id4639 . 9) (undo-tree-id4640 . 9) (undo-tree-id4641 . -8) (undo-tree-id4642 . -8) (undo-tree-id4643 . -8) (undo-tree-id4644 . -8) (undo-tree-id4645 . -8) (undo-tree-id4646 . -8) (undo-tree-id4647 . -8) (undo-tree-id4648 . -8) (undo-tree-id4649 . -8) (undo-tree-id4650 . -8) (undo-tree-id4651 . -8) (undo-tree-id4652 . -9)) nil (26132 1072 153982 613000) 0 nil])
([nil nil ((#("        
" 0 8 (fontified t) 8 9 (fontified t)) . 186) (undo-tree-id4321 . -8) (undo-tree-id4322 . -8) (undo-tree-id4323 . -8) (undo-tree-id4324 . -8) (undo-tree-id4325 . -8) (undo-tree-id4326 . -8) (undo-tree-id4327 . -8) (undo-tree-id4328 . -8) (undo-tree-id4329 . -8) (undo-tree-id4330 . -8) (undo-tree-id4331 . -8) (undo-tree-id4332 . -8) (undo-tree-id4333 . -8) (undo-tree-id4334 . -8) (undo-tree-id4335 . -8) (undo-tree-id4336 . -8) (undo-tree-id4337 . -8) (undo-tree-id4338 . -8) (undo-tree-id4339 . -8) (undo-tree-id4340 . -8) (undo-tree-id4341 . -8) (undo-tree-id4342 . -8) (undo-tree-id4343 . -8) (undo-tree-id4344 . -8) (undo-tree-id4345 . -8) (undo-tree-id4346 . -8) (undo-tree-id4347 . -8) (undo-tree-id4348 . -8) (undo-tree-id4349 . -8) (undo-tree-id4350 . -8) (undo-tree-id4351 . -8) (undo-tree-id4352 . -8) (undo-tree-id4353 . -8) (undo-tree-id4354 . -8) (undo-tree-id4355 . -8) (undo-tree-id4356 . -8) (undo-tree-id4357 . -8) (undo-tree-id4358 . -8) (undo-tree-id4359 . -8) (undo-tree-id4360 . -8) (undo-tree-id4361 . -8) (undo-tree-id4362 . -8) (undo-tree-id4363 . -8) (undo-tree-id4364 . -8) (undo-tree-id4365 . -8) (undo-tree-id4366 . -8) (undo-tree-id4367 . -8) (undo-tree-id4368 . -8) (undo-tree-id4369 . -8) (undo-tree-id4370 . -8) (undo-tree-id4371 . -8) (undo-tree-id4372 . -8) (undo-tree-id4373 . -8) (undo-tree-id4374 . 1) (undo-tree-id4375 . -8) (undo-tree-id4376 . -8) (undo-tree-id4377 . -8) (undo-tree-id4378 . -8) (undo-tree-id4379 . -8) (undo-tree-id4380 . -8) (undo-tree-id4381 . -8) (undo-tree-id4382 . -8) (undo-tree-id4383 . -8) (undo-tree-id4384 . -8) (undo-tree-id4385 . -8) (undo-tree-id4386 . -8) (undo-tree-id4387 . -8) (undo-tree-id4388 . -8) (undo-tree-id4389 . -8) (undo-tree-id4390 . 1) (undo-tree-id4391 . -8) (undo-tree-id4392 . -8) (undo-tree-id4393 . -8) (undo-tree-id4394 . -8) (undo-tree-id4395 . -8) (undo-tree-id4396 . -8) (undo-tree-id4397 . -8) (undo-tree-id4398 . -8) (undo-tree-id4399 . -8) (undo-tree-id4400 . -8) (undo-tree-id4401 . -8) (undo-tree-id4402 . -8) (undo-tree-id4403 . -8) (undo-tree-id4404 . -8) (undo-tree-id4405 . -8) (undo-tree-id4406 . -8) (undo-tree-id4407 . -8) (undo-tree-id4408 . -8) (undo-tree-id4409 . -8) (undo-tree-id4410 . -8) (undo-tree-id4411 . -8) (undo-tree-id4412 . -8) (undo-tree-id4413 . -8) (undo-tree-id4414 . -8) (undo-tree-id4415 . -8) (undo-tree-id4416 . -8) (undo-tree-id4417 . -8) (undo-tree-id4418 . -8) (undo-tree-id4419 . -8) (undo-tree-id4420 . -8) (undo-tree-id4421 . -8) (undo-tree-id4422 . -8) (undo-tree-id4423 . -8) (undo-tree-id4424 . -8) (undo-tree-id4425 . -9)) ((186 . 195)) (26132 1043 856656 545000) 0 nil])
([nil nil ((#("    }).collect::<Vec<_>>();" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-1-face) fontified t) 5 6 (face (rainbow-delimiters-unmatched-face) fontified t) 6 7 (fontified t) 7 14 (fontified t) 14 16 (fontified t) 16 17 (face (rainbow-delimiters-unmatched-face) fontified t) 17 20 (face font-lock-type-face fontified t) 20 21 (face (rainbow-delimiters-depth-1-face) fontified t) 21 22 (fontified t) 22 23 (face (rainbow-delimiters-depth-1-face) fontified t) 23 24 (syntax-table (1) fontified t) 24 25 (face (rainbow-delimiters-depth-1-face) fontified t) 25 26 (face (rainbow-delimiters-depth-1-face) fontified t) 26 27 (fontified t)) . 185) (undo-tree-id4636 . 27) (undo-tree-id4637 . 27) (undo-tree-id4638 . -27)) nil (26132 1072 153968 161000) 0 nil])
([nil nil ((#("        
" 0 8 (fontified t) 8 9 (fontified t)) . 186) (undo-tree-id4307 . 9) (undo-tree-id4308 . 9) (undo-tree-id4309 . -8) (undo-tree-id4310 . -8) (undo-tree-id4311 . -8) (undo-tree-id4312 . -8) (undo-tree-id4313 . -8) (undo-tree-id4314 . -8) (undo-tree-id4315 . -8) (undo-tree-id4316 . -8) (undo-tree-id4317 . -8) (undo-tree-id4318 . -8) (undo-tree-id4319 . -8) (undo-tree-id4320 . -9)) ((186 . 195)) (26132 1043 674596 575000) 0 nil])
([nil nil ((185 . 198)) nil (26132 1072 153964 795000) 0 nil])
([nil nil ((#("    }).collect::<Vec<_>>();" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-1-face) fontified t) 5 6 (face (rainbow-delimiters-unmatched-face) fontified t) 6 7 (fontified t) 7 14 (fontified t) 14 16 (fontified t) 16 17 (face (rainbow-delimiters-unmatched-face) fontified t) 17 20 (face font-lock-type-face fontified t) 20 21 (face (rainbow-delimiters-depth-1-face) fontified t) 21 22 (fontified t) 22 23 (face (rainbow-delimiters-depth-1-face) fontified t) 23 24 (syntax-table (1) fontified t) 24 25 (face (rainbow-delimiters-depth-1-face) fontified t) 25 26 (face (rainbow-delimiters-depth-1-face) fontified t) 26 27 (fontified t)) . 186) (undo-tree-id4304 . 27) (undo-tree-id4305 . 27) (undo-tree-id4306 . -27)) ((186 . 213)) (26132 1043 494915 78000) 0 nil])
([nil nil ((197 . 204) (#("s" 0 1 (fontified nil)) . 197) (197 . 198) (#("sensors" 0 7 (fontified nil)) . -197) (197 . 204) (#("s" 0 1 (fontified t)) . -197) (undo-tree-id4631 . -1) (undo-tree-id4632 . -1) (undo-tree-id4633 . -1) (undo-tree-id4634 . -1) (undo-tree-id4635 . -1) 198) nil (26132 1072 153963 575000) 0 nil])
([nil nil ((186 . 190)) ((#("    " 0 4 (fontified t)) . 186) (undo-tree-id4583 . -4) (undo-tree-id4584 . -4) (undo-tree-id4585 . -4) (undo-tree-id4586 . -4) (undo-tree-id4587 . -4) (undo-tree-id4588 . -4) (undo-tree-id4589 . -4) (undo-tree-id4590 . -4) (undo-tree-id4591 . -4) (undo-tree-id4592 . -4) (undo-tree-id4593 . -4) (undo-tree-id4594 . -4) (t 26132 1042 687191 96000)) (26132 1042 672299 470000) 0 nil])
([nil nil ((204 . 207)) nil (26132 1072 153958 366000) 0 nil])
nil
([nil nil ((208 . 212) (#("        " 0 8 (fontified nil)) . 207) (207 . 215) (#("    " 0 4 (fontified nil)) . 207) (undo-tree-id4627 . -4) (undo-tree-id4628 . -4) (undo-tree-id4629 . -4) (undo-tree-id4630 . -4) (206 . 212)) nil (26132 1072 153957 169000) 0 nil])
([nil nil ((207 . 215)) nil (26132 1072 153952 396000) 0 nil])
([nil nil ((#("let chip = chip.get(0).unwrap();" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 8 (face font-lock-variable-name-face fontified t) 8 11 (fontified t) 11 16 (fontified t) 16 19 (fontified t) 19 20 (face (rainbow-delimiters-depth-2-face) fontified t) 20 21 (fontified t) 21 22 (face (rainbow-delimiters-depth-2-face) fontified t) 22 23 (fontified t) 23 29 (fontified t) 29 30 (face (rainbow-delimiters-depth-2-face) fontified t) 30 31 (face (rainbow-delimiters-depth-2-face) fontified t) 31 32 (fontified t)) . 226) (undo-tree-id4625 . -4) (undo-tree-id4626 . -32)) nil (26132 1072 153949 72000) 0 nil])
([nil nil ((195 . 196) (231 . 232) (185 . 185) (185 . 195) (t 26132 1072 170526 239000)) nil (26132 1092 757859 165000) 0 nil])
([nil nil ((226 . 227) (t 26132 1092 803860 839000)) nil (26132 1120 421854 353000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -226) (undo-tree-id4952 . -1) (undo-tree-id4953 . -1) (undo-tree-id4954 . -1) (undo-tree-id4955 . -1) (undo-tree-id4956 . -1) 227) nil (26132 1120 421853 527000) 0 nil])
([nil nil ((226 . 230)) nil (26132 1120 421850 409000) 0 nil])
([nil nil ((apply yas--snippet-revive 226 233 #s(yas--snippet nil nil #s(yas--exit 232 nil) 33 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 232 nil) 33 nil nil nil nil)) (226 . 233) (#("info!($0)" 0 9 (fontified nil)) . 226) (226 . 235) (#("info" 0 4 (fontified nil)) . 226) (226 . 230) (#("info!(…)" 0 8 (fontified nil)) . -226) (226 . 234) (#("info" 0 4 (fontified t)) . -226) (undo-tree-id4938 . -4) (undo-tree-id4939 . -1) (undo-tree-id4940 . -1) (undo-tree-id4941 . -2) (undo-tree-id4942 . -2) (undo-tree-id4943 . -2) (undo-tree-id4944 . -2) (undo-tree-id4945 . -3) (undo-tree-id4946 . -3) (undo-tree-id4947 . -3) (undo-tree-id4948 . -4) (undo-tree-id4949 . -4) (undo-tree-id4950 . -4) (undo-tree-id4951 . -4) 230) nil (26132 1120 421848 890000) 0 nil])
([nil nil ((219 . 227) (#("        " 0 8 (fontified nil)) . 218) (undo-tree-id4895 . -8) (undo-tree-id4896 . -8) (undo-tree-id4897 . -8) (undo-tree-id4898 . -8) (undo-tree-id4899 . -8) (undo-tree-id4900 . -8) (undo-tree-id4901 . -8) (undo-tree-id4902 . -8) (undo-tree-id4903 . -8) (undo-tree-id4904 . -8) (undo-tree-id4905 . -8) (undo-tree-id4906 . -8) (undo-tree-id4907 . -8) (undo-tree-id4908 . -8) (undo-tree-id4909 . -8) (undo-tree-id4910 . -8) (undo-tree-id4911 . -8) (undo-tree-id4912 . -8) (undo-tree-id4913 . -8) (undo-tree-id4914 . -8) (undo-tree-id4915 . -8) (undo-tree-id4916 . -8) (undo-tree-id4917 . -8) (undo-tree-id4918 . -8) (undo-tree-id4919 . -8) (undo-tree-id4920 . -8) (undo-tree-id4921 . -8) (undo-tree-id4922 . -8) (undo-tree-id4923 . -8) (undo-tree-id4924 . -8) (undo-tree-id4925 . -8) (undo-tree-id4926 . -8) (undo-tree-id4927 . -8) (undo-tree-id4928 . -8) (undo-tree-id4929 . -8) (undo-tree-id4930 . -8) (undo-tree-id4931 . -8) (undo-tree-id4932 . -8) (undo-tree-id4933 . -8) (undo-tree-id4934 . -8) (undo-tree-id4935 . -8) (undo-tree-id4936 . -8) (undo-tree-id4937 . -8) (226 . 227)) nil (26132 1120 421837 727000) 0 nil])
([nil nil ((218 . 226)) nil (26132 1120 421811 628000) 0 nil])
([nil nil ((226 . 228)) nil (26132 1120 421811 35000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -226) (undo-tree-id4885 . -1) (undo-tree-id4886 . -1) (undo-tree-id4887 . -1) (undo-tree-id4888 . -1) (undo-tree-id4889 . -1) (undo-tree-id4890 . -1) (undo-tree-id4891 . -1) (#("l" 0 1 (fontified t)) . -227) (undo-tree-id4892 . -1) (undo-tree-id4893 . -1) (undo-tree-id4894 . -1) 228) nil (26132 1120 421809 934000) 0 nil])
([nil nil ((226 . 229)) nil (26132 1120 421803 277000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -226) (undo-tree-id4863 . -1) (undo-tree-id4864 . -1) (undo-tree-id4865 . -1) (undo-tree-id4866 . -1) (undo-tree-id4867 . -1) (undo-tree-id4868 . -1) (undo-tree-id4869 . -1) (undo-tree-id4870 . -1) (undo-tree-id4871 . -1) (undo-tree-id4872 . -1) (undo-tree-id4873 . -1) (undo-tree-id4874 . -1) (#("e" 0 1 (fontified t)) . -227) (undo-tree-id4875 . -1) (undo-tree-id4876 . -1) (undo-tree-id4877 . -1) (undo-tree-id4878 . -1) (undo-tree-id4879 . -1) (undo-tree-id4880 . -1) (undo-tree-id4881 . -1) (#("t" 0 1 (fontified t)) . -228) (undo-tree-id4882 . -1) (undo-tree-id4883 . -1) (undo-tree-id4884 . -1) 229) nil (26132 1120 421801 582000) 0 nil])
([nil nil ((226 . 238)) nil (26132 1120 421787 255000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -236) (undo-tree-id4854 . -1) (undo-tree-id4855 . -1) (undo-tree-id4856 . -1) (undo-tree-id4857 . -1) (undo-tree-id4858 . -1) (undo-tree-id4859 . -1) (#(" " 0 1 (fontified t)) . -237) (undo-tree-id4860 . -1) (undo-tree-id4861 . -1) (undo-tree-id4862 . -1) 238) nil (26132 1120 421786 257000) 0 nil])
([nil nil ((236 . 238)) nil (26132 1120 421780 336000) 0 nil])
([nil nil ((237 . 241) (#("c" 0 1 (fontified nil)) . 237) (237 . 238) (#("chip" 0 4 (fontified nil)) . -237) (237 . 241) (#("c" 0 1 (fontified t)) . -237) (undo-tree-id4851 . -1) (undo-tree-id4852 . -1) (undo-tree-id4853 . -1) 238) nil (26132 1120 421779 446000) 0 nil])
([nil nil ((241 . 243)) nil (26132 1120 421776 468000) 0 nil])
([nil nil ((apply yas--snippet-revive 242 252 #s(yas--snippet nil nil #s(yas--exit 252 nil) 34 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 252 nil) 34 nil nil nil nil)) (242 . 252) (#("get_name()$0" 0 12 (fontified nil)) . 242) (242 . 254) (#("g" 0 1 (fontified nil)) . 242) (242 . 243) (#("get_name()" 0 10 (fontified nil)) . -242) (242 . 252) (#("g" 0 1 (fontified t)) . -242) (undo-tree-id4848 . -1) (undo-tree-id4849 . -1) (undo-tree-id4850 . -1) 243) nil (26132 1120 421775 393000) 0 nil])
([nil nil ((252 . 254)) nil (26132 1120 421772 72000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 263 269 nil nil nil t #s(yas--exit 270 nil))) #s(yas--exit 270 nil) 35 nil #s(yas--field 1 263 269 nil nil nil t #s(yas--exit 270 nil)) nil nil)) (253 . 271) (#("unwrap_or(${1:default})$0" 0 25 (fontified nil)) . 253) (253 . 278) (#("u" 0 1 (fontified nil)) . 253) (253 . 254) (#("unwrap_or(…)" 0 12 (fontified nil)) . -253) (253 . 265) (#("u" 0 1 (fontified t)) . -253) (undo-tree-id4842 . -1) (undo-tree-id4843 . -1) (undo-tree-id4844 . -1) (undo-tree-id4845 . -1) (undo-tree-id4846 . -1) (undo-tree-id4847 . -1) 254) nil (26132 1120 421770 503000) 0 nil])
([nil nil ((264 . 265) (#("default" 0 7 (fontified nil)) . 264) (undo-tree-id4841 . -7) (263 . 264)) nil (26132 1120 421764 311000) 0 nil])
([nil nil ((264 . 268)) nil (26132 1120 421757 842000) 0 nil])
([nil nil ((apply yas--snippet-revive 253 270 #s(yas--snippet nil (#s(yas--field 1 263 269 nil nil nil t #s(yas--exit 270 nil))) #s(yas--exit 270 nil) 35 nil #s(yas--field 1 263 269 nil nil nil t #s(yas--exit 270 nil)) nil nil))) nil (26132 1120 421756 796000) 0 nil])
([nil nil ((270 . 271)) nil (26132 1120 421753 225000) 0 nil])
([nil nil ((269 . 272) (t 26132 1120 437195 868000)) nil (26132 1127 426608 408000) 0 nil])
([nil nil ((apply yas--snippet-revive 270 281 #s(yas--snippet nil nil #s(yas--exit 281 nil) 36 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 281 nil) 36 nil nil nil nil)) (270 . 281) (#("to_string()$0" 0 13 (fontified nil)) . 270) (270 . 283) (#("to" 0 2 (fontified nil)) . 270) (270 . 272) (#("to_string() (as ToString)" 0 25 (fontified nil)) . -270) (270 . 295) (#("to" 0 2 (fontified t)) . -270) (undo-tree-id4957 . -2) (undo-tree-id4958 . -2) (undo-tree-id4959 . -1) (undo-tree-id4960 . -1) (undo-tree-id4961 . -1) (undo-tree-id4962 . -2) (undo-tree-id4963 . -2) (undo-tree-id4964 . -2) (undo-tree-id4965 . -2) (undo-tree-id4966 . -2) (undo-tree-id4967 . -2) (undo-tree-id4968 . -2) (undo-tree-id4969 . -2) (undo-tree-id4970 . -2) 272) nil (26132 1127 426603 774000) 0 nil])
([nil nil ((298 . 300) (t 26132 1127 473862 967000)) nil (26132 1143 540072 562000) 0 nil])
([nil nil ((299 . 301)) nil (26132 1143 540071 823000) 0 nil])
([nil nil ((300 . 302)) nil (26132 1143 540071 129000) 0 nil])
([nil nil ((302 . 304)) nil (26132 1143 540070 392000) 0 nil])
([nil nil ((#("n" 0 1 (face font-lock-string-face fontified t)) . -300) (undo-tree-id4971 . -1) (undo-tree-id4972 . -1) (undo-tree-id4973 . -1) (undo-tree-id4974 . -1) (undo-tree-id4975 . -1) (undo-tree-id4976 . -1) (undo-tree-id4977 . -1) (undo-tree-id4978 . -1) (undo-tree-id4979 . -1) (undo-tree-id4980 . -1) (undo-tree-id4981 . -1) (undo-tree-id4982 . -1) (undo-tree-id4983 . -1) (undo-tree-id4984 . -1) (undo-tree-id4985 . -1) (undo-tree-id4986 . -1) (undo-tree-id4987 . -1) (undo-tree-id4988 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -301) (undo-tree-id4989 . -1) (undo-tree-id4990 . -1) (undo-tree-id4991 . -1) (undo-tree-id4992 . -1) (undo-tree-id4993 . -1) (undo-tree-id4994 . -1) (undo-tree-id4995 . -1) (undo-tree-id4996 . -1) (undo-tree-id4997 . -1) (undo-tree-id4998 . -1) (undo-tree-id4999 . -1) (undo-tree-id5000 . -1) (undo-tree-id5001 . -1) (undo-tree-id5002 . -1) (#("m" 0 1 (face font-lock-string-face fontified t)) . -302) (undo-tree-id5003 . -1) (undo-tree-id5004 . -1) (undo-tree-id5005 . -1) (undo-tree-id5006 . -1) (undo-tree-id5007 . -1) (undo-tree-id5008 . -1) (undo-tree-id5009 . -1) (undo-tree-id5010 . -1) (undo-tree-id5011 . -1) (undo-tree-id5012 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -303) (undo-tree-id5013 . -1) (undo-tree-id5014 . -1) (undo-tree-id5015 . -1) (undo-tree-id5016 . -1) (undo-tree-id5017 . -1) (undo-tree-id5018 . -1) 304) nil (26132 1143 540067 273000) 0 nil])
([nil nil ((299 . 310)) nil (26132 1143 540031 460000) 0 nil])
([nil nil ((313 . 319)) nil (26132 1143 540030 342000) 0 nil])
([nil nil ((320 . 321)) nil (26132 1143 540026 587000) 0 nil])
([nil nil ((321 . 330) (t 26132 1143 557197 288000)) nil (26132 1271 309154 247000) 0 nil])
([nil nil ((#("for chip in sensors {" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 8 (face font-lock-variable-name-face fontified t) 8 9 (fontified t) 9 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 20 (fontified t) 20 21 (face (rainbow-delimiters-depth-2-face) fontified t)) . 196) (undo-tree-id5338 . -3) (undo-tree-id5339 . -21)) nil (26132 1271 309153 462000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 196) (undo-tree-id5337 . -1)) nil (26132 1271 309151 556000) 0 nil])
([nil nil ((#("        let name = chip.get_name().unwrap_or(\"None\".to_string());" 0 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 16 (face font-lock-variable-name-face fontified t) 16 19 (fontified t) 19 24 (fontified t) 24 32 (fontified t) 32 33 (face (rainbow-delimiters-depth-2-face) fontified t) 33 34 (face (rainbow-delimiters-depth-2-face) fontified t) 34 35 (fontified t) 35 44 (fontified t) 44 45 (face (rainbow-delimiters-depth-2-face) fontified t) 45 51 (face font-lock-string-face fontified t) 51 52 (fontified t) 52 61 (fontified t) 61 62 (face (rainbow-delimiters-depth-3-face) fontified t) 62 63 (face (rainbow-delimiters-depth-3-face) fontified t) 63 64 (face (rainbow-delimiters-depth-2-face) fontified t) 64 65 (fontified t)) . 196) (undo-tree-id5335 . -45) (undo-tree-id5336 . -65)) nil (26132 1271 309145 219000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 196) (undo-tree-id5334 . -1)) nil (26132 1271 309142 985000) 0 nil])
([nil nil ((#("        info!(\"Chip Name: {}\", name);" 0 8 (fontified t) 8 13 (face font-lock-preprocessor-face fontified t) 13 14 (face (rainbow-delimiters-depth-2-face) fontified t) 14 29 (face font-lock-string-face fontified t) 29 35 (fontified t) 35 36 (face (rainbow-delimiters-depth-2-face) fontified t) 36 37 (fontified t)) . 196) (undo-tree-id5298 . -27) (undo-tree-id5299 . -27) (undo-tree-id5300 . -27) (undo-tree-id5301 . -27) (undo-tree-id5302 . -27) (undo-tree-id5303 . -27) (undo-tree-id5304 . -27) (undo-tree-id5305 . -27) (undo-tree-id5306 . -27) (undo-tree-id5307 . -27) (undo-tree-id5308 . -27) (undo-tree-id5309 . -27) (undo-tree-id5310 . -27) (undo-tree-id5311 . -27) (undo-tree-id5312 . -27) (undo-tree-id5313 . -27) (undo-tree-id5314 . -27) (undo-tree-id5315 . 2) (undo-tree-id5316 . -37) (undo-tree-id5317 . -37) (undo-tree-id5318 . -37) (undo-tree-id5319 . -37) (undo-tree-id5320 . -37) (undo-tree-id5321 . -37) (undo-tree-id5322 . -37) (undo-tree-id5323 . -37) (undo-tree-id5324 . -37) (undo-tree-id5325 . -37) (undo-tree-id5326 . -37) (undo-tree-id5327 . -37) (undo-tree-id5328 . -37) (undo-tree-id5329 . -37) (undo-tree-id5330 . -37) (undo-tree-id5331 . -37) (undo-tree-id5332 . -37) (undo-tree-id5333 . -37)) nil (26132 1271 309140 490000) 0 nil])
([nil nil ((196 . 197)) nil (26132 1271 309117 682000) 0 nil])
([nil nil ((196 . 203) (#("s" 0 1 (fontified nil)) . 196) (196 . 197) (#("sensors" 0 7 (fontified nil)) . -196) (196 . 203) (#("s" 0 1 (fontified t)) . -196) (undo-tree-id5287 . -1) (undo-tree-id5288 . -1) (undo-tree-id5289 . -1) (undo-tree-id5290 . -1) (undo-tree-id5291 . -1) (undo-tree-id5292 . -1) (undo-tree-id5293 . -1) (undo-tree-id5294 . -1) (undo-tree-id5295 . -1) (undo-tree-id5296 . -1) (undo-tree-id5297 . -1) 197) nil (26132 1271 309116 213000) 0 nil])
([nil nil ((203 . 206)) nil (26132 1271 308939 858000) 0 nil])
([nil nil ((apply yas--snippet-revive 204 215 #s(yas--snippet nil nil #s(yas--exit 215 nil) 37 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 215 nil) 37 nil nil nil nil)) (204 . 215) (#("into_iter()$0" 0 13 (fontified nil)) . 204) (204 . 217) (#("in" 0 2 (fontified nil)) . 204) (204 . 206) (#("into_iter() (as IntoIterator)" 0 29 (fontified nil)) . -204) (204 . 233) (#("in" 0 2 (face font-lock-keyword-face fontified t)) . -204) (undo-tree-id5278 . -2) (undo-tree-id5279 . -1) (undo-tree-id5280 . -1) (undo-tree-id5281 . -1) (undo-tree-id5282 . -2) (undo-tree-id5283 . -2) (undo-tree-id5284 . -2) (undo-tree-id5285 . -2) (undo-tree-id5286 . -2) 206) nil (26132 1271 308938 522000) 0 nil])
([nil nil ((215 . 217)) nil (26132 1271 308931 586000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 220 222 nil nil nil t #s(yas--exit 223 nil))) #s(yas--exit 223 nil) 38 nil #s(yas--field 1 220 222 nil nil nil t #s(yas--exit 223 nil)) nil nil)) (216 . 222) (#("map(${1:f})$0" 0 13 (fontified nil)) . 216) (216 . 229) (#("m" 0 1 (fontified nil)) . 216) (216 . 217) (#("map(…) (as Iterator)" 0 20 (fontified nil)) . -216) (216 . 236) (#("m" 0 1 (fontified t)) . -216) (undo-tree-id5272 . -1) (undo-tree-id5273 . -1) (undo-tree-id5274 . -1) (undo-tree-id5275 . -1) (undo-tree-id5276 . -1) (undo-tree-id5277 . -1) 217) nil (26132 1271 308930 483000) 0 nil])
([nil nil ((221 . 222) (#("f" 0 1 (fontified nil)) . 221) (undo-tree-id5271 . -1) (220 . 221)) nil (26132 1271 308924 968000) 0 nil])
([nil nil ((apply yas--snippet-revive 216 223 #s(yas--snippet nil (#s(yas--field 1 220 222 nil nil nil t #s(yas--exit 223 nil))) #s(yas--exit 223 nil) 38 nil #s(yas--field 1 220 222 nil nil nil t #s(yas--exit 223 nil)) nil nil))) nil (26132 1271 308923 632000) 0 nil])
([nil nil ((221 . 222)) nil (26132 1271 308923 182000) 0 nil])
([nil nil ((223 . 225)) nil (26132 1271 308922 670000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -224) (undo-tree-id5264 . -1) (undo-tree-id5265 . -1) (undo-tree-id5266 . -1) (undo-tree-id5267 . -1) (undo-tree-id5268 . -1) (undo-tree-id5269 . -1) (undo-tree-id5270 . -1) 225) nil (26132 1271 308921 714000) 0 nil])
([nil nil ((224 . 225)) nil (26132 1271 308916 622000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -224) (undo-tree-id5258 . -1) (undo-tree-id5259 . -1) (undo-tree-id5260 . -1) (undo-tree-id5261 . -1) (undo-tree-id5262 . -1) (undo-tree-id5263 . -1) 225) nil (26132 1271 308915 774000) 0 nil])
([nil nil ((224 . 228)) nil (26132 1271 308911 258000) 0 nil])
([nil nil ((#("info" 0 4 (fontified t)) . -224) (undo-tree-id5241 . -4) (undo-tree-id5242 . -4) (undo-tree-id5243 . -1) (undo-tree-id5244 . -1) (undo-tree-id5245 . -1) (undo-tree-id5246 . -2) (undo-tree-id5247 . -2) (undo-tree-id5248 . -3) (undo-tree-id5249 . -3) (undo-tree-id5250 . -4) (undo-tree-id5251 . -4) (undo-tree-id5252 . -4) (undo-tree-id5253 . -4) (undo-tree-id5254 . -4) (undo-tree-id5255 . -4) (undo-tree-id5256 . -4) (undo-tree-id5257 . -4) 228) nil (26132 1271 308910 2000) 0 nil])
([nil nil ((#("x| )" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-2-face) fontified t)) . -221) (undo-tree-id5158 . -3) (undo-tree-id5159 . -4) (undo-tree-id5160 . -4) (undo-tree-id5161 . -4) (undo-tree-id5162 . -2) (undo-tree-id5163 . -2) (undo-tree-id5164 . -4) (undo-tree-id5165 . -2) (undo-tree-id5166 . -1) (undo-tree-id5167 . -1) (undo-tree-id5168 . -1) (undo-tree-id5169 . -2) (undo-tree-id5170 . -2) (undo-tree-id5171 . -2) (undo-tree-id5172 . -2) (undo-tree-id5173 . -2) (undo-tree-id5174 . -2) (undo-tree-id5175 . -2) (undo-tree-id5176 . -2) (undo-tree-id5177 . -2) (undo-tree-id5178 . -2) (undo-tree-id5179 . -3) (undo-tree-id5180 . -3) (undo-tree-id5181 . -3) (undo-tree-id5182 . -3) (undo-tree-id5183 . -3) (undo-tree-id5184 . -3) (undo-tree-id5185 . -3) (undo-tree-id5186 . -3) (undo-tree-id5187 . -3) (undo-tree-id5188 . -3) (undo-tree-id5189 . -3) (undo-tree-id5190 . -3) (undo-tree-id5191 . -3) (undo-tree-id5192 . -3) (undo-tree-id5193 . -3) (undo-tree-id5194 . -3) (undo-tree-id5195 . -3) (undo-tree-id5196 . -3) (undo-tree-id5197 . -3) (undo-tree-id5198 . -3) (undo-tree-id5199 . -3) (undo-tree-id5200 . -3) (undo-tree-id5201 . -3) (undo-tree-id5202 . -3) (undo-tree-id5203 . -3) (undo-tree-id5204 . -3) (undo-tree-id5205 . -3) (undo-tree-id5206 . -3) (undo-tree-id5207 . -3) (undo-tree-id5208 . -3) (undo-tree-id5209 . -3) (undo-tree-id5210 . -3) (undo-tree-id5211 . -3) (undo-tree-id5212 . -3) (undo-tree-id5213 . -3) (undo-tree-id5214 . -3) (undo-tree-id5215 . -3) (undo-tree-id5216 . -3) (undo-tree-id5217 . -3) (undo-tree-id5218 . -3) (undo-tree-id5219 . -3) (undo-tree-id5220 . 1) (undo-tree-id5221 . -3) (undo-tree-id5222 . -3) (undo-tree-id5223 . -3) (undo-tree-id5224 . -3) (undo-tree-id5225 . -3) (undo-tree-id5226 . -3) (undo-tree-id5227 . -3) (undo-tree-id5228 . -3) (undo-tree-id5229 . -3) (undo-tree-id5230 . -3) (undo-tree-id5231 . -3) (undo-tree-id5232 . -3) (undo-tree-id5233 . -3) (undo-tree-id5234 . -3) (undo-tree-id5235 . -3) (undo-tree-id5236 . -4) (undo-tree-id5237 . -4) (undo-tree-id5238 . -4) (undo-tree-id5239 . -4) (undo-tree-id5240 . -4) 225) nil (26132 1271 308896 943000) 0 nil])
([nil nil ((#("map(|" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-2-face) fontified t) 4 5 (fontified t)) . -216) (undo-tree-id5056 . -5) (undo-tree-id5057 . -5) (undo-tree-id5058 . -5) (undo-tree-id5059 . -5) (undo-tree-id5060 . -4) (undo-tree-id5061 . -4) (undo-tree-id5062 . -4) (undo-tree-id5063 . -4) (undo-tree-id5064 . -4) (undo-tree-id5065 . -4) (undo-tree-id5066 . -4) (undo-tree-id5067 . -4) (undo-tree-id5068 . -4) (undo-tree-id5069 . -4) (undo-tree-id5070 . -4) (undo-tree-id5071 . -4) (undo-tree-id5072 . -4) (undo-tree-id5073 . -4) (undo-tree-id5074 . -4) (undo-tree-id5075 . -5) (undo-tree-id5076 . -5) (undo-tree-id5077 . -5) (undo-tree-id5078 . -5) (undo-tree-id5079 . -5) (undo-tree-id5080 . -5) (undo-tree-id5081 . -5) (undo-tree-id5082 . -5) (undo-tree-id5083 . -5) (undo-tree-id5084 . -5) (undo-tree-id5085 . -5) (undo-tree-id5086 . -5) (undo-tree-id5087 . -5) (undo-tree-id5088 . -5) (undo-tree-id5089 . -5) (undo-tree-id5090 . -5) (undo-tree-id5091 . -5) (undo-tree-id5092 . -5) (undo-tree-id5093 . -5) (undo-tree-id5094 . -5) (undo-tree-id5095 . -5) (undo-tree-id5096 . -5) (undo-tree-id5097 . -5) (undo-tree-id5098 . -5) (undo-tree-id5099 . -5) (undo-tree-id5100 . -5) (undo-tree-id5101 . -5) (undo-tree-id5102 . -5) (undo-tree-id5103 . -5) (undo-tree-id5104 . -5) (undo-tree-id5105 . -5) (undo-tree-id5106 . -5) (undo-tree-id5107 . -5) (undo-tree-id5108 . -5) (undo-tree-id5109 . -5) (undo-tree-id5110 . -5) (undo-tree-id5111 . -5) (undo-tree-id5112 . -5) (undo-tree-id5113 . -5) (undo-tree-id5114 . -5) (undo-tree-id5115 . -5) (undo-tree-id5116 . -5) (undo-tree-id5117 . -5) (undo-tree-id5118 . -5) (undo-tree-id5119 . -5) (undo-tree-id5120 . -5) (undo-tree-id5121 . -5) (undo-tree-id5122 . -5) (undo-tree-id5123 . -5) (undo-tree-id5124 . -5) (undo-tree-id5125 . -5) (undo-tree-id5126 . -5) (undo-tree-id5127 . -5) (undo-tree-id5128 . -5) (undo-tree-id5129 . -5) (undo-tree-id5130 . -5) (undo-tree-id5131 . -5) (undo-tree-id5132 . -5) (undo-tree-id5133 . -5) (undo-tree-id5134 . -5) (undo-tree-id5135 . -5) (undo-tree-id5136 . -5) (undo-tree-id5137 . -5) (undo-tree-id5138 . -5) (undo-tree-id5139 . -5) (undo-tree-id5140 . -5) (undo-tree-id5141 . -5) (undo-tree-id5142 . -5) (undo-tree-id5143 . -5) (undo-tree-id5144 . -5) (undo-tree-id5145 . -5) (undo-tree-id5146 . -5) (undo-tree-id5147 . -5) (undo-tree-id5148 . -5) (undo-tree-id5149 . -5) (undo-tree-id5150 . -5) (undo-tree-id5151 . -5) (undo-tree-id5152 . -5) (undo-tree-id5153 . -5) (undo-tree-id5154 . -5) (undo-tree-id5155 . -5) (undo-tree-id5156 . -5) (undo-tree-id5157 . -5) 221) nil (26132 1271 308819 767000) 0 nil])
([nil nil ((180 . 185)) nil (26132 1271 308755 159000) 0 nil])
([nil nil ((185 . 187)) nil (26132 1271 308754 579000) 0 nil])
([nil nil ((185 . 192) (#("se" 0 2 (fontified nil)) . 185) (185 . 187) (#("sensors" 0 7 (fontified nil)) . -185) (185 . 192) (#("se" 0 2 (fontified t)) . -185) (undo-tree-id5049 . -2) (undo-tree-id5050 . -1) (undo-tree-id5051 . -1) (undo-tree-id5052 . -1) (undo-tree-id5053 . -2) (undo-tree-id5054 . -2) (undo-tree-id5055 . -2) 187) nil (26132 1271 308752 981000) 0 nil])
([nil nil ((192 . 195)) nil (26132 1271 308746 701000) 0 nil])
([nil nil ((#("sensors.in" 0 8 (fontified t) 8 10 (face font-lock-keyword-face fontified t)) . 185) (undo-tree-id5032 . -7) (undo-tree-id5033 . -7) (undo-tree-id5034 . -7) (undo-tree-id5035 . -8) (undo-tree-id5036 . -8) (undo-tree-id5037 . -8) (undo-tree-id5038 . -8) (undo-tree-id5039 . -8) (undo-tree-id5040 . -9) (undo-tree-id5041 . -9) (undo-tree-id5042 . -9) (undo-tree-id5043 . -10) (undo-tree-id5044 . -10) (undo-tree-id5045 . -10) (undo-tree-id5046 . -10) (undo-tree-id5047 . -10) (undo-tree-id5048 . -10)) nil (26132 1271 308744 790000) 0 nil])
([nil nil ((179 . 182)) nil (26132 1271 308429 114000) 0 nil])
([nil nil ((apply yas--snippet-revive 180 191 #s(yas--snippet nil nil #s(yas--exit 191 nil) 39 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 191 nil) 39 nil nil nil nil)) (180 . 191) (#("into_iter()$0" 0 13 (fontified nil)) . 180) (180 . 193) (#("in" 0 2 (fontified nil)) . 180) (180 . 182) (#("into_iter() (as IntoIterator)" 0 29 (fontified nil)) . -180) (180 . 209) (#("in" 0 2 (face font-lock-keyword-face fontified t)) . -180) (undo-tree-id5019 . -2) (undo-tree-id5020 . -2) (undo-tree-id5021 . -1) (undo-tree-id5022 . -1) (undo-tree-id5023 . -2) (undo-tree-id5024 . -2) (undo-tree-id5025 . -2) (undo-tree-id5026 . -2) (undo-tree-id5027 . -2) (undo-tree-id5028 . -2) (undo-tree-id5029 . -2) (undo-tree-id5030 . -2) (undo-tree-id5031 . -2) 182) nil (26132 1271 308424 721000) 0 nil])
([nil nil ((#("iter()." 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-2-face) fontified t) 5 6 (face (rainbow-delimiters-depth-2-face) fontified t) 6 7 (fontified t)) . -226) (undo-tree-id5654 . -7) (undo-tree-id5655 . -7) (undo-tree-id5656 . -7) (undo-tree-id5657 . -7) (undo-tree-id5658 . -7) (undo-tree-id5659 . -7) (undo-tree-id5660 . -7) (undo-tree-id5661 . -7) (undo-tree-id5662 . -7) (undo-tree-id5663 . -7) (undo-tree-id5664 . -7) (undo-tree-id5665 . -7) (undo-tree-id5666 . -7) (undo-tree-id5667 . -7) (undo-tree-id5668 . -7) (undo-tree-id5669 . -7) (undo-tree-id5670 . -7) (undo-tree-id5671 . -7) (undo-tree-id5672 . -7) (undo-tree-id5673 . -7) (undo-tree-id5674 . -7) (undo-tree-id5675 . -7) (undo-tree-id5676 . -7) (undo-tree-id5677 . -7) (undo-tree-id5678 . -7) (undo-tree-id5679 . -7) (undo-tree-id5680 . -7) (undo-tree-id5681 . -7) (undo-tree-id5682 . -7) (undo-tree-id5683 . -7) (undo-tree-id5684 . -7) (undo-tree-id5685 . -7) (undo-tree-id5686 . -7) (undo-tree-id5687 . -7) (undo-tree-id5688 . -7) (undo-tree-id5689 . -7) (undo-tree-id5690 . -7) (undo-tree-id5691 . -7) (undo-tree-id5692 . -7) (undo-tree-id5693 . -7) (undo-tree-id5694 . -7) (undo-tree-id5695 . -7) (undo-tree-id5696 . -7) (undo-tree-id5697 . -7) (undo-tree-id5698 . -7) (undo-tree-id5699 . -7) (undo-tree-id5700 . -7) (undo-tree-id5701 . -7) (undo-tree-id5702 . -7) (undo-tree-id5703 . -7) (undo-tree-id5704 . -7) (undo-tree-id5705 . -7) (undo-tree-id5706 . -7) (undo-tree-id5707 . -7) (undo-tree-id5708 . -7) (undo-tree-id5709 . -7) (undo-tree-id5710 . -7) (undo-tree-id5711 . -7) (undo-tree-id5712 . -7) (undo-tree-id5713 . -7) (undo-tree-id5714 . -7) (undo-tree-id5715 . -7) (undo-tree-id5716 . -7) (undo-tree-id5717 . -7) (undo-tree-id5718 . -7) (undo-tree-id5719 . -7) (undo-tree-id5720 . -7) (undo-tree-id5721 . -7) (undo-tree-id5722 . -7) (undo-tree-id5723 . -7) (undo-tree-id5724 . -7) (undo-tree-id5725 . -7) (undo-tree-id5726 . -7) (undo-tree-id5727 . -7) (undo-tree-id5728 . -7) (undo-tree-id5729 . -7) (undo-tree-id5730 . -7) (undo-tree-id5731 . -7) (undo-tree-id5732 . -7) (undo-tree-id5733 . -7) (undo-tree-id5734 . -7) (undo-tree-id5735 . -7) (undo-tree-id5736 . -7) (undo-tree-id5737 . -7) (undo-tree-id5738 . -7) (undo-tree-id5739 . -7) (undo-tree-id5740 . -7) (undo-tree-id5741 . -7) (undo-tree-id5742 . -7) (undo-tree-id5743 . -7) (undo-tree-id5744 . -7) (undo-tree-id5745 . -7) (undo-tree-id5746 . -7) (undo-tree-id5747 . -7) (undo-tree-id5748 . -7) (undo-tree-id5749 . -7) (undo-tree-id5750 . -7) (undo-tree-id5751 . -7) (undo-tree-id5752 . -7) (undo-tree-id5753 . -7) (undo-tree-id5754 . -7) (undo-tree-id5755 . -7) (undo-tree-id5756 . -7) (undo-tree-id5757 . -7) (undo-tree-id5758 . -7) (undo-tree-id5759 . -7) (undo-tree-id5760 . -7) (undo-tree-id5761 . -7) (undo-tree-id5762 . -7) (undo-tree-id5763 . -7) (undo-tree-id5764 . -7) 233 (t 26132 1271 313871 797000)) nil (26132 1315 551821 692000) 0 nil])
([nil nil ((#("into_" 0 5 (fontified t)) . -221) (undo-tree-id5541 . -5) (undo-tree-id5542 . -5) (undo-tree-id5543 . -5) (undo-tree-id5544 . -5) (undo-tree-id5545 . -5) (undo-tree-id5546 . -5) (undo-tree-id5547 . -5) (undo-tree-id5548 . -5) (undo-tree-id5549 . -5) (undo-tree-id5550 . -5) (undo-tree-id5551 . -5) (undo-tree-id5552 . -5) (undo-tree-id5553 . -5) (undo-tree-id5554 . -5) (undo-tree-id5555 . -5) (undo-tree-id5556 . -5) (undo-tree-id5557 . -5) (undo-tree-id5558 . -5) (undo-tree-id5559 . -5) (undo-tree-id5560 . -5) (undo-tree-id5561 . -5) (undo-tree-id5562 . -5) (undo-tree-id5563 . -5) (undo-tree-id5564 . -5) (undo-tree-id5565 . -5) (undo-tree-id5566 . -5) (undo-tree-id5567 . -5) (undo-tree-id5568 . -5) (undo-tree-id5569 . -5) (undo-tree-id5570 . -5) (undo-tree-id5571 . -5) (undo-tree-id5572 . -5) (undo-tree-id5573 . -5) (undo-tree-id5574 . -5) (undo-tree-id5575 . -5) (undo-tree-id5576 . -5) (undo-tree-id5577 . -5) (undo-tree-id5578 . -5) (undo-tree-id5579 . -5) (undo-tree-id5580 . -5) (undo-tree-id5581 . -5) (undo-tree-id5582 . -5) (undo-tree-id5583 . -5) (undo-tree-id5584 . -5) (undo-tree-id5585 . -5) (undo-tree-id5586 . -5) (undo-tree-id5587 . -5) (undo-tree-id5588 . -5) (undo-tree-id5589 . -5) (undo-tree-id5590 . -5) (undo-tree-id5591 . -5) (undo-tree-id5592 . -5) (undo-tree-id5593 . -5) (undo-tree-id5594 . -5) (undo-tree-id5595 . -5) (undo-tree-id5596 . -5) (undo-tree-id5597 . -5) (undo-tree-id5598 . -5) (undo-tree-id5599 . -5) (undo-tree-id5600 . -5) (undo-tree-id5601 . -5) (undo-tree-id5602 . -5) (undo-tree-id5603 . -5) (undo-tree-id5604 . -5) (undo-tree-id5605 . -5) (undo-tree-id5606 . -5) (undo-tree-id5607 . -5) (undo-tree-id5608 . -5) (undo-tree-id5609 . -5) (undo-tree-id5610 . -5) (undo-tree-id5611 . -5) (undo-tree-id5612 . -5) (undo-tree-id5613 . -5) (undo-tree-id5614 . -5) (undo-tree-id5615 . -5) (undo-tree-id5616 . -5) (undo-tree-id5617 . -5) (undo-tree-id5618 . -5) (undo-tree-id5619 . -5) (undo-tree-id5620 . -5) (undo-tree-id5621 . -5) (undo-tree-id5622 . -5) (undo-tree-id5623 . -5) (undo-tree-id5624 . -5) (undo-tree-id5625 . -5) (undo-tree-id5626 . -5) (undo-tree-id5627 . -5) (undo-tree-id5628 . -5) (undo-tree-id5629 . -5) (undo-tree-id5630 . -5) (undo-tree-id5631 . -5) (undo-tree-id5632 . -5) (undo-tree-id5633 . -5) (undo-tree-id5634 . -5) (undo-tree-id5635 . -5) (undo-tree-id5636 . -5) (undo-tree-id5637 . -5) (undo-tree-id5638 . -5) (undo-tree-id5639 . -5) (undo-tree-id5640 . -5) (undo-tree-id5641 . -5) (undo-tree-id5642 . -5) (undo-tree-id5643 . -5) (undo-tree-id5644 . -5) (undo-tree-id5645 . -5) (undo-tree-id5646 . -5) (undo-tree-id5647 . -5) (undo-tree-id5648 . -5) (undo-tree-id5649 . -5) (undo-tree-id5650 . -5) (undo-tree-id5651 . -5) (undo-tree-id5652 . -5) (undo-tree-id5653 . -5) 226) nil (26132 1315 551750 36000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -220) (undo-tree-id5414 . -1) (undo-tree-id5415 . -1) (undo-tree-id5416 . -1) (undo-tree-id5417 . -1) (undo-tree-id5418 . -1) (undo-tree-id5419 . -1) (undo-tree-id5420 . -1) (undo-tree-id5421 . -1) (undo-tree-id5422 . -1) (undo-tree-id5423 . -1) (undo-tree-id5424 . -1) (undo-tree-id5425 . -1) (undo-tree-id5426 . -1) (undo-tree-id5427 . -1) (undo-tree-id5428 . -1) (undo-tree-id5429 . -1) (undo-tree-id5430 . -1) (undo-tree-id5431 . -1) (undo-tree-id5432 . -1) (undo-tree-id5433 . -1) (undo-tree-id5434 . -1) (undo-tree-id5435 . -1) (undo-tree-id5436 . -1) (undo-tree-id5437 . -1) (undo-tree-id5438 . -1) (undo-tree-id5439 . -1) (undo-tree-id5440 . -1) (undo-tree-id5441 . -1) (undo-tree-id5442 . -1) (undo-tree-id5443 . -1) (undo-tree-id5444 . -1) (undo-tree-id5445 . -1) (undo-tree-id5446 . -1) (undo-tree-id5447 . -1) (undo-tree-id5448 . -1) (undo-tree-id5449 . -1) (undo-tree-id5450 . -1) (undo-tree-id5451 . -1) (undo-tree-id5452 . -1) (undo-tree-id5453 . -1) (undo-tree-id5454 . -1) (undo-tree-id5455 . -1) (undo-tree-id5456 . -1) (undo-tree-id5457 . -1) (undo-tree-id5458 . -1) (undo-tree-id5459 . -1) (undo-tree-id5460 . -1) (undo-tree-id5461 . -1) (undo-tree-id5462 . -1) (undo-tree-id5463 . -1) (undo-tree-id5464 . -1) (undo-tree-id5465 . -1) (undo-tree-id5466 . -1) (undo-tree-id5467 . -1) (undo-tree-id5468 . -1) (undo-tree-id5469 . -1) (undo-tree-id5470 . -1) (undo-tree-id5471 . -1) (undo-tree-id5472 . -1) (undo-tree-id5473 . -1) (undo-tree-id5474 . -1) (undo-tree-id5475 . -1) (undo-tree-id5476 . -1) (undo-tree-id5477 . -1) (undo-tree-id5478 . -1) (undo-tree-id5479 . -1) (undo-tree-id5480 . -1) (undo-tree-id5481 . -1) (undo-tree-id5482 . -1) (undo-tree-id5483 . -1) (undo-tree-id5484 . -1) (undo-tree-id5485 . -1) (undo-tree-id5486 . -1) (undo-tree-id5487 . -1) (undo-tree-id5488 . -1) (undo-tree-id5489 . -1) (undo-tree-id5490 . -1) (undo-tree-id5491 . -1) (undo-tree-id5492 . -1) (undo-tree-id5493 . -1) (undo-tree-id5494 . -1) (undo-tree-id5495 . -1) (undo-tree-id5496 . -1) (undo-tree-id5497 . -1) (undo-tree-id5498 . -1) (undo-tree-id5499 . -1) (undo-tree-id5500 . -1) (undo-tree-id5501 . -1) (undo-tree-id5502 . -1) (undo-tree-id5503 . -1) (undo-tree-id5504 . -1) (undo-tree-id5505 . -1) (undo-tree-id5506 . -1) (undo-tree-id5507 . -1) (undo-tree-id5508 . -1) (undo-tree-id5509 . -1) (undo-tree-id5510 . -1) (undo-tree-id5511 . -1) (undo-tree-id5512 . -1) (undo-tree-id5513 . -1) (undo-tree-id5514 . -1) (undo-tree-id5515 . -1) (undo-tree-id5516 . -1) (undo-tree-id5517 . -1) (undo-tree-id5518 . -1) (undo-tree-id5519 . -1) (undo-tree-id5520 . -1) (undo-tree-id5521 . -1) (undo-tree-id5522 . -1) (undo-tree-id5523 . -1) (undo-tree-id5524 . -1) (undo-tree-id5525 . -1) (undo-tree-id5526 . -1) (undo-tree-id5527 . -1) (undo-tree-id5528 . -1) (undo-tree-id5529 . -1) (undo-tree-id5530 . -1) (undo-tree-id5531 . -1) (undo-tree-id5532 . -1) (undo-tree-id5533 . -1) (undo-tree-id5534 . -1) (undo-tree-id5535 . -1) (undo-tree-id5536 . -1) (undo-tree-id5537 . -1) (undo-tree-id5538 . -1) (undo-tree-id5539 . -1) (undo-tree-id5540 . -1) 221) nil (26132 1315 551675 212000) 0 nil])
([nil nil ((220 . 222)) nil (26132 1315 551411 858000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -221) (undo-tree-id5408 . -1) (undo-tree-id5409 . -1) (undo-tree-id5410 . -1) (undo-tree-id5411 . -1) (undo-tree-id5412 . -1) (undo-tree-id5413 . -1) 222) nil (26132 1315 551411 82000) 0 nil])
([nil nil ((221 . 222)) nil (26132 1315 551406 424000) 0 nil])
([nil nil ((222 . 223)) nil (26132 1315 551405 857000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 230 300 nil nil nil t #s(yas--exit 301 nil))) #s(yas--exit 301 nil) 40 nil #s(yas--field 1 230 300 nil nil nil t #s(yas--exit 301 nil)) nil nil)) (221 . 232) (#("for_each(${1:f})$0" 0 18 (fontified nil)) . 221) (221 . 239) (#("fo" 0 2 (fontified nil)) . 221) (221 . 223) (#("for_each(…) (as Iterator)" 0 25 (fontified nil)) . -221) (221 . 246) (#("fo" 0 2 (fontified t)) . -221) (undo-tree-id5397 . -2) (undo-tree-id5398 . -1) (undo-tree-id5399 . -1) (undo-tree-id5400 . -1) (undo-tree-id5401 . -1) (undo-tree-id5402 . -2) (undo-tree-id5403 . -2) (undo-tree-id5404 . -2) (undo-tree-id5405 . -2) (undo-tree-id5406 . -2) (undo-tree-id5407 . -2) 223) nil (26132 1315 551404 330000) 0 nil])
([nil nil ((231 . 232) (#("f" 0 1 (fontified nil)) . 231) (undo-tree-id5396 . -1) (230 . 231)) nil (26132 1315 551395 513000) 0 nil])
([nil nil ((231 . 232)) nil (26132 1315 551394 54000) 0 nil])
([nil nil ((233 . 241)) nil (26132 1315 551393 503000) 0 nil])
([nil nil ((240 . 242)) nil (26132 1315 551392 899000) 0 nil])
([nil nil ((241 . 244)) nil (26132 1315 551392 359000) 0 nil])
([nil nil ((244 . 248)) nil (26132 1315 551391 797000) 0 nil])
([nil nil ((#("m" 0 1 (face font-lock-string-face fontified t)) . -247) (undo-tree-id5393 . -1) (undo-tree-id5394 . -1) (undo-tree-id5395 . -1) 248) nil (26132 1315 551390 977000) 0 nil])
([nil nil ((247 . 251)) nil (26132 1315 551388 299000) 0 nil])
([nil nil ((251 . 254)) nil (26132 1315 551387 755000) 0 nil])
([nil nil ((255 . 259)) nil (26132 1315 551387 129000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -257) (undo-tree-id5377 . -1) (undo-tree-id5378 . -1) (undo-tree-id5379 . -1) (undo-tree-id5380 . -1) (undo-tree-id5381 . -1) (undo-tree-id5382 . -1) (undo-tree-id5383 . -1) (undo-tree-id5384 . -1) (undo-tree-id5385 . -1) (undo-tree-id5386 . -1) (#("h" 0 1 (fontified t)) . -258) (undo-tree-id5387 . -1) (undo-tree-id5388 . -1) (undo-tree-id5389 . -1) (undo-tree-id5390 . -1) (undo-tree-id5391 . -1) (undo-tree-id5392 . -1) 259) nil (26132 1315 551385 631000) 0 nil])
([nil nil ((257 . 259)) nil (26132 1315 551374 253000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -258) (undo-tree-id5368 . -1) (undo-tree-id5369 . -1) (undo-tree-id5370 . -1) (undo-tree-id5371 . -1) (undo-tree-id5372 . -1) (undo-tree-id5373 . -1) (undo-tree-id5374 . -1) (undo-tree-id5375 . -1) (undo-tree-id5376 . -1) 259) nil (26132 1315 551373 209000) 0 nil])
([nil nil ((258 . 260)) nil (26132 1315 551366 162000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -258) (undo-tree-id5356 . -1) (undo-tree-id5357 . -1) (undo-tree-id5358 . -1) (undo-tree-id5359 . -1) (undo-tree-id5360 . -1) (undo-tree-id5361 . -1) (undo-tree-id5362 . -1) (undo-tree-id5363 . -1) (#("." 0 1 (fontified t)) . -259) (undo-tree-id5364 . -1) (undo-tree-id5365 . -1) (undo-tree-id5366 . -1) (undo-tree-id5367 . -1) 260) nil (26132 1315 551364 841000) 0 nil])
([nil nil ((258 . 265)) nil (26132 1315 551355 349000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -263) (undo-tree-id5340 . -1) (undo-tree-id5341 . -1) (undo-tree-id5342 . -1) (undo-tree-id5343 . -1) (undo-tree-id5344 . -1) (undo-tree-id5345 . -1) (undo-tree-id5346 . -1) (undo-tree-id5347 . -1) (undo-tree-id5348 . -1) (undo-tree-id5349 . -1) (#("n" 0 1 (fontified t)) . -264) (undo-tree-id5350 . -1) (undo-tree-id5351 . -1) (undo-tree-id5352 . -1) (undo-tree-id5353 . -1) (undo-tree-id5354 . -1) (undo-tree-id5355 . -1) 265) nil (26132 1315 551352 900000) 0 nil])
([nil nil ((263 . 281)) nil (26132 1315 551336 189000) 0 nil])
([nil nil ((280 . 282)) nil (26132 1315 551335 595000) 0 nil])
([nil nil ((281 . 285)) nil (26132 1315 551335 61000) 0 nil])
([nil nil ((286 . 298)) nil (26132 1315 551334 344000) 0 nil])
([nil nil ((apply yas--snippet-revive 221 301 #s(yas--snippet nil (#s(yas--field 1 230 300 nil nil nil t #s(yas--exit 301 nil))) #s(yas--exit 301 nil) 40 nil #s(yas--field 1 230 300 nil nil nil t #s(yas--exit 301 nil)) nil nil))) nil (26132 1315 551333 96000) 0 nil])
([nil nil ((301 . 302)) nil (26132 1315 551328 359000) 0 nil])
([nil nil ((#("    };" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-1-face) fontified t) 5 6 (fontified t)) . 312) (undo-tree-id5765 . -6) (undo-tree-id5766 . -6) (t 26132 1315 597207 849000)) nil (26132 1319 782758 779000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -307) 303 (t 26132 1319 797208 107000)) nil (26132 1442 597256 405000) 0 nil])
([nil nil ((#("chip = " 0 4 (face font-lock-variable-name-face fontified t) 4 7 (fontified t)) . -206) (undo-tree-id6195 . -7) (undo-tree-id6196 . -4) (undo-tree-id6197 . -7) (undo-tree-id6198 . -7) (undo-tree-id6199 . -7) (undo-tree-id6200 . -7) (undo-tree-id6201 . -7) 213) nil (26132 1442 597255 1000) 0 nil])
([nil nil ((#("let " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -202) (undo-tree-id6178 . -4) (undo-tree-id6179 . -4) (undo-tree-id6180 . -3) (undo-tree-id6181 . -4) (undo-tree-id6182 . -4) (undo-tree-id6183 . -4) (undo-tree-id6184 . -4) (undo-tree-id6185 . -4) (undo-tree-id6186 . -4) (undo-tree-id6187 . -4) (undo-tree-id6188 . -4) (undo-tree-id6189 . -4) (undo-tree-id6190 . -4) (undo-tree-id6191 . -4) (undo-tree-id6192 . -4) (undo-tree-id6193 . -4) (undo-tree-id6194 . -4) 206) nil (26132 1442 597249 603000) 0 nil])
([nil nil ((199 . 203) (#("    " 0 4 (fontified nil)) . 198) (undo-tree-id6143 . -4) (undo-tree-id6144 . -4) (undo-tree-id6145 . -4) (undo-tree-id6146 . -4) (undo-tree-id6147 . -4) (undo-tree-id6148 . -4) (undo-tree-id6149 . -4) (undo-tree-id6150 . -4) (undo-tree-id6151 . -4) (undo-tree-id6152 . -4) (undo-tree-id6153 . -4) (undo-tree-id6154 . -4) (undo-tree-id6155 . -4) (undo-tree-id6156 . -4) (undo-tree-id6157 . -4) (undo-tree-id6158 . -4) (undo-tree-id6159 . -4) (undo-tree-id6160 . -4) (undo-tree-id6161 . -4) (undo-tree-id6162 . -4) (undo-tree-id6163 . -4) (undo-tree-id6164 . -4) (undo-tree-id6165 . -4) (undo-tree-id6166 . -4) (undo-tree-id6167 . -4) (undo-tree-id6168 . -4) (undo-tree-id6169 . -4) (undo-tree-id6170 . -4) (undo-tree-id6171 . -4) (undo-tree-id6172 . -4) (undo-tree-id6173 . -4) (undo-tree-id6174 . -4) (undo-tree-id6175 . -4) (undo-tree-id6176 . -4) (undo-tree-id6177 . -4) (202 . 203)) nil (26132 1442 597236 994000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -197) (undo-tree-id6036 . -1) (undo-tree-id6037 . -1) (undo-tree-id6038 . -1) (undo-tree-id6039 . -1) (undo-tree-id6040 . -1) (undo-tree-id6041 . -1) (undo-tree-id6042 . -1) (undo-tree-id6043 . -1) (undo-tree-id6044 . -1) (undo-tree-id6045 . -1) (undo-tree-id6046 . -1) (undo-tree-id6047 . -1) (undo-tree-id6048 . -1) (undo-tree-id6049 . -1) (undo-tree-id6050 . -1) (undo-tree-id6051 . -1) (undo-tree-id6052 . -1) (undo-tree-id6053 . -1) (undo-tree-id6054 . -1) (undo-tree-id6055 . -1) (undo-tree-id6056 . -1) (undo-tree-id6057 . -1) (undo-tree-id6058 . -1) (undo-tree-id6059 . -1) (undo-tree-id6060 . -1) (undo-tree-id6061 . -1) (undo-tree-id6062 . -1) (undo-tree-id6063 . -1) (undo-tree-id6064 . -1) (undo-tree-id6065 . -1) (undo-tree-id6066 . -1) (undo-tree-id6067 . -1) (undo-tree-id6068 . -1) (undo-tree-id6069 . -1) (undo-tree-id6070 . -1) (undo-tree-id6071 . -1) (undo-tree-id6072 . -1) (undo-tree-id6073 . -1) (undo-tree-id6074 . -1) (undo-tree-id6075 . -1) (undo-tree-id6076 . -1) (undo-tree-id6077 . -1) (undo-tree-id6078 . -1) (undo-tree-id6079 . -1) (undo-tree-id6080 . -1) (undo-tree-id6081 . -1) (undo-tree-id6082 . -1) (undo-tree-id6083 . -1) (undo-tree-id6084 . -1) (undo-tree-id6085 . -1) (#("
" 0 1 (fontified t)) . -198) (undo-tree-id6086 . -1) (undo-tree-id6087 . -1) (undo-tree-id6088 . 1) (undo-tree-id6089 . -1) (undo-tree-id6090 . -1) (undo-tree-id6091 . -1) (undo-tree-id6092 . -1) (undo-tree-id6093 . -1) (undo-tree-id6094 . -1) (undo-tree-id6095 . -1) (undo-tree-id6096 . -1) (undo-tree-id6097 . -1) (undo-tree-id6098 . -1) (undo-tree-id6099 . -1) (undo-tree-id6100 . -1) (undo-tree-id6101 . -1) (undo-tree-id6102 . -1) (#(" " 0 1 (fontified t)) . -199) (undo-tree-id6103 . -1) (undo-tree-id6104 . -1) (undo-tree-id6105 . -1) (undo-tree-id6106 . -1) (undo-tree-id6107 . -1) (undo-tree-id6108 . -1) (undo-tree-id6109 . -1) (undo-tree-id6110 . -1) (undo-tree-id6111 . -1) (undo-tree-id6112 . -1) (undo-tree-id6113 . -1) (undo-tree-id6114 . -1) (undo-tree-id6115 . -1) (#(" " 0 1 (fontified t)) . -200) (undo-tree-id6116 . -1) (undo-tree-id6117 . -1) (undo-tree-id6118 . -1) (undo-tree-id6119 . -1) (undo-tree-id6120 . -1) (undo-tree-id6121 . -1) (undo-tree-id6122 . -1) (undo-tree-id6123 . -1) (undo-tree-id6124 . -1) (undo-tree-id6125 . -1) (undo-tree-id6126 . -1) (#(" " 0 1 (fontified t)) . -201) (undo-tree-id6127 . -1) (undo-tree-id6128 . -1) (undo-tree-id6129 . -1) (undo-tree-id6130 . -1) (undo-tree-id6131 . -1) (undo-tree-id6132 . -1) (undo-tree-id6133 . -1) (undo-tree-id6134 . -1) (undo-tree-id6135 . -1) (#(" " 0 1 (fontified t)) . -202) (undo-tree-id6136 . -1) (undo-tree-id6137 . -1) (undo-tree-id6138 . -1) (undo-tree-id6139 . -1) (undo-tree-id6140 . -1) (undo-tree-id6141 . -1) (undo-tree-id6142 . -1) 203) nil (26132 1442 597209 594000) 0 nil])
([nil nil ((291 . 296)) nil (26132 1442 596768 968000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-variable-name-face fontified t)) . -295) (undo-tree-id6032 . -1) (undo-tree-id6033 . -1) (undo-tree-id6034 . -1) (undo-tree-id6035 . -1) 296) nil (26132 1442 596768 169000) 0 nil])
([nil nil ((295 . 297)) nil (26132 1442 596765 188000) 0 nil])
([nil nil ((#("j" 0 1 (face font-lock-variable-name-face fontified t)) . -296) (undo-tree-id6020 . -1) (undo-tree-id6021 . -1) (undo-tree-id6022 . -1) (undo-tree-id6023 . -1) (undo-tree-id6024 . -1) (undo-tree-id6025 . -1) (undo-tree-id6026 . -1) (undo-tree-id6027 . -1) (undo-tree-id6028 . -1) (undo-tree-id6029 . -1) (undo-tree-id6030 . -1) (undo-tree-id6031 . -1) 297) nil (26132 1442 596764 164000) 0 nil])
([nil nil ((296 . 303)) nil (26132 1442 596756 690000) 0 nil])
([nil nil ((302 . 309) (#("s" 0 1 (fontified nil)) . 302) (302 . 303) (#("sensors" 0 7 (fontified nil)) . -302) (302 . 309) (#("s" 0 1 (fontified t)) . -302) (undo-tree-id6014 . -1) (undo-tree-id6015 . -1) (undo-tree-id6016 . -1) (undo-tree-id6017 . -1) (undo-tree-id6018 . -1) (undo-tree-id6019 . -1) 303) nil (26132 1442 596755 550000) 0 nil])
([nil nil ((309 . 311)) nil (26132 1442 596750 293000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 317 334 nil nil nil t #s(yas--exit 335 nil))) #s(yas--exit 335 nil) 41 nil #s(yas--field 1 317 334 nil nil nil t #s(yas--exit 335 nil)) nil nil)) (310 . 327) (#("filter(${1:predicate})$0" 0 24 (fontified nil)) . 310) (310 . 334) (#("f" 0 1 (fontified nil)) . 310) (310 . 311) (#("filter(…) (as Iterator)" 0 23 (fontified nil)) . -310) (310 . 333) (#("f" 0 1 (fontified t)) . -310) (undo-tree-id6000 . -1) (undo-tree-id6001 . -1) (undo-tree-id6002 . -1) (undo-tree-id6003 . -1) (undo-tree-id6004 . -1) (undo-tree-id6005 . -1) (undo-tree-id6006 . -1) (undo-tree-id6007 . -1) (undo-tree-id6008 . -1) (undo-tree-id6009 . -1) (undo-tree-id6010 . -1) (undo-tree-id6011 . -1) (undo-tree-id6012 . -1) (undo-tree-id6013 . -1) 311) nil (26132 1442 596748 464000) 0 nil])
([nil nil ((#("predicate" 0 9 (fontified nil)) . 318) (undo-tree-id5999 . -9) (317 . 318)) nil (26132 1442 596738 269000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -317) (undo-tree-id5984 . -1) (undo-tree-id5985 . -1) (undo-tree-id5986 . -1) (undo-tree-id5987 . -1) (undo-tree-id5988 . -1) (undo-tree-id5989 . -1) (undo-tree-id5990 . -1) (undo-tree-id5991 . -1) (undo-tree-id5992 . -1) (undo-tree-id5993 . -1) (undo-tree-id5994 . -1) (undo-tree-id5995 . -1) (undo-tree-id5996 . -1) (undo-tree-id5997 . -1) (undo-tree-id5998 . -1) 318) nil (26132 1442 596736 385000) 0 nil])
([nil nil ((317 . 318)) nil (26132 1442 596726 166000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -317) (undo-tree-id5976 . -1) (undo-tree-id5977 . -1) (undo-tree-id5978 . -1) (undo-tree-id5979 . -1) (undo-tree-id5980 . -1) (undo-tree-id5981 . -1) (undo-tree-id5982 . -1) (undo-tree-id5983 . -1) 318) nil (26132 1442 596725 52000) 0 nil])
([nil nil ((317 . 319)) nil (26132 1442 596719 515000) 0 nil])
([nil nil ((318 . 320)) nil (26132 1442 596718 834000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -319) (undo-tree-id5969 . -1) (undo-tree-id5970 . -1) (undo-tree-id5971 . -1) (undo-tree-id5972 . -1) (undo-tree-id5973 . -1) (undo-tree-id5974 . -1) (undo-tree-id5975 . -1) 320) nil (26132 1442 596717 499000) 0 nil])
([nil nil ((320 . 326)) nil (26132 1442 596685 809000) 0 nil])
([nil nil ((apply yas--snippet-revive 323 333 #s(yas--snippet nil nil #s(yas--exit 333 nil) 42 nil nil #s(yas--field 1 317 334 nil nil nil t #s(yas--exit 335 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 333 nil) 42 nil nil #s(yas--field 1 317 334 nil nil nil t #s(yas--exit 335 nil)) nil)) (323 . 333) (#("get_name()$0" 0 12 (fontified nil)) . 323) (undo-tree-id5956 . -12) (323 . 335) (#("get" 0 3 (fontified nil)) . 323) (undo-tree-id5957 . -3) (323 . 326) (#("get_name()" 0 10 (fontified nil)) . -323) (undo-tree-id5958 . -10) (323 . 333) (#("get" 0 3 (fontified t)) . -323) (undo-tree-id5959 . -3) (undo-tree-id5960 . -3) (undo-tree-id5961 . -3) (undo-tree-id5962 . -1) (undo-tree-id5963 . -1) (undo-tree-id5964 . -1) (undo-tree-id5965 . -2) (undo-tree-id5966 . -2) (undo-tree-id5967 . -3) (undo-tree-id5968 . -3) 326) nil (26132 1442 596683 975000) 0 nil])
([nil nil ((333 . 334)) nil (26132 1442 596673 403000) 0 nil])
([nil nil ((apply yas--snippet-revive 310 335 #s(yas--snippet nil (#s(yas--field 1 317 334 nil nil nil t #s(yas--exit 335 nil))) #s(yas--exit 335 nil) 41 nil #s(yas--field 1 317 334 nil nil nil t #s(yas--exit 335 nil)) nil nil))) nil (26132 1452 200845 621000) 0 nil])
([nil nil ((334 . 336)) nil (26132 1490 848209 289000) 0 nil] [nil nil ((#("let chip = sensors.filter(|x| x.get_name().)" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 8 (face font-lock-variable-name-face fontified t) 8 11 (fontified t) 11 19 (fontified t) 19 25 (fontified t) 25 26 (face (rainbow-delimiters-depth-2-face) fontified t) 26 32 (fontified t) 32 40 (fontified t) 40 41 (face (rainbow-delimiters-depth-3-face) fontified t) 41 42 (face (rainbow-delimiters-depth-3-face) fontified t) 42 43 (fontified t) 43 44 (face (rainbow-delimiters-depth-2-face) fontified t)) . 291) (undo-tree-id6202 . -1) (undo-tree-id6203 . -1) (undo-tree-id6204 . -1) (undo-tree-id6205 . -2) (undo-tree-id6206 . -2) (undo-tree-id6207 . -3) (undo-tree-id6208 . -3) (undo-tree-id6209 . -4) (undo-tree-id6210 . -4) (undo-tree-id6211 . -4) (undo-tree-id6212 . -4) (undo-tree-id6213 . -4) (undo-tree-id6214 . -4) (undo-tree-id6215 . -4) (undo-tree-id6216 . -4) (undo-tree-id6217 . -4) (undo-tree-id6218 . -5) (undo-tree-id6219 . -5) (undo-tree-id6220 . -5) (undo-tree-id6221 . -5) (undo-tree-id6222 . -5) (undo-tree-id6223 . -5) (undo-tree-id6224 . -5) (undo-tree-id6225 . -5) (undo-tree-id6226 . -5) (undo-tree-id6227 . -5) (undo-tree-id6228 . -5) (undo-tree-id6229 . -5) (undo-tree-id6230 . -5) (undo-tree-id6231 . -5) (undo-tree-id6232 . -5) (undo-tree-id6233 . -5) (undo-tree-id6234 . -5) (undo-tree-id6235 . -5) (undo-tree-id6236 . -5) (undo-tree-id6237 . -5) (undo-tree-id6238 . -5) (undo-tree-id6239 . -5) (undo-tree-id6240 . -5) (undo-tree-id6241 . -5) (undo-tree-id6242 . -5) (undo-tree-id6243 . -6) (undo-tree-id6244 . -6) (undo-tree-id6245 . -6) (undo-tree-id6246 . -6) (undo-tree-id6247 . -6) (undo-tree-id6248 . -7) (undo-tree-id6249 . -7) (undo-tree-id6250 . -7) (undo-tree-id6251 . -7) (undo-tree-id6252 . -8) (undo-tree-id6253 . -8) (undo-tree-id6254 . -8) (undo-tree-id6255 . -8) (undo-tree-id6256 . -8) (undo-tree-id6257 . -9) (undo-tree-id6258 . -9) (undo-tree-id6259 . -10) (undo-tree-id6260 . -10) (undo-tree-id6261 . -10) (undo-tree-id6262 . -11) (undo-tree-id6263 . -11) (undo-tree-id6264 . -11) (undo-tree-id6265 . -11) (undo-tree-id6266 . -11) (undo-tree-id6267 . -11) (undo-tree-id6268 . -11) (undo-tree-id6269 . -11) (undo-tree-id6270 . -11) (undo-tree-id6271 . -11) (undo-tree-id6272 . -11) (undo-tree-id6273 . -18) (undo-tree-id6274 . -18) (undo-tree-id6275 . -18) (undo-tree-id6276 . -19) (undo-tree-id6277 . -19) (undo-tree-id6278 . -19) (undo-tree-id6279 . -19) (undo-tree-id6280 . -19) (undo-tree-id6281 . -19) (undo-tree-id6282 . -19) (undo-tree-id6283 . -19) (undo-tree-id6284 . -19) (undo-tree-id6285 . -19) (undo-tree-id6286 . -19) (undo-tree-id6287 . -19) (undo-tree-id6288 . -19) (undo-tree-id6289 . -19) (undo-tree-id6290 . -19) (undo-tree-id6291 . -44) (undo-tree-id6292 . -44) (undo-tree-id6293 . -26) (undo-tree-id6294 . -26) (undo-tree-id6295 . -26) (undo-tree-id6296 . -26) (undo-tree-id6297 . -26) (undo-tree-id6298 . -26) (undo-tree-id6299 . -26) (undo-tree-id6300 . -26) (undo-tree-id6301 . -26) (undo-tree-id6302 . -26) (undo-tree-id6303 . -26) (undo-tree-id6304 . -26) (undo-tree-id6305 . -26) (undo-tree-id6306 . -26) (undo-tree-id6307 . -26) (undo-tree-id6308 . -26) (undo-tree-id6309 . -26) (undo-tree-id6310 . -26) (undo-tree-id6311 . -26) (undo-tree-id6312 . -26) (undo-tree-id6313 . -26) (undo-tree-id6314 . -26) (undo-tree-id6315 . -26) (undo-tree-id6316 . -26) (undo-tree-id6317 . -26) (undo-tree-id6318 . -26) (undo-tree-id6319 . -26) (undo-tree-id6320 . -26) (undo-tree-id6321 . -26) (undo-tree-id6322 . -26) (undo-tree-id6323 . -26) (undo-tree-id6324 . -26) (undo-tree-id6325 . -26) (undo-tree-id6326 . -26) (undo-tree-id6327 . -26) (undo-tree-id6328 . -26) (undo-tree-id6329 . -26) (undo-tree-id6330 . -26) (undo-tree-id6331 . -26) (undo-tree-id6332 . -27) (undo-tree-id6333 . -27) (undo-tree-id6334 . -29) (undo-tree-id6335 . -29) (undo-tree-id6336 . -27) (undo-tree-id6337 . -28) (undo-tree-id6338 . -28) (undo-tree-id6339 . -28) (undo-tree-id6340 . -28) (undo-tree-id6341 . -28) (undo-tree-id6342 . -28) (undo-tree-id6343 . -28) (undo-tree-id6344 . -28) (undo-tree-id6345 . -28) (undo-tree-id6346 . -28) (undo-tree-id6347 . -28) (undo-tree-id6348 . -28) (undo-tree-id6349 . -28) (undo-tree-id6350 . -28) (undo-tree-id6351 . -29) (undo-tree-id6352 . -30) (undo-tree-id6353 . -30) (undo-tree-id6354 . -31) (undo-tree-id6355 . -31) (undo-tree-id6356 . -31) (undo-tree-id6357 . -31) (undo-tree-id6358 . -31) (undo-tree-id6359 . -31) (undo-tree-id6360 . -32) (undo-tree-id6361 . -32) (undo-tree-id6362 . -32) (undo-tree-id6363 . -32) (undo-tree-id6364 . -32) (undo-tree-id6365 . -32) (undo-tree-id6366 . -32) (undo-tree-id6367 . -32) (undo-tree-id6368 . -32) (undo-tree-id6369 . -32) (undo-tree-id6370 . -32) (undo-tree-id6371 . -32) (undo-tree-id6372 . -32) (undo-tree-id6373 . -42) (undo-tree-id6374 . -42) (undo-tree-id6375 . -42) (undo-tree-id6376 . -42) (undo-tree-id6377 . -42) (undo-tree-id6378 . -43) (undo-tree-id6379 . -43) (undo-tree-id6380 . 1) (undo-tree-id6381 . -43) (undo-tree-id6382 . -43) (undo-tree-id6383 . -43) (undo-tree-id6384 . -43) (undo-tree-id6385 . -43) (undo-tree-id6386 . -43) (undo-tree-id6387 . -43) (undo-tree-id6388 . -43) (undo-tree-id6389 . -43) (undo-tree-id6390 . -44) (undo-tree-id6391 . -44) (undo-tree-id6392 . -44) (undo-tree-id6393 . -44) (undo-tree-id6394 . -44) (undo-tree-id6395 . -44)) ((291 . 335)) (26132 1452 200418 3000) 0 nil] [nil nil ((#("let chip = sensors.filter(|x| x.get_name().)" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 8 (face font-lock-variable-name-face fontified t) 8 11 (fontified t) 11 19 (fontified t) 19 25 (fontified t) 25 26 (face (rainbow-delimiters-depth-2-face) fontified t) 26 32 (fontified t) 32 40 (fontified t) 40 41 (face (rainbow-delimiters-depth-3-face) fontified t) 41 42 (face (rainbow-delimiters-depth-3-face) fontified t) 42 43 (fontified t) 43 44 (face (rainbow-delimiters-depth-2-face) fontified t)) . 291) (undo-tree-id5767 . -1) (undo-tree-id5768 . -1) (undo-tree-id5769 . -1) (undo-tree-id5770 . -2) (undo-tree-id5771 . -2) (undo-tree-id5772 . -3) (undo-tree-id5773 . -3) (undo-tree-id5774 . -4) (undo-tree-id5775 . -4) (undo-tree-id5776 . -4) (undo-tree-id5777 . -4) (undo-tree-id5778 . -4) (undo-tree-id5779 . -4) (undo-tree-id5780 . -4) (undo-tree-id5781 . -4) (undo-tree-id5782 . -4) (undo-tree-id5783 . -5) (undo-tree-id5784 . -5) (undo-tree-id5785 . -5) (undo-tree-id5786 . -5) (undo-tree-id5787 . -5) (undo-tree-id5788 . -5) (undo-tree-id5789 . -5) (undo-tree-id5790 . -5) (undo-tree-id5791 . -5) (undo-tree-id5792 . -5) (undo-tree-id5793 . -5) (undo-tree-id5794 . -5) (undo-tree-id5795 . -5) (undo-tree-id5796 . -5) (undo-tree-id5797 . -5) (undo-tree-id5798 . -5) (undo-tree-id5799 . -5) (undo-tree-id5800 . -5) (undo-tree-id5801 . -5) (undo-tree-id5802 . -5) (undo-tree-id5803 . -5) (undo-tree-id5804 . -5) (undo-tree-id5805 . -5) (undo-tree-id5806 . -5) (undo-tree-id5807 . -5) (undo-tree-id5808 . -6) (undo-tree-id5809 . -6) (undo-tree-id5810 . -6) (undo-tree-id5811 . -6) (undo-tree-id5812 . -6) (undo-tree-id5813 . -7) (undo-tree-id5814 . -7) (undo-tree-id5815 . -7) (undo-tree-id5816 . -7) (undo-tree-id5817 . -8) (undo-tree-id5818 . -8) (undo-tree-id5819 . -8) (undo-tree-id5820 . -8) (undo-tree-id5821 . -8) (undo-tree-id5822 . -9) (undo-tree-id5823 . -9) (undo-tree-id5824 . -10) (undo-tree-id5825 . -10) (undo-tree-id5826 . -10) (undo-tree-id5827 . -11) (undo-tree-id5828 . -11) (undo-tree-id5829 . -11) (undo-tree-id5830 . -11) (undo-tree-id5831 . -11) (undo-tree-id5832 . -11) (undo-tree-id5833 . -11) (undo-tree-id5834 . -11) (undo-tree-id5835 . -11) (undo-tree-id5836 . -11) (undo-tree-id5837 . -11) (undo-tree-id5838 . -18) (undo-tree-id5839 . -18) (undo-tree-id5840 . -18) (undo-tree-id5841 . -19) (undo-tree-id5842 . -19) (undo-tree-id5843 . -19) (undo-tree-id5844 . -19) (undo-tree-id5845 . -19) (undo-tree-id5846 . -19) (undo-tree-id5847 . -19) (undo-tree-id5848 . -19) (undo-tree-id5849 . -19) (undo-tree-id5850 . -19) (undo-tree-id5851 . -19) (undo-tree-id5852 . -19) (undo-tree-id5853 . -19) (undo-tree-id5854 . -19) (undo-tree-id5855 . -19) (undo-tree-id5856 . -44) (undo-tree-id5857 . -44) (undo-tree-id5858 . -26) (undo-tree-id5859 . -26) (undo-tree-id5860 . -26) (undo-tree-id5861 . -26) (undo-tree-id5862 . -26) (undo-tree-id5863 . -26) (undo-tree-id5864 . -26) (undo-tree-id5865 . -26) (undo-tree-id5866 . -26) (undo-tree-id5867 . -26) (undo-tree-id5868 . -26) (undo-tree-id5869 . -26) (undo-tree-id5870 . -26) (undo-tree-id5871 . -26) (undo-tree-id5872 . -26) (undo-tree-id5873 . -26) (undo-tree-id5874 . -26) (undo-tree-id5875 . -26) (undo-tree-id5876 . -26) (undo-tree-id5877 . -26) (undo-tree-id5878 . -26) (undo-tree-id5879 . -26) (undo-tree-id5880 . -26) (undo-tree-id5881 . -26) (undo-tree-id5882 . -26) (undo-tree-id5883 . -26) (undo-tree-id5884 . -26) (undo-tree-id5885 . -26) (undo-tree-id5886 . -26) (undo-tree-id5887 . -26) (undo-tree-id5888 . -26) (undo-tree-id5889 . -26) (undo-tree-id5890 . -26) (undo-tree-id5891 . -26) (undo-tree-id5892 . -26) (undo-tree-id5893 . -26) (undo-tree-id5894 . -26) (undo-tree-id5895 . -26) (undo-tree-id5896 . -26) (undo-tree-id5897 . -27) (undo-tree-id5898 . -27) (undo-tree-id5899 . -29) (undo-tree-id5900 . -29) (undo-tree-id5901 . -27) (undo-tree-id5902 . -28) (undo-tree-id5903 . -28) (undo-tree-id5904 . -28) (undo-tree-id5905 . -28) (undo-tree-id5906 . -28) (undo-tree-id5907 . -28) (undo-tree-id5908 . -28) (undo-tree-id5909 . -28) (undo-tree-id5910 . -28) (undo-tree-id5911 . -28) (undo-tree-id5912 . -28) (undo-tree-id5913 . -28) (undo-tree-id5914 . -28) (undo-tree-id5915 . -28) (undo-tree-id5916 . -29) (undo-tree-id5917 . -30) (undo-tree-id5918 . -30) (undo-tree-id5919 . -31) (undo-tree-id5920 . -31) (undo-tree-id5921 . -31) (undo-tree-id5922 . -31) (undo-tree-id5923 . -31) (undo-tree-id5924 . -31) (undo-tree-id5925 . -32) (undo-tree-id5926 . -32) (undo-tree-id5927 . -32) (undo-tree-id5928 . -32) (undo-tree-id5929 . -32) (undo-tree-id5930 . -32) (undo-tree-id5931 . -32) (undo-tree-id5932 . -32) (undo-tree-id5933 . -32) (undo-tree-id5934 . -32) (undo-tree-id5935 . -32) (undo-tree-id5936 . -32) (undo-tree-id5937 . -32) (undo-tree-id5938 . -42) (undo-tree-id5939 . -42) (undo-tree-id5940 . -42) (undo-tree-id5941 . -42) (undo-tree-id5942 . -42) (undo-tree-id5943 . -43) (undo-tree-id5944 . -43) (undo-tree-id5945 . 1) (undo-tree-id5946 . -43) (undo-tree-id5947 . -43) (undo-tree-id5948 . -43) (undo-tree-id5949 . -43) (undo-tree-id5950 . -43) (undo-tree-id5951 . -43) (undo-tree-id5952 . -43) (undo-tree-id5953 . -43) (undo-tree-id5954 . -43) (undo-tree-id5955 . -44)) ((291 . 335)) (26132 1442 596662 212000) 0 nil])
([nil nil ((apply yas--snippet-revive 334 342 #s(yas--snippet nil nil #s(yas--exit 342 nil) 43 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 342 nil) 43 nil nil nil nil)) (334 . 342) (#("unwrap()$0" 0 10 (fontified nil)) . 334) (334 . 344) (#("up" 0 2 (fontified nil)) . 334) (334 . 336) (#("unwrap()" 0 8 (fontified nil)) . -334) (334 . 342) (#("up" 0 2 (fontified t)) . -334) (undo-tree-id6431 . -2) (undo-tree-id6432 . -2) (undo-tree-id6433 . -1) (undo-tree-id6434 . -1) (undo-tree-id6435 . -1) (undo-tree-id6436 . -2) (undo-tree-id6437 . -2) (undo-tree-id6438 . -2) (undo-tree-id6439 . -2) (undo-tree-id6440 . -2) (undo-tree-id6441 . -2) (undo-tree-id6442 . -2) (undo-tree-id6443 . -2) (undo-tree-id6444 . -2) (undo-tree-id6445 . -2) 336) nil (26132 1490 848207 651000) 0 nil])
nil
nil
([nil nil ((342 . 346)) nil (26132 1491 939241 215000) 0 nil])
([nil nil ((345 . 346)) nil (26132 1673 385952 48000) 0 nil] [nil nil ((345 . 367) (#("\")

    
    
    loop" 0 1 (face font-lock-string-face fontified t) 1 2 (face (rainbow-delimiters-depth-2-face) fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 8 (fontified t) 8 9 (fontified t) 9 13 (fontified t) 13 14 (fontified t) 14 18 (fontified t) 18 22 (face font-lock-keyword-face fontified t)) . 345)) ((345 . 367) (#("\")

    
    
    LOOP" 0 1 (face font-lock-string-face fontified t) 1 2 (face (rainbow-delimiters-depth-2-face) fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 8 (fontified t) 8 9 (fontified t) 9 13 (fontified t) 13 14 (fontified t) 14 18 (fontified t) 18 22 (face font-lock-type-face fontified t)) . 345) (undo-tree-id6472 . -22) (undo-tree-id6473 . 21) (undo-tree-id6474 . -22) (undo-tree-id6475 . -22) (undo-tree-id6476 . -22) (undo-tree-id6477 . -22) (undo-tree-id6478 . -22) (undo-tree-id6479 . -22) (undo-tree-id6480 . -22) (undo-tree-id6481 . -22) (undo-tree-id6482 . -22) (undo-tree-id6483 . -22) (undo-tree-id6484 . -22) (undo-tree-id6485 . -22) (undo-tree-id6486 . -22) (undo-tree-id6487 . -22) (undo-tree-id6488 . -22) (undo-tree-id6489 . -22) (undo-tree-id6490 . -22) (undo-tree-id6491 . -22) (undo-tree-id6492 . -22) (undo-tree-id6493 . -22) (undo-tree-id6494 . -22) (undo-tree-id6495 . -22) (undo-tree-id6496 . -22) (undo-tree-id6497 . -22) (undo-tree-id6498 . -22) (undo-tree-id6499 . -22) (undo-tree-id6500 . -22) (undo-tree-id6501 . -22) (undo-tree-id6502 . -22) (undo-tree-id6503 . -14) (undo-tree-id6504 . -22) (undo-tree-id6505 . -22)) (26132 1491 440140 263000) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-string-face fontified t)) . -345) (undo-tree-id6591 . -1) 346) nil (26132 1673 385951 365000) 0 nil])
([nil nil ((nil rear-nonsticky nil 384 . 385) (nil fontified nil 367 . 385) (367 . 385)) ((#("coretemp-isa-0000\"" 0 8 (face font-lock-type-face fontified nil) 8 13 (fontified nil) 13 17 (fontified nil) 17 18 (face font-lock-string-face rear-nonsticky nil fontified nil)) . 367) (undo-tree-id6446 . -18) (undo-tree-id6447 . -18) (undo-tree-id6448 . -18) (undo-tree-id6449 . -18) (undo-tree-id6450 . -18) (undo-tree-id6451 . -18) (undo-tree-id6452 . -18) (undo-tree-id6453 . -18) (undo-tree-id6454 . -18) (undo-tree-id6455 . -18) (undo-tree-id6456 . -18) (undo-tree-id6457 . -18) (undo-tree-id6458 . -18) (undo-tree-id6459 . -17) (undo-tree-id6460 . -17) (undo-tree-id6461 . -17) (undo-tree-id6462 . -17) (undo-tree-id6463 . -17) (undo-tree-id6464 . -17) (undo-tree-id6465 . -17) (undo-tree-id6466 . -17) (undo-tree-id6467 . -17) (undo-tree-id6468 . -17) (undo-tree-id6469 . -17) (undo-tree-id6470 . -18) (undo-tree-id6471 . -18) (nil rear-nonsticky t 384 . 385)) (26132 1491 126712 932000) 0 nil])
([nil nil ((191 . 193)) nil (26132 1673 385950 10000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face rear-nonsticky t fontified t)) . -384) (undo-tree-id6418 . -1) (undo-tree-id6419 . -1) (undo-tree-id6420 . -1) (undo-tree-id6421 . -1) (undo-tree-id6422 . -1) (undo-tree-id6423 . -1) (undo-tree-id6424 . -1) (undo-tree-id6425 . -1) (undo-tree-id6426 . -1) (undo-tree-id6427 . -1) (undo-tree-id6428 . -1) (undo-tree-id6429 . -1) (undo-tree-id6430 . -1) 385) ((384 . 385)) (26132 1490 848516 9000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -191) (undo-tree-id6589 . -1) (#("/" 0 1 (fontified t)) . -192) (undo-tree-id6590 . -1) 193) nil (26132 1673 385949 236000) 0 nil])
([nil nil ((#("0000" 0 4 (fontified t)) . -380) (undo-tree-id6396 . -4) (undo-tree-id6397 . -4) (undo-tree-id6398 . -4) (undo-tree-id6399 . -4) (undo-tree-id6400 . -4) (undo-tree-id6401 . -4) (undo-tree-id6402 . -4) (undo-tree-id6403 . -4) (undo-tree-id6404 . -4) (undo-tree-id6405 . -4) (undo-tree-id6406 . -4) (undo-tree-id6407 . -4) (undo-tree-id6408 . -4) (undo-tree-id6409 . -4) (undo-tree-id6410 . -4) (undo-tree-id6411 . -4) (undo-tree-id6412 . -4) (undo-tree-id6413 . -4) (undo-tree-id6414 . -4) (undo-tree-id6415 . -4) (undo-tree-id6416 . -4) (undo-tree-id6417 . -4) 384) ((380 . 384)) (26132 1490 848179 850000) 0 nil])
([nil nil ((191 . 192)) nil (26132 1673 385947 240000) 0 nil])
nil
([nil nil ((#("." 0 1 (fontified t)) . -191) (undo-tree-id6588 . -1) 192) nil (26132 1673 385946 560000) 0 nil])
([nil nil ((#("unwrap()==\"\")" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-3-face) fontified t) 7 8 (face (rainbow-delimiters-depth-3-face) fontified t) 8 10 (fontified t) 10 11 (face font-lock-string-face fontified t) 11 12 (face font-lock-string-face fontified t) 12 13 (face (rainbow-delimiters-depth-2-face) fontified t)) . -334) (undo-tree-id6582 . -11) (undo-tree-id6583 . -11) (undo-tree-id6584 . -11) (undo-tree-id6585 . -11) (undo-tree-id6586 . -13) (undo-tree-id6587 . -11) 347) nil (26132 1673 385945 2000) 0 nil])
([nil nil ((#("name()." 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-3-face) fontified t) 5 6 (face (rainbow-delimiters-depth-3-face) fontified t) 6 7 (fontified t)) . -327) (undo-tree-id6576 . -7) (undo-tree-id6577 . -7) (undo-tree-id6578 . -7) (undo-tree-id6579 . -7) (undo-tree-id6580 . -7) (undo-tree-id6581 . -7) 334) nil (26132 1673 385939 835000) 0 nil])
([nil nil ((#("get_" 0 4 (fontified t)) . -323) (undo-tree-id6570 . -4) (undo-tree-id6571 . -4) (undo-tree-id6572 . -4) (undo-tree-id6573 . -4) (undo-tree-id6574 . -4) (undo-tree-id6575 . -4) 327) nil (26132 1673 385935 237000) 0 nil])
([nil nil ((#("x." 0 2 (fontified t)) . -321) (undo-tree-id6564 . -2) (undo-tree-id6565 . -2) (undo-tree-id6566 . -2) (undo-tree-id6567 . -2) (undo-tree-id6568 . -2) (undo-tree-id6569 . -2) 323) nil (26132 1673 385930 453000) 0 nil])
([nil nil ((#("x| " 0 3 (fontified t)) . -318) (undo-tree-id6558 . -3) (undo-tree-id6559 . -3) (undo-tree-id6560 . -3) (undo-tree-id6561 . -3) (undo-tree-id6562 . -3) (undo-tree-id6563 . -3) 321) nil (26132 1673 385851 358000) 0 nil])
([nil nil ((#("filter(|" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-2-face) fontified t) 7 8 (fontified t)) . -310) (undo-tree-id6552 . -8) (undo-tree-id6553 . -8) (undo-tree-id6554 . -8) (undo-tree-id6555 . -8) (undo-tree-id6556 . -8) (undo-tree-id6557 . -8) 318) nil (26132 1673 385846 83000) 0 nil])
([nil nil ((310 . 311)) nil (26132 1673 385841 898000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 319 320 nil nil nil nil #s(yas--exit 321 nil))) #s(yas--exit 321 nil) 44 nil #s(yas--field 1 319 320 nil nil nil nil #s(yas--exit 321 nil)) nil nil)) (310 . 321) (#("find_map(${1:f})$0" 0 18 (fontified nil)) . 310) (310 . 328) (#("f" 0 1 (fontified nil)) . 310) (310 . 311) (#("find_map(…) (as Iterator)" 0 25 (fontified nil)) . -310) (310 . 335) (#("f" 0 1 (fontified t)) . -310) (undo-tree-id6551 . -1) 311) nil (26132 1673 385840 925000) 0 nil])
([nil nil ((apply yas--snippet-revive 310 321 #s(yas--snippet nil (#s(yas--field 1 319 320 nil nil nil nil #s(yas--exit 321 nil))) #s(yas--exit 321 nil) 44 nil #s(yas--field 1 319 320 nil nil nil nil #s(yas--exit 321 nil)) nil nil))) nil (26132 1673 385838 552000) 0 nil])
([nil nil ((#("f)" 0 1 (fontified t) 1 2 (face (rainbow-delimiters-depth-2-face) fontified t)) . -319) (undo-tree-id6549 . -2) (undo-tree-id6550 . -2) 321) nil (26132 1673 385837 714000) 0 nil])
([nil nil ((#("map(" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-2-face) fontified t)) . -315) (undo-tree-id6547 . -4) (undo-tree-id6548 . -4) 319) nil (26132 1673 385835 556000) 0 nil])
([nil nil ((#("find_" 0 5 (fontified t)) . -310) (undo-tree-id6545 . -5) (undo-tree-id6546 . -5) 315) nil (26132 1673 385833 480000) 0 nil])
([nil nil ((310 . 312)) nil (26132 1673 385831 499000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 315 324 nil nil nil nil #s(yas--exit 325 nil))) #s(yas--exit 325 nil) 45 nil #s(yas--field 1 315 324 nil nil nil nil #s(yas--exit 325 nil)) nil nil)) (310 . 325) (#("find(${1:predicate})$0" 0 22 (fontified nil)) . 310) (310 . 332) (#("fi" 0 2 (fontified nil)) . 310) (310 . 312) (#("find(…) (as Iterator)" 0 21 (fontified nil)) . -310) (310 . 331) (#("fi" 0 2 (fontified t)) . -310) (undo-tree-id6544 . -2) 312) nil (26132 1673 385830 364000) 0 nil])
([nil nil ((apply yas--snippet-revive 310 325 #s(yas--snippet nil (#s(yas--field 1 315 324 nil nil nil nil #s(yas--exit 325 nil))) #s(yas--exit 325 nil) 45 nil #s(yas--field 1 315 324 nil nil nil nil #s(yas--exit 325 nil)) nil nil))) nil (26132 1673 385828 104000) 0 nil])
([nil nil ((#("predicate)" 0 9 (fontified t) 9 10 (face (rainbow-delimiters-depth-2-face) fontified t)) . -315) (undo-tree-id6542 . -10) (undo-tree-id6543 . -10) 325) nil (26132 1673 385827 398000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -314) (undo-tree-id6540 . -1) (undo-tree-id6541 . -1) 315) nil (26132 1673 385825 296000) 0 nil])
([nil nil ((314 . 315)) nil (26132 1673 385823 219000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -314) (undo-tree-id6538 . -1) (undo-tree-id6539 . -1) 315) nil (26132 1673 385822 457000) 0 nil])
([nil nil ((314 . 316)) nil (26132 1673 385820 500000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 319 329 nil nil nil t #s(yas--exit 330 nil))) #s(yas--exit 330 nil) 46 nil #s(yas--field 1 319 329 nil nil nil t #s(yas--exit 330 nil)) nil nil)) (310 . 321) (#("find_map(${1:f})$0" 0 18 (fontified nil)) . 310) (310 . 328) (#("find_m" 0 6 (fontified nil)) . 310) (310 . 316) (#("find_map(…) (as Iterator)" 0 25 (fontified nil)) . -310) (310 . 335) (#("find_m" 0 6 (fontified t)) . -310) (undo-tree-id6536 . -4) (undo-tree-id6537 . -6) 316) nil (26132 1673 385819 437000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -319) (undo-tree-id6534 . -1) (undo-tree-id6535 . -1) 320) nil (26132 1673 385816 279000) 0 nil])
([nil nil ((319 . 321)) nil (26132 1673 385814 244000) 0 nil])
([nil nil ((320 . 321)) nil (26132 1673 385813 705000) 0 nil])
([nil nil ((322 . 327)) nil (26132 1673 385812 918000) 0 nil])
([nil nil ((apply yas--snippet-revive 325 335 #s(yas--snippet nil nil #s(yas--exit 335 nil) 47 nil nil #s(yas--field 1 319 329 nil nil nil t #s(yas--exit 330 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 335 nil) 47 nil nil #s(yas--field 1 319 329 nil nil nil t #s(yas--exit 330 nil)) nil)) (325 . 335) (#("get_name()$0" 0 12 (fontified nil)) . 325) (325 . 337) (#("ge" 0 2 (fontified nil)) . 325) (325 . 327) (#("get_name()" 0 10 (fontified nil)) . -325) (325 . 335) (#("ge" 0 2 (fontified t)) . -325) (undo-tree-id6532 . -2) (undo-tree-id6533 . -2) 327) nil (26132 1673 385811 669000) 0 nil])
([nil nil ((335 . 336)) nil (26132 1673 385808 554000) 0 nil])
([nil nil ((#("name()." 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-3-face) fontified t) 5 6 (face (rainbow-delimiters-depth-3-face) fontified t) 6 7 (fontified t)) . -329) (undo-tree-id6530 . -7) (undo-tree-id6531 . -7) 336) nil (26132 1673 385807 876000) 0 nil])
([nil nil ((apply yas--snippet-revive 310 330 #s(yas--snippet nil (#s(yas--field 1 319 329 nil nil nil t #s(yas--exit 330 nil))) #s(yas--exit 330 nil) 46 nil #s(yas--field 1 319 329 nil nil nil t #s(yas--exit 330 nil)) nil nil))) nil (26132 1673 385805 832000) 0 nil])
([nil nil ((#("get_)" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-2-face) fontified t)) . -325) (undo-tree-id6528 . -5) (undo-tree-id6529 . -5) 330) nil (26132 1673 385804 890000) 0 nil])
([nil nil ((#("x." 0 2 (fontified t)) . -323) (undo-tree-id6526 . -2) (undo-tree-id6527 . -2) 325) nil (26132 1673 385802 471000) 0 nil])
([nil nil ((#("x| " 0 3 (fontified t)) . -320) (undo-tree-id6524 . -3) (undo-tree-id6525 . -3) 323) nil (26132 1673 385800 108000) 0 nil])
([nil nil ((#("map(|" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-2-face) fontified t) 4 5 (fontified t)) . -315) (undo-tree-id6522 . -5) (undo-tree-id6523 . -5) 320) nil (26132 1673 385797 782000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -314) (undo-tree-id6520 . -1) (undo-tree-id6521 . -1) 315) nil (26132 1673 385794 960000) 0 nil])
([nil nil ((314 . 316)) nil (26132 1673 385792 764000) 0 nil])
([nil nil ((315 . 316)) nil (26132 1673 385792 223000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -315) (undo-tree-id6519 . -1) 316) nil (26132 1673 385791 487000) 0 nil])
([nil nil ((315 . 316)) nil (26132 1673 385789 869000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -315) (undo-tree-id6518 . -1) 316) nil (26132 1673 385789 282000) 0 nil])
([nil nil ((315 . 317)) nil (26132 1673 385787 936000) 0 nil])
([nil nil ((316 . 317)) nil (26132 1673 385787 392000) 0 nil])
([nil nil ((318 . 321)) nil (26132 1673 385786 848000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -320) (undo-tree-id6517 . -1) 321) nil (26132 1673 385785 975000) 0 nil])
([nil nil ((320 . 322)) nil (26132 1673 385784 631000) 0 nil])
([nil nil ((apply yas--snippet-revive 321 331 #s(yas--snippet nil nil #s(yas--exit 331 nil) 48 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 331 nil) 48 nil nil nil nil)) (321 . 331) (#("get_name()$0" 0 12 (fontified nil)) . 321) (321 . 333) (#("g" 0 1 (fontified nil)) . 321) (321 . 322) (#("get_name()" 0 10 (fontified nil)) . -321) (321 . 331) (#("g" 0 1 (fontified t)) . -321) (undo-tree-id6516 . -1) 322) nil (26132 1673 385783 543000) 0 nil])
([nil nil ((331 . 332)) nil (26132 1673 385780 693000) 0 nil])
([nil nil ((332 . 333)) nil (26132 1673 385779 993000) 0 nil])
([nil nil ((apply yas--snippet-revive 332 340 #s(yas--snippet nil nil #s(yas--exit 340 nil) 49 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 340 nil) 49 nil nil nil nil)) (332 . 340) (#("unwrap()$0" 0 10 (fontified nil)) . 332) (332 . 342) (#("u" 0 1 (fontified nil)) . 332) (332 . 333) (#("unwrap()" 0 8 (fontified nil)) . -332) (332 . 340) (#("u" 0 1 (fontified t)) . -332) (undo-tree-id6510 . -1) (undo-tree-id6511 . -1) (undo-tree-id6512 . -1) (undo-tree-id6513 . -1) (undo-tree-id6514 . -1) (undo-tree-id6515 . -1) 333) nil (26132 1673 385778 431000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . 340)) nil (26132 1673 385768 443000) 0 nil])
([nil nil ((340 . 341)) nil (26132 1673 385767 855000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -340) (undo-tree-id6506 . -1) (undo-tree-id6507 . -1) (undo-tree-id6508 . -1) (undo-tree-id6509 . -1) 341) nil (26132 1673 385766 519000) 0 nil])
([nil nil ((340 . 341)) nil (26132 1673 385756 668000) 0 nil])
([nil nil ((340 . 344)) nil (26132 1673 385756 55000) 0 nil])
([nil nil ((nil rear-nonsticky nil 359 . 360) (nil fontified nil 343 . 360) (343 . 360)) nil (26132 1673 385754 581000) 0 nil])
([nil nil ((362 . 363)) nil (26132 1673 385750 165000) 0 nil])
([nil nil ((155 . 158) (t 26132 1673 433896 481000)) nil (26132 1694 986893 118000) 0 nil])
([nil nil ((#("m" 0 1 (face font-lock-variable-name-face fontified t)) . -155) (undo-tree-id6592 . -1) (undo-tree-id6593 . -1) (undo-tree-id6594 . -1) (undo-tree-id6595 . -1) (undo-tree-id6596 . -1) (undo-tree-id6597 . -1) (undo-tree-id6598 . -1) (undo-tree-id6599 . -1) (undo-tree-id6600 . -1) (undo-tree-id6601 . -1) (undo-tree-id6602 . -1) (undo-tree-id6603 . -1) (undo-tree-id6604 . -1) (undo-tree-id6605 . -1) (undo-tree-id6606 . -1) (undo-tree-id6607 . -1) (undo-tree-id6608 . -1) (undo-tree-id6609 . -1) (undo-tree-id6610 . -1) (#("u" 0 1 (face font-lock-variable-name-face fontified t)) . -156) (undo-tree-id6611 . -1) (undo-tree-id6612 . -1) (undo-tree-id6613 . -1) (undo-tree-id6614 . -1) (undo-tree-id6615 . -1) (undo-tree-id6616 . -1) (undo-tree-id6617 . -1) (undo-tree-id6618 . -1) (undo-tree-id6619 . -1) (undo-tree-id6620 . -1) (undo-tree-id6621 . -1) (undo-tree-id6622 . -1) (undo-tree-id6623 . -1) (undo-tree-id6624 . -1) (#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -157) (undo-tree-id6625 . -1) (undo-tree-id6626 . -1) (undo-tree-id6627 . -1) (undo-tree-id6628 . -1) (undo-tree-id6629 . -1) (undo-tree-id6630 . -1) (undo-tree-id6631 . -1) 158) nil (26132 1694 986887 918000) 0 nil])
([nil nil ((#("    sensors.for_each(|x| info!(\"Chip Name: {}\", x.get_name().unwrap_or(\"None\".to_string())));
" 0 4 (fontified t) 4 11 (fontified t) 11 12 (fontified t) 12 20 (fontified t) 20 21 (face (rainbow-delimiters-depth-2-face) fontified t) 21 25 (fontified t) 25 30 (face font-lock-preprocessor-face fontified t) 30 31 (face (rainbow-delimiters-depth-3-face) fontified t) 31 46 (face font-lock-string-face fontified t) 46 58 (fontified t) 58 59 (face (rainbow-delimiters-depth-4-face) fontified t) 59 60 (face (rainbow-delimiters-depth-4-face) fontified t) 60 70 (fontified t) 70 71 (face (rainbow-delimiters-depth-4-face) fontified t) 71 77 (face font-lock-string-face fontified t) 77 87 (fontified t) 87 88 (face (rainbow-delimiters-depth-5-face) fontified t) 88 89 (face (rainbow-delimiters-depth-5-face) fontified t) 89 90 (face (rainbow-delimiters-depth-4-face) fontified t) 90 91 (face (rainbow-delimiters-depth-3-face) fontified t) 91 92 (face (rainbow-delimiters-depth-2-face) fontified t) 92 93 (fontified t) 93 94 (fontified t)) . -193) (undo-tree-id6632 . -94) (undo-tree-id6633 . -94) (undo-tree-id6634 . -4) (undo-tree-id6635 . -8) (undo-tree-id6636 . -23) (undo-tree-id6637 . -23) (undo-tree-id6638 . -23) (undo-tree-id6639 . -23) (undo-tree-id6640 . -23) (undo-tree-id6641 . -23) (undo-tree-id6642 . -23) (undo-tree-id6643 . -23) (undo-tree-id6644 . -23) (undo-tree-id6645 . -23) (undo-tree-id6646 . -23) (undo-tree-id6647 . -93) (undo-tree-id6648 . -93) (undo-tree-id6649 . -93) (undo-tree-id6650 . -93) (undo-tree-id6651 . -93) (undo-tree-id6652 . -93) (undo-tree-id6653 . -93) (undo-tree-id6654 . -93) (undo-tree-id6655 . -93) (undo-tree-id6656 . -93) (undo-tree-id6657 . -93) (undo-tree-id6658 . -93) (undo-tree-id6659 . -93) (undo-tree-id6660 . -93) (undo-tree-id6661 . -93) (undo-tree-id6662 . -93) (undo-tree-id6663 . -93) (undo-tree-id6664 . -93) (undo-tree-id6665 . -93) (undo-tree-id6666 . -93) (undo-tree-id6667 . -93) (undo-tree-id6668 . -93) (undo-tree-id6669 . -93) (undo-tree-id6670 . -93) (undo-tree-id6671 . -93) (undo-tree-id6672 . -93) (undo-tree-id6673 . -93) (undo-tree-id6674 . -93) (undo-tree-id6675 . -93) (undo-tree-id6676 . -37) (undo-tree-id6677 . -37) (undo-tree-id6678 . -37) (undo-tree-id6679 . -37) (undo-tree-id6680 . -37) (undo-tree-id6681 . -37) (undo-tree-id6682 . -37) (undo-tree-id6683 . -41) (undo-tree-id6684 . -41) (undo-tree-id6685 . -37) (undo-tree-id6686 . -37) (undo-tree-id6687 . -41) (undo-tree-id6688 . -41) (undo-tree-id6689 . -94) (undo-tree-id6690 . -94) (undo-tree-id6691 . -37) (undo-tree-id6692 . -94) (undo-tree-id6693 . -94) (undo-tree-id6694 . -94) (undo-tree-id6695 . -94) (undo-tree-id6696 . -94) (undo-tree-id6697 . -94) (undo-tree-id6698 . -17) (undo-tree-id6699 . -17) (undo-tree-id6700 . -17) (undo-tree-id6701 . -17) (undo-tree-id6702 . -17) (undo-tree-id6703 . -17) (undo-tree-id6704 . -17) (undo-tree-id6705 . -17) (undo-tree-id6706 . -17) (undo-tree-id6707 . -17) (undo-tree-id6708 . -17) (undo-tree-id6709 . -17) (undo-tree-id6710 . -17) (undo-tree-id6711 . -17) (undo-tree-id6712 . -17) (undo-tree-id6713 . -17) (undo-tree-id6714 . -17) (undo-tree-id6715 . -17) (undo-tree-id6716 . -16) (undo-tree-id6717 . -20) (undo-tree-id6718 . -20) (undo-tree-id6719 . -16) (undo-tree-id6720 . -16) (undo-tree-id6721 . -20) (undo-tree-id6722 . -20) (undo-tree-id6723 . -94) (undo-tree-id6724 . -94) (undo-tree-id6725 . -16) (undo-tree-id6726 . -94) (undo-tree-id6727 . -94) (undo-tree-id6728 . -94) (undo-tree-id6729 . -94) (undo-tree-id6730 . -94) (undo-tree-id6731 . -94) (undo-tree-id6732 . -94) (undo-tree-id6733 . -94) (undo-tree-id6734 . -94) (undo-tree-id6735 . -94) (undo-tree-id6736 . -94) (undo-tree-id6737 . -94) (undo-tree-id6738 . -94) (undo-tree-id6739 . -94) (undo-tree-id6740 . -94) (undo-tree-id6741 . -94) (undo-tree-id6742 . -94) (undo-tree-id6743 . -94) (undo-tree-id6744 . -94) (undo-tree-id6745 . -94) (undo-tree-id6746 . -94) (undo-tree-id6747 . -94) (undo-tree-id6748 . -94) (undo-tree-id6749 . -94) (undo-tree-id6750 . -94) (undo-tree-id6751 . -94) (undo-tree-id6752 . -94) (undo-tree-id6753 . -94) (undo-tree-id6754 . -94) (undo-tree-id6755 . -94) (undo-tree-id6756 . -94) (undo-tree-id6757 . -94) (undo-tree-id6758 . -94) (undo-tree-id6759 . -94) (undo-tree-id6760 . -94) (undo-tree-id6761 . -94) (undo-tree-id6762 . -94) (undo-tree-id6763 . -94) (undo-tree-id6764 . -94) (undo-tree-id6765 . -94) (undo-tree-id6766 . -94) (undo-tree-id6767 . -94) (undo-tree-id6768 . -94) (undo-tree-id6769 . -94) (undo-tree-id6770 . -94) (undo-tree-id6771 . -94) (undo-tree-id6772 . -94) (undo-tree-id6773 . -94) (undo-tree-id6774 . -94) (undo-tree-id6775 . -94) (undo-tree-id6776 . -94) (undo-tree-id6777 . -94) (undo-tree-id6778 . -6) (undo-tree-id6779 . -6) (undo-tree-id6780 . -6) (undo-tree-id6781 . -6) (undo-tree-id6782 . -6) (undo-tree-id6783 . -6) (undo-tree-id6784 . -6) (undo-tree-id6785 . -6) (undo-tree-id6786 . -6) (undo-tree-id6787 . -6) (undo-tree-id6788 . -6) (undo-tree-id6789 . -6) (undo-tree-id6790 . -6) (undo-tree-id6791 . -6) (undo-tree-id6792 . -6) (undo-tree-id6793 . -6) (undo-tree-id6794 . -6) (undo-tree-id6795 . -6) (undo-tree-id6796 . -6) (undo-tree-id6797 . -6) (undo-tree-id6798 . -93) (undo-tree-id6799 . -93) (undo-tree-id6800 . -93) (undo-tree-id6801 . -93) (undo-tree-id6802 . -93) (undo-tree-id6803 . -93) (undo-tree-id6804 . -93) (undo-tree-id6805 . -93) (undo-tree-id6806 . -93) (undo-tree-id6807 . -93) (undo-tree-id6808 . -93) (undo-tree-id6809 . -93) (undo-tree-id6810 . -93) (undo-tree-id6811 . -93) (undo-tree-id6812 . -93) (undo-tree-id6813 . -93) (undo-tree-id6814 . -93) (undo-tree-id6815 . -93) (undo-tree-id6816 . -93) (undo-tree-id6817 . -93) (undo-tree-id6818 . -93) (undo-tree-id6819 . -93) (undo-tree-id6820 . -93) (undo-tree-id6821 . -93) (undo-tree-id6822 . -93) (undo-tree-id6823 . -93) (undo-tree-id6824 . -93) (undo-tree-id6825 . -93) (undo-tree-id6826 . -93) (undo-tree-id6827 . -93) (undo-tree-id6828 . -93) (undo-tree-id6829 . -93) (undo-tree-id6830 . -93) (undo-tree-id6831 . -93) (undo-tree-id6832 . -93) (undo-tree-id6833 . -93) (undo-tree-id6834 . -93) (undo-tree-id6835 . -93) (undo-tree-id6836 . -93) (undo-tree-id6837 . -93) (undo-tree-id6838 . -93) (undo-tree-id6839 . -93) (undo-tree-id6840 . -93) (undo-tree-id6841 . -93) (undo-tree-id6842 . -93) (undo-tree-id6843 . -93) (undo-tree-id6844 . -93) (undo-tree-id6845 . -93) (undo-tree-id6846 . -93) (undo-tree-id6847 . -93) (undo-tree-id6848 . -93) (undo-tree-id6849 . -93) (undo-tree-id6850 . -93) (undo-tree-id6851 . -93) (undo-tree-id6852 . -93) (undo-tree-id6853 . -93) (undo-tree-id6854 . -93) (undo-tree-id6855 . -93) (undo-tree-id6856 . -93) (undo-tree-id6857 . -93) (undo-tree-id6858 . -93) (undo-tree-id6859 . -93) (undo-tree-id6860 . -13) (undo-tree-id6861 . -13) (undo-tree-id6862 . -13) (undo-tree-id6863 . -13) (undo-tree-id6864 . -13) (undo-tree-id6865 . -13) (undo-tree-id6866 . -12) (undo-tree-id6867 . -15) (undo-tree-id6868 . -15) (undo-tree-id6869 . -12) (undo-tree-id6870 . -12) (undo-tree-id6871 . -15) (undo-tree-id6872 . -15) (undo-tree-id6873 . -94) (undo-tree-id6874 . -94) (undo-tree-id6875 . -12) (undo-tree-id6876 . -94) (undo-tree-id6877 . -94) (undo-tree-id6878 . -94) (undo-tree-id6879 . -94) (undo-tree-id6880 . -94) (undo-tree-id6881 . -94) (undo-tree-id6882 . -94) 287 (t 26132 1695 3897 805000)) nil (26132 1771 255582 126000) 0 nil])
([nil nil ((#("let chip = sensors.find(|x| x.get_name().unwrap()==\"coretemp-isa-0000\");" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 8 (face font-lock-variable-name-face fontified t) 8 11 (fontified t) 11 19 (fontified t) 19 23 (fontified t) 23 24 (face (rainbow-delimiters-depth-2-face) fontified t) 24 30 (fontified t) 30 38 (fontified t) 38 39 (face (rainbow-delimiters-depth-3-face) fontified t) 39 40 (face (rainbow-delimiters-depth-3-face) fontified t) 40 41 (fontified t) 41 47 (fontified t) 47 48 (face (rainbow-delimiters-depth-3-face) fontified t) 48 49 (face (rainbow-delimiters-depth-3-face) fontified t) 49 51 (fontified t) 51 52 (face font-lock-string-face fontified t) 52 68 (face font-lock-string-face fontified t) 68 69 (face font-lock-string-face fontified t rear-nonsticky t) 69 70 (face font-lock-string-face fontified t) 70 71 (face (rainbow-delimiters-depth-2-face) fontified t) 71 72 (fontified t)) . 197) (undo-tree-id6885 . -19) (undo-tree-id6886 . -19) (undo-tree-id6887 . -24) (undo-tree-id6888 . -19) (undo-tree-id6889 . -52) (undo-tree-id6890 . -3) (undo-tree-id6891 . -8) (undo-tree-id6892 . -18) (undo-tree-id6893 . -18) (undo-tree-id6894 . -18) (undo-tree-id6895 . -18) (undo-tree-id6896 . -18) (undo-tree-id6897 . -18) (undo-tree-id6898 . -18) (undo-tree-id6899 . -18) (undo-tree-id6900 . -18) (undo-tree-id6901 . -72) (t 26132 1771 303902 489000)) nil (26132 1790 352538 634000) 0 nil])
([nil nil ((#("let sensors = Sensors::new().into_iter();" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 11 (face font-lock-variable-name-face fontified t) 11 14 (fontified t) 14 21 (face font-lock-type-face fontified t) 21 23 (fontified t) 23 26 (fontified t) 26 27 (face (rainbow-delimiters-depth-2-face) fontified t) 27 28 (face (rainbow-delimiters-depth-2-face) fontified t) 28 29 (fontified t) 29 38 (fontified t) 38 39 (face (rainbow-delimiters-depth-2-face) fontified t) 39 40 (face (rainbow-delimiters-depth-2-face) fontified t) 40 41 (fontified t)) . 151) (undo-tree-id6883 . 37) (undo-tree-id6884 . -41)) nil (26132 1790 352523 36000) 0 nil])
([nil nil ((151 . 166) (t 26132 1790 400570 328000)) nil (26132 1824 694035 3000) 0 nil])
([nil nil ((163 . 170) (#("sen" 0 3 (fontified nil)) . 163) (163 . 166) (#("sensors" 0 7 (fontified nil)) . -163) (163 . 170) (#("sen" 0 3 (fontified t)) . -163) (undo-tree-id6947 . -3) (undo-tree-id6948 . -1) (undo-tree-id6949 . -1) (undo-tree-id6950 . -1) (undo-tree-id6951 . -2) (undo-tree-id6952 . -2) (undo-tree-id6953 . -2) (undo-tree-id6954 . -3) (undo-tree-id6955 . -3) (undo-tree-id6956 . -3) (undo-tree-id6957 . -3) 166) nil (26132 1824 694033 507000) 0 nil])
([nil nil ((#("sensors" 0 7 (fontified t)) . -163) (undo-tree-id6936 . -7) (undo-tree-id6937 . -7) (undo-tree-id6938 . -7) (undo-tree-id6939 . -7) (undo-tree-id6940 . -7) (undo-tree-id6941 . -7) (undo-tree-id6942 . -7) (undo-tree-id6943 . -7) (undo-tree-id6944 . -7) (undo-tree-id6945 . -7) (undo-tree-id6946 . -7) 170) nil (26132 1824 694023 763000) 0 nil])
([nil nil ((163 . 164)) nil (26132 1824 694016 67000) 0 nil])
([nil nil ((163 . 170) (#("S" 0 1 (fontified nil)) . 163) (163 . 164) (#("Sensors" 0 7 (fontified nil)) . -163) (163 . 170) (#("S" 0 1 (face font-lock-type-face fontified t)) . -163) (undo-tree-id6930 . -1) (undo-tree-id6931 . -1) (undo-tree-id6932 . -1) (undo-tree-id6933 . -1) (undo-tree-id6934 . -1) (undo-tree-id6935 . -1) 164) nil (26132 1824 694014 982000) 0 nil])
([nil nil ((170 . 173)) nil (26132 1824 694009 940000) 0 nil])
([nil nil ((apply yas--snippet-revive 172 177 #s(yas--snippet nil nil #s(yas--exit 177 nil) 50 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 177 nil) 50 nil nil nil nil)) (172 . 177) (#("new()$0" 0 7 (fontified nil)) . 172) (172 . 179) (#("n" 0 1 (fontified nil)) . 172) (172 . 173) (#("new()" 0 5 (fontified nil)) . -172) (172 . 177) (#("n" 0 1 (fontified t)) . -172) (undo-tree-id6924 . -1) (undo-tree-id6925 . -1) (undo-tree-id6926 . -1) (undo-tree-id6927 . -1) (undo-tree-id6928 . -1) (undo-tree-id6929 . -1) 173) nil (26132 1824 694008 698000) 0 nil])
([nil nil ((177 . 180)) nil (26132 1824 694003 337000) 0 nil])
([nil nil ((181 . 185) (#("        " 0 8 (fontified nil)) . 180) (180 . 188) (#("    " 0 4 (fontified nil)) . 180) (undo-tree-id6920 . -4) (undo-tree-id6921 . -4) (undo-tree-id6922 . -4) (undo-tree-id6923 . -4) (179 . 185)) nil (26132 1824 694002 284000) 0 nil])
([nil nil ((180 . 188)) nil (26132 1824 693998 524000) 0 nil])
([nil nil ((188 . 189)) nil (26132 1824 693997 956000) 0 nil])
([nil nil ((apply yas--snippet-revive 188 198 #s(yas--snippet nil nil #s(yas--exit 197 nil) 51 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 197 nil) 51 nil nil nil nil)) (188 . 198) (#("println!($0)" 0 12 (fontified nil)) . 188) (188 . 200) (#("p" 0 1 (fontified nil)) . 188) (188 . 189) (#("println!(…)" 0 11 (fontified nil)) . -188) (188 . 199) (#("p" 0 1 (fontified t)) . -188) (undo-tree-id6915 . -1) (undo-tree-id6916 . -1) (undo-tree-id6917 . -1) (undo-tree-id6918 . -1) (undo-tree-id6919 . -1) 189) nil (26132 1824 693996 643000) 0 nil])
([nil nil ((197 . 199)) nil (26132 1824 693991 542000) 0 nil])
([nil nil ((198 . 200)) nil (26132 1824 693990 909000) 0 nil])
([nil nil ((201 . 204)) nil (26132 1824 693990 301000) 0 nil])
([nil nil ((203 . 207) (#("c" 0 1 (fontified nil)) . 203) (203 . 204) (#("chip" 0 4 (fontified nil)) . -203) (203 . 207) (#("c" 0 1 (fontified t)) . -203) (undo-tree-id6907 . -1) (undo-tree-id6908 . -1) (undo-tree-id6909 . -1) (undo-tree-id6910 . -1) (undo-tree-id6911 . -1) (undo-tree-id6912 . -1) (undo-tree-id6913 . -1) (undo-tree-id6914 . -1) 204) nil (26132 1824 693988 994000) 0 nil])
([nil nil ((207 . 208)) nil (26132 1824 693981 915000) 0 nil])
([nil nil ((apply yas--snippet-revive 208 218 #s(yas--snippet nil nil #s(yas--exit 218 nil) 52 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 218 nil) 52 nil nil nil nil)) (208 . 218) (#("get_name()$0" 0 12 (fontified nil)) . 208) (208 . 220) (#("get_name()" 0 10 (fontified nil)) . -208) (208 . 218)) nil (26132 1824 693980 954000) 0 nil])
([nil nil ((218 . 220)) nil (26132 1824 693979 424000) 0 nil])
([nil nil ((apply yas--snippet-revive 219 227 #s(yas--snippet nil nil #s(yas--exit 227 nil) 53 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 227 nil) 53 nil nil nil nil)) (219 . 227) (#("unwrap()$0" 0 10 (fontified nil)) . 219) (219 . 229) (#("u" 0 1 (fontified nil)) . 219) (219 . 220) (#("unwrap()" 0 8 (fontified nil)) . -219) (219 . 227) (#("u" 0 1 (fontified t)) . -219) (undo-tree-id6902 . -1) (undo-tree-id6903 . -1) (undo-tree-id6904 . -1) (undo-tree-id6905 . -1) (undo-tree-id6906 . -1) 220) nil (26132 1824 693976 788000) 0 nil])
([nil nil ((228 . 229)) nil (26132 1824 693961 105000) 0 nil])
([nil nil ((241 . 245) (t 26132 1824 710572 434000)) nil (26132 1854 90811 60000) 0 nil])
([nil nil ((245 . 252)) nil (26132 1854 90810 272000) 0 nil])
([nil nil ((#("j" 0 1 (face font-lock-variable-name-face fontified t)) . -251) (undo-tree-id7065 . -1) (undo-tree-id7066 . -1) (undo-tree-id7067 . -1) (undo-tree-id7068 . -1) (undo-tree-id7069 . -1) 252) nil (26132 1854 90809 417000) 0 nil])
([nil nil ((251 . 257)) nil (26132 1854 90805 869000) 0 nil])
([nil nil ((256 . 263) (#("S" 0 1 (fontified nil)) . 256) (256 . 257) (#("Sensors" 0 7 (fontified nil)) . -256) (256 . 263) (#("S" 0 1 (face font-lock-type-face fontified t)) . -256) (undo-tree-id7059 . -1) (undo-tree-id7060 . -1) (undo-tree-id7061 . -1) (undo-tree-id7062 . -1) (undo-tree-id7063 . -1) (undo-tree-id7064 . -1) 257) nil (26132 1854 90804 663000) 0 nil])
([nil nil ((263 . 266)) nil (26132 1854 90799 676000) 0 nil])
([nil nil ((apply yas--snippet-revive 265 270 #s(yas--snippet nil nil #s(yas--exit 270 nil) 54 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 270 nil) 54 nil nil nil nil)) (265 . 270) (#("new()$0" 0 7 (fontified nil)) . 265) (265 . 272) (#("n" 0 1 (fontified nil)) . 265) (265 . 266) (#("new()" 0 5 (fontified nil)) . -265) (265 . 270) (#("n" 0 1 (fontified t)) . -265) (undo-tree-id7053 . -1) (undo-tree-id7054 . -1) (undo-tree-id7055 . -1) (undo-tree-id7056 . -1) (undo-tree-id7057 . -1) (undo-tree-id7058 . -1) 266) nil (26132 1854 90798 478000) 0 nil])
([nil nil ((270 . 273)) nil (26132 1854 90793 390000) 0 nil])
([nil nil ((apply yas--snippet-revive 271 282 #s(yas--snippet nil nil #s(yas--exit 282 nil) 55 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 282 nil) 55 nil nil nil nil)) (271 . 282) (#("into_iter()$0" 0 13 (fontified nil)) . 271) (271 . 284) (#("in" 0 2 (fontified nil)) . 271) (271 . 273) (#("into_iter() (as IntoIterator)" 0 29 (fontified nil)) . -271) (271 . 300) (#("in" 0 2 (face font-lock-keyword-face fontified t)) . -271) (undo-tree-id7044 . -2) (undo-tree-id7045 . -1) (undo-tree-id7046 . -1) (undo-tree-id7047 . -1) (undo-tree-id7048 . -2) (undo-tree-id7049 . -2) (undo-tree-id7050 . -2) (undo-tree-id7051 . -2) (undo-tree-id7052 . -2) 273) nil (26132 1854 90791 916000) 0 nil])
([nil nil ((282 . 284)) nil (26132 1854 90784 723000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -282) (undo-tree-id7027 . -1) (undo-tree-id7028 . -1) (undo-tree-id7029 . -1) (undo-tree-id7030 . -1) (undo-tree-id7031 . -1) (undo-tree-id7032 . -1) (undo-tree-id7033 . -1) (undo-tree-id7034 . -1) (undo-tree-id7035 . -1) (undo-tree-id7036 . -1) (undo-tree-id7037 . -1) (#("." 0 1 (fontified t)) . -283) (undo-tree-id7038 . -1) (undo-tree-id7039 . -1) (undo-tree-id7040 . -1) (undo-tree-id7041 . -1) (undo-tree-id7042 . -1) (undo-tree-id7043 . -1) 284) nil (26132 1854 90783 455000) 0 nil])
([nil nil ((282 . 284)) nil (26132 1854 90772 196000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -282) (undo-tree-id7011 . -1) (undo-tree-id7012 . -1) (undo-tree-id7013 . -1) (undo-tree-id7014 . -1) (undo-tree-id7015 . -1) (undo-tree-id7016 . -1) (undo-tree-id7017 . -1) (undo-tree-id7018 . -1) (undo-tree-id7019 . -1) (undo-tree-id7020 . -1) (undo-tree-id7021 . -1) (undo-tree-id7022 . -1) (#("." 0 1 (fontified t)) . -283) (undo-tree-id7023 . -1) (undo-tree-id7024 . -1) (undo-tree-id7025 . -1) (undo-tree-id7026 . -1) 284) nil (26132 1854 90770 917000) 0 nil])
([nil nil ((282 . 284)) nil (26132 1854 90759 550000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 288 290 nil nil nil t #s(yas--exit 291 nil))) #s(yas--exit 291 nil) 56 nil #s(yas--field 1 288 290 nil nil nil t #s(yas--exit 291 nil)) nil nil)) (283 . 298) (#("find(${1:predicate})$0" 0 22 (fontified nil)) . 283) (283 . 305) (#("f" 0 1 (fontified nil)) . 283) (283 . 284) (#("find(…) (as Iterator)" 0 21 (fontified nil)) . -283) (283 . 304) (#("f" 0 1 (fontified t)) . -283) (undo-tree-id7004 . -1) (undo-tree-id7005 . -1) (undo-tree-id7006 . -1) (undo-tree-id7007 . -1) (undo-tree-id7008 . -1) (undo-tree-id7009 . -1) (undo-tree-id7010 . -1) 284) nil (26132 1854 90758 111000) 0 nil])
([nil nil ((289 . 290) (#("predicate" 0 9 (fontified nil)) . 289) (undo-tree-id7003 . -9) (288 . 289)) nil (26132 1854 90751 691000) 0 nil])
([nil nil ((apply yas--snippet-revive 283 291 #s(yas--snippet nil (#s(yas--field 1 288 290 nil nil nil t #s(yas--exit 291 nil))) #s(yas--exit 291 nil) 56 nil #s(yas--field 1 288 290 nil nil nil t #s(yas--exit 291 nil)) nil nil))) nil (26132 1854 90749 859000) 0 nil])
([nil nil ((289 . 290)) nil (26132 1854 90749 290000) 0 nil])
([nil nil ((291 . 294)) nil (26132 1854 90748 693000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -293) (undo-tree-id6998 . -1) (undo-tree-id6999 . -1) (undo-tree-id7000 . -1) (undo-tree-id7001 . -1) (undo-tree-id7002 . -1) 294) nil (26132 1854 90747 804000) 0 nil])
([nil nil ((293 . 295)) nil (26132 1854 90744 30000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -293) (undo-tree-id6979 . -1) (undo-tree-id6980 . -1) (undo-tree-id6981 . -1) (undo-tree-id6982 . -1) (undo-tree-id6983 . -1) (undo-tree-id6984 . -1) (undo-tree-id6985 . -1) (undo-tree-id6986 . -1) (undo-tree-id6987 . -1) (undo-tree-id6988 . -1) (undo-tree-id6989 . -1) (#("," 0 1 (fontified t)) . -294) (undo-tree-id6990 . -1) (undo-tree-id6991 . -1) (undo-tree-id6992 . -1) (undo-tree-id6993 . -1) (undo-tree-id6994 . -1) (undo-tree-id6995 . -1) (undo-tree-id6996 . -1) (undo-tree-id6997 . -1) 295) nil (26132 1854 90742 673000) 0 nil])
([nil nil ((293 . 295)) nil (26132 1854 90730 61000) 0 nil])
([nil nil ((apply yas--snippet-revive 294 304 #s(yas--snippet nil nil #s(yas--exit 304 nil) 57 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 304 nil) 57 nil nil nil nil)) (294 . 304) (#("get_name()$0" 0 12 (fontified nil)) . 294) (294 . 306) (#("g" 0 1 (fontified nil)) . 294) (294 . 295) (#("get_name()" 0 10 (fontified nil)) . -294) (294 . 304) (#("g" 0 1 (fontified t)) . -294) (undo-tree-id6974 . -1) (undo-tree-id6975 . -1) (undo-tree-id6976 . -1) (undo-tree-id6977 . -1) (undo-tree-id6978 . -1) 295) nil (26132 1854 90728 717000) 0 nil])
([nil nil ((304 . 306)) nil (26132 1854 90722 730000) 0 nil])
([nil nil ((apply yas--snippet-revive 305 313 #s(yas--snippet nil nil #s(yas--exit 313 nil) 58 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 313 nil) 58 nil nil nil nil)) (305 . 313) (#("unwrap()$0" 0 10 (fontified nil)) . 305) (305 . 315) (#("u" 0 1 (fontified nil)) . 305) (305 . 306) (#("unwrap()" 0 8 (fontified nil)) . -305) (305 . 313) (#("u" 0 1 (fontified t)) . -305) (undo-tree-id6969 . -1) (undo-tree-id6970 . -1) (undo-tree-id6971 . -1) (undo-tree-id6972 . -1) (undo-tree-id6973 . -1) 306) nil (26132 1854 90720 689000) 0 nil])
([nil nil ((313 . 315)) nil (26132 1854 90641 417000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -313) (undo-tree-id6958 . -1) (undo-tree-id6959 . -1) (undo-tree-id6960 . -1) (undo-tree-id6961 . -1) (undo-tree-id6962 . -1) (undo-tree-id6963 . -1) (undo-tree-id6964 . -1) (#("/" 0 1 (fontified t)) . -314) (undo-tree-id6965 . -1) (undo-tree-id6966 . -1) (undo-tree-id6967 . -1) (undo-tree-id6968 . -1) 315) nil (26132 1854 90639 614000) 0 nil])
([nil nil ((313 . 317)) nil (26132 1854 90626 942000) 0 nil])
([nil nil ((nil rear-nonsticky nil 332 . 333) (nil fontified nil 316 . 333) (316 . 333)) nil (26132 1854 90625 403000) 0 nil])
([nil nil ((335 . 336)) nil (26132 1854 90621 118000) 0 nil])
([nil nil ((92 . 94) (t 26132 1854 107240 905000)) nil (26132 1887 973817 542000) 0 nil])
([nil nil ((93 . 113)) nil (26132 1887 973816 776000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . 113) (113 . 117) (112 . 114)) nil (26132 1887 973816 101000) 0 nil])
([nil nil ((113 . 117)) nil (26132 1887 973815 276000) 0 nil])
([nil nil ((117 . 121)) nil (26132 1887 973814 751000) 0 nil])
([nil nil ((121 . 127)) nil (26132 1887 973814 132000) 0 nil])
([nil nil ((#("Chip" 0 4 (face font-lock-type-face fontified t)) . -123) (undo-tree-id7087 . -4) (undo-tree-id7088 . -1) (undo-tree-id7089 . -1) (undo-tree-id7090 . -1) (undo-tree-id7091 . -1) (undo-tree-id7092 . -1) (undo-tree-id7093 . -2) (undo-tree-id7094 . -2) (undo-tree-id7095 . -2) (undo-tree-id7096 . -2) (undo-tree-id7097 . -2) (undo-tree-id7098 . -2) (undo-tree-id7099 . -3) (undo-tree-id7100 . -3) (undo-tree-id7101 . -4) (undo-tree-id7102 . -4) (undo-tree-id7103 . -4) (undo-tree-id7104 . -4) (undo-tree-id7105 . -4) 127) nil (26132 1887 973812 702000) 0 nil])
([nil nil ((123 . 124)) nil (26132 1887 973656 824000) 0 nil])
([nil nil ((#("S" 0 1 (face font-lock-type-face fontified t)) . -123) (undo-tree-id7082 . -1) (undo-tree-id7083 . -1) (undo-tree-id7084 . -1) (undo-tree-id7085 . -1) (undo-tree-id7086 . -1) 124) nil (26132 1887 973656 66000) 0 nil])
([nil nil ((123 . 124)) nil (26132 1887 973652 387000) 0 nil])
([nil nil ((123 . 130) (#("s" 0 1 (fontified nil)) . 123) (123 . 124) (#("sensors" 0 7 (fontified nil)) . -123) (123 . 130) (#("s" 0 1 (fontified t)) . -123) (undo-tree-id7077 . -1) (undo-tree-id7078 . -1) (undo-tree-id7079 . -1) (undo-tree-id7080 . -1) (undo-tree-id7081 . -1) 124) nil (26132 1887 973650 989000) 0 nil])
([nil nil ((130 . 133)) nil (26132 1887 973646 540000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -132) (undo-tree-id7072 . -1) (undo-tree-id7073 . -1) (undo-tree-id7074 . -1) (undo-tree-id7075 . -1) (undo-tree-id7076 . -1) 133) nil (26132 1887 973645 493000) 0 nil])
([nil nil ((132 . 133)) nil (26132 1887 973641 18000) 0 nil])
([nil nil ((132 . 136) (#("C" 0 1 (fontified nil)) . 132) (132 . 133) (#("Chip" 0 4 (fontified nil)) . -132) (132 . 136) (#("C" 0 1 (face font-lock-type-face fontified t)) . -132) (undo-tree-id7070 . -1) (undo-tree-id7071 . -1) 133) nil (26132 1887 973638 805000) 0 nil])
([nil nil ((136 . 137)) nil (26132 1887 973627 952000) 0 nil])
([nil nil ((140 . 142) (t 26132 1888 23909 654000)) nil (26132 1934 490902 990000) 0 nil])
([nil nil ((141 . 142)) nil (26132 1934 490902 139000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -141) (undo-tree-id7179 . -1) (undo-tree-id7180 . -1) (undo-tree-id7181 . -1) (undo-tree-id7182 . -1) (undo-tree-id7183 . -1) 142) nil (26132 1934 490901 332000) 0 nil])
([nil nil ((141 . 145)) nil (26132 1934 490897 61000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -144) (undo-tree-id7172 . -1) (undo-tree-id7173 . -1) (undo-tree-id7174 . -1) (undo-tree-id7175 . -1) (undo-tree-id7176 . -1) (undo-tree-id7177 . -1) (undo-tree-id7178 . -1) 145) nil (26132 1934 490896 42000) 0 nil])
([nil nil ((144 . 145)) nil (26132 1934 490891 212000) 0 nil])
([nil nil ((145 . 147)) nil (26132 1934 490890 679000) 0 nil])
([nil nil ((146 . 156) (#("C" 0 1 (fontified nil)) . 146) (146 . 147) (#("Controller" 0 10 (fontified nil)) . -146) (146 . 156) (#("C" 0 1 (face font-lock-type-face fontified t)) . -146) (undo-tree-id7166 . -1) (undo-tree-id7167 . -1) (undo-tree-id7168 . -1) (undo-tree-id7169 . -1) (undo-tree-id7170 . -1) (undo-tree-id7171 . -1) 147) nil (26132 1934 490889 525000) 0 nil])
([nil nil ((156 . 159)) nil (26132 1934 490884 66000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . 160) (160 . 164) (160 . 161) (#("    " 0 4 (fontified nil)) . 159) (159 . 163) (158 . 160)) nil (26132 1934 490883 311000) 0 nil])
([nil nil ((159 . 163)) nil (26132 1934 490882 239000) 0 nil])
([nil nil ((163 . 167)) nil (26132 1934 490881 703000) 0 nil])
([nil nil ((#("N" 0 1 (face font-lock-type-face fontified t)) . -166) (undo-tree-id7163 . -1) (undo-tree-id7164 . -1) (undo-tree-id7165 . -1) 167) nil (26132 1934 490880 901000) 0 nil])
([nil nil ((166 . 171)) nil (26132 1934 490877 678000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -170) (undo-tree-id7160 . -1) (undo-tree-id7161 . -1) (undo-tree-id7162 . -1) 171) nil (26132 1934 490876 675000) 0 nil])
([nil nil ((170 . 176)) nil (26132 1934 490874 347000) 0 nil])
([nil nil ((175 . 185) (#("C" 0 1 (fontified nil)) . 175) (175 . 176) (#("Controller" 0 10 (fontified nil)) . -175) (175 . 185) (#("C" 0 1 (face font-lock-type-face fontified t)) . -175) (undo-tree-id7153 . -1) (undo-tree-id7154 . -1) (undo-tree-id7155 . -1) (undo-tree-id7156 . -1) (undo-tree-id7157 . -1) (undo-tree-id7158 . -1) (undo-tree-id7159 . -1) 176) nil (26132 1934 490873 172000) 0 nil])
([nil nil ((185 . 188)) nil (26132 1934 490867 771000) 0 nil])
([nil nil ((189 . 193) (#("        " 0 8 (fontified nil)) . 188) (188 . 196) (#("    " 0 4 (fontified nil)) . 188) (undo-tree-id7149 . -4) (undo-tree-id7150 . -4) (undo-tree-id7151 . -4) (undo-tree-id7152 . -4) (187 . 193)) nil (26132 1934 490866 845000) 0 nil])
([nil nil ((188 . 196)) nil (26132 1934 490863 617000) 0 nil])
([nil nil ((#("let chip = Sensors::new().into_iter().find(|x| x.get_name().unwrap()==\"coretemp-isa-0000\");" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 8 (face font-lock-variable-name-face fontified t) 8 11 (fontified t) 11 18 (face font-lock-type-face fontified t) 18 20 (fontified t) 20 23 (fontified t) 23 24 (face (rainbow-delimiters-depth-2-face) fontified t) 24 25 (face (rainbow-delimiters-depth-2-face) fontified t) 25 26 (fontified t) 26 35 (fontified t) 35 36 (face (rainbow-delimiters-depth-2-face) fontified t) 36 37 (face (rainbow-delimiters-depth-2-face) fontified t) 37 38 (fontified t) 38 42 (fontified t) 42 43 (face (rainbow-delimiters-depth-2-face) fontified t) 43 49 (fontified t) 49 57 (fontified t) 57 58 (face (rainbow-delimiters-depth-3-face) fontified t) 58 59 (face (rainbow-delimiters-depth-3-face) fontified t) 59 60 (fontified t) 60 66 (fontified t) 66 67 (face (rainbow-delimiters-depth-3-face) fontified t) 67 68 (face (rainbow-delimiters-depth-3-face) fontified t) 68 70 (fontified t) 70 71 (face font-lock-string-face fontified t) 71 87 (face font-lock-string-face fontified t) 87 88 (face font-lock-string-face fontified t rear-nonsticky t) 88 89 (face font-lock-string-face fontified t) 89 90 (face (rainbow-delimiters-depth-2-face) fontified t) 90 91 (fontified t)) . 359) (undo-tree-id7142 . -71) (undo-tree-id7143 . -48) (undo-tree-id7144 . -71) (undo-tree-id7145 . -71) (undo-tree-id7146 . -71) (undo-tree-id7147 . -4) (undo-tree-id7148 . -91)) nil (26132 1934 490862 776000) 0 nil])
([nil nil ((nil rear-nonsticky nil 282 . 283) (nil fontified nil 282 . 283) (nil fontified nil 281 . 282) (nil fontified nil 280 . 281) (nil fontified nil 279 . 280) (nil fontified nil 263 . 279) (nil fontified nil 262 . 263) (nil fontified nil 260 . 262) (nil fontified nil 259 . 260) (nil fontified nil 258 . 259) (nil fontified nil 252 . 258) (nil fontified nil 251 . 252) (nil fontified nil 250 . 251) (nil fontified nil 249 . 250) (nil fontified nil 241 . 249) (nil fontified nil 235 . 241) (nil fontified nil 234 . 235) (nil fontified nil 230 . 234) (nil fontified nil 229 . 230) (nil fontified nil 228 . 229) (nil fontified nil 227 . 228) (nil fontified nil 218 . 227) (nil fontified nil 217 . 218) (nil fontified nil 216 . 217) (nil fontified nil 215 . 216) (nil fontified nil 212 . 215) (nil fontified nil 210 . 212) (nil fontified nil 203 . 210) (nil fontified nil 200 . 203) (nil fontified nil 196 . 200) (nil fontified nil 195 . 196) (nil fontified nil 192 . 195) (192 . 283)) nil (26132 1934 490856 736000) 0 nil])
([nil nil ((188 . 196) (#("    " 0 4 (fontified t)) . 188) (undo-tree-id7139 . -4) (undo-tree-id7140 . -4) (undo-tree-id7141 . -4) 192) nil (26132 1934 490852 234000) 0 nil])
([nil nil ((123 . 124)) nil (26132 1934 490849 503000) 0 nil])
([nil nil ((#("P" 0 1 (face font-lock-type-face fontified t)) . -123) (undo-tree-id7132 . -1) (undo-tree-id7133 . -1) (undo-tree-id7134 . -1) (undo-tree-id7135 . -1) (undo-tree-id7136 . -1) (undo-tree-id7137 . -1) (undo-tree-id7138 . -1) 124) nil (26132 1934 490848 560000) 0 nil])
([nil nil ((123 . 125)) nil (26132 1934 490842 811000) 0 nil])
([nil nil ((apply yas--snippet-revive 123 131 #s(yas--snippet nil nil #s(yas--exit 130 nil) 59 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 130 nil) 59 nil nil nil nil)) (123 . 131) (#("Option<$0>" 0 10 (fontified nil)) . 123) (123 . 133) (#("Opsensors" 0 2 (fontified nil) 2 9 (face font-lock-type-face fontified nil)) . 123) (undo-tree-id7117 . -9) (undo-tree-id7118 . -9) (undo-tree-id7119 . 7) (123 . 125) (#("Option<…>" 0 9 (fontified nil)) . -123) (123 . 132) (#("Op" 0 2 (face font-lock-type-face fontified t)) . -123) (undo-tree-id7120 . -2) (undo-tree-id7121 . -2) (undo-tree-id7122 . -1) (undo-tree-id7123 . -1) (undo-tree-id7124 . -2) (undo-tree-id7125 . -2) (undo-tree-id7126 . -2) (undo-tree-id7127 . -2) (undo-tree-id7128 . -2) (undo-tree-id7129 . -2) (undo-tree-id7130 . -2) (undo-tree-id7131 . -2) 125) nil (26132 1934 490840 987000) 0 nil])
([nil nil ((#(">" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -130) (undo-tree-id7112 . -1) (undo-tree-id7113 . -1) (undo-tree-id7114 . -1) (undo-tree-id7115 . -1) (undo-tree-id7116 . -1) 131) nil (26132 1934 490828 979000) 0 nil])
([nil nil ((130 . 131)) nil (26132 1934 490824 990000) 0 nil])
([nil nil ((130 . 137) (#("s" 0 1 (fontified nil)) . 130) (130 . 131) (#("sensors" 0 7 (fontified nil)) . -130) (130 . 137) (#("s" 0 1 (face font-lock-constant-face fontified t)) . -130) (undo-tree-id7106 . -1) (undo-tree-id7107 . -1) (undo-tree-id7108 . -1) (undo-tree-id7109 . -1) (undo-tree-id7110 . -1) (undo-tree-id7111 . -1) 131) nil (26132 1934 490822 572000) 0 nil])
([nil nil ((143 . 144)) nil (26132 1934 490809 154000) 0 nil])
([nil nil ((301 . 305) (#("        " 0 8 (fontified nil)) . 300) (300 . 308) (#("    " 0 4 (fontified nil)) . 300) (undo-tree-id7277 . -4) (undo-tree-id7278 . -4) (304 . 305) (t 26132 1934 507245 841000)) nil (26132 1945 477349 915000) 0 nil])
([nil nil ((300 . 308)) nil (26132 1945 477347 222000) 0 nil])
([nil nil ((308 . 309)) nil (26132 1945 477346 677000) 0 nil])
([nil nil ((#("S" 0 1 (face font-lock-type-face fontified t)) . -308) (undo-tree-id7272 . -1) (undo-tree-id7273 . -1) (undo-tree-id7274 . -1) (undo-tree-id7275 . -1) (undo-tree-id7276 . -1) 309) nil (26132 1945 477345 856000) 0 nil])
([nil nil ((308 . 309)) nil (26132 1945 477342 118000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 325 325 nil nil nil t #s(yas--exit 327 nil))) #s(yas--exit 327 nil) 60 nil #s(yas--field 1 325 325 nil nil nil t #s(yas--exit 327 nil)) nil nil)) (308 . 331) (#("Controller { chip: ${1:()} }$0" 0 30 (fontified nil)) . 308) (308 . 338) (#("C" 0 1 (fontified nil)) . 308) (308 . 309) (#("Controller {…}" 0 14 (fontified nil)) . -308) (308 . 322) (#("C" 0 1 (face font-lock-type-face fontified t)) . -308) (undo-tree-id7267 . -1) (undo-tree-id7268 . -1) (undo-tree-id7269 . -1) (undo-tree-id7270 . -1) (undo-tree-id7271 . -1) 309) nil (26132 1945 477340 840000) 0 nil])
([nil nil ((#("()" 0 1 (face (rainbow-delimiters-depth-4-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-4-face) fontified nil)) . 328) (undo-tree-id7266 . -2) (327 . 328)) nil (26132 1945 477335 373000) 0 nil])
([nil nil ((327 . 331) (#("c" 0 1 (fontified nil)) . 327) (undo-tree-id7257 . -1) (327 . 328) (#("chip" 0 4 (fontified nil)) . -327) (undo-tree-id7258 . -4) (327 . 331) (#("c" 0 1 (fontified t)) . -327) (undo-tree-id7259 . -1) (undo-tree-id7260 . -1) (undo-tree-id7261 . -1) (undo-tree-id7262 . -1) (undo-tree-id7263 . -1) (undo-tree-id7264 . -1) (undo-tree-id7265 . -1) 328) nil (26132 1945 477333 308000) 0 nil])
([nil nil ((#("chip" 0 4 (fontified t)) . -327) (undo-tree-id7244 . -4) (undo-tree-id7245 . -4) (undo-tree-id7246 . -4) (undo-tree-id7247 . -4) (undo-tree-id7248 . -4) (undo-tree-id7249 . -4) (undo-tree-id7250 . -4) (undo-tree-id7251 . -4) (undo-tree-id7252 . -4) (undo-tree-id7253 . -4) (undo-tree-id7254 . -4) (undo-tree-id7255 . -4) (undo-tree-id7256 . -4) 331) nil (26132 1945 477326 18000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -325) (undo-tree-id7184 . -1) (undo-tree-id7185 . -1) (undo-tree-id7186 . -1) (undo-tree-id7187 . -1) (undo-tree-id7188 . -1) (undo-tree-id7189 . -1) (undo-tree-id7190 . -1) (undo-tree-id7191 . -1) (undo-tree-id7192 . -1) (undo-tree-id7193 . -1) (undo-tree-id7194 . -1) (undo-tree-id7195 . -1) (undo-tree-id7196 . -1) (undo-tree-id7197 . -1) (undo-tree-id7198 . -1) (undo-tree-id7199 . -1) (undo-tree-id7200 . -1) (undo-tree-id7201 . -1) (undo-tree-id7202 . -1) (undo-tree-id7203 . -1) (undo-tree-id7204 . -1) (undo-tree-id7205 . -1) (undo-tree-id7206 . -1) (undo-tree-id7207 . -1) (undo-tree-id7208 . -1) (undo-tree-id7209 . -1) (undo-tree-id7210 . -1) (undo-tree-id7211 . -1) (undo-tree-id7212 . -1) (undo-tree-id7213 . -1) (undo-tree-id7214 . -1) (#(" " 0 1 (fontified t)) . -326) (undo-tree-id7215 . -1) (undo-tree-id7216 . -1) (undo-tree-id7217 . -1) (undo-tree-id7218 . -1) (undo-tree-id7219 . -1) (undo-tree-id7220 . -1) (undo-tree-id7221 . -1) (undo-tree-id7222 . -1) (undo-tree-id7223 . -1) (undo-tree-id7224 . -1) (undo-tree-id7225 . -1) (undo-tree-id7226 . -1) (undo-tree-id7227 . -1) (undo-tree-id7228 . -1) (undo-tree-id7229 . -1) (undo-tree-id7230 . -1) (undo-tree-id7231 . -1) (undo-tree-id7232 . -1) (undo-tree-id7233 . -1) (undo-tree-id7234 . -1) (undo-tree-id7235 . -1) (undo-tree-id7236 . -1) (undo-tree-id7237 . -1) (undo-tree-id7238 . -1) (undo-tree-id7239 . -1) (undo-tree-id7240 . -1) (undo-tree-id7241 . -1) (undo-tree-id7242 . -1) (undo-tree-id7243 . -1) 327) nil (26132 1945 477313 862000) 0 nil])
([nil nil ((apply yas--snippet-revive 308 327 #s(yas--snippet nil (#s(yas--field 1 325 325 nil nil nil t #s(yas--exit 327 nil))) #s(yas--exit 327 nil) 60 nil #s(yas--field 1 325 325 nil nil nil t #s(yas--exit 327 nil)) nil nil))) nil (26132 1945 477267 618000) 0 nil])
([nil nil ((490 . 491) (t 26132 1945 493913 182000)) nil (26132 1958 882566 858000) 0 nil])
([nil nil ((490 . 500) (#("C" 0 1 (fontified nil)) . 490) (490 . 491) (#("Controller" 0 10 (fontified nil)) . -490) (490 . 500) (#("C" 0 1 (face font-lock-type-face fontified t)) . -490) (undo-tree-id7279 . -1) (undo-tree-id7280 . -1) (undo-tree-id7281 . -1) (undo-tree-id7282 . -1) (undo-tree-id7283 . -1) (undo-tree-id7284 . -1) 491) nil (26132 1958 882564 996000) 0 nil])
([nil nil ((500 . 502)) nil (26132 1958 882549 430000) 0 nil])
([nil nil ((apply yas--snippet-revive 502 507 #s(yas--snippet nil nil #s(yas--exit 507 nil) 61 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 507 nil) 61 nil nil nil nil)) (502 . 507) (#("new()$0" 0 7 (fontified nil)) . 502) (502 . 509) (#("new()" 0 5 (fontified nil)) . -502) (502 . 507)) nil (26132 1958 882547 386000) 0 nil])
([nil nil ((505 . 506) (522 . 523) (490 . 490) (490 . 505)) nil (26132 1958 882544 319000) 0 nil])
([nil nil ((504 . 505)) nil (26132 1958 882539 45000) 0 nil])
([nil nil ((607 . 612) (t 26132 1958 900580 672000)) nil (26132 1976 8060 839000) 0 nil])
([nil nil ((#("print" 0 5 (fontified t)) . 607) (undo-tree-id7285 . -1) (undo-tree-id7286 . -1) (undo-tree-id7287 . -2) (undo-tree-id7288 . -2) (undo-tree-id7289 . -3) (undo-tree-id7290 . -3) (undo-tree-id7291 . -3) (undo-tree-id7292 . -4) (undo-tree-id7293 . -4) (undo-tree-id7294 . -5) (undo-tree-id7295 . -5) (undo-tree-id7296 . -5) (undo-tree-id7297 . -5) (undo-tree-id7298 . -5)) nil (26132 1976 8059 105000) 0 nil])
([nil nil ((145 . 150)) nil (26132 1976 8043 109000) 0 nil])
([nil nil ((150 . 156)) nil (26132 1976 8041 909000) 0 nil])
([nil nil ((156 . 160)) nil (26132 1976 8037 598000) 0 nil])
([nil nil ((92 . 95) (t 26132 1976 23915 56000)) nil (26132 1987 340568 347000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -94) (undo-tree-id7323 . -1) (undo-tree-id7324 . -1) (undo-tree-id7325 . -1) (undo-tree-id7326 . -1) (undo-tree-id7327 . -1) (undo-tree-id7328 . -1) 95) nil (26132 1987 340567 196000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -93) (undo-tree-id7310 . -1) (undo-tree-id7311 . -1) (undo-tree-id7312 . -1) (undo-tree-id7313 . -1) (undo-tree-id7314 . -1) (undo-tree-id7315 . -1) (undo-tree-id7316 . -1) (undo-tree-id7317 . -1) (undo-tree-id7318 . -1) (undo-tree-id7319 . -1) (undo-tree-id7320 . -1) (undo-tree-id7321 . -1) (undo-tree-id7322 . -1) 94) nil (26132 1987 340561 934000) 0 nil])
([nil nil ((93 . 95)) nil (26132 1987 340550 996000) 0 nil])
([nil nil ((94 . 97)) nil (26132 1987 340549 685000) 0 nil])
([nil nil ((53 . 54) (67 . 77) (94 . 94) (94 . 101) (#("def" 0 3 (fontified nil)) . 94) (94 . 97) (#("default (use std::default)" 0 26 (fontified nil)) . -94) (94 . 120) (#("def" 0 3 (face font-lock-preprocessor-face fontified t)) . -94) (undo-tree-id7299 . -3) (undo-tree-id7300 . -1) (undo-tree-id7301 . -1) (undo-tree-id7302 . -1) (undo-tree-id7303 . -1) (undo-tree-id7304 . -2) (undo-tree-id7305 . -2) (undo-tree-id7306 . -3) (undo-tree-id7307 . -3) (undo-tree-id7308 . -3) (undo-tree-id7309 . -3) 97) nil (26132 1987 340544 615000) 0 nil])
([nil nil ((361 . 363) (t 26132 1987 390582 421000)) nil (26132 1996 846752 376000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -362) (undo-tree-id7347 . -1) (undo-tree-id7348 . -1) (undo-tree-id7349 . -1) (undo-tree-id7350 . -1) (undo-tree-id7351 . -1) (undo-tree-id7352 . -1) (undo-tree-id7353 . -1) (undo-tree-id7354 . -1) (undo-tree-id7355 . -1) 363) nil (26132 1996 846751 87000) 0 nil])
([nil nil ((362 . 368)) nil (26132 1996 846744 166000) 0 nil])
([nil nil ((365 . 372) (#("def" 0 3 (fontified nil)) . 365) (365 . 368) (#("default" 0 7 (fontified nil)) . -365) (365 . 372) (#("def" 0 3 (fontified t)) . -365) (undo-tree-id7333 . -3) (undo-tree-id7334 . -3) (undo-tree-id7335 . -1) (undo-tree-id7336 . -1) (undo-tree-id7337 . -1) (undo-tree-id7338 . -1) (undo-tree-id7339 . -1) (undo-tree-id7340 . -2) (undo-tree-id7341 . -2) (undo-tree-id7342 . -2) (undo-tree-id7343 . -3) (undo-tree-id7344 . -3) (undo-tree-id7345 . -3) (undo-tree-id7346 . -3) 368) nil (26132 1996 846742 599000) 0 nil])
([nil nil ((372 . 375)) nil (26132 1996 846731 459000) 0 nil])
([nil nil ((374 . 381) (#("D" 0 1 (fontified nil)) . 374) (374 . 375) (#("Default" 0 7 (fontified nil)) . -374) (374 . 381) (#("D" 0 1 (face font-lock-type-face fontified t)) . -374) (undo-tree-id7329 . -1) (undo-tree-id7330 . -1) (undo-tree-id7331 . -1) (undo-tree-id7332 . -1) 375) nil (26132 1996 846727 323000) 0 nil])
([nil nil ((#("Default" 0 7 (face font-lock-type-face fontified t)) . -374) (undo-tree-id7388 . -7) (undo-tree-id7389 . -7) (undo-tree-id7390 . -7) (undo-tree-id7391 . -7) (undo-tree-id7392 . -7) (undo-tree-id7393 . -7) (undo-tree-id7394 . -7) (undo-tree-id7395 . -7) (undo-tree-id7396 . -7) (undo-tree-id7397 . -7) (undo-tree-id7398 . -7) (undo-tree-id7399 . -7) (undo-tree-id7400 . -7) (undo-tree-id7401 . -7) (undo-tree-id7402 . -7) (undo-tree-id7403 . -7) (undo-tree-id7404 . -7) (undo-tree-id7405 . -7) 381 (t 26132 1996 897249 671000)) nil (26132 2005 139873 331000) 0 nil])
([nil nil ((#("default::" 0 7 (face font-lock-constant-face fontified t) 7 9 (fontified t)) . -365) (undo-tree-id7366 . -9) (undo-tree-id7367 . -9) (undo-tree-id7368 . -9) (undo-tree-id7369 . -9) (undo-tree-id7370 . -9) (undo-tree-id7371 . -9) (undo-tree-id7372 . -9) (undo-tree-id7373 . -9) (undo-tree-id7374 . -9) (undo-tree-id7375 . -9) (undo-tree-id7376 . -9) (undo-tree-id7377 . -9) (undo-tree-id7378 . -9) (undo-tree-id7379 . -9) (undo-tree-id7380 . -9) (undo-tree-id7381 . -9) (undo-tree-id7382 . -9) (undo-tree-id7383 . -9) (undo-tree-id7384 . -9) (undo-tree-id7385 . -9) (undo-tree-id7386 . -9) (undo-tree-id7387 . -9) 374) nil (26132 2005 139860 745000) 0 nil])
([nil nil ((365 . 368)) nil (26132 2005 139844 944000) 0 nil])
([nil nil ((365 . 372) (#("Def" 0 3 (fontified nil)) . 365) (365 . 368) (#("Default" 0 7 (fontified nil)) . -365) (365 . 372) (#("Def" 0 3 (face font-lock-type-face fontified t)) . -365) (undo-tree-id7356 . -3) (undo-tree-id7357 . -3) (undo-tree-id7358 . -1) (undo-tree-id7359 . -1) (undo-tree-id7360 . -1) (undo-tree-id7361 . -2) (undo-tree-id7362 . -2) (undo-tree-id7363 . -2) (undo-tree-id7364 . -3) (undo-tree-id7365 . -3) 368) nil (26132 2005 139843 204000) 0 nil])
([nil nil ((372 . 374)) nil (26132 2005 139830 378000) 0 nil])
([nil nil ((apply yas--snippet-revive 374 383 #s(yas--snippet nil nil #s(yas--exit 383 nil) 62 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 383 nil) 62 nil nil nil nil)) (374 . 383) (#("default()$0" 0 11 (fontified nil)) . 374) (374 . 385) (#("default() (as Default)" 0 22 (fontified nil)) . -374) (374 . 396)) nil (26132 2005 139825 409000) 0 nil])
([nil nil ((#("default" 0 7 (face font-lock-preprocessor-face fontified t)) . -105) (undo-tree-id7434 . -7) (undo-tree-id7435 . -7) (undo-tree-id7436 . -7) (undo-tree-id7437 . -7) (undo-tree-id7438 . -7) (undo-tree-id7439 . -7) 112 (t 26132 2005 157250 178000)) nil (26132 2020 435124 310000) 0 nil])
([nil nil ((105 . 112)) nil (26132 2020 435118 911000) 0 nil])
([nil nil ((#("default" 0 7 (fontified t)) . -70) (undo-tree-id7432 . -7) (undo-tree-id7433 . -7) 77) nil (26132 2020 435117 982000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -68) (undo-tree-id7420 . -1) (undo-tree-id7421 . -1) (undo-tree-id7422 . -1) (undo-tree-id7423 . -1) (undo-tree-id7424 . -1) (undo-tree-id7425 . -1) (undo-tree-id7426 . -1) (undo-tree-id7427 . -1) (#(" " 0 1 (fontified t)) . -69) (undo-tree-id7428 . -1) (undo-tree-id7429 . -1) (undo-tree-id7430 . -1) (undo-tree-id7431 . -1) 70) nil (26132 2020 436021 295000) 0 nil])
([nil nil ((#("}" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -68) (undo-tree-id7449 . -1) (undo-tree-id7450 . -1) (undo-tree-id7451 . -1) (undo-tree-id7452 . -1) (undo-tree-id7453 . -1) 69) nil (26132 2022 591961 457000) 0 nil] [nil nil ((#("Duration}" 0 8 (face font-lock-type-face fontified t) 8 9 (face (rainbow-delimiters-depth-1-face) fontified t)) . -60) (undo-tree-id7406 . -9) (undo-tree-id7407 . -8) (undo-tree-id7408 . -8) (undo-tree-id7409 . -8) (undo-tree-id7410 . -8) (undo-tree-id7411 . -8) (undo-tree-id7412 . -8) (undo-tree-id7413 . -8) (undo-tree-id7414 . -8) (undo-tree-id7415 . -8) (undo-tree-id7416 . -8) (undo-tree-id7417 . -9) (undo-tree-id7418 . -9) (undo-tree-id7419 . -9) 69) ((60 . 69)) (26132 2020 435102 72000) 0 nil])
([nil nil ((#("{" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -53) (undo-tree-id7440 . -1) (undo-tree-id7441 . -1) (undo-tree-id7442 . -1) (undo-tree-id7443 . -1) (undo-tree-id7444 . -1) (undo-tree-id7445 . -1) (undo-tree-id7446 . -1) (undo-tree-id7447 . -1) (undo-tree-id7448 . -1) 54) nil (26132 2022 591954 307000) 0 nil])
nil
([nil nil ((#("Default" 0 7 (face font-lock-preprocessor-face fontified t)) . -94) (undo-tree-id7478 . -7) (undo-tree-id7479 . -7) 101 (t 26132 2022 640584 584000)) nil (26132 2027 630012 274000) 0 nil])
([nil nil ((94 . 95)) nil (26132 2027 630010 117000) 0 nil])
([nil nil ((#("D" 0 1 (face font-lock-preprocessor-face fontified t)) . -94) (undo-tree-id7472 . -1) (undo-tree-id7473 . -1) (undo-tree-id7474 . -1) (undo-tree-id7475 . -1) (undo-tree-id7476 . -1) (undo-tree-id7477 . -1) 95) nil (26132 2027 630009 255000) 0 nil])
([nil nil ((94 . 96)) nil (26132 2027 630004 551000) 0 nil])
([nil nil ((#("Debug" 0 5 (face font-lock-preprocessor-face fontified t)) . 101) (undo-tree-id7461 . -5) (apply yas--snippet-revive 94 107 #s(yas--snippet nil (#s(yas--field 0 101 106 nil nil nil nil nil)) nil 63 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 0 101 106 nil nil nil nil nil)) nil 63 nil nil nil nil)) (94 . 107) (#("derive(${0:Debug})" 0 18 (fontified nil)) . 94) (94 . 112) (#("de" 0 2 (fontified nil)) . 94) (94 . 96) (#("derive(…)" 0 9 (fontified nil)) . -94) (94 . 103) (#("de" 0 2 (face font-lock-preprocessor-face fontified t)) . -94) (undo-tree-id7462 . -2) (undo-tree-id7463 . -2) (undo-tree-id7464 . -1) (undo-tree-id7465 . -1) (undo-tree-id7466 . -1) (undo-tree-id7467 . -2) (undo-tree-id7468 . -2) (undo-tree-id7469 . -2) (undo-tree-id7470 . -2) (undo-tree-id7471 . -2) 96) nil (26132 2027 630002 616000) 0 nil])
([nil nil ((101 . 102)) nil (26132 2027 629992 244000) 0 nil])
([nil nil ((101 . 108) (#("D" 0 1 (fontified nil)) . 101) (101 . 102) (#("Default" 0 7 (fontified nil)) . -101) (101 . 108) (#("D" 0 1 (face font-lock-preprocessor-face fontified t)) . -101) (undo-tree-id7454 . -1) (undo-tree-id7455 . -1) (undo-tree-id7456 . -1) (undo-tree-id7457 . -1) (undo-tree-id7458 . -1) (undo-tree-id7459 . -1) (undo-tree-id7460 . -1) 102) nil (26132 2027 629988 58000) 0 nil])
([nil nil ((390 . 394) (#("    " 0 4 (fontified nil)) . 389) (undo-tree-id7541 . -4) (undo-tree-id7542 . -4) (undo-tree-id7543 . -4) (undo-tree-id7544 . -4) (388 . 394) (t 26132 2027 647251 559000)) nil (26132 2050 636419 496000) 0 nil])
([nil nil ((394 . 397)) nil (26132 2050 636415 493000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -395) (undo-tree-id7526 . -1) (undo-tree-id7527 . -1) (undo-tree-id7528 . -1) (undo-tree-id7529 . -1) (undo-tree-id7530 . -1) (undo-tree-id7531 . -1) (undo-tree-id7532 . -1) (undo-tree-id7533 . -1) (undo-tree-id7534 . -1) (undo-tree-id7535 . -1) (#("n" 0 1 (fontified t)) . -396) (undo-tree-id7536 . -1) (undo-tree-id7537 . -1) (undo-tree-id7538 . -1) (undo-tree-id7539 . -1) (undo-tree-id7540 . -1) 397) nil (26132 2050 636414 201000) 0 nil])
([nil nil ((395 . 406)) nil (26132 2050 636404 682000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -405) (undo-tree-id7523 . -1) (undo-tree-id7524 . -1) (undo-tree-id7525 . -1) 406) nil (26132 2050 636403 778000) 0 nil])
([nil nil ((405 . 407)) nil (26132 2050 636400 966000) 0 nil])
([nil nil ((406 . 411)) nil (26132 2050 636400 381000) 0 nil])
([nil nil ((412 . 415)) nil (26132 2050 636399 754000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -412) (undo-tree-id7488 . -1) (undo-tree-id7489 . -1) (undo-tree-id7490 . -1) (undo-tree-id7491 . -1) (undo-tree-id7492 . -1) (undo-tree-id7493 . -1) (undo-tree-id7494 . -1) (undo-tree-id7495 . -1) (undo-tree-id7496 . -1) (undo-tree-id7497 . -1) (undo-tree-id7498 . -1) (undo-tree-id7499 . -1) (undo-tree-id7500 . -1) (undo-tree-id7501 . -1) (undo-tree-id7502 . -1) (undo-tree-id7503 . -1) (undo-tree-id7504 . -1) (undo-tree-id7505 . -1) (undo-tree-id7506 . -1) (undo-tree-id7507 . -1) (undo-tree-id7508 . -1) (undo-tree-id7509 . -1) (#("-" 0 1 (fontified t)) . -413) (undo-tree-id7510 . -1) (undo-tree-id7511 . -1) (undo-tree-id7512 . -1) (undo-tree-id7513 . -1) (undo-tree-id7514 . -1) (undo-tree-id7515 . -1) (undo-tree-id7516 . -1) (undo-tree-id7517 . -1) (undo-tree-id7518 . -1) (undo-tree-id7519 . -1) (#("f" 0 1 (fontified t)) . -414) (undo-tree-id7520 . -1) (undo-tree-id7521 . -1) (undo-tree-id7522 . -1) 415) nil (26132 2050 636397 179000) 0 nil])
([nil nil ((412 . 415)) nil (26132 2050 636145 568000) 0 nil])
([nil nil ((#("}" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . 414) (undo-tree-id7484 . -1) (undo-tree-id7485 . -1) (undo-tree-id7486 . -1) (undo-tree-id7487 . -1) 415) nil (26132 2050 636900 214000) 0 nil])
([nil nil ((414 . 415)) nil (26132 2115 648741 196000) 0 nil] [nil nil ((416 . 424) (#("        " 0 8 (fontified nil)) . 415) (undo-tree-id7480 . -8) (undo-tree-id7481 . -8) (undo-tree-id7482 . -8) (undo-tree-id7483 . -8) (414 . 424)) ((#("
        
" 0 1 (fontified t) 1 9 (fontified nil) 9 10 (fontified nil)) . 414) (undo-tree-id7545 . -10) (undo-tree-id7546 . -9) (undo-tree-id7547 . -9) (undo-tree-id7548 . -9) (undo-tree-id7549 . -10) (415 . 423) (#("        " 0 8 (fontified t)) . 416) (undo-tree-id7550 . -8)) (26132 2050 636137 524000) 0 nil])
([nil nil ((416 . 420) (#("        " 0 8 (fontified nil)) . 415) (415 . 423) (#("    " 0 4 (fontified nil)) . 415) (undo-tree-id7802 . -4) (undo-tree-id7803 . -4) (undo-tree-id7804 . -4) (undo-tree-id7805 . -4) (414 . 420)) nil (26132 2115 648740 255000) 0 nil])
nil
([nil nil ((415 . 423)) nil (26132 2115 648735 827000) 0 nil])
([nil nil ((423 . 427)) nil (26132 2115 648735 215000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -424) (undo-tree-id7767 . -1) (undo-tree-id7768 . -1) (undo-tree-id7769 . -1) (undo-tree-id7770 . -1) (undo-tree-id7771 . -1) (undo-tree-id7772 . -1) (undo-tree-id7773 . -1) (undo-tree-id7774 . -1) (undo-tree-id7775 . -1) (undo-tree-id7776 . -1) (undo-tree-id7777 . -1) (undo-tree-id7778 . -1) (undo-tree-id7779 . -1) (undo-tree-id7780 . -1) (undo-tree-id7781 . -1) (undo-tree-id7782 . -1) (undo-tree-id7783 . -1) (#("r" 0 1 (fontified t)) . -425) (undo-tree-id7784 . -1) (undo-tree-id7785 . -1) (undo-tree-id7786 . -1) (undo-tree-id7787 . -1) (undo-tree-id7788 . -1) (undo-tree-id7789 . -1) (undo-tree-id7790 . -1) (undo-tree-id7791 . -1) (undo-tree-id7792 . -1) (undo-tree-id7793 . -1) (undo-tree-id7794 . -1) (#(" " 0 1 (fontified t)) . -426) (undo-tree-id7795 . -1) (undo-tree-id7796 . -1) (undo-tree-id7797 . -1) (undo-tree-id7798 . -1) (undo-tree-id7799 . -1) (undo-tree-id7800 . -1) (undo-tree-id7801 . -1) 427) nil (26132 2115 648733 216000) 0 nil])
([nil nil ((424 . 426)) nil (26132 2115 648707 629000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -424) (undo-tree-id7752 . -1) (undo-tree-id7753 . -1) (undo-tree-id7754 . -1) (undo-tree-id7755 . -1) (undo-tree-id7756 . -1) (undo-tree-id7757 . -1) (undo-tree-id7758 . -1) (undo-tree-id7759 . -1) (undo-tree-id7760 . -1) (undo-tree-id7761 . -1) (#("r" 0 1 (face font-lock-keyword-face fontified t)) . -425) (undo-tree-id7762 . -1) (undo-tree-id7763 . -1) (undo-tree-id7764 . -1) (undo-tree-id7765 . -1) (undo-tree-id7766 . -1) 426) nil (26132 2115 648706 36000) 0 nil])
([nil nil ((424 . 427)) nil (26132 2115 648212 27000) 0 nil])
([nil nil ((427 . 428)) nil (26132 2115 648211 440000) 0 nil])
([nil nil ((#("g" 0 1 (face font-lock-variable-name-face fontified t)) . -427) (undo-tree-id7746 . -1) (undo-tree-id7747 . -1) (undo-tree-id7748 . -1) (undo-tree-id7749 . -1) (undo-tree-id7750 . -1) (undo-tree-id7751 . -1) 428) nil (26132 2115 648210 529000) 0 nil])
([nil nil ((427 . 435)) nil (26132 2115 648205 897000) 0 nil])
([nil nil ((#("y" 0 1 (face font-lock-variable-name-face fontified t)) . -432) (undo-tree-id7718 . -1) (undo-tree-id7719 . -1) (undo-tree-id7720 . -1) (undo-tree-id7721 . -1) (undo-tree-id7722 . -1) (undo-tree-id7723 . -1) (undo-tree-id7724 . -1) (undo-tree-id7725 . -1) (undo-tree-id7726 . -1) (undo-tree-id7727 . -1) (undo-tree-id7728 . -1) (undo-tree-id7729 . -1) (undo-tree-id7730 . -1) (undo-tree-id7731 . -1) (#("r" 0 1 (face font-lock-variable-name-face fontified t)) . -433) (undo-tree-id7732 . -1) (undo-tree-id7733 . -1) (undo-tree-id7734 . -1) (undo-tree-id7735 . -1) (undo-tree-id7736 . -1) (undo-tree-id7737 . -1) (undo-tree-id7738 . -1) (undo-tree-id7739 . -1) (undo-tree-id7740 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -434) (undo-tree-id7741 . -1) (undo-tree-id7742 . -1) (undo-tree-id7743 . -1) (undo-tree-id7744 . -1) (undo-tree-id7745 . -1) 435) nil (26132 2115 648203 862000) 0 nil])
([nil nil ((432 . 437)) nil (26132 2115 648183 872000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -435) (undo-tree-id7702 . -1) (undo-tree-id7703 . -1) (undo-tree-id7704 . -1) (undo-tree-id7705 . -1) (undo-tree-id7706 . -1) (undo-tree-id7707 . -1) (undo-tree-id7708 . -1) (undo-tree-id7709 . -1) (undo-tree-id7710 . -1) (undo-tree-id7711 . -1) (#("b" 0 1 (fontified t)) . -436) (undo-tree-id7712 . -1) (undo-tree-id7713 . -1) (undo-tree-id7714 . -1) (undo-tree-id7715 . -1) (undo-tree-id7716 . -1) (undo-tree-id7717 . -1) 437) nil (26132 2115 648182 479000) 0 nil])
([nil nil ((435 . 437)) nil (26132 2115 648170 622000) 0 nil])
([nil nil ((#("for feature in" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 11 (face font-lock-variable-name-face fontified t) 11 12 (fontified t) 12 14 (face font-lock-keyword-face fontified t)) . 423) (undo-tree-id7570 . -4) (undo-tree-id7571 . -1) (undo-tree-id7572 . -1) (undo-tree-id7573 . -1) (undo-tree-id7574 . -1) (undo-tree-id7575 . -1) (undo-tree-id7576 . -1) (undo-tree-id7577 . -1) (undo-tree-id7578 . -1) (undo-tree-id7579 . -1) (undo-tree-id7580 . -1) (undo-tree-id7581 . -1) (undo-tree-id7582 . -1) (undo-tree-id7583 . -1) (undo-tree-id7584 . -1) (undo-tree-id7585 . -1) (undo-tree-id7586 . -1) (undo-tree-id7587 . -1) (undo-tree-id7588 . -1) (undo-tree-id7589 . -1) (undo-tree-id7590 . -1) (undo-tree-id7591 . -1) (undo-tree-id7592 . -1) (undo-tree-id7593 . -1) (undo-tree-id7594 . -1) (undo-tree-id7595 . -1) (undo-tree-id7596 . -1) (undo-tree-id7597 . -1) (undo-tree-id7598 . -1) (undo-tree-id7599 . -1) (undo-tree-id7600 . -1) (undo-tree-id7601 . -1) (undo-tree-id7602 . -1) (undo-tree-id7603 . -1) (undo-tree-id7604 . -1) (undo-tree-id7605 . -1) (undo-tree-id7606 . -2) (undo-tree-id7607 . -2) (undo-tree-id7608 . -3) (undo-tree-id7609 . -3) (undo-tree-id7610 . -3) (undo-tree-id7611 . -3) (undo-tree-id7612 . -4) (undo-tree-id7613 . -4) (undo-tree-id7614 . -4) (undo-tree-id7615 . -4) (undo-tree-id7616 . -4) (undo-tree-id7617 . -4) (undo-tree-id7618 . -4) (undo-tree-id7619 . -4) (undo-tree-id7620 . -4) (undo-tree-id7621 . -4) (undo-tree-id7622 . -4) (undo-tree-id7623 . -4) (undo-tree-id7624 . -4) (undo-tree-id7625 . -4) (undo-tree-id7626 . -4) (undo-tree-id7627 . -4) (undo-tree-id7628 . -4) (undo-tree-id7629 . -4) (undo-tree-id7630 . -4) (undo-tree-id7631 . -4) (undo-tree-id7632 . -4) (undo-tree-id7633 . -4) (undo-tree-id7634 . -4) (undo-tree-id7635 . -4) (undo-tree-id7636 . -4) (undo-tree-id7637 . -4) (undo-tree-id7638 . -4) (undo-tree-id7639 . -4) (undo-tree-id7640 . -4) (undo-tree-id7641 . -4) (undo-tree-id7642 . -4) (undo-tree-id7643 . -4) (undo-tree-id7644 . -5) (undo-tree-id7645 . -5) (undo-tree-id7646 . -5) (undo-tree-id7647 . -6) (undo-tree-id7648 . -6) (undo-tree-id7649 . -6) (undo-tree-id7650 . -7) (undo-tree-id7651 . -7) (undo-tree-id7652 . -7) (undo-tree-id7653 . -7) (undo-tree-id7654 . -8) (undo-tree-id7655 . -8) (undo-tree-id7656 . -8) (undo-tree-id7657 . -9) (undo-tree-id7658 . -9) (undo-tree-id7659 . -9) (undo-tree-id7660 . -9) (undo-tree-id7661 . -9) (undo-tree-id7662 . -9) (undo-tree-id7663 . -9) (undo-tree-id7664 . -9) (undo-tree-id7665 . -9) (undo-tree-id7666 . -9) (undo-tree-id7667 . -9) (undo-tree-id7668 . -9) (undo-tree-id7669 . -9) (undo-tree-id7670 . -9) (undo-tree-id7671 . -9) (undo-tree-id7672 . -9) (undo-tree-id7673 . -9) (undo-tree-id7674 . -10) (undo-tree-id7675 . -10) (undo-tree-id7676 . -11) (undo-tree-id7677 . -11) (undo-tree-id7678 . -11) (undo-tree-id7679 . -11) (undo-tree-id7680 . -11) (undo-tree-id7681 . -12) (undo-tree-id7682 . -12) (undo-tree-id7683 . -12) (undo-tree-id7684 . -12) (undo-tree-id7685 . -12) (undo-tree-id7686 . -12) (undo-tree-id7687 . -12) (undo-tree-id7688 . -12) (undo-tree-id7689 . -12) (undo-tree-id7690 . -12) (undo-tree-id7691 . -12) (undo-tree-id7692 . -12) (undo-tree-id7693 . -12) (undo-tree-id7694 . -12) (undo-tree-id7695 . -13) (undo-tree-id7696 . -14) (undo-tree-id7697 . -14) (undo-tree-id7698 . -14) (undo-tree-id7699 . -14) (undo-tree-id7700 . -14) (undo-tree-id7701 . -14)) nil (26132 2115 648164 988000) 0 nil])
([nil nil ((423 . 424)) nil (26132 2115 647889 132000) 0 nil])
([nil nil ((423 . 427) (#("s" 0 1 (fontified nil)) . 423) (423 . 424) (#("self" 0 4 (fontified nil)) . -423) (423 . 427) (#("s" 0 1 (fontified t)) . -423) (undo-tree-id7565 . -1) (undo-tree-id7566 . -1) (undo-tree-id7567 . -1) (undo-tree-id7568 . -1) (undo-tree-id7569 . -1) 424) nil (26132 2115 647888 31000) 0 nil])
([nil nil ((427 . 428)) nil (26132 2115 647882 968000) 0 nil])
([nil nil ((428 . 432) (#("chip" 0 4 (fontified nil)) . -428) (428 . 432)) nil (26132 2115 647882 155000) 0 nil])
([nil nil ((432 . 434)) nil (26132 2132 733976 477000) 0 nil])
([nil nil ((327 . 328) (t 26132 2133 670591 401000)) nil (26132 2141 954410 732000) 0 nil] [nil nil ((#("Option<" 0 6 (face font-lock-type-face fontified t) 6 7 (face (rainbow-delimiters-depth-2-face) fontified t)) . -141) (undo-tree-id7563 . -7) (undo-tree-id7564 . -7) 148) ((141 . 148)) (26132 2131 782860 995000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -327) (undo-tree-id7848 . -1) (undo-tree-id7849 . -1) (undo-tree-id7850 . -1) (undo-tree-id7851 . -1) (undo-tree-id7852 . -1) (undo-tree-id7853 . -1) (undo-tree-id7854 . -1) (undo-tree-id7855 . -1) (undo-tree-id7856 . -1) (undo-tree-id7857 . -1) 328) nil (26132 2141 954407 32000) 0 nil])
([nil nil ((#(">" 0 1 (syntax-table (1) fontified t)) . -154) (undo-tree-id7561 . -1) (undo-tree-id7562 . -1) 155) ((154 . 155)) (26132 2131 442372 277000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -433) (undo-tree-id8015 . -1) (undo-tree-id8016 . -1) (undo-tree-id8017 . -1) (undo-tree-id8018 . -1) (undo-tree-id8019 . -1) (undo-tree-id8020 . -1) (undo-tree-id8021 . -1) (undo-tree-id8022 . -1) (undo-tree-id8023 . -1) (undo-tree-id8024 . -1) (undo-tree-id8025 . -1) (undo-tree-id8026 . -1) (undo-tree-id8027 . -1) (undo-tree-id8028 . -1) 434 (t 26132 2142 3925 245000)) nil (26132 2206 467748 152000) 0 nil])
([nil nil ((319 . 321)) ((#(".y" 0 1 (fontified t) 1 2 (fontified t)) . 319) (undo-tree-id7823 . -2) (undo-tree-id7824 . -2) (undo-tree-id7825 . -2) (undo-tree-id7826 . -2) (undo-tree-id7827 . -2) (undo-tree-id7828 . -1) (undo-tree-id7829 . -1) (undo-tree-id7830 . -1) (undo-tree-id7831 . -1) (undo-tree-id7832 . -1) (undo-tree-id7833 . -1) (undo-tree-id7834 . -1) (undo-tree-id7835 . -1) (undo-tree-id7836 . -1) (undo-tree-id7837 . -1) (undo-tree-id7838 . -1) (undo-tree-id7839 . -1) (undo-tree-id7840 . -1) (undo-tree-id7841 . -1) (undo-tree-id7842 . -1) (undo-tree-id7843 . -1) (undo-tree-id7844 . -1) (undo-tree-id7845 . -1) (undo-tree-id7846 . -2) (undo-tree-id7847 . -2)) (26132 2131 56657 211000) 0 nil])
([nil nil ((433 . 434)) nil (26132 2206 467738 896000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -320) (undo-tree-id7556 . -1) (undo-tree-id7557 . -1) (undo-tree-id7558 . -1) (undo-tree-id7559 . -1) (undo-tree-id7560 . -1) 321) ((320 . 321)) (26132 2130 715066 788000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -433) (undo-tree-id8009 . -1) (undo-tree-id8010 . -1) (undo-tree-id8011 . -1) (undo-tree-id8012 . -1) (undo-tree-id8013 . -1) (undo-tree-id8014 . -1) 434) nil (26132 2206 467738 50000) 0 nil])
([nil nil ((320 . 321)) ((#("u" 0 1 (fontified t)) . 320) (undo-tree-id7814 . -1) (undo-tree-id7815 . -1) (undo-tree-id7816 . -1) (undo-tree-id7817 . -1) (undo-tree-id7818 . -1) (undo-tree-id7819 . -1) (undo-tree-id7820 . -1) (undo-tree-id7821 . -1) (undo-tree-id7822 . -1)) (26132 2130 182176 455000) 0 nil])
([nil nil ((433 . 434)) nil (26132 2206 467733 491000) 0 nil])
([nil nil ((apply yas--snippet-revive 320 328 #s(yas--snippet nil nil #s(yas--exit #<marker at 113 in main.rs> nil) 64 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 113 in main.rs> nil) 64 nil nil nil nil)) (320 . 328) (#("unwrap()$0" 0 10 (fontified nil)) . 320) (320 . 330) (#("u" 0 1 (fontified nil)) . 320) (320 . 321) (#("unwrap()" 0 8 (fontified nil)) . -320) (320 . 328) (#("u" 0 1 (fontified t)) . -320) (undo-tree-id7551 . -1) (undo-tree-id7552 . -1) (undo-tree-id7553 . -1) (undo-tree-id7554 . -1) (undo-tree-id7555 . -1) 321) ((320 . 321) (#("unwrap()" 0 8 (fontified nil)) . 320) (320 . 328) (#("u" 0 1 (fontified nil)) . 320) (320 . 321) (#("unwrap()$0" 0 10 (fontified nil)) . 320) (320 . 330) (#("unwrap()" 0 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-3-face) fontified t) 7 8 (face (rainbow-delimiters-depth-3-face) fontified t)) . 320) (undo-tree-id7806 . -8) (undo-tree-id7807 . -8) (undo-tree-id7808 . -8) (undo-tree-id7809 . -8) (undo-tree-id7810 . -8) (undo-tree-id7811 . -8) (undo-tree-id7812 . -8) (undo-tree-id7813 . -8) (t 26132 2115 667256 962000)) (26132 2115 647864 140000) 0 nil])
([nil nil ((apply yas--snippet-revive 433 441 #s(yas--snippet nil nil #s(yas--exit 441 nil) 65 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 441 nil) 65 nil nil nil nil)) (433 . 441) (#("unwrap()$0" 0 10 (fontified nil)) . 433) (433 . 443) (#("u" 0 1 (fontified nil)) . 433) (433 . 434) (#("unwrap()" 0 8 (fontified nil)) . -433) (433 . 441) (#("u" 0 1 (fontified t)) . -433) (undo-tree-id8003 . -1) (undo-tree-id8004 . -1) (undo-tree-id8005 . -1) (undo-tree-id8006 . -1) (undo-tree-id8007 . -1) (undo-tree-id8008 . -1) 434) nil (26132 2206 467731 971000) 0 nil])
nil
([nil nil ((441 . 442)) nil (26132 2206 467726 203000) 0 nil])
([nil nil ((#("self.chip.unwrap()." 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 10 (fontified t) 10 16 (fontified t) 16 17 (face (rainbow-delimiters-depth-3-face) fontified t) 17 18 (face (rainbow-delimiters-depth-3-face) fontified t) 18 19 (fontified t)) . 423) (undo-tree-id7960 . -10) (undo-tree-id7961 . -10) (undo-tree-id7962 . -10) (undo-tree-id7963 . -10) (undo-tree-id7964 . -10) (undo-tree-id7965 . -10) (undo-tree-id7966 . -10) (undo-tree-id7967 . -10) (undo-tree-id7968 . -10) (undo-tree-id7969 . -10) (undo-tree-id7970 . -10) (undo-tree-id7971 . -10) (undo-tree-id7972 . -10) (undo-tree-id7973 . -10) (undo-tree-id7974 . -10) (undo-tree-id7975 . -10) (undo-tree-id7976 . -10) (undo-tree-id7977 . -10) (undo-tree-id7978 . -10) (undo-tree-id7979 . -10) (undo-tree-id7980 . -10) (undo-tree-id7981 . -10) (undo-tree-id7982 . -10) (undo-tree-id7983 . -10) (undo-tree-id7984 . -10) (undo-tree-id7985 . -10) (undo-tree-id7986 . -10) (undo-tree-id7987 . -10) (undo-tree-id7988 . -10) (undo-tree-id7989 . -10) (undo-tree-id7990 . -10) (undo-tree-id7991 . -10) (undo-tree-id7992 . -10) (undo-tree-id7993 . -10) (undo-tree-id7994 . -10) (undo-tree-id7995 . -18) (undo-tree-id7996 . -18) (undo-tree-id7997 . -18) (undo-tree-id7998 . -19) (undo-tree-id7999 . -19) (undo-tree-id8000 . -19) (undo-tree-id8001 . -19) (undo-tree-id8002 . -19)) nil (26132 2206 467724 56000) 0 nil])
([nil nil ((423 . 426)) nil (26132 2206 467630 48000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -423) (undo-tree-id7939 . -1) (undo-tree-id7940 . -1) (undo-tree-id7941 . -1) (undo-tree-id7942 . -1) (undo-tree-id7943 . -1) (undo-tree-id7944 . -1) (undo-tree-id7945 . -1) (undo-tree-id7946 . -1) (undo-tree-id7947 . -1) (undo-tree-id7948 . -1) (#("a" 0 1 (fontified t)) . -424) (undo-tree-id7949 . -1) (undo-tree-id7950 . -1) (undo-tree-id7951 . -1) (undo-tree-id7952 . -1) (undo-tree-id7953 . -1) (undo-tree-id7954 . -1) (undo-tree-id7955 . -1) (#("m" 0 1 (fontified t)) . -425) (undo-tree-id7956 . -1) (undo-tree-id7957 . -1) (undo-tree-id7958 . -1) (undo-tree-id7959 . -1) 426) nil (26132 2206 467628 408000) 0 nil])
([nil nil ((423 . 426)) nil (26132 2206 467614 732000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -423) (undo-tree-id7914 . -1) (undo-tree-id7915 . -1) (undo-tree-id7916 . -1) (undo-tree-id7917 . -1) (undo-tree-id7918 . -1) (undo-tree-id7919 . -1) (undo-tree-id7920 . -1) (undo-tree-id7921 . -1) (undo-tree-id7922 . -1) (undo-tree-id7923 . -1) (undo-tree-id7924 . -1) (undo-tree-id7925 . -1) (undo-tree-id7926 . -1) (undo-tree-id7927 . -1) (undo-tree-id7928 . -1) (#("a" 0 1 (fontified t)) . -424) (undo-tree-id7929 . -1) (undo-tree-id7930 . -1) (undo-tree-id7931 . -1) (undo-tree-id7932 . -1) (undo-tree-id7933 . -1) (undo-tree-id7934 . -1) (undo-tree-id7935 . -1) (#("t" 0 1 (fontified t)) . -425) (undo-tree-id7936 . -1) (undo-tree-id7937 . -1) (undo-tree-id7938 . -1) 426) nil (26132 2206 467612 889000) 0 nil])
([nil nil ((423 . 427)) nil (26132 2206 467596 440000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -426) (undo-tree-id7911 . -1) (undo-tree-id7912 . -1) (undo-tree-id7913 . -1) 427) nil (26132 2206 467595 698000) 0 nil])
([nil nil ((426 . 430)) nil (26132 2206 467592 756000) 0 nil])
([nil nil ((429 . 433) (#("s" 0 1 (fontified nil)) . 429) (429 . 430) (#("self" 0 4 (fontified nil)) . -429) (429 . 433) (#("s" 0 1 (fontified t)) . -429) (undo-tree-id7905 . -1) (undo-tree-id7906 . -1) (undo-tree-id7907 . -1) (undo-tree-id7908 . -1) (undo-tree-id7909 . -1) (undo-tree-id7910 . -1) 430) nil (26132 2206 467591 617000) 0 nil])
([nil nil ((433 . 435)) nil (26132 2206 467586 779000) 0 nil])
([nil nil ((434 . 438) (#("c" 0 1 (fontified nil)) . 434) (434 . 435) (#("chip" 0 4 (fontified nil)) . -434) (434 . 438) (#("c" 0 1 (fontified t)) . -434) (undo-tree-id7901 . -1) (undo-tree-id7902 . -1) (undo-tree-id7903 . -1) (undo-tree-id7904 . -1) 435) nil (26132 2206 467585 555000) 0 nil])
([nil nil ((438 . 441)) nil (26132 2206 467581 718000) 0 nil])
([nil nil ((442 . 450) (#("            " 0 12 (fontified nil)) . 441) (undo-tree-id7897 . -8) (undo-tree-id7898 . -8) (undo-tree-id7899 . -8) (undo-tree-id7900 . -8) (449 . 453) (440 . 450)) nil (26132 2206 467580 762000) 0 nil])
([nil nil ((441 . 453)) nil (26132 2206 467577 97000) 0 nil])
([nil nil ((453 . 454)) nil (26132 2206 467576 590000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -453) (undo-tree-id7894 . -1) (undo-tree-id7895 . -1) (undo-tree-id7896 . -1) 454) nil (26132 2206 467575 834000) 0 nil])
([nil nil ((453 . 454)) nil (26132 2206 467573 227000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 458 462 nil nil nil t #s(yas--exit 463 nil))) #s(yas--exit 463 nil) 66 nil #s(yas--field 1 458 462 nil nil nil t #s(yas--exit 463 nil)) nil nil)) (453 . 459) (#("Some($1)$0" 0 10 (fontified nil)) . 453) (453 . 463) (#("S" 0 1 (fontified nil)) . 453) (453 . 454) (#("Some(…)" 0 7 (fontified nil)) . -453) (453 . 460) (#("S" 0 1 (face font-lock-type-face fontified t)) . -453) (undo-tree-id7889 . -1) (undo-tree-id7890 . -1) (undo-tree-id7891 . -1) (undo-tree-id7892 . -1) (undo-tree-id7893 . -1) 454) nil (26132 2206 467571 846000) 0 nil])
([nil nil ((458 . 462)) nil (26132 2206 467566 944000) 0 nil])
([nil nil ((apply yas--snippet-revive 453 463 #s(yas--snippet nil (#s(yas--field 1 458 462 nil nil nil t #s(yas--exit 463 nil))) #s(yas--exit 463 nil) 66 nil #s(yas--field 1 458 462 nil nil nil t #s(yas--exit 463 nil)) nil nil))) nil (26132 2206 467566 306000) 0 nil])
([nil nil ((463 . 464)) nil (26132 2206 467565 674000) 0 nil])
([nil nil ((464 . 465)) nil (26132 2206 467565 12000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -464) (undo-tree-id7886 . -1) (undo-tree-id7887 . -1) (undo-tree-id7888 . -1) 465) nil (26132 2206 467564 184000) 0 nil])
([nil nil ((464 . 467)) nil (26132 2206 467561 146000) 0 nil])
([nil nil ((#("?" 0 1 (face rust-question-mark fontified t)) . -465) (undo-tree-id7875 . -1) (undo-tree-id7876 . -1) (undo-tree-id7877 . -1) (undo-tree-id7878 . -1) (undo-tree-id7879 . -1) (undo-tree-id7880 . -1) (undo-tree-id7881 . -1) (undo-tree-id7882 . -1) (#(" " 0 1 (fontified t)) . -466) (undo-tree-id7883 . -1) (undo-tree-id7884 . -1) (undo-tree-id7885 . -1) 467) nil (26132 2206 467559 921000) 0 nil])
([nil nil ((465 . 469)) nil (26132 2206 467551 550000) 0 nil])
([nil nil ((470 . 482) (#("                " 0 16 (fontified nil)) . 469) (469 . 485) (#("            " 0 12 (fontified nil)) . 469) (undo-tree-id7871 . -12) (undo-tree-id7872 . -12) (undo-tree-id7873 . -12) (undo-tree-id7874 . -12) (468 . 482)) nil (26132 2206 467550 553000) 0 nil])
([nil nil ((469 . 485)) nil (26132 2206 467546 685000) 0 nil])
([nil nil ((499 . 512)) nil (26132 2206 467546 114000) 0 nil])
([nil nil ((512 . 513)) nil (26132 2206 467545 567000) 0 nil])
([nil nil ((#("M" 0 1 (face font-lock-type-face fontified t)) . -512) (undo-tree-id7868 . -1) (undo-tree-id7869 . -1) (undo-tree-id7870 . -1) 513) nil (26132 2206 467544 767000) 0 nil])
([nil nil ((512 . 513)) nil (26132 2206 467541 976000) 0 nil])
([nil nil ((apply yas--snippet-revive 512 516 #s(yas--snippet nil nil #s(yas--exit 516 nil) 67 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 516 nil) 67 nil nil nil nil)) (512 . 516) (#("None$0" 0 6 (fontified nil)) . 512) (512 . 518) (#("N" 0 1 (fontified nil)) . 512) (512 . 513) (#("None" 0 4 (fontified nil)) . -512) (512 . 516) (#("N" 0 1 (face font-lock-type-face fontified t)) . -512) (undo-tree-id7863 . -1) (undo-tree-id7864 . -1) (undo-tree-id7865 . -1) (undo-tree-id7866 . -1) (undo-tree-id7867 . -1) 513) nil (26132 2206 467540 392000) 0 nil])
([nil nil ((516 . 518)) nil (26132 2206 467534 839000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -517) (undo-tree-id7858 . -1) (undo-tree-id7859 . -1) (undo-tree-id7860 . -1) (undo-tree-id7861 . -1) (undo-tree-id7862 . -1) 518) nil (26132 2206 467532 801000) 0 nil])
([nil nil ((517 . 522)) nil (26132 2206 467519 481000) 0 nil])
([nil nil ((429 . 430) (t 26132 2206 517262 539000)) nil (26132 2215 786713 273000) 0 nil])
([nil nil ((486 . 487) (t 26132 2215 803929 775000)) nil (26132 2468 483175 457000) 0 nil])
([nil nil ((486 . 490) (#("c" 0 1 (fontified nil)) . 486) (486 . 487) (#("chip" 0 4 (fontified nil)) . -486) (486 . 490) (#("c" 0 1 (fontified t)) . -486) (undo-tree-id8104 . -1) 487) nil (26132 2468 483174 412000) 0 nil])
([nil nil ((490 . 491)) nil (26132 2468 483172 364000) 0 nil])
([nil nil ((apply yas--snippet-revive 491 502 #s(yas--snippet nil nil #s(yas--exit 502 nil) 68 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 502 nil) 68 nil nil nil nil)) (491 . 502) (#("into_iter()$0" 0 13 (fontified nil)) . 491) (491 . 504) (#("into_iter() (as IntoIterator)" 0 29 (fontified nil)) . -491) (491 . 520)) nil (26132 2468 483171 538000) 0 nil])
([nil nil ((502 . 503)) nil (26132 2468 483170 140000) 0 nil])
([nil nil ((apply yas--snippet-revive 503 514 #s(yas--snippet nil nil #s(yas--exit 514 nil) 69 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 514 nil) 69 nil nil nil nil)) (503 . 514) (#("into_iter()$0" 0 13 (fontified nil)) . 503) (503 . 516) (#("into_iter() (as IntoIterator)" 0 29 (fontified nil)) . -503) (503 . 532)) nil (26132 2468 483169 305000) 0 nil])
([nil nil ((514 . 516)) nil (26132 2468 483167 689000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 519 544 nil nil nil t #s(yas--exit 545 nil))) #s(yas--exit 545 nil) 70 nil #s(yas--field 1 519 544 nil nil nil t #s(yas--exit 545 nil)) nil nil)) (515 . 521) (#("map(${1:f})$0" 0 13 (fontified nil)) . 515) (515 . 528) (#("m" 0 1 (fontified nil)) . 515) (515 . 516) (#("map(…) (as Iterator)" 0 20 (fontified nil)) . -515) (515 . 535) (#("m" 0 1 (fontified t)) . -515) (undo-tree-id8103 . -1) 516) nil (26132 2468 483165 870000) 0 nil])
([nil nil ((520 . 521) (#("f" 0 1 (fontified nil)) . 520) (undo-tree-id8102 . -1) (519 . 520)) nil (26132 2468 483161 977000) 0 nil])
([nil nil ((520 . 521)) nil (26132 2468 483159 678000) 0 nil])
([nil nil ((522 . 525)) nil (26132 2468 483158 858000) 0 nil])
([nil nil ((apply yas--snippet-revive 525 539 #s(yas--snippet nil nil #s(yas--exit 539 nil) 71 nil nil #s(yas--field 1 519 544 nil nil nil t #s(yas--exit 545 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 539 nil) 71 nil nil #s(yas--field 1 519 544 nil nil nil t #s(yas--exit 545 nil)) nil)) (525 . 539) (#("feature_type()$0" 0 16 (fontified nil)) . 525) (undo-tree-id8100 . -16) (525 . 541) (#("feature_type()" 0 14 (fontified nil)) . -525) (undo-tree-id8101 . -14) (525 . 539)) nil (26132 2468 483157 67000) 0 nil])
([nil nil ((539 . 540)) nil (26132 2468 483153 520000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -539) (undo-tree-id8097 . -1) (undo-tree-id8098 . -1) (undo-tree-id8099 . -1) 540) nil (26132 2468 483152 789000) 0 nil])
([nil nil ((539 . 541)) nil (26132 2468 483150 284000) 0 nil])
([nil nil ((541 . 548)) nil (26132 2468 483149 717000) 0 nil])
([nil nil ((#("SENSORS" 0 7 (fontified t)) . -541) (undo-tree-id8094 . -7) (undo-tree-id8095 . -7) (undo-tree-id8096 . -7) 548) nil (26132 2468 483148 786000) 0 nil])
([nil nil ((541 . 544)) nil (26132 2468 483145 238000) 0 nil])
([nil nil ((apply yas--snippet-revive 515 545 #s(yas--snippet nil (#s(yas--field 1 519 544 nil nil nil t #s(yas--exit 545 nil))) #s(yas--exit 545 nil) 70 nil #s(yas--field 1 519 544 nil nil nil t #s(yas--exit 545 nil)) nil nil))) nil (26132 2468 483144 45000) 0 nil])
([nil nil ((#("    fn get_temp(&self) {
        match &self.chip {
            Some(chip) => {
                chip.into_iter().into_iter().map(|x| x.feature_type()==Fea)
            }
            None => {}
        }
    }" 0 4 (fontified t) 4 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 15 (face font-lock-function-name-face fontified t) 15 16 (face (rainbow-delimiters-depth-2-face) fontified t) 16 17 (face rust-ampersand-face fontified t) 17 21 (face font-lock-keyword-face fontified t) 21 22 (face (rainbow-delimiters-depth-2-face) fontified t) 22 23 (fontified t) 23 24 (face (rainbow-delimiters-depth-2-face) fontified t) 24 25 (fontified t) 25 33 (fontified t) 33 38 (face font-lock-keyword-face fontified t) 38 39 (fontified t) 39 40 (face rust-ampersand-face fontified t) 40 44 (face font-lock-keyword-face fontified t) 44 45 (fontified t) 45 50 (fontified t) 50 51 (face (rainbow-delimiters-depth-3-face) fontified t) 51 52 (fontified t) 52 64 (fontified t) 64 68 (face font-lock-type-face fontified t) 68 69 (face (rainbow-delimiters-depth-4-face) fontified t) 69 73 (fontified t) 73 74 (face (rainbow-delimiters-depth-4-face) fontified t) 74 76 (fontified t) 76 77 (fontified t syntax-table (1)) 77 78 (fontified t) 78 79 (face (rainbow-delimiters-depth-4-face) fontified t) 79 80 (fontified t) 80 96 (fontified t) 96 101 (fontified t) 101 110 (fontified t) 110 111 (face (rainbow-delimiters-depth-5-face) fontified t) 111 112 (face (rainbow-delimiters-depth-5-face) fontified t) 112 113 (fontified t) 113 122 (fontified t) 122 123 (face (rainbow-delimiters-depth-5-face) fontified t) 123 124 (face (rainbow-delimiters-depth-5-face) fontified t) 124 125 (fontified t) 125 128 (fontified t) 128 129 (face (rainbow-delimiters-depth-5-face) fontified t) 129 135 (fontified t) 135 147 (fontified t) 147 148 (face (rainbow-delimiters-depth-6-face) fontified t) 148 149 (face (rainbow-delimiters-depth-6-face) fontified t) 149 154 (fontified t) 154 155 (face (rainbow-delimiters-depth-5-face) fontified t) 155 156 (fontified t) 156 168 (fontified t) 168 169 (face (rainbow-delimiters-depth-4-face) fontified t) 169 170 (fontified t) 170 182 (fontified t) 182 186 (face font-lock-type-face fontified t) 186 188 (fontified t) 188 189 (fontified t syntax-table (1)) 189 190 (fontified t) 190 191 (face (rainbow-delimiters-depth-4-face) fontified t) 191 192 (face (rainbow-delimiters-depth-4-face) fontified t) 192 193 (fontified t) 193 201 (fontified t) 201 202 (face (rainbow-delimiters-depth-3-face) fontified t) 202 203 (fontified t) 203 207 (fontified t) 207 208 (face (rainbow-delimiters-depth-2-face) fontified t)) . 390) (undo-tree-id8029 . -208) (undo-tree-id8030 . -33) (undo-tree-id8031 . -96) (undo-tree-id8032 . -96) (undo-tree-id8033 . -129) (undo-tree-id8034 . 54) (undo-tree-id8035 . -96) (undo-tree-id8036 . -96) (undo-tree-id8037 . -96) (undo-tree-id8038 . -96) (undo-tree-id8039 . -96) (undo-tree-id8040 . -96) (undo-tree-id8041 . -96) (undo-tree-id8042 . -96) (undo-tree-id8043 . -96) (undo-tree-id8044 . -100) (undo-tree-id8045 . -105) (undo-tree-id8046 . -110) (undo-tree-id8047 . -117) (undo-tree-id8048 . -122) (undo-tree-id8049 . -128) (undo-tree-id8050 . -131) (undo-tree-id8051 . -134) (undo-tree-id8052 . -142) (undo-tree-id8053 . -147) (undo-tree-id8054 . -154) (undo-tree-id8055 . -186) (undo-tree-id8056 . -182) (undo-tree-id8057 . -155) (undo-tree-id8058 . -155) (undo-tree-id8059 . -155) (undo-tree-id8060 . -155) (undo-tree-id8061 . -155) (undo-tree-id8062 . -155) (undo-tree-id8063 . -155) (undo-tree-id8064 . -155) (undo-tree-id8065 . -155) (undo-tree-id8066 . -155) (undo-tree-id8067 . -155) (undo-tree-id8068 . -155) (undo-tree-id8069 . -155) (undo-tree-id8070 . -155) (undo-tree-id8071 . -155) (undo-tree-id8072 . -155) (undo-tree-id8073 . -155) (undo-tree-id8074 . -155) (undo-tree-id8075 . -155) (undo-tree-id8076 . -155) (undo-tree-id8077 . -155) (undo-tree-id8078 . -208) (undo-tree-id8079 . -208) (undo-tree-id8080 . -208) (undo-tree-id8081 . -202) (undo-tree-id8082 . -178) (undo-tree-id8083 . -163) (undo-tree-id8084 . -162) (undo-tree-id8085 . -85) (undo-tree-id8086 . -84) (undo-tree-id8087 . -83) (undo-tree-id8088 . -54) (undo-tree-id8089 . -26) (undo-tree-id8090 . -25) (undo-tree-id8091 . -208) (undo-tree-id8092 . -24) (undo-tree-id8093 . -208)) nil (26132 2468 483138 847000) 0 nil])
([nil nil ((551 . 555) (t 26132 2468 533945 288000)) nil (26132 2471 839047 167000) 0 nil])
([nil nil ((668 . 672) (t 26132 2471 857278 826000)) nil (26132 2490 797875 514000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -671) (undo-tree-id8179 . -1) (undo-tree-id8180 . -1) (undo-tree-id8181 . -1) (undo-tree-id8182 . -1) (undo-tree-id8183 . -1) (undo-tree-id8184 . -1) 672) nil (26132 2490 797874 187000) 0 nil])
([nil nil ((671 . 672)) nil (26132 2490 797869 914000) 0 nil])
([nil nil ((668 . 678) (#("cont" 0 4 (fontified nil)) . 668) (668 . 672) (#("controller" 0 10 (fontified nil)) . -668) (668 . 678) (#("cont" 0 4 (fontified t)) . -668) (undo-tree-id8154 . -4) (undo-tree-id8155 . -1) (undo-tree-id8156 . -1) (undo-tree-id8157 . -2) (undo-tree-id8158 . -2) (undo-tree-id8159 . -3) (undo-tree-id8160 . -3) (undo-tree-id8161 . -3) (undo-tree-id8162 . -3) (undo-tree-id8163 . -3) (undo-tree-id8164 . -3) (undo-tree-id8165 . -3) (undo-tree-id8166 . -3) (undo-tree-id8167 . -3) (undo-tree-id8168 . -3) (undo-tree-id8169 . -3) (undo-tree-id8170 . -3) (undo-tree-id8171 . -3) (undo-tree-id8172 . -3) (undo-tree-id8173 . -3) (undo-tree-id8174 . -3) (undo-tree-id8175 . -4) (undo-tree-id8176 . -4) (undo-tree-id8177 . -4) (undo-tree-id8178 . -4) 672) nil (26132 2490 797868 32000) 0 nil])
([nil nil ((678 . 679)) nil (26132 2490 797851 262000) 0 nil])
([nil nil ((#("Controller" 0 10 (face font-lock-type-face fontified t)) . -118) (undo-tree-id8146 . -10) (undo-tree-id8147 . -10) (undo-tree-id8148 . -10) (undo-tree-id8149 . -10) (undo-tree-id8150 . -10) (undo-tree-id8151 . -10) (undo-tree-id8152 . -10) (undo-tree-id8153 . -10) 128) nil (26132 2490 797850 240000) 0 nil])
([nil nil ((118 . 123)) nil (26132 2490 797844 386000) 0 nil])
([nil nil ((#("controller" 0 10 (face font-lock-variable-name-face fontified t)) . -550) (undo-tree-id8134 . -10) (undo-tree-id8135 . -10) (undo-tree-id8136 . -10) (undo-tree-id8137 . -10) (undo-tree-id8138 . -10) (undo-tree-id8139 . -10) (undo-tree-id8140 . -10) (undo-tree-id8141 . -10) (undo-tree-id8142 . -10) (undo-tree-id8143 . -10) (undo-tree-id8144 . -10) (undo-tree-id8145 . -10) 560) nil (26132 2490 797842 904000) 0 nil])
([nil nil ((550 . 551)) nil (26132 2490 797834 218000) 0 nil])
([nil nil ((#("S" 0 1 (face font-lock-type-face fontified t)) . -550) (undo-tree-id8128 . -1) (undo-tree-id8129 . -1) (undo-tree-id8130 . -1) (undo-tree-id8131 . -1) (undo-tree-id8132 . -1) (undo-tree-id8133 . -1) 551) nil (26132 2490 797832 941000) 0 nil])
([nil nil ((550 . 555)) nil (26132 2490 797828 19000) 0 nil])
([nil nil ((#("Controller" 0 10 (face font-lock-type-face fontified t)) . -558) (undo-tree-id8112 . -9) (undo-tree-id8113 . -10) (undo-tree-id8114 . -9) (undo-tree-id8115 . -9) (undo-tree-id8116 . -9) (undo-tree-id8117 . -9) (undo-tree-id8118 . -9) (undo-tree-id8119 . -9) (undo-tree-id8120 . -9) (undo-tree-id8121 . -9) (undo-tree-id8122 . -9) (undo-tree-id8123 . -9) (undo-tree-id8124 . -10) (undo-tree-id8125 . -10) (undo-tree-id8126 . -10) (undo-tree-id8127 . -10) 568) nil (26132 2490 797826 471000) 0 nil])
([nil nil ((558 . 559)) nil (26132 2490 797814 299000) 0 nil])
([nil nil ((558 . 563) (#("S" 0 1 (fontified nil)) . 558) (558 . 559) (#("State" 0 5 (fontified nil)) . -558) (558 . 563) (#("S" 0 1 (face font-lock-type-face fontified t)) . -558) (undo-tree-id8105 . -1) (undo-tree-id8106 . -1) (undo-tree-id8107 . -1) (undo-tree-id8108 . -1) (undo-tree-id8109 . -1) (undo-tree-id8110 . -1) (undo-tree-id8111 . -1) 559) nil (26132 2490 797810 144000) 0 nil])
([nil nil ((nil fontified t 326 . 331) (nil face font-lock-type-face 326 . 331) (#("Controller" 0 10 (face font-lock-type-face fontified t)) . -326) (336 . 341) (nil fontified t 206 . 211) (nil face font-lock-type-face 206 . 211) (#("Controller" 0 10 (face font-lock-type-face fontified t)) . -206) (216 . 221) (nil fontified t 182 . 187) (t 26132 2490 817279 990000) (nil face font-lock-type-face 182 . 187) (t 26132 2490 817279 990000) (#("Controller" 0 10 (face font-lock-type-face fontified t)) . -182) (t 26132 2490 817279 990000) (192 . 197) 177 (t 26132 2490 817279 990000)) nil (26132 2512 900472 213000) 0 nil])
([nil nil ((649 . 650) (t 26132 2512 950614 681000)) nil (26132 2592 98138 211000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -648) (undo-tree-id8489 . -1) (undo-tree-id8490 . -1) (undo-tree-id8491 . -1) (undo-tree-id8492 . -1) (undo-tree-id8493 . -1) (undo-tree-id8494 . -1) (undo-tree-id8495 . -1) (undo-tree-id8496 . -1) (undo-tree-id8497 . -1) (undo-tree-id8498 . -1) (undo-tree-id8499 . -1) (undo-tree-id8500 . -1) (undo-tree-id8501 . -1) (undo-tree-id8502 . -1) (undo-tree-id8503 . -1) (undo-tree-id8504 . -1) (undo-tree-id8505 . -1) (undo-tree-id8506 . -1) (undo-tree-id8507 . -1) (undo-tree-id8508 . -1) (undo-tree-id8509 . -1) (undo-tree-id8510 . -1) (#("." 0 1 (fontified t)) . -649) (undo-tree-id8511 . -1) (undo-tree-id8512 . -1) (undo-tree-id8513 . -1) (undo-tree-id8514 . -1) (undo-tree-id8515 . -1) (undo-tree-id8516 . -1) 650) nil (26132 2592 98136 263000) 0 nil])
([nil nil ((648 . 649)) nil (26132 2592 98117 583000) 0 nil])
([nil nil ((#("controller." 0 11 (fontified t)) . -638) (undo-tree-id8457 . -10) (undo-tree-id8458 . -11) (undo-tree-id8459 . -10) (undo-tree-id8460 . -10) (undo-tree-id8461 . -10) (undo-tree-id8462 . -10) (undo-tree-id8463 . -10) (undo-tree-id8464 . -10) (undo-tree-id8465 . -10) (undo-tree-id8466 . -10) (undo-tree-id8467 . -10) (undo-tree-id8468 . -10) (undo-tree-id8469 . -10) (undo-tree-id8470 . -10) (undo-tree-id8471 . -10) (undo-tree-id8472 . -10) (undo-tree-id8473 . -10) (undo-tree-id8474 . -10) (undo-tree-id8475 . -10) (undo-tree-id8476 . -10) (undo-tree-id8477 . -10) (undo-tree-id8478 . -10) (undo-tree-id8479 . -10) (undo-tree-id8480 . -10) (undo-tree-id8481 . -10) (undo-tree-id8482 . -10) (undo-tree-id8483 . -10) (undo-tree-id8484 . -11) (undo-tree-id8485 . -11) (undo-tree-id8486 . -11) (undo-tree-id8487 . -11) (undo-tree-id8488 . -11) 649) nil (26132 2592 98115 787000) 0 nil])
([nil nil ((638 . 639)) nil (26132 2592 98093 511000) 0 nil])
([nil nil ((638 . 643) (#("s" 0 1 (fontified nil)) . 638) (638 . 639) (#("state" 0 5 (fontified nil)) . -638) (638 . 643) (#("s" 0 1 (fontified t)) . -638) (undo-tree-id8451 . -1) (undo-tree-id8452 . -1) (undo-tree-id8453 . -1) (undo-tree-id8454 . -1) (undo-tree-id8455 . -1) (undo-tree-id8456 . -1) 639) nil (26132 2592 98092 283000) 0 nil])
([nil nil ((643 . 644)) nil (26132 2592 98086 798000) 0 nil])
([nil nil ((644 . 648) (#("chip" 0 4 (fontified nil)) . -644) (644 . 648)) nil (26132 2592 98085 776000) 0 nil])
([nil nil ((648 . 650)) nil (26132 2592 98084 869000) 0 nil])
([nil nil ((apply yas--snippet-revive 649 657 #s(yas--snippet nil nil #s(yas--exit 657 nil) 72 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 657 nil) 72 nil nil nil nil)) (649 . 657) (#("unwrap()$0" 0 10 (fontified nil)) . 649) (649 . 659) (#("u" 0 1 (fontified nil)) . 649) (649 . 650) (#("unwrap()" 0 8 (fontified nil)) . -649) (649 . 657) (#("u" 0 1 (fontified t)) . -649) (undo-tree-id8445 . -1) (undo-tree-id8446 . -1) (undo-tree-id8447 . -1) (undo-tree-id8448 . -1) (undo-tree-id8449 . -1) (undo-tree-id8450 . -1) 650) nil (26132 2592 98083 65000) 0 nil])
([nil nil ((657 . 660)) nil (26132 2592 98077 334000) 0 nil])
([nil nil ((#("state.chip.unwrap().in" 0 6 (fontified t) 6 11 (fontified t) 11 17 (fontified t) 17 18 (face (rainbow-delimiters-depth-3-face) fontified t) 18 19 (face (rainbow-delimiters-depth-3-face) fontified t) 19 20 (fontified t) 20 22 (face font-lock-keyword-face fontified t)) . 638) (undo-tree-id8401 . -5) (undo-tree-id8402 . -5) (undo-tree-id8403 . -5) (undo-tree-id8404 . -6) (undo-tree-id8405 . -6) (undo-tree-id8406 . -6) (undo-tree-id8407 . -6) (undo-tree-id8408 . -6) (undo-tree-id8409 . -10) (undo-tree-id8410 . -10) (undo-tree-id8411 . -10) (undo-tree-id8412 . -10) (undo-tree-id8413 . -10) (undo-tree-id8414 . -10) (undo-tree-id8415 . -10) (undo-tree-id8416 . -10) (undo-tree-id8417 . -10) (undo-tree-id8418 . -10) (undo-tree-id8419 . -11) (undo-tree-id8420 . -11) (undo-tree-id8421 . -11) (undo-tree-id8422 . -11) (undo-tree-id8423 . -11) (undo-tree-id8424 . -11) (undo-tree-id8425 . -11) (undo-tree-id8426 . -11) (undo-tree-id8427 . -11) (undo-tree-id8428 . -11) (undo-tree-id8429 . -19) (undo-tree-id8430 . -19) (undo-tree-id8431 . -19) (undo-tree-id8432 . -20) (undo-tree-id8433 . -20) (undo-tree-id8434 . -20) (undo-tree-id8435 . -20) (undo-tree-id8436 . -21) (undo-tree-id8437 . -21) (undo-tree-id8438 . -21) (undo-tree-id8439 . -22) (undo-tree-id8440 . -22) (undo-tree-id8441 . -22) (undo-tree-id8442 . -22) (undo-tree-id8443 . -22) (undo-tree-id8444 . -22)) nil (26132 2592 98074 832000) 0 nil])
([nil nil ((638 . 648)) nil (26132 2592 98043 833000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -647) (undo-tree-id8395 . -1) (undo-tree-id8396 . -1) (undo-tree-id8397 . -1) (undo-tree-id8398 . -1) (undo-tree-id8399 . -1) (undo-tree-id8400 . -1) 648) nil (26132 2592 98042 746000) 0 nil])
([nil nil ((#("in " 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t)) . -644) (undo-tree-id8370 . -3) (undo-tree-id8371 . -1) (undo-tree-id8372 . -1) (undo-tree-id8373 . -2) (undo-tree-id8374 . -2) (undo-tree-id8375 . -3) (undo-tree-id8376 . -3) (undo-tree-id8377 . -3) (undo-tree-id8378 . -3) (undo-tree-id8379 . -3) (undo-tree-id8380 . -3) (undo-tree-id8381 . -3) (undo-tree-id8382 . -3) (undo-tree-id8383 . -3) (undo-tree-id8384 . -3) (undo-tree-id8385 . -3) (undo-tree-id8386 . -3) (undo-tree-id8387 . -3) (undo-tree-id8388 . -3) (undo-tree-id8389 . -3) (undo-tree-id8390 . -3) (undo-tree-id8391 . -3) (undo-tree-id8392 . -3) (undo-tree-id8393 . -3) (undo-tree-id8394 . -3) 647) nil (26132 2592 98003 91000) 0 nil])
([nil nil ((#("x " 0 1 (face font-lock-variable-name-face fontified t) 1 2 (fontified t)) . -642) (undo-tree-id8335 . -2) (undo-tree-id8336 . -1) (undo-tree-id8337 . -1) (undo-tree-id8338 . -1) (undo-tree-id8339 . -1) (undo-tree-id8340 . -1) (undo-tree-id8341 . -2) (undo-tree-id8342 . -2) (undo-tree-id8343 . -2) (undo-tree-id8344 . -2) (undo-tree-id8345 . -2) (undo-tree-id8346 . -2) (undo-tree-id8347 . -2) (undo-tree-id8348 . -2) (undo-tree-id8349 . -2) (undo-tree-id8350 . -2) (undo-tree-id8351 . -2) (undo-tree-id8352 . -2) (undo-tree-id8353 . -2) (undo-tree-id8354 . -2) (undo-tree-id8355 . -2) (undo-tree-id8356 . -2) (undo-tree-id8357 . -2) (undo-tree-id8358 . -2) (undo-tree-id8359 . -2) (undo-tree-id8360 . -2) (undo-tree-id8361 . -2) (undo-tree-id8362 . -2) (undo-tree-id8363 . -2) (undo-tree-id8364 . -2) (undo-tree-id8365 . -2) (undo-tree-id8366 . -2) (undo-tree-id8367 . -2) (undo-tree-id8368 . -2) (undo-tree-id8369 . -2) 644) nil (26132 2592 97747 457000) 0 nil])
([nil nil ((#("for " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . -638) (undo-tree-id8284 . -4) (undo-tree-id8285 . -1) (undo-tree-id8286 . -1) (undo-tree-id8287 . -1) (undo-tree-id8288 . -2) (undo-tree-id8289 . -2) (undo-tree-id8290 . -3) (undo-tree-id8291 . -3) (undo-tree-id8292 . -3) (undo-tree-id8293 . -4) (undo-tree-id8294 . -4) (undo-tree-id8295 . -4) (undo-tree-id8296 . -4) (undo-tree-id8297 . -4) (undo-tree-id8298 . -4) (undo-tree-id8299 . -4) (undo-tree-id8300 . -4) (undo-tree-id8301 . -4) (undo-tree-id8302 . -4) (undo-tree-id8303 . -4) (undo-tree-id8304 . -4) (undo-tree-id8305 . -4) (undo-tree-id8306 . -4) (undo-tree-id8307 . -4) (undo-tree-id8308 . -4) (undo-tree-id8309 . -4) (undo-tree-id8310 . -4) (undo-tree-id8311 . -4) (undo-tree-id8312 . -4) (undo-tree-id8313 . -4) (undo-tree-id8314 . -4) (undo-tree-id8315 . -4) (undo-tree-id8316 . -4) (undo-tree-id8317 . -4) (undo-tree-id8318 . -4) (undo-tree-id8319 . -4) (undo-tree-id8320 . -4) (undo-tree-id8321 . -4) (undo-tree-id8322 . -4) (undo-tree-id8323 . -4) (undo-tree-id8324 . -4) (undo-tree-id8325 . -4) (undo-tree-id8326 . -4) (undo-tree-id8327 . -4) (undo-tree-id8328 . -4) (undo-tree-id8329 . -4) (undo-tree-id8330 . -4) (undo-tree-id8331 . -4) (undo-tree-id8332 . -4) (undo-tree-id8333 . -4) (undo-tree-id8334 . -4) 642) nil (26132 2592 97722 116000) 0 nil])
([nil nil ((638 . 640)) nil (26132 2592 97686 538000) 0 nil])
([nil nil ((638 . 643) (#("st" 0 2 (fontified nil)) . 638) (638 . 640) (#("state" 0 5 (fontified nil)) . -638) (638 . 643) (#("st" 0 2 (fontified t)) . -638) (undo-tree-id8277 . -2) (undo-tree-id8278 . -1) (undo-tree-id8279 . -1) (undo-tree-id8280 . -1) (undo-tree-id8281 . -2) (undo-tree-id8282 . -2) (undo-tree-id8283 . -2) 640) nil (26132 2592 97685 262000) 0 nil])
([nil nil ((643 . 644)) nil (26132 2592 97679 130000) 0 nil])
([nil nil ((644 . 648) (#("chip" 0 4 (fontified nil)) . -644) (644 . 648)) nil (26132 2592 97678 430000) 0 nil])
([nil nil ((648 . 650)) nil (26132 2592 97677 522000) 0 nil])
([nil nil ((apply yas--snippet-revive 649 657 #s(yas--snippet nil nil #s(yas--exit 657 nil) 73 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 657 nil) 73 nil nil nil nil)) (649 . 657) (#("unwrap()$0" 0 10 (fontified nil)) . 649) (649 . 659) (#("u" 0 1 (fontified nil)) . 649) (649 . 650) (#("unwrap()" 0 8 (fontified nil)) . -649) (649 . 657) (#("u" 0 1 (fontified t)) . -649) (undo-tree-id8273 . -1) (undo-tree-id8274 . -1) (undo-tree-id8275 . -1) (undo-tree-id8276 . -1) 650) nil (26132 2592 97675 946000) 0 nil])
([nil nil ((657 . 660)) nil (26132 2592 97670 765000) 0 nil])
([nil nil ((apply yas--snippet-revive 658 664 #s(yas--snippet nil nil #s(yas--exit 664 nil) 74 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 664 nil) 74 nil nil nil nil)) (658 . 664) (#("into()$0" 0 8 (fontified nil)) . 658) (658 . 666) (#("in" 0 2 (fontified nil)) . 658) (658 . 660) (#("into() (as Into)" 0 16 (fontified nil)) . -658) (658 . 674) (#("in" 0 2 (face font-lock-keyword-face fontified t)) . -658) (undo-tree-id8267 . -2) (undo-tree-id8268 . -1) (undo-tree-id8269 . -1) (undo-tree-id8270 . -1) (undo-tree-id8271 . -2) (undo-tree-id8272 . -2) 660) nil (26132 2592 97669 268000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -662) (undo-tree-id8251 . -1) (undo-tree-id8252 . -1) (undo-tree-id8253 . -1) (undo-tree-id8254 . -1) (undo-tree-id8255 . -1) (undo-tree-id8256 . -1) (undo-tree-id8257 . -1) (undo-tree-id8258 . -1) (undo-tree-id8259 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -663) (undo-tree-id8260 . -1) (undo-tree-id8261 . -1) (undo-tree-id8262 . -1) (undo-tree-id8263 . -1) (undo-tree-id8264 . -1) (undo-tree-id8265 . -1) (undo-tree-id8266 . -1) 664) nil (26132 2592 97662 605000) 0 nil])
([nil nil ((662 . 664)) nil (26132 2592 97650 718000) 0 nil])
([nil nil ((apply yas--snippet-revive 658 669 #s(yas--snippet nil nil #s(yas--exit 669 nil) 75 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 669 nil) 75 nil nil nil nil)) (658 . 669) (#("into_iter()$0" 0 13 (fontified nil)) . 658) (658 . 671) (#("into_t" 0 6 (fontified nil)) . 658) (658 . 664) (#("into_iter() (as IntoIterator)" 0 29 (fontified nil)) . -658) (658 . 687) (#("into_t" 0 6 (fontified t)) . -658) (undo-tree-id8235 . -6) (undo-tree-id8236 . -4) (undo-tree-id8237 . -4) (undo-tree-id8238 . -4) (undo-tree-id8239 . -4) (undo-tree-id8240 . -4) (undo-tree-id8241 . -4) (undo-tree-id8242 . -4) (undo-tree-id8243 . -4) (undo-tree-id8244 . -4) (undo-tree-id8245 . -4) (undo-tree-id8246 . -5) (undo-tree-id8247 . -5) (undo-tree-id8248 . -5) (undo-tree-id8249 . -6) (undo-tree-id8250 . -6) 664) nil (26132 2592 97648 827000) 0 nil])
([nil nil ((669 . 673)) nil (26132 2592 97636 529000) 0 nil])
([nil nil ((apply yas--snippet-revive 670 681 #s(yas--snippet nil nil #s(yas--exit 681 nil) 76 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 681 nil) 76 nil nil nil nil)) (670 . 681) (#("into_iter()$0" 0 13 (fontified nil)) . 670) (670 . 683) (#("int" 0 3 (fontified nil)) . 670) (670 . 673) (#("into_iter() (as IntoIterator)" 0 29 (fontified nil)) . -670) (670 . 699) (#("int" 0 3 (fontified t)) . -670) (undo-tree-id8221 . -3) (undo-tree-id8222 . -1) (undo-tree-id8223 . -1) (undo-tree-id8224 . -1) (undo-tree-id8225 . -2) (undo-tree-id8226 . -2) (undo-tree-id8227 . -2) (undo-tree-id8228 . -2) (undo-tree-id8229 . -3) (undo-tree-id8230 . -3) (undo-tree-id8231 . -3) (undo-tree-id8232 . -3) (undo-tree-id8233 . -3) (undo-tree-id8234 . -3) 673) nil (26132 2592 97634 738000) 0 nil])
([nil nil ((#("iter()" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-3-face) fontified t) 5 6 (face (rainbow-delimiters-depth-3-face) fontified t)) . -675) (undo-tree-id8210 . -6) (undo-tree-id8211 . -6) (undo-tree-id8212 . -6) (undo-tree-id8213 . -6) (undo-tree-id8214 . -6) (undo-tree-id8215 . -6) (undo-tree-id8216 . -6) (undo-tree-id8217 . -6) (undo-tree-id8218 . -6) (undo-tree-id8219 . -6) (undo-tree-id8220 . -6) 681) nil (26132 2592 97622 612000) 0 nil])
([nil nil ((#("into_" 0 5 (fontified t)) . -670) (undo-tree-id8197 . -5) (undo-tree-id8198 . -5) (undo-tree-id8199 . -5) (undo-tree-id8200 . -5) (undo-tree-id8201 . -5) (undo-tree-id8202 . -5) (undo-tree-id8203 . -5) (undo-tree-id8204 . -5) (undo-tree-id8205 . -5) (undo-tree-id8206 . -5) (undo-tree-id8207 . -5) (undo-tree-id8208 . -5) (undo-tree-id8209 . -5) 675) nil (26132 2592 97613 383000) 0 nil])
([nil nil ((670 . 671)) nil (26132 2592 97602 624000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -670) (undo-tree-id8191 . -1) (undo-tree-id8192 . -1) (undo-tree-id8193 . -1) (undo-tree-id8194 . -1) (undo-tree-id8195 . -1) (undo-tree-id8196 . -1) 671) nil (26132 2592 97601 486000) 0 nil])
([nil nil ((670 . 671)) nil (26132 2592 97595 561000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 674 675 nil nil nil nil #s(yas--exit 676 nil))) #s(yas--exit 676 nil) 77 nil #s(yas--field 1 674 675 nil nil nil nil #s(yas--exit 676 nil)) nil nil)) (670 . 676) (#("map(${1:f})$0" 0 13 (fontified nil)) . 670) (670 . 683) (#("m" 0 1 (fontified nil)) . 670) (670 . 671) (#("map(…) (as Iterator)" 0 20 (fontified nil)) . -670) (670 . 690) (#("m" 0 1 (fontified t)) . -670) (undo-tree-id8185 . -1) (undo-tree-id8186 . -1) (undo-tree-id8187 . -1) (undo-tree-id8188 . -1) (undo-tree-id8189 . -1) (undo-tree-id8190 . -1) 671) nil (26132 2592 97593 99000) 0 nil])
([nil nil ((apply yas--snippet-revive 670 676 #s(yas--snippet nil (#s(yas--field 1 674 675 nil nil nil nil #s(yas--exit 676 nil))) #s(yas--exit 676 nil) 77 nil #s(yas--field 1 674 675 nil nil nil nil #s(yas--exit 676 nil)) nil nil))) nil (26132 2592 97580 488000) 0 nil])
([nil nil ((638 . 639)) nil (26132 2592 97575 988000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -675) (undo-tree-id8687 . -1) (undo-tree-id8688 . -1) 676 (t 26132 2592 150619 543000)) nil (26132 2631 395623 103000) 0 nil])
([nil nil ((675 . 677)) nil (26132 2631 395621 36000) 0 nil])
([nil nil ((676 . 677)) nil (26132 2631 395620 469000) 0 nil])
([nil nil ((678 . 681)) nil (26132 2631 395619 978000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -679) (undo-tree-id8661 . -1) (undo-tree-id8662 . -1) (undo-tree-id8663 . -1) (undo-tree-id8664 . -1) (undo-tree-id8665 . -1) (undo-tree-id8666 . -1) (undo-tree-id8667 . -1) (undo-tree-id8668 . -1) (undo-tree-id8669 . -1) (undo-tree-id8670 . -1) (undo-tree-id8671 . -1) (undo-tree-id8672 . -1) (undo-tree-id8673 . -1) (undo-tree-id8674 . -1) (undo-tree-id8675 . -1) (#("." 0 1 (fontified t)) . -680) (undo-tree-id8676 . -1) (undo-tree-id8677 . -1) (undo-tree-id8678 . -1) (undo-tree-id8679 . -1) (undo-tree-id8680 . -1) (undo-tree-id8681 . -1) (undo-tree-id8682 . -1) (undo-tree-id8683 . -1) (undo-tree-id8684 . -1) (undo-tree-id8685 . -1) (undo-tree-id8686 . -1) 681) nil (26132 2631 395618 488000) 0 nil])
([nil nil ((#("x| )" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-3-face) fontified t)) . -676) (undo-tree-id8633 . -3) (undo-tree-id8634 . -4) (undo-tree-id8635 . -2) (undo-tree-id8636 . -1) (undo-tree-id8637 . -1) (undo-tree-id8638 . -2) (undo-tree-id8639 . -2) (undo-tree-id8640 . -2) (undo-tree-id8641 . -2) (undo-tree-id8642 . -3) (undo-tree-id8643 . -3) (undo-tree-id8644 . -3) (undo-tree-id8645 . -3) (undo-tree-id8646 . -3) (undo-tree-id8647 . 1) (undo-tree-id8648 . -3) (undo-tree-id8649 . -3) (undo-tree-id8650 . -3) (undo-tree-id8651 . -3) (undo-tree-id8652 . -3) (undo-tree-id8653 . -3) (undo-tree-id8654 . -3) (undo-tree-id8655 . -3) (undo-tree-id8656 . -3) (undo-tree-id8657 . -3) (undo-tree-id8658 . -3) (undo-tree-id8659 . -3) (undo-tree-id8660 . -4) 680) nil (26132 2631 395601 331000) 0 nil])
([nil nil ((#("map(|" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-3-face) fontified t) 4 5 (fontified t)) . -671) (undo-tree-id8598 . -5) (undo-tree-id8599 . -5) (undo-tree-id8600 . -4) (undo-tree-id8601 . -3) (undo-tree-id8602 . -4) (undo-tree-id8603 . -4) (undo-tree-id8604 . -4) (undo-tree-id8605 . -5) (undo-tree-id8606 . -5) (undo-tree-id8607 . -5) (undo-tree-id8608 . -5) (undo-tree-id8609 . -5) (undo-tree-id8610 . -5) (undo-tree-id8611 . -5) (undo-tree-id8612 . -5) (undo-tree-id8613 . -5) (undo-tree-id8614 . -5) (undo-tree-id8615 . -5) (undo-tree-id8616 . -5) (undo-tree-id8617 . -5) (undo-tree-id8618 . -5) (undo-tree-id8619 . -5) (undo-tree-id8620 . -5) (undo-tree-id8621 . -5) (undo-tree-id8622 . -5) (undo-tree-id8623 . -5) (undo-tree-id8624 . -5) (undo-tree-id8625 . -5) (undo-tree-id8626 . -5) (undo-tree-id8627 . -5) (undo-tree-id8628 . -5) (undo-tree-id8629 . -5) (undo-tree-id8630 . -5) (undo-tree-id8631 . -5) (undo-tree-id8632 . -5) 676) nil (26132 2631 395583 895000) 0 nil])
([nil nil ((671 . 674)) nil (26132 2631 395559 636000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 680 716 nil nil nil t #s(yas--exit 717 nil))) #s(yas--exit 717 nil) 78 nil #s(yas--field 1 680 716 nil nil nil t #s(yas--exit 717 nil)) nil nil)) (671 . 682) (#("for_each(${1:f})$0" 0 18 (fontified nil)) . 671) (671 . 689) (#("for" 0 3 (fontified nil)) . 671) (671 . 674) (#("for_each(…) (as Iterator)" 0 25 (fontified nil)) . -671) (671 . 696) (#("for" 0 3 (face font-lock-keyword-face fontified t)) . -671) (undo-tree-id8585 . -3) (undo-tree-id8586 . -1) (undo-tree-id8587 . -1) (undo-tree-id8588 . -1) (undo-tree-id8589 . -1) (undo-tree-id8590 . -2) (undo-tree-id8591 . -2) (undo-tree-id8592 . -2) (undo-tree-id8593 . -3) (undo-tree-id8594 . -3) (undo-tree-id8595 . -3) (undo-tree-id8596 . -3) (undo-tree-id8597 . -3) 674) nil (26132 2631 395557 955000) 0 nil])
([nil nil ((681 . 682) (#("f" 0 1 (fontified nil)) . 681) (undo-tree-id8584 . -1) (680 . 681)) nil (26132 2631 395547 1000) 0 nil])
([nil nil ((681 . 682)) nil (26132 2631 395545 505000) 0 nil])
([nil nil ((683 . 686)) nil (26132 2631 395544 979000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -684) (undo-tree-id8552 . -1) (undo-tree-id8553 . -1) (undo-tree-id8554 . -1) (undo-tree-id8555 . -1) (undo-tree-id8556 . -1) (undo-tree-id8557 . -1) (undo-tree-id8558 . -1) (undo-tree-id8559 . -1) (undo-tree-id8560 . -1) (undo-tree-id8561 . -1) (undo-tree-id8562 . -1) (undo-tree-id8563 . -1) (undo-tree-id8564 . -1) (undo-tree-id8565 . -1) (undo-tree-id8566 . -1) (undo-tree-id8567 . -1) (undo-tree-id8568 . -1) (undo-tree-id8569 . -1) (undo-tree-id8570 . -1) (undo-tree-id8571 . -1) (undo-tree-id8572 . -1) (undo-tree-id8573 . -1) (#("." 0 1 (fontified t)) . -685) (undo-tree-id8574 . -1) (undo-tree-id8575 . -1) (undo-tree-id8576 . -1) (undo-tree-id8577 . -1) (undo-tree-id8578 . -1) (undo-tree-id8579 . -1) (undo-tree-id8580 . -1) (undo-tree-id8581 . -1) (undo-tree-id8582 . -1) (undo-tree-id8583 . -1) 686) nil (26132 2631 395542 517000) 0 nil])
([nil nil ((684 . 688)) nil (26132 2631 395399 453000) 0 nil])
([nil nil ((apply yas--snippet-revive 684 694 #s(yas--snippet nil nil #s(yas--exit 693 nil) 79 nil nil #s(yas--field 1 680 716 nil nil nil t #s(yas--exit 717 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 693 nil) 79 nil nil #s(yas--field 1 680 716 nil nil nil t #s(yas--exit 717 nil)) nil)) (684 . 694) (#("println!($0)" 0 12 (fontified nil)) . 684) (undo-tree-id8536 . -12) (684 . 696) (#("prin" 0 4 (fontified nil)) . 684) (undo-tree-id8537 . -4) (684 . 688) (#("println!(…)" 0 11 (fontified nil)) . -684) (undo-tree-id8538 . -11) (684 . 695) (#("prin" 0 4 (fontified t)) . -684) (undo-tree-id8539 . -4) (undo-tree-id8540 . -4) (undo-tree-id8541 . -4) (undo-tree-id8542 . -1) (undo-tree-id8543 . -1) (undo-tree-id8544 . -2) (undo-tree-id8545 . -2) (undo-tree-id8546 . -3) (undo-tree-id8547 . -3) (undo-tree-id8548 . -4) (undo-tree-id8549 . -4) (undo-tree-id8550 . -4) (undo-tree-id8551 . -4) 688) nil (26132 2631 395397 720000) 0 nil])
([nil nil ((693 . 695)) nil (26132 2631 395385 482000) 0 nil])
([nil nil ((#("?" 0 1 (face rust-question-mark fontified t)) . -693) (undo-tree-id8526 . -1) (undo-tree-id8527 . -1) (undo-tree-id8528 . -1) (undo-tree-id8529 . -1) (undo-tree-id8530 . -1) (undo-tree-id8531 . -1) (undo-tree-id8532 . -1) (#("?" 0 1 (face rust-question-mark fontified t)) . -694) (undo-tree-id8533 . -1) (undo-tree-id8534 . -1) (undo-tree-id8535 . -1) 695) nil (26132 2631 395384 294000) 0 nil])
([nil nil ((693 . 695)) nil (26132 2631 395376 797000) 0 nil])
([nil nil ((694 . 696)) nil (26132 2631 395376 148000) 0 nil])
([nil nil ((697 . 701)) nil (26132 2631 395375 521000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -700) (undo-tree-id8521 . -1) (undo-tree-id8522 . -1) (undo-tree-id8523 . -1) (undo-tree-id8524 . -1) (undo-tree-id8525 . -1) 701) nil (26132 2631 395374 670000) 0 nil])
([nil nil ((700 . 702)) nil (26132 2631 395370 94000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -701) (undo-tree-id8517 . -1) (undo-tree-id8518 . -1) (undo-tree-id8519 . -1) (undo-tree-id8520 . -1) 702) nil (26132 2631 395368 953000) 0 nil])
([nil nil ((apply yas--snippet-revive 701 715 #s(yas--snippet nil nil #s(yas--exit 715 nil) 80 nil nil #s(yas--field 1 680 716 nil nil nil t #s(yas--exit 717 nil)) nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 715 nil) 80 nil nil #s(yas--field 1 680 716 nil nil nil t #s(yas--exit 717 nil)) nil)) (701 . 715) (#("feature_type()$0" 0 16 (fontified nil)) . 701) (701 . 717) (#("feature_type()" 0 14 (fontified nil)) . -701) (701 . 715)) nil (26132 2631 395360 335000) 0 nil])
([nil nil ((apply yas--snippet-revive 671 717 #s(yas--snippet nil (#s(yas--field 1 680 716 nil nil nil t #s(yas--exit 717 nil))) #s(yas--exit 717 nil) 78 nil #s(yas--field 1 680 716 nil nil nil t #s(yas--exit 717 nil)) nil nil))) nil (26132 2631 395358 80000) 0 nil])
([nil nil ((717 . 718)) nil (26132 2631 395353 901000) 0 nil])
([nil nil ((695 . 697) (t 26132 2631 447288 622000)) nil (26132 2638 142997 606000) 0 nil])
([nil nil ((#("/" 0 1 (face rust-string-interpolation fontified t)) . -696) (undo-tree-id8693 . -1) (undo-tree-id8694 . -1) 697) nil (26132 2638 142995 826000) 0 nil])
([nil nil ((696 . 697)) nil (26132 2638 142991 356000) 0 nil])
([nil nil ((#(">" 0 1 (face rust-string-interpolation syntax-table (1) fontified t)) . -696) (undo-tree-id8689 . -1) (undo-tree-id8690 . -1) (undo-tree-id8691 . -1) (undo-tree-id8692 . -1) 697) nil (26132 2638 142988 555000) 0 nil])
([nil nil ((696 . 697)) nil (26132 2638 142972 860000) 0 nil])
([nil nil ((#(">" 0 1 (face rust-string-interpolation syntax-table (1) fontified t)) . -696) (undo-tree-id8695 . -1) (undo-tree-id8696 . -1) (undo-tree-id8697 . -1) (undo-tree-id8698 . -1) (undo-tree-id8699 . -1) (undo-tree-id8700 . -1) (undo-tree-id8701 . -1) (undo-tree-id8702 . -1) (undo-tree-id8703 . -1) (undo-tree-id8704 . -1) (undo-tree-id8705 . -1) (undo-tree-id8706 . -1) 697 (t 26132 2638 163955 701000)) nil (26132 2639 720160 352000) 0 nil])
([nil nil ((696 . 697)) nil (26132 2639 720144 79000) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . 638) (t 26132 2639 740622 465000)) nil (26132 2652 30472 191000) 0 nil])
([nil nil ((648 . 650) (t 26132 2652 50623 220000)) nil (26132 2666 137538 242000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -649) (undo-tree-id8712 . -1) (undo-tree-id8713 . -1) (undo-tree-id8714 . -1) (undo-tree-id8715 . -1) (undo-tree-id8716 . -1) (undo-tree-id8717 . -1) 650) nil (26132 2666 137536 906000) 0 nil])
([nil nil ((649 . 650)) nil (26132 2666 137531 113000) 0 nil])
([nil nil ((53 . 54) (67 . 87) (apply yas--snippet-revive 649 661 #s(yas--snippet nil nil #s(yas--exit 661 nil) 81 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 661 nil) 81 nil nil nil nil)) (649 . 661) (#("borrow_mut()$0" 0 14 (fontified nil)) . 649) (649 . 663) (#("b" 0 1 (fontified nil)) . 649) (649 . 650) (#("borrow_mut() (use std::borrow::BorrowMut)" 0 41 (fontified nil)) . -649) (649 . 690) (#("b" 0 1 (fontified t)) . -649) (undo-tree-id8707 . -1) (undo-tree-id8708 . -1) (undo-tree-id8709 . -1) (undo-tree-id8710 . -1) (undo-tree-id8711 . -1) 650) nil (26132 2666 137526 893000) 0 nil])
([nil nil ((#("mut()" 0 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-3-face) fontified t) 4 5 (face (rainbow-delimiters-depth-3-face) fontified t)) . -677) (undo-tree-id8764 . -5) (undo-tree-id8765 . -5) (undo-tree-id8766 . -5) (undo-tree-id8767 . -5) (undo-tree-id8768 . -5) (undo-tree-id8769 . -5) (undo-tree-id8770 . -5) (undo-tree-id8771 . -5) (undo-tree-id8772 . -5) (undo-tree-id8773 . -5) (undo-tree-id8774 . -5) (undo-tree-id8775 . -5) (undo-tree-id8776 . -5) (undo-tree-id8777 . -5) (undo-tree-id8778 . -5) (undo-tree-id8779 . -5) 682 (t 26132 2666 157290 752000)) nil (26132 2675 541504 803000) 0 nil])
([nil nil ((#("borrow_" 0 7 (fontified t)) . -670) (undo-tree-id8747 . -7) (undo-tree-id8748 . -7) (undo-tree-id8749 . -7) (undo-tree-id8750 . -7) (undo-tree-id8751 . -7) (undo-tree-id8752 . -7) (undo-tree-id8753 . -7) (undo-tree-id8754 . -7) (undo-tree-id8755 . -7) (undo-tree-id8756 . -7) (undo-tree-id8757 . -7) (undo-tree-id8758 . -7) (undo-tree-id8759 . -7) (undo-tree-id8760 . -7) (undo-tree-id8761 . -7) (undo-tree-id8762 . -7) (undo-tree-id8763 . -7) 677) nil (26132 2675 541717 773000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -669) (undo-tree-id8780 . -1) (undo-tree-id8781 . -1) (undo-tree-id8782 . -1) (undo-tree-id8783 . -1) (undo-tree-id8784 . -1) (undo-tree-id8785 . -1) (undo-tree-id8786 . -1) (undo-tree-id8787 . -1) (undo-tree-id8788 . -1) (undo-tree-id8789 . -1) (undo-tree-id8790 . -1) (undo-tree-id8791 . -1) (undo-tree-id8792 . -1) (undo-tree-id8793 . -1) (undo-tree-id8794 . -1) (undo-tree-id8795 . -1) (undo-tree-id8796 . -1) (undo-tree-id8797 . -1) (undo-tree-id8798 . -1) (undo-tree-id8799 . -1) (undo-tree-id8800 . -1) (undo-tree-id8801 . -1) (undo-tree-id8802 . -1) (undo-tree-id8803 . -1) (undo-tree-id8804 . -1) (undo-tree-id8805 . -1) (undo-tree-id8806 . -1) (undo-tree-id8807 . -1) (undo-tree-id8808 . -1) (undo-tree-id8809 . -1) 670) nil (26132 2676 427932 204000) 0 nil] [nil nil ((#("chip." 0 5 (fontified t)) . -665) (undo-tree-id8718 . -5) (undo-tree-id8719 . -5) (undo-tree-id8720 . -5) (undo-tree-id8721 . -5) (undo-tree-id8722 . -5) (undo-tree-id8723 . -5) (undo-tree-id8724 . -5) (undo-tree-id8725 . -5) (undo-tree-id8726 . -5) (undo-tree-id8727 . -5) (undo-tree-id8728 . -5) (undo-tree-id8729 . -5) (undo-tree-id8730 . -5) (undo-tree-id8731 . -5) (undo-tree-id8732 . -5) (undo-tree-id8733 . -5) (undo-tree-id8734 . -5) (undo-tree-id8735 . -5) (undo-tree-id8736 . -5) (undo-tree-id8737 . -5) (undo-tree-id8738 . -5) (undo-tree-id8739 . -5) (undo-tree-id8740 . -5) (undo-tree-id8741 . -5) (undo-tree-id8742 . -5) (undo-tree-id8743 . -5) (undo-tree-id8744 . -5) (undo-tree-id8745 . -5) (undo-tree-id8746 . -5) 670) ((665 . 670)) (26132 2675 541477 83000) 0 nil])
([nil nil ((#("iter()" 0 4 (fontified t) 4 5 (face (rainbow-delimiters-depth-3-face) fontified t) 5 6 (face (rainbow-delimiters-depth-3-face) fontified t)) . -684) (undo-tree-id8926 . -6) (undo-tree-id8927 . -6) (undo-tree-id8928 . -4) (undo-tree-id8929 . -4) (undo-tree-id8930 . -4) (undo-tree-id8931 . -4) (undo-tree-id8932 . -4) (undo-tree-id8933 . -4) (undo-tree-id8934 . -4) (undo-tree-id8935 . -6) (undo-tree-id8936 . -6) (undo-tree-id8937 . -6) (undo-tree-id8938 . -6) (undo-tree-id8939 . -6) 690 (t 26132 2676 447291 384000)) nil (26132 2694 410068 3000) 0 nil])
nil
([nil nil ((#("into_" 0 5 (fontified t)) . -679) (undo-tree-id8910 . -5) (undo-tree-id8911 . -5) (undo-tree-id8912 . -4) (undo-tree-id8913 . -5) (undo-tree-id8914 . -5) (undo-tree-id8915 . -5) (undo-tree-id8916 . -5) (undo-tree-id8917 . -5) (undo-tree-id8918 . -5) (undo-tree-id8919 . -5) (undo-tree-id8920 . -5) (undo-tree-id8921 . -5) (undo-tree-id8922 . -5) (undo-tree-id8923 . -5) (undo-tree-id8924 . -5) (undo-tree-id8925 . -5) 684) nil (26132 2694 409822 368000) 0 nil])
([nil nil ((679 . 680)) nil (26132 2694 409811 500000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -678) (undo-tree-id8865 . -1) (undo-tree-id8866 . -1) (undo-tree-id8867 . -1) (undo-tree-id8868 . -1) (undo-tree-id8869 . -1) (undo-tree-id8870 . -1) (undo-tree-id8871 . -1) (undo-tree-id8872 . -1) (undo-tree-id8873 . -1) (undo-tree-id8874 . -1) (undo-tree-id8875 . -1) (undo-tree-id8876 . -1) (undo-tree-id8877 . -1) (undo-tree-id8878 . -1) (undo-tree-id8879 . -1) (undo-tree-id8880 . -1) (undo-tree-id8881 . -1) (undo-tree-id8882 . -1) (undo-tree-id8883 . -1) (undo-tree-id8884 . -1) (undo-tree-id8885 . -1) (undo-tree-id8886 . -1) (undo-tree-id8887 . -1) (undo-tree-id8888 . -1) (undo-tree-id8889 . -1) (undo-tree-id8890 . -1) (undo-tree-id8891 . -1) (undo-tree-id8892 . -1) (undo-tree-id8893 . -1) (undo-tree-id8894 . -1) (undo-tree-id8895 . -1) (undo-tree-id8896 . -1) (undo-tree-id8897 . -1) (undo-tree-id8898 . -1) (undo-tree-id8899 . -1) (#("." 0 1 (fontified t)) . -679) (undo-tree-id8900 . -1) (undo-tree-id8901 . -1) (undo-tree-id8902 . -1) (undo-tree-id8903 . -1) (undo-tree-id8904 . -1) (undo-tree-id8905 . -1) (undo-tree-id8906 . -1) (undo-tree-id8907 . -1) (undo-tree-id8908 . -1) (undo-tree-id8909 . -1) 680) nil (26132 2694 409809 166000) 0 nil])
([nil nil ((678 . 679)) nil (26132 2694 409778 803000) 0 nil])
([nil nil ((678 . 681)) nil (26132 2694 409778 176000) 0 nil])
([nil nil ((#("n" 0 1 (face font-lock-keyword-face fontified t)) . -680) (undo-tree-id8859 . -1) (undo-tree-id8860 . -1) (undo-tree-id8861 . -1) (undo-tree-id8862 . -1) (undo-tree-id8863 . -1) (undo-tree-id8864 . -1) 681) nil (26132 2694 409777 141000) 0 nil])
([nil nil ((680 . 681)) nil (26132 2694 409771 780000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -680) (undo-tree-id8856 . -1) (undo-tree-id8857 . -1) (undo-tree-id8858 . -1) 681) nil (26132 2694 409770 933000) 0 nil])
([nil nil ((680 . 682)) nil (26132 2694 409768 313000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -680) (undo-tree-id8846 . -1) (undo-tree-id8847 . -1) (undo-tree-id8848 . -1) (undo-tree-id8849 . -1) (undo-tree-id8850 . -1) (undo-tree-id8851 . -1) (undo-tree-id8852 . -1) (#("e" 0 1 (fontified t)) . -681) (undo-tree-id8853 . -1) (undo-tree-id8854 . -1) (undo-tree-id8855 . -1) 682) nil (26132 2694 409767 49000) 0 nil])
([nil nil ((680 . 683)) nil (26132 2694 409759 759000) 0 nil])
([nil nil ((apply yas--snippet-revive 679 690 #s(yas--snippet nil nil #s(yas--exit 690 nil) 82 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 690 nil) 82 nil nil nil nil)) (679 . 690) (#("into_iter()$0" 0 13 (fontified nil)) . 679) (679 . 692) (#("iter" 0 4 (fontified nil)) . 679) (679 . 683) (#("into_iter() (as IntoIterator)" 0 29 (fontified nil)) . -679) (679 . 708) (#("iter" 0 4 (fontified t)) . -679) (undo-tree-id8815 . -4) (undo-tree-id8816 . -1) (undo-tree-id8817 . -1) (undo-tree-id8818 . -1) (undo-tree-id8819 . -1) (undo-tree-id8820 . -1) (undo-tree-id8821 . -1) (undo-tree-id8822 . -1) (undo-tree-id8823 . -1) (undo-tree-id8824 . -1) (undo-tree-id8825 . -1) (undo-tree-id8826 . -1) (undo-tree-id8827 . -1) (undo-tree-id8828 . -1) (undo-tree-id8829 . -1) (undo-tree-id8830 . -1) (undo-tree-id8831 . -1) (undo-tree-id8832 . -1) (undo-tree-id8833 . -1) (undo-tree-id8834 . -1) (undo-tree-id8835 . -1) (undo-tree-id8836 . -1) (undo-tree-id8837 . -1) (undo-tree-id8838 . -2) (undo-tree-id8839 . -2) (undo-tree-id8840 . -3) (undo-tree-id8841 . -3) (undo-tree-id8842 . -4) (undo-tree-id8843 . -4) (undo-tree-id8844 . -4) (undo-tree-id8845 . -4) 683) nil (26132 2694 409756 965000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -690) (undo-tree-id8810 . -1) (undo-tree-id8811 . -1) (undo-tree-id8812 . -1) (undo-tree-id8813 . -1) (undo-tree-id8814 . -1) 691) nil (26132 2694 409731 783000) 0 nil])
([nil nil ((#("state.chip.unwrap().into_iter().for_each(|x| println!(\"{:?}\", x.feature_type()));" 0 6 (fontified t) 6 10 (fontified t) 10 11 (fontified t) 11 17 (fontified t) 17 18 (face (rainbow-delimiters-depth-3-face) fontified t) 18 19 (face (rainbow-delimiters-depth-3-face) fontified t) 19 20 (fontified t) 20 29 (fontified t) 29 30 (face (rainbow-delimiters-depth-3-face) fontified t) 30 31 (face (rainbow-delimiters-depth-3-face) fontified t) 31 32 (fontified t) 32 40 (fontified t) 40 41 (face (rainbow-delimiters-depth-3-face) fontified t) 41 45 (fontified t) 45 53 (face rust-builtin-formatting-macro fontified t) 53 54 (face (rainbow-delimiters-depth-4-face) fontified t) 54 55 (face font-lock-string-face fontified t) 55 58 (face rust-string-interpolation fontified t) 58 59 (face rust-string-interpolation fontified t) 59 60 (face font-lock-string-face fontified t) 60 64 (fontified t) 64 76 (fontified t) 76 77 (face (rainbow-delimiters-depth-5-face) fontified t) 77 78 (face (rainbow-delimiters-depth-5-face) fontified t) 78 79 (face (rainbow-delimiters-depth-4-face) fontified t) 79 80 (face (rainbow-delimiters-depth-3-face) fontified t) 80 81 (fontified t)) . 659) (undo-tree-id8994 . -66) (undo-tree-id8995 . -61) (undo-tree-id8996 . -66) (undo-tree-id8997 . -66) (undo-tree-id8998 . -19) (undo-tree-id8999 . -19) (undo-tree-id9000 . -19) (undo-tree-id9001 . -19) (undo-tree-id9002 . -19) (undo-tree-id9003 . -19) (undo-tree-id9004 . -19) (undo-tree-id9005 . -19) (undo-tree-id9006 . -19) (undo-tree-id9007 . -19) (undo-tree-id9008 . -19) (undo-tree-id9009 . -19) (undo-tree-id9010 . -19) (undo-tree-id9011 . -19) (undo-tree-id9012 . -19) (undo-tree-id9013 . -19) (undo-tree-id9014 . -19) (undo-tree-id9015 . -19) (undo-tree-id9016 . -19) (undo-tree-id9017 . -19) (undo-tree-id9018 . -19) (undo-tree-id9019 . -19) (undo-tree-id9020 . -19) (undo-tree-id9021 . -19) (undo-tree-id9022 . -19) (undo-tree-id9023 . -19) (undo-tree-id9024 . -19) (undo-tree-id9025 . -19) (undo-tree-id9026 . -19) (undo-tree-id9027 . -19) (undo-tree-id9028 . -19) (undo-tree-id9029 . -19) (undo-tree-id9030 . -19) (undo-tree-id9031 . -31) (undo-tree-id9032 . -20) (undo-tree-id9033 . -20) (undo-tree-id9034 . -20) (undo-tree-id9035 . -20) (undo-tree-id9036 . -20) (undo-tree-id9037 . -20) (undo-tree-id9038 . -20) (undo-tree-id9039 . -20) (undo-tree-id9040 . -20) (undo-tree-id9041 . -20) (undo-tree-id9042 . -20) (undo-tree-id9043 . -20) (undo-tree-id9044 . -20) (undo-tree-id9045 . -20) (undo-tree-id9046 . -20) (undo-tree-id9047 . -20) (undo-tree-id9048 . -20) (undo-tree-id9049 . -20) (undo-tree-id9050 . -20) (undo-tree-id9051 . -20) (undo-tree-id9052 . -20) (undo-tree-id9053 . -20) (undo-tree-id9054 . -20) (undo-tree-id9055 . -20) (undo-tree-id9056 . -20) (undo-tree-id9057 . -20) (undo-tree-id9058 . -20) (undo-tree-id9059 . -20) (undo-tree-id9060 . -20) (undo-tree-id9061 . -20) (undo-tree-id9062 . -31) (undo-tree-id9063 . -31) (undo-tree-id9064 . -31) (undo-tree-id9065 . -31) (undo-tree-id9066 . -31) (undo-tree-id9067 . -31) (undo-tree-id9068 . -31) (undo-tree-id9069 . -31) (undo-tree-id9070 . -31) (undo-tree-id9071 . -31) (undo-tree-id9072 . -31) (undo-tree-id9073 . -31) (undo-tree-id9074 . -31) (undo-tree-id9075 . -31) (undo-tree-id9076 . -31) (undo-tree-id9077 . -31) (undo-tree-id9078 . -31) (undo-tree-id9079 . -81) (t 26132 2694 430625 821000)) nil (26132 2713 927901 522000) 0 nil])
([nil nil ((659 . 664)) nil (26132 2713 927655 633000) 0 nil])
([nil nil ((664 . 668)) nil (26132 2713 927655 184000) 0 nil])
([nil nil ((#("h" 0 1 (face font-lock-variable-name-face fontified t)) . -667) (undo-tree-id8985 . -1) (undo-tree-id8986 . -1) (undo-tree-id8987 . -1) (undo-tree-id8988 . -1) (undo-tree-id8989 . -1) (undo-tree-id8990 . -1) (undo-tree-id8991 . -1) (undo-tree-id8992 . -1) (undo-tree-id8993 . -1) 668) nil (26132 2713 927654 143000) 0 nil])
([nil nil ((667 . 675)) nil (26132 2713 927647 172000) 0 nil])
([nil nil ((674 . 679) (#("s" 0 1 (fontified nil)) . 674) (674 . 675) (#("state" 0 5 (fontified nil)) . -674) (674 . 679) (#("s" 0 1 (fontified t)) . -674) (undo-tree-id8980 . -1) (undo-tree-id8981 . -1) (undo-tree-id8982 . -1) (undo-tree-id8983 . -1) (undo-tree-id8984 . -1) 675) nil (26132 2713 927646 190000) 0 nil])
([nil nil ((679 . 680)) nil (26132 2713 927641 744000) 0 nil])
([nil nil ((680 . 684) (#("chip" 0 4 (fontified nil)) . -680) (680 . 684)) nil (26132 2713 927640 976000) 0 nil])
([nil nil ((684 . 686)) nil (26132 2713 927639 992000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -684) (undo-tree-id8960 . -1) (undo-tree-id8961 . -1) (undo-tree-id8962 . -1) (undo-tree-id8963 . -1) (undo-tree-id8964 . -1) (undo-tree-id8965 . -1) (undo-tree-id8966 . -1) (undo-tree-id8967 . -1) (undo-tree-id8968 . -1) (undo-tree-id8969 . -1) (undo-tree-id8970 . -1) (undo-tree-id8971 . -1) (undo-tree-id8972 . -1) (undo-tree-id8973 . -1) (#("g" 0 1 (fontified t)) . -685) (undo-tree-id8974 . -1) (undo-tree-id8975 . -1) (undo-tree-id8976 . -1) (undo-tree-id8977 . -1) (undo-tree-id8978 . -1) (undo-tree-id8979 . -1) 686) nil (26132 2713 927638 443000) 0 nil])
([nil nil ((684 . 687)) nil (26132 2713 927625 137000) 0 nil])
([nil nil ((684 . 685)) nil (26132 2713 927624 524000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -684) (undo-tree-id8949 . -1) (undo-tree-id8950 . -1) (undo-tree-id8951 . -1) (undo-tree-id8952 . -1) (undo-tree-id8953 . -1) (undo-tree-id8954 . -1) (undo-tree-id8955 . -1) (undo-tree-id8956 . -1) (undo-tree-id8957 . -1) (undo-tree-id8958 . -1) (undo-tree-id8959 . -1) 685) nil (26132 2713 927623 287000) 0 nil])
([nil nil ((684 . 686)) nil (26132 2713 927615 29000) 0 nil])
([nil nil ((apply yas--snippet-revive 685 693 #s(yas--snippet nil nil #s(yas--exit 693 nil) 83 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 693 nil) 83 nil nil nil nil)) (685 . 693) (#("unwrap()$0" 0 10 (fontified nil)) . 685) (685 . 695) (#("u" 0 1 (fontified nil)) . 685) (685 . 686) (#("unwrap()" 0 8 (fontified nil)) . -685) (685 . 693) (#("u" 0 1 (fontified t)) . -685) (undo-tree-id8943 . -1) (undo-tree-id8944 . -1) (undo-tree-id8945 . -1) (undo-tree-id8946 . -1) (undo-tree-id8947 . -1) (undo-tree-id8948 . -1) 686) nil (26132 2713 927612 806000) 0 nil])
([nil nil ((697 . 705) (#("            " 0 12 (fontified nil)) . 696) (undo-tree-id8940 . -8) (undo-tree-id8941 . -8) (undo-tree-id8942 . -8) (704 . 708) (695 . 705)) nil (26132 2713 927600 425000) 0 nil])
([nil nil ((674 . 675) (t 26132 2713 937293 686000)) nil (26132 2724 107412 224000) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . -674) (undo-tree-id9080 . -1) (undo-tree-id9081 . -1) (undo-tree-id9082 . -1) (undo-tree-id9083 . -1) (undo-tree-id9084 . -1) (undo-tree-id9085 . -1) (undo-tree-id9086 . -1) (undo-tree-id9087 . -1) (undo-tree-id9088 . -1) (undo-tree-id9089 . -1) (undo-tree-id9090 . -1) (undo-tree-id9091 . -1) (undo-tree-id9092 . -1) (undo-tree-id9093 . -1) (undo-tree-id9094 . -1) (undo-tree-id9095 . -1) 675 (t 26132 2724 157294 313000)) nil (26132 2729 147597 476000) 0 nil])
([nil nil ((680 . 681) (t 26132 2729 200627 956000)) nil (26132 2735 215365 108000) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . -680) (undo-tree-id9096 . -1) (undo-tree-id9097 . -1) (undo-tree-id9098 . -1) (undo-tree-id9099 . -1) (undo-tree-id9100 . -1) (undo-tree-id9101 . -1) (undo-tree-id9102 . -1) (undo-tree-id9103 . -1) (undo-tree-id9104 . -1) (undo-tree-id9105 . -1) (undo-tree-id9106 . -1) (undo-tree-id9107 . -1) (undo-tree-id9108 . -1) (undo-tree-id9109 . -1) (undo-tree-id9110 . -1) (undo-tree-id9111 . -1) 681 (t 26132 2735 233961 660000)) nil (26132 2738 646295 33000) 0 nil])
([nil nil ((697 . 709) (#("            " 0 12 (fontified nil)) . 696) (696 . 708) (696 . 697) (t 26132 2738 667295 204000)) nil (26132 3572 423971 752000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -708) (undo-tree-id9148 . -1) (undo-tree-id9149 . -1) (undo-tree-id9150 . -1) (undo-tree-id9151 . -1) (undo-tree-id9152 . -1) (undo-tree-id9153 . -1) (undo-tree-id9154 . -1) (undo-tree-id9155 . -1) 709) nil (26132 3572 423970 70000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -695) (undo-tree-id9133 . -1) (undo-tree-id9134 . -1) (undo-tree-id9135 . -1) (undo-tree-id9136 . -1) (undo-tree-id9137 . -1) (undo-tree-id9138 . -1) (undo-tree-id9139 . -1) (undo-tree-id9140 . -1) (undo-tree-id9141 . -1) (undo-tree-id9142 . -1) (undo-tree-id9143 . -1) (undo-tree-id9144 . -1) (undo-tree-id9145 . -1) (undo-tree-id9146 . -1) (undo-tree-id9147 . -1) 696) nil (26132 3572 423959 424000) 0 nil])
([nil nil ((707 . 708) 704) nil (26132 3572 423801 305000) 0 nil])
([nil nil ((#("#[derive(Default)]
struct State {
    chip: Option<sensors::Chip>,
    temp: f32,
}

impl State {
    fn new() -> State {
        let chip = Sensors::new().into_iter().find(|x| x.get_name().unwrap()==\"coretemp-isa-0000\");    
        State { chip, ..Default::default() }
    }



}" 0 1 (face font-lock-preprocessor-face fontified t) 1 2 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t) 2 8 (face font-lock-preprocessor-face fontified t) 8 9 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 9 16 (face font-lock-preprocessor-face fontified t) 16 17 (face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face) fontified t) 17 18 (face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face) fontified t) 18 19 (fontified t) 19 25 (face font-lock-keyword-face fontified t) 25 26 (fontified t) 26 31 (face font-lock-type-face fontified t) 31 32 (fontified t) 32 33 (face (rainbow-delimiters-depth-1-face) fontified t) 33 34 (fontified t) 34 38 (fontified t) 38 42 (face font-lock-variable-name-face fontified t) 42 44 (fontified t) 44 50 (face font-lock-type-face fontified t) 50 51 (face (rainbow-delimiters-depth-2-face) fontified t) 51 58 (face font-lock-constant-face fontified t) 58 60 (fontified t) 60 64 (face font-lock-type-face fontified t) 64 65 (face (rainbow-delimiters-depth-2-face) fontified t) 65 67 (fontified t) 67 71 (fontified t) 71 75 (face font-lock-variable-name-face fontified t) 75 77 (fontified t) 77 80 (face font-lock-type-face fontified t) 80 81 (fontified t) 81 82 (fontified t) 82 83 (face (rainbow-delimiters-depth-1-face) fontified t) 83 84 (fontified t) 84 85 (fontified t) 85 89 (face font-lock-keyword-face fontified t) 89 90 (fontified t) 90 95 (face font-lock-type-face fontified t) 95 96 (fontified t) 96 97 (face (rainbow-delimiters-depth-1-face) fontified t) 97 98 (fontified t) 98 102 (fontified t) 102 104 (face font-lock-keyword-face fontified t) 104 105 (fontified t) 105 108 (face font-lock-function-name-face fontified t) 108 109 (face (rainbow-delimiters-depth-2-face) fontified t) 109 110 (face (rainbow-delimiters-depth-2-face) fontified t) 110 112 (fontified t) 112 113 (fontified t syntax-table (1)) 113 114 (fontified t) 114 119 (face font-lock-type-face fontified t) 119 120 (fontified t) 120 121 (face (rainbow-delimiters-depth-2-face) fontified t) 121 122 (fontified t) 122 130 (fontified t) 130 133 (face font-lock-keyword-face fontified t) 133 134 (fontified t) 134 138 (face font-lock-variable-name-face fontified t) 138 141 (fontified t) 141 148 (face font-lock-type-face fontified t) 148 150 (fontified t) 150 153 (fontified t) 153 154 (face (rainbow-delimiters-depth-3-face) fontified t) 154 155 (face (rainbow-delimiters-depth-3-face) fontified t) 155 156 (fontified t) 156 165 (fontified t) 165 166 (face (rainbow-delimiters-depth-3-face) fontified t) 166 167 (face (rainbow-delimiters-depth-3-face) fontified t) 167 168 (fontified t) 168 172 (fontified t) 172 173 (face (rainbow-delimiters-depth-3-face) fontified t) 173 179 (fontified t) 179 187 (fontified t) 187 188 (face (rainbow-delimiters-depth-4-face) fontified t) 188 189 (face (rainbow-delimiters-depth-4-face) fontified t) 189 190 (fontified t) 190 196 (fontified t) 196 197 (face (rainbow-delimiters-depth-4-face) fontified t) 197 198 (face (rainbow-delimiters-depth-4-face) fontified t) 198 200 (fontified t) 200 201 (face font-lock-string-face fontified t) 201 217 (face font-lock-string-face fontified t) 217 218 (face font-lock-string-face fontified t rear-nonsticky t) 218 219 (face font-lock-string-face fontified t) 219 220 (face (rainbow-delimiters-depth-3-face) fontified t) 220 221 (fontified t rear-nonsticky t) 221 225 (fontified t) 225 226 (fontified t) 226 234 (fontified t) 234 239 (face font-lock-type-face fontified t) 239 240 (fontified t) 240 241 (face (rainbow-delimiters-depth-3-face) fontified t) 241 242 (fontified t) 242 250 (fontified t) 250 257 (face font-lock-type-face fontified t) 257 259 (fontified t) 259 266 (fontified t) 266 267 (face (rainbow-delimiters-depth-4-face) fontified t) 267 268 (face (rainbow-delimiters-depth-4-face) fontified t) 268 269 (fontified t) 269 270 (face (rainbow-delimiters-depth-3-face) fontified t) 270 271 (fontified t) 271 275 (fontified t) 275 276 (face (rainbow-delimiters-depth-2-face) fontified t) 276 277 (fontified t) 277 278 (fontified t) 278 279 (fontified t) 279 280 (fontified t) 280 281 (face (rainbow-delimiters-depth-1-face) fontified t)) . 113) (undo-tree-id9112 . -281) (undo-tree-id9113 . -9) (undo-tree-id9114 . -57) (undo-tree-id9115 . -220) (undo-tree-id9116 . -279) (undo-tree-id9117 . -278) (undo-tree-id9118 . -85) (undo-tree-id9119 . -278) (undo-tree-id9120 . -281) (undo-tree-id9121 . -281) (undo-tree-id9122 . -281) (undo-tree-id9123 . -279) (undo-tree-id9124 . -275) (undo-tree-id9125 . -274) (undo-tree-id9126 . -228) (undo-tree-id9127 . -84) (undo-tree-id9128 . -83) (undo-tree-id9129 . -69) (undo-tree-id9130 . -68) (undo-tree-id9131 . -67) (undo-tree-id9132 . -281)) nil (26132 3572 423797 89000) 0 nil])
([nil nil ((#("    let mut state = State::new();" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 17 (face font-lock-variable-name-face fontified t) 17 20 (fontified t) 20 25 (face font-lock-type-face fontified t) 25 27 (fontified t) 27 30 (fontified t) 30 31 (face (rainbow-delimiters-depth-2-face) fontified t) 31 32 (face (rainbow-delimiters-depth-2-face) fontified t) 32 33 (fontified t)) . 263) (undo-tree-id9184 . -4) (undo-tree-id9185 . -8) (undo-tree-id9186 . -33) (t 26132 3572 444013 50000)) nil (26132 3578 113574 136000) 0 nil])
([nil nil ((#("        for feature in state.chip.unwrap() {" 0 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 19 (face font-lock-variable-name-face fontified t) 19 20 (fontified t) 20 22 (face font-lock-keyword-face fontified t) 22 23 (fontified t) 23 29 (fontified t) 29 34 (fontified t) 34 40 (fontified t) 40 41 (face (rainbow-delimiters-depth-3-face) fontified t) 41 42 (face (rainbow-delimiters-depth-3-face) fontified t) 42 43 (fontified t) 43 44 (face (rainbow-delimiters-depth-3-face) fontified t)) . 337) (undo-tree-id9167 . -8) (undo-tree-id9168 . -8) (undo-tree-id9169 . -44) (undo-tree-id9170 . -44) (undo-tree-id9171 . -44) (undo-tree-id9172 . -44) (undo-tree-id9173 . -44) (undo-tree-id9174 . -44) (undo-tree-id9175 . -44) (undo-tree-id9176 . -44) (undo-tree-id9177 . -44) (undo-tree-id9178 . -44) (undo-tree-id9179 . -44) (undo-tree-id9180 . -44) (undo-tree-id9181 . -44) (undo-tree-id9182 . -8) (undo-tree-id9183 . -44)) nil (26132 3578 113570 750000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 337) (undo-tree-id9166 . -1)) nil (26132 3578 113559 326000) 0 nil])
([nil nil ((#("            
" 0 12 (fontified t) 12 13 (fontified t)) . 337) (undo-tree-id9158 . -11) (undo-tree-id9159 . -11) (undo-tree-id9160 . -11) (undo-tree-id9161 . -11) (undo-tree-id9162 . -11) (undo-tree-id9163 . -11) (undo-tree-id9164 . -11) (undo-tree-id9165 . -13)) nil (26132 3578 113557 214000) 0 nil])
([nil nil ((#("        }" 0 8 (fontified t) 8 9 (face (rainbow-delimiters-depth-2-face) fontified t)) . 337) (undo-tree-id9156 . -9) (undo-tree-id9157 . -9)) nil (26132 3578 113548 411000) 0 nil])
([nil nil ((263 . 267) (t 26132 3578 124013 399000)) nil (26132 3592 722361 961000) 0 nil])
([nil nil ((267 . 279)) nil (26132 3592 722360 582000) 0 nil])
([nil nil ((#("let chip = S" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 8 (face font-lock-variable-name-face fontified t) 8 11 (fontified t) 11 12 (face font-lock-type-face fontified t)) . 267) (undo-tree-id9187 . -1) (undo-tree-id9188 . -1) (undo-tree-id9189 . -2) (undo-tree-id9190 . -2) (undo-tree-id9191 . -3) (undo-tree-id9192 . -3) (undo-tree-id9193 . -4) (undo-tree-id9194 . -4) (undo-tree-id9195 . -4) (undo-tree-id9196 . -4) (undo-tree-id9197 . -4) (undo-tree-id9198 . -4) (undo-tree-id9199 . -5) (undo-tree-id9200 . -5) (undo-tree-id9201 . -5) (undo-tree-id9202 . -6) (undo-tree-id9203 . -6) (undo-tree-id9204 . -7) (undo-tree-id9205 . -7) (undo-tree-id9206 . -7) (undo-tree-id9207 . -7) (undo-tree-id9208 . -8) (undo-tree-id9209 . -8) (undo-tree-id9210 . -9) (undo-tree-id9211 . -9) (undo-tree-id9212 . -9) (undo-tree-id9213 . -9) (undo-tree-id9214 . -9) (undo-tree-id9215 . -10) (undo-tree-id9216 . -10) (undo-tree-id9217 . -10) (undo-tree-id9218 . -11) (undo-tree-id9219 . -11) (undo-tree-id9220 . -11) (undo-tree-id9221 . -11) (undo-tree-id9222 . -11) (undo-tree-id9223 . -11) (undo-tree-id9224 . -12) (undo-tree-id9225 . -12) (undo-tree-id9226 . -12) (undo-tree-id9227 . -12) (undo-tree-id9228 . -12)) nil (26132 3592 722356 25000) 0 nil])
([nil nil ((342 . 350) (#("        " 0 8 (fontified nil)) . 341) (341 . 349) (341 . 342) (t 26132 3592 744014 297000)) nil (26132 3698 699284 977000) 0 nil])
([nil nil ((350 . 357)) nil (26132 3698 699283 942000) 0 nil])
([nil nil ((#("u" 0 1 (face font-lock-variable-name-face fontified t)) . -356) (undo-tree-id9355 . -1) (undo-tree-id9356 . -1) (undo-tree-id9357 . -1) (undo-tree-id9358 . -1) (undo-tree-id9359 . -1) (undo-tree-id9360 . -1) 357) nil (26132 3698 699283 3000) 0 nil])
([nil nil ((#("for ch" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 6 (face font-lock-variable-name-face fontified t)) . 350) (undo-tree-id9326 . -1) (undo-tree-id9327 . -1) (undo-tree-id9328 . -2) (undo-tree-id9329 . -2) (undo-tree-id9330 . -3) (undo-tree-id9331 . -3) (undo-tree-id9332 . -3) (undo-tree-id9333 . -3) (undo-tree-id9334 . -4) (undo-tree-id9335 . -4) (undo-tree-id9336 . -4) (undo-tree-id9337 . -5) (undo-tree-id9338 . -5) (undo-tree-id9339 . -5) (undo-tree-id9340 . -5) (undo-tree-id9341 . -6) (undo-tree-id9342 . -6) (undo-tree-id9343 . -6) (undo-tree-id9344 . -6) (undo-tree-id9345 . -6) (undo-tree-id9346 . -6) (undo-tree-id9347 . -6) (undo-tree-id9348 . -6) (undo-tree-id9349 . -6) (undo-tree-id9350 . -6) (undo-tree-id9351 . -6) (undo-tree-id9352 . -6) (undo-tree-id9353 . -6) (undo-tree-id9354 . -6)) nil (26132 3698 699277 982000) 0 nil])
([nil nil ((267 . 270)) nil (26132 3698 699259 480000) 0 nil])
([nil nil ((#("for" 0 3 (face font-lock-keyword-face fontified t)) . 267) (undo-tree-id9314 . -1) (undo-tree-id9315 . -1) (undo-tree-id9316 . -1) (undo-tree-id9317 . -1) (undo-tree-id9318 . -2) (undo-tree-id9319 . -2) (undo-tree-id9320 . -2) (undo-tree-id9321 . -3) (undo-tree-id9322 . -3) (undo-tree-id9323 . -3) (undo-tree-id9324 . -3) (undo-tree-id9325 . -3)) nil (26132 3698 699258 90000) 0 nil])
([nil nil ((251 . 260)) nil (26132 3698 699250 243000) 0 nil])
([nil nil ((260 . 263)) nil (26132 3698 699249 637000) 0 nil])
([nil nil ((220 . 221)) nil (26132 3698 699249 87000) 0 nil])
([nil nil ((#("N" 0 1 (face font-lock-string-face fontified t)) . -220) (undo-tree-id9308 . -1) (undo-tree-id9309 . -1) (undo-tree-id9310 . -1) (undo-tree-id9311 . -1) (undo-tree-id9312 . -1) (undo-tree-id9313 . -1) 221) nil (26132 3698 699248 203000) 0 nil])
([nil nil ((#("for" 0 3 (face font-lock-keyword-face fontified t)) . 260) (undo-tree-id9293 . -1) (undo-tree-id9294 . -1) (undo-tree-id9295 . -2) (undo-tree-id9296 . -2) (undo-tree-id9297 . -3) (undo-tree-id9298 . -3) (undo-tree-id9299 . -3) (undo-tree-id9300 . -3) (undo-tree-id9301 . -3) (undo-tree-id9302 . -3) (undo-tree-id9303 . -3) (undo-tree-id9304 . -3) (undo-tree-id9305 . -3) (undo-tree-id9306 . -3) (undo-tree-id9307 . -3)) nil (26132 3698 699243 271000) 0 nil])
([nil nil ((220 . 224)) nil (26132 3698 699232 836000) 0 nil])
([nil nil ((#("u" 0 1 (face font-lock-string-face fontified t)) . -222) (undo-tree-id9283 . -1) (undo-tree-id9284 . -1) (undo-tree-id9285 . -1) (undo-tree-id9286 . -1) (undo-tree-id9287 . -1) (undo-tree-id9288 . -1) (undo-tree-id9289 . -1) (#("p" 0 1 (face font-lock-string-face fontified t)) . -223) (undo-tree-id9290 . -1) (undo-tree-id9291 . -1) (undo-tree-id9292 . -1) 224) nil (26132 3698 699231 630000) 0 nil])
([nil nil ((222 . 231)) nil (26132 3698 699224 606000) 0 nil])
([nil nil ((262 . 271)) nil (26132 3698 699223 999000) 0 nil])
([nil nil ((271 . 275)) nil (26132 3698 699223 492000) 0 nil])
([nil nil ((275 . 276)) nil (26132 3698 699223 46000) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-variable-name-face fontified t)) . -275) (undo-tree-id9277 . -1) (undo-tree-id9278 . -1) (undo-tree-id9279 . -1) (undo-tree-id9280 . -1) (undo-tree-id9281 . -1) (undo-tree-id9282 . -1) 276) nil (26132 3698 699222 11000) 0 nil])
([nil nil ((275 . 287)) nil (26132 3698 699217 43000) 0 nil])
([nil nil ((286 . 290) (#("c" 0 1 (fontified nil)) . 286) (286 . 287) (#("chip" 0 4 (fontified nil)) . -286) (286 . 290) (#("c" 0 1 (fontified t)) . -286) (undo-tree-id9271 . -1) (undo-tree-id9272 . -1) (undo-tree-id9273 . -1) (undo-tree-id9274 . -1) (undo-tree-id9275 . -1) (undo-tree-id9276 . -1) 287) nil (26132 3698 699215 886000) 0 nil])
([nil nil ((290 . 291)) nil (26132 3698 699210 912000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -290) (undo-tree-id9267 . -1) (undo-tree-id9268 . -1) (undo-tree-id9269 . -1) (undo-tree-id9270 . -1) 291) nil (26132 3698 699210 107000) 0 nil])
([nil nil ((290 . 293)) nil (26132 3698 699206 996000) 0 nil])
([nil nil ((294 . 302) (#("            " 0 12 (fontified nil)) . 293) (undo-tree-id9263 . -8) (undo-tree-id9264 . -8) (undo-tree-id9265 . -8) (undo-tree-id9266 . -8) (301 . 305) (292 . 302)) nil (26132 3698 699206 106000) 0 nil])
([nil nil ((293 . 305)) nil (26132 3698 699202 206000) 0 nil])
([nil nil ((305 . 306)) nil (26132 3698 699201 645000) 0 nil])
([nil nil ((apply yas--snippet-revive 305 315 #s(yas--snippet nil nil #s(yas--exit 314 nil) 84 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 314 nil) 84 nil nil nil nil)) (305 . 315) (#("println!($0)" 0 12 (fontified nil)) . 305) (305 . 317) (#("p" 0 1 (fontified nil)) . 305) (305 . 306) (#("println!(…)" 0 11 (fontified nil)) . -305) (305 . 316) (#("p" 0 1 (fontified t)) . -305) (undo-tree-id9258 . -1) (undo-tree-id9259 . -1) (undo-tree-id9260 . -1) (undo-tree-id9261 . -1) (undo-tree-id9262 . -1) 306) nil (26132 3698 699200 170000) 0 nil])
([nil nil ((314 . 316)) nil (26132 3698 699194 934000) 0 nil])
([nil nil ((315 . 327)) nil (26132 3698 699194 384000) 0 nil])
([nil nil ((#("k" 0 1 (face font-lock-string-face fontified t)) . -325) (undo-tree-id9248 . -1) (undo-tree-id9249 . -1) (undo-tree-id9250 . -1) (undo-tree-id9251 . -1) (undo-tree-id9252 . -1) (undo-tree-id9253 . -1) (undo-tree-id9254 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -326) (undo-tree-id9255 . -1) (undo-tree-id9256 . -1) (undo-tree-id9257 . -1) 327) nil (26132 3698 699193 226000) 0 nil])
([nil nil ((325 . 327)) nil (26132 3698 699185 870000) 0 nil])
([nil nil ((290 . 292)) nil (26132 3698 699185 339000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -291) (undo-tree-id9243 . -1) (undo-tree-id9244 . -1) (undo-tree-id9245 . -1) (undo-tree-id9246 . -1) (undo-tree-id9247 . -1) 292) nil (26132 3698 699184 451000) 0 nil])
([nil nil ((291 . 292)) nil (26132 3698 699180 529000) 0 nil])
([nil nil ((apply yas--snippet-revive 291 302 #s(yas--snippet nil nil #s(yas--exit 302 nil) 85 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 302 nil) 85 nil nil nil nil)) (291 . 302) (#("into_iter()$0" 0 13 (fontified nil)) . 291) (291 . 304) (#("i" 0 1 (fontified nil)) . 291) (291 . 292) (#("into_iter() (as IntoIterator)" 0 29 (fontified nil)) . -291) (291 . 320) (#("i" 0 1 (fontified t)) . -291) (undo-tree-id9237 . -1) (undo-tree-id9238 . -1) (undo-tree-id9239 . -1) (undo-tree-id9240 . -1) (undo-tree-id9241 . -1) (undo-tree-id9242 . -1) 292) nil (26132 3698 699179 249000) 0 nil])
([nil nil ((302 . 304)) nil (26132 3698 699173 398000) 0 nil])
([nil nil ((apply yas--snippet-revive 303 314 #s(yas--snippet nil nil #s(yas--exit 314 nil) 86 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 314 nil) 86 nil nil nil nil)) (303 . 314) (#("enumerate()$0" 0 13 (fontified nil)) . 303) (303 . 316) (#("e" 0 1 (fontified nil)) . 303) (303 . 304) (#("enumerate() (as Iterator)" 0 25 (fontified nil)) . -303) (303 . 328) (#("e" 0 1 (fontified t)) . -303) (undo-tree-id9232 . -1) (undo-tree-id9233 . -1) (undo-tree-id9234 . -1) (undo-tree-id9235 . -1) (undo-tree-id9236 . -1) 304) nil (26132 3698 699171 512000) 0 nil])
([nil nil ((275 . 279)) nil (26132 3698 699166 292000) 0 nil])
([nil nil ((#("m" 0 1 (face font-lock-variable-name-face fontified t)) . -278) (undo-tree-id9229 . -1) (undo-tree-id9230 . -1) (undo-tree-id9231 . -1) 279) nil (26132 3698 699164 522000) 0 nil])
([nil nil ((278 . 279)) nil (26132 3698 699156 973000) 0 nil])
([nil nil ((275 . 276)) nil (26132 3698 699155 844000) 0 nil])
([nil nil ((287 . 288)) nil (26132 3698 699151 770000) 0 nil])
([nil nil ((357 . 360) (t 26132 3698 750687 470000)) nil (26132 3718 712165 758000) 0 nil])
([nil nil ((361 . 365)) nil (26132 3718 712164 988000) 0 nil])
([nil nil ((363 . 366) (#("id" 0 2 (fontified nil)) . 363) (363 . 365) (#("idx" 0 3 (fontified nil)) . -363) (363 . 366) (#("id" 0 2 (fontified t)) . -363) (undo-tree-id9376 . -2) (undo-tree-id9377 . -2) (undo-tree-id9378 . -1) (undo-tree-id9379 . -1) (undo-tree-id9380 . -1) (undo-tree-id9381 . -1) (undo-tree-id9382 . -2) (undo-tree-id9383 . -2) 365) nil (26132 3718 712163 750000) 0 nil])
([nil nil ((360 . 364)) nil (26132 3718 712157 557000) 0 nil])
([nil nil ((363 . 365)) nil (26132 3718 712156 957000) 0 nil])
([nil nil ((#("L" 0 1 (face rust-string-interpolation fontified t)) . -364) (undo-tree-id9373 . -1) (undo-tree-id9374 . -1) (undo-tree-id9375 . -1) 365) nil (26132 3718 712156 117000) 0 nil])
([nil nil ((364 . 365)) nil (26132 3718 712153 540000) 0 nil])
([nil nil ((372 . 375)) nil (26132 3718 712153 4000) 0 nil])
([nil nil ((374 . 381) (#("f" 0 1 (fontified nil)) . 374) (374 . 375) (#("feature" 0 7 (fontified nil)) . -374) (374 . 381) (#("f" 0 1 (fontified t)) . -374) (undo-tree-id9366 . -1) (undo-tree-id9367 . -1) (undo-tree-id9368 . -1) (undo-tree-id9369 . -1) (undo-tree-id9370 . -1) (undo-tree-id9371 . -1) (undo-tree-id9372 . -1) 375) nil (26132 3718 712151 652000) 0 nil])
([nil nil ((381 . 383)) nil (26132 3718 712145 152000) 0 nil])
([nil nil ((apply yas--snippet-revive 382 396 #s(yas--snippet nil nil #s(yas--exit 396 nil) 87 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 396 nil) 87 nil nil nil nil)) (382 . 396) (#("feature_type()$0" 0 16 (fontified nil)) . 382) (382 . 398) (#("f" 0 1 (fontified nil)) . 382) (382 . 383) (#("feature_type()" 0 14 (fontified nil)) . -382) (382 . 396) (#("f" 0 1 (fontified t)) . -382) (undo-tree-id9361 . -1) (undo-tree-id9362 . -1) (undo-tree-id9363 . -1) (undo-tree-id9364 . -1) (undo-tree-id9365 . -1) 383) nil (26132 3718 712142 562000) 0 nil])
([nil nil ((397 . 398)) nil (26132 3718 712129 8000) 0 nil])
([nil nil ((398 . 411) (t 26132 3718 724022 29000)) nil (26132 3761 468838 33000) 0 nil])
([nil nil ((411 . 413)) nil (26132 3761 468837 371000) 0 nil])
([nil nil ((apply yas--snippet-revive 411 421 #s(yas--snippet nil nil #s(yas--exit 420 nil) 88 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 420 nil) 88 nil nil nil nil)) (411 . 421) (#("println!($0)" 0 12 (fontified nil)) . 411) (411 . 423) (#("pr" 0 2 (fontified nil)) . 411) (411 . 413) (#("println!(…)" 0 11 (fontified nil)) . -411) (411 . 422) (#("pr" 0 2 (fontified t)) . -411) (undo-tree-id9404 . -2) (undo-tree-id9405 . -1) (undo-tree-id9406 . -1) (undo-tree-id9407 . -2) (undo-tree-id9408 . -2) (undo-tree-id9409 . -2) (undo-tree-id9410 . -2) 413) nil (26132 3761 468835 682000) 0 nil])
([nil nil ((420 . 422)) nil (26132 3761 468658 247000) 0 nil])
([nil nil ((421 . 428)) nil (26132 3761 468657 699000) 0 nil])
([nil nil ((429 . 434)) nil (26132 3761 468657 87000) 0 nil])
([nil nil ((#("fea" 0 3 (fontified t)) . -431) (undo-tree-id9392 . -3) (undo-tree-id9393 . -3) (undo-tree-id9394 . -1) (undo-tree-id9395 . -1) (undo-tree-id9396 . -1) (undo-tree-id9397 . -2) (undo-tree-id9398 . -2) (undo-tree-id9399 . -3) (undo-tree-id9400 . -3) (undo-tree-id9401 . -3) (undo-tree-id9402 . -3) (undo-tree-id9403 . -3) 434) nil (26132 3761 468656 46000) 0 nil])
([nil nil ((428 . 431)) nil (26132 3761 468647 594000) 0 nil])
([nil nil ((433 . 435)) nil (26132 3761 468647 50000) 0 nil])
([nil nil ((434 . 441) (#("f" 0 1 (fontified nil)) . 434) (434 . 435) (#("feature" 0 7 (fontified nil)) . -434) (434 . 441) (#("f" 0 1 (fontified t)) . -434) (undo-tree-id9384 . -1) (undo-tree-id9385 . -1) (undo-tree-id9386 . -1) (undo-tree-id9387 . -1) (undo-tree-id9388 . -1) (undo-tree-id9389 . -1) (undo-tree-id9390 . -1) (undo-tree-id9391 . -1) 435) nil (26132 3761 468645 340000) 0 nil])
([nil nil ((441 . 442)) nil (26132 3761 468632 803000) 0 nil])
([nil nil ((apply yas--snippet-revive 442 448 #s(yas--snippet nil nil #s(yas--exit 448 nil) 89 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 448 nil) 89 nil nil nil nil)) (442 . 448) (#("name()$0" 0 8 (fontified nil)) . 442) (442 . 450) (#("name()" 0 6 (fontified nil)) . -442) (442 . 448)) nil (26132 3761 468630 635000) 0 nil])
([nil nil ((450 . 451)) nil (26132 3761 468626 145000) 0 nil])
([nil nil ((#("println!(\"Feature type {}: {:?}\", idx, feature.feature_type());" 0 8 (face rust-builtin-formatting-macro fontified t) 8 9 (face (rainbow-delimiters-depth-4-face) fontified t) 9 23 (face font-lock-string-face fontified t) 23 25 (face rust-string-interpolation fontified t) 25 27 (face font-lock-string-face fontified t) 27 31 (face rust-string-interpolation fontified t) 31 32 (face font-lock-string-face fontified t) 32 34 (fontified t) 34 39 (fontified t) 39 47 (fontified t) 47 59 (fontified t) 59 60 (face (rainbow-delimiters-depth-5-face) fontified t) 60 61 (face (rainbow-delimiters-depth-5-face) fontified t) 61 62 (face (rainbow-delimiters-depth-4-face) fontified t) 62 63 (fontified t)) . 335) (undo-tree-id9531 . -25) (undo-tree-id9532 . -25) (undo-tree-id9533 . -35) (undo-tree-id9534 . -40) (undo-tree-id9535 . -40) (undo-tree-id9536 . -40) (undo-tree-id9537 . -40) (undo-tree-id9538 . -40) (undo-tree-id9539 . -40) (undo-tree-id9540 . -63) (t 26132 3761 490691 321000)) nil (26132 3809 11261 944000) 0 nil])
([nil nil ((335 . 338)) nil (26132 3809 11254 616000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -336) (undo-tree-id9521 . -1) (undo-tree-id9522 . -1) (undo-tree-id9523 . -1) (undo-tree-id9524 . -1) (undo-tree-id9525 . -1) (undo-tree-id9526 . -1) (undo-tree-id9527 . -1) (#("f" 0 1 (fontified t)) . -337) (undo-tree-id9528 . -1) (undo-tree-id9529 . -1) (undo-tree-id9530 . -1) 338) nil (26132 3809 11253 436000) 0 nil])
([nil nil ((336 . 338)) nil (26132 3809 11246 746000) 0 nil])
([nil nil ((338 . 339)) nil (26132 3809 11246 230000) 0 nil])
([nil nil ((338 . 345) (#("f" 0 1 (fontified nil)) . 338) (338 . 339) (#("feature" 0 7 (fontified nil)) . -338) (338 . 345) (#("f" 0 1 (fontified t)) . -338) (undo-tree-id9511 . -1) (undo-tree-id9512 . -1) (undo-tree-id9513 . -1) (undo-tree-id9514 . -1) (undo-tree-id9515 . -1) (undo-tree-id9516 . -1) (undo-tree-id9517 . -1) (undo-tree-id9518 . -1) (undo-tree-id9519 . -1) (undo-tree-id9520 . -1) 339) nil (26132 3809 11245 13000) 0 nil])
([nil nil ((345 . 347)) nil (26132 3809 11237 799000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -346) (undo-tree-id9508 . -1) (undo-tree-id9509 . -1) (undo-tree-id9510 . -1) 347) nil (26132 3809 11237 71000) 0 nil])
([nil nil ((346 . 347)) nil (26132 3809 11234 428000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -346) (undo-tree-id9503 . -1) (undo-tree-id9504 . -1) (undo-tree-id9505 . -1) (undo-tree-id9506 . -1) (undo-tree-id9507 . -1) 347) nil (26132 3809 11233 642000) 0 nil])
([nil nil ((346 . 347)) nil (26132 3809 11230 160000) 0 nil])
([nil nil ((apply yas--snippet-revive 346 360 #s(yas--snippet nil nil #s(yas--exit 360 nil) 90 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 360 nil) 90 nil nil nil nil)) (346 . 360) (#("feature_type()$0" 0 16 (fontified nil)) . 346) (346 . 362) (#("f" 0 1 (fontified nil)) . 346) (346 . 347) (#("feature_type()" 0 14 (fontified nil)) . -346) (346 . 360) (#("f" 0 1 (fontified t)) . -346) (undo-tree-id9498 . -1) (undo-tree-id9499 . -1) (undo-tree-id9500 . -1) (undo-tree-id9501 . -1) (undo-tree-id9502 . -1) 347) nil (26132 3809 11228 875000) 0 nil])
([nil nil ((360 . 371)) nil (26132 3809 11224 317000) 0 nil])
([nil nil ((#("Feature" 0 7 (face font-lock-type-face fontified t)) . -364) (undo-tree-id9478 . -7) (undo-tree-id9479 . -1) (undo-tree-id9480 . -1) (undo-tree-id9481 . -2) (undo-tree-id9482 . -2) (undo-tree-id9483 . -3) (undo-tree-id9484 . -3) (undo-tree-id9485 . -3) (undo-tree-id9486 . -3) (undo-tree-id9487 . -4) (undo-tree-id9488 . -4) (undo-tree-id9489 . -4) (undo-tree-id9490 . -5) (undo-tree-id9491 . -5) (undo-tree-id9492 . -6) (undo-tree-id9493 . -6) (undo-tree-id9494 . -7) (undo-tree-id9495 . -7) (undo-tree-id9496 . -7) (undo-tree-id9497 . -7) 371) nil (26132 3809 11223 37000) 0 nil])
([nil nil ((364 . 367)) nil (26132 3809 11209 136000) 0 nil])
([nil nil ((#("S" 0 1 (face font-lock-type-face fontified t)) . -364) (undo-tree-id9446 . -1) (undo-tree-id9447 . -1) (undo-tree-id9448 . -1) (undo-tree-id9449 . -1) (undo-tree-id9450 . -1) (undo-tree-id9451 . -1) (undo-tree-id9452 . -1) (undo-tree-id9453 . -1) (undo-tree-id9454 . -1) (undo-tree-id9455 . -1) (undo-tree-id9456 . -1) (undo-tree-id9457 . -1) (undo-tree-id9458 . -1) (undo-tree-id9459 . -1) (undo-tree-id9460 . -1) (undo-tree-id9461 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -365) (undo-tree-id9462 . -1) (undo-tree-id9463 . -1) (undo-tree-id9464 . -1) (undo-tree-id9465 . -1) (undo-tree-id9466 . -1) (undo-tree-id9467 . -1) (undo-tree-id9468 . -1) (undo-tree-id9469 . -1) (undo-tree-id9470 . -1) (undo-tree-id9471 . -1) (undo-tree-id9472 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -366) (undo-tree-id9473 . -1) (undo-tree-id9474 . -1) (undo-tree-id9475 . -1) (undo-tree-id9476 . -1) (undo-tree-id9477 . -1) 367) nil (26132 3809 11207 3000) 0 nil])
([nil nil ((364 . 367)) nil (26132 3809 11185 759000) 0 nil])
([nil nil ((364 . 371) (#("sen" 0 3 (fontified nil)) . 364) (364 . 367) (#("sensors" 0 7 (fontified nil)) . -364) (364 . 371) (#("sen" 0 3 (fontified t)) . -364) (undo-tree-id9436 . -3) (undo-tree-id9437 . -1) (undo-tree-id9438 . -1) (undo-tree-id9439 . -2) (undo-tree-id9440 . -2) (undo-tree-id9441 . -2) (undo-tree-id9442 . -3) (undo-tree-id9443 . -3) (undo-tree-id9444 . -3) (undo-tree-id9445 . -3) 367) nil (26132 3809 11184 544000) 0 nil])
([nil nil ((371 . 374)) nil (26132 3809 11176 772000) 0 nil])
([nil nil ((373 . 384) (#("F" 0 1 (fontified nil)) . 373) (373 . 374) (#("FeatureType" 0 11 (fontified nil)) . -373) (373 . 384) (#("F" 0 1 (face font-lock-type-face fontified t)) . -373) (undo-tree-id9431 . -1) (undo-tree-id9432 . -1) (undo-tree-id9433 . -1) (undo-tree-id9434 . -1) (undo-tree-id9435 . -1) 374) nil (26132 3809 11175 623000) 0 nil])
([nil nil ((384 . 386)) nil (26132 3809 11171 491000) 0 nil])
([nil nil ((386 . 390)) nil (26132 3809 11170 534000) 0 nil])
([nil nil ((apply yas--snippet-revive 386 406 #s(yas--snippet nil nil #s(yas--exit 406 nil) 91 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 406 nil) 91 nil nil nil nil)) (386 . 406) (#("SENSORS_FEATURE_TEMP$0" 0 22 (fontified nil)) . 386) (386 . 408) (#("TEMP" 0 4 (fontified nil)) . 386) (386 . 390) (#("SENSORS_FEATURE_TEMP" 0 20 (fontified nil)) . -386) (386 . 406) (#("TEMP" 0 4 (face font-lock-type-face fontified t)) . -386) (undo-tree-id9417 . -4) (undo-tree-id9418 . -1) (undo-tree-id9419 . -1) (undo-tree-id9420 . -1) (undo-tree-id9421 . -1) (undo-tree-id9422 . -2) (undo-tree-id9423 . -2) (undo-tree-id9424 . -2) (undo-tree-id9425 . -3) (undo-tree-id9426 . -3) (undo-tree-id9427 . -4) (undo-tree-id9428 . -4) (undo-tree-id9429 . -4) (undo-tree-id9430 . -4) 390) nil (26132 3809 11168 669000) 0 nil])
([nil nil ((406 . 408)) nil (26132 3809 11157 703000) 0 nil])
([nil nil ((409 . 425) (#("            " 0 12 (fontified nil)) . 409) (undo-tree-id9411 . -12) (undo-tree-id9412 . -12) (undo-tree-id9413 . -12) (undo-tree-id9414 . -12) (undo-tree-id9415 . -12) (undo-tree-id9416 . -12) (461 . 462)) nil (26132 3809 11155 556000) 0 nil])
([nil nil ((465 . 478)) nil (26132 3809 11140 785000) 0 nil])
([nil nil ((364 . 365) (t 26132 3809 64027 575000)) nil (26132 3820 616189 581000) 0 nil])
([nil nil ((#("Feature {}" 0 8 (face font-lock-string-face fontified t) 8 10 (face rust-string-interpolation fontified t)) . -436) (undo-tree-id9668 . -7) (undo-tree-id9669 . -10) (undo-tree-id9670 . -7) (undo-tree-id9671 . -7) (undo-tree-id9672 . -7) (undo-tree-id9673 . -7) (undo-tree-id9674 . -7) (undo-tree-id9675 . -8) (undo-tree-id9676 . -8) (undo-tree-id9677 . -8) (undo-tree-id9678 . -9) (undo-tree-id9679 . -9) (undo-tree-id9680 . -9) (undo-tree-id9681 . -9) (undo-tree-id9682 . -9) (undo-tree-id9683 . -10) 446 (t 26132 3820 670694 954000)) nil (26132 3854 718474 497000) 0 nil])
([nil nil ((436 . 446)) nil (26132 3854 718464 53000) 0 nil])
([nil nil ((#("f" 0 1 (face font-lock-string-face fontified t)) . -436) (undo-tree-id9664 . -1) (undo-tree-id9665 . -1) (undo-tree-id9666 . -1) (undo-tree-id9667 . -1) 437) nil (26132 3854 718463 269000) 0 nil])
([nil nil ((436 . 437)) nil (26132 3854 718460 187000) 0 nil])
([nil nil ((444 . 447)) nil (26132 3854 718459 590000) 0 nil])
([nil nil ((#(";" 0 1 (face font-lock-string-face fontified t)) . -444) (undo-tree-id9643 . -1) (undo-tree-id9644 . -1) (undo-tree-id9645 . -1) (undo-tree-id9646 . -1) (undo-tree-id9647 . -1) (undo-tree-id9648 . -1) (undo-tree-id9649 . -1) (undo-tree-id9650 . -1) (undo-tree-id9651 . -1) (undo-tree-id9652 . -1) (undo-tree-id9653 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -445) (undo-tree-id9654 . -1) (undo-tree-id9655 . -1) (undo-tree-id9656 . -1) (undo-tree-id9657 . -1) (undo-tree-id9658 . -1) (undo-tree-id9659 . -1) (undo-tree-id9660 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -446) (undo-tree-id9661 . -1) (undo-tree-id9662 . -1) (undo-tree-id9663 . -1) 447) nil (26132 3854 718457 892000) 0 nil])
([nil nil ((444 . 447)) nil (26132 3854 718443 598000) 0 nil])
([nil nil ((#("k" 0 1 (face font-lock-string-face fontified t)) . -444) (undo-tree-id9624 . -1) (undo-tree-id9625 . -1) (undo-tree-id9626 . -1) (undo-tree-id9627 . -1) (undo-tree-id9628 . -1) (undo-tree-id9629 . -1) (undo-tree-id9630 . -1) (undo-tree-id9631 . -1) (undo-tree-id9632 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -445) (undo-tree-id9633 . -1) (undo-tree-id9634 . -1) (undo-tree-id9635 . -1) (undo-tree-id9636 . -1) (undo-tree-id9637 . -1) (undo-tree-id9638 . -1) (undo-tree-id9639 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -446) (undo-tree-id9640 . -1) (undo-tree-id9641 . -1) (undo-tree-id9642 . -1) 447) nil (26132 3854 718442 118000) 0 nil])
([nil nil ((444 . 450)) nil (26132 3854 718428 677000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-6-face) fontified t)) . -468) (undo-tree-id9622 . -1) (undo-tree-id9623 . -1) 469) nil (26132 3854 718427 875000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -463) (undo-tree-id9554 . -1) (undo-tree-id9555 . -1) (undo-tree-id9556 . -1) (undo-tree-id9557 . -1) (undo-tree-id9558 . -1) (undo-tree-id9559 . -1) (undo-tree-id9560 . -1) (undo-tree-id9561 . -1) (undo-tree-id9562 . -1) (undo-tree-id9563 . -1) (undo-tree-id9564 . -1) (undo-tree-id9565 . -1) (undo-tree-id9566 . -1) (undo-tree-id9567 . -1) (undo-tree-id9568 . -1) (undo-tree-id9569 . -1) (undo-tree-id9570 . -1) (undo-tree-id9571 . -1) (undo-tree-id9572 . -1) (#("a" 0 1 (fontified t)) . -464) (undo-tree-id9573 . -1) (undo-tree-id9574 . -1) (undo-tree-id9575 . -1) (undo-tree-id9576 . -1) (undo-tree-id9577 . -1) (undo-tree-id9578 . -1) (undo-tree-id9579 . -1) (undo-tree-id9580 . -1) (undo-tree-id9581 . -1) (undo-tree-id9582 . -1) (undo-tree-id9583 . -1) (undo-tree-id9584 . -1) (undo-tree-id9585 . -1) (undo-tree-id9586 . -1) (undo-tree-id9587 . -1) (undo-tree-id9588 . -1) (undo-tree-id9589 . -1) (#("m" 0 1 (fontified t)) . -465) (undo-tree-id9590 . -1) (undo-tree-id9591 . -1) (undo-tree-id9592 . -1) (undo-tree-id9593 . -1) (undo-tree-id9594 . -1) (undo-tree-id9595 . -1) (undo-tree-id9596 . -1) (undo-tree-id9597 . -1) (undo-tree-id9598 . -1) (undo-tree-id9599 . -1) (undo-tree-id9600 . -1) (undo-tree-id9601 . -1) (undo-tree-id9602 . -1) (undo-tree-id9603 . -1) (undo-tree-id9604 . -1) (#("e" 0 1 (fontified t)) . -466) (undo-tree-id9605 . -1) (undo-tree-id9606 . -1) (undo-tree-id9607 . -1) (undo-tree-id9608 . -1) (undo-tree-id9609 . -1) (undo-tree-id9610 . -1) (undo-tree-id9611 . -1) (undo-tree-id9612 . -1) (undo-tree-id9613 . -1) (undo-tree-id9614 . -1) (undo-tree-id9615 . -1) (undo-tree-id9616 . -1) (undo-tree-id9617 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-6-face) fontified t)) . -467) (undo-tree-id9618 . -1) (undo-tree-id9619 . -1) (undo-tree-id9620 . -1) (undo-tree-id9621 . -1) 468) nil (26132 3854 718423 18000) 0 nil])
([nil nil ((463 . 464)) nil (26132 3854 718032 102000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -463) (undo-tree-id9549 . -1) (undo-tree-id9550 . -1) (undo-tree-id9551 . -1) (undo-tree-id9552 . -1) (undo-tree-id9553 . -1) 464) nil (26132 3854 718031 220000) 0 nil])
([nil nil ((463 . 464)) nil (26132 3854 718027 174000) 0 nil])
([nil nil ((apply yas--snippet-revive 463 474 #s(yas--snippet nil nil #s(yas--exit 474 nil) 92 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 474 nil) 92 nil nil nil nil)) (463 . 474) (#("get_label()$0" 0 13 (fontified nil)) . 463) (463 . 476) (#("l" 0 1 (fontified nil)) . 463) (463 . 464) (#("get_label()" 0 11 (fontified nil)) . -463) (463 . 474) (#("l" 0 1 (fontified t)) . -463) (undo-tree-id9544 . -1) (undo-tree-id9545 . -1) (undo-tree-id9546 . -1) (undo-tree-id9547 . -1) (undo-tree-id9548 . -1) 464) nil (26132 3854 718025 507000) 0 nil])
([nil nil ((451 . 452)) nil (26132 3854 718019 786000) 0 nil])
([nil nil ((#(":" 0 1 (face rust-string-interpolation fontified t)) . -451) (undo-tree-id9541 . -1) (undo-tree-id9542 . -1) (undo-tree-id9543 . -1) 452) nil (26132 3854 718017 762000) 0 nil])
([nil nil ((451 . 453)) nil (26132 3854 718006 862000) 0 nil])
([nil nil ((436 . 440) (t 26132 3854 740697 45000)) nil (26132 3874 85534 643000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t)) . -436) (undo-tree-id9684 . -1) (undo-tree-id9685 . -1) (undo-tree-id9686 . -1) (undo-tree-id9687 . -1) (undo-tree-id9688 . -1) (undo-tree-id9689 . -1) (undo-tree-id9690 . -1) (undo-tree-id9691 . -1) (undo-tree-id9692 . -1) (undo-tree-id9693 . -1) (undo-tree-id9694 . -1) (undo-tree-id9695 . -1) (undo-tree-id9696 . -1) (undo-tree-id9697 . -1) (undo-tree-id9698 . -1) (undo-tree-id9699 . -1) (undo-tree-id9700 . -1) (undo-tree-id9701 . -1) (undo-tree-id9702 . -1) (undo-tree-id9703 . -1) (undo-tree-id9704 . -1) (undo-tree-id9705 . -1) (undo-tree-id9706 . -1) (undo-tree-id9707 . -1) (undo-tree-id9708 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -437) (undo-tree-id9709 . -1) (undo-tree-id9710 . -1) (undo-tree-id9711 . -1) (undo-tree-id9712 . -1) (undo-tree-id9713 . -1) (undo-tree-id9714 . -1) (undo-tree-id9715 . -1) (undo-tree-id9716 . -1) (undo-tree-id9717 . -1) (undo-tree-id9718 . -1) (undo-tree-id9719 . -1) (undo-tree-id9720 . -1) (undo-tree-id9721 . -1) (undo-tree-id9722 . -1) (undo-tree-id9723 . -1) (undo-tree-id9724 . -1) (undo-tree-id9725 . -1) (undo-tree-id9726 . -1) (undo-tree-id9727 . -1) (undo-tree-id9728 . -1) (undo-tree-id9729 . -1) (undo-tree-id9730 . -1) (undo-tree-id9731 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -438) (undo-tree-id9732 . -1) (undo-tree-id9733 . -1) (undo-tree-id9734 . -1) (undo-tree-id9735 . -1) (undo-tree-id9736 . -1) (undo-tree-id9737 . -1) (undo-tree-id9738 . -1) (undo-tree-id9739 . -1) (undo-tree-id9740 . -1) (undo-tree-id9741 . -1) (undo-tree-id9742 . -1) (undo-tree-id9743 . -1) (undo-tree-id9744 . -1) (undo-tree-id9745 . -1) (undo-tree-id9746 . -1) (undo-tree-id9747 . -1) (undo-tree-id9748 . -1) (undo-tree-id9749 . -1) (undo-tree-id9750 . -1) (undo-tree-id9751 . -1) (undo-tree-id9752 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -439) (undo-tree-id9753 . -1) (undo-tree-id9754 . -1) (undo-tree-id9755 . -1) (undo-tree-id9756 . -1) (undo-tree-id9757 . -1) (undo-tree-id9758 . -1) (undo-tree-id9759 . -1) (undo-tree-id9760 . -1) (undo-tree-id9761 . -1) (undo-tree-id9762 . -1) (undo-tree-id9763 . -1) (undo-tree-id9764 . -1) (undo-tree-id9765 . -1) (undo-tree-id9766 . -1) (undo-tree-id9767 . -1) (undo-tree-id9768 . -1) (undo-tree-id9769 . -1) (undo-tree-id9770 . -1) (undo-tree-id9771 . -1) 440 (t 26132 3874 107364 901000)) nil (26132 3877 229556 37000) 0 nil])
([nil current ((436 . 440)) nil (26132 3877 229397 110000) 0 nil])
nil
